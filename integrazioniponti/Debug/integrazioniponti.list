
integrazioniponti.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000604c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  0800610c  0800610c  0001610c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800613c  0800613c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800613c  0800613c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800613c  0800613c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800613c  0800613c  0001613c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006140  08006140  00016140  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006144  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f0  2000000c  08006150  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002fc  08006150  000202fc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017306  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002850  00000000  00000000  0003733a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000016e8  00000000  00000000  00039b90  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000015b0  00000000  00000000  0003b278  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016bcc  00000000  00000000  0003c828  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000dc7b  00000000  00000000  000533f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007dcc8  00000000  00000000  0006106f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ded37  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005574  00000000  00000000  000dedb4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080060f4 	.word	0x080060f4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080060f4 	.word	0x080060f4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_i2f>:
 8000220:	b570      	push	{r4, r5, r6, lr}
 8000222:	2800      	cmp	r0, #0
 8000224:	d03d      	beq.n	80002a2 <__aeabi_i2f+0x82>
 8000226:	17c3      	asrs	r3, r0, #31
 8000228:	18c5      	adds	r5, r0, r3
 800022a:	405d      	eors	r5, r3
 800022c:	0fc4      	lsrs	r4, r0, #31
 800022e:	0028      	movs	r0, r5
 8000230:	f000 f880 	bl	8000334 <__clzsi2>
 8000234:	229e      	movs	r2, #158	; 0x9e
 8000236:	1a12      	subs	r2, r2, r0
 8000238:	2a96      	cmp	r2, #150	; 0x96
 800023a:	dc07      	bgt.n	800024c <__aeabi_i2f+0x2c>
 800023c:	b2d2      	uxtb	r2, r2
 800023e:	2808      	cmp	r0, #8
 8000240:	dd33      	ble.n	80002aa <__aeabi_i2f+0x8a>
 8000242:	3808      	subs	r0, #8
 8000244:	4085      	lsls	r5, r0
 8000246:	0268      	lsls	r0, r5, #9
 8000248:	0a40      	lsrs	r0, r0, #9
 800024a:	e023      	b.n	8000294 <__aeabi_i2f+0x74>
 800024c:	2a99      	cmp	r2, #153	; 0x99
 800024e:	dd0b      	ble.n	8000268 <__aeabi_i2f+0x48>
 8000250:	2305      	movs	r3, #5
 8000252:	0029      	movs	r1, r5
 8000254:	1a1b      	subs	r3, r3, r0
 8000256:	40d9      	lsrs	r1, r3
 8000258:	0003      	movs	r3, r0
 800025a:	331b      	adds	r3, #27
 800025c:	409d      	lsls	r5, r3
 800025e:	002b      	movs	r3, r5
 8000260:	1e5d      	subs	r5, r3, #1
 8000262:	41ab      	sbcs	r3, r5
 8000264:	4319      	orrs	r1, r3
 8000266:	000d      	movs	r5, r1
 8000268:	2805      	cmp	r0, #5
 800026a:	dd01      	ble.n	8000270 <__aeabi_i2f+0x50>
 800026c:	1f43      	subs	r3, r0, #5
 800026e:	409d      	lsls	r5, r3
 8000270:	002b      	movs	r3, r5
 8000272:	490f      	ldr	r1, [pc, #60]	; (80002b0 <__aeabi_i2f+0x90>)
 8000274:	400b      	ands	r3, r1
 8000276:	076e      	lsls	r6, r5, #29
 8000278:	d009      	beq.n	800028e <__aeabi_i2f+0x6e>
 800027a:	260f      	movs	r6, #15
 800027c:	4035      	ands	r5, r6
 800027e:	2d04      	cmp	r5, #4
 8000280:	d005      	beq.n	800028e <__aeabi_i2f+0x6e>
 8000282:	3304      	adds	r3, #4
 8000284:	015d      	lsls	r5, r3, #5
 8000286:	d502      	bpl.n	800028e <__aeabi_i2f+0x6e>
 8000288:	229f      	movs	r2, #159	; 0x9f
 800028a:	400b      	ands	r3, r1
 800028c:	1a12      	subs	r2, r2, r0
 800028e:	019b      	lsls	r3, r3, #6
 8000290:	0a58      	lsrs	r0, r3, #9
 8000292:	b2d2      	uxtb	r2, r2
 8000294:	0240      	lsls	r0, r0, #9
 8000296:	05d2      	lsls	r2, r2, #23
 8000298:	0a40      	lsrs	r0, r0, #9
 800029a:	07e4      	lsls	r4, r4, #31
 800029c:	4310      	orrs	r0, r2
 800029e:	4320      	orrs	r0, r4
 80002a0:	bd70      	pop	{r4, r5, r6, pc}
 80002a2:	2400      	movs	r4, #0
 80002a4:	2200      	movs	r2, #0
 80002a6:	2000      	movs	r0, #0
 80002a8:	e7f4      	b.n	8000294 <__aeabi_i2f+0x74>
 80002aa:	0268      	lsls	r0, r5, #9
 80002ac:	0a40      	lsrs	r0, r0, #9
 80002ae:	e7f1      	b.n	8000294 <__aeabi_i2f+0x74>
 80002b0:	fbffffff 	.word	0xfbffffff

080002b4 <__aeabi_ui2f>:
 80002b4:	b570      	push	{r4, r5, r6, lr}
 80002b6:	1e04      	subs	r4, r0, #0
 80002b8:	d034      	beq.n	8000324 <__aeabi_ui2f+0x70>
 80002ba:	f000 f83b 	bl	8000334 <__clzsi2>
 80002be:	229e      	movs	r2, #158	; 0x9e
 80002c0:	1a12      	subs	r2, r2, r0
 80002c2:	2a96      	cmp	r2, #150	; 0x96
 80002c4:	dc07      	bgt.n	80002d6 <__aeabi_ui2f+0x22>
 80002c6:	b2d2      	uxtb	r2, r2
 80002c8:	2808      	cmp	r0, #8
 80002ca:	dd2e      	ble.n	800032a <__aeabi_ui2f+0x76>
 80002cc:	3808      	subs	r0, #8
 80002ce:	4084      	lsls	r4, r0
 80002d0:	0260      	lsls	r0, r4, #9
 80002d2:	0a40      	lsrs	r0, r0, #9
 80002d4:	e021      	b.n	800031a <__aeabi_ui2f+0x66>
 80002d6:	2a99      	cmp	r2, #153	; 0x99
 80002d8:	dd09      	ble.n	80002ee <__aeabi_ui2f+0x3a>
 80002da:	0003      	movs	r3, r0
 80002dc:	0021      	movs	r1, r4
 80002de:	331b      	adds	r3, #27
 80002e0:	4099      	lsls	r1, r3
 80002e2:	1e4b      	subs	r3, r1, #1
 80002e4:	4199      	sbcs	r1, r3
 80002e6:	2305      	movs	r3, #5
 80002e8:	1a1b      	subs	r3, r3, r0
 80002ea:	40dc      	lsrs	r4, r3
 80002ec:	430c      	orrs	r4, r1
 80002ee:	2805      	cmp	r0, #5
 80002f0:	dd01      	ble.n	80002f6 <__aeabi_ui2f+0x42>
 80002f2:	1f43      	subs	r3, r0, #5
 80002f4:	409c      	lsls	r4, r3
 80002f6:	0023      	movs	r3, r4
 80002f8:	490d      	ldr	r1, [pc, #52]	; (8000330 <__aeabi_ui2f+0x7c>)
 80002fa:	400b      	ands	r3, r1
 80002fc:	0765      	lsls	r5, r4, #29
 80002fe:	d009      	beq.n	8000314 <__aeabi_ui2f+0x60>
 8000300:	250f      	movs	r5, #15
 8000302:	402c      	ands	r4, r5
 8000304:	2c04      	cmp	r4, #4
 8000306:	d005      	beq.n	8000314 <__aeabi_ui2f+0x60>
 8000308:	3304      	adds	r3, #4
 800030a:	015c      	lsls	r4, r3, #5
 800030c:	d502      	bpl.n	8000314 <__aeabi_ui2f+0x60>
 800030e:	229f      	movs	r2, #159	; 0x9f
 8000310:	400b      	ands	r3, r1
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	019b      	lsls	r3, r3, #6
 8000316:	0a58      	lsrs	r0, r3, #9
 8000318:	b2d2      	uxtb	r2, r2
 800031a:	0240      	lsls	r0, r0, #9
 800031c:	05d2      	lsls	r2, r2, #23
 800031e:	0a40      	lsrs	r0, r0, #9
 8000320:	4310      	orrs	r0, r2
 8000322:	bd70      	pop	{r4, r5, r6, pc}
 8000324:	2200      	movs	r2, #0
 8000326:	2000      	movs	r0, #0
 8000328:	e7f7      	b.n	800031a <__aeabi_ui2f+0x66>
 800032a:	0260      	lsls	r0, r4, #9
 800032c:	0a40      	lsrs	r0, r0, #9
 800032e:	e7f4      	b.n	800031a <__aeabi_ui2f+0x66>
 8000330:	fbffffff 	.word	0xfbffffff

08000334 <__clzsi2>:
 8000334:	211c      	movs	r1, #28
 8000336:	2301      	movs	r3, #1
 8000338:	041b      	lsls	r3, r3, #16
 800033a:	4298      	cmp	r0, r3
 800033c:	d301      	bcc.n	8000342 <__clzsi2+0xe>
 800033e:	0c00      	lsrs	r0, r0, #16
 8000340:	3910      	subs	r1, #16
 8000342:	0a1b      	lsrs	r3, r3, #8
 8000344:	4298      	cmp	r0, r3
 8000346:	d301      	bcc.n	800034c <__clzsi2+0x18>
 8000348:	0a00      	lsrs	r0, r0, #8
 800034a:	3908      	subs	r1, #8
 800034c:	091b      	lsrs	r3, r3, #4
 800034e:	4298      	cmp	r0, r3
 8000350:	d301      	bcc.n	8000356 <__clzsi2+0x22>
 8000352:	0900      	lsrs	r0, r0, #4
 8000354:	3904      	subs	r1, #4
 8000356:	a202      	add	r2, pc, #8	; (adr r2, 8000360 <__clzsi2+0x2c>)
 8000358:	5c10      	ldrb	r0, [r2, r0]
 800035a:	1840      	adds	r0, r0, r1
 800035c:	4770      	bx	lr
 800035e:	46c0      	nop			; (mov r8, r8)
 8000360:	02020304 	.word	0x02020304
 8000364:	01010101 	.word	0x01010101
	...

08000370 <hts221_read_reg>:
 8000370:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000372:	b087      	sub	sp, #28
 8000374:	af00      	add	r7, sp, #0
 8000376:	60f8      	str	r0, [r7, #12]
 8000378:	0008      	movs	r0, r1
 800037a:	607a      	str	r2, [r7, #4]
 800037c:	0019      	movs	r1, r3
 800037e:	260b      	movs	r6, #11
 8000380:	19bb      	adds	r3, r7, r6
 8000382:	1c02      	adds	r2, r0, #0
 8000384:	701a      	strb	r2, [r3, #0]
 8000386:	2508      	movs	r5, #8
 8000388:	197b      	adds	r3, r7, r5
 800038a:	1c0a      	adds	r2, r1, #0
 800038c:	801a      	strh	r2, [r3, #0]
 800038e:	68fb      	ldr	r3, [r7, #12]
 8000390:	685c      	ldr	r4, [r3, #4]
 8000392:	68fb      	ldr	r3, [r7, #12]
 8000394:	6898      	ldr	r0, [r3, #8]
 8000396:	197b      	adds	r3, r7, r5
 8000398:	881d      	ldrh	r5, [r3, #0]
 800039a:	687a      	ldr	r2, [r7, #4]
 800039c:	19bb      	adds	r3, r7, r6
 800039e:	7819      	ldrb	r1, [r3, #0]
 80003a0:	002b      	movs	r3, r5
 80003a2:	47a0      	blx	r4
 80003a4:	0003      	movs	r3, r0
 80003a6:	617b      	str	r3, [r7, #20]
 80003a8:	697b      	ldr	r3, [r7, #20]
 80003aa:	0018      	movs	r0, r3
 80003ac:	46bd      	mov	sp, r7
 80003ae:	b007      	add	sp, #28
 80003b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080003b2 <hts221_write_reg>:
 80003b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003b4:	b087      	sub	sp, #28
 80003b6:	af00      	add	r7, sp, #0
 80003b8:	60f8      	str	r0, [r7, #12]
 80003ba:	0008      	movs	r0, r1
 80003bc:	607a      	str	r2, [r7, #4]
 80003be:	0019      	movs	r1, r3
 80003c0:	260b      	movs	r6, #11
 80003c2:	19bb      	adds	r3, r7, r6
 80003c4:	1c02      	adds	r2, r0, #0
 80003c6:	701a      	strb	r2, [r3, #0]
 80003c8:	2508      	movs	r5, #8
 80003ca:	197b      	adds	r3, r7, r5
 80003cc:	1c0a      	adds	r2, r1, #0
 80003ce:	801a      	strh	r2, [r3, #0]
 80003d0:	68fb      	ldr	r3, [r7, #12]
 80003d2:	681c      	ldr	r4, [r3, #0]
 80003d4:	68fb      	ldr	r3, [r7, #12]
 80003d6:	6898      	ldr	r0, [r3, #8]
 80003d8:	197b      	adds	r3, r7, r5
 80003da:	881d      	ldrh	r5, [r3, #0]
 80003dc:	687a      	ldr	r2, [r7, #4]
 80003de:	19bb      	adds	r3, r7, r6
 80003e0:	7819      	ldrb	r1, [r3, #0]
 80003e2:	002b      	movs	r3, r5
 80003e4:	47a0      	blx	r4
 80003e6:	0003      	movs	r3, r0
 80003e8:	617b      	str	r3, [r7, #20]
 80003ea:	697b      	ldr	r3, [r7, #20]
 80003ec:	0018      	movs	r0, r3
 80003ee:	46bd      	mov	sp, r7
 80003f0:	b007      	add	sp, #28
 80003f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080003f4 <hts221_data_rate_set>:
 80003f4:	b590      	push	{r4, r7, lr}
 80003f6:	b085      	sub	sp, #20
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
 80003fc:	000a      	movs	r2, r1
 80003fe:	1cfb      	adds	r3, r7, #3
 8000400:	701a      	strb	r2, [r3, #0]
 8000402:	2308      	movs	r3, #8
 8000404:	18fa      	adds	r2, r7, r3
 8000406:	6878      	ldr	r0, [r7, #4]
 8000408:	2301      	movs	r3, #1
 800040a:	2120      	movs	r1, #32
 800040c:	f7ff ffb0 	bl	8000370 <hts221_read_reg>
 8000410:	0003      	movs	r3, r0
 8000412:	60fb      	str	r3, [r7, #12]
 8000414:	68fb      	ldr	r3, [r7, #12]
 8000416:	2b00      	cmp	r3, #0
 8000418:	d118      	bne.n	800044c <hts221_data_rate_set+0x58>
 800041a:	1cfb      	adds	r3, r7, #3
 800041c:	781b      	ldrb	r3, [r3, #0]
 800041e:	2203      	movs	r2, #3
 8000420:	4013      	ands	r3, r2
 8000422:	b2da      	uxtb	r2, r3
 8000424:	2408      	movs	r4, #8
 8000426:	193b      	adds	r3, r7, r4
 8000428:	2103      	movs	r1, #3
 800042a:	400a      	ands	r2, r1
 800042c:	0010      	movs	r0, r2
 800042e:	781a      	ldrb	r2, [r3, #0]
 8000430:	2103      	movs	r1, #3
 8000432:	438a      	bics	r2, r1
 8000434:	1c11      	adds	r1, r2, #0
 8000436:	1c02      	adds	r2, r0, #0
 8000438:	430a      	orrs	r2, r1
 800043a:	701a      	strb	r2, [r3, #0]
 800043c:	193a      	adds	r2, r7, r4
 800043e:	6878      	ldr	r0, [r7, #4]
 8000440:	2301      	movs	r3, #1
 8000442:	2120      	movs	r1, #32
 8000444:	f7ff ffb5 	bl	80003b2 <hts221_write_reg>
 8000448:	0003      	movs	r3, r0
 800044a:	60fb      	str	r3, [r7, #12]
 800044c:	68fb      	ldr	r3, [r7, #12]
 800044e:	0018      	movs	r0, r3
 8000450:	46bd      	mov	sp, r7
 8000452:	b005      	add	sp, #20
 8000454:	bd90      	pop	{r4, r7, pc}

08000456 <hts221_block_data_update_set>:
 8000456:	b590      	push	{r4, r7, lr}
 8000458:	b085      	sub	sp, #20
 800045a:	af00      	add	r7, sp, #0
 800045c:	6078      	str	r0, [r7, #4]
 800045e:	000a      	movs	r2, r1
 8000460:	1cfb      	adds	r3, r7, #3
 8000462:	701a      	strb	r2, [r3, #0]
 8000464:	2308      	movs	r3, #8
 8000466:	18fa      	adds	r2, r7, r3
 8000468:	6878      	ldr	r0, [r7, #4]
 800046a:	2301      	movs	r3, #1
 800046c:	2120      	movs	r1, #32
 800046e:	f7ff ff7f 	bl	8000370 <hts221_read_reg>
 8000472:	0003      	movs	r3, r0
 8000474:	60fb      	str	r3, [r7, #12]
 8000476:	68fb      	ldr	r3, [r7, #12]
 8000478:	2b00      	cmp	r3, #0
 800047a:	d118      	bne.n	80004ae <hts221_block_data_update_set+0x58>
 800047c:	1cfb      	adds	r3, r7, #3
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	2201      	movs	r2, #1
 8000482:	4013      	ands	r3, r2
 8000484:	b2da      	uxtb	r2, r3
 8000486:	2408      	movs	r4, #8
 8000488:	193b      	adds	r3, r7, r4
 800048a:	2101      	movs	r1, #1
 800048c:	400a      	ands	r2, r1
 800048e:	0090      	lsls	r0, r2, #2
 8000490:	781a      	ldrb	r2, [r3, #0]
 8000492:	2104      	movs	r1, #4
 8000494:	438a      	bics	r2, r1
 8000496:	1c11      	adds	r1, r2, #0
 8000498:	1c02      	adds	r2, r0, #0
 800049a:	430a      	orrs	r2, r1
 800049c:	701a      	strb	r2, [r3, #0]
 800049e:	193a      	adds	r2, r7, r4
 80004a0:	6878      	ldr	r0, [r7, #4]
 80004a2:	2301      	movs	r3, #1
 80004a4:	2120      	movs	r1, #32
 80004a6:	f7ff ff84 	bl	80003b2 <hts221_write_reg>
 80004aa:	0003      	movs	r3, r0
 80004ac:	60fb      	str	r3, [r7, #12]
 80004ae:	68fb      	ldr	r3, [r7, #12]
 80004b0:	0018      	movs	r0, r3
 80004b2:	46bd      	mov	sp, r7
 80004b4:	b005      	add	sp, #20
 80004b6:	bd90      	pop	{r4, r7, pc}

080004b8 <hts221_humidity_raw_get>:
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b084      	sub	sp, #16
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
 80004c0:	6039      	str	r1, [r7, #0]
 80004c2:	683a      	ldr	r2, [r7, #0]
 80004c4:	6878      	ldr	r0, [r7, #4]
 80004c6:	2302      	movs	r3, #2
 80004c8:	2128      	movs	r1, #40	; 0x28
 80004ca:	f7ff ff51 	bl	8000370 <hts221_read_reg>
 80004ce:	0003      	movs	r3, r0
 80004d0:	60fb      	str	r3, [r7, #12]
 80004d2:	68fb      	ldr	r3, [r7, #12]
 80004d4:	0018      	movs	r0, r3
 80004d6:	46bd      	mov	sp, r7
 80004d8:	b004      	add	sp, #16
 80004da:	bd80      	pop	{r7, pc}

080004dc <hts221_device_id_get>:
 80004dc:	b580      	push	{r7, lr}
 80004de:	b084      	sub	sp, #16
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
 80004e4:	6039      	str	r1, [r7, #0]
 80004e6:	683a      	ldr	r2, [r7, #0]
 80004e8:	6878      	ldr	r0, [r7, #4]
 80004ea:	2301      	movs	r3, #1
 80004ec:	210f      	movs	r1, #15
 80004ee:	f7ff ff3f 	bl	8000370 <hts221_read_reg>
 80004f2:	0003      	movs	r3, r0
 80004f4:	60fb      	str	r3, [r7, #12]
 80004f6:	68fb      	ldr	r3, [r7, #12]
 80004f8:	0018      	movs	r0, r3
 80004fa:	46bd      	mov	sp, r7
 80004fc:	b004      	add	sp, #16
 80004fe:	bd80      	pop	{r7, pc}

08000500 <hts221_power_on_set>:
 8000500:	b590      	push	{r4, r7, lr}
 8000502:	b085      	sub	sp, #20
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
 8000508:	000a      	movs	r2, r1
 800050a:	1cfb      	adds	r3, r7, #3
 800050c:	701a      	strb	r2, [r3, #0]
 800050e:	2308      	movs	r3, #8
 8000510:	18fa      	adds	r2, r7, r3
 8000512:	6878      	ldr	r0, [r7, #4]
 8000514:	2301      	movs	r3, #1
 8000516:	2120      	movs	r1, #32
 8000518:	f7ff ff2a 	bl	8000370 <hts221_read_reg>
 800051c:	0003      	movs	r3, r0
 800051e:	60fb      	str	r3, [r7, #12]
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	2b00      	cmp	r3, #0
 8000524:	d116      	bne.n	8000554 <hts221_power_on_set+0x54>
 8000526:	1cfb      	adds	r3, r7, #3
 8000528:	781b      	ldrb	r3, [r3, #0]
 800052a:	2201      	movs	r2, #1
 800052c:	4013      	ands	r3, r2
 800052e:	b2da      	uxtb	r2, r3
 8000530:	2408      	movs	r4, #8
 8000532:	193b      	adds	r3, r7, r4
 8000534:	01d0      	lsls	r0, r2, #7
 8000536:	781a      	ldrb	r2, [r3, #0]
 8000538:	217f      	movs	r1, #127	; 0x7f
 800053a:	400a      	ands	r2, r1
 800053c:	1c11      	adds	r1, r2, #0
 800053e:	1c02      	adds	r2, r0, #0
 8000540:	430a      	orrs	r2, r1
 8000542:	701a      	strb	r2, [r3, #0]
 8000544:	193a      	adds	r2, r7, r4
 8000546:	6878      	ldr	r0, [r7, #4]
 8000548:	2301      	movs	r3, #1
 800054a:	2120      	movs	r1, #32
 800054c:	f7ff ff31 	bl	80003b2 <hts221_write_reg>
 8000550:	0003      	movs	r3, r0
 8000552:	60fb      	str	r3, [r7, #12]
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	0018      	movs	r0, r3
 8000558:	46bd      	mov	sp, r7
 800055a:	b005      	add	sp, #20
 800055c:	bd90      	pop	{r4, r7, pc}

0800055e <hts221_status_get>:
 800055e:	b580      	push	{r7, lr}
 8000560:	b084      	sub	sp, #16
 8000562:	af00      	add	r7, sp, #0
 8000564:	6078      	str	r0, [r7, #4]
 8000566:	6039      	str	r1, [r7, #0]
 8000568:	683a      	ldr	r2, [r7, #0]
 800056a:	6878      	ldr	r0, [r7, #4]
 800056c:	2301      	movs	r3, #1
 800056e:	2127      	movs	r1, #39	; 0x27
 8000570:	f7ff fefe 	bl	8000370 <hts221_read_reg>
 8000574:	0003      	movs	r3, r0
 8000576:	60fb      	str	r3, [r7, #12]
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	0018      	movs	r0, r3
 800057c:	46bd      	mov	sp, r7
 800057e:	b004      	add	sp, #16
 8000580:	bd80      	pop	{r7, pc}

08000582 <hts221_hum_rh_point_0_get>:
 8000582:	b580      	push	{r7, lr}
 8000584:	b084      	sub	sp, #16
 8000586:	af00      	add	r7, sp, #0
 8000588:	6078      	str	r0, [r7, #4]
 800058a:	6039      	str	r1, [r7, #0]
 800058c:	683a      	ldr	r2, [r7, #0]
 800058e:	6878      	ldr	r0, [r7, #4]
 8000590:	2301      	movs	r3, #1
 8000592:	2130      	movs	r1, #48	; 0x30
 8000594:	f7ff feec 	bl	8000370 <hts221_read_reg>
 8000598:	0003      	movs	r3, r0
 800059a:	60fb      	str	r3, [r7, #12]
 800059c:	683b      	ldr	r3, [r7, #0]
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	085b      	lsrs	r3, r3, #1
 80005a2:	b2da      	uxtb	r2, r3
 80005a4:	683b      	ldr	r3, [r7, #0]
 80005a6:	701a      	strb	r2, [r3, #0]
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	0018      	movs	r0, r3
 80005ac:	46bd      	mov	sp, r7
 80005ae:	b004      	add	sp, #16
 80005b0:	bd80      	pop	{r7, pc}

080005b2 <hts221_hum_rh_point_1_get>:
 80005b2:	b580      	push	{r7, lr}
 80005b4:	b084      	sub	sp, #16
 80005b6:	af00      	add	r7, sp, #0
 80005b8:	6078      	str	r0, [r7, #4]
 80005ba:	6039      	str	r1, [r7, #0]
 80005bc:	683a      	ldr	r2, [r7, #0]
 80005be:	6878      	ldr	r0, [r7, #4]
 80005c0:	2301      	movs	r3, #1
 80005c2:	2131      	movs	r1, #49	; 0x31
 80005c4:	f7ff fed4 	bl	8000370 <hts221_read_reg>
 80005c8:	0003      	movs	r3, r0
 80005ca:	60fb      	str	r3, [r7, #12]
 80005cc:	683b      	ldr	r3, [r7, #0]
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	085b      	lsrs	r3, r3, #1
 80005d2:	b2da      	uxtb	r2, r3
 80005d4:	683b      	ldr	r3, [r7, #0]
 80005d6:	701a      	strb	r2, [r3, #0]
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	0018      	movs	r0, r3
 80005dc:	46bd      	mov	sp, r7
 80005de:	b004      	add	sp, #16
 80005e0:	bd80      	pop	{r7, pc}

080005e2 <hts221_temp_deg_point_0_get>:
 80005e2:	b590      	push	{r4, r7, lr}
 80005e4:	b087      	sub	sp, #28
 80005e6:	af00      	add	r7, sp, #0
 80005e8:	6078      	str	r0, [r7, #4]
 80005ea:	6039      	str	r1, [r7, #0]
 80005ec:	230f      	movs	r3, #15
 80005ee:	18fa      	adds	r2, r7, r3
 80005f0:	6878      	ldr	r0, [r7, #4]
 80005f2:	2301      	movs	r3, #1
 80005f4:	2132      	movs	r1, #50	; 0x32
 80005f6:	f7ff febb 	bl	8000370 <hts221_read_reg>
 80005fa:	0003      	movs	r3, r0
 80005fc:	617b      	str	r3, [r7, #20]
 80005fe:	697b      	ldr	r3, [r7, #20]
 8000600:	2b00      	cmp	r3, #0
 8000602:	d11b      	bne.n	800063c <hts221_temp_deg_point_0_get+0x5a>
 8000604:	2410      	movs	r4, #16
 8000606:	193a      	adds	r2, r7, r4
 8000608:	6878      	ldr	r0, [r7, #4]
 800060a:	2301      	movs	r3, #1
 800060c:	2135      	movs	r1, #53	; 0x35
 800060e:	f7ff feaf 	bl	8000370 <hts221_read_reg>
 8000612:	0003      	movs	r3, r0
 8000614:	617b      	str	r3, [r7, #20]
 8000616:	193b      	adds	r3, r7, r4
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	079b      	lsls	r3, r3, #30
 800061c:	0f9b      	lsrs	r3, r3, #30
 800061e:	b2da      	uxtb	r2, r3
 8000620:	2113      	movs	r1, #19
 8000622:	187b      	adds	r3, r7, r1
 8000624:	701a      	strb	r2, [r3, #0]
 8000626:	187b      	adds	r3, r7, r1
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	021b      	lsls	r3, r3, #8
 800062c:	220f      	movs	r2, #15
 800062e:	18ba      	adds	r2, r7, r2
 8000630:	7812      	ldrb	r2, [r2, #0]
 8000632:	189b      	adds	r3, r3, r2
 8000634:	10db      	asrs	r3, r3, #3
 8000636:	b2da      	uxtb	r2, r3
 8000638:	683b      	ldr	r3, [r7, #0]
 800063a:	701a      	strb	r2, [r3, #0]
 800063c:	697b      	ldr	r3, [r7, #20]
 800063e:	0018      	movs	r0, r3
 8000640:	46bd      	mov	sp, r7
 8000642:	b007      	add	sp, #28
 8000644:	bd90      	pop	{r4, r7, pc}

08000646 <hts221_temp_deg_point_1_get>:
 8000646:	b590      	push	{r4, r7, lr}
 8000648:	b087      	sub	sp, #28
 800064a:	af00      	add	r7, sp, #0
 800064c:	6078      	str	r0, [r7, #4]
 800064e:	6039      	str	r1, [r7, #0]
 8000650:	230f      	movs	r3, #15
 8000652:	18fa      	adds	r2, r7, r3
 8000654:	6878      	ldr	r0, [r7, #4]
 8000656:	2301      	movs	r3, #1
 8000658:	2133      	movs	r1, #51	; 0x33
 800065a:	f7ff fe89 	bl	8000370 <hts221_read_reg>
 800065e:	0003      	movs	r3, r0
 8000660:	617b      	str	r3, [r7, #20]
 8000662:	697b      	ldr	r3, [r7, #20]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d11b      	bne.n	80006a0 <hts221_temp_deg_point_1_get+0x5a>
 8000668:	2410      	movs	r4, #16
 800066a:	193a      	adds	r2, r7, r4
 800066c:	6878      	ldr	r0, [r7, #4]
 800066e:	2301      	movs	r3, #1
 8000670:	2135      	movs	r1, #53	; 0x35
 8000672:	f7ff fe7d 	bl	8000370 <hts221_read_reg>
 8000676:	0003      	movs	r3, r0
 8000678:	617b      	str	r3, [r7, #20]
 800067a:	193b      	adds	r3, r7, r4
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	071b      	lsls	r3, r3, #28
 8000680:	0f9b      	lsrs	r3, r3, #30
 8000682:	b2da      	uxtb	r2, r3
 8000684:	2113      	movs	r1, #19
 8000686:	187b      	adds	r3, r7, r1
 8000688:	701a      	strb	r2, [r3, #0]
 800068a:	187b      	adds	r3, r7, r1
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	021b      	lsls	r3, r3, #8
 8000690:	220f      	movs	r2, #15
 8000692:	18ba      	adds	r2, r7, r2
 8000694:	7812      	ldrb	r2, [r2, #0]
 8000696:	189b      	adds	r3, r3, r2
 8000698:	10db      	asrs	r3, r3, #3
 800069a:	b2da      	uxtb	r2, r3
 800069c:	683b      	ldr	r3, [r7, #0]
 800069e:	701a      	strb	r2, [r3, #0]
 80006a0:	697b      	ldr	r3, [r7, #20]
 80006a2:	0018      	movs	r0, r3
 80006a4:	46bd      	mov	sp, r7
 80006a6:	b007      	add	sp, #28
 80006a8:	bd90      	pop	{r4, r7, pc}

080006aa <hts221_hum_adc_point_0_get>:
 80006aa:	b580      	push	{r7, lr}
 80006ac:	b084      	sub	sp, #16
 80006ae:	af00      	add	r7, sp, #0
 80006b0:	6078      	str	r0, [r7, #4]
 80006b2:	6039      	str	r1, [r7, #0]
 80006b4:	683a      	ldr	r2, [r7, #0]
 80006b6:	6878      	ldr	r0, [r7, #4]
 80006b8:	2302      	movs	r3, #2
 80006ba:	2136      	movs	r1, #54	; 0x36
 80006bc:	f7ff fe58 	bl	8000370 <hts221_read_reg>
 80006c0:	0003      	movs	r3, r0
 80006c2:	60fb      	str	r3, [r7, #12]
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	0018      	movs	r0, r3
 80006c8:	46bd      	mov	sp, r7
 80006ca:	b004      	add	sp, #16
 80006cc:	bd80      	pop	{r7, pc}

080006ce <hts221_hum_adc_point_1_get>:
 80006ce:	b580      	push	{r7, lr}
 80006d0:	b084      	sub	sp, #16
 80006d2:	af00      	add	r7, sp, #0
 80006d4:	6078      	str	r0, [r7, #4]
 80006d6:	6039      	str	r1, [r7, #0]
 80006d8:	683a      	ldr	r2, [r7, #0]
 80006da:	6878      	ldr	r0, [r7, #4]
 80006dc:	2302      	movs	r3, #2
 80006de:	213a      	movs	r1, #58	; 0x3a
 80006e0:	f7ff fe46 	bl	8000370 <hts221_read_reg>
 80006e4:	0003      	movs	r3, r0
 80006e6:	60fb      	str	r3, [r7, #12]
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	0018      	movs	r0, r3
 80006ec:	46bd      	mov	sp, r7
 80006ee:	b004      	add	sp, #16
 80006f0:	bd80      	pop	{r7, pc}

080006f2 <hts221_temp_adc_point_0_get>:
 80006f2:	b580      	push	{r7, lr}
 80006f4:	b084      	sub	sp, #16
 80006f6:	af00      	add	r7, sp, #0
 80006f8:	6078      	str	r0, [r7, #4]
 80006fa:	6039      	str	r1, [r7, #0]
 80006fc:	683a      	ldr	r2, [r7, #0]
 80006fe:	6878      	ldr	r0, [r7, #4]
 8000700:	2302      	movs	r3, #2
 8000702:	213c      	movs	r1, #60	; 0x3c
 8000704:	f7ff fe34 	bl	8000370 <hts221_read_reg>
 8000708:	0003      	movs	r3, r0
 800070a:	60fb      	str	r3, [r7, #12]
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	0018      	movs	r0, r3
 8000710:	46bd      	mov	sp, r7
 8000712:	b004      	add	sp, #16
 8000714:	bd80      	pop	{r7, pc}

08000716 <hts221_temp_adc_point_1_get>:
 8000716:	b580      	push	{r7, lr}
 8000718:	b084      	sub	sp, #16
 800071a:	af00      	add	r7, sp, #0
 800071c:	6078      	str	r0, [r7, #4]
 800071e:	6039      	str	r1, [r7, #0]
 8000720:	683a      	ldr	r2, [r7, #0]
 8000722:	6878      	ldr	r0, [r7, #4]
 8000724:	2302      	movs	r3, #2
 8000726:	213e      	movs	r1, #62	; 0x3e
 8000728:	f7ff fe22 	bl	8000370 <hts221_read_reg>
 800072c:	0003      	movs	r3, r0
 800072e:	60fb      	str	r3, [r7, #12]
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	0018      	movs	r0, r3
 8000734:	46bd      	mov	sp, r7
 8000736:	b004      	add	sp, #16
 8000738:	bd80      	pop	{r7, pc}

0800073a <iis3dhhc_read_reg>:
 800073a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800073c:	b087      	sub	sp, #28
 800073e:	af00      	add	r7, sp, #0
 8000740:	60f8      	str	r0, [r7, #12]
 8000742:	0008      	movs	r0, r1
 8000744:	607a      	str	r2, [r7, #4]
 8000746:	0019      	movs	r1, r3
 8000748:	260b      	movs	r6, #11
 800074a:	19bb      	adds	r3, r7, r6
 800074c:	1c02      	adds	r2, r0, #0
 800074e:	701a      	strb	r2, [r3, #0]
 8000750:	2508      	movs	r5, #8
 8000752:	197b      	adds	r3, r7, r5
 8000754:	1c0a      	adds	r2, r1, #0
 8000756:	801a      	strh	r2, [r3, #0]
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	685c      	ldr	r4, [r3, #4]
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	6898      	ldr	r0, [r3, #8]
 8000760:	197b      	adds	r3, r7, r5
 8000762:	881d      	ldrh	r5, [r3, #0]
 8000764:	687a      	ldr	r2, [r7, #4]
 8000766:	19bb      	adds	r3, r7, r6
 8000768:	7819      	ldrb	r1, [r3, #0]
 800076a:	002b      	movs	r3, r5
 800076c:	47a0      	blx	r4
 800076e:	0003      	movs	r3, r0
 8000770:	617b      	str	r3, [r7, #20]
 8000772:	697b      	ldr	r3, [r7, #20]
 8000774:	0018      	movs	r0, r3
 8000776:	46bd      	mov	sp, r7
 8000778:	b007      	add	sp, #28
 800077a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800077c <iis3dhhc_write_reg>:
 800077c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800077e:	b087      	sub	sp, #28
 8000780:	af00      	add	r7, sp, #0
 8000782:	60f8      	str	r0, [r7, #12]
 8000784:	0008      	movs	r0, r1
 8000786:	607a      	str	r2, [r7, #4]
 8000788:	0019      	movs	r1, r3
 800078a:	260b      	movs	r6, #11
 800078c:	19bb      	adds	r3, r7, r6
 800078e:	1c02      	adds	r2, r0, #0
 8000790:	701a      	strb	r2, [r3, #0]
 8000792:	2508      	movs	r5, #8
 8000794:	197b      	adds	r3, r7, r5
 8000796:	1c0a      	adds	r2, r1, #0
 8000798:	801a      	strh	r2, [r3, #0]
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	681c      	ldr	r4, [r3, #0]
 800079e:	68fb      	ldr	r3, [r7, #12]
 80007a0:	6898      	ldr	r0, [r3, #8]
 80007a2:	197b      	adds	r3, r7, r5
 80007a4:	881d      	ldrh	r5, [r3, #0]
 80007a6:	687a      	ldr	r2, [r7, #4]
 80007a8:	19bb      	adds	r3, r7, r6
 80007aa:	7819      	ldrb	r1, [r3, #0]
 80007ac:	002b      	movs	r3, r5
 80007ae:	47a0      	blx	r4
 80007b0:	0003      	movs	r3, r0
 80007b2:	617b      	str	r3, [r7, #20]
 80007b4:	697b      	ldr	r3, [r7, #20]
 80007b6:	0018      	movs	r0, r3
 80007b8:	46bd      	mov	sp, r7
 80007ba:	b007      	add	sp, #28
 80007bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080007be <iis3dhhc_block_data_update_set>:
 80007be:	b590      	push	{r4, r7, lr}
 80007c0:	b085      	sub	sp, #20
 80007c2:	af00      	add	r7, sp, #0
 80007c4:	6078      	str	r0, [r7, #4]
 80007c6:	000a      	movs	r2, r1
 80007c8:	1cfb      	adds	r3, r7, #3
 80007ca:	701a      	strb	r2, [r3, #0]
 80007cc:	2308      	movs	r3, #8
 80007ce:	18fa      	adds	r2, r7, r3
 80007d0:	6878      	ldr	r0, [r7, #4]
 80007d2:	2301      	movs	r3, #1
 80007d4:	2120      	movs	r1, #32
 80007d6:	f7ff ffb0 	bl	800073a <iis3dhhc_read_reg>
 80007da:	0003      	movs	r3, r0
 80007dc:	60fb      	str	r3, [r7, #12]
 80007de:	68fb      	ldr	r3, [r7, #12]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d118      	bne.n	8000816 <iis3dhhc_block_data_update_set+0x58>
 80007e4:	1cfb      	adds	r3, r7, #3
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	2201      	movs	r2, #1
 80007ea:	4013      	ands	r3, r2
 80007ec:	b2da      	uxtb	r2, r3
 80007ee:	2408      	movs	r4, #8
 80007f0:	193b      	adds	r3, r7, r4
 80007f2:	2101      	movs	r1, #1
 80007f4:	400a      	ands	r2, r1
 80007f6:	0010      	movs	r0, r2
 80007f8:	781a      	ldrb	r2, [r3, #0]
 80007fa:	2101      	movs	r1, #1
 80007fc:	438a      	bics	r2, r1
 80007fe:	1c11      	adds	r1, r2, #0
 8000800:	1c02      	adds	r2, r0, #0
 8000802:	430a      	orrs	r2, r1
 8000804:	701a      	strb	r2, [r3, #0]
 8000806:	193a      	adds	r2, r7, r4
 8000808:	6878      	ldr	r0, [r7, #4]
 800080a:	2301      	movs	r3, #1
 800080c:	2120      	movs	r1, #32
 800080e:	f7ff ffb5 	bl	800077c <iis3dhhc_write_reg>
 8000812:	0003      	movs	r3, r0
 8000814:	60fb      	str	r3, [r7, #12]
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	0018      	movs	r0, r3
 800081a:	46bd      	mov	sp, r7
 800081c:	b005      	add	sp, #20
 800081e:	bd90      	pop	{r4, r7, pc}

08000820 <iis3dhhc_data_rate_set>:
 8000820:	b590      	push	{r4, r7, lr}
 8000822:	b085      	sub	sp, #20
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
 8000828:	000a      	movs	r2, r1
 800082a:	1cfb      	adds	r3, r7, #3
 800082c:	701a      	strb	r2, [r3, #0]
 800082e:	2308      	movs	r3, #8
 8000830:	18fa      	adds	r2, r7, r3
 8000832:	6878      	ldr	r0, [r7, #4]
 8000834:	2301      	movs	r3, #1
 8000836:	2120      	movs	r1, #32
 8000838:	f7ff ff7f 	bl	800073a <iis3dhhc_read_reg>
 800083c:	0003      	movs	r3, r0
 800083e:	60fb      	str	r3, [r7, #12]
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	2b00      	cmp	r3, #0
 8000844:	d116      	bne.n	8000874 <iis3dhhc_data_rate_set+0x54>
 8000846:	1cfb      	adds	r3, r7, #3
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	2201      	movs	r2, #1
 800084c:	4013      	ands	r3, r2
 800084e:	b2da      	uxtb	r2, r3
 8000850:	2408      	movs	r4, #8
 8000852:	193b      	adds	r3, r7, r4
 8000854:	01d0      	lsls	r0, r2, #7
 8000856:	781a      	ldrb	r2, [r3, #0]
 8000858:	217f      	movs	r1, #127	; 0x7f
 800085a:	400a      	ands	r2, r1
 800085c:	1c11      	adds	r1, r2, #0
 800085e:	1c02      	adds	r2, r0, #0
 8000860:	430a      	orrs	r2, r1
 8000862:	701a      	strb	r2, [r3, #0]
 8000864:	193a      	adds	r2, r7, r4
 8000866:	6878      	ldr	r0, [r7, #4]
 8000868:	2301      	movs	r3, #1
 800086a:	2120      	movs	r1, #32
 800086c:	f7ff ff86 	bl	800077c <iis3dhhc_write_reg>
 8000870:	0003      	movs	r3, r0
 8000872:	60fb      	str	r3, [r7, #12]
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	0018      	movs	r0, r3
 8000878:	46bd      	mov	sp, r7
 800087a:	b005      	add	sp, #20
 800087c:	bd90      	pop	{r4, r7, pc}

0800087e <iis3dhhc_offset_temp_comp_set>:
 800087e:	b590      	push	{r4, r7, lr}
 8000880:	b085      	sub	sp, #20
 8000882:	af00      	add	r7, sp, #0
 8000884:	6078      	str	r0, [r7, #4]
 8000886:	000a      	movs	r2, r1
 8000888:	1cfb      	adds	r3, r7, #3
 800088a:	701a      	strb	r2, [r3, #0]
 800088c:	2308      	movs	r3, #8
 800088e:	18fa      	adds	r2, r7, r3
 8000890:	6878      	ldr	r0, [r7, #4]
 8000892:	2301      	movs	r3, #1
 8000894:	2123      	movs	r1, #35	; 0x23
 8000896:	f7ff ff50 	bl	800073a <iis3dhhc_read_reg>
 800089a:	0003      	movs	r3, r0
 800089c:	60fb      	str	r3, [r7, #12]
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d118      	bne.n	80008d6 <iis3dhhc_offset_temp_comp_set+0x58>
 80008a4:	1cfb      	adds	r3, r7, #3
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	2201      	movs	r2, #1
 80008aa:	4013      	ands	r3, r2
 80008ac:	b2da      	uxtb	r2, r3
 80008ae:	2408      	movs	r4, #8
 80008b0:	193b      	adds	r3, r7, r4
 80008b2:	2101      	movs	r1, #1
 80008b4:	400a      	ands	r2, r1
 80008b6:	0010      	movs	r0, r2
 80008b8:	781a      	ldrb	r2, [r3, #0]
 80008ba:	2101      	movs	r1, #1
 80008bc:	438a      	bics	r2, r1
 80008be:	1c11      	adds	r1, r2, #0
 80008c0:	1c02      	adds	r2, r0, #0
 80008c2:	430a      	orrs	r2, r1
 80008c4:	701a      	strb	r2, [r3, #0]
 80008c6:	193a      	adds	r2, r7, r4
 80008c8:	6878      	ldr	r0, [r7, #4]
 80008ca:	2301      	movs	r3, #1
 80008cc:	2123      	movs	r1, #35	; 0x23
 80008ce:	f7ff ff55 	bl	800077c <iis3dhhc_write_reg>
 80008d2:	0003      	movs	r3, r0
 80008d4:	60fb      	str	r3, [r7, #12]
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	0018      	movs	r0, r3
 80008da:	46bd      	mov	sp, r7
 80008dc:	b005      	add	sp, #20
 80008de:	bd90      	pop	{r4, r7, pc}

080008e0 <iis3dhhc_acceleration_raw_get>:
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b084      	sub	sp, #16
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
 80008e8:	6039      	str	r1, [r7, #0]
 80008ea:	683a      	ldr	r2, [r7, #0]
 80008ec:	6878      	ldr	r0, [r7, #4]
 80008ee:	2306      	movs	r3, #6
 80008f0:	2128      	movs	r1, #40	; 0x28
 80008f2:	f7ff ff22 	bl	800073a <iis3dhhc_read_reg>
 80008f6:	0003      	movs	r3, r0
 80008f8:	60fb      	str	r3, [r7, #12]
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	0018      	movs	r0, r3
 80008fe:	46bd      	mov	sp, r7
 8000900:	b004      	add	sp, #16
 8000902:	bd80      	pop	{r7, pc}

08000904 <iis3dhhc_device_id_get>:
 8000904:	b580      	push	{r7, lr}
 8000906:	b084      	sub	sp, #16
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
 800090c:	6039      	str	r1, [r7, #0]
 800090e:	683a      	ldr	r2, [r7, #0]
 8000910:	6878      	ldr	r0, [r7, #4]
 8000912:	2301      	movs	r3, #1
 8000914:	210f      	movs	r1, #15
 8000916:	f7ff ff10 	bl	800073a <iis3dhhc_read_reg>
 800091a:	0003      	movs	r3, r0
 800091c:	60fb      	str	r3, [r7, #12]
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	0018      	movs	r0, r3
 8000922:	46bd      	mov	sp, r7
 8000924:	b004      	add	sp, #16
 8000926:	bd80      	pop	{r7, pc}

08000928 <iis3dhhc_reset_set>:
 8000928:	b590      	push	{r4, r7, lr}
 800092a:	b085      	sub	sp, #20
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
 8000930:	000a      	movs	r2, r1
 8000932:	1cfb      	adds	r3, r7, #3
 8000934:	701a      	strb	r2, [r3, #0]
 8000936:	2308      	movs	r3, #8
 8000938:	18fa      	adds	r2, r7, r3
 800093a:	6878      	ldr	r0, [r7, #4]
 800093c:	2301      	movs	r3, #1
 800093e:	2120      	movs	r1, #32
 8000940:	f7ff fefb 	bl	800073a <iis3dhhc_read_reg>
 8000944:	0003      	movs	r3, r0
 8000946:	60fb      	str	r3, [r7, #12]
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	2b00      	cmp	r3, #0
 800094c:	d118      	bne.n	8000980 <iis3dhhc_reset_set+0x58>
 800094e:	1cfb      	adds	r3, r7, #3
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	2201      	movs	r2, #1
 8000954:	4013      	ands	r3, r2
 8000956:	b2da      	uxtb	r2, r3
 8000958:	2408      	movs	r4, #8
 800095a:	193b      	adds	r3, r7, r4
 800095c:	2101      	movs	r1, #1
 800095e:	400a      	ands	r2, r1
 8000960:	0090      	lsls	r0, r2, #2
 8000962:	781a      	ldrb	r2, [r3, #0]
 8000964:	2104      	movs	r1, #4
 8000966:	438a      	bics	r2, r1
 8000968:	1c11      	adds	r1, r2, #0
 800096a:	1c02      	adds	r2, r0, #0
 800096c:	430a      	orrs	r2, r1
 800096e:	701a      	strb	r2, [r3, #0]
 8000970:	193a      	adds	r2, r7, r4
 8000972:	6878      	ldr	r0, [r7, #4]
 8000974:	2301      	movs	r3, #1
 8000976:	2120      	movs	r1, #32
 8000978:	f7ff ff00 	bl	800077c <iis3dhhc_write_reg>
 800097c:	0003      	movs	r3, r0
 800097e:	60fb      	str	r3, [r7, #12]
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	0018      	movs	r0, r3
 8000984:	46bd      	mov	sp, r7
 8000986:	b005      	add	sp, #20
 8000988:	bd90      	pop	{r4, r7, pc}

0800098a <iis3dhhc_reset_get>:
 800098a:	b590      	push	{r4, r7, lr}
 800098c:	b085      	sub	sp, #20
 800098e:	af00      	add	r7, sp, #0
 8000990:	6078      	str	r0, [r7, #4]
 8000992:	6039      	str	r1, [r7, #0]
 8000994:	2408      	movs	r4, #8
 8000996:	193a      	adds	r2, r7, r4
 8000998:	6878      	ldr	r0, [r7, #4]
 800099a:	2301      	movs	r3, #1
 800099c:	2120      	movs	r1, #32
 800099e:	f7ff fecc 	bl	800073a <iis3dhhc_read_reg>
 80009a2:	0003      	movs	r3, r0
 80009a4:	60fb      	str	r3, [r7, #12]
 80009a6:	193b      	adds	r3, r7, r4
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	075b      	lsls	r3, r3, #29
 80009ac:	0fdb      	lsrs	r3, r3, #31
 80009ae:	b2db      	uxtb	r3, r3
 80009b0:	001a      	movs	r2, r3
 80009b2:	683b      	ldr	r3, [r7, #0]
 80009b4:	701a      	strb	r2, [r3, #0]
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	0018      	movs	r0, r3
 80009ba:	46bd      	mov	sp, r7
 80009bc:	b005      	add	sp, #20
 80009be:	bd90      	pop	{r4, r7, pc}

080009c0 <iis3dhhc_filter_config_set>:
 80009c0:	b590      	push	{r4, r7, lr}
 80009c2:	b085      	sub	sp, #20
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
 80009c8:	000a      	movs	r2, r1
 80009ca:	1cfb      	adds	r3, r7, #3
 80009cc:	701a      	strb	r2, [r3, #0]
 80009ce:	2308      	movs	r3, #8
 80009d0:	18fa      	adds	r2, r7, r3
 80009d2:	6878      	ldr	r0, [r7, #4]
 80009d4:	2301      	movs	r3, #1
 80009d6:	2123      	movs	r1, #35	; 0x23
 80009d8:	f7ff feaf 	bl	800073a <iis3dhhc_read_reg>
 80009dc:	0003      	movs	r3, r0
 80009de:	60fb      	str	r3, [r7, #12]
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d116      	bne.n	8000a14 <iis3dhhc_filter_config_set+0x54>
 80009e6:	1cfb      	adds	r3, r7, #3
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	2203      	movs	r2, #3
 80009ec:	4013      	ands	r3, r2
 80009ee:	b2da      	uxtb	r2, r3
 80009f0:	2408      	movs	r4, #8
 80009f2:	193b      	adds	r3, r7, r4
 80009f4:	0190      	lsls	r0, r2, #6
 80009f6:	781a      	ldrb	r2, [r3, #0]
 80009f8:	213f      	movs	r1, #63	; 0x3f
 80009fa:	400a      	ands	r2, r1
 80009fc:	1c11      	adds	r1, r2, #0
 80009fe:	1c02      	adds	r2, r0, #0
 8000a00:	430a      	orrs	r2, r1
 8000a02:	701a      	strb	r2, [r3, #0]
 8000a04:	193a      	adds	r2, r7, r4
 8000a06:	6878      	ldr	r0, [r7, #4]
 8000a08:	2301      	movs	r3, #1
 8000a0a:	2123      	movs	r1, #35	; 0x23
 8000a0c:	f7ff feb6 	bl	800077c <iis3dhhc_write_reg>
 8000a10:	0003      	movs	r3, r0
 8000a12:	60fb      	str	r3, [r7, #12]
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	0018      	movs	r0, r3
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	b005      	add	sp, #20
 8000a1c:	bd90      	pop	{r4, r7, pc}

08000a1e <iis3dhhc_status_get>:
 8000a1e:	b580      	push	{r7, lr}
 8000a20:	b084      	sub	sp, #16
 8000a22:	af00      	add	r7, sp, #0
 8000a24:	6078      	str	r0, [r7, #4]
 8000a26:	6039      	str	r1, [r7, #0]
 8000a28:	683a      	ldr	r2, [r7, #0]
 8000a2a:	6878      	ldr	r0, [r7, #4]
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	2127      	movs	r1, #39	; 0x27
 8000a30:	f7ff fe83 	bl	800073a <iis3dhhc_read_reg>
 8000a34:	0003      	movs	r3, r0
 8000a36:	60fb      	str	r3, [r7, #12]
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	0018      	movs	r0, r3
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	b004      	add	sp, #16
 8000a40:	bd80      	pop	{r7, pc}

08000a42 <l2g2is_read_reg>:
 8000a42:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a44:	b087      	sub	sp, #28
 8000a46:	af00      	add	r7, sp, #0
 8000a48:	60f8      	str	r0, [r7, #12]
 8000a4a:	0008      	movs	r0, r1
 8000a4c:	607a      	str	r2, [r7, #4]
 8000a4e:	0019      	movs	r1, r3
 8000a50:	260b      	movs	r6, #11
 8000a52:	19bb      	adds	r3, r7, r6
 8000a54:	1c02      	adds	r2, r0, #0
 8000a56:	701a      	strb	r2, [r3, #0]
 8000a58:	2508      	movs	r5, #8
 8000a5a:	197b      	adds	r3, r7, r5
 8000a5c:	1c0a      	adds	r2, r1, #0
 8000a5e:	801a      	strh	r2, [r3, #0]
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	685c      	ldr	r4, [r3, #4]
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	6898      	ldr	r0, [r3, #8]
 8000a68:	197b      	adds	r3, r7, r5
 8000a6a:	881d      	ldrh	r5, [r3, #0]
 8000a6c:	687a      	ldr	r2, [r7, #4]
 8000a6e:	19bb      	adds	r3, r7, r6
 8000a70:	7819      	ldrb	r1, [r3, #0]
 8000a72:	002b      	movs	r3, r5
 8000a74:	47a0      	blx	r4
 8000a76:	0003      	movs	r3, r0
 8000a78:	617b      	str	r3, [r7, #20]
 8000a7a:	697b      	ldr	r3, [r7, #20]
 8000a7c:	0018      	movs	r0, r3
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	b007      	add	sp, #28
 8000a82:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000a84 <l2g2is_write_reg>:
 8000a84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a86:	b087      	sub	sp, #28
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	60f8      	str	r0, [r7, #12]
 8000a8c:	0008      	movs	r0, r1
 8000a8e:	607a      	str	r2, [r7, #4]
 8000a90:	0019      	movs	r1, r3
 8000a92:	260b      	movs	r6, #11
 8000a94:	19bb      	adds	r3, r7, r6
 8000a96:	1c02      	adds	r2, r0, #0
 8000a98:	701a      	strb	r2, [r3, #0]
 8000a9a:	2508      	movs	r5, #8
 8000a9c:	197b      	adds	r3, r7, r5
 8000a9e:	1c0a      	adds	r2, r1, #0
 8000aa0:	801a      	strh	r2, [r3, #0]
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	681c      	ldr	r4, [r3, #0]
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	6898      	ldr	r0, [r3, #8]
 8000aaa:	197b      	adds	r3, r7, r5
 8000aac:	881d      	ldrh	r5, [r3, #0]
 8000aae:	687a      	ldr	r2, [r7, #4]
 8000ab0:	19bb      	adds	r3, r7, r6
 8000ab2:	7819      	ldrb	r1, [r3, #0]
 8000ab4:	002b      	movs	r3, r5
 8000ab6:	47a0      	blx	r4
 8000ab8:	0003      	movs	r3, r0
 8000aba:	617b      	str	r3, [r7, #20]
 8000abc:	697b      	ldr	r3, [r7, #20]
 8000abe:	0018      	movs	r0, r3
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	b007      	add	sp, #28
 8000ac4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000ac6 <l2g2is_gy_data_rate_set>:
 8000ac6:	b590      	push	{r4, r7, lr}
 8000ac8:	b085      	sub	sp, #20
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	6078      	str	r0, [r7, #4]
 8000ace:	000a      	movs	r2, r1
 8000ad0:	1cfb      	adds	r3, r7, #3
 8000ad2:	701a      	strb	r2, [r3, #0]
 8000ad4:	2308      	movs	r3, #8
 8000ad6:	18fa      	adds	r2, r7, r3
 8000ad8:	6878      	ldr	r0, [r7, #4]
 8000ada:	2301      	movs	r3, #1
 8000adc:	210b      	movs	r1, #11
 8000ade:	f7ff ffb0 	bl	8000a42 <l2g2is_read_reg>
 8000ae2:	0003      	movs	r3, r0
 8000ae4:	60fb      	str	r3, [r7, #12]
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d118      	bne.n	8000b1e <l2g2is_gy_data_rate_set+0x58>
 8000aec:	1cfb      	adds	r3, r7, #3
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	2203      	movs	r2, #3
 8000af2:	4013      	ands	r3, r2
 8000af4:	b2da      	uxtb	r2, r3
 8000af6:	2408      	movs	r4, #8
 8000af8:	193b      	adds	r3, r7, r4
 8000afa:	2103      	movs	r1, #3
 8000afc:	400a      	ands	r2, r1
 8000afe:	0010      	movs	r0, r2
 8000b00:	781a      	ldrb	r2, [r3, #0]
 8000b02:	2103      	movs	r1, #3
 8000b04:	438a      	bics	r2, r1
 8000b06:	1c11      	adds	r1, r2, #0
 8000b08:	1c02      	adds	r2, r0, #0
 8000b0a:	430a      	orrs	r2, r1
 8000b0c:	701a      	strb	r2, [r3, #0]
 8000b0e:	193a      	adds	r2, r7, r4
 8000b10:	6878      	ldr	r0, [r7, #4]
 8000b12:	2301      	movs	r3, #1
 8000b14:	210b      	movs	r1, #11
 8000b16:	f7ff ffb5 	bl	8000a84 <l2g2is_write_reg>
 8000b1a:	0003      	movs	r3, r0
 8000b1c:	60fb      	str	r3, [r7, #12]
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	0018      	movs	r0, r3
 8000b22:	46bd      	mov	sp, r7
 8000b24:	b005      	add	sp, #20
 8000b26:	bd90      	pop	{r4, r7, pc}

08000b28 <l2g2is_angular_rate_offset_set>:
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b086      	sub	sp, #24
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
 8000b30:	003b      	movs	r3, r7
 8000b32:	8019      	strh	r1, [r3, #0]
 8000b34:	2310      	movs	r3, #16
 8000b36:	18fa      	adds	r2, r7, r3
 8000b38:	6878      	ldr	r0, [r7, #4]
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	2111      	movs	r1, #17
 8000b3e:	f7ff ff80 	bl	8000a42 <l2g2is_read_reg>
 8000b42:	0003      	movs	r3, r0
 8000b44:	617b      	str	r3, [r7, #20]
 8000b46:	697b      	ldr	r3, [r7, #20]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d110      	bne.n	8000b6e <l2g2is_angular_rate_offset_set+0x46>
 8000b4c:	003b      	movs	r3, r7
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	065b      	lsls	r3, r3, #25
 8000b52:	0e5b      	lsrs	r3, r3, #25
 8000b54:	b2db      	uxtb	r3, r3
 8000b56:	001a      	movs	r2, r3
 8000b58:	2110      	movs	r1, #16
 8000b5a:	187b      	adds	r3, r7, r1
 8000b5c:	701a      	strb	r2, [r3, #0]
 8000b5e:	187a      	adds	r2, r7, r1
 8000b60:	6878      	ldr	r0, [r7, #4]
 8000b62:	2301      	movs	r3, #1
 8000b64:	2111      	movs	r1, #17
 8000b66:	f7ff ff8d 	bl	8000a84 <l2g2is_write_reg>
 8000b6a:	0003      	movs	r3, r0
 8000b6c:	617b      	str	r3, [r7, #20]
 8000b6e:	697b      	ldr	r3, [r7, #20]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d108      	bne.n	8000b86 <l2g2is_angular_rate_offset_set+0x5e>
 8000b74:	230c      	movs	r3, #12
 8000b76:	18fa      	adds	r2, r7, r3
 8000b78:	6878      	ldr	r0, [r7, #4]
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	2112      	movs	r1, #18
 8000b7e:	f7ff ff60 	bl	8000a42 <l2g2is_read_reg>
 8000b82:	0003      	movs	r3, r0
 8000b84:	617b      	str	r3, [r7, #20]
 8000b86:	697b      	ldr	r3, [r7, #20]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d110      	bne.n	8000bae <l2g2is_angular_rate_offset_set+0x86>
 8000b8c:	003b      	movs	r3, r7
 8000b8e:	785b      	ldrb	r3, [r3, #1]
 8000b90:	065b      	lsls	r3, r3, #25
 8000b92:	0e5b      	lsrs	r3, r3, #25
 8000b94:	b2db      	uxtb	r3, r3
 8000b96:	001a      	movs	r2, r3
 8000b98:	210c      	movs	r1, #12
 8000b9a:	187b      	adds	r3, r7, r1
 8000b9c:	701a      	strb	r2, [r3, #0]
 8000b9e:	187a      	adds	r2, r7, r1
 8000ba0:	6878      	ldr	r0, [r7, #4]
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	2112      	movs	r1, #18
 8000ba6:	f7ff ff6d 	bl	8000a84 <l2g2is_write_reg>
 8000baa:	0003      	movs	r3, r0
 8000bac:	617b      	str	r3, [r7, #20]
 8000bae:	697b      	ldr	r3, [r7, #20]
 8000bb0:	0018      	movs	r0, r3
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	b006      	add	sp, #24
 8000bb6:	bd80      	pop	{r7, pc}

08000bb8 <l2g2is_gy_full_scale_set>:
 8000bb8:	b590      	push	{r4, r7, lr}
 8000bba:	b085      	sub	sp, #20
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
 8000bc0:	000a      	movs	r2, r1
 8000bc2:	1cfb      	adds	r3, r7, #3
 8000bc4:	701a      	strb	r2, [r3, #0]
 8000bc6:	2308      	movs	r3, #8
 8000bc8:	18fa      	adds	r2, r7, r3
 8000bca:	6878      	ldr	r0, [r7, #4]
 8000bcc:	2301      	movs	r3, #1
 8000bce:	211f      	movs	r1, #31
 8000bd0:	f7ff ff37 	bl	8000a42 <l2g2is_read_reg>
 8000bd4:	0003      	movs	r3, r0
 8000bd6:	60fb      	str	r3, [r7, #12]
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d118      	bne.n	8000c10 <l2g2is_gy_full_scale_set+0x58>
 8000bde:	1cfb      	adds	r3, r7, #3
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	2201      	movs	r2, #1
 8000be4:	4013      	ands	r3, r2
 8000be6:	b2da      	uxtb	r2, r3
 8000be8:	2408      	movs	r4, #8
 8000bea:	193b      	adds	r3, r7, r4
 8000bec:	2101      	movs	r1, #1
 8000bee:	400a      	ands	r2, r1
 8000bf0:	00d0      	lsls	r0, r2, #3
 8000bf2:	781a      	ldrb	r2, [r3, #0]
 8000bf4:	2108      	movs	r1, #8
 8000bf6:	438a      	bics	r2, r1
 8000bf8:	1c11      	adds	r1, r2, #0
 8000bfa:	1c02      	adds	r2, r0, #0
 8000bfc:	430a      	orrs	r2, r1
 8000bfe:	701a      	strb	r2, [r3, #0]
 8000c00:	193a      	adds	r2, r7, r4
 8000c02:	6878      	ldr	r0, [r7, #4]
 8000c04:	2301      	movs	r3, #1
 8000c06:	211f      	movs	r1, #31
 8000c08:	f7ff ff3c 	bl	8000a84 <l2g2is_write_reg>
 8000c0c:	0003      	movs	r3, r0
 8000c0e:	60fb      	str	r3, [r7, #12]
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	0018      	movs	r0, r3
 8000c14:	46bd      	mov	sp, r7
 8000c16:	b005      	add	sp, #20
 8000c18:	bd90      	pop	{r4, r7, pc}

08000c1a <l2g2is_angular_rate_raw_get>:
 8000c1a:	b580      	push	{r7, lr}
 8000c1c:	b084      	sub	sp, #16
 8000c1e:	af00      	add	r7, sp, #0
 8000c20:	6078      	str	r0, [r7, #4]
 8000c22:	6039      	str	r1, [r7, #0]
 8000c24:	683a      	ldr	r2, [r7, #0]
 8000c26:	6878      	ldr	r0, [r7, #4]
 8000c28:	2304      	movs	r3, #4
 8000c2a:	2103      	movs	r1, #3
 8000c2c:	f7ff ff09 	bl	8000a42 <l2g2is_read_reg>
 8000c30:	0003      	movs	r3, r0
 8000c32:	60fb      	str	r3, [r7, #12]
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	0018      	movs	r0, r3
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	b004      	add	sp, #16
 8000c3c:	bd80      	pop	{r7, pc}

08000c3e <l2g2is_dev_id_get>:
 8000c3e:	b580      	push	{r7, lr}
 8000c40:	b084      	sub	sp, #16
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	6078      	str	r0, [r7, #4]
 8000c46:	6039      	str	r1, [r7, #0]
 8000c48:	683a      	ldr	r2, [r7, #0]
 8000c4a:	6878      	ldr	r0, [r7, #4]
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	2100      	movs	r1, #0
 8000c50:	f7ff fef7 	bl	8000a42 <l2g2is_read_reg>
 8000c54:	0003      	movs	r3, r0
 8000c56:	60fb      	str	r3, [r7, #12]
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	0018      	movs	r0, r3
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	b004      	add	sp, #16
 8000c60:	bd80      	pop	{r7, pc}

08000c62 <l2g2is_dev_status_get>:
 8000c62:	b590      	push	{r4, r7, lr}
 8000c64:	b085      	sub	sp, #20
 8000c66:	af00      	add	r7, sp, #0
 8000c68:	6078      	str	r0, [r7, #4]
 8000c6a:	6039      	str	r1, [r7, #0]
 8000c6c:	2408      	movs	r4, #8
 8000c6e:	193a      	adds	r2, r7, r4
 8000c70:	6878      	ldr	r0, [r7, #4]
 8000c72:	2301      	movs	r3, #1
 8000c74:	2109      	movs	r1, #9
 8000c76:	f7ff fee4 	bl	8000a42 <l2g2is_read_reg>
 8000c7a:	0003      	movs	r3, r0
 8000c7c:	60fb      	str	r3, [r7, #12]
 8000c7e:	193b      	adds	r3, r7, r4
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	071b      	lsls	r3, r3, #28
 8000c84:	0fdb      	lsrs	r3, r3, #31
 8000c86:	b2da      	uxtb	r2, r3
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	2101      	movs	r1, #1
 8000c8c:	400a      	ands	r2, r1
 8000c8e:	0010      	movs	r0, r2
 8000c90:	781a      	ldrb	r2, [r3, #0]
 8000c92:	2101      	movs	r1, #1
 8000c94:	438a      	bics	r2, r1
 8000c96:	1c11      	adds	r1, r2, #0
 8000c98:	1c02      	adds	r2, r0, #0
 8000c9a:	430a      	orrs	r2, r1
 8000c9c:	701a      	strb	r2, [r3, #0]
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	0018      	movs	r0, r3
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	b005      	add	sp, #20
 8000ca6:	bd90      	pop	{r4, r7, pc}

08000ca8 <l2g2is_dev_reset_set>:
 8000ca8:	b590      	push	{r4, r7, lr}
 8000caa:	b085      	sub	sp, #20
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
 8000cb0:	000a      	movs	r2, r1
 8000cb2:	1cfb      	adds	r3, r7, #3
 8000cb4:	701a      	strb	r2, [r3, #0]
 8000cb6:	2308      	movs	r3, #8
 8000cb8:	18fa      	adds	r2, r7, r3
 8000cba:	6878      	ldr	r0, [r7, #4]
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	210c      	movs	r1, #12
 8000cc0:	f7ff febf 	bl	8000a42 <l2g2is_read_reg>
 8000cc4:	0003      	movs	r3, r0
 8000cc6:	60fb      	str	r3, [r7, #12]
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d118      	bne.n	8000d00 <l2g2is_dev_reset_set+0x58>
 8000cce:	1cfb      	adds	r3, r7, #3
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	b2da      	uxtb	r2, r3
 8000cd8:	2408      	movs	r4, #8
 8000cda:	193b      	adds	r3, r7, r4
 8000cdc:	2101      	movs	r1, #1
 8000cde:	400a      	ands	r2, r1
 8000ce0:	1890      	adds	r0, r2, r2
 8000ce2:	781a      	ldrb	r2, [r3, #0]
 8000ce4:	2102      	movs	r1, #2
 8000ce6:	438a      	bics	r2, r1
 8000ce8:	1c11      	adds	r1, r2, #0
 8000cea:	1c02      	adds	r2, r0, #0
 8000cec:	430a      	orrs	r2, r1
 8000cee:	701a      	strb	r2, [r3, #0]
 8000cf0:	193a      	adds	r2, r7, r4
 8000cf2:	6878      	ldr	r0, [r7, #4]
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	210c      	movs	r1, #12
 8000cf8:	f7ff fec4 	bl	8000a84 <l2g2is_write_reg>
 8000cfc:	0003      	movs	r3, r0
 8000cfe:	60fb      	str	r3, [r7, #12]
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	0018      	movs	r0, r3
 8000d04:	46bd      	mov	sp, r7
 8000d06:	b005      	add	sp, #20
 8000d08:	bd90      	pop	{r4, r7, pc}

08000d0a <l2g2is_dev_reset_get>:
 8000d0a:	b590      	push	{r4, r7, lr}
 8000d0c:	b085      	sub	sp, #20
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	6078      	str	r0, [r7, #4]
 8000d12:	6039      	str	r1, [r7, #0]
 8000d14:	2408      	movs	r4, #8
 8000d16:	193a      	adds	r2, r7, r4
 8000d18:	6878      	ldr	r0, [r7, #4]
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	210c      	movs	r1, #12
 8000d1e:	f7ff fe90 	bl	8000a42 <l2g2is_read_reg>
 8000d22:	0003      	movs	r3, r0
 8000d24:	60fb      	str	r3, [r7, #12]
 8000d26:	193b      	adds	r3, r7, r4
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	079b      	lsls	r3, r3, #30
 8000d2c:	0fdb      	lsrs	r3, r3, #31
 8000d2e:	b2db      	uxtb	r3, r3
 8000d30:	001a      	movs	r2, r3
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	701a      	strb	r2, [r3, #0]
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	0018      	movs	r0, r3
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	b005      	add	sp, #20
 8000d3e:	bd90      	pop	{r4, r7, pc}

08000d40 <lps22hb_read_reg>:
 8000d40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d42:	b087      	sub	sp, #28
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	60f8      	str	r0, [r7, #12]
 8000d48:	0008      	movs	r0, r1
 8000d4a:	607a      	str	r2, [r7, #4]
 8000d4c:	0019      	movs	r1, r3
 8000d4e:	260b      	movs	r6, #11
 8000d50:	19bb      	adds	r3, r7, r6
 8000d52:	1c02      	adds	r2, r0, #0
 8000d54:	701a      	strb	r2, [r3, #0]
 8000d56:	2508      	movs	r5, #8
 8000d58:	197b      	adds	r3, r7, r5
 8000d5a:	1c0a      	adds	r2, r1, #0
 8000d5c:	801a      	strh	r2, [r3, #0]
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	685c      	ldr	r4, [r3, #4]
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	6898      	ldr	r0, [r3, #8]
 8000d66:	197b      	adds	r3, r7, r5
 8000d68:	881d      	ldrh	r5, [r3, #0]
 8000d6a:	687a      	ldr	r2, [r7, #4]
 8000d6c:	19bb      	adds	r3, r7, r6
 8000d6e:	7819      	ldrb	r1, [r3, #0]
 8000d70:	002b      	movs	r3, r5
 8000d72:	47a0      	blx	r4
 8000d74:	0003      	movs	r3, r0
 8000d76:	617b      	str	r3, [r7, #20]
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	0018      	movs	r0, r3
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	b007      	add	sp, #28
 8000d80:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000d82 <lps22hb_write_reg>:
 8000d82:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d84:	b087      	sub	sp, #28
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	60f8      	str	r0, [r7, #12]
 8000d8a:	0008      	movs	r0, r1
 8000d8c:	607a      	str	r2, [r7, #4]
 8000d8e:	0019      	movs	r1, r3
 8000d90:	260b      	movs	r6, #11
 8000d92:	19bb      	adds	r3, r7, r6
 8000d94:	1c02      	adds	r2, r0, #0
 8000d96:	701a      	strb	r2, [r3, #0]
 8000d98:	2508      	movs	r5, #8
 8000d9a:	197b      	adds	r3, r7, r5
 8000d9c:	1c0a      	adds	r2, r1, #0
 8000d9e:	801a      	strh	r2, [r3, #0]
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	681c      	ldr	r4, [r3, #0]
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	6898      	ldr	r0, [r3, #8]
 8000da8:	197b      	adds	r3, r7, r5
 8000daa:	881d      	ldrh	r5, [r3, #0]
 8000dac:	687a      	ldr	r2, [r7, #4]
 8000dae:	19bb      	adds	r3, r7, r6
 8000db0:	7819      	ldrb	r1, [r3, #0]
 8000db2:	002b      	movs	r3, r5
 8000db4:	47a0      	blx	r4
 8000db6:	0003      	movs	r3, r0
 8000db8:	617b      	str	r3, [r7, #20]
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	0018      	movs	r0, r3
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	b007      	add	sp, #28
 8000dc2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000dc4 <lps22hb_low_pass_filter_mode_set>:
 8000dc4:	b590      	push	{r4, r7, lr}
 8000dc6:	b085      	sub	sp, #20
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
 8000dcc:	000a      	movs	r2, r1
 8000dce:	1cfb      	adds	r3, r7, #3
 8000dd0:	701a      	strb	r2, [r3, #0]
 8000dd2:	2308      	movs	r3, #8
 8000dd4:	18fa      	adds	r2, r7, r3
 8000dd6:	6878      	ldr	r0, [r7, #4]
 8000dd8:	2301      	movs	r3, #1
 8000dda:	2110      	movs	r1, #16
 8000ddc:	f7ff ffb0 	bl	8000d40 <lps22hb_read_reg>
 8000de0:	0003      	movs	r3, r0
 8000de2:	60fb      	str	r3, [r7, #12]
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d118      	bne.n	8000e1c <lps22hb_low_pass_filter_mode_set+0x58>
 8000dea:	1cfb      	adds	r3, r7, #3
 8000dec:	781b      	ldrb	r3, [r3, #0]
 8000dee:	2203      	movs	r2, #3
 8000df0:	4013      	ands	r3, r2
 8000df2:	b2da      	uxtb	r2, r3
 8000df4:	2408      	movs	r4, #8
 8000df6:	193b      	adds	r3, r7, r4
 8000df8:	2103      	movs	r1, #3
 8000dfa:	400a      	ands	r2, r1
 8000dfc:	0090      	lsls	r0, r2, #2
 8000dfe:	781a      	ldrb	r2, [r3, #0]
 8000e00:	210c      	movs	r1, #12
 8000e02:	438a      	bics	r2, r1
 8000e04:	1c11      	adds	r1, r2, #0
 8000e06:	1c02      	adds	r2, r0, #0
 8000e08:	430a      	orrs	r2, r1
 8000e0a:	701a      	strb	r2, [r3, #0]
 8000e0c:	193a      	adds	r2, r7, r4
 8000e0e:	6878      	ldr	r0, [r7, #4]
 8000e10:	2301      	movs	r3, #1
 8000e12:	2110      	movs	r1, #16
 8000e14:	f7ff ffb5 	bl	8000d82 <lps22hb_write_reg>
 8000e18:	0003      	movs	r3, r0
 8000e1a:	60fb      	str	r3, [r7, #12]
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	0018      	movs	r0, r3
 8000e20:	46bd      	mov	sp, r7
 8000e22:	b005      	add	sp, #20
 8000e24:	bd90      	pop	{r4, r7, pc}

08000e26 <lps22hb_data_rate_set>:
 8000e26:	b590      	push	{r4, r7, lr}
 8000e28:	b085      	sub	sp, #20
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	6078      	str	r0, [r7, #4]
 8000e2e:	000a      	movs	r2, r1
 8000e30:	1cfb      	adds	r3, r7, #3
 8000e32:	701a      	strb	r2, [r3, #0]
 8000e34:	2308      	movs	r3, #8
 8000e36:	18fa      	adds	r2, r7, r3
 8000e38:	6878      	ldr	r0, [r7, #4]
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	2110      	movs	r1, #16
 8000e3e:	f7ff ff7f 	bl	8000d40 <lps22hb_read_reg>
 8000e42:	0003      	movs	r3, r0
 8000e44:	60fb      	str	r3, [r7, #12]
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d118      	bne.n	8000e7e <lps22hb_data_rate_set+0x58>
 8000e4c:	1cfb      	adds	r3, r7, #3
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	2207      	movs	r2, #7
 8000e52:	4013      	ands	r3, r2
 8000e54:	b2da      	uxtb	r2, r3
 8000e56:	2408      	movs	r4, #8
 8000e58:	193b      	adds	r3, r7, r4
 8000e5a:	2107      	movs	r1, #7
 8000e5c:	400a      	ands	r2, r1
 8000e5e:	0110      	lsls	r0, r2, #4
 8000e60:	781a      	ldrb	r2, [r3, #0]
 8000e62:	2170      	movs	r1, #112	; 0x70
 8000e64:	438a      	bics	r2, r1
 8000e66:	1c11      	adds	r1, r2, #0
 8000e68:	1c02      	adds	r2, r0, #0
 8000e6a:	430a      	orrs	r2, r1
 8000e6c:	701a      	strb	r2, [r3, #0]
 8000e6e:	193a      	adds	r2, r7, r4
 8000e70:	6878      	ldr	r0, [r7, #4]
 8000e72:	2301      	movs	r3, #1
 8000e74:	2110      	movs	r1, #16
 8000e76:	f7ff ff84 	bl	8000d82 <lps22hb_write_reg>
 8000e7a:	0003      	movs	r3, r0
 8000e7c:	60fb      	str	r3, [r7, #12]
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	0018      	movs	r0, r3
 8000e82:	46bd      	mov	sp, r7
 8000e84:	b005      	add	sp, #20
 8000e86:	bd90      	pop	{r4, r7, pc}

08000e88 <lps22hb_press_data_ready_get>:
 8000e88:	b590      	push	{r4, r7, lr}
 8000e8a:	b085      	sub	sp, #20
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
 8000e90:	6039      	str	r1, [r7, #0]
 8000e92:	2408      	movs	r4, #8
 8000e94:	193a      	adds	r2, r7, r4
 8000e96:	6878      	ldr	r0, [r7, #4]
 8000e98:	2301      	movs	r3, #1
 8000e9a:	2127      	movs	r1, #39	; 0x27
 8000e9c:	f7ff ff50 	bl	8000d40 <lps22hb_read_reg>
 8000ea0:	0003      	movs	r3, r0
 8000ea2:	60fb      	str	r3, [r7, #12]
 8000ea4:	193b      	adds	r3, r7, r4
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	07db      	lsls	r3, r3, #31
 8000eaa:	0fdb      	lsrs	r3, r3, #31
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	001a      	movs	r2, r3
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	701a      	strb	r2, [r3, #0]
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	0018      	movs	r0, r3
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	b005      	add	sp, #20
 8000ebc:	bd90      	pop	{r4, r7, pc}

08000ebe <lps22hb_pressure_raw_get>:
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	b084      	sub	sp, #16
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	6078      	str	r0, [r7, #4]
 8000ec6:	6039      	str	r1, [r7, #0]
 8000ec8:	683a      	ldr	r2, [r7, #0]
 8000eca:	6878      	ldr	r0, [r7, #4]
 8000ecc:	2303      	movs	r3, #3
 8000ece:	2128      	movs	r1, #40	; 0x28
 8000ed0:	f7ff ff36 	bl	8000d40 <lps22hb_read_reg>
 8000ed4:	0003      	movs	r3, r0
 8000ed6:	60fb      	str	r3, [r7, #12]
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	0018      	movs	r0, r3
 8000edc:	46bd      	mov	sp, r7
 8000ede:	b004      	add	sp, #16
 8000ee0:	bd80      	pop	{r7, pc}

08000ee2 <lps22hb_temperature_raw_get>:
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	b084      	sub	sp, #16
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	6078      	str	r0, [r7, #4]
 8000eea:	6039      	str	r1, [r7, #0]
 8000eec:	683a      	ldr	r2, [r7, #0]
 8000eee:	6878      	ldr	r0, [r7, #4]
 8000ef0:	2302      	movs	r3, #2
 8000ef2:	212b      	movs	r1, #43	; 0x2b
 8000ef4:	f7ff ff24 	bl	8000d40 <lps22hb_read_reg>
 8000ef8:	0003      	movs	r3, r0
 8000efa:	60fb      	str	r3, [r7, #12]
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	0018      	movs	r0, r3
 8000f00:	46bd      	mov	sp, r7
 8000f02:	b004      	add	sp, #16
 8000f04:	bd80      	pop	{r7, pc}

08000f06 <lps22hb_device_id_get>:
 8000f06:	b580      	push	{r7, lr}
 8000f08:	b084      	sub	sp, #16
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	6078      	str	r0, [r7, #4]
 8000f0e:	6039      	str	r1, [r7, #0]
 8000f10:	683a      	ldr	r2, [r7, #0]
 8000f12:	6878      	ldr	r0, [r7, #4]
 8000f14:	2301      	movs	r3, #1
 8000f16:	210f      	movs	r1, #15
 8000f18:	f7ff ff12 	bl	8000d40 <lps22hb_read_reg>
 8000f1c:	0003      	movs	r3, r0
 8000f1e:	60fb      	str	r3, [r7, #12]
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	0018      	movs	r0, r3
 8000f24:	46bd      	mov	sp, r7
 8000f26:	b004      	add	sp, #16
 8000f28:	bd80      	pop	{r7, pc}

08000f2a <lps22hb_reset_set>:
 8000f2a:	b590      	push	{r4, r7, lr}
 8000f2c:	b085      	sub	sp, #20
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	6078      	str	r0, [r7, #4]
 8000f32:	000a      	movs	r2, r1
 8000f34:	1cfb      	adds	r3, r7, #3
 8000f36:	701a      	strb	r2, [r3, #0]
 8000f38:	2308      	movs	r3, #8
 8000f3a:	18fa      	adds	r2, r7, r3
 8000f3c:	6878      	ldr	r0, [r7, #4]
 8000f3e:	2301      	movs	r3, #1
 8000f40:	2111      	movs	r1, #17
 8000f42:	f7ff fefd 	bl	8000d40 <lps22hb_read_reg>
 8000f46:	0003      	movs	r3, r0
 8000f48:	60fb      	str	r3, [r7, #12]
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d118      	bne.n	8000f82 <lps22hb_reset_set+0x58>
 8000f50:	1cfb      	adds	r3, r7, #3
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	2201      	movs	r2, #1
 8000f56:	4013      	ands	r3, r2
 8000f58:	b2da      	uxtb	r2, r3
 8000f5a:	2408      	movs	r4, #8
 8000f5c:	193b      	adds	r3, r7, r4
 8000f5e:	2101      	movs	r1, #1
 8000f60:	400a      	ands	r2, r1
 8000f62:	0090      	lsls	r0, r2, #2
 8000f64:	781a      	ldrb	r2, [r3, #0]
 8000f66:	2104      	movs	r1, #4
 8000f68:	438a      	bics	r2, r1
 8000f6a:	1c11      	adds	r1, r2, #0
 8000f6c:	1c02      	adds	r2, r0, #0
 8000f6e:	430a      	orrs	r2, r1
 8000f70:	701a      	strb	r2, [r3, #0]
 8000f72:	193a      	adds	r2, r7, r4
 8000f74:	6878      	ldr	r0, [r7, #4]
 8000f76:	2301      	movs	r3, #1
 8000f78:	2111      	movs	r1, #17
 8000f7a:	f7ff ff02 	bl	8000d82 <lps22hb_write_reg>
 8000f7e:	0003      	movs	r3, r0
 8000f80:	60fb      	str	r3, [r7, #12]
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	0018      	movs	r0, r3
 8000f86:	46bd      	mov	sp, r7
 8000f88:	b005      	add	sp, #20
 8000f8a:	bd90      	pop	{r4, r7, pc}

08000f8c <lps22hb_reset_get>:
 8000f8c:	b590      	push	{r4, r7, lr}
 8000f8e:	b085      	sub	sp, #20
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	6039      	str	r1, [r7, #0]
 8000f96:	2408      	movs	r4, #8
 8000f98:	193a      	adds	r2, r7, r4
 8000f9a:	6878      	ldr	r0, [r7, #4]
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	2111      	movs	r1, #17
 8000fa0:	f7ff fece 	bl	8000d40 <lps22hb_read_reg>
 8000fa4:	0003      	movs	r3, r0
 8000fa6:	60fb      	str	r3, [r7, #12]
 8000fa8:	193b      	adds	r3, r7, r4
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	075b      	lsls	r3, r3, #29
 8000fae:	0fdb      	lsrs	r3, r3, #31
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	001a      	movs	r2, r3
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	701a      	strb	r2, [r3, #0]
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	0018      	movs	r0, r3
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	b005      	add	sp, #20
 8000fc0:	bd90      	pop	{r4, r7, pc}
	...

08000fc4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fc4:	b5b0      	push	{r4, r5, r7, lr}
 8000fc6:	b08a      	sub	sp, #40	; 0x28
 8000fc8:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fca:	f001 fb7f 	bl	80026cc <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fce:	f000 faa9 	bl	8001524 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fd2:	f000 fce7 	bl	80019a4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000fd6:	f000 fb3d 	bl	8001654 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000fda:	f000 fb7b 	bl	80016d4 <MX_SPI1_Init>
  MX_TIM2_Init();
 8000fde:	f000 fc0f 	bl	8001800 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000fe2:	f000 fbb5 	bl	8001750 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000fe6:	f000 fc5f 	bl	80018a8 <MX_TIM3_Init>
  MX_CAN_Init();
 8000fea:	f000 fafd 	bl	80015e8 <MX_CAN_Init>
  MX_TIM16_Init();
 8000fee:	f000 fcb1 	bl	8001954 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
	TxHeader.StdId=0x312;
 8000ff2:	4bdc      	ldr	r3, [pc, #880]	; (8001364 <main+0x3a0>)
 8000ff4:	4adc      	ldr	r2, [pc, #880]	; (8001368 <main+0x3a4>)
 8000ff6:	601a      	str	r2, [r3, #0]
	TxHeader.ExtId=0x010;
 8000ff8:	4bda      	ldr	r3, [pc, #872]	; (8001364 <main+0x3a0>)
 8000ffa:	2210      	movs	r2, #16
 8000ffc:	605a      	str	r2, [r3, #4]
	TxHeader.RTR=CAN_RTR_DATA;
 8000ffe:	4bd9      	ldr	r3, [pc, #868]	; (8001364 <main+0x3a0>)
 8001000:	2200      	movs	r2, #0
 8001002:	60da      	str	r2, [r3, #12]
	TxHeader.IDE=CAN_ID_STD;
 8001004:	4bd7      	ldr	r3, [pc, #860]	; (8001364 <main+0x3a0>)
 8001006:	2200      	movs	r2, #0
 8001008:	609a      	str	r2, [r3, #8]
	TxHeader.DLC=8;
 800100a:	4bd6      	ldr	r3, [pc, #856]	; (8001364 <main+0x3a0>)
 800100c:	2208      	movs	r2, #8
 800100e:	611a      	str	r2, [r3, #16]
	TxHeader.TransmitGlobalTime=DISABLE;
 8001010:	4bd4      	ldr	r3, [pc, #848]	; (8001364 <main+0x3a0>)
 8001012:	2200      	movs	r2, #0
 8001014:	751a      	strb	r2, [r3, #20]

	//SETTAGGIO FILTRI E INIZIALIZZAZIONE CAN
	sFilterConfig.FilterFIFOAssignment=CAN_FILTER_FIFO0;
 8001016:	4bd5      	ldr	r3, [pc, #852]	; (800136c <main+0x3a8>)
 8001018:	2200      	movs	r2, #0
 800101a:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterIdHigh=0x313<<5;
 800101c:	4bd3      	ldr	r3, [pc, #844]	; (800136c <main+0x3a8>)
 800101e:	4ad4      	ldr	r2, [pc, #848]	; (8001370 <main+0x3ac>)
 8001020:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIdLow=0;
 8001022:	4bd2      	ldr	r3, [pc, #840]	; (800136c <main+0x3a8>)
 8001024:	2200      	movs	r2, #0
 8001026:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterMaskIdHigh=0;
 8001028:	4bd0      	ldr	r3, [pc, #832]	; (800136c <main+0x3a8>)
 800102a:	2200      	movs	r2, #0
 800102c:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow=0;
 800102e:	4bcf      	ldr	r3, [pc, #828]	; (800136c <main+0x3a8>)
 8001030:	2200      	movs	r2, #0
 8001032:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterScale=CAN_FILTERSCALE_32BIT;
 8001034:	4bcd      	ldr	r3, [pc, #820]	; (800136c <main+0x3a8>)
 8001036:	2201      	movs	r2, #1
 8001038:	61da      	str	r2, [r3, #28]
	sFilterConfig.FilterActivation=ENABLE;
 800103a:	4bcc      	ldr	r3, [pc, #816]	; (800136c <main+0x3a8>)
 800103c:	2201      	movs	r2, #1
 800103e:	621a      	str	r2, [r3, #32]
	HAL_CAN_ConfigFilter(&hcan,&sFilterConfig);
 8001040:	4aca      	ldr	r2, [pc, #808]	; (800136c <main+0x3a8>)
 8001042:	4bcc      	ldr	r3, [pc, #816]	; (8001374 <main+0x3b0>)
 8001044:	0011      	movs	r1, r2
 8001046:	0018      	movs	r0, r3
 8001048:	f001 fcc4 	bl	80029d4 <HAL_CAN_ConfigFilter>
	HAL_CAN_Start(&hcan);
 800104c:	4bc9      	ldr	r3, [pc, #804]	; (8001374 <main+0x3b0>)
 800104e:	0018      	movs	r0, r3
 8001050:	f001 fdb2 	bl	8002bb8 <HAL_CAN_Start>

	HAL_Delay(100);
 8001054:	2064      	movs	r0, #100	; 0x64
 8001056:	f001 fb9d 	bl	8002794 <HAL_Delay>

	//RICONOSCIMENTO ID TRAMITE PONTICELLO
	if(HAL_GPIO_ReadPin(GPIOB,I0_Pin)){ID=ID|0x01;}
 800105a:	4bc7      	ldr	r3, [pc, #796]	; (8001378 <main+0x3b4>)
 800105c:	2140      	movs	r1, #64	; 0x40
 800105e:	0018      	movs	r0, r3
 8001060:	f002 f916 	bl	8003290 <HAL_GPIO_ReadPin>
 8001064:	1e03      	subs	r3, r0, #0
 8001066:	d006      	beq.n	8001076 <main+0xb2>
 8001068:	4bc4      	ldr	r3, [pc, #784]	; (800137c <main+0x3b8>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	2201      	movs	r2, #1
 800106e:	4313      	orrs	r3, r2
 8001070:	b2da      	uxtb	r2, r3
 8001072:	4bc2      	ldr	r3, [pc, #776]	; (800137c <main+0x3b8>)
 8001074:	701a      	strb	r2, [r3, #0]
	if(HAL_GPIO_ReadPin(GPIOB,I1_Pin)){ID=ID|0x02;}
 8001076:	4bc0      	ldr	r3, [pc, #768]	; (8001378 <main+0x3b4>)
 8001078:	2120      	movs	r1, #32
 800107a:	0018      	movs	r0, r3
 800107c:	f002 f908 	bl	8003290 <HAL_GPIO_ReadPin>
 8001080:	1e03      	subs	r3, r0, #0
 8001082:	d006      	beq.n	8001092 <main+0xce>
 8001084:	4bbd      	ldr	r3, [pc, #756]	; (800137c <main+0x3b8>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	2202      	movs	r2, #2
 800108a:	4313      	orrs	r3, r2
 800108c:	b2da      	uxtb	r2, r3
 800108e:	4bbb      	ldr	r3, [pc, #748]	; (800137c <main+0x3b8>)
 8001090:	701a      	strb	r2, [r3, #0]
	if(HAL_GPIO_ReadPin(GPIOB,I2_Pin)){ID=ID|0x04;}
 8001092:	4bb9      	ldr	r3, [pc, #740]	; (8001378 <main+0x3b4>)
 8001094:	2110      	movs	r1, #16
 8001096:	0018      	movs	r0, r3
 8001098:	f002 f8fa 	bl	8003290 <HAL_GPIO_ReadPin>
 800109c:	1e03      	subs	r3, r0, #0
 800109e:	d006      	beq.n	80010ae <main+0xea>
 80010a0:	4bb6      	ldr	r3, [pc, #728]	; (800137c <main+0x3b8>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	2204      	movs	r2, #4
 80010a6:	4313      	orrs	r3, r2
 80010a8:	b2da      	uxtb	r2, r3
 80010aa:	4bb4      	ldr	r3, [pc, #720]	; (800137c <main+0x3b8>)
 80010ac:	701a      	strb	r2, [r3, #0]
	if(HAL_GPIO_ReadPin(GPIOB,I3_Pin)){ID=ID|0x08;}
 80010ae:	4bb2      	ldr	r3, [pc, #712]	; (8001378 <main+0x3b4>)
 80010b0:	2108      	movs	r1, #8
 80010b2:	0018      	movs	r0, r3
 80010b4:	f002 f8ec 	bl	8003290 <HAL_GPIO_ReadPin>
 80010b8:	1e03      	subs	r3, r0, #0
 80010ba:	d006      	beq.n	80010ca <main+0x106>
 80010bc:	4baf      	ldr	r3, [pc, #700]	; (800137c <main+0x3b8>)
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	2208      	movs	r2, #8
 80010c2:	4313      	orrs	r3, r2
 80010c4:	b2da      	uxtb	r2, r3
 80010c6:	4bad      	ldr	r3, [pc, #692]	; (800137c <main+0x3b8>)
 80010c8:	701a      	strb	r2, [r3, #0]
	if(HAL_GPIO_ReadPin(GPIOA,I4_Pin)){ID=ID|0x10;}
 80010ca:	2380      	movs	r3, #128	; 0x80
 80010cc:	021a      	lsls	r2, r3, #8
 80010ce:	2390      	movs	r3, #144	; 0x90
 80010d0:	05db      	lsls	r3, r3, #23
 80010d2:	0011      	movs	r1, r2
 80010d4:	0018      	movs	r0, r3
 80010d6:	f002 f8db 	bl	8003290 <HAL_GPIO_ReadPin>
 80010da:	1e03      	subs	r3, r0, #0
 80010dc:	d006      	beq.n	80010ec <main+0x128>
 80010de:	4ba7      	ldr	r3, [pc, #668]	; (800137c <main+0x3b8>)
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	2210      	movs	r2, #16
 80010e4:	4313      	orrs	r3, r2
 80010e6:	b2da      	uxtb	r2, r3
 80010e8:	4ba4      	ldr	r3, [pc, #656]	; (800137c <main+0x3b8>)
 80010ea:	701a      	strb	r2, [r3, #0]
	//OGNI ID VIENE TRASFORMATO IN UN RANGE DA 0 A 9 E SERVIRA' PER TEMPORIZARE L'INVIO
	if(ID>9)IDF=ID-10;
 80010ec:	4ba3      	ldr	r3, [pc, #652]	; (800137c <main+0x3b8>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	2b09      	cmp	r3, #9
 80010f2:	d905      	bls.n	8001100 <main+0x13c>
 80010f4:	4ba1      	ldr	r3, [pc, #644]	; (800137c <main+0x3b8>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	3b0a      	subs	r3, #10
 80010fa:	b2da      	uxtb	r2, r3
 80010fc:	4ba0      	ldr	r3, [pc, #640]	; (8001380 <main+0x3bc>)
 80010fe:	701a      	strb	r2, [r3, #0]
	if(ID>19)IDF=ID-20;
 8001100:	4b9e      	ldr	r3, [pc, #632]	; (800137c <main+0x3b8>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	2b13      	cmp	r3, #19
 8001106:	d905      	bls.n	8001114 <main+0x150>
 8001108:	4b9c      	ldr	r3, [pc, #624]	; (800137c <main+0x3b8>)
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	3b14      	subs	r3, #20
 800110e:	b2da      	uxtb	r2, r3
 8001110:	4b9b      	ldr	r3, [pc, #620]	; (8001380 <main+0x3bc>)
 8001112:	701a      	strb	r2, [r3, #0]
	htim1.Init.Period = 1200+IDF*350;
 8001114:	4b9a      	ldr	r3, [pc, #616]	; (8001380 <main+0x3bc>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	001a      	movs	r2, r3
 800111a:	23af      	movs	r3, #175	; 0xaf
 800111c:	005b      	lsls	r3, r3, #1
 800111e:	4353      	muls	r3, r2
 8001120:	2296      	movs	r2, #150	; 0x96
 8001122:	00d2      	lsls	r2, r2, #3
 8001124:	4694      	mov	ip, r2
 8001126:	4463      	add	r3, ip
 8001128:	001a      	movs	r2, r3
 800112a:	4b96      	ldr	r3, [pc, #600]	; (8001384 <main+0x3c0>)
 800112c:	60da      	str	r2, [r3, #12]

	//TRASMISSIONE SPI DISABILITATA
	HAL_GPIO_WritePin(GPIOB, cs_1_Pin, GPIO_PIN_SET);
 800112e:	4b92      	ldr	r3, [pc, #584]	; (8001378 <main+0x3b4>)
 8001130:	2201      	movs	r2, #1
 8001132:	2101      	movs	r1, #1
 8001134:	0018      	movs	r0, r3
 8001136:	f002 f8c8 	bl	80032ca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, cs_2_Pin, GPIO_PIN_SET);
 800113a:	4b8f      	ldr	r3, [pc, #572]	; (8001378 <main+0x3b4>)
 800113c:	2201      	movs	r2, #1
 800113e:	2102      	movs	r1, #2
 8001140:	0018      	movs	r0, r3
 8001142:	f002 f8c2 	bl	80032ca <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001146:	2001      	movs	r0, #1
 8001148:	f001 fb24 	bl	8002794 <HAL_Delay>

	//DEFINIZIONE DEI DEVICE
	//ACCELEROMETRO

	dev_ctx_acc.write_reg = platform_write;
 800114c:	4b8e      	ldr	r3, [pc, #568]	; (8001388 <main+0x3c4>)
 800114e:	4a8f      	ldr	r2, [pc, #572]	; (800138c <main+0x3c8>)
 8001150:	601a      	str	r2, [r3, #0]
	dev_ctx_acc.read_reg = platform_read;
 8001152:	4b8d      	ldr	r3, [pc, #564]	; (8001388 <main+0x3c4>)
 8001154:	4a8e      	ldr	r2, [pc, #568]	; (8001390 <main+0x3cc>)
 8001156:	605a      	str	r2, [r3, #4]
	dev_ctx_acc.handle = &hspi1;
 8001158:	4b8b      	ldr	r3, [pc, #556]	; (8001388 <main+0x3c4>)
 800115a:	4a8e      	ldr	r2, [pc, #568]	; (8001394 <main+0x3d0>)
 800115c:	609a      	str	r2, [r3, #8]
	//GIROSCOPIO

	dev_ctx_gir.write_reg = platform_write_gir;
 800115e:	4b8e      	ldr	r3, [pc, #568]	; (8001398 <main+0x3d4>)
 8001160:	4a8e      	ldr	r2, [pc, #568]	; (800139c <main+0x3d8>)
 8001162:	601a      	str	r2, [r3, #0]
	dev_ctx_gir.read_reg = platform_read_gir;
 8001164:	4b8c      	ldr	r3, [pc, #560]	; (8001398 <main+0x3d4>)
 8001166:	4a8e      	ldr	r2, [pc, #568]	; (80013a0 <main+0x3dc>)
 8001168:	605a      	str	r2, [r3, #4]
	dev_ctx_gir.handle = &hspi1;
 800116a:	4b8b      	ldr	r3, [pc, #556]	; (8001398 <main+0x3d4>)
 800116c:	4a89      	ldr	r2, [pc, #548]	; (8001394 <main+0x3d0>)
 800116e:	609a      	str	r2, [r3, #8]
	//UMIDITA'

	dev_ctx_hum.write_reg = platform_write_hum;
 8001170:	4b8c      	ldr	r3, [pc, #560]	; (80013a4 <main+0x3e0>)
 8001172:	4a8d      	ldr	r2, [pc, #564]	; (80013a8 <main+0x3e4>)
 8001174:	601a      	str	r2, [r3, #0]
	dev_ctx_hum.read_reg = platform_read_hum;
 8001176:	4b8b      	ldr	r3, [pc, #556]	; (80013a4 <main+0x3e0>)
 8001178:	4a8c      	ldr	r2, [pc, #560]	; (80013ac <main+0x3e8>)
 800117a:	605a      	str	r2, [r3, #4]
	dev_ctx_hum.handle = &hi2c1;
 800117c:	4b89      	ldr	r3, [pc, #548]	; (80013a4 <main+0x3e0>)
 800117e:	4a8c      	ldr	r2, [pc, #560]	; (80013b0 <main+0x3ec>)
 8001180:	609a      	str	r2, [r3, #8]
	//BAROMETRO

	dev_ctx_bar.write_reg = platform_write_bar;
 8001182:	4b8c      	ldr	r3, [pc, #560]	; (80013b4 <main+0x3f0>)
 8001184:	4a8c      	ldr	r2, [pc, #560]	; (80013b8 <main+0x3f4>)
 8001186:	601a      	str	r2, [r3, #0]
	dev_ctx_bar.read_reg = platform_read_bar;
 8001188:	4b8a      	ldr	r3, [pc, #552]	; (80013b4 <main+0x3f0>)
 800118a:	4a8c      	ldr	r2, [pc, #560]	; (80013bc <main+0x3f8>)
 800118c:	605a      	str	r2, [r3, #4]
	dev_ctx_bar.handle = &hi2c1;
 800118e:	4b89      	ldr	r3, [pc, #548]	; (80013b4 <main+0x3f0>)
 8001190:	4a87      	ldr	r2, [pc, #540]	; (80013b0 <main+0x3ec>)
 8001192:	609a      	str	r2, [r3, #8]

	//INIZIALIZZAZIONE ACCELEROMETRO E VERIFICA DELLA CONNESSIONE AL BUS
	whoamI = 0;
 8001194:	4b8a      	ldr	r3, [pc, #552]	; (80013c0 <main+0x3fc>)
 8001196:	2200      	movs	r2, #0
 8001198:	701a      	strb	r2, [r3, #0]
	timeStart=STR_MODE;//ATTIVO START PACCHETTI PRESSIONE E UMIDITA'
 800119a:	4b8a      	ldr	r3, [pc, #552]	; (80013c4 <main+0x400>)
 800119c:	2200      	movs	r2, #0
 800119e:	701a      	strb	r2, [r3, #0]
	iis3dhhc_device_id_get(&dev_ctx_acc, &whoamI);
 80011a0:	4a87      	ldr	r2, [pc, #540]	; (80013c0 <main+0x3fc>)
 80011a2:	4b79      	ldr	r3, [pc, #484]	; (8001388 <main+0x3c4>)
 80011a4:	0011      	movs	r1, r2
 80011a6:	0018      	movs	r0, r3
 80011a8:	f7ff fbac 	bl	8000904 <iis3dhhc_device_id_get>
	while(timeStart>T_VALUE){// CONTROLLO SE E' POSSIBILE LA COMUNICAZIONE CON IL SENSORE
 80011ac:	e003      	b.n	80011b6 <main+0x1f2>
		if ( whoamI != IIS3DHHC_ID){
 80011ae:	4b84      	ldr	r3, [pc, #528]	; (80013c0 <main+0x3fc>)
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	2b11      	cmp	r3, #17
 80011b4:	d104      	bne.n	80011c0 <main+0x1fc>
	while(timeStart>T_VALUE){// CONTROLLO SE E' POSSIBILE LA COMUNICAZIONE CON IL SENSORE
 80011b6:	4b83      	ldr	r3, [pc, #524]	; (80013c4 <main+0x400>)
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	2b05      	cmp	r3, #5
 80011bc:	d8f7      	bhi.n	80011ae <main+0x1ea>
 80011be:	e000      	b.n	80011c2 <main+0x1fe>
			break;
 80011c0:	46c0      	nop			; (mov r8, r8)
		}
	}
    if(timeStart>T_VALUE){
 80011c2:	4b80      	ldr	r3, [pc, #512]	; (80013c4 <main+0x400>)
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	2b05      	cmp	r3, #5
 80011c8:	d906      	bls.n	80011d8 <main+0x214>
    	Err=Err|ACC_ERR;
 80011ca:	4b7f      	ldr	r3, [pc, #508]	; (80013c8 <main+0x404>)
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	2201      	movs	r2, #1
 80011d0:	4313      	orrs	r3, r2
 80011d2:	b2da      	uxtb	r2, r3
 80011d4:	4b7c      	ldr	r3, [pc, #496]	; (80013c8 <main+0x404>)
 80011d6:	701a      	strb	r2, [r3, #0]
    }
	iis3dhhc_reset_set(&dev_ctx_acc, PROPERTY_ENABLE);//RIPRISTINO SETTAGGI DEFAULT
 80011d8:	4b6b      	ldr	r3, [pc, #428]	; (8001388 <main+0x3c4>)
 80011da:	2101      	movs	r1, #1
 80011dc:	0018      	movs	r0, r3
 80011de:	f7ff fba3 	bl	8000928 <iis3dhhc_reset_set>
	do {
	  iis3dhhc_reset_get(&dev_ctx_acc, &rst);
 80011e2:	4a7a      	ldr	r2, [pc, #488]	; (80013cc <main+0x408>)
 80011e4:	4b68      	ldr	r3, [pc, #416]	; (8001388 <main+0x3c4>)
 80011e6:	0011      	movs	r1, r2
 80011e8:	0018      	movs	r0, r3
 80011ea:	f7ff fbce 	bl	800098a <iis3dhhc_reset_get>
	} while (rst);
 80011ee:	4b77      	ldr	r3, [pc, #476]	; (80013cc <main+0x408>)
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d1f5      	bne.n	80011e2 <main+0x21e>
	iis3dhhc_block_data_update_set(&dev_ctx_acc, PROPERTY_ENABLE);//ABLITAZIONE DATAUPDATE
 80011f6:	4b64      	ldr	r3, [pc, #400]	; (8001388 <main+0x3c4>)
 80011f8:	2101      	movs	r1, #1
 80011fa:	0018      	movs	r0, r3
 80011fc:	f7ff fadf 	bl	80007be <iis3dhhc_block_data_update_set>
	iis3dhhc_data_rate_set(&dev_ctx_acc, IIS3DHHC_1kHz1);//SETTAGGIO FREQUENZA DI CAMPIONAMENTO
 8001200:	4b61      	ldr	r3, [pc, #388]	; (8001388 <main+0x3c4>)
 8001202:	2101      	movs	r1, #1
 8001204:	0018      	movs	r0, r3
 8001206:	f7ff fb0b 	bl	8000820 <iis3dhhc_data_rate_set>
	iis3dhhc_filter_config_set(&dev_ctx_acc,3);//SETTAGGIO FILTRO FFR A 235HZ
 800120a:	4b5f      	ldr	r3, [pc, #380]	; (8001388 <main+0x3c4>)
 800120c:	2103      	movs	r1, #3
 800120e:	0018      	movs	r0, r3
 8001210:	f7ff fbd6 	bl	80009c0 <iis3dhhc_filter_config_set>
	iis3dhhc_offset_temp_comp_set(&dev_ctx_acc, PROPERTY_ENABLE);//ABLITIAZIONE COMPENSAZIONE TEMPERATURA
 8001214:	4b5c      	ldr	r3, [pc, #368]	; (8001388 <main+0x3c4>)
 8001216:	2101      	movs	r1, #1
 8001218:	0018      	movs	r0, r3
 800121a:	f7ff fb30 	bl	800087e <iis3dhhc_offset_temp_comp_set>
	HAL_GPIO_WritePin(CS_up_GPIO_Port, CS_ACC, GPIO_PIN_SET);*/



	//INIZIALIZZAZIONE GIROSCOPIO E VERIFICA DELLA CONNESSIONE AL BUS
	timeStart=0;
 800121e:	4b69      	ldr	r3, [pc, #420]	; (80013c4 <main+0x400>)
 8001220:	2200      	movs	r2, #0
 8001222:	701a      	strb	r2, [r3, #0]
	l2g2is_dev_id_get(&dev_ctx_gir, &whoamI);
 8001224:	4a66      	ldr	r2, [pc, #408]	; (80013c0 <main+0x3fc>)
 8001226:	4b5c      	ldr	r3, [pc, #368]	; (8001398 <main+0x3d4>)
 8001228:	0011      	movs	r1, r2
 800122a:	0018      	movs	r0, r3
 800122c:	f7ff fd07 	bl	8000c3e <l2g2is_dev_id_get>
	while(timeStart>T_VALUE){
 8001230:	e003      	b.n	800123a <main+0x276>
		if ( whoamI == L2G2IS_ID ){// CONTROLLO SE E' POSSIBILE LA COMUNICAZIONE CON IL SENSORE
 8001232:	4b63      	ldr	r3, [pc, #396]	; (80013c0 <main+0x3fc>)
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	2bd9      	cmp	r3, #217	; 0xd9
 8001238:	d004      	beq.n	8001244 <main+0x280>
	while(timeStart>T_VALUE){
 800123a:	4b62      	ldr	r3, [pc, #392]	; (80013c4 <main+0x400>)
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	2b05      	cmp	r3, #5
 8001240:	d8f7      	bhi.n	8001232 <main+0x26e>
 8001242:	e000      	b.n	8001246 <main+0x282>
			break;
 8001244:	46c0      	nop			; (mov r8, r8)
		}
	}
	if(timeStart>T_VALUE){
 8001246:	4b5f      	ldr	r3, [pc, #380]	; (80013c4 <main+0x400>)
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	2b05      	cmp	r3, #5
 800124c:	d906      	bls.n	800125c <main+0x298>
	    Err=Err|GYR_ERR;
 800124e:	4b5e      	ldr	r3, [pc, #376]	; (80013c8 <main+0x404>)
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	2202      	movs	r2, #2
 8001254:	4313      	orrs	r3, r2
 8001256:	b2da      	uxtb	r2, r3
 8001258:	4b5b      	ldr	r3, [pc, #364]	; (80013c8 <main+0x404>)
 800125a:	701a      	strb	r2, [r3, #0]
	}
	l2g2is_dev_reset_set(&dev_ctx_gir, PROPERTY_ENABLE);//RIPRISTINO SETTAGGI DEFAULT
 800125c:	4b4e      	ldr	r3, [pc, #312]	; (8001398 <main+0x3d4>)
 800125e:	2101      	movs	r1, #1
 8001260:	0018      	movs	r0, r3
 8001262:	f7ff fd21 	bl	8000ca8 <l2g2is_dev_reset_set>
	do {
	  l2g2is_dev_reset_get(&dev_ctx_gir, &rst);
 8001266:	4a59      	ldr	r2, [pc, #356]	; (80013cc <main+0x408>)
 8001268:	4b4b      	ldr	r3, [pc, #300]	; (8001398 <main+0x3d4>)
 800126a:	0011      	movs	r1, r2
 800126c:	0018      	movs	r0, r3
 800126e:	f7ff fd4c 	bl	8000d0a <l2g2is_dev_reset_get>
	} while (rst);
 8001272:	4b56      	ldr	r3, [pc, #344]	; (80013cc <main+0x408>)
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d1f5      	bne.n	8001266 <main+0x2a2>
	l2g2is_gy_full_scale_set(&dev_ctx_gir, L2G2IS_200dps);//SETTAGGIO SCALA DI MISURA -200DPS +200DPS
 800127a:	4b47      	ldr	r3, [pc, #284]	; (8001398 <main+0x3d4>)
 800127c:	2101      	movs	r1, #1
 800127e:	0018      	movs	r0, r3
 8001280:	f7ff fc9a 	bl	8000bb8 <l2g2is_gy_full_scale_set>
    //l2g2is_gy_filter_lp_bandwidth_set(&dev_ctx, L2G2IS_LPF_BW_160Hz);//SETTAGGIO FILTRO PASSA BASSO
	//l2g2is_gy_filter_hp_bandwidth_set(&dev_ctx, L2G2IS_HPF_BYPASS);//SETTAGGIO FILTRO PASSA ALTO
	setOffset.offx = 0x00;//SETTAGGIO OFFSET ASSE X
 8001284:	4b52      	ldr	r3, [pc, #328]	; (80013d0 <main+0x40c>)
 8001286:	781a      	ldrb	r2, [r3, #0]
 8001288:	217f      	movs	r1, #127	; 0x7f
 800128a:	438a      	bics	r2, r1
 800128c:	701a      	strb	r2, [r3, #0]
	setOffset.offy = 0x00;//SETTAGGIO OFFSET ASSE Y
 800128e:	4b50      	ldr	r3, [pc, #320]	; (80013d0 <main+0x40c>)
 8001290:	785a      	ldrb	r2, [r3, #1]
 8001292:	217f      	movs	r1, #127	; 0x7f
 8001294:	438a      	bics	r2, r1
 8001296:	705a      	strb	r2, [r3, #1]
	l2g2is_angular_rate_offset_set(&dev_ctx_gir, setOffset);//SETTAGGIO OFFSET ANGULAR RATE
 8001298:	4b4d      	ldr	r3, [pc, #308]	; (80013d0 <main+0x40c>)
 800129a:	483f      	ldr	r0, [pc, #252]	; (8001398 <main+0x3d4>)
 800129c:	781a      	ldrb	r2, [r3, #0]
 800129e:	785b      	ldrb	r3, [r3, #1]
 80012a0:	021b      	lsls	r3, r3, #8
 80012a2:	431a      	orrs	r2, r3
 80012a4:	2300      	movs	r3, #0
 80012a6:	0412      	lsls	r2, r2, #16
 80012a8:	0c12      	lsrs	r2, r2, #16
 80012aa:	0c1b      	lsrs	r3, r3, #16
 80012ac:	041b      	lsls	r3, r3, #16
 80012ae:	4313      	orrs	r3, r2
 80012b0:	0019      	movs	r1, r3
 80012b2:	f7ff fc39 	bl	8000b28 <l2g2is_angular_rate_offset_set>
	l2g2is_gy_data_rate_set(&dev_ctx_gir, L2G2IS_GY_9k33Hz);//SETTAGGIO FREQUENZA DI CAMPIONAMENTO DEL SENSORE
 80012b6:	4b38      	ldr	r3, [pc, #224]	; (8001398 <main+0x3d4>)
 80012b8:	2103      	movs	r1, #3
 80012ba:	0018      	movs	r0, r3
 80012bc:	f7ff fc03 	bl	8000ac6 <l2g2is_gy_data_rate_set>
    //Data.Responce_Time_millis=make_giro_offset(&dev_ctx_gir,&giro); OFFSET NON FUNZIONANTE



	//INIZIALIZZAZIONE BAROMETRO E VERIFICA DELLA CONNESSIONE AL BUS
	whoamI=0;
 80012c0:	4b3f      	ldr	r3, [pc, #252]	; (80013c0 <main+0x3fc>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	701a      	strb	r2, [r3, #0]
	timeStart=0;
 80012c6:	4b3f      	ldr	r3, [pc, #252]	; (80013c4 <main+0x400>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	701a      	strb	r2, [r3, #0]
	lps22hb_device_id_get(&dev_ctx_bar,&whoamI);
 80012cc:	4a3c      	ldr	r2, [pc, #240]	; (80013c0 <main+0x3fc>)
 80012ce:	4b39      	ldr	r3, [pc, #228]	; (80013b4 <main+0x3f0>)
 80012d0:	0011      	movs	r1, r2
 80012d2:	0018      	movs	r0, r3
 80012d4:	f7ff fe17 	bl	8000f06 <lps22hb_device_id_get>
    while(timeStart>T_VALUE){
 80012d8:	e003      	b.n	80012e2 <main+0x31e>
    		if ( whoamI == LPS22HB_ID ){// CONTROLLO SE E' POSSIBILE LA COMUNICAZIONE CON IL SENSORE
 80012da:	4b39      	ldr	r3, [pc, #228]	; (80013c0 <main+0x3fc>)
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	2bb1      	cmp	r3, #177	; 0xb1
 80012e0:	d004      	beq.n	80012ec <main+0x328>
    while(timeStart>T_VALUE){
 80012e2:	4b38      	ldr	r3, [pc, #224]	; (80013c4 <main+0x400>)
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	2b05      	cmp	r3, #5
 80012e8:	d8f7      	bhi.n	80012da <main+0x316>
 80012ea:	e000      	b.n	80012ee <main+0x32a>
    			break;
 80012ec:	46c0      	nop			; (mov r8, r8)
    		}
    	}
    	if(timeStart>T_VALUE){
 80012ee:	4b35      	ldr	r3, [pc, #212]	; (80013c4 <main+0x400>)
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	2b05      	cmp	r3, #5
 80012f4:	d906      	bls.n	8001304 <main+0x340>
    	    Err=Err|PRE_ERR;
 80012f6:	4b34      	ldr	r3, [pc, #208]	; (80013c8 <main+0x404>)
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	2204      	movs	r2, #4
 80012fc:	4313      	orrs	r3, r2
 80012fe:	b2da      	uxtb	r2, r3
 8001300:	4b31      	ldr	r3, [pc, #196]	; (80013c8 <main+0x404>)
 8001302:	701a      	strb	r2, [r3, #0]
    	}
	lps22hb_reset_set(&dev_ctx_bar, PROPERTY_ENABLE);//RIPRISTINO SETTAGGI DEFAULT
 8001304:	4b2b      	ldr	r3, [pc, #172]	; (80013b4 <main+0x3f0>)
 8001306:	2101      	movs	r1, #1
 8001308:	0018      	movs	r0, r3
 800130a:	f7ff fe0e 	bl	8000f2a <lps22hb_reset_set>
	do {
	lps22hb_reset_get(&dev_ctx_bar, &rst_bar);
 800130e:	4a31      	ldr	r2, [pc, #196]	; (80013d4 <main+0x410>)
 8001310:	4b28      	ldr	r3, [pc, #160]	; (80013b4 <main+0x3f0>)
 8001312:	0011      	movs	r1, r2
 8001314:	0018      	movs	r0, r3
 8001316:	f7ff fe39 	bl	8000f8c <lps22hb_reset_get>
	} while (rst_bar);
 800131a:	4b2e      	ldr	r3, [pc, #184]	; (80013d4 <main+0x410>)
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d1f5      	bne.n	800130e <main+0x34a>
	//lps22hb_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);//ABLITAZIONE DATAUPDATE
	lps22hb_low_pass_filter_mode_set(&dev_ctx_bar, LPS22HB_LPF_ODR_DIV_2);//SETTAGGIO LOW PASS FILTER
 8001322:	4b24      	ldr	r3, [pc, #144]	; (80013b4 <main+0x3f0>)
 8001324:	2100      	movs	r1, #0
 8001326:	0018      	movs	r0, r3
 8001328:	f7ff fd4c 	bl	8000dc4 <lps22hb_low_pass_filter_mode_set>
	//lps22hb_drdy_on_int_set(&dev_ctx, PROPERTY_ENABLE);//INTERRUPT FOR DATA READY INT_DRDY
	lps22hb_data_rate_set(&dev_ctx_bar, LPS22HB_ODR_10_Hz);//SETTAGGIO FREQUENZA DI CAMPIONAMENTO DEL SENSORE
 800132c:	4b21      	ldr	r3, [pc, #132]	; (80013b4 <main+0x3f0>)
 800132e:	2102      	movs	r1, #2
 8001330:	0018      	movs	r0, r3
 8001332:	f7ff fd78 	bl	8000e26 <lps22hb_data_rate_set>




	//INIZIALIZZAZIONE SENSORE DI UMIDITA' E VERIFICA DELLA CONNESSIONE AL BUS
	whoamI = 0;
 8001336:	4b22      	ldr	r3, [pc, #136]	; (80013c0 <main+0x3fc>)
 8001338:	2200      	movs	r2, #0
 800133a:	701a      	strb	r2, [r3, #0]
	timeStart=0;
 800133c:	4b21      	ldr	r3, [pc, #132]	; (80013c4 <main+0x400>)
 800133e:	2200      	movs	r2, #0
 8001340:	701a      	strb	r2, [r3, #0]
	hts221_device_id_get(&dev_ctx_hum, &whoamI);
 8001342:	4a1f      	ldr	r2, [pc, #124]	; (80013c0 <main+0x3fc>)
 8001344:	4b17      	ldr	r3, [pc, #92]	; (80013a4 <main+0x3e0>)
 8001346:	0011      	movs	r1, r2
 8001348:	0018      	movs	r0, r3
 800134a:	f7ff f8c7 	bl	80004dc <hts221_device_id_get>
	while(timeStart>T_VALUE){
 800134e:	e003      	b.n	8001358 <main+0x394>
			if ( whoamI == HTS221_ID ){// CONTROLLO SE E' POSSIBILE LA COMUNICAZIONE CON IL SENSORE
 8001350:	4b1b      	ldr	r3, [pc, #108]	; (80013c0 <main+0x3fc>)
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	2bbc      	cmp	r3, #188	; 0xbc
 8001356:	d03f      	beq.n	80013d8 <main+0x414>
	while(timeStart>T_VALUE){
 8001358:	4b1a      	ldr	r3, [pc, #104]	; (80013c4 <main+0x400>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	2b05      	cmp	r3, #5
 800135e:	d8f7      	bhi.n	8001350 <main+0x38c>
 8001360:	e03b      	b.n	80013da <main+0x416>
 8001362:	46c0      	nop			; (mov r8, r8)
 8001364:	2000028c 	.word	0x2000028c
 8001368:	00000312 	.word	0x00000312
 800136c:	20000050 	.word	0x20000050
 8001370:	00006260 	.word	0x00006260
 8001374:	200000f8 	.word	0x200000f8
 8001378:	48000400 	.word	0x48000400
 800137c:	2000004a 	.word	0x2000004a
 8001380:	2000004b 	.word	0x2000004b
 8001384:	200001a0 	.word	0x200001a0
 8001388:	200000ec 	.word	0x200000ec
 800138c:	08001b5d 	.word	0x08001b5d
 8001390:	08001bbd 	.word	0x08001bbd
 8001394:	200001e8 	.word	0x200001e8
 8001398:	200002ec 	.word	0x200002ec
 800139c:	08001c31 	.word	0x08001c31
 80013a0:	08001cad 	.word	0x08001cad
 80013a4:	200000d0 	.word	0x200000d0
 80013a8:	08001ded 	.word	0x08001ded
 80013ac:	08001e51 	.word	0x08001e51
 80013b0:	20000080 	.word	0x20000080
 80013b4:	200000dc 	.word	0x200000dc
 80013b8:	08001d3d 	.word	0x08001d3d
 80013bc:	08001d95 	.word	0x08001d95
 80013c0:	20000032 	.word	0x20000032
 80013c4:	200001e4 	.word	0x200001e4
 80013c8:	20000028 	.word	0x20000028
 80013cc:	20000033 	.word	0x20000033
 80013d0:	20000120 	.word	0x20000120
 80013d4:	200000cc 	.word	0x200000cc
				break;
 80013d8:	46c0      	nop			; (mov r8, r8)
			}
		}
	if(timeStart>T_VALUE){
 80013da:	4b4d      	ldr	r3, [pc, #308]	; (8001510 <main+0x54c>)
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	2b05      	cmp	r3, #5
 80013e0:	d906      	bls.n	80013f0 <main+0x42c>
		Err=Err|HUM_ERR;
 80013e2:	4b4c      	ldr	r3, [pc, #304]	; (8001514 <main+0x550>)
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	2208      	movs	r2, #8
 80013e8:	4313      	orrs	r3, r2
 80013ea:	b2da      	uxtb	r2, r3
 80013ec:	4b49      	ldr	r3, [pc, #292]	; (8001514 <main+0x550>)
 80013ee:	701a      	strb	r2, [r3, #0]
	}
	//CALIBRAZIONE SENSORE UMIDITA'
	axis1bit16_t coeff;
	lin_t lin_hum;
	hts221_hum_adc_point_0_get(&dev_ctx_hum, coeff.u8bit);
 80013f0:	2420      	movs	r4, #32
 80013f2:	193a      	adds	r2, r7, r4
 80013f4:	4b48      	ldr	r3, [pc, #288]	; (8001518 <main+0x554>)
 80013f6:	0011      	movs	r1, r2
 80013f8:	0018      	movs	r0, r3
 80013fa:	f7ff f956 	bl	80006aa <hts221_hum_adc_point_0_get>
	lin_hum.x0 = (float)coeff.i16bit;
 80013fe:	193b      	adds	r3, r7, r4
 8001400:	2200      	movs	r2, #0
 8001402:	5e9b      	ldrsh	r3, [r3, r2]
 8001404:	0018      	movs	r0, r3
 8001406:	f7fe ff0b 	bl	8000220 <__aeabi_i2f>
 800140a:	1c02      	adds	r2, r0, #0
 800140c:	2510      	movs	r5, #16
 800140e:	197b      	adds	r3, r7, r5
 8001410:	601a      	str	r2, [r3, #0]
	hts221_hum_rh_point_0_get(&dev_ctx_hum, coeff.u8bit);
 8001412:	193a      	adds	r2, r7, r4
 8001414:	4b40      	ldr	r3, [pc, #256]	; (8001518 <main+0x554>)
 8001416:	0011      	movs	r1, r2
 8001418:	0018      	movs	r0, r3
 800141a:	f7ff f8b2 	bl	8000582 <hts221_hum_rh_point_0_get>
	lin_hum.y0 = (float)coeff.u8bit[0];
 800141e:	193b      	adds	r3, r7, r4
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	0018      	movs	r0, r3
 8001424:	f7fe ff46 	bl	80002b4 <__aeabi_ui2f>
 8001428:	1c02      	adds	r2, r0, #0
 800142a:	197b      	adds	r3, r7, r5
 800142c:	605a      	str	r2, [r3, #4]
	hts221_hum_adc_point_1_get(&dev_ctx_hum, coeff.u8bit);
 800142e:	193a      	adds	r2, r7, r4
 8001430:	4b39      	ldr	r3, [pc, #228]	; (8001518 <main+0x554>)
 8001432:	0011      	movs	r1, r2
 8001434:	0018      	movs	r0, r3
 8001436:	f7ff f94a 	bl	80006ce <hts221_hum_adc_point_1_get>
	lin_hum.x1 = (float)coeff.i16bit;
 800143a:	193b      	adds	r3, r7, r4
 800143c:	2200      	movs	r2, #0
 800143e:	5e9b      	ldrsh	r3, [r3, r2]
 8001440:	0018      	movs	r0, r3
 8001442:	f7fe feed 	bl	8000220 <__aeabi_i2f>
 8001446:	1c02      	adds	r2, r0, #0
 8001448:	197b      	adds	r3, r7, r5
 800144a:	609a      	str	r2, [r3, #8]
	hts221_hum_rh_point_1_get(&dev_ctx_hum, coeff.u8bit);
 800144c:	193a      	adds	r2, r7, r4
 800144e:	4b32      	ldr	r3, [pc, #200]	; (8001518 <main+0x554>)
 8001450:	0011      	movs	r1, r2
 8001452:	0018      	movs	r0, r3
 8001454:	f7ff f8ad 	bl	80005b2 <hts221_hum_rh_point_1_get>
	lin_hum.y1 = (float)coeff.u8bit[0];
 8001458:	193b      	adds	r3, r7, r4
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	0018      	movs	r0, r3
 800145e:	f7fe ff29 	bl	80002b4 <__aeabi_ui2f>
 8001462:	1c02      	adds	r2, r0, #0
 8001464:	197b      	adds	r3, r7, r5
 8001466:	60da      	str	r2, [r3, #12]

	/* Read temperature calibration coefficient */
	lin_t lin_temp;
	hts221_temp_adc_point_0_get(&dev_ctx_hum, coeff.u8bit);
 8001468:	193a      	adds	r2, r7, r4
 800146a:	4b2b      	ldr	r3, [pc, #172]	; (8001518 <main+0x554>)
 800146c:	0011      	movs	r1, r2
 800146e:	0018      	movs	r0, r3
 8001470:	f7ff f93f 	bl	80006f2 <hts221_temp_adc_point_0_get>
	lin_temp.x0 = (float)coeff.i16bit;
 8001474:	193b      	adds	r3, r7, r4
 8001476:	2200      	movs	r2, #0
 8001478:	5e9b      	ldrsh	r3, [r3, r2]
 800147a:	0018      	movs	r0, r3
 800147c:	f7fe fed0 	bl	8000220 <__aeabi_i2f>
 8001480:	1c02      	adds	r2, r0, #0
 8001482:	003b      	movs	r3, r7
 8001484:	601a      	str	r2, [r3, #0]
	hts221_temp_deg_point_0_get(&dev_ctx_hum, coeff.u8bit);
 8001486:	193a      	adds	r2, r7, r4
 8001488:	4b23      	ldr	r3, [pc, #140]	; (8001518 <main+0x554>)
 800148a:	0011      	movs	r1, r2
 800148c:	0018      	movs	r0, r3
 800148e:	f7ff f8a8 	bl	80005e2 <hts221_temp_deg_point_0_get>
	lin_temp.y0 = (float)coeff.u8bit[0];
 8001492:	193b      	adds	r3, r7, r4
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	0018      	movs	r0, r3
 8001498:	f7fe ff0c 	bl	80002b4 <__aeabi_ui2f>
 800149c:	1c02      	adds	r2, r0, #0
 800149e:	003b      	movs	r3, r7
 80014a0:	605a      	str	r2, [r3, #4]
	hts221_temp_adc_point_1_get(&dev_ctx_hum, coeff.u8bit);
 80014a2:	193a      	adds	r2, r7, r4
 80014a4:	4b1c      	ldr	r3, [pc, #112]	; (8001518 <main+0x554>)
 80014a6:	0011      	movs	r1, r2
 80014a8:	0018      	movs	r0, r3
 80014aa:	f7ff f934 	bl	8000716 <hts221_temp_adc_point_1_get>
	lin_temp.x1 = (float)coeff.i16bit;
 80014ae:	193b      	adds	r3, r7, r4
 80014b0:	2200      	movs	r2, #0
 80014b2:	5e9b      	ldrsh	r3, [r3, r2]
 80014b4:	0018      	movs	r0, r3
 80014b6:	f7fe feb3 	bl	8000220 <__aeabi_i2f>
 80014ba:	1c02      	adds	r2, r0, #0
 80014bc:	003b      	movs	r3, r7
 80014be:	609a      	str	r2, [r3, #8]
	hts221_temp_deg_point_1_get(&dev_ctx_hum, coeff.u8bit);
 80014c0:	193a      	adds	r2, r7, r4
 80014c2:	4b15      	ldr	r3, [pc, #84]	; (8001518 <main+0x554>)
 80014c4:	0011      	movs	r1, r2
 80014c6:	0018      	movs	r0, r3
 80014c8:	f7ff f8bd 	bl	8000646 <hts221_temp_deg_point_1_get>
	lin_temp.y1 = (float)coeff.u8bit[0];
 80014cc:	193b      	adds	r3, r7, r4
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	0018      	movs	r0, r3
 80014d2:	f7fe feef 	bl	80002b4 <__aeabi_ui2f>
 80014d6:	1c02      	adds	r2, r0, #0
 80014d8:	003b      	movs	r3, r7
 80014da:	60da      	str	r2, [r3, #12]

	hts221_block_data_update_set(&dev_ctx_hum, PROPERTY_ENABLE);//ABLITAZIONE DATAUPDATE
 80014dc:	4b0e      	ldr	r3, [pc, #56]	; (8001518 <main+0x554>)
 80014de:	2101      	movs	r1, #1
 80014e0:	0018      	movs	r0, r3
 80014e2:	f7fe ffb8 	bl	8000456 <hts221_block_data_update_set>
	hts221_data_rate_set(&dev_ctx_hum, HTS221_ODR_1Hz);//SETTAGGIO DATARATE
 80014e6:	4b0c      	ldr	r3, [pc, #48]	; (8001518 <main+0x554>)
 80014e8:	2101      	movs	r1, #1
 80014ea:	0018      	movs	r0, r3
 80014ec:	f7fe ff82 	bl	80003f4 <hts221_data_rate_set>
	hts221_power_on_set(&dev_ctx_hum, PROPERTY_ENABLE);//ACCENSIONE INVIO DATI DISPOSITIVO
 80014f0:	4b09      	ldr	r3, [pc, #36]	; (8001518 <main+0x554>)
 80014f2:	2101      	movs	r1, #1
 80014f4:	0018      	movs	r0, r3
 80014f6:	f7ff f803 	bl	8000500 <hts221_power_on_set>




	//HAL_TIM_Base_Start_IT(&htim2);
	HAL_TIM_Base_Start_IT(&htim3);//AVVIO DEL TIMER 3 E CONSEGUENTE AVVIO DEL PROGRAMMA
 80014fa:	4b08      	ldr	r3, [pc, #32]	; (800151c <main+0x558>)
 80014fc:	0018      	movs	r0, r3
 80014fe:	f004 fa15 	bl	800592c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim16);//AVVIO DEL TIMER 16 PER INVIO DATI PRESSIONE E UMIDITA'
 8001502:	4b07      	ldr	r3, [pc, #28]	; (8001520 <main+0x55c>)
 8001504:	0018      	movs	r0, r3
 8001506:	f004 fa11 	bl	800592c <HAL_TIM_Base_Start_IT>
	int i=0;
 800150a:	2300      	movs	r3, #0
 800150c:	627b      	str	r3, [r7, #36]	; 0x24
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800150e:	e7fe      	b.n	800150e <main+0x54a>
 8001510:	200001e4 	.word	0x200001e4
 8001514:	20000028 	.word	0x20000028
 8001518:	200000d0 	.word	0x200000d0
 800151c:	20000124 	.word	0x20000124
 8001520:	200002ac 	.word	0x200002ac

08001524 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001524:	b590      	push	{r4, r7, lr}
 8001526:	b099      	sub	sp, #100	; 0x64
 8001528:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800152a:	242c      	movs	r4, #44	; 0x2c
 800152c:	193b      	adds	r3, r7, r4
 800152e:	0018      	movs	r0, r3
 8001530:	2334      	movs	r3, #52	; 0x34
 8001532:	001a      	movs	r2, r3
 8001534:	2100      	movs	r1, #0
 8001536:	f004 fdd5 	bl	80060e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800153a:	231c      	movs	r3, #28
 800153c:	18fb      	adds	r3, r7, r3
 800153e:	0018      	movs	r0, r3
 8001540:	2310      	movs	r3, #16
 8001542:	001a      	movs	r2, r3
 8001544:	2100      	movs	r1, #0
 8001546:	f004 fdcd 	bl	80060e4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800154a:	1d3b      	adds	r3, r7, #4
 800154c:	0018      	movs	r0, r3
 800154e:	2318      	movs	r3, #24
 8001550:	001a      	movs	r2, r3
 8001552:	2100      	movs	r1, #0
 8001554:	f004 fdc6 	bl	80060e4 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001558:	0021      	movs	r1, r4
 800155a:	187b      	adds	r3, r7, r1
 800155c:	2202      	movs	r2, #2
 800155e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001560:	187b      	adds	r3, r7, r1
 8001562:	2201      	movs	r2, #1
 8001564:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001566:	187b      	adds	r3, r7, r1
 8001568:	2210      	movs	r2, #16
 800156a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800156c:	187b      	adds	r3, r7, r1
 800156e:	2202      	movs	r2, #2
 8001570:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001572:	187b      	adds	r3, r7, r1
 8001574:	2280      	movs	r2, #128	; 0x80
 8001576:	0212      	lsls	r2, r2, #8
 8001578:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 800157a:	187b      	adds	r3, r7, r1
 800157c:	2200      	movs	r2, #0
 800157e:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001580:	187b      	adds	r3, r7, r1
 8001582:	2200      	movs	r2, #0
 8001584:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001586:	187b      	adds	r3, r7, r1
 8001588:	0018      	movs	r0, r3
 800158a:	f002 fc89 	bl	8003ea0 <HAL_RCC_OscConfig>
 800158e:	1e03      	subs	r3, r0, #0
 8001590:	d001      	beq.n	8001596 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001592:	f000 fe8f 	bl	80022b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001596:	211c      	movs	r1, #28
 8001598:	187b      	adds	r3, r7, r1
 800159a:	2207      	movs	r2, #7
 800159c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800159e:	187b      	adds	r3, r7, r1
 80015a0:	2202      	movs	r2, #2
 80015a2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015a4:	187b      	adds	r3, r7, r1
 80015a6:	2200      	movs	r2, #0
 80015a8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015aa:	187b      	adds	r3, r7, r1
 80015ac:	2200      	movs	r2, #0
 80015ae:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80015b0:	187b      	adds	r3, r7, r1
 80015b2:	2100      	movs	r1, #0
 80015b4:	0018      	movs	r0, r3
 80015b6:	f002 fff9 	bl	80045ac <HAL_RCC_ClockConfig>
 80015ba:	1e03      	subs	r3, r0, #0
 80015bc:	d001      	beq.n	80015c2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80015be:	f000 fe79 	bl	80022b4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80015c2:	1d3b      	adds	r3, r7, #4
 80015c4:	2220      	movs	r2, #32
 80015c6:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80015c8:	1d3b      	adds	r3, r7, #4
 80015ca:	2200      	movs	r2, #0
 80015cc:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015ce:	1d3b      	adds	r3, r7, #4
 80015d0:	0018      	movs	r0, r3
 80015d2:	f003 f945 	bl	8004860 <HAL_RCCEx_PeriphCLKConfig>
 80015d6:	1e03      	subs	r3, r0, #0
 80015d8:	d001      	beq.n	80015de <SystemClock_Config+0xba>
  {
    Error_Handler();
 80015da:	f000 fe6b 	bl	80022b4 <Error_Handler>
  }
}
 80015de:	46c0      	nop			; (mov r8, r8)
 80015e0:	46bd      	mov	sp, r7
 80015e2:	b019      	add	sp, #100	; 0x64
 80015e4:	bd90      	pop	{r4, r7, pc}
	...

080015e8 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80015ec:	4b17      	ldr	r3, [pc, #92]	; (800164c <MX_CAN_Init+0x64>)
 80015ee:	4a18      	ldr	r2, [pc, #96]	; (8001650 <MX_CAN_Init+0x68>)
 80015f0:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 2;
 80015f2:	4b16      	ldr	r3, [pc, #88]	; (800164c <MX_CAN_Init+0x64>)
 80015f4:	2202      	movs	r2, #2
 80015f6:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80015f8:	4b14      	ldr	r3, [pc, #80]	; (800164c <MX_CAN_Init+0x64>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80015fe:	4b13      	ldr	r3, [pc, #76]	; (800164c <MX_CAN_Init+0x64>)
 8001600:	2200      	movs	r2, #0
 8001602:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_8TQ;
 8001604:	4b11      	ldr	r3, [pc, #68]	; (800164c <MX_CAN_Init+0x64>)
 8001606:	22e0      	movs	r2, #224	; 0xe0
 8001608:	02d2      	lsls	r2, r2, #11
 800160a:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 800160c:	4b0f      	ldr	r3, [pc, #60]	; (800164c <MX_CAN_Init+0x64>)
 800160e:	2200      	movs	r2, #0
 8001610:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001612:	4b0e      	ldr	r3, [pc, #56]	; (800164c <MX_CAN_Init+0x64>)
 8001614:	2200      	movs	r2, #0
 8001616:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8001618:	4b0c      	ldr	r3, [pc, #48]	; (800164c <MX_CAN_Init+0x64>)
 800161a:	2200      	movs	r2, #0
 800161c:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800161e:	4b0b      	ldr	r3, [pc, #44]	; (800164c <MX_CAN_Init+0x64>)
 8001620:	2200      	movs	r2, #0
 8001622:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 8001624:	4b09      	ldr	r3, [pc, #36]	; (800164c <MX_CAN_Init+0x64>)
 8001626:	2201      	movs	r2, #1
 8001628:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800162a:	4b08      	ldr	r3, [pc, #32]	; (800164c <MX_CAN_Init+0x64>)
 800162c:	2200      	movs	r2, #0
 800162e:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = ENABLE;
 8001630:	4b06      	ldr	r3, [pc, #24]	; (800164c <MX_CAN_Init+0x64>)
 8001632:	2201      	movs	r2, #1
 8001634:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001636:	4b05      	ldr	r3, [pc, #20]	; (800164c <MX_CAN_Init+0x64>)
 8001638:	0018      	movs	r0, r3
 800163a:	f001 f8cd 	bl	80027d8 <HAL_CAN_Init>
 800163e:	1e03      	subs	r3, r0, #0
 8001640:	d001      	beq.n	8001646 <MX_CAN_Init+0x5e>
  {
    Error_Handler();
 8001642:	f000 fe37 	bl	80022b4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8001646:	46c0      	nop			; (mov r8, r8)
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	200000f8 	.word	0x200000f8
 8001650:	40006400 	.word	0x40006400

08001654 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001658:	4b1b      	ldr	r3, [pc, #108]	; (80016c8 <MX_I2C1_Init+0x74>)
 800165a:	4a1c      	ldr	r2, [pc, #112]	; (80016cc <MX_I2C1_Init+0x78>)
 800165c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 800165e:	4b1a      	ldr	r3, [pc, #104]	; (80016c8 <MX_I2C1_Init+0x74>)
 8001660:	4a1b      	ldr	r2, [pc, #108]	; (80016d0 <MX_I2C1_Init+0x7c>)
 8001662:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001664:	4b18      	ldr	r3, [pc, #96]	; (80016c8 <MX_I2C1_Init+0x74>)
 8001666:	2200      	movs	r2, #0
 8001668:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800166a:	4b17      	ldr	r3, [pc, #92]	; (80016c8 <MX_I2C1_Init+0x74>)
 800166c:	2201      	movs	r2, #1
 800166e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001670:	4b15      	ldr	r3, [pc, #84]	; (80016c8 <MX_I2C1_Init+0x74>)
 8001672:	2200      	movs	r2, #0
 8001674:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001676:	4b14      	ldr	r3, [pc, #80]	; (80016c8 <MX_I2C1_Init+0x74>)
 8001678:	2200      	movs	r2, #0
 800167a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800167c:	4b12      	ldr	r3, [pc, #72]	; (80016c8 <MX_I2C1_Init+0x74>)
 800167e:	2200      	movs	r2, #0
 8001680:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001682:	4b11      	ldr	r3, [pc, #68]	; (80016c8 <MX_I2C1_Init+0x74>)
 8001684:	2200      	movs	r2, #0
 8001686:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001688:	4b0f      	ldr	r3, [pc, #60]	; (80016c8 <MX_I2C1_Init+0x74>)
 800168a:	2200      	movs	r2, #0
 800168c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800168e:	4b0e      	ldr	r3, [pc, #56]	; (80016c8 <MX_I2C1_Init+0x74>)
 8001690:	0018      	movs	r0, r3
 8001692:	f001 fe37 	bl	8003304 <HAL_I2C_Init>
 8001696:	1e03      	subs	r3, r0, #0
 8001698:	d001      	beq.n	800169e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800169a:	f000 fe0b 	bl	80022b4 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800169e:	4b0a      	ldr	r3, [pc, #40]	; (80016c8 <MX_I2C1_Init+0x74>)
 80016a0:	2100      	movs	r1, #0
 80016a2:	0018      	movs	r0, r3
 80016a4:	f002 fb64 	bl	8003d70 <HAL_I2CEx_ConfigAnalogFilter>
 80016a8:	1e03      	subs	r3, r0, #0
 80016aa:	d001      	beq.n	80016b0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80016ac:	f000 fe02 	bl	80022b4 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80016b0:	4b05      	ldr	r3, [pc, #20]	; (80016c8 <MX_I2C1_Init+0x74>)
 80016b2:	2100      	movs	r1, #0
 80016b4:	0018      	movs	r0, r3
 80016b6:	f002 fba7 	bl	8003e08 <HAL_I2CEx_ConfigDigitalFilter>
 80016ba:	1e03      	subs	r3, r0, #0
 80016bc:	d001      	beq.n	80016c2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80016be:	f000 fdf9 	bl	80022b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016c2:	46c0      	nop			; (mov r8, r8)
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	20000080 	.word	0x20000080
 80016cc:	40005400 	.word	0x40005400
 80016d0:	0000020b 	.word	0x0000020b

080016d4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80016d8:	4b1b      	ldr	r3, [pc, #108]	; (8001748 <MX_SPI1_Init+0x74>)
 80016da:	4a1c      	ldr	r2, [pc, #112]	; (800174c <MX_SPI1_Init+0x78>)
 80016dc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80016de:	4b1a      	ldr	r3, [pc, #104]	; (8001748 <MX_SPI1_Init+0x74>)
 80016e0:	2282      	movs	r2, #130	; 0x82
 80016e2:	0052      	lsls	r2, r2, #1
 80016e4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80016e6:	4b18      	ldr	r3, [pc, #96]	; (8001748 <MX_SPI1_Init+0x74>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80016ec:	4b16      	ldr	r3, [pc, #88]	; (8001748 <MX_SPI1_Init+0x74>)
 80016ee:	22e0      	movs	r2, #224	; 0xe0
 80016f0:	00d2      	lsls	r2, r2, #3
 80016f2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80016f4:	4b14      	ldr	r3, [pc, #80]	; (8001748 <MX_SPI1_Init+0x74>)
 80016f6:	2202      	movs	r2, #2
 80016f8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80016fa:	4b13      	ldr	r3, [pc, #76]	; (8001748 <MX_SPI1_Init+0x74>)
 80016fc:	2201      	movs	r2, #1
 80016fe:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001700:	4b11      	ldr	r3, [pc, #68]	; (8001748 <MX_SPI1_Init+0x74>)
 8001702:	2280      	movs	r2, #128	; 0x80
 8001704:	0092      	lsls	r2, r2, #2
 8001706:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001708:	4b0f      	ldr	r3, [pc, #60]	; (8001748 <MX_SPI1_Init+0x74>)
 800170a:	2200      	movs	r2, #0
 800170c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800170e:	4b0e      	ldr	r3, [pc, #56]	; (8001748 <MX_SPI1_Init+0x74>)
 8001710:	2200      	movs	r2, #0
 8001712:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001714:	4b0c      	ldr	r3, [pc, #48]	; (8001748 <MX_SPI1_Init+0x74>)
 8001716:	2200      	movs	r2, #0
 8001718:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800171a:	4b0b      	ldr	r3, [pc, #44]	; (8001748 <MX_SPI1_Init+0x74>)
 800171c:	2200      	movs	r2, #0
 800171e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001720:	4b09      	ldr	r3, [pc, #36]	; (8001748 <MX_SPI1_Init+0x74>)
 8001722:	2207      	movs	r2, #7
 8001724:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001726:	4b08      	ldr	r3, [pc, #32]	; (8001748 <MX_SPI1_Init+0x74>)
 8001728:	2200      	movs	r2, #0
 800172a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800172c:	4b06      	ldr	r3, [pc, #24]	; (8001748 <MX_SPI1_Init+0x74>)
 800172e:	2200      	movs	r2, #0
 8001730:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001732:	4b05      	ldr	r3, [pc, #20]	; (8001748 <MX_SPI1_Init+0x74>)
 8001734:	0018      	movs	r0, r3
 8001736:	f003 f981 	bl	8004a3c <HAL_SPI_Init>
 800173a:	1e03      	subs	r3, r0, #0
 800173c:	d001      	beq.n	8001742 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800173e:	f000 fdb9 	bl	80022b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001742:	46c0      	nop			; (mov r8, r8)
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	200001e8 	.word	0x200001e8
 800174c:	40013000 	.word	0x40013000

08001750 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b086      	sub	sp, #24
 8001754:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001756:	2308      	movs	r3, #8
 8001758:	18fb      	adds	r3, r7, r3
 800175a:	0018      	movs	r0, r3
 800175c:	2310      	movs	r3, #16
 800175e:	001a      	movs	r2, r3
 8001760:	2100      	movs	r1, #0
 8001762:	f004 fcbf 	bl	80060e4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001766:	003b      	movs	r3, r7
 8001768:	0018      	movs	r0, r3
 800176a:	2308      	movs	r3, #8
 800176c:	001a      	movs	r2, r3
 800176e:	2100      	movs	r1, #0
 8001770:	f004 fcb8 	bl	80060e4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001774:	4b20      	ldr	r3, [pc, #128]	; (80017f8 <MX_TIM1_Init+0xa8>)
 8001776:	4a21      	ldr	r2, [pc, #132]	; (80017fc <MX_TIM1_Init+0xac>)
 8001778:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 15;
 800177a:	4b1f      	ldr	r3, [pc, #124]	; (80017f8 <MX_TIM1_Init+0xa8>)
 800177c:	220f      	movs	r2, #15
 800177e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001780:	4b1d      	ldr	r3, [pc, #116]	; (80017f8 <MX_TIM1_Init+0xa8>)
 8001782:	2200      	movs	r2, #0
 8001784:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000;
 8001786:	4b1c      	ldr	r3, [pc, #112]	; (80017f8 <MX_TIM1_Init+0xa8>)
 8001788:	22fa      	movs	r2, #250	; 0xfa
 800178a:	00d2      	lsls	r2, r2, #3
 800178c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800178e:	4b1a      	ldr	r3, [pc, #104]	; (80017f8 <MX_TIM1_Init+0xa8>)
 8001790:	2200      	movs	r2, #0
 8001792:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001794:	4b18      	ldr	r3, [pc, #96]	; (80017f8 <MX_TIM1_Init+0xa8>)
 8001796:	2200      	movs	r2, #0
 8001798:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800179a:	4b17      	ldr	r3, [pc, #92]	; (80017f8 <MX_TIM1_Init+0xa8>)
 800179c:	2200      	movs	r2, #0
 800179e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80017a0:	4b15      	ldr	r3, [pc, #84]	; (80017f8 <MX_TIM1_Init+0xa8>)
 80017a2:	0018      	movs	r0, r3
 80017a4:	f004 f86c 	bl	8005880 <HAL_TIM_Base_Init>
 80017a8:	1e03      	subs	r3, r0, #0
 80017aa:	d001      	beq.n	80017b0 <MX_TIM1_Init+0x60>
  {
    Error_Handler();
 80017ac:	f000 fd82 	bl	80022b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017b0:	2108      	movs	r1, #8
 80017b2:	187b      	adds	r3, r7, r1
 80017b4:	2280      	movs	r2, #128	; 0x80
 80017b6:	0152      	lsls	r2, r2, #5
 80017b8:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80017ba:	187a      	adds	r2, r7, r1
 80017bc:	4b0e      	ldr	r3, [pc, #56]	; (80017f8 <MX_TIM1_Init+0xa8>)
 80017be:	0011      	movs	r1, r2
 80017c0:	0018      	movs	r0, r3
 80017c2:	f004 fa15 	bl	8005bf0 <HAL_TIM_ConfigClockSource>
 80017c6:	1e03      	subs	r3, r0, #0
 80017c8:	d001      	beq.n	80017ce <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 80017ca:	f000 fd73 	bl	80022b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017ce:	003b      	movs	r3, r7
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017d4:	003b      	movs	r3, r7
 80017d6:	2200      	movs	r2, #0
 80017d8:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80017da:	003a      	movs	r2, r7
 80017dc:	4b06      	ldr	r3, [pc, #24]	; (80017f8 <MX_TIM1_Init+0xa8>)
 80017de:	0011      	movs	r1, r2
 80017e0:	0018      	movs	r0, r3
 80017e2:	f004 fbf3 	bl	8005fcc <HAL_TIMEx_MasterConfigSynchronization>
 80017e6:	1e03      	subs	r3, r0, #0
 80017e8:	d001      	beq.n	80017ee <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80017ea:	f000 fd63 	bl	80022b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80017ee:	46c0      	nop			; (mov r8, r8)
 80017f0:	46bd      	mov	sp, r7
 80017f2:	b006      	add	sp, #24
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	46c0      	nop			; (mov r8, r8)
 80017f8:	200001a0 	.word	0x200001a0
 80017fc:	40012c00 	.word	0x40012c00

08001800 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b086      	sub	sp, #24
 8001804:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001806:	2308      	movs	r3, #8
 8001808:	18fb      	adds	r3, r7, r3
 800180a:	0018      	movs	r0, r3
 800180c:	2310      	movs	r3, #16
 800180e:	001a      	movs	r2, r3
 8001810:	2100      	movs	r1, #0
 8001812:	f004 fc67 	bl	80060e4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001816:	003b      	movs	r3, r7
 8001818:	0018      	movs	r0, r3
 800181a:	2308      	movs	r3, #8
 800181c:	001a      	movs	r2, r3
 800181e:	2100      	movs	r1, #0
 8001820:	f004 fc60 	bl	80060e4 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001824:	4b1e      	ldr	r3, [pc, #120]	; (80018a0 <MX_TIM2_Init+0xa0>)
 8001826:	2280      	movs	r2, #128	; 0x80
 8001828:	05d2      	lsls	r2, r2, #23
 800182a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15;
 800182c:	4b1c      	ldr	r3, [pc, #112]	; (80018a0 <MX_TIM2_Init+0xa0>)
 800182e:	220f      	movs	r2, #15
 8001830:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001832:	4b1b      	ldr	r3, [pc, #108]	; (80018a0 <MX_TIM2_Init+0xa0>)
 8001834:	2200      	movs	r2, #0
 8001836:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65000;
 8001838:	4b19      	ldr	r3, [pc, #100]	; (80018a0 <MX_TIM2_Init+0xa0>)
 800183a:	4a1a      	ldr	r2, [pc, #104]	; (80018a4 <MX_TIM2_Init+0xa4>)
 800183c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800183e:	4b18      	ldr	r3, [pc, #96]	; (80018a0 <MX_TIM2_Init+0xa0>)
 8001840:	2200      	movs	r2, #0
 8001842:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001844:	4b16      	ldr	r3, [pc, #88]	; (80018a0 <MX_TIM2_Init+0xa0>)
 8001846:	2200      	movs	r2, #0
 8001848:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800184a:	4b15      	ldr	r3, [pc, #84]	; (80018a0 <MX_TIM2_Init+0xa0>)
 800184c:	0018      	movs	r0, r3
 800184e:	f004 f817 	bl	8005880 <HAL_TIM_Base_Init>
 8001852:	1e03      	subs	r3, r0, #0
 8001854:	d001      	beq.n	800185a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001856:	f000 fd2d 	bl	80022b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800185a:	2108      	movs	r1, #8
 800185c:	187b      	adds	r3, r7, r1
 800185e:	2280      	movs	r2, #128	; 0x80
 8001860:	0152      	lsls	r2, r2, #5
 8001862:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001864:	187a      	adds	r2, r7, r1
 8001866:	4b0e      	ldr	r3, [pc, #56]	; (80018a0 <MX_TIM2_Init+0xa0>)
 8001868:	0011      	movs	r1, r2
 800186a:	0018      	movs	r0, r3
 800186c:	f004 f9c0 	bl	8005bf0 <HAL_TIM_ConfigClockSource>
 8001870:	1e03      	subs	r3, r0, #0
 8001872:	d001      	beq.n	8001878 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001874:	f000 fd1e 	bl	80022b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001878:	003b      	movs	r3, r7
 800187a:	2200      	movs	r2, #0
 800187c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800187e:	003b      	movs	r3, r7
 8001880:	2200      	movs	r2, #0
 8001882:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001884:	003a      	movs	r2, r7
 8001886:	4b06      	ldr	r3, [pc, #24]	; (80018a0 <MX_TIM2_Init+0xa0>)
 8001888:	0011      	movs	r1, r2
 800188a:	0018      	movs	r0, r3
 800188c:	f004 fb9e 	bl	8005fcc <HAL_TIMEx_MasterConfigSynchronization>
 8001890:	1e03      	subs	r3, r0, #0
 8001892:	d001      	beq.n	8001898 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8001894:	f000 fd0e 	bl	80022b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001898:	46c0      	nop			; (mov r8, r8)
 800189a:	46bd      	mov	sp, r7
 800189c:	b006      	add	sp, #24
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	2000024c 	.word	0x2000024c
 80018a4:	0000fde8 	.word	0x0000fde8

080018a8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b086      	sub	sp, #24
 80018ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018ae:	2308      	movs	r3, #8
 80018b0:	18fb      	adds	r3, r7, r3
 80018b2:	0018      	movs	r0, r3
 80018b4:	2310      	movs	r3, #16
 80018b6:	001a      	movs	r2, r3
 80018b8:	2100      	movs	r1, #0
 80018ba:	f004 fc13 	bl	80060e4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018be:	003b      	movs	r3, r7
 80018c0:	0018      	movs	r0, r3
 80018c2:	2308      	movs	r3, #8
 80018c4:	001a      	movs	r2, r3
 80018c6:	2100      	movs	r1, #0
 80018c8:	f004 fc0c 	bl	80060e4 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80018cc:	4b1e      	ldr	r3, [pc, #120]	; (8001948 <MX_TIM3_Init+0xa0>)
 80018ce:	4a1f      	ldr	r2, [pc, #124]	; (800194c <MX_TIM3_Init+0xa4>)
 80018d0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15999;
 80018d2:	4b1d      	ldr	r3, [pc, #116]	; (8001948 <MX_TIM3_Init+0xa0>)
 80018d4:	4a1e      	ldr	r2, [pc, #120]	; (8001950 <MX_TIM3_Init+0xa8>)
 80018d6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018d8:	4b1b      	ldr	r3, [pc, #108]	; (8001948 <MX_TIM3_Init+0xa0>)
 80018da:	2200      	movs	r2, #0
 80018dc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 5;
 80018de:	4b1a      	ldr	r3, [pc, #104]	; (8001948 <MX_TIM3_Init+0xa0>)
 80018e0:	2205      	movs	r2, #5
 80018e2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018e4:	4b18      	ldr	r3, [pc, #96]	; (8001948 <MX_TIM3_Init+0xa0>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018ea:	4b17      	ldr	r3, [pc, #92]	; (8001948 <MX_TIM3_Init+0xa0>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80018f0:	4b15      	ldr	r3, [pc, #84]	; (8001948 <MX_TIM3_Init+0xa0>)
 80018f2:	0018      	movs	r0, r3
 80018f4:	f003 ffc4 	bl	8005880 <HAL_TIM_Base_Init>
 80018f8:	1e03      	subs	r3, r0, #0
 80018fa:	d001      	beq.n	8001900 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80018fc:	f000 fcda 	bl	80022b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001900:	2108      	movs	r1, #8
 8001902:	187b      	adds	r3, r7, r1
 8001904:	2280      	movs	r2, #128	; 0x80
 8001906:	0152      	lsls	r2, r2, #5
 8001908:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800190a:	187a      	adds	r2, r7, r1
 800190c:	4b0e      	ldr	r3, [pc, #56]	; (8001948 <MX_TIM3_Init+0xa0>)
 800190e:	0011      	movs	r1, r2
 8001910:	0018      	movs	r0, r3
 8001912:	f004 f96d 	bl	8005bf0 <HAL_TIM_ConfigClockSource>
 8001916:	1e03      	subs	r3, r0, #0
 8001918:	d001      	beq.n	800191e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800191a:	f000 fccb 	bl	80022b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800191e:	003b      	movs	r3, r7
 8001920:	2200      	movs	r2, #0
 8001922:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001924:	003b      	movs	r3, r7
 8001926:	2200      	movs	r2, #0
 8001928:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800192a:	003a      	movs	r2, r7
 800192c:	4b06      	ldr	r3, [pc, #24]	; (8001948 <MX_TIM3_Init+0xa0>)
 800192e:	0011      	movs	r1, r2
 8001930:	0018      	movs	r0, r3
 8001932:	f004 fb4b 	bl	8005fcc <HAL_TIMEx_MasterConfigSynchronization>
 8001936:	1e03      	subs	r3, r0, #0
 8001938:	d001      	beq.n	800193e <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800193a:	f000 fcbb 	bl	80022b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800193e:	46c0      	nop			; (mov r8, r8)
 8001940:	46bd      	mov	sp, r7
 8001942:	b006      	add	sp, #24
 8001944:	bd80      	pop	{r7, pc}
 8001946:	46c0      	nop			; (mov r8, r8)
 8001948:	20000124 	.word	0x20000124
 800194c:	40000400 	.word	0x40000400
 8001950:	00003e7f 	.word	0x00003e7f

08001954 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001958:	4b0f      	ldr	r3, [pc, #60]	; (8001998 <MX_TIM16_Init+0x44>)
 800195a:	4a10      	ldr	r2, [pc, #64]	; (800199c <MX_TIM16_Init+0x48>)
 800195c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 14999;
 800195e:	4b0e      	ldr	r3, [pc, #56]	; (8001998 <MX_TIM16_Init+0x44>)
 8001960:	4a0f      	ldr	r2, [pc, #60]	; (80019a0 <MX_TIM16_Init+0x4c>)
 8001962:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001964:	4b0c      	ldr	r3, [pc, #48]	; (8001998 <MX_TIM16_Init+0x44>)
 8001966:	2200      	movs	r2, #0
 8001968:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 10;
 800196a:	4b0b      	ldr	r3, [pc, #44]	; (8001998 <MX_TIM16_Init+0x44>)
 800196c:	220a      	movs	r2, #10
 800196e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001970:	4b09      	ldr	r3, [pc, #36]	; (8001998 <MX_TIM16_Init+0x44>)
 8001972:	2200      	movs	r2, #0
 8001974:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001976:	4b08      	ldr	r3, [pc, #32]	; (8001998 <MX_TIM16_Init+0x44>)
 8001978:	2200      	movs	r2, #0
 800197a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800197c:	4b06      	ldr	r3, [pc, #24]	; (8001998 <MX_TIM16_Init+0x44>)
 800197e:	2200      	movs	r2, #0
 8001980:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001982:	4b05      	ldr	r3, [pc, #20]	; (8001998 <MX_TIM16_Init+0x44>)
 8001984:	0018      	movs	r0, r3
 8001986:	f003 ff7b 	bl	8005880 <HAL_TIM_Base_Init>
 800198a:	1e03      	subs	r3, r0, #0
 800198c:	d001      	beq.n	8001992 <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 800198e:	f000 fc91 	bl	80022b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001992:	46c0      	nop			; (mov r8, r8)
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	200002ac 	.word	0x200002ac
 800199c:	40014400 	.word	0x40014400
 80019a0:	00003a97 	.word	0x00003a97

080019a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019a4:	b590      	push	{r4, r7, lr}
 80019a6:	b089      	sub	sp, #36	; 0x24
 80019a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019aa:	240c      	movs	r4, #12
 80019ac:	193b      	adds	r3, r7, r4
 80019ae:	0018      	movs	r0, r3
 80019b0:	2314      	movs	r3, #20
 80019b2:	001a      	movs	r2, r3
 80019b4:	2100      	movs	r1, #0
 80019b6:	f004 fb95 	bl	80060e4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80019ba:	4b66      	ldr	r3, [pc, #408]	; (8001b54 <MX_GPIO_Init+0x1b0>)
 80019bc:	695a      	ldr	r2, [r3, #20]
 80019be:	4b65      	ldr	r3, [pc, #404]	; (8001b54 <MX_GPIO_Init+0x1b0>)
 80019c0:	2180      	movs	r1, #128	; 0x80
 80019c2:	03c9      	lsls	r1, r1, #15
 80019c4:	430a      	orrs	r2, r1
 80019c6:	615a      	str	r2, [r3, #20]
 80019c8:	4b62      	ldr	r3, [pc, #392]	; (8001b54 <MX_GPIO_Init+0x1b0>)
 80019ca:	695a      	ldr	r2, [r3, #20]
 80019cc:	2380      	movs	r3, #128	; 0x80
 80019ce:	03db      	lsls	r3, r3, #15
 80019d0:	4013      	ands	r3, r2
 80019d2:	60bb      	str	r3, [r7, #8]
 80019d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019d6:	4b5f      	ldr	r3, [pc, #380]	; (8001b54 <MX_GPIO_Init+0x1b0>)
 80019d8:	695a      	ldr	r2, [r3, #20]
 80019da:	4b5e      	ldr	r3, [pc, #376]	; (8001b54 <MX_GPIO_Init+0x1b0>)
 80019dc:	2180      	movs	r1, #128	; 0x80
 80019de:	0289      	lsls	r1, r1, #10
 80019e0:	430a      	orrs	r2, r1
 80019e2:	615a      	str	r2, [r3, #20]
 80019e4:	4b5b      	ldr	r3, [pc, #364]	; (8001b54 <MX_GPIO_Init+0x1b0>)
 80019e6:	695a      	ldr	r2, [r3, #20]
 80019e8:	2380      	movs	r3, #128	; 0x80
 80019ea:	029b      	lsls	r3, r3, #10
 80019ec:	4013      	ands	r3, r2
 80019ee:	607b      	str	r3, [r7, #4]
 80019f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019f2:	4b58      	ldr	r3, [pc, #352]	; (8001b54 <MX_GPIO_Init+0x1b0>)
 80019f4:	695a      	ldr	r2, [r3, #20]
 80019f6:	4b57      	ldr	r3, [pc, #348]	; (8001b54 <MX_GPIO_Init+0x1b0>)
 80019f8:	2180      	movs	r1, #128	; 0x80
 80019fa:	02c9      	lsls	r1, r1, #11
 80019fc:	430a      	orrs	r2, r1
 80019fe:	615a      	str	r2, [r3, #20]
 8001a00:	4b54      	ldr	r3, [pc, #336]	; (8001b54 <MX_GPIO_Init+0x1b0>)
 8001a02:	695a      	ldr	r2, [r3, #20]
 8001a04:	2380      	movs	r3, #128	; 0x80
 8001a06:	02db      	lsls	r3, r3, #11
 8001a08:	4013      	ands	r3, r2
 8001a0a:	603b      	str	r3, [r7, #0]
 8001a0c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, cs_1_Pin|cs_2_Pin, GPIO_PIN_SET);
 8001a0e:	4b52      	ldr	r3, [pc, #328]	; (8001b58 <MX_GPIO_Init+0x1b4>)
 8001a10:	2201      	movs	r2, #1
 8001a12:	2103      	movs	r1, #3
 8001a14:	0018      	movs	r0, r3
 8001a16:	f001 fc58 	bl	80032ca <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, GPIO_PIN_RESET);
 8001a1a:	2380      	movs	r3, #128	; 0x80
 8001a1c:	021b      	lsls	r3, r3, #8
 8001a1e:	484e      	ldr	r0, [pc, #312]	; (8001b58 <MX_GPIO_Init+0x1b4>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	0019      	movs	r1, r3
 8001a24:	f001 fc51 	bl	80032ca <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, GPIO_PIN_RESET);
 8001a28:	2380      	movs	r3, #128	; 0x80
 8001a2a:	0059      	lsls	r1, r3, #1
 8001a2c:	2390      	movs	r3, #144	; 0x90
 8001a2e:	05db      	lsls	r3, r3, #23
 8001a30:	2200      	movs	r2, #0
 8001a32:	0018      	movs	r0, r3
 8001a34:	f001 fc49 	bl	80032ca <HAL_GPIO_WritePin>

  /*Configure GPIO pins : cs_1_Pin cs_2_Pin */
  GPIO_InitStruct.Pin = cs_1_Pin|cs_2_Pin;
 8001a38:	0021      	movs	r1, r4
 8001a3a:	187b      	adds	r3, r7, r1
 8001a3c:	2203      	movs	r2, #3
 8001a3e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a40:	187b      	adds	r3, r7, r1
 8001a42:	2201      	movs	r2, #1
 8001a44:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a46:	187b      	adds	r3, r7, r1
 8001a48:	2201      	movs	r2, #1
 8001a4a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a4c:	187b      	adds	r3, r7, r1
 8001a4e:	2203      	movs	r2, #3
 8001a50:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a52:	000c      	movs	r4, r1
 8001a54:	187b      	adds	r3, r7, r1
 8001a56:	4a40      	ldr	r2, [pc, #256]	; (8001b58 <MX_GPIO_Init+0x1b4>)
 8001a58:	0019      	movs	r1, r3
 8001a5a:	0010      	movs	r0, r2
 8001a5c:	f001 fab0 	bl	8002fc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : D6_Pin */
  GPIO_InitStruct.Pin = D6_Pin;
 8001a60:	0021      	movs	r1, r4
 8001a62:	187b      	adds	r3, r7, r1
 8001a64:	2280      	movs	r2, #128	; 0x80
 8001a66:	0212      	lsls	r2, r2, #8
 8001a68:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a6a:	187b      	adds	r3, r7, r1
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a70:	187b      	adds	r3, r7, r1
 8001a72:	2200      	movs	r2, #0
 8001a74:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a76:	187b      	adds	r3, r7, r1
 8001a78:	2200      	movs	r2, #0
 8001a7a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(D6_GPIO_Port, &GPIO_InitStruct);
 8001a7c:	000c      	movs	r4, r1
 8001a7e:	187b      	adds	r3, r7, r1
 8001a80:	4a35      	ldr	r2, [pc, #212]	; (8001b58 <MX_GPIO_Init+0x1b4>)
 8001a82:	0019      	movs	r1, r3
 8001a84:	0010      	movs	r0, r2
 8001a86:	f001 fa9b 	bl	8002fc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : D5_Pin */
  GPIO_InitStruct.Pin = D5_Pin;
 8001a8a:	0021      	movs	r1, r4
 8001a8c:	187b      	adds	r3, r7, r1
 8001a8e:	2280      	movs	r2, #128	; 0x80
 8001a90:	0052      	lsls	r2, r2, #1
 8001a92:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a94:	187b      	adds	r3, r7, r1
 8001a96:	2201      	movs	r2, #1
 8001a98:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9a:	187b      	adds	r3, r7, r1
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa0:	187b      	adds	r3, r7, r1
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(D5_GPIO_Port, &GPIO_InitStruct);
 8001aa6:	000c      	movs	r4, r1
 8001aa8:	187a      	adds	r2, r7, r1
 8001aaa:	2390      	movs	r3, #144	; 0x90
 8001aac:	05db      	lsls	r3, r3, #23
 8001aae:	0011      	movs	r1, r2
 8001ab0:	0018      	movs	r0, r3
 8001ab2:	f001 fa85 	bl	8002fc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001ab6:	0021      	movs	r1, r4
 8001ab8:	187b      	adds	r3, r7, r1
 8001aba:	22c0      	movs	r2, #192	; 0xc0
 8001abc:	00d2      	lsls	r2, r2, #3
 8001abe:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac0:	000c      	movs	r4, r1
 8001ac2:	193b      	adds	r3, r7, r4
 8001ac4:	2202      	movs	r2, #2
 8001ac6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac8:	193b      	adds	r3, r7, r4
 8001aca:	2200      	movs	r2, #0
 8001acc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ace:	193b      	adds	r3, r7, r4
 8001ad0:	2203      	movs	r2, #3
 8001ad2:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001ad4:	193b      	adds	r3, r7, r4
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ada:	193a      	adds	r2, r7, r4
 8001adc:	2390      	movs	r3, #144	; 0x90
 8001ade:	05db      	lsls	r3, r3, #23
 8001ae0:	0011      	movs	r1, r2
 8001ae2:	0018      	movs	r0, r3
 8001ae4:	f001 fa6c 	bl	8002fc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : I4_Pin */
  GPIO_InitStruct.Pin = I4_Pin;
 8001ae8:	193b      	adds	r3, r7, r4
 8001aea:	2280      	movs	r2, #128	; 0x80
 8001aec:	0212      	lsls	r2, r2, #8
 8001aee:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001af0:	193b      	adds	r3, r7, r4
 8001af2:	2200      	movs	r2, #0
 8001af4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001af6:	193b      	adds	r3, r7, r4
 8001af8:	2201      	movs	r2, #1
 8001afa:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(I4_GPIO_Port, &GPIO_InitStruct);
 8001afc:	193a      	adds	r2, r7, r4
 8001afe:	2390      	movs	r3, #144	; 0x90
 8001b00:	05db      	lsls	r3, r3, #23
 8001b02:	0011      	movs	r1, r2
 8001b04:	0018      	movs	r0, r3
 8001b06:	f001 fa5b 	bl	8002fc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : I3_Pin I2_Pin I1_Pin I0_Pin */
  GPIO_InitStruct.Pin = I3_Pin|I2_Pin|I1_Pin|I0_Pin;
 8001b0a:	193b      	adds	r3, r7, r4
 8001b0c:	2278      	movs	r2, #120	; 0x78
 8001b0e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b10:	193b      	adds	r3, r7, r4
 8001b12:	2200      	movs	r2, #0
 8001b14:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b16:	193b      	adds	r3, r7, r4
 8001b18:	2201      	movs	r2, #1
 8001b1a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b1c:	193b      	adds	r3, r7, r4
 8001b1e:	4a0e      	ldr	r2, [pc, #56]	; (8001b58 <MX_GPIO_Init+0x1b4>)
 8001b20:	0019      	movs	r1, r3
 8001b22:	0010      	movs	r0, r2
 8001b24:	f001 fa4c 	bl	8002fc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001b28:	0021      	movs	r1, r4
 8001b2a:	187b      	adds	r3, r7, r1
 8001b2c:	2280      	movs	r2, #128	; 0x80
 8001b2e:	0092      	lsls	r2, r2, #2
 8001b30:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b32:	187b      	adds	r3, r7, r1
 8001b34:	2203      	movs	r2, #3
 8001b36:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b38:	187b      	adds	r3, r7, r1
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b3e:	187b      	adds	r3, r7, r1
 8001b40:	4a05      	ldr	r2, [pc, #20]	; (8001b58 <MX_GPIO_Init+0x1b4>)
 8001b42:	0019      	movs	r1, r3
 8001b44:	0010      	movs	r0, r2
 8001b46:	f001 fa3b 	bl	8002fc0 <HAL_GPIO_Init>

}
 8001b4a:	46c0      	nop			; (mov r8, r8)
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	b009      	add	sp, #36	; 0x24
 8001b50:	bd90      	pop	{r4, r7, pc}
 8001b52:	46c0      	nop			; (mov r8, r8)
 8001b54:	40021000 	.word	0x40021000
 8001b58:	48000400 	.word	0x48000400

08001b5c <platform_write>:

/* USER CODE BEGIN 4 */

static int32_t platform_write(void *handle, uint8_t reg, uint8_t *bufp,
                              uint16_t len)
{
 8001b5c:	b5b0      	push	{r4, r5, r7, lr}
 8001b5e:	b084      	sub	sp, #16
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	60f8      	str	r0, [r7, #12]
 8001b64:	0008      	movs	r0, r1
 8001b66:	607a      	str	r2, [r7, #4]
 8001b68:	0019      	movs	r1, r3
 8001b6a:	240b      	movs	r4, #11
 8001b6c:	193b      	adds	r3, r7, r4
 8001b6e:	1c02      	adds	r2, r0, #0
 8001b70:	701a      	strb	r2, [r3, #0]
 8001b72:	2508      	movs	r5, #8
 8001b74:	197b      	adds	r3, r7, r5
 8001b76:	1c0a      	adds	r2, r1, #0
 8001b78:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(CS_up_GPIO_Port, CS_ACC, GPIO_PIN_RESET);
 8001b7a:	4b0f      	ldr	r3, [pc, #60]	; (8001bb8 <platform_write+0x5c>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	2101      	movs	r1, #1
 8001b80:	0018      	movs	r0, r3
 8001b82:	f001 fba2 	bl	80032ca <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(handle, &reg, 1, 10);
 8001b86:	1939      	adds	r1, r7, r4
 8001b88:	68f8      	ldr	r0, [r7, #12]
 8001b8a:	230a      	movs	r3, #10
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	f002 ffef 	bl	8004b70 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(handle, bufp, len, 10);
 8001b92:	197b      	adds	r3, r7, r5
 8001b94:	881a      	ldrh	r2, [r3, #0]
 8001b96:	6879      	ldr	r1, [r7, #4]
 8001b98:	68f8      	ldr	r0, [r7, #12]
 8001b9a:	230a      	movs	r3, #10
 8001b9c:	f002 ffe8 	bl	8004b70 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CS_up_GPIO_Port, CS_ACC, GPIO_PIN_SET);
 8001ba0:	4b05      	ldr	r3, [pc, #20]	; (8001bb8 <platform_write+0x5c>)
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	2101      	movs	r1, #1
 8001ba6:	0018      	movs	r0, r3
 8001ba8:	f001 fb8f 	bl	80032ca <HAL_GPIO_WritePin>
  return 0;
 8001bac:	2300      	movs	r3, #0
}
 8001bae:	0018      	movs	r0, r3
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	b004      	add	sp, #16
 8001bb4:	bdb0      	pop	{r4, r5, r7, pc}
 8001bb6:	46c0      	nop			; (mov r8, r8)
 8001bb8:	48000400 	.word	0x48000400

08001bbc <platform_read>:
 * @param  len       number of consecutive register to read
 *
 */
static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 8001bbc:	b5b0      	push	{r4, r5, r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	60f8      	str	r0, [r7, #12]
 8001bc4:	0008      	movs	r0, r1
 8001bc6:	607a      	str	r2, [r7, #4]
 8001bc8:	0019      	movs	r1, r3
 8001bca:	240b      	movs	r4, #11
 8001bcc:	193b      	adds	r3, r7, r4
 8001bce:	1c02      	adds	r2, r0, #0
 8001bd0:	701a      	strb	r2, [r3, #0]
 8001bd2:	2508      	movs	r5, #8
 8001bd4:	197b      	adds	r3, r7, r5
 8001bd6:	1c0a      	adds	r2, r1, #0
 8001bd8:	801a      	strh	r2, [r3, #0]
	/* Read command */
	reg |= 0x80;
 8001bda:	0021      	movs	r1, r4
 8001bdc:	187b      	adds	r3, r7, r1
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	2280      	movs	r2, #128	; 0x80
 8001be2:	4252      	negs	r2, r2
 8001be4:	4313      	orrs	r3, r2
 8001be6:	b2da      	uxtb	r2, r3
 8001be8:	000c      	movs	r4, r1
 8001bea:	187b      	adds	r3, r7, r1
 8001bec:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(CS_up_GPIO_Port, CS_ACC, GPIO_PIN_RESET);
 8001bee:	4b0f      	ldr	r3, [pc, #60]	; (8001c2c <platform_read+0x70>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	2101      	movs	r1, #1
 8001bf4:	0018      	movs	r0, r3
 8001bf6:	f001 fb68 	bl	80032ca <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(handle, &reg, 1, 10);
 8001bfa:	0021      	movs	r1, r4
 8001bfc:	1879      	adds	r1, r7, r1
 8001bfe:	68f8      	ldr	r0, [r7, #12]
 8001c00:	230a      	movs	r3, #10
 8001c02:	2201      	movs	r2, #1
 8001c04:	f002 ffb4 	bl	8004b70 <HAL_SPI_Transmit>
    HAL_SPI_Receive(handle, bufp, len, 10);
 8001c08:	197b      	adds	r3, r7, r5
 8001c0a:	881a      	ldrh	r2, [r3, #0]
 8001c0c:	6879      	ldr	r1, [r7, #4]
 8001c0e:	68f8      	ldr	r0, [r7, #12]
 8001c10:	230a      	movs	r3, #10
 8001c12:	f003 f92f 	bl	8004e74 <HAL_SPI_Receive>
    HAL_GPIO_WritePin(CS_up_GPIO_Port, CS_ACC, GPIO_PIN_SET);
 8001c16:	4b05      	ldr	r3, [pc, #20]	; (8001c2c <platform_read+0x70>)
 8001c18:	2201      	movs	r2, #1
 8001c1a:	2101      	movs	r1, #1
 8001c1c:	0018      	movs	r0, r3
 8001c1e:	f001 fb54 	bl	80032ca <HAL_GPIO_WritePin>
  return 0;
 8001c22:	2300      	movs	r3, #0
}
 8001c24:	0018      	movs	r0, r3
 8001c26:	46bd      	mov	sp, r7
 8001c28:	b004      	add	sp, #16
 8001c2a:	bdb0      	pop	{r4, r5, r7, pc}
 8001c2c:	48000400 	.word	0x48000400

08001c30 <platform_write_gir>:


static int32_t platform_write_gir(void *handle, uint8_t reg, uint8_t *bufp,
                              uint16_t len)
{	if (len>1)reg |= 0x40;
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b084      	sub	sp, #16
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	60f8      	str	r0, [r7, #12]
 8001c38:	0008      	movs	r0, r1
 8001c3a:	607a      	str	r2, [r7, #4]
 8001c3c:	0019      	movs	r1, r3
 8001c3e:	230b      	movs	r3, #11
 8001c40:	18fb      	adds	r3, r7, r3
 8001c42:	1c02      	adds	r2, r0, #0
 8001c44:	701a      	strb	r2, [r3, #0]
 8001c46:	2008      	movs	r0, #8
 8001c48:	183b      	adds	r3, r7, r0
 8001c4a:	1c0a      	adds	r2, r1, #0
 8001c4c:	801a      	strh	r2, [r3, #0]
 8001c4e:	183b      	adds	r3, r7, r0
 8001c50:	881b      	ldrh	r3, [r3, #0]
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d907      	bls.n	8001c66 <platform_write_gir+0x36>
 8001c56:	210b      	movs	r1, #11
 8001c58:	187b      	adds	r3, r7, r1
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	2240      	movs	r2, #64	; 0x40
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	b2da      	uxtb	r2, r3
 8001c62:	187b      	adds	r3, r7, r1
 8001c64:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(CS_up_GPIO_Port, CS_GIR, GPIO_PIN_RESET);
 8001c66:	4b10      	ldr	r3, [pc, #64]	; (8001ca8 <platform_write_gir+0x78>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	2102      	movs	r1, #2
 8001c6c:	0018      	movs	r0, r3
 8001c6e:	f001 fb2c 	bl	80032ca <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(handle, &reg, 1, 10);
 8001c72:	230b      	movs	r3, #11
 8001c74:	18f9      	adds	r1, r7, r3
 8001c76:	68f8      	ldr	r0, [r7, #12]
 8001c78:	230a      	movs	r3, #10
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	f002 ff78 	bl	8004b70 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(handle, bufp, len, 10);
 8001c80:	2308      	movs	r3, #8
 8001c82:	18fb      	adds	r3, r7, r3
 8001c84:	881a      	ldrh	r2, [r3, #0]
 8001c86:	6879      	ldr	r1, [r7, #4]
 8001c88:	68f8      	ldr	r0, [r7, #12]
 8001c8a:	230a      	movs	r3, #10
 8001c8c:	f002 ff70 	bl	8004b70 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CS_up_GPIO_Port, CS_GIR, GPIO_PIN_SET);
 8001c90:	4b05      	ldr	r3, [pc, #20]	; (8001ca8 <platform_write_gir+0x78>)
 8001c92:	2201      	movs	r2, #1
 8001c94:	2102      	movs	r1, #2
 8001c96:	0018      	movs	r0, r3
 8001c98:	f001 fb17 	bl	80032ca <HAL_GPIO_WritePin>
  return 0;
 8001c9c:	2300      	movs	r3, #0
}
 8001c9e:	0018      	movs	r0, r3
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	b004      	add	sp, #16
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	46c0      	nop			; (mov r8, r8)
 8001ca8:	48000400 	.word	0x48000400

08001cac <platform_read_gir>:
 * @param  len       number of consecutive register to read
 *
 */
static int32_t platform_read_gir(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 8001cac:	b590      	push	{r4, r7, lr}
 8001cae:	b085      	sub	sp, #20
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	60f8      	str	r0, [r7, #12]
 8001cb4:	0008      	movs	r0, r1
 8001cb6:	607a      	str	r2, [r7, #4]
 8001cb8:	0019      	movs	r1, r3
 8001cba:	240b      	movs	r4, #11
 8001cbc:	193b      	adds	r3, r7, r4
 8001cbe:	1c02      	adds	r2, r0, #0
 8001cc0:	701a      	strb	r2, [r3, #0]
 8001cc2:	2008      	movs	r0, #8
 8001cc4:	183b      	adds	r3, r7, r0
 8001cc6:	1c0a      	adds	r2, r1, #0
 8001cc8:	801a      	strh	r2, [r3, #0]
	/* Read command */
	reg |= 0x80;
 8001cca:	0021      	movs	r1, r4
 8001ccc:	187b      	adds	r3, r7, r1
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	2280      	movs	r2, #128	; 0x80
 8001cd2:	4252      	negs	r2, r2
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	b2da      	uxtb	r2, r3
 8001cd8:	187b      	adds	r3, r7, r1
 8001cda:	701a      	strb	r2, [r3, #0]
	if (len>1)reg |= 0xC0;
 8001cdc:	183b      	adds	r3, r7, r0
 8001cde:	881b      	ldrh	r3, [r3, #0]
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d908      	bls.n	8001cf6 <platform_read_gir+0x4a>
 8001ce4:	210b      	movs	r1, #11
 8001ce6:	187b      	adds	r3, r7, r1
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	2240      	movs	r2, #64	; 0x40
 8001cec:	4252      	negs	r2, r2
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	b2da      	uxtb	r2, r3
 8001cf2:	187b      	adds	r3, r7, r1
 8001cf4:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(CS_up_GPIO_Port, CS_GIR, GPIO_PIN_RESET);
 8001cf6:	4b10      	ldr	r3, [pc, #64]	; (8001d38 <platform_read_gir+0x8c>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	2102      	movs	r1, #2
 8001cfc:	0018      	movs	r0, r3
 8001cfe:	f001 fae4 	bl	80032ca <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(handle, &reg, 1, 10);
 8001d02:	230b      	movs	r3, #11
 8001d04:	18f9      	adds	r1, r7, r3
 8001d06:	68f8      	ldr	r0, [r7, #12]
 8001d08:	230a      	movs	r3, #10
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	f002 ff30 	bl	8004b70 <HAL_SPI_Transmit>
    HAL_SPI_Receive(handle, bufp, len, 10);
 8001d10:	2308      	movs	r3, #8
 8001d12:	18fb      	adds	r3, r7, r3
 8001d14:	881a      	ldrh	r2, [r3, #0]
 8001d16:	6879      	ldr	r1, [r7, #4]
 8001d18:	68f8      	ldr	r0, [r7, #12]
 8001d1a:	230a      	movs	r3, #10
 8001d1c:	f003 f8aa 	bl	8004e74 <HAL_SPI_Receive>
    HAL_GPIO_WritePin(CS_up_GPIO_Port, CS_GIR, GPIO_PIN_SET);
 8001d20:	4b05      	ldr	r3, [pc, #20]	; (8001d38 <platform_read_gir+0x8c>)
 8001d22:	2201      	movs	r2, #1
 8001d24:	2102      	movs	r1, #2
 8001d26:	0018      	movs	r0, r3
 8001d28:	f001 facf 	bl	80032ca <HAL_GPIO_WritePin>
  return 0;
 8001d2c:	2300      	movs	r3, #0
}
 8001d2e:	0018      	movs	r0, r3
 8001d30:	46bd      	mov	sp, r7
 8001d32:	b005      	add	sp, #20
 8001d34:	bd90      	pop	{r4, r7, pc}
 8001d36:	46c0      	nop			; (mov r8, r8)
 8001d38:	48000400 	.word	0x48000400

08001d3c <platform_write_bar>:
static int32_t platform_write_bar(void *handle, uint8_t reg, uint8_t *bufp,
                              uint16_t len)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b088      	sub	sp, #32
 8001d40:	af04      	add	r7, sp, #16
 8001d42:	60f8      	str	r0, [r7, #12]
 8001d44:	0008      	movs	r0, r1
 8001d46:	607a      	str	r2, [r7, #4]
 8001d48:	0019      	movs	r1, r3
 8001d4a:	230b      	movs	r3, #11
 8001d4c:	18fb      	adds	r3, r7, r3
 8001d4e:	1c02      	adds	r2, r0, #0
 8001d50:	701a      	strb	r2, [r3, #0]
 8001d52:	2308      	movs	r3, #8
 8001d54:	18fb      	adds	r3, r7, r3
 8001d56:	1c0a      	adds	r2, r1, #0
 8001d58:	801a      	strh	r2, [r3, #0]
  if (handle == &hi2c1)
 8001d5a:	68fa      	ldr	r2, [r7, #12]
 8001d5c:	4b0c      	ldr	r3, [pc, #48]	; (8001d90 <platform_write_bar+0x54>)
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d110      	bne.n	8001d84 <platform_write_bar+0x48>
  {
    HAL_I2C_Mem_Write(handle, LPS22HB_I2C_ADD_H, reg,
 8001d62:	230b      	movs	r3, #11
 8001d64:	18fb      	adds	r3, r7, r3
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	b29a      	uxth	r2, r3
 8001d6a:	68f8      	ldr	r0, [r7, #12]
 8001d6c:	2364      	movs	r3, #100	; 0x64
 8001d6e:	9302      	str	r3, [sp, #8]
 8001d70:	2308      	movs	r3, #8
 8001d72:	18fb      	adds	r3, r7, r3
 8001d74:	881b      	ldrh	r3, [r3, #0]
 8001d76:	9301      	str	r3, [sp, #4]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	9300      	str	r3, [sp, #0]
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	21bb      	movs	r1, #187	; 0xbb
 8001d80:	f001 fb56 	bl	8003430 <HAL_I2C_Mem_Write>
                      I2C_MEMADD_SIZE_8BIT, bufp, len, 100);
  }

  return 0;
 8001d84:	2300      	movs	r3, #0
}
 8001d86:	0018      	movs	r0, r3
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	b004      	add	sp, #16
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	46c0      	nop			; (mov r8, r8)
 8001d90:	20000080 	.word	0x20000080

08001d94 <platform_read_bar>:
 * @param  bufp      pointer to buffer that store the data read
 * @param  len       number of consecutive register to read
 *
 */
static int32_t platform_read_bar(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b088      	sub	sp, #32
 8001d98:	af04      	add	r7, sp, #16
 8001d9a:	60f8      	str	r0, [r7, #12]
 8001d9c:	0008      	movs	r0, r1
 8001d9e:	607a      	str	r2, [r7, #4]
 8001da0:	0019      	movs	r1, r3
 8001da2:	230b      	movs	r3, #11
 8001da4:	18fb      	adds	r3, r7, r3
 8001da6:	1c02      	adds	r2, r0, #0
 8001da8:	701a      	strb	r2, [r3, #0]
 8001daa:	2308      	movs	r3, #8
 8001dac:	18fb      	adds	r3, r7, r3
 8001dae:	1c0a      	adds	r2, r1, #0
 8001db0:	801a      	strh	r2, [r3, #0]
  if (handle == &hi2c1)
 8001db2:	68fa      	ldr	r2, [r7, #12]
 8001db4:	4b0c      	ldr	r3, [pc, #48]	; (8001de8 <platform_read_bar+0x54>)
 8001db6:	429a      	cmp	r2, r3
 8001db8:	d110      	bne.n	8001ddc <platform_read_bar+0x48>
  {
    HAL_I2C_Mem_Read(handle, LPS22HB_I2C_ADD_H, reg,
 8001dba:	230b      	movs	r3, #11
 8001dbc:	18fb      	adds	r3, r7, r3
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	b29a      	uxth	r2, r3
 8001dc2:	68f8      	ldr	r0, [r7, #12]
 8001dc4:	2364      	movs	r3, #100	; 0x64
 8001dc6:	9302      	str	r3, [sp, #8]
 8001dc8:	2308      	movs	r3, #8
 8001dca:	18fb      	adds	r3, r7, r3
 8001dcc:	881b      	ldrh	r3, [r3, #0]
 8001dce:	9301      	str	r3, [sp, #4]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	9300      	str	r3, [sp, #0]
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	21bb      	movs	r1, #187	; 0xbb
 8001dd8:	f001 fc58 	bl	800368c <HAL_I2C_Mem_Read>
                     I2C_MEMADD_SIZE_8BIT, bufp, len, 100);
  }

  return 0;
 8001ddc:	2300      	movs	r3, #0
}
 8001dde:	0018      	movs	r0, r3
 8001de0:	46bd      	mov	sp, r7
 8001de2:	b004      	add	sp, #16
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	46c0      	nop			; (mov r8, r8)
 8001de8:	20000080 	.word	0x20000080

08001dec <platform_write_hum>:
static int32_t platform_write_hum(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b088      	sub	sp, #32
 8001df0:	af04      	add	r7, sp, #16
 8001df2:	60f8      	str	r0, [r7, #12]
 8001df4:	0008      	movs	r0, r1
 8001df6:	607a      	str	r2, [r7, #4]
 8001df8:	0019      	movs	r1, r3
 8001dfa:	230b      	movs	r3, #11
 8001dfc:	18fb      	adds	r3, r7, r3
 8001dfe:	1c02      	adds	r2, r0, #0
 8001e00:	701a      	strb	r2, [r3, #0]
 8001e02:	2308      	movs	r3, #8
 8001e04:	18fb      	adds	r3, r7, r3
 8001e06:	1c0a      	adds	r2, r1, #0
 8001e08:	801a      	strh	r2, [r3, #0]
  if (handle == &hi2c1)
 8001e0a:	68fa      	ldr	r2, [r7, #12]
 8001e0c:	4b0f      	ldr	r3, [pc, #60]	; (8001e4c <platform_write_hum+0x60>)
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	d117      	bne.n	8001e42 <platform_write_hum+0x56>
  {
    /* Write multiple command */
    reg |= 0x80;
 8001e12:	200b      	movs	r0, #11
 8001e14:	183b      	adds	r3, r7, r0
 8001e16:	183a      	adds	r2, r7, r0
 8001e18:	7812      	ldrb	r2, [r2, #0]
 8001e1a:	2180      	movs	r1, #128	; 0x80
 8001e1c:	4249      	negs	r1, r1
 8001e1e:	430a      	orrs	r2, r1
 8001e20:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Write(handle, HTS221_I2C_ADDRESS, reg,
 8001e22:	183b      	adds	r3, r7, r0
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	b29a      	uxth	r2, r3
 8001e28:	68f8      	ldr	r0, [r7, #12]
 8001e2a:	2364      	movs	r3, #100	; 0x64
 8001e2c:	9302      	str	r3, [sp, #8]
 8001e2e:	2308      	movs	r3, #8
 8001e30:	18fb      	adds	r3, r7, r3
 8001e32:	881b      	ldrh	r3, [r3, #0]
 8001e34:	9301      	str	r3, [sp, #4]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	9300      	str	r3, [sp, #0]
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	21bf      	movs	r1, #191	; 0xbf
 8001e3e:	f001 faf7 	bl	8003430 <HAL_I2C_Mem_Write>
                      I2C_MEMADD_SIZE_8BIT, bufp, len, 100);
  }

  return 0;
 8001e42:	2300      	movs	r3, #0
}
 8001e44:	0018      	movs	r0, r3
 8001e46:	46bd      	mov	sp, r7
 8001e48:	b004      	add	sp, #16
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	20000080 	.word	0x20000080

08001e50 <platform_read_hum>:
 * @param  bufp      pointer to buffer that store the data read
 * @param  len       number of consecutive register to read
 *
 */
static int32_t platform_read_hum(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b088      	sub	sp, #32
 8001e54:	af04      	add	r7, sp, #16
 8001e56:	60f8      	str	r0, [r7, #12]
 8001e58:	0008      	movs	r0, r1
 8001e5a:	607a      	str	r2, [r7, #4]
 8001e5c:	0019      	movs	r1, r3
 8001e5e:	230b      	movs	r3, #11
 8001e60:	18fb      	adds	r3, r7, r3
 8001e62:	1c02      	adds	r2, r0, #0
 8001e64:	701a      	strb	r2, [r3, #0]
 8001e66:	2308      	movs	r3, #8
 8001e68:	18fb      	adds	r3, r7, r3
 8001e6a:	1c0a      	adds	r2, r1, #0
 8001e6c:	801a      	strh	r2, [r3, #0]
  if (handle == &hi2c1)
 8001e6e:	68fa      	ldr	r2, [r7, #12]
 8001e70:	4b0f      	ldr	r3, [pc, #60]	; (8001eb0 <platform_read_hum+0x60>)
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d117      	bne.n	8001ea6 <platform_read_hum+0x56>
  {
    /* Read multiple command */
    reg |= 0x80;
 8001e76:	200b      	movs	r0, #11
 8001e78:	183b      	adds	r3, r7, r0
 8001e7a:	183a      	adds	r2, r7, r0
 8001e7c:	7812      	ldrb	r2, [r2, #0]
 8001e7e:	2180      	movs	r1, #128	; 0x80
 8001e80:	4249      	negs	r1, r1
 8001e82:	430a      	orrs	r2, r1
 8001e84:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Read(handle, HTS221_I2C_ADDRESS, reg,
 8001e86:	183b      	adds	r3, r7, r0
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	b29a      	uxth	r2, r3
 8001e8c:	68f8      	ldr	r0, [r7, #12]
 8001e8e:	2364      	movs	r3, #100	; 0x64
 8001e90:	9302      	str	r3, [sp, #8]
 8001e92:	2308      	movs	r3, #8
 8001e94:	18fb      	adds	r3, r7, r3
 8001e96:	881b      	ldrh	r3, [r3, #0]
 8001e98:	9301      	str	r3, [sp, #4]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	9300      	str	r3, [sp, #0]
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	21bf      	movs	r1, #191	; 0xbf
 8001ea2:	f001 fbf3 	bl	800368c <HAL_I2C_Mem_Read>
                     I2C_MEMADD_SIZE_8BIT, bufp, len, 100);
  }

  return 0;
 8001ea6:	2300      	movs	r3, #0
}
 8001ea8:	0018      	movs	r0, r3
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	b004      	add	sp, #16
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	20000080 	.word	0x20000080

08001eb4 <HAL_TIM_PeriodElapsedCallback>:
	giro->x=giro->x/16;
	giro->y=giro->y/16;
return 0;}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
    if (htim->Instance==TIM16) //check if the interrupt comes from TIM2
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a77      	ldr	r2, [pc, #476]	; (80020a0 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d106      	bne.n	8001ed4 <HAL_TIM_PeriodElapsedCallback+0x20>
        {
    	HAL_TIM_Base_Stop_IT(&htim16);
 8001ec6:	4b77      	ldr	r3, [pc, #476]	; (80020a4 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8001ec8:	0018      	movs	r0, r3
 8001eca:	f003 fd51 	bl	8005970 <HAL_TIM_Base_Stop_IT>
    	flagStartData=STD_MODE;
 8001ece:	4b76      	ldr	r3, [pc, #472]	; (80020a8 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	701a      	strb	r2, [r3, #0]
        }
    if (htim->Instance==TIM3) //check if the interrupt comes from TIM2
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a74      	ldr	r2, [pc, #464]	; (80020ac <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d10c      	bne.n	8001ef8 <HAL_TIM_PeriodElapsedCallback+0x44>
            {
    		TIM1->CNT=0;
 8001ede:	4b74      	ldr	r3, [pc, #464]	; (80020b0 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	625a      	str	r2, [r3, #36]	; 0x24
    		HAL_TIM_Base_Start_IT(&htim2);
 8001ee4:	4b73      	ldr	r3, [pc, #460]	; (80020b4 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8001ee6:	0018      	movs	r0, r3
 8001ee8:	f003 fd20 	bl	800592c <HAL_TIM_Base_Start_IT>
    		HAL_TIM_Base_Start_IT(&htim1);
 8001eec:	4b72      	ldr	r3, [pc, #456]	; (80020b8 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8001eee:	0018      	movs	r0, r3
 8001ef0:	f003 fd1c 	bl	800592c <HAL_TIM_Base_Start_IT>
    		get_data();
 8001ef4:	f000 f8f2 	bl	80020dc <get_data>
            }
    if (htim->Instance==TIM1) //check if the interrupt comes from TIM2
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a6c      	ldr	r2, [pc, #432]	; (80020b0 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d000      	beq.n	8001f04 <HAL_TIM_PeriodElapsedCallback+0x50>
 8001f02:	e0c7      	b.n	8002094 <HAL_TIM_PeriodElapsedCallback+0x1e0>
            {
    		timer++;//TIMER INVIO PACCHETTI TICKER
 8001f04:	4b6d      	ldr	r3, [pc, #436]	; (80020bc <HAL_TIM_PeriodElapsedCallback+0x208>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	1c5a      	adds	r2, r3, #1
 8001f0a:	4b6c      	ldr	r3, [pc, #432]	; (80020bc <HAL_TIM_PeriodElapsedCallback+0x208>)
 8001f0c:	601a      	str	r2, [r3, #0]
    		//Data[0].Responce_Time_millis=TIM2->CNT;
    		switch (flagStartData){
 8001f0e:	4b66      	ldr	r3, [pc, #408]	; (80020a8 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d100      	bne.n	8001f18 <HAL_TIM_PeriodElapsedCallback+0x64>
 8001f16:	e084      	b.n	8002022 <HAL_TIM_PeriodElapsedCallback+0x16e>
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d000      	beq.n	8001f1e <HAL_TIM_PeriodElapsedCallback+0x6a>
					TxData0[6]=0x00;
					TxData0[7]=0x00;
					HAL_CAN_AddTxMessage(&hcan,&TxHeader,TxData0,&TxMailbox);//INVIO TERZO MESSAGGIO SOLO INIZIO E FINE
					break;
    			}
    			default:break;
 8001f1c:	e0bb      	b.n	8002096 <HAL_TIM_PeriodElapsedCallback+0x1e2>
					HAL_TIM_Base_Stop(&htim1);
 8001f1e:	4b66      	ldr	r3, [pc, #408]	; (80020b8 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8001f20:	0018      	movs	r0, r3
 8001f22:	f003 fcd9 	bl	80058d8 <HAL_TIM_Base_Stop>
					TxHeader.StdId=(ID)|FIR_P;
 8001f26:	4b66      	ldr	r3, [pc, #408]	; (80020c0 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	001a      	movs	r2, r3
 8001f2c:	4b65      	ldr	r3, [pc, #404]	; (80020c4 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8001f2e:	601a      	str	r2, [r3, #0]
					TxData0[0]=(int8_t)(timer  & 0x000000FF);
 8001f30:	4b62      	ldr	r3, [pc, #392]	; (80020bc <HAL_TIM_PeriodElapsedCallback+0x208>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	b2da      	uxtb	r2, r3
 8001f36:	4b64      	ldr	r3, [pc, #400]	; (80020c8 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8001f38:	701a      	strb	r2, [r3, #0]
					TxData0[1]=(int8_t)((timer & 0x0000FF00)>>8);
 8001f3a:	4b60      	ldr	r3, [pc, #384]	; (80020bc <HAL_TIM_PeriodElapsedCallback+0x208>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	0a1b      	lsrs	r3, r3, #8
 8001f40:	b2da      	uxtb	r2, r3
 8001f42:	4b61      	ldr	r3, [pc, #388]	; (80020c8 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8001f44:	705a      	strb	r2, [r3, #1]
					TxData0[2]=(int8_t)((timer & 0x00FF0000)>>16);
 8001f46:	4b5d      	ldr	r3, [pc, #372]	; (80020bc <HAL_TIM_PeriodElapsedCallback+0x208>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	0c1b      	lsrs	r3, r3, #16
 8001f4c:	b2da      	uxtb	r2, r3
 8001f4e:	4b5e      	ldr	r3, [pc, #376]	; (80020c8 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8001f50:	709a      	strb	r2, [r3, #2]
					TxData0[3]=(int8_t)(Data[0].Gir_x & 0x00FF);
 8001f52:	4b5e      	ldr	r3, [pc, #376]	; (80020cc <HAL_TIM_PeriodElapsedCallback+0x218>)
 8001f54:	2206      	movs	r2, #6
 8001f56:	5e9b      	ldrsh	r3, [r3, r2]
 8001f58:	b2da      	uxtb	r2, r3
 8001f5a:	4b5b      	ldr	r3, [pc, #364]	; (80020c8 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8001f5c:	70da      	strb	r2, [r3, #3]
					TxData0[4]=(int8_t)((Data[0].Gir_x & 0xFF00 )>> 8);
 8001f5e:	4b5b      	ldr	r3, [pc, #364]	; (80020cc <HAL_TIM_PeriodElapsedCallback+0x218>)
 8001f60:	2206      	movs	r2, #6
 8001f62:	5e9b      	ldrsh	r3, [r3, r2]
 8001f64:	121b      	asrs	r3, r3, #8
 8001f66:	b2da      	uxtb	r2, r3
 8001f68:	4b57      	ldr	r3, [pc, #348]	; (80020c8 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8001f6a:	711a      	strb	r2, [r3, #4]
					TxData0[5]=(int8_t)(Data[0].Gir_y  & 0x00FF);
 8001f6c:	4b57      	ldr	r3, [pc, #348]	; (80020cc <HAL_TIM_PeriodElapsedCallback+0x218>)
 8001f6e:	2208      	movs	r2, #8
 8001f70:	5e9b      	ldrsh	r3, [r3, r2]
 8001f72:	b2da      	uxtb	r2, r3
 8001f74:	4b54      	ldr	r3, [pc, #336]	; (80020c8 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8001f76:	715a      	strb	r2, [r3, #5]
					TxData0[6]=(int8_t)((Data[0].Gir_y & 0xFF00 )>> 8);
 8001f78:	4b54      	ldr	r3, [pc, #336]	; (80020cc <HAL_TIM_PeriodElapsedCallback+0x218>)
 8001f7a:	2208      	movs	r2, #8
 8001f7c:	5e9b      	ldrsh	r3, [r3, r2]
 8001f7e:	121b      	asrs	r3, r3, #8
 8001f80:	b2da      	uxtb	r2, r3
 8001f82:	4b51      	ldr	r3, [pc, #324]	; (80020c8 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8001f84:	719a      	strb	r2, [r3, #6]
					TxData0[7]=Err;
 8001f86:	4b52      	ldr	r3, [pc, #328]	; (80020d0 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8001f88:	781a      	ldrb	r2, [r3, #0]
 8001f8a:	4b4f      	ldr	r3, [pc, #316]	; (80020c8 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8001f8c:	71da      	strb	r2, [r3, #7]
					HAL_CAN_AddTxMessage(&hcan,&TxHeader,TxData0,&TxMailbox);//INVIO PRIMO MESSAGGIO
 8001f8e:	4b51      	ldr	r3, [pc, #324]	; (80020d4 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8001f90:	4a4d      	ldr	r2, [pc, #308]	; (80020c8 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8001f92:	494c      	ldr	r1, [pc, #304]	; (80020c4 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8001f94:	4850      	ldr	r0, [pc, #320]	; (80020d8 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8001f96:	f000 fe55 	bl	8002c44 <HAL_CAN_AddTxMessage>
					TxHeader.StdId=(ID)|SEC_P;
 8001f9a:	4b49      	ldr	r3, [pc, #292]	; (80020c0 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	001a      	movs	r2, r3
 8001fa0:	2380      	movs	r3, #128	; 0x80
 8001fa2:	005b      	lsls	r3, r3, #1
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	001a      	movs	r2, r3
 8001fa8:	4b46      	ldr	r3, [pc, #280]	; (80020c4 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8001faa:	601a      	str	r2, [r3, #0]
					TxData0[0]=(int8_t)(Data[0].Acc_x & 0x00FF);
 8001fac:	4b47      	ldr	r3, [pc, #284]	; (80020cc <HAL_TIM_PeriodElapsedCallback+0x218>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	5e9b      	ldrsh	r3, [r3, r2]
 8001fb2:	b2da      	uxtb	r2, r3
 8001fb4:	4b44      	ldr	r3, [pc, #272]	; (80020c8 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8001fb6:	701a      	strb	r2, [r3, #0]
					TxData0[1]=(int8_t)((Data[0].Acc_x & 0xFF00 )>> 8);
 8001fb8:	4b44      	ldr	r3, [pc, #272]	; (80020cc <HAL_TIM_PeriodElapsedCallback+0x218>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	5e9b      	ldrsh	r3, [r3, r2]
 8001fbe:	121b      	asrs	r3, r3, #8
 8001fc0:	b2da      	uxtb	r2, r3
 8001fc2:	4b41      	ldr	r3, [pc, #260]	; (80020c8 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8001fc4:	705a      	strb	r2, [r3, #1]
					TxData0[2]=(int8_t)(Data[0].Acc_y & 0x00FF);
 8001fc6:	4b41      	ldr	r3, [pc, #260]	; (80020cc <HAL_TIM_PeriodElapsedCallback+0x218>)
 8001fc8:	2202      	movs	r2, #2
 8001fca:	5e9b      	ldrsh	r3, [r3, r2]
 8001fcc:	b2da      	uxtb	r2, r3
 8001fce:	4b3e      	ldr	r3, [pc, #248]	; (80020c8 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8001fd0:	709a      	strb	r2, [r3, #2]
					TxData0[3]=(int8_t)((Data[0].Acc_y & 0xFF00 )>> 8);
 8001fd2:	4b3e      	ldr	r3, [pc, #248]	; (80020cc <HAL_TIM_PeriodElapsedCallback+0x218>)
 8001fd4:	2202      	movs	r2, #2
 8001fd6:	5e9b      	ldrsh	r3, [r3, r2]
 8001fd8:	121b      	asrs	r3, r3, #8
 8001fda:	b2da      	uxtb	r2, r3
 8001fdc:	4b3a      	ldr	r3, [pc, #232]	; (80020c8 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8001fde:	70da      	strb	r2, [r3, #3]
					TxData0[4]=(int8_t)(Data[0].Acc_z & 0x00FF);
 8001fe0:	4b3a      	ldr	r3, [pc, #232]	; (80020cc <HAL_TIM_PeriodElapsedCallback+0x218>)
 8001fe2:	2204      	movs	r2, #4
 8001fe4:	5e9b      	ldrsh	r3, [r3, r2]
 8001fe6:	b2da      	uxtb	r2, r3
 8001fe8:	4b37      	ldr	r3, [pc, #220]	; (80020c8 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8001fea:	711a      	strb	r2, [r3, #4]
					TxData0[5]=(int8_t)((Data[0].Acc_z & 0xFF00 )>> 8);
 8001fec:	4b37      	ldr	r3, [pc, #220]	; (80020cc <HAL_TIM_PeriodElapsedCallback+0x218>)
 8001fee:	2204      	movs	r2, #4
 8001ff0:	5e9b      	ldrsh	r3, [r3, r2]
 8001ff2:	121b      	asrs	r3, r3, #8
 8001ff4:	b2da      	uxtb	r2, r3
 8001ff6:	4b34      	ldr	r3, [pc, #208]	; (80020c8 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8001ff8:	715a      	strb	r2, [r3, #5]
					TxData0[6]=(int8_t)(Data[0].T_b & 0x00FF);
 8001ffa:	4b34      	ldr	r3, [pc, #208]	; (80020cc <HAL_TIM_PeriodElapsedCallback+0x218>)
 8001ffc:	220e      	movs	r2, #14
 8001ffe:	5e9b      	ldrsh	r3, [r3, r2]
 8002000:	b2da      	uxtb	r2, r3
 8002002:	4b31      	ldr	r3, [pc, #196]	; (80020c8 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8002004:	719a      	strb	r2, [r3, #6]
					TxData0[7]=(int8_t)((Data[0].T_b & 0xFF00 )>> 8);
 8002006:	4b31      	ldr	r3, [pc, #196]	; (80020cc <HAL_TIM_PeriodElapsedCallback+0x218>)
 8002008:	220e      	movs	r2, #14
 800200a:	5e9b      	ldrsh	r3, [r3, r2]
 800200c:	121b      	asrs	r3, r3, #8
 800200e:	b2da      	uxtb	r2, r3
 8002010:	4b2d      	ldr	r3, [pc, #180]	; (80020c8 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8002012:	71da      	strb	r2, [r3, #7]
					HAL_CAN_AddTxMessage(&hcan,&TxHeader,TxData0,&TxMailbox);//IONVIO SECONDO MESSAGGIO
 8002014:	4b2f      	ldr	r3, [pc, #188]	; (80020d4 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8002016:	4a2c      	ldr	r2, [pc, #176]	; (80020c8 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8002018:	492a      	ldr	r1, [pc, #168]	; (80020c4 <HAL_TIM_PeriodElapsedCallback+0x210>)
 800201a:	482f      	ldr	r0, [pc, #188]	; (80020d8 <HAL_TIM_PeriodElapsedCallback+0x224>)
 800201c:	f000 fe12 	bl	8002c44 <HAL_CAN_AddTxMessage>
					break;
 8002020:	e039      	b.n	8002096 <HAL_TIM_PeriodElapsedCallback+0x1e2>
					TxHeader.StdId=(ID)|THI_P;
 8002022:	4b27      	ldr	r3, [pc, #156]	; (80020c0 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	001a      	movs	r2, r3
 8002028:	23c0      	movs	r3, #192	; 0xc0
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	4313      	orrs	r3, r2
 800202e:	001a      	movs	r2, r3
 8002030:	4b24      	ldr	r3, [pc, #144]	; (80020c4 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8002032:	601a      	str	r2, [r3, #0]
					TxData0[0]=(int8_t)(Data[0].Pres  & 0x000000FF);
 8002034:	4b25      	ldr	r3, [pc, #148]	; (80020cc <HAL_TIM_PeriodElapsedCallback+0x218>)
 8002036:	691b      	ldr	r3, [r3, #16]
 8002038:	b2da      	uxtb	r2, r3
 800203a:	4b23      	ldr	r3, [pc, #140]	; (80020c8 <HAL_TIM_PeriodElapsedCallback+0x214>)
 800203c:	701a      	strb	r2, [r3, #0]
					TxData0[1]=(int8_t)((Data[0].Pres & 0x0000FF00)>>8);
 800203e:	4b23      	ldr	r3, [pc, #140]	; (80020cc <HAL_TIM_PeriodElapsedCallback+0x218>)
 8002040:	691b      	ldr	r3, [r3, #16]
 8002042:	0a1b      	lsrs	r3, r3, #8
 8002044:	b2da      	uxtb	r2, r3
 8002046:	4b20      	ldr	r3, [pc, #128]	; (80020c8 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8002048:	705a      	strb	r2, [r3, #1]
					TxData0[2]=(int8_t)((Data[0].Pres & 0x00FF0000)>>16);
 800204a:	4b20      	ldr	r3, [pc, #128]	; (80020cc <HAL_TIM_PeriodElapsedCallback+0x218>)
 800204c:	691b      	ldr	r3, [r3, #16]
 800204e:	0c1b      	lsrs	r3, r3, #16
 8002050:	b2da      	uxtb	r2, r3
 8002052:	4b1d      	ldr	r3, [pc, #116]	; (80020c8 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8002054:	709a      	strb	r2, [r3, #2]
					TxData0[3]=(int8_t)((Data[0].Pres & 0xFF000000)>>24);
 8002056:	4b1d      	ldr	r3, [pc, #116]	; (80020cc <HAL_TIM_PeriodElapsedCallback+0x218>)
 8002058:	691b      	ldr	r3, [r3, #16]
 800205a:	0e1b      	lsrs	r3, r3, #24
 800205c:	b2da      	uxtb	r2, r3
 800205e:	4b1a      	ldr	r3, [pc, #104]	; (80020c8 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8002060:	70da      	strb	r2, [r3, #3]
					TxData0[4]=(int8_t)(Data[0].Hum  & 0x000000FF);
 8002062:	4b1a      	ldr	r3, [pc, #104]	; (80020cc <HAL_TIM_PeriodElapsedCallback+0x218>)
 8002064:	8a9b      	ldrh	r3, [r3, #20]
 8002066:	b2da      	uxtb	r2, r3
 8002068:	4b17      	ldr	r3, [pc, #92]	; (80020c8 <HAL_TIM_PeriodElapsedCallback+0x214>)
 800206a:	711a      	strb	r2, [r3, #4]
					TxData0[5]=(int8_t)((Data[0].Hum & 0x0000FF00)>>8);
 800206c:	4b17      	ldr	r3, [pc, #92]	; (80020cc <HAL_TIM_PeriodElapsedCallback+0x218>)
 800206e:	8a9b      	ldrh	r3, [r3, #20]
 8002070:	0a1b      	lsrs	r3, r3, #8
 8002072:	b29b      	uxth	r3, r3
 8002074:	b2da      	uxtb	r2, r3
 8002076:	4b14      	ldr	r3, [pc, #80]	; (80020c8 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8002078:	715a      	strb	r2, [r3, #5]
					TxData0[6]=0x00;
 800207a:	4b13      	ldr	r3, [pc, #76]	; (80020c8 <HAL_TIM_PeriodElapsedCallback+0x214>)
 800207c:	2200      	movs	r2, #0
 800207e:	719a      	strb	r2, [r3, #6]
					TxData0[7]=0x00;
 8002080:	4b11      	ldr	r3, [pc, #68]	; (80020c8 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8002082:	2200      	movs	r2, #0
 8002084:	71da      	strb	r2, [r3, #7]
					HAL_CAN_AddTxMessage(&hcan,&TxHeader,TxData0,&TxMailbox);//INVIO TERZO MESSAGGIO SOLO INIZIO E FINE
 8002086:	4b13      	ldr	r3, [pc, #76]	; (80020d4 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8002088:	4a0f      	ldr	r2, [pc, #60]	; (80020c8 <HAL_TIM_PeriodElapsedCallback+0x214>)
 800208a:	490e      	ldr	r1, [pc, #56]	; (80020c4 <HAL_TIM_PeriodElapsedCallback+0x210>)
 800208c:	4812      	ldr	r0, [pc, #72]	; (80020d8 <HAL_TIM_PeriodElapsedCallback+0x224>)
 800208e:	f000 fdd9 	bl	8002c44 <HAL_CAN_AddTxMessage>
					break;
 8002092:	e000      	b.n	8002096 <HAL_TIM_PeriodElapsedCallback+0x1e2>
    			}
     }
 8002094:	46c0      	nop			; (mov r8, r8)


}
 8002096:	46c0      	nop			; (mov r8, r8)
 8002098:	46bd      	mov	sp, r7
 800209a:	b002      	add	sp, #8
 800209c:	bd80      	pop	{r7, pc}
 800209e:	46c0      	nop			; (mov r8, r8)
 80020a0:	40014400 	.word	0x40014400
 80020a4:	200002ac 	.word	0x200002ac
 80020a8:	2000004c 	.word	0x2000004c
 80020ac:	40000400 	.word	0x40000400
 80020b0:	40012c00 	.word	0x40012c00
 80020b4:	2000024c 	.word	0x2000024c
 80020b8:	200001a0 	.word	0x200001a0
 80020bc:	20000078 	.word	0x20000078
 80020c0:	2000004a 	.word	0x2000004a
 80020c4:	2000028c 	.word	0x2000028c
 80020c8:	200002a4 	.word	0x200002a4
 80020cc:	2000016c 	.word	0x2000016c
 80020d0:	20000028 	.word	0x20000028
 80020d4:	200001e0 	.word	0x200001e0
 80020d8:	200000f8 	.word	0x200000f8

080020dc <get_data>:
uint8_t get_data(){
 80020dc:	b580      	push	{r7, lr}
 80020de:	af00      	add	r7, sp, #0
	TIM2->CNT=0;
 80020e0:	2380      	movs	r3, #128	; 0x80
 80020e2:	05db      	lsls	r3, r3, #23
 80020e4:	2200      	movs	r2, #0
 80020e6:	625a      	str	r2, [r3, #36]	; 0x24
	//DECIDE CHE LETTURE ANDARE A FARE E PERMETTER DI LEGGERE I DATI NON ESSENZIALI SOLO ALL'INIZIO E ALLA FINE
	switch (flagStartData){
 80020e8:	4b63      	ldr	r3, [pc, #396]	; (8002278 <get_data+0x19c>)
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d069      	beq.n	80021c4 <get_data+0xe8>
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d000      	beq.n	80020f6 <get_data+0x1a>
				//if (humidity_perc < 0) humidity_perc = 0;
				//if (humidity_perc > 100) humidity_perc = 100;
				}
			break;
    	}
    	default:break;
 80020f4:	e0b5      	b.n	8002262 <get_data+0x186>
			iis3dhhc_status_get(&dev_ctx_acc, &reg_acc.status);
 80020f6:	4a61      	ldr	r2, [pc, #388]	; (800227c <get_data+0x1a0>)
 80020f8:	4b61      	ldr	r3, [pc, #388]	; (8002280 <get_data+0x1a4>)
 80020fa:	0011      	movs	r1, r2
 80020fc:	0018      	movs	r0, r3
 80020fe:	f7fe fc8e 	bl	8000a1e <iis3dhhc_status_get>
			if (reg_acc.status.zyxda){
 8002102:	4b5e      	ldr	r3, [pc, #376]	; (800227c <get_data+0x1a0>)
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	2208      	movs	r2, #8
 8002108:	4013      	ands	r3, r2
 800210a:	b2db      	uxtb	r3, r3
 800210c:	2b00      	cmp	r3, #0
 800210e:	d01a      	beq.n	8002146 <get_data+0x6a>
				memset(data_raw_acceleration.u8bit, 0x00, 3*sizeof(int16_t));
 8002110:	4b5c      	ldr	r3, [pc, #368]	; (8002284 <get_data+0x1a8>)
 8002112:	2206      	movs	r2, #6
 8002114:	2100      	movs	r1, #0
 8002116:	0018      	movs	r0, r3
 8002118:	f003 ffe4 	bl	80060e4 <memset>
				iis3dhhc_acceleration_raw_get(&dev_ctx_acc, data_raw_acceleration.u8bit);
 800211c:	4a59      	ldr	r2, [pc, #356]	; (8002284 <get_data+0x1a8>)
 800211e:	4b58      	ldr	r3, [pc, #352]	; (8002280 <get_data+0x1a4>)
 8002120:	0011      	movs	r1, r2
 8002122:	0018      	movs	r0, r3
 8002124:	f7fe fbdc 	bl	80008e0 <iis3dhhc_acceleration_raw_get>
				Data[0].Acc_x=data_raw_acceleration.i16bit[0];
 8002128:	4b56      	ldr	r3, [pc, #344]	; (8002284 <get_data+0x1a8>)
 800212a:	2200      	movs	r2, #0
 800212c:	5e9a      	ldrsh	r2, [r3, r2]
 800212e:	4b56      	ldr	r3, [pc, #344]	; (8002288 <get_data+0x1ac>)
 8002130:	801a      	strh	r2, [r3, #0]
				Data[0].Acc_y=data_raw_acceleration.i16bit[1];
 8002132:	4b54      	ldr	r3, [pc, #336]	; (8002284 <get_data+0x1a8>)
 8002134:	2202      	movs	r2, #2
 8002136:	5e9a      	ldrsh	r2, [r3, r2]
 8002138:	4b53      	ldr	r3, [pc, #332]	; (8002288 <get_data+0x1ac>)
 800213a:	805a      	strh	r2, [r3, #2]
				Data[0].Acc_z=data_raw_acceleration.i16bit[2];
 800213c:	4b51      	ldr	r3, [pc, #324]	; (8002284 <get_data+0x1a8>)
 800213e:	2204      	movs	r2, #4
 8002140:	5e9a      	ldrsh	r2, [r3, r2]
 8002142:	4b51      	ldr	r3, [pc, #324]	; (8002288 <get_data+0x1ac>)
 8002144:	809a      	strh	r2, [r3, #4]
			l2g2is_dev_status_get(&dev_ctx_gir, &reg_gir);
 8002146:	4a51      	ldr	r2, [pc, #324]	; (800228c <get_data+0x1b0>)
 8002148:	4b51      	ldr	r3, [pc, #324]	; (8002290 <get_data+0x1b4>)
 800214a:	0011      	movs	r1, r2
 800214c:	0018      	movs	r0, r3
 800214e:	f7fe fd88 	bl	8000c62 <l2g2is_dev_status_get>
			if ( reg_gir.xyda ){
 8002152:	4b4e      	ldr	r3, [pc, #312]	; (800228c <get_data+0x1b0>)
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	2201      	movs	r2, #1
 8002158:	4013      	ands	r3, r2
 800215a:	b2db      	uxtb	r3, r3
 800215c:	2b00      	cmp	r3, #0
 800215e:	d015      	beq.n	800218c <get_data+0xb0>
				memset(data_raw_angular_rate.u8bit, 0x00, 2 * sizeof(int16_t));
 8002160:	4b4c      	ldr	r3, [pc, #304]	; (8002294 <get_data+0x1b8>)
 8002162:	2204      	movs	r2, #4
 8002164:	2100      	movs	r1, #0
 8002166:	0018      	movs	r0, r3
 8002168:	f003 ffbc 	bl	80060e4 <memset>
				l2g2is_angular_rate_raw_get(&dev_ctx_gir, data_raw_angular_rate.u8bit);
 800216c:	4a49      	ldr	r2, [pc, #292]	; (8002294 <get_data+0x1b8>)
 800216e:	4b48      	ldr	r3, [pc, #288]	; (8002290 <get_data+0x1b4>)
 8002170:	0011      	movs	r1, r2
 8002172:	0018      	movs	r0, r3
 8002174:	f7fe fd51 	bl	8000c1a <l2g2is_angular_rate_raw_get>
				Data[0].Gir_x=data_raw_angular_rate.i16bit[0];
 8002178:	4b46      	ldr	r3, [pc, #280]	; (8002294 <get_data+0x1b8>)
 800217a:	2200      	movs	r2, #0
 800217c:	5e9a      	ldrsh	r2, [r3, r2]
 800217e:	4b42      	ldr	r3, [pc, #264]	; (8002288 <get_data+0x1ac>)
 8002180:	80da      	strh	r2, [r3, #6]
				Data[0].Gir_y=data_raw_angular_rate.i16bit[1];
 8002182:	4b44      	ldr	r3, [pc, #272]	; (8002294 <get_data+0x1b8>)
 8002184:	2202      	movs	r2, #2
 8002186:	5e9a      	ldrsh	r2, [r3, r2]
 8002188:	4b3f      	ldr	r3, [pc, #252]	; (8002288 <get_data+0x1ac>)
 800218a:	811a      	strh	r2, [r3, #8]
			lps22hb_press_data_ready_get(&dev_ctx_bar, &reg_bar);
 800218c:	4a42      	ldr	r2, [pc, #264]	; (8002298 <get_data+0x1bc>)
 800218e:	4b43      	ldr	r3, [pc, #268]	; (800229c <get_data+0x1c0>)
 8002190:	0011      	movs	r1, r2
 8002192:	0018      	movs	r0, r3
 8002194:	f7fe fe78 	bl	8000e88 <lps22hb_press_data_ready_get>
			if (reg_bar){
 8002198:	4b3f      	ldr	r3, [pc, #252]	; (8002298 <get_data+0x1bc>)
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d05d      	beq.n	800225c <get_data+0x180>
				memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
 80021a0:	4b3f      	ldr	r3, [pc, #252]	; (80022a0 <get_data+0x1c4>)
 80021a2:	2202      	movs	r2, #2
 80021a4:	2100      	movs	r1, #0
 80021a6:	0018      	movs	r0, r3
 80021a8:	f003 ff9c 	bl	80060e4 <memset>
				lps22hb_temperature_raw_get(&dev_ctx_bar, data_raw_temperature.u8bit);
 80021ac:	4a3c      	ldr	r2, [pc, #240]	; (80022a0 <get_data+0x1c4>)
 80021ae:	4b3b      	ldr	r3, [pc, #236]	; (800229c <get_data+0x1c0>)
 80021b0:	0011      	movs	r1, r2
 80021b2:	0018      	movs	r0, r3
 80021b4:	f7fe fe95 	bl	8000ee2 <lps22hb_temperature_raw_get>
				Data[0].T_b=data_raw_temperature.i16bit;
 80021b8:	4b39      	ldr	r3, [pc, #228]	; (80022a0 <get_data+0x1c4>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	5e9a      	ldrsh	r2, [r3, r2]
 80021be:	4b32      	ldr	r3, [pc, #200]	; (8002288 <get_data+0x1ac>)
 80021c0:	81da      	strh	r2, [r3, #14]
			break;
 80021c2:	e04b      	b.n	800225c <get_data+0x180>
			lps22hb_press_data_ready_get(&dev_ctx_bar, &reg_bar);
 80021c4:	4a34      	ldr	r2, [pc, #208]	; (8002298 <get_data+0x1bc>)
 80021c6:	4b35      	ldr	r3, [pc, #212]	; (800229c <get_data+0x1c0>)
 80021c8:	0011      	movs	r1, r2
 80021ca:	0018      	movs	r0, r3
 80021cc:	f7fe fe5c 	bl	8000e88 <lps22hb_press_data_ready_get>
			if (reg_bar){
 80021d0:	4b31      	ldr	r3, [pc, #196]	; (8002298 <get_data+0x1bc>)
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d021      	beq.n	800221c <get_data+0x140>
				memset(data_raw_pressure.u8bit, 0x00, sizeof(int32_t));
 80021d8:	4b32      	ldr	r3, [pc, #200]	; (80022a4 <get_data+0x1c8>)
 80021da:	2204      	movs	r2, #4
 80021dc:	2100      	movs	r1, #0
 80021de:	0018      	movs	r0, r3
 80021e0:	f003 ff80 	bl	80060e4 <memset>
				lps22hb_pressure_raw_get(&dev_ctx_bar, data_raw_pressure.u8bit);
 80021e4:	4a2f      	ldr	r2, [pc, #188]	; (80022a4 <get_data+0x1c8>)
 80021e6:	4b2d      	ldr	r3, [pc, #180]	; (800229c <get_data+0x1c0>)
 80021e8:	0011      	movs	r1, r2
 80021ea:	0018      	movs	r0, r3
 80021ec:	f7fe fe67 	bl	8000ebe <lps22hb_pressure_raw_get>
				Data[0].Pres=data_raw_pressure.i32bit;
 80021f0:	4b2c      	ldr	r3, [pc, #176]	; (80022a4 <get_data+0x1c8>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	001a      	movs	r2, r3
 80021f6:	4b24      	ldr	r3, [pc, #144]	; (8002288 <get_data+0x1ac>)
 80021f8:	611a      	str	r2, [r3, #16]
				memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
 80021fa:	4b29      	ldr	r3, [pc, #164]	; (80022a0 <get_data+0x1c4>)
 80021fc:	2202      	movs	r2, #2
 80021fe:	2100      	movs	r1, #0
 8002200:	0018      	movs	r0, r3
 8002202:	f003 ff6f 	bl	80060e4 <memset>
				lps22hb_temperature_raw_get(&dev_ctx_bar, data_raw_temperature.u8bit);
 8002206:	4a26      	ldr	r2, [pc, #152]	; (80022a0 <get_data+0x1c4>)
 8002208:	4b24      	ldr	r3, [pc, #144]	; (800229c <get_data+0x1c0>)
 800220a:	0011      	movs	r1, r2
 800220c:	0018      	movs	r0, r3
 800220e:	f7fe fe68 	bl	8000ee2 <lps22hb_temperature_raw_get>
				Data[0].T_b=data_raw_temperature.i16bit;
 8002212:	4b23      	ldr	r3, [pc, #140]	; (80022a0 <get_data+0x1c4>)
 8002214:	2200      	movs	r2, #0
 8002216:	5e9a      	ldrsh	r2, [r3, r2]
 8002218:	4b1b      	ldr	r3, [pc, #108]	; (8002288 <get_data+0x1ac>)
 800221a:	81da      	strh	r2, [r3, #14]
			hts221_status_get(&dev_ctx_hum, &reg_hum.status_reg);
 800221c:	4a22      	ldr	r2, [pc, #136]	; (80022a8 <get_data+0x1cc>)
 800221e:	4b23      	ldr	r3, [pc, #140]	; (80022ac <get_data+0x1d0>)
 8002220:	0011      	movs	r1, r2
 8002222:	0018      	movs	r0, r3
 8002224:	f7fe f99b 	bl	800055e <hts221_status_get>
			if (reg_hum.status_reg.h_da)
 8002228:	4b1f      	ldr	r3, [pc, #124]	; (80022a8 <get_data+0x1cc>)
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	2202      	movs	r2, #2
 800222e:	4013      	ands	r3, r2
 8002230:	b2db      	uxtb	r3, r3
 8002232:	2b00      	cmp	r3, #0
 8002234:	d014      	beq.n	8002260 <get_data+0x184>
				memset(data_raw_humidity.u8bit, 0x00, sizeof(int16_t));
 8002236:	4b1e      	ldr	r3, [pc, #120]	; (80022b0 <get_data+0x1d4>)
 8002238:	2202      	movs	r2, #2
 800223a:	2100      	movs	r1, #0
 800223c:	0018      	movs	r0, r3
 800223e:	f003 ff51 	bl	80060e4 <memset>
				hts221_humidity_raw_get(&dev_ctx_hum, data_raw_humidity.u8bit);
 8002242:	4a1b      	ldr	r2, [pc, #108]	; (80022b0 <get_data+0x1d4>)
 8002244:	4b19      	ldr	r3, [pc, #100]	; (80022ac <get_data+0x1d0>)
 8002246:	0011      	movs	r1, r2
 8002248:	0018      	movs	r0, r3
 800224a:	f7fe f935 	bl	80004b8 <hts221_humidity_raw_get>
				Data[0].Hum= data_raw_humidity.i16bit;
 800224e:	4b18      	ldr	r3, [pc, #96]	; (80022b0 <get_data+0x1d4>)
 8002250:	2200      	movs	r2, #0
 8002252:	5e9b      	ldrsh	r3, [r3, r2]
 8002254:	b29a      	uxth	r2, r3
 8002256:	4b0c      	ldr	r3, [pc, #48]	; (8002288 <get_data+0x1ac>)
 8002258:	829a      	strh	r2, [r3, #20]
			break;
 800225a:	e001      	b.n	8002260 <get_data+0x184>
			break;
 800225c:	46c0      	nop			; (mov r8, r8)
 800225e:	e000      	b.n	8002262 <get_data+0x186>
			break;
 8002260:	46c0      	nop			; (mov r8, r8)
	}
	Data[0].Responce_Time_millis=TIM2->CNT;
 8002262:	2380      	movs	r3, #128	; 0x80
 8002264:	05db      	lsls	r3, r3, #23
 8002266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002268:	b29a      	uxth	r2, r3
 800226a:	4b07      	ldr	r3, [pc, #28]	; (8002288 <get_data+0x1ac>)
 800226c:	82da      	strh	r2, [r3, #22]





}
 800226e:	46c0      	nop			; (mov r8, r8)
 8002270:	0018      	movs	r0, r3
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	46c0      	nop			; (mov r8, r8)
 8002278:	2000004c 	.word	0x2000004c
 800227c:	2000019c 	.word	0x2000019c
 8002280:	200000ec 	.word	0x200000ec
 8002284:	2000002c 	.word	0x2000002c
 8002288:	2000016c 	.word	0x2000016c
 800228c:	20000040 	.word	0x20000040
 8002290:	200002ec 	.word	0x200002ec
 8002294:	20000034 	.word	0x20000034
 8002298:	200000e8 	.word	0x200000e8
 800229c:	200000dc 	.word	0x200000dc
 80022a0:	2000003c 	.word	0x2000003c
 80022a4:	20000044 	.word	0x20000044
 80022a8:	2000007c 	.word	0x2000007c
 80022ac:	200000d0 	.word	0x200000d0
 80022b0:	20000048 	.word	0x20000048

080022b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80022b8:	46c0      	nop			; (mov r8, r8)
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
	...

080022c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022c6:	4b0f      	ldr	r3, [pc, #60]	; (8002304 <HAL_MspInit+0x44>)
 80022c8:	699a      	ldr	r2, [r3, #24]
 80022ca:	4b0e      	ldr	r3, [pc, #56]	; (8002304 <HAL_MspInit+0x44>)
 80022cc:	2101      	movs	r1, #1
 80022ce:	430a      	orrs	r2, r1
 80022d0:	619a      	str	r2, [r3, #24]
 80022d2:	4b0c      	ldr	r3, [pc, #48]	; (8002304 <HAL_MspInit+0x44>)
 80022d4:	699b      	ldr	r3, [r3, #24]
 80022d6:	2201      	movs	r2, #1
 80022d8:	4013      	ands	r3, r2
 80022da:	607b      	str	r3, [r7, #4]
 80022dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022de:	4b09      	ldr	r3, [pc, #36]	; (8002304 <HAL_MspInit+0x44>)
 80022e0:	69da      	ldr	r2, [r3, #28]
 80022e2:	4b08      	ldr	r3, [pc, #32]	; (8002304 <HAL_MspInit+0x44>)
 80022e4:	2180      	movs	r1, #128	; 0x80
 80022e6:	0549      	lsls	r1, r1, #21
 80022e8:	430a      	orrs	r2, r1
 80022ea:	61da      	str	r2, [r3, #28]
 80022ec:	4b05      	ldr	r3, [pc, #20]	; (8002304 <HAL_MspInit+0x44>)
 80022ee:	69da      	ldr	r2, [r3, #28]
 80022f0:	2380      	movs	r3, #128	; 0x80
 80022f2:	055b      	lsls	r3, r3, #21
 80022f4:	4013      	ands	r3, r2
 80022f6:	603b      	str	r3, [r7, #0]
 80022f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022fa:	46c0      	nop			; (mov r8, r8)
 80022fc:	46bd      	mov	sp, r7
 80022fe:	b002      	add	sp, #8
 8002300:	bd80      	pop	{r7, pc}
 8002302:	46c0      	nop			; (mov r8, r8)
 8002304:	40021000 	.word	0x40021000

08002308 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b08a      	sub	sp, #40	; 0x28
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002310:	2314      	movs	r3, #20
 8002312:	18fb      	adds	r3, r7, r3
 8002314:	0018      	movs	r0, r3
 8002316:	2314      	movs	r3, #20
 8002318:	001a      	movs	r2, r3
 800231a:	2100      	movs	r1, #0
 800231c:	f003 fee2 	bl	80060e4 <memset>
  if(hcan->Instance==CAN)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a1d      	ldr	r2, [pc, #116]	; (800239c <HAL_CAN_MspInit+0x94>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d133      	bne.n	8002392 <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800232a:	4b1d      	ldr	r3, [pc, #116]	; (80023a0 <HAL_CAN_MspInit+0x98>)
 800232c:	69da      	ldr	r2, [r3, #28]
 800232e:	4b1c      	ldr	r3, [pc, #112]	; (80023a0 <HAL_CAN_MspInit+0x98>)
 8002330:	2180      	movs	r1, #128	; 0x80
 8002332:	0489      	lsls	r1, r1, #18
 8002334:	430a      	orrs	r2, r1
 8002336:	61da      	str	r2, [r3, #28]
 8002338:	4b19      	ldr	r3, [pc, #100]	; (80023a0 <HAL_CAN_MspInit+0x98>)
 800233a:	69da      	ldr	r2, [r3, #28]
 800233c:	2380      	movs	r3, #128	; 0x80
 800233e:	049b      	lsls	r3, r3, #18
 8002340:	4013      	ands	r3, r2
 8002342:	613b      	str	r3, [r7, #16]
 8002344:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002346:	4b16      	ldr	r3, [pc, #88]	; (80023a0 <HAL_CAN_MspInit+0x98>)
 8002348:	695a      	ldr	r2, [r3, #20]
 800234a:	4b15      	ldr	r3, [pc, #84]	; (80023a0 <HAL_CAN_MspInit+0x98>)
 800234c:	2180      	movs	r1, #128	; 0x80
 800234e:	0289      	lsls	r1, r1, #10
 8002350:	430a      	orrs	r2, r1
 8002352:	615a      	str	r2, [r3, #20]
 8002354:	4b12      	ldr	r3, [pc, #72]	; (80023a0 <HAL_CAN_MspInit+0x98>)
 8002356:	695a      	ldr	r2, [r3, #20]
 8002358:	2380      	movs	r3, #128	; 0x80
 800235a:	029b      	lsls	r3, r3, #10
 800235c:	4013      	ands	r3, r2
 800235e:	60fb      	str	r3, [r7, #12]
 8002360:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration    
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002362:	2114      	movs	r1, #20
 8002364:	187b      	adds	r3, r7, r1
 8002366:	22c0      	movs	r2, #192	; 0xc0
 8002368:	0152      	lsls	r2, r2, #5
 800236a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800236c:	187b      	adds	r3, r7, r1
 800236e:	2202      	movs	r2, #2
 8002370:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002372:	187b      	adds	r3, r7, r1
 8002374:	2200      	movs	r2, #0
 8002376:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002378:	187b      	adds	r3, r7, r1
 800237a:	2203      	movs	r2, #3
 800237c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 800237e:	187b      	adds	r3, r7, r1
 8002380:	2204      	movs	r2, #4
 8002382:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002384:	187a      	adds	r2, r7, r1
 8002386:	2390      	movs	r3, #144	; 0x90
 8002388:	05db      	lsls	r3, r3, #23
 800238a:	0011      	movs	r1, r2
 800238c:	0018      	movs	r0, r3
 800238e:	f000 fe17 	bl	8002fc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8002392:	46c0      	nop			; (mov r8, r8)
 8002394:	46bd      	mov	sp, r7
 8002396:	b00a      	add	sp, #40	; 0x28
 8002398:	bd80      	pop	{r7, pc}
 800239a:	46c0      	nop			; (mov r8, r8)
 800239c:	40006400 	.word	0x40006400
 80023a0:	40021000 	.word	0x40021000

080023a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b08a      	sub	sp, #40	; 0x28
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023ac:	2314      	movs	r3, #20
 80023ae:	18fb      	adds	r3, r7, r3
 80023b0:	0018      	movs	r0, r3
 80023b2:	2314      	movs	r3, #20
 80023b4:	001a      	movs	r2, r3
 80023b6:	2100      	movs	r1, #0
 80023b8:	f003 fe94 	bl	80060e4 <memset>
  if(hi2c->Instance==I2C1)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a1c      	ldr	r2, [pc, #112]	; (8002434 <HAL_I2C_MspInit+0x90>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d132      	bne.n	800242c <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023c6:	4b1c      	ldr	r3, [pc, #112]	; (8002438 <HAL_I2C_MspInit+0x94>)
 80023c8:	695a      	ldr	r2, [r3, #20]
 80023ca:	4b1b      	ldr	r3, [pc, #108]	; (8002438 <HAL_I2C_MspInit+0x94>)
 80023cc:	2180      	movs	r1, #128	; 0x80
 80023ce:	02c9      	lsls	r1, r1, #11
 80023d0:	430a      	orrs	r2, r1
 80023d2:	615a      	str	r2, [r3, #20]
 80023d4:	4b18      	ldr	r3, [pc, #96]	; (8002438 <HAL_I2C_MspInit+0x94>)
 80023d6:	695a      	ldr	r2, [r3, #20]
 80023d8:	2380      	movs	r3, #128	; 0x80
 80023da:	02db      	lsls	r3, r3, #11
 80023dc:	4013      	ands	r3, r2
 80023de:	613b      	str	r3, [r7, #16]
 80023e0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB10     ------> I2C1_SCL
    PB11     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80023e2:	2114      	movs	r1, #20
 80023e4:	187b      	adds	r3, r7, r1
 80023e6:	22c0      	movs	r2, #192	; 0xc0
 80023e8:	0112      	lsls	r2, r2, #4
 80023ea:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023ec:	187b      	adds	r3, r7, r1
 80023ee:	2212      	movs	r2, #18
 80023f0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023f2:	187b      	adds	r3, r7, r1
 80023f4:	2201      	movs	r2, #1
 80023f6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023f8:	187b      	adds	r3, r7, r1
 80023fa:	2203      	movs	r2, #3
 80023fc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80023fe:	187b      	adds	r3, r7, r1
 8002400:	2201      	movs	r2, #1
 8002402:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002404:	187b      	adds	r3, r7, r1
 8002406:	4a0d      	ldr	r2, [pc, #52]	; (800243c <HAL_I2C_MspInit+0x98>)
 8002408:	0019      	movs	r1, r3
 800240a:	0010      	movs	r0, r2
 800240c:	f000 fdd8 	bl	8002fc0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002410:	4b09      	ldr	r3, [pc, #36]	; (8002438 <HAL_I2C_MspInit+0x94>)
 8002412:	69da      	ldr	r2, [r3, #28]
 8002414:	4b08      	ldr	r3, [pc, #32]	; (8002438 <HAL_I2C_MspInit+0x94>)
 8002416:	2180      	movs	r1, #128	; 0x80
 8002418:	0389      	lsls	r1, r1, #14
 800241a:	430a      	orrs	r2, r1
 800241c:	61da      	str	r2, [r3, #28]
 800241e:	4b06      	ldr	r3, [pc, #24]	; (8002438 <HAL_I2C_MspInit+0x94>)
 8002420:	69da      	ldr	r2, [r3, #28]
 8002422:	2380      	movs	r3, #128	; 0x80
 8002424:	039b      	lsls	r3, r3, #14
 8002426:	4013      	ands	r3, r2
 8002428:	60fb      	str	r3, [r7, #12]
 800242a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800242c:	46c0      	nop			; (mov r8, r8)
 800242e:	46bd      	mov	sp, r7
 8002430:	b00a      	add	sp, #40	; 0x28
 8002432:	bd80      	pop	{r7, pc}
 8002434:	40005400 	.word	0x40005400
 8002438:	40021000 	.word	0x40021000
 800243c:	48000400 	.word	0x48000400

08002440 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b08a      	sub	sp, #40	; 0x28
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002448:	2314      	movs	r3, #20
 800244a:	18fb      	adds	r3, r7, r3
 800244c:	0018      	movs	r0, r3
 800244e:	2314      	movs	r3, #20
 8002450:	001a      	movs	r2, r3
 8002452:	2100      	movs	r1, #0
 8002454:	f003 fe46 	bl	80060e4 <memset>
  if(hspi->Instance==SPI1)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a1c      	ldr	r2, [pc, #112]	; (80024d0 <HAL_SPI_MspInit+0x90>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d132      	bne.n	80024c8 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002462:	4b1c      	ldr	r3, [pc, #112]	; (80024d4 <HAL_SPI_MspInit+0x94>)
 8002464:	699a      	ldr	r2, [r3, #24]
 8002466:	4b1b      	ldr	r3, [pc, #108]	; (80024d4 <HAL_SPI_MspInit+0x94>)
 8002468:	2180      	movs	r1, #128	; 0x80
 800246a:	0149      	lsls	r1, r1, #5
 800246c:	430a      	orrs	r2, r1
 800246e:	619a      	str	r2, [r3, #24]
 8002470:	4b18      	ldr	r3, [pc, #96]	; (80024d4 <HAL_SPI_MspInit+0x94>)
 8002472:	699a      	ldr	r2, [r3, #24]
 8002474:	2380      	movs	r3, #128	; 0x80
 8002476:	015b      	lsls	r3, r3, #5
 8002478:	4013      	ands	r3, r2
 800247a:	613b      	str	r3, [r7, #16]
 800247c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800247e:	4b15      	ldr	r3, [pc, #84]	; (80024d4 <HAL_SPI_MspInit+0x94>)
 8002480:	695a      	ldr	r2, [r3, #20]
 8002482:	4b14      	ldr	r3, [pc, #80]	; (80024d4 <HAL_SPI_MspInit+0x94>)
 8002484:	2180      	movs	r1, #128	; 0x80
 8002486:	0289      	lsls	r1, r1, #10
 8002488:	430a      	orrs	r2, r1
 800248a:	615a      	str	r2, [r3, #20]
 800248c:	4b11      	ldr	r3, [pc, #68]	; (80024d4 <HAL_SPI_MspInit+0x94>)
 800248e:	695a      	ldr	r2, [r3, #20]
 8002490:	2380      	movs	r3, #128	; 0x80
 8002492:	029b      	lsls	r3, r3, #10
 8002494:	4013      	ands	r3, r2
 8002496:	60fb      	str	r3, [r7, #12]
 8002498:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800249a:	2114      	movs	r1, #20
 800249c:	187b      	adds	r3, r7, r1
 800249e:	22e0      	movs	r2, #224	; 0xe0
 80024a0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024a2:	187b      	adds	r3, r7, r1
 80024a4:	2202      	movs	r2, #2
 80024a6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a8:	187b      	adds	r3, r7, r1
 80024aa:	2200      	movs	r2, #0
 80024ac:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80024ae:	187b      	adds	r3, r7, r1
 80024b0:	2203      	movs	r2, #3
 80024b2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80024b4:	187b      	adds	r3, r7, r1
 80024b6:	2200      	movs	r2, #0
 80024b8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024ba:	187a      	adds	r2, r7, r1
 80024bc:	2390      	movs	r3, #144	; 0x90
 80024be:	05db      	lsls	r3, r3, #23
 80024c0:	0011      	movs	r1, r2
 80024c2:	0018      	movs	r0, r3
 80024c4:	f000 fd7c 	bl	8002fc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80024c8:	46c0      	nop			; (mov r8, r8)
 80024ca:	46bd      	mov	sp, r7
 80024cc:	b00a      	add	sp, #40	; 0x28
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	40013000 	.word	0x40013000
 80024d4:	40021000 	.word	0x40021000

080024d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b086      	sub	sp, #24
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a32      	ldr	r2, [pc, #200]	; (80025b0 <HAL_TIM_Base_MspInit+0xd8>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d116      	bne.n	8002518 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80024ea:	4b32      	ldr	r3, [pc, #200]	; (80025b4 <HAL_TIM_Base_MspInit+0xdc>)
 80024ec:	699a      	ldr	r2, [r3, #24]
 80024ee:	4b31      	ldr	r3, [pc, #196]	; (80025b4 <HAL_TIM_Base_MspInit+0xdc>)
 80024f0:	2180      	movs	r1, #128	; 0x80
 80024f2:	0109      	lsls	r1, r1, #4
 80024f4:	430a      	orrs	r2, r1
 80024f6:	619a      	str	r2, [r3, #24]
 80024f8:	4b2e      	ldr	r3, [pc, #184]	; (80025b4 <HAL_TIM_Base_MspInit+0xdc>)
 80024fa:	699a      	ldr	r2, [r3, #24]
 80024fc:	2380      	movs	r3, #128	; 0x80
 80024fe:	011b      	lsls	r3, r3, #4
 8002500:	4013      	ands	r3, r2
 8002502:	617b      	str	r3, [r7, #20]
 8002504:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8002506:	2200      	movs	r2, #0
 8002508:	2100      	movs	r1, #0
 800250a:	200d      	movs	r0, #13
 800250c:	f000 fd26 	bl	8002f5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8002510:	200d      	movs	r0, #13
 8002512:	f000 fd38 	bl	8002f86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8002516:	e047      	b.n	80025a8 <HAL_TIM_Base_MspInit+0xd0>
  else if(htim_base->Instance==TIM2)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	2380      	movs	r3, #128	; 0x80
 800251e:	05db      	lsls	r3, r3, #23
 8002520:	429a      	cmp	r2, r3
 8002522:	d10c      	bne.n	800253e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002524:	4b23      	ldr	r3, [pc, #140]	; (80025b4 <HAL_TIM_Base_MspInit+0xdc>)
 8002526:	69da      	ldr	r2, [r3, #28]
 8002528:	4b22      	ldr	r3, [pc, #136]	; (80025b4 <HAL_TIM_Base_MspInit+0xdc>)
 800252a:	2101      	movs	r1, #1
 800252c:	430a      	orrs	r2, r1
 800252e:	61da      	str	r2, [r3, #28]
 8002530:	4b20      	ldr	r3, [pc, #128]	; (80025b4 <HAL_TIM_Base_MspInit+0xdc>)
 8002532:	69db      	ldr	r3, [r3, #28]
 8002534:	2201      	movs	r2, #1
 8002536:	4013      	ands	r3, r2
 8002538:	613b      	str	r3, [r7, #16]
 800253a:	693b      	ldr	r3, [r7, #16]
}
 800253c:	e034      	b.n	80025a8 <HAL_TIM_Base_MspInit+0xd0>
  else if(htim_base->Instance==TIM3)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a1d      	ldr	r2, [pc, #116]	; (80025b8 <HAL_TIM_Base_MspInit+0xe0>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d114      	bne.n	8002572 <HAL_TIM_Base_MspInit+0x9a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002548:	4b1a      	ldr	r3, [pc, #104]	; (80025b4 <HAL_TIM_Base_MspInit+0xdc>)
 800254a:	69da      	ldr	r2, [r3, #28]
 800254c:	4b19      	ldr	r3, [pc, #100]	; (80025b4 <HAL_TIM_Base_MspInit+0xdc>)
 800254e:	2102      	movs	r1, #2
 8002550:	430a      	orrs	r2, r1
 8002552:	61da      	str	r2, [r3, #28]
 8002554:	4b17      	ldr	r3, [pc, #92]	; (80025b4 <HAL_TIM_Base_MspInit+0xdc>)
 8002556:	69db      	ldr	r3, [r3, #28]
 8002558:	2202      	movs	r2, #2
 800255a:	4013      	ands	r3, r2
 800255c:	60fb      	str	r3, [r7, #12]
 800255e:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002560:	2200      	movs	r2, #0
 8002562:	2100      	movs	r1, #0
 8002564:	2010      	movs	r0, #16
 8002566:	f000 fcf9 	bl	8002f5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800256a:	2010      	movs	r0, #16
 800256c:	f000 fd0b 	bl	8002f86 <HAL_NVIC_EnableIRQ>
}
 8002570:	e01a      	b.n	80025a8 <HAL_TIM_Base_MspInit+0xd0>
  else if(htim_base->Instance==TIM16)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a11      	ldr	r2, [pc, #68]	; (80025bc <HAL_TIM_Base_MspInit+0xe4>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d115      	bne.n	80025a8 <HAL_TIM_Base_MspInit+0xd0>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800257c:	4b0d      	ldr	r3, [pc, #52]	; (80025b4 <HAL_TIM_Base_MspInit+0xdc>)
 800257e:	699a      	ldr	r2, [r3, #24]
 8002580:	4b0c      	ldr	r3, [pc, #48]	; (80025b4 <HAL_TIM_Base_MspInit+0xdc>)
 8002582:	2180      	movs	r1, #128	; 0x80
 8002584:	0289      	lsls	r1, r1, #10
 8002586:	430a      	orrs	r2, r1
 8002588:	619a      	str	r2, [r3, #24]
 800258a:	4b0a      	ldr	r3, [pc, #40]	; (80025b4 <HAL_TIM_Base_MspInit+0xdc>)
 800258c:	699a      	ldr	r2, [r3, #24]
 800258e:	2380      	movs	r3, #128	; 0x80
 8002590:	029b      	lsls	r3, r3, #10
 8002592:	4013      	ands	r3, r2
 8002594:	60bb      	str	r3, [r7, #8]
 8002596:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8002598:	2200      	movs	r2, #0
 800259a:	2100      	movs	r1, #0
 800259c:	2015      	movs	r0, #21
 800259e:	f000 fcdd 	bl	8002f5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 80025a2:	2015      	movs	r0, #21
 80025a4:	f000 fcef 	bl	8002f86 <HAL_NVIC_EnableIRQ>
}
 80025a8:	46c0      	nop			; (mov r8, r8)
 80025aa:	46bd      	mov	sp, r7
 80025ac:	b006      	add	sp, #24
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	40012c00 	.word	0x40012c00
 80025b4:	40021000 	.word	0x40021000
 80025b8:	40000400 	.word	0x40000400
 80025bc:	40014400 	.word	0x40014400

080025c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80025c4:	46c0      	nop			; (mov r8, r8)
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}

080025ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025ca:	b580      	push	{r7, lr}
 80025cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025ce:	e7fe      	b.n	80025ce <HardFault_Handler+0x4>

080025d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80025d4:	46c0      	nop			; (mov r8, r8)
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}

080025da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025da:	b580      	push	{r7, lr}
 80025dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025de:	46c0      	nop			; (mov r8, r8)
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}

080025e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025e8:	f000 f8b8 	bl	800275c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025ec:	46c0      	nop			; (mov r8, r8)
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
	...

080025f4 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80025f8:	4b03      	ldr	r3, [pc, #12]	; (8002608 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 80025fa:	0018      	movs	r0, r3
 80025fc:	f003 f9e2 	bl	80059c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8002600:	46c0      	nop			; (mov r8, r8)
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	46c0      	nop			; (mov r8, r8)
 8002608:	200001a0 	.word	0x200001a0

0800260c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002610:	4b03      	ldr	r3, [pc, #12]	; (8002620 <TIM3_IRQHandler+0x14>)
 8002612:	0018      	movs	r0, r3
 8002614:	f003 f9d6 	bl	80059c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002618:	46c0      	nop			; (mov r8, r8)
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	46c0      	nop			; (mov r8, r8)
 8002620:	20000124 	.word	0x20000124

08002624 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8002628:	4b03      	ldr	r3, [pc, #12]	; (8002638 <TIM16_IRQHandler+0x14>)
 800262a:	0018      	movs	r0, r3
 800262c:	f003 f9ca 	bl	80059c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8002630:	46c0      	nop			; (mov r8, r8)
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	46c0      	nop			; (mov r8, r8)
 8002638:	200002ac 	.word	0x200002ac

0800263c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002640:	46c0      	nop			; (mov r8, r8)
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
	...

08002648 <Reset_Handler>:
 8002648:	4813      	ldr	r0, [pc, #76]	; (8002698 <LoopForever+0x2>)
 800264a:	4685      	mov	sp, r0
 800264c:	4813      	ldr	r0, [pc, #76]	; (800269c <LoopForever+0x6>)
 800264e:	6801      	ldr	r1, [r0, #0]
 8002650:	0e09      	lsrs	r1, r1, #24
 8002652:	4a13      	ldr	r2, [pc, #76]	; (80026a0 <LoopForever+0xa>)
 8002654:	4291      	cmp	r1, r2
 8002656:	d105      	bne.n	8002664 <ApplicationStart>
 8002658:	4812      	ldr	r0, [pc, #72]	; (80026a4 <LoopForever+0xe>)
 800265a:	4913      	ldr	r1, [pc, #76]	; (80026a8 <LoopForever+0x12>)
 800265c:	6001      	str	r1, [r0, #0]
 800265e:	4813      	ldr	r0, [pc, #76]	; (80026ac <LoopForever+0x16>)
 8002660:	4913      	ldr	r1, [pc, #76]	; (80026b0 <LoopForever+0x1a>)
 8002662:	6001      	str	r1, [r0, #0]

08002664 <ApplicationStart>:
 8002664:	4813      	ldr	r0, [pc, #76]	; (80026b4 <LoopForever+0x1e>)
 8002666:	4914      	ldr	r1, [pc, #80]	; (80026b8 <LoopForever+0x22>)
 8002668:	4a14      	ldr	r2, [pc, #80]	; (80026bc <LoopForever+0x26>)
 800266a:	2300      	movs	r3, #0
 800266c:	e002      	b.n	8002674 <LoopCopyDataInit>

0800266e <CopyDataInit>:
 800266e:	58d4      	ldr	r4, [r2, r3]
 8002670:	50c4      	str	r4, [r0, r3]
 8002672:	3304      	adds	r3, #4

08002674 <LoopCopyDataInit>:
 8002674:	18c4      	adds	r4, r0, r3
 8002676:	428c      	cmp	r4, r1
 8002678:	d3f9      	bcc.n	800266e <CopyDataInit>
 800267a:	4a11      	ldr	r2, [pc, #68]	; (80026c0 <LoopForever+0x2a>)
 800267c:	4c11      	ldr	r4, [pc, #68]	; (80026c4 <LoopForever+0x2e>)
 800267e:	2300      	movs	r3, #0
 8002680:	e001      	b.n	8002686 <LoopFillZerobss>

08002682 <FillZerobss>:
 8002682:	6013      	str	r3, [r2, #0]
 8002684:	3204      	adds	r2, #4

08002686 <LoopFillZerobss>:
 8002686:	42a2      	cmp	r2, r4
 8002688:	d3fb      	bcc.n	8002682 <FillZerobss>
 800268a:	f7ff ffd7 	bl	800263c <SystemInit>
 800268e:	f003 fd05 	bl	800609c <__libc_init_array>
 8002692:	f7fe fc97 	bl	8000fc4 <main>

08002696 <LoopForever>:
 8002696:	e7fe      	b.n	8002696 <LoopForever>
 8002698:	20001800 	.word	0x20001800
 800269c:	00000004 	.word	0x00000004
 80026a0:	0000001f 	.word	0x0000001f
 80026a4:	40021018 	.word	0x40021018
 80026a8:	00000001 	.word	0x00000001
 80026ac:	40010000 	.word	0x40010000
 80026b0:	00000000 	.word	0x00000000
 80026b4:	20000000 	.word	0x20000000
 80026b8:	2000000c 	.word	0x2000000c
 80026bc:	08006144 	.word	0x08006144
 80026c0:	2000000c 	.word	0x2000000c
 80026c4:	200002fc 	.word	0x200002fc

080026c8 <ADC1_IRQHandler>:
 80026c8:	e7fe      	b.n	80026c8 <ADC1_IRQHandler>
	...

080026cc <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026d0:	4b07      	ldr	r3, [pc, #28]	; (80026f0 <HAL_Init+0x24>)
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	4b06      	ldr	r3, [pc, #24]	; (80026f0 <HAL_Init+0x24>)
 80026d6:	2110      	movs	r1, #16
 80026d8:	430a      	orrs	r2, r1
 80026da:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80026dc:	2000      	movs	r0, #0
 80026de:	f000 f809 	bl	80026f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026e2:	f7ff fded 	bl	80022c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026e6:	2300      	movs	r3, #0
}
 80026e8:	0018      	movs	r0, r3
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	46c0      	nop			; (mov r8, r8)
 80026f0:	40022000 	.word	0x40022000

080026f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026f4:	b590      	push	{r4, r7, lr}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026fc:	4b14      	ldr	r3, [pc, #80]	; (8002750 <HAL_InitTick+0x5c>)
 80026fe:	681c      	ldr	r4, [r3, #0]
 8002700:	4b14      	ldr	r3, [pc, #80]	; (8002754 <HAL_InitTick+0x60>)
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	0019      	movs	r1, r3
 8002706:	23fa      	movs	r3, #250	; 0xfa
 8002708:	0098      	lsls	r0, r3, #2
 800270a:	f7fd fcfd 	bl	8000108 <__udivsi3>
 800270e:	0003      	movs	r3, r0
 8002710:	0019      	movs	r1, r3
 8002712:	0020      	movs	r0, r4
 8002714:	f7fd fcf8 	bl	8000108 <__udivsi3>
 8002718:	0003      	movs	r3, r0
 800271a:	0018      	movs	r0, r3
 800271c:	f000 fc43 	bl	8002fa6 <HAL_SYSTICK_Config>
 8002720:	1e03      	subs	r3, r0, #0
 8002722:	d001      	beq.n	8002728 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e00f      	b.n	8002748 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2b03      	cmp	r3, #3
 800272c:	d80b      	bhi.n	8002746 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800272e:	6879      	ldr	r1, [r7, #4]
 8002730:	2301      	movs	r3, #1
 8002732:	425b      	negs	r3, r3
 8002734:	2200      	movs	r2, #0
 8002736:	0018      	movs	r0, r3
 8002738:	f000 fc10 	bl	8002f5c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800273c:	4b06      	ldr	r3, [pc, #24]	; (8002758 <HAL_InitTick+0x64>)
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8002742:	2300      	movs	r3, #0
 8002744:	e000      	b.n	8002748 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
}
 8002748:	0018      	movs	r0, r3
 800274a:	46bd      	mov	sp, r7
 800274c:	b003      	add	sp, #12
 800274e:	bd90      	pop	{r4, r7, pc}
 8002750:	20000000 	.word	0x20000000
 8002754:	20000008 	.word	0x20000008
 8002758:	20000004 	.word	0x20000004

0800275c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002760:	4b05      	ldr	r3, [pc, #20]	; (8002778 <HAL_IncTick+0x1c>)
 8002762:	781b      	ldrb	r3, [r3, #0]
 8002764:	001a      	movs	r2, r3
 8002766:	4b05      	ldr	r3, [pc, #20]	; (800277c <HAL_IncTick+0x20>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	18d2      	adds	r2, r2, r3
 800276c:	4b03      	ldr	r3, [pc, #12]	; (800277c <HAL_IncTick+0x20>)
 800276e:	601a      	str	r2, [r3, #0]
}
 8002770:	46c0      	nop			; (mov r8, r8)
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
 8002776:	46c0      	nop			; (mov r8, r8)
 8002778:	20000008 	.word	0x20000008
 800277c:	200002f8 	.word	0x200002f8

08002780 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	af00      	add	r7, sp, #0
  return uwTick;
 8002784:	4b02      	ldr	r3, [pc, #8]	; (8002790 <HAL_GetTick+0x10>)
 8002786:	681b      	ldr	r3, [r3, #0]
}
 8002788:	0018      	movs	r0, r3
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	46c0      	nop			; (mov r8, r8)
 8002790:	200002f8 	.word	0x200002f8

08002794 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b084      	sub	sp, #16
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800279c:	f7ff fff0 	bl	8002780 <HAL_GetTick>
 80027a0:	0003      	movs	r3, r0
 80027a2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	3301      	adds	r3, #1
 80027ac:	d005      	beq.n	80027ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027ae:	4b09      	ldr	r3, [pc, #36]	; (80027d4 <HAL_Delay+0x40>)
 80027b0:	781b      	ldrb	r3, [r3, #0]
 80027b2:	001a      	movs	r2, r3
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	189b      	adds	r3, r3, r2
 80027b8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80027ba:	46c0      	nop			; (mov r8, r8)
 80027bc:	f7ff ffe0 	bl	8002780 <HAL_GetTick>
 80027c0:	0002      	movs	r2, r0
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	68fa      	ldr	r2, [r7, #12]
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d8f7      	bhi.n	80027bc <HAL_Delay+0x28>
  {
  }
}
 80027cc:	46c0      	nop			; (mov r8, r8)
 80027ce:	46bd      	mov	sp, r7
 80027d0:	b004      	add	sp, #16
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	20000008 	.word	0x20000008

080027d8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b084      	sub	sp, #16
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d101      	bne.n	80027ea <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e0f0      	b.n	80029cc <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2220      	movs	r2, #32
 80027ee:	5c9b      	ldrb	r3, [r3, r2]
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d103      	bne.n	80027fe <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	0018      	movs	r0, r3
 80027fa:	f7ff fd85 	bl	8002308 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	2102      	movs	r1, #2
 800280a:	438a      	bics	r2, r1
 800280c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800280e:	f7ff ffb7 	bl	8002780 <HAL_GetTick>
 8002812:	0003      	movs	r3, r0
 8002814:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002816:	e013      	b.n	8002840 <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002818:	f7ff ffb2 	bl	8002780 <HAL_GetTick>
 800281c:	0002      	movs	r2, r0
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	2b0a      	cmp	r3, #10
 8002824:	d90c      	bls.n	8002840 <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282a:	2280      	movs	r2, #128	; 0x80
 800282c:	0292      	lsls	r2, r2, #10
 800282e:	431a      	orrs	r2, r3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2220      	movs	r2, #32
 8002838:	2105      	movs	r1, #5
 800283a:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e0c5      	b.n	80029cc <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	2202      	movs	r2, #2
 8002848:	4013      	ands	r3, r2
 800284a:	d1e5      	bne.n	8002818 <HAL_CAN_Init+0x40>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	2101      	movs	r1, #1
 8002858:	430a      	orrs	r2, r1
 800285a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800285c:	f7ff ff90 	bl	8002780 <HAL_GetTick>
 8002860:	0003      	movs	r3, r0
 8002862:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002864:	e013      	b.n	800288e <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002866:	f7ff ff8b 	bl	8002780 <HAL_GetTick>
 800286a:	0002      	movs	r2, r0
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	1ad3      	subs	r3, r2, r3
 8002870:	2b0a      	cmp	r3, #10
 8002872:	d90c      	bls.n	800288e <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002878:	2280      	movs	r2, #128	; 0x80
 800287a:	0292      	lsls	r2, r2, #10
 800287c:	431a      	orrs	r2, r3
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2220      	movs	r2, #32
 8002886:	2105      	movs	r1, #5
 8002888:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e09e      	b.n	80029cc <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	2201      	movs	r2, #1
 8002896:	4013      	ands	r3, r2
 8002898:	d0e5      	beq.n	8002866 <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	7e1b      	ldrb	r3, [r3, #24]
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d108      	bne.n	80028b4 <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	2180      	movs	r1, #128	; 0x80
 80028ae:	430a      	orrs	r2, r1
 80028b0:	601a      	str	r2, [r3, #0]
 80028b2:	e007      	b.n	80028c4 <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	2180      	movs	r1, #128	; 0x80
 80028c0:	438a      	bics	r2, r1
 80028c2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	7e5b      	ldrb	r3, [r3, #25]
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d108      	bne.n	80028de <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	2140      	movs	r1, #64	; 0x40
 80028d8:	430a      	orrs	r2, r1
 80028da:	601a      	str	r2, [r3, #0]
 80028dc:	e007      	b.n	80028ee <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	2140      	movs	r1, #64	; 0x40
 80028ea:	438a      	bics	r2, r1
 80028ec:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	7e9b      	ldrb	r3, [r3, #26]
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d108      	bne.n	8002908 <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	2120      	movs	r1, #32
 8002902:	430a      	orrs	r2, r1
 8002904:	601a      	str	r2, [r3, #0]
 8002906:	e007      	b.n	8002918 <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	2120      	movs	r1, #32
 8002914:	438a      	bics	r2, r1
 8002916:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	7edb      	ldrb	r3, [r3, #27]
 800291c:	2b01      	cmp	r3, #1
 800291e:	d108      	bne.n	8002932 <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	2110      	movs	r1, #16
 800292c:	438a      	bics	r2, r1
 800292e:	601a      	str	r2, [r3, #0]
 8002930:	e007      	b.n	8002942 <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	2110      	movs	r1, #16
 800293e:	430a      	orrs	r2, r1
 8002940:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	7f1b      	ldrb	r3, [r3, #28]
 8002946:	2b01      	cmp	r3, #1
 8002948:	d108      	bne.n	800295c <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	2108      	movs	r1, #8
 8002956:	430a      	orrs	r2, r1
 8002958:	601a      	str	r2, [r3, #0]
 800295a:	e007      	b.n	800296c <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	2108      	movs	r1, #8
 8002968:	438a      	bics	r2, r1
 800296a:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	7f5b      	ldrb	r3, [r3, #29]
 8002970:	2b01      	cmp	r3, #1
 8002972:	d108      	bne.n	8002986 <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	2104      	movs	r1, #4
 8002980:	430a      	orrs	r2, r1
 8002982:	601a      	str	r2, [r3, #0]
 8002984:	e007      	b.n	8002996 <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	2104      	movs	r1, #4
 8002992:	438a      	bics	r2, r1
 8002994:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	689a      	ldr	r2, [r3, #8]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	68db      	ldr	r3, [r3, #12]
 800299e:	431a      	orrs	r2, r3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	691b      	ldr	r3, [r3, #16]
 80029a4:	431a      	orrs	r2, r3
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	695b      	ldr	r3, [r3, #20]
 80029aa:	431a      	orrs	r2, r3
 80029ac:	0011      	movs	r1, r2
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	1e5a      	subs	r2, r3, #1
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	430a      	orrs	r2, r1
 80029ba:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2200      	movs	r2, #0
 80029c0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2220      	movs	r2, #32
 80029c6:	2101      	movs	r1, #1
 80029c8:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80029ca:	2300      	movs	r3, #0
}
 80029cc:	0018      	movs	r0, r3
 80029ce:	46bd      	mov	sp, r7
 80029d0:	b004      	add	sp, #16
 80029d2:	bd80      	pop	{r7, pc}

080029d4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b086      	sub	sp, #24
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80029e4:	2013      	movs	r0, #19
 80029e6:	183b      	adds	r3, r7, r0
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	2120      	movs	r1, #32
 80029ec:	5c52      	ldrb	r2, [r2, r1]
 80029ee:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 80029f0:	183b      	adds	r3, r7, r0
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d005      	beq.n	8002a04 <HAL_CAN_ConfigFilter+0x30>
 80029f8:	2313      	movs	r3, #19
 80029fa:	18fb      	adds	r3, r7, r3
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d000      	beq.n	8002a04 <HAL_CAN_ConfigFilter+0x30>
 8002a02:	e0cd      	b.n	8002ba0 <HAL_CAN_ConfigFilter+0x1cc>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002a04:	697a      	ldr	r2, [r7, #20]
 8002a06:	2380      	movs	r3, #128	; 0x80
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	58d3      	ldr	r3, [r2, r3]
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	431a      	orrs	r2, r3
 8002a10:	0011      	movs	r1, r2
 8002a12:	697a      	ldr	r2, [r7, #20]
 8002a14:	2380      	movs	r3, #128	; 0x80
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	50d1      	str	r1, [r2, r3]

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	695b      	ldr	r3, [r3, #20]
 8002a1e:	221f      	movs	r2, #31
 8002a20:	4013      	ands	r3, r2
 8002a22:	2201      	movs	r2, #1
 8002a24:	409a      	lsls	r2, r3
 8002a26:	0013      	movs	r3, r2
 8002a28:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002a2a:	697a      	ldr	r2, [r7, #20]
 8002a2c:	2387      	movs	r3, #135	; 0x87
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	58d3      	ldr	r3, [r2, r3]
 8002a32:	68fa      	ldr	r2, [r7, #12]
 8002a34:	43d2      	mvns	r2, r2
 8002a36:	401a      	ands	r2, r3
 8002a38:	0011      	movs	r1, r2
 8002a3a:	697a      	ldr	r2, [r7, #20]
 8002a3c:	2387      	movs	r3, #135	; 0x87
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	50d1      	str	r1, [r2, r3]

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	69db      	ldr	r3, [r3, #28]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d129      	bne.n	8002a9e <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002a4a:	697a      	ldr	r2, [r7, #20]
 8002a4c:	2383      	movs	r3, #131	; 0x83
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	58d3      	ldr	r3, [r2, r3]
 8002a52:	68fa      	ldr	r2, [r7, #12]
 8002a54:	43d2      	mvns	r2, r2
 8002a56:	401a      	ands	r2, r3
 8002a58:	0011      	movs	r1, r2
 8002a5a:	697a      	ldr	r2, [r7, #20]
 8002a5c:	2383      	movs	r3, #131	; 0x83
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	50d1      	str	r1, [r2, r3]

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	68db      	ldr	r3, [r3, #12]
 8002a66:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	041b      	lsls	r3, r3, #16
 8002a6e:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002a74:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	3248      	adds	r2, #72	; 0x48
 8002a7a:	00d2      	lsls	r2, r2, #3
 8002a7c:	50d1      	str	r1, [r2, r3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	041b      	lsls	r3, r3, #16
 8002a8a:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002a90:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002a92:	6979      	ldr	r1, [r7, #20]
 8002a94:	3348      	adds	r3, #72	; 0x48
 8002a96:	00db      	lsls	r3, r3, #3
 8002a98:	18cb      	adds	r3, r1, r3
 8002a9a:	3304      	adds	r3, #4
 8002a9c:	601a      	str	r2, [r3, #0]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	69db      	ldr	r3, [r3, #28]
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d128      	bne.n	8002af8 <HAL_CAN_ConfigFilter+0x124>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002aa6:	697a      	ldr	r2, [r7, #20]
 8002aa8:	2383      	movs	r3, #131	; 0x83
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	58d2      	ldr	r2, [r2, r3]
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	431a      	orrs	r2, r3
 8002ab2:	0011      	movs	r1, r2
 8002ab4:	697a      	ldr	r2, [r7, #20]
 8002ab6:	2383      	movs	r3, #131	; 0x83
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	50d1      	str	r1, [r2, r3]

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	041b      	lsls	r3, r3, #16
 8002ac8:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002ace:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	3248      	adds	r2, #72	; 0x48
 8002ad4:	00d2      	lsls	r2, r2, #3
 8002ad6:	50d1      	str	r1, [r2, r3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	68db      	ldr	r3, [r3, #12]
 8002ae2:	041b      	lsls	r3, r3, #16
 8002ae4:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002aea:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002aec:	6979      	ldr	r1, [r7, #20]
 8002aee:	3348      	adds	r3, #72	; 0x48
 8002af0:	00db      	lsls	r3, r3, #3
 8002af2:	18cb      	adds	r3, r1, r3
 8002af4:	3304      	adds	r3, #4
 8002af6:	601a      	str	r2, [r3, #0]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	699b      	ldr	r3, [r3, #24]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d10c      	bne.n	8002b1a <HAL_CAN_ConfigFilter+0x146>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002b00:	697a      	ldr	r2, [r7, #20]
 8002b02:	2381      	movs	r3, #129	; 0x81
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	58d3      	ldr	r3, [r2, r3]
 8002b08:	68fa      	ldr	r2, [r7, #12]
 8002b0a:	43d2      	mvns	r2, r2
 8002b0c:	401a      	ands	r2, r3
 8002b0e:	0011      	movs	r1, r2
 8002b10:	697a      	ldr	r2, [r7, #20]
 8002b12:	2381      	movs	r3, #129	; 0x81
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	50d1      	str	r1, [r2, r3]
 8002b18:	e00a      	b.n	8002b30 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002b1a:	697a      	ldr	r2, [r7, #20]
 8002b1c:	2381      	movs	r3, #129	; 0x81
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	58d2      	ldr	r2, [r2, r3]
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	431a      	orrs	r2, r3
 8002b26:	0011      	movs	r1, r2
 8002b28:	697a      	ldr	r2, [r7, #20]
 8002b2a:	2381      	movs	r3, #129	; 0x81
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	50d1      	str	r1, [r2, r3]
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	691b      	ldr	r3, [r3, #16]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d10c      	bne.n	8002b52 <HAL_CAN_ConfigFilter+0x17e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002b38:	697a      	ldr	r2, [r7, #20]
 8002b3a:	2385      	movs	r3, #133	; 0x85
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	58d3      	ldr	r3, [r2, r3]
 8002b40:	68fa      	ldr	r2, [r7, #12]
 8002b42:	43d2      	mvns	r2, r2
 8002b44:	401a      	ands	r2, r3
 8002b46:	0011      	movs	r1, r2
 8002b48:	697a      	ldr	r2, [r7, #20]
 8002b4a:	2385      	movs	r3, #133	; 0x85
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	50d1      	str	r1, [r2, r3]
 8002b50:	e00a      	b.n	8002b68 <HAL_CAN_ConfigFilter+0x194>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002b52:	697a      	ldr	r2, [r7, #20]
 8002b54:	2385      	movs	r3, #133	; 0x85
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	58d2      	ldr	r2, [r2, r3]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	431a      	orrs	r2, r3
 8002b5e:	0011      	movs	r1, r2
 8002b60:	697a      	ldr	r2, [r7, #20]
 8002b62:	2385      	movs	r3, #133	; 0x85
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	50d1      	str	r1, [r2, r3]
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	6a1b      	ldr	r3, [r3, #32]
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d10a      	bne.n	8002b86 <HAL_CAN_ConfigFilter+0x1b2>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002b70:	697a      	ldr	r2, [r7, #20]
 8002b72:	2387      	movs	r3, #135	; 0x87
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	58d2      	ldr	r2, [r2, r3]
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	431a      	orrs	r2, r3
 8002b7c:	0011      	movs	r1, r2
 8002b7e:	697a      	ldr	r2, [r7, #20]
 8002b80:	2387      	movs	r3, #135	; 0x87
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	50d1      	str	r1, [r2, r3]
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002b86:	697a      	ldr	r2, [r7, #20]
 8002b88:	2380      	movs	r3, #128	; 0x80
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	58d3      	ldr	r3, [r2, r3]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	4393      	bics	r3, r2
 8002b92:	0019      	movs	r1, r3
 8002b94:	697a      	ldr	r2, [r7, #20]
 8002b96:	2380      	movs	r3, #128	; 0x80
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	50d1      	str	r1, [r2, r3]

    /* Return function status */
    return HAL_OK;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	e007      	b.n	8002bb0 <HAL_CAN_ConfigFilter+0x1dc>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba4:	2280      	movs	r2, #128	; 0x80
 8002ba6:	02d2      	lsls	r2, r2, #11
 8002ba8:	431a      	orrs	r2, r3
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
  }
}
 8002bb0:	0018      	movs	r0, r3
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	b006      	add	sp, #24
 8002bb6:	bd80      	pop	{r7, pc}

08002bb8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b084      	sub	sp, #16
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2220      	movs	r2, #32
 8002bc4:	5c9b      	ldrb	r3, [r3, r2]
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d12f      	bne.n	8002c2c <HAL_CAN_Start+0x74>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2220      	movs	r2, #32
 8002bd0:	2102      	movs	r1, #2
 8002bd2:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	2101      	movs	r1, #1
 8002be0:	438a      	bics	r2, r1
 8002be2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002be4:	f7ff fdcc 	bl	8002780 <HAL_GetTick>
 8002be8:	0003      	movs	r3, r0
 8002bea:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002bec:	e013      	b.n	8002c16 <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002bee:	f7ff fdc7 	bl	8002780 <HAL_GetTick>
 8002bf2:	0002      	movs	r2, r0
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	1ad3      	subs	r3, r2, r3
 8002bf8:	2b0a      	cmp	r3, #10
 8002bfa:	d90c      	bls.n	8002c16 <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c00:	2280      	movs	r2, #128	; 0x80
 8002c02:	0292      	lsls	r2, r2, #10
 8002c04:	431a      	orrs	r2, r3
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2220      	movs	r2, #32
 8002c0e:	2105      	movs	r1, #5
 8002c10:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e012      	b.n	8002c3c <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	4013      	ands	r3, r2
 8002c20:	d1e5      	bne.n	8002bee <HAL_CAN_Start+0x36>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2200      	movs	r2, #0
 8002c26:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	e007      	b.n	8002c3c <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c30:	2280      	movs	r2, #128	; 0x80
 8002c32:	0312      	lsls	r2, r2, #12
 8002c34:	431a      	orrs	r2, r3
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
  }
}
 8002c3c:	0018      	movs	r0, r3
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	b004      	add	sp, #16
 8002c42:	bd80      	pop	{r7, pc}

08002c44 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b088      	sub	sp, #32
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	60f8      	str	r0, [r7, #12]
 8002c4c:	60b9      	str	r1, [r7, #8]
 8002c4e:	607a      	str	r2, [r7, #4]
 8002c50:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002c52:	201f      	movs	r0, #31
 8002c54:	183b      	adds	r3, r7, r0
 8002c56:	68fa      	ldr	r2, [r7, #12]
 8002c58:	2120      	movs	r1, #32
 8002c5a:	5c52      	ldrb	r2, [r2, r1]
 8002c5c:	701a      	strb	r2, [r3, #0]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002c66:	183b      	adds	r3, r7, r0
 8002c68:	781b      	ldrb	r3, [r3, #0]
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d005      	beq.n	8002c7a <HAL_CAN_AddTxMessage+0x36>
 8002c6e:	231f      	movs	r3, #31
 8002c70:	18fb      	adds	r3, r7, r3
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	2b02      	cmp	r3, #2
 8002c76:	d000      	beq.n	8002c7a <HAL_CAN_AddTxMessage+0x36>
 8002c78:	e0b7      	b.n	8002dea <HAL_CAN_AddTxMessage+0x1a6>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002c7a:	69ba      	ldr	r2, [r7, #24]
 8002c7c:	2380      	movs	r3, #128	; 0x80
 8002c7e:	04db      	lsls	r3, r3, #19
 8002c80:	4013      	ands	r3, r2
 8002c82:	d10a      	bne.n	8002c9a <HAL_CAN_AddTxMessage+0x56>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002c84:	69ba      	ldr	r2, [r7, #24]
 8002c86:	2380      	movs	r3, #128	; 0x80
 8002c88:	051b      	lsls	r3, r3, #20
 8002c8a:	4013      	ands	r3, r2
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002c8c:	d105      	bne.n	8002c9a <HAL_CAN_AddTxMessage+0x56>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002c8e:	69ba      	ldr	r2, [r7, #24]
 8002c90:	2380      	movs	r3, #128	; 0x80
 8002c92:	055b      	lsls	r3, r3, #21
 8002c94:	4013      	ands	r3, r2
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002c96:	d100      	bne.n	8002c9a <HAL_CAN_AddTxMessage+0x56>
 8002c98:	e09e      	b.n	8002dd8 <HAL_CAN_AddTxMessage+0x194>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002c9a:	69bb      	ldr	r3, [r7, #24]
 8002c9c:	0e1b      	lsrs	r3, r3, #24
 8002c9e:	2203      	movs	r2, #3
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	d908      	bls.n	8002cbc <HAL_CAN_AddTxMessage+0x78>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cae:	2280      	movs	r2, #128	; 0x80
 8002cb0:	0412      	lsls	r2, r2, #16
 8002cb2:	431a      	orrs	r2, r3
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e09e      	b.n	8002dfa <HAL_CAN_AddTxMessage+0x1b6>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	409a      	lsls	r2, r3
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d10c      	bne.n	8002ce8 <HAL_CAN_AddTxMessage+0xa4>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	0559      	lsls	r1, r3, #21
                                                           pHeader->RTR);
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4311      	orrs	r1, r2
 8002cde:	697a      	ldr	r2, [r7, #20]
 8002ce0:	3218      	adds	r2, #24
 8002ce2:	0112      	lsls	r2, r2, #4
 8002ce4:	50d1      	str	r1, [r2, r3]
 8002ce6:	e00f      	b.n	8002d08 <HAL_CAN_AddTxMessage+0xc4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002cf2:	431a      	orrs	r2, r3
 8002cf4:	0011      	movs	r1, r2
                                                           pHeader->RTR);
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
                                                           pHeader->IDE |
 8002cfe:	4311      	orrs	r1, r2
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002d00:	697a      	ldr	r2, [r7, #20]
 8002d02:	3218      	adds	r2, #24
 8002d04:	0112      	lsls	r2, r2, #4
 8002d06:	50d1      	str	r1, [r2, r3]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	6819      	ldr	r1, [r3, #0]
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	691a      	ldr	r2, [r3, #16]
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	3318      	adds	r3, #24
 8002d14:	011b      	lsls	r3, r3, #4
 8002d16:	18cb      	adds	r3, r1, r3
 8002d18:	3304      	adds	r3, #4
 8002d1a:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	7d1b      	ldrb	r3, [r3, #20]
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d112      	bne.n	8002d4a <HAL_CAN_AddTxMessage+0x106>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	3318      	adds	r3, #24
 8002d2c:	011b      	lsls	r3, r3, #4
 8002d2e:	18d3      	adds	r3, r2, r3
 8002d30:	3304      	adds	r3, #4
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	6819      	ldr	r1, [r3, #0]
 8002d38:	2380      	movs	r3, #128	; 0x80
 8002d3a:	005b      	lsls	r3, r3, #1
 8002d3c:	431a      	orrs	r2, r3
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	3318      	adds	r3, #24
 8002d42:	011b      	lsls	r3, r3, #4
 8002d44:	18cb      	adds	r3, r1, r3
 8002d46:	3304      	adds	r3, #4
 8002d48:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	3307      	adds	r3, #7
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	061a      	lsls	r2, r3, #24
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	3306      	adds	r3, #6
 8002d56:	781b      	ldrb	r3, [r3, #0]
 8002d58:	041b      	lsls	r3, r3, #16
 8002d5a:	431a      	orrs	r2, r3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	3305      	adds	r3, #5
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	021b      	lsls	r3, r3, #8
 8002d64:	431a      	orrs	r2, r3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	3304      	adds	r3, #4
 8002d6a:	781b      	ldrb	r3, [r3, #0]
 8002d6c:	0019      	movs	r1, r3
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	6818      	ldr	r0, [r3, #0]
 8002d72:	430a      	orrs	r2, r1
 8002d74:	6979      	ldr	r1, [r7, #20]
 8002d76:	23c6      	movs	r3, #198	; 0xc6
 8002d78:	005b      	lsls	r3, r3, #1
 8002d7a:	0109      	lsls	r1, r1, #4
 8002d7c:	1841      	adds	r1, r0, r1
 8002d7e:	18cb      	adds	r3, r1, r3
 8002d80:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	3303      	adds	r3, #3
 8002d86:	781b      	ldrb	r3, [r3, #0]
 8002d88:	061a      	lsls	r2, r3, #24
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	3302      	adds	r3, #2
 8002d8e:	781b      	ldrb	r3, [r3, #0]
 8002d90:	041b      	lsls	r3, r3, #16
 8002d92:	431a      	orrs	r2, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	3301      	adds	r3, #1
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	021b      	lsls	r3, r3, #8
 8002d9c:	431a      	orrs	r2, r3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	0019      	movs	r1, r3
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	6818      	ldr	r0, [r3, #0]
 8002da8:	430a      	orrs	r2, r1
 8002daa:	6979      	ldr	r1, [r7, #20]
 8002dac:	23c4      	movs	r3, #196	; 0xc4
 8002dae:	005b      	lsls	r3, r3, #1
 8002db0:	0109      	lsls	r1, r1, #4
 8002db2:	1841      	adds	r1, r0, r1
 8002db4:	18cb      	adds	r3, r1, r3
 8002db6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	697a      	ldr	r2, [r7, #20]
 8002dbe:	3218      	adds	r2, #24
 8002dc0:	0112      	lsls	r2, r2, #4
 8002dc2:	58d2      	ldr	r2, [r2, r3]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	2101      	movs	r1, #1
 8002dca:	4311      	orrs	r1, r2
 8002dcc:	697a      	ldr	r2, [r7, #20]
 8002dce:	3218      	adds	r2, #24
 8002dd0:	0112      	lsls	r2, r2, #4
 8002dd2:	50d1      	str	r1, [r2, r3]

      /* Return function status */
      return HAL_OK;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	e010      	b.n	8002dfa <HAL_CAN_AddTxMessage+0x1b6>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ddc:	2280      	movs	r2, #128	; 0x80
 8002dde:	0392      	lsls	r2, r2, #14
 8002de0:	431a      	orrs	r2, r3
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e007      	b.n	8002dfa <HAL_CAN_AddTxMessage+0x1b6>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dee:	2280      	movs	r2, #128	; 0x80
 8002df0:	02d2      	lsls	r2, r2, #11
 8002df2:	431a      	orrs	r2, r3
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
  }
}
 8002dfa:	0018      	movs	r0, r3
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	b008      	add	sp, #32
 8002e00:	bd80      	pop	{r7, pc}
	...

08002e04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b082      	sub	sp, #8
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	0002      	movs	r2, r0
 8002e0c:	1dfb      	adds	r3, r7, #7
 8002e0e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002e10:	1dfb      	adds	r3, r7, #7
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	2b7f      	cmp	r3, #127	; 0x7f
 8002e16:	d809      	bhi.n	8002e2c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e18:	1dfb      	adds	r3, r7, #7
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	001a      	movs	r2, r3
 8002e1e:	231f      	movs	r3, #31
 8002e20:	401a      	ands	r2, r3
 8002e22:	4b04      	ldr	r3, [pc, #16]	; (8002e34 <__NVIC_EnableIRQ+0x30>)
 8002e24:	2101      	movs	r1, #1
 8002e26:	4091      	lsls	r1, r2
 8002e28:	000a      	movs	r2, r1
 8002e2a:	601a      	str	r2, [r3, #0]
  }
}
 8002e2c:	46c0      	nop			; (mov r8, r8)
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	b002      	add	sp, #8
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	e000e100 	.word	0xe000e100

08002e38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e38:	b590      	push	{r4, r7, lr}
 8002e3a:	b083      	sub	sp, #12
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	0002      	movs	r2, r0
 8002e40:	6039      	str	r1, [r7, #0]
 8002e42:	1dfb      	adds	r3, r7, #7
 8002e44:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002e46:	1dfb      	adds	r3, r7, #7
 8002e48:	781b      	ldrb	r3, [r3, #0]
 8002e4a:	2b7f      	cmp	r3, #127	; 0x7f
 8002e4c:	d828      	bhi.n	8002ea0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002e4e:	4a2f      	ldr	r2, [pc, #188]	; (8002f0c <__NVIC_SetPriority+0xd4>)
 8002e50:	1dfb      	adds	r3, r7, #7
 8002e52:	781b      	ldrb	r3, [r3, #0]
 8002e54:	b25b      	sxtb	r3, r3
 8002e56:	089b      	lsrs	r3, r3, #2
 8002e58:	33c0      	adds	r3, #192	; 0xc0
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	589b      	ldr	r3, [r3, r2]
 8002e5e:	1dfa      	adds	r2, r7, #7
 8002e60:	7812      	ldrb	r2, [r2, #0]
 8002e62:	0011      	movs	r1, r2
 8002e64:	2203      	movs	r2, #3
 8002e66:	400a      	ands	r2, r1
 8002e68:	00d2      	lsls	r2, r2, #3
 8002e6a:	21ff      	movs	r1, #255	; 0xff
 8002e6c:	4091      	lsls	r1, r2
 8002e6e:	000a      	movs	r2, r1
 8002e70:	43d2      	mvns	r2, r2
 8002e72:	401a      	ands	r2, r3
 8002e74:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	019b      	lsls	r3, r3, #6
 8002e7a:	22ff      	movs	r2, #255	; 0xff
 8002e7c:	401a      	ands	r2, r3
 8002e7e:	1dfb      	adds	r3, r7, #7
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	0018      	movs	r0, r3
 8002e84:	2303      	movs	r3, #3
 8002e86:	4003      	ands	r3, r0
 8002e88:	00db      	lsls	r3, r3, #3
 8002e8a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002e8c:	481f      	ldr	r0, [pc, #124]	; (8002f0c <__NVIC_SetPriority+0xd4>)
 8002e8e:	1dfb      	adds	r3, r7, #7
 8002e90:	781b      	ldrb	r3, [r3, #0]
 8002e92:	b25b      	sxtb	r3, r3
 8002e94:	089b      	lsrs	r3, r3, #2
 8002e96:	430a      	orrs	r2, r1
 8002e98:	33c0      	adds	r3, #192	; 0xc0
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002e9e:	e031      	b.n	8002f04 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002ea0:	4a1b      	ldr	r2, [pc, #108]	; (8002f10 <__NVIC_SetPriority+0xd8>)
 8002ea2:	1dfb      	adds	r3, r7, #7
 8002ea4:	781b      	ldrb	r3, [r3, #0]
 8002ea6:	0019      	movs	r1, r3
 8002ea8:	230f      	movs	r3, #15
 8002eaa:	400b      	ands	r3, r1
 8002eac:	3b08      	subs	r3, #8
 8002eae:	089b      	lsrs	r3, r3, #2
 8002eb0:	3306      	adds	r3, #6
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	18d3      	adds	r3, r2, r3
 8002eb6:	3304      	adds	r3, #4
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	1dfa      	adds	r2, r7, #7
 8002ebc:	7812      	ldrb	r2, [r2, #0]
 8002ebe:	0011      	movs	r1, r2
 8002ec0:	2203      	movs	r2, #3
 8002ec2:	400a      	ands	r2, r1
 8002ec4:	00d2      	lsls	r2, r2, #3
 8002ec6:	21ff      	movs	r1, #255	; 0xff
 8002ec8:	4091      	lsls	r1, r2
 8002eca:	000a      	movs	r2, r1
 8002ecc:	43d2      	mvns	r2, r2
 8002ece:	401a      	ands	r2, r3
 8002ed0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	019b      	lsls	r3, r3, #6
 8002ed6:	22ff      	movs	r2, #255	; 0xff
 8002ed8:	401a      	ands	r2, r3
 8002eda:	1dfb      	adds	r3, r7, #7
 8002edc:	781b      	ldrb	r3, [r3, #0]
 8002ede:	0018      	movs	r0, r3
 8002ee0:	2303      	movs	r3, #3
 8002ee2:	4003      	ands	r3, r0
 8002ee4:	00db      	lsls	r3, r3, #3
 8002ee6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002ee8:	4809      	ldr	r0, [pc, #36]	; (8002f10 <__NVIC_SetPriority+0xd8>)
 8002eea:	1dfb      	adds	r3, r7, #7
 8002eec:	781b      	ldrb	r3, [r3, #0]
 8002eee:	001c      	movs	r4, r3
 8002ef0:	230f      	movs	r3, #15
 8002ef2:	4023      	ands	r3, r4
 8002ef4:	3b08      	subs	r3, #8
 8002ef6:	089b      	lsrs	r3, r3, #2
 8002ef8:	430a      	orrs	r2, r1
 8002efa:	3306      	adds	r3, #6
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	18c3      	adds	r3, r0, r3
 8002f00:	3304      	adds	r3, #4
 8002f02:	601a      	str	r2, [r3, #0]
}
 8002f04:	46c0      	nop			; (mov r8, r8)
 8002f06:	46bd      	mov	sp, r7
 8002f08:	b003      	add	sp, #12
 8002f0a:	bd90      	pop	{r4, r7, pc}
 8002f0c:	e000e100 	.word	0xe000e100
 8002f10:	e000ed00 	.word	0xe000ed00

08002f14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b082      	sub	sp, #8
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	3b01      	subs	r3, #1
 8002f20:	4a0c      	ldr	r2, [pc, #48]	; (8002f54 <SysTick_Config+0x40>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d901      	bls.n	8002f2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f26:	2301      	movs	r3, #1
 8002f28:	e010      	b.n	8002f4c <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f2a:	4b0b      	ldr	r3, [pc, #44]	; (8002f58 <SysTick_Config+0x44>)
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	3a01      	subs	r2, #1
 8002f30:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f32:	2301      	movs	r3, #1
 8002f34:	425b      	negs	r3, r3
 8002f36:	2103      	movs	r1, #3
 8002f38:	0018      	movs	r0, r3
 8002f3a:	f7ff ff7d 	bl	8002e38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f3e:	4b06      	ldr	r3, [pc, #24]	; (8002f58 <SysTick_Config+0x44>)
 8002f40:	2200      	movs	r2, #0
 8002f42:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f44:	4b04      	ldr	r3, [pc, #16]	; (8002f58 <SysTick_Config+0x44>)
 8002f46:	2207      	movs	r2, #7
 8002f48:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f4a:	2300      	movs	r3, #0
}
 8002f4c:	0018      	movs	r0, r3
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	b002      	add	sp, #8
 8002f52:	bd80      	pop	{r7, pc}
 8002f54:	00ffffff 	.word	0x00ffffff
 8002f58:	e000e010 	.word	0xe000e010

08002f5c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b084      	sub	sp, #16
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	60b9      	str	r1, [r7, #8]
 8002f64:	607a      	str	r2, [r7, #4]
 8002f66:	210f      	movs	r1, #15
 8002f68:	187b      	adds	r3, r7, r1
 8002f6a:	1c02      	adds	r2, r0, #0
 8002f6c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002f6e:	68ba      	ldr	r2, [r7, #8]
 8002f70:	187b      	adds	r3, r7, r1
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	b25b      	sxtb	r3, r3
 8002f76:	0011      	movs	r1, r2
 8002f78:	0018      	movs	r0, r3
 8002f7a:	f7ff ff5d 	bl	8002e38 <__NVIC_SetPriority>
}
 8002f7e:	46c0      	nop			; (mov r8, r8)
 8002f80:	46bd      	mov	sp, r7
 8002f82:	b004      	add	sp, #16
 8002f84:	bd80      	pop	{r7, pc}

08002f86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f86:	b580      	push	{r7, lr}
 8002f88:	b082      	sub	sp, #8
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	0002      	movs	r2, r0
 8002f8e:	1dfb      	adds	r3, r7, #7
 8002f90:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f92:	1dfb      	adds	r3, r7, #7
 8002f94:	781b      	ldrb	r3, [r3, #0]
 8002f96:	b25b      	sxtb	r3, r3
 8002f98:	0018      	movs	r0, r3
 8002f9a:	f7ff ff33 	bl	8002e04 <__NVIC_EnableIRQ>
}
 8002f9e:	46c0      	nop			; (mov r8, r8)
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	b002      	add	sp, #8
 8002fa4:	bd80      	pop	{r7, pc}

08002fa6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fa6:	b580      	push	{r7, lr}
 8002fa8:	b082      	sub	sp, #8
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	0018      	movs	r0, r3
 8002fb2:	f7ff ffaf 	bl	8002f14 <SysTick_Config>
 8002fb6:	0003      	movs	r3, r0
}
 8002fb8:	0018      	movs	r0, r3
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	b002      	add	sp, #8
 8002fbe:	bd80      	pop	{r7, pc}

08002fc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b086      	sub	sp, #24
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
 8002fc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fce:	e149      	b.n	8003264 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2101      	movs	r1, #1
 8002fd6:	697a      	ldr	r2, [r7, #20]
 8002fd8:	4091      	lsls	r1, r2
 8002fda:	000a      	movs	r2, r1
 8002fdc:	4013      	ands	r3, r2
 8002fde:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d100      	bne.n	8002fe8 <HAL_GPIO_Init+0x28>
 8002fe6:	e13a      	b.n	800325e <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	2b02      	cmp	r3, #2
 8002fee:	d003      	beq.n	8002ff8 <HAL_GPIO_Init+0x38>
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	2b12      	cmp	r3, #18
 8002ff6:	d123      	bne.n	8003040 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	08da      	lsrs	r2, r3, #3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	3208      	adds	r2, #8
 8003000:	0092      	lsls	r2, r2, #2
 8003002:	58d3      	ldr	r3, [r2, r3]
 8003004:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	2207      	movs	r2, #7
 800300a:	4013      	ands	r3, r2
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	220f      	movs	r2, #15
 8003010:	409a      	lsls	r2, r3
 8003012:	0013      	movs	r3, r2
 8003014:	43da      	mvns	r2, r3
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	4013      	ands	r3, r2
 800301a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	691a      	ldr	r2, [r3, #16]
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	2107      	movs	r1, #7
 8003024:	400b      	ands	r3, r1
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	409a      	lsls	r2, r3
 800302a:	0013      	movs	r3, r2
 800302c:	693a      	ldr	r2, [r7, #16]
 800302e:	4313      	orrs	r3, r2
 8003030:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	08da      	lsrs	r2, r3, #3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	3208      	adds	r2, #8
 800303a:	0092      	lsls	r2, r2, #2
 800303c:	6939      	ldr	r1, [r7, #16]
 800303e:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	005b      	lsls	r3, r3, #1
 800304a:	2203      	movs	r2, #3
 800304c:	409a      	lsls	r2, r3
 800304e:	0013      	movs	r3, r2
 8003050:	43da      	mvns	r2, r3
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	4013      	ands	r3, r2
 8003056:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	2203      	movs	r2, #3
 800305e:	401a      	ands	r2, r3
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	005b      	lsls	r3, r3, #1
 8003064:	409a      	lsls	r2, r3
 8003066:	0013      	movs	r3, r2
 8003068:	693a      	ldr	r2, [r7, #16]
 800306a:	4313      	orrs	r3, r2
 800306c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	693a      	ldr	r2, [r7, #16]
 8003072:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	2b01      	cmp	r3, #1
 800307a:	d00b      	beq.n	8003094 <HAL_GPIO_Init+0xd4>
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	2b02      	cmp	r3, #2
 8003082:	d007      	beq.n	8003094 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003088:	2b11      	cmp	r3, #17
 800308a:	d003      	beq.n	8003094 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	2b12      	cmp	r3, #18
 8003092:	d130      	bne.n	80030f6 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	005b      	lsls	r3, r3, #1
 800309e:	2203      	movs	r2, #3
 80030a0:	409a      	lsls	r2, r3
 80030a2:	0013      	movs	r3, r2
 80030a4:	43da      	mvns	r2, r3
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	4013      	ands	r3, r2
 80030aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	68da      	ldr	r2, [r3, #12]
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	005b      	lsls	r3, r3, #1
 80030b4:	409a      	lsls	r2, r3
 80030b6:	0013      	movs	r3, r2
 80030b8:	693a      	ldr	r2, [r7, #16]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	693a      	ldr	r2, [r7, #16]
 80030c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80030ca:	2201      	movs	r2, #1
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	409a      	lsls	r2, r3
 80030d0:	0013      	movs	r3, r2
 80030d2:	43da      	mvns	r2, r3
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	4013      	ands	r3, r2
 80030d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	091b      	lsrs	r3, r3, #4
 80030e0:	2201      	movs	r2, #1
 80030e2:	401a      	ands	r2, r3
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	409a      	lsls	r2, r3
 80030e8:	0013      	movs	r3, r2
 80030ea:	693a      	ldr	r2, [r7, #16]
 80030ec:	4313      	orrs	r3, r2
 80030ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	693a      	ldr	r2, [r7, #16]
 80030f4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	005b      	lsls	r3, r3, #1
 8003100:	2203      	movs	r2, #3
 8003102:	409a      	lsls	r2, r3
 8003104:	0013      	movs	r3, r2
 8003106:	43da      	mvns	r2, r3
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	4013      	ands	r3, r2
 800310c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	689a      	ldr	r2, [r3, #8]
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	005b      	lsls	r3, r3, #1
 8003116:	409a      	lsls	r2, r3
 8003118:	0013      	movs	r3, r2
 800311a:	693a      	ldr	r2, [r7, #16]
 800311c:	4313      	orrs	r3, r2
 800311e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	693a      	ldr	r2, [r7, #16]
 8003124:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	685a      	ldr	r2, [r3, #4]
 800312a:	2380      	movs	r3, #128	; 0x80
 800312c:	055b      	lsls	r3, r3, #21
 800312e:	4013      	ands	r3, r2
 8003130:	d100      	bne.n	8003134 <HAL_GPIO_Init+0x174>
 8003132:	e094      	b.n	800325e <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003134:	4b51      	ldr	r3, [pc, #324]	; (800327c <HAL_GPIO_Init+0x2bc>)
 8003136:	699a      	ldr	r2, [r3, #24]
 8003138:	4b50      	ldr	r3, [pc, #320]	; (800327c <HAL_GPIO_Init+0x2bc>)
 800313a:	2101      	movs	r1, #1
 800313c:	430a      	orrs	r2, r1
 800313e:	619a      	str	r2, [r3, #24]
 8003140:	4b4e      	ldr	r3, [pc, #312]	; (800327c <HAL_GPIO_Init+0x2bc>)
 8003142:	699b      	ldr	r3, [r3, #24]
 8003144:	2201      	movs	r2, #1
 8003146:	4013      	ands	r3, r2
 8003148:	60bb      	str	r3, [r7, #8]
 800314a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800314c:	4a4c      	ldr	r2, [pc, #304]	; (8003280 <HAL_GPIO_Init+0x2c0>)
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	089b      	lsrs	r3, r3, #2
 8003152:	3302      	adds	r3, #2
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	589b      	ldr	r3, [r3, r2]
 8003158:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	2203      	movs	r2, #3
 800315e:	4013      	ands	r3, r2
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	220f      	movs	r2, #15
 8003164:	409a      	lsls	r2, r3
 8003166:	0013      	movs	r3, r2
 8003168:	43da      	mvns	r2, r3
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	4013      	ands	r3, r2
 800316e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003170:	687a      	ldr	r2, [r7, #4]
 8003172:	2390      	movs	r3, #144	; 0x90
 8003174:	05db      	lsls	r3, r3, #23
 8003176:	429a      	cmp	r2, r3
 8003178:	d00d      	beq.n	8003196 <HAL_GPIO_Init+0x1d6>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4a41      	ldr	r2, [pc, #260]	; (8003284 <HAL_GPIO_Init+0x2c4>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d007      	beq.n	8003192 <HAL_GPIO_Init+0x1d2>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4a40      	ldr	r2, [pc, #256]	; (8003288 <HAL_GPIO_Init+0x2c8>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d101      	bne.n	800318e <HAL_GPIO_Init+0x1ce>
 800318a:	2302      	movs	r3, #2
 800318c:	e004      	b.n	8003198 <HAL_GPIO_Init+0x1d8>
 800318e:	2305      	movs	r3, #5
 8003190:	e002      	b.n	8003198 <HAL_GPIO_Init+0x1d8>
 8003192:	2301      	movs	r3, #1
 8003194:	e000      	b.n	8003198 <HAL_GPIO_Init+0x1d8>
 8003196:	2300      	movs	r3, #0
 8003198:	697a      	ldr	r2, [r7, #20]
 800319a:	2103      	movs	r1, #3
 800319c:	400a      	ands	r2, r1
 800319e:	0092      	lsls	r2, r2, #2
 80031a0:	4093      	lsls	r3, r2
 80031a2:	693a      	ldr	r2, [r7, #16]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80031a8:	4935      	ldr	r1, [pc, #212]	; (8003280 <HAL_GPIO_Init+0x2c0>)
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	089b      	lsrs	r3, r3, #2
 80031ae:	3302      	adds	r3, #2
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	693a      	ldr	r2, [r7, #16]
 80031b4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031b6:	4b35      	ldr	r3, [pc, #212]	; (800328c <HAL_GPIO_Init+0x2cc>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	43da      	mvns	r2, r3
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	4013      	ands	r3, r2
 80031c4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	685a      	ldr	r2, [r3, #4]
 80031ca:	2380      	movs	r3, #128	; 0x80
 80031cc:	025b      	lsls	r3, r3, #9
 80031ce:	4013      	ands	r3, r2
 80031d0:	d003      	beq.n	80031da <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80031d2:	693a      	ldr	r2, [r7, #16]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	4313      	orrs	r3, r2
 80031d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80031da:	4b2c      	ldr	r3, [pc, #176]	; (800328c <HAL_GPIO_Init+0x2cc>)
 80031dc:	693a      	ldr	r2, [r7, #16]
 80031de:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80031e0:	4b2a      	ldr	r3, [pc, #168]	; (800328c <HAL_GPIO_Init+0x2cc>)
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	43da      	mvns	r2, r3
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	4013      	ands	r3, r2
 80031ee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	685a      	ldr	r2, [r3, #4]
 80031f4:	2380      	movs	r3, #128	; 0x80
 80031f6:	029b      	lsls	r3, r3, #10
 80031f8:	4013      	ands	r3, r2
 80031fa:	d003      	beq.n	8003204 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 80031fc:	693a      	ldr	r2, [r7, #16]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	4313      	orrs	r3, r2
 8003202:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003204:	4b21      	ldr	r3, [pc, #132]	; (800328c <HAL_GPIO_Init+0x2cc>)
 8003206:	693a      	ldr	r2, [r7, #16]
 8003208:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800320a:	4b20      	ldr	r3, [pc, #128]	; (800328c <HAL_GPIO_Init+0x2cc>)
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	43da      	mvns	r2, r3
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	4013      	ands	r3, r2
 8003218:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	685a      	ldr	r2, [r3, #4]
 800321e:	2380      	movs	r3, #128	; 0x80
 8003220:	035b      	lsls	r3, r3, #13
 8003222:	4013      	ands	r3, r2
 8003224:	d003      	beq.n	800322e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8003226:	693a      	ldr	r2, [r7, #16]
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	4313      	orrs	r3, r2
 800322c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800322e:	4b17      	ldr	r3, [pc, #92]	; (800328c <HAL_GPIO_Init+0x2cc>)
 8003230:	693a      	ldr	r2, [r7, #16]
 8003232:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003234:	4b15      	ldr	r3, [pc, #84]	; (800328c <HAL_GPIO_Init+0x2cc>)
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	43da      	mvns	r2, r3
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	4013      	ands	r3, r2
 8003242:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	685a      	ldr	r2, [r3, #4]
 8003248:	2380      	movs	r3, #128	; 0x80
 800324a:	039b      	lsls	r3, r3, #14
 800324c:	4013      	ands	r3, r2
 800324e:	d003      	beq.n	8003258 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8003250:	693a      	ldr	r2, [r7, #16]
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	4313      	orrs	r3, r2
 8003256:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003258:	4b0c      	ldr	r3, [pc, #48]	; (800328c <HAL_GPIO_Init+0x2cc>)
 800325a:	693a      	ldr	r2, [r7, #16]
 800325c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	3301      	adds	r3, #1
 8003262:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	40da      	lsrs	r2, r3
 800326c:	1e13      	subs	r3, r2, #0
 800326e:	d000      	beq.n	8003272 <HAL_GPIO_Init+0x2b2>
 8003270:	e6ae      	b.n	8002fd0 <HAL_GPIO_Init+0x10>
  } 
}
 8003272:	46c0      	nop			; (mov r8, r8)
 8003274:	46bd      	mov	sp, r7
 8003276:	b006      	add	sp, #24
 8003278:	bd80      	pop	{r7, pc}
 800327a:	46c0      	nop			; (mov r8, r8)
 800327c:	40021000 	.word	0x40021000
 8003280:	40010000 	.word	0x40010000
 8003284:	48000400 	.word	0x48000400
 8003288:	48000800 	.word	0x48000800
 800328c:	40010400 	.word	0x40010400

08003290 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b084      	sub	sp, #16
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	000a      	movs	r2, r1
 800329a:	1cbb      	adds	r3, r7, #2
 800329c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	691b      	ldr	r3, [r3, #16]
 80032a2:	1cba      	adds	r2, r7, #2
 80032a4:	8812      	ldrh	r2, [r2, #0]
 80032a6:	4013      	ands	r3, r2
 80032a8:	d004      	beq.n	80032b4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80032aa:	230f      	movs	r3, #15
 80032ac:	18fb      	adds	r3, r7, r3
 80032ae:	2201      	movs	r2, #1
 80032b0:	701a      	strb	r2, [r3, #0]
 80032b2:	e003      	b.n	80032bc <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80032b4:	230f      	movs	r3, #15
 80032b6:	18fb      	adds	r3, r7, r3
 80032b8:	2200      	movs	r2, #0
 80032ba:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80032bc:	230f      	movs	r3, #15
 80032be:	18fb      	adds	r3, r7, r3
 80032c0:	781b      	ldrb	r3, [r3, #0]
  }
 80032c2:	0018      	movs	r0, r3
 80032c4:	46bd      	mov	sp, r7
 80032c6:	b004      	add	sp, #16
 80032c8:	bd80      	pop	{r7, pc}

080032ca <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032ca:	b580      	push	{r7, lr}
 80032cc:	b082      	sub	sp, #8
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	6078      	str	r0, [r7, #4]
 80032d2:	0008      	movs	r0, r1
 80032d4:	0011      	movs	r1, r2
 80032d6:	1cbb      	adds	r3, r7, #2
 80032d8:	1c02      	adds	r2, r0, #0
 80032da:	801a      	strh	r2, [r3, #0]
 80032dc:	1c7b      	adds	r3, r7, #1
 80032de:	1c0a      	adds	r2, r1, #0
 80032e0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80032e2:	1c7b      	adds	r3, r7, #1
 80032e4:	781b      	ldrb	r3, [r3, #0]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d004      	beq.n	80032f4 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80032ea:	1cbb      	adds	r3, r7, #2
 80032ec:	881a      	ldrh	r2, [r3, #0]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80032f2:	e003      	b.n	80032fc <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80032f4:	1cbb      	adds	r3, r7, #2
 80032f6:	881a      	ldrh	r2, [r3, #0]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80032fc:	46c0      	nop			; (mov r8, r8)
 80032fe:	46bd      	mov	sp, r7
 8003300:	b002      	add	sp, #8
 8003302:	bd80      	pop	{r7, pc}

08003304 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b082      	sub	sp, #8
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d101      	bne.n	8003316 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e082      	b.n	800341c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2241      	movs	r2, #65	; 0x41
 800331a:	5c9b      	ldrb	r3, [r3, r2]
 800331c:	b2db      	uxtb	r3, r3
 800331e:	2b00      	cmp	r3, #0
 8003320:	d107      	bne.n	8003332 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2240      	movs	r2, #64	; 0x40
 8003326:	2100      	movs	r1, #0
 8003328:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	0018      	movs	r0, r3
 800332e:	f7ff f839 	bl	80023a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2241      	movs	r2, #65	; 0x41
 8003336:	2124      	movs	r1, #36	; 0x24
 8003338:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	2101      	movs	r1, #1
 8003346:	438a      	bics	r2, r1
 8003348:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	685a      	ldr	r2, [r3, #4]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4934      	ldr	r1, [pc, #208]	; (8003424 <HAL_I2C_Init+0x120>)
 8003354:	400a      	ands	r2, r1
 8003356:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	689a      	ldr	r2, [r3, #8]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4931      	ldr	r1, [pc, #196]	; (8003428 <HAL_I2C_Init+0x124>)
 8003364:	400a      	ands	r2, r1
 8003366:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	2b01      	cmp	r3, #1
 800336e:	d108      	bne.n	8003382 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	689a      	ldr	r2, [r3, #8]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	2180      	movs	r1, #128	; 0x80
 800337a:	0209      	lsls	r1, r1, #8
 800337c:	430a      	orrs	r2, r1
 800337e:	609a      	str	r2, [r3, #8]
 8003380:	e007      	b.n	8003392 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	689a      	ldr	r2, [r3, #8]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	2184      	movs	r1, #132	; 0x84
 800338c:	0209      	lsls	r1, r1, #8
 800338e:	430a      	orrs	r2, r1
 8003390:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	68db      	ldr	r3, [r3, #12]
 8003396:	2b02      	cmp	r3, #2
 8003398:	d104      	bne.n	80033a4 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	2280      	movs	r2, #128	; 0x80
 80033a0:	0112      	lsls	r2, r2, #4
 80033a2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	685a      	ldr	r2, [r3, #4]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	491f      	ldr	r1, [pc, #124]	; (800342c <HAL_I2C_Init+0x128>)
 80033b0:	430a      	orrs	r2, r1
 80033b2:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	68da      	ldr	r2, [r3, #12]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	491a      	ldr	r1, [pc, #104]	; (8003428 <HAL_I2C_Init+0x124>)
 80033c0:	400a      	ands	r2, r1
 80033c2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	691a      	ldr	r2, [r3, #16]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	695b      	ldr	r3, [r3, #20]
 80033cc:	431a      	orrs	r2, r3
 80033ce:	0011      	movs	r1, r2
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	699b      	ldr	r3, [r3, #24]
 80033d4:	021a      	lsls	r2, r3, #8
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	430a      	orrs	r2, r1
 80033dc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	69d9      	ldr	r1, [r3, #28]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6a1a      	ldr	r2, [r3, #32]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	430a      	orrs	r2, r1
 80033ec:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	2101      	movs	r1, #1
 80033fa:	430a      	orrs	r2, r1
 80033fc:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2200      	movs	r2, #0
 8003402:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2241      	movs	r2, #65	; 0x41
 8003408:	2120      	movs	r1, #32
 800340a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2200      	movs	r2, #0
 8003410:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2242      	movs	r2, #66	; 0x42
 8003416:	2100      	movs	r1, #0
 8003418:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800341a:	2300      	movs	r3, #0
}
 800341c:	0018      	movs	r0, r3
 800341e:	46bd      	mov	sp, r7
 8003420:	b002      	add	sp, #8
 8003422:	bd80      	pop	{r7, pc}
 8003424:	f0ffffff 	.word	0xf0ffffff
 8003428:	ffff7fff 	.word	0xffff7fff
 800342c:	02008000 	.word	0x02008000

08003430 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003430:	b590      	push	{r4, r7, lr}
 8003432:	b089      	sub	sp, #36	; 0x24
 8003434:	af02      	add	r7, sp, #8
 8003436:	60f8      	str	r0, [r7, #12]
 8003438:	000c      	movs	r4, r1
 800343a:	0010      	movs	r0, r2
 800343c:	0019      	movs	r1, r3
 800343e:	230a      	movs	r3, #10
 8003440:	18fb      	adds	r3, r7, r3
 8003442:	1c22      	adds	r2, r4, #0
 8003444:	801a      	strh	r2, [r3, #0]
 8003446:	2308      	movs	r3, #8
 8003448:	18fb      	adds	r3, r7, r3
 800344a:	1c02      	adds	r2, r0, #0
 800344c:	801a      	strh	r2, [r3, #0]
 800344e:	1dbb      	adds	r3, r7, #6
 8003450:	1c0a      	adds	r2, r1, #0
 8003452:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2241      	movs	r2, #65	; 0x41
 8003458:	5c9b      	ldrb	r3, [r3, r2]
 800345a:	b2db      	uxtb	r3, r3
 800345c:	2b20      	cmp	r3, #32
 800345e:	d000      	beq.n	8003462 <HAL_I2C_Mem_Write+0x32>
 8003460:	e10c      	b.n	800367c <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003464:	2b00      	cmp	r3, #0
 8003466:	d004      	beq.n	8003472 <HAL_I2C_Mem_Write+0x42>
 8003468:	232c      	movs	r3, #44	; 0x2c
 800346a:	18fb      	adds	r3, r7, r3
 800346c:	881b      	ldrh	r3, [r3, #0]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d105      	bne.n	800347e <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2280      	movs	r2, #128	; 0x80
 8003476:	0092      	lsls	r2, r2, #2
 8003478:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e0ff      	b.n	800367e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2240      	movs	r2, #64	; 0x40
 8003482:	5c9b      	ldrb	r3, [r3, r2]
 8003484:	2b01      	cmp	r3, #1
 8003486:	d101      	bne.n	800348c <HAL_I2C_Mem_Write+0x5c>
 8003488:	2302      	movs	r3, #2
 800348a:	e0f8      	b.n	800367e <HAL_I2C_Mem_Write+0x24e>
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2240      	movs	r2, #64	; 0x40
 8003490:	2101      	movs	r1, #1
 8003492:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003494:	f7ff f974 	bl	8002780 <HAL_GetTick>
 8003498:	0003      	movs	r3, r0
 800349a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800349c:	2380      	movs	r3, #128	; 0x80
 800349e:	0219      	lsls	r1, r3, #8
 80034a0:	68f8      	ldr	r0, [r7, #12]
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	9300      	str	r3, [sp, #0]
 80034a6:	2319      	movs	r3, #25
 80034a8:	2201      	movs	r2, #1
 80034aa:	f000 fb0b 	bl	8003ac4 <I2C_WaitOnFlagUntilTimeout>
 80034ae:	1e03      	subs	r3, r0, #0
 80034b0:	d001      	beq.n	80034b6 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e0e3      	b.n	800367e <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2241      	movs	r2, #65	; 0x41
 80034ba:	2121      	movs	r1, #33	; 0x21
 80034bc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2242      	movs	r2, #66	; 0x42
 80034c2:	2140      	movs	r1, #64	; 0x40
 80034c4:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2200      	movs	r2, #0
 80034ca:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80034d0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	222c      	movs	r2, #44	; 0x2c
 80034d6:	18ba      	adds	r2, r7, r2
 80034d8:	8812      	ldrh	r2, [r2, #0]
 80034da:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2200      	movs	r2, #0
 80034e0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80034e2:	1dbb      	adds	r3, r7, #6
 80034e4:	881c      	ldrh	r4, [r3, #0]
 80034e6:	2308      	movs	r3, #8
 80034e8:	18fb      	adds	r3, r7, r3
 80034ea:	881a      	ldrh	r2, [r3, #0]
 80034ec:	230a      	movs	r3, #10
 80034ee:	18fb      	adds	r3, r7, r3
 80034f0:	8819      	ldrh	r1, [r3, #0]
 80034f2:	68f8      	ldr	r0, [r7, #12]
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	9301      	str	r3, [sp, #4]
 80034f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034fa:	9300      	str	r3, [sp, #0]
 80034fc:	0023      	movs	r3, r4
 80034fe:	f000 f9f9 	bl	80038f4 <I2C_RequestMemoryWrite>
 8003502:	1e03      	subs	r3, r0, #0
 8003504:	d005      	beq.n	8003512 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2240      	movs	r2, #64	; 0x40
 800350a:	2100      	movs	r1, #0
 800350c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e0b5      	b.n	800367e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003516:	b29b      	uxth	r3, r3
 8003518:	2bff      	cmp	r3, #255	; 0xff
 800351a:	d911      	bls.n	8003540 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	22ff      	movs	r2, #255	; 0xff
 8003520:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003526:	b2da      	uxtb	r2, r3
 8003528:	2380      	movs	r3, #128	; 0x80
 800352a:	045c      	lsls	r4, r3, #17
 800352c:	230a      	movs	r3, #10
 800352e:	18fb      	adds	r3, r7, r3
 8003530:	8819      	ldrh	r1, [r3, #0]
 8003532:	68f8      	ldr	r0, [r7, #12]
 8003534:	2300      	movs	r3, #0
 8003536:	9300      	str	r3, [sp, #0]
 8003538:	0023      	movs	r3, r4
 800353a:	f000 fbe3 	bl	8003d04 <I2C_TransferConfig>
 800353e:	e012      	b.n	8003566 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003544:	b29a      	uxth	r2, r3
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800354e:	b2da      	uxtb	r2, r3
 8003550:	2380      	movs	r3, #128	; 0x80
 8003552:	049c      	lsls	r4, r3, #18
 8003554:	230a      	movs	r3, #10
 8003556:	18fb      	adds	r3, r7, r3
 8003558:	8819      	ldrh	r1, [r3, #0]
 800355a:	68f8      	ldr	r0, [r7, #12]
 800355c:	2300      	movs	r3, #0
 800355e:	9300      	str	r3, [sp, #0]
 8003560:	0023      	movs	r3, r4
 8003562:	f000 fbcf 	bl	8003d04 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003566:	697a      	ldr	r2, [r7, #20]
 8003568:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	0018      	movs	r0, r3
 800356e:	f000 fae8 	bl	8003b42 <I2C_WaitOnTXISFlagUntilTimeout>
 8003572:	1e03      	subs	r3, r0, #0
 8003574:	d001      	beq.n	800357a <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e081      	b.n	800367e <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357e:	781a      	ldrb	r2, [r3, #0]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800358a:	1c5a      	adds	r2, r3, #1
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003594:	b29b      	uxth	r3, r3
 8003596:	3b01      	subs	r3, #1
 8003598:	b29a      	uxth	r2, r3
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035a2:	3b01      	subs	r3, #1
 80035a4:	b29a      	uxth	r2, r3
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035ae:	b29b      	uxth	r3, r3
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d03a      	beq.n	800362a <HAL_I2C_Mem_Write+0x1fa>
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d136      	bne.n	800362a <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80035bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035be:	68f8      	ldr	r0, [r7, #12]
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	9300      	str	r3, [sp, #0]
 80035c4:	0013      	movs	r3, r2
 80035c6:	2200      	movs	r2, #0
 80035c8:	2180      	movs	r1, #128	; 0x80
 80035ca:	f000 fa7b 	bl	8003ac4 <I2C_WaitOnFlagUntilTimeout>
 80035ce:	1e03      	subs	r3, r0, #0
 80035d0:	d001      	beq.n	80035d6 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e053      	b.n	800367e <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035da:	b29b      	uxth	r3, r3
 80035dc:	2bff      	cmp	r3, #255	; 0xff
 80035de:	d911      	bls.n	8003604 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	22ff      	movs	r2, #255	; 0xff
 80035e4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035ea:	b2da      	uxtb	r2, r3
 80035ec:	2380      	movs	r3, #128	; 0x80
 80035ee:	045c      	lsls	r4, r3, #17
 80035f0:	230a      	movs	r3, #10
 80035f2:	18fb      	adds	r3, r7, r3
 80035f4:	8819      	ldrh	r1, [r3, #0]
 80035f6:	68f8      	ldr	r0, [r7, #12]
 80035f8:	2300      	movs	r3, #0
 80035fa:	9300      	str	r3, [sp, #0]
 80035fc:	0023      	movs	r3, r4
 80035fe:	f000 fb81 	bl	8003d04 <I2C_TransferConfig>
 8003602:	e012      	b.n	800362a <HAL_I2C_Mem_Write+0x1fa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003608:	b29a      	uxth	r2, r3
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003612:	b2da      	uxtb	r2, r3
 8003614:	2380      	movs	r3, #128	; 0x80
 8003616:	049c      	lsls	r4, r3, #18
 8003618:	230a      	movs	r3, #10
 800361a:	18fb      	adds	r3, r7, r3
 800361c:	8819      	ldrh	r1, [r3, #0]
 800361e:	68f8      	ldr	r0, [r7, #12]
 8003620:	2300      	movs	r3, #0
 8003622:	9300      	str	r3, [sp, #0]
 8003624:	0023      	movs	r3, r4
 8003626:	f000 fb6d 	bl	8003d04 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800362e:	b29b      	uxth	r3, r3
 8003630:	2b00      	cmp	r3, #0
 8003632:	d198      	bne.n	8003566 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003634:	697a      	ldr	r2, [r7, #20]
 8003636:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	0018      	movs	r0, r3
 800363c:	f000 fac0 	bl	8003bc0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003640:	1e03      	subs	r3, r0, #0
 8003642:	d001      	beq.n	8003648 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e01a      	b.n	800367e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	2220      	movs	r2, #32
 800364e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	685a      	ldr	r2, [r3, #4]
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	490b      	ldr	r1, [pc, #44]	; (8003688 <HAL_I2C_Mem_Write+0x258>)
 800365c:	400a      	ands	r2, r1
 800365e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2241      	movs	r2, #65	; 0x41
 8003664:	2120      	movs	r1, #32
 8003666:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2242      	movs	r2, #66	; 0x42
 800366c:	2100      	movs	r1, #0
 800366e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2240      	movs	r2, #64	; 0x40
 8003674:	2100      	movs	r1, #0
 8003676:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003678:	2300      	movs	r3, #0
 800367a:	e000      	b.n	800367e <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 800367c:	2302      	movs	r3, #2
  }
}
 800367e:	0018      	movs	r0, r3
 8003680:	46bd      	mov	sp, r7
 8003682:	b007      	add	sp, #28
 8003684:	bd90      	pop	{r4, r7, pc}
 8003686:	46c0      	nop			; (mov r8, r8)
 8003688:	fe00e800 	.word	0xfe00e800

0800368c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800368c:	b590      	push	{r4, r7, lr}
 800368e:	b089      	sub	sp, #36	; 0x24
 8003690:	af02      	add	r7, sp, #8
 8003692:	60f8      	str	r0, [r7, #12]
 8003694:	000c      	movs	r4, r1
 8003696:	0010      	movs	r0, r2
 8003698:	0019      	movs	r1, r3
 800369a:	230a      	movs	r3, #10
 800369c:	18fb      	adds	r3, r7, r3
 800369e:	1c22      	adds	r2, r4, #0
 80036a0:	801a      	strh	r2, [r3, #0]
 80036a2:	2308      	movs	r3, #8
 80036a4:	18fb      	adds	r3, r7, r3
 80036a6:	1c02      	adds	r2, r0, #0
 80036a8:	801a      	strh	r2, [r3, #0]
 80036aa:	1dbb      	adds	r3, r7, #6
 80036ac:	1c0a      	adds	r2, r1, #0
 80036ae:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2241      	movs	r2, #65	; 0x41
 80036b4:	5c9b      	ldrb	r3, [r3, r2]
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	2b20      	cmp	r3, #32
 80036ba:	d000      	beq.n	80036be <HAL_I2C_Mem_Read+0x32>
 80036bc:	e110      	b.n	80038e0 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 80036be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d004      	beq.n	80036ce <HAL_I2C_Mem_Read+0x42>
 80036c4:	232c      	movs	r3, #44	; 0x2c
 80036c6:	18fb      	adds	r3, r7, r3
 80036c8:	881b      	ldrh	r3, [r3, #0]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d105      	bne.n	80036da <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2280      	movs	r2, #128	; 0x80
 80036d2:	0092      	lsls	r2, r2, #2
 80036d4:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e103      	b.n	80038e2 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2240      	movs	r2, #64	; 0x40
 80036de:	5c9b      	ldrb	r3, [r3, r2]
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d101      	bne.n	80036e8 <HAL_I2C_Mem_Read+0x5c>
 80036e4:	2302      	movs	r3, #2
 80036e6:	e0fc      	b.n	80038e2 <HAL_I2C_Mem_Read+0x256>
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2240      	movs	r2, #64	; 0x40
 80036ec:	2101      	movs	r1, #1
 80036ee:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80036f0:	f7ff f846 	bl	8002780 <HAL_GetTick>
 80036f4:	0003      	movs	r3, r0
 80036f6:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80036f8:	2380      	movs	r3, #128	; 0x80
 80036fa:	0219      	lsls	r1, r3, #8
 80036fc:	68f8      	ldr	r0, [r7, #12]
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	9300      	str	r3, [sp, #0]
 8003702:	2319      	movs	r3, #25
 8003704:	2201      	movs	r2, #1
 8003706:	f000 f9dd 	bl	8003ac4 <I2C_WaitOnFlagUntilTimeout>
 800370a:	1e03      	subs	r3, r0, #0
 800370c:	d001      	beq.n	8003712 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e0e7      	b.n	80038e2 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2241      	movs	r2, #65	; 0x41
 8003716:	2122      	movs	r1, #34	; 0x22
 8003718:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2242      	movs	r2, #66	; 0x42
 800371e:	2140      	movs	r1, #64	; 0x40
 8003720:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2200      	movs	r2, #0
 8003726:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800372c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	222c      	movs	r2, #44	; 0x2c
 8003732:	18ba      	adds	r2, r7, r2
 8003734:	8812      	ldrh	r2, [r2, #0]
 8003736:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2200      	movs	r2, #0
 800373c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800373e:	1dbb      	adds	r3, r7, #6
 8003740:	881c      	ldrh	r4, [r3, #0]
 8003742:	2308      	movs	r3, #8
 8003744:	18fb      	adds	r3, r7, r3
 8003746:	881a      	ldrh	r2, [r3, #0]
 8003748:	230a      	movs	r3, #10
 800374a:	18fb      	adds	r3, r7, r3
 800374c:	8819      	ldrh	r1, [r3, #0]
 800374e:	68f8      	ldr	r0, [r7, #12]
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	9301      	str	r3, [sp, #4]
 8003754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003756:	9300      	str	r3, [sp, #0]
 8003758:	0023      	movs	r3, r4
 800375a:	f000 f92f 	bl	80039bc <I2C_RequestMemoryRead>
 800375e:	1e03      	subs	r3, r0, #0
 8003760:	d005      	beq.n	800376e <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2240      	movs	r2, #64	; 0x40
 8003766:	2100      	movs	r1, #0
 8003768:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e0b9      	b.n	80038e2 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003772:	b29b      	uxth	r3, r3
 8003774:	2bff      	cmp	r3, #255	; 0xff
 8003776:	d911      	bls.n	800379c <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	22ff      	movs	r2, #255	; 0xff
 800377c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003782:	b2da      	uxtb	r2, r3
 8003784:	2380      	movs	r3, #128	; 0x80
 8003786:	045c      	lsls	r4, r3, #17
 8003788:	230a      	movs	r3, #10
 800378a:	18fb      	adds	r3, r7, r3
 800378c:	8819      	ldrh	r1, [r3, #0]
 800378e:	68f8      	ldr	r0, [r7, #12]
 8003790:	4b56      	ldr	r3, [pc, #344]	; (80038ec <HAL_I2C_Mem_Read+0x260>)
 8003792:	9300      	str	r3, [sp, #0]
 8003794:	0023      	movs	r3, r4
 8003796:	f000 fab5 	bl	8003d04 <I2C_TransferConfig>
 800379a:	e012      	b.n	80037c2 <HAL_I2C_Mem_Read+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037a0:	b29a      	uxth	r2, r3
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037aa:	b2da      	uxtb	r2, r3
 80037ac:	2380      	movs	r3, #128	; 0x80
 80037ae:	049c      	lsls	r4, r3, #18
 80037b0:	230a      	movs	r3, #10
 80037b2:	18fb      	adds	r3, r7, r3
 80037b4:	8819      	ldrh	r1, [r3, #0]
 80037b6:	68f8      	ldr	r0, [r7, #12]
 80037b8:	4b4c      	ldr	r3, [pc, #304]	; (80038ec <HAL_I2C_Mem_Read+0x260>)
 80037ba:	9300      	str	r3, [sp, #0]
 80037bc:	0023      	movs	r3, r4
 80037be:	f000 faa1 	bl	8003d04 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80037c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037c4:	68f8      	ldr	r0, [r7, #12]
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	9300      	str	r3, [sp, #0]
 80037ca:	0013      	movs	r3, r2
 80037cc:	2200      	movs	r2, #0
 80037ce:	2104      	movs	r1, #4
 80037d0:	f000 f978 	bl	8003ac4 <I2C_WaitOnFlagUntilTimeout>
 80037d4:	1e03      	subs	r3, r0, #0
 80037d6:	d001      	beq.n	80037dc <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	e082      	b.n	80038e2 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e6:	b2d2      	uxtb	r2, r2
 80037e8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ee:	1c5a      	adds	r2, r3, #1
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037f8:	3b01      	subs	r3, #1
 80037fa:	b29a      	uxth	r2, r3
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003804:	b29b      	uxth	r3, r3
 8003806:	3b01      	subs	r3, #1
 8003808:	b29a      	uxth	r2, r3
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003812:	b29b      	uxth	r3, r3
 8003814:	2b00      	cmp	r3, #0
 8003816:	d03a      	beq.n	800388e <HAL_I2C_Mem_Read+0x202>
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800381c:	2b00      	cmp	r3, #0
 800381e:	d136      	bne.n	800388e <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003820:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003822:	68f8      	ldr	r0, [r7, #12]
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	9300      	str	r3, [sp, #0]
 8003828:	0013      	movs	r3, r2
 800382a:	2200      	movs	r2, #0
 800382c:	2180      	movs	r1, #128	; 0x80
 800382e:	f000 f949 	bl	8003ac4 <I2C_WaitOnFlagUntilTimeout>
 8003832:	1e03      	subs	r3, r0, #0
 8003834:	d001      	beq.n	800383a <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e053      	b.n	80038e2 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800383e:	b29b      	uxth	r3, r3
 8003840:	2bff      	cmp	r3, #255	; 0xff
 8003842:	d911      	bls.n	8003868 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	22ff      	movs	r2, #255	; 0xff
 8003848:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800384e:	b2da      	uxtb	r2, r3
 8003850:	2380      	movs	r3, #128	; 0x80
 8003852:	045c      	lsls	r4, r3, #17
 8003854:	230a      	movs	r3, #10
 8003856:	18fb      	adds	r3, r7, r3
 8003858:	8819      	ldrh	r1, [r3, #0]
 800385a:	68f8      	ldr	r0, [r7, #12]
 800385c:	2300      	movs	r3, #0
 800385e:	9300      	str	r3, [sp, #0]
 8003860:	0023      	movs	r3, r4
 8003862:	f000 fa4f 	bl	8003d04 <I2C_TransferConfig>
 8003866:	e012      	b.n	800388e <HAL_I2C_Mem_Read+0x202>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800386c:	b29a      	uxth	r2, r3
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003876:	b2da      	uxtb	r2, r3
 8003878:	2380      	movs	r3, #128	; 0x80
 800387a:	049c      	lsls	r4, r3, #18
 800387c:	230a      	movs	r3, #10
 800387e:	18fb      	adds	r3, r7, r3
 8003880:	8819      	ldrh	r1, [r3, #0]
 8003882:	68f8      	ldr	r0, [r7, #12]
 8003884:	2300      	movs	r3, #0
 8003886:	9300      	str	r3, [sp, #0]
 8003888:	0023      	movs	r3, r4
 800388a:	f000 fa3b 	bl	8003d04 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003892:	b29b      	uxth	r3, r3
 8003894:	2b00      	cmp	r3, #0
 8003896:	d194      	bne.n	80037c2 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003898:	697a      	ldr	r2, [r7, #20]
 800389a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	0018      	movs	r0, r3
 80038a0:	f000 f98e 	bl	8003bc0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80038a4:	1e03      	subs	r3, r0, #0
 80038a6:	d001      	beq.n	80038ac <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	e01a      	b.n	80038e2 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	2220      	movs	r2, #32
 80038b2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	685a      	ldr	r2, [r3, #4]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	490c      	ldr	r1, [pc, #48]	; (80038f0 <HAL_I2C_Mem_Read+0x264>)
 80038c0:	400a      	ands	r2, r1
 80038c2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2241      	movs	r2, #65	; 0x41
 80038c8:	2120      	movs	r1, #32
 80038ca:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2242      	movs	r2, #66	; 0x42
 80038d0:	2100      	movs	r1, #0
 80038d2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2240      	movs	r2, #64	; 0x40
 80038d8:	2100      	movs	r1, #0
 80038da:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80038dc:	2300      	movs	r3, #0
 80038de:	e000      	b.n	80038e2 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 80038e0:	2302      	movs	r3, #2
  }
}
 80038e2:	0018      	movs	r0, r3
 80038e4:	46bd      	mov	sp, r7
 80038e6:	b007      	add	sp, #28
 80038e8:	bd90      	pop	{r4, r7, pc}
 80038ea:	46c0      	nop			; (mov r8, r8)
 80038ec:	80002400 	.word	0x80002400
 80038f0:	fe00e800 	.word	0xfe00e800

080038f4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80038f4:	b5b0      	push	{r4, r5, r7, lr}
 80038f6:	b086      	sub	sp, #24
 80038f8:	af02      	add	r7, sp, #8
 80038fa:	60f8      	str	r0, [r7, #12]
 80038fc:	000c      	movs	r4, r1
 80038fe:	0010      	movs	r0, r2
 8003900:	0019      	movs	r1, r3
 8003902:	250a      	movs	r5, #10
 8003904:	197b      	adds	r3, r7, r5
 8003906:	1c22      	adds	r2, r4, #0
 8003908:	801a      	strh	r2, [r3, #0]
 800390a:	2308      	movs	r3, #8
 800390c:	18fb      	adds	r3, r7, r3
 800390e:	1c02      	adds	r2, r0, #0
 8003910:	801a      	strh	r2, [r3, #0]
 8003912:	1dbb      	adds	r3, r7, #6
 8003914:	1c0a      	adds	r2, r1, #0
 8003916:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003918:	1dbb      	adds	r3, r7, #6
 800391a:	881b      	ldrh	r3, [r3, #0]
 800391c:	b2da      	uxtb	r2, r3
 800391e:	2380      	movs	r3, #128	; 0x80
 8003920:	045c      	lsls	r4, r3, #17
 8003922:	197b      	adds	r3, r7, r5
 8003924:	8819      	ldrh	r1, [r3, #0]
 8003926:	68f8      	ldr	r0, [r7, #12]
 8003928:	4b23      	ldr	r3, [pc, #140]	; (80039b8 <I2C_RequestMemoryWrite+0xc4>)
 800392a:	9300      	str	r3, [sp, #0]
 800392c:	0023      	movs	r3, r4
 800392e:	f000 f9e9 	bl	8003d04 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003932:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003934:	6a39      	ldr	r1, [r7, #32]
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	0018      	movs	r0, r3
 800393a:	f000 f902 	bl	8003b42 <I2C_WaitOnTXISFlagUntilTimeout>
 800393e:	1e03      	subs	r3, r0, #0
 8003940:	d001      	beq.n	8003946 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e033      	b.n	80039ae <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003946:	1dbb      	adds	r3, r7, #6
 8003948:	881b      	ldrh	r3, [r3, #0]
 800394a:	2b01      	cmp	r3, #1
 800394c:	d107      	bne.n	800395e <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800394e:	2308      	movs	r3, #8
 8003950:	18fb      	adds	r3, r7, r3
 8003952:	881b      	ldrh	r3, [r3, #0]
 8003954:	b2da      	uxtb	r2, r3
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	629a      	str	r2, [r3, #40]	; 0x28
 800395c:	e019      	b.n	8003992 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800395e:	2308      	movs	r3, #8
 8003960:	18fb      	adds	r3, r7, r3
 8003962:	881b      	ldrh	r3, [r3, #0]
 8003964:	0a1b      	lsrs	r3, r3, #8
 8003966:	b29b      	uxth	r3, r3
 8003968:	b2da      	uxtb	r2, r3
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003970:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003972:	6a39      	ldr	r1, [r7, #32]
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	0018      	movs	r0, r3
 8003978:	f000 f8e3 	bl	8003b42 <I2C_WaitOnTXISFlagUntilTimeout>
 800397c:	1e03      	subs	r3, r0, #0
 800397e:	d001      	beq.n	8003984 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e014      	b.n	80039ae <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003984:	2308      	movs	r3, #8
 8003986:	18fb      	adds	r3, r7, r3
 8003988:	881b      	ldrh	r3, [r3, #0]
 800398a:	b2da      	uxtb	r2, r3
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003992:	6a3a      	ldr	r2, [r7, #32]
 8003994:	68f8      	ldr	r0, [r7, #12]
 8003996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003998:	9300      	str	r3, [sp, #0]
 800399a:	0013      	movs	r3, r2
 800399c:	2200      	movs	r2, #0
 800399e:	2180      	movs	r1, #128	; 0x80
 80039a0:	f000 f890 	bl	8003ac4 <I2C_WaitOnFlagUntilTimeout>
 80039a4:	1e03      	subs	r3, r0, #0
 80039a6:	d001      	beq.n	80039ac <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	e000      	b.n	80039ae <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 80039ac:	2300      	movs	r3, #0
}
 80039ae:	0018      	movs	r0, r3
 80039b0:	46bd      	mov	sp, r7
 80039b2:	b004      	add	sp, #16
 80039b4:	bdb0      	pop	{r4, r5, r7, pc}
 80039b6:	46c0      	nop			; (mov r8, r8)
 80039b8:	80002000 	.word	0x80002000

080039bc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80039bc:	b5b0      	push	{r4, r5, r7, lr}
 80039be:	b086      	sub	sp, #24
 80039c0:	af02      	add	r7, sp, #8
 80039c2:	60f8      	str	r0, [r7, #12]
 80039c4:	000c      	movs	r4, r1
 80039c6:	0010      	movs	r0, r2
 80039c8:	0019      	movs	r1, r3
 80039ca:	250a      	movs	r5, #10
 80039cc:	197b      	adds	r3, r7, r5
 80039ce:	1c22      	adds	r2, r4, #0
 80039d0:	801a      	strh	r2, [r3, #0]
 80039d2:	2308      	movs	r3, #8
 80039d4:	18fb      	adds	r3, r7, r3
 80039d6:	1c02      	adds	r2, r0, #0
 80039d8:	801a      	strh	r2, [r3, #0]
 80039da:	1dbb      	adds	r3, r7, #6
 80039dc:	1c0a      	adds	r2, r1, #0
 80039de:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80039e0:	1dbb      	adds	r3, r7, #6
 80039e2:	881b      	ldrh	r3, [r3, #0]
 80039e4:	b2da      	uxtb	r2, r3
 80039e6:	197b      	adds	r3, r7, r5
 80039e8:	8819      	ldrh	r1, [r3, #0]
 80039ea:	68f8      	ldr	r0, [r7, #12]
 80039ec:	4b23      	ldr	r3, [pc, #140]	; (8003a7c <I2C_RequestMemoryRead+0xc0>)
 80039ee:	9300      	str	r3, [sp, #0]
 80039f0:	2300      	movs	r3, #0
 80039f2:	f000 f987 	bl	8003d04 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039f8:	6a39      	ldr	r1, [r7, #32]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	0018      	movs	r0, r3
 80039fe:	f000 f8a0 	bl	8003b42 <I2C_WaitOnTXISFlagUntilTimeout>
 8003a02:	1e03      	subs	r3, r0, #0
 8003a04:	d001      	beq.n	8003a0a <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e033      	b.n	8003a72 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003a0a:	1dbb      	adds	r3, r7, #6
 8003a0c:	881b      	ldrh	r3, [r3, #0]
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d107      	bne.n	8003a22 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003a12:	2308      	movs	r3, #8
 8003a14:	18fb      	adds	r3, r7, r3
 8003a16:	881b      	ldrh	r3, [r3, #0]
 8003a18:	b2da      	uxtb	r2, r3
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	629a      	str	r2, [r3, #40]	; 0x28
 8003a20:	e019      	b.n	8003a56 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003a22:	2308      	movs	r3, #8
 8003a24:	18fb      	adds	r3, r7, r3
 8003a26:	881b      	ldrh	r3, [r3, #0]
 8003a28:	0a1b      	lsrs	r3, r3, #8
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	b2da      	uxtb	r2, r3
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a36:	6a39      	ldr	r1, [r7, #32]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	0018      	movs	r0, r3
 8003a3c:	f000 f881 	bl	8003b42 <I2C_WaitOnTXISFlagUntilTimeout>
 8003a40:	1e03      	subs	r3, r0, #0
 8003a42:	d001      	beq.n	8003a48 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	e014      	b.n	8003a72 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003a48:	2308      	movs	r3, #8
 8003a4a:	18fb      	adds	r3, r7, r3
 8003a4c:	881b      	ldrh	r3, [r3, #0]
 8003a4e:	b2da      	uxtb	r2, r3
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003a56:	6a3a      	ldr	r2, [r7, #32]
 8003a58:	68f8      	ldr	r0, [r7, #12]
 8003a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5c:	9300      	str	r3, [sp, #0]
 8003a5e:	0013      	movs	r3, r2
 8003a60:	2200      	movs	r2, #0
 8003a62:	2140      	movs	r1, #64	; 0x40
 8003a64:	f000 f82e 	bl	8003ac4 <I2C_WaitOnFlagUntilTimeout>
 8003a68:	1e03      	subs	r3, r0, #0
 8003a6a:	d001      	beq.n	8003a70 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e000      	b.n	8003a72 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8003a70:	2300      	movs	r3, #0
}
 8003a72:	0018      	movs	r0, r3
 8003a74:	46bd      	mov	sp, r7
 8003a76:	b004      	add	sp, #16
 8003a78:	bdb0      	pop	{r4, r5, r7, pc}
 8003a7a:	46c0      	nop			; (mov r8, r8)
 8003a7c:	80002000 	.word	0x80002000

08003a80 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b082      	sub	sp, #8
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	699b      	ldr	r3, [r3, #24]
 8003a8e:	2202      	movs	r2, #2
 8003a90:	4013      	ands	r3, r2
 8003a92:	2b02      	cmp	r3, #2
 8003a94:	d103      	bne.n	8003a9e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	699b      	ldr	r3, [r3, #24]
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	4013      	ands	r3, r2
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d007      	beq.n	8003abc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	699a      	ldr	r2, [r3, #24]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	2101      	movs	r1, #1
 8003ab8:	430a      	orrs	r2, r1
 8003aba:	619a      	str	r2, [r3, #24]
  }
}
 8003abc:	46c0      	nop			; (mov r8, r8)
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	b002      	add	sp, #8
 8003ac2:	bd80      	pop	{r7, pc}

08003ac4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b084      	sub	sp, #16
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	60f8      	str	r0, [r7, #12]
 8003acc:	60b9      	str	r1, [r7, #8]
 8003ace:	603b      	str	r3, [r7, #0]
 8003ad0:	1dfb      	adds	r3, r7, #7
 8003ad2:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ad4:	e021      	b.n	8003b1a <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	3301      	adds	r3, #1
 8003ada:	d01e      	beq.n	8003b1a <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003adc:	f7fe fe50 	bl	8002780 <HAL_GetTick>
 8003ae0:	0002      	movs	r2, r0
 8003ae2:	69bb      	ldr	r3, [r7, #24]
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	683a      	ldr	r2, [r7, #0]
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d302      	bcc.n	8003af2 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d113      	bne.n	8003b1a <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003af6:	2220      	movs	r2, #32
 8003af8:	431a      	orrs	r2, r3
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2241      	movs	r2, #65	; 0x41
 8003b02:	2120      	movs	r1, #32
 8003b04:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2242      	movs	r2, #66	; 0x42
 8003b0a:	2100      	movs	r1, #0
 8003b0c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2240      	movs	r2, #64	; 0x40
 8003b12:	2100      	movs	r1, #0
 8003b14:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e00f      	b.n	8003b3a <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	699b      	ldr	r3, [r3, #24]
 8003b20:	68ba      	ldr	r2, [r7, #8]
 8003b22:	4013      	ands	r3, r2
 8003b24:	68ba      	ldr	r2, [r7, #8]
 8003b26:	1ad3      	subs	r3, r2, r3
 8003b28:	425a      	negs	r2, r3
 8003b2a:	4153      	adcs	r3, r2
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	001a      	movs	r2, r3
 8003b30:	1dfb      	adds	r3, r7, #7
 8003b32:	781b      	ldrb	r3, [r3, #0]
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d0ce      	beq.n	8003ad6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003b38:	2300      	movs	r3, #0
}
 8003b3a:	0018      	movs	r0, r3
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	b004      	add	sp, #16
 8003b40:	bd80      	pop	{r7, pc}

08003b42 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b42:	b580      	push	{r7, lr}
 8003b44:	b084      	sub	sp, #16
 8003b46:	af00      	add	r7, sp, #0
 8003b48:	60f8      	str	r0, [r7, #12]
 8003b4a:	60b9      	str	r1, [r7, #8]
 8003b4c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003b4e:	e02b      	b.n	8003ba8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b50:	687a      	ldr	r2, [r7, #4]
 8003b52:	68b9      	ldr	r1, [r7, #8]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	0018      	movs	r0, r3
 8003b58:	f000 f86e 	bl	8003c38 <I2C_IsAcknowledgeFailed>
 8003b5c:	1e03      	subs	r3, r0, #0
 8003b5e:	d001      	beq.n	8003b64 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	e029      	b.n	8003bb8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	3301      	adds	r3, #1
 8003b68:	d01e      	beq.n	8003ba8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b6a:	f7fe fe09 	bl	8002780 <HAL_GetTick>
 8003b6e:	0002      	movs	r2, r0
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	1ad3      	subs	r3, r2, r3
 8003b74:	68ba      	ldr	r2, [r7, #8]
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d302      	bcc.n	8003b80 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d113      	bne.n	8003ba8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b84:	2220      	movs	r2, #32
 8003b86:	431a      	orrs	r2, r3
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2241      	movs	r2, #65	; 0x41
 8003b90:	2120      	movs	r1, #32
 8003b92:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2242      	movs	r2, #66	; 0x42
 8003b98:	2100      	movs	r1, #0
 8003b9a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2240      	movs	r2, #64	; 0x40
 8003ba0:	2100      	movs	r1, #0
 8003ba2:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e007      	b.n	8003bb8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	699b      	ldr	r3, [r3, #24]
 8003bae:	2202      	movs	r2, #2
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	2b02      	cmp	r3, #2
 8003bb4:	d1cc      	bne.n	8003b50 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003bb6:	2300      	movs	r3, #0
}
 8003bb8:	0018      	movs	r0, r3
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	b004      	add	sp, #16
 8003bbe:	bd80      	pop	{r7, pc}

08003bc0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b084      	sub	sp, #16
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	60f8      	str	r0, [r7, #12]
 8003bc8:	60b9      	str	r1, [r7, #8]
 8003bca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003bcc:	e028      	b.n	8003c20 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	68b9      	ldr	r1, [r7, #8]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	0018      	movs	r0, r3
 8003bd6:	f000 f82f 	bl	8003c38 <I2C_IsAcknowledgeFailed>
 8003bda:	1e03      	subs	r3, r0, #0
 8003bdc:	d001      	beq.n	8003be2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e026      	b.n	8003c30 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003be2:	f7fe fdcd 	bl	8002780 <HAL_GetTick>
 8003be6:	0002      	movs	r2, r0
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	1ad3      	subs	r3, r2, r3
 8003bec:	68ba      	ldr	r2, [r7, #8]
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	d302      	bcc.n	8003bf8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d113      	bne.n	8003c20 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bfc:	2220      	movs	r2, #32
 8003bfe:	431a      	orrs	r2, r3
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2241      	movs	r2, #65	; 0x41
 8003c08:	2120      	movs	r1, #32
 8003c0a:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2242      	movs	r2, #66	; 0x42
 8003c10:	2100      	movs	r1, #0
 8003c12:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2240      	movs	r2, #64	; 0x40
 8003c18:	2100      	movs	r1, #0
 8003c1a:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	e007      	b.n	8003c30 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	699b      	ldr	r3, [r3, #24]
 8003c26:	2220      	movs	r2, #32
 8003c28:	4013      	ands	r3, r2
 8003c2a:	2b20      	cmp	r3, #32
 8003c2c:	d1cf      	bne.n	8003bce <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003c2e:	2300      	movs	r3, #0
}
 8003c30:	0018      	movs	r0, r3
 8003c32:	46bd      	mov	sp, r7
 8003c34:	b004      	add	sp, #16
 8003c36:	bd80      	pop	{r7, pc}

08003c38 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b084      	sub	sp, #16
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	60f8      	str	r0, [r7, #12]
 8003c40:	60b9      	str	r1, [r7, #8]
 8003c42:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	699b      	ldr	r3, [r3, #24]
 8003c4a:	2210      	movs	r2, #16
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	2b10      	cmp	r3, #16
 8003c50:	d151      	bne.n	8003cf6 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c52:	e021      	b.n	8003c98 <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	3301      	adds	r3, #1
 8003c58:	d01e      	beq.n	8003c98 <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c5a:	f7fe fd91 	bl	8002780 <HAL_GetTick>
 8003c5e:	0002      	movs	r2, r0
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	1ad3      	subs	r3, r2, r3
 8003c64:	68ba      	ldr	r2, [r7, #8]
 8003c66:	429a      	cmp	r2, r3
 8003c68:	d302      	bcc.n	8003c70 <I2C_IsAcknowledgeFailed+0x38>
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d113      	bne.n	8003c98 <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c74:	2220      	movs	r2, #32
 8003c76:	431a      	orrs	r2, r3
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2241      	movs	r2, #65	; 0x41
 8003c80:	2120      	movs	r1, #32
 8003c82:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2242      	movs	r2, #66	; 0x42
 8003c88:	2100      	movs	r1, #0
 8003c8a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2240      	movs	r2, #64	; 0x40
 8003c90:	2100      	movs	r1, #0
 8003c92:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e02f      	b.n	8003cf8 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	699b      	ldr	r3, [r3, #24]
 8003c9e:	2220      	movs	r2, #32
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	2b20      	cmp	r3, #32
 8003ca4:	d1d6      	bne.n	8003c54 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	2210      	movs	r2, #16
 8003cac:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	2220      	movs	r2, #32
 8003cb4:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	0018      	movs	r0, r3
 8003cba:	f7ff fee1 	bl	8003a80 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	685a      	ldr	r2, [r3, #4]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	490d      	ldr	r1, [pc, #52]	; (8003d00 <I2C_IsAcknowledgeFailed+0xc8>)
 8003cca:	400a      	ands	r2, r1
 8003ccc:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cd2:	2204      	movs	r2, #4
 8003cd4:	431a      	orrs	r2, r3
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2241      	movs	r2, #65	; 0x41
 8003cde:	2120      	movs	r1, #32
 8003ce0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2242      	movs	r2, #66	; 0x42
 8003ce6:	2100      	movs	r1, #0
 8003ce8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2240      	movs	r2, #64	; 0x40
 8003cee:	2100      	movs	r1, #0
 8003cf0:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e000      	b.n	8003cf8 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8003cf6:	2300      	movs	r3, #0
}
 8003cf8:	0018      	movs	r0, r3
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	b004      	add	sp, #16
 8003cfe:	bd80      	pop	{r7, pc}
 8003d00:	fe00e800 	.word	0xfe00e800

08003d04 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8003d04:	b590      	push	{r4, r7, lr}
 8003d06:	b085      	sub	sp, #20
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	60f8      	str	r0, [r7, #12]
 8003d0c:	0008      	movs	r0, r1
 8003d0e:	0011      	movs	r1, r2
 8003d10:	607b      	str	r3, [r7, #4]
 8003d12:	240a      	movs	r4, #10
 8003d14:	193b      	adds	r3, r7, r4
 8003d16:	1c02      	adds	r2, r0, #0
 8003d18:	801a      	strh	r2, [r3, #0]
 8003d1a:	2009      	movs	r0, #9
 8003d1c:	183b      	adds	r3, r7, r0
 8003d1e:	1c0a      	adds	r2, r1, #0
 8003d20:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	6a3a      	ldr	r2, [r7, #32]
 8003d2a:	0d51      	lsrs	r1, r2, #21
 8003d2c:	2280      	movs	r2, #128	; 0x80
 8003d2e:	00d2      	lsls	r2, r2, #3
 8003d30:	400a      	ands	r2, r1
 8003d32:	490e      	ldr	r1, [pc, #56]	; (8003d6c <I2C_TransferConfig+0x68>)
 8003d34:	430a      	orrs	r2, r1
 8003d36:	43d2      	mvns	r2, r2
 8003d38:	401a      	ands	r2, r3
 8003d3a:	0011      	movs	r1, r2
 8003d3c:	193b      	adds	r3, r7, r4
 8003d3e:	881b      	ldrh	r3, [r3, #0]
 8003d40:	059b      	lsls	r3, r3, #22
 8003d42:	0d9a      	lsrs	r2, r3, #22
 8003d44:	183b      	adds	r3, r7, r0
 8003d46:	781b      	ldrb	r3, [r3, #0]
 8003d48:	0418      	lsls	r0, r3, #16
 8003d4a:	23ff      	movs	r3, #255	; 0xff
 8003d4c:	041b      	lsls	r3, r3, #16
 8003d4e:	4003      	ands	r3, r0
 8003d50:	431a      	orrs	r2, r3
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	431a      	orrs	r2, r3
 8003d56:	6a3b      	ldr	r3, [r7, #32]
 8003d58:	431a      	orrs	r2, r3
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	430a      	orrs	r2, r1
 8003d60:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8003d62:	46c0      	nop			; (mov r8, r8)
 8003d64:	46bd      	mov	sp, r7
 8003d66:	b005      	add	sp, #20
 8003d68:	bd90      	pop	{r4, r7, pc}
 8003d6a:	46c0      	nop			; (mov r8, r8)
 8003d6c:	03ff63ff 	.word	0x03ff63ff

08003d70 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b082      	sub	sp, #8
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2241      	movs	r2, #65	; 0x41
 8003d7e:	5c9b      	ldrb	r3, [r3, r2]
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	2b20      	cmp	r3, #32
 8003d84:	d138      	bne.n	8003df8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2240      	movs	r2, #64	; 0x40
 8003d8a:	5c9b      	ldrb	r3, [r3, r2]
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d101      	bne.n	8003d94 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003d90:	2302      	movs	r3, #2
 8003d92:	e032      	b.n	8003dfa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2240      	movs	r2, #64	; 0x40
 8003d98:	2101      	movs	r1, #1
 8003d9a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2241      	movs	r2, #65	; 0x41
 8003da0:	2124      	movs	r1, #36	; 0x24
 8003da2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	2101      	movs	r1, #1
 8003db0:	438a      	bics	r2, r1
 8003db2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4911      	ldr	r1, [pc, #68]	; (8003e04 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003dc0:	400a      	ands	r2, r1
 8003dc2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	6819      	ldr	r1, [r3, #0]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	683a      	ldr	r2, [r7, #0]
 8003dd0:	430a      	orrs	r2, r1
 8003dd2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	2101      	movs	r1, #1
 8003de0:	430a      	orrs	r2, r1
 8003de2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2241      	movs	r2, #65	; 0x41
 8003de8:	2120      	movs	r1, #32
 8003dea:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2240      	movs	r2, #64	; 0x40
 8003df0:	2100      	movs	r1, #0
 8003df2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003df4:	2300      	movs	r3, #0
 8003df6:	e000      	b.n	8003dfa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003df8:	2302      	movs	r3, #2
  }
}
 8003dfa:	0018      	movs	r0, r3
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	b002      	add	sp, #8
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	46c0      	nop			; (mov r8, r8)
 8003e04:	ffffefff 	.word	0xffffefff

08003e08 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b084      	sub	sp, #16
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
 8003e10:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2241      	movs	r2, #65	; 0x41
 8003e16:	5c9b      	ldrb	r3, [r3, r2]
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	2b20      	cmp	r3, #32
 8003e1c:	d139      	bne.n	8003e92 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2240      	movs	r2, #64	; 0x40
 8003e22:	5c9b      	ldrb	r3, [r3, r2]
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d101      	bne.n	8003e2c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003e28:	2302      	movs	r3, #2
 8003e2a:	e033      	b.n	8003e94 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2240      	movs	r2, #64	; 0x40
 8003e30:	2101      	movs	r1, #1
 8003e32:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2241      	movs	r2, #65	; 0x41
 8003e38:	2124      	movs	r1, #36	; 0x24
 8003e3a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	2101      	movs	r1, #1
 8003e48:	438a      	bics	r2, r1
 8003e4a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	4a11      	ldr	r2, [pc, #68]	; (8003e9c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003e58:	4013      	ands	r3, r2
 8003e5a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	021b      	lsls	r3, r3, #8
 8003e60:	68fa      	ldr	r2, [r7, #12]
 8003e62:	4313      	orrs	r3, r2
 8003e64:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	68fa      	ldr	r2, [r7, #12]
 8003e6c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	2101      	movs	r1, #1
 8003e7a:	430a      	orrs	r2, r1
 8003e7c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2241      	movs	r2, #65	; 0x41
 8003e82:	2120      	movs	r1, #32
 8003e84:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2240      	movs	r2, #64	; 0x40
 8003e8a:	2100      	movs	r1, #0
 8003e8c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	e000      	b.n	8003e94 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003e92:	2302      	movs	r3, #2
  }
}
 8003e94:	0018      	movs	r0, r3
 8003e96:	46bd      	mov	sp, r7
 8003e98:	b004      	add	sp, #16
 8003e9a:	bd80      	pop	{r7, pc}
 8003e9c:	fffff0ff 	.word	0xfffff0ff

08003ea0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b088      	sub	sp, #32
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d102      	bne.n	8003eb4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	f000 fb76 	bl	80045a0 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	2201      	movs	r2, #1
 8003eba:	4013      	ands	r3, r2
 8003ebc:	d100      	bne.n	8003ec0 <HAL_RCC_OscConfig+0x20>
 8003ebe:	e08e      	b.n	8003fde <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003ec0:	4bc5      	ldr	r3, [pc, #788]	; (80041d8 <HAL_RCC_OscConfig+0x338>)
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	220c      	movs	r2, #12
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	2b04      	cmp	r3, #4
 8003eca:	d00e      	beq.n	8003eea <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003ecc:	4bc2      	ldr	r3, [pc, #776]	; (80041d8 <HAL_RCC_OscConfig+0x338>)
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	220c      	movs	r2, #12
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	2b08      	cmp	r3, #8
 8003ed6:	d117      	bne.n	8003f08 <HAL_RCC_OscConfig+0x68>
 8003ed8:	4bbf      	ldr	r3, [pc, #764]	; (80041d8 <HAL_RCC_OscConfig+0x338>)
 8003eda:	685a      	ldr	r2, [r3, #4]
 8003edc:	23c0      	movs	r3, #192	; 0xc0
 8003ede:	025b      	lsls	r3, r3, #9
 8003ee0:	401a      	ands	r2, r3
 8003ee2:	2380      	movs	r3, #128	; 0x80
 8003ee4:	025b      	lsls	r3, r3, #9
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d10e      	bne.n	8003f08 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003eea:	4bbb      	ldr	r3, [pc, #748]	; (80041d8 <HAL_RCC_OscConfig+0x338>)
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	2380      	movs	r3, #128	; 0x80
 8003ef0:	029b      	lsls	r3, r3, #10
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	d100      	bne.n	8003ef8 <HAL_RCC_OscConfig+0x58>
 8003ef6:	e071      	b.n	8003fdc <HAL_RCC_OscConfig+0x13c>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d000      	beq.n	8003f02 <HAL_RCC_OscConfig+0x62>
 8003f00:	e06c      	b.n	8003fdc <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	f000 fb4c 	bl	80045a0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d107      	bne.n	8003f20 <HAL_RCC_OscConfig+0x80>
 8003f10:	4bb1      	ldr	r3, [pc, #708]	; (80041d8 <HAL_RCC_OscConfig+0x338>)
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	4bb0      	ldr	r3, [pc, #704]	; (80041d8 <HAL_RCC_OscConfig+0x338>)
 8003f16:	2180      	movs	r1, #128	; 0x80
 8003f18:	0249      	lsls	r1, r1, #9
 8003f1a:	430a      	orrs	r2, r1
 8003f1c:	601a      	str	r2, [r3, #0]
 8003f1e:	e02f      	b.n	8003f80 <HAL_RCC_OscConfig+0xe0>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d10c      	bne.n	8003f42 <HAL_RCC_OscConfig+0xa2>
 8003f28:	4bab      	ldr	r3, [pc, #684]	; (80041d8 <HAL_RCC_OscConfig+0x338>)
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	4baa      	ldr	r3, [pc, #680]	; (80041d8 <HAL_RCC_OscConfig+0x338>)
 8003f2e:	49ab      	ldr	r1, [pc, #684]	; (80041dc <HAL_RCC_OscConfig+0x33c>)
 8003f30:	400a      	ands	r2, r1
 8003f32:	601a      	str	r2, [r3, #0]
 8003f34:	4ba8      	ldr	r3, [pc, #672]	; (80041d8 <HAL_RCC_OscConfig+0x338>)
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	4ba7      	ldr	r3, [pc, #668]	; (80041d8 <HAL_RCC_OscConfig+0x338>)
 8003f3a:	49a9      	ldr	r1, [pc, #676]	; (80041e0 <HAL_RCC_OscConfig+0x340>)
 8003f3c:	400a      	ands	r2, r1
 8003f3e:	601a      	str	r2, [r3, #0]
 8003f40:	e01e      	b.n	8003f80 <HAL_RCC_OscConfig+0xe0>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	2b05      	cmp	r3, #5
 8003f48:	d10e      	bne.n	8003f68 <HAL_RCC_OscConfig+0xc8>
 8003f4a:	4ba3      	ldr	r3, [pc, #652]	; (80041d8 <HAL_RCC_OscConfig+0x338>)
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	4ba2      	ldr	r3, [pc, #648]	; (80041d8 <HAL_RCC_OscConfig+0x338>)
 8003f50:	2180      	movs	r1, #128	; 0x80
 8003f52:	02c9      	lsls	r1, r1, #11
 8003f54:	430a      	orrs	r2, r1
 8003f56:	601a      	str	r2, [r3, #0]
 8003f58:	4b9f      	ldr	r3, [pc, #636]	; (80041d8 <HAL_RCC_OscConfig+0x338>)
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	4b9e      	ldr	r3, [pc, #632]	; (80041d8 <HAL_RCC_OscConfig+0x338>)
 8003f5e:	2180      	movs	r1, #128	; 0x80
 8003f60:	0249      	lsls	r1, r1, #9
 8003f62:	430a      	orrs	r2, r1
 8003f64:	601a      	str	r2, [r3, #0]
 8003f66:	e00b      	b.n	8003f80 <HAL_RCC_OscConfig+0xe0>
 8003f68:	4b9b      	ldr	r3, [pc, #620]	; (80041d8 <HAL_RCC_OscConfig+0x338>)
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	4b9a      	ldr	r3, [pc, #616]	; (80041d8 <HAL_RCC_OscConfig+0x338>)
 8003f6e:	499b      	ldr	r1, [pc, #620]	; (80041dc <HAL_RCC_OscConfig+0x33c>)
 8003f70:	400a      	ands	r2, r1
 8003f72:	601a      	str	r2, [r3, #0]
 8003f74:	4b98      	ldr	r3, [pc, #608]	; (80041d8 <HAL_RCC_OscConfig+0x338>)
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	4b97      	ldr	r3, [pc, #604]	; (80041d8 <HAL_RCC_OscConfig+0x338>)
 8003f7a:	4999      	ldr	r1, [pc, #612]	; (80041e0 <HAL_RCC_OscConfig+0x340>)
 8003f7c:	400a      	ands	r2, r1
 8003f7e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d014      	beq.n	8003fb2 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f88:	f7fe fbfa 	bl	8002780 <HAL_GetTick>
 8003f8c:	0003      	movs	r3, r0
 8003f8e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f90:	e008      	b.n	8003fa4 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f92:	f7fe fbf5 	bl	8002780 <HAL_GetTick>
 8003f96:	0002      	movs	r2, r0
 8003f98:	69bb      	ldr	r3, [r7, #24]
 8003f9a:	1ad3      	subs	r3, r2, r3
 8003f9c:	2b64      	cmp	r3, #100	; 0x64
 8003f9e:	d901      	bls.n	8003fa4 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8003fa0:	2303      	movs	r3, #3
 8003fa2:	e2fd      	b.n	80045a0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fa4:	4b8c      	ldr	r3, [pc, #560]	; (80041d8 <HAL_RCC_OscConfig+0x338>)
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	2380      	movs	r3, #128	; 0x80
 8003faa:	029b      	lsls	r3, r3, #10
 8003fac:	4013      	ands	r3, r2
 8003fae:	d0f0      	beq.n	8003f92 <HAL_RCC_OscConfig+0xf2>
 8003fb0:	e015      	b.n	8003fde <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fb2:	f7fe fbe5 	bl	8002780 <HAL_GetTick>
 8003fb6:	0003      	movs	r3, r0
 8003fb8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fba:	e008      	b.n	8003fce <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fbc:	f7fe fbe0 	bl	8002780 <HAL_GetTick>
 8003fc0:	0002      	movs	r2, r0
 8003fc2:	69bb      	ldr	r3, [r7, #24]
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	2b64      	cmp	r3, #100	; 0x64
 8003fc8:	d901      	bls.n	8003fce <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8003fca:	2303      	movs	r3, #3
 8003fcc:	e2e8      	b.n	80045a0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fce:	4b82      	ldr	r3, [pc, #520]	; (80041d8 <HAL_RCC_OscConfig+0x338>)
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	2380      	movs	r3, #128	; 0x80
 8003fd4:	029b      	lsls	r3, r3, #10
 8003fd6:	4013      	ands	r3, r2
 8003fd8:	d1f0      	bne.n	8003fbc <HAL_RCC_OscConfig+0x11c>
 8003fda:	e000      	b.n	8003fde <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fdc:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	2202      	movs	r2, #2
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	d100      	bne.n	8003fea <HAL_RCC_OscConfig+0x14a>
 8003fe8:	e06c      	b.n	80040c4 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003fea:	4b7b      	ldr	r3, [pc, #492]	; (80041d8 <HAL_RCC_OscConfig+0x338>)
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	220c      	movs	r2, #12
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	d00e      	beq.n	8004012 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003ff4:	4b78      	ldr	r3, [pc, #480]	; (80041d8 <HAL_RCC_OscConfig+0x338>)
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	220c      	movs	r2, #12
 8003ffa:	4013      	ands	r3, r2
 8003ffc:	2b08      	cmp	r3, #8
 8003ffe:	d11f      	bne.n	8004040 <HAL_RCC_OscConfig+0x1a0>
 8004000:	4b75      	ldr	r3, [pc, #468]	; (80041d8 <HAL_RCC_OscConfig+0x338>)
 8004002:	685a      	ldr	r2, [r3, #4]
 8004004:	23c0      	movs	r3, #192	; 0xc0
 8004006:	025b      	lsls	r3, r3, #9
 8004008:	401a      	ands	r2, r3
 800400a:	2380      	movs	r3, #128	; 0x80
 800400c:	021b      	lsls	r3, r3, #8
 800400e:	429a      	cmp	r2, r3
 8004010:	d116      	bne.n	8004040 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004012:	4b71      	ldr	r3, [pc, #452]	; (80041d8 <HAL_RCC_OscConfig+0x338>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	2202      	movs	r2, #2
 8004018:	4013      	ands	r3, r2
 800401a:	d005      	beq.n	8004028 <HAL_RCC_OscConfig+0x188>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	68db      	ldr	r3, [r3, #12]
 8004020:	2b01      	cmp	r3, #1
 8004022:	d001      	beq.n	8004028 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	e2bb      	b.n	80045a0 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004028:	4b6b      	ldr	r3, [pc, #428]	; (80041d8 <HAL_RCC_OscConfig+0x338>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	22f8      	movs	r2, #248	; 0xf8
 800402e:	4393      	bics	r3, r2
 8004030:	0019      	movs	r1, r3
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	691b      	ldr	r3, [r3, #16]
 8004036:	00da      	lsls	r2, r3, #3
 8004038:	4b67      	ldr	r3, [pc, #412]	; (80041d8 <HAL_RCC_OscConfig+0x338>)
 800403a:	430a      	orrs	r2, r1
 800403c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800403e:	e041      	b.n	80040c4 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	68db      	ldr	r3, [r3, #12]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d024      	beq.n	8004092 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004048:	4b63      	ldr	r3, [pc, #396]	; (80041d8 <HAL_RCC_OscConfig+0x338>)
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	4b62      	ldr	r3, [pc, #392]	; (80041d8 <HAL_RCC_OscConfig+0x338>)
 800404e:	2101      	movs	r1, #1
 8004050:	430a      	orrs	r2, r1
 8004052:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004054:	f7fe fb94 	bl	8002780 <HAL_GetTick>
 8004058:	0003      	movs	r3, r0
 800405a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800405c:	e008      	b.n	8004070 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800405e:	f7fe fb8f 	bl	8002780 <HAL_GetTick>
 8004062:	0002      	movs	r2, r0
 8004064:	69bb      	ldr	r3, [r7, #24]
 8004066:	1ad3      	subs	r3, r2, r3
 8004068:	2b02      	cmp	r3, #2
 800406a:	d901      	bls.n	8004070 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800406c:	2303      	movs	r3, #3
 800406e:	e297      	b.n	80045a0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004070:	4b59      	ldr	r3, [pc, #356]	; (80041d8 <HAL_RCC_OscConfig+0x338>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	2202      	movs	r2, #2
 8004076:	4013      	ands	r3, r2
 8004078:	d0f1      	beq.n	800405e <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800407a:	4b57      	ldr	r3, [pc, #348]	; (80041d8 <HAL_RCC_OscConfig+0x338>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	22f8      	movs	r2, #248	; 0xf8
 8004080:	4393      	bics	r3, r2
 8004082:	0019      	movs	r1, r3
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	691b      	ldr	r3, [r3, #16]
 8004088:	00da      	lsls	r2, r3, #3
 800408a:	4b53      	ldr	r3, [pc, #332]	; (80041d8 <HAL_RCC_OscConfig+0x338>)
 800408c:	430a      	orrs	r2, r1
 800408e:	601a      	str	r2, [r3, #0]
 8004090:	e018      	b.n	80040c4 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004092:	4b51      	ldr	r3, [pc, #324]	; (80041d8 <HAL_RCC_OscConfig+0x338>)
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	4b50      	ldr	r3, [pc, #320]	; (80041d8 <HAL_RCC_OscConfig+0x338>)
 8004098:	2101      	movs	r1, #1
 800409a:	438a      	bics	r2, r1
 800409c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800409e:	f7fe fb6f 	bl	8002780 <HAL_GetTick>
 80040a2:	0003      	movs	r3, r0
 80040a4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040a6:	e008      	b.n	80040ba <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040a8:	f7fe fb6a 	bl	8002780 <HAL_GetTick>
 80040ac:	0002      	movs	r2, r0
 80040ae:	69bb      	ldr	r3, [r7, #24]
 80040b0:	1ad3      	subs	r3, r2, r3
 80040b2:	2b02      	cmp	r3, #2
 80040b4:	d901      	bls.n	80040ba <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80040b6:	2303      	movs	r3, #3
 80040b8:	e272      	b.n	80045a0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040ba:	4b47      	ldr	r3, [pc, #284]	; (80041d8 <HAL_RCC_OscConfig+0x338>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	2202      	movs	r2, #2
 80040c0:	4013      	ands	r3, r2
 80040c2:	d1f1      	bne.n	80040a8 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	2208      	movs	r2, #8
 80040ca:	4013      	ands	r3, r2
 80040cc:	d036      	beq.n	800413c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	69db      	ldr	r3, [r3, #28]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d019      	beq.n	800410a <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040d6:	4b40      	ldr	r3, [pc, #256]	; (80041d8 <HAL_RCC_OscConfig+0x338>)
 80040d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80040da:	4b3f      	ldr	r3, [pc, #252]	; (80041d8 <HAL_RCC_OscConfig+0x338>)
 80040dc:	2101      	movs	r1, #1
 80040de:	430a      	orrs	r2, r1
 80040e0:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040e2:	f7fe fb4d 	bl	8002780 <HAL_GetTick>
 80040e6:	0003      	movs	r3, r0
 80040e8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040ea:	e008      	b.n	80040fe <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040ec:	f7fe fb48 	bl	8002780 <HAL_GetTick>
 80040f0:	0002      	movs	r2, r0
 80040f2:	69bb      	ldr	r3, [r7, #24]
 80040f4:	1ad3      	subs	r3, r2, r3
 80040f6:	2b02      	cmp	r3, #2
 80040f8:	d901      	bls.n	80040fe <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80040fa:	2303      	movs	r3, #3
 80040fc:	e250      	b.n	80045a0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040fe:	4b36      	ldr	r3, [pc, #216]	; (80041d8 <HAL_RCC_OscConfig+0x338>)
 8004100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004102:	2202      	movs	r2, #2
 8004104:	4013      	ands	r3, r2
 8004106:	d0f1      	beq.n	80040ec <HAL_RCC_OscConfig+0x24c>
 8004108:	e018      	b.n	800413c <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800410a:	4b33      	ldr	r3, [pc, #204]	; (80041d8 <HAL_RCC_OscConfig+0x338>)
 800410c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800410e:	4b32      	ldr	r3, [pc, #200]	; (80041d8 <HAL_RCC_OscConfig+0x338>)
 8004110:	2101      	movs	r1, #1
 8004112:	438a      	bics	r2, r1
 8004114:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004116:	f7fe fb33 	bl	8002780 <HAL_GetTick>
 800411a:	0003      	movs	r3, r0
 800411c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800411e:	e008      	b.n	8004132 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004120:	f7fe fb2e 	bl	8002780 <HAL_GetTick>
 8004124:	0002      	movs	r2, r0
 8004126:	69bb      	ldr	r3, [r7, #24]
 8004128:	1ad3      	subs	r3, r2, r3
 800412a:	2b02      	cmp	r3, #2
 800412c:	d901      	bls.n	8004132 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800412e:	2303      	movs	r3, #3
 8004130:	e236      	b.n	80045a0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004132:	4b29      	ldr	r3, [pc, #164]	; (80041d8 <HAL_RCC_OscConfig+0x338>)
 8004134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004136:	2202      	movs	r2, #2
 8004138:	4013      	ands	r3, r2
 800413a:	d1f1      	bne.n	8004120 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	2204      	movs	r2, #4
 8004142:	4013      	ands	r3, r2
 8004144:	d100      	bne.n	8004148 <HAL_RCC_OscConfig+0x2a8>
 8004146:	e0b5      	b.n	80042b4 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004148:	231f      	movs	r3, #31
 800414a:	18fb      	adds	r3, r7, r3
 800414c:	2200      	movs	r2, #0
 800414e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004150:	4b21      	ldr	r3, [pc, #132]	; (80041d8 <HAL_RCC_OscConfig+0x338>)
 8004152:	69da      	ldr	r2, [r3, #28]
 8004154:	2380      	movs	r3, #128	; 0x80
 8004156:	055b      	lsls	r3, r3, #21
 8004158:	4013      	ands	r3, r2
 800415a:	d111      	bne.n	8004180 <HAL_RCC_OscConfig+0x2e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800415c:	4b1e      	ldr	r3, [pc, #120]	; (80041d8 <HAL_RCC_OscConfig+0x338>)
 800415e:	69da      	ldr	r2, [r3, #28]
 8004160:	4b1d      	ldr	r3, [pc, #116]	; (80041d8 <HAL_RCC_OscConfig+0x338>)
 8004162:	2180      	movs	r1, #128	; 0x80
 8004164:	0549      	lsls	r1, r1, #21
 8004166:	430a      	orrs	r2, r1
 8004168:	61da      	str	r2, [r3, #28]
 800416a:	4b1b      	ldr	r3, [pc, #108]	; (80041d8 <HAL_RCC_OscConfig+0x338>)
 800416c:	69da      	ldr	r2, [r3, #28]
 800416e:	2380      	movs	r3, #128	; 0x80
 8004170:	055b      	lsls	r3, r3, #21
 8004172:	4013      	ands	r3, r2
 8004174:	60fb      	str	r3, [r7, #12]
 8004176:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004178:	231f      	movs	r3, #31
 800417a:	18fb      	adds	r3, r7, r3
 800417c:	2201      	movs	r2, #1
 800417e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004180:	4b18      	ldr	r3, [pc, #96]	; (80041e4 <HAL_RCC_OscConfig+0x344>)
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	2380      	movs	r3, #128	; 0x80
 8004186:	005b      	lsls	r3, r3, #1
 8004188:	4013      	ands	r3, r2
 800418a:	d11a      	bne.n	80041c2 <HAL_RCC_OscConfig+0x322>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800418c:	4b15      	ldr	r3, [pc, #84]	; (80041e4 <HAL_RCC_OscConfig+0x344>)
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	4b14      	ldr	r3, [pc, #80]	; (80041e4 <HAL_RCC_OscConfig+0x344>)
 8004192:	2180      	movs	r1, #128	; 0x80
 8004194:	0049      	lsls	r1, r1, #1
 8004196:	430a      	orrs	r2, r1
 8004198:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800419a:	f7fe faf1 	bl	8002780 <HAL_GetTick>
 800419e:	0003      	movs	r3, r0
 80041a0:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041a2:	e008      	b.n	80041b6 <HAL_RCC_OscConfig+0x316>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041a4:	f7fe faec 	bl	8002780 <HAL_GetTick>
 80041a8:	0002      	movs	r2, r0
 80041aa:	69bb      	ldr	r3, [r7, #24]
 80041ac:	1ad3      	subs	r3, r2, r3
 80041ae:	2b64      	cmp	r3, #100	; 0x64
 80041b0:	d901      	bls.n	80041b6 <HAL_RCC_OscConfig+0x316>
        {
          return HAL_TIMEOUT;
 80041b2:	2303      	movs	r3, #3
 80041b4:	e1f4      	b.n	80045a0 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041b6:	4b0b      	ldr	r3, [pc, #44]	; (80041e4 <HAL_RCC_OscConfig+0x344>)
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	2380      	movs	r3, #128	; 0x80
 80041bc:	005b      	lsls	r3, r3, #1
 80041be:	4013      	ands	r3, r2
 80041c0:	d0f0      	beq.n	80041a4 <HAL_RCC_OscConfig+0x304>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	2b01      	cmp	r3, #1
 80041c8:	d10e      	bne.n	80041e8 <HAL_RCC_OscConfig+0x348>
 80041ca:	4b03      	ldr	r3, [pc, #12]	; (80041d8 <HAL_RCC_OscConfig+0x338>)
 80041cc:	6a1a      	ldr	r2, [r3, #32]
 80041ce:	4b02      	ldr	r3, [pc, #8]	; (80041d8 <HAL_RCC_OscConfig+0x338>)
 80041d0:	2101      	movs	r1, #1
 80041d2:	430a      	orrs	r2, r1
 80041d4:	621a      	str	r2, [r3, #32]
 80041d6:	e035      	b.n	8004244 <HAL_RCC_OscConfig+0x3a4>
 80041d8:	40021000 	.word	0x40021000
 80041dc:	fffeffff 	.word	0xfffeffff
 80041e0:	fffbffff 	.word	0xfffbffff
 80041e4:	40007000 	.word	0x40007000
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d10c      	bne.n	800420a <HAL_RCC_OscConfig+0x36a>
 80041f0:	4bca      	ldr	r3, [pc, #808]	; (800451c <HAL_RCC_OscConfig+0x67c>)
 80041f2:	6a1a      	ldr	r2, [r3, #32]
 80041f4:	4bc9      	ldr	r3, [pc, #804]	; (800451c <HAL_RCC_OscConfig+0x67c>)
 80041f6:	2101      	movs	r1, #1
 80041f8:	438a      	bics	r2, r1
 80041fa:	621a      	str	r2, [r3, #32]
 80041fc:	4bc7      	ldr	r3, [pc, #796]	; (800451c <HAL_RCC_OscConfig+0x67c>)
 80041fe:	6a1a      	ldr	r2, [r3, #32]
 8004200:	4bc6      	ldr	r3, [pc, #792]	; (800451c <HAL_RCC_OscConfig+0x67c>)
 8004202:	2104      	movs	r1, #4
 8004204:	438a      	bics	r2, r1
 8004206:	621a      	str	r2, [r3, #32]
 8004208:	e01c      	b.n	8004244 <HAL_RCC_OscConfig+0x3a4>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	2b05      	cmp	r3, #5
 8004210:	d10c      	bne.n	800422c <HAL_RCC_OscConfig+0x38c>
 8004212:	4bc2      	ldr	r3, [pc, #776]	; (800451c <HAL_RCC_OscConfig+0x67c>)
 8004214:	6a1a      	ldr	r2, [r3, #32]
 8004216:	4bc1      	ldr	r3, [pc, #772]	; (800451c <HAL_RCC_OscConfig+0x67c>)
 8004218:	2104      	movs	r1, #4
 800421a:	430a      	orrs	r2, r1
 800421c:	621a      	str	r2, [r3, #32]
 800421e:	4bbf      	ldr	r3, [pc, #764]	; (800451c <HAL_RCC_OscConfig+0x67c>)
 8004220:	6a1a      	ldr	r2, [r3, #32]
 8004222:	4bbe      	ldr	r3, [pc, #760]	; (800451c <HAL_RCC_OscConfig+0x67c>)
 8004224:	2101      	movs	r1, #1
 8004226:	430a      	orrs	r2, r1
 8004228:	621a      	str	r2, [r3, #32]
 800422a:	e00b      	b.n	8004244 <HAL_RCC_OscConfig+0x3a4>
 800422c:	4bbb      	ldr	r3, [pc, #748]	; (800451c <HAL_RCC_OscConfig+0x67c>)
 800422e:	6a1a      	ldr	r2, [r3, #32]
 8004230:	4bba      	ldr	r3, [pc, #744]	; (800451c <HAL_RCC_OscConfig+0x67c>)
 8004232:	2101      	movs	r1, #1
 8004234:	438a      	bics	r2, r1
 8004236:	621a      	str	r2, [r3, #32]
 8004238:	4bb8      	ldr	r3, [pc, #736]	; (800451c <HAL_RCC_OscConfig+0x67c>)
 800423a:	6a1a      	ldr	r2, [r3, #32]
 800423c:	4bb7      	ldr	r3, [pc, #732]	; (800451c <HAL_RCC_OscConfig+0x67c>)
 800423e:	2104      	movs	r1, #4
 8004240:	438a      	bics	r2, r1
 8004242:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d014      	beq.n	8004276 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800424c:	f7fe fa98 	bl	8002780 <HAL_GetTick>
 8004250:	0003      	movs	r3, r0
 8004252:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004254:	e009      	b.n	800426a <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004256:	f7fe fa93 	bl	8002780 <HAL_GetTick>
 800425a:	0002      	movs	r2, r0
 800425c:	69bb      	ldr	r3, [r7, #24]
 800425e:	1ad3      	subs	r3, r2, r3
 8004260:	4aaf      	ldr	r2, [pc, #700]	; (8004520 <HAL_RCC_OscConfig+0x680>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d901      	bls.n	800426a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8004266:	2303      	movs	r3, #3
 8004268:	e19a      	b.n	80045a0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800426a:	4bac      	ldr	r3, [pc, #688]	; (800451c <HAL_RCC_OscConfig+0x67c>)
 800426c:	6a1b      	ldr	r3, [r3, #32]
 800426e:	2202      	movs	r2, #2
 8004270:	4013      	ands	r3, r2
 8004272:	d0f0      	beq.n	8004256 <HAL_RCC_OscConfig+0x3b6>
 8004274:	e013      	b.n	800429e <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004276:	f7fe fa83 	bl	8002780 <HAL_GetTick>
 800427a:	0003      	movs	r3, r0
 800427c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800427e:	e009      	b.n	8004294 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004280:	f7fe fa7e 	bl	8002780 <HAL_GetTick>
 8004284:	0002      	movs	r2, r0
 8004286:	69bb      	ldr	r3, [r7, #24]
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	4aa5      	ldr	r2, [pc, #660]	; (8004520 <HAL_RCC_OscConfig+0x680>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d901      	bls.n	8004294 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8004290:	2303      	movs	r3, #3
 8004292:	e185      	b.n	80045a0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004294:	4ba1      	ldr	r3, [pc, #644]	; (800451c <HAL_RCC_OscConfig+0x67c>)
 8004296:	6a1b      	ldr	r3, [r3, #32]
 8004298:	2202      	movs	r2, #2
 800429a:	4013      	ands	r3, r2
 800429c:	d1f0      	bne.n	8004280 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800429e:	231f      	movs	r3, #31
 80042a0:	18fb      	adds	r3, r7, r3
 80042a2:	781b      	ldrb	r3, [r3, #0]
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d105      	bne.n	80042b4 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042a8:	4b9c      	ldr	r3, [pc, #624]	; (800451c <HAL_RCC_OscConfig+0x67c>)
 80042aa:	69da      	ldr	r2, [r3, #28]
 80042ac:	4b9b      	ldr	r3, [pc, #620]	; (800451c <HAL_RCC_OscConfig+0x67c>)
 80042ae:	499d      	ldr	r1, [pc, #628]	; (8004524 <HAL_RCC_OscConfig+0x684>)
 80042b0:	400a      	ands	r2, r1
 80042b2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	2210      	movs	r2, #16
 80042ba:	4013      	ands	r3, r2
 80042bc:	d063      	beq.n	8004386 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	695b      	ldr	r3, [r3, #20]
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d12a      	bne.n	800431c <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80042c6:	4b95      	ldr	r3, [pc, #596]	; (800451c <HAL_RCC_OscConfig+0x67c>)
 80042c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042ca:	4b94      	ldr	r3, [pc, #592]	; (800451c <HAL_RCC_OscConfig+0x67c>)
 80042cc:	2104      	movs	r1, #4
 80042ce:	430a      	orrs	r2, r1
 80042d0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80042d2:	4b92      	ldr	r3, [pc, #584]	; (800451c <HAL_RCC_OscConfig+0x67c>)
 80042d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042d6:	4b91      	ldr	r3, [pc, #580]	; (800451c <HAL_RCC_OscConfig+0x67c>)
 80042d8:	2101      	movs	r1, #1
 80042da:	430a      	orrs	r2, r1
 80042dc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042de:	f7fe fa4f 	bl	8002780 <HAL_GetTick>
 80042e2:	0003      	movs	r3, r0
 80042e4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80042e6:	e008      	b.n	80042fa <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80042e8:	f7fe fa4a 	bl	8002780 <HAL_GetTick>
 80042ec:	0002      	movs	r2, r0
 80042ee:	69bb      	ldr	r3, [r7, #24]
 80042f0:	1ad3      	subs	r3, r2, r3
 80042f2:	2b02      	cmp	r3, #2
 80042f4:	d901      	bls.n	80042fa <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80042f6:	2303      	movs	r3, #3
 80042f8:	e152      	b.n	80045a0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80042fa:	4b88      	ldr	r3, [pc, #544]	; (800451c <HAL_RCC_OscConfig+0x67c>)
 80042fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042fe:	2202      	movs	r2, #2
 8004300:	4013      	ands	r3, r2
 8004302:	d0f1      	beq.n	80042e8 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004304:	4b85      	ldr	r3, [pc, #532]	; (800451c <HAL_RCC_OscConfig+0x67c>)
 8004306:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004308:	22f8      	movs	r2, #248	; 0xf8
 800430a:	4393      	bics	r3, r2
 800430c:	0019      	movs	r1, r3
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	699b      	ldr	r3, [r3, #24]
 8004312:	00da      	lsls	r2, r3, #3
 8004314:	4b81      	ldr	r3, [pc, #516]	; (800451c <HAL_RCC_OscConfig+0x67c>)
 8004316:	430a      	orrs	r2, r1
 8004318:	635a      	str	r2, [r3, #52]	; 0x34
 800431a:	e034      	b.n	8004386 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	695b      	ldr	r3, [r3, #20]
 8004320:	3305      	adds	r3, #5
 8004322:	d111      	bne.n	8004348 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8004324:	4b7d      	ldr	r3, [pc, #500]	; (800451c <HAL_RCC_OscConfig+0x67c>)
 8004326:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004328:	4b7c      	ldr	r3, [pc, #496]	; (800451c <HAL_RCC_OscConfig+0x67c>)
 800432a:	2104      	movs	r1, #4
 800432c:	438a      	bics	r2, r1
 800432e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004330:	4b7a      	ldr	r3, [pc, #488]	; (800451c <HAL_RCC_OscConfig+0x67c>)
 8004332:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004334:	22f8      	movs	r2, #248	; 0xf8
 8004336:	4393      	bics	r3, r2
 8004338:	0019      	movs	r1, r3
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	699b      	ldr	r3, [r3, #24]
 800433e:	00da      	lsls	r2, r3, #3
 8004340:	4b76      	ldr	r3, [pc, #472]	; (800451c <HAL_RCC_OscConfig+0x67c>)
 8004342:	430a      	orrs	r2, r1
 8004344:	635a      	str	r2, [r3, #52]	; 0x34
 8004346:	e01e      	b.n	8004386 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004348:	4b74      	ldr	r3, [pc, #464]	; (800451c <HAL_RCC_OscConfig+0x67c>)
 800434a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800434c:	4b73      	ldr	r3, [pc, #460]	; (800451c <HAL_RCC_OscConfig+0x67c>)
 800434e:	2104      	movs	r1, #4
 8004350:	430a      	orrs	r2, r1
 8004352:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8004354:	4b71      	ldr	r3, [pc, #452]	; (800451c <HAL_RCC_OscConfig+0x67c>)
 8004356:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004358:	4b70      	ldr	r3, [pc, #448]	; (800451c <HAL_RCC_OscConfig+0x67c>)
 800435a:	2101      	movs	r1, #1
 800435c:	438a      	bics	r2, r1
 800435e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004360:	f7fe fa0e 	bl	8002780 <HAL_GetTick>
 8004364:	0003      	movs	r3, r0
 8004366:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004368:	e008      	b.n	800437c <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800436a:	f7fe fa09 	bl	8002780 <HAL_GetTick>
 800436e:	0002      	movs	r2, r0
 8004370:	69bb      	ldr	r3, [r7, #24]
 8004372:	1ad3      	subs	r3, r2, r3
 8004374:	2b02      	cmp	r3, #2
 8004376:	d901      	bls.n	800437c <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8004378:	2303      	movs	r3, #3
 800437a:	e111      	b.n	80045a0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800437c:	4b67      	ldr	r3, [pc, #412]	; (800451c <HAL_RCC_OscConfig+0x67c>)
 800437e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004380:	2202      	movs	r2, #2
 8004382:	4013      	ands	r3, r2
 8004384:	d1f1      	bne.n	800436a <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	2220      	movs	r2, #32
 800438c:	4013      	ands	r3, r2
 800438e:	d05c      	beq.n	800444a <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8004390:	4b62      	ldr	r3, [pc, #392]	; (800451c <HAL_RCC_OscConfig+0x67c>)
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	220c      	movs	r2, #12
 8004396:	4013      	ands	r3, r2
 8004398:	2b0c      	cmp	r3, #12
 800439a:	d00e      	beq.n	80043ba <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800439c:	4b5f      	ldr	r3, [pc, #380]	; (800451c <HAL_RCC_OscConfig+0x67c>)
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	220c      	movs	r2, #12
 80043a2:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80043a4:	2b08      	cmp	r3, #8
 80043a6:	d114      	bne.n	80043d2 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80043a8:	4b5c      	ldr	r3, [pc, #368]	; (800451c <HAL_RCC_OscConfig+0x67c>)
 80043aa:	685a      	ldr	r2, [r3, #4]
 80043ac:	23c0      	movs	r3, #192	; 0xc0
 80043ae:	025b      	lsls	r3, r3, #9
 80043b0:	401a      	ands	r2, r3
 80043b2:	23c0      	movs	r3, #192	; 0xc0
 80043b4:	025b      	lsls	r3, r3, #9
 80043b6:	429a      	cmp	r2, r3
 80043b8:	d10b      	bne.n	80043d2 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80043ba:	4b58      	ldr	r3, [pc, #352]	; (800451c <HAL_RCC_OscConfig+0x67c>)
 80043bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043be:	2380      	movs	r3, #128	; 0x80
 80043c0:	025b      	lsls	r3, r3, #9
 80043c2:	4013      	ands	r3, r2
 80043c4:	d040      	beq.n	8004448 <HAL_RCC_OscConfig+0x5a8>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6a1b      	ldr	r3, [r3, #32]
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d03c      	beq.n	8004448 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e0e6      	b.n	80045a0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6a1b      	ldr	r3, [r3, #32]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d01b      	beq.n	8004412 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80043da:	4b50      	ldr	r3, [pc, #320]	; (800451c <HAL_RCC_OscConfig+0x67c>)
 80043dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043de:	4b4f      	ldr	r3, [pc, #316]	; (800451c <HAL_RCC_OscConfig+0x67c>)
 80043e0:	2180      	movs	r1, #128	; 0x80
 80043e2:	0249      	lsls	r1, r1, #9
 80043e4:	430a      	orrs	r2, r1
 80043e6:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043e8:	f7fe f9ca 	bl	8002780 <HAL_GetTick>
 80043ec:	0003      	movs	r3, r0
 80043ee:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80043f0:	e008      	b.n	8004404 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80043f2:	f7fe f9c5 	bl	8002780 <HAL_GetTick>
 80043f6:	0002      	movs	r2, r0
 80043f8:	69bb      	ldr	r3, [r7, #24]
 80043fa:	1ad3      	subs	r3, r2, r3
 80043fc:	2b02      	cmp	r3, #2
 80043fe:	d901      	bls.n	8004404 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8004400:	2303      	movs	r3, #3
 8004402:	e0cd      	b.n	80045a0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004404:	4b45      	ldr	r3, [pc, #276]	; (800451c <HAL_RCC_OscConfig+0x67c>)
 8004406:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004408:	2380      	movs	r3, #128	; 0x80
 800440a:	025b      	lsls	r3, r3, #9
 800440c:	4013      	ands	r3, r2
 800440e:	d0f0      	beq.n	80043f2 <HAL_RCC_OscConfig+0x552>
 8004410:	e01b      	b.n	800444a <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8004412:	4b42      	ldr	r3, [pc, #264]	; (800451c <HAL_RCC_OscConfig+0x67c>)
 8004414:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004416:	4b41      	ldr	r3, [pc, #260]	; (800451c <HAL_RCC_OscConfig+0x67c>)
 8004418:	4943      	ldr	r1, [pc, #268]	; (8004528 <HAL_RCC_OscConfig+0x688>)
 800441a:	400a      	ands	r2, r1
 800441c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800441e:	f7fe f9af 	bl	8002780 <HAL_GetTick>
 8004422:	0003      	movs	r3, r0
 8004424:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8004426:	e008      	b.n	800443a <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004428:	f7fe f9aa 	bl	8002780 <HAL_GetTick>
 800442c:	0002      	movs	r2, r0
 800442e:	69bb      	ldr	r3, [r7, #24]
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	2b02      	cmp	r3, #2
 8004434:	d901      	bls.n	800443a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8004436:	2303      	movs	r3, #3
 8004438:	e0b2      	b.n	80045a0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800443a:	4b38      	ldr	r3, [pc, #224]	; (800451c <HAL_RCC_OscConfig+0x67c>)
 800443c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800443e:	2380      	movs	r3, #128	; 0x80
 8004440:	025b      	lsls	r3, r3, #9
 8004442:	4013      	ands	r3, r2
 8004444:	d1f0      	bne.n	8004428 <HAL_RCC_OscConfig+0x588>
 8004446:	e000      	b.n	800444a <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8004448:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800444e:	2b00      	cmp	r3, #0
 8004450:	d100      	bne.n	8004454 <HAL_RCC_OscConfig+0x5b4>
 8004452:	e0a4      	b.n	800459e <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004454:	4b31      	ldr	r3, [pc, #196]	; (800451c <HAL_RCC_OscConfig+0x67c>)
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	220c      	movs	r2, #12
 800445a:	4013      	ands	r3, r2
 800445c:	2b08      	cmp	r3, #8
 800445e:	d100      	bne.n	8004462 <HAL_RCC_OscConfig+0x5c2>
 8004460:	e078      	b.n	8004554 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004466:	2b02      	cmp	r3, #2
 8004468:	d14c      	bne.n	8004504 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800446a:	4b2c      	ldr	r3, [pc, #176]	; (800451c <HAL_RCC_OscConfig+0x67c>)
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	4b2b      	ldr	r3, [pc, #172]	; (800451c <HAL_RCC_OscConfig+0x67c>)
 8004470:	492e      	ldr	r1, [pc, #184]	; (800452c <HAL_RCC_OscConfig+0x68c>)
 8004472:	400a      	ands	r2, r1
 8004474:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004476:	f7fe f983 	bl	8002780 <HAL_GetTick>
 800447a:	0003      	movs	r3, r0
 800447c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800447e:	e008      	b.n	8004492 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004480:	f7fe f97e 	bl	8002780 <HAL_GetTick>
 8004484:	0002      	movs	r2, r0
 8004486:	69bb      	ldr	r3, [r7, #24]
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	2b02      	cmp	r3, #2
 800448c:	d901      	bls.n	8004492 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800448e:	2303      	movs	r3, #3
 8004490:	e086      	b.n	80045a0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004492:	4b22      	ldr	r3, [pc, #136]	; (800451c <HAL_RCC_OscConfig+0x67c>)
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	2380      	movs	r3, #128	; 0x80
 8004498:	049b      	lsls	r3, r3, #18
 800449a:	4013      	ands	r3, r2
 800449c:	d1f0      	bne.n	8004480 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800449e:	4b1f      	ldr	r3, [pc, #124]	; (800451c <HAL_RCC_OscConfig+0x67c>)
 80044a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a2:	220f      	movs	r2, #15
 80044a4:	4393      	bics	r3, r2
 80044a6:	0019      	movs	r1, r3
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044ac:	4b1b      	ldr	r3, [pc, #108]	; (800451c <HAL_RCC_OscConfig+0x67c>)
 80044ae:	430a      	orrs	r2, r1
 80044b0:	62da      	str	r2, [r3, #44]	; 0x2c
 80044b2:	4b1a      	ldr	r3, [pc, #104]	; (800451c <HAL_RCC_OscConfig+0x67c>)
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	4a1e      	ldr	r2, [pc, #120]	; (8004530 <HAL_RCC_OscConfig+0x690>)
 80044b8:	4013      	ands	r3, r2
 80044ba:	0019      	movs	r1, r3
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044c4:	431a      	orrs	r2, r3
 80044c6:	4b15      	ldr	r3, [pc, #84]	; (800451c <HAL_RCC_OscConfig+0x67c>)
 80044c8:	430a      	orrs	r2, r1
 80044ca:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044cc:	4b13      	ldr	r3, [pc, #76]	; (800451c <HAL_RCC_OscConfig+0x67c>)
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	4b12      	ldr	r3, [pc, #72]	; (800451c <HAL_RCC_OscConfig+0x67c>)
 80044d2:	2180      	movs	r1, #128	; 0x80
 80044d4:	0449      	lsls	r1, r1, #17
 80044d6:	430a      	orrs	r2, r1
 80044d8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044da:	f7fe f951 	bl	8002780 <HAL_GetTick>
 80044de:	0003      	movs	r3, r0
 80044e0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80044e2:	e008      	b.n	80044f6 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044e4:	f7fe f94c 	bl	8002780 <HAL_GetTick>
 80044e8:	0002      	movs	r2, r0
 80044ea:	69bb      	ldr	r3, [r7, #24]
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	2b02      	cmp	r3, #2
 80044f0:	d901      	bls.n	80044f6 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80044f2:	2303      	movs	r3, #3
 80044f4:	e054      	b.n	80045a0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80044f6:	4b09      	ldr	r3, [pc, #36]	; (800451c <HAL_RCC_OscConfig+0x67c>)
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	2380      	movs	r3, #128	; 0x80
 80044fc:	049b      	lsls	r3, r3, #18
 80044fe:	4013      	ands	r3, r2
 8004500:	d0f0      	beq.n	80044e4 <HAL_RCC_OscConfig+0x644>
 8004502:	e04c      	b.n	800459e <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004504:	4b05      	ldr	r3, [pc, #20]	; (800451c <HAL_RCC_OscConfig+0x67c>)
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	4b04      	ldr	r3, [pc, #16]	; (800451c <HAL_RCC_OscConfig+0x67c>)
 800450a:	4908      	ldr	r1, [pc, #32]	; (800452c <HAL_RCC_OscConfig+0x68c>)
 800450c:	400a      	ands	r2, r1
 800450e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004510:	f7fe f936 	bl	8002780 <HAL_GetTick>
 8004514:	0003      	movs	r3, r0
 8004516:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004518:	e015      	b.n	8004546 <HAL_RCC_OscConfig+0x6a6>
 800451a:	46c0      	nop			; (mov r8, r8)
 800451c:	40021000 	.word	0x40021000
 8004520:	00001388 	.word	0x00001388
 8004524:	efffffff 	.word	0xefffffff
 8004528:	fffeffff 	.word	0xfffeffff
 800452c:	feffffff 	.word	0xfeffffff
 8004530:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004534:	f7fe f924 	bl	8002780 <HAL_GetTick>
 8004538:	0002      	movs	r2, r0
 800453a:	69bb      	ldr	r3, [r7, #24]
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	2b02      	cmp	r3, #2
 8004540:	d901      	bls.n	8004546 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8004542:	2303      	movs	r3, #3
 8004544:	e02c      	b.n	80045a0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004546:	4b18      	ldr	r3, [pc, #96]	; (80045a8 <HAL_RCC_OscConfig+0x708>)
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	2380      	movs	r3, #128	; 0x80
 800454c:	049b      	lsls	r3, r3, #18
 800454e:	4013      	ands	r3, r2
 8004550:	d1f0      	bne.n	8004534 <HAL_RCC_OscConfig+0x694>
 8004552:	e024      	b.n	800459e <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004558:	2b01      	cmp	r3, #1
 800455a:	d101      	bne.n	8004560 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	e01f      	b.n	80045a0 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8004560:	4b11      	ldr	r3, [pc, #68]	; (80045a8 <HAL_RCC_OscConfig+0x708>)
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8004566:	4b10      	ldr	r3, [pc, #64]	; (80045a8 <HAL_RCC_OscConfig+0x708>)
 8004568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800456a:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800456c:	697a      	ldr	r2, [r7, #20]
 800456e:	23c0      	movs	r3, #192	; 0xc0
 8004570:	025b      	lsls	r3, r3, #9
 8004572:	401a      	ands	r2, r3
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004578:	429a      	cmp	r2, r3
 800457a:	d10e      	bne.n	800459a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	220f      	movs	r2, #15
 8004580:	401a      	ands	r2, r3
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004586:	429a      	cmp	r2, r3
 8004588:	d107      	bne.n	800459a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800458a:	697a      	ldr	r2, [r7, #20]
 800458c:	23f0      	movs	r3, #240	; 0xf0
 800458e:	039b      	lsls	r3, r3, #14
 8004590:	401a      	ands	r2, r3
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004596:	429a      	cmp	r2, r3
 8004598:	d001      	beq.n	800459e <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	e000      	b.n	80045a0 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800459e:	2300      	movs	r3, #0
}
 80045a0:	0018      	movs	r0, r3
 80045a2:	46bd      	mov	sp, r7
 80045a4:	b008      	add	sp, #32
 80045a6:	bd80      	pop	{r7, pc}
 80045a8:	40021000 	.word	0x40021000

080045ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b084      	sub	sp, #16
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
 80045b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d101      	bne.n	80045c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	e0bf      	b.n	8004740 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80045c0:	4b61      	ldr	r3, [pc, #388]	; (8004748 <HAL_RCC_ClockConfig+0x19c>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	2201      	movs	r2, #1
 80045c6:	4013      	ands	r3, r2
 80045c8:	683a      	ldr	r2, [r7, #0]
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d911      	bls.n	80045f2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045ce:	4b5e      	ldr	r3, [pc, #376]	; (8004748 <HAL_RCC_ClockConfig+0x19c>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	2201      	movs	r2, #1
 80045d4:	4393      	bics	r3, r2
 80045d6:	0019      	movs	r1, r3
 80045d8:	4b5b      	ldr	r3, [pc, #364]	; (8004748 <HAL_RCC_ClockConfig+0x19c>)
 80045da:	683a      	ldr	r2, [r7, #0]
 80045dc:	430a      	orrs	r2, r1
 80045de:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045e0:	4b59      	ldr	r3, [pc, #356]	; (8004748 <HAL_RCC_ClockConfig+0x19c>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	2201      	movs	r2, #1
 80045e6:	4013      	ands	r3, r2
 80045e8:	683a      	ldr	r2, [r7, #0]
 80045ea:	429a      	cmp	r2, r3
 80045ec:	d001      	beq.n	80045f2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	e0a6      	b.n	8004740 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	2202      	movs	r2, #2
 80045f8:	4013      	ands	r3, r2
 80045fa:	d015      	beq.n	8004628 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	2204      	movs	r2, #4
 8004602:	4013      	ands	r3, r2
 8004604:	d006      	beq.n	8004614 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004606:	4b51      	ldr	r3, [pc, #324]	; (800474c <HAL_RCC_ClockConfig+0x1a0>)
 8004608:	685a      	ldr	r2, [r3, #4]
 800460a:	4b50      	ldr	r3, [pc, #320]	; (800474c <HAL_RCC_ClockConfig+0x1a0>)
 800460c:	21e0      	movs	r1, #224	; 0xe0
 800460e:	00c9      	lsls	r1, r1, #3
 8004610:	430a      	orrs	r2, r1
 8004612:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004614:	4b4d      	ldr	r3, [pc, #308]	; (800474c <HAL_RCC_ClockConfig+0x1a0>)
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	22f0      	movs	r2, #240	; 0xf0
 800461a:	4393      	bics	r3, r2
 800461c:	0019      	movs	r1, r3
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	689a      	ldr	r2, [r3, #8]
 8004622:	4b4a      	ldr	r3, [pc, #296]	; (800474c <HAL_RCC_ClockConfig+0x1a0>)
 8004624:	430a      	orrs	r2, r1
 8004626:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	2201      	movs	r2, #1
 800462e:	4013      	ands	r3, r2
 8004630:	d04c      	beq.n	80046cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	2b01      	cmp	r3, #1
 8004638:	d107      	bne.n	800464a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800463a:	4b44      	ldr	r3, [pc, #272]	; (800474c <HAL_RCC_ClockConfig+0x1a0>)
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	2380      	movs	r3, #128	; 0x80
 8004640:	029b      	lsls	r3, r3, #10
 8004642:	4013      	ands	r3, r2
 8004644:	d120      	bne.n	8004688 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	e07a      	b.n	8004740 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	2b02      	cmp	r3, #2
 8004650:	d107      	bne.n	8004662 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004652:	4b3e      	ldr	r3, [pc, #248]	; (800474c <HAL_RCC_ClockConfig+0x1a0>)
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	2380      	movs	r3, #128	; 0x80
 8004658:	049b      	lsls	r3, r3, #18
 800465a:	4013      	ands	r3, r2
 800465c:	d114      	bne.n	8004688 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e06e      	b.n	8004740 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	2b03      	cmp	r3, #3
 8004668:	d107      	bne.n	800467a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800466a:	4b38      	ldr	r3, [pc, #224]	; (800474c <HAL_RCC_ClockConfig+0x1a0>)
 800466c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800466e:	2380      	movs	r3, #128	; 0x80
 8004670:	025b      	lsls	r3, r3, #9
 8004672:	4013      	ands	r3, r2
 8004674:	d108      	bne.n	8004688 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	e062      	b.n	8004740 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800467a:	4b34      	ldr	r3, [pc, #208]	; (800474c <HAL_RCC_ClockConfig+0x1a0>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	2202      	movs	r2, #2
 8004680:	4013      	ands	r3, r2
 8004682:	d101      	bne.n	8004688 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	e05b      	b.n	8004740 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004688:	4b30      	ldr	r3, [pc, #192]	; (800474c <HAL_RCC_ClockConfig+0x1a0>)
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	2203      	movs	r2, #3
 800468e:	4393      	bics	r3, r2
 8004690:	0019      	movs	r1, r3
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	685a      	ldr	r2, [r3, #4]
 8004696:	4b2d      	ldr	r3, [pc, #180]	; (800474c <HAL_RCC_ClockConfig+0x1a0>)
 8004698:	430a      	orrs	r2, r1
 800469a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800469c:	f7fe f870 	bl	8002780 <HAL_GetTick>
 80046a0:	0003      	movs	r3, r0
 80046a2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046a4:	e009      	b.n	80046ba <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046a6:	f7fe f86b 	bl	8002780 <HAL_GetTick>
 80046aa:	0002      	movs	r2, r0
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	1ad3      	subs	r3, r2, r3
 80046b0:	4a27      	ldr	r2, [pc, #156]	; (8004750 <HAL_RCC_ClockConfig+0x1a4>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d901      	bls.n	80046ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80046b6:	2303      	movs	r3, #3
 80046b8:	e042      	b.n	8004740 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046ba:	4b24      	ldr	r3, [pc, #144]	; (800474c <HAL_RCC_ClockConfig+0x1a0>)
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	220c      	movs	r2, #12
 80046c0:	401a      	ands	r2, r3
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	009b      	lsls	r3, r3, #2
 80046c8:	429a      	cmp	r2, r3
 80046ca:	d1ec      	bne.n	80046a6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80046cc:	4b1e      	ldr	r3, [pc, #120]	; (8004748 <HAL_RCC_ClockConfig+0x19c>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	2201      	movs	r2, #1
 80046d2:	4013      	ands	r3, r2
 80046d4:	683a      	ldr	r2, [r7, #0]
 80046d6:	429a      	cmp	r2, r3
 80046d8:	d211      	bcs.n	80046fe <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046da:	4b1b      	ldr	r3, [pc, #108]	; (8004748 <HAL_RCC_ClockConfig+0x19c>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	2201      	movs	r2, #1
 80046e0:	4393      	bics	r3, r2
 80046e2:	0019      	movs	r1, r3
 80046e4:	4b18      	ldr	r3, [pc, #96]	; (8004748 <HAL_RCC_ClockConfig+0x19c>)
 80046e6:	683a      	ldr	r2, [r7, #0]
 80046e8:	430a      	orrs	r2, r1
 80046ea:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046ec:	4b16      	ldr	r3, [pc, #88]	; (8004748 <HAL_RCC_ClockConfig+0x19c>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	2201      	movs	r2, #1
 80046f2:	4013      	ands	r3, r2
 80046f4:	683a      	ldr	r2, [r7, #0]
 80046f6:	429a      	cmp	r2, r3
 80046f8:	d001      	beq.n	80046fe <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	e020      	b.n	8004740 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	2204      	movs	r2, #4
 8004704:	4013      	ands	r3, r2
 8004706:	d009      	beq.n	800471c <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004708:	4b10      	ldr	r3, [pc, #64]	; (800474c <HAL_RCC_ClockConfig+0x1a0>)
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	4a11      	ldr	r2, [pc, #68]	; (8004754 <HAL_RCC_ClockConfig+0x1a8>)
 800470e:	4013      	ands	r3, r2
 8004710:	0019      	movs	r1, r3
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	68da      	ldr	r2, [r3, #12]
 8004716:	4b0d      	ldr	r3, [pc, #52]	; (800474c <HAL_RCC_ClockConfig+0x1a0>)
 8004718:	430a      	orrs	r2, r1
 800471a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800471c:	f000 f820 	bl	8004760 <HAL_RCC_GetSysClockFreq>
 8004720:	0001      	movs	r1, r0
 8004722:	4b0a      	ldr	r3, [pc, #40]	; (800474c <HAL_RCC_ClockConfig+0x1a0>)
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	091b      	lsrs	r3, r3, #4
 8004728:	220f      	movs	r2, #15
 800472a:	4013      	ands	r3, r2
 800472c:	4a0a      	ldr	r2, [pc, #40]	; (8004758 <HAL_RCC_ClockConfig+0x1ac>)
 800472e:	5cd3      	ldrb	r3, [r2, r3]
 8004730:	000a      	movs	r2, r1
 8004732:	40da      	lsrs	r2, r3
 8004734:	4b09      	ldr	r3, [pc, #36]	; (800475c <HAL_RCC_ClockConfig+0x1b0>)
 8004736:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004738:	2000      	movs	r0, #0
 800473a:	f7fd ffdb 	bl	80026f4 <HAL_InitTick>
  
  return HAL_OK;
 800473e:	2300      	movs	r3, #0
}
 8004740:	0018      	movs	r0, r3
 8004742:	46bd      	mov	sp, r7
 8004744:	b004      	add	sp, #16
 8004746:	bd80      	pop	{r7, pc}
 8004748:	40022000 	.word	0x40022000
 800474c:	40021000 	.word	0x40021000
 8004750:	00001388 	.word	0x00001388
 8004754:	fffff8ff 	.word	0xfffff8ff
 8004758:	0800612c 	.word	0x0800612c
 800475c:	20000000 	.word	0x20000000

08004760 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004760:	b590      	push	{r4, r7, lr}
 8004762:	b08f      	sub	sp, #60	; 0x3c
 8004764:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8004766:	2314      	movs	r3, #20
 8004768:	18fb      	adds	r3, r7, r3
 800476a:	4a37      	ldr	r2, [pc, #220]	; (8004848 <HAL_RCC_GetSysClockFreq+0xe8>)
 800476c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800476e:	c313      	stmia	r3!, {r0, r1, r4}
 8004770:	6812      	ldr	r2, [r2, #0]
 8004772:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8004774:	1d3b      	adds	r3, r7, #4
 8004776:	4a35      	ldr	r2, [pc, #212]	; (800484c <HAL_RCC_GetSysClockFreq+0xec>)
 8004778:	ca13      	ldmia	r2!, {r0, r1, r4}
 800477a:	c313      	stmia	r3!, {r0, r1, r4}
 800477c:	6812      	ldr	r2, [r2, #0]
 800477e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004780:	2300      	movs	r3, #0
 8004782:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004784:	2300      	movs	r3, #0
 8004786:	62bb      	str	r3, [r7, #40]	; 0x28
 8004788:	2300      	movs	r3, #0
 800478a:	637b      	str	r3, [r7, #52]	; 0x34
 800478c:	2300      	movs	r3, #0
 800478e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8004790:	2300      	movs	r3, #0
 8004792:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8004794:	4b2e      	ldr	r3, [pc, #184]	; (8004850 <HAL_RCC_GetSysClockFreq+0xf0>)
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800479a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800479c:	220c      	movs	r2, #12
 800479e:	4013      	ands	r3, r2
 80047a0:	2b08      	cmp	r3, #8
 80047a2:	d006      	beq.n	80047b2 <HAL_RCC_GetSysClockFreq+0x52>
 80047a4:	2b0c      	cmp	r3, #12
 80047a6:	d043      	beq.n	8004830 <HAL_RCC_GetSysClockFreq+0xd0>
 80047a8:	2b04      	cmp	r3, #4
 80047aa:	d144      	bne.n	8004836 <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80047ac:	4b29      	ldr	r3, [pc, #164]	; (8004854 <HAL_RCC_GetSysClockFreq+0xf4>)
 80047ae:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80047b0:	e044      	b.n	800483c <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80047b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047b4:	0c9b      	lsrs	r3, r3, #18
 80047b6:	220f      	movs	r2, #15
 80047b8:	4013      	ands	r3, r2
 80047ba:	2214      	movs	r2, #20
 80047bc:	18ba      	adds	r2, r7, r2
 80047be:	5cd3      	ldrb	r3, [r2, r3]
 80047c0:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80047c2:	4b23      	ldr	r3, [pc, #140]	; (8004850 <HAL_RCC_GetSysClockFreq+0xf0>)
 80047c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047c6:	220f      	movs	r2, #15
 80047c8:	4013      	ands	r3, r2
 80047ca:	1d3a      	adds	r2, r7, #4
 80047cc:	5cd3      	ldrb	r3, [r2, r3]
 80047ce:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80047d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047d2:	23c0      	movs	r3, #192	; 0xc0
 80047d4:	025b      	lsls	r3, r3, #9
 80047d6:	401a      	ands	r2, r3
 80047d8:	2380      	movs	r3, #128	; 0x80
 80047da:	025b      	lsls	r3, r3, #9
 80047dc:	429a      	cmp	r2, r3
 80047de:	d109      	bne.n	80047f4 <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80047e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80047e2:	481c      	ldr	r0, [pc, #112]	; (8004854 <HAL_RCC_GetSysClockFreq+0xf4>)
 80047e4:	f7fb fc90 	bl	8000108 <__udivsi3>
 80047e8:	0003      	movs	r3, r0
 80047ea:	001a      	movs	r2, r3
 80047ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ee:	4353      	muls	r3, r2
 80047f0:	637b      	str	r3, [r7, #52]	; 0x34
 80047f2:	e01a      	b.n	800482a <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80047f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047f6:	23c0      	movs	r3, #192	; 0xc0
 80047f8:	025b      	lsls	r3, r3, #9
 80047fa:	401a      	ands	r2, r3
 80047fc:	23c0      	movs	r3, #192	; 0xc0
 80047fe:	025b      	lsls	r3, r3, #9
 8004800:	429a      	cmp	r2, r3
 8004802:	d109      	bne.n	8004818 <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004804:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004806:	4814      	ldr	r0, [pc, #80]	; (8004858 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004808:	f7fb fc7e 	bl	8000108 <__udivsi3>
 800480c:	0003      	movs	r3, r0
 800480e:	001a      	movs	r2, r3
 8004810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004812:	4353      	muls	r3, r2
 8004814:	637b      	str	r3, [r7, #52]	; 0x34
 8004816:	e008      	b.n	800482a <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004818:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800481a:	4810      	ldr	r0, [pc, #64]	; (800485c <HAL_RCC_GetSysClockFreq+0xfc>)
 800481c:	f7fb fc74 	bl	8000108 <__udivsi3>
 8004820:	0003      	movs	r3, r0
 8004822:	001a      	movs	r2, r3
 8004824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004826:	4353      	muls	r3, r2
 8004828:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800482a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800482c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800482e:	e005      	b.n	800483c <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8004830:	4b09      	ldr	r3, [pc, #36]	; (8004858 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004832:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004834:	e002      	b.n	800483c <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004836:	4b09      	ldr	r3, [pc, #36]	; (800485c <HAL_RCC_GetSysClockFreq+0xfc>)
 8004838:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800483a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800483c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800483e:	0018      	movs	r0, r3
 8004840:	46bd      	mov	sp, r7
 8004842:	b00f      	add	sp, #60	; 0x3c
 8004844:	bd90      	pop	{r4, r7, pc}
 8004846:	46c0      	nop			; (mov r8, r8)
 8004848:	0800610c 	.word	0x0800610c
 800484c:	0800611c 	.word	0x0800611c
 8004850:	40021000 	.word	0x40021000
 8004854:	00f42400 	.word	0x00f42400
 8004858:	02dc6c00 	.word	0x02dc6c00
 800485c:	007a1200 	.word	0x007a1200

08004860 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b086      	sub	sp, #24
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004868:	2300      	movs	r3, #0
 800486a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 800486c:	2300      	movs	r3, #0
 800486e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	2380      	movs	r3, #128	; 0x80
 8004876:	025b      	lsls	r3, r3, #9
 8004878:	4013      	ands	r3, r2
 800487a:	d100      	bne.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 800487c:	e08f      	b.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800487e:	2317      	movs	r3, #23
 8004880:	18fb      	adds	r3, r7, r3
 8004882:	2200      	movs	r2, #0
 8004884:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004886:	4b67      	ldr	r3, [pc, #412]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004888:	69da      	ldr	r2, [r3, #28]
 800488a:	2380      	movs	r3, #128	; 0x80
 800488c:	055b      	lsls	r3, r3, #21
 800488e:	4013      	ands	r3, r2
 8004890:	d111      	bne.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004892:	4b64      	ldr	r3, [pc, #400]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004894:	69da      	ldr	r2, [r3, #28]
 8004896:	4b63      	ldr	r3, [pc, #396]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004898:	2180      	movs	r1, #128	; 0x80
 800489a:	0549      	lsls	r1, r1, #21
 800489c:	430a      	orrs	r2, r1
 800489e:	61da      	str	r2, [r3, #28]
 80048a0:	4b60      	ldr	r3, [pc, #384]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80048a2:	69da      	ldr	r2, [r3, #28]
 80048a4:	2380      	movs	r3, #128	; 0x80
 80048a6:	055b      	lsls	r3, r3, #21
 80048a8:	4013      	ands	r3, r2
 80048aa:	60bb      	str	r3, [r7, #8]
 80048ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048ae:	2317      	movs	r3, #23
 80048b0:	18fb      	adds	r3, r7, r3
 80048b2:	2201      	movs	r2, #1
 80048b4:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048b6:	4b5c      	ldr	r3, [pc, #368]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	2380      	movs	r3, #128	; 0x80
 80048bc:	005b      	lsls	r3, r3, #1
 80048be:	4013      	ands	r3, r2
 80048c0:	d11a      	bne.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048c2:	4b59      	ldr	r3, [pc, #356]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	4b58      	ldr	r3, [pc, #352]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80048c8:	2180      	movs	r1, #128	; 0x80
 80048ca:	0049      	lsls	r1, r1, #1
 80048cc:	430a      	orrs	r2, r1
 80048ce:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048d0:	f7fd ff56 	bl	8002780 <HAL_GetTick>
 80048d4:	0003      	movs	r3, r0
 80048d6:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048d8:	e008      	b.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048da:	f7fd ff51 	bl	8002780 <HAL_GetTick>
 80048de:	0002      	movs	r2, r0
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	1ad3      	subs	r3, r2, r3
 80048e4:	2b64      	cmp	r3, #100	; 0x64
 80048e6:	d901      	bls.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 80048e8:	2303      	movs	r3, #3
 80048ea:	e097      	b.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x1bc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048ec:	4b4e      	ldr	r3, [pc, #312]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	2380      	movs	r3, #128	; 0x80
 80048f2:	005b      	lsls	r3, r3, #1
 80048f4:	4013      	ands	r3, r2
 80048f6:	d0f0      	beq.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80048f8:	4b4a      	ldr	r3, [pc, #296]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80048fa:	6a1a      	ldr	r2, [r3, #32]
 80048fc:	23c0      	movs	r3, #192	; 0xc0
 80048fe:	009b      	lsls	r3, r3, #2
 8004900:	4013      	ands	r3, r2
 8004902:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d034      	beq.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x114>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	685a      	ldr	r2, [r3, #4]
 800490e:	23c0      	movs	r3, #192	; 0xc0
 8004910:	009b      	lsls	r3, r3, #2
 8004912:	4013      	ands	r3, r2
 8004914:	68fa      	ldr	r2, [r7, #12]
 8004916:	429a      	cmp	r2, r3
 8004918:	d02c      	beq.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800491a:	4b42      	ldr	r3, [pc, #264]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800491c:	6a1b      	ldr	r3, [r3, #32]
 800491e:	4a43      	ldr	r2, [pc, #268]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004920:	4013      	ands	r3, r2
 8004922:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004924:	4b3f      	ldr	r3, [pc, #252]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004926:	6a1a      	ldr	r2, [r3, #32]
 8004928:	4b3e      	ldr	r3, [pc, #248]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800492a:	2180      	movs	r1, #128	; 0x80
 800492c:	0249      	lsls	r1, r1, #9
 800492e:	430a      	orrs	r2, r1
 8004930:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004932:	4b3c      	ldr	r3, [pc, #240]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004934:	6a1a      	ldr	r2, [r3, #32]
 8004936:	4b3b      	ldr	r3, [pc, #236]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004938:	493d      	ldr	r1, [pc, #244]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800493a:	400a      	ands	r2, r1
 800493c:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800493e:	4b39      	ldr	r3, [pc, #228]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004940:	68fa      	ldr	r2, [r7, #12]
 8004942:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2201      	movs	r2, #1
 8004948:	4013      	ands	r3, r2
 800494a:	d013      	beq.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800494c:	f7fd ff18 	bl	8002780 <HAL_GetTick>
 8004950:	0003      	movs	r3, r0
 8004952:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004954:	e009      	b.n	800496a <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004956:	f7fd ff13 	bl	8002780 <HAL_GetTick>
 800495a:	0002      	movs	r2, r0
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	1ad3      	subs	r3, r2, r3
 8004960:	4a34      	ldr	r2, [pc, #208]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d901      	bls.n	800496a <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8004966:	2303      	movs	r3, #3
 8004968:	e058      	b.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x1bc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800496a:	4b2e      	ldr	r3, [pc, #184]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800496c:	6a1b      	ldr	r3, [r3, #32]
 800496e:	2202      	movs	r2, #2
 8004970:	4013      	ands	r3, r2
 8004972:	d0f0      	beq.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004974:	4b2b      	ldr	r3, [pc, #172]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004976:	6a1b      	ldr	r3, [r3, #32]
 8004978:	4a2c      	ldr	r2, [pc, #176]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800497a:	4013      	ands	r3, r2
 800497c:	0019      	movs	r1, r3
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	685a      	ldr	r2, [r3, #4]
 8004982:	4b28      	ldr	r3, [pc, #160]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004984:	430a      	orrs	r2, r1
 8004986:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004988:	2317      	movs	r3, #23
 800498a:	18fb      	adds	r3, r7, r3
 800498c:	781b      	ldrb	r3, [r3, #0]
 800498e:	2b01      	cmp	r3, #1
 8004990:	d105      	bne.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004992:	4b24      	ldr	r3, [pc, #144]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004994:	69da      	ldr	r2, [r3, #28]
 8004996:	4b23      	ldr	r3, [pc, #140]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004998:	4927      	ldr	r1, [pc, #156]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800499a:	400a      	ands	r2, r1
 800499c:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	2201      	movs	r2, #1
 80049a4:	4013      	ands	r3, r2
 80049a6:	d009      	beq.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80049a8:	4b1e      	ldr	r3, [pc, #120]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80049aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ac:	2203      	movs	r2, #3
 80049ae:	4393      	bics	r3, r2
 80049b0:	0019      	movs	r1, r3
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	689a      	ldr	r2, [r3, #8]
 80049b6:	4b1b      	ldr	r3, [pc, #108]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80049b8:	430a      	orrs	r2, r1
 80049ba:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	2220      	movs	r2, #32
 80049c2:	4013      	ands	r3, r2
 80049c4:	d009      	beq.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80049c6:	4b17      	ldr	r3, [pc, #92]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80049c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ca:	2210      	movs	r2, #16
 80049cc:	4393      	bics	r3, r2
 80049ce:	0019      	movs	r1, r3
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	68da      	ldr	r2, [r3, #12]
 80049d4:	4b13      	ldr	r3, [pc, #76]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80049d6:	430a      	orrs	r2, r1
 80049d8:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	2380      	movs	r3, #128	; 0x80
 80049e0:	029b      	lsls	r3, r3, #10
 80049e2:	4013      	ands	r3, r2
 80049e4:	d009      	beq.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80049e6:	4b0f      	ldr	r3, [pc, #60]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80049e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ea:	2280      	movs	r2, #128	; 0x80
 80049ec:	4393      	bics	r3, r2
 80049ee:	0019      	movs	r1, r3
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	695a      	ldr	r2, [r3, #20]
 80049f4:	4b0b      	ldr	r3, [pc, #44]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80049f6:	430a      	orrs	r2, r1
 80049f8:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	2380      	movs	r3, #128	; 0x80
 8004a00:	00db      	lsls	r3, r3, #3
 8004a02:	4013      	ands	r3, r2
 8004a04:	d009      	beq.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x1ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004a06:	4b07      	ldr	r3, [pc, #28]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a0a:	2240      	movs	r2, #64	; 0x40
 8004a0c:	4393      	bics	r3, r2
 8004a0e:	0019      	movs	r1, r3
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	691a      	ldr	r2, [r3, #16]
 8004a14:	4b03      	ldr	r3, [pc, #12]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004a16:	430a      	orrs	r2, r1
 8004a18:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8004a1a:	2300      	movs	r3, #0
}
 8004a1c:	0018      	movs	r0, r3
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	b006      	add	sp, #24
 8004a22:	bd80      	pop	{r7, pc}
 8004a24:	40021000 	.word	0x40021000
 8004a28:	40007000 	.word	0x40007000
 8004a2c:	fffffcff 	.word	0xfffffcff
 8004a30:	fffeffff 	.word	0xfffeffff
 8004a34:	00001388 	.word	0x00001388
 8004a38:	efffffff 	.word	0xefffffff

08004a3c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b084      	sub	sp, #16
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d101      	bne.n	8004a4e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e08a      	b.n	8004b64 <HAL_SPI_Init+0x128>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2200      	movs	r2, #0
 8004a52:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	225d      	movs	r2, #93	; 0x5d
 8004a58:	5c9b      	ldrb	r3, [r3, r2]
 8004a5a:	b2db      	uxtb	r3, r3
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d107      	bne.n	8004a70 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	225c      	movs	r2, #92	; 0x5c
 8004a64:	2100      	movs	r1, #0
 8004a66:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	0018      	movs	r0, r3
 8004a6c:	f7fd fce8 	bl	8002440 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	225d      	movs	r2, #93	; 0x5d
 8004a74:	2102      	movs	r1, #2
 8004a76:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	2140      	movs	r1, #64	; 0x40
 8004a84:	438a      	bics	r2, r1
 8004a86:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	68da      	ldr	r2, [r3, #12]
 8004a8c:	23e0      	movs	r3, #224	; 0xe0
 8004a8e:	00db      	lsls	r3, r3, #3
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d902      	bls.n	8004a9a <HAL_SPI_Init+0x5e>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004a94:	2300      	movs	r3, #0
 8004a96:	60fb      	str	r3, [r7, #12]
 8004a98:	e002      	b.n	8004aa0 <HAL_SPI_Init+0x64>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004a9a:	2380      	movs	r3, #128	; 0x80
 8004a9c:	015b      	lsls	r3, r3, #5
 8004a9e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	68da      	ldr	r2, [r3, #12]
 8004aa4:	23f0      	movs	r3, #240	; 0xf0
 8004aa6:	011b      	lsls	r3, r3, #4
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d008      	beq.n	8004abe <HAL_SPI_Init+0x82>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	68da      	ldr	r2, [r3, #12]
 8004ab0:	23e0      	movs	r3, #224	; 0xe0
 8004ab2:	00db      	lsls	r3, r3, #3
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d002      	beq.n	8004abe <HAL_SPI_Init+0x82>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2200      	movs	r2, #0
 8004abc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d10c      	bne.n	8004ae0 <HAL_SPI_Init+0xa4>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	68da      	ldr	r2, [r3, #12]
 8004aca:	23e0      	movs	r3, #224	; 0xe0
 8004acc:	00db      	lsls	r3, r3, #3
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	d903      	bls.n	8004ada <HAL_SPI_Init+0x9e>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2202      	movs	r2, #2
 8004ad6:	631a      	str	r2, [r3, #48]	; 0x30
 8004ad8:	e002      	b.n	8004ae0 <HAL_SPI_Init+0xa4>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2201      	movs	r2, #1
 8004ade:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	685a      	ldr	r2, [r3, #4]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	431a      	orrs	r2, r3
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	691b      	ldr	r3, [r3, #16]
 8004aee:	431a      	orrs	r2, r3
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	695b      	ldr	r3, [r3, #20]
 8004af4:	431a      	orrs	r2, r3
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6999      	ldr	r1, [r3, #24]
 8004afa:	2380      	movs	r3, #128	; 0x80
 8004afc:	009b      	lsls	r3, r3, #2
 8004afe:	400b      	ands	r3, r1
 8004b00:	431a      	orrs	r2, r3
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	69db      	ldr	r3, [r3, #28]
 8004b06:	431a      	orrs	r2, r3
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6a1b      	ldr	r3, [r3, #32]
 8004b0c:	431a      	orrs	r2, r3
 8004b0e:	0011      	movs	r1, r2
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	430a      	orrs	r2, r1
 8004b1a:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	699b      	ldr	r3, [r3, #24]
 8004b20:	0c1b      	lsrs	r3, r3, #16
 8004b22:	2204      	movs	r2, #4
 8004b24:	401a      	ands	r2, r3
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b2a:	431a      	orrs	r2, r3
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b30:	431a      	orrs	r2, r3
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	68db      	ldr	r3, [r3, #12]
 8004b36:	431a      	orrs	r2, r3
 8004b38:	0011      	movs	r1, r2
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	68fa      	ldr	r2, [r7, #12]
 8004b40:	430a      	orrs	r2, r1
 8004b42:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	69da      	ldr	r2, [r3, #28]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4907      	ldr	r1, [pc, #28]	; (8004b6c <HAL_SPI_Init+0x130>)
 8004b50:	400a      	ands	r2, r1
 8004b52:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2200      	movs	r2, #0
 8004b58:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	225d      	movs	r2, #93	; 0x5d
 8004b5e:	2101      	movs	r1, #1
 8004b60:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004b62:	2300      	movs	r3, #0
}
 8004b64:	0018      	movs	r0, r3
 8004b66:	46bd      	mov	sp, r7
 8004b68:	b004      	add	sp, #16
 8004b6a:	bd80      	pop	{r7, pc}
 8004b6c:	fffff7ff 	.word	0xfffff7ff

08004b70 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b088      	sub	sp, #32
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	60f8      	str	r0, [r7, #12]
 8004b78:	60b9      	str	r1, [r7, #8]
 8004b7a:	603b      	str	r3, [r7, #0]
 8004b7c:	1dbb      	adds	r3, r7, #6
 8004b7e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004b80:	231f      	movs	r3, #31
 8004b82:	18fb      	adds	r3, r7, r3
 8004b84:	2200      	movs	r2, #0
 8004b86:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	225c      	movs	r2, #92	; 0x5c
 8004b8c:	5c9b      	ldrb	r3, [r3, r2]
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	d101      	bne.n	8004b96 <HAL_SPI_Transmit+0x26>
 8004b92:	2302      	movs	r3, #2
 8004b94:	e169      	b.n	8004e6a <HAL_SPI_Transmit+0x2fa>
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	225c      	movs	r2, #92	; 0x5c
 8004b9a:	2101      	movs	r1, #1
 8004b9c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b9e:	f7fd fdef 	bl	8002780 <HAL_GetTick>
 8004ba2:	0003      	movs	r3, r0
 8004ba4:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004ba6:	2316      	movs	r3, #22
 8004ba8:	18fb      	adds	r3, r7, r3
 8004baa:	1dba      	adds	r2, r7, #6
 8004bac:	8812      	ldrh	r2, [r2, #0]
 8004bae:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	225d      	movs	r2, #93	; 0x5d
 8004bb4:	5c9b      	ldrb	r3, [r3, r2]
 8004bb6:	b2db      	uxtb	r3, r3
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	d004      	beq.n	8004bc6 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8004bbc:	231f      	movs	r3, #31
 8004bbe:	18fb      	adds	r3, r7, r3
 8004bc0:	2202      	movs	r2, #2
 8004bc2:	701a      	strb	r2, [r3, #0]
    goto error;
 8004bc4:	e146      	b.n	8004e54 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d003      	beq.n	8004bd4 <HAL_SPI_Transmit+0x64>
 8004bcc:	1dbb      	adds	r3, r7, #6
 8004bce:	881b      	ldrh	r3, [r3, #0]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d104      	bne.n	8004bde <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8004bd4:	231f      	movs	r3, #31
 8004bd6:	18fb      	adds	r3, r7, r3
 8004bd8:	2201      	movs	r2, #1
 8004bda:	701a      	strb	r2, [r3, #0]
    goto error;
 8004bdc:	e13a      	b.n	8004e54 <HAL_SPI_Transmit+0x2e4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	225d      	movs	r2, #93	; 0x5d
 8004be2:	2103      	movs	r1, #3
 8004be4:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2200      	movs	r2, #0
 8004bea:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	68ba      	ldr	r2, [r7, #8]
 8004bf0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	1dba      	adds	r2, r7, #6
 8004bf6:	8812      	ldrh	r2, [r2, #0]
 8004bf8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	1dba      	adds	r2, r7, #6
 8004bfe:	8812      	ldrh	r2, [r2, #0]
 8004c00:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2200      	movs	r2, #0
 8004c06:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	2244      	movs	r2, #68	; 0x44
 8004c0c:	2100      	movs	r1, #0
 8004c0e:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2246      	movs	r2, #70	; 0x46
 8004c14:	2100      	movs	r1, #0
 8004c16:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2200      	movs	r2, #0
 8004c22:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	689a      	ldr	r2, [r3, #8]
 8004c28:	2380      	movs	r3, #128	; 0x80
 8004c2a:	021b      	lsls	r3, r3, #8
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d108      	bne.n	8004c42 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	681a      	ldr	r2, [r3, #0]
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	2180      	movs	r1, #128	; 0x80
 8004c3c:	01c9      	lsls	r1, r1, #7
 8004c3e:	430a      	orrs	r2, r1
 8004c40:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	2240      	movs	r2, #64	; 0x40
 8004c4a:	4013      	ands	r3, r2
 8004c4c:	2b40      	cmp	r3, #64	; 0x40
 8004c4e:	d007      	beq.n	8004c60 <HAL_SPI_Transmit+0xf0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	2140      	movs	r1, #64	; 0x40
 8004c5c:	430a      	orrs	r2, r1
 8004c5e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	68da      	ldr	r2, [r3, #12]
 8004c64:	23e0      	movs	r3, #224	; 0xe0
 8004c66:	00db      	lsls	r3, r3, #3
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d94e      	bls.n	8004d0a <HAL_SPI_Transmit+0x19a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d004      	beq.n	8004c7e <HAL_SPI_Transmit+0x10e>
 8004c74:	2316      	movs	r3, #22
 8004c76:	18fb      	adds	r3, r7, r3
 8004c78:	881b      	ldrh	r3, [r3, #0]
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	d13f      	bne.n	8004cfe <HAL_SPI_Transmit+0x18e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c82:	881a      	ldrh	r2, [r3, #0]
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c8e:	1c9a      	adds	r2, r3, #2
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c98:	b29b      	uxth	r3, r3
 8004c9a:	3b01      	subs	r3, #1
 8004c9c:	b29a      	uxth	r2, r3
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004ca2:	e02c      	b.n	8004cfe <HAL_SPI_Transmit+0x18e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	2202      	movs	r2, #2
 8004cac:	4013      	ands	r3, r2
 8004cae:	2b02      	cmp	r3, #2
 8004cb0:	d112      	bne.n	8004cd8 <HAL_SPI_Transmit+0x168>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cb6:	881a      	ldrh	r2, [r3, #0]
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cc2:	1c9a      	adds	r2, r3, #2
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ccc:	b29b      	uxth	r3, r3
 8004cce:	3b01      	subs	r3, #1
 8004cd0:	b29a      	uxth	r2, r3
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004cd6:	e012      	b.n	8004cfe <HAL_SPI_Transmit+0x18e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004cd8:	f7fd fd52 	bl	8002780 <HAL_GetTick>
 8004cdc:	0002      	movs	r2, r0
 8004cde:	69bb      	ldr	r3, [r7, #24]
 8004ce0:	1ad3      	subs	r3, r2, r3
 8004ce2:	683a      	ldr	r2, [r7, #0]
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d802      	bhi.n	8004cee <HAL_SPI_Transmit+0x17e>
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	3301      	adds	r3, #1
 8004cec:	d102      	bne.n	8004cf4 <HAL_SPI_Transmit+0x184>
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d104      	bne.n	8004cfe <HAL_SPI_Transmit+0x18e>
        {
          errorcode = HAL_TIMEOUT;
 8004cf4:	231f      	movs	r3, #31
 8004cf6:	18fb      	adds	r3, r7, r3
 8004cf8:	2203      	movs	r2, #3
 8004cfa:	701a      	strb	r2, [r3, #0]
          goto error;
 8004cfc:	e0aa      	b.n	8004e54 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d02:	b29b      	uxth	r3, r3
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d1cd      	bne.n	8004ca4 <HAL_SPI_Transmit+0x134>
 8004d08:	e080      	b.n	8004e0c <HAL_SPI_Transmit+0x29c>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d005      	beq.n	8004d1e <HAL_SPI_Transmit+0x1ae>
 8004d12:	2316      	movs	r3, #22
 8004d14:	18fb      	adds	r3, r7, r3
 8004d16:	881b      	ldrh	r3, [r3, #0]
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	d000      	beq.n	8004d1e <HAL_SPI_Transmit+0x1ae>
 8004d1c:	e071      	b.n	8004e02 <HAL_SPI_Transmit+0x292>
    {
      if (hspi->TxXferCount > 1U)
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d22:	b29b      	uxth	r3, r3
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d912      	bls.n	8004d4e <HAL_SPI_Transmit+0x1de>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d2c:	881a      	ldrh	r2, [r3, #0]
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d38:	1c9a      	adds	r2, r3, #2
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d42:	b29b      	uxth	r3, r3
 8004d44:	3b02      	subs	r3, #2
 8004d46:	b29a      	uxth	r2, r3
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004d4c:	e059      	b.n	8004e02 <HAL_SPI_Transmit+0x292>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	330c      	adds	r3, #12
 8004d58:	7812      	ldrb	r2, [r2, #0]
 8004d5a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d60:	1c5a      	adds	r2, r3, #1
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	3b01      	subs	r3, #1
 8004d6e:	b29a      	uxth	r2, r3
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004d74:	e045      	b.n	8004e02 <HAL_SPI_Transmit+0x292>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	2202      	movs	r2, #2
 8004d7e:	4013      	ands	r3, r2
 8004d80:	2b02      	cmp	r3, #2
 8004d82:	d12b      	bne.n	8004ddc <HAL_SPI_Transmit+0x26c>
      {
        if (hspi->TxXferCount > 1U)
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d912      	bls.n	8004db4 <HAL_SPI_Transmit+0x244>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d92:	881a      	ldrh	r2, [r3, #0]
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d9e:	1c9a      	adds	r2, r3, #2
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004da8:	b29b      	uxth	r3, r3
 8004daa:	3b02      	subs	r3, #2
 8004dac:	b29a      	uxth	r2, r3
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004db2:	e026      	b.n	8004e02 <HAL_SPI_Transmit+0x292>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	330c      	adds	r3, #12
 8004dbe:	7812      	ldrb	r2, [r2, #0]
 8004dc0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dc6:	1c5a      	adds	r2, r3, #1
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dd0:	b29b      	uxth	r3, r3
 8004dd2:	3b01      	subs	r3, #1
 8004dd4:	b29a      	uxth	r2, r3
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004dda:	e012      	b.n	8004e02 <HAL_SPI_Transmit+0x292>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ddc:	f7fd fcd0 	bl	8002780 <HAL_GetTick>
 8004de0:	0002      	movs	r2, r0
 8004de2:	69bb      	ldr	r3, [r7, #24]
 8004de4:	1ad3      	subs	r3, r2, r3
 8004de6:	683a      	ldr	r2, [r7, #0]
 8004de8:	429a      	cmp	r2, r3
 8004dea:	d802      	bhi.n	8004df2 <HAL_SPI_Transmit+0x282>
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	3301      	adds	r3, #1
 8004df0:	d102      	bne.n	8004df8 <HAL_SPI_Transmit+0x288>
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d104      	bne.n	8004e02 <HAL_SPI_Transmit+0x292>
        {
          errorcode = HAL_TIMEOUT;
 8004df8:	231f      	movs	r3, #31
 8004dfa:	18fb      	adds	r3, r7, r3
 8004dfc:	2203      	movs	r2, #3
 8004dfe:	701a      	strb	r2, [r3, #0]
          goto error;
 8004e00:	e028      	b.n	8004e54 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e06:	b29b      	uxth	r3, r3
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d1b4      	bne.n	8004d76 <HAL_SPI_Transmit+0x206>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e0c:	69ba      	ldr	r2, [r7, #24]
 8004e0e:	6839      	ldr	r1, [r7, #0]
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	0018      	movs	r0, r3
 8004e14:	f000 fcee 	bl	80057f4 <SPI_EndRxTxTransaction>
 8004e18:	1e03      	subs	r3, r0, #0
 8004e1a:	d002      	beq.n	8004e22 <HAL_SPI_Transmit+0x2b2>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2220      	movs	r2, #32
 8004e20:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d10a      	bne.n	8004e40 <HAL_SPI_Transmit+0x2d0>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	613b      	str	r3, [r7, #16]
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	68db      	ldr	r3, [r3, #12]
 8004e34:	613b      	str	r3, [r7, #16]
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	613b      	str	r3, [r7, #16]
 8004e3e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d004      	beq.n	8004e52 <HAL_SPI_Transmit+0x2e2>
  {
    errorcode = HAL_ERROR;
 8004e48:	231f      	movs	r3, #31
 8004e4a:	18fb      	adds	r3, r7, r3
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	701a      	strb	r2, [r3, #0]
 8004e50:	e000      	b.n	8004e54 <HAL_SPI_Transmit+0x2e4>
  }

error:
 8004e52:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	225d      	movs	r2, #93	; 0x5d
 8004e58:	2101      	movs	r1, #1
 8004e5a:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	225c      	movs	r2, #92	; 0x5c
 8004e60:	2100      	movs	r1, #0
 8004e62:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8004e64:	231f      	movs	r3, #31
 8004e66:	18fb      	adds	r3, r7, r3
 8004e68:	781b      	ldrb	r3, [r3, #0]
}
 8004e6a:	0018      	movs	r0, r3
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	b008      	add	sp, #32
 8004e70:	bd80      	pop	{r7, pc}
	...

08004e74 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e74:	b590      	push	{r4, r7, lr}
 8004e76:	b089      	sub	sp, #36	; 0x24
 8004e78:	af02      	add	r7, sp, #8
 8004e7a:	60f8      	str	r0, [r7, #12]
 8004e7c:	60b9      	str	r1, [r7, #8]
 8004e7e:	603b      	str	r3, [r7, #0]
 8004e80:	1dbb      	adds	r3, r7, #6
 8004e82:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004e84:	2317      	movs	r3, #23
 8004e86:	18fb      	adds	r3, r7, r3
 8004e88:	2200      	movs	r2, #0
 8004e8a:	701a      	strb	r2, [r3, #0]
    /* in this case, 16-bit access is performed on Data
       So, check Data is 16-bit aligned address */
    assert_param(IS_SPI_16BIT_ALIGNED_ADDRESS(pData));
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	685a      	ldr	r2, [r3, #4]
 8004e90:	2382      	movs	r3, #130	; 0x82
 8004e92:	005b      	lsls	r3, r3, #1
 8004e94:	429a      	cmp	r2, r3
 8004e96:	d113      	bne.n	8004ec0 <HAL_SPI_Receive+0x4c>
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	689b      	ldr	r3, [r3, #8]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d10f      	bne.n	8004ec0 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	225d      	movs	r2, #93	; 0x5d
 8004ea4:	2104      	movs	r1, #4
 8004ea6:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004ea8:	1dbb      	adds	r3, r7, #6
 8004eaa:	881c      	ldrh	r4, [r3, #0]
 8004eac:	68ba      	ldr	r2, [r7, #8]
 8004eae:	68b9      	ldr	r1, [r7, #8]
 8004eb0:	68f8      	ldr	r0, [r7, #12]
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	9300      	str	r3, [sp, #0]
 8004eb6:	0023      	movs	r3, r4
 8004eb8:	f000 f920 	bl	80050fc <HAL_SPI_TransmitReceive>
 8004ebc:	0003      	movs	r3, r0
 8004ebe:	e114      	b.n	80050ea <HAL_SPI_Receive+0x276>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	225c      	movs	r2, #92	; 0x5c
 8004ec4:	5c9b      	ldrb	r3, [r3, r2]
 8004ec6:	2b01      	cmp	r3, #1
 8004ec8:	d101      	bne.n	8004ece <HAL_SPI_Receive+0x5a>
 8004eca:	2302      	movs	r3, #2
 8004ecc:	e10d      	b.n	80050ea <HAL_SPI_Receive+0x276>
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	225c      	movs	r2, #92	; 0x5c
 8004ed2:	2101      	movs	r1, #1
 8004ed4:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ed6:	f7fd fc53 	bl	8002780 <HAL_GetTick>
 8004eda:	0003      	movs	r3, r0
 8004edc:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	225d      	movs	r2, #93	; 0x5d
 8004ee2:	5c9b      	ldrb	r3, [r3, r2]
 8004ee4:	b2db      	uxtb	r3, r3
 8004ee6:	2b01      	cmp	r3, #1
 8004ee8:	d004      	beq.n	8004ef4 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 8004eea:	2317      	movs	r3, #23
 8004eec:	18fb      	adds	r3, r7, r3
 8004eee:	2202      	movs	r2, #2
 8004ef0:	701a      	strb	r2, [r3, #0]
    goto error;
 8004ef2:	e0ef      	b.n	80050d4 <HAL_SPI_Receive+0x260>
  }

  if ((pData == NULL) || (Size == 0U))
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d003      	beq.n	8004f02 <HAL_SPI_Receive+0x8e>
 8004efa:	1dbb      	adds	r3, r7, #6
 8004efc:	881b      	ldrh	r3, [r3, #0]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d104      	bne.n	8004f0c <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 8004f02:	2317      	movs	r3, #23
 8004f04:	18fb      	adds	r3, r7, r3
 8004f06:	2201      	movs	r2, #1
 8004f08:	701a      	strb	r2, [r3, #0]
    goto error;
 8004f0a:	e0e3      	b.n	80050d4 <HAL_SPI_Receive+0x260>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	225d      	movs	r2, #93	; 0x5d
 8004f10:	2104      	movs	r1, #4
 8004f12:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2200      	movs	r2, #0
 8004f18:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	68ba      	ldr	r2, [r7, #8]
 8004f1e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	1dba      	adds	r2, r7, #6
 8004f24:	2144      	movs	r1, #68	; 0x44
 8004f26:	8812      	ldrh	r2, [r2, #0]
 8004f28:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	1dba      	adds	r2, r7, #6
 8004f2e:	2146      	movs	r1, #70	; 0x46
 8004f30:	8812      	ldrh	r2, [r2, #0]
 8004f32:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2200      	movs	r2, #0
 8004f38:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2200      	movs	r2, #0
 8004f44:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	68da      	ldr	r2, [r3, #12]
 8004f56:	23e0      	movs	r3, #224	; 0xe0
 8004f58:	00db      	lsls	r3, r3, #3
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	d908      	bls.n	8004f70 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	685a      	ldr	r2, [r3, #4]
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4962      	ldr	r1, [pc, #392]	; (80050f4 <HAL_SPI_Receive+0x280>)
 8004f6a:	400a      	ands	r2, r1
 8004f6c:	605a      	str	r2, [r3, #4]
 8004f6e:	e008      	b.n	8004f82 <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	685a      	ldr	r2, [r3, #4]
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	2180      	movs	r1, #128	; 0x80
 8004f7c:	0149      	lsls	r1, r1, #5
 8004f7e:	430a      	orrs	r2, r1
 8004f80:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	689a      	ldr	r2, [r3, #8]
 8004f86:	2380      	movs	r3, #128	; 0x80
 8004f88:	021b      	lsls	r3, r3, #8
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	d107      	bne.n	8004f9e <HAL_SPI_Receive+0x12a>
  {
    SPI_1LINE_RX(hspi);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	681a      	ldr	r2, [r3, #0]
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4957      	ldr	r1, [pc, #348]	; (80050f8 <HAL_SPI_Receive+0x284>)
 8004f9a:	400a      	ands	r2, r1
 8004f9c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	2240      	movs	r2, #64	; 0x40
 8004fa6:	4013      	ands	r3, r2
 8004fa8:	2b40      	cmp	r3, #64	; 0x40
 8004faa:	d007      	beq.n	8004fbc <HAL_SPI_Receive+0x148>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	681a      	ldr	r2, [r3, #0]
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	2140      	movs	r1, #64	; 0x40
 8004fb8:	430a      	orrs	r2, r1
 8004fba:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	68da      	ldr	r2, [r3, #12]
 8004fc0:	23e0      	movs	r3, #224	; 0xe0
 8004fc2:	00db      	lsls	r3, r3, #3
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	d900      	bls.n	8004fca <HAL_SPI_Receive+0x156>
 8004fc8:	e069      	b.n	800509e <HAL_SPI_Receive+0x22a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004fca:	e031      	b.n	8005030 <HAL_SPI_Receive+0x1bc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	4013      	ands	r3, r2
 8004fd6:	2b01      	cmp	r3, #1
 8004fd8:	d117      	bne.n	800500a <HAL_SPI_Receive+0x196>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	330c      	adds	r3, #12
 8004fe0:	001a      	movs	r2, r3
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe6:	7812      	ldrb	r2, [r2, #0]
 8004fe8:	b2d2      	uxtb	r2, r2
 8004fea:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff0:	1c5a      	adds	r2, r3, #1
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	2246      	movs	r2, #70	; 0x46
 8004ffa:	5a9b      	ldrh	r3, [r3, r2]
 8004ffc:	b29b      	uxth	r3, r3
 8004ffe:	3b01      	subs	r3, #1
 8005000:	b299      	uxth	r1, r3
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	2246      	movs	r2, #70	; 0x46
 8005006:	5299      	strh	r1, [r3, r2]
 8005008:	e012      	b.n	8005030 <HAL_SPI_Receive+0x1bc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800500a:	f7fd fbb9 	bl	8002780 <HAL_GetTick>
 800500e:	0002      	movs	r2, r0
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	1ad3      	subs	r3, r2, r3
 8005014:	683a      	ldr	r2, [r7, #0]
 8005016:	429a      	cmp	r2, r3
 8005018:	d802      	bhi.n	8005020 <HAL_SPI_Receive+0x1ac>
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	3301      	adds	r3, #1
 800501e:	d102      	bne.n	8005026 <HAL_SPI_Receive+0x1b2>
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d104      	bne.n	8005030 <HAL_SPI_Receive+0x1bc>
        {
          errorcode = HAL_TIMEOUT;
 8005026:	2317      	movs	r3, #23
 8005028:	18fb      	adds	r3, r7, r3
 800502a:	2203      	movs	r2, #3
 800502c:	701a      	strb	r2, [r3, #0]
          goto error;
 800502e:	e051      	b.n	80050d4 <HAL_SPI_Receive+0x260>
    while (hspi->RxXferCount > 0U)
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2246      	movs	r2, #70	; 0x46
 8005034:	5a9b      	ldrh	r3, [r3, r2]
 8005036:	b29b      	uxth	r3, r3
 8005038:	2b00      	cmp	r3, #0
 800503a:	d1c7      	bne.n	8004fcc <HAL_SPI_Receive+0x158>
 800503c:	e035      	b.n	80050aa <HAL_SPI_Receive+0x236>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	2201      	movs	r2, #1
 8005046:	4013      	ands	r3, r2
 8005048:	2b01      	cmp	r3, #1
 800504a:	d115      	bne.n	8005078 <HAL_SPI_Receive+0x204>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	68da      	ldr	r2, [r3, #12]
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005056:	b292      	uxth	r2, r2
 8005058:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800505e:	1c9a      	adds	r2, r3, #2
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2246      	movs	r2, #70	; 0x46
 8005068:	5a9b      	ldrh	r3, [r3, r2]
 800506a:	b29b      	uxth	r3, r3
 800506c:	3b01      	subs	r3, #1
 800506e:	b299      	uxth	r1, r3
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2246      	movs	r2, #70	; 0x46
 8005074:	5299      	strh	r1, [r3, r2]
 8005076:	e012      	b.n	800509e <HAL_SPI_Receive+0x22a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005078:	f7fd fb82 	bl	8002780 <HAL_GetTick>
 800507c:	0002      	movs	r2, r0
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	1ad3      	subs	r3, r2, r3
 8005082:	683a      	ldr	r2, [r7, #0]
 8005084:	429a      	cmp	r2, r3
 8005086:	d802      	bhi.n	800508e <HAL_SPI_Receive+0x21a>
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	3301      	adds	r3, #1
 800508c:	d102      	bne.n	8005094 <HAL_SPI_Receive+0x220>
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d104      	bne.n	800509e <HAL_SPI_Receive+0x22a>
        {
          errorcode = HAL_TIMEOUT;
 8005094:	2317      	movs	r3, #23
 8005096:	18fb      	adds	r3, r7, r3
 8005098:	2203      	movs	r2, #3
 800509a:	701a      	strb	r2, [r3, #0]
          goto error;
 800509c:	e01a      	b.n	80050d4 <HAL_SPI_Receive+0x260>
    while (hspi->RxXferCount > 0U)
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2246      	movs	r2, #70	; 0x46
 80050a2:	5a9b      	ldrh	r3, [r3, r2]
 80050a4:	b29b      	uxth	r3, r3
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d1c9      	bne.n	800503e <HAL_SPI_Receive+0x1ca>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80050aa:	693a      	ldr	r2, [r7, #16]
 80050ac:	6839      	ldr	r1, [r7, #0]
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	0018      	movs	r0, r3
 80050b2:	f000 fb41 	bl	8005738 <SPI_EndRxTransaction>
 80050b6:	1e03      	subs	r3, r0, #0
 80050b8:	d002      	beq.n	80050c0 <HAL_SPI_Receive+0x24c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2220      	movs	r2, #32
 80050be:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d004      	beq.n	80050d2 <HAL_SPI_Receive+0x25e>
  {
    errorcode = HAL_ERROR;
 80050c8:	2317      	movs	r3, #23
 80050ca:	18fb      	adds	r3, r7, r3
 80050cc:	2201      	movs	r2, #1
 80050ce:	701a      	strb	r2, [r3, #0]
 80050d0:	e000      	b.n	80050d4 <HAL_SPI_Receive+0x260>
  }

error :
 80050d2:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	225d      	movs	r2, #93	; 0x5d
 80050d8:	2101      	movs	r1, #1
 80050da:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	225c      	movs	r2, #92	; 0x5c
 80050e0:	2100      	movs	r1, #0
 80050e2:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80050e4:	2317      	movs	r3, #23
 80050e6:	18fb      	adds	r3, r7, r3
 80050e8:	781b      	ldrb	r3, [r3, #0]
}
 80050ea:	0018      	movs	r0, r3
 80050ec:	46bd      	mov	sp, r7
 80050ee:	b007      	add	sp, #28
 80050f0:	bd90      	pop	{r4, r7, pc}
 80050f2:	46c0      	nop			; (mov r8, r8)
 80050f4:	ffffefff 	.word	0xffffefff
 80050f8:	ffffbfff 	.word	0xffffbfff

080050fc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b08a      	sub	sp, #40	; 0x28
 8005100:	af00      	add	r7, sp, #0
 8005102:	60f8      	str	r0, [r7, #12]
 8005104:	60b9      	str	r1, [r7, #8]
 8005106:	607a      	str	r2, [r7, #4]
 8005108:	001a      	movs	r2, r3
 800510a:	1cbb      	adds	r3, r7, #2
 800510c:	801a      	strh	r2, [r3, #0]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800510e:	2301      	movs	r3, #1
 8005110:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005112:	2323      	movs	r3, #35	; 0x23
 8005114:	18fb      	adds	r3, r7, r3
 8005116:	2200      	movs	r2, #0
 8005118:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	225c      	movs	r2, #92	; 0x5c
 800511e:	5c9b      	ldrb	r3, [r3, r2]
 8005120:	2b01      	cmp	r3, #1
 8005122:	d101      	bne.n	8005128 <HAL_SPI_TransmitReceive+0x2c>
 8005124:	2302      	movs	r3, #2
 8005126:	e21f      	b.n	8005568 <HAL_SPI_TransmitReceive+0x46c>
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	225c      	movs	r2, #92	; 0x5c
 800512c:	2101      	movs	r1, #1
 800512e:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005130:	f7fd fb26 	bl	8002780 <HAL_GetTick>
 8005134:	0003      	movs	r3, r0
 8005136:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005138:	201b      	movs	r0, #27
 800513a:	183b      	adds	r3, r7, r0
 800513c:	68fa      	ldr	r2, [r7, #12]
 800513e:	215d      	movs	r1, #93	; 0x5d
 8005140:	5c52      	ldrb	r2, [r2, r1]
 8005142:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800514a:	2312      	movs	r3, #18
 800514c:	18fb      	adds	r3, r7, r3
 800514e:	1cba      	adds	r2, r7, #2
 8005150:	8812      	ldrh	r2, [r2, #0]
 8005152:	801a      	strh	r2, [r3, #0]
  initial_RxXferCount = Size;
 8005154:	2310      	movs	r3, #16
 8005156:	18fb      	adds	r3, r7, r3
 8005158:	1cba      	adds	r2, r7, #2
 800515a:	8812      	ldrh	r2, [r2, #0]
 800515c:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800515e:	183b      	adds	r3, r7, r0
 8005160:	781b      	ldrb	r3, [r3, #0]
 8005162:	2b01      	cmp	r3, #1
 8005164:	d012      	beq.n	800518c <HAL_SPI_TransmitReceive+0x90>
 8005166:	697a      	ldr	r2, [r7, #20]
 8005168:	2382      	movs	r3, #130	; 0x82
 800516a:	005b      	lsls	r3, r3, #1
 800516c:	429a      	cmp	r2, r3
 800516e:	d108      	bne.n	8005182 <HAL_SPI_TransmitReceive+0x86>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	689b      	ldr	r3, [r3, #8]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d104      	bne.n	8005182 <HAL_SPI_TransmitReceive+0x86>
 8005178:	231b      	movs	r3, #27
 800517a:	18fb      	adds	r3, r7, r3
 800517c:	781b      	ldrb	r3, [r3, #0]
 800517e:	2b04      	cmp	r3, #4
 8005180:	d004      	beq.n	800518c <HAL_SPI_TransmitReceive+0x90>
  {
    errorcode = HAL_BUSY;
 8005182:	2323      	movs	r3, #35	; 0x23
 8005184:	18fb      	adds	r3, r7, r3
 8005186:	2202      	movs	r2, #2
 8005188:	701a      	strb	r2, [r3, #0]
    goto error;
 800518a:	e1e2      	b.n	8005552 <HAL_SPI_TransmitReceive+0x456>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d006      	beq.n	80051a0 <HAL_SPI_TransmitReceive+0xa4>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d003      	beq.n	80051a0 <HAL_SPI_TransmitReceive+0xa4>
 8005198:	1cbb      	adds	r3, r7, #2
 800519a:	881b      	ldrh	r3, [r3, #0]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d104      	bne.n	80051aa <HAL_SPI_TransmitReceive+0xae>
  {
    errorcode = HAL_ERROR;
 80051a0:	2323      	movs	r3, #35	; 0x23
 80051a2:	18fb      	adds	r3, r7, r3
 80051a4:	2201      	movs	r2, #1
 80051a6:	701a      	strb	r2, [r3, #0]
    goto error;
 80051a8:	e1d3      	b.n	8005552 <HAL_SPI_TransmitReceive+0x456>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	225d      	movs	r2, #93	; 0x5d
 80051ae:	5c9b      	ldrb	r3, [r3, r2]
 80051b0:	b2db      	uxtb	r3, r3
 80051b2:	2b04      	cmp	r3, #4
 80051b4:	d003      	beq.n	80051be <HAL_SPI_TransmitReceive+0xc2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	225d      	movs	r2, #93	; 0x5d
 80051ba:	2105      	movs	r1, #5
 80051bc:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2200      	movs	r2, #0
 80051c2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	687a      	ldr	r2, [r7, #4]
 80051c8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	1cba      	adds	r2, r7, #2
 80051ce:	2146      	movs	r1, #70	; 0x46
 80051d0:	8812      	ldrh	r2, [r2, #0]
 80051d2:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	1cba      	adds	r2, r7, #2
 80051d8:	2144      	movs	r1, #68	; 0x44
 80051da:	8812      	ldrh	r2, [r2, #0]
 80051dc:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	68ba      	ldr	r2, [r7, #8]
 80051e2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	1cba      	adds	r2, r7, #2
 80051e8:	8812      	ldrh	r2, [r2, #0]
 80051ea:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	1cba      	adds	r2, r7, #2
 80051f0:	8812      	ldrh	r2, [r2, #0]
 80051f2:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2200      	movs	r2, #0
 80051f8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2200      	movs	r2, #0
 80051fe:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	68da      	ldr	r2, [r3, #12]
 8005204:	23e0      	movs	r3, #224	; 0xe0
 8005206:	00db      	lsls	r3, r3, #3
 8005208:	429a      	cmp	r2, r3
 800520a:	d804      	bhi.n	8005216 <HAL_SPI_TransmitReceive+0x11a>
 800520c:	2310      	movs	r3, #16
 800520e:	18fb      	adds	r3, r7, r3
 8005210:	881b      	ldrh	r3, [r3, #0]
 8005212:	2b01      	cmp	r3, #1
 8005214:	d908      	bls.n	8005228 <HAL_SPI_TransmitReceive+0x12c>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	685a      	ldr	r2, [r3, #4]
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	49ca      	ldr	r1, [pc, #808]	; (800554c <HAL_SPI_TransmitReceive+0x450>)
 8005222:	400a      	ands	r2, r1
 8005224:	605a      	str	r2, [r3, #4]
 8005226:	e008      	b.n	800523a <HAL_SPI_TransmitReceive+0x13e>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	685a      	ldr	r2, [r3, #4]
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	2180      	movs	r1, #128	; 0x80
 8005234:	0149      	lsls	r1, r1, #5
 8005236:	430a      	orrs	r2, r1
 8005238:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	2240      	movs	r2, #64	; 0x40
 8005242:	4013      	ands	r3, r2
 8005244:	2b40      	cmp	r3, #64	; 0x40
 8005246:	d007      	beq.n	8005258 <HAL_SPI_TransmitReceive+0x15c>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	681a      	ldr	r2, [r3, #0]
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	2140      	movs	r1, #64	; 0x40
 8005254:	430a      	orrs	r2, r1
 8005256:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	68da      	ldr	r2, [r3, #12]
 800525c:	23e0      	movs	r3, #224	; 0xe0
 800525e:	00db      	lsls	r3, r3, #3
 8005260:	429a      	cmp	r2, r3
 8005262:	d800      	bhi.n	8005266 <HAL_SPI_TransmitReceive+0x16a>
 8005264:	e07f      	b.n	8005366 <HAL_SPI_TransmitReceive+0x26a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d005      	beq.n	800527a <HAL_SPI_TransmitReceive+0x17e>
 800526e:	2312      	movs	r3, #18
 8005270:	18fb      	adds	r3, r7, r3
 8005272:	881b      	ldrh	r3, [r3, #0]
 8005274:	2b01      	cmp	r3, #1
 8005276:	d000      	beq.n	800527a <HAL_SPI_TransmitReceive+0x17e>
 8005278:	e069      	b.n	800534e <HAL_SPI_TransmitReceive+0x252>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800527e:	881a      	ldrh	r2, [r3, #0]
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800528a:	1c9a      	adds	r2, r3, #2
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005294:	b29b      	uxth	r3, r3
 8005296:	3b01      	subs	r3, #1
 8005298:	b29a      	uxth	r2, r3
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800529e:	e056      	b.n	800534e <HAL_SPI_TransmitReceive+0x252>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	2202      	movs	r2, #2
 80052a8:	4013      	ands	r3, r2
 80052aa:	2b02      	cmp	r3, #2
 80052ac:	d11b      	bne.n	80052e6 <HAL_SPI_TransmitReceive+0x1ea>
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052b2:	b29b      	uxth	r3, r3
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d016      	beq.n	80052e6 <HAL_SPI_TransmitReceive+0x1ea>
 80052b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ba:	2b01      	cmp	r3, #1
 80052bc:	d113      	bne.n	80052e6 <HAL_SPI_TransmitReceive+0x1ea>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052c2:	881a      	ldrh	r2, [r3, #0]
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ce:	1c9a      	adds	r2, r3, #2
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052d8:	b29b      	uxth	r3, r3
 80052da:	3b01      	subs	r3, #1
 80052dc:	b29a      	uxth	r2, r3
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80052e2:	2300      	movs	r3, #0
 80052e4:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	2201      	movs	r2, #1
 80052ee:	4013      	ands	r3, r2
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d11c      	bne.n	800532e <HAL_SPI_TransmitReceive+0x232>
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2246      	movs	r2, #70	; 0x46
 80052f8:	5a9b      	ldrh	r3, [r3, r2]
 80052fa:	b29b      	uxth	r3, r3
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d016      	beq.n	800532e <HAL_SPI_TransmitReceive+0x232>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	68da      	ldr	r2, [r3, #12]
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800530a:	b292      	uxth	r2, r2
 800530c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005312:	1c9a      	adds	r2, r3, #2
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2246      	movs	r2, #70	; 0x46
 800531c:	5a9b      	ldrh	r3, [r3, r2]
 800531e:	b29b      	uxth	r3, r3
 8005320:	3b01      	subs	r3, #1
 8005322:	b299      	uxth	r1, r3
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2246      	movs	r2, #70	; 0x46
 8005328:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800532a:	2301      	movs	r3, #1
 800532c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800532e:	f7fd fa27 	bl	8002780 <HAL_GetTick>
 8005332:	0002      	movs	r2, r0
 8005334:	69fb      	ldr	r3, [r7, #28]
 8005336:	1ad3      	subs	r3, r2, r3
 8005338:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800533a:	429a      	cmp	r2, r3
 800533c:	d807      	bhi.n	800534e <HAL_SPI_TransmitReceive+0x252>
 800533e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005340:	3301      	adds	r3, #1
 8005342:	d004      	beq.n	800534e <HAL_SPI_TransmitReceive+0x252>
      {
        errorcode = HAL_TIMEOUT;
 8005344:	2323      	movs	r3, #35	; 0x23
 8005346:	18fb      	adds	r3, r7, r3
 8005348:	2203      	movs	r2, #3
 800534a:	701a      	strb	r2, [r3, #0]
        goto error;
 800534c:	e101      	b.n	8005552 <HAL_SPI_TransmitReceive+0x456>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005352:	b29b      	uxth	r3, r3
 8005354:	2b00      	cmp	r3, #0
 8005356:	d1a3      	bne.n	80052a0 <HAL_SPI_TransmitReceive+0x1a4>
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	2246      	movs	r2, #70	; 0x46
 800535c:	5a9b      	ldrh	r3, [r3, r2]
 800535e:	b29b      	uxth	r3, r3
 8005360:	2b00      	cmp	r3, #0
 8005362:	d19d      	bne.n	80052a0 <HAL_SPI_TransmitReceive+0x1a4>
 8005364:	e0e2      	b.n	800552c <HAL_SPI_TransmitReceive+0x430>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d005      	beq.n	800537a <HAL_SPI_TransmitReceive+0x27e>
 800536e:	2312      	movs	r3, #18
 8005370:	18fb      	adds	r3, r7, r3
 8005372:	881b      	ldrh	r3, [r3, #0]
 8005374:	2b01      	cmp	r3, #1
 8005376:	d000      	beq.n	800537a <HAL_SPI_TransmitReceive+0x27e>
 8005378:	e0cb      	b.n	8005512 <HAL_SPI_TransmitReceive+0x416>
    {
      if (hspi->TxXferCount > 1U)
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800537e:	b29b      	uxth	r3, r3
 8005380:	2b01      	cmp	r3, #1
 8005382:	d912      	bls.n	80053aa <HAL_SPI_TransmitReceive+0x2ae>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005388:	881a      	ldrh	r2, [r3, #0]
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005394:	1c9a      	adds	r2, r3, #2
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800539e:	b29b      	uxth	r3, r3
 80053a0:	3b02      	subs	r3, #2
 80053a2:	b29a      	uxth	r2, r3
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80053a8:	e0b3      	b.n	8005512 <HAL_SPI_TransmitReceive+0x416>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	330c      	adds	r3, #12
 80053b4:	7812      	ldrb	r2, [r2, #0]
 80053b6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053bc:	1c5a      	adds	r2, r3, #1
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053c6:	b29b      	uxth	r3, r3
 80053c8:	3b01      	subs	r3, #1
 80053ca:	b29a      	uxth	r2, r3
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80053d0:	e09f      	b.n	8005512 <HAL_SPI_TransmitReceive+0x416>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	2202      	movs	r2, #2
 80053da:	4013      	ands	r3, r2
 80053dc:	2b02      	cmp	r3, #2
 80053de:	d134      	bne.n	800544a <HAL_SPI_TransmitReceive+0x34e>
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053e4:	b29b      	uxth	r3, r3
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d02f      	beq.n	800544a <HAL_SPI_TransmitReceive+0x34e>
 80053ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	d12c      	bne.n	800544a <HAL_SPI_TransmitReceive+0x34e>
      {
        if (hspi->TxXferCount > 1U)
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	2b01      	cmp	r3, #1
 80053f8:	d912      	bls.n	8005420 <HAL_SPI_TransmitReceive+0x324>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053fe:	881a      	ldrh	r2, [r3, #0]
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800540a:	1c9a      	adds	r2, r3, #2
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005414:	b29b      	uxth	r3, r3
 8005416:	3b02      	subs	r3, #2
 8005418:	b29a      	uxth	r2, r3
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800541e:	e012      	b.n	8005446 <HAL_SPI_TransmitReceive+0x34a>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	330c      	adds	r3, #12
 800542a:	7812      	ldrb	r2, [r2, #0]
 800542c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005432:	1c5a      	adds	r2, r3, #1
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800543c:	b29b      	uxth	r3, r3
 800543e:	3b01      	subs	r3, #1
 8005440:	b29a      	uxth	r2, r3
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005446:	2300      	movs	r3, #0
 8005448:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	689b      	ldr	r3, [r3, #8]
 8005450:	2201      	movs	r2, #1
 8005452:	4013      	ands	r3, r2
 8005454:	2b01      	cmp	r3, #1
 8005456:	d149      	bne.n	80054ec <HAL_SPI_TransmitReceive+0x3f0>
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2246      	movs	r2, #70	; 0x46
 800545c:	5a9b      	ldrh	r3, [r3, r2]
 800545e:	b29b      	uxth	r3, r3
 8005460:	2b00      	cmp	r3, #0
 8005462:	d043      	beq.n	80054ec <HAL_SPI_TransmitReceive+0x3f0>
      {
        if (hspi->RxXferCount > 1U)
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2246      	movs	r2, #70	; 0x46
 8005468:	5a9b      	ldrh	r3, [r3, r2]
 800546a:	b29b      	uxth	r3, r3
 800546c:	2b01      	cmp	r3, #1
 800546e:	d924      	bls.n	80054ba <HAL_SPI_TransmitReceive+0x3be>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	68da      	ldr	r2, [r3, #12]
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800547a:	b292      	uxth	r2, r2
 800547c:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005482:	1c9a      	adds	r2, r3, #2
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2246      	movs	r2, #70	; 0x46
 800548c:	5a9b      	ldrh	r3, [r3, r2]
 800548e:	b29b      	uxth	r3, r3
 8005490:	3b02      	subs	r3, #2
 8005492:	b299      	uxth	r1, r3
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2246      	movs	r2, #70	; 0x46
 8005498:	5299      	strh	r1, [r3, r2]
          if (hspi->RxXferCount <= 1U)
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2246      	movs	r2, #70	; 0x46
 800549e:	5a9b      	ldrh	r3, [r3, r2]
 80054a0:	b29b      	uxth	r3, r3
 80054a2:	2b01      	cmp	r3, #1
 80054a4:	d820      	bhi.n	80054e8 <HAL_SPI_TransmitReceive+0x3ec>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	685a      	ldr	r2, [r3, #4]
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	2180      	movs	r1, #128	; 0x80
 80054b2:	0149      	lsls	r1, r1, #5
 80054b4:	430a      	orrs	r2, r1
 80054b6:	605a      	str	r2, [r3, #4]
 80054b8:	e016      	b.n	80054e8 <HAL_SPI_TransmitReceive+0x3ec>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	330c      	adds	r3, #12
 80054c0:	001a      	movs	r2, r3
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c6:	7812      	ldrb	r2, [r2, #0]
 80054c8:	b2d2      	uxtb	r2, r2
 80054ca:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054d0:	1c5a      	adds	r2, r3, #1
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2246      	movs	r2, #70	; 0x46
 80054da:	5a9b      	ldrh	r3, [r3, r2]
 80054dc:	b29b      	uxth	r3, r3
 80054de:	3b01      	subs	r3, #1
 80054e0:	b299      	uxth	r1, r3
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2246      	movs	r2, #70	; 0x46
 80054e6:	5299      	strh	r1, [r3, r2]
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80054e8:	2301      	movs	r3, #1
 80054ea:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80054ec:	f7fd f948 	bl	8002780 <HAL_GetTick>
 80054f0:	0002      	movs	r2, r0
 80054f2:	69fb      	ldr	r3, [r7, #28]
 80054f4:	1ad3      	subs	r3, r2, r3
 80054f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054f8:	429a      	cmp	r2, r3
 80054fa:	d802      	bhi.n	8005502 <HAL_SPI_TransmitReceive+0x406>
 80054fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054fe:	3301      	adds	r3, #1
 8005500:	d102      	bne.n	8005508 <HAL_SPI_TransmitReceive+0x40c>
 8005502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005504:	2b00      	cmp	r3, #0
 8005506:	d104      	bne.n	8005512 <HAL_SPI_TransmitReceive+0x416>
      {
        errorcode = HAL_TIMEOUT;
 8005508:	2323      	movs	r3, #35	; 0x23
 800550a:	18fb      	adds	r3, r7, r3
 800550c:	2203      	movs	r2, #3
 800550e:	701a      	strb	r2, [r3, #0]
        goto error;
 8005510:	e01f      	b.n	8005552 <HAL_SPI_TransmitReceive+0x456>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005516:	b29b      	uxth	r3, r3
 8005518:	2b00      	cmp	r3, #0
 800551a:	d000      	beq.n	800551e <HAL_SPI_TransmitReceive+0x422>
 800551c:	e759      	b.n	80053d2 <HAL_SPI_TransmitReceive+0x2d6>
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2246      	movs	r2, #70	; 0x46
 8005522:	5a9b      	ldrh	r3, [r3, r2]
 8005524:	b29b      	uxth	r3, r3
 8005526:	2b00      	cmp	r3, #0
 8005528:	d000      	beq.n	800552c <HAL_SPI_TransmitReceive+0x430>
 800552a:	e752      	b.n	80053d2 <HAL_SPI_TransmitReceive+0x2d6>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800552c:	69fa      	ldr	r2, [r7, #28]
 800552e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	0018      	movs	r0, r3
 8005534:	f000 f95e 	bl	80057f4 <SPI_EndRxTxTransaction>
 8005538:	1e03      	subs	r3, r0, #0
 800553a:	d009      	beq.n	8005550 <HAL_SPI_TransmitReceive+0x454>
  {
    errorcode = HAL_ERROR;
 800553c:	2323      	movs	r3, #35	; 0x23
 800553e:	18fb      	adds	r3, r7, r3
 8005540:	2201      	movs	r2, #1
 8005542:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2220      	movs	r2, #32
 8005548:	661a      	str	r2, [r3, #96]	; 0x60
 800554a:	e002      	b.n	8005552 <HAL_SPI_TransmitReceive+0x456>
 800554c:	ffffefff 	.word	0xffffefff
  }

error :
 8005550:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	225d      	movs	r2, #93	; 0x5d
 8005556:	2101      	movs	r1, #1
 8005558:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	225c      	movs	r2, #92	; 0x5c
 800555e:	2100      	movs	r1, #0
 8005560:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005562:	2323      	movs	r3, #35	; 0x23
 8005564:	18fb      	adds	r3, r7, r3
 8005566:	781b      	ldrb	r3, [r3, #0]
}
 8005568:	0018      	movs	r0, r3
 800556a:	46bd      	mov	sp, r7
 800556c:	b00a      	add	sp, #40	; 0x28
 800556e:	bd80      	pop	{r7, pc}

08005570 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b084      	sub	sp, #16
 8005574:	af00      	add	r7, sp, #0
 8005576:	60f8      	str	r0, [r7, #12]
 8005578:	60b9      	str	r1, [r7, #8]
 800557a:	603b      	str	r3, [r7, #0]
 800557c:	1dfb      	adds	r3, r7, #7
 800557e:	701a      	strb	r2, [r3, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005580:	e050      	b.n	8005624 <SPI_WaitFlagStateUntilTimeout+0xb4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	3301      	adds	r3, #1
 8005586:	d04d      	beq.n	8005624 <SPI_WaitFlagStateUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005588:	f7fd f8fa 	bl	8002780 <HAL_GetTick>
 800558c:	0002      	movs	r2, r0
 800558e:	69bb      	ldr	r3, [r7, #24]
 8005590:	1ad3      	subs	r3, r2, r3
 8005592:	683a      	ldr	r2, [r7, #0]
 8005594:	429a      	cmp	r2, r3
 8005596:	d902      	bls.n	800559e <SPI_WaitFlagStateUntilTimeout+0x2e>
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d142      	bne.n	8005624 <SPI_WaitFlagStateUntilTimeout+0xb4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	685a      	ldr	r2, [r3, #4]
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	21e0      	movs	r1, #224	; 0xe0
 80055aa:	438a      	bics	r2, r1
 80055ac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	685a      	ldr	r2, [r3, #4]
 80055b2:	2382      	movs	r3, #130	; 0x82
 80055b4:	005b      	lsls	r3, r3, #1
 80055b6:	429a      	cmp	r2, r3
 80055b8:	d113      	bne.n	80055e2 <SPI_WaitFlagStateUntilTimeout+0x72>
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	689a      	ldr	r2, [r3, #8]
 80055be:	2380      	movs	r3, #128	; 0x80
 80055c0:	021b      	lsls	r3, r3, #8
 80055c2:	429a      	cmp	r2, r3
 80055c4:	d005      	beq.n	80055d2 <SPI_WaitFlagStateUntilTimeout+0x62>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	689a      	ldr	r2, [r3, #8]
 80055ca:	2380      	movs	r3, #128	; 0x80
 80055cc:	00db      	lsls	r3, r3, #3
 80055ce:	429a      	cmp	r2, r3
 80055d0:	d107      	bne.n	80055e2 <SPI_WaitFlagStateUntilTimeout+0x72>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	681a      	ldr	r2, [r3, #0]
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	2140      	movs	r1, #64	; 0x40
 80055de:	438a      	bics	r2, r1
 80055e0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80055e6:	2380      	movs	r3, #128	; 0x80
 80055e8:	019b      	lsls	r3, r3, #6
 80055ea:	429a      	cmp	r2, r3
 80055ec:	d110      	bne.n	8005610 <SPI_WaitFlagStateUntilTimeout+0xa0>
        {
          SPI_RESET_CRC(hspi);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4914      	ldr	r1, [pc, #80]	; (800564c <SPI_WaitFlagStateUntilTimeout+0xdc>)
 80055fa:	400a      	ands	r2, r1
 80055fc:	601a      	str	r2, [r3, #0]
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	681a      	ldr	r2, [r3, #0]
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	2180      	movs	r1, #128	; 0x80
 800560a:	0189      	lsls	r1, r1, #6
 800560c:	430a      	orrs	r2, r1
 800560e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	225d      	movs	r2, #93	; 0x5d
 8005614:	2101      	movs	r1, #1
 8005616:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	225c      	movs	r2, #92	; 0x5c
 800561c:	2100      	movs	r1, #0
 800561e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005620:	2303      	movs	r3, #3
 8005622:	e00f      	b.n	8005644 <SPI_WaitFlagStateUntilTimeout+0xd4>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	68ba      	ldr	r2, [r7, #8]
 800562c:	4013      	ands	r3, r2
 800562e:	68ba      	ldr	r2, [r7, #8]
 8005630:	1ad3      	subs	r3, r2, r3
 8005632:	425a      	negs	r2, r3
 8005634:	4153      	adcs	r3, r2
 8005636:	b2db      	uxtb	r3, r3
 8005638:	001a      	movs	r2, r3
 800563a:	1dfb      	adds	r3, r7, #7
 800563c:	781b      	ldrb	r3, [r3, #0]
 800563e:	429a      	cmp	r2, r3
 8005640:	d19f      	bne.n	8005582 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8005642:	2300      	movs	r3, #0
}
 8005644:	0018      	movs	r0, r3
 8005646:	46bd      	mov	sp, r7
 8005648:	b004      	add	sp, #16
 800564a:	bd80      	pop	{r7, pc}
 800564c:	ffffdfff 	.word	0xffffdfff

08005650 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b084      	sub	sp, #16
 8005654:	af00      	add	r7, sp, #0
 8005656:	60f8      	str	r0, [r7, #12]
 8005658:	60b9      	str	r1, [r7, #8]
 800565a:	607a      	str	r2, [r7, #4]
 800565c:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 800565e:	e05c      	b.n	800571a <SPI_WaitFifoStateUntilTimeout+0xca>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005660:	68ba      	ldr	r2, [r7, #8]
 8005662:	23c0      	movs	r3, #192	; 0xc0
 8005664:	00db      	lsls	r3, r3, #3
 8005666:	429a      	cmp	r2, r3
 8005668:	d106      	bne.n	8005678 <SPI_WaitFifoStateUntilTimeout+0x28>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d103      	bne.n	8005678 <SPI_WaitFifoStateUntilTimeout+0x28>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	330c      	adds	r3, #12
 8005676:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	3301      	adds	r3, #1
 800567c:	d04d      	beq.n	800571a <SPI_WaitFifoStateUntilTimeout+0xca>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800567e:	f7fd f87f 	bl	8002780 <HAL_GetTick>
 8005682:	0002      	movs	r2, r0
 8005684:	69bb      	ldr	r3, [r7, #24]
 8005686:	1ad3      	subs	r3, r2, r3
 8005688:	683a      	ldr	r2, [r7, #0]
 800568a:	429a      	cmp	r2, r3
 800568c:	d902      	bls.n	8005694 <SPI_WaitFifoStateUntilTimeout+0x44>
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d142      	bne.n	800571a <SPI_WaitFifoStateUntilTimeout+0xca>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	685a      	ldr	r2, [r3, #4]
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	21e0      	movs	r1, #224	; 0xe0
 80056a0:	438a      	bics	r2, r1
 80056a2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	685a      	ldr	r2, [r3, #4]
 80056a8:	2382      	movs	r3, #130	; 0x82
 80056aa:	005b      	lsls	r3, r3, #1
 80056ac:	429a      	cmp	r2, r3
 80056ae:	d113      	bne.n	80056d8 <SPI_WaitFifoStateUntilTimeout+0x88>
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	689a      	ldr	r2, [r3, #8]
 80056b4:	2380      	movs	r3, #128	; 0x80
 80056b6:	021b      	lsls	r3, r3, #8
 80056b8:	429a      	cmp	r2, r3
 80056ba:	d005      	beq.n	80056c8 <SPI_WaitFifoStateUntilTimeout+0x78>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	689a      	ldr	r2, [r3, #8]
 80056c0:	2380      	movs	r3, #128	; 0x80
 80056c2:	00db      	lsls	r3, r3, #3
 80056c4:	429a      	cmp	r2, r3
 80056c6:	d107      	bne.n	80056d8 <SPI_WaitFifoStateUntilTimeout+0x88>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	681a      	ldr	r2, [r3, #0]
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	2140      	movs	r1, #64	; 0x40
 80056d4:	438a      	bics	r2, r1
 80056d6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80056dc:	2380      	movs	r3, #128	; 0x80
 80056de:	019b      	lsls	r3, r3, #6
 80056e0:	429a      	cmp	r2, r3
 80056e2:	d110      	bne.n	8005706 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          SPI_RESET_CRC(hspi);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4911      	ldr	r1, [pc, #68]	; (8005734 <SPI_WaitFifoStateUntilTimeout+0xe4>)
 80056f0:	400a      	ands	r2, r1
 80056f2:	601a      	str	r2, [r3, #0]
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	681a      	ldr	r2, [r3, #0]
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	2180      	movs	r1, #128	; 0x80
 8005700:	0189      	lsls	r1, r1, #6
 8005702:	430a      	orrs	r2, r1
 8005704:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	225d      	movs	r2, #93	; 0x5d
 800570a:	2101      	movs	r1, #1
 800570c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	225c      	movs	r2, #92	; 0x5c
 8005712:	2100      	movs	r1, #0
 8005714:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005716:	2303      	movs	r3, #3
 8005718:	e008      	b.n	800572c <SPI_WaitFifoStateUntilTimeout+0xdc>
  while ((hspi->Instance->SR & Fifo) != State)
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	689b      	ldr	r3, [r3, #8]
 8005720:	68ba      	ldr	r2, [r7, #8]
 8005722:	4013      	ands	r3, r2
 8005724:	687a      	ldr	r2, [r7, #4]
 8005726:	429a      	cmp	r2, r3
 8005728:	d19a      	bne.n	8005660 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800572a:	2300      	movs	r3, #0
}
 800572c:	0018      	movs	r0, r3
 800572e:	46bd      	mov	sp, r7
 8005730:	b004      	add	sp, #16
 8005732:	bd80      	pop	{r7, pc}
 8005734:	ffffdfff 	.word	0xffffdfff

08005738 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b086      	sub	sp, #24
 800573c:	af02      	add	r7, sp, #8
 800573e:	60f8      	str	r0, [r7, #12]
 8005740:	60b9      	str	r1, [r7, #8]
 8005742:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	685a      	ldr	r2, [r3, #4]
 8005748:	2382      	movs	r3, #130	; 0x82
 800574a:	005b      	lsls	r3, r3, #1
 800574c:	429a      	cmp	r2, r3
 800574e:	d113      	bne.n	8005778 <SPI_EndRxTransaction+0x40>
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	689a      	ldr	r2, [r3, #8]
 8005754:	2380      	movs	r3, #128	; 0x80
 8005756:	021b      	lsls	r3, r3, #8
 8005758:	429a      	cmp	r2, r3
 800575a:	d005      	beq.n	8005768 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	689a      	ldr	r2, [r3, #8]
 8005760:	2380      	movs	r3, #128	; 0x80
 8005762:	00db      	lsls	r3, r3, #3
 8005764:	429a      	cmp	r2, r3
 8005766:	d107      	bne.n	8005778 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	681a      	ldr	r2, [r3, #0]
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	2140      	movs	r1, #64	; 0x40
 8005774:	438a      	bics	r2, r1
 8005776:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005778:	68ba      	ldr	r2, [r7, #8]
 800577a:	68f8      	ldr	r0, [r7, #12]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	9300      	str	r3, [sp, #0]
 8005780:	0013      	movs	r3, r2
 8005782:	2200      	movs	r2, #0
 8005784:	2180      	movs	r1, #128	; 0x80
 8005786:	f7ff fef3 	bl	8005570 <SPI_WaitFlagStateUntilTimeout>
 800578a:	1e03      	subs	r3, r0, #0
 800578c:	d007      	beq.n	800579e <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005792:	2220      	movs	r2, #32
 8005794:	431a      	orrs	r2, r3
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800579a:	2303      	movs	r3, #3
 800579c:	e026      	b.n	80057ec <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	685a      	ldr	r2, [r3, #4]
 80057a2:	2382      	movs	r3, #130	; 0x82
 80057a4:	005b      	lsls	r3, r3, #1
 80057a6:	429a      	cmp	r2, r3
 80057a8:	d11f      	bne.n	80057ea <SPI_EndRxTransaction+0xb2>
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	689a      	ldr	r2, [r3, #8]
 80057ae:	2380      	movs	r3, #128	; 0x80
 80057b0:	021b      	lsls	r3, r3, #8
 80057b2:	429a      	cmp	r2, r3
 80057b4:	d005      	beq.n	80057c2 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	689a      	ldr	r2, [r3, #8]
 80057ba:	2380      	movs	r3, #128	; 0x80
 80057bc:	00db      	lsls	r3, r3, #3
 80057be:	429a      	cmp	r2, r3
 80057c0:	d113      	bne.n	80057ea <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80057c2:	68ba      	ldr	r2, [r7, #8]
 80057c4:	23c0      	movs	r3, #192	; 0xc0
 80057c6:	00d9      	lsls	r1, r3, #3
 80057c8:	68f8      	ldr	r0, [r7, #12]
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	9300      	str	r3, [sp, #0]
 80057ce:	0013      	movs	r3, r2
 80057d0:	2200      	movs	r2, #0
 80057d2:	f7ff ff3d 	bl	8005650 <SPI_WaitFifoStateUntilTimeout>
 80057d6:	1e03      	subs	r3, r0, #0
 80057d8:	d007      	beq.n	80057ea <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057de:	2220      	movs	r2, #32
 80057e0:	431a      	orrs	r2, r3
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80057e6:	2303      	movs	r3, #3
 80057e8:	e000      	b.n	80057ec <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 80057ea:	2300      	movs	r3, #0
}
 80057ec:	0018      	movs	r0, r3
 80057ee:	46bd      	mov	sp, r7
 80057f0:	b004      	add	sp, #16
 80057f2:	bd80      	pop	{r7, pc}

080057f4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b086      	sub	sp, #24
 80057f8:	af02      	add	r7, sp, #8
 80057fa:	60f8      	str	r0, [r7, #12]
 80057fc:	60b9      	str	r1, [r7, #8]
 80057fe:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005800:	68ba      	ldr	r2, [r7, #8]
 8005802:	23c0      	movs	r3, #192	; 0xc0
 8005804:	0159      	lsls	r1, r3, #5
 8005806:	68f8      	ldr	r0, [r7, #12]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	9300      	str	r3, [sp, #0]
 800580c:	0013      	movs	r3, r2
 800580e:	2200      	movs	r2, #0
 8005810:	f7ff ff1e 	bl	8005650 <SPI_WaitFifoStateUntilTimeout>
 8005814:	1e03      	subs	r3, r0, #0
 8005816:	d007      	beq.n	8005828 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800581c:	2220      	movs	r2, #32
 800581e:	431a      	orrs	r2, r3
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005824:	2303      	movs	r3, #3
 8005826:	e027      	b.n	8005878 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005828:	68ba      	ldr	r2, [r7, #8]
 800582a:	68f8      	ldr	r0, [r7, #12]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	9300      	str	r3, [sp, #0]
 8005830:	0013      	movs	r3, r2
 8005832:	2200      	movs	r2, #0
 8005834:	2180      	movs	r1, #128	; 0x80
 8005836:	f7ff fe9b 	bl	8005570 <SPI_WaitFlagStateUntilTimeout>
 800583a:	1e03      	subs	r3, r0, #0
 800583c:	d007      	beq.n	800584e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005842:	2220      	movs	r2, #32
 8005844:	431a      	orrs	r2, r3
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800584a:	2303      	movs	r3, #3
 800584c:	e014      	b.n	8005878 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800584e:	68ba      	ldr	r2, [r7, #8]
 8005850:	23c0      	movs	r3, #192	; 0xc0
 8005852:	00d9      	lsls	r1, r3, #3
 8005854:	68f8      	ldr	r0, [r7, #12]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	9300      	str	r3, [sp, #0]
 800585a:	0013      	movs	r3, r2
 800585c:	2200      	movs	r2, #0
 800585e:	f7ff fef7 	bl	8005650 <SPI_WaitFifoStateUntilTimeout>
 8005862:	1e03      	subs	r3, r0, #0
 8005864:	d007      	beq.n	8005876 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800586a:	2220      	movs	r2, #32
 800586c:	431a      	orrs	r2, r3
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005872:	2303      	movs	r3, #3
 8005874:	e000      	b.n	8005878 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005876:	2300      	movs	r3, #0
}
 8005878:	0018      	movs	r0, r3
 800587a:	46bd      	mov	sp, r7
 800587c:	b004      	add	sp, #16
 800587e:	bd80      	pop	{r7, pc}

08005880 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b082      	sub	sp, #8
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d101      	bne.n	8005892 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800588e:	2301      	movs	r3, #1
 8005890:	e01e      	b.n	80058d0 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	223d      	movs	r2, #61	; 0x3d
 8005896:	5c9b      	ldrb	r3, [r3, r2]
 8005898:	b2db      	uxtb	r3, r3
 800589a:	2b00      	cmp	r3, #0
 800589c:	d107      	bne.n	80058ae <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	223c      	movs	r2, #60	; 0x3c
 80058a2:	2100      	movs	r1, #0
 80058a4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	0018      	movs	r0, r3
 80058aa:	f7fc fe15 	bl	80024d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	223d      	movs	r2, #61	; 0x3d
 80058b2:	2102      	movs	r1, #2
 80058b4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681a      	ldr	r2, [r3, #0]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	3304      	adds	r3, #4
 80058be:	0019      	movs	r1, r3
 80058c0:	0010      	movs	r0, r2
 80058c2:	f000 fa73 	bl	8005dac <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	223d      	movs	r2, #61	; 0x3d
 80058ca:	2101      	movs	r1, #1
 80058cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80058ce:	2300      	movs	r3, #0
}
 80058d0:	0018      	movs	r0, r3
 80058d2:	46bd      	mov	sp, r7
 80058d4:	b002      	add	sp, #8
 80058d6:	bd80      	pop	{r7, pc}

080058d8 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b082      	sub	sp, #8
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	223d      	movs	r2, #61	; 0x3d
 80058e4:	2102      	movs	r1, #2
 80058e6:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	6a1b      	ldr	r3, [r3, #32]
 80058ee:	4a0d      	ldr	r2, [pc, #52]	; (8005924 <HAL_TIM_Base_Stop+0x4c>)
 80058f0:	4013      	ands	r3, r2
 80058f2:	d10d      	bne.n	8005910 <HAL_TIM_Base_Stop+0x38>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	6a1b      	ldr	r3, [r3, #32]
 80058fa:	4a0b      	ldr	r2, [pc, #44]	; (8005928 <HAL_TIM_Base_Stop+0x50>)
 80058fc:	4013      	ands	r3, r2
 80058fe:	d107      	bne.n	8005910 <HAL_TIM_Base_Stop+0x38>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	681a      	ldr	r2, [r3, #0]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	2101      	movs	r1, #1
 800590c:	438a      	bics	r2, r1
 800590e:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	223d      	movs	r2, #61	; 0x3d
 8005914:	2101      	movs	r1, #1
 8005916:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8005918:	2300      	movs	r3, #0
}
 800591a:	0018      	movs	r0, r3
 800591c:	46bd      	mov	sp, r7
 800591e:	b002      	add	sp, #8
 8005920:	bd80      	pop	{r7, pc}
 8005922:	46c0      	nop			; (mov r8, r8)
 8005924:	00001111 	.word	0x00001111
 8005928:	00000444 	.word	0x00000444

0800592c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b084      	sub	sp, #16
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	68da      	ldr	r2, [r3, #12]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	2101      	movs	r1, #1
 8005940:	430a      	orrs	r2, r1
 8005942:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	689b      	ldr	r3, [r3, #8]
 800594a:	2207      	movs	r2, #7
 800594c:	4013      	ands	r3, r2
 800594e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2b06      	cmp	r3, #6
 8005954:	d007      	beq.n	8005966 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	681a      	ldr	r2, [r3, #0]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	2101      	movs	r1, #1
 8005962:	430a      	orrs	r2, r1
 8005964:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005966:	2300      	movs	r3, #0
}
 8005968:	0018      	movs	r0, r3
 800596a:	46bd      	mov	sp, r7
 800596c:	b004      	add	sp, #16
 800596e:	bd80      	pop	{r7, pc}

08005970 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b082      	sub	sp, #8
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	68da      	ldr	r2, [r3, #12]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	2101      	movs	r1, #1
 8005984:	438a      	bics	r2, r1
 8005986:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	6a1b      	ldr	r3, [r3, #32]
 800598e:	4a0b      	ldr	r2, [pc, #44]	; (80059bc <HAL_TIM_Base_Stop_IT+0x4c>)
 8005990:	4013      	ands	r3, r2
 8005992:	d10d      	bne.n	80059b0 <HAL_TIM_Base_Stop_IT+0x40>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	6a1b      	ldr	r3, [r3, #32]
 800599a:	4a09      	ldr	r2, [pc, #36]	; (80059c0 <HAL_TIM_Base_Stop_IT+0x50>)
 800599c:	4013      	ands	r3, r2
 800599e:	d107      	bne.n	80059b0 <HAL_TIM_Base_Stop_IT+0x40>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	681a      	ldr	r2, [r3, #0]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	2101      	movs	r1, #1
 80059ac:	438a      	bics	r2, r1
 80059ae:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80059b0:	2300      	movs	r3, #0
}
 80059b2:	0018      	movs	r0, r3
 80059b4:	46bd      	mov	sp, r7
 80059b6:	b002      	add	sp, #8
 80059b8:	bd80      	pop	{r7, pc}
 80059ba:	46c0      	nop			; (mov r8, r8)
 80059bc:	00001111 	.word	0x00001111
 80059c0:	00000444 	.word	0x00000444

080059c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b082      	sub	sp, #8
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	691b      	ldr	r3, [r3, #16]
 80059d2:	2202      	movs	r2, #2
 80059d4:	4013      	ands	r3, r2
 80059d6:	2b02      	cmp	r3, #2
 80059d8:	d124      	bne.n	8005a24 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	68db      	ldr	r3, [r3, #12]
 80059e0:	2202      	movs	r2, #2
 80059e2:	4013      	ands	r3, r2
 80059e4:	2b02      	cmp	r3, #2
 80059e6:	d11d      	bne.n	8005a24 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	2203      	movs	r2, #3
 80059ee:	4252      	negs	r2, r2
 80059f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2201      	movs	r2, #1
 80059f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	699b      	ldr	r3, [r3, #24]
 80059fe:	2203      	movs	r2, #3
 8005a00:	4013      	ands	r3, r2
 8005a02:	d004      	beq.n	8005a0e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	0018      	movs	r0, r3
 8005a08:	f000 f9b8 	bl	8005d7c <HAL_TIM_IC_CaptureCallback>
 8005a0c:	e007      	b.n	8005a1e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	0018      	movs	r0, r3
 8005a12:	f000 f9ab 	bl	8005d6c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	0018      	movs	r0, r3
 8005a1a:	f000 f9b7 	bl	8005d8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2200      	movs	r2, #0
 8005a22:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	691b      	ldr	r3, [r3, #16]
 8005a2a:	2204      	movs	r2, #4
 8005a2c:	4013      	ands	r3, r2
 8005a2e:	2b04      	cmp	r3, #4
 8005a30:	d125      	bne.n	8005a7e <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	68db      	ldr	r3, [r3, #12]
 8005a38:	2204      	movs	r2, #4
 8005a3a:	4013      	ands	r3, r2
 8005a3c:	2b04      	cmp	r3, #4
 8005a3e:	d11e      	bne.n	8005a7e <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	2205      	movs	r2, #5
 8005a46:	4252      	negs	r2, r2
 8005a48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2202      	movs	r2, #2
 8005a4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	699a      	ldr	r2, [r3, #24]
 8005a56:	23c0      	movs	r3, #192	; 0xc0
 8005a58:	009b      	lsls	r3, r3, #2
 8005a5a:	4013      	ands	r3, r2
 8005a5c:	d004      	beq.n	8005a68 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	0018      	movs	r0, r3
 8005a62:	f000 f98b 	bl	8005d7c <HAL_TIM_IC_CaptureCallback>
 8005a66:	e007      	b.n	8005a78 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	0018      	movs	r0, r3
 8005a6c:	f000 f97e 	bl	8005d6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	0018      	movs	r0, r3
 8005a74:	f000 f98a 	bl	8005d8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	691b      	ldr	r3, [r3, #16]
 8005a84:	2208      	movs	r2, #8
 8005a86:	4013      	ands	r3, r2
 8005a88:	2b08      	cmp	r3, #8
 8005a8a:	d124      	bne.n	8005ad6 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	68db      	ldr	r3, [r3, #12]
 8005a92:	2208      	movs	r2, #8
 8005a94:	4013      	ands	r3, r2
 8005a96:	2b08      	cmp	r3, #8
 8005a98:	d11d      	bne.n	8005ad6 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	2209      	movs	r2, #9
 8005aa0:	4252      	negs	r2, r2
 8005aa2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2204      	movs	r2, #4
 8005aa8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	69db      	ldr	r3, [r3, #28]
 8005ab0:	2203      	movs	r2, #3
 8005ab2:	4013      	ands	r3, r2
 8005ab4:	d004      	beq.n	8005ac0 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	0018      	movs	r0, r3
 8005aba:	f000 f95f 	bl	8005d7c <HAL_TIM_IC_CaptureCallback>
 8005abe:	e007      	b.n	8005ad0 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	0018      	movs	r0, r3
 8005ac4:	f000 f952 	bl	8005d6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	0018      	movs	r0, r3
 8005acc:	f000 f95e 	bl	8005d8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	691b      	ldr	r3, [r3, #16]
 8005adc:	2210      	movs	r2, #16
 8005ade:	4013      	ands	r3, r2
 8005ae0:	2b10      	cmp	r3, #16
 8005ae2:	d125      	bne.n	8005b30 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	68db      	ldr	r3, [r3, #12]
 8005aea:	2210      	movs	r2, #16
 8005aec:	4013      	ands	r3, r2
 8005aee:	2b10      	cmp	r3, #16
 8005af0:	d11e      	bne.n	8005b30 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	2211      	movs	r2, #17
 8005af8:	4252      	negs	r2, r2
 8005afa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2208      	movs	r2, #8
 8005b00:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	69da      	ldr	r2, [r3, #28]
 8005b08:	23c0      	movs	r3, #192	; 0xc0
 8005b0a:	009b      	lsls	r3, r3, #2
 8005b0c:	4013      	ands	r3, r2
 8005b0e:	d004      	beq.n	8005b1a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	0018      	movs	r0, r3
 8005b14:	f000 f932 	bl	8005d7c <HAL_TIM_IC_CaptureCallback>
 8005b18:	e007      	b.n	8005b2a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	0018      	movs	r0, r3
 8005b1e:	f000 f925 	bl	8005d6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	0018      	movs	r0, r3
 8005b26:	f000 f931 	bl	8005d8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	691b      	ldr	r3, [r3, #16]
 8005b36:	2201      	movs	r2, #1
 8005b38:	4013      	ands	r3, r2
 8005b3a:	2b01      	cmp	r3, #1
 8005b3c:	d10f      	bne.n	8005b5e <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	68db      	ldr	r3, [r3, #12]
 8005b44:	2201      	movs	r2, #1
 8005b46:	4013      	ands	r3, r2
 8005b48:	2b01      	cmp	r3, #1
 8005b4a:	d108      	bne.n	8005b5e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	2202      	movs	r2, #2
 8005b52:	4252      	negs	r2, r2
 8005b54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	0018      	movs	r0, r3
 8005b5a:	f7fc f9ab 	bl	8001eb4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	691b      	ldr	r3, [r3, #16]
 8005b64:	2280      	movs	r2, #128	; 0x80
 8005b66:	4013      	ands	r3, r2
 8005b68:	2b80      	cmp	r3, #128	; 0x80
 8005b6a:	d10f      	bne.n	8005b8c <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	68db      	ldr	r3, [r3, #12]
 8005b72:	2280      	movs	r2, #128	; 0x80
 8005b74:	4013      	ands	r3, r2
 8005b76:	2b80      	cmp	r3, #128	; 0x80
 8005b78:	d108      	bne.n	8005b8c <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	2281      	movs	r2, #129	; 0x81
 8005b80:	4252      	negs	r2, r2
 8005b82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	0018      	movs	r0, r3
 8005b88:	f000 fa80 	bl	800608c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	691b      	ldr	r3, [r3, #16]
 8005b92:	2240      	movs	r2, #64	; 0x40
 8005b94:	4013      	ands	r3, r2
 8005b96:	2b40      	cmp	r3, #64	; 0x40
 8005b98:	d10f      	bne.n	8005bba <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	68db      	ldr	r3, [r3, #12]
 8005ba0:	2240      	movs	r2, #64	; 0x40
 8005ba2:	4013      	ands	r3, r2
 8005ba4:	2b40      	cmp	r3, #64	; 0x40
 8005ba6:	d108      	bne.n	8005bba <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	2241      	movs	r2, #65	; 0x41
 8005bae:	4252      	negs	r2, r2
 8005bb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	0018      	movs	r0, r3
 8005bb6:	f000 f8f1 	bl	8005d9c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	691b      	ldr	r3, [r3, #16]
 8005bc0:	2220      	movs	r2, #32
 8005bc2:	4013      	ands	r3, r2
 8005bc4:	2b20      	cmp	r3, #32
 8005bc6:	d10f      	bne.n	8005be8 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	68db      	ldr	r3, [r3, #12]
 8005bce:	2220      	movs	r2, #32
 8005bd0:	4013      	ands	r3, r2
 8005bd2:	2b20      	cmp	r3, #32
 8005bd4:	d108      	bne.n	8005be8 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	2221      	movs	r2, #33	; 0x21
 8005bdc:	4252      	negs	r2, r2
 8005bde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	0018      	movs	r0, r3
 8005be4:	f000 fa4a 	bl	800607c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005be8:	46c0      	nop			; (mov r8, r8)
 8005bea:	46bd      	mov	sp, r7
 8005bec:	b002      	add	sp, #8
 8005bee:	bd80      	pop	{r7, pc}

08005bf0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b084      	sub	sp, #16
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
 8005bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	223c      	movs	r2, #60	; 0x3c
 8005bfe:	5c9b      	ldrb	r3, [r3, r2]
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	d101      	bne.n	8005c08 <HAL_TIM_ConfigClockSource+0x18>
 8005c04:	2302      	movs	r3, #2
 8005c06:	e0ab      	b.n	8005d60 <HAL_TIM_ConfigClockSource+0x170>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	223c      	movs	r2, #60	; 0x3c
 8005c0c:	2101      	movs	r1, #1
 8005c0e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	223d      	movs	r2, #61	; 0x3d
 8005c14:	2102      	movs	r1, #2
 8005c16:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	689b      	ldr	r3, [r3, #8]
 8005c1e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2277      	movs	r2, #119	; 0x77
 8005c24:	4393      	bics	r3, r2
 8005c26:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	4a4f      	ldr	r2, [pc, #316]	; (8005d68 <HAL_TIM_ConfigClockSource+0x178>)
 8005c2c:	4013      	ands	r3, r2
 8005c2e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	68fa      	ldr	r2, [r7, #12]
 8005c36:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	2b40      	cmp	r3, #64	; 0x40
 8005c3e:	d100      	bne.n	8005c42 <HAL_TIM_ConfigClockSource+0x52>
 8005c40:	e06b      	b.n	8005d1a <HAL_TIM_ConfigClockSource+0x12a>
 8005c42:	d80e      	bhi.n	8005c62 <HAL_TIM_ConfigClockSource+0x72>
 8005c44:	2b10      	cmp	r3, #16
 8005c46:	d100      	bne.n	8005c4a <HAL_TIM_ConfigClockSource+0x5a>
 8005c48:	e077      	b.n	8005d3a <HAL_TIM_ConfigClockSource+0x14a>
 8005c4a:	d803      	bhi.n	8005c54 <HAL_TIM_ConfigClockSource+0x64>
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d100      	bne.n	8005c52 <HAL_TIM_ConfigClockSource+0x62>
 8005c50:	e073      	b.n	8005d3a <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005c52:	e07c      	b.n	8005d4e <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8005c54:	2b20      	cmp	r3, #32
 8005c56:	d100      	bne.n	8005c5a <HAL_TIM_ConfigClockSource+0x6a>
 8005c58:	e06f      	b.n	8005d3a <HAL_TIM_ConfigClockSource+0x14a>
 8005c5a:	2b30      	cmp	r3, #48	; 0x30
 8005c5c:	d100      	bne.n	8005c60 <HAL_TIM_ConfigClockSource+0x70>
 8005c5e:	e06c      	b.n	8005d3a <HAL_TIM_ConfigClockSource+0x14a>
      break;
 8005c60:	e075      	b.n	8005d4e <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8005c62:	2b70      	cmp	r3, #112	; 0x70
 8005c64:	d00e      	beq.n	8005c84 <HAL_TIM_ConfigClockSource+0x94>
 8005c66:	d804      	bhi.n	8005c72 <HAL_TIM_ConfigClockSource+0x82>
 8005c68:	2b50      	cmp	r3, #80	; 0x50
 8005c6a:	d036      	beq.n	8005cda <HAL_TIM_ConfigClockSource+0xea>
 8005c6c:	2b60      	cmp	r3, #96	; 0x60
 8005c6e:	d044      	beq.n	8005cfa <HAL_TIM_ConfigClockSource+0x10a>
      break;
 8005c70:	e06d      	b.n	8005d4e <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8005c72:	2280      	movs	r2, #128	; 0x80
 8005c74:	0152      	lsls	r2, r2, #5
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d068      	beq.n	8005d4c <HAL_TIM_ConfigClockSource+0x15c>
 8005c7a:	2280      	movs	r2, #128	; 0x80
 8005c7c:	0192      	lsls	r2, r2, #6
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d017      	beq.n	8005cb2 <HAL_TIM_ConfigClockSource+0xc2>
      break;
 8005c82:	e064      	b.n	8005d4e <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6818      	ldr	r0, [r3, #0]
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	6899      	ldr	r1, [r3, #8]
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	685a      	ldr	r2, [r3, #4]
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	68db      	ldr	r3, [r3, #12]
 8005c94:	f000 f97a 	bl	8005f8c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	689b      	ldr	r3, [r3, #8]
 8005c9e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	2277      	movs	r2, #119	; 0x77
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	68fa      	ldr	r2, [r7, #12]
 8005cae:	609a      	str	r2, [r3, #8]
      break;
 8005cb0:	e04d      	b.n	8005d4e <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6818      	ldr	r0, [r3, #0]
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	6899      	ldr	r1, [r3, #8]
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	685a      	ldr	r2, [r3, #4]
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	68db      	ldr	r3, [r3, #12]
 8005cc2:	f000 f963 	bl	8005f8c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	689a      	ldr	r2, [r3, #8]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	2180      	movs	r1, #128	; 0x80
 8005cd2:	01c9      	lsls	r1, r1, #7
 8005cd4:	430a      	orrs	r2, r1
 8005cd6:	609a      	str	r2, [r3, #8]
      break;
 8005cd8:	e039      	b.n	8005d4e <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6818      	ldr	r0, [r3, #0]
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	6859      	ldr	r1, [r3, #4]
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	68db      	ldr	r3, [r3, #12]
 8005ce6:	001a      	movs	r2, r3
 8005ce8:	f000 f8d6 	bl	8005e98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	2150      	movs	r1, #80	; 0x50
 8005cf2:	0018      	movs	r0, r3
 8005cf4:	f000 f930 	bl	8005f58 <TIM_ITRx_SetConfig>
      break;
 8005cf8:	e029      	b.n	8005d4e <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6818      	ldr	r0, [r3, #0]
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	6859      	ldr	r1, [r3, #4]
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	68db      	ldr	r3, [r3, #12]
 8005d06:	001a      	movs	r2, r3
 8005d08:	f000 f8f4 	bl	8005ef4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	2160      	movs	r1, #96	; 0x60
 8005d12:	0018      	movs	r0, r3
 8005d14:	f000 f920 	bl	8005f58 <TIM_ITRx_SetConfig>
      break;
 8005d18:	e019      	b.n	8005d4e <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6818      	ldr	r0, [r3, #0]
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	6859      	ldr	r1, [r3, #4]
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	68db      	ldr	r3, [r3, #12]
 8005d26:	001a      	movs	r2, r3
 8005d28:	f000 f8b6 	bl	8005e98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	2140      	movs	r1, #64	; 0x40
 8005d32:	0018      	movs	r0, r3
 8005d34:	f000 f910 	bl	8005f58 <TIM_ITRx_SetConfig>
      break;
 8005d38:	e009      	b.n	8005d4e <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681a      	ldr	r2, [r3, #0]
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	0019      	movs	r1, r3
 8005d44:	0010      	movs	r0, r2
 8005d46:	f000 f907 	bl	8005f58 <TIM_ITRx_SetConfig>
      break;
 8005d4a:	e000      	b.n	8005d4e <HAL_TIM_ConfigClockSource+0x15e>
      break;
 8005d4c:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	223d      	movs	r2, #61	; 0x3d
 8005d52:	2101      	movs	r1, #1
 8005d54:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	223c      	movs	r2, #60	; 0x3c
 8005d5a:	2100      	movs	r1, #0
 8005d5c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005d5e:	2300      	movs	r3, #0
}
 8005d60:	0018      	movs	r0, r3
 8005d62:	46bd      	mov	sp, r7
 8005d64:	b004      	add	sp, #16
 8005d66:	bd80      	pop	{r7, pc}
 8005d68:	ffff00ff 	.word	0xffff00ff

08005d6c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b082      	sub	sp, #8
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005d74:	46c0      	nop			; (mov r8, r8)
 8005d76:	46bd      	mov	sp, r7
 8005d78:	b002      	add	sp, #8
 8005d7a:	bd80      	pop	{r7, pc}

08005d7c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b082      	sub	sp, #8
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005d84:	46c0      	nop			; (mov r8, r8)
 8005d86:	46bd      	mov	sp, r7
 8005d88:	b002      	add	sp, #8
 8005d8a:	bd80      	pop	{r7, pc}

08005d8c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b082      	sub	sp, #8
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005d94:	46c0      	nop			; (mov r8, r8)
 8005d96:	46bd      	mov	sp, r7
 8005d98:	b002      	add	sp, #8
 8005d9a:	bd80      	pop	{r7, pc}

08005d9c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b082      	sub	sp, #8
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005da4:	46c0      	nop			; (mov r8, r8)
 8005da6:	46bd      	mov	sp, r7
 8005da8:	b002      	add	sp, #8
 8005daa:	bd80      	pop	{r7, pc}

08005dac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b084      	sub	sp, #16
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
 8005db4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	4a30      	ldr	r2, [pc, #192]	; (8005e80 <TIM_Base_SetConfig+0xd4>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d008      	beq.n	8005dd6 <TIM_Base_SetConfig+0x2a>
 8005dc4:	687a      	ldr	r2, [r7, #4]
 8005dc6:	2380      	movs	r3, #128	; 0x80
 8005dc8:	05db      	lsls	r3, r3, #23
 8005dca:	429a      	cmp	r2, r3
 8005dcc:	d003      	beq.n	8005dd6 <TIM_Base_SetConfig+0x2a>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	4a2c      	ldr	r2, [pc, #176]	; (8005e84 <TIM_Base_SetConfig+0xd8>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d108      	bne.n	8005de8 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	2270      	movs	r2, #112	; 0x70
 8005dda:	4393      	bics	r3, r2
 8005ddc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	68fa      	ldr	r2, [r7, #12]
 8005de4:	4313      	orrs	r3, r2
 8005de6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	4a25      	ldr	r2, [pc, #148]	; (8005e80 <TIM_Base_SetConfig+0xd4>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d014      	beq.n	8005e1a <TIM_Base_SetConfig+0x6e>
 8005df0:	687a      	ldr	r2, [r7, #4]
 8005df2:	2380      	movs	r3, #128	; 0x80
 8005df4:	05db      	lsls	r3, r3, #23
 8005df6:	429a      	cmp	r2, r3
 8005df8:	d00f      	beq.n	8005e1a <TIM_Base_SetConfig+0x6e>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	4a21      	ldr	r2, [pc, #132]	; (8005e84 <TIM_Base_SetConfig+0xd8>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d00b      	beq.n	8005e1a <TIM_Base_SetConfig+0x6e>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	4a20      	ldr	r2, [pc, #128]	; (8005e88 <TIM_Base_SetConfig+0xdc>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d007      	beq.n	8005e1a <TIM_Base_SetConfig+0x6e>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	4a1f      	ldr	r2, [pc, #124]	; (8005e8c <TIM_Base_SetConfig+0xe0>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d003      	beq.n	8005e1a <TIM_Base_SetConfig+0x6e>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	4a1e      	ldr	r2, [pc, #120]	; (8005e90 <TIM_Base_SetConfig+0xe4>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d108      	bne.n	8005e2c <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	4a1d      	ldr	r2, [pc, #116]	; (8005e94 <TIM_Base_SetConfig+0xe8>)
 8005e1e:	4013      	ands	r3, r2
 8005e20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	68db      	ldr	r3, [r3, #12]
 8005e26:	68fa      	ldr	r2, [r7, #12]
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2280      	movs	r2, #128	; 0x80
 8005e30:	4393      	bics	r3, r2
 8005e32:	001a      	movs	r2, r3
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	695b      	ldr	r3, [r3, #20]
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	68fa      	ldr	r2, [r7, #12]
 8005e40:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	689a      	ldr	r2, [r3, #8]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	681a      	ldr	r2, [r3, #0]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	4a0a      	ldr	r2, [pc, #40]	; (8005e80 <TIM_Base_SetConfig+0xd4>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d007      	beq.n	8005e6a <TIM_Base_SetConfig+0xbe>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	4a0b      	ldr	r2, [pc, #44]	; (8005e8c <TIM_Base_SetConfig+0xe0>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d003      	beq.n	8005e6a <TIM_Base_SetConfig+0xbe>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	4a0a      	ldr	r2, [pc, #40]	; (8005e90 <TIM_Base_SetConfig+0xe4>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d103      	bne.n	8005e72 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	691a      	ldr	r2, [r3, #16]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2201      	movs	r2, #1
 8005e76:	615a      	str	r2, [r3, #20]
}
 8005e78:	46c0      	nop			; (mov r8, r8)
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	b004      	add	sp, #16
 8005e7e:	bd80      	pop	{r7, pc}
 8005e80:	40012c00 	.word	0x40012c00
 8005e84:	40000400 	.word	0x40000400
 8005e88:	40002000 	.word	0x40002000
 8005e8c:	40014400 	.word	0x40014400
 8005e90:	40014800 	.word	0x40014800
 8005e94:	fffffcff 	.word	0xfffffcff

08005e98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b086      	sub	sp, #24
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	60f8      	str	r0, [r7, #12]
 8005ea0:	60b9      	str	r1, [r7, #8]
 8005ea2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	6a1b      	ldr	r3, [r3, #32]
 8005ea8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	6a1b      	ldr	r3, [r3, #32]
 8005eae:	2201      	movs	r2, #1
 8005eb0:	4393      	bics	r3, r2
 8005eb2:	001a      	movs	r2, r3
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	699b      	ldr	r3, [r3, #24]
 8005ebc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	22f0      	movs	r2, #240	; 0xf0
 8005ec2:	4393      	bics	r3, r2
 8005ec4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	011b      	lsls	r3, r3, #4
 8005eca:	693a      	ldr	r2, [r7, #16]
 8005ecc:	4313      	orrs	r3, r2
 8005ece:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	220a      	movs	r2, #10
 8005ed4:	4393      	bics	r3, r2
 8005ed6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005ed8:	697a      	ldr	r2, [r7, #20]
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	4313      	orrs	r3, r2
 8005ede:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	693a      	ldr	r2, [r7, #16]
 8005ee4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	697a      	ldr	r2, [r7, #20]
 8005eea:	621a      	str	r2, [r3, #32]
}
 8005eec:	46c0      	nop			; (mov r8, r8)
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	b006      	add	sp, #24
 8005ef2:	bd80      	pop	{r7, pc}

08005ef4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b086      	sub	sp, #24
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	60f8      	str	r0, [r7, #12]
 8005efc:	60b9      	str	r1, [r7, #8]
 8005efe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	6a1b      	ldr	r3, [r3, #32]
 8005f04:	2210      	movs	r2, #16
 8005f06:	4393      	bics	r3, r2
 8005f08:	001a      	movs	r2, r3
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	699b      	ldr	r3, [r3, #24]
 8005f12:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	6a1b      	ldr	r3, [r3, #32]
 8005f18:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f1a:	697b      	ldr	r3, [r7, #20]
 8005f1c:	4a0d      	ldr	r2, [pc, #52]	; (8005f54 <TIM_TI2_ConfigInputStage+0x60>)
 8005f1e:	4013      	ands	r3, r2
 8005f20:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	031b      	lsls	r3, r3, #12
 8005f26:	697a      	ldr	r2, [r7, #20]
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	22a0      	movs	r2, #160	; 0xa0
 8005f30:	4393      	bics	r3, r2
 8005f32:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	011b      	lsls	r3, r3, #4
 8005f38:	693a      	ldr	r2, [r7, #16]
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	697a      	ldr	r2, [r7, #20]
 8005f42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	693a      	ldr	r2, [r7, #16]
 8005f48:	621a      	str	r2, [r3, #32]
}
 8005f4a:	46c0      	nop			; (mov r8, r8)
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	b006      	add	sp, #24
 8005f50:	bd80      	pop	{r7, pc}
 8005f52:	46c0      	nop			; (mov r8, r8)
 8005f54:	ffff0fff 	.word	0xffff0fff

08005f58 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b084      	sub	sp, #16
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
 8005f60:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	689b      	ldr	r3, [r3, #8]
 8005f66:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	2270      	movs	r2, #112	; 0x70
 8005f6c:	4393      	bics	r3, r2
 8005f6e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005f70:	683a      	ldr	r2, [r7, #0]
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	4313      	orrs	r3, r2
 8005f76:	2207      	movs	r2, #7
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	68fa      	ldr	r2, [r7, #12]
 8005f80:	609a      	str	r2, [r3, #8]
}
 8005f82:	46c0      	nop			; (mov r8, r8)
 8005f84:	46bd      	mov	sp, r7
 8005f86:	b004      	add	sp, #16
 8005f88:	bd80      	pop	{r7, pc}
	...

08005f8c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b086      	sub	sp, #24
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	60f8      	str	r0, [r7, #12]
 8005f94:	60b9      	str	r1, [r7, #8]
 8005f96:	607a      	str	r2, [r7, #4]
 8005f98:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	689b      	ldr	r3, [r3, #8]
 8005f9e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005fa0:	697b      	ldr	r3, [r7, #20]
 8005fa2:	4a09      	ldr	r2, [pc, #36]	; (8005fc8 <TIM_ETR_SetConfig+0x3c>)
 8005fa4:	4013      	ands	r3, r2
 8005fa6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	021a      	lsls	r2, r3, #8
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	431a      	orrs	r2, r3
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	697a      	ldr	r2, [r7, #20]
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	697a      	ldr	r2, [r7, #20]
 8005fbe:	609a      	str	r2, [r3, #8]
}
 8005fc0:	46c0      	nop			; (mov r8, r8)
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	b006      	add	sp, #24
 8005fc6:	bd80      	pop	{r7, pc}
 8005fc8:	ffff00ff 	.word	0xffff00ff

08005fcc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b084      	sub	sp, #16
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
 8005fd4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	223c      	movs	r2, #60	; 0x3c
 8005fda:	5c9b      	ldrb	r3, [r3, r2]
 8005fdc:	2b01      	cmp	r3, #1
 8005fde:	d101      	bne.n	8005fe4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005fe0:	2302      	movs	r3, #2
 8005fe2:	e042      	b.n	800606a <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	223c      	movs	r2, #60	; 0x3c
 8005fe8:	2101      	movs	r1, #1
 8005fea:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	223d      	movs	r2, #61	; 0x3d
 8005ff0:	2102      	movs	r1, #2
 8005ff2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	685b      	ldr	r3, [r3, #4]
 8005ffa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	689b      	ldr	r3, [r3, #8]
 8006002:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2270      	movs	r2, #112	; 0x70
 8006008:	4393      	bics	r3, r2
 800600a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	68fa      	ldr	r2, [r7, #12]
 8006012:	4313      	orrs	r3, r2
 8006014:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	68fa      	ldr	r2, [r7, #12]
 800601c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a14      	ldr	r2, [pc, #80]	; (8006074 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d00a      	beq.n	800603e <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681a      	ldr	r2, [r3, #0]
 800602c:	2380      	movs	r3, #128	; 0x80
 800602e:	05db      	lsls	r3, r3, #23
 8006030:	429a      	cmp	r2, r3
 8006032:	d004      	beq.n	800603e <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a0f      	ldr	r2, [pc, #60]	; (8006078 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d10c      	bne.n	8006058 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	2280      	movs	r2, #128	; 0x80
 8006042:	4393      	bics	r3, r2
 8006044:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	68ba      	ldr	r2, [r7, #8]
 800604c:	4313      	orrs	r3, r2
 800604e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	68ba      	ldr	r2, [r7, #8]
 8006056:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	223d      	movs	r2, #61	; 0x3d
 800605c:	2101      	movs	r1, #1
 800605e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	223c      	movs	r2, #60	; 0x3c
 8006064:	2100      	movs	r1, #0
 8006066:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006068:	2300      	movs	r3, #0
}
 800606a:	0018      	movs	r0, r3
 800606c:	46bd      	mov	sp, r7
 800606e:	b004      	add	sp, #16
 8006070:	bd80      	pop	{r7, pc}
 8006072:	46c0      	nop			; (mov r8, r8)
 8006074:	40012c00 	.word	0x40012c00
 8006078:	40000400 	.word	0x40000400

0800607c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b082      	sub	sp, #8
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006084:	46c0      	nop			; (mov r8, r8)
 8006086:	46bd      	mov	sp, r7
 8006088:	b002      	add	sp, #8
 800608a:	bd80      	pop	{r7, pc}

0800608c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b082      	sub	sp, #8
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006094:	46c0      	nop			; (mov r8, r8)
 8006096:	46bd      	mov	sp, r7
 8006098:	b002      	add	sp, #8
 800609a:	bd80      	pop	{r7, pc}

0800609c <__libc_init_array>:
 800609c:	b570      	push	{r4, r5, r6, lr}
 800609e:	2600      	movs	r6, #0
 80060a0:	4d0c      	ldr	r5, [pc, #48]	; (80060d4 <__libc_init_array+0x38>)
 80060a2:	4c0d      	ldr	r4, [pc, #52]	; (80060d8 <__libc_init_array+0x3c>)
 80060a4:	1b64      	subs	r4, r4, r5
 80060a6:	10a4      	asrs	r4, r4, #2
 80060a8:	42a6      	cmp	r6, r4
 80060aa:	d109      	bne.n	80060c0 <__libc_init_array+0x24>
 80060ac:	2600      	movs	r6, #0
 80060ae:	f000 f821 	bl	80060f4 <_init>
 80060b2:	4d0a      	ldr	r5, [pc, #40]	; (80060dc <__libc_init_array+0x40>)
 80060b4:	4c0a      	ldr	r4, [pc, #40]	; (80060e0 <__libc_init_array+0x44>)
 80060b6:	1b64      	subs	r4, r4, r5
 80060b8:	10a4      	asrs	r4, r4, #2
 80060ba:	42a6      	cmp	r6, r4
 80060bc:	d105      	bne.n	80060ca <__libc_init_array+0x2e>
 80060be:	bd70      	pop	{r4, r5, r6, pc}
 80060c0:	00b3      	lsls	r3, r6, #2
 80060c2:	58eb      	ldr	r3, [r5, r3]
 80060c4:	4798      	blx	r3
 80060c6:	3601      	adds	r6, #1
 80060c8:	e7ee      	b.n	80060a8 <__libc_init_array+0xc>
 80060ca:	00b3      	lsls	r3, r6, #2
 80060cc:	58eb      	ldr	r3, [r5, r3]
 80060ce:	4798      	blx	r3
 80060d0:	3601      	adds	r6, #1
 80060d2:	e7f2      	b.n	80060ba <__libc_init_array+0x1e>
 80060d4:	0800613c 	.word	0x0800613c
 80060d8:	0800613c 	.word	0x0800613c
 80060dc:	0800613c 	.word	0x0800613c
 80060e0:	08006140 	.word	0x08006140

080060e4 <memset>:
 80060e4:	0003      	movs	r3, r0
 80060e6:	1812      	adds	r2, r2, r0
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d100      	bne.n	80060ee <memset+0xa>
 80060ec:	4770      	bx	lr
 80060ee:	7019      	strb	r1, [r3, #0]
 80060f0:	3301      	adds	r3, #1
 80060f2:	e7f9      	b.n	80060e8 <memset+0x4>

080060f4 <_init>:
 80060f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060f6:	46c0      	nop			; (mov r8, r8)
 80060f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060fa:	bc08      	pop	{r3}
 80060fc:	469e      	mov	lr, r3
 80060fe:	4770      	bx	lr

08006100 <_fini>:
 8006100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006102:	46c0      	nop			; (mov r8, r8)
 8006104:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006106:	bc08      	pop	{r3}
 8006108:	469e      	mov	lr, r3
 800610a:	4770      	bx	lr
