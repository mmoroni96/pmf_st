
MainBoard-F767ZI_SD-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015dfc  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000578  08015ffc  08015ffc  00025ffc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016574  08016574  000301ec  2**0
                  CONTENTS
  4 .ARM          00000008  08016574  08016574  00026574  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801657c  0801657c  000301ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801657c  0801657c  0002657c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016580  08016580  00026580  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  08016584  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009b30  200001f0  08016770  000301f0  2**3
                  ALLOC
 10 ._user_heap_stack 00006000  20009d20  08016770  00039d20  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000301ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   000382d9  00000000  00000000  0003021a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00006b68  00000000  00000000  000684f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002700  00000000  00000000  0006f060  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002400  00000000  00000000  00071760  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000b654  00000000  00000000  00073b60  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00027141  00000000  00000000  0007f1b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00112807  00000000  00000000  000a62f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001b8afc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a3a0  00000000  00000000  001b8b78  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001f0 	.word	0x200001f0
 800021c:	00000000 	.word	0x00000000
 8000220:	08015fe4 	.word	0x08015fe4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001f4 	.word	0x200001f4
 800023c:	08015fe4 	.word	0x08015fe4

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b972 	b.w	800053c <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9e08      	ldr	r6, [sp, #32]
 8000276:	4604      	mov	r4, r0
 8000278:	4688      	mov	r8, r1
 800027a:	2b00      	cmp	r3, #0
 800027c:	d14b      	bne.n	8000316 <__udivmoddi4+0xa6>
 800027e:	428a      	cmp	r2, r1
 8000280:	4615      	mov	r5, r2
 8000282:	d967      	bls.n	8000354 <__udivmoddi4+0xe4>
 8000284:	fab2 f282 	clz	r2, r2
 8000288:	b14a      	cbz	r2, 800029e <__udivmoddi4+0x2e>
 800028a:	f1c2 0720 	rsb	r7, r2, #32
 800028e:	fa01 f302 	lsl.w	r3, r1, r2
 8000292:	fa20 f707 	lsr.w	r7, r0, r7
 8000296:	4095      	lsls	r5, r2
 8000298:	ea47 0803 	orr.w	r8, r7, r3
 800029c:	4094      	lsls	r4, r2
 800029e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002a2:	0c23      	lsrs	r3, r4, #16
 80002a4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002a8:	fa1f fc85 	uxth.w	ip, r5
 80002ac:	fb0e 8817 	mls	r8, lr, r7, r8
 80002b0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002b4:	fb07 f10c 	mul.w	r1, r7, ip
 80002b8:	4299      	cmp	r1, r3
 80002ba:	d909      	bls.n	80002d0 <__udivmoddi4+0x60>
 80002bc:	18eb      	adds	r3, r5, r3
 80002be:	f107 30ff 	add.w	r0, r7, #4294967295
 80002c2:	f080 811b 	bcs.w	80004fc <__udivmoddi4+0x28c>
 80002c6:	4299      	cmp	r1, r3
 80002c8:	f240 8118 	bls.w	80004fc <__udivmoddi4+0x28c>
 80002cc:	3f02      	subs	r7, #2
 80002ce:	442b      	add	r3, r5
 80002d0:	1a5b      	subs	r3, r3, r1
 80002d2:	b2a4      	uxth	r4, r4
 80002d4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002d8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002dc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002e4:	45a4      	cmp	ip, r4
 80002e6:	d909      	bls.n	80002fc <__udivmoddi4+0x8c>
 80002e8:	192c      	adds	r4, r5, r4
 80002ea:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ee:	f080 8107 	bcs.w	8000500 <__udivmoddi4+0x290>
 80002f2:	45a4      	cmp	ip, r4
 80002f4:	f240 8104 	bls.w	8000500 <__udivmoddi4+0x290>
 80002f8:	3802      	subs	r0, #2
 80002fa:	442c      	add	r4, r5
 80002fc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000300:	eba4 040c 	sub.w	r4, r4, ip
 8000304:	2700      	movs	r7, #0
 8000306:	b11e      	cbz	r6, 8000310 <__udivmoddi4+0xa0>
 8000308:	40d4      	lsrs	r4, r2
 800030a:	2300      	movs	r3, #0
 800030c:	e9c6 4300 	strd	r4, r3, [r6]
 8000310:	4639      	mov	r1, r7
 8000312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000316:	428b      	cmp	r3, r1
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0xbe>
 800031a:	2e00      	cmp	r6, #0
 800031c:	f000 80eb 	beq.w	80004f6 <__udivmoddi4+0x286>
 8000320:	2700      	movs	r7, #0
 8000322:	e9c6 0100 	strd	r0, r1, [r6]
 8000326:	4638      	mov	r0, r7
 8000328:	4639      	mov	r1, r7
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	fab3 f783 	clz	r7, r3
 8000332:	2f00      	cmp	r7, #0
 8000334:	d147      	bne.n	80003c6 <__udivmoddi4+0x156>
 8000336:	428b      	cmp	r3, r1
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0xd0>
 800033a:	4282      	cmp	r2, r0
 800033c:	f200 80fa 	bhi.w	8000534 <__udivmoddi4+0x2c4>
 8000340:	1a84      	subs	r4, r0, r2
 8000342:	eb61 0303 	sbc.w	r3, r1, r3
 8000346:	2001      	movs	r0, #1
 8000348:	4698      	mov	r8, r3
 800034a:	2e00      	cmp	r6, #0
 800034c:	d0e0      	beq.n	8000310 <__udivmoddi4+0xa0>
 800034e:	e9c6 4800 	strd	r4, r8, [r6]
 8000352:	e7dd      	b.n	8000310 <__udivmoddi4+0xa0>
 8000354:	b902      	cbnz	r2, 8000358 <__udivmoddi4+0xe8>
 8000356:	deff      	udf	#255	; 0xff
 8000358:	fab2 f282 	clz	r2, r2
 800035c:	2a00      	cmp	r2, #0
 800035e:	f040 808f 	bne.w	8000480 <__udivmoddi4+0x210>
 8000362:	1b49      	subs	r1, r1, r5
 8000364:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000368:	fa1f f885 	uxth.w	r8, r5
 800036c:	2701      	movs	r7, #1
 800036e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000372:	0c23      	lsrs	r3, r4, #16
 8000374:	fb0e 111c 	mls	r1, lr, ip, r1
 8000378:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037c:	fb08 f10c 	mul.w	r1, r8, ip
 8000380:	4299      	cmp	r1, r3
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x124>
 8000384:	18eb      	adds	r3, r5, r3
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x122>
 800038c:	4299      	cmp	r1, r3
 800038e:	f200 80cd 	bhi.w	800052c <__udivmoddi4+0x2bc>
 8000392:	4684      	mov	ip, r0
 8000394:	1a59      	subs	r1, r3, r1
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1410 	mls	r4, lr, r0, r1
 80003a0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x14c>
 80003ac:	192c      	adds	r4, r5, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x14a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80b6 	bhi.w	8000526 <__udivmoddi4+0x2b6>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e79f      	b.n	8000306 <__udivmoddi4+0x96>
 80003c6:	f1c7 0c20 	rsb	ip, r7, #32
 80003ca:	40bb      	lsls	r3, r7
 80003cc:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003d0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003d4:	fa01 f407 	lsl.w	r4, r1, r7
 80003d8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003dc:	fa21 f30c 	lsr.w	r3, r1, ip
 80003e0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003e4:	4325      	orrs	r5, r4
 80003e6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ea:	0c2c      	lsrs	r4, r5, #16
 80003ec:	fb08 3319 	mls	r3, r8, r9, r3
 80003f0:	fa1f fa8e 	uxth.w	sl, lr
 80003f4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003f8:	fb09 f40a 	mul.w	r4, r9, sl
 80003fc:	429c      	cmp	r4, r3
 80003fe:	fa02 f207 	lsl.w	r2, r2, r7
 8000402:	fa00 f107 	lsl.w	r1, r0, r7
 8000406:	d90b      	bls.n	8000420 <__udivmoddi4+0x1b0>
 8000408:	eb1e 0303 	adds.w	r3, lr, r3
 800040c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000410:	f080 8087 	bcs.w	8000522 <__udivmoddi4+0x2b2>
 8000414:	429c      	cmp	r4, r3
 8000416:	f240 8084 	bls.w	8000522 <__udivmoddi4+0x2b2>
 800041a:	f1a9 0902 	sub.w	r9, r9, #2
 800041e:	4473      	add	r3, lr
 8000420:	1b1b      	subs	r3, r3, r4
 8000422:	b2ad      	uxth	r5, r5
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000430:	fb00 fa0a 	mul.w	sl, r0, sl
 8000434:	45a2      	cmp	sl, r4
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x1da>
 8000438:	eb1e 0404 	adds.w	r4, lr, r4
 800043c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000440:	d26b      	bcs.n	800051a <__udivmoddi4+0x2aa>
 8000442:	45a2      	cmp	sl, r4
 8000444:	d969      	bls.n	800051a <__udivmoddi4+0x2aa>
 8000446:	3802      	subs	r0, #2
 8000448:	4474      	add	r4, lr
 800044a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044e:	fba0 8902 	umull	r8, r9, r0, r2
 8000452:	eba4 040a 	sub.w	r4, r4, sl
 8000456:	454c      	cmp	r4, r9
 8000458:	46c2      	mov	sl, r8
 800045a:	464b      	mov	r3, r9
 800045c:	d354      	bcc.n	8000508 <__udivmoddi4+0x298>
 800045e:	d051      	beq.n	8000504 <__udivmoddi4+0x294>
 8000460:	2e00      	cmp	r6, #0
 8000462:	d069      	beq.n	8000538 <__udivmoddi4+0x2c8>
 8000464:	ebb1 050a 	subs.w	r5, r1, sl
 8000468:	eb64 0403 	sbc.w	r4, r4, r3
 800046c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000470:	40fd      	lsrs	r5, r7
 8000472:	40fc      	lsrs	r4, r7
 8000474:	ea4c 0505 	orr.w	r5, ip, r5
 8000478:	e9c6 5400 	strd	r5, r4, [r6]
 800047c:	2700      	movs	r7, #0
 800047e:	e747      	b.n	8000310 <__udivmoddi4+0xa0>
 8000480:	f1c2 0320 	rsb	r3, r2, #32
 8000484:	fa20 f703 	lsr.w	r7, r0, r3
 8000488:	4095      	lsls	r5, r2
 800048a:	fa01 f002 	lsl.w	r0, r1, r2
 800048e:	fa21 f303 	lsr.w	r3, r1, r3
 8000492:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000496:	4338      	orrs	r0, r7
 8000498:	0c01      	lsrs	r1, r0, #16
 800049a:	fbb3 f7fe 	udiv	r7, r3, lr
 800049e:	fa1f f885 	uxth.w	r8, r5
 80004a2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004a6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004aa:	fb07 f308 	mul.w	r3, r7, r8
 80004ae:	428b      	cmp	r3, r1
 80004b0:	fa04 f402 	lsl.w	r4, r4, r2
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x256>
 80004b6:	1869      	adds	r1, r5, r1
 80004b8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004bc:	d22f      	bcs.n	800051e <__udivmoddi4+0x2ae>
 80004be:	428b      	cmp	r3, r1
 80004c0:	d92d      	bls.n	800051e <__udivmoddi4+0x2ae>
 80004c2:	3f02      	subs	r7, #2
 80004c4:	4429      	add	r1, r5
 80004c6:	1acb      	subs	r3, r1, r3
 80004c8:	b281      	uxth	r1, r0
 80004ca:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ce:	fb0e 3310 	mls	r3, lr, r0, r3
 80004d2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d6:	fb00 f308 	mul.w	r3, r0, r8
 80004da:	428b      	cmp	r3, r1
 80004dc:	d907      	bls.n	80004ee <__udivmoddi4+0x27e>
 80004de:	1869      	adds	r1, r5, r1
 80004e0:	f100 3cff 	add.w	ip, r0, #4294967295
 80004e4:	d217      	bcs.n	8000516 <__udivmoddi4+0x2a6>
 80004e6:	428b      	cmp	r3, r1
 80004e8:	d915      	bls.n	8000516 <__udivmoddi4+0x2a6>
 80004ea:	3802      	subs	r0, #2
 80004ec:	4429      	add	r1, r5
 80004ee:	1ac9      	subs	r1, r1, r3
 80004f0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004f4:	e73b      	b.n	800036e <__udivmoddi4+0xfe>
 80004f6:	4637      	mov	r7, r6
 80004f8:	4630      	mov	r0, r6
 80004fa:	e709      	b.n	8000310 <__udivmoddi4+0xa0>
 80004fc:	4607      	mov	r7, r0
 80004fe:	e6e7      	b.n	80002d0 <__udivmoddi4+0x60>
 8000500:	4618      	mov	r0, r3
 8000502:	e6fb      	b.n	80002fc <__udivmoddi4+0x8c>
 8000504:	4541      	cmp	r1, r8
 8000506:	d2ab      	bcs.n	8000460 <__udivmoddi4+0x1f0>
 8000508:	ebb8 0a02 	subs.w	sl, r8, r2
 800050c:	eb69 020e 	sbc.w	r2, r9, lr
 8000510:	3801      	subs	r0, #1
 8000512:	4613      	mov	r3, r2
 8000514:	e7a4      	b.n	8000460 <__udivmoddi4+0x1f0>
 8000516:	4660      	mov	r0, ip
 8000518:	e7e9      	b.n	80004ee <__udivmoddi4+0x27e>
 800051a:	4618      	mov	r0, r3
 800051c:	e795      	b.n	800044a <__udivmoddi4+0x1da>
 800051e:	4667      	mov	r7, ip
 8000520:	e7d1      	b.n	80004c6 <__udivmoddi4+0x256>
 8000522:	4681      	mov	r9, r0
 8000524:	e77c      	b.n	8000420 <__udivmoddi4+0x1b0>
 8000526:	3802      	subs	r0, #2
 8000528:	442c      	add	r4, r5
 800052a:	e747      	b.n	80003bc <__udivmoddi4+0x14c>
 800052c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000530:	442b      	add	r3, r5
 8000532:	e72f      	b.n	8000394 <__udivmoddi4+0x124>
 8000534:	4638      	mov	r0, r7
 8000536:	e708      	b.n	800034a <__udivmoddi4+0xda>
 8000538:	4637      	mov	r7, r6
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0xa0>

0800053c <__aeabi_idiv0>:
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop

08000540 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000540:	b480      	push	{r7}
 8000542:	b083      	sub	sp, #12
 8000544:	af00      	add	r7, sp, #0
 8000546:	4603      	mov	r3, r0
 8000548:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800054a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800054e:	2b00      	cmp	r3, #0
 8000550:	db0b      	blt.n	800056a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000552:	79fb      	ldrb	r3, [r7, #7]
 8000554:	f003 021f 	and.w	r2, r3, #31
 8000558:	4907      	ldr	r1, [pc, #28]	; (8000578 <__NVIC_EnableIRQ+0x38>)
 800055a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800055e:	095b      	lsrs	r3, r3, #5
 8000560:	2001      	movs	r0, #1
 8000562:	fa00 f202 	lsl.w	r2, r0, r2
 8000566:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800056a:	bf00      	nop
 800056c:	370c      	adds	r7, #12
 800056e:	46bd      	mov	sp, r7
 8000570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop
 8000578:	e000e100 	.word	0xe000e100

0800057c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000580:	f000 ffd9 	bl	8001536 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000584:	f000 f830 	bl	80005e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000588:	f000 f9a8 	bl	80008dc <MX_GPIO_Init>
  MX_DMA_Init();
 800058c:	f000 f980 	bl	8000890 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000590:	f000 f94e 	bl	8000830 <MX_USART3_UART_Init>
  MX_CAN1_Init();
 8000594:	f000 f8cc 	bl	8000730 <MX_CAN1_Init>
  MX_SDMMC1_SD_Init();
 8000598:	f000 f900 	bl	800079c <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 800059c:	f009 fd60 	bl	800a060 <MX_FATFS_Init>
  MX_TIM14_Init();
 80005a0:	f000 f922 	bl	80007e8 <MX_TIM14_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80005a4:	f000 f8b8 	bl	8000718 <MX_NVIC_Init>
  res = f_close(&SDFile);
  res = f_open(&SDFile, &path[0], FA_OPEN_APPEND | FA_WRITE);*/
  //USB start
  //MX_USB_DEVICE_Init();
  // CAN Initialization
  CAN_Config();
 80005a8:	f000 fbf0 	bl	8000d8c <CAN_Config>
  HAL_CAN_Start(&hcan1);
 80005ac:	4809      	ldr	r0, [pc, #36]	; (80005d4 <main+0x58>)
 80005ae:	f001 f9f9 	bl	80019a4 <HAL_CAN_Start>
  //HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);

  // TIMER Initialization
  //HAL_TIM_Base_Start_IT(&htim13);
  HAL_TIM_Base_Start_IT(&htim14);
 80005b2:	4809      	ldr	r0, [pc, #36]	; (80005d8 <main+0x5c>)
 80005b4:	f006 fe40 	bl	8007238 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005b8:	f011 f9a4 	bl	8011904 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005bc:	4a07      	ldr	r2, [pc, #28]	; (80005dc <main+0x60>)
 80005be:	2100      	movs	r1, #0
 80005c0:	4807      	ldr	r0, [pc, #28]	; (80005e0 <main+0x64>)
 80005c2:	f011 fa53 	bl	8011a6c <osThreadNew>
 80005c6:	4602      	mov	r2, r0
 80005c8:	4b06      	ldr	r3, [pc, #24]	; (80005e4 <main+0x68>)
 80005ca:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005cc:	f011 f9f0 	bl	80119b0 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005d0:	e7fe      	b.n	80005d0 <main+0x54>
 80005d2:	bf00      	nop
 80005d4:	20007020 	.word	0x20007020
 80005d8:	20007048 	.word	0x20007048
 80005dc:	080160b8 	.word	0x080160b8
 80005e0:	08000df9 	.word	0x08000df9
 80005e4:	20004c08 	.word	0x20004c08

080005e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b0b8      	sub	sp, #224	; 0xe0
 80005ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ee:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80005f2:	2234      	movs	r2, #52	; 0x34
 80005f4:	2100      	movs	r1, #0
 80005f6:	4618      	mov	r0, r3
 80005f8:	f015 fc31 	bl	8015e5e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005fc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	605a      	str	r2, [r3, #4]
 8000606:	609a      	str	r2, [r3, #8]
 8000608:	60da      	str	r2, [r3, #12]
 800060a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800060c:	f107 0308 	add.w	r3, r7, #8
 8000610:	2290      	movs	r2, #144	; 0x90
 8000612:	2100      	movs	r1, #0
 8000614:	4618      	mov	r0, r3
 8000616:	f015 fc22 	bl	8015e5e <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 800061a:	f003 fdf5 	bl	8004208 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800061e:	4b3b      	ldr	r3, [pc, #236]	; (800070c <SystemClock_Config+0x124>)
 8000620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000622:	4a3a      	ldr	r2, [pc, #232]	; (800070c <SystemClock_Config+0x124>)
 8000624:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000628:	6413      	str	r3, [r2, #64]	; 0x40
 800062a:	4b38      	ldr	r3, [pc, #224]	; (800070c <SystemClock_Config+0x124>)
 800062c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800062e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000636:	4b36      	ldr	r3, [pc, #216]	; (8000710 <SystemClock_Config+0x128>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	4a35      	ldr	r2, [pc, #212]	; (8000710 <SystemClock_Config+0x128>)
 800063c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000640:	6013      	str	r3, [r2, #0]
 8000642:	4b33      	ldr	r3, [pc, #204]	; (8000710 <SystemClock_Config+0x128>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800064a:	603b      	str	r3, [r7, #0]
 800064c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800064e:	2301      	movs	r3, #1
 8000650:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000654:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000658:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800065c:	2302      	movs	r3, #2
 800065e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000662:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000666:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 800066a:	2304      	movs	r3, #4
 800066c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000670:	23c0      	movs	r3, #192	; 0xc0
 8000672:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000676:	2302      	movs	r3, #2
 8000678:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800067c:	2308      	movs	r3, #8
 800067e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000682:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000686:	4618      	mov	r0, r3
 8000688:	f003 fe1e 	bl	80042c8 <HAL_RCC_OscConfig>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000692:	f000 fc5f 	bl	8000f54 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000696:	f003 fdc7 	bl	8004228 <HAL_PWREx_EnableOverDrive>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80006a0:	f000 fc58 	bl	8000f54 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a4:	230f      	movs	r3, #15
 80006a6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006aa:	2302      	movs	r3, #2
 80006ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b0:	2300      	movs	r3, #0
 80006b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006b6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006c2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80006c6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80006ca:	2106      	movs	r1, #6
 80006cc:	4618      	mov	r0, r3
 80006ce:	f004 f8a9 	bl	8004824 <HAL_RCC_ClockConfig>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <SystemClock_Config+0xf4>
  {
    Error_Handler();
 80006d8:	f000 fc3c 	bl	8000f54 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_SDMMC1
 80006dc:	4b0d      	ldr	r3, [pc, #52]	; (8000714 <SystemClock_Config+0x12c>)
 80006de:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80006e0:	2300      	movs	r3, #0
 80006e2:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80006e4:	2300      	movs	r3, #0
 80006e6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 80006ea:	2300      	movs	r3, #0
 80006ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006f0:	f107 0308 	add.w	r3, r7, #8
 80006f4:	4618      	mov	r0, r3
 80006f6:	f004 fabf 	bl	8004c78 <HAL_RCCEx_PeriphCLKConfig>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <SystemClock_Config+0x11c>
  {
    Error_Handler();
 8000700:	f000 fc28 	bl	8000f54 <Error_Handler>
  }
}
 8000704:	bf00      	nop
 8000706:	37e0      	adds	r7, #224	; 0xe0
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	40023800 	.word	0x40023800
 8000710:	40007000 	.word	0x40007000
 8000714:	00a00100 	.word	0x00a00100

08000718 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  /* CAN1_RX0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 6, 0);
 800071c:	2200      	movs	r2, #0
 800071e:	2106      	movs	r1, #6
 8000720:	2014      	movs	r0, #20
 8000722:	f001 fdc3 	bl	80022ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000726:	2014      	movs	r0, #20
 8000728:	f001 fddc 	bl	80022e4 <HAL_NVIC_EnableIRQ>
}
 800072c:	bf00      	nop
 800072e:	bd80      	pop	{r7, pc}

08000730 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000734:	4b17      	ldr	r3, [pc, #92]	; (8000794 <MX_CAN1_Init+0x64>)
 8000736:	4a18      	ldr	r2, [pc, #96]	; (8000798 <MX_CAN1_Init+0x68>)
 8000738:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 800073a:	4b16      	ldr	r3, [pc, #88]	; (8000794 <MX_CAN1_Init+0x64>)
 800073c:	2206      	movs	r2, #6
 800073e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000740:	4b14      	ldr	r3, [pc, #80]	; (8000794 <MX_CAN1_Init+0x64>)
 8000742:	2200      	movs	r2, #0
 8000744:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000746:	4b13      	ldr	r3, [pc, #76]	; (8000794 <MX_CAN1_Init+0x64>)
 8000748:	2200      	movs	r2, #0
 800074a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 800074c:	4b11      	ldr	r3, [pc, #68]	; (8000794 <MX_CAN1_Init+0x64>)
 800074e:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000752:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000754:	4b0f      	ldr	r3, [pc, #60]	; (8000794 <MX_CAN1_Init+0x64>)
 8000756:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800075a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800075c:	4b0d      	ldr	r3, [pc, #52]	; (8000794 <MX_CAN1_Init+0x64>)
 800075e:	2200      	movs	r2, #0
 8000760:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000762:	4b0c      	ldr	r3, [pc, #48]	; (8000794 <MX_CAN1_Init+0x64>)
 8000764:	2200      	movs	r2, #0
 8000766:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000768:	4b0a      	ldr	r3, [pc, #40]	; (8000794 <MX_CAN1_Init+0x64>)
 800076a:	2200      	movs	r2, #0
 800076c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800076e:	4b09      	ldr	r3, [pc, #36]	; (8000794 <MX_CAN1_Init+0x64>)
 8000770:	2200      	movs	r2, #0
 8000772:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = ENABLE;
 8000774:	4b07      	ldr	r3, [pc, #28]	; (8000794 <MX_CAN1_Init+0x64>)
 8000776:	2201      	movs	r2, #1
 8000778:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800077a:	4b06      	ldr	r3, [pc, #24]	; (8000794 <MX_CAN1_Init+0x64>)
 800077c:	2200      	movs	r2, #0
 800077e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000780:	4804      	ldr	r0, [pc, #16]	; (8000794 <MX_CAN1_Init+0x64>)
 8000782:	f000 ff27 	bl	80015d4 <HAL_CAN_Init>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 800078c:	f000 fbe2 	bl	8000f54 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000790:	bf00      	nop
 8000792:	bd80      	pop	{r7, pc}
 8000794:	20007020 	.word	0x20007020
 8000798:	40006400 	.word	0x40006400

0800079c <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80007a0:	4b0f      	ldr	r3, [pc, #60]	; (80007e0 <MX_SDMMC1_SD_Init+0x44>)
 80007a2:	4a10      	ldr	r2, [pc, #64]	; (80007e4 <MX_SDMMC1_SD_Init+0x48>)
 80007a4:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80007a6:	4b0e      	ldr	r3, [pc, #56]	; (80007e0 <MX_SDMMC1_SD_Init+0x44>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 80007ac:	4b0c      	ldr	r3, [pc, #48]	; (80007e0 <MX_SDMMC1_SD_Init+0x44>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80007b2:	4b0b      	ldr	r3, [pc, #44]	; (80007e0 <MX_SDMMC1_SD_Init+0x44>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 80007b8:	4b09      	ldr	r3, [pc, #36]	; (80007e0 <MX_SDMMC1_SD_Init+0x44>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80007be:	4b08      	ldr	r3, [pc, #32]	; (80007e0 <MX_SDMMC1_SD_Init+0x44>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 4;
 80007c4:	4b06      	ldr	r3, [pc, #24]	; (80007e0 <MX_SDMMC1_SD_Init+0x44>)
 80007c6:	2204      	movs	r2, #4
 80007c8:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */
  // Is Redundant
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 80007ca:	4805      	ldr	r0, [pc, #20]	; (80007e0 <MX_SDMMC1_SD_Init+0x44>)
 80007cc:	f004 fe7a 	bl	80054c4 <HAL_SD_Init>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_SDMMC1_SD_Init+0x3e>
  {
	  Error_Handler();
 80007d6:	f000 fbbd 	bl	8000f54 <Error_Handler>
  }
  /* USER CODE END SDMMC1_Init 2 */

}
 80007da:	bf00      	nop
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	20004c8c 	.word	0x20004c8c
 80007e4:	40012c00 	.word	0x40012c00

080007e8 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80007ec:	4b0e      	ldr	r3, [pc, #56]	; (8000828 <MX_TIM14_Init+0x40>)
 80007ee:	4a0f      	ldr	r2, [pc, #60]	; (800082c <MX_TIM14_Init+0x44>)
 80007f0:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 19100;
 80007f2:	4b0d      	ldr	r3, [pc, #52]	; (8000828 <MX_TIM14_Init+0x40>)
 80007f4:	f644 229c 	movw	r2, #19100	; 0x4a9c
 80007f8:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007fa:	4b0b      	ldr	r3, [pc, #44]	; (8000828 <MX_TIM14_Init+0x40>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 50;
 8000800:	4b09      	ldr	r3, [pc, #36]	; (8000828 <MX_TIM14_Init+0x40>)
 8000802:	2232      	movs	r2, #50	; 0x32
 8000804:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000806:	4b08      	ldr	r3, [pc, #32]	; (8000828 <MX_TIM14_Init+0x40>)
 8000808:	2200      	movs	r2, #0
 800080a:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800080c:	4b06      	ldr	r3, [pc, #24]	; (8000828 <MX_TIM14_Init+0x40>)
 800080e:	2280      	movs	r2, #128	; 0x80
 8000810:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000812:	4805      	ldr	r0, [pc, #20]	; (8000828 <MX_TIM14_Init+0x40>)
 8000814:	f006 fce4 	bl	80071e0 <HAL_TIM_Base_Init>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 800081e:	f000 fb99 	bl	8000f54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	20007048 	.word	0x20007048
 800082c:	40002000 	.word	0x40002000

08000830 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000834:	4b14      	ldr	r3, [pc, #80]	; (8000888 <MX_USART3_UART_Init+0x58>)
 8000836:	4a15      	ldr	r2, [pc, #84]	; (800088c <MX_USART3_UART_Init+0x5c>)
 8000838:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800083a:	4b13      	ldr	r3, [pc, #76]	; (8000888 <MX_USART3_UART_Init+0x58>)
 800083c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000840:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000842:	4b11      	ldr	r3, [pc, #68]	; (8000888 <MX_USART3_UART_Init+0x58>)
 8000844:	2200      	movs	r2, #0
 8000846:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000848:	4b0f      	ldr	r3, [pc, #60]	; (8000888 <MX_USART3_UART_Init+0x58>)
 800084a:	2200      	movs	r2, #0
 800084c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800084e:	4b0e      	ldr	r3, [pc, #56]	; (8000888 <MX_USART3_UART_Init+0x58>)
 8000850:	2200      	movs	r2, #0
 8000852:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000854:	4b0c      	ldr	r3, [pc, #48]	; (8000888 <MX_USART3_UART_Init+0x58>)
 8000856:	220c      	movs	r2, #12
 8000858:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800085a:	4b0b      	ldr	r3, [pc, #44]	; (8000888 <MX_USART3_UART_Init+0x58>)
 800085c:	2200      	movs	r2, #0
 800085e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000860:	4b09      	ldr	r3, [pc, #36]	; (8000888 <MX_USART3_UART_Init+0x58>)
 8000862:	2200      	movs	r2, #0
 8000864:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000866:	4b08      	ldr	r3, [pc, #32]	; (8000888 <MX_USART3_UART_Init+0x58>)
 8000868:	2200      	movs	r2, #0
 800086a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800086c:	4b06      	ldr	r3, [pc, #24]	; (8000888 <MX_USART3_UART_Init+0x58>)
 800086e:	2200      	movs	r2, #0
 8000870:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000872:	4805      	ldr	r0, [pc, #20]	; (8000888 <MX_USART3_UART_Init+0x58>)
 8000874:	f006 ff10 	bl	8007698 <HAL_UART_Init>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800087e:	f000 fb69 	bl	8000f54 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000882:	bf00      	nop
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	20004c0c 	.word	0x20004c0c
 800088c:	40004800 	.word	0x40004800

08000890 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000896:	4b10      	ldr	r3, [pc, #64]	; (80008d8 <MX_DMA_Init+0x48>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	4a0f      	ldr	r2, [pc, #60]	; (80008d8 <MX_DMA_Init+0x48>)
 800089c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80008a0:	6313      	str	r3, [r2, #48]	; 0x30
 80008a2:	4b0d      	ldr	r3, [pc, #52]	; (80008d8 <MX_DMA_Init+0x48>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80008aa:	607b      	str	r3, [r7, #4]
 80008ac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 7, 0);
 80008ae:	2200      	movs	r2, #0
 80008b0:	2107      	movs	r1, #7
 80008b2:	203b      	movs	r0, #59	; 0x3b
 80008b4:	f001 fcfa 	bl	80022ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80008b8:	203b      	movs	r0, #59	; 0x3b
 80008ba:	f001 fd13 	bl	80022e4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 11, 0);
 80008be:	2200      	movs	r2, #0
 80008c0:	210b      	movs	r1, #11
 80008c2:	2045      	movs	r0, #69	; 0x45
 80008c4:	f001 fcf2 	bl	80022ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80008c8:	2045      	movs	r0, #69	; 0x45
 80008ca:	f001 fd0b 	bl	80022e4 <HAL_NVIC_EnableIRQ>

}
 80008ce:	bf00      	nop
 80008d0:	3708      	adds	r7, #8
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	40023800 	.word	0x40023800

080008dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b08c      	sub	sp, #48	; 0x30
 80008e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e2:	f107 031c 	add.w	r3, r7, #28
 80008e6:	2200      	movs	r2, #0
 80008e8:	601a      	str	r2, [r3, #0]
 80008ea:	605a      	str	r2, [r3, #4]
 80008ec:	609a      	str	r2, [r3, #8]
 80008ee:	60da      	str	r2, [r3, #12]
 80008f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008f2:	4b78      	ldr	r3, [pc, #480]	; (8000ad4 <MX_GPIO_Init+0x1f8>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	4a77      	ldr	r2, [pc, #476]	; (8000ad4 <MX_GPIO_Init+0x1f8>)
 80008f8:	f043 0304 	orr.w	r3, r3, #4
 80008fc:	6313      	str	r3, [r2, #48]	; 0x30
 80008fe:	4b75      	ldr	r3, [pc, #468]	; (8000ad4 <MX_GPIO_Init+0x1f8>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	f003 0304 	and.w	r3, r3, #4
 8000906:	61bb      	str	r3, [r7, #24]
 8000908:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800090a:	4b72      	ldr	r3, [pc, #456]	; (8000ad4 <MX_GPIO_Init+0x1f8>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	4a71      	ldr	r2, [pc, #452]	; (8000ad4 <MX_GPIO_Init+0x1f8>)
 8000910:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000914:	6313      	str	r3, [r2, #48]	; 0x30
 8000916:	4b6f      	ldr	r3, [pc, #444]	; (8000ad4 <MX_GPIO_Init+0x1f8>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800091e:	617b      	str	r3, [r7, #20]
 8000920:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000922:	4b6c      	ldr	r3, [pc, #432]	; (8000ad4 <MX_GPIO_Init+0x1f8>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	4a6b      	ldr	r2, [pc, #428]	; (8000ad4 <MX_GPIO_Init+0x1f8>)
 8000928:	f043 0301 	orr.w	r3, r3, #1
 800092c:	6313      	str	r3, [r2, #48]	; 0x30
 800092e:	4b69      	ldr	r3, [pc, #420]	; (8000ad4 <MX_GPIO_Init+0x1f8>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	f003 0301 	and.w	r3, r3, #1
 8000936:	613b      	str	r3, [r7, #16]
 8000938:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800093a:	4b66      	ldr	r3, [pc, #408]	; (8000ad4 <MX_GPIO_Init+0x1f8>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	4a65      	ldr	r2, [pc, #404]	; (8000ad4 <MX_GPIO_Init+0x1f8>)
 8000940:	f043 0302 	orr.w	r3, r3, #2
 8000944:	6313      	str	r3, [r2, #48]	; 0x30
 8000946:	4b63      	ldr	r3, [pc, #396]	; (8000ad4 <MX_GPIO_Init+0x1f8>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	f003 0302 	and.w	r3, r3, #2
 800094e:	60fb      	str	r3, [r7, #12]
 8000950:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000952:	4b60      	ldr	r3, [pc, #384]	; (8000ad4 <MX_GPIO_Init+0x1f8>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	4a5f      	ldr	r2, [pc, #380]	; (8000ad4 <MX_GPIO_Init+0x1f8>)
 8000958:	f043 0308 	orr.w	r3, r3, #8
 800095c:	6313      	str	r3, [r2, #48]	; 0x30
 800095e:	4b5d      	ldr	r3, [pc, #372]	; (8000ad4 <MX_GPIO_Init+0x1f8>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	f003 0308 	and.w	r3, r3, #8
 8000966:	60bb      	str	r3, [r7, #8]
 8000968:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800096a:	4b5a      	ldr	r3, [pc, #360]	; (8000ad4 <MX_GPIO_Init+0x1f8>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	4a59      	ldr	r2, [pc, #356]	; (8000ad4 <MX_GPIO_Init+0x1f8>)
 8000970:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000974:	6313      	str	r3, [r2, #48]	; 0x30
 8000976:	4b57      	ldr	r3, [pc, #348]	; (8000ad4 <MX_GPIO_Init+0x1f8>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800097e:	607b      	str	r3, [r7, #4]
 8000980:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin|GPIO_PIN_8 
 8000982:	2200      	movs	r2, #0
 8000984:	f244 3181 	movw	r1, #17281	; 0x4381
 8000988:	4853      	ldr	r0, [pc, #332]	; (8000ad8 <MX_GPIO_Init+0x1fc>)
 800098a:	f002 fa1f 	bl	8002dcc <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800098e:	2200      	movs	r2, #0
 8000990:	2140      	movs	r1, #64	; 0x40
 8000992:	4852      	ldr	r0, [pc, #328]	; (8000adc <MX_GPIO_Init+0x200>)
 8000994:	f002 fa1a 	bl	8002dcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000998:	2200      	movs	r2, #0
 800099a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800099e:	4850      	ldr	r0, [pc, #320]	; (8000ae0 <MX_GPIO_Init+0x204>)
 80009a0:	f002 fa14 	bl	8002dcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80009a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009aa:	4b4e      	ldr	r3, [pc, #312]	; (8000ae4 <MX_GPIO_Init+0x208>)
 80009ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ae:	2300      	movs	r3, #0
 80009b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80009b2:	f107 031c 	add.w	r3, r7, #28
 80009b6:	4619      	mov	r1, r3
 80009b8:	484b      	ldr	r0, [pc, #300]	; (8000ae8 <MX_GPIO_Init+0x20c>)
 80009ba:	f002 f845 	bl	8002a48 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80009be:	2332      	movs	r3, #50	; 0x32
 80009c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c2:	2302      	movs	r3, #2
 80009c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	2300      	movs	r3, #0
 80009c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ca:	2303      	movs	r3, #3
 80009cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009ce:	230b      	movs	r3, #11
 80009d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009d2:	f107 031c 	add.w	r3, r7, #28
 80009d6:	4619      	mov	r1, r3
 80009d8:	4843      	ldr	r0, [pc, #268]	; (8000ae8 <MX_GPIO_Init+0x20c>)
 80009da:	f002 f835 	bl	8002a48 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80009de:	2386      	movs	r3, #134	; 0x86
 80009e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e2:	2302      	movs	r3, #2
 80009e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e6:	2300      	movs	r3, #0
 80009e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ea:	2303      	movs	r3, #3
 80009ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009ee:	230b      	movs	r3, #11
 80009f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f2:	f107 031c 	add.w	r3, r7, #28
 80009f6:	4619      	mov	r1, r3
 80009f8:	4839      	ldr	r0, [pc, #228]	; (8000ae0 <MX_GPIO_Init+0x204>)
 80009fa:	f002 f825 	bl	8002a48 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin PB8 
                           PB9 */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin|GPIO_PIN_8 
 80009fe:	f244 3381 	movw	r3, #17281	; 0x4381
 8000a02:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a04:	2301      	movs	r3, #1
 8000a06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a10:	f107 031c 	add.w	r3, r7, #28
 8000a14:	4619      	mov	r1, r3
 8000a16:	4830      	ldr	r0, [pc, #192]	; (8000ad8 <MX_GPIO_Init+0x1fc>)
 8000a18:	f002 f816 	bl	8002a48 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000a1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a22:	2302      	movs	r3, #2
 8000a24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a26:	2300      	movs	r3, #0
 8000a28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a2a:	2303      	movs	r3, #3
 8000a2c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a2e:	230b      	movs	r3, #11
 8000a30:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000a32:	f107 031c 	add.w	r3, r7, #28
 8000a36:	4619      	mov	r1, r3
 8000a38:	4827      	ldr	r0, [pc, #156]	; (8000ad8 <MX_GPIO_Init+0x1fc>)
 8000a3a:	f002 f805 	bl	8002a48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a3e:	2304      	movs	r3, #4
 8000a40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a42:	2300      	movs	r3, #0
 8000a44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a46:	2302      	movs	r3, #2
 8000a48:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a4a:	f107 031c 	add.w	r3, r7, #28
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4822      	ldr	r0, [pc, #136]	; (8000adc <MX_GPIO_Init+0x200>)
 8000a52:	f001 fff9 	bl	8002a48 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a56:	2340      	movs	r3, #64	; 0x40
 8000a58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a62:	2300      	movs	r3, #0
 8000a64:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a66:	f107 031c 	add.w	r3, r7, #28
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	481b      	ldr	r0, [pc, #108]	; (8000adc <MX_GPIO_Init+0x200>)
 8000a6e:	f001 ffeb 	bl	8002a48 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a72:	2380      	movs	r3, #128	; 0x80
 8000a74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a76:	2300      	movs	r3, #0
 8000a78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a7e:	f107 031c 	add.w	r3, r7, #28
 8000a82:	4619      	mov	r1, r3
 8000a84:	4815      	ldr	r0, [pc, #84]	; (8000adc <MX_GPIO_Init+0x200>)
 8000a86:	f001 ffdf 	bl	8002a48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000a8a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a90:	2301      	movs	r3, #1
 8000a92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a94:	2302      	movs	r3, #2
 8000a96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a9c:	f107 031c 	add.w	r3, r7, #28
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	480f      	ldr	r0, [pc, #60]	; (8000ae0 <MX_GPIO_Init+0x204>)
 8000aa4:	f001 ffd0 	bl	8002a48 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000aa8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000aac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aae:	2302      	movs	r3, #2
 8000ab0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab6:	2303      	movs	r3, #3
 8000ab8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000aba:	230b      	movs	r3, #11
 8000abc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000abe:	f107 031c 	add.w	r3, r7, #28
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	4805      	ldr	r0, [pc, #20]	; (8000adc <MX_GPIO_Init+0x200>)
 8000ac6:	f001 ffbf 	bl	8002a48 <HAL_GPIO_Init>

}
 8000aca:	bf00      	nop
 8000acc:	3730      	adds	r7, #48	; 0x30
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	40023800 	.word	0x40023800
 8000ad8:	40020400 	.word	0x40020400
 8000adc:	40021800 	.word	0x40021800
 8000ae0:	40020000 	.word	0x40020000
 8000ae4:	10110000 	.word	0x10110000
 8000ae8:	40020800 	.word	0x40020800

08000aec <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8000aec:	b590      	push	{r4, r7, lr}
 8000aee:	b085      	sub	sp, #20
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8000af4:	2201      	movs	r2, #1
 8000af6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000afa:	4823      	ldr	r0, [pc, #140]	; (8000b88 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 8000afc:	f002 f966 	bl	8002dcc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_SET);
 8000b00:	2201      	movs	r2, #1
 8000b02:	2180      	movs	r1, #128	; 0x80
 8000b04:	4820      	ldr	r0, [pc, #128]	; (8000b88 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 8000b06:	f002 f961 	bl	8002dcc <HAL_GPIO_WritePin>
	if(HAL_CAN_GetRxMessage(&hcan1,CAN_RX_FIFO0,&RxHeader,RxData) == HAL_OK){
 8000b0a:	4b20      	ldr	r3, [pc, #128]	; (8000b8c <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 8000b0c:	4a20      	ldr	r2, [pc, #128]	; (8000b90 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 8000b0e:	2100      	movs	r1, #0
 8000b10:	4820      	ldr	r0, [pc, #128]	; (8000b94 <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
 8000b12:	f000 ff8b 	bl	8001a2c <HAL_CAN_GetRxMessage>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d101      	bne.n	8000b20 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>
		Get_Data();
 8000b1c:	f000 f844 	bl	8000ba8 <Get_Data>
	}
	// Test if the buffer is full
	if(ind >= 32){
 8000b20:	4b1d      	ldr	r3, [pc, #116]	; (8000b98 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	2b1f      	cmp	r3, #31
 8000b26:	d91f      	bls.n	8000b68 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>
		// Move the acquired data to the writing buffer
		for(uint8_t i=0;i<32;i++){
 8000b28:	2300      	movs	r3, #0
 8000b2a:	73fb      	strb	r3, [r7, #15]
 8000b2c:	e016      	b.n	8000b5c <HAL_CAN_RxFifo0MsgPendingCallback+0x70>
			SD_buffer[i] = buffer[i];
 8000b2e:	7bfb      	ldrb	r3, [r7, #15]
 8000b30:	7bfa      	ldrb	r2, [r7, #15]
 8000b32:	491a      	ldr	r1, [pc, #104]	; (8000b9c <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 8000b34:	0112      	lsls	r2, r2, #4
 8000b36:	4411      	add	r1, r2
 8000b38:	4a19      	ldr	r2, [pc, #100]	; (8000ba0 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>)
 8000b3a:	011b      	lsls	r3, r3, #4
 8000b3c:	441a      	add	r2, r3
 8000b3e:	460b      	mov	r3, r1
 8000b40:	6814      	ldr	r4, [r2, #0]
 8000b42:	6850      	ldr	r0, [r2, #4]
 8000b44:	6891      	ldr	r1, [r2, #8]
 8000b46:	68d2      	ldr	r2, [r2, #12]
 8000b48:	601c      	str	r4, [r3, #0]
 8000b4a:	6058      	str	r0, [r3, #4]
 8000b4c:	6099      	str	r1, [r3, #8]
 8000b4e:	60da      	str	r2, [r3, #12]
			wf = 1;
 8000b50:	4b14      	ldr	r3, [pc, #80]	; (8000ba4 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 8000b52:	2201      	movs	r2, #1
 8000b54:	701a      	strb	r2, [r3, #0]
		for(uint8_t i=0;i<32;i++){
 8000b56:	7bfb      	ldrb	r3, [r7, #15]
 8000b58:	3301      	adds	r3, #1
 8000b5a:	73fb      	strb	r3, [r7, #15]
 8000b5c:	7bfb      	ldrb	r3, [r7, #15]
 8000b5e:	2b1f      	cmp	r3, #31
 8000b60:	d9e5      	bls.n	8000b2e <HAL_CAN_RxFifo0MsgPendingCallback+0x42>
		}
		ind = 0;
 8000b62:	4b0d      	ldr	r3, [pc, #52]	; (8000b98 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	701a      	strb	r2, [r3, #0]
		// Stop the data request to write the buffer to the memory
		//HAL_TIM_Base_Stop_IT(&htim14);
		//HAL_CAN_DeactivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8000b68:	2200      	movs	r2, #0
 8000b6a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b6e:	4806      	ldr	r0, [pc, #24]	; (8000b88 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 8000b70:	f002 f92c 	bl	8002dcc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_RESET);
 8000b74:	2200      	movs	r2, #0
 8000b76:	2180      	movs	r1, #128	; 0x80
 8000b78:	4803      	ldr	r0, [pc, #12]	; (8000b88 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 8000b7a:	f002 f927 	bl	8002dcc <HAL_GPIO_WritePin>
}
 8000b7e:	bf00      	nop
 8000b80:	3714      	adds	r7, #20
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd90      	pop	{r4, r7, pc}
 8000b86:	bf00      	nop
 8000b88:	40020400 	.word	0x40020400
 8000b8c:	20007018 	.word	0x20007018
 8000b90:	20007304 	.word	0x20007304
 8000b94:	20007020 	.word	0x20007020
 8000b98:	2000020c 	.word	0x2000020c
 8000b9c:	20007104 	.word	0x20007104
 8000ba0:	20005d30 	.word	0x20005d30
 8000ba4:	2000020e 	.word	0x2000020e

08000ba8 <Get_Data>:

void Get_Data(){
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
	 *   | |       ID
	 *   | | _______________
	 * -|-|-|x|x|x|x|x|x|x|x|
	 *   9 8 7 6 5 4 3 2 1 0
	 */
	if((RxHeader.StdId>>8) == 0x00){
 8000bac:	4b73      	ldr	r3, [pc, #460]	; (8000d7c <Get_Data+0x1d4>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	0a1b      	lsrs	r3, r3, #8
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d169      	bne.n	8000c8a <Get_Data+0xe2>
		buffer[ind].Header_H = ((uint8_t)RxHeader.StdId & 0x1F)<<1;
 8000bb6:	4b71      	ldr	r3, [pc, #452]	; (8000d7c <Get_Data+0x1d4>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	b2db      	uxtb	r3, r3
 8000bbc:	005b      	lsls	r3, r3, #1
 8000bbe:	b2db      	uxtb	r3, r3
 8000bc0:	4a6f      	ldr	r2, [pc, #444]	; (8000d80 <Get_Data+0x1d8>)
 8000bc2:	7812      	ldrb	r2, [r2, #0]
 8000bc4:	4610      	mov	r0, r2
 8000bc6:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8000bca:	b2d9      	uxtb	r1, r3
 8000bcc:	4a6d      	ldr	r2, [pc, #436]	; (8000d84 <Get_Data+0x1dc>)
 8000bce:	0103      	lsls	r3, r0, #4
 8000bd0:	4413      	add	r3, r2
 8000bd2:	460a      	mov	r2, r1
 8000bd4:	701a      	strb	r2, [r3, #0]
		buffer[ind].Header_L = RxData[0];
 8000bd6:	4b6a      	ldr	r3, [pc, #424]	; (8000d80 <Get_Data+0x1d8>)
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	4618      	mov	r0, r3
 8000bdc:	4b6a      	ldr	r3, [pc, #424]	; (8000d88 <Get_Data+0x1e0>)
 8000bde:	7819      	ldrb	r1, [r3, #0]
 8000be0:	4a68      	ldr	r2, [pc, #416]	; (8000d84 <Get_Data+0x1dc>)
 8000be2:	0103      	lsls	r3, r0, #4
 8000be4:	4413      	add	r3, r2
 8000be6:	3302      	adds	r3, #2
 8000be8:	460a      	mov	r2, r1
 8000bea:	701a      	strb	r2, [r3, #0]
		buffer[ind].Header_M = RxData[1];
 8000bec:	4b64      	ldr	r3, [pc, #400]	; (8000d80 <Get_Data+0x1d8>)
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	4b65      	ldr	r3, [pc, #404]	; (8000d88 <Get_Data+0x1e0>)
 8000bf4:	7859      	ldrb	r1, [r3, #1]
 8000bf6:	4a63      	ldr	r2, [pc, #396]	; (8000d84 <Get_Data+0x1dc>)
 8000bf8:	0103      	lsls	r3, r0, #4
 8000bfa:	4413      	add	r3, r2
 8000bfc:	3301      	adds	r3, #1
 8000bfe:	460a      	mov	r2, r1
 8000c00:	701a      	strb	r2, [r3, #0]
		buffer[ind].Header_H |= (RxData[2] & 0x01);
 8000c02:	4b5f      	ldr	r3, [pc, #380]	; (8000d80 <Get_Data+0x1d8>)
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	4a5f      	ldr	r2, [pc, #380]	; (8000d84 <Get_Data+0x1dc>)
 8000c08:	011b      	lsls	r3, r3, #4
 8000c0a:	4413      	add	r3, r2
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	b25a      	sxtb	r2, r3
 8000c10:	4b5d      	ldr	r3, [pc, #372]	; (8000d88 <Get_Data+0x1e0>)
 8000c12:	789b      	ldrb	r3, [r3, #2]
 8000c14:	b25b      	sxtb	r3, r3
 8000c16:	f003 0301 	and.w	r3, r3, #1
 8000c1a:	b25b      	sxtb	r3, r3
 8000c1c:	4313      	orrs	r3, r2
 8000c1e:	b25a      	sxtb	r2, r3
 8000c20:	4b57      	ldr	r3, [pc, #348]	; (8000d80 <Get_Data+0x1d8>)
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	b2d1      	uxtb	r1, r2
 8000c26:	4a57      	ldr	r2, [pc, #348]	; (8000d84 <Get_Data+0x1dc>)
 8000c28:	011b      	lsls	r3, r3, #4
 8000c2a:	4413      	add	r3, r2
 8000c2c:	460a      	mov	r2, r1
 8000c2e:	701a      	strb	r2, [r3, #0]
		buffer[ind].GyrX_L = RxData[3];
 8000c30:	4b53      	ldr	r3, [pc, #332]	; (8000d80 <Get_Data+0x1d8>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	4618      	mov	r0, r3
 8000c36:	4b54      	ldr	r3, [pc, #336]	; (8000d88 <Get_Data+0x1e0>)
 8000c38:	78d9      	ldrb	r1, [r3, #3]
 8000c3a:	4a52      	ldr	r2, [pc, #328]	; (8000d84 <Get_Data+0x1dc>)
 8000c3c:	0103      	lsls	r3, r0, #4
 8000c3e:	4413      	add	r3, r2
 8000c40:	330a      	adds	r3, #10
 8000c42:	460a      	mov	r2, r1
 8000c44:	701a      	strb	r2, [r3, #0]
		buffer[ind].GyrX_H = RxData[4];
 8000c46:	4b4e      	ldr	r3, [pc, #312]	; (8000d80 <Get_Data+0x1d8>)
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	4b4e      	ldr	r3, [pc, #312]	; (8000d88 <Get_Data+0x1e0>)
 8000c4e:	7919      	ldrb	r1, [r3, #4]
 8000c50:	4a4c      	ldr	r2, [pc, #304]	; (8000d84 <Get_Data+0x1dc>)
 8000c52:	0103      	lsls	r3, r0, #4
 8000c54:	4413      	add	r3, r2
 8000c56:	3309      	adds	r3, #9
 8000c58:	460a      	mov	r2, r1
 8000c5a:	701a      	strb	r2, [r3, #0]
		buffer[ind].GyrX_L = RxData[5];
 8000c5c:	4b48      	ldr	r3, [pc, #288]	; (8000d80 <Get_Data+0x1d8>)
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	4618      	mov	r0, r3
 8000c62:	4b49      	ldr	r3, [pc, #292]	; (8000d88 <Get_Data+0x1e0>)
 8000c64:	7959      	ldrb	r1, [r3, #5]
 8000c66:	4a47      	ldr	r2, [pc, #284]	; (8000d84 <Get_Data+0x1dc>)
 8000c68:	0103      	lsls	r3, r0, #4
 8000c6a:	4413      	add	r3, r2
 8000c6c:	330a      	adds	r3, #10
 8000c6e:	460a      	mov	r2, r1
 8000c70:	701a      	strb	r2, [r3, #0]
		buffer[ind].GyrY_H = RxData[6];
 8000c72:	4b43      	ldr	r3, [pc, #268]	; (8000d80 <Get_Data+0x1d8>)
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	4618      	mov	r0, r3
 8000c78:	4b43      	ldr	r3, [pc, #268]	; (8000d88 <Get_Data+0x1e0>)
 8000c7a:	7999      	ldrb	r1, [r3, #6]
 8000c7c:	4a41      	ldr	r2, [pc, #260]	; (8000d84 <Get_Data+0x1dc>)
 8000c7e:	0103      	lsls	r3, r0, #4
 8000c80:	4413      	add	r3, r2
 8000c82:	330b      	adds	r3, #11
 8000c84:	460a      	mov	r2, r1
 8000c86:	701a      	strb	r2, [r3, #0]
		buffer[ind].AccZ_H = RxData[5];
		buffer[ind].Temp_L = RxData[6];
		buffer[ind].Temp_H = RxData[7];
		ind++;
	}
}
 8000c88:	e072      	b.n	8000d70 <Get_Data+0x1c8>
	else if((RxHeader.StdId>>8) == 0x01){
 8000c8a:	4b3c      	ldr	r3, [pc, #240]	; (8000d7c <Get_Data+0x1d4>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	0a1b      	lsrs	r3, r3, #8
 8000c90:	2b01      	cmp	r3, #1
 8000c92:	d16d      	bne.n	8000d70 <Get_Data+0x1c8>
		buffer[ind].Header_H = ((uint8_t)RxHeader.StdId & 0x1F)<<1;
 8000c94:	4b39      	ldr	r3, [pc, #228]	; (8000d7c <Get_Data+0x1d4>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	b2db      	uxtb	r3, r3
 8000c9a:	005b      	lsls	r3, r3, #1
 8000c9c:	b2db      	uxtb	r3, r3
 8000c9e:	4a38      	ldr	r2, [pc, #224]	; (8000d80 <Get_Data+0x1d8>)
 8000ca0:	7812      	ldrb	r2, [r2, #0]
 8000ca2:	4610      	mov	r0, r2
 8000ca4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8000ca8:	b2d9      	uxtb	r1, r3
 8000caa:	4a36      	ldr	r2, [pc, #216]	; (8000d84 <Get_Data+0x1dc>)
 8000cac:	0103      	lsls	r3, r0, #4
 8000cae:	4413      	add	r3, r2
 8000cb0:	460a      	mov	r2, r1
 8000cb2:	701a      	strb	r2, [r3, #0]
		buffer[ind].AccX_L = RxData[0];
 8000cb4:	4b32      	ldr	r3, [pc, #200]	; (8000d80 <Get_Data+0x1d8>)
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	4618      	mov	r0, r3
 8000cba:	4b33      	ldr	r3, [pc, #204]	; (8000d88 <Get_Data+0x1e0>)
 8000cbc:	7819      	ldrb	r1, [r3, #0]
 8000cbe:	4a31      	ldr	r2, [pc, #196]	; (8000d84 <Get_Data+0x1dc>)
 8000cc0:	0103      	lsls	r3, r0, #4
 8000cc2:	4413      	add	r3, r2
 8000cc4:	3304      	adds	r3, #4
 8000cc6:	460a      	mov	r2, r1
 8000cc8:	701a      	strb	r2, [r3, #0]
		buffer[ind].AccX_H = RxData[1];
 8000cca:	4b2d      	ldr	r3, [pc, #180]	; (8000d80 <Get_Data+0x1d8>)
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	4618      	mov	r0, r3
 8000cd0:	4b2d      	ldr	r3, [pc, #180]	; (8000d88 <Get_Data+0x1e0>)
 8000cd2:	7859      	ldrb	r1, [r3, #1]
 8000cd4:	4a2b      	ldr	r2, [pc, #172]	; (8000d84 <Get_Data+0x1dc>)
 8000cd6:	0103      	lsls	r3, r0, #4
 8000cd8:	4413      	add	r3, r2
 8000cda:	3303      	adds	r3, #3
 8000cdc:	460a      	mov	r2, r1
 8000cde:	701a      	strb	r2, [r3, #0]
		buffer[ind].AccY_L = RxData[2];
 8000ce0:	4b27      	ldr	r3, [pc, #156]	; (8000d80 <Get_Data+0x1d8>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	4b28      	ldr	r3, [pc, #160]	; (8000d88 <Get_Data+0x1e0>)
 8000ce8:	7899      	ldrb	r1, [r3, #2]
 8000cea:	4a26      	ldr	r2, [pc, #152]	; (8000d84 <Get_Data+0x1dc>)
 8000cec:	0103      	lsls	r3, r0, #4
 8000cee:	4413      	add	r3, r2
 8000cf0:	3306      	adds	r3, #6
 8000cf2:	460a      	mov	r2, r1
 8000cf4:	701a      	strb	r2, [r3, #0]
		buffer[ind].AccY_H = RxData[3];
 8000cf6:	4b22      	ldr	r3, [pc, #136]	; (8000d80 <Get_Data+0x1d8>)
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	4b22      	ldr	r3, [pc, #136]	; (8000d88 <Get_Data+0x1e0>)
 8000cfe:	78d9      	ldrb	r1, [r3, #3]
 8000d00:	4a20      	ldr	r2, [pc, #128]	; (8000d84 <Get_Data+0x1dc>)
 8000d02:	0103      	lsls	r3, r0, #4
 8000d04:	4413      	add	r3, r2
 8000d06:	3305      	adds	r3, #5
 8000d08:	460a      	mov	r2, r1
 8000d0a:	701a      	strb	r2, [r3, #0]
		buffer[ind].AccZ_L = RxData[4];
 8000d0c:	4b1c      	ldr	r3, [pc, #112]	; (8000d80 <Get_Data+0x1d8>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	4618      	mov	r0, r3
 8000d12:	4b1d      	ldr	r3, [pc, #116]	; (8000d88 <Get_Data+0x1e0>)
 8000d14:	7919      	ldrb	r1, [r3, #4]
 8000d16:	4a1b      	ldr	r2, [pc, #108]	; (8000d84 <Get_Data+0x1dc>)
 8000d18:	0103      	lsls	r3, r0, #4
 8000d1a:	4413      	add	r3, r2
 8000d1c:	3308      	adds	r3, #8
 8000d1e:	460a      	mov	r2, r1
 8000d20:	701a      	strb	r2, [r3, #0]
		buffer[ind].AccZ_H = RxData[5];
 8000d22:	4b17      	ldr	r3, [pc, #92]	; (8000d80 <Get_Data+0x1d8>)
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	4618      	mov	r0, r3
 8000d28:	4b17      	ldr	r3, [pc, #92]	; (8000d88 <Get_Data+0x1e0>)
 8000d2a:	7959      	ldrb	r1, [r3, #5]
 8000d2c:	4a15      	ldr	r2, [pc, #84]	; (8000d84 <Get_Data+0x1dc>)
 8000d2e:	0103      	lsls	r3, r0, #4
 8000d30:	4413      	add	r3, r2
 8000d32:	3307      	adds	r3, #7
 8000d34:	460a      	mov	r2, r1
 8000d36:	701a      	strb	r2, [r3, #0]
		buffer[ind].Temp_L = RxData[6];
 8000d38:	4b11      	ldr	r3, [pc, #68]	; (8000d80 <Get_Data+0x1d8>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	4b12      	ldr	r3, [pc, #72]	; (8000d88 <Get_Data+0x1e0>)
 8000d40:	7999      	ldrb	r1, [r3, #6]
 8000d42:	4a10      	ldr	r2, [pc, #64]	; (8000d84 <Get_Data+0x1dc>)
 8000d44:	0103      	lsls	r3, r0, #4
 8000d46:	4413      	add	r3, r2
 8000d48:	330e      	adds	r3, #14
 8000d4a:	460a      	mov	r2, r1
 8000d4c:	701a      	strb	r2, [r3, #0]
		buffer[ind].Temp_H = RxData[7];
 8000d4e:	4b0c      	ldr	r3, [pc, #48]	; (8000d80 <Get_Data+0x1d8>)
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	4618      	mov	r0, r3
 8000d54:	4b0c      	ldr	r3, [pc, #48]	; (8000d88 <Get_Data+0x1e0>)
 8000d56:	79d9      	ldrb	r1, [r3, #7]
 8000d58:	4a0a      	ldr	r2, [pc, #40]	; (8000d84 <Get_Data+0x1dc>)
 8000d5a:	0103      	lsls	r3, r0, #4
 8000d5c:	4413      	add	r3, r2
 8000d5e:	330d      	adds	r3, #13
 8000d60:	460a      	mov	r2, r1
 8000d62:	701a      	strb	r2, [r3, #0]
		ind++;
 8000d64:	4b06      	ldr	r3, [pc, #24]	; (8000d80 <Get_Data+0x1d8>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	3301      	adds	r3, #1
 8000d6a:	b2da      	uxtb	r2, r3
 8000d6c:	4b04      	ldr	r3, [pc, #16]	; (8000d80 <Get_Data+0x1d8>)
 8000d6e:	701a      	strb	r2, [r3, #0]
}
 8000d70:	bf00      	nop
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	20007304 	.word	0x20007304
 8000d80:	2000020c 	.word	0x2000020c
 8000d84:	20005d30 	.word	0x20005d30
 8000d88:	20007018 	.word	0x20007018

08000d8c <CAN_Config>:

void CAN_Config(void){
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
	TxHeader.StdId = 0x01;
 8000d90:	4b16      	ldr	r3, [pc, #88]	; (8000dec <CAN_Config+0x60>)
 8000d92:	2201      	movs	r2, #1
 8000d94:	601a      	str	r2, [r3, #0]
	TxHeader.ExtId = 0x01;
 8000d96:	4b15      	ldr	r3, [pc, #84]	; (8000dec <CAN_Config+0x60>)
 8000d98:	2201      	movs	r2, #1
 8000d9a:	605a      	str	r2, [r3, #4]
	TxHeader.RTR = CAN_RTR_DATA;
 8000d9c:	4b13      	ldr	r3, [pc, #76]	; (8000dec <CAN_Config+0x60>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	60da      	str	r2, [r3, #12]
	TxHeader.IDE = CAN_ID_EXT;
 8000da2:	4b12      	ldr	r3, [pc, #72]	; (8000dec <CAN_Config+0x60>)
 8000da4:	2204      	movs	r2, #4
 8000da6:	609a      	str	r2, [r3, #8]
	TxHeader.DLC = 8;
 8000da8:	4b10      	ldr	r3, [pc, #64]	; (8000dec <CAN_Config+0x60>)
 8000daa:	2208      	movs	r2, #8
 8000dac:	611a      	str	r2, [r3, #16]
	TxHeader.TransmitGlobalTime = DISABLE;
 8000dae:	4b0f      	ldr	r3, [pc, #60]	; (8000dec <CAN_Config+0x60>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	751a      	strb	r2, [r3, #20]
	sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000db4:	4b0e      	ldr	r3, [pc, #56]	; (8000df0 <CAN_Config+0x64>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterIdHigh = 0x0;
 8000dba:	4b0d      	ldr	r3, [pc, #52]	; (8000df0 <CAN_Config+0x64>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIdLow = 0;
 8000dc0:	4b0b      	ldr	r3, [pc, #44]	; (8000df0 <CAN_Config+0x64>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterMaskIdHigh = 0x0;
 8000dc6:	4b0a      	ldr	r3, [pc, #40]	; (8000df0 <CAN_Config+0x64>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow = 0;
 8000dcc:	4b08      	ldr	r3, [pc, #32]	; (8000df0 <CAN_Config+0x64>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000dd2:	4b07      	ldr	r3, [pc, #28]	; (8000df0 <CAN_Config+0x64>)
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	61da      	str	r2, [r3, #28]
	sFilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 8000dd8:	4b05      	ldr	r3, [pc, #20]	; (8000df0 <CAN_Config+0x64>)
 8000dda:	2201      	movs	r2, #1
 8000ddc:	621a      	str	r2, [r3, #32]
	HAL_CAN_ConfigFilter(&hcan1,&sFilterConfig);
 8000dde:	4904      	ldr	r1, [pc, #16]	; (8000df0 <CAN_Config+0x64>)
 8000de0:	4804      	ldr	r0, [pc, #16]	; (8000df4 <CAN_Config+0x68>)
 8000de2:	f000 fcf3 	bl	80017cc <HAL_CAN_ConfigFilter>
}
 8000de6:	bf00      	nop
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	2000708c 	.word	0x2000708c
 8000df0:	20004be0 	.word	0x20004be0
 8000df4:	20007020 	.word	0x20007020

08000df8 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  //MX_USB_DEVICE_Init();
  /* USER CODE BEGIN 5 */
	// Mount filesystem only one time
	if(flag == 0){
 8000e00:	4b3f      	ldr	r3, [pc, #252]	; (8000f00 <StartDefaultTask+0x108>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d128      	bne.n	8000e5a <StartDefaultTask+0x62>


		res = f_mount(&SDFatFs, SDPath, 1);
 8000e08:	2201      	movs	r2, #1
 8000e0a:	493e      	ldr	r1, [pc, #248]	; (8000f04 <StartDefaultTask+0x10c>)
 8000e0c:	483e      	ldr	r0, [pc, #248]	; (8000f08 <StartDefaultTask+0x110>)
 8000e0e:	f00f fd35 	bl	801087c <f_mount>
 8000e12:	4603      	mov	r3, r0
 8000e14:	461a      	mov	r2, r3
 8000e16:	4b3d      	ldr	r3, [pc, #244]	; (8000f0c <StartDefaultTask+0x114>)
 8000e18:	701a      	strb	r2, [r3, #0]
		res = f_open(&SDFile, &path[0], FA_CREATE_ALWAYS);
 8000e1a:	2208      	movs	r2, #8
 8000e1c:	493c      	ldr	r1, [pc, #240]	; (8000f10 <StartDefaultTask+0x118>)
 8000e1e:	483d      	ldr	r0, [pc, #244]	; (8000f14 <StartDefaultTask+0x11c>)
 8000e20:	f00f fd90 	bl	8010944 <f_open>
 8000e24:	4603      	mov	r3, r0
 8000e26:	461a      	mov	r2, r3
 8000e28:	4b38      	ldr	r3, [pc, #224]	; (8000f0c <StartDefaultTask+0x114>)
 8000e2a:	701a      	strb	r2, [r3, #0]
		res = f_close(&SDFile);
 8000e2c:	4839      	ldr	r0, [pc, #228]	; (8000f14 <StartDefaultTask+0x11c>)
 8000e2e:	f010 fbb1 	bl	8011594 <f_close>
 8000e32:	4603      	mov	r3, r0
 8000e34:	461a      	mov	r2, r3
 8000e36:	4b35      	ldr	r3, [pc, #212]	; (8000f0c <StartDefaultTask+0x114>)
 8000e38:	701a      	strb	r2, [r3, #0]
		res = f_open(&SDFile, &path[0], FA_OPEN_APPEND | FA_WRITE);
 8000e3a:	2232      	movs	r2, #50	; 0x32
 8000e3c:	4934      	ldr	r1, [pc, #208]	; (8000f10 <StartDefaultTask+0x118>)
 8000e3e:	4835      	ldr	r0, [pc, #212]	; (8000f14 <StartDefaultTask+0x11c>)
 8000e40:	f00f fd80 	bl	8010944 <f_open>
 8000e44:	4603      	mov	r3, r0
 8000e46:	461a      	mov	r2, r3
 8000e48:	4b30      	ldr	r3, [pc, #192]	; (8000f0c <StartDefaultTask+0x114>)
 8000e4a:	701a      	strb	r2, [r3, #0]
		flag = 1;
 8000e4c:	4b2c      	ldr	r3, [pc, #176]	; (8000f00 <StartDefaultTask+0x108>)
 8000e4e:	2201      	movs	r2, #1
 8000e50:	701a      	strb	r2, [r3, #0]


		// Start 5mS timer to trigger the data request
		HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000e52:	2102      	movs	r1, #2
 8000e54:	4830      	ldr	r0, [pc, #192]	; (8000f18 <StartDefaultTask+0x120>)
 8000e56:	f000 fefb 	bl	8001c50 <HAL_CAN_ActivateNotification>
		//HAL_TIM_Base_Start_IT(&htim14);
	}
  /* Infinite loop */
  for(;;)
  {
	if(HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin) == GPIO_PIN_SET){
 8000e5a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e5e:	482f      	ldr	r0, [pc, #188]	; (8000f1c <StartDefaultTask+0x124>)
 8000e60:	f001 ff9c 	bl	8002d9c <HAL_GPIO_ReadPin>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b01      	cmp	r3, #1
 8000e68:	d121      	bne.n	8000eae <StartDefaultTask+0xb6>
		HAL_CAN_DeactivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000e6a:	2102      	movs	r1, #2
 8000e6c:	482a      	ldr	r0, [pc, #168]	; (8000f18 <StartDefaultTask+0x120>)
 8000e6e:	f000 ff15 	bl	8001c9c <HAL_CAN_DeactivateNotification>
		//HAL_TIM_Base_Stop_IT(&htim14);
		res = f_close(&SDFile);
 8000e72:	4828      	ldr	r0, [pc, #160]	; (8000f14 <StartDefaultTask+0x11c>)
 8000e74:	f010 fb8e 	bl	8011594 <f_close>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	461a      	mov	r2, r3
 8000e7c:	4b23      	ldr	r3, [pc, #140]	; (8000f0c <StartDefaultTask+0x114>)
 8000e7e:	701a      	strb	r2, [r3, #0]
		res = f_mount(NULL, SDPath, 1);
 8000e80:	2201      	movs	r2, #1
 8000e82:	4920      	ldr	r1, [pc, #128]	; (8000f04 <StartDefaultTask+0x10c>)
 8000e84:	2000      	movs	r0, #0
 8000e86:	f00f fcf9 	bl	801087c <f_mount>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	4b1f      	ldr	r3, [pc, #124]	; (8000f0c <StartDefaultTask+0x114>)
 8000e90:	701a      	strb	r2, [r3, #0]
		//NVIC_DisableIRQ(OTG_FS_IRQn);


		osDelay(10);
 8000e92:	200a      	movs	r0, #10
 8000e94:	f010 fe90 	bl	8011bb8 <osDelay>
		MX_USB_DEVICE_Init();
 8000e98:	f014 fa50 	bl	801533c <MX_USB_DEVICE_Init>
		NVIC_EnableIRQ(OTG_FS_IRQn);
 8000e9c:	2043      	movs	r0, #67	; 0x43
 8000e9e:	f7ff fb4f 	bl	8000540 <__NVIC_EnableIRQ>

		//vPortEndScheduler();
		//NVIC_EnableIRQ(OTG_FS_IRQn);
		HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_SET);
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	2180      	movs	r1, #128	; 0x80
 8000ea6:	481e      	ldr	r0, [pc, #120]	; (8000f20 <StartDefaultTask+0x128>)
 8000ea8:	f001 ff90 	bl	8002dcc <HAL_GPIO_WritePin>
 8000eac:	e7d5      	b.n	8000e5a <StartDefaultTask+0x62>
	}
	else{
		// Test if the data is ready to be written
		if(wf != 0){
 8000eae:	4b1d      	ldr	r3, [pc, #116]	; (8000f24 <StartDefaultTask+0x12c>)
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d0d1      	beq.n	8000e5a <StartDefaultTask+0x62>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ebc:	4818      	ldr	r0, [pc, #96]	; (8000f20 <StartDefaultTask+0x128>)
 8000ebe:	f001 ff85 	bl	8002dcc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	2101      	movs	r1, #1
 8000ec6:	4816      	ldr	r0, [pc, #88]	; (8000f20 <StartDefaultTask+0x128>)
 8000ec8:	f001 ff80 	bl	8002dcc <HAL_GPIO_WritePin>
			// Write the buffer to the memory
			res = f_write(&SDFile, SD_buffer, sizeof(SD_buffer), &writeBuff);
 8000ecc:	4b16      	ldr	r3, [pc, #88]	; (8000f28 <StartDefaultTask+0x130>)
 8000ece:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ed2:	4916      	ldr	r1, [pc, #88]	; (8000f2c <StartDefaultTask+0x134>)
 8000ed4:	480f      	ldr	r0, [pc, #60]	; (8000f14 <StartDefaultTask+0x11c>)
 8000ed6:	f010 f811 	bl	8010efc <f_write>
 8000eda:	4603      	mov	r3, r0
 8000edc:	461a      	mov	r2, r3
 8000ede:	4b0b      	ldr	r3, [pc, #44]	; (8000f0c <StartDefaultTask+0x114>)
 8000ee0:	701a      	strb	r2, [r3, #0]
			wf = 0;
 8000ee2:	4b10      	ldr	r3, [pc, #64]	; (8000f24 <StartDefaultTask+0x12c>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8000ee8:	2200      	movs	r2, #0
 8000eea:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000eee:	480c      	ldr	r0, [pc, #48]	; (8000f20 <StartDefaultTask+0x128>)
 8000ef0:	f001 ff6c 	bl	8002dcc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET);
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	2101      	movs	r1, #1
 8000ef8:	4809      	ldr	r0, [pc, #36]	; (8000f20 <StartDefaultTask+0x128>)
 8000efa:	f001 ff67 	bl	8002dcc <HAL_GPIO_WritePin>
	if(HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin) == GPIO_PIN_SET){
 8000efe:	e7ac      	b.n	8000e5a <StartDefaultTask+0x62>
 8000f00:	2000020d 	.word	0x2000020d
 8000f04:	2000736c 	.word	0x2000736c
 8000f08:	20005f30 	.word	0x20005f30
 8000f0c:	20007088 	.word	0x20007088
 8000f10:	20000000 	.word	0x20000000
 8000f14:	20007370 	.word	0x20007370
 8000f18:	20007020 	.word	0x20007020
 8000f1c:	40020800 	.word	0x40020800
 8000f20:	40020400 	.word	0x40020400
 8000f24:	2000020e 	.word	0x2000020e
 8000f28:	20007320 	.word	0x20007320
 8000f2c:	20007104 	.word	0x20007104

08000f30 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a04      	ldr	r2, [pc, #16]	; (8000f50 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d101      	bne.n	8000f46 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000f42:	f000 fb05 	bl	8001550 <HAL_IncTick>
		  // Listen can bus interrupt
		  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
	  }
  }*/
  /* USER CODE END Callback 1 */
}
 8000f46:	bf00      	nop
 8000f48:	3708      	adds	r7, #8
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	40001000 	.word	0x40001000

08000f54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	while(1){
		HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
 8000f58:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f5c:	4803      	ldr	r0, [pc, #12]	; (8000f6c <Error_Handler+0x18>)
 8000f5e:	f001 ff4e 	bl	8002dfe <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8000f62:	2064      	movs	r0, #100	; 0x64
 8000f64:	f000 fb14 	bl	8001590 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
 8000f68:	e7f6      	b.n	8000f58 <Error_Handler+0x4>
 8000f6a:	bf00      	nop
 8000f6c:	40020400 	.word	0x40020400

08000f70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000f76:	4b11      	ldr	r3, [pc, #68]	; (8000fbc <HAL_MspInit+0x4c>)
 8000f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7a:	4a10      	ldr	r2, [pc, #64]	; (8000fbc <HAL_MspInit+0x4c>)
 8000f7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f80:	6413      	str	r3, [r2, #64]	; 0x40
 8000f82:	4b0e      	ldr	r3, [pc, #56]	; (8000fbc <HAL_MspInit+0x4c>)
 8000f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f8a:	607b      	str	r3, [r7, #4]
 8000f8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f8e:	4b0b      	ldr	r3, [pc, #44]	; (8000fbc <HAL_MspInit+0x4c>)
 8000f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f92:	4a0a      	ldr	r2, [pc, #40]	; (8000fbc <HAL_MspInit+0x4c>)
 8000f94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f98:	6453      	str	r3, [r2, #68]	; 0x44
 8000f9a:	4b08      	ldr	r3, [pc, #32]	; (8000fbc <HAL_MspInit+0x4c>)
 8000f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fa2:	603b      	str	r3, [r7, #0]
 8000fa4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	210f      	movs	r1, #15
 8000faa:	f06f 0001 	mvn.w	r0, #1
 8000fae:	f001 f97d 	bl	80022ac <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fb2:	bf00      	nop
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	40023800 	.word	0x40023800

08000fc0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b08a      	sub	sp, #40	; 0x28
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc8:	f107 0314 	add.w	r3, r7, #20
 8000fcc:	2200      	movs	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	605a      	str	r2, [r3, #4]
 8000fd2:	609a      	str	r2, [r3, #8]
 8000fd4:	60da      	str	r2, [r3, #12]
 8000fd6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a17      	ldr	r2, [pc, #92]	; (800103c <HAL_CAN_MspInit+0x7c>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d127      	bne.n	8001032 <HAL_CAN_MspInit+0x72>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000fe2:	4b17      	ldr	r3, [pc, #92]	; (8001040 <HAL_CAN_MspInit+0x80>)
 8000fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe6:	4a16      	ldr	r2, [pc, #88]	; (8001040 <HAL_CAN_MspInit+0x80>)
 8000fe8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000fec:	6413      	str	r3, [r2, #64]	; 0x40
 8000fee:	4b14      	ldr	r3, [pc, #80]	; (8001040 <HAL_CAN_MspInit+0x80>)
 8000ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ff6:	613b      	str	r3, [r7, #16]
 8000ff8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ffa:	4b11      	ldr	r3, [pc, #68]	; (8001040 <HAL_CAN_MspInit+0x80>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffe:	4a10      	ldr	r2, [pc, #64]	; (8001040 <HAL_CAN_MspInit+0x80>)
 8001000:	f043 0308 	orr.w	r3, r3, #8
 8001004:	6313      	str	r3, [r2, #48]	; 0x30
 8001006:	4b0e      	ldr	r3, [pc, #56]	; (8001040 <HAL_CAN_MspInit+0x80>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100a:	f003 0308 	and.w	r3, r3, #8
 800100e:	60fb      	str	r3, [r7, #12]
 8001010:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001012:	2303      	movs	r3, #3
 8001014:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001016:	2302      	movs	r3, #2
 8001018:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101a:	2300      	movs	r3, #0
 800101c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800101e:	2303      	movs	r3, #3
 8001020:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001022:	2309      	movs	r3, #9
 8001024:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001026:	f107 0314 	add.w	r3, r7, #20
 800102a:	4619      	mov	r1, r3
 800102c:	4805      	ldr	r0, [pc, #20]	; (8001044 <HAL_CAN_MspInit+0x84>)
 800102e:	f001 fd0b 	bl	8002a48 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001032:	bf00      	nop
 8001034:	3728      	adds	r7, #40	; 0x28
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	40006400 	.word	0x40006400
 8001040:	40023800 	.word	0x40023800
 8001044:	40020c00 	.word	0x40020c00

08001048 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b08a      	sub	sp, #40	; 0x28
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001050:	f107 0314 	add.w	r3, r7, #20
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
 8001058:	605a      	str	r2, [r3, #4]
 800105a:	609a      	str	r2, [r3, #8]
 800105c:	60da      	str	r2, [r3, #12]
 800105e:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a65      	ldr	r2, [pc, #404]	; (80011fc <HAL_SD_MspInit+0x1b4>)
 8001066:	4293      	cmp	r3, r2
 8001068:	f040 80c3 	bne.w	80011f2 <HAL_SD_MspInit+0x1aa>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800106c:	4b64      	ldr	r3, [pc, #400]	; (8001200 <HAL_SD_MspInit+0x1b8>)
 800106e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001070:	4a63      	ldr	r2, [pc, #396]	; (8001200 <HAL_SD_MspInit+0x1b8>)
 8001072:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001076:	6453      	str	r3, [r2, #68]	; 0x44
 8001078:	4b61      	ldr	r3, [pc, #388]	; (8001200 <HAL_SD_MspInit+0x1b8>)
 800107a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800107c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001080:	613b      	str	r3, [r7, #16]
 8001082:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001084:	4b5e      	ldr	r3, [pc, #376]	; (8001200 <HAL_SD_MspInit+0x1b8>)
 8001086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001088:	4a5d      	ldr	r2, [pc, #372]	; (8001200 <HAL_SD_MspInit+0x1b8>)
 800108a:	f043 0304 	orr.w	r3, r3, #4
 800108e:	6313      	str	r3, [r2, #48]	; 0x30
 8001090:	4b5b      	ldr	r3, [pc, #364]	; (8001200 <HAL_SD_MspInit+0x1b8>)
 8001092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001094:	f003 0304 	and.w	r3, r3, #4
 8001098:	60fb      	str	r3, [r7, #12]
 800109a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800109c:	4b58      	ldr	r3, [pc, #352]	; (8001200 <HAL_SD_MspInit+0x1b8>)
 800109e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a0:	4a57      	ldr	r2, [pc, #348]	; (8001200 <HAL_SD_MspInit+0x1b8>)
 80010a2:	f043 0308 	orr.w	r3, r3, #8
 80010a6:	6313      	str	r3, [r2, #48]	; 0x30
 80010a8:	4b55      	ldr	r3, [pc, #340]	; (8001200 <HAL_SD_MspInit+0x1b8>)
 80010aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ac:	f003 0308 	and.w	r3, r3, #8
 80010b0:	60bb      	str	r3, [r7, #8]
 80010b2:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 80010b4:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80010b8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ba:	2302      	movs	r3, #2
 80010bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010be:	2300      	movs	r3, #0
 80010c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010c2:	2303      	movs	r3, #3
 80010c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80010c6:	230c      	movs	r3, #12
 80010c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010ca:	f107 0314 	add.w	r3, r7, #20
 80010ce:	4619      	mov	r1, r3
 80010d0:	484c      	ldr	r0, [pc, #304]	; (8001204 <HAL_SD_MspInit+0x1bc>)
 80010d2:	f001 fcb9 	bl	8002a48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80010d6:	2304      	movs	r3, #4
 80010d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010da:	2302      	movs	r3, #2
 80010dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010de:	2300      	movs	r3, #0
 80010e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010e2:	2303      	movs	r3, #3
 80010e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80010e6:	230c      	movs	r3, #12
 80010e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010ea:	f107 0314 	add.w	r3, r7, #20
 80010ee:	4619      	mov	r1, r3
 80010f0:	4845      	ldr	r0, [pc, #276]	; (8001208 <HAL_SD_MspInit+0x1c0>)
 80010f2:	f001 fca9 	bl	8002a48 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream3;
 80010f6:	4b45      	ldr	r3, [pc, #276]	; (800120c <HAL_SD_MspInit+0x1c4>)
 80010f8:	4a45      	ldr	r2, [pc, #276]	; (8001210 <HAL_SD_MspInit+0x1c8>)
 80010fa:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 80010fc:	4b43      	ldr	r3, [pc, #268]	; (800120c <HAL_SD_MspInit+0x1c4>)
 80010fe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001102:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001104:	4b41      	ldr	r3, [pc, #260]	; (800120c <HAL_SD_MspInit+0x1c4>)
 8001106:	2240      	movs	r2, #64	; 0x40
 8001108:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800110a:	4b40      	ldr	r3, [pc, #256]	; (800120c <HAL_SD_MspInit+0x1c4>)
 800110c:	2200      	movs	r2, #0
 800110e:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001110:	4b3e      	ldr	r3, [pc, #248]	; (800120c <HAL_SD_MspInit+0x1c4>)
 8001112:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001116:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001118:	4b3c      	ldr	r3, [pc, #240]	; (800120c <HAL_SD_MspInit+0x1c4>)
 800111a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800111e:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001120:	4b3a      	ldr	r3, [pc, #232]	; (800120c <HAL_SD_MspInit+0x1c4>)
 8001122:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001126:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 8001128:	4b38      	ldr	r3, [pc, #224]	; (800120c <HAL_SD_MspInit+0x1c4>)
 800112a:	2220      	movs	r2, #32
 800112c:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800112e:	4b37      	ldr	r3, [pc, #220]	; (800120c <HAL_SD_MspInit+0x1c4>)
 8001130:	2200      	movs	r2, #0
 8001132:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001134:	4b35      	ldr	r3, [pc, #212]	; (800120c <HAL_SD_MspInit+0x1c4>)
 8001136:	2204      	movs	r2, #4
 8001138:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800113a:	4b34      	ldr	r3, [pc, #208]	; (800120c <HAL_SD_MspInit+0x1c4>)
 800113c:	2203      	movs	r2, #3
 800113e:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 8001140:	4b32      	ldr	r3, [pc, #200]	; (800120c <HAL_SD_MspInit+0x1c4>)
 8001142:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001146:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001148:	4b30      	ldr	r3, [pc, #192]	; (800120c <HAL_SD_MspInit+0x1c4>)
 800114a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800114e:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 8001150:	482e      	ldr	r0, [pc, #184]	; (800120c <HAL_SD_MspInit+0x1c4>)
 8001152:	f001 f8d5 	bl	8002300 <HAL_DMA_Init>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <HAL_SD_MspInit+0x118>
    {
      Error_Handler();
 800115c:	f7ff fefa 	bl	8000f54 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1_tx);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	4a2a      	ldr	r2, [pc, #168]	; (800120c <HAL_SD_MspInit+0x1c4>)
 8001164:	63da      	str	r2, [r3, #60]	; 0x3c
 8001166:	4a29      	ldr	r2, [pc, #164]	; (800120c <HAL_SD_MspInit+0x1c4>)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream6;
 800116c:	4b29      	ldr	r3, [pc, #164]	; (8001214 <HAL_SD_MspInit+0x1cc>)
 800116e:	4a2a      	ldr	r2, [pc, #168]	; (8001218 <HAL_SD_MspInit+0x1d0>)
 8001170:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 8001172:	4b28      	ldr	r3, [pc, #160]	; (8001214 <HAL_SD_MspInit+0x1cc>)
 8001174:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001178:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800117a:	4b26      	ldr	r3, [pc, #152]	; (8001214 <HAL_SD_MspInit+0x1cc>)
 800117c:	2200      	movs	r2, #0
 800117e:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001180:	4b24      	ldr	r3, [pc, #144]	; (8001214 <HAL_SD_MspInit+0x1cc>)
 8001182:	2200      	movs	r2, #0
 8001184:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001186:	4b23      	ldr	r3, [pc, #140]	; (8001214 <HAL_SD_MspInit+0x1cc>)
 8001188:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800118c:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800118e:	4b21      	ldr	r3, [pc, #132]	; (8001214 <HAL_SD_MspInit+0x1cc>)
 8001190:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001194:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001196:	4b1f      	ldr	r3, [pc, #124]	; (8001214 <HAL_SD_MspInit+0x1cc>)
 8001198:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800119c:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 800119e:	4b1d      	ldr	r3, [pc, #116]	; (8001214 <HAL_SD_MspInit+0x1cc>)
 80011a0:	2220      	movs	r2, #32
 80011a2:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80011a4:	4b1b      	ldr	r3, [pc, #108]	; (8001214 <HAL_SD_MspInit+0x1cc>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80011aa:	4b1a      	ldr	r3, [pc, #104]	; (8001214 <HAL_SD_MspInit+0x1cc>)
 80011ac:	2204      	movs	r2, #4
 80011ae:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80011b0:	4b18      	ldr	r3, [pc, #96]	; (8001214 <HAL_SD_MspInit+0x1cc>)
 80011b2:	2203      	movs	r2, #3
 80011b4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 80011b6:	4b17      	ldr	r3, [pc, #92]	; (8001214 <HAL_SD_MspInit+0x1cc>)
 80011b8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80011bc:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80011be:	4b15      	ldr	r3, [pc, #84]	; (8001214 <HAL_SD_MspInit+0x1cc>)
 80011c0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80011c4:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 80011c6:	4813      	ldr	r0, [pc, #76]	; (8001214 <HAL_SD_MspInit+0x1cc>)
 80011c8:	f001 f89a 	bl	8002300 <HAL_DMA_Init>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <HAL_SD_MspInit+0x18e>
    {
      Error_Handler();
 80011d2:	f7ff febf 	bl	8000f54 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1_rx);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	4a0e      	ldr	r2, [pc, #56]	; (8001214 <HAL_SD_MspInit+0x1cc>)
 80011da:	641a      	str	r2, [r3, #64]	; 0x40
 80011dc:	4a0d      	ldr	r2, [pc, #52]	; (8001214 <HAL_SD_MspInit+0x1cc>)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 8, 0);
 80011e2:	2200      	movs	r2, #0
 80011e4:	2108      	movs	r1, #8
 80011e6:	2031      	movs	r0, #49	; 0x31
 80011e8:	f001 f860 	bl	80022ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80011ec:	2031      	movs	r0, #49	; 0x31
 80011ee:	f001 f879 	bl	80022e4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80011f2:	bf00      	nop
 80011f4:	3728      	adds	r7, #40	; 0x28
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	40012c00 	.word	0x40012c00
 8001200:	40023800 	.word	0x40023800
 8001204:	40020800 	.word	0x40020800
 8001208:	40020c00 	.word	0x40020c00
 800120c:	200070a4 	.word	0x200070a4
 8001210:	40026458 	.word	0x40026458
 8001214:	20006f98 	.word	0x20006f98
 8001218:	400264a0 	.word	0x400264a0

0800121c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a0d      	ldr	r2, [pc, #52]	; (8001260 <HAL_TIM_Base_MspInit+0x44>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d113      	bne.n	8001256 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 800122e:	4b0d      	ldr	r3, [pc, #52]	; (8001264 <HAL_TIM_Base_MspInit+0x48>)
 8001230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001232:	4a0c      	ldr	r2, [pc, #48]	; (8001264 <HAL_TIM_Base_MspInit+0x48>)
 8001234:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001238:	6413      	str	r3, [r2, #64]	; 0x40
 800123a:	4b0a      	ldr	r3, [pc, #40]	; (8001264 <HAL_TIM_Base_MspInit+0x48>)
 800123c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001242:	60fb      	str	r3, [r7, #12]
 8001244:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 5, 0);
 8001246:	2200      	movs	r2, #0
 8001248:	2105      	movs	r1, #5
 800124a:	202d      	movs	r0, #45	; 0x2d
 800124c:	f001 f82e 	bl	80022ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001250:	202d      	movs	r0, #45	; 0x2d
 8001252:	f001 f847 	bl	80022e4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8001256:	bf00      	nop
 8001258:	3710      	adds	r7, #16
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	40002000 	.word	0x40002000
 8001264:	40023800 	.word	0x40023800

08001268 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b08a      	sub	sp, #40	; 0x28
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001270:	f107 0314 	add.w	r3, r7, #20
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
 8001278:	605a      	str	r2, [r3, #4]
 800127a:	609a      	str	r2, [r3, #8]
 800127c:	60da      	str	r2, [r3, #12]
 800127e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a17      	ldr	r2, [pc, #92]	; (80012e4 <HAL_UART_MspInit+0x7c>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d128      	bne.n	80012dc <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800128a:	4b17      	ldr	r3, [pc, #92]	; (80012e8 <HAL_UART_MspInit+0x80>)
 800128c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128e:	4a16      	ldr	r2, [pc, #88]	; (80012e8 <HAL_UART_MspInit+0x80>)
 8001290:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001294:	6413      	str	r3, [r2, #64]	; 0x40
 8001296:	4b14      	ldr	r3, [pc, #80]	; (80012e8 <HAL_UART_MspInit+0x80>)
 8001298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800129e:	613b      	str	r3, [r7, #16]
 80012a0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012a2:	4b11      	ldr	r3, [pc, #68]	; (80012e8 <HAL_UART_MspInit+0x80>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a6:	4a10      	ldr	r2, [pc, #64]	; (80012e8 <HAL_UART_MspInit+0x80>)
 80012a8:	f043 0308 	orr.w	r3, r3, #8
 80012ac:	6313      	str	r3, [r2, #48]	; 0x30
 80012ae:	4b0e      	ldr	r3, [pc, #56]	; (80012e8 <HAL_UART_MspInit+0x80>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b2:	f003 0308 	and.w	r3, r3, #8
 80012b6:	60fb      	str	r3, [r7, #12]
 80012b8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80012ba:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c0:	2302      	movs	r3, #2
 80012c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c4:	2300      	movs	r3, #0
 80012c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012c8:	2303      	movs	r3, #3
 80012ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80012cc:	2307      	movs	r3, #7
 80012ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012d0:	f107 0314 	add.w	r3, r7, #20
 80012d4:	4619      	mov	r1, r3
 80012d6:	4805      	ldr	r0, [pc, #20]	; (80012ec <HAL_UART_MspInit+0x84>)
 80012d8:	f001 fbb6 	bl	8002a48 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80012dc:	bf00      	nop
 80012de:	3728      	adds	r7, #40	; 0x28
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	40004800 	.word	0x40004800
 80012e8:	40023800 	.word	0x40023800
 80012ec:	40020c00 	.word	0x40020c00

080012f0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b08c      	sub	sp, #48	; 0x30
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80012f8:	2300      	movs	r3, #0
 80012fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80012fc:	2300      	movs	r3, #0
 80012fe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8001300:	2200      	movs	r2, #0
 8001302:	6879      	ldr	r1, [r7, #4]
 8001304:	2036      	movs	r0, #54	; 0x36
 8001306:	f000 ffd1 	bl	80022ac <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 800130a:	2036      	movs	r0, #54	; 0x36
 800130c:	f000 ffea 	bl	80022e4 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001310:	4b1f      	ldr	r3, [pc, #124]	; (8001390 <HAL_InitTick+0xa0>)
 8001312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001314:	4a1e      	ldr	r2, [pc, #120]	; (8001390 <HAL_InitTick+0xa0>)
 8001316:	f043 0310 	orr.w	r3, r3, #16
 800131a:	6413      	str	r3, [r2, #64]	; 0x40
 800131c:	4b1c      	ldr	r3, [pc, #112]	; (8001390 <HAL_InitTick+0xa0>)
 800131e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001320:	f003 0310 	and.w	r3, r3, #16
 8001324:	60fb      	str	r3, [r7, #12]
 8001326:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001328:	f107 0210 	add.w	r2, r7, #16
 800132c:	f107 0314 	add.w	r3, r7, #20
 8001330:	4611      	mov	r1, r2
 8001332:	4618      	mov	r0, r3
 8001334:	f003 fc6e 	bl	8004c14 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001338:	f003 fc44 	bl	8004bc4 <HAL_RCC_GetPCLK1Freq>
 800133c:	4603      	mov	r3, r0
 800133e:	005b      	lsls	r3, r3, #1
 8001340:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001344:	4a13      	ldr	r2, [pc, #76]	; (8001394 <HAL_InitTick+0xa4>)
 8001346:	fba2 2303 	umull	r2, r3, r2, r3
 800134a:	0c9b      	lsrs	r3, r3, #18
 800134c:	3b01      	subs	r3, #1
 800134e:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001350:	4b11      	ldr	r3, [pc, #68]	; (8001398 <HAL_InitTick+0xa8>)
 8001352:	4a12      	ldr	r2, [pc, #72]	; (800139c <HAL_InitTick+0xac>)
 8001354:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8001356:	4b10      	ldr	r3, [pc, #64]	; (8001398 <HAL_InitTick+0xa8>)
 8001358:	f240 32e7 	movw	r2, #999	; 0x3e7
 800135c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800135e:	4a0e      	ldr	r2, [pc, #56]	; (8001398 <HAL_InitTick+0xa8>)
 8001360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001362:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001364:	4b0c      	ldr	r3, [pc, #48]	; (8001398 <HAL_InitTick+0xa8>)
 8001366:	2200      	movs	r2, #0
 8001368:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800136a:	4b0b      	ldr	r3, [pc, #44]	; (8001398 <HAL_InitTick+0xa8>)
 800136c:	2200      	movs	r2, #0
 800136e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001370:	4809      	ldr	r0, [pc, #36]	; (8001398 <HAL_InitTick+0xa8>)
 8001372:	f005 ff35 	bl	80071e0 <HAL_TIM_Base_Init>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d104      	bne.n	8001386 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800137c:	4806      	ldr	r0, [pc, #24]	; (8001398 <HAL_InitTick+0xa8>)
 800137e:	f005 ff5b 	bl	8007238 <HAL_TIM_Base_Start_IT>
 8001382:	4603      	mov	r3, r0
 8001384:	e000      	b.n	8001388 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
}
 8001388:	4618      	mov	r0, r3
 800138a:	3730      	adds	r7, #48	; 0x30
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	40023800 	.word	0x40023800
 8001394:	431bde83 	.word	0x431bde83
 8001398:	20007324 	.word	0x20007324
 800139c:	40001000 	.word	0x40001000

080013a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80013a4:	bf00      	nop
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr

080013ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013ae:	b480      	push	{r7}
 80013b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013b2:	e7fe      	b.n	80013b2 <HardFault_Handler+0x4>

080013b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013b8:	e7fe      	b.n	80013b8 <MemManage_Handler+0x4>

080013ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013ba:	b480      	push	{r7}
 80013bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013be:	e7fe      	b.n	80013be <BusFault_Handler+0x4>

080013c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013c4:	e7fe      	b.n	80013c4 <UsageFault_Handler+0x4>

080013c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013c6:	b480      	push	{r7}
 80013c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013ca:	bf00      	nop
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr

080013d4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80013d8:	4802      	ldr	r0, [pc, #8]	; (80013e4 <CAN1_RX0_IRQHandler+0x10>)
 80013da:	f000 fc86 	bl	8001cea <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80013de:	bf00      	nop
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	20007020 	.word	0x20007020

080013e8 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80013ec:	4802      	ldr	r0, [pc, #8]	; (80013f8 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 80013ee:	f005 ff4d 	bl	800728c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80013f2:	bf00      	nop
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	20007048 	.word	0x20007048

080013fc <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8001400:	4802      	ldr	r0, [pc, #8]	; (800140c <SDMMC1_IRQHandler+0x10>)
 8001402:	f004 fe69 	bl	80060d8 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8001406:	bf00      	nop
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	20004c8c 	.word	0x20004c8c

08001410 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001414:	4802      	ldr	r0, [pc, #8]	; (8001420 <TIM6_DAC_IRQHandler+0x10>)
 8001416:	f005 ff39 	bl	800728c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800141a:	bf00      	nop
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	20007324 	.word	0x20007324

08001424 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 8001428:	4802      	ldr	r0, [pc, #8]	; (8001434 <DMA2_Stream3_IRQHandler+0x10>)
 800142a:	f001 f899 	bl	8002560 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800142e:	bf00      	nop
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	200070a4 	.word	0x200070a4

08001438 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800143c:	4802      	ldr	r0, [pc, #8]	; (8001448 <OTG_FS_IRQHandler+0x10>)
 800143e:	f001 fe3e 	bl	80030be <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001442:	bf00      	nop
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	20009918 	.word	0x20009918

0800144c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 8001450:	4802      	ldr	r0, [pc, #8]	; (800145c <DMA2_Stream6_IRQHandler+0x10>)
 8001452:	f001 f885 	bl	8002560 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001456:	bf00      	nop
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	20006f98 	.word	0x20006f98

08001460 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001468:	4b11      	ldr	r3, [pc, #68]	; (80014b0 <_sbrk+0x50>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d102      	bne.n	8001476 <_sbrk+0x16>
		heap_end = &end;
 8001470:	4b0f      	ldr	r3, [pc, #60]	; (80014b0 <_sbrk+0x50>)
 8001472:	4a10      	ldr	r2, [pc, #64]	; (80014b4 <_sbrk+0x54>)
 8001474:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001476:	4b0e      	ldr	r3, [pc, #56]	; (80014b0 <_sbrk+0x50>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800147c:	4b0c      	ldr	r3, [pc, #48]	; (80014b0 <_sbrk+0x50>)
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	4413      	add	r3, r2
 8001484:	466a      	mov	r2, sp
 8001486:	4293      	cmp	r3, r2
 8001488:	d907      	bls.n	800149a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800148a:	f014 fca3 	bl	8015dd4 <__errno>
 800148e:	4602      	mov	r2, r0
 8001490:	230c      	movs	r3, #12
 8001492:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001494:	f04f 33ff 	mov.w	r3, #4294967295
 8001498:	e006      	b.n	80014a8 <_sbrk+0x48>
	}

	heap_end += incr;
 800149a:	4b05      	ldr	r3, [pc, #20]	; (80014b0 <_sbrk+0x50>)
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4413      	add	r3, r2
 80014a2:	4a03      	ldr	r2, [pc, #12]	; (80014b0 <_sbrk+0x50>)
 80014a4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80014a6:	68fb      	ldr	r3, [r7, #12]
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	3710      	adds	r7, #16
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	20000210 	.word	0x20000210
 80014b4:	20009d20 	.word	0x20009d20

080014b8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014bc:	4b08      	ldr	r3, [pc, #32]	; (80014e0 <SystemInit+0x28>)
 80014be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014c2:	4a07      	ldr	r2, [pc, #28]	; (80014e0 <SystemInit+0x28>)
 80014c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80014cc:	4b04      	ldr	r3, [pc, #16]	; (80014e0 <SystemInit+0x28>)
 80014ce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014d2:	609a      	str	r2, [r3, #8]
#endif
}
 80014d4:	bf00      	nop
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	e000ed00 	.word	0xe000ed00

080014e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80014e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800151c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80014e8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80014ea:	e003      	b.n	80014f4 <LoopCopyDataInit>

080014ec <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80014ec:	4b0c      	ldr	r3, [pc, #48]	; (8001520 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80014ee:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80014f0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80014f2:	3104      	adds	r1, #4

080014f4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80014f4:	480b      	ldr	r0, [pc, #44]	; (8001524 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80014f6:	4b0c      	ldr	r3, [pc, #48]	; (8001528 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80014f8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80014fa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80014fc:	d3f6      	bcc.n	80014ec <CopyDataInit>
  ldr  r2, =_sbss
 80014fe:	4a0b      	ldr	r2, [pc, #44]	; (800152c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001500:	e002      	b.n	8001508 <LoopFillZerobss>

08001502 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001502:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001504:	f842 3b04 	str.w	r3, [r2], #4

08001508 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001508:	4b09      	ldr	r3, [pc, #36]	; (8001530 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800150a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800150c:	d3f9      	bcc.n	8001502 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800150e:	f7ff ffd3 	bl	80014b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001512:	f014 fc65 	bl	8015de0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001516:	f7ff f831 	bl	800057c <main>
  bx  lr    
 800151a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800151c:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8001520:	08016584 	.word	0x08016584
  ldr  r0, =_sdata
 8001524:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001528:	200001ec 	.word	0x200001ec
  ldr  r2, =_sbss
 800152c:	200001f0 	.word	0x200001f0
  ldr  r3, = _ebss
 8001530:	20009d20 	.word	0x20009d20

08001534 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001534:	e7fe      	b.n	8001534 <ADC_IRQHandler>

08001536 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001536:	b580      	push	{r7, lr}
 8001538:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800153a:	2003      	movs	r0, #3
 800153c:	f000 feab 	bl	8002296 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001540:	2000      	movs	r0, #0
 8001542:	f7ff fed5 	bl	80012f0 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001546:	f7ff fd13 	bl	8000f70 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800154a:	2300      	movs	r3, #0
}
 800154c:	4618      	mov	r0, r3
 800154e:	bd80      	pop	{r7, pc}

08001550 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001554:	4b06      	ldr	r3, [pc, #24]	; (8001570 <HAL_IncTick+0x20>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	461a      	mov	r2, r3
 800155a:	4b06      	ldr	r3, [pc, #24]	; (8001574 <HAL_IncTick+0x24>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4413      	add	r3, r2
 8001560:	4a04      	ldr	r2, [pc, #16]	; (8001574 <HAL_IncTick+0x24>)
 8001562:	6013      	str	r3, [r2, #0]
}
 8001564:	bf00      	nop
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	20000018 	.word	0x20000018
 8001574:	20007364 	.word	0x20007364

08001578 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  return uwTick;
 800157c:	4b03      	ldr	r3, [pc, #12]	; (800158c <HAL_GetTick+0x14>)
 800157e:	681b      	ldr	r3, [r3, #0]
}
 8001580:	4618      	mov	r0, r3
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	20007364 	.word	0x20007364

08001590 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001598:	f7ff ffee 	bl	8001578 <HAL_GetTick>
 800159c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015a8:	d005      	beq.n	80015b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015aa:	4b09      	ldr	r3, [pc, #36]	; (80015d0 <HAL_Delay+0x40>)
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	461a      	mov	r2, r3
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	4413      	add	r3, r2
 80015b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015b6:	bf00      	nop
 80015b8:	f7ff ffde 	bl	8001578 <HAL_GetTick>
 80015bc:	4602      	mov	r2, r0
 80015be:	68bb      	ldr	r3, [r7, #8]
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	68fa      	ldr	r2, [r7, #12]
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d8f7      	bhi.n	80015b8 <HAL_Delay+0x28>
  {
  }
}
 80015c8:	bf00      	nop
 80015ca:	3710      	adds	r7, #16
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	20000018 	.word	0x20000018

080015d4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b084      	sub	sp, #16
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d101      	bne.n	80015e6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e0ed      	b.n	80017c2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d102      	bne.n	80015f8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80015f2:	6878      	ldr	r0, [r7, #4]
 80015f4:	f7ff fce4 	bl	8000fc0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f022 0202 	bic.w	r2, r2, #2
 8001606:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001608:	f7ff ffb6 	bl	8001578 <HAL_GetTick>
 800160c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800160e:	e012      	b.n	8001636 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001610:	f7ff ffb2 	bl	8001578 <HAL_GetTick>
 8001614:	4602      	mov	r2, r0
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	2b0a      	cmp	r3, #10
 800161c:	d90b      	bls.n	8001636 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001622:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2205      	movs	r2, #5
 800162e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e0c5      	b.n	80017c2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f003 0302 	and.w	r3, r3, #2
 8001640:	2b00      	cmp	r3, #0
 8001642:	d1e5      	bne.n	8001610 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f042 0201 	orr.w	r2, r2, #1
 8001652:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001654:	f7ff ff90 	bl	8001578 <HAL_GetTick>
 8001658:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800165a:	e012      	b.n	8001682 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800165c:	f7ff ff8c 	bl	8001578 <HAL_GetTick>
 8001660:	4602      	mov	r2, r0
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	2b0a      	cmp	r3, #10
 8001668:	d90b      	bls.n	8001682 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800166e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2205      	movs	r2, #5
 800167a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e09f      	b.n	80017c2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f003 0301 	and.w	r3, r3, #1
 800168c:	2b00      	cmp	r3, #0
 800168e:	d0e5      	beq.n	800165c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	7e1b      	ldrb	r3, [r3, #24]
 8001694:	2b01      	cmp	r3, #1
 8001696:	d108      	bne.n	80016aa <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	e007      	b.n	80016ba <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80016b8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	7e5b      	ldrb	r3, [r3, #25]
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d108      	bne.n	80016d4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80016d0:	601a      	str	r2, [r3, #0]
 80016d2:	e007      	b.n	80016e4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80016e2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	7e9b      	ldrb	r3, [r3, #26]
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d108      	bne.n	80016fe <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f042 0220 	orr.w	r2, r2, #32
 80016fa:	601a      	str	r2, [r3, #0]
 80016fc:	e007      	b.n	800170e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f022 0220 	bic.w	r2, r2, #32
 800170c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	7edb      	ldrb	r3, [r3, #27]
 8001712:	2b01      	cmp	r3, #1
 8001714:	d108      	bne.n	8001728 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f022 0210 	bic.w	r2, r2, #16
 8001724:	601a      	str	r2, [r3, #0]
 8001726:	e007      	b.n	8001738 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f042 0210 	orr.w	r2, r2, #16
 8001736:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	7f1b      	ldrb	r3, [r3, #28]
 800173c:	2b01      	cmp	r3, #1
 800173e:	d108      	bne.n	8001752 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f042 0208 	orr.w	r2, r2, #8
 800174e:	601a      	str	r2, [r3, #0]
 8001750:	e007      	b.n	8001762 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f022 0208 	bic.w	r2, r2, #8
 8001760:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	7f5b      	ldrb	r3, [r3, #29]
 8001766:	2b01      	cmp	r3, #1
 8001768:	d108      	bne.n	800177c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f042 0204 	orr.w	r2, r2, #4
 8001778:	601a      	str	r2, [r3, #0]
 800177a:	e007      	b.n	800178c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f022 0204 	bic.w	r2, r2, #4
 800178a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	689a      	ldr	r2, [r3, #8]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	431a      	orrs	r2, r3
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	691b      	ldr	r3, [r3, #16]
 800179a:	431a      	orrs	r2, r3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	695b      	ldr	r3, [r3, #20]
 80017a0:	ea42 0103 	orr.w	r1, r2, r3
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	1e5a      	subs	r2, r3, #1
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	430a      	orrs	r2, r1
 80017b0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2200      	movs	r2, #0
 80017b6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2201      	movs	r2, #1
 80017bc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80017c0:	2300      	movs	r3, #0
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3710      	adds	r7, #16
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
	...

080017cc <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b087      	sub	sp, #28
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017e2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80017e4:	7cfb      	ldrb	r3, [r7, #19]
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d003      	beq.n	80017f2 <HAL_CAN_ConfigFilter+0x26>
 80017ea:	7cfb      	ldrb	r3, [r7, #19]
 80017ec:	2b02      	cmp	r3, #2
 80017ee:	f040 80c7 	bne.w	8001980 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a69      	ldr	r2, [pc, #420]	; (800199c <HAL_CAN_ConfigFilter+0x1d0>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d001      	beq.n	8001800 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 80017fc:	4b68      	ldr	r3, [pc, #416]	; (80019a0 <HAL_CAN_ConfigFilter+0x1d4>)
 80017fe:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001806:	f043 0201 	orr.w	r2, r3, #1
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	4a63      	ldr	r2, [pc, #396]	; (80019a0 <HAL_CAN_ConfigFilter+0x1d4>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d111      	bne.n	800183c <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800181e:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001832:	021b      	lsls	r3, r3, #8
 8001834:	431a      	orrs	r2, r3
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	695b      	ldr	r3, [r3, #20]
 8001840:	f003 031f 	and.w	r3, r3, #31
 8001844:	2201      	movs	r2, #1
 8001846:	fa02 f303 	lsl.w	r3, r2, r3
 800184a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	43db      	mvns	r3, r3
 8001856:	401a      	ands	r2, r3
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	69db      	ldr	r3, [r3, #28]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d123      	bne.n	80018ae <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	43db      	mvns	r3, r3
 8001870:	401a      	ands	r2, r3
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001884:	683a      	ldr	r2, [r7, #0]
 8001886:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001888:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	3248      	adds	r2, #72	; 0x48
 800188e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80018a2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80018a4:	6979      	ldr	r1, [r7, #20]
 80018a6:	3348      	adds	r3, #72	; 0x48
 80018a8:	00db      	lsls	r3, r3, #3
 80018aa:	440b      	add	r3, r1
 80018ac:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	69db      	ldr	r3, [r3, #28]
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d122      	bne.n	80018fc <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	431a      	orrs	r2, r3
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80018d2:	683a      	ldr	r2, [r7, #0]
 80018d4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80018d6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	3248      	adds	r2, #72	; 0x48
 80018dc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	68db      	ldr	r3, [r3, #12]
 80018ea:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80018f0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80018f2:	6979      	ldr	r1, [r7, #20]
 80018f4:	3348      	adds	r3, #72	; 0x48
 80018f6:	00db      	lsls	r3, r3, #3
 80018f8:	440b      	add	r3, r1
 80018fa:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	699b      	ldr	r3, [r3, #24]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d109      	bne.n	8001918 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	43db      	mvns	r3, r3
 800190e:	401a      	ands	r2, r3
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001916:	e007      	b.n	8001928 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	431a      	orrs	r2, r3
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	691b      	ldr	r3, [r3, #16]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d109      	bne.n	8001944 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	43db      	mvns	r3, r3
 800193a:	401a      	ands	r2, r3
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001942:	e007      	b.n	8001954 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	431a      	orrs	r2, r3
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	6a1b      	ldr	r3, [r3, #32]
 8001958:	2b01      	cmp	r3, #1
 800195a:	d107      	bne.n	800196c <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	431a      	orrs	r2, r3
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001972:	f023 0201 	bic.w	r2, r3, #1
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800197c:	2300      	movs	r3, #0
 800197e:	e006      	b.n	800198e <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001984:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800198c:	2301      	movs	r3, #1
  }
}
 800198e:	4618      	mov	r0, r3
 8001990:	371c      	adds	r7, #28
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	40003400 	.word	0x40003400
 80019a0:	40006400 	.word	0x40006400

080019a4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d12e      	bne.n	8001a16 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2202      	movs	r2, #2
 80019bc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f022 0201 	bic.w	r2, r2, #1
 80019ce:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80019d0:	f7ff fdd2 	bl	8001578 <HAL_GetTick>
 80019d4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80019d6:	e012      	b.n	80019fe <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80019d8:	f7ff fdce 	bl	8001578 <HAL_GetTick>
 80019dc:	4602      	mov	r2, r0
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	2b0a      	cmp	r3, #10
 80019e4:	d90b      	bls.n	80019fe <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ea:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2205      	movs	r2, #5
 80019f6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e012      	b.n	8001a24 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f003 0301 	and.w	r3, r3, #1
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d1e5      	bne.n	80019d8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001a12:	2300      	movs	r3, #0
 8001a14:	e006      	b.n	8001a24 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a1a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
  }
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3710      	adds	r7, #16
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}

08001a2c <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b087      	sub	sp, #28
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	60f8      	str	r0, [r7, #12]
 8001a34:	60b9      	str	r1, [r7, #8]
 8001a36:	607a      	str	r2, [r7, #4]
 8001a38:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a40:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001a42:	7dfb      	ldrb	r3, [r7, #23]
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d003      	beq.n	8001a50 <HAL_CAN_GetRxMessage+0x24>
 8001a48:	7dfb      	ldrb	r3, [r7, #23]
 8001a4a:	2b02      	cmp	r3, #2
 8001a4c:	f040 80f3 	bne.w	8001c36 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d10e      	bne.n	8001a74 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	f003 0303 	and.w	r3, r3, #3
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d116      	bne.n	8001a92 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a68:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	e0e7      	b.n	8001c44 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	691b      	ldr	r3, [r3, #16]
 8001a7a:	f003 0303 	and.w	r3, r3, #3
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d107      	bne.n	8001a92 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a86:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e0d8      	b.n	8001c44 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	331b      	adds	r3, #27
 8001a9a:	011b      	lsls	r3, r3, #4
 8001a9c:	4413      	add	r3, r2
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 0204 	and.w	r2, r3, #4
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d10c      	bne.n	8001aca <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	331b      	adds	r3, #27
 8001ab8:	011b      	lsls	r3, r3, #4
 8001aba:	4413      	add	r3, r2
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	0d5b      	lsrs	r3, r3, #21
 8001ac0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	601a      	str	r2, [r3, #0]
 8001ac8:	e00b      	b.n	8001ae2 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	331b      	adds	r3, #27
 8001ad2:	011b      	lsls	r3, r3, #4
 8001ad4:	4413      	add	r3, r2
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	08db      	lsrs	r3, r3, #3
 8001ada:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	331b      	adds	r3, #27
 8001aea:	011b      	lsls	r3, r3, #4
 8001aec:	4413      	add	r3, r2
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 0202 	and.w	r2, r3, #2
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	331b      	adds	r3, #27
 8001b00:	011b      	lsls	r3, r3, #4
 8001b02:	4413      	add	r3, r2
 8001b04:	3304      	adds	r3, #4
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 020f 	and.w	r2, r3, #15
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	331b      	adds	r3, #27
 8001b18:	011b      	lsls	r3, r3, #4
 8001b1a:	4413      	add	r3, r2
 8001b1c:	3304      	adds	r3, #4
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	0a1b      	lsrs	r3, r3, #8
 8001b22:	b2da      	uxtb	r2, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	331b      	adds	r3, #27
 8001b30:	011b      	lsls	r3, r3, #4
 8001b32:	4413      	add	r3, r2
 8001b34:	3304      	adds	r3, #4
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	0c1b      	lsrs	r3, r3, #16
 8001b3a:	b29a      	uxth	r2, r3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	011b      	lsls	r3, r3, #4
 8001b48:	4413      	add	r3, r2
 8001b4a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	b2da      	uxtb	r2, r3
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	011b      	lsls	r3, r3, #4
 8001b5e:	4413      	add	r3, r2
 8001b60:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	0a1a      	lsrs	r2, r3, #8
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	b2d2      	uxtb	r2, r2
 8001b6e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	011b      	lsls	r3, r3, #4
 8001b78:	4413      	add	r3, r2
 8001b7a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	0c1a      	lsrs	r2, r3, #16
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	3302      	adds	r3, #2
 8001b86:	b2d2      	uxtb	r2, r2
 8001b88:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	011b      	lsls	r3, r3, #4
 8001b92:	4413      	add	r3, r2
 8001b94:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	0e1a      	lsrs	r2, r3, #24
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	3303      	adds	r3, #3
 8001ba0:	b2d2      	uxtb	r2, r2
 8001ba2:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	011b      	lsls	r3, r3, #4
 8001bac:	4413      	add	r3, r2
 8001bae:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	3304      	adds	r3, #4
 8001bb8:	b2d2      	uxtb	r2, r2
 8001bba:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	011b      	lsls	r3, r3, #4
 8001bc4:	4413      	add	r3, r2
 8001bc6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	0a1a      	lsrs	r2, r3, #8
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	3305      	adds	r3, #5
 8001bd2:	b2d2      	uxtb	r2, r2
 8001bd4:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	011b      	lsls	r3, r3, #4
 8001bde:	4413      	add	r3, r2
 8001be0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	0c1a      	lsrs	r2, r3, #16
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	3306      	adds	r3, #6
 8001bec:	b2d2      	uxtb	r2, r2
 8001bee:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	011b      	lsls	r3, r3, #4
 8001bf8:	4413      	add	r3, r2
 8001bfa:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	0e1a      	lsrs	r2, r3, #24
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	3307      	adds	r3, #7
 8001c06:	b2d2      	uxtb	r2, r2
 8001c08:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d108      	bne.n	8001c22 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	68da      	ldr	r2, [r3, #12]
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f042 0220 	orr.w	r2, r2, #32
 8001c1e:	60da      	str	r2, [r3, #12]
 8001c20:	e007      	b.n	8001c32 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	691a      	ldr	r2, [r3, #16]
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f042 0220 	orr.w	r2, r2, #32
 8001c30:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001c32:	2300      	movs	r3, #0
 8001c34:	e006      	b.n	8001c44 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c3a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
  }
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	371c      	adds	r7, #28
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr

08001c50 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b085      	sub	sp, #20
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
 8001c58:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c60:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001c62:	7bfb      	ldrb	r3, [r7, #15]
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d002      	beq.n	8001c6e <HAL_CAN_ActivateNotification+0x1e>
 8001c68:	7bfb      	ldrb	r3, [r7, #15]
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d109      	bne.n	8001c82 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	6959      	ldr	r1, [r3, #20]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	683a      	ldr	r2, [r7, #0]
 8001c7a:	430a      	orrs	r2, r1
 8001c7c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	e006      	b.n	8001c90 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c86:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
  }
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3714      	adds	r7, #20
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <HAL_CAN_DeactivateNotification>:
  * @param  InactiveITs indicates which interrupts will be disabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeactivateNotification(CAN_HandleTypeDef *hcan, uint32_t InactiveITs)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b085      	sub	sp, #20
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cac:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(InactiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001cae:	7bfb      	ldrb	r3, [r7, #15]
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d002      	beq.n	8001cba <HAL_CAN_DeactivateNotification+0x1e>
 8001cb4:	7bfb      	ldrb	r3, [r7, #15]
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d10a      	bne.n	8001cd0 <HAL_CAN_DeactivateNotification+0x34>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Disable the selected interrupts */
    __HAL_CAN_DISABLE_IT(hcan, InactiveITs);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	6959      	ldr	r1, [r3, #20]
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	43da      	mvns	r2, r3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	400a      	ands	r2, r1
 8001cca:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	e006      	b.n	8001cde <HAL_CAN_DeactivateNotification+0x42>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
  }
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3714      	adds	r7, #20
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr

08001cea <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001cea:	b580      	push	{r7, lr}
 8001cec:	b08a      	sub	sp, #40	; 0x28
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	695b      	ldr	r3, [r3, #20]
 8001cfc:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	691b      	ldr	r3, [r3, #16]
 8001d1c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	699b      	ldr	r3, [r3, #24]
 8001d24:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001d26:	6a3b      	ldr	r3, [r7, #32]
 8001d28:	f003 0301 	and.w	r3, r3, #1
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d07c      	beq.n	8001e2a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001d30:	69bb      	ldr	r3, [r7, #24]
 8001d32:	f003 0301 	and.w	r3, r3, #1
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d023      	beq.n	8001d82 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	2201      	movs	r2, #1
 8001d40:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001d42:	69bb      	ldr	r3, [r7, #24]
 8001d44:	f003 0302 	and.w	r3, r3, #2
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d003      	beq.n	8001d54 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	f000 f97d 	bl	800204c <HAL_CAN_TxMailbox0CompleteCallback>
 8001d52:	e016      	b.n	8001d82 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001d54:	69bb      	ldr	r3, [r7, #24]
 8001d56:	f003 0304 	and.w	r3, r3, #4
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d004      	beq.n	8001d68 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d60:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d64:	627b      	str	r3, [r7, #36]	; 0x24
 8001d66:	e00c      	b.n	8001d82 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001d68:	69bb      	ldr	r3, [r7, #24]
 8001d6a:	f003 0308 	and.w	r3, r3, #8
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d004      	beq.n	8001d7c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d74:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d78:	627b      	str	r3, [r7, #36]	; 0x24
 8001d7a:	e002      	b.n	8001d82 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	f000 f983 	bl	8002088 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001d82:	69bb      	ldr	r3, [r7, #24]
 8001d84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d024      	beq.n	8001dd6 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d94:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d003      	beq.n	8001da8 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f000 f95d 	bl	8002060 <HAL_CAN_TxMailbox1CompleteCallback>
 8001da6:	e016      	b.n	8001dd6 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001da8:	69bb      	ldr	r3, [r7, #24]
 8001daa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d004      	beq.n	8001dbc <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001db8:	627b      	str	r3, [r7, #36]	; 0x24
 8001dba:	e00c      	b.n	8001dd6 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001dbc:	69bb      	ldr	r3, [r7, #24]
 8001dbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d004      	beq.n	8001dd0 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dcc:	627b      	str	r3, [r7, #36]	; 0x24
 8001dce:	e002      	b.n	8001dd6 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001dd0:	6878      	ldr	r0, [r7, #4]
 8001dd2:	f000 f963 	bl	800209c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001dd6:	69bb      	ldr	r3, [r7, #24]
 8001dd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d024      	beq.n	8001e2a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001de8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001dea:	69bb      	ldr	r3, [r7, #24]
 8001dec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d003      	beq.n	8001dfc <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	f000 f93d 	bl	8002074 <HAL_CAN_TxMailbox2CompleteCallback>
 8001dfa:	e016      	b.n	8001e2a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001dfc:	69bb      	ldr	r3, [r7, #24]
 8001dfe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d004      	beq.n	8001e10 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e0c:	627b      	str	r3, [r7, #36]	; 0x24
 8001e0e:	e00c      	b.n	8001e2a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001e10:	69bb      	ldr	r3, [r7, #24]
 8001e12:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d004      	beq.n	8001e24 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e20:	627b      	str	r3, [r7, #36]	; 0x24
 8001e22:	e002      	b.n	8001e2a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	f000 f943 	bl	80020b0 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001e2a:	6a3b      	ldr	r3, [r7, #32]
 8001e2c:	f003 0308 	and.w	r3, r3, #8
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d00c      	beq.n	8001e4e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	f003 0310 	and.w	r3, r3, #16
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d007      	beq.n	8001e4e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e40:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e44:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	2210      	movs	r2, #16
 8001e4c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001e4e:	6a3b      	ldr	r3, [r7, #32]
 8001e50:	f003 0304 	and.w	r3, r3, #4
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d00b      	beq.n	8001e70 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	f003 0308 	and.w	r3, r3, #8
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d006      	beq.n	8001e70 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	2208      	movs	r2, #8
 8001e68:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f000 f92a 	bl	80020c4 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001e70:	6a3b      	ldr	r3, [r7, #32]
 8001e72:	f003 0302 	and.w	r3, r3, #2
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d009      	beq.n	8001e8e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	f003 0303 	and.w	r3, r3, #3
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d002      	beq.n	8001e8e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f7fe fe2f 	bl	8000aec <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001e8e:	6a3b      	ldr	r3, [r7, #32]
 8001e90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d00c      	beq.n	8001eb2 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	f003 0310 	and.w	r3, r3, #16
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d007      	beq.n	8001eb2 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ea8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	2210      	movs	r2, #16
 8001eb0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001eb2:	6a3b      	ldr	r3, [r7, #32]
 8001eb4:	f003 0320 	and.w	r3, r3, #32
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d00b      	beq.n	8001ed4 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	f003 0308 	and.w	r3, r3, #8
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d006      	beq.n	8001ed4 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	2208      	movs	r2, #8
 8001ecc:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f000 f90c 	bl	80020ec <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001ed4:	6a3b      	ldr	r3, [r7, #32]
 8001ed6:	f003 0310 	and.w	r3, r3, #16
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d009      	beq.n	8001ef2 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	691b      	ldr	r3, [r3, #16]
 8001ee4:	f003 0303 	and.w	r3, r3, #3
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d002      	beq.n	8001ef2 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	f000 f8f3 	bl	80020d8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001ef2:	6a3b      	ldr	r3, [r7, #32]
 8001ef4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d00b      	beq.n	8001f14 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	f003 0310 	and.w	r3, r3, #16
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d006      	beq.n	8001f14 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	2210      	movs	r2, #16
 8001f0c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f000 f8f6 	bl	8002100 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001f14:	6a3b      	ldr	r3, [r7, #32]
 8001f16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d00b      	beq.n	8001f36 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	f003 0308 	and.w	r3, r3, #8
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d006      	beq.n	8001f36 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	2208      	movs	r2, #8
 8001f2e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	f000 f8ef 	bl	8002114 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001f36:	6a3b      	ldr	r3, [r7, #32]
 8001f38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d075      	beq.n	800202c <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	f003 0304 	and.w	r3, r3, #4
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d06c      	beq.n	8002024 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001f4a:	6a3b      	ldr	r3, [r7, #32]
 8001f4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d008      	beq.n	8001f66 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d003      	beq.n	8001f66 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f60:	f043 0301 	orr.w	r3, r3, #1
 8001f64:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001f66:	6a3b      	ldr	r3, [r7, #32]
 8001f68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d008      	beq.n	8001f82 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d003      	beq.n	8001f82 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7c:	f043 0302 	orr.w	r3, r3, #2
 8001f80:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001f82:	6a3b      	ldr	r3, [r7, #32]
 8001f84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d008      	beq.n	8001f9e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d003      	beq.n	8001f9e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f98:	f043 0304 	orr.w	r3, r3, #4
 8001f9c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001f9e:	6a3b      	ldr	r3, [r7, #32]
 8001fa0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d03d      	beq.n	8002024 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d038      	beq.n	8002024 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001fb8:	2b30      	cmp	r3, #48	; 0x30
 8001fba:	d017      	beq.n	8001fec <HAL_CAN_IRQHandler+0x302>
 8001fbc:	2b30      	cmp	r3, #48	; 0x30
 8001fbe:	d804      	bhi.n	8001fca <HAL_CAN_IRQHandler+0x2e0>
 8001fc0:	2b10      	cmp	r3, #16
 8001fc2:	d009      	beq.n	8001fd8 <HAL_CAN_IRQHandler+0x2ee>
 8001fc4:	2b20      	cmp	r3, #32
 8001fc6:	d00c      	beq.n	8001fe2 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001fc8:	e024      	b.n	8002014 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8001fca:	2b50      	cmp	r3, #80	; 0x50
 8001fcc:	d018      	beq.n	8002000 <HAL_CAN_IRQHandler+0x316>
 8001fce:	2b60      	cmp	r3, #96	; 0x60
 8001fd0:	d01b      	beq.n	800200a <HAL_CAN_IRQHandler+0x320>
 8001fd2:	2b40      	cmp	r3, #64	; 0x40
 8001fd4:	d00f      	beq.n	8001ff6 <HAL_CAN_IRQHandler+0x30c>
            break;
 8001fd6:	e01d      	b.n	8002014 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8001fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fda:	f043 0308 	orr.w	r3, r3, #8
 8001fde:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001fe0:	e018      	b.n	8002014 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe4:	f043 0310 	orr.w	r3, r3, #16
 8001fe8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001fea:	e013      	b.n	8002014 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fee:	f043 0320 	orr.w	r3, r3, #32
 8001ff2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001ff4:	e00e      	b.n	8002014 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8001ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ffc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001ffe:	e009      	b.n	8002014 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8002000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002002:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002006:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002008:	e004      	b.n	8002014 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 800200a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002010:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002012:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	699a      	ldr	r2, [r3, #24]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002022:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	2204      	movs	r2, #4
 800202a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800202c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202e:	2b00      	cmp	r3, #0
 8002030:	d008      	beq.n	8002044 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002038:	431a      	orrs	r2, r3
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f000 f872 	bl	8002128 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002044:	bf00      	nop
 8002046:	3728      	adds	r7, #40	; 0x28
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}

0800204c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002054:	bf00      	nop
 8002056:	370c      	adds	r7, #12
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr

08002060 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002068:	bf00      	nop
 800206a:	370c      	adds	r7, #12
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr

08002074 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800207c:	bf00      	nop
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr

08002088 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002090:	bf00      	nop
 8002092:	370c      	adds	r7, #12
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80020a4:	bf00      	nop
 80020a6:	370c      	adds	r7, #12
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr

080020b0 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80020b8:	bf00      	nop
 80020ba:	370c      	adds	r7, #12
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr

080020c4 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80020cc:	bf00      	nop
 80020ce:	370c      	adds	r7, #12
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr

080020d8 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80020e0:	bf00      	nop
 80020e2:	370c      	adds	r7, #12
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr

080020ec <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80020f4:	bf00      	nop
 80020f6:	370c      	adds	r7, #12
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr

08002100 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002108:	bf00      	nop
 800210a:	370c      	adds	r7, #12
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr

08002114 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800211c:	bf00      	nop
 800211e:	370c      	adds	r7, #12
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr

08002128 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002130:	bf00      	nop
 8002132:	370c      	adds	r7, #12
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr

0800213c <__NVIC_SetPriorityGrouping>:
{
 800213c:	b480      	push	{r7}
 800213e:	b085      	sub	sp, #20
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	f003 0307 	and.w	r3, r3, #7
 800214a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800214c:	4b0b      	ldr	r3, [pc, #44]	; (800217c <__NVIC_SetPriorityGrouping+0x40>)
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002152:	68ba      	ldr	r2, [r7, #8]
 8002154:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002158:	4013      	ands	r3, r2
 800215a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002164:	4b06      	ldr	r3, [pc, #24]	; (8002180 <__NVIC_SetPriorityGrouping+0x44>)
 8002166:	4313      	orrs	r3, r2
 8002168:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800216a:	4a04      	ldr	r2, [pc, #16]	; (800217c <__NVIC_SetPriorityGrouping+0x40>)
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	60d3      	str	r3, [r2, #12]
}
 8002170:	bf00      	nop
 8002172:	3714      	adds	r7, #20
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr
 800217c:	e000ed00 	.word	0xe000ed00
 8002180:	05fa0000 	.word	0x05fa0000

08002184 <__NVIC_GetPriorityGrouping>:
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002188:	4b04      	ldr	r3, [pc, #16]	; (800219c <__NVIC_GetPriorityGrouping+0x18>)
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	0a1b      	lsrs	r3, r3, #8
 800218e:	f003 0307 	and.w	r3, r3, #7
}
 8002192:	4618      	mov	r0, r3
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr
 800219c:	e000ed00 	.word	0xe000ed00

080021a0 <__NVIC_EnableIRQ>:
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	4603      	mov	r3, r0
 80021a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	db0b      	blt.n	80021ca <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021b2:	79fb      	ldrb	r3, [r7, #7]
 80021b4:	f003 021f 	and.w	r2, r3, #31
 80021b8:	4907      	ldr	r1, [pc, #28]	; (80021d8 <__NVIC_EnableIRQ+0x38>)
 80021ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021be:	095b      	lsrs	r3, r3, #5
 80021c0:	2001      	movs	r0, #1
 80021c2:	fa00 f202 	lsl.w	r2, r0, r2
 80021c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80021ca:	bf00      	nop
 80021cc:	370c      	adds	r7, #12
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop
 80021d8:	e000e100 	.word	0xe000e100

080021dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	4603      	mov	r3, r0
 80021e4:	6039      	str	r1, [r7, #0]
 80021e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	db0a      	blt.n	8002206 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	b2da      	uxtb	r2, r3
 80021f4:	490c      	ldr	r1, [pc, #48]	; (8002228 <__NVIC_SetPriority+0x4c>)
 80021f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021fa:	0112      	lsls	r2, r2, #4
 80021fc:	b2d2      	uxtb	r2, r2
 80021fe:	440b      	add	r3, r1
 8002200:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002204:	e00a      	b.n	800221c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	b2da      	uxtb	r2, r3
 800220a:	4908      	ldr	r1, [pc, #32]	; (800222c <__NVIC_SetPriority+0x50>)
 800220c:	79fb      	ldrb	r3, [r7, #7]
 800220e:	f003 030f 	and.w	r3, r3, #15
 8002212:	3b04      	subs	r3, #4
 8002214:	0112      	lsls	r2, r2, #4
 8002216:	b2d2      	uxtb	r2, r2
 8002218:	440b      	add	r3, r1
 800221a:	761a      	strb	r2, [r3, #24]
}
 800221c:	bf00      	nop
 800221e:	370c      	adds	r7, #12
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr
 8002228:	e000e100 	.word	0xe000e100
 800222c:	e000ed00 	.word	0xe000ed00

08002230 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002230:	b480      	push	{r7}
 8002232:	b089      	sub	sp, #36	; 0x24
 8002234:	af00      	add	r7, sp, #0
 8002236:	60f8      	str	r0, [r7, #12]
 8002238:	60b9      	str	r1, [r7, #8]
 800223a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	f003 0307 	and.w	r3, r3, #7
 8002242:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	f1c3 0307 	rsb	r3, r3, #7
 800224a:	2b04      	cmp	r3, #4
 800224c:	bf28      	it	cs
 800224e:	2304      	movcs	r3, #4
 8002250:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	3304      	adds	r3, #4
 8002256:	2b06      	cmp	r3, #6
 8002258:	d902      	bls.n	8002260 <NVIC_EncodePriority+0x30>
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	3b03      	subs	r3, #3
 800225e:	e000      	b.n	8002262 <NVIC_EncodePriority+0x32>
 8002260:	2300      	movs	r3, #0
 8002262:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002264:	f04f 32ff 	mov.w	r2, #4294967295
 8002268:	69bb      	ldr	r3, [r7, #24]
 800226a:	fa02 f303 	lsl.w	r3, r2, r3
 800226e:	43da      	mvns	r2, r3
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	401a      	ands	r2, r3
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002278:	f04f 31ff 	mov.w	r1, #4294967295
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	fa01 f303 	lsl.w	r3, r1, r3
 8002282:	43d9      	mvns	r1, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002288:	4313      	orrs	r3, r2
         );
}
 800228a:	4618      	mov	r0, r3
 800228c:	3724      	adds	r7, #36	; 0x24
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr

08002296 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002296:	b580      	push	{r7, lr}
 8002298:	b082      	sub	sp, #8
 800229a:	af00      	add	r7, sp, #0
 800229c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f7ff ff4c 	bl	800213c <__NVIC_SetPriorityGrouping>
}
 80022a4:	bf00      	nop
 80022a6:	3708      	adds	r7, #8
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}

080022ac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b086      	sub	sp, #24
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	4603      	mov	r3, r0
 80022b4:	60b9      	str	r1, [r7, #8]
 80022b6:	607a      	str	r2, [r7, #4]
 80022b8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80022ba:	2300      	movs	r3, #0
 80022bc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022be:	f7ff ff61 	bl	8002184 <__NVIC_GetPriorityGrouping>
 80022c2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022c4:	687a      	ldr	r2, [r7, #4]
 80022c6:	68b9      	ldr	r1, [r7, #8]
 80022c8:	6978      	ldr	r0, [r7, #20]
 80022ca:	f7ff ffb1 	bl	8002230 <NVIC_EncodePriority>
 80022ce:	4602      	mov	r2, r0
 80022d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022d4:	4611      	mov	r1, r2
 80022d6:	4618      	mov	r0, r3
 80022d8:	f7ff ff80 	bl	80021dc <__NVIC_SetPriority>
}
 80022dc:	bf00      	nop
 80022de:	3718      	adds	r7, #24
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}

080022e4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	4603      	mov	r3, r0
 80022ec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f2:	4618      	mov	r0, r3
 80022f4:	f7ff ff54 	bl	80021a0 <__NVIC_EnableIRQ>
}
 80022f8:	bf00      	nop
 80022fa:	3708      	adds	r7, #8
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}

08002300 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b086      	sub	sp, #24
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002308:	2300      	movs	r3, #0
 800230a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800230c:	f7ff f934 	bl	8001578 <HAL_GetTick>
 8002310:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d101      	bne.n	800231c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e099      	b.n	8002450 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2200      	movs	r2, #0
 8002320:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2202      	movs	r2, #2
 8002328:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f022 0201 	bic.w	r2, r2, #1
 800233a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800233c:	e00f      	b.n	800235e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800233e:	f7ff f91b 	bl	8001578 <HAL_GetTick>
 8002342:	4602      	mov	r2, r0
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	2b05      	cmp	r3, #5
 800234a:	d908      	bls.n	800235e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2220      	movs	r2, #32
 8002350:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2203      	movs	r2, #3
 8002356:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800235a:	2303      	movs	r3, #3
 800235c:	e078      	b.n	8002450 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0301 	and.w	r3, r3, #1
 8002368:	2b00      	cmp	r3, #0
 800236a:	d1e8      	bne.n	800233e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002374:	697a      	ldr	r2, [r7, #20]
 8002376:	4b38      	ldr	r3, [pc, #224]	; (8002458 <HAL_DMA_Init+0x158>)
 8002378:	4013      	ands	r3, r2
 800237a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	685a      	ldr	r2, [r3, #4]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800238a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	691b      	ldr	r3, [r3, #16]
 8002390:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002396:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	699b      	ldr	r3, [r3, #24]
 800239c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6a1b      	ldr	r3, [r3, #32]
 80023a8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023aa:	697a      	ldr	r2, [r7, #20]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b4:	2b04      	cmp	r3, #4
 80023b6:	d107      	bne.n	80023c8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c0:	4313      	orrs	r3, r2
 80023c2:	697a      	ldr	r2, [r7, #20]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	697a      	ldr	r2, [r7, #20]
 80023ce:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	695b      	ldr	r3, [r3, #20]
 80023d6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	f023 0307 	bic.w	r3, r3, #7
 80023de:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e4:	697a      	ldr	r2, [r7, #20]
 80023e6:	4313      	orrs	r3, r2
 80023e8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ee:	2b04      	cmp	r3, #4
 80023f0:	d117      	bne.n	8002422 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023f6:	697a      	ldr	r2, [r7, #20]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002400:	2b00      	cmp	r3, #0
 8002402:	d00e      	beq.n	8002422 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	f000 faa5 	bl	8002954 <DMA_CheckFifoParam>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d008      	beq.n	8002422 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2240      	movs	r2, #64	; 0x40
 8002414:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2201      	movs	r2, #1
 800241a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800241e:	2301      	movs	r3, #1
 8002420:	e016      	b.n	8002450 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	697a      	ldr	r2, [r7, #20]
 8002428:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f000 fa5c 	bl	80028e8 <DMA_CalcBaseAndBitshift>
 8002430:	4603      	mov	r3, r0
 8002432:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002438:	223f      	movs	r2, #63	; 0x3f
 800243a:	409a      	lsls	r2, r3
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2200      	movs	r2, #0
 8002444:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2201      	movs	r2, #1
 800244a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800244e:	2300      	movs	r3, #0
}
 8002450:	4618      	mov	r0, r3
 8002452:	3718      	adds	r7, #24
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}
 8002458:	e010803f 	.word	0xe010803f

0800245c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b086      	sub	sp, #24
 8002460:	af00      	add	r7, sp, #0
 8002462:	60f8      	str	r0, [r7, #12]
 8002464:	60b9      	str	r1, [r7, #8]
 8002466:	607a      	str	r2, [r7, #4]
 8002468:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800246a:	2300      	movs	r3, #0
 800246c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002472:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800247a:	2b01      	cmp	r3, #1
 800247c:	d101      	bne.n	8002482 <HAL_DMA_Start_IT+0x26>
 800247e:	2302      	movs	r3, #2
 8002480:	e048      	b.n	8002514 <HAL_DMA_Start_IT+0xb8>
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2201      	movs	r2, #1
 8002486:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002490:	b2db      	uxtb	r3, r3
 8002492:	2b01      	cmp	r3, #1
 8002494:	d137      	bne.n	8002506 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2202      	movs	r2, #2
 800249a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2200      	movs	r2, #0
 80024a2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	68b9      	ldr	r1, [r7, #8]
 80024aa:	68f8      	ldr	r0, [r7, #12]
 80024ac:	f000 f9ee 	bl	800288c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024b4:	223f      	movs	r2, #63	; 0x3f
 80024b6:	409a      	lsls	r2, r3
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f042 0216 	orr.w	r2, r2, #22
 80024ca:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	695a      	ldr	r2, [r3, #20]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80024da:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d007      	beq.n	80024f4 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f042 0208 	orr.w	r2, r2, #8
 80024f2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f042 0201 	orr.w	r2, r2, #1
 8002502:	601a      	str	r2, [r3, #0]
 8002504:	e005      	b.n	8002512 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2200      	movs	r2, #0
 800250a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800250e:	2302      	movs	r3, #2
 8002510:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002512:	7dfb      	ldrb	r3, [r7, #23]
}
 8002514:	4618      	mov	r0, r3
 8002516:	3718      	adds	r7, #24
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}

0800251c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800251c:	b480      	push	{r7}
 800251e:	b083      	sub	sp, #12
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800252a:	b2db      	uxtb	r3, r3
 800252c:	2b02      	cmp	r3, #2
 800252e:	d004      	beq.n	800253a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2280      	movs	r2, #128	; 0x80
 8002534:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e00c      	b.n	8002554 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2205      	movs	r2, #5
 800253e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f022 0201 	bic.w	r2, r2, #1
 8002550:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002552:	2300      	movs	r3, #0
}
 8002554:	4618      	mov	r0, r3
 8002556:	370c      	adds	r7, #12
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr

08002560 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b086      	sub	sp, #24
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002568:	2300      	movs	r3, #0
 800256a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800256c:	4b92      	ldr	r3, [pc, #584]	; (80027b8 <HAL_DMA_IRQHandler+0x258>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a92      	ldr	r2, [pc, #584]	; (80027bc <HAL_DMA_IRQHandler+0x25c>)
 8002572:	fba2 2303 	umull	r2, r3, r2, r3
 8002576:	0a9b      	lsrs	r3, r3, #10
 8002578:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800257e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800258a:	2208      	movs	r2, #8
 800258c:	409a      	lsls	r2, r3
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	4013      	ands	r3, r2
 8002592:	2b00      	cmp	r3, #0
 8002594:	d01a      	beq.n	80025cc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0304 	and.w	r3, r3, #4
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d013      	beq.n	80025cc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f022 0204 	bic.w	r2, r2, #4
 80025b2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025b8:	2208      	movs	r2, #8
 80025ba:	409a      	lsls	r2, r3
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025c4:	f043 0201 	orr.w	r2, r3, #1
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025d0:	2201      	movs	r2, #1
 80025d2:	409a      	lsls	r2, r3
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	4013      	ands	r3, r2
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d012      	beq.n	8002602 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	695b      	ldr	r3, [r3, #20]
 80025e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d00b      	beq.n	8002602 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025ee:	2201      	movs	r2, #1
 80025f0:	409a      	lsls	r2, r3
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025fa:	f043 0202 	orr.w	r2, r3, #2
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002606:	2204      	movs	r2, #4
 8002608:	409a      	lsls	r2, r3
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	4013      	ands	r3, r2
 800260e:	2b00      	cmp	r3, #0
 8002610:	d012      	beq.n	8002638 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0302 	and.w	r3, r3, #2
 800261c:	2b00      	cmp	r3, #0
 800261e:	d00b      	beq.n	8002638 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002624:	2204      	movs	r2, #4
 8002626:	409a      	lsls	r2, r3
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002630:	f043 0204 	orr.w	r2, r3, #4
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800263c:	2210      	movs	r2, #16
 800263e:	409a      	lsls	r2, r3
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	4013      	ands	r3, r2
 8002644:	2b00      	cmp	r3, #0
 8002646:	d043      	beq.n	80026d0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0308 	and.w	r3, r3, #8
 8002652:	2b00      	cmp	r3, #0
 8002654:	d03c      	beq.n	80026d0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800265a:	2210      	movs	r2, #16
 800265c:	409a      	lsls	r2, r3
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800266c:	2b00      	cmp	r3, #0
 800266e:	d018      	beq.n	80026a2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d108      	bne.n	8002690 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002682:	2b00      	cmp	r3, #0
 8002684:	d024      	beq.n	80026d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	4798      	blx	r3
 800268e:	e01f      	b.n	80026d0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002694:	2b00      	cmp	r3, #0
 8002696:	d01b      	beq.n	80026d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	4798      	blx	r3
 80026a0:	e016      	b.n	80026d0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d107      	bne.n	80026c0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f022 0208 	bic.w	r2, r2, #8
 80026be:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d003      	beq.n	80026d0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026d4:	2220      	movs	r2, #32
 80026d6:	409a      	lsls	r2, r3
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	4013      	ands	r3, r2
 80026dc:	2b00      	cmp	r3, #0
 80026de:	f000 808e 	beq.w	80027fe <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 0310 	and.w	r3, r3, #16
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	f000 8086 	beq.w	80027fe <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026f6:	2220      	movs	r2, #32
 80026f8:	409a      	lsls	r2, r3
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002704:	b2db      	uxtb	r3, r3
 8002706:	2b05      	cmp	r3, #5
 8002708:	d136      	bne.n	8002778 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f022 0216 	bic.w	r2, r2, #22
 8002718:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	695a      	ldr	r2, [r3, #20]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002728:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272e:	2b00      	cmp	r3, #0
 8002730:	d103      	bne.n	800273a <HAL_DMA_IRQHandler+0x1da>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002736:	2b00      	cmp	r3, #0
 8002738:	d007      	beq.n	800274a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f022 0208 	bic.w	r2, r2, #8
 8002748:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800274e:	223f      	movs	r2, #63	; 0x3f
 8002750:	409a      	lsls	r2, r3
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2200      	movs	r2, #0
 800275a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2201      	movs	r2, #1
 8002762:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800276a:	2b00      	cmp	r3, #0
 800276c:	d07d      	beq.n	800286a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	4798      	blx	r3
        }
        return;
 8002776:	e078      	b.n	800286a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d01c      	beq.n	80027c0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002790:	2b00      	cmp	r3, #0
 8002792:	d108      	bne.n	80027a6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002798:	2b00      	cmp	r3, #0
 800279a:	d030      	beq.n	80027fe <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	4798      	blx	r3
 80027a4:	e02b      	b.n	80027fe <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d027      	beq.n	80027fe <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	4798      	blx	r3
 80027b6:	e022      	b.n	80027fe <HAL_DMA_IRQHandler+0x29e>
 80027b8:	20000010 	.word	0x20000010
 80027bc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d10f      	bne.n	80027ee <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f022 0210 	bic.w	r2, r2, #16
 80027dc:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2200      	movs	r2, #0
 80027e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2201      	movs	r2, #1
 80027ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d003      	beq.n	80027fe <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002802:	2b00      	cmp	r3, #0
 8002804:	d032      	beq.n	800286c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800280a:	f003 0301 	and.w	r3, r3, #1
 800280e:	2b00      	cmp	r3, #0
 8002810:	d022      	beq.n	8002858 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2205      	movs	r2, #5
 8002816:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f022 0201 	bic.w	r2, r2, #1
 8002828:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	3301      	adds	r3, #1
 800282e:	60bb      	str	r3, [r7, #8]
 8002830:	697a      	ldr	r2, [r7, #20]
 8002832:	429a      	cmp	r2, r3
 8002834:	d307      	bcc.n	8002846 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0301 	and.w	r3, r3, #1
 8002840:	2b00      	cmp	r3, #0
 8002842:	d1f2      	bne.n	800282a <HAL_DMA_IRQHandler+0x2ca>
 8002844:	e000      	b.n	8002848 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002846:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2200      	movs	r2, #0
 800284c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2201      	movs	r2, #1
 8002854:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800285c:	2b00      	cmp	r3, #0
 800285e:	d005      	beq.n	800286c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	4798      	blx	r3
 8002868:	e000      	b.n	800286c <HAL_DMA_IRQHandler+0x30c>
        return;
 800286a:	bf00      	nop
    }
  }
}
 800286c:	3718      	adds	r7, #24
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop

08002874 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8002880:	4618      	mov	r0, r3
 8002882:	370c      	adds	r7, #12
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr

0800288c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800288c:	b480      	push	{r7}
 800288e:	b085      	sub	sp, #20
 8002890:	af00      	add	r7, sp, #0
 8002892:	60f8      	str	r0, [r7, #12]
 8002894:	60b9      	str	r1, [r7, #8]
 8002896:	607a      	str	r2, [r7, #4]
 8002898:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80028a8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	683a      	ldr	r2, [r7, #0]
 80028b0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	2b40      	cmp	r3, #64	; 0x40
 80028b8:	d108      	bne.n	80028cc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	68ba      	ldr	r2, [r7, #8]
 80028c8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80028ca:	e007      	b.n	80028dc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	68ba      	ldr	r2, [r7, #8]
 80028d2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	687a      	ldr	r2, [r7, #4]
 80028da:	60da      	str	r2, [r3, #12]
}
 80028dc:	bf00      	nop
 80028de:	3714      	adds	r7, #20
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr

080028e8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b085      	sub	sp, #20
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	3b10      	subs	r3, #16
 80028f8:	4a13      	ldr	r2, [pc, #76]	; (8002948 <DMA_CalcBaseAndBitshift+0x60>)
 80028fa:	fba2 2303 	umull	r2, r3, r2, r3
 80028fe:	091b      	lsrs	r3, r3, #4
 8002900:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002902:	4a12      	ldr	r2, [pc, #72]	; (800294c <DMA_CalcBaseAndBitshift+0x64>)
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	4413      	add	r3, r2
 8002908:	781b      	ldrb	r3, [r3, #0]
 800290a:	461a      	mov	r2, r3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2b03      	cmp	r3, #3
 8002914:	d908      	bls.n	8002928 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	461a      	mov	r2, r3
 800291c:	4b0c      	ldr	r3, [pc, #48]	; (8002950 <DMA_CalcBaseAndBitshift+0x68>)
 800291e:	4013      	ands	r3, r2
 8002920:	1d1a      	adds	r2, r3, #4
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	659a      	str	r2, [r3, #88]	; 0x58
 8002926:	e006      	b.n	8002936 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	461a      	mov	r2, r3
 800292e:	4b08      	ldr	r3, [pc, #32]	; (8002950 <DMA_CalcBaseAndBitshift+0x68>)
 8002930:	4013      	ands	r3, r2
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800293a:	4618      	mov	r0, r3
 800293c:	3714      	adds	r7, #20
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr
 8002946:	bf00      	nop
 8002948:	aaaaaaab 	.word	0xaaaaaaab
 800294c:	080160f4 	.word	0x080160f4
 8002950:	fffffc00 	.word	0xfffffc00

08002954 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002954:	b480      	push	{r7}
 8002956:	b085      	sub	sp, #20
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800295c:	2300      	movs	r3, #0
 800295e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002964:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	699b      	ldr	r3, [r3, #24]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d11f      	bne.n	80029ae <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	2b03      	cmp	r3, #3
 8002972:	d855      	bhi.n	8002a20 <DMA_CheckFifoParam+0xcc>
 8002974:	a201      	add	r2, pc, #4	; (adr r2, 800297c <DMA_CheckFifoParam+0x28>)
 8002976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800297a:	bf00      	nop
 800297c:	0800298d 	.word	0x0800298d
 8002980:	0800299f 	.word	0x0800299f
 8002984:	0800298d 	.word	0x0800298d
 8002988:	08002a21 	.word	0x08002a21
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002990:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002994:	2b00      	cmp	r3, #0
 8002996:	d045      	beq.n	8002a24 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800299c:	e042      	b.n	8002a24 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029a2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80029a6:	d13f      	bne.n	8002a28 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029ac:	e03c      	b.n	8002a28 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	699b      	ldr	r3, [r3, #24]
 80029b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029b6:	d121      	bne.n	80029fc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	2b03      	cmp	r3, #3
 80029bc:	d836      	bhi.n	8002a2c <DMA_CheckFifoParam+0xd8>
 80029be:	a201      	add	r2, pc, #4	; (adr r2, 80029c4 <DMA_CheckFifoParam+0x70>)
 80029c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029c4:	080029d5 	.word	0x080029d5
 80029c8:	080029db 	.word	0x080029db
 80029cc:	080029d5 	.word	0x080029d5
 80029d0:	080029ed 	.word	0x080029ed
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	73fb      	strb	r3, [r7, #15]
      break;
 80029d8:	e02f      	b.n	8002a3a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d024      	beq.n	8002a30 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029ea:	e021      	b.n	8002a30 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80029f4:	d11e      	bne.n	8002a34 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80029fa:	e01b      	b.n	8002a34 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d902      	bls.n	8002a08 <DMA_CheckFifoParam+0xb4>
 8002a02:	2b03      	cmp	r3, #3
 8002a04:	d003      	beq.n	8002a0e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002a06:	e018      	b.n	8002a3a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	73fb      	strb	r3, [r7, #15]
      break;
 8002a0c:	e015      	b.n	8002a3a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a12:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d00e      	beq.n	8002a38 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	73fb      	strb	r3, [r7, #15]
      break;
 8002a1e:	e00b      	b.n	8002a38 <DMA_CheckFifoParam+0xe4>
      break;
 8002a20:	bf00      	nop
 8002a22:	e00a      	b.n	8002a3a <DMA_CheckFifoParam+0xe6>
      break;
 8002a24:	bf00      	nop
 8002a26:	e008      	b.n	8002a3a <DMA_CheckFifoParam+0xe6>
      break;
 8002a28:	bf00      	nop
 8002a2a:	e006      	b.n	8002a3a <DMA_CheckFifoParam+0xe6>
      break;
 8002a2c:	bf00      	nop
 8002a2e:	e004      	b.n	8002a3a <DMA_CheckFifoParam+0xe6>
      break;
 8002a30:	bf00      	nop
 8002a32:	e002      	b.n	8002a3a <DMA_CheckFifoParam+0xe6>
      break;   
 8002a34:	bf00      	nop
 8002a36:	e000      	b.n	8002a3a <DMA_CheckFifoParam+0xe6>
      break;
 8002a38:	bf00      	nop
    }
  } 
  
  return status; 
 8002a3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3714      	adds	r7, #20
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr

08002a48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b089      	sub	sp, #36	; 0x24
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
 8002a50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002a52:	2300      	movs	r3, #0
 8002a54:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002a56:	2300      	movs	r3, #0
 8002a58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002a62:	2300      	movs	r3, #0
 8002a64:	61fb      	str	r3, [r7, #28]
 8002a66:	e175      	b.n	8002d54 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002a68:	2201      	movs	r2, #1
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	697a      	ldr	r2, [r7, #20]
 8002a78:	4013      	ands	r3, r2
 8002a7a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a7c:	693a      	ldr	r2, [r7, #16]
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	429a      	cmp	r2, r3
 8002a82:	f040 8164 	bne.w	8002d4e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d00b      	beq.n	8002aa6 <HAL_GPIO_Init+0x5e>
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d007      	beq.n	8002aa6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002a9a:	2b11      	cmp	r3, #17
 8002a9c:	d003      	beq.n	8002aa6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	2b12      	cmp	r3, #18
 8002aa4:	d130      	bne.n	8002b08 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	005b      	lsls	r3, r3, #1
 8002ab0:	2203      	movs	r2, #3
 8002ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab6:	43db      	mvns	r3, r3
 8002ab8:	69ba      	ldr	r2, [r7, #24]
 8002aba:	4013      	ands	r3, r2
 8002abc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	68da      	ldr	r2, [r3, #12]
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	005b      	lsls	r3, r3, #1
 8002ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aca:	69ba      	ldr	r2, [r7, #24]
 8002acc:	4313      	orrs	r3, r2
 8002ace:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	69ba      	ldr	r2, [r7, #24]
 8002ad4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002adc:	2201      	movs	r2, #1
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae4:	43db      	mvns	r3, r3
 8002ae6:	69ba      	ldr	r2, [r7, #24]
 8002ae8:	4013      	ands	r3, r2
 8002aea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	091b      	lsrs	r3, r3, #4
 8002af2:	f003 0201 	and.w	r2, r3, #1
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	fa02 f303 	lsl.w	r3, r2, r3
 8002afc:	69ba      	ldr	r2, [r7, #24]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	69ba      	ldr	r2, [r7, #24]
 8002b06:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	005b      	lsls	r3, r3, #1
 8002b12:	2203      	movs	r2, #3
 8002b14:	fa02 f303 	lsl.w	r3, r2, r3
 8002b18:	43db      	mvns	r3, r3
 8002b1a:	69ba      	ldr	r2, [r7, #24]
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	689a      	ldr	r2, [r3, #8]
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	005b      	lsls	r3, r3, #1
 8002b28:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2c:	69ba      	ldr	r2, [r7, #24]
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	69ba      	ldr	r2, [r7, #24]
 8002b36:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	2b02      	cmp	r3, #2
 8002b3e:	d003      	beq.n	8002b48 <HAL_GPIO_Init+0x100>
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	2b12      	cmp	r3, #18
 8002b46:	d123      	bne.n	8002b90 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002b48:	69fb      	ldr	r3, [r7, #28]
 8002b4a:	08da      	lsrs	r2, r3, #3
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	3208      	adds	r2, #8
 8002b50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	f003 0307 	and.w	r3, r3, #7
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	220f      	movs	r2, #15
 8002b60:	fa02 f303 	lsl.w	r3, r2, r3
 8002b64:	43db      	mvns	r3, r3
 8002b66:	69ba      	ldr	r2, [r7, #24]
 8002b68:	4013      	ands	r3, r2
 8002b6a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	691a      	ldr	r2, [r3, #16]
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	f003 0307 	and.w	r3, r3, #7
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7c:	69ba      	ldr	r2, [r7, #24]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	08da      	lsrs	r2, r3, #3
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	3208      	adds	r2, #8
 8002b8a:	69b9      	ldr	r1, [r7, #24]
 8002b8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	005b      	lsls	r3, r3, #1
 8002b9a:	2203      	movs	r2, #3
 8002b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba0:	43db      	mvns	r3, r3
 8002ba2:	69ba      	ldr	r2, [r7, #24]
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	f003 0203 	and.w	r2, r3, #3
 8002bb0:	69fb      	ldr	r3, [r7, #28]
 8002bb2:	005b      	lsls	r3, r3, #1
 8002bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb8:	69ba      	ldr	r2, [r7, #24]
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	69ba      	ldr	r2, [r7, #24]
 8002bc2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	f000 80be 	beq.w	8002d4e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bd2:	4b65      	ldr	r3, [pc, #404]	; (8002d68 <HAL_GPIO_Init+0x320>)
 8002bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bd6:	4a64      	ldr	r2, [pc, #400]	; (8002d68 <HAL_GPIO_Init+0x320>)
 8002bd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bdc:	6453      	str	r3, [r2, #68]	; 0x44
 8002bde:	4b62      	ldr	r3, [pc, #392]	; (8002d68 <HAL_GPIO_Init+0x320>)
 8002be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002be2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002be6:	60fb      	str	r3, [r7, #12]
 8002be8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002bea:	4a60      	ldr	r2, [pc, #384]	; (8002d6c <HAL_GPIO_Init+0x324>)
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	089b      	lsrs	r3, r3, #2
 8002bf0:	3302      	adds	r3, #2
 8002bf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	f003 0303 	and.w	r3, r3, #3
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	220f      	movs	r2, #15
 8002c02:	fa02 f303 	lsl.w	r3, r2, r3
 8002c06:	43db      	mvns	r3, r3
 8002c08:	69ba      	ldr	r2, [r7, #24]
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4a57      	ldr	r2, [pc, #348]	; (8002d70 <HAL_GPIO_Init+0x328>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d037      	beq.n	8002c86 <HAL_GPIO_Init+0x23e>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4a56      	ldr	r2, [pc, #344]	; (8002d74 <HAL_GPIO_Init+0x32c>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d031      	beq.n	8002c82 <HAL_GPIO_Init+0x23a>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4a55      	ldr	r2, [pc, #340]	; (8002d78 <HAL_GPIO_Init+0x330>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d02b      	beq.n	8002c7e <HAL_GPIO_Init+0x236>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4a54      	ldr	r2, [pc, #336]	; (8002d7c <HAL_GPIO_Init+0x334>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d025      	beq.n	8002c7a <HAL_GPIO_Init+0x232>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	4a53      	ldr	r2, [pc, #332]	; (8002d80 <HAL_GPIO_Init+0x338>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d01f      	beq.n	8002c76 <HAL_GPIO_Init+0x22e>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	4a52      	ldr	r2, [pc, #328]	; (8002d84 <HAL_GPIO_Init+0x33c>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d019      	beq.n	8002c72 <HAL_GPIO_Init+0x22a>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4a51      	ldr	r2, [pc, #324]	; (8002d88 <HAL_GPIO_Init+0x340>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d013      	beq.n	8002c6e <HAL_GPIO_Init+0x226>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a50      	ldr	r2, [pc, #320]	; (8002d8c <HAL_GPIO_Init+0x344>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d00d      	beq.n	8002c6a <HAL_GPIO_Init+0x222>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a4f      	ldr	r2, [pc, #316]	; (8002d90 <HAL_GPIO_Init+0x348>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d007      	beq.n	8002c66 <HAL_GPIO_Init+0x21e>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4a4e      	ldr	r2, [pc, #312]	; (8002d94 <HAL_GPIO_Init+0x34c>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d101      	bne.n	8002c62 <HAL_GPIO_Init+0x21a>
 8002c5e:	2309      	movs	r3, #9
 8002c60:	e012      	b.n	8002c88 <HAL_GPIO_Init+0x240>
 8002c62:	230a      	movs	r3, #10
 8002c64:	e010      	b.n	8002c88 <HAL_GPIO_Init+0x240>
 8002c66:	2308      	movs	r3, #8
 8002c68:	e00e      	b.n	8002c88 <HAL_GPIO_Init+0x240>
 8002c6a:	2307      	movs	r3, #7
 8002c6c:	e00c      	b.n	8002c88 <HAL_GPIO_Init+0x240>
 8002c6e:	2306      	movs	r3, #6
 8002c70:	e00a      	b.n	8002c88 <HAL_GPIO_Init+0x240>
 8002c72:	2305      	movs	r3, #5
 8002c74:	e008      	b.n	8002c88 <HAL_GPIO_Init+0x240>
 8002c76:	2304      	movs	r3, #4
 8002c78:	e006      	b.n	8002c88 <HAL_GPIO_Init+0x240>
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e004      	b.n	8002c88 <HAL_GPIO_Init+0x240>
 8002c7e:	2302      	movs	r3, #2
 8002c80:	e002      	b.n	8002c88 <HAL_GPIO_Init+0x240>
 8002c82:	2301      	movs	r3, #1
 8002c84:	e000      	b.n	8002c88 <HAL_GPIO_Init+0x240>
 8002c86:	2300      	movs	r3, #0
 8002c88:	69fa      	ldr	r2, [r7, #28]
 8002c8a:	f002 0203 	and.w	r2, r2, #3
 8002c8e:	0092      	lsls	r2, r2, #2
 8002c90:	4093      	lsls	r3, r2
 8002c92:	69ba      	ldr	r2, [r7, #24]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002c98:	4934      	ldr	r1, [pc, #208]	; (8002d6c <HAL_GPIO_Init+0x324>)
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	089b      	lsrs	r3, r3, #2
 8002c9e:	3302      	adds	r3, #2
 8002ca0:	69ba      	ldr	r2, [r7, #24]
 8002ca2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ca6:	4b3c      	ldr	r3, [pc, #240]	; (8002d98 <HAL_GPIO_Init+0x350>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	43db      	mvns	r3, r3
 8002cb0:	69ba      	ldr	r2, [r7, #24]
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d003      	beq.n	8002cca <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002cc2:	69ba      	ldr	r2, [r7, #24]
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002cca:	4a33      	ldr	r2, [pc, #204]	; (8002d98 <HAL_GPIO_Init+0x350>)
 8002ccc:	69bb      	ldr	r3, [r7, #24]
 8002cce:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002cd0:	4b31      	ldr	r3, [pc, #196]	; (8002d98 <HAL_GPIO_Init+0x350>)
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	43db      	mvns	r3, r3
 8002cda:	69ba      	ldr	r2, [r7, #24]
 8002cdc:	4013      	ands	r3, r2
 8002cde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d003      	beq.n	8002cf4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002cec:	69ba      	ldr	r2, [r7, #24]
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002cf4:	4a28      	ldr	r2, [pc, #160]	; (8002d98 <HAL_GPIO_Init+0x350>)
 8002cf6:	69bb      	ldr	r3, [r7, #24]
 8002cf8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002cfa:	4b27      	ldr	r3, [pc, #156]	; (8002d98 <HAL_GPIO_Init+0x350>)
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	43db      	mvns	r3, r3
 8002d04:	69ba      	ldr	r2, [r7, #24]
 8002d06:	4013      	ands	r3, r2
 8002d08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d003      	beq.n	8002d1e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002d16:	69ba      	ldr	r2, [r7, #24]
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d1e:	4a1e      	ldr	r2, [pc, #120]	; (8002d98 <HAL_GPIO_Init+0x350>)
 8002d20:	69bb      	ldr	r3, [r7, #24]
 8002d22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d24:	4b1c      	ldr	r3, [pc, #112]	; (8002d98 <HAL_GPIO_Init+0x350>)
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	43db      	mvns	r3, r3
 8002d2e:	69ba      	ldr	r2, [r7, #24]
 8002d30:	4013      	ands	r3, r2
 8002d32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d003      	beq.n	8002d48 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002d40:	69ba      	ldr	r2, [r7, #24]
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d48:	4a13      	ldr	r2, [pc, #76]	; (8002d98 <HAL_GPIO_Init+0x350>)
 8002d4a:	69bb      	ldr	r3, [r7, #24]
 8002d4c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	3301      	adds	r3, #1
 8002d52:	61fb      	str	r3, [r7, #28]
 8002d54:	69fb      	ldr	r3, [r7, #28]
 8002d56:	2b0f      	cmp	r3, #15
 8002d58:	f67f ae86 	bls.w	8002a68 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002d5c:	bf00      	nop
 8002d5e:	3724      	adds	r7, #36	; 0x24
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr
 8002d68:	40023800 	.word	0x40023800
 8002d6c:	40013800 	.word	0x40013800
 8002d70:	40020000 	.word	0x40020000
 8002d74:	40020400 	.word	0x40020400
 8002d78:	40020800 	.word	0x40020800
 8002d7c:	40020c00 	.word	0x40020c00
 8002d80:	40021000 	.word	0x40021000
 8002d84:	40021400 	.word	0x40021400
 8002d88:	40021800 	.word	0x40021800
 8002d8c:	40021c00 	.word	0x40021c00
 8002d90:	40022000 	.word	0x40022000
 8002d94:	40022400 	.word	0x40022400
 8002d98:	40013c00 	.word	0x40013c00

08002d9c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b085      	sub	sp, #20
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	460b      	mov	r3, r1
 8002da6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	691a      	ldr	r2, [r3, #16]
 8002dac:	887b      	ldrh	r3, [r7, #2]
 8002dae:	4013      	ands	r3, r2
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d002      	beq.n	8002dba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002db4:	2301      	movs	r3, #1
 8002db6:	73fb      	strb	r3, [r7, #15]
 8002db8:	e001      	b.n	8002dbe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002dbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3714      	adds	r7, #20
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr

08002dcc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b083      	sub	sp, #12
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	460b      	mov	r3, r1
 8002dd6:	807b      	strh	r3, [r7, #2]
 8002dd8:	4613      	mov	r3, r2
 8002dda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ddc:	787b      	ldrb	r3, [r7, #1]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d003      	beq.n	8002dea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002de2:	887a      	ldrh	r2, [r7, #2]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002de8:	e003      	b.n	8002df2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002dea:	887b      	ldrh	r3, [r7, #2]
 8002dec:	041a      	lsls	r2, r3, #16
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	619a      	str	r2, [r3, #24]
}
 8002df2:	bf00      	nop
 8002df4:	370c      	adds	r7, #12
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr

08002dfe <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002dfe:	b480      	push	{r7}
 8002e00:	b083      	sub	sp, #12
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	6078      	str	r0, [r7, #4]
 8002e06:	460b      	mov	r3, r1
 8002e08:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	695a      	ldr	r2, [r3, #20]
 8002e0e:	887b      	ldrh	r3, [r7, #2]
 8002e10:	4013      	ands	r3, r2
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d004      	beq.n	8002e20 <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002e16:	887b      	ldrh	r3, [r7, #2]
 8002e18:	041a      	lsls	r2, r3, #16
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8002e1e:	e002      	b.n	8002e26 <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002e20:	887a      	ldrh	r2, [r7, #2]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	619a      	str	r2, [r3, #24]
}
 8002e26:	bf00      	nop
 8002e28:	370c      	adds	r7, #12
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr

08002e32 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002e32:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e34:	b08f      	sub	sp, #60	; 0x3c
 8002e36:	af0a      	add	r7, sp, #40	; 0x28
 8002e38:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d101      	bne.n	8002e44 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e116      	b.n	8003072 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d106      	bne.n	8002e64 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f012 fc46 	bl	80156f0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2203      	movs	r2, #3
 8002e68:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d102      	bne.n	8002e7e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4618      	mov	r0, r3
 8002e84:	f005 fed5 	bl	8008c32 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	603b      	str	r3, [r7, #0]
 8002e8e:	687e      	ldr	r6, [r7, #4]
 8002e90:	466d      	mov	r5, sp
 8002e92:	f106 0410 	add.w	r4, r6, #16
 8002e96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e9e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002ea2:	e885 0003 	stmia.w	r5, {r0, r1}
 8002ea6:	1d33      	adds	r3, r6, #4
 8002ea8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002eaa:	6838      	ldr	r0, [r7, #0]
 8002eac:	f005 fdb6 	bl	8008a1c <USB_CoreInit>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d005      	beq.n	8002ec2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2202      	movs	r2, #2
 8002eba:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e0d7      	b.n	8003072 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	2100      	movs	r1, #0
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f005 fec3 	bl	8008c54 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ece:	2300      	movs	r3, #0
 8002ed0:	73fb      	strb	r3, [r7, #15]
 8002ed2:	e04a      	b.n	8002f6a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002ed4:	7bfa      	ldrb	r2, [r7, #15]
 8002ed6:	6879      	ldr	r1, [r7, #4]
 8002ed8:	4613      	mov	r3, r2
 8002eda:	00db      	lsls	r3, r3, #3
 8002edc:	1a9b      	subs	r3, r3, r2
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	440b      	add	r3, r1
 8002ee2:	333d      	adds	r3, #61	; 0x3d
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002ee8:	7bfa      	ldrb	r2, [r7, #15]
 8002eea:	6879      	ldr	r1, [r7, #4]
 8002eec:	4613      	mov	r3, r2
 8002eee:	00db      	lsls	r3, r3, #3
 8002ef0:	1a9b      	subs	r3, r3, r2
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	440b      	add	r3, r1
 8002ef6:	333c      	adds	r3, #60	; 0x3c
 8002ef8:	7bfa      	ldrb	r2, [r7, #15]
 8002efa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002efc:	7bfa      	ldrb	r2, [r7, #15]
 8002efe:	7bfb      	ldrb	r3, [r7, #15]
 8002f00:	b298      	uxth	r0, r3
 8002f02:	6879      	ldr	r1, [r7, #4]
 8002f04:	4613      	mov	r3, r2
 8002f06:	00db      	lsls	r3, r3, #3
 8002f08:	1a9b      	subs	r3, r3, r2
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	440b      	add	r3, r1
 8002f0e:	3342      	adds	r3, #66	; 0x42
 8002f10:	4602      	mov	r2, r0
 8002f12:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002f14:	7bfa      	ldrb	r2, [r7, #15]
 8002f16:	6879      	ldr	r1, [r7, #4]
 8002f18:	4613      	mov	r3, r2
 8002f1a:	00db      	lsls	r3, r3, #3
 8002f1c:	1a9b      	subs	r3, r3, r2
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	440b      	add	r3, r1
 8002f22:	333f      	adds	r3, #63	; 0x3f
 8002f24:	2200      	movs	r2, #0
 8002f26:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002f28:	7bfa      	ldrb	r2, [r7, #15]
 8002f2a:	6879      	ldr	r1, [r7, #4]
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	00db      	lsls	r3, r3, #3
 8002f30:	1a9b      	subs	r3, r3, r2
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	440b      	add	r3, r1
 8002f36:	3344      	adds	r3, #68	; 0x44
 8002f38:	2200      	movs	r2, #0
 8002f3a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002f3c:	7bfa      	ldrb	r2, [r7, #15]
 8002f3e:	6879      	ldr	r1, [r7, #4]
 8002f40:	4613      	mov	r3, r2
 8002f42:	00db      	lsls	r3, r3, #3
 8002f44:	1a9b      	subs	r3, r3, r2
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	440b      	add	r3, r1
 8002f4a:	3348      	adds	r3, #72	; 0x48
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002f50:	7bfa      	ldrb	r2, [r7, #15]
 8002f52:	6879      	ldr	r1, [r7, #4]
 8002f54:	4613      	mov	r3, r2
 8002f56:	00db      	lsls	r3, r3, #3
 8002f58:	1a9b      	subs	r3, r3, r2
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	440b      	add	r3, r1
 8002f5e:	3350      	adds	r3, #80	; 0x50
 8002f60:	2200      	movs	r2, #0
 8002f62:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f64:	7bfb      	ldrb	r3, [r7, #15]
 8002f66:	3301      	adds	r3, #1
 8002f68:	73fb      	strb	r3, [r7, #15]
 8002f6a:	7bfa      	ldrb	r2, [r7, #15]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d3af      	bcc.n	8002ed4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f74:	2300      	movs	r3, #0
 8002f76:	73fb      	strb	r3, [r7, #15]
 8002f78:	e044      	b.n	8003004 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002f7a:	7bfa      	ldrb	r2, [r7, #15]
 8002f7c:	6879      	ldr	r1, [r7, #4]
 8002f7e:	4613      	mov	r3, r2
 8002f80:	00db      	lsls	r3, r3, #3
 8002f82:	1a9b      	subs	r3, r3, r2
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	440b      	add	r3, r1
 8002f88:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002f90:	7bfa      	ldrb	r2, [r7, #15]
 8002f92:	6879      	ldr	r1, [r7, #4]
 8002f94:	4613      	mov	r3, r2
 8002f96:	00db      	lsls	r3, r3, #3
 8002f98:	1a9b      	subs	r3, r3, r2
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	440b      	add	r3, r1
 8002f9e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002fa2:	7bfa      	ldrb	r2, [r7, #15]
 8002fa4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002fa6:	7bfa      	ldrb	r2, [r7, #15]
 8002fa8:	6879      	ldr	r1, [r7, #4]
 8002faa:	4613      	mov	r3, r2
 8002fac:	00db      	lsls	r3, r3, #3
 8002fae:	1a9b      	subs	r3, r3, r2
 8002fb0:	009b      	lsls	r3, r3, #2
 8002fb2:	440b      	add	r3, r1
 8002fb4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002fb8:	2200      	movs	r2, #0
 8002fba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002fbc:	7bfa      	ldrb	r2, [r7, #15]
 8002fbe:	6879      	ldr	r1, [r7, #4]
 8002fc0:	4613      	mov	r3, r2
 8002fc2:	00db      	lsls	r3, r3, #3
 8002fc4:	1a9b      	subs	r3, r3, r2
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	440b      	add	r3, r1
 8002fca:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002fce:	2200      	movs	r2, #0
 8002fd0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002fd2:	7bfa      	ldrb	r2, [r7, #15]
 8002fd4:	6879      	ldr	r1, [r7, #4]
 8002fd6:	4613      	mov	r3, r2
 8002fd8:	00db      	lsls	r3, r3, #3
 8002fda:	1a9b      	subs	r3, r3, r2
 8002fdc:	009b      	lsls	r3, r3, #2
 8002fde:	440b      	add	r3, r1
 8002fe0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002fe8:	7bfa      	ldrb	r2, [r7, #15]
 8002fea:	6879      	ldr	r1, [r7, #4]
 8002fec:	4613      	mov	r3, r2
 8002fee:	00db      	lsls	r3, r3, #3
 8002ff0:	1a9b      	subs	r3, r3, r2
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	440b      	add	r3, r1
 8002ff6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ffe:	7bfb      	ldrb	r3, [r7, #15]
 8003000:	3301      	adds	r3, #1
 8003002:	73fb      	strb	r3, [r7, #15]
 8003004:	7bfa      	ldrb	r2, [r7, #15]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	429a      	cmp	r2, r3
 800300c:	d3b5      	bcc.n	8002f7a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	603b      	str	r3, [r7, #0]
 8003014:	687e      	ldr	r6, [r7, #4]
 8003016:	466d      	mov	r5, sp
 8003018:	f106 0410 	add.w	r4, r6, #16
 800301c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800301e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003020:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003022:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003024:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003028:	e885 0003 	stmia.w	r5, {r0, r1}
 800302c:	1d33      	adds	r3, r6, #4
 800302e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003030:	6838      	ldr	r0, [r7, #0]
 8003032:	f005 fe39 	bl	8008ca8 <USB_DevInit>
 8003036:	4603      	mov	r3, r0
 8003038:	2b00      	cmp	r3, #0
 800303a:	d005      	beq.n	8003048 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2202      	movs	r2, #2
 8003040:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e014      	b.n	8003072 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2200      	movs	r2, #0
 800304c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800305c:	2b01      	cmp	r3, #1
 800305e:	d102      	bne.n	8003066 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	f001 f8ad 	bl	80041c0 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4618      	mov	r0, r3
 800306c:	f006 fe88 	bl	8009d80 <USB_DevDisconnect>

  return HAL_OK;
 8003070:	2300      	movs	r3, #0
}
 8003072:	4618      	mov	r0, r3
 8003074:	3714      	adds	r7, #20
 8003076:	46bd      	mov	sp, r7
 8003078:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800307a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800307a:	b580      	push	{r7, lr}
 800307c:	b082      	sub	sp, #8
 800307e:	af00      	add	r7, sp, #0
 8003080:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003088:	2b01      	cmp	r3, #1
 800308a:	d101      	bne.n	8003090 <HAL_PCD_Start+0x16>
 800308c:	2302      	movs	r3, #2
 800308e:	e012      	b.n	80030b6 <HAL_PCD_Start+0x3c>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2201      	movs	r2, #1
 8003094:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DevConnect(hpcd->Instance);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4618      	mov	r0, r3
 800309e:	f006 fe57 	bl	8009d50 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4618      	mov	r0, r3
 80030a8:	f005 fdb2 	bl	8008c10 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2200      	movs	r2, #0
 80030b0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80030b4:	2300      	movs	r3, #0
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3708      	adds	r7, #8
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}

080030be <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80030be:	b590      	push	{r4, r7, lr}
 80030c0:	b08d      	sub	sp, #52	; 0x34
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030cc:	6a3b      	ldr	r3, [r7, #32]
 80030ce:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4618      	mov	r0, r3
 80030d6:	f006 fefe 	bl	8009ed6 <USB_GetMode>
 80030da:	4603      	mov	r3, r0
 80030dc:	2b00      	cmp	r3, #0
 80030de:	f040 83ca 	bne.w	8003876 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4618      	mov	r0, r3
 80030e8:	f006 fe62 	bl	8009db0 <USB_ReadInterrupts>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	f000 83c0 	beq.w	8003874 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4618      	mov	r0, r3
 80030fa:	f006 fe59 	bl	8009db0 <USB_ReadInterrupts>
 80030fe:	4603      	mov	r3, r0
 8003100:	f003 0302 	and.w	r3, r3, #2
 8003104:	2b02      	cmp	r3, #2
 8003106:	d107      	bne.n	8003118 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	695a      	ldr	r2, [r3, #20]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f002 0202 	and.w	r2, r2, #2
 8003116:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4618      	mov	r0, r3
 800311e:	f006 fe47 	bl	8009db0 <USB_ReadInterrupts>
 8003122:	4603      	mov	r3, r0
 8003124:	f003 0310 	and.w	r3, r3, #16
 8003128:	2b10      	cmp	r3, #16
 800312a:	d161      	bne.n	80031f0 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	699a      	ldr	r2, [r3, #24]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f022 0210 	bic.w	r2, r2, #16
 800313a:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800313c:	6a3b      	ldr	r3, [r7, #32]
 800313e:	6a1b      	ldr	r3, [r3, #32]
 8003140:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8003142:	69bb      	ldr	r3, [r7, #24]
 8003144:	f003 020f 	and.w	r2, r3, #15
 8003148:	4613      	mov	r3, r2
 800314a:	00db      	lsls	r3, r3, #3
 800314c:	1a9b      	subs	r3, r3, r2
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003154:	687a      	ldr	r2, [r7, #4]
 8003156:	4413      	add	r3, r2
 8003158:	3304      	adds	r3, #4
 800315a:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800315c:	69bb      	ldr	r3, [r7, #24]
 800315e:	0c5b      	lsrs	r3, r3, #17
 8003160:	f003 030f 	and.w	r3, r3, #15
 8003164:	2b02      	cmp	r3, #2
 8003166:	d124      	bne.n	80031b2 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003168:	69ba      	ldr	r2, [r7, #24]
 800316a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800316e:	4013      	ands	r3, r2
 8003170:	2b00      	cmp	r3, #0
 8003172:	d035      	beq.n	80031e0 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003178:	69bb      	ldr	r3, [r7, #24]
 800317a:	091b      	lsrs	r3, r3, #4
 800317c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800317e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003182:	b29b      	uxth	r3, r3
 8003184:	461a      	mov	r2, r3
 8003186:	6a38      	ldr	r0, [r7, #32]
 8003188:	f006 fcbf 	bl	8009b0a <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	68da      	ldr	r2, [r3, #12]
 8003190:	69bb      	ldr	r3, [r7, #24]
 8003192:	091b      	lsrs	r3, r3, #4
 8003194:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003198:	441a      	add	r2, r3
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	699a      	ldr	r2, [r3, #24]
 80031a2:	69bb      	ldr	r3, [r7, #24]
 80031a4:	091b      	lsrs	r3, r3, #4
 80031a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80031aa:	441a      	add	r2, r3
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	619a      	str	r2, [r3, #24]
 80031b0:	e016      	b.n	80031e0 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80031b2:	69bb      	ldr	r3, [r7, #24]
 80031b4:	0c5b      	lsrs	r3, r3, #17
 80031b6:	f003 030f 	and.w	r3, r3, #15
 80031ba:	2b06      	cmp	r3, #6
 80031bc:	d110      	bne.n	80031e0 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80031c4:	2208      	movs	r2, #8
 80031c6:	4619      	mov	r1, r3
 80031c8:	6a38      	ldr	r0, [r7, #32]
 80031ca:	f006 fc9e 	bl	8009b0a <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	699a      	ldr	r2, [r3, #24]
 80031d2:	69bb      	ldr	r3, [r7, #24]
 80031d4:	091b      	lsrs	r3, r3, #4
 80031d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80031da:	441a      	add	r2, r3
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	699a      	ldr	r2, [r3, #24]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f042 0210 	orr.w	r2, r2, #16
 80031ee:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4618      	mov	r0, r3
 80031f6:	f006 fddb 	bl	8009db0 <USB_ReadInterrupts>
 80031fa:	4603      	mov	r3, r0
 80031fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003200:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003204:	d16e      	bne.n	80032e4 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8003206:	2300      	movs	r3, #0
 8003208:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4618      	mov	r0, r3
 8003210:	f006 fde1 	bl	8009dd6 <USB_ReadDevAllOutEpInterrupt>
 8003214:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003216:	e062      	b.n	80032de <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800321a:	f003 0301 	and.w	r3, r3, #1
 800321e:	2b00      	cmp	r3, #0
 8003220:	d057      	beq.n	80032d2 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003228:	b2d2      	uxtb	r2, r2
 800322a:	4611      	mov	r1, r2
 800322c:	4618      	mov	r0, r3
 800322e:	f006 fe06 	bl	8009e3e <USB_ReadDevOutEPInterrupt>
 8003232:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	f003 0301 	and.w	r3, r3, #1
 800323a:	2b00      	cmp	r3, #0
 800323c:	d00c      	beq.n	8003258 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800323e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003240:	015a      	lsls	r2, r3, #5
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	4413      	add	r3, r2
 8003246:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800324a:	461a      	mov	r2, r3
 800324c:	2301      	movs	r3, #1
 800324e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003250:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f000 fe0a 	bl	8003e6c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	f003 0308 	and.w	r3, r3, #8
 800325e:	2b00      	cmp	r3, #0
 8003260:	d00c      	beq.n	800327c <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003264:	015a      	lsls	r2, r3, #5
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	4413      	add	r3, r2
 800326a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800326e:	461a      	mov	r2, r3
 8003270:	2308      	movs	r3, #8
 8003272:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003274:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f000 ff04 	bl	8004084 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	f003 0310 	and.w	r3, r3, #16
 8003282:	2b00      	cmp	r3, #0
 8003284:	d008      	beq.n	8003298 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003288:	015a      	lsls	r2, r3, #5
 800328a:	69fb      	ldr	r3, [r7, #28]
 800328c:	4413      	add	r3, r2
 800328e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003292:	461a      	mov	r2, r3
 8003294:	2310      	movs	r3, #16
 8003296:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	f003 0320 	and.w	r3, r3, #32
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d008      	beq.n	80032b4 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80032a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a4:	015a      	lsls	r2, r3, #5
 80032a6:	69fb      	ldr	r3, [r7, #28]
 80032a8:	4413      	add	r3, r2
 80032aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032ae:	461a      	mov	r2, r3
 80032b0:	2320      	movs	r3, #32
 80032b2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d009      	beq.n	80032d2 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80032be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c0:	015a      	lsls	r2, r3, #5
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	4413      	add	r3, r2
 80032c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032ca:	461a      	mov	r2, r3
 80032cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80032d0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80032d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d4:	3301      	adds	r3, #1
 80032d6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80032d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032da:	085b      	lsrs	r3, r3, #1
 80032dc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80032de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d199      	bne.n	8003218 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4618      	mov	r0, r3
 80032ea:	f006 fd61 	bl	8009db0 <USB_ReadInterrupts>
 80032ee:	4603      	mov	r3, r0
 80032f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032f4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80032f8:	f040 80c0 	bne.w	800347c <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4618      	mov	r0, r3
 8003302:	f006 fd82 	bl	8009e0a <USB_ReadDevAllInEpInterrupt>
 8003306:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003308:	2300      	movs	r3, #0
 800330a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800330c:	e0b2      	b.n	8003474 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800330e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003310:	f003 0301 	and.w	r3, r3, #1
 8003314:	2b00      	cmp	r3, #0
 8003316:	f000 80a7 	beq.w	8003468 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003320:	b2d2      	uxtb	r2, r2
 8003322:	4611      	mov	r1, r2
 8003324:	4618      	mov	r0, r3
 8003326:	f006 fda8 	bl	8009e7a <USB_ReadDevInEPInterrupt>
 800332a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	f003 0301 	and.w	r3, r3, #1
 8003332:	2b00      	cmp	r3, #0
 8003334:	d057      	beq.n	80033e6 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003338:	f003 030f 	and.w	r3, r3, #15
 800333c:	2201      	movs	r2, #1
 800333e:	fa02 f303 	lsl.w	r3, r2, r3
 8003342:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003344:	69fb      	ldr	r3, [r7, #28]
 8003346:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800334a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	43db      	mvns	r3, r3
 8003350:	69f9      	ldr	r1, [r7, #28]
 8003352:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003356:	4013      	ands	r3, r2
 8003358:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800335a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800335c:	015a      	lsls	r2, r3, #5
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	4413      	add	r3, r2
 8003362:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003366:	461a      	mov	r2, r3
 8003368:	2301      	movs	r3, #1
 800336a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	691b      	ldr	r3, [r3, #16]
 8003370:	2b01      	cmp	r3, #1
 8003372:	d132      	bne.n	80033da <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003374:	6879      	ldr	r1, [r7, #4]
 8003376:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003378:	4613      	mov	r3, r2
 800337a:	00db      	lsls	r3, r3, #3
 800337c:	1a9b      	subs	r3, r3, r2
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	440b      	add	r3, r1
 8003382:	3348      	adds	r3, #72	; 0x48
 8003384:	6819      	ldr	r1, [r3, #0]
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800338a:	4613      	mov	r3, r2
 800338c:	00db      	lsls	r3, r3, #3
 800338e:	1a9b      	subs	r3, r3, r2
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	4403      	add	r3, r0
 8003394:	3344      	adds	r3, #68	; 0x44
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4419      	add	r1, r3
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800339e:	4613      	mov	r3, r2
 80033a0:	00db      	lsls	r3, r3, #3
 80033a2:	1a9b      	subs	r3, r3, r2
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	4403      	add	r3, r0
 80033a8:	3348      	adds	r3, #72	; 0x48
 80033aa:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80033ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d113      	bne.n	80033da <HAL_PCD_IRQHandler+0x31c>
 80033b2:	6879      	ldr	r1, [r7, #4]
 80033b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033b6:	4613      	mov	r3, r2
 80033b8:	00db      	lsls	r3, r3, #3
 80033ba:	1a9b      	subs	r3, r3, r2
 80033bc:	009b      	lsls	r3, r3, #2
 80033be:	440b      	add	r3, r1
 80033c0:	3350      	adds	r3, #80	; 0x50
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d108      	bne.n	80033da <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6818      	ldr	r0, [r3, #0]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80033d2:	461a      	mov	r2, r3
 80033d4:	2101      	movs	r1, #1
 80033d6:	f006 fdb1 	bl	8009f3c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80033da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	4619      	mov	r1, r3
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f012 fa08 	bl	80157f6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	f003 0308 	and.w	r3, r3, #8
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d008      	beq.n	8003402 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80033f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f2:	015a      	lsls	r2, r3, #5
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	4413      	add	r3, r2
 80033f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033fc:	461a      	mov	r2, r3
 80033fe:	2308      	movs	r3, #8
 8003400:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	f003 0310 	and.w	r3, r3, #16
 8003408:	2b00      	cmp	r3, #0
 800340a:	d008      	beq.n	800341e <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800340c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340e:	015a      	lsls	r2, r3, #5
 8003410:	69fb      	ldr	r3, [r7, #28]
 8003412:	4413      	add	r3, r2
 8003414:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003418:	461a      	mov	r2, r3
 800341a:	2310      	movs	r3, #16
 800341c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003424:	2b00      	cmp	r3, #0
 8003426:	d008      	beq.n	800343a <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800342a:	015a      	lsls	r2, r3, #5
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	4413      	add	r3, r2
 8003430:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003434:	461a      	mov	r2, r3
 8003436:	2340      	movs	r3, #64	; 0x40
 8003438:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	f003 0302 	and.w	r3, r3, #2
 8003440:	2b00      	cmp	r3, #0
 8003442:	d008      	beq.n	8003456 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003446:	015a      	lsls	r2, r3, #5
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	4413      	add	r3, r2
 800344c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003450:	461a      	mov	r2, r3
 8003452:	2302      	movs	r3, #2
 8003454:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800345c:	2b00      	cmp	r3, #0
 800345e:	d003      	beq.n	8003468 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003460:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f000 fc75 	bl	8003d52 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346a:	3301      	adds	r3, #1
 800346c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800346e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003470:	085b      	lsrs	r3, r3, #1
 8003472:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003476:	2b00      	cmp	r3, #0
 8003478:	f47f af49 	bne.w	800330e <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4618      	mov	r0, r3
 8003482:	f006 fc95 	bl	8009db0 <USB_ReadInterrupts>
 8003486:	4603      	mov	r3, r0
 8003488:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800348c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003490:	d122      	bne.n	80034d8 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	69fa      	ldr	r2, [r7, #28]
 800349c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034a0:	f023 0301 	bic.w	r3, r3, #1
 80034a4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d108      	bne.n	80034c2 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2200      	movs	r2, #0
 80034b4:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80034b8:	2100      	movs	r1, #0
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f012 fc0a 	bl	8015cd4 <HAL_PCDEx_LPM_Callback>
 80034c0:	e002      	b.n	80034c8 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f012 fa0e 	bl	80158e4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	695a      	ldr	r2, [r3, #20]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80034d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4618      	mov	r0, r3
 80034de:	f006 fc67 	bl	8009db0 <USB_ReadInterrupts>
 80034e2:	4603      	mov	r3, r0
 80034e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034ec:	d112      	bne.n	8003514 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	f003 0301 	and.w	r3, r3, #1
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d102      	bne.n	8003504 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f012 f9ca 	bl	8015898 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	695a      	ldr	r2, [r3, #20]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003512:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4618      	mov	r0, r3
 800351a:	f006 fc49 	bl	8009db0 <USB_ReadInterrupts>
 800351e:	4603      	mov	r3, r0
 8003520:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003524:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003528:	d121      	bne.n	800356e <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	695a      	ldr	r2, [r3, #20]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003538:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003540:	2b00      	cmp	r3, #0
 8003542:	d111      	bne.n	8003568 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003552:	089b      	lsrs	r3, r3, #2
 8003554:	f003 020f 	and.w	r2, r3, #15
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800355e:	2101      	movs	r1, #1
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	f012 fbb7 	bl	8015cd4 <HAL_PCDEx_LPM_Callback>
 8003566:	e002      	b.n	800356e <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f012 f995 	bl	8015898 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4618      	mov	r0, r3
 8003574:	f006 fc1c 	bl	8009db0 <USB_ReadInterrupts>
 8003578:	4603      	mov	r3, r0
 800357a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800357e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003582:	f040 80c7 	bne.w	8003714 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003586:	69fb      	ldr	r3, [r7, #28]
 8003588:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	69fa      	ldr	r2, [r7, #28]
 8003590:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003594:	f023 0301 	bic.w	r3, r3, #1
 8003598:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	2110      	movs	r1, #16
 80035a0:	4618      	mov	r0, r3
 80035a2:	f005 fcef 	bl	8008f84 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035a6:	2300      	movs	r3, #0
 80035a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035aa:	e056      	b.n	800365a <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80035ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035ae:	015a      	lsls	r2, r3, #5
 80035b0:	69fb      	ldr	r3, [r7, #28]
 80035b2:	4413      	add	r3, r2
 80035b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035b8:	461a      	mov	r2, r3
 80035ba:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80035be:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80035c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035c2:	015a      	lsls	r2, r3, #5
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	4413      	add	r3, r2
 80035c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035d0:	0151      	lsls	r1, r2, #5
 80035d2:	69fa      	ldr	r2, [r7, #28]
 80035d4:	440a      	add	r2, r1
 80035d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80035da:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80035de:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80035e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035e2:	015a      	lsls	r2, r3, #5
 80035e4:	69fb      	ldr	r3, [r7, #28]
 80035e6:	4413      	add	r3, r2
 80035e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035f0:	0151      	lsls	r1, r2, #5
 80035f2:	69fa      	ldr	r2, [r7, #28]
 80035f4:	440a      	add	r2, r1
 80035f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80035fa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80035fe:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003602:	015a      	lsls	r2, r3, #5
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	4413      	add	r3, r2
 8003608:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800360c:	461a      	mov	r2, r3
 800360e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003612:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003616:	015a      	lsls	r2, r3, #5
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	4413      	add	r3, r2
 800361c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003624:	0151      	lsls	r1, r2, #5
 8003626:	69fa      	ldr	r2, [r7, #28]
 8003628:	440a      	add	r2, r1
 800362a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800362e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003632:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003636:	015a      	lsls	r2, r3, #5
 8003638:	69fb      	ldr	r3, [r7, #28]
 800363a:	4413      	add	r3, r2
 800363c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003644:	0151      	lsls	r1, r2, #5
 8003646:	69fa      	ldr	r2, [r7, #28]
 8003648:	440a      	add	r2, r1
 800364a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800364e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003652:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003656:	3301      	adds	r3, #1
 8003658:	62fb      	str	r3, [r7, #44]	; 0x2c
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003660:	429a      	cmp	r2, r3
 8003662:	d3a3      	bcc.n	80035ac <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003664:	69fb      	ldr	r3, [r7, #28]
 8003666:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800366a:	69db      	ldr	r3, [r3, #28]
 800366c:	69fa      	ldr	r2, [r7, #28]
 800366e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003672:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003676:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800367c:	2b00      	cmp	r3, #0
 800367e:	d016      	beq.n	80036ae <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003680:	69fb      	ldr	r3, [r7, #28]
 8003682:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003686:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800368a:	69fa      	ldr	r2, [r7, #28]
 800368c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003690:	f043 030b 	orr.w	r3, r3, #11
 8003694:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003698:	69fb      	ldr	r3, [r7, #28]
 800369a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800369e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036a0:	69fa      	ldr	r2, [r7, #28]
 80036a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036a6:	f043 030b 	orr.w	r3, r3, #11
 80036aa:	6453      	str	r3, [r2, #68]	; 0x44
 80036ac:	e015      	b.n	80036da <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036b4:	695a      	ldr	r2, [r3, #20]
 80036b6:	69fb      	ldr	r3, [r7, #28]
 80036b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036bc:	4619      	mov	r1, r3
 80036be:	f242 032b 	movw	r3, #8235	; 0x202b
 80036c2:	4313      	orrs	r3, r2
 80036c4:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80036c6:	69fb      	ldr	r3, [r7, #28]
 80036c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036cc:	691b      	ldr	r3, [r3, #16]
 80036ce:	69fa      	ldr	r2, [r7, #28]
 80036d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036d4:	f043 030b 	orr.w	r3, r3, #11
 80036d8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	69fa      	ldr	r2, [r7, #28]
 80036e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036e8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80036ec:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6818      	ldr	r0, [r3, #0]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	691b      	ldr	r3, [r3, #16]
 80036f6:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80036fe:	461a      	mov	r2, r3
 8003700:	f006 fc1c 	bl	8009f3c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	695a      	ldr	r2, [r3, #20]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003712:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4618      	mov	r0, r3
 800371a:	f006 fb49 	bl	8009db0 <USB_ReadInterrupts>
 800371e:	4603      	mov	r3, r0
 8003720:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003724:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003728:	d124      	bne.n	8003774 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4618      	mov	r0, r3
 8003730:	f006 fbe0 	bl	8009ef4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4618      	mov	r0, r3
 800373a:	f005 fc84 	bl	8009046 <USB_GetDevSpeed>
 800373e:	4603      	mov	r3, r0
 8003740:	461a      	mov	r2, r3
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681c      	ldr	r4, [r3, #0]
 800374a:	f001 fa2f 	bl	8004bac <HAL_RCC_GetHCLKFreq>
 800374e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003754:	b2db      	uxtb	r3, r3
 8003756:	461a      	mov	r2, r3
 8003758:	4620      	mov	r0, r4
 800375a:	f005 f9b7 	bl	8008acc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f012 f871 	bl	8015846 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	695a      	ldr	r2, [r3, #20]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003772:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4618      	mov	r0, r3
 800377a:	f006 fb19 	bl	8009db0 <USB_ReadInterrupts>
 800377e:	4603      	mov	r3, r0
 8003780:	f003 0308 	and.w	r3, r3, #8
 8003784:	2b08      	cmp	r3, #8
 8003786:	d10a      	bne.n	800379e <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	f012 f84e 	bl	801582a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	695a      	ldr	r2, [r3, #20]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f002 0208 	and.w	r2, r2, #8
 800379c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4618      	mov	r0, r3
 80037a4:	f006 fb04 	bl	8009db0 <USB_ReadInterrupts>
 80037a8:	4603      	mov	r3, r0
 80037aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037b2:	d10f      	bne.n	80037d4 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80037b4:	2300      	movs	r3, #0
 80037b6:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80037b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	4619      	mov	r1, r3
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f012 f8b0 	bl	8015924 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	695a      	ldr	r2, [r3, #20]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80037d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4618      	mov	r0, r3
 80037da:	f006 fae9 	bl	8009db0 <USB_ReadInterrupts>
 80037de:	4603      	mov	r3, r0
 80037e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80037e8:	d10f      	bne.n	800380a <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80037ea:	2300      	movs	r3, #0
 80037ec:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80037ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	4619      	mov	r1, r3
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f012 f883 	bl	8015900 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	695a      	ldr	r2, [r3, #20]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003808:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4618      	mov	r0, r3
 8003810:	f006 face 	bl	8009db0 <USB_ReadInterrupts>
 8003814:	4603      	mov	r3, r0
 8003816:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800381a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800381e:	d10a      	bne.n	8003836 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	f012 f891 	bl	8015948 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	695a      	ldr	r2, [r3, #20]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003834:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4618      	mov	r0, r3
 800383c:	f006 fab8 	bl	8009db0 <USB_ReadInterrupts>
 8003840:	4603      	mov	r3, r0
 8003842:	f003 0304 	and.w	r3, r3, #4
 8003846:	2b04      	cmp	r3, #4
 8003848:	d115      	bne.n	8003876 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003852:	69bb      	ldr	r3, [r7, #24]
 8003854:	f003 0304 	and.w	r3, r3, #4
 8003858:	2b00      	cmp	r3, #0
 800385a:	d002      	beq.n	8003862 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	f012 f881 	bl	8015964 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	6859      	ldr	r1, [r3, #4]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	69ba      	ldr	r2, [r7, #24]
 800386e:	430a      	orrs	r2, r1
 8003870:	605a      	str	r2, [r3, #4]
 8003872:	e000      	b.n	8003876 <HAL_PCD_IRQHandler+0x7b8>
      return;
 8003874:	bf00      	nop
    }
  }
}
 8003876:	3734      	adds	r7, #52	; 0x34
 8003878:	46bd      	mov	sp, r7
 800387a:	bd90      	pop	{r4, r7, pc}

0800387c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b082      	sub	sp, #8
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	460b      	mov	r3, r1
 8003886:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800388e:	2b01      	cmp	r3, #1
 8003890:	d101      	bne.n	8003896 <HAL_PCD_SetAddress+0x1a>
 8003892:	2302      	movs	r3, #2
 8003894:	e013      	b.n	80038be <HAL_PCD_SetAddress+0x42>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2201      	movs	r2, #1
 800389a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	78fa      	ldrb	r2, [r7, #3]
 80038a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	78fa      	ldrb	r2, [r7, #3]
 80038ac:	4611      	mov	r1, r2
 80038ae:	4618      	mov	r0, r3
 80038b0:	f006 fa28 	bl	8009d04 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2200      	movs	r2, #0
 80038b8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80038bc:	2300      	movs	r3, #0
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3708      	adds	r7, #8
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}

080038c6 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80038c6:	b580      	push	{r7, lr}
 80038c8:	b084      	sub	sp, #16
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	6078      	str	r0, [r7, #4]
 80038ce:	4608      	mov	r0, r1
 80038d0:	4611      	mov	r1, r2
 80038d2:	461a      	mov	r2, r3
 80038d4:	4603      	mov	r3, r0
 80038d6:	70fb      	strb	r3, [r7, #3]
 80038d8:	460b      	mov	r3, r1
 80038da:	803b      	strh	r3, [r7, #0]
 80038dc:	4613      	mov	r3, r2
 80038de:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80038e0:	2300      	movs	r3, #0
 80038e2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80038e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	da0f      	bge.n	800390c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038ec:	78fb      	ldrb	r3, [r7, #3]
 80038ee:	f003 020f 	and.w	r2, r3, #15
 80038f2:	4613      	mov	r3, r2
 80038f4:	00db      	lsls	r3, r3, #3
 80038f6:	1a9b      	subs	r3, r3, r2
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	3338      	adds	r3, #56	; 0x38
 80038fc:	687a      	ldr	r2, [r7, #4]
 80038fe:	4413      	add	r3, r2
 8003900:	3304      	adds	r3, #4
 8003902:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2201      	movs	r2, #1
 8003908:	705a      	strb	r2, [r3, #1]
 800390a:	e00f      	b.n	800392c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800390c:	78fb      	ldrb	r3, [r7, #3]
 800390e:	f003 020f 	and.w	r2, r3, #15
 8003912:	4613      	mov	r3, r2
 8003914:	00db      	lsls	r3, r3, #3
 8003916:	1a9b      	subs	r3, r3, r2
 8003918:	009b      	lsls	r3, r3, #2
 800391a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800391e:	687a      	ldr	r2, [r7, #4]
 8003920:	4413      	add	r3, r2
 8003922:	3304      	adds	r3, #4
 8003924:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2200      	movs	r2, #0
 800392a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800392c:	78fb      	ldrb	r3, [r7, #3]
 800392e:	f003 030f 	and.w	r3, r3, #15
 8003932:	b2da      	uxtb	r2, r3
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003938:	883a      	ldrh	r2, [r7, #0]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	78ba      	ldrb	r2, [r7, #2]
 8003942:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	785b      	ldrb	r3, [r3, #1]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d004      	beq.n	8003956 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	781b      	ldrb	r3, [r3, #0]
 8003950:	b29a      	uxth	r2, r3
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003956:	78bb      	ldrb	r3, [r7, #2]
 8003958:	2b02      	cmp	r3, #2
 800395a:	d102      	bne.n	8003962 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2200      	movs	r2, #0
 8003960:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003968:	2b01      	cmp	r3, #1
 800396a:	d101      	bne.n	8003970 <HAL_PCD_EP_Open+0xaa>
 800396c:	2302      	movs	r3, #2
 800396e:	e00e      	b.n	800398e <HAL_PCD_EP_Open+0xc8>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2201      	movs	r2, #1
 8003974:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	68f9      	ldr	r1, [r7, #12]
 800397e:	4618      	mov	r0, r3
 8003980:	f005 fb86 	bl	8009090 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2200      	movs	r2, #0
 8003988:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800398c:	7afb      	ldrb	r3, [r7, #11]
}
 800398e:	4618      	mov	r0, r3
 8003990:	3710      	adds	r7, #16
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}

08003996 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003996:	b580      	push	{r7, lr}
 8003998:	b084      	sub	sp, #16
 800399a:	af00      	add	r7, sp, #0
 800399c:	6078      	str	r0, [r7, #4]
 800399e:	460b      	mov	r3, r1
 80039a0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80039a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	da0f      	bge.n	80039ca <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039aa:	78fb      	ldrb	r3, [r7, #3]
 80039ac:	f003 020f 	and.w	r2, r3, #15
 80039b0:	4613      	mov	r3, r2
 80039b2:	00db      	lsls	r3, r3, #3
 80039b4:	1a9b      	subs	r3, r3, r2
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	3338      	adds	r3, #56	; 0x38
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	4413      	add	r3, r2
 80039be:	3304      	adds	r3, #4
 80039c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2201      	movs	r2, #1
 80039c6:	705a      	strb	r2, [r3, #1]
 80039c8:	e00f      	b.n	80039ea <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80039ca:	78fb      	ldrb	r3, [r7, #3]
 80039cc:	f003 020f 	and.w	r2, r3, #15
 80039d0:	4613      	mov	r3, r2
 80039d2:	00db      	lsls	r3, r3, #3
 80039d4:	1a9b      	subs	r3, r3, r2
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80039dc:	687a      	ldr	r2, [r7, #4]
 80039de:	4413      	add	r3, r2
 80039e0:	3304      	adds	r3, #4
 80039e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2200      	movs	r2, #0
 80039e8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80039ea:	78fb      	ldrb	r3, [r7, #3]
 80039ec:	f003 030f 	and.w	r3, r3, #15
 80039f0:	b2da      	uxtb	r2, r3
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d101      	bne.n	8003a04 <HAL_PCD_EP_Close+0x6e>
 8003a00:	2302      	movs	r3, #2
 8003a02:	e00e      	b.n	8003a22 <HAL_PCD_EP_Close+0x8c>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2201      	movs	r2, #1
 8003a08:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	68f9      	ldr	r1, [r7, #12]
 8003a12:	4618      	mov	r0, r3
 8003a14:	f005 fbc4 	bl	80091a0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003a20:	2300      	movs	r3, #0
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3710      	adds	r7, #16
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}

08003a2a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003a2a:	b580      	push	{r7, lr}
 8003a2c:	b086      	sub	sp, #24
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	60f8      	str	r0, [r7, #12]
 8003a32:	607a      	str	r2, [r7, #4]
 8003a34:	603b      	str	r3, [r7, #0]
 8003a36:	460b      	mov	r3, r1
 8003a38:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a3a:	7afb      	ldrb	r3, [r7, #11]
 8003a3c:	f003 020f 	and.w	r2, r3, #15
 8003a40:	4613      	mov	r3, r2
 8003a42:	00db      	lsls	r3, r3, #3
 8003a44:	1a9b      	subs	r3, r3, r2
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003a4c:	68fa      	ldr	r2, [r7, #12]
 8003a4e:	4413      	add	r3, r2
 8003a50:	3304      	adds	r3, #4
 8003a52:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	687a      	ldr	r2, [r7, #4]
 8003a58:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	683a      	ldr	r2, [r7, #0]
 8003a5e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	2200      	movs	r2, #0
 8003a64:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a6c:	7afb      	ldrb	r3, [r7, #11]
 8003a6e:	f003 030f 	and.w	r3, r3, #15
 8003a72:	b2da      	uxtb	r2, r3
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	691b      	ldr	r3, [r3, #16]
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d102      	bne.n	8003a86 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003a86:	7afb      	ldrb	r3, [r7, #11]
 8003a88:	f003 030f 	and.w	r3, r3, #15
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d109      	bne.n	8003aa4 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	6818      	ldr	r0, [r3, #0]
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	691b      	ldr	r3, [r3, #16]
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	6979      	ldr	r1, [r7, #20]
 8003a9e:	f005 fea7 	bl	80097f0 <USB_EP0StartXfer>
 8003aa2:	e008      	b.n	8003ab6 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	6818      	ldr	r0, [r3, #0]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	691b      	ldr	r3, [r3, #16]
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	461a      	mov	r2, r3
 8003ab0:	6979      	ldr	r1, [r7, #20]
 8003ab2:	f005 fc51 	bl	8009358 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003ab6:	2300      	movs	r3, #0
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3718      	adds	r7, #24
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}

08003ac0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b083      	sub	sp, #12
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
 8003ac8:	460b      	mov	r3, r1
 8003aca:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003acc:	78fb      	ldrb	r3, [r7, #3]
 8003ace:	f003 020f 	and.w	r2, r3, #15
 8003ad2:	6879      	ldr	r1, [r7, #4]
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	00db      	lsls	r3, r3, #3
 8003ad8:	1a9b      	subs	r3, r3, r2
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	440b      	add	r3, r1
 8003ade:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003ae2:	681b      	ldr	r3, [r3, #0]
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	370c      	adds	r7, #12
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aee:	4770      	bx	lr

08003af0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b086      	sub	sp, #24
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	60f8      	str	r0, [r7, #12]
 8003af8:	607a      	str	r2, [r7, #4]
 8003afa:	603b      	str	r3, [r7, #0]
 8003afc:	460b      	mov	r3, r1
 8003afe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b00:	7afb      	ldrb	r3, [r7, #11]
 8003b02:	f003 020f 	and.w	r2, r3, #15
 8003b06:	4613      	mov	r3, r2
 8003b08:	00db      	lsls	r3, r3, #3
 8003b0a:	1a9b      	subs	r3, r3, r2
 8003b0c:	009b      	lsls	r3, r3, #2
 8003b0e:	3338      	adds	r3, #56	; 0x38
 8003b10:	68fa      	ldr	r2, [r7, #12]
 8003b12:	4413      	add	r3, r2
 8003b14:	3304      	adds	r3, #4
 8003b16:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	687a      	ldr	r2, [r7, #4]
 8003b1c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	683a      	ldr	r2, [r7, #0]
 8003b22:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	2200      	movs	r2, #0
 8003b28:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b30:	7afb      	ldrb	r3, [r7, #11]
 8003b32:	f003 030f 	and.w	r3, r3, #15
 8003b36:	b2da      	uxtb	r2, r3
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	691b      	ldr	r3, [r3, #16]
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d102      	bne.n	8003b4a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003b44:	687a      	ldr	r2, [r7, #4]
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003b4a:	7afb      	ldrb	r3, [r7, #11]
 8003b4c:	f003 030f 	and.w	r3, r3, #15
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d109      	bne.n	8003b68 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	6818      	ldr	r0, [r3, #0]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	691b      	ldr	r3, [r3, #16]
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	461a      	mov	r2, r3
 8003b60:	6979      	ldr	r1, [r7, #20]
 8003b62:	f005 fe45 	bl	80097f0 <USB_EP0StartXfer>
 8003b66:	e008      	b.n	8003b7a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	6818      	ldr	r0, [r3, #0]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	691b      	ldr	r3, [r3, #16]
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	461a      	mov	r2, r3
 8003b74:	6979      	ldr	r1, [r7, #20]
 8003b76:	f005 fbef 	bl	8009358 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003b7a:	2300      	movs	r3, #0
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	3718      	adds	r7, #24
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}

08003b84 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b084      	sub	sp, #16
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	460b      	mov	r3, r1
 8003b8e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003b90:	78fb      	ldrb	r3, [r7, #3]
 8003b92:	f003 020f 	and.w	r2, r3, #15
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d901      	bls.n	8003ba2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e050      	b.n	8003c44 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003ba2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	da0f      	bge.n	8003bca <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003baa:	78fb      	ldrb	r3, [r7, #3]
 8003bac:	f003 020f 	and.w	r2, r3, #15
 8003bb0:	4613      	mov	r3, r2
 8003bb2:	00db      	lsls	r3, r3, #3
 8003bb4:	1a9b      	subs	r3, r3, r2
 8003bb6:	009b      	lsls	r3, r3, #2
 8003bb8:	3338      	adds	r3, #56	; 0x38
 8003bba:	687a      	ldr	r2, [r7, #4]
 8003bbc:	4413      	add	r3, r2
 8003bbe:	3304      	adds	r3, #4
 8003bc0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	705a      	strb	r2, [r3, #1]
 8003bc8:	e00d      	b.n	8003be6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003bca:	78fa      	ldrb	r2, [r7, #3]
 8003bcc:	4613      	mov	r3, r2
 8003bce:	00db      	lsls	r3, r3, #3
 8003bd0:	1a9b      	subs	r3, r3, r2
 8003bd2:	009b      	lsls	r3, r3, #2
 8003bd4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	4413      	add	r3, r2
 8003bdc:	3304      	adds	r3, #4
 8003bde:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2200      	movs	r2, #0
 8003be4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2201      	movs	r2, #1
 8003bea:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003bec:	78fb      	ldrb	r3, [r7, #3]
 8003bee:	f003 030f 	and.w	r3, r3, #15
 8003bf2:	b2da      	uxtb	r2, r3
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d101      	bne.n	8003c06 <HAL_PCD_EP_SetStall+0x82>
 8003c02:	2302      	movs	r3, #2
 8003c04:	e01e      	b.n	8003c44 <HAL_PCD_EP_SetStall+0xc0>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2201      	movs	r2, #1
 8003c0a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	68f9      	ldr	r1, [r7, #12]
 8003c14:	4618      	mov	r0, r3
 8003c16:	f005 ffa1 	bl	8009b5c <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003c1a:	78fb      	ldrb	r3, [r7, #3]
 8003c1c:	f003 030f 	and.w	r3, r3, #15
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d10a      	bne.n	8003c3a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6818      	ldr	r0, [r3, #0]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	691b      	ldr	r3, [r3, #16]
 8003c2c:	b2d9      	uxtb	r1, r3
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003c34:	461a      	mov	r2, r3
 8003c36:	f006 f981 	bl	8009f3c <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003c42:	2300      	movs	r3, #0
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	3710      	adds	r7, #16
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}

08003c4c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b084      	sub	sp, #16
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
 8003c54:	460b      	mov	r3, r1
 8003c56:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003c58:	78fb      	ldrb	r3, [r7, #3]
 8003c5a:	f003 020f 	and.w	r2, r3, #15
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	429a      	cmp	r2, r3
 8003c64:	d901      	bls.n	8003c6a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e042      	b.n	8003cf0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003c6a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	da0f      	bge.n	8003c92 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c72:	78fb      	ldrb	r3, [r7, #3]
 8003c74:	f003 020f 	and.w	r2, r3, #15
 8003c78:	4613      	mov	r3, r2
 8003c7a:	00db      	lsls	r3, r3, #3
 8003c7c:	1a9b      	subs	r3, r3, r2
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	3338      	adds	r3, #56	; 0x38
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	4413      	add	r3, r2
 8003c86:	3304      	adds	r3, #4
 8003c88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	705a      	strb	r2, [r3, #1]
 8003c90:	e00f      	b.n	8003cb2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c92:	78fb      	ldrb	r3, [r7, #3]
 8003c94:	f003 020f 	and.w	r2, r3, #15
 8003c98:	4613      	mov	r3, r2
 8003c9a:	00db      	lsls	r3, r3, #3
 8003c9c:	1a9b      	subs	r3, r3, r2
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003ca4:	687a      	ldr	r2, [r7, #4]
 8003ca6:	4413      	add	r3, r2
 8003ca8:	3304      	adds	r3, #4
 8003caa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003cb8:	78fb      	ldrb	r3, [r7, #3]
 8003cba:	f003 030f 	and.w	r3, r3, #15
 8003cbe:	b2da      	uxtb	r2, r3
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d101      	bne.n	8003cd2 <HAL_PCD_EP_ClrStall+0x86>
 8003cce:	2302      	movs	r3, #2
 8003cd0:	e00e      	b.n	8003cf0 <HAL_PCD_EP_ClrStall+0xa4>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	68f9      	ldr	r1, [r7, #12]
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f005 ffa9 	bl	8009c38 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003cee:	2300      	movs	r3, #0
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	3710      	adds	r7, #16
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}

08003cf8 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b082      	sub	sp, #8
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
 8003d00:	460b      	mov	r3, r1
 8003d02:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d101      	bne.n	8003d12 <HAL_PCD_EP_Flush+0x1a>
 8003d0e:	2302      	movs	r3, #2
 8003d10:	e01b      	b.n	8003d4a <HAL_PCD_EP_Flush+0x52>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2201      	movs	r2, #1
 8003d16:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((ep_addr & 0x80U) == 0x80U)
 8003d1a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	da09      	bge.n	8003d36 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	78fb      	ldrb	r3, [r7, #3]
 8003d28:	f003 030f 	and.w	r3, r3, #15
 8003d2c:	4619      	mov	r1, r3
 8003d2e:	4610      	mov	r0, r2
 8003d30:	f005 f928 	bl	8008f84 <USB_FlushTxFifo>
 8003d34:	e004      	b.n	8003d40 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f005 f948 	bl	8008fd0 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2200      	movs	r2, #0
 8003d44:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003d48:	2300      	movs	r3, #0
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3708      	adds	r7, #8
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}

08003d52 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003d52:	b580      	push	{r7, lr}
 8003d54:	b08a      	sub	sp, #40	; 0x28
 8003d56:	af02      	add	r7, sp, #8
 8003d58:	6078      	str	r0, [r7, #4]
 8003d5a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003d66:	683a      	ldr	r2, [r7, #0]
 8003d68:	4613      	mov	r3, r2
 8003d6a:	00db      	lsls	r3, r3, #3
 8003d6c:	1a9b      	subs	r3, r3, r2
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	3338      	adds	r3, #56	; 0x38
 8003d72:	687a      	ldr	r2, [r7, #4]
 8003d74:	4413      	add	r3, r2
 8003d76:	3304      	adds	r3, #4
 8003d78:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	699a      	ldr	r2, [r3, #24]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	695b      	ldr	r3, [r3, #20]
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d901      	bls.n	8003d8a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e06c      	b.n	8003e64 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	695a      	ldr	r2, [r3, #20]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	699b      	ldr	r3, [r3, #24]
 8003d92:	1ad3      	subs	r3, r2, r3
 8003d94:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	69fa      	ldr	r2, [r7, #28]
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d902      	bls.n	8003da6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003da6:	69fb      	ldr	r3, [r7, #28]
 8003da8:	3303      	adds	r3, #3
 8003daa:	089b      	lsrs	r3, r3, #2
 8003dac:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003dae:	e02b      	b.n	8003e08 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	695a      	ldr	r2, [r3, #20]
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	699b      	ldr	r3, [r3, #24]
 8003db8:	1ad3      	subs	r3, r2, r3
 8003dba:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	69fa      	ldr	r2, [r7, #28]
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d902      	bls.n	8003dcc <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003dcc:	69fb      	ldr	r3, [r7, #28]
 8003dce:	3303      	adds	r3, #3
 8003dd0:	089b      	lsrs	r3, r3, #2
 8003dd2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	68d9      	ldr	r1, [r3, #12]
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	b2da      	uxtb	r2, r3
 8003ddc:	69fb      	ldr	r3, [r7, #28]
 8003dde:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	9300      	str	r3, [sp, #0]
 8003de8:	4603      	mov	r3, r0
 8003dea:	6978      	ldr	r0, [r7, #20]
 8003dec:	f005 fe58 	bl	8009aa0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	68da      	ldr	r2, [r3, #12]
 8003df4:	69fb      	ldr	r3, [r7, #28]
 8003df6:	441a      	add	r2, r3
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	699a      	ldr	r2, [r3, #24]
 8003e00:	69fb      	ldr	r3, [r7, #28]
 8003e02:	441a      	add	r2, r3
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	015a      	lsls	r2, r3, #5
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	4413      	add	r3, r2
 8003e10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e14:	699b      	ldr	r3, [r3, #24]
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	69ba      	ldr	r2, [r7, #24]
 8003e1a:	429a      	cmp	r2, r3
 8003e1c:	d809      	bhi.n	8003e32 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	699a      	ldr	r2, [r3, #24]
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003e26:	429a      	cmp	r2, r3
 8003e28:	d203      	bcs.n	8003e32 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	695b      	ldr	r3, [r3, #20]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d1be      	bne.n	8003db0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	695a      	ldr	r2, [r3, #20]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	699b      	ldr	r3, [r3, #24]
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d811      	bhi.n	8003e62 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	f003 030f 	and.w	r3, r3, #15
 8003e44:	2201      	movs	r2, #1
 8003e46:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	43db      	mvns	r3, r3
 8003e58:	6939      	ldr	r1, [r7, #16]
 8003e5a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e5e:	4013      	ands	r3, r2
 8003e60:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003e62:	2300      	movs	r3, #0
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	3720      	adds	r7, #32
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}

08003e6c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b086      	sub	sp, #24
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	333c      	adds	r3, #60	; 0x3c
 8003e84:	3304      	adds	r3, #4
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	015a      	lsls	r2, r3, #5
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	4413      	add	r3, r2
 8003e92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	691b      	ldr	r3, [r3, #16]
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	f040 80a0 	bne.w	8003fe4 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	f003 0308 	and.w	r3, r3, #8
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d015      	beq.n	8003eda <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	4a72      	ldr	r2, [pc, #456]	; (800407c <PCD_EP_OutXfrComplete_int+0x210>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	f240 80dd 	bls.w	8004072 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	f000 80d7 	beq.w	8004072 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	015a      	lsls	r2, r3, #5
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	4413      	add	r3, r2
 8003ecc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ed0:	461a      	mov	r2, r3
 8003ed2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ed6:	6093      	str	r3, [r2, #8]
 8003ed8:	e0cb      	b.n	8004072 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	f003 0320 	and.w	r3, r3, #32
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d009      	beq.n	8003ef8 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	015a      	lsls	r2, r3, #5
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	4413      	add	r3, r2
 8003eec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ef0:	461a      	mov	r2, r3
 8003ef2:	2320      	movs	r3, #32
 8003ef4:	6093      	str	r3, [r2, #8]
 8003ef6:	e0bc      	b.n	8004072 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	f040 80b7 	bne.w	8004072 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	4a5d      	ldr	r2, [pc, #372]	; (800407c <PCD_EP_OutXfrComplete_int+0x210>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d90f      	bls.n	8003f2c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d00a      	beq.n	8003f2c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	015a      	lsls	r2, r3, #5
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	4413      	add	r3, r2
 8003f1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f22:	461a      	mov	r2, r3
 8003f24:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f28:	6093      	str	r3, [r2, #8]
 8003f2a:	e0a2      	b.n	8004072 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003f2c:	6879      	ldr	r1, [r7, #4]
 8003f2e:	683a      	ldr	r2, [r7, #0]
 8003f30:	4613      	mov	r3, r2
 8003f32:	00db      	lsls	r3, r3, #3
 8003f34:	1a9b      	subs	r3, r3, r2
 8003f36:	009b      	lsls	r3, r3, #2
 8003f38:	440b      	add	r3, r1
 8003f3a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003f3e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	0159      	lsls	r1, r3, #5
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	440b      	add	r3, r1
 8003f48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f4c:	691b      	ldr	r3, [r3, #16]
 8003f4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003f52:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	683a      	ldr	r2, [r7, #0]
 8003f58:	4613      	mov	r3, r2
 8003f5a:	00db      	lsls	r3, r3, #3
 8003f5c:	1a9b      	subs	r3, r3, r2
 8003f5e:	009b      	lsls	r3, r3, #2
 8003f60:	4403      	add	r3, r0
 8003f62:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003f66:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003f68:	6879      	ldr	r1, [r7, #4]
 8003f6a:	683a      	ldr	r2, [r7, #0]
 8003f6c:	4613      	mov	r3, r2
 8003f6e:	00db      	lsls	r3, r3, #3
 8003f70:	1a9b      	subs	r3, r3, r2
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	440b      	add	r3, r1
 8003f76:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003f7a:	6819      	ldr	r1, [r3, #0]
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	683a      	ldr	r2, [r7, #0]
 8003f80:	4613      	mov	r3, r2
 8003f82:	00db      	lsls	r3, r3, #3
 8003f84:	1a9b      	subs	r3, r3, r2
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	4403      	add	r3, r0
 8003f8a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4419      	add	r1, r3
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	683a      	ldr	r2, [r7, #0]
 8003f96:	4613      	mov	r3, r2
 8003f98:	00db      	lsls	r3, r3, #3
 8003f9a:	1a9b      	subs	r3, r3, r2
 8003f9c:	009b      	lsls	r3, r3, #2
 8003f9e:	4403      	add	r3, r0
 8003fa0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003fa4:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d114      	bne.n	8003fd6 <PCD_EP_OutXfrComplete_int+0x16a>
 8003fac:	6879      	ldr	r1, [r7, #4]
 8003fae:	683a      	ldr	r2, [r7, #0]
 8003fb0:	4613      	mov	r3, r2
 8003fb2:	00db      	lsls	r3, r3, #3
 8003fb4:	1a9b      	subs	r3, r3, r2
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	440b      	add	r3, r1
 8003fba:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d108      	bne.n	8003fd6 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6818      	ldr	r0, [r3, #0]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003fce:	461a      	mov	r2, r3
 8003fd0:	2101      	movs	r1, #1
 8003fd2:	f005 ffb3 	bl	8009f3c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	4619      	mov	r1, r3
 8003fdc:	6878      	ldr	r0, [r7, #4]
 8003fde:	f011 fbef 	bl	80157c0 <HAL_PCD_DataOutStageCallback>
 8003fe2:	e046      	b.n	8004072 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	4a26      	ldr	r2, [pc, #152]	; (8004080 <PCD_EP_OutXfrComplete_int+0x214>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d124      	bne.n	8004036 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d00a      	beq.n	800400c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	015a      	lsls	r2, r3, #5
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	4413      	add	r3, r2
 8003ffe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004002:	461a      	mov	r2, r3
 8004004:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004008:	6093      	str	r3, [r2, #8]
 800400a:	e032      	b.n	8004072 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	f003 0320 	and.w	r3, r3, #32
 8004012:	2b00      	cmp	r3, #0
 8004014:	d008      	beq.n	8004028 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	015a      	lsls	r2, r3, #5
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	4413      	add	r3, r2
 800401e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004022:	461a      	mov	r2, r3
 8004024:	2320      	movs	r3, #32
 8004026:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	b2db      	uxtb	r3, r3
 800402c:	4619      	mov	r1, r3
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f011 fbc6 	bl	80157c0 <HAL_PCD_DataOutStageCallback>
 8004034:	e01d      	b.n	8004072 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d114      	bne.n	8004066 <PCD_EP_OutXfrComplete_int+0x1fa>
 800403c:	6879      	ldr	r1, [r7, #4]
 800403e:	683a      	ldr	r2, [r7, #0]
 8004040:	4613      	mov	r3, r2
 8004042:	00db      	lsls	r3, r3, #3
 8004044:	1a9b      	subs	r3, r3, r2
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	440b      	add	r3, r1
 800404a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d108      	bne.n	8004066 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6818      	ldr	r0, [r3, #0]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800405e:	461a      	mov	r2, r3
 8004060:	2100      	movs	r1, #0
 8004062:	f005 ff6b 	bl	8009f3c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	b2db      	uxtb	r3, r3
 800406a:	4619      	mov	r1, r3
 800406c:	6878      	ldr	r0, [r7, #4]
 800406e:	f011 fba7 	bl	80157c0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004072:	2300      	movs	r3, #0
}
 8004074:	4618      	mov	r0, r3
 8004076:	3718      	adds	r7, #24
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}
 800407c:	4f54300a 	.word	0x4f54300a
 8004080:	4f54310a 	.word	0x4f54310a

08004084 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b086      	sub	sp, #24
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
 800408c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	333c      	adds	r3, #60	; 0x3c
 800409c:	3304      	adds	r3, #4
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	015a      	lsls	r2, r3, #5
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	4413      	add	r3, r2
 80040aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	4a15      	ldr	r2, [pc, #84]	; (800410c <PCD_EP_OutSetupPacket_int+0x88>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d90e      	bls.n	80040d8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d009      	beq.n	80040d8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	015a      	lsls	r2, r3, #5
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	4413      	add	r3, r2
 80040cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040d0:	461a      	mov	r2, r3
 80040d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040d6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	f011 fb5f 	bl	801579c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	4a0a      	ldr	r2, [pc, #40]	; (800410c <PCD_EP_OutSetupPacket_int+0x88>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d90c      	bls.n	8004100 <PCD_EP_OutSetupPacket_int+0x7c>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	691b      	ldr	r3, [r3, #16]
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d108      	bne.n	8004100 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6818      	ldr	r0, [r3, #0]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80040f8:	461a      	mov	r2, r3
 80040fa:	2101      	movs	r1, #1
 80040fc:	f005 ff1e 	bl	8009f3c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004100:	2300      	movs	r3, #0
}
 8004102:	4618      	mov	r0, r3
 8004104:	3718      	adds	r7, #24
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}
 800410a:	bf00      	nop
 800410c:	4f54300a 	.word	0x4f54300a

08004110 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004110:	b480      	push	{r7}
 8004112:	b085      	sub	sp, #20
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
 8004118:	460b      	mov	r3, r1
 800411a:	70fb      	strb	r3, [r7, #3]
 800411c:	4613      	mov	r3, r2
 800411e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004126:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004128:	78fb      	ldrb	r3, [r7, #3]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d107      	bne.n	800413e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800412e:	883b      	ldrh	r3, [r7, #0]
 8004130:	0419      	lsls	r1, r3, #16
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	68ba      	ldr	r2, [r7, #8]
 8004138:	430a      	orrs	r2, r1
 800413a:	629a      	str	r2, [r3, #40]	; 0x28
 800413c:	e028      	b.n	8004190 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004144:	0c1b      	lsrs	r3, r3, #16
 8004146:	68ba      	ldr	r2, [r7, #8]
 8004148:	4413      	add	r3, r2
 800414a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800414c:	2300      	movs	r3, #0
 800414e:	73fb      	strb	r3, [r7, #15]
 8004150:	e00d      	b.n	800416e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	7bfb      	ldrb	r3, [r7, #15]
 8004158:	3340      	adds	r3, #64	; 0x40
 800415a:	009b      	lsls	r3, r3, #2
 800415c:	4413      	add	r3, r2
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	0c1b      	lsrs	r3, r3, #16
 8004162:	68ba      	ldr	r2, [r7, #8]
 8004164:	4413      	add	r3, r2
 8004166:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004168:	7bfb      	ldrb	r3, [r7, #15]
 800416a:	3301      	adds	r3, #1
 800416c:	73fb      	strb	r3, [r7, #15]
 800416e:	7bfa      	ldrb	r2, [r7, #15]
 8004170:	78fb      	ldrb	r3, [r7, #3]
 8004172:	3b01      	subs	r3, #1
 8004174:	429a      	cmp	r2, r3
 8004176:	d3ec      	bcc.n	8004152 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004178:	883b      	ldrh	r3, [r7, #0]
 800417a:	0418      	lsls	r0, r3, #16
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6819      	ldr	r1, [r3, #0]
 8004180:	78fb      	ldrb	r3, [r7, #3]
 8004182:	3b01      	subs	r3, #1
 8004184:	68ba      	ldr	r2, [r7, #8]
 8004186:	4302      	orrs	r2, r0
 8004188:	3340      	adds	r3, #64	; 0x40
 800418a:	009b      	lsls	r3, r3, #2
 800418c:	440b      	add	r3, r1
 800418e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004190:	2300      	movs	r3, #0
}
 8004192:	4618      	mov	r0, r3
 8004194:	3714      	adds	r7, #20
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr

0800419e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800419e:	b480      	push	{r7}
 80041a0:	b083      	sub	sp, #12
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	6078      	str	r0, [r7, #4]
 80041a6:	460b      	mov	r3, r1
 80041a8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	887a      	ldrh	r2, [r7, #2]
 80041b0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80041b2:	2300      	movs	r3, #0
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	370c      	adds	r7, #12
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr

080041c0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b085      	sub	sp, #20
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2201      	movs	r2, #1
 80041d2:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2200      	movs	r2, #0
 80041da:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	699b      	ldr	r3, [r3, #24]
 80041e2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80041ee:	4b05      	ldr	r3, [pc, #20]	; (8004204 <HAL_PCDEx_ActivateLPM+0x44>)
 80041f0:	4313      	orrs	r3, r2
 80041f2:	68fa      	ldr	r2, [r7, #12]
 80041f4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80041f6:	2300      	movs	r3, #0
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3714      	adds	r7, #20
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr
 8004204:	10000003 	.word	0x10000003

08004208 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004208:	b480      	push	{r7}
 800420a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800420c:	4b05      	ldr	r3, [pc, #20]	; (8004224 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a04      	ldr	r2, [pc, #16]	; (8004224 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004212:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004216:	6013      	str	r3, [r2, #0]
}
 8004218:	bf00      	nop
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr
 8004222:	bf00      	nop
 8004224:	40007000 	.word	0x40007000

08004228 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b082      	sub	sp, #8
 800422c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800422e:	2300      	movs	r3, #0
 8004230:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004232:	4b23      	ldr	r3, [pc, #140]	; (80042c0 <HAL_PWREx_EnableOverDrive+0x98>)
 8004234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004236:	4a22      	ldr	r2, [pc, #136]	; (80042c0 <HAL_PWREx_EnableOverDrive+0x98>)
 8004238:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800423c:	6413      	str	r3, [r2, #64]	; 0x40
 800423e:	4b20      	ldr	r3, [pc, #128]	; (80042c0 <HAL_PWREx_EnableOverDrive+0x98>)
 8004240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004242:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004246:	603b      	str	r3, [r7, #0]
 8004248:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800424a:	4b1e      	ldr	r3, [pc, #120]	; (80042c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a1d      	ldr	r2, [pc, #116]	; (80042c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004250:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004254:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004256:	f7fd f98f 	bl	8001578 <HAL_GetTick>
 800425a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800425c:	e009      	b.n	8004272 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800425e:	f7fd f98b 	bl	8001578 <HAL_GetTick>
 8004262:	4602      	mov	r2, r0
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	1ad3      	subs	r3, r2, r3
 8004268:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800426c:	d901      	bls.n	8004272 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800426e:	2303      	movs	r3, #3
 8004270:	e022      	b.n	80042b8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004272:	4b14      	ldr	r3, [pc, #80]	; (80042c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800427a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800427e:	d1ee      	bne.n	800425e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004280:	4b10      	ldr	r3, [pc, #64]	; (80042c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a0f      	ldr	r2, [pc, #60]	; (80042c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004286:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800428a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800428c:	f7fd f974 	bl	8001578 <HAL_GetTick>
 8004290:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004292:	e009      	b.n	80042a8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004294:	f7fd f970 	bl	8001578 <HAL_GetTick>
 8004298:	4602      	mov	r2, r0
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80042a2:	d901      	bls.n	80042a8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80042a4:	2303      	movs	r3, #3
 80042a6:	e007      	b.n	80042b8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80042a8:	4b06      	ldr	r3, [pc, #24]	; (80042c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80042b4:	d1ee      	bne.n	8004294 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80042b6:	2300      	movs	r3, #0
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	3708      	adds	r7, #8
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}
 80042c0:	40023800 	.word	0x40023800
 80042c4:	40007000 	.word	0x40007000

080042c8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b086      	sub	sp, #24
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80042d0:	2300      	movs	r3, #0
 80042d2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d101      	bne.n	80042de <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e29b      	b.n	8004816 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 0301 	and.w	r3, r3, #1
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	f000 8087 	beq.w	80043fa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80042ec:	4b96      	ldr	r3, [pc, #600]	; (8004548 <HAL_RCC_OscConfig+0x280>)
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	f003 030c 	and.w	r3, r3, #12
 80042f4:	2b04      	cmp	r3, #4
 80042f6:	d00c      	beq.n	8004312 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042f8:	4b93      	ldr	r3, [pc, #588]	; (8004548 <HAL_RCC_OscConfig+0x280>)
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	f003 030c 	and.w	r3, r3, #12
 8004300:	2b08      	cmp	r3, #8
 8004302:	d112      	bne.n	800432a <HAL_RCC_OscConfig+0x62>
 8004304:	4b90      	ldr	r3, [pc, #576]	; (8004548 <HAL_RCC_OscConfig+0x280>)
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800430c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004310:	d10b      	bne.n	800432a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004312:	4b8d      	ldr	r3, [pc, #564]	; (8004548 <HAL_RCC_OscConfig+0x280>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800431a:	2b00      	cmp	r3, #0
 800431c:	d06c      	beq.n	80043f8 <HAL_RCC_OscConfig+0x130>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d168      	bne.n	80043f8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e275      	b.n	8004816 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004332:	d106      	bne.n	8004342 <HAL_RCC_OscConfig+0x7a>
 8004334:	4b84      	ldr	r3, [pc, #528]	; (8004548 <HAL_RCC_OscConfig+0x280>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a83      	ldr	r2, [pc, #524]	; (8004548 <HAL_RCC_OscConfig+0x280>)
 800433a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800433e:	6013      	str	r3, [r2, #0]
 8004340:	e02e      	b.n	80043a0 <HAL_RCC_OscConfig+0xd8>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d10c      	bne.n	8004364 <HAL_RCC_OscConfig+0x9c>
 800434a:	4b7f      	ldr	r3, [pc, #508]	; (8004548 <HAL_RCC_OscConfig+0x280>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a7e      	ldr	r2, [pc, #504]	; (8004548 <HAL_RCC_OscConfig+0x280>)
 8004350:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004354:	6013      	str	r3, [r2, #0]
 8004356:	4b7c      	ldr	r3, [pc, #496]	; (8004548 <HAL_RCC_OscConfig+0x280>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a7b      	ldr	r2, [pc, #492]	; (8004548 <HAL_RCC_OscConfig+0x280>)
 800435c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004360:	6013      	str	r3, [r2, #0]
 8004362:	e01d      	b.n	80043a0 <HAL_RCC_OscConfig+0xd8>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800436c:	d10c      	bne.n	8004388 <HAL_RCC_OscConfig+0xc0>
 800436e:	4b76      	ldr	r3, [pc, #472]	; (8004548 <HAL_RCC_OscConfig+0x280>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a75      	ldr	r2, [pc, #468]	; (8004548 <HAL_RCC_OscConfig+0x280>)
 8004374:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004378:	6013      	str	r3, [r2, #0]
 800437a:	4b73      	ldr	r3, [pc, #460]	; (8004548 <HAL_RCC_OscConfig+0x280>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a72      	ldr	r2, [pc, #456]	; (8004548 <HAL_RCC_OscConfig+0x280>)
 8004380:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004384:	6013      	str	r3, [r2, #0]
 8004386:	e00b      	b.n	80043a0 <HAL_RCC_OscConfig+0xd8>
 8004388:	4b6f      	ldr	r3, [pc, #444]	; (8004548 <HAL_RCC_OscConfig+0x280>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a6e      	ldr	r2, [pc, #440]	; (8004548 <HAL_RCC_OscConfig+0x280>)
 800438e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004392:	6013      	str	r3, [r2, #0]
 8004394:	4b6c      	ldr	r3, [pc, #432]	; (8004548 <HAL_RCC_OscConfig+0x280>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a6b      	ldr	r2, [pc, #428]	; (8004548 <HAL_RCC_OscConfig+0x280>)
 800439a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800439e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d013      	beq.n	80043d0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043a8:	f7fd f8e6 	bl	8001578 <HAL_GetTick>
 80043ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043ae:	e008      	b.n	80043c2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043b0:	f7fd f8e2 	bl	8001578 <HAL_GetTick>
 80043b4:	4602      	mov	r2, r0
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	1ad3      	subs	r3, r2, r3
 80043ba:	2b64      	cmp	r3, #100	; 0x64
 80043bc:	d901      	bls.n	80043c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80043be:	2303      	movs	r3, #3
 80043c0:	e229      	b.n	8004816 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043c2:	4b61      	ldr	r3, [pc, #388]	; (8004548 <HAL_RCC_OscConfig+0x280>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d0f0      	beq.n	80043b0 <HAL_RCC_OscConfig+0xe8>
 80043ce:	e014      	b.n	80043fa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043d0:	f7fd f8d2 	bl	8001578 <HAL_GetTick>
 80043d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043d6:	e008      	b.n	80043ea <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043d8:	f7fd f8ce 	bl	8001578 <HAL_GetTick>
 80043dc:	4602      	mov	r2, r0
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	2b64      	cmp	r3, #100	; 0x64
 80043e4:	d901      	bls.n	80043ea <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80043e6:	2303      	movs	r3, #3
 80043e8:	e215      	b.n	8004816 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043ea:	4b57      	ldr	r3, [pc, #348]	; (8004548 <HAL_RCC_OscConfig+0x280>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d1f0      	bne.n	80043d8 <HAL_RCC_OscConfig+0x110>
 80043f6:	e000      	b.n	80043fa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f003 0302 	and.w	r3, r3, #2
 8004402:	2b00      	cmp	r3, #0
 8004404:	d069      	beq.n	80044da <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004406:	4b50      	ldr	r3, [pc, #320]	; (8004548 <HAL_RCC_OscConfig+0x280>)
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	f003 030c 	and.w	r3, r3, #12
 800440e:	2b00      	cmp	r3, #0
 8004410:	d00b      	beq.n	800442a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004412:	4b4d      	ldr	r3, [pc, #308]	; (8004548 <HAL_RCC_OscConfig+0x280>)
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	f003 030c 	and.w	r3, r3, #12
 800441a:	2b08      	cmp	r3, #8
 800441c:	d11c      	bne.n	8004458 <HAL_RCC_OscConfig+0x190>
 800441e:	4b4a      	ldr	r3, [pc, #296]	; (8004548 <HAL_RCC_OscConfig+0x280>)
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004426:	2b00      	cmp	r3, #0
 8004428:	d116      	bne.n	8004458 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800442a:	4b47      	ldr	r3, [pc, #284]	; (8004548 <HAL_RCC_OscConfig+0x280>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f003 0302 	and.w	r3, r3, #2
 8004432:	2b00      	cmp	r3, #0
 8004434:	d005      	beq.n	8004442 <HAL_RCC_OscConfig+0x17a>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	68db      	ldr	r3, [r3, #12]
 800443a:	2b01      	cmp	r3, #1
 800443c:	d001      	beq.n	8004442 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e1e9      	b.n	8004816 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004442:	4b41      	ldr	r3, [pc, #260]	; (8004548 <HAL_RCC_OscConfig+0x280>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	691b      	ldr	r3, [r3, #16]
 800444e:	00db      	lsls	r3, r3, #3
 8004450:	493d      	ldr	r1, [pc, #244]	; (8004548 <HAL_RCC_OscConfig+0x280>)
 8004452:	4313      	orrs	r3, r2
 8004454:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004456:	e040      	b.n	80044da <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d023      	beq.n	80044a8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004460:	4b39      	ldr	r3, [pc, #228]	; (8004548 <HAL_RCC_OscConfig+0x280>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a38      	ldr	r2, [pc, #224]	; (8004548 <HAL_RCC_OscConfig+0x280>)
 8004466:	f043 0301 	orr.w	r3, r3, #1
 800446a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800446c:	f7fd f884 	bl	8001578 <HAL_GetTick>
 8004470:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004472:	e008      	b.n	8004486 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004474:	f7fd f880 	bl	8001578 <HAL_GetTick>
 8004478:	4602      	mov	r2, r0
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	1ad3      	subs	r3, r2, r3
 800447e:	2b02      	cmp	r3, #2
 8004480:	d901      	bls.n	8004486 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004482:	2303      	movs	r3, #3
 8004484:	e1c7      	b.n	8004816 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004486:	4b30      	ldr	r3, [pc, #192]	; (8004548 <HAL_RCC_OscConfig+0x280>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 0302 	and.w	r3, r3, #2
 800448e:	2b00      	cmp	r3, #0
 8004490:	d0f0      	beq.n	8004474 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004492:	4b2d      	ldr	r3, [pc, #180]	; (8004548 <HAL_RCC_OscConfig+0x280>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	691b      	ldr	r3, [r3, #16]
 800449e:	00db      	lsls	r3, r3, #3
 80044a0:	4929      	ldr	r1, [pc, #164]	; (8004548 <HAL_RCC_OscConfig+0x280>)
 80044a2:	4313      	orrs	r3, r2
 80044a4:	600b      	str	r3, [r1, #0]
 80044a6:	e018      	b.n	80044da <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044a8:	4b27      	ldr	r3, [pc, #156]	; (8004548 <HAL_RCC_OscConfig+0x280>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a26      	ldr	r2, [pc, #152]	; (8004548 <HAL_RCC_OscConfig+0x280>)
 80044ae:	f023 0301 	bic.w	r3, r3, #1
 80044b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044b4:	f7fd f860 	bl	8001578 <HAL_GetTick>
 80044b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044ba:	e008      	b.n	80044ce <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044bc:	f7fd f85c 	bl	8001578 <HAL_GetTick>
 80044c0:	4602      	mov	r2, r0
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	2b02      	cmp	r3, #2
 80044c8:	d901      	bls.n	80044ce <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80044ca:	2303      	movs	r3, #3
 80044cc:	e1a3      	b.n	8004816 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044ce:	4b1e      	ldr	r3, [pc, #120]	; (8004548 <HAL_RCC_OscConfig+0x280>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f003 0302 	and.w	r3, r3, #2
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d1f0      	bne.n	80044bc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 0308 	and.w	r3, r3, #8
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d038      	beq.n	8004558 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	695b      	ldr	r3, [r3, #20]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d019      	beq.n	8004522 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044ee:	4b16      	ldr	r3, [pc, #88]	; (8004548 <HAL_RCC_OscConfig+0x280>)
 80044f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044f2:	4a15      	ldr	r2, [pc, #84]	; (8004548 <HAL_RCC_OscConfig+0x280>)
 80044f4:	f043 0301 	orr.w	r3, r3, #1
 80044f8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044fa:	f7fd f83d 	bl	8001578 <HAL_GetTick>
 80044fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004500:	e008      	b.n	8004514 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004502:	f7fd f839 	bl	8001578 <HAL_GetTick>
 8004506:	4602      	mov	r2, r0
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	1ad3      	subs	r3, r2, r3
 800450c:	2b02      	cmp	r3, #2
 800450e:	d901      	bls.n	8004514 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004510:	2303      	movs	r3, #3
 8004512:	e180      	b.n	8004816 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004514:	4b0c      	ldr	r3, [pc, #48]	; (8004548 <HAL_RCC_OscConfig+0x280>)
 8004516:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004518:	f003 0302 	and.w	r3, r3, #2
 800451c:	2b00      	cmp	r3, #0
 800451e:	d0f0      	beq.n	8004502 <HAL_RCC_OscConfig+0x23a>
 8004520:	e01a      	b.n	8004558 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004522:	4b09      	ldr	r3, [pc, #36]	; (8004548 <HAL_RCC_OscConfig+0x280>)
 8004524:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004526:	4a08      	ldr	r2, [pc, #32]	; (8004548 <HAL_RCC_OscConfig+0x280>)
 8004528:	f023 0301 	bic.w	r3, r3, #1
 800452c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800452e:	f7fd f823 	bl	8001578 <HAL_GetTick>
 8004532:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004534:	e00a      	b.n	800454c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004536:	f7fd f81f 	bl	8001578 <HAL_GetTick>
 800453a:	4602      	mov	r2, r0
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	1ad3      	subs	r3, r2, r3
 8004540:	2b02      	cmp	r3, #2
 8004542:	d903      	bls.n	800454c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004544:	2303      	movs	r3, #3
 8004546:	e166      	b.n	8004816 <HAL_RCC_OscConfig+0x54e>
 8004548:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800454c:	4b92      	ldr	r3, [pc, #584]	; (8004798 <HAL_RCC_OscConfig+0x4d0>)
 800454e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004550:	f003 0302 	and.w	r3, r3, #2
 8004554:	2b00      	cmp	r3, #0
 8004556:	d1ee      	bne.n	8004536 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f003 0304 	and.w	r3, r3, #4
 8004560:	2b00      	cmp	r3, #0
 8004562:	f000 80a4 	beq.w	80046ae <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004566:	4b8c      	ldr	r3, [pc, #560]	; (8004798 <HAL_RCC_OscConfig+0x4d0>)
 8004568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800456a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800456e:	2b00      	cmp	r3, #0
 8004570:	d10d      	bne.n	800458e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004572:	4b89      	ldr	r3, [pc, #548]	; (8004798 <HAL_RCC_OscConfig+0x4d0>)
 8004574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004576:	4a88      	ldr	r2, [pc, #544]	; (8004798 <HAL_RCC_OscConfig+0x4d0>)
 8004578:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800457c:	6413      	str	r3, [r2, #64]	; 0x40
 800457e:	4b86      	ldr	r3, [pc, #536]	; (8004798 <HAL_RCC_OscConfig+0x4d0>)
 8004580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004582:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004586:	60bb      	str	r3, [r7, #8]
 8004588:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800458a:	2301      	movs	r3, #1
 800458c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800458e:	4b83      	ldr	r3, [pc, #524]	; (800479c <HAL_RCC_OscConfig+0x4d4>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004596:	2b00      	cmp	r3, #0
 8004598:	d118      	bne.n	80045cc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800459a:	4b80      	ldr	r3, [pc, #512]	; (800479c <HAL_RCC_OscConfig+0x4d4>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a7f      	ldr	r2, [pc, #508]	; (800479c <HAL_RCC_OscConfig+0x4d4>)
 80045a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045a6:	f7fc ffe7 	bl	8001578 <HAL_GetTick>
 80045aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045ac:	e008      	b.n	80045c0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045ae:	f7fc ffe3 	bl	8001578 <HAL_GetTick>
 80045b2:	4602      	mov	r2, r0
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	1ad3      	subs	r3, r2, r3
 80045b8:	2b64      	cmp	r3, #100	; 0x64
 80045ba:	d901      	bls.n	80045c0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80045bc:	2303      	movs	r3, #3
 80045be:	e12a      	b.n	8004816 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045c0:	4b76      	ldr	r3, [pc, #472]	; (800479c <HAL_RCC_OscConfig+0x4d4>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d0f0      	beq.n	80045ae <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d106      	bne.n	80045e2 <HAL_RCC_OscConfig+0x31a>
 80045d4:	4b70      	ldr	r3, [pc, #448]	; (8004798 <HAL_RCC_OscConfig+0x4d0>)
 80045d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045d8:	4a6f      	ldr	r2, [pc, #444]	; (8004798 <HAL_RCC_OscConfig+0x4d0>)
 80045da:	f043 0301 	orr.w	r3, r3, #1
 80045de:	6713      	str	r3, [r2, #112]	; 0x70
 80045e0:	e02d      	b.n	800463e <HAL_RCC_OscConfig+0x376>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d10c      	bne.n	8004604 <HAL_RCC_OscConfig+0x33c>
 80045ea:	4b6b      	ldr	r3, [pc, #428]	; (8004798 <HAL_RCC_OscConfig+0x4d0>)
 80045ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ee:	4a6a      	ldr	r2, [pc, #424]	; (8004798 <HAL_RCC_OscConfig+0x4d0>)
 80045f0:	f023 0301 	bic.w	r3, r3, #1
 80045f4:	6713      	str	r3, [r2, #112]	; 0x70
 80045f6:	4b68      	ldr	r3, [pc, #416]	; (8004798 <HAL_RCC_OscConfig+0x4d0>)
 80045f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045fa:	4a67      	ldr	r2, [pc, #412]	; (8004798 <HAL_RCC_OscConfig+0x4d0>)
 80045fc:	f023 0304 	bic.w	r3, r3, #4
 8004600:	6713      	str	r3, [r2, #112]	; 0x70
 8004602:	e01c      	b.n	800463e <HAL_RCC_OscConfig+0x376>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	2b05      	cmp	r3, #5
 800460a:	d10c      	bne.n	8004626 <HAL_RCC_OscConfig+0x35e>
 800460c:	4b62      	ldr	r3, [pc, #392]	; (8004798 <HAL_RCC_OscConfig+0x4d0>)
 800460e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004610:	4a61      	ldr	r2, [pc, #388]	; (8004798 <HAL_RCC_OscConfig+0x4d0>)
 8004612:	f043 0304 	orr.w	r3, r3, #4
 8004616:	6713      	str	r3, [r2, #112]	; 0x70
 8004618:	4b5f      	ldr	r3, [pc, #380]	; (8004798 <HAL_RCC_OscConfig+0x4d0>)
 800461a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800461c:	4a5e      	ldr	r2, [pc, #376]	; (8004798 <HAL_RCC_OscConfig+0x4d0>)
 800461e:	f043 0301 	orr.w	r3, r3, #1
 8004622:	6713      	str	r3, [r2, #112]	; 0x70
 8004624:	e00b      	b.n	800463e <HAL_RCC_OscConfig+0x376>
 8004626:	4b5c      	ldr	r3, [pc, #368]	; (8004798 <HAL_RCC_OscConfig+0x4d0>)
 8004628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800462a:	4a5b      	ldr	r2, [pc, #364]	; (8004798 <HAL_RCC_OscConfig+0x4d0>)
 800462c:	f023 0301 	bic.w	r3, r3, #1
 8004630:	6713      	str	r3, [r2, #112]	; 0x70
 8004632:	4b59      	ldr	r3, [pc, #356]	; (8004798 <HAL_RCC_OscConfig+0x4d0>)
 8004634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004636:	4a58      	ldr	r2, [pc, #352]	; (8004798 <HAL_RCC_OscConfig+0x4d0>)
 8004638:	f023 0304 	bic.w	r3, r3, #4
 800463c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d015      	beq.n	8004672 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004646:	f7fc ff97 	bl	8001578 <HAL_GetTick>
 800464a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800464c:	e00a      	b.n	8004664 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800464e:	f7fc ff93 	bl	8001578 <HAL_GetTick>
 8004652:	4602      	mov	r2, r0
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	1ad3      	subs	r3, r2, r3
 8004658:	f241 3288 	movw	r2, #5000	; 0x1388
 800465c:	4293      	cmp	r3, r2
 800465e:	d901      	bls.n	8004664 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004660:	2303      	movs	r3, #3
 8004662:	e0d8      	b.n	8004816 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004664:	4b4c      	ldr	r3, [pc, #304]	; (8004798 <HAL_RCC_OscConfig+0x4d0>)
 8004666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004668:	f003 0302 	and.w	r3, r3, #2
 800466c:	2b00      	cmp	r3, #0
 800466e:	d0ee      	beq.n	800464e <HAL_RCC_OscConfig+0x386>
 8004670:	e014      	b.n	800469c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004672:	f7fc ff81 	bl	8001578 <HAL_GetTick>
 8004676:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004678:	e00a      	b.n	8004690 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800467a:	f7fc ff7d 	bl	8001578 <HAL_GetTick>
 800467e:	4602      	mov	r2, r0
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	1ad3      	subs	r3, r2, r3
 8004684:	f241 3288 	movw	r2, #5000	; 0x1388
 8004688:	4293      	cmp	r3, r2
 800468a:	d901      	bls.n	8004690 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800468c:	2303      	movs	r3, #3
 800468e:	e0c2      	b.n	8004816 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004690:	4b41      	ldr	r3, [pc, #260]	; (8004798 <HAL_RCC_OscConfig+0x4d0>)
 8004692:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004694:	f003 0302 	and.w	r3, r3, #2
 8004698:	2b00      	cmp	r3, #0
 800469a:	d1ee      	bne.n	800467a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800469c:	7dfb      	ldrb	r3, [r7, #23]
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d105      	bne.n	80046ae <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046a2:	4b3d      	ldr	r3, [pc, #244]	; (8004798 <HAL_RCC_OscConfig+0x4d0>)
 80046a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a6:	4a3c      	ldr	r2, [pc, #240]	; (8004798 <HAL_RCC_OscConfig+0x4d0>)
 80046a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046ac:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	699b      	ldr	r3, [r3, #24]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	f000 80ae 	beq.w	8004814 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80046b8:	4b37      	ldr	r3, [pc, #220]	; (8004798 <HAL_RCC_OscConfig+0x4d0>)
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	f003 030c 	and.w	r3, r3, #12
 80046c0:	2b08      	cmp	r3, #8
 80046c2:	d06d      	beq.n	80047a0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	699b      	ldr	r3, [r3, #24]
 80046c8:	2b02      	cmp	r3, #2
 80046ca:	d14b      	bne.n	8004764 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046cc:	4b32      	ldr	r3, [pc, #200]	; (8004798 <HAL_RCC_OscConfig+0x4d0>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a31      	ldr	r2, [pc, #196]	; (8004798 <HAL_RCC_OscConfig+0x4d0>)
 80046d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046d8:	f7fc ff4e 	bl	8001578 <HAL_GetTick>
 80046dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046de:	e008      	b.n	80046f2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046e0:	f7fc ff4a 	bl	8001578 <HAL_GetTick>
 80046e4:	4602      	mov	r2, r0
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	1ad3      	subs	r3, r2, r3
 80046ea:	2b02      	cmp	r3, #2
 80046ec:	d901      	bls.n	80046f2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80046ee:	2303      	movs	r3, #3
 80046f0:	e091      	b.n	8004816 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046f2:	4b29      	ldr	r3, [pc, #164]	; (8004798 <HAL_RCC_OscConfig+0x4d0>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d1f0      	bne.n	80046e0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	69da      	ldr	r2, [r3, #28]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6a1b      	ldr	r3, [r3, #32]
 8004706:	431a      	orrs	r2, r3
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800470c:	019b      	lsls	r3, r3, #6
 800470e:	431a      	orrs	r2, r3
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004714:	085b      	lsrs	r3, r3, #1
 8004716:	3b01      	subs	r3, #1
 8004718:	041b      	lsls	r3, r3, #16
 800471a:	431a      	orrs	r2, r3
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004720:	061b      	lsls	r3, r3, #24
 8004722:	431a      	orrs	r2, r3
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004728:	071b      	lsls	r3, r3, #28
 800472a:	491b      	ldr	r1, [pc, #108]	; (8004798 <HAL_RCC_OscConfig+0x4d0>)
 800472c:	4313      	orrs	r3, r2
 800472e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004730:	4b19      	ldr	r3, [pc, #100]	; (8004798 <HAL_RCC_OscConfig+0x4d0>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a18      	ldr	r2, [pc, #96]	; (8004798 <HAL_RCC_OscConfig+0x4d0>)
 8004736:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800473a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800473c:	f7fc ff1c 	bl	8001578 <HAL_GetTick>
 8004740:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004742:	e008      	b.n	8004756 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004744:	f7fc ff18 	bl	8001578 <HAL_GetTick>
 8004748:	4602      	mov	r2, r0
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	1ad3      	subs	r3, r2, r3
 800474e:	2b02      	cmp	r3, #2
 8004750:	d901      	bls.n	8004756 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004752:	2303      	movs	r3, #3
 8004754:	e05f      	b.n	8004816 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004756:	4b10      	ldr	r3, [pc, #64]	; (8004798 <HAL_RCC_OscConfig+0x4d0>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800475e:	2b00      	cmp	r3, #0
 8004760:	d0f0      	beq.n	8004744 <HAL_RCC_OscConfig+0x47c>
 8004762:	e057      	b.n	8004814 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004764:	4b0c      	ldr	r3, [pc, #48]	; (8004798 <HAL_RCC_OscConfig+0x4d0>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a0b      	ldr	r2, [pc, #44]	; (8004798 <HAL_RCC_OscConfig+0x4d0>)
 800476a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800476e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004770:	f7fc ff02 	bl	8001578 <HAL_GetTick>
 8004774:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004776:	e008      	b.n	800478a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004778:	f7fc fefe 	bl	8001578 <HAL_GetTick>
 800477c:	4602      	mov	r2, r0
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	1ad3      	subs	r3, r2, r3
 8004782:	2b02      	cmp	r3, #2
 8004784:	d901      	bls.n	800478a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004786:	2303      	movs	r3, #3
 8004788:	e045      	b.n	8004816 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800478a:	4b03      	ldr	r3, [pc, #12]	; (8004798 <HAL_RCC_OscConfig+0x4d0>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004792:	2b00      	cmp	r3, #0
 8004794:	d1f0      	bne.n	8004778 <HAL_RCC_OscConfig+0x4b0>
 8004796:	e03d      	b.n	8004814 <HAL_RCC_OscConfig+0x54c>
 8004798:	40023800 	.word	0x40023800
 800479c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80047a0:	4b1f      	ldr	r3, [pc, #124]	; (8004820 <HAL_RCC_OscConfig+0x558>)
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	699b      	ldr	r3, [r3, #24]
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	d030      	beq.n	8004810 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047b8:	429a      	cmp	r2, r3
 80047ba:	d129      	bne.n	8004810 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d122      	bne.n	8004810 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80047ca:	68fa      	ldr	r2, [r7, #12]
 80047cc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80047d0:	4013      	ands	r3, r2
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80047d6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80047d8:	4293      	cmp	r3, r2
 80047da:	d119      	bne.n	8004810 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047e6:	085b      	lsrs	r3, r3, #1
 80047e8:	3b01      	subs	r3, #1
 80047ea:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d10f      	bne.n	8004810 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047fa:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d107      	bne.n	8004810 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800480a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800480c:	429a      	cmp	r2, r3
 800480e:	d001      	beq.n	8004814 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	e000      	b.n	8004816 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004814:	2300      	movs	r3, #0
}
 8004816:	4618      	mov	r0, r3
 8004818:	3718      	adds	r7, #24
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}
 800481e:	bf00      	nop
 8004820:	40023800 	.word	0x40023800

08004824 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b084      	sub	sp, #16
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800482e:	2300      	movs	r3, #0
 8004830:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d101      	bne.n	800483c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	e0d0      	b.n	80049de <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800483c:	4b6a      	ldr	r3, [pc, #424]	; (80049e8 <HAL_RCC_ClockConfig+0x1c4>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 030f 	and.w	r3, r3, #15
 8004844:	683a      	ldr	r2, [r7, #0]
 8004846:	429a      	cmp	r2, r3
 8004848:	d910      	bls.n	800486c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800484a:	4b67      	ldr	r3, [pc, #412]	; (80049e8 <HAL_RCC_ClockConfig+0x1c4>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f023 020f 	bic.w	r2, r3, #15
 8004852:	4965      	ldr	r1, [pc, #404]	; (80049e8 <HAL_RCC_ClockConfig+0x1c4>)
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	4313      	orrs	r3, r2
 8004858:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800485a:	4b63      	ldr	r3, [pc, #396]	; (80049e8 <HAL_RCC_ClockConfig+0x1c4>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f003 030f 	and.w	r3, r3, #15
 8004862:	683a      	ldr	r2, [r7, #0]
 8004864:	429a      	cmp	r2, r3
 8004866:	d001      	beq.n	800486c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004868:	2301      	movs	r3, #1
 800486a:	e0b8      	b.n	80049de <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f003 0302 	and.w	r3, r3, #2
 8004874:	2b00      	cmp	r3, #0
 8004876:	d020      	beq.n	80048ba <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f003 0304 	and.w	r3, r3, #4
 8004880:	2b00      	cmp	r3, #0
 8004882:	d005      	beq.n	8004890 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004884:	4b59      	ldr	r3, [pc, #356]	; (80049ec <HAL_RCC_ClockConfig+0x1c8>)
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	4a58      	ldr	r2, [pc, #352]	; (80049ec <HAL_RCC_ClockConfig+0x1c8>)
 800488a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800488e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 0308 	and.w	r3, r3, #8
 8004898:	2b00      	cmp	r3, #0
 800489a:	d005      	beq.n	80048a8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800489c:	4b53      	ldr	r3, [pc, #332]	; (80049ec <HAL_RCC_ClockConfig+0x1c8>)
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	4a52      	ldr	r2, [pc, #328]	; (80049ec <HAL_RCC_ClockConfig+0x1c8>)
 80048a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80048a6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048a8:	4b50      	ldr	r3, [pc, #320]	; (80049ec <HAL_RCC_ClockConfig+0x1c8>)
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	494d      	ldr	r1, [pc, #308]	; (80049ec <HAL_RCC_ClockConfig+0x1c8>)
 80048b6:	4313      	orrs	r3, r2
 80048b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 0301 	and.w	r3, r3, #1
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d040      	beq.n	8004948 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	d107      	bne.n	80048de <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048ce:	4b47      	ldr	r3, [pc, #284]	; (80049ec <HAL_RCC_ClockConfig+0x1c8>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d115      	bne.n	8004906 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	e07f      	b.n	80049de <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	2b02      	cmp	r3, #2
 80048e4:	d107      	bne.n	80048f6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048e6:	4b41      	ldr	r3, [pc, #260]	; (80049ec <HAL_RCC_ClockConfig+0x1c8>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d109      	bne.n	8004906 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	e073      	b.n	80049de <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048f6:	4b3d      	ldr	r3, [pc, #244]	; (80049ec <HAL_RCC_ClockConfig+0x1c8>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f003 0302 	and.w	r3, r3, #2
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d101      	bne.n	8004906 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	e06b      	b.n	80049de <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004906:	4b39      	ldr	r3, [pc, #228]	; (80049ec <HAL_RCC_ClockConfig+0x1c8>)
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	f023 0203 	bic.w	r2, r3, #3
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	4936      	ldr	r1, [pc, #216]	; (80049ec <HAL_RCC_ClockConfig+0x1c8>)
 8004914:	4313      	orrs	r3, r2
 8004916:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004918:	f7fc fe2e 	bl	8001578 <HAL_GetTick>
 800491c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800491e:	e00a      	b.n	8004936 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004920:	f7fc fe2a 	bl	8001578 <HAL_GetTick>
 8004924:	4602      	mov	r2, r0
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	1ad3      	subs	r3, r2, r3
 800492a:	f241 3288 	movw	r2, #5000	; 0x1388
 800492e:	4293      	cmp	r3, r2
 8004930:	d901      	bls.n	8004936 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004932:	2303      	movs	r3, #3
 8004934:	e053      	b.n	80049de <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004936:	4b2d      	ldr	r3, [pc, #180]	; (80049ec <HAL_RCC_ClockConfig+0x1c8>)
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	f003 020c 	and.w	r2, r3, #12
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	009b      	lsls	r3, r3, #2
 8004944:	429a      	cmp	r2, r3
 8004946:	d1eb      	bne.n	8004920 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004948:	4b27      	ldr	r3, [pc, #156]	; (80049e8 <HAL_RCC_ClockConfig+0x1c4>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f003 030f 	and.w	r3, r3, #15
 8004950:	683a      	ldr	r2, [r7, #0]
 8004952:	429a      	cmp	r2, r3
 8004954:	d210      	bcs.n	8004978 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004956:	4b24      	ldr	r3, [pc, #144]	; (80049e8 <HAL_RCC_ClockConfig+0x1c4>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f023 020f 	bic.w	r2, r3, #15
 800495e:	4922      	ldr	r1, [pc, #136]	; (80049e8 <HAL_RCC_ClockConfig+0x1c4>)
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	4313      	orrs	r3, r2
 8004964:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004966:	4b20      	ldr	r3, [pc, #128]	; (80049e8 <HAL_RCC_ClockConfig+0x1c4>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 030f 	and.w	r3, r3, #15
 800496e:	683a      	ldr	r2, [r7, #0]
 8004970:	429a      	cmp	r2, r3
 8004972:	d001      	beq.n	8004978 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004974:	2301      	movs	r3, #1
 8004976:	e032      	b.n	80049de <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f003 0304 	and.w	r3, r3, #4
 8004980:	2b00      	cmp	r3, #0
 8004982:	d008      	beq.n	8004996 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004984:	4b19      	ldr	r3, [pc, #100]	; (80049ec <HAL_RCC_ClockConfig+0x1c8>)
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	68db      	ldr	r3, [r3, #12]
 8004990:	4916      	ldr	r1, [pc, #88]	; (80049ec <HAL_RCC_ClockConfig+0x1c8>)
 8004992:	4313      	orrs	r3, r2
 8004994:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 0308 	and.w	r3, r3, #8
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d009      	beq.n	80049b6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80049a2:	4b12      	ldr	r3, [pc, #72]	; (80049ec <HAL_RCC_ClockConfig+0x1c8>)
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	691b      	ldr	r3, [r3, #16]
 80049ae:	00db      	lsls	r3, r3, #3
 80049b0:	490e      	ldr	r1, [pc, #56]	; (80049ec <HAL_RCC_ClockConfig+0x1c8>)
 80049b2:	4313      	orrs	r3, r2
 80049b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80049b6:	f000 f821 	bl	80049fc <HAL_RCC_GetSysClockFreq>
 80049ba:	4601      	mov	r1, r0
 80049bc:	4b0b      	ldr	r3, [pc, #44]	; (80049ec <HAL_RCC_ClockConfig+0x1c8>)
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	091b      	lsrs	r3, r3, #4
 80049c2:	f003 030f 	and.w	r3, r3, #15
 80049c6:	4a0a      	ldr	r2, [pc, #40]	; (80049f0 <HAL_RCC_ClockConfig+0x1cc>)
 80049c8:	5cd3      	ldrb	r3, [r2, r3]
 80049ca:	fa21 f303 	lsr.w	r3, r1, r3
 80049ce:	4a09      	ldr	r2, [pc, #36]	; (80049f4 <HAL_RCC_ClockConfig+0x1d0>)
 80049d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80049d2:	4b09      	ldr	r3, [pc, #36]	; (80049f8 <HAL_RCC_ClockConfig+0x1d4>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4618      	mov	r0, r3
 80049d8:	f7fc fc8a 	bl	80012f0 <HAL_InitTick>

  return HAL_OK;
 80049dc:	2300      	movs	r3, #0
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3710      	adds	r7, #16
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}
 80049e6:	bf00      	nop
 80049e8:	40023c00 	.word	0x40023c00
 80049ec:	40023800 	.word	0x40023800
 80049f0:	080160dc 	.word	0x080160dc
 80049f4:	20000010 	.word	0x20000010
 80049f8:	20000014 	.word	0x20000014

080049fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049fe:	b085      	sub	sp, #20
 8004a00:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004a02:	2300      	movs	r3, #0
 8004a04:	607b      	str	r3, [r7, #4]
 8004a06:	2300      	movs	r3, #0
 8004a08:	60fb      	str	r3, [r7, #12]
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a12:	4b63      	ldr	r3, [pc, #396]	; (8004ba0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	f003 030c 	and.w	r3, r3, #12
 8004a1a:	2b04      	cmp	r3, #4
 8004a1c:	d007      	beq.n	8004a2e <HAL_RCC_GetSysClockFreq+0x32>
 8004a1e:	2b08      	cmp	r3, #8
 8004a20:	d008      	beq.n	8004a34 <HAL_RCC_GetSysClockFreq+0x38>
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	f040 80b4 	bne.w	8004b90 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a28:	4b5e      	ldr	r3, [pc, #376]	; (8004ba4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004a2a:	60bb      	str	r3, [r7, #8]
      break;
 8004a2c:	e0b3      	b.n	8004b96 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a2e:	4b5e      	ldr	r3, [pc, #376]	; (8004ba8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004a30:	60bb      	str	r3, [r7, #8]
      break;
 8004a32:	e0b0      	b.n	8004b96 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a34:	4b5a      	ldr	r3, [pc, #360]	; (8004ba0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a3c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004a3e:	4b58      	ldr	r3, [pc, #352]	; (8004ba0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d04a      	beq.n	8004ae0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a4a:	4b55      	ldr	r3, [pc, #340]	; (8004ba0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	099b      	lsrs	r3, r3, #6
 8004a50:	f04f 0400 	mov.w	r4, #0
 8004a54:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004a58:	f04f 0200 	mov.w	r2, #0
 8004a5c:	ea03 0501 	and.w	r5, r3, r1
 8004a60:	ea04 0602 	and.w	r6, r4, r2
 8004a64:	4629      	mov	r1, r5
 8004a66:	4632      	mov	r2, r6
 8004a68:	f04f 0300 	mov.w	r3, #0
 8004a6c:	f04f 0400 	mov.w	r4, #0
 8004a70:	0154      	lsls	r4, r2, #5
 8004a72:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004a76:	014b      	lsls	r3, r1, #5
 8004a78:	4619      	mov	r1, r3
 8004a7a:	4622      	mov	r2, r4
 8004a7c:	1b49      	subs	r1, r1, r5
 8004a7e:	eb62 0206 	sbc.w	r2, r2, r6
 8004a82:	f04f 0300 	mov.w	r3, #0
 8004a86:	f04f 0400 	mov.w	r4, #0
 8004a8a:	0194      	lsls	r4, r2, #6
 8004a8c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004a90:	018b      	lsls	r3, r1, #6
 8004a92:	1a5b      	subs	r3, r3, r1
 8004a94:	eb64 0402 	sbc.w	r4, r4, r2
 8004a98:	f04f 0100 	mov.w	r1, #0
 8004a9c:	f04f 0200 	mov.w	r2, #0
 8004aa0:	00e2      	lsls	r2, r4, #3
 8004aa2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004aa6:	00d9      	lsls	r1, r3, #3
 8004aa8:	460b      	mov	r3, r1
 8004aaa:	4614      	mov	r4, r2
 8004aac:	195b      	adds	r3, r3, r5
 8004aae:	eb44 0406 	adc.w	r4, r4, r6
 8004ab2:	f04f 0100 	mov.w	r1, #0
 8004ab6:	f04f 0200 	mov.w	r2, #0
 8004aba:	0262      	lsls	r2, r4, #9
 8004abc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004ac0:	0259      	lsls	r1, r3, #9
 8004ac2:	460b      	mov	r3, r1
 8004ac4:	4614      	mov	r4, r2
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	4621      	mov	r1, r4
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	f04f 0400 	mov.w	r4, #0
 8004ad0:	461a      	mov	r2, r3
 8004ad2:	4623      	mov	r3, r4
 8004ad4:	f7fb fbb4 	bl	8000240 <__aeabi_uldivmod>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	460c      	mov	r4, r1
 8004adc:	60fb      	str	r3, [r7, #12]
 8004ade:	e049      	b.n	8004b74 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ae0:	4b2f      	ldr	r3, [pc, #188]	; (8004ba0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	099b      	lsrs	r3, r3, #6
 8004ae6:	f04f 0400 	mov.w	r4, #0
 8004aea:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004aee:	f04f 0200 	mov.w	r2, #0
 8004af2:	ea03 0501 	and.w	r5, r3, r1
 8004af6:	ea04 0602 	and.w	r6, r4, r2
 8004afa:	4629      	mov	r1, r5
 8004afc:	4632      	mov	r2, r6
 8004afe:	f04f 0300 	mov.w	r3, #0
 8004b02:	f04f 0400 	mov.w	r4, #0
 8004b06:	0154      	lsls	r4, r2, #5
 8004b08:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004b0c:	014b      	lsls	r3, r1, #5
 8004b0e:	4619      	mov	r1, r3
 8004b10:	4622      	mov	r2, r4
 8004b12:	1b49      	subs	r1, r1, r5
 8004b14:	eb62 0206 	sbc.w	r2, r2, r6
 8004b18:	f04f 0300 	mov.w	r3, #0
 8004b1c:	f04f 0400 	mov.w	r4, #0
 8004b20:	0194      	lsls	r4, r2, #6
 8004b22:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004b26:	018b      	lsls	r3, r1, #6
 8004b28:	1a5b      	subs	r3, r3, r1
 8004b2a:	eb64 0402 	sbc.w	r4, r4, r2
 8004b2e:	f04f 0100 	mov.w	r1, #0
 8004b32:	f04f 0200 	mov.w	r2, #0
 8004b36:	00e2      	lsls	r2, r4, #3
 8004b38:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004b3c:	00d9      	lsls	r1, r3, #3
 8004b3e:	460b      	mov	r3, r1
 8004b40:	4614      	mov	r4, r2
 8004b42:	195b      	adds	r3, r3, r5
 8004b44:	eb44 0406 	adc.w	r4, r4, r6
 8004b48:	f04f 0100 	mov.w	r1, #0
 8004b4c:	f04f 0200 	mov.w	r2, #0
 8004b50:	02a2      	lsls	r2, r4, #10
 8004b52:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004b56:	0299      	lsls	r1, r3, #10
 8004b58:	460b      	mov	r3, r1
 8004b5a:	4614      	mov	r4, r2
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	4621      	mov	r1, r4
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	f04f 0400 	mov.w	r4, #0
 8004b66:	461a      	mov	r2, r3
 8004b68:	4623      	mov	r3, r4
 8004b6a:	f7fb fb69 	bl	8000240 <__aeabi_uldivmod>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	460c      	mov	r4, r1
 8004b72:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004b74:	4b0a      	ldr	r3, [pc, #40]	; (8004ba0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	0c1b      	lsrs	r3, r3, #16
 8004b7a:	f003 0303 	and.w	r3, r3, #3
 8004b7e:	3301      	adds	r3, #1
 8004b80:	005b      	lsls	r3, r3, #1
 8004b82:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8004b84:	68fa      	ldr	r2, [r7, #12]
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b8c:	60bb      	str	r3, [r7, #8]
      break;
 8004b8e:	e002      	b.n	8004b96 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b90:	4b04      	ldr	r3, [pc, #16]	; (8004ba4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004b92:	60bb      	str	r3, [r7, #8]
      break;
 8004b94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b96:	68bb      	ldr	r3, [r7, #8]
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3714      	adds	r7, #20
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ba0:	40023800 	.word	0x40023800
 8004ba4:	00f42400 	.word	0x00f42400
 8004ba8:	007a1200 	.word	0x007a1200

08004bac <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bac:	b480      	push	{r7}
 8004bae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004bb0:	4b03      	ldr	r3, [pc, #12]	; (8004bc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbc:	4770      	bx	lr
 8004bbe:	bf00      	nop
 8004bc0:	20000010 	.word	0x20000010

08004bc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004bc8:	f7ff fff0 	bl	8004bac <HAL_RCC_GetHCLKFreq>
 8004bcc:	4601      	mov	r1, r0
 8004bce:	4b05      	ldr	r3, [pc, #20]	; (8004be4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	0a9b      	lsrs	r3, r3, #10
 8004bd4:	f003 0307 	and.w	r3, r3, #7
 8004bd8:	4a03      	ldr	r2, [pc, #12]	; (8004be8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004bda:	5cd3      	ldrb	r3, [r2, r3]
 8004bdc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	bd80      	pop	{r7, pc}
 8004be4:	40023800 	.word	0x40023800
 8004be8:	080160ec 	.word	0x080160ec

08004bec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004bf0:	f7ff ffdc 	bl	8004bac <HAL_RCC_GetHCLKFreq>
 8004bf4:	4601      	mov	r1, r0
 8004bf6:	4b05      	ldr	r3, [pc, #20]	; (8004c0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	0b5b      	lsrs	r3, r3, #13
 8004bfc:	f003 0307 	and.w	r3, r3, #7
 8004c00:	4a03      	ldr	r2, [pc, #12]	; (8004c10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c02:	5cd3      	ldrb	r3, [r2, r3]
 8004c04:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	bd80      	pop	{r7, pc}
 8004c0c:	40023800 	.word	0x40023800
 8004c10:	080160ec 	.word	0x080160ec

08004c14 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b083      	sub	sp, #12
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
 8004c1c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	220f      	movs	r2, #15
 8004c22:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004c24:	4b12      	ldr	r3, [pc, #72]	; (8004c70 <HAL_RCC_GetClockConfig+0x5c>)
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	f003 0203 	and.w	r2, r3, #3
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004c30:	4b0f      	ldr	r3, [pc, #60]	; (8004c70 <HAL_RCC_GetClockConfig+0x5c>)
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004c3c:	4b0c      	ldr	r3, [pc, #48]	; (8004c70 <HAL_RCC_GetClockConfig+0x5c>)
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004c48:	4b09      	ldr	r3, [pc, #36]	; (8004c70 <HAL_RCC_GetClockConfig+0x5c>)
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	08db      	lsrs	r3, r3, #3
 8004c4e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004c56:	4b07      	ldr	r3, [pc, #28]	; (8004c74 <HAL_RCC_GetClockConfig+0x60>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f003 020f 	and.w	r2, r3, #15
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	601a      	str	r2, [r3, #0]
}
 8004c62:	bf00      	nop
 8004c64:	370c      	adds	r7, #12
 8004c66:	46bd      	mov	sp, r7
 8004c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6c:	4770      	bx	lr
 8004c6e:	bf00      	nop
 8004c70:	40023800 	.word	0x40023800
 8004c74:	40023c00 	.word	0x40023c00

08004c78 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b088      	sub	sp, #32
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004c80:	2300      	movs	r3, #0
 8004c82:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004c84:	2300      	movs	r3, #0
 8004c86:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004c90:	2300      	movs	r3, #0
 8004c92:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f003 0301 	and.w	r3, r3, #1
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d012      	beq.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004ca0:	4b69      	ldr	r3, [pc, #420]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	4a68      	ldr	r2, [pc, #416]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ca6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004caa:	6093      	str	r3, [r2, #8]
 8004cac:	4b66      	ldr	r3, [pc, #408]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cae:	689a      	ldr	r2, [r3, #8]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cb4:	4964      	ldr	r1, [pc, #400]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d101      	bne.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d017      	beq.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004cd2:	4b5d      	ldr	r3, [pc, #372]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004cd8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ce0:	4959      	ldr	r1, [pc, #356]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004cf0:	d101      	bne.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d101      	bne.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d017      	beq.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004d0e:	4b4e      	ldr	r3, [pc, #312]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d14:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d1c:	494a      	ldr	r1, [pc, #296]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d2c:	d101      	bne.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d101      	bne.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d001      	beq.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f003 0320 	and.w	r3, r3, #32
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	f000 808b 	beq.w	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004d5c:	4b3a      	ldr	r3, [pc, #232]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d60:	4a39      	ldr	r2, [pc, #228]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d66:	6413      	str	r3, [r2, #64]	; 0x40
 8004d68:	4b37      	ldr	r3, [pc, #220]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d70:	60bb      	str	r3, [r7, #8]
 8004d72:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004d74:	4b35      	ldr	r3, [pc, #212]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a34      	ldr	r2, [pc, #208]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004d7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d7e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d80:	f7fc fbfa 	bl	8001578 <HAL_GetTick>
 8004d84:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004d86:	e008      	b.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d88:	f7fc fbf6 	bl	8001578 <HAL_GetTick>
 8004d8c:	4602      	mov	r2, r0
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	1ad3      	subs	r3, r2, r3
 8004d92:	2b64      	cmp	r3, #100	; 0x64
 8004d94:	d901      	bls.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004d96:	2303      	movs	r3, #3
 8004d98:	e38d      	b.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004d9a:	4b2c      	ldr	r3, [pc, #176]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d0f0      	beq.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004da6:	4b28      	ldr	r3, [pc, #160]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004da8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004daa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dae:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d035      	beq.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dbe:	693a      	ldr	r2, [r7, #16]
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	d02e      	beq.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004dc4:	4b20      	ldr	r3, [pc, #128]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dcc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004dce:	4b1e      	ldr	r3, [pc, #120]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dd2:	4a1d      	ldr	r2, [pc, #116]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dd8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004dda:	4b1b      	ldr	r3, [pc, #108]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dde:	4a1a      	ldr	r2, [pc, #104]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004de0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004de4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004de6:	4a18      	ldr	r2, [pc, #96]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004dec:	4b16      	ldr	r3, [pc, #88]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004df0:	f003 0301 	and.w	r3, r3, #1
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d114      	bne.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004df8:	f7fc fbbe 	bl	8001578 <HAL_GetTick>
 8004dfc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dfe:	e00a      	b.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e00:	f7fc fbba 	bl	8001578 <HAL_GetTick>
 8004e04:	4602      	mov	r2, r0
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	1ad3      	subs	r3, r2, r3
 8004e0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d901      	bls.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004e12:	2303      	movs	r3, #3
 8004e14:	e34f      	b.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e16:	4b0c      	ldr	r3, [pc, #48]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e1a:	f003 0302 	and.w	r3, r3, #2
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d0ee      	beq.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e2e:	d111      	bne.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004e30:	4b05      	ldr	r3, [pc, #20]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004e3c:	4b04      	ldr	r3, [pc, #16]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004e3e:	400b      	ands	r3, r1
 8004e40:	4901      	ldr	r1, [pc, #4]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e42:	4313      	orrs	r3, r2
 8004e44:	608b      	str	r3, [r1, #8]
 8004e46:	e00b      	b.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004e48:	40023800 	.word	0x40023800
 8004e4c:	40007000 	.word	0x40007000
 8004e50:	0ffffcff 	.word	0x0ffffcff
 8004e54:	4bb3      	ldr	r3, [pc, #716]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	4ab2      	ldr	r2, [pc, #712]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e5a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004e5e:	6093      	str	r3, [r2, #8]
 8004e60:	4bb0      	ldr	r3, [pc, #704]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e62:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e6c:	49ad      	ldr	r1, [pc, #692]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f003 0310 	and.w	r3, r3, #16
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d010      	beq.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004e7e:	4ba9      	ldr	r3, [pc, #676]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e84:	4aa7      	ldr	r2, [pc, #668]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e8a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004e8e:	4ba5      	ldr	r3, [pc, #660]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e90:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e98:	49a2      	ldr	r1, [pc, #648]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d00a      	beq.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004eac:	4b9d      	ldr	r3, [pc, #628]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004eae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eb2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004eba:	499a      	ldr	r1, [pc, #616]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d00a      	beq.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004ece:	4b95      	ldr	r3, [pc, #596]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ed0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ed4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004edc:	4991      	ldr	r1, [pc, #580]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d00a      	beq.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004ef0:	4b8c      	ldr	r3, [pc, #560]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ef6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004efe:	4989      	ldr	r1, [pc, #548]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f00:	4313      	orrs	r3, r2
 8004f02:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d00a      	beq.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004f12:	4b84      	ldr	r3, [pc, #528]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f18:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f20:	4980      	ldr	r1, [pc, #512]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f22:	4313      	orrs	r3, r2
 8004f24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d00a      	beq.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004f34:	4b7b      	ldr	r3, [pc, #492]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f3a:	f023 0203 	bic.w	r2, r3, #3
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f42:	4978      	ldr	r1, [pc, #480]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f44:	4313      	orrs	r3, r2
 8004f46:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d00a      	beq.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004f56:	4b73      	ldr	r3, [pc, #460]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f5c:	f023 020c 	bic.w	r2, r3, #12
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f64:	496f      	ldr	r1, [pc, #444]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f66:	4313      	orrs	r3, r2
 8004f68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d00a      	beq.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004f78:	4b6a      	ldr	r3, [pc, #424]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f7e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f86:	4967      	ldr	r1, [pc, #412]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d00a      	beq.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004f9a:	4b62      	ldr	r3, [pc, #392]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fa0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fa8:	495e      	ldr	r1, [pc, #376]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004faa:	4313      	orrs	r3, r2
 8004fac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d00a      	beq.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004fbc:	4b59      	ldr	r3, [pc, #356]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004fbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fc2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fca:	4956      	ldr	r1, [pc, #344]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d00a      	beq.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004fde:	4b51      	ldr	r3, [pc, #324]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004fe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fe4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fec:	494d      	ldr	r1, [pc, #308]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d00a      	beq.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005000:	4b48      	ldr	r3, [pc, #288]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005002:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005006:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800500e:	4945      	ldr	r1, [pc, #276]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005010:	4313      	orrs	r3, r2
 8005012:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800501e:	2b00      	cmp	r3, #0
 8005020:	d00a      	beq.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005022:	4b40      	ldr	r3, [pc, #256]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005024:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005028:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005030:	493c      	ldr	r1, [pc, #240]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005032:	4313      	orrs	r3, r2
 8005034:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005040:	2b00      	cmp	r3, #0
 8005042:	d00a      	beq.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005044:	4b37      	ldr	r3, [pc, #220]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005046:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800504a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005052:	4934      	ldr	r1, [pc, #208]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005054:	4313      	orrs	r3, r2
 8005056:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005062:	2b00      	cmp	r3, #0
 8005064:	d011      	beq.n	800508a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005066:	4b2f      	ldr	r3, [pc, #188]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005068:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800506c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005074:	492b      	ldr	r1, [pc, #172]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005076:	4313      	orrs	r3, r2
 8005078:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005080:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005084:	d101      	bne.n	800508a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005086:	2301      	movs	r3, #1
 8005088:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f003 0308 	and.w	r3, r3, #8
 8005092:	2b00      	cmp	r3, #0
 8005094:	d001      	beq.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005096:	2301      	movs	r3, #1
 8005098:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d00a      	beq.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80050a6:	4b1f      	ldr	r3, [pc, #124]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80050a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050ac:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050b4:	491b      	ldr	r1, [pc, #108]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80050b6:	4313      	orrs	r3, r2
 80050b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d00b      	beq.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80050c8:	4b16      	ldr	r3, [pc, #88]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80050ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050ce:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050d8:	4912      	ldr	r1, [pc, #72]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80050da:	4313      	orrs	r3, r2
 80050dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d00b      	beq.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80050ec:	4b0d      	ldr	r3, [pc, #52]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80050ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050f2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050fc:	4909      	ldr	r1, [pc, #36]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80050fe:	4313      	orrs	r3, r2
 8005100:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800510c:	2b00      	cmp	r3, #0
 800510e:	d00f      	beq.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005110:	4b04      	ldr	r3, [pc, #16]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005112:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005116:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005120:	e002      	b.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8005122:	bf00      	nop
 8005124:	40023800 	.word	0x40023800
 8005128:	4985      	ldr	r1, [pc, #532]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800512a:	4313      	orrs	r3, r2
 800512c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005138:	2b00      	cmp	r3, #0
 800513a:	d00b      	beq.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800513c:	4b80      	ldr	r3, [pc, #512]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800513e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005142:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800514c:	497c      	ldr	r1, [pc, #496]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800514e:	4313      	orrs	r3, r2
 8005150:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8005154:	69fb      	ldr	r3, [r7, #28]
 8005156:	2b01      	cmp	r3, #1
 8005158:	d005      	beq.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005162:	f040 80d6 	bne.w	8005312 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005166:	4b76      	ldr	r3, [pc, #472]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a75      	ldr	r2, [pc, #468]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800516c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005170:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005172:	f7fc fa01 	bl	8001578 <HAL_GetTick>
 8005176:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005178:	e008      	b.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800517a:	f7fc f9fd 	bl	8001578 <HAL_GetTick>
 800517e:	4602      	mov	r2, r0
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	1ad3      	subs	r3, r2, r3
 8005184:	2b64      	cmp	r3, #100	; 0x64
 8005186:	d901      	bls.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005188:	2303      	movs	r3, #3
 800518a:	e194      	b.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800518c:	4b6c      	ldr	r3, [pc, #432]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005194:	2b00      	cmp	r3, #0
 8005196:	d1f0      	bne.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f003 0301 	and.w	r3, r3, #1
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d021      	beq.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x570>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d11d      	bne.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80051ac:	4b64      	ldr	r3, [pc, #400]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80051ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051b2:	0c1b      	lsrs	r3, r3, #16
 80051b4:	f003 0303 	and.w	r3, r3, #3
 80051b8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80051ba:	4b61      	ldr	r3, [pc, #388]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80051bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051c0:	0e1b      	lsrs	r3, r3, #24
 80051c2:	f003 030f 	and.w	r3, r3, #15
 80051c6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	019a      	lsls	r2, r3, #6
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	041b      	lsls	r3, r3, #16
 80051d2:	431a      	orrs	r2, r3
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	061b      	lsls	r3, r3, #24
 80051d8:	431a      	orrs	r2, r3
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	071b      	lsls	r3, r3, #28
 80051e0:	4957      	ldr	r1, [pc, #348]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80051e2:	4313      	orrs	r3, r2
 80051e4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d004      	beq.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x586>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051fc:	d00a      	beq.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005206:	2b00      	cmp	r3, #0
 8005208:	d02e      	beq.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800520e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005212:	d129      	bne.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005214:	4b4a      	ldr	r3, [pc, #296]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005216:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800521a:	0c1b      	lsrs	r3, r3, #16
 800521c:	f003 0303 	and.w	r3, r3, #3
 8005220:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005222:	4b47      	ldr	r3, [pc, #284]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005224:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005228:	0f1b      	lsrs	r3, r3, #28
 800522a:	f003 0307 	and.w	r3, r3, #7
 800522e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	019a      	lsls	r2, r3, #6
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	041b      	lsls	r3, r3, #16
 800523a:	431a      	orrs	r2, r3
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	68db      	ldr	r3, [r3, #12]
 8005240:	061b      	lsls	r3, r3, #24
 8005242:	431a      	orrs	r2, r3
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	071b      	lsls	r3, r3, #28
 8005248:	493d      	ldr	r1, [pc, #244]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800524a:	4313      	orrs	r3, r2
 800524c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005250:	4b3b      	ldr	r3, [pc, #236]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005252:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005256:	f023 021f 	bic.w	r2, r3, #31
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800525e:	3b01      	subs	r3, #1
 8005260:	4937      	ldr	r1, [pc, #220]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005262:	4313      	orrs	r3, r2
 8005264:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005270:	2b00      	cmp	r3, #0
 8005272:	d01d      	beq.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005274:	4b32      	ldr	r3, [pc, #200]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005276:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800527a:	0e1b      	lsrs	r3, r3, #24
 800527c:	f003 030f 	and.w	r3, r3, #15
 8005280:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005282:	4b2f      	ldr	r3, [pc, #188]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005284:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005288:	0f1b      	lsrs	r3, r3, #28
 800528a:	f003 0307 	and.w	r3, r3, #7
 800528e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	019a      	lsls	r2, r3, #6
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	691b      	ldr	r3, [r3, #16]
 800529a:	041b      	lsls	r3, r3, #16
 800529c:	431a      	orrs	r2, r3
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	061b      	lsls	r3, r3, #24
 80052a2:	431a      	orrs	r2, r3
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	071b      	lsls	r3, r3, #28
 80052a8:	4925      	ldr	r1, [pc, #148]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80052aa:	4313      	orrs	r3, r2
 80052ac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d011      	beq.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	019a      	lsls	r2, r3, #6
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	691b      	ldr	r3, [r3, #16]
 80052c6:	041b      	lsls	r3, r3, #16
 80052c8:	431a      	orrs	r2, r3
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	68db      	ldr	r3, [r3, #12]
 80052ce:	061b      	lsls	r3, r3, #24
 80052d0:	431a      	orrs	r2, r3
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	689b      	ldr	r3, [r3, #8]
 80052d6:	071b      	lsls	r3, r3, #28
 80052d8:	4919      	ldr	r1, [pc, #100]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80052da:	4313      	orrs	r3, r2
 80052dc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80052e0:	4b17      	ldr	r3, [pc, #92]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a16      	ldr	r2, [pc, #88]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80052e6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80052ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052ec:	f7fc f944 	bl	8001578 <HAL_GetTick>
 80052f0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80052f2:	e008      	b.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80052f4:	f7fc f940 	bl	8001578 <HAL_GetTick>
 80052f8:	4602      	mov	r2, r0
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	1ad3      	subs	r3, r2, r3
 80052fe:	2b64      	cmp	r3, #100	; 0x64
 8005300:	d901      	bls.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005302:	2303      	movs	r3, #3
 8005304:	e0d7      	b.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005306:	4b0e      	ldr	r3, [pc, #56]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800530e:	2b00      	cmp	r3, #0
 8005310:	d0f0      	beq.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005312:	69bb      	ldr	r3, [r7, #24]
 8005314:	2b01      	cmp	r3, #1
 8005316:	f040 80cd 	bne.w	80054b4 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800531a:	4b09      	ldr	r3, [pc, #36]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a08      	ldr	r2, [pc, #32]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005320:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005324:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005326:	f7fc f927 	bl	8001578 <HAL_GetTick>
 800532a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800532c:	e00a      	b.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800532e:	f7fc f923 	bl	8001578 <HAL_GetTick>
 8005332:	4602      	mov	r2, r0
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	1ad3      	subs	r3, r2, r3
 8005338:	2b64      	cmp	r3, #100	; 0x64
 800533a:	d903      	bls.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800533c:	2303      	movs	r3, #3
 800533e:	e0ba      	b.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8005340:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005344:	4b5e      	ldr	r3, [pc, #376]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800534c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005350:	d0ed      	beq.n	800532e <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800535a:	2b00      	cmp	r3, #0
 800535c:	d003      	beq.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005362:	2b00      	cmp	r3, #0
 8005364:	d009      	beq.n	800537a <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800536e:	2b00      	cmp	r3, #0
 8005370:	d02e      	beq.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005376:	2b00      	cmp	r3, #0
 8005378:	d12a      	bne.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800537a:	4b51      	ldr	r3, [pc, #324]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800537c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005380:	0c1b      	lsrs	r3, r3, #16
 8005382:	f003 0303 	and.w	r3, r3, #3
 8005386:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005388:	4b4d      	ldr	r3, [pc, #308]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800538a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800538e:	0f1b      	lsrs	r3, r3, #28
 8005390:	f003 0307 	and.w	r3, r3, #7
 8005394:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	695b      	ldr	r3, [r3, #20]
 800539a:	019a      	lsls	r2, r3, #6
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	041b      	lsls	r3, r3, #16
 80053a0:	431a      	orrs	r2, r3
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	699b      	ldr	r3, [r3, #24]
 80053a6:	061b      	lsls	r3, r3, #24
 80053a8:	431a      	orrs	r2, r3
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	071b      	lsls	r3, r3, #28
 80053ae:	4944      	ldr	r1, [pc, #272]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80053b0:	4313      	orrs	r3, r2
 80053b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80053b6:	4b42      	ldr	r3, [pc, #264]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80053b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053bc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053c4:	3b01      	subs	r3, #1
 80053c6:	021b      	lsls	r3, r3, #8
 80053c8:	493d      	ldr	r1, [pc, #244]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80053ca:	4313      	orrs	r3, r2
 80053cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d022      	beq.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80053e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053e4:	d11d      	bne.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80053e6:	4b36      	ldr	r3, [pc, #216]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80053e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053ec:	0e1b      	lsrs	r3, r3, #24
 80053ee:	f003 030f 	and.w	r3, r3, #15
 80053f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80053f4:	4b32      	ldr	r3, [pc, #200]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80053f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053fa:	0f1b      	lsrs	r3, r3, #28
 80053fc:	f003 0307 	and.w	r3, r3, #7
 8005400:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	695b      	ldr	r3, [r3, #20]
 8005406:	019a      	lsls	r2, r3, #6
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6a1b      	ldr	r3, [r3, #32]
 800540c:	041b      	lsls	r3, r3, #16
 800540e:	431a      	orrs	r2, r3
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	061b      	lsls	r3, r3, #24
 8005414:	431a      	orrs	r2, r3
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	071b      	lsls	r3, r3, #28
 800541a:	4929      	ldr	r1, [pc, #164]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800541c:	4313      	orrs	r3, r2
 800541e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f003 0308 	and.w	r3, r3, #8
 800542a:	2b00      	cmp	r3, #0
 800542c:	d028      	beq.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800542e:	4b24      	ldr	r3, [pc, #144]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005430:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005434:	0e1b      	lsrs	r3, r3, #24
 8005436:	f003 030f 	and.w	r3, r3, #15
 800543a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800543c:	4b20      	ldr	r3, [pc, #128]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800543e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005442:	0c1b      	lsrs	r3, r3, #16
 8005444:	f003 0303 	and.w	r3, r3, #3
 8005448:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	695b      	ldr	r3, [r3, #20]
 800544e:	019a      	lsls	r2, r3, #6
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	041b      	lsls	r3, r3, #16
 8005454:	431a      	orrs	r2, r3
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	061b      	lsls	r3, r3, #24
 800545a:	431a      	orrs	r2, r3
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	69db      	ldr	r3, [r3, #28]
 8005460:	071b      	lsls	r3, r3, #28
 8005462:	4917      	ldr	r1, [pc, #92]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005464:	4313      	orrs	r3, r2
 8005466:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800546a:	4b15      	ldr	r3, [pc, #84]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800546c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005470:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005478:	4911      	ldr	r1, [pc, #68]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800547a:	4313      	orrs	r3, r2
 800547c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005480:	4b0f      	ldr	r3, [pc, #60]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a0e      	ldr	r2, [pc, #56]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005486:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800548a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800548c:	f7fc f874 	bl	8001578 <HAL_GetTick>
 8005490:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005492:	e008      	b.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005494:	f7fc f870 	bl	8001578 <HAL_GetTick>
 8005498:	4602      	mov	r2, r0
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	1ad3      	subs	r3, r2, r3
 800549e:	2b64      	cmp	r3, #100	; 0x64
 80054a0:	d901      	bls.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80054a2:	2303      	movs	r3, #3
 80054a4:	e007      	b.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80054a6:	4b06      	ldr	r3, [pc, #24]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80054ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054b2:	d1ef      	bne.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 80054b4:	2300      	movs	r3, #0
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3720      	adds	r7, #32
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}
 80054be:	bf00      	nop
 80054c0:	40023800 	.word	0x40023800

080054c4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b082      	sub	sp, #8
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d101      	bne.n	80054d6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80054d2:	2301      	movs	r3, #1
 80054d4:	e022      	b.n	800551c <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80054dc:	b2db      	uxtb	r3, r3
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d105      	bne.n	80054ee <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2200      	movs	r2, #0
 80054e6:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f7fb fdad 	bl	8001048 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2203      	movs	r2, #3
 80054f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f000 f814 	bl	8005524 <HAL_SD_InitCard>
 80054fc:	4603      	mov	r3, r0
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d001      	beq.n	8005506 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8005502:	2301      	movs	r3, #1
 8005504:	e00a      	b.n	800551c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2200      	movs	r2, #0
 800550a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2200      	movs	r2, #0
 8005510:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2201      	movs	r2, #1
 8005516:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800551a:	2300      	movs	r3, #0
}
 800551c:	4618      	mov	r0, r3
 800551e:	3708      	adds	r7, #8
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}

08005524 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005524:	b5b0      	push	{r4, r5, r7, lr}
 8005526:	b08e      	sub	sp, #56	; 0x38
 8005528:	af04      	add	r7, sp, #16
 800552a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800552c:	2300      	movs	r3, #0
 800552e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8005530:	2300      	movs	r3, #0
 8005532:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8005534:	2300      	movs	r3, #0
 8005536:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8005538:	2300      	movs	r3, #0
 800553a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800553c:	2300      	movs	r3, #0
 800553e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8005540:	2376      	movs	r3, #118	; 0x76
 8005542:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681d      	ldr	r5, [r3, #0]
 8005548:	466c      	mov	r4, sp
 800554a:	f107 0314 	add.w	r3, r7, #20
 800554e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005552:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005556:	f107 0308 	add.w	r3, r7, #8
 800555a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800555c:	4628      	mov	r0, r5
 800555e:	f002 fcf5 	bl	8007f4c <SDMMC_Init>
 8005562:	4603      	mov	r3, r0
 8005564:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8005568:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800556c:	2b00      	cmp	r3, #0
 800556e:	d001      	beq.n	8005574 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8005570:	2301      	movs	r3, #1
 8005572:	e03b      	b.n	80055ec <HAL_SD_InitCard+0xc8>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	685a      	ldr	r2, [r3, #4]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005582:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4618      	mov	r0, r3
 800558a:	f002 fd29 	bl	8007fe0 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	685a      	ldr	r2, [r3, #4]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800559c:	605a      	str	r2, [r3, #4]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f001 fb62 	bl	8006c68 <SD_PowerON>
 80055a4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80055a6:	6a3b      	ldr	r3, [r7, #32]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d00b      	beq.n	80055c4 <HAL_SD_InitCard+0xa0>
  {
    hsd->State = HAL_SD_STATE_READY;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2201      	movs	r2, #1
 80055b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055b8:	6a3b      	ldr	r3, [r7, #32]
 80055ba:	431a      	orrs	r2, r3
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80055c0:	2301      	movs	r3, #1
 80055c2:	e013      	b.n	80055ec <HAL_SD_InitCard+0xc8>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	f001 fa81 	bl	8006acc <SD_InitCard>
 80055ca:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80055cc:	6a3b      	ldr	r3, [r7, #32]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d00b      	beq.n	80055ea <HAL_SD_InitCard+0xc6>
  {
    hsd->State = HAL_SD_STATE_READY;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2201      	movs	r2, #1
 80055d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055de:	6a3b      	ldr	r3, [r7, #32]
 80055e0:	431a      	orrs	r2, r3
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80055e6:	2301      	movs	r3, #1
 80055e8:	e000      	b.n	80055ec <HAL_SD_InitCard+0xc8>
  }

  return HAL_OK;
 80055ea:	2300      	movs	r3, #0
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	3728      	adds	r7, #40	; 0x28
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bdb0      	pop	{r4, r5, r7, pc}

080055f4 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b092      	sub	sp, #72	; 0x48
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	60f8      	str	r0, [r7, #12]
 80055fc:	60b9      	str	r1, [r7, #8]
 80055fe:	607a      	str	r2, [r7, #4]
 8005600:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005602:	f7fb ffb9 	bl	8001578 <HAL_GetTick>
 8005606:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d107      	bne.n	8005626 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800561a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005622:	2301      	movs	r3, #1
 8005624:	e1d7      	b.n	80059d6 <HAL_SD_ReadBlocks+0x3e2>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800562c:	b2db      	uxtb	r3, r3
 800562e:	2b01      	cmp	r3, #1
 8005630:	f040 81ca 	bne.w	80059c8 <HAL_SD_ReadBlocks+0x3d4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	2200      	movs	r2, #0
 8005638:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800563a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	441a      	add	r2, r3
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005644:	429a      	cmp	r2, r3
 8005646:	d907      	bls.n	8005658 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800564c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005654:	2301      	movs	r3, #1
 8005656:	e1be      	b.n	80059d6 <HAL_SD_ReadBlocks+0x3e2>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2203      	movs	r2, #3
 800565c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	2200      	movs	r2, #0
 8005666:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800566c:	2b01      	cmp	r3, #1
 800566e:	d002      	beq.n	8005676 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8005670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005672:	025b      	lsls	r3, r3, #9
 8005674:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800567e:	4618      	mov	r0, r3
 8005680:	f002 fd42 	bl	8008108 <SDMMC_CmdBlockLength>
 8005684:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 8005686:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005688:	2b00      	cmp	r3, #0
 800568a:	d00f      	beq.n	80056ac <HAL_SD_ReadBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a9a      	ldr	r2, [pc, #616]	; (80058fc <HAL_SD_ReadBlocks+0x308>)
 8005692:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005698:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800569a:	431a      	orrs	r2, r3
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	2201      	movs	r2, #1
 80056a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80056a8:	2301      	movs	r3, #1
 80056aa:	e194      	b.n	80059d6 <HAL_SD_ReadBlocks+0x3e2>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80056ac:	f04f 33ff 	mov.w	r3, #4294967295
 80056b0:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	025b      	lsls	r3, r3, #9
 80056b6:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80056b8:	2390      	movs	r3, #144	; 0x90
 80056ba:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80056bc:	2302      	movs	r3, #2
 80056be:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80056c0:	2300      	movs	r3, #0
 80056c2:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_ENABLE;
 80056c4:	2301      	movs	r3, #1
 80056c6:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f107 0214 	add.w	r2, r7, #20
 80056d0:	4611      	mov	r1, r2
 80056d2:	4618      	mov	r0, r3
 80056d4:	f002 fcec 	bl	80080b0 <SDMMC_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	2b01      	cmp	r3, #1
 80056dc:	d90a      	bls.n	80056f4 <HAL_SD_ReadBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2202      	movs	r2, #2
 80056e2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80056ea:	4618      	mov	r0, r3
 80056ec:	f002 fd50 	bl	8008190 <SDMMC_CmdReadMultiBlock>
 80056f0:	6478      	str	r0, [r7, #68]	; 0x44
 80056f2:	e009      	b.n	8005708 <HAL_SD_ReadBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	2201      	movs	r2, #1
 80056f8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005700:	4618      	mov	r0, r3
 8005702:	f002 fd23 	bl	800814c <SDMMC_CmdReadSingleBlock>
 8005706:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8005708:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800570a:	2b00      	cmp	r3, #0
 800570c:	d012      	beq.n	8005734 <HAL_SD_ReadBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a7a      	ldr	r2, [pc, #488]	; (80058fc <HAL_SD_ReadBlocks+0x308>)
 8005714:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800571a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800571c:	431a      	orrs	r2, r3
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2201      	movs	r2, #1
 8005726:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2200      	movs	r2, #0
 800572e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005730:	2301      	movs	r3, #1
 8005732:	e150      	b.n	80059d6 <HAL_SD_ReadBlocks+0x3e2>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8005734:	69bb      	ldr	r3, [r7, #24]
 8005736:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005738:	e061      	b.n	80057fe <HAL_SD_ReadBlocks+0x20a>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005740:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005744:	2b00      	cmp	r3, #0
 8005746:	d03c      	beq.n	80057c2 <HAL_SD_ReadBlocks+0x1ce>
 8005748:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800574a:	2b00      	cmp	r3, #0
 800574c:	d039      	beq.n	80057c2 <HAL_SD_ReadBlocks+0x1ce>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800574e:	2300      	movs	r3, #0
 8005750:	643b      	str	r3, [r7, #64]	; 0x40
 8005752:	e033      	b.n	80057bc <HAL_SD_ReadBlocks+0x1c8>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4618      	mov	r0, r3
 800575a:	f002 fc23 	bl	8007fa4 <SDMMC_ReadFIFO>
 800575e:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8005760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005762:	b2da      	uxtb	r2, r3
 8005764:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005766:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800576a:	3301      	adds	r3, #1
 800576c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800576e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005770:	3b01      	subs	r3, #1
 8005772:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8005774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005776:	0a1b      	lsrs	r3, r3, #8
 8005778:	b2da      	uxtb	r2, r3
 800577a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800577c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800577e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005780:	3301      	adds	r3, #1
 8005782:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005784:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005786:	3b01      	subs	r3, #1
 8005788:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800578a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800578c:	0c1b      	lsrs	r3, r3, #16
 800578e:	b2da      	uxtb	r2, r3
 8005790:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005792:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005794:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005796:	3301      	adds	r3, #1
 8005798:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800579a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800579c:	3b01      	subs	r3, #1
 800579e:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80057a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057a2:	0e1b      	lsrs	r3, r3, #24
 80057a4:	b2da      	uxtb	r2, r3
 80057a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057a8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80057aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057ac:	3301      	adds	r3, #1
 80057ae:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80057b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057b2:	3b01      	subs	r3, #1
 80057b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 80057b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057b8:	3301      	adds	r3, #1
 80057ba:	643b      	str	r3, [r7, #64]	; 0x40
 80057bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057be:	2b07      	cmp	r3, #7
 80057c0:	d9c8      	bls.n	8005754 <HAL_SD_ReadBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80057c2:	f7fb fed9 	bl	8001578 <HAL_GetTick>
 80057c6:	4602      	mov	r2, r0
 80057c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ca:	1ad3      	subs	r3, r2, r3
 80057cc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80057ce:	429a      	cmp	r2, r3
 80057d0:	d902      	bls.n	80057d8 <HAL_SD_ReadBlocks+0x1e4>
 80057d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d112      	bne.n	80057fe <HAL_SD_ReadBlocks+0x20a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a47      	ldr	r2, [pc, #284]	; (80058fc <HAL_SD_ReadBlocks+0x308>)
 80057de:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057e4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2201      	movs	r2, #1
 80057f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2200      	movs	r2, #0
 80057f8:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80057fa:	2303      	movs	r3, #3
 80057fc:	e0eb      	b.n	80059d6 <HAL_SD_ReadBlocks+0x3e2>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005804:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8005808:	2b00      	cmp	r3, #0
 800580a:	d096      	beq.n	800573a <HAL_SD_ReadBlocks+0x146>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005812:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005816:	2b00      	cmp	r3, #0
 8005818:	d022      	beq.n	8005860 <HAL_SD_ReadBlocks+0x26c>
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	2b01      	cmp	r3, #1
 800581e:	d91f      	bls.n	8005860 <HAL_SD_ReadBlocks+0x26c>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005824:	2b03      	cmp	r3, #3
 8005826:	d01b      	beq.n	8005860 <HAL_SD_ReadBlocks+0x26c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4618      	mov	r0, r3
 800582e:	f002 fd15 	bl	800825c <SDMMC_CmdStopTransfer>
 8005832:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8005834:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005836:	2b00      	cmp	r3, #0
 8005838:	d012      	beq.n	8005860 <HAL_SD_ReadBlocks+0x26c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a2f      	ldr	r2, [pc, #188]	; (80058fc <HAL_SD_ReadBlocks+0x308>)
 8005840:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005846:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005848:	431a      	orrs	r2, r3
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2201      	movs	r2, #1
 8005852:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2200      	movs	r2, #0
 800585a:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800585c:	2301      	movs	r3, #1
 800585e:	e0ba      	b.n	80059d6 <HAL_SD_ReadBlocks+0x3e2>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005866:	f003 0308 	and.w	r3, r3, #8
 800586a:	2b00      	cmp	r3, #0
 800586c:	d012      	beq.n	8005894 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a22      	ldr	r2, [pc, #136]	; (80058fc <HAL_SD_ReadBlocks+0x308>)
 8005874:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800587a:	f043 0208 	orr.w	r2, r3, #8
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2201      	movs	r2, #1
 8005886:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2200      	movs	r2, #0
 800588e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005890:	2301      	movs	r3, #1
 8005892:	e0a0      	b.n	80059d6 <HAL_SD_ReadBlocks+0x3e2>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800589a:	f003 0302 	and.w	r3, r3, #2
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d012      	beq.n	80058c8 <HAL_SD_ReadBlocks+0x2d4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a15      	ldr	r2, [pc, #84]	; (80058fc <HAL_SD_ReadBlocks+0x308>)
 80058a8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ae:	f043 0202 	orr.w	r2, r3, #2
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2201      	movs	r2, #1
 80058ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2200      	movs	r2, #0
 80058c2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80058c4:	2301      	movs	r3, #1
 80058c6:	e086      	b.n	80059d6 <HAL_SD_ReadBlocks+0x3e2>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058ce:	f003 0320 	and.w	r3, r3, #32
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d063      	beq.n	800599e <HAL_SD_ReadBlocks+0x3aa>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a08      	ldr	r2, [pc, #32]	; (80058fc <HAL_SD_ReadBlocks+0x308>)
 80058dc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058e2:	f043 0220 	orr.w	r2, r3, #32
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2201      	movs	r2, #1
 80058ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2200      	movs	r2, #0
 80058f6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80058f8:	2301      	movs	r3, #1
 80058fa:	e06c      	b.n	80059d6 <HAL_SD_ReadBlocks+0x3e2>
 80058fc:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4618      	mov	r0, r3
 8005906:	f002 fb4d 	bl	8007fa4 <SDMMC_ReadFIFO>
 800590a:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 800590c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800590e:	b2da      	uxtb	r2, r3
 8005910:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005912:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005914:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005916:	3301      	adds	r3, #1
 8005918:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800591a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800591c:	3b01      	subs	r3, #1
 800591e:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8005920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005922:	0a1b      	lsrs	r3, r3, #8
 8005924:	b2da      	uxtb	r2, r3
 8005926:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005928:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800592a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800592c:	3301      	adds	r3, #1
 800592e:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8005930:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005932:	3b01      	subs	r3, #1
 8005934:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8005936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005938:	0c1b      	lsrs	r3, r3, #16
 800593a:	b2da      	uxtb	r2, r3
 800593c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800593e:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005940:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005942:	3301      	adds	r3, #1
 8005944:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8005946:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005948:	3b01      	subs	r3, #1
 800594a:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800594c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800594e:	0e1b      	lsrs	r3, r3, #24
 8005950:	b2da      	uxtb	r2, r3
 8005952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005954:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005956:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005958:	3301      	adds	r3, #1
 800595a:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800595c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800595e:	3b01      	subs	r3, #1
 8005960:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8005962:	f7fb fe09 	bl	8001578 <HAL_GetTick>
 8005966:	4602      	mov	r2, r0
 8005968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800596a:	1ad3      	subs	r3, r2, r3
 800596c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800596e:	429a      	cmp	r2, r3
 8005970:	d902      	bls.n	8005978 <HAL_SD_ReadBlocks+0x384>
 8005972:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005974:	2b00      	cmp	r3, #0
 8005976:	d112      	bne.n	800599e <HAL_SD_ReadBlocks+0x3aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a18      	ldr	r2, [pc, #96]	; (80059e0 <HAL_SD_ReadBlocks+0x3ec>)
 800597e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005984:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2201      	movs	r2, #1
 8005990:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2200      	movs	r2, #0
 8005998:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800599a:	2301      	movs	r3, #1
 800599c:	e01b      	b.n	80059d6 <HAL_SD_ReadBlocks+0x3e2>
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d002      	beq.n	80059b2 <HAL_SD_ReadBlocks+0x3be>
 80059ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d1a6      	bne.n	8005900 <HAL_SD_ReadBlocks+0x30c>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f240 523a 	movw	r2, #1338	; 0x53a
 80059ba:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	2201      	movs	r2, #1
 80059c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80059c4:	2300      	movs	r3, #0
 80059c6:	e006      	b.n	80059d6 <HAL_SD_ReadBlocks+0x3e2>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059cc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80059d4:	2301      	movs	r3, #1
  }
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3748      	adds	r7, #72	; 0x48
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}
 80059de:	bf00      	nop
 80059e0:	004005ff 	.word	0x004005ff

080059e4 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b092      	sub	sp, #72	; 0x48
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	60f8      	str	r0, [r7, #12]
 80059ec:	60b9      	str	r1, [r7, #8]
 80059ee:	607a      	str	r2, [r7, #4]
 80059f0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80059f2:	f7fb fdc1 	bl	8001578 <HAL_GetTick>
 80059f6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d107      	bne.n	8005a16 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a0a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005a12:	2301      	movs	r3, #1
 8005a14:	e182      	b.n	8005d1c <HAL_SD_WriteBlocks+0x338>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005a1c:	b2db      	uxtb	r3, r3
 8005a1e:	2b01      	cmp	r3, #1
 8005a20:	f040 8175 	bne.w	8005d0e <HAL_SD_WriteBlocks+0x32a>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2200      	movs	r2, #0
 8005a28:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005a2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	441a      	add	r2, r3
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a34:	429a      	cmp	r2, r3
 8005a36:	d907      	bls.n	8005a48 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a3c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005a44:	2301      	movs	r3, #1
 8005a46:	e169      	b.n	8005d1c <HAL_SD_WriteBlocks+0x338>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	2203      	movs	r2, #3
 8005a4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	2200      	movs	r2, #0
 8005a56:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a5c:	2b01      	cmp	r3, #1
 8005a5e:	d002      	beq.n	8005a66 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8005a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a62:	025b      	lsls	r3, r3, #9
 8005a64:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f002 fb4a 	bl	8008108 <SDMMC_CmdBlockLength>
 8005a74:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 8005a76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d00f      	beq.n	8005a9c <HAL_SD_WriteBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a9c      	ldr	r2, [pc, #624]	; (8005cf4 <HAL_SD_WriteBlocks+0x310>)
 8005a82:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a8a:	431a      	orrs	r2, r3
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2201      	movs	r2, #1
 8005a94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	e13f      	b.n	8005d1c <HAL_SD_WriteBlocks+0x338>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005a9c:	f04f 33ff 	mov.w	r3, #4294967295
 8005aa0:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	025b      	lsls	r3, r3, #9
 8005aa6:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8005aa8:	2390      	movs	r3, #144	; 0x90
 8005aaa:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8005aac:	2300      	movs	r3, #0
 8005aae:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f107 0218 	add.w	r2, r7, #24
 8005ac0:	4611      	mov	r1, r2
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f002 faf4 	bl	80080b0 <SDMMC_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	2b01      	cmp	r3, #1
 8005acc:	d90a      	bls.n	8005ae4 <HAL_SD_WriteBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2220      	movs	r2, #32
 8005ad2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005ada:	4618      	mov	r0, r3
 8005adc:	f002 fb9c 	bl	8008218 <SDMMC_CmdWriteMultiBlock>
 8005ae0:	6478      	str	r0, [r7, #68]	; 0x44
 8005ae2:	e009      	b.n	8005af8 <HAL_SD_WriteBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2210      	movs	r2, #16
 8005ae8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005af0:	4618      	mov	r0, r3
 8005af2:	f002 fb6f 	bl	80081d4 <SDMMC_CmdWriteSingleBlock>
 8005af6:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8005af8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d012      	beq.n	8005b24 <HAL_SD_WriteBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a7c      	ldr	r2, [pc, #496]	; (8005cf4 <HAL_SD_WriteBlocks+0x310>)
 8005b04:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b0c:	431a      	orrs	r2, r3
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2201      	movs	r2, #1
 8005b16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005b20:	2301      	movs	r3, #1
 8005b22:	e0fb      	b.n	8005d1c <HAL_SD_WriteBlocks+0x338>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8005b24:	69fb      	ldr	r3, [r7, #28]
 8005b26:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005b28:	e065      	b.n	8005bf6 <HAL_SD_WriteBlocks+0x212>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d040      	beq.n	8005bba <HAL_SD_WriteBlocks+0x1d6>
 8005b38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d03d      	beq.n	8005bba <HAL_SD_WriteBlocks+0x1d6>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8005b3e:	2300      	movs	r3, #0
 8005b40:	643b      	str	r3, [r7, #64]	; 0x40
 8005b42:	e037      	b.n	8005bb4 <HAL_SD_WriteBlocks+0x1d0>
        {
          data = (uint32_t)(*tempbuff);
 8005b44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b46:	781b      	ldrb	r3, [r3, #0]
 8005b48:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005b4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b4c:	3301      	adds	r3, #1
 8005b4e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005b50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b52:	3b01      	subs	r3, #1
 8005b54:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8005b56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b58:	781b      	ldrb	r3, [r3, #0]
 8005b5a:	021a      	lsls	r2, r3, #8
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005b62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b64:	3301      	adds	r3, #1
 8005b66:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005b68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b6a:	3b01      	subs	r3, #1
 8005b6c:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8005b6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b70:	781b      	ldrb	r3, [r3, #0]
 8005b72:	041a      	lsls	r2, r3, #16
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	4313      	orrs	r3, r2
 8005b78:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005b7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b7c:	3301      	adds	r3, #1
 8005b7e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005b80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b82:	3b01      	subs	r3, #1
 8005b84:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8005b86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b88:	781b      	ldrb	r3, [r3, #0]
 8005b8a:	061a      	lsls	r2, r3, #24
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005b92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b94:	3301      	adds	r3, #1
 8005b96:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005b98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b9a:	3b01      	subs	r3, #1
 8005b9c:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f107 0214 	add.w	r2, r7, #20
 8005ba6:	4611      	mov	r1, r2
 8005ba8:	4618      	mov	r0, r3
 8005baa:	f002 fa08 	bl	8007fbe <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8005bae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bb0:	3301      	adds	r3, #1
 8005bb2:	643b      	str	r3, [r7, #64]	; 0x40
 8005bb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bb6:	2b07      	cmp	r3, #7
 8005bb8:	d9c4      	bls.n	8005b44 <HAL_SD_WriteBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8005bba:	f7fb fcdd 	bl	8001578 <HAL_GetTick>
 8005bbe:	4602      	mov	r2, r0
 8005bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bc2:	1ad3      	subs	r3, r2, r3
 8005bc4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005bc6:	429a      	cmp	r2, r3
 8005bc8:	d902      	bls.n	8005bd0 <HAL_SD_WriteBlocks+0x1ec>
 8005bca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d112      	bne.n	8005bf6 <HAL_SD_WriteBlocks+0x212>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a47      	ldr	r2, [pc, #284]	; (8005cf4 <HAL_SD_WriteBlocks+0x310>)
 8005bd6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005bdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bde:	431a      	orrs	r2, r3
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2201      	movs	r2, #1
 8005be8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8005bf2:	2303      	movs	r3, #3
 8005bf4:	e092      	b.n	8005d1c <HAL_SD_WriteBlocks+0x338>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bfc:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d092      	beq.n	8005b2a <HAL_SD_WriteBlocks+0x146>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d022      	beq.n	8005c58 <HAL_SD_WriteBlocks+0x274>
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	d91f      	bls.n	8005c58 <HAL_SD_WriteBlocks+0x274>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c1c:	2b03      	cmp	r3, #3
 8005c1e:	d01b      	beq.n	8005c58 <HAL_SD_WriteBlocks+0x274>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4618      	mov	r0, r3
 8005c26:	f002 fb19 	bl	800825c <SDMMC_CmdStopTransfer>
 8005c2a:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8005c2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d012      	beq.n	8005c58 <HAL_SD_WriteBlocks+0x274>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a2f      	ldr	r2, [pc, #188]	; (8005cf4 <HAL_SD_WriteBlocks+0x310>)
 8005c38:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c40:	431a      	orrs	r2, r3
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	2201      	movs	r2, #1
 8005c4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2200      	movs	r2, #0
 8005c52:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8005c54:	2301      	movs	r3, #1
 8005c56:	e061      	b.n	8005d1c <HAL_SD_WriteBlocks+0x338>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c5e:	f003 0308 	and.w	r3, r3, #8
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d012      	beq.n	8005c8c <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a22      	ldr	r2, [pc, #136]	; (8005cf4 <HAL_SD_WriteBlocks+0x310>)
 8005c6c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c72:	f043 0208 	orr.w	r2, r3, #8
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	2201      	movs	r2, #1
 8005c7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2200      	movs	r2, #0
 8005c86:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005c88:	2301      	movs	r3, #1
 8005c8a:	e047      	b.n	8005d1c <HAL_SD_WriteBlocks+0x338>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c92:	f003 0302 	and.w	r3, r3, #2
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d012      	beq.n	8005cc0 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a15      	ldr	r2, [pc, #84]	; (8005cf4 <HAL_SD_WriteBlocks+0x310>)
 8005ca0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ca6:	f043 0202 	orr.w	r2, r3, #2
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2201      	movs	r2, #1
 8005cb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	e02d      	b.n	8005d1c <HAL_SD_WriteBlocks+0x338>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cc6:	f003 0310 	and.w	r3, r3, #16
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d014      	beq.n	8005cf8 <HAL_SD_WriteBlocks+0x314>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a08      	ldr	r2, [pc, #32]	; (8005cf4 <HAL_SD_WriteBlocks+0x310>)
 8005cd4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cda:	f043 0210 	orr.w	r2, r3, #16
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2201      	movs	r2, #1
 8005ce6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	2200      	movs	r2, #0
 8005cee:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	e013      	b.n	8005d1c <HAL_SD_WriteBlocks+0x338>
 8005cf4:	004005ff 	.word	0x004005ff
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f240 523a 	movw	r2, #1338	; 0x53a
 8005d00:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2201      	movs	r2, #1
 8005d06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	e006      	b.n	8005d1c <HAL_SD_WriteBlocks+0x338>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d12:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005d1a:	2301      	movs	r3, #1
  }
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	3748      	adds	r7, #72	; 0x48
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}

08005d24 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b08c      	sub	sp, #48	; 0x30
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	60f8      	str	r0, [r7, #12]
 8005d2c:	60b9      	str	r1, [r7, #8]
 8005d2e:	607a      	str	r2, [r7, #4]
 8005d30:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d107      	bne.n	8005d4c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d40:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005d48:	2301      	movs	r3, #1
 8005d4a:	e0cc      	b.n	8005ee6 <HAL_SD_ReadBlocks_DMA+0x1c2>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005d52:	b2db      	uxtb	r3, r3
 8005d54:	2b01      	cmp	r3, #1
 8005d56:	f040 80c5 	bne.w	8005ee4 <HAL_SD_ReadBlocks_DMA+0x1c0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005d60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	441a      	add	r2, r3
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	d907      	bls.n	8005d7e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d72:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	e0b3      	b.n	8005ee6 <HAL_SD_ReadBlocks_DMA+0x1c2>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	2203      	movs	r2, #3
 8005d82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8005d9c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005da2:	4a53      	ldr	r2, [pc, #332]	; (8005ef0 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8005da4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005daa:	4a52      	ldr	r2, [pc, #328]	; (8005ef4 <HAL_SD_ReadBlocks_DMA+0x1d0>)
 8005dac:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005db2:	2200      	movs	r2, #0
 8005db4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	3380      	adds	r3, #128	; 0x80
 8005dc0:	4619      	mov	r1, r3
 8005dc2:	68ba      	ldr	r2, [r7, #8]
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	025b      	lsls	r3, r3, #9
 8005dc8:	089b      	lsrs	r3, r3, #2
 8005dca:	f7fc fb47 	bl	800245c <HAL_DMA_Start_IT>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d017      	beq.n	8005e04 <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8005de2:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a43      	ldr	r2, [pc, #268]	; (8005ef8 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 8005dea:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005df0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8005e00:	2301      	movs	r3, #1
 8005e02:	e070      	b.n	8005ee6 <HAL_SD_ReadBlocks_DMA+0x1c2>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f042 0208 	orr.w	r2, r2, #8
 8005e12:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e18:	2b01      	cmp	r3, #1
 8005e1a:	d002      	beq.n	8005e22 <HAL_SD_ReadBlocks_DMA+0xfe>
      {
        add *= 512U;
 8005e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e1e:	025b      	lsls	r3, r3, #9
 8005e20:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	f002 f96c 	bl	8008108 <SDMMC_CmdBlockLength>
 8005e30:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 8005e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d00f      	beq.n	8005e58 <HAL_SD_ReadBlocks_DMA+0x134>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a2e      	ldr	r2, [pc, #184]	; (8005ef8 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 8005e3e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e46:	431a      	orrs	r2, r3
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	2201      	movs	r2, #1
 8005e50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 8005e54:	2301      	movs	r3, #1
 8005e56:	e046      	b.n	8005ee6 <HAL_SD_ReadBlocks_DMA+0x1c2>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005e58:	f04f 33ff 	mov.w	r3, #4294967295
 8005e5c:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	025b      	lsls	r3, r3, #9
 8005e62:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8005e64:	2390      	movs	r3, #144	; 0x90
 8005e66:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005e68:	2302      	movs	r3, #2
 8005e6a:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8005e70:	2301      	movs	r3, #1
 8005e72:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f107 0210 	add.w	r2, r7, #16
 8005e7c:	4611      	mov	r1, r2
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f002 f916 	bl	80080b0 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	2b01      	cmp	r3, #1
 8005e88:	d90a      	bls.n	8005ea0 <HAL_SD_ReadBlocks_DMA+0x17c>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2282      	movs	r2, #130	; 0x82
 8005e8e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005e96:	4618      	mov	r0, r3
 8005e98:	f002 f97a 	bl	8008190 <SDMMC_CmdReadMultiBlock>
 8005e9c:	62f8      	str	r0, [r7, #44]	; 0x2c
 8005e9e:	e009      	b.n	8005eb4 <HAL_SD_ReadBlocks_DMA+0x190>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	2281      	movs	r2, #129	; 0x81
 8005ea4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005eac:	4618      	mov	r0, r3
 8005eae:	f002 f94d 	bl	800814c <SDMMC_CmdReadSingleBlock>
 8005eb2:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8005eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d012      	beq.n	8005ee0 <HAL_SD_ReadBlocks_DMA+0x1bc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a0e      	ldr	r2, [pc, #56]	; (8005ef8 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 8005ec0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ec8:	431a      	orrs	r2, r3
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2201      	movs	r2, #1
 8005ed2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8005edc:	2301      	movs	r3, #1
 8005ede:	e002      	b.n	8005ee6 <HAL_SD_ReadBlocks_DMA+0x1c2>
      }

      return HAL_OK;
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	e000      	b.n	8005ee6 <HAL_SD_ReadBlocks_DMA+0x1c2>
    }
  }
  else
  {
    return HAL_BUSY;
 8005ee4:	2302      	movs	r3, #2
  }
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3730      	adds	r7, #48	; 0x30
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}
 8005eee:	bf00      	nop
 8005ef0:	080068db 	.word	0x080068db
 8005ef4:	0800694d 	.word	0x0800694d
 8005ef8:	004005ff 	.word	0x004005ff

08005efc <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b08c      	sub	sp, #48	; 0x30
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	60f8      	str	r0, [r7, #12]
 8005f04:	60b9      	str	r1, [r7, #8]
 8005f06:	607a      	str	r2, [r7, #4]
 8005f08:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d107      	bne.n	8005f24 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f18:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005f20:	2301      	movs	r3, #1
 8005f22:	e0cf      	b.n	80060c4 <HAL_SD_WriteBlocks_DMA+0x1c8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005f2a:	b2db      	uxtb	r3, r3
 8005f2c:	2b01      	cmp	r3, #1
 8005f2e:	f040 80c8 	bne.w	80060c2 <HAL_SD_WriteBlocks_DMA+0x1c6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2200      	movs	r2, #0
 8005f36:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005f38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	441a      	add	r2, r3
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f42:	429a      	cmp	r2, r3
 8005f44:	d907      	bls.n	8005f56 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f4a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005f52:	2301      	movs	r3, #1
 8005f54:	e0b6      	b.n	80060c4 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	2203      	movs	r2, #3
 8005f5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	2200      	movs	r2, #0
 8005f64:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f042 021a 	orr.w	r2, r2, #26
 8005f74:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f7a:	4a54      	ldr	r2, [pc, #336]	; (80060cc <HAL_SD_WriteBlocks_DMA+0x1d0>)
 8005f7c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f82:	4a53      	ldr	r2, [pc, #332]	; (80060d0 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 8005f84:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f92:	2b01      	cmp	r3, #1
 8005f94:	d002      	beq.n	8005f9c <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8005f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f98:	025b      	lsls	r3, r3, #9
 8005f9a:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	f002 f8af 	bl	8008108 <SDMMC_CmdBlockLength>
 8005faa:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d00f      	beq.n	8005fd2 <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a47      	ldr	r2, [pc, #284]	; (80060d4 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8005fb8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fc0:	431a      	orrs	r2, r3
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	2201      	movs	r2, #1
 8005fca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8005fce:	2301      	movs	r3, #1
 8005fd0:	e078      	b.n	80060c4 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	2b01      	cmp	r3, #1
 8005fd6:	d90a      	bls.n	8005fee <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	22a0      	movs	r2, #160	; 0xa0
 8005fdc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	f002 f917 	bl	8008218 <SDMMC_CmdWriteMultiBlock>
 8005fea:	62f8      	str	r0, [r7, #44]	; 0x2c
 8005fec:	e009      	b.n	8006002 <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	2290      	movs	r2, #144	; 0x90
 8005ff2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	f002 f8ea 	bl	80081d4 <SDMMC_CmdWriteSingleBlock>
 8006000:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8006002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006004:	2b00      	cmp	r3, #0
 8006006:	d012      	beq.n	800602e <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a31      	ldr	r2, [pc, #196]	; (80060d4 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 800600e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006016:	431a      	orrs	r2, r3
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	2201      	movs	r2, #1
 8006020:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	2200      	movs	r2, #0
 8006028:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800602a:	2301      	movs	r3, #1
 800602c:	e04a      	b.n	80060c4 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f042 0208 	orr.w	r2, r2, #8
 800603c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006042:	68b9      	ldr	r1, [r7, #8]
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	3380      	adds	r3, #128	; 0x80
 800604a:	461a      	mov	r2, r3
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	025b      	lsls	r3, r3, #9
 8006050:	089b      	lsrs	r3, r3, #2
 8006052:	f7fc fa03 	bl	800245c <HAL_DMA_Start_IT>
 8006056:	4603      	mov	r3, r0
 8006058:	2b00      	cmp	r3, #0
 800605a:	d01a      	beq.n	8006092 <HAL_SD_WriteBlocks_DMA+0x196>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f022 021a 	bic.w	r2, r2, #26
 800606a:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a18      	ldr	r2, [pc, #96]	; (80060d4 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8006072:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006078:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2201      	movs	r2, #1
 8006084:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	2200      	movs	r2, #0
 800608c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800608e:	2301      	movs	r3, #1
 8006090:	e018      	b.n	80060c4 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006092:	f04f 33ff 	mov.w	r3, #4294967295
 8006096:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	025b      	lsls	r3, r3, #9
 800609c:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800609e:	2390      	movs	r3, #144	; 0x90
 80060a0:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80060a2:	2300      	movs	r3, #0
 80060a4:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80060a6:	2300      	movs	r3, #0
 80060a8:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 80060aa:	2301      	movs	r3, #1
 80060ac:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f107 0210 	add.w	r2, r7, #16
 80060b6:	4611      	mov	r1, r2
 80060b8:	4618      	mov	r0, r3
 80060ba:	f001 fff9 	bl	80080b0 <SDMMC_ConfigData>

      return HAL_OK;
 80060be:	2300      	movs	r3, #0
 80060c0:	e000      	b.n	80060c4 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }
  }
  else
  {
    return HAL_BUSY;
 80060c2:	2302      	movs	r3, #2
  }
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	3730      	adds	r7, #48	; 0x30
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}
 80060cc:	080068b1 	.word	0x080068b1
 80060d0:	0800694d 	.word	0x0800694d
 80060d4:	004005ff 	.word	0x004005ff

080060d8 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b084      	sub	sp, #16
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060e4:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d008      	beq.n	8006106 <HAL_SD_IRQHandler+0x2e>
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	f003 0308 	and.w	r3, r3, #8
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d003      	beq.n	8006106 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f000 ffc8 	bl	8007094 <SD_Read_IT>
 8006104:	e153      	b.n	80063ae <HAL_SD_IRQHandler+0x2d6>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800610c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006110:	2b00      	cmp	r3, #0
 8006112:	f000 808d 	beq.w	8006230 <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800611e:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681a      	ldr	r2, [r3, #0]
 800612a:	4ba3      	ldr	r3, [pc, #652]	; (80063b8 <HAL_SD_IRQHandler+0x2e0>)
 800612c:	400b      	ands	r3, r1
 800612e:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f022 0201 	bic.w	r2, r2, #1
 800613e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	f003 0308 	and.w	r3, r3, #8
 8006146:	2b00      	cmp	r3, #0
 8006148:	d039      	beq.n	80061be <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	f003 0302 	and.w	r3, r3, #2
 8006150:	2b00      	cmp	r3, #0
 8006152:	d104      	bne.n	800615e <HAL_SD_IRQHandler+0x86>
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	f003 0320 	and.w	r3, r3, #32
 800615a:	2b00      	cmp	r3, #0
 800615c:	d011      	beq.n	8006182 <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4618      	mov	r0, r3
 8006164:	f002 f87a 	bl	800825c <SDMMC_CmdStopTransfer>
 8006168:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d008      	beq.n	8006182 <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	431a      	orrs	r2, r3
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800617c:	6878      	ldr	r0, [r7, #4]
 800617e:	f000 f921 	bl	80063c4 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f240 523a 	movw	r2, #1338	; 0x53a
 800618a:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2201      	movs	r2, #1
 8006190:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2200      	movs	r2, #0
 8006198:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	f003 0301 	and.w	r3, r3, #1
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d104      	bne.n	80061ae <HAL_SD_IRQHandler+0xd6>
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	f003 0302 	and.w	r3, r3, #2
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d003      	beq.n	80061b6 <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f003 fffc 	bl	800a1ac <HAL_SD_RxCpltCallback>
 80061b4:	e0fb      	b.n	80063ae <HAL_SD_IRQHandler+0x2d6>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	f003 ffee 	bl	800a198 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80061bc:	e0f7      	b.n	80063ae <HAL_SD_IRQHandler+0x2d6>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	f000 80f2 	beq.w	80063ae <HAL_SD_IRQHandler+0x2d6>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	f003 0320 	and.w	r3, r3, #32
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d011      	beq.n	80061f8 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4618      	mov	r0, r3
 80061da:	f002 f83f 	bl	800825c <SDMMC_CmdStopTransfer>
 80061de:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d008      	beq.n	80061f8 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	431a      	orrs	r2, r3
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f000 f8e6 	bl	80063c4 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	f003 0301 	and.w	r3, r3, #1
 80061fe:	2b00      	cmp	r3, #0
 8006200:	f040 80d5 	bne.w	80063ae <HAL_SD_IRQHandler+0x2d6>
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	f003 0302 	and.w	r3, r3, #2
 800620a:	2b00      	cmp	r3, #0
 800620c:	f040 80cf 	bne.w	80063ae <HAL_SD_IRQHandler+0x2d6>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f022 0208 	bic.w	r2, r2, #8
 800621e:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2201      	movs	r2, #1
 8006224:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	f003 ffb5 	bl	800a198 <HAL_SD_TxCpltCallback>
}
 800622e:	e0be      	b.n	80063ae <HAL_SD_IRQHandler+0x2d6>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006236:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800623a:	2b00      	cmp	r3, #0
 800623c:	d008      	beq.n	8006250 <HAL_SD_IRQHandler+0x178>
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	f003 0308 	and.w	r3, r3, #8
 8006244:	2b00      	cmp	r3, #0
 8006246:	d003      	beq.n	8006250 <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	f000 ff74 	bl	8007136 <SD_Write_IT>
 800624e:	e0ae      	b.n	80063ae <HAL_SD_IRQHandler+0x2d6>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006256:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800625a:	2b00      	cmp	r3, #0
 800625c:	f000 80a7 	beq.w	80063ae <HAL_SD_IRQHandler+0x2d6>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006266:	f003 0302 	and.w	r3, r3, #2
 800626a:	2b00      	cmp	r3, #0
 800626c:	d005      	beq.n	800627a <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006272:	f043 0202 	orr.w	r2, r3, #2
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006280:	f003 0308 	and.w	r3, r3, #8
 8006284:	2b00      	cmp	r3, #0
 8006286:	d005      	beq.n	8006294 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800628c:	f043 0208 	orr.w	r2, r3, #8
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800629a:	f003 0320 	and.w	r3, r3, #32
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d005      	beq.n	80062ae <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062a6:	f043 0220 	orr.w	r2, r3, #32
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062b4:	f003 0310 	and.w	r3, r3, #16
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d005      	beq.n	80062c8 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062c0:	f043 0210 	orr.w	r2, r3, #16
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f240 523a 	movw	r2, #1338	; 0x53a
 80062d0:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80062e0:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4618      	mov	r0, r3
 80062e8:	f001 ffb8 	bl	800825c <SDMMC_CmdStopTransfer>
 80062ec:	4602      	mov	r2, r0
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062f2:	431a      	orrs	r2, r3
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	f003 0308 	and.w	r3, r3, #8
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d00a      	beq.n	8006318 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2201      	movs	r2, #1
 8006306:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2200      	movs	r2, #0
 800630e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8006310:	6878      	ldr	r0, [r7, #4]
 8006312:	f000 f857 	bl	80063c4 <HAL_SD_ErrorCallback>
}
 8006316:	e04a      	b.n	80063ae <HAL_SD_IRQHandler+0x2d6>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800631e:	2b00      	cmp	r3, #0
 8006320:	d045      	beq.n	80063ae <HAL_SD_IRQHandler+0x2d6>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	f003 0310 	and.w	r3, r3, #16
 8006328:	2b00      	cmp	r3, #0
 800632a:	d104      	bne.n	8006336 <HAL_SD_IRQHandler+0x25e>
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f003 0320 	and.w	r3, r3, #32
 8006332:	2b00      	cmp	r3, #0
 8006334:	d011      	beq.n	800635a <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800633a:	4a20      	ldr	r2, [pc, #128]	; (80063bc <HAL_SD_IRQHandler+0x2e4>)
 800633c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006342:	4618      	mov	r0, r3
 8006344:	f7fc f8ea 	bl	800251c <HAL_DMA_Abort_IT>
 8006348:	4603      	mov	r3, r0
 800634a:	2b00      	cmp	r3, #0
 800634c:	d02f      	beq.n	80063ae <HAL_SD_IRQHandler+0x2d6>
          SD_DMATxAbort(hsd->hdmatx);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006352:	4618      	mov	r0, r3
 8006354:	f000 fb4c 	bl	80069f0 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8006358:	e029      	b.n	80063ae <HAL_SD_IRQHandler+0x2d6>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	f003 0301 	and.w	r3, r3, #1
 8006360:	2b00      	cmp	r3, #0
 8006362:	d104      	bne.n	800636e <HAL_SD_IRQHandler+0x296>
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	f003 0302 	and.w	r3, r3, #2
 800636a:	2b00      	cmp	r3, #0
 800636c:	d011      	beq.n	8006392 <HAL_SD_IRQHandler+0x2ba>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006372:	4a13      	ldr	r2, [pc, #76]	; (80063c0 <HAL_SD_IRQHandler+0x2e8>)
 8006374:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800637a:	4618      	mov	r0, r3
 800637c:	f7fc f8ce 	bl	800251c <HAL_DMA_Abort_IT>
 8006380:	4603      	mov	r3, r0
 8006382:	2b00      	cmp	r3, #0
 8006384:	d013      	beq.n	80063ae <HAL_SD_IRQHandler+0x2d6>
          SD_DMARxAbort(hsd->hdmarx);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800638a:	4618      	mov	r0, r3
 800638c:	f000 fb67 	bl	8006a5e <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8006390:	e00d      	b.n	80063ae <HAL_SD_IRQHandler+0x2d6>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2200      	movs	r2, #0
 8006396:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2201      	movs	r2, #1
 800639c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2200      	movs	r2, #0
 80063a4:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f003 feec 	bl	800a184 <HAL_SD_AbortCallback>
}
 80063ac:	e7ff      	b.n	80063ae <HAL_SD_IRQHandler+0x2d6>
 80063ae:	bf00      	nop
 80063b0:	3710      	adds	r7, #16
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bd80      	pop	{r7, pc}
 80063b6:	bf00      	nop
 80063b8:	ffff3ec5 	.word	0xffff3ec5
 80063bc:	080069f1 	.word	0x080069f1
 80063c0:	08006a5f 	.word	0x08006a5f

080063c4 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b083      	sub	sp, #12
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80063cc:	bf00      	nop
 80063ce:	370c      	adds	r7, #12
 80063d0:	46bd      	mov	sp, r7
 80063d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d6:	4770      	bx	lr

080063d8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80063d8:	b480      	push	{r7}
 80063da:	b083      	sub	sp, #12
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
 80063e0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80063e6:	0f9b      	lsrs	r3, r3, #30
 80063e8:	b2da      	uxtb	r2, r3
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80063f2:	0e9b      	lsrs	r3, r3, #26
 80063f4:	b2db      	uxtb	r3, r3
 80063f6:	f003 030f 	and.w	r3, r3, #15
 80063fa:	b2da      	uxtb	r2, r3
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006404:	0e1b      	lsrs	r3, r3, #24
 8006406:	b2db      	uxtb	r3, r3
 8006408:	f003 0303 	and.w	r3, r3, #3
 800640c:	b2da      	uxtb	r2, r3
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006416:	0c1b      	lsrs	r3, r3, #16
 8006418:	b2da      	uxtb	r2, r3
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006422:	0a1b      	lsrs	r3, r3, #8
 8006424:	b2da      	uxtb	r2, r3
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800642e:	b2da      	uxtb	r2, r3
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006438:	0d1b      	lsrs	r3, r3, #20
 800643a:	b29a      	uxth	r2, r3
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006444:	0c1b      	lsrs	r3, r3, #16
 8006446:	b2db      	uxtb	r3, r3
 8006448:	f003 030f 	and.w	r3, r3, #15
 800644c:	b2da      	uxtb	r2, r3
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006456:	0bdb      	lsrs	r3, r3, #15
 8006458:	b2db      	uxtb	r3, r3
 800645a:	f003 0301 	and.w	r3, r3, #1
 800645e:	b2da      	uxtb	r2, r3
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006468:	0b9b      	lsrs	r3, r3, #14
 800646a:	b2db      	uxtb	r3, r3
 800646c:	f003 0301 	and.w	r3, r3, #1
 8006470:	b2da      	uxtb	r2, r3
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800647a:	0b5b      	lsrs	r3, r3, #13
 800647c:	b2db      	uxtb	r3, r3
 800647e:	f003 0301 	and.w	r3, r3, #1
 8006482:	b2da      	uxtb	r2, r3
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800648c:	0b1b      	lsrs	r3, r3, #12
 800648e:	b2db      	uxtb	r3, r3
 8006490:	f003 0301 	and.w	r3, r3, #1
 8006494:	b2da      	uxtb	r2, r3
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	2200      	movs	r2, #0
 800649e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d163      	bne.n	8006570 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80064ac:	009a      	lsls	r2, r3, #2
 80064ae:	f640 73fc 	movw	r3, #4092	; 0xffc
 80064b2:	4013      	ands	r3, r2
 80064b4:	687a      	ldr	r2, [r7, #4]
 80064b6:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80064b8:	0f92      	lsrs	r2, r2, #30
 80064ba:	431a      	orrs	r2, r3
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064c4:	0edb      	lsrs	r3, r3, #27
 80064c6:	b2db      	uxtb	r3, r3
 80064c8:	f003 0307 	and.w	r3, r3, #7
 80064cc:	b2da      	uxtb	r2, r3
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064d6:	0e1b      	lsrs	r3, r3, #24
 80064d8:	b2db      	uxtb	r3, r3
 80064da:	f003 0307 	and.w	r3, r3, #7
 80064de:	b2da      	uxtb	r2, r3
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064e8:	0d5b      	lsrs	r3, r3, #21
 80064ea:	b2db      	uxtb	r3, r3
 80064ec:	f003 0307 	and.w	r3, r3, #7
 80064f0:	b2da      	uxtb	r2, r3
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064fa:	0c9b      	lsrs	r3, r3, #18
 80064fc:	b2db      	uxtb	r3, r3
 80064fe:	f003 0307 	and.w	r3, r3, #7
 8006502:	b2da      	uxtb	r2, r3
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800650c:	0bdb      	lsrs	r3, r3, #15
 800650e:	b2db      	uxtb	r3, r3
 8006510:	f003 0307 	and.w	r3, r3, #7
 8006514:	b2da      	uxtb	r2, r3
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	691b      	ldr	r3, [r3, #16]
 800651e:	1c5a      	adds	r2, r3, #1
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	7e1b      	ldrb	r3, [r3, #24]
 8006528:	b2db      	uxtb	r3, r3
 800652a:	f003 0307 	and.w	r3, r3, #7
 800652e:	3302      	adds	r3, #2
 8006530:	2201      	movs	r2, #1
 8006532:	fa02 f303 	lsl.w	r3, r2, r3
 8006536:	687a      	ldr	r2, [r7, #4]
 8006538:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800653a:	fb02 f203 	mul.w	r2, r2, r3
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	7a1b      	ldrb	r3, [r3, #8]
 8006546:	b2db      	uxtb	r3, r3
 8006548:	f003 030f 	and.w	r3, r3, #15
 800654c:	2201      	movs	r2, #1
 800654e:	409a      	lsls	r2, r3
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006558:	687a      	ldr	r2, [r7, #4]
 800655a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800655c:	0a52      	lsrs	r2, r2, #9
 800655e:	fb02 f203 	mul.w	r2, r2, r3
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	f44f 7200 	mov.w	r2, #512	; 0x200
 800656c:	661a      	str	r2, [r3, #96]	; 0x60
 800656e:	e031      	b.n	80065d4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006574:	2b01      	cmp	r3, #1
 8006576:	d11d      	bne.n	80065b4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800657c:	041b      	lsls	r3, r3, #16
 800657e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006586:	0c1b      	lsrs	r3, r3, #16
 8006588:	431a      	orrs	r2, r3
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	691b      	ldr	r3, [r3, #16]
 8006592:	3301      	adds	r3, #1
 8006594:	029a      	lsls	r2, r3, #10
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80065a8:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	661a      	str	r2, [r3, #96]	; 0x60
 80065b2:	e00f      	b.n	80065d4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a58      	ldr	r2, [pc, #352]	; (800671c <HAL_SD_GetCardCSD+0x344>)
 80065ba:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065c0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2201      	movs	r2, #1
 80065cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80065d0:	2301      	movs	r3, #1
 80065d2:	e09d      	b.n	8006710 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065d8:	0b9b      	lsrs	r3, r3, #14
 80065da:	b2db      	uxtb	r3, r3
 80065dc:	f003 0301 	and.w	r3, r3, #1
 80065e0:	b2da      	uxtb	r2, r3
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065ea:	09db      	lsrs	r3, r3, #7
 80065ec:	b2db      	uxtb	r3, r3
 80065ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065f2:	b2da      	uxtb	r2, r3
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065fc:	b2db      	uxtb	r3, r3
 80065fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006602:	b2da      	uxtb	r2, r3
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800660c:	0fdb      	lsrs	r3, r3, #31
 800660e:	b2da      	uxtb	r2, r3
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006618:	0f5b      	lsrs	r3, r3, #29
 800661a:	b2db      	uxtb	r3, r3
 800661c:	f003 0303 	and.w	r3, r3, #3
 8006620:	b2da      	uxtb	r2, r3
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800662a:	0e9b      	lsrs	r3, r3, #26
 800662c:	b2db      	uxtb	r3, r3
 800662e:	f003 0307 	and.w	r3, r3, #7
 8006632:	b2da      	uxtb	r2, r3
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800663c:	0d9b      	lsrs	r3, r3, #22
 800663e:	b2db      	uxtb	r3, r3
 8006640:	f003 030f 	and.w	r3, r3, #15
 8006644:	b2da      	uxtb	r2, r3
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800664e:	0d5b      	lsrs	r3, r3, #21
 8006650:	b2db      	uxtb	r3, r3
 8006652:	f003 0301 	and.w	r3, r3, #1
 8006656:	b2da      	uxtb	r2, r3
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	2200      	movs	r2, #0
 8006662:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800666a:	0c1b      	lsrs	r3, r3, #16
 800666c:	b2db      	uxtb	r3, r3
 800666e:	f003 0301 	and.w	r3, r3, #1
 8006672:	b2da      	uxtb	r2, r3
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800667e:	0bdb      	lsrs	r3, r3, #15
 8006680:	b2db      	uxtb	r3, r3
 8006682:	f003 0301 	and.w	r3, r3, #1
 8006686:	b2da      	uxtb	r2, r3
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006692:	0b9b      	lsrs	r3, r3, #14
 8006694:	b2db      	uxtb	r3, r3
 8006696:	f003 0301 	and.w	r3, r3, #1
 800669a:	b2da      	uxtb	r2, r3
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066a6:	0b5b      	lsrs	r3, r3, #13
 80066a8:	b2db      	uxtb	r3, r3
 80066aa:	f003 0301 	and.w	r3, r3, #1
 80066ae:	b2da      	uxtb	r2, r3
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066ba:	0b1b      	lsrs	r3, r3, #12
 80066bc:	b2db      	uxtb	r3, r3
 80066be:	f003 0301 	and.w	r3, r3, #1
 80066c2:	b2da      	uxtb	r2, r3
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066ce:	0a9b      	lsrs	r3, r3, #10
 80066d0:	b2db      	uxtb	r3, r3
 80066d2:	f003 0303 	and.w	r3, r3, #3
 80066d6:	b2da      	uxtb	r2, r3
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066e2:	0a1b      	lsrs	r3, r3, #8
 80066e4:	b2db      	uxtb	r3, r3
 80066e6:	f003 0303 	and.w	r3, r3, #3
 80066ea:	b2da      	uxtb	r2, r3
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066f6:	085b      	lsrs	r3, r3, #1
 80066f8:	b2db      	uxtb	r3, r3
 80066fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066fe:	b2da      	uxtb	r2, r3
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	2201      	movs	r2, #1
 800670a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800670e:	2300      	movs	r3, #0
}
 8006710:	4618      	mov	r0, r3
 8006712:	370c      	adds	r7, #12
 8006714:	46bd      	mov	sp, r7
 8006716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671a:	4770      	bx	lr
 800671c:	004005ff 	.word	0x004005ff

08006720 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8006720:	b480      	push	{r7}
 8006722:	b083      	sub	sp, #12
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
 8006728:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800676a:	2300      	movs	r3, #0
}
 800676c:	4618      	mov	r0, r3
 800676e:	370c      	adds	r7, #12
 8006770:	46bd      	mov	sp, r7
 8006772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006776:	4770      	bx	lr

08006778 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8006778:	b5b0      	push	{r4, r5, r7, lr}
 800677a:	b08e      	sub	sp, #56	; 0x38
 800677c:	af04      	add	r7, sp, #16
 800677e:	6078      	str	r0, [r7, #4]
 8006780:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2203      	movs	r2, #3
 8006786:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800678e:	2b03      	cmp	r3, #3
 8006790:	d02e      	beq.n	80067f0 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006798:	d106      	bne.n	80067a8 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800679e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	639a      	str	r2, [r3, #56]	; 0x38
 80067a6:	e029      	b.n	80067fc <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067ae:	d10a      	bne.n	80067c6 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f000 fb0f 	bl	8006dd4 <SD_WideBus_Enable>
 80067b6:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067be:	431a      	orrs	r2, r3
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	639a      	str	r2, [r3, #56]	; 0x38
 80067c4:	e01a      	b.n	80067fc <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d10a      	bne.n	80067e2 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	f000 fb4c 	bl	8006e6a <SD_WideBus_Disable>
 80067d2:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067da:	431a      	orrs	r2, r3
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	639a      	str	r2, [r3, #56]	; 0x38
 80067e0:	e00c      	b.n	80067fc <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067e6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	639a      	str	r2, [r3, #56]	; 0x38
 80067ee:	e005      	b.n	80067fc <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067f4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006800:	2b00      	cmp	r3, #0
 8006802:	d009      	beq.n	8006818 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4a18      	ldr	r2, [pc, #96]	; (800686c <HAL_SD_ConfigWideBusOperation+0xf4>)
 800680a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2201      	movs	r2, #1
 8006810:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006814:	2301      	movs	r3, #1
 8006816:	e024      	b.n	8006862 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	689b      	ldr	r3, [r3, #8]
 8006822:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	68db      	ldr	r3, [r3, #12]
 8006828:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	695b      	ldr	r3, [r3, #20]
 8006832:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	699b      	ldr	r3, [r3, #24]
 8006838:	623b      	str	r3, [r7, #32]
    (void)SDMMC_Init(hsd->Instance, Init);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681d      	ldr	r5, [r3, #0]
 800683e:	466c      	mov	r4, sp
 8006840:	f107 0318 	add.w	r3, r7, #24
 8006844:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006848:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800684c:	f107 030c 	add.w	r3, r7, #12
 8006850:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006852:	4628      	mov	r0, r5
 8006854:	f001 fb7a 	bl	8007f4c <SDMMC_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2201      	movs	r2, #1
 800685c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006860:	2300      	movs	r3, #0
}
 8006862:	4618      	mov	r0, r3
 8006864:	3728      	adds	r7, #40	; 0x28
 8006866:	46bd      	mov	sp, r7
 8006868:	bdb0      	pop	{r4, r5, r7, pc}
 800686a:	bf00      	nop
 800686c:	004005ff 	.word	0x004005ff

08006870 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b086      	sub	sp, #24
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8006878:	2300      	movs	r3, #0
 800687a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800687c:	f107 030c 	add.w	r3, r7, #12
 8006880:	4619      	mov	r1, r3
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f000 fa7e 	bl	8006d84 <SD_SendStatus>
 8006888:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800688a:	697b      	ldr	r3, [r7, #20]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d005      	beq.n	800689c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006894:	697b      	ldr	r3, [r7, #20]
 8006896:	431a      	orrs	r2, r3
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	0a5b      	lsrs	r3, r3, #9
 80068a0:	f003 030f 	and.w	r3, r3, #15
 80068a4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80068a6:	693b      	ldr	r3, [r7, #16]
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	3718      	adds	r7, #24
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}

080068b0 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80068b0:	b480      	push	{r7}
 80068b2:	b085      	sub	sp, #20
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068bc:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80068cc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80068ce:	bf00      	nop
 80068d0:	3714      	adds	r7, #20
 80068d2:	46bd      	mov	sp, r7
 80068d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d8:	4770      	bx	lr

080068da <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80068da:	b580      	push	{r7, lr}
 80068dc:	b084      	sub	sp, #16
 80068de:	af00      	add	r7, sp, #0
 80068e0:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068e6:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068ec:	2b82      	cmp	r3, #130	; 0x82
 80068ee:	d111      	bne.n	8006914 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4618      	mov	r0, r3
 80068f6:	f001 fcb1 	bl	800825c <SDMMC_CmdStopTransfer>
 80068fa:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d008      	beq.n	8006914 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	431a      	orrs	r2, r3
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800690e:	68f8      	ldr	r0, [r7, #12]
 8006910:	f7ff fd58 	bl	80063c4 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f022 0208 	bic.w	r2, r2, #8
 8006922:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f240 523a 	movw	r2, #1338	; 0x53a
 800692c:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	2201      	movs	r2, #1
 8006932:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	2200      	movs	r2, #0
 800693a:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800693c:	68f8      	ldr	r0, [r7, #12]
 800693e:	f003 fc35 	bl	800a1ac <HAL_SD_RxCpltCallback>
#endif
}
 8006942:	bf00      	nop
 8006944:	3710      	adds	r7, #16
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}
	...

0800694c <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b086      	sub	sp, #24
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006958:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	f7fb ff8a 	bl	8002874 <HAL_DMA_GetError>
 8006960:	4603      	mov	r3, r0
 8006962:	2b02      	cmp	r3, #2
 8006964:	d03e      	beq.n	80069e4 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800696a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800696c:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006972:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006974:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8006976:	693b      	ldr	r3, [r7, #16]
 8006978:	2b01      	cmp	r3, #1
 800697a:	d002      	beq.n	8006982 <SD_DMAError+0x36>
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	2b01      	cmp	r3, #1
 8006980:	d12d      	bne.n	80069de <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	4a19      	ldr	r2, [pc, #100]	; (80069ec <SD_DMAError+0xa0>)
 8006988:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800698a:	697b      	ldr	r3, [r7, #20]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006990:	697b      	ldr	r3, [r7, #20]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8006998:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800699a:	697b      	ldr	r3, [r7, #20]
 800699c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800699e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80069a2:	697b      	ldr	r3, [r7, #20]
 80069a4:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 80069a6:	6978      	ldr	r0, [r7, #20]
 80069a8:	f7ff ff62 	bl	8006870 <HAL_SD_GetCardState>
 80069ac:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	2b06      	cmp	r3, #6
 80069b2:	d002      	beq.n	80069ba <SD_DMAError+0x6e>
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	2b05      	cmp	r3, #5
 80069b8:	d10a      	bne.n	80069d0 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4618      	mov	r0, r3
 80069c0:	f001 fc4c 	bl	800825c <SDMMC_CmdStopTransfer>
 80069c4:	4602      	mov	r2, r0
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069ca:	431a      	orrs	r2, r3
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	2201      	movs	r2, #1
 80069d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80069d8:	697b      	ldr	r3, [r7, #20]
 80069da:	2200      	movs	r2, #0
 80069dc:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 80069de:	6978      	ldr	r0, [r7, #20]
 80069e0:	f7ff fcf0 	bl	80063c4 <HAL_SD_ErrorCallback>
#endif
  }
}
 80069e4:	bf00      	nop
 80069e6:	3718      	adds	r7, #24
 80069e8:	46bd      	mov	sp, r7
 80069ea:	bd80      	pop	{r7, pc}
 80069ec:	004005ff 	.word	0x004005ff

080069f0 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b084      	sub	sp, #16
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069fc:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f240 523a 	movw	r2, #1338	; 0x53a
 8006a06:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8006a08:	68f8      	ldr	r0, [r7, #12]
 8006a0a:	f7ff ff31 	bl	8006870 <HAL_SD_GetCardState>
 8006a0e:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	2201      	movs	r2, #1
 8006a14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	2b06      	cmp	r3, #6
 8006a22:	d002      	beq.n	8006a2a <SD_DMATxAbort+0x3a>
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	2b05      	cmp	r3, #5
 8006a28:	d10a      	bne.n	8006a40 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f001 fc14 	bl	800825c <SDMMC_CmdStopTransfer>
 8006a34:	4602      	mov	r2, r0
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a3a:	431a      	orrs	r2, r3
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d103      	bne.n	8006a50 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8006a48:	68f8      	ldr	r0, [r7, #12]
 8006a4a:	f003 fb9b 	bl	800a184 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8006a4e:	e002      	b.n	8006a56 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8006a50:	68f8      	ldr	r0, [r7, #12]
 8006a52:	f7ff fcb7 	bl	80063c4 <HAL_SD_ErrorCallback>
}
 8006a56:	bf00      	nop
 8006a58:	3710      	adds	r7, #16
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bd80      	pop	{r7, pc}

08006a5e <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8006a5e:	b580      	push	{r7, lr}
 8006a60:	b084      	sub	sp, #16
 8006a62:	af00      	add	r7, sp, #0
 8006a64:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a6a:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f240 523a 	movw	r2, #1338	; 0x53a
 8006a74:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8006a76:	68f8      	ldr	r0, [r7, #12]
 8006a78:	f7ff fefa 	bl	8006870 <HAL_SD_GetCardState>
 8006a7c:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	2201      	movs	r2, #1
 8006a82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	2b06      	cmp	r3, #6
 8006a90:	d002      	beq.n	8006a98 <SD_DMARxAbort+0x3a>
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	2b05      	cmp	r3, #5
 8006a96:	d10a      	bne.n	8006aae <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	f001 fbdd 	bl	800825c <SDMMC_CmdStopTransfer>
 8006aa2:	4602      	mov	r2, r0
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aa8:	431a      	orrs	r2, r3
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d103      	bne.n	8006abe <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8006ab6:	68f8      	ldr	r0, [r7, #12]
 8006ab8:	f003 fb64 	bl	800a184 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8006abc:	e002      	b.n	8006ac4 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8006abe:	68f8      	ldr	r0, [r7, #12]
 8006ac0:	f7ff fc80 	bl	80063c4 <HAL_SD_ErrorCallback>
}
 8006ac4:	bf00      	nop
 8006ac6:	3710      	adds	r7, #16
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bd80      	pop	{r7, pc}

08006acc <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006acc:	b5b0      	push	{r4, r5, r7, lr}
 8006ace:	b094      	sub	sp, #80	; 0x50
 8006ad0:	af04      	add	r7, sp, #16
 8006ad2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4618      	mov	r0, r3
 8006ade:	f001 fa8e 	bl	8007ffe <SDMMC_GetPowerState>
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d102      	bne.n	8006aee <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006ae8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006aec:	e0b7      	b.n	8006c5e <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006af2:	2b03      	cmp	r3, #3
 8006af4:	d02f      	beq.n	8006b56 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4618      	mov	r0, r3
 8006afc:	f001 fcb9 	bl	8008472 <SDMMC_CmdSendCID>
 8006b00:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006b02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d001      	beq.n	8006b0c <SD_InitCard+0x40>
    {
      return errorstate;
 8006b08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b0a:	e0a8      	b.n	8006c5e <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	2100      	movs	r1, #0
 8006b12:	4618      	mov	r0, r3
 8006b14:	f001 fab9 	bl	800808a <SDMMC_GetResponse>
 8006b18:	4602      	mov	r2, r0
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	2104      	movs	r1, #4
 8006b24:	4618      	mov	r0, r3
 8006b26:	f001 fab0 	bl	800808a <SDMMC_GetResponse>
 8006b2a:	4602      	mov	r2, r0
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	2108      	movs	r1, #8
 8006b36:	4618      	mov	r0, r3
 8006b38:	f001 faa7 	bl	800808a <SDMMC_GetResponse>
 8006b3c:	4602      	mov	r2, r0
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	210c      	movs	r1, #12
 8006b48:	4618      	mov	r0, r3
 8006b4a:	f001 fa9e 	bl	800808a <SDMMC_GetResponse>
 8006b4e:	4602      	mov	r2, r0
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b5a:	2b03      	cmp	r3, #3
 8006b5c:	d00d      	beq.n	8006b7a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f107 020e 	add.w	r2, r7, #14
 8006b66:	4611      	mov	r1, r2
 8006b68:	4618      	mov	r0, r3
 8006b6a:	f001 fcbf 	bl	80084ec <SDMMC_CmdSetRelAdd>
 8006b6e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006b70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d001      	beq.n	8006b7a <SD_InitCard+0xae>
    {
      return errorstate;
 8006b76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b78:	e071      	b.n	8006c5e <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b7e:	2b03      	cmp	r3, #3
 8006b80:	d036      	beq.n	8006bf0 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8006b82:	89fb      	ldrh	r3, [r7, #14]
 8006b84:	461a      	mov	r2, r3
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681a      	ldr	r2, [r3, #0]
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b92:	041b      	lsls	r3, r3, #16
 8006b94:	4619      	mov	r1, r3
 8006b96:	4610      	mov	r0, r2
 8006b98:	f001 fc89 	bl	80084ae <SDMMC_CmdSendCSD>
 8006b9c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006b9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d001      	beq.n	8006ba8 <SD_InitCard+0xdc>
    {
      return errorstate;
 8006ba4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ba6:	e05a      	b.n	8006c5e <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	2100      	movs	r1, #0
 8006bae:	4618      	mov	r0, r3
 8006bb0:	f001 fa6b 	bl	800808a <SDMMC_GetResponse>
 8006bb4:	4602      	mov	r2, r0
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	2104      	movs	r1, #4
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	f001 fa62 	bl	800808a <SDMMC_GetResponse>
 8006bc6:	4602      	mov	r2, r0
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	2108      	movs	r1, #8
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f001 fa59 	bl	800808a <SDMMC_GetResponse>
 8006bd8:	4602      	mov	r2, r0
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	210c      	movs	r1, #12
 8006be4:	4618      	mov	r0, r3
 8006be6:	f001 fa50 	bl	800808a <SDMMC_GetResponse>
 8006bea:	4602      	mov	r2, r0
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	2104      	movs	r1, #4
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	f001 fa47 	bl	800808a <SDMMC_GetResponse>
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	0d1a      	lsrs	r2, r3, #20
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006c04:	f107 0310 	add.w	r3, r7, #16
 8006c08:	4619      	mov	r1, r3
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f7ff fbe4 	bl	80063d8 <HAL_SD_GetCardCSD>
 8006c10:	4603      	mov	r3, r0
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d002      	beq.n	8006c1c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006c16:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006c1a:	e020      	b.n	8006c5e <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6819      	ldr	r1, [r3, #0]
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c24:	041b      	lsls	r3, r3, #16
 8006c26:	f04f 0400 	mov.w	r4, #0
 8006c2a:	461a      	mov	r2, r3
 8006c2c:	4623      	mov	r3, r4
 8006c2e:	4608      	mov	r0, r1
 8006c30:	f001 fb36 	bl	80082a0 <SDMMC_CmdSelDesel>
 8006c34:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8006c36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d001      	beq.n	8006c40 <SD_InitCard+0x174>
  {
    return errorstate;
 8006c3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c3e:	e00e      	b.n	8006c5e <SD_InitCard+0x192>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681d      	ldr	r5, [r3, #0]
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	466c      	mov	r4, sp
 8006c48:	f103 0210 	add.w	r2, r3, #16
 8006c4c:	ca07      	ldmia	r2, {r0, r1, r2}
 8006c4e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006c52:	3304      	adds	r3, #4
 8006c54:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006c56:	4628      	mov	r0, r5
 8006c58:	f001 f978 	bl	8007f4c <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8006c5c:	2300      	movs	r3, #0
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	3740      	adds	r7, #64	; 0x40
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bdb0      	pop	{r4, r5, r7, pc}
	...

08006c68 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b086      	sub	sp, #24
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006c70:	2300      	movs	r3, #0
 8006c72:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8006c74:	2300      	movs	r3, #0
 8006c76:	617b      	str	r3, [r7, #20]
 8006c78:	2300      	movs	r3, #0
 8006c7a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4618      	mov	r0, r3
 8006c82:	f001 fb30 	bl	80082e6 <SDMMC_CmdGoIdleState>
 8006c86:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d001      	beq.n	8006c92 <SD_PowerON+0x2a>
  {
    return errorstate;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	e072      	b.n	8006d78 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4618      	mov	r0, r3
 8006c98:	f001 fb43 	bl	8008322 <SDMMC_CmdOperCond>
 8006c9c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d00d      	beq.n	8006cc0 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4618      	mov	r0, r3
 8006cb0:	f001 fb19 	bl	80082e6 <SDMMC_CmdGoIdleState>
 8006cb4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d004      	beq.n	8006cc6 <SD_PowerON+0x5e>
    {
      return errorstate;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	e05b      	b.n	8006d78 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2201      	movs	r2, #1
 8006cc4:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cca:	2b01      	cmp	r3, #1
 8006ccc:	d137      	bne.n	8006d3e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	2100      	movs	r1, #0
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	f001 fb43 	bl	8008360 <SDMMC_CmdAppCommand>
 8006cda:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d02d      	beq.n	8006d3e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006ce2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006ce6:	e047      	b.n	8006d78 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	2100      	movs	r1, #0
 8006cee:	4618      	mov	r0, r3
 8006cf0:	f001 fb36 	bl	8008360 <SDMMC_CmdAppCommand>
 8006cf4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d001      	beq.n	8006d00 <SD_PowerON+0x98>
    {
      return errorstate;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	e03b      	b.n	8006d78 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	491e      	ldr	r1, [pc, #120]	; (8006d80 <SD_PowerON+0x118>)
 8006d06:	4618      	mov	r0, r3
 8006d08:	f001 fb4c 	bl	80083a4 <SDMMC_CmdAppOperCommand>
 8006d0c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d002      	beq.n	8006d1a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006d14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006d18:	e02e      	b.n	8006d78 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	2100      	movs	r1, #0
 8006d20:	4618      	mov	r0, r3
 8006d22:	f001 f9b2 	bl	800808a <SDMMC_GetResponse>
 8006d26:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006d28:	697b      	ldr	r3, [r7, #20]
 8006d2a:	0fdb      	lsrs	r3, r3, #31
 8006d2c:	2b01      	cmp	r3, #1
 8006d2e:	d101      	bne.n	8006d34 <SD_PowerON+0xcc>
 8006d30:	2301      	movs	r3, #1
 8006d32:	e000      	b.n	8006d36 <SD_PowerON+0xce>
 8006d34:	2300      	movs	r3, #0
 8006d36:	613b      	str	r3, [r7, #16]

    count++;
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	3301      	adds	r3, #1
 8006d3c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d802      	bhi.n	8006d4e <SD_PowerON+0xe6>
 8006d48:	693b      	ldr	r3, [r7, #16]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d0cc      	beq.n	8006ce8 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d902      	bls.n	8006d5e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006d58:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006d5c:	e00c      	b.n	8006d78 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8006d5e:	697b      	ldr	r3, [r7, #20]
 8006d60:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d003      	beq.n	8006d70 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2201      	movs	r2, #1
 8006d6c:	645a      	str	r2, [r3, #68]	; 0x44
 8006d6e:	e002      	b.n	8006d76 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2200      	movs	r2, #0
 8006d74:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8006d76:	2300      	movs	r3, #0
}
 8006d78:	4618      	mov	r0, r3
 8006d7a:	3718      	adds	r7, #24
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bd80      	pop	{r7, pc}
 8006d80:	c1100000 	.word	0xc1100000

08006d84 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b084      	sub	sp, #16
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
 8006d8c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d102      	bne.n	8006d9a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8006d94:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006d98:	e018      	b.n	8006dcc <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681a      	ldr	r2, [r3, #0]
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006da2:	041b      	lsls	r3, r3, #16
 8006da4:	4619      	mov	r1, r3
 8006da6:	4610      	mov	r0, r2
 8006da8:	f001 fbc1 	bl	800852e <SDMMC_CmdSendStatus>
 8006dac:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d001      	beq.n	8006db8 <SD_SendStatus+0x34>
  {
    return errorstate;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	e009      	b.n	8006dcc <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	2100      	movs	r1, #0
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	f001 f963 	bl	800808a <SDMMC_GetResponse>
 8006dc4:	4602      	mov	r2, r0
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8006dca:	2300      	movs	r3, #0
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	3710      	adds	r7, #16
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd80      	pop	{r7, pc}

08006dd4 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b086      	sub	sp, #24
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8006ddc:	2300      	movs	r3, #0
 8006dde:	60fb      	str	r3, [r7, #12]
 8006de0:	2300      	movs	r3, #0
 8006de2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	2100      	movs	r1, #0
 8006dea:	4618      	mov	r0, r3
 8006dec:	f001 f94d 	bl	800808a <SDMMC_GetResponse>
 8006df0:	4603      	mov	r3, r0
 8006df2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006df6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006dfa:	d102      	bne.n	8006e02 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006dfc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006e00:	e02f      	b.n	8006e62 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006e02:	f107 030c 	add.w	r3, r7, #12
 8006e06:	4619      	mov	r1, r3
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f000 f879 	bl	8006f00 <SD_FindSCR>
 8006e0e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006e10:	697b      	ldr	r3, [r7, #20]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d001      	beq.n	8006e1a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8006e16:	697b      	ldr	r3, [r7, #20]
 8006e18:	e023      	b.n	8006e62 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006e1a:	693b      	ldr	r3, [r7, #16]
 8006e1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d01c      	beq.n	8006e5e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681a      	ldr	r2, [r3, #0]
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e2c:	041b      	lsls	r3, r3, #16
 8006e2e:	4619      	mov	r1, r3
 8006e30:	4610      	mov	r0, r2
 8006e32:	f001 fa95 	bl	8008360 <SDMMC_CmdAppCommand>
 8006e36:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006e38:	697b      	ldr	r3, [r7, #20]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d001      	beq.n	8006e42 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	e00f      	b.n	8006e62 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	2102      	movs	r1, #2
 8006e48:	4618      	mov	r0, r3
 8006e4a:	f001 facf 	bl	80083ec <SDMMC_CmdBusWidth>
 8006e4e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006e50:	697b      	ldr	r3, [r7, #20]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d001      	beq.n	8006e5a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8006e56:	697b      	ldr	r3, [r7, #20]
 8006e58:	e003      	b.n	8006e62 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	e001      	b.n	8006e62 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006e5e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	3718      	adds	r7, #24
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}

08006e6a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8006e6a:	b580      	push	{r7, lr}
 8006e6c:	b086      	sub	sp, #24
 8006e6e:	af00      	add	r7, sp, #0
 8006e70:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8006e72:	2300      	movs	r3, #0
 8006e74:	60fb      	str	r3, [r7, #12]
 8006e76:	2300      	movs	r3, #0
 8006e78:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	2100      	movs	r1, #0
 8006e80:	4618      	mov	r0, r3
 8006e82:	f001 f902 	bl	800808a <SDMMC_GetResponse>
 8006e86:	4603      	mov	r3, r0
 8006e88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e8c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006e90:	d102      	bne.n	8006e98 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006e92:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006e96:	e02f      	b.n	8006ef8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006e98:	f107 030c 	add.w	r3, r7, #12
 8006e9c:	4619      	mov	r1, r3
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f000 f82e 	bl	8006f00 <SD_FindSCR>
 8006ea4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d001      	beq.n	8006eb0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8006eac:	697b      	ldr	r3, [r7, #20]
 8006eae:	e023      	b.n	8006ef8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006eb0:	693b      	ldr	r3, [r7, #16]
 8006eb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d01c      	beq.n	8006ef4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681a      	ldr	r2, [r3, #0]
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ec2:	041b      	lsls	r3, r3, #16
 8006ec4:	4619      	mov	r1, r3
 8006ec6:	4610      	mov	r0, r2
 8006ec8:	f001 fa4a 	bl	8008360 <SDMMC_CmdAppCommand>
 8006ecc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d001      	beq.n	8006ed8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8006ed4:	697b      	ldr	r3, [r7, #20]
 8006ed6:	e00f      	b.n	8006ef8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	2100      	movs	r1, #0
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f001 fa84 	bl	80083ec <SDMMC_CmdBusWidth>
 8006ee4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d001      	beq.n	8006ef0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	e003      	b.n	8006ef8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	e001      	b.n	8006ef8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006ef4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	3718      	adds	r7, #24
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bd80      	pop	{r7, pc}

08006f00 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8006f00:	b590      	push	{r4, r7, lr}
 8006f02:	b08f      	sub	sp, #60	; 0x3c
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
 8006f08:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006f0a:	f7fa fb35 	bl	8001578 <HAL_GetTick>
 8006f0e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8006f10:	2300      	movs	r3, #0
 8006f12:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8006f14:	2300      	movs	r3, #0
 8006f16:	60bb      	str	r3, [r7, #8]
 8006f18:	2300      	movs	r3, #0
 8006f1a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	2108      	movs	r1, #8
 8006f26:	4618      	mov	r0, r3
 8006f28:	f001 f8ee 	bl	8008108 <SDMMC_CmdBlockLength>
 8006f2c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d001      	beq.n	8006f38 <SD_FindSCR+0x38>
  {
    return errorstate;
 8006f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f36:	e0a9      	b.n	800708c <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681a      	ldr	r2, [r3, #0]
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f40:	041b      	lsls	r3, r3, #16
 8006f42:	4619      	mov	r1, r3
 8006f44:	4610      	mov	r0, r2
 8006f46:	f001 fa0b 	bl	8008360 <SDMMC_CmdAppCommand>
 8006f4a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d001      	beq.n	8006f56 <SD_FindSCR+0x56>
  {
    return errorstate;
 8006f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f54:	e09a      	b.n	800708c <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006f56:	f04f 33ff 	mov.w	r3, #4294967295
 8006f5a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8006f5c:	2308      	movs	r3, #8
 8006f5e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8006f60:	2330      	movs	r3, #48	; 0x30
 8006f62:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006f64:	2302      	movs	r3, #2
 8006f66:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006f68:	2300      	movs	r3, #0
 8006f6a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f107 0210 	add.w	r2, r7, #16
 8006f78:	4611      	mov	r1, r2
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	f001 f898 	bl	80080b0 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4618      	mov	r0, r3
 8006f86:	f001 fa53 	bl	8008430 <SDMMC_CmdSendSCR>
 8006f8a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d022      	beq.n	8006fd8 <SD_FindSCR+0xd8>
  {
    return errorstate;
 8006f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f94:	e07a      	b.n	800708c <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d00e      	beq.n	8006fc2 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6819      	ldr	r1, [r3, #0]
 8006fa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006faa:	009b      	lsls	r3, r3, #2
 8006fac:	f107 0208 	add.w	r2, r7, #8
 8006fb0:	18d4      	adds	r4, r2, r3
 8006fb2:	4608      	mov	r0, r1
 8006fb4:	f000 fff6 	bl	8007fa4 <SDMMC_ReadFIFO>
 8006fb8:	4603      	mov	r3, r0
 8006fba:	6023      	str	r3, [r4, #0]
      index++;
 8006fbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fbe:	3301      	adds	r3, #1
 8006fc0:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006fc2:	f7fa fad9 	bl	8001578 <HAL_GetTick>
 8006fc6:	4602      	mov	r2, r0
 8006fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fca:	1ad3      	subs	r3, r2, r3
 8006fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fd0:	d102      	bne.n	8006fd8 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006fd2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006fd6:	e059      	b.n	800708c <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006fde:	f240 432a 	movw	r3, #1066	; 0x42a
 8006fe2:	4013      	ands	r3, r2
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d0d6      	beq.n	8006f96 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fee:	f003 0308 	and.w	r3, r3, #8
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d005      	beq.n	8007002 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	2208      	movs	r2, #8
 8006ffc:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8006ffe:	2308      	movs	r3, #8
 8007000:	e044      	b.n	800708c <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007008:	f003 0302 	and.w	r3, r3, #2
 800700c:	2b00      	cmp	r3, #0
 800700e:	d005      	beq.n	800701c <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	2202      	movs	r2, #2
 8007016:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007018:	2302      	movs	r3, #2
 800701a:	e037      	b.n	800708c <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007022:	f003 0320 	and.w	r3, r3, #32
 8007026:	2b00      	cmp	r3, #0
 8007028:	d005      	beq.n	8007036 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	2220      	movs	r2, #32
 8007030:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8007032:	2320      	movs	r3, #32
 8007034:	e02a      	b.n	800708c <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f240 523a 	movw	r2, #1338	; 0x53a
 800703e:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	061a      	lsls	r2, r3, #24
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	021b      	lsls	r3, r3, #8
 8007048:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800704c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	0a1b      	lsrs	r3, r3, #8
 8007052:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007056:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	0e1b      	lsrs	r3, r3, #24
 800705c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800705e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007060:	601a      	str	r2, [r3, #0]
    scr++;
 8007062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007064:	3304      	adds	r3, #4
 8007066:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	061a      	lsls	r2, r3, #24
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	021b      	lsls	r3, r3, #8
 8007070:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007074:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	0a1b      	lsrs	r3, r3, #8
 800707a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800707e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	0e1b      	lsrs	r3, r3, #24
 8007084:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007088:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800708a:	2300      	movs	r3, #0
}
 800708c:	4618      	mov	r0, r3
 800708e:	373c      	adds	r7, #60	; 0x3c
 8007090:	46bd      	mov	sp, r7
 8007092:	bd90      	pop	{r4, r7, pc}

08007094 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b086      	sub	sp, #24
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070a0:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070a6:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80070a8:	693b      	ldr	r3, [r7, #16]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d03f      	beq.n	800712e <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80070ae:	2300      	movs	r3, #0
 80070b0:	617b      	str	r3, [r7, #20]
 80070b2:	e033      	b.n	800711c <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4618      	mov	r0, r3
 80070ba:	f000 ff73 	bl	8007fa4 <SDMMC_ReadFIFO>
 80070be:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	b2da      	uxtb	r2, r3
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	701a      	strb	r2, [r3, #0]
      tmp++;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	3301      	adds	r3, #1
 80070cc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80070ce:	693b      	ldr	r3, [r7, #16]
 80070d0:	3b01      	subs	r3, #1
 80070d2:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	0a1b      	lsrs	r3, r3, #8
 80070d8:	b2da      	uxtb	r2, r3
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	701a      	strb	r2, [r3, #0]
      tmp++;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	3301      	adds	r3, #1
 80070e2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80070e4:	693b      	ldr	r3, [r7, #16]
 80070e6:	3b01      	subs	r3, #1
 80070e8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80070ea:	68bb      	ldr	r3, [r7, #8]
 80070ec:	0c1b      	lsrs	r3, r3, #16
 80070ee:	b2da      	uxtb	r2, r3
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	701a      	strb	r2, [r3, #0]
      tmp++;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	3301      	adds	r3, #1
 80070f8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80070fa:	693b      	ldr	r3, [r7, #16]
 80070fc:	3b01      	subs	r3, #1
 80070fe:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	0e1b      	lsrs	r3, r3, #24
 8007104:	b2da      	uxtb	r2, r3
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	701a      	strb	r2, [r3, #0]
      tmp++;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	3301      	adds	r3, #1
 800710e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007110:	693b      	ldr	r3, [r7, #16]
 8007112:	3b01      	subs	r3, #1
 8007114:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8007116:	697b      	ldr	r3, [r7, #20]
 8007118:	3301      	adds	r3, #1
 800711a:	617b      	str	r3, [r7, #20]
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	2b07      	cmp	r3, #7
 8007120:	d9c8      	bls.n	80070b4 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	68fa      	ldr	r2, [r7, #12]
 8007126:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	693a      	ldr	r2, [r7, #16]
 800712c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800712e:	bf00      	nop
 8007130:	3718      	adds	r7, #24
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}

08007136 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8007136:	b580      	push	{r7, lr}
 8007138:	b086      	sub	sp, #24
 800713a:	af00      	add	r7, sp, #0
 800713c:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6a1b      	ldr	r3, [r3, #32]
 8007142:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007148:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800714a:	693b      	ldr	r3, [r7, #16]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d043      	beq.n	80071d8 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8007150:	2300      	movs	r3, #0
 8007152:	617b      	str	r3, [r7, #20]
 8007154:	e037      	b.n	80071c6 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	781b      	ldrb	r3, [r3, #0]
 800715a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	3301      	adds	r3, #1
 8007160:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007162:	693b      	ldr	r3, [r7, #16]
 8007164:	3b01      	subs	r3, #1
 8007166:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	781b      	ldrb	r3, [r3, #0]
 800716c:	021a      	lsls	r2, r3, #8
 800716e:	68bb      	ldr	r3, [r7, #8]
 8007170:	4313      	orrs	r3, r2
 8007172:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	3301      	adds	r3, #1
 8007178:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800717a:	693b      	ldr	r3, [r7, #16]
 800717c:	3b01      	subs	r3, #1
 800717e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	781b      	ldrb	r3, [r3, #0]
 8007184:	041a      	lsls	r2, r3, #16
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	4313      	orrs	r3, r2
 800718a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	3301      	adds	r3, #1
 8007190:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007192:	693b      	ldr	r3, [r7, #16]
 8007194:	3b01      	subs	r3, #1
 8007196:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	781b      	ldrb	r3, [r3, #0]
 800719c:	061a      	lsls	r2, r3, #24
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	4313      	orrs	r3, r2
 80071a2:	60bb      	str	r3, [r7, #8]
      tmp++;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	3301      	adds	r3, #1
 80071a8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80071aa:	693b      	ldr	r3, [r7, #16]
 80071ac:	3b01      	subs	r3, #1
 80071ae:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f107 0208 	add.w	r2, r7, #8
 80071b8:	4611      	mov	r1, r2
 80071ba:	4618      	mov	r0, r3
 80071bc:	f000 feff 	bl	8007fbe <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80071c0:	697b      	ldr	r3, [r7, #20]
 80071c2:	3301      	adds	r3, #1
 80071c4:	617b      	str	r3, [r7, #20]
 80071c6:	697b      	ldr	r3, [r7, #20]
 80071c8:	2b07      	cmp	r3, #7
 80071ca:	d9c4      	bls.n	8007156 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	68fa      	ldr	r2, [r7, #12]
 80071d0:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	693a      	ldr	r2, [r7, #16]
 80071d6:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 80071d8:	bf00      	nop
 80071da:	3718      	adds	r7, #24
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd80      	pop	{r7, pc}

080071e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b082      	sub	sp, #8
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d101      	bne.n	80071f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80071ee:	2301      	movs	r3, #1
 80071f0:	e01d      	b.n	800722e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071f8:	b2db      	uxtb	r3, r3
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d106      	bne.n	800720c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2200      	movs	r2, #0
 8007202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	f7fa f808 	bl	800121c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2202      	movs	r2, #2
 8007210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681a      	ldr	r2, [r3, #0]
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	3304      	adds	r3, #4
 800721c:	4619      	mov	r1, r3
 800721e:	4610      	mov	r0, r2
 8007220:	f000 f97c 	bl	800751c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2201      	movs	r2, #1
 8007228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800722c:	2300      	movs	r3, #0
}
 800722e:	4618      	mov	r0, r3
 8007230:	3708      	adds	r7, #8
 8007232:	46bd      	mov	sp, r7
 8007234:	bd80      	pop	{r7, pc}
	...

08007238 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007238:	b480      	push	{r7}
 800723a:	b085      	sub	sp, #20
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	68da      	ldr	r2, [r3, #12]
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f042 0201 	orr.w	r2, r2, #1
 800724e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	689a      	ldr	r2, [r3, #8]
 8007256:	4b0c      	ldr	r3, [pc, #48]	; (8007288 <HAL_TIM_Base_Start_IT+0x50>)
 8007258:	4013      	ands	r3, r2
 800725a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	2b06      	cmp	r3, #6
 8007260:	d00b      	beq.n	800727a <HAL_TIM_Base_Start_IT+0x42>
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007268:	d007      	beq.n	800727a <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	681a      	ldr	r2, [r3, #0]
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f042 0201 	orr.w	r2, r2, #1
 8007278:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800727a:	2300      	movs	r3, #0
}
 800727c:	4618      	mov	r0, r3
 800727e:	3714      	adds	r7, #20
 8007280:	46bd      	mov	sp, r7
 8007282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007286:	4770      	bx	lr
 8007288:	00010007 	.word	0x00010007

0800728c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b082      	sub	sp, #8
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	691b      	ldr	r3, [r3, #16]
 800729a:	f003 0302 	and.w	r3, r3, #2
 800729e:	2b02      	cmp	r3, #2
 80072a0:	d122      	bne.n	80072e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	68db      	ldr	r3, [r3, #12]
 80072a8:	f003 0302 	and.w	r3, r3, #2
 80072ac:	2b02      	cmp	r3, #2
 80072ae:	d11b      	bne.n	80072e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f06f 0202 	mvn.w	r2, #2
 80072b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2201      	movs	r2, #1
 80072be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	699b      	ldr	r3, [r3, #24]
 80072c6:	f003 0303 	and.w	r3, r3, #3
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d003      	beq.n	80072d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f000 f905 	bl	80074de <HAL_TIM_IC_CaptureCallback>
 80072d4:	e005      	b.n	80072e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f000 f8f7 	bl	80074ca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f000 f908 	bl	80074f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2200      	movs	r2, #0
 80072e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	691b      	ldr	r3, [r3, #16]
 80072ee:	f003 0304 	and.w	r3, r3, #4
 80072f2:	2b04      	cmp	r3, #4
 80072f4:	d122      	bne.n	800733c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	68db      	ldr	r3, [r3, #12]
 80072fc:	f003 0304 	and.w	r3, r3, #4
 8007300:	2b04      	cmp	r3, #4
 8007302:	d11b      	bne.n	800733c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f06f 0204 	mvn.w	r2, #4
 800730c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2202      	movs	r2, #2
 8007312:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	699b      	ldr	r3, [r3, #24]
 800731a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800731e:	2b00      	cmp	r3, #0
 8007320:	d003      	beq.n	800732a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f000 f8db 	bl	80074de <HAL_TIM_IC_CaptureCallback>
 8007328:	e005      	b.n	8007336 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f000 f8cd 	bl	80074ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007330:	6878      	ldr	r0, [r7, #4]
 8007332:	f000 f8de 	bl	80074f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2200      	movs	r2, #0
 800733a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	691b      	ldr	r3, [r3, #16]
 8007342:	f003 0308 	and.w	r3, r3, #8
 8007346:	2b08      	cmp	r3, #8
 8007348:	d122      	bne.n	8007390 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	68db      	ldr	r3, [r3, #12]
 8007350:	f003 0308 	and.w	r3, r3, #8
 8007354:	2b08      	cmp	r3, #8
 8007356:	d11b      	bne.n	8007390 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f06f 0208 	mvn.w	r2, #8
 8007360:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2204      	movs	r2, #4
 8007366:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	69db      	ldr	r3, [r3, #28]
 800736e:	f003 0303 	and.w	r3, r3, #3
 8007372:	2b00      	cmp	r3, #0
 8007374:	d003      	beq.n	800737e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	f000 f8b1 	bl	80074de <HAL_TIM_IC_CaptureCallback>
 800737c:	e005      	b.n	800738a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f000 f8a3 	bl	80074ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f000 f8b4 	bl	80074f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2200      	movs	r2, #0
 800738e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	691b      	ldr	r3, [r3, #16]
 8007396:	f003 0310 	and.w	r3, r3, #16
 800739a:	2b10      	cmp	r3, #16
 800739c:	d122      	bne.n	80073e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	68db      	ldr	r3, [r3, #12]
 80073a4:	f003 0310 	and.w	r3, r3, #16
 80073a8:	2b10      	cmp	r3, #16
 80073aa:	d11b      	bne.n	80073e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f06f 0210 	mvn.w	r2, #16
 80073b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2208      	movs	r2, #8
 80073ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	69db      	ldr	r3, [r3, #28]
 80073c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d003      	beq.n	80073d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	f000 f887 	bl	80074de <HAL_TIM_IC_CaptureCallback>
 80073d0:	e005      	b.n	80073de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f000 f879 	bl	80074ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	f000 f88a 	bl	80074f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2200      	movs	r2, #0
 80073e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	691b      	ldr	r3, [r3, #16]
 80073ea:	f003 0301 	and.w	r3, r3, #1
 80073ee:	2b01      	cmp	r3, #1
 80073f0:	d10e      	bne.n	8007410 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	68db      	ldr	r3, [r3, #12]
 80073f8:	f003 0301 	and.w	r3, r3, #1
 80073fc:	2b01      	cmp	r3, #1
 80073fe:	d107      	bne.n	8007410 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f06f 0201 	mvn.w	r2, #1
 8007408:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f7f9 fd90 	bl	8000f30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	691b      	ldr	r3, [r3, #16]
 8007416:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800741a:	2b80      	cmp	r3, #128	; 0x80
 800741c:	d10e      	bne.n	800743c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	68db      	ldr	r3, [r3, #12]
 8007424:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007428:	2b80      	cmp	r3, #128	; 0x80
 800742a:	d107      	bne.n	800743c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007434:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f000 f91a 	bl	8007670 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	691b      	ldr	r3, [r3, #16]
 8007442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007446:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800744a:	d10e      	bne.n	800746a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	68db      	ldr	r3, [r3, #12]
 8007452:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007456:	2b80      	cmp	r3, #128	; 0x80
 8007458:	d107      	bne.n	800746a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007462:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	f000 f90d 	bl	8007684 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	691b      	ldr	r3, [r3, #16]
 8007470:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007474:	2b40      	cmp	r3, #64	; 0x40
 8007476:	d10e      	bne.n	8007496 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	68db      	ldr	r3, [r3, #12]
 800747e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007482:	2b40      	cmp	r3, #64	; 0x40
 8007484:	d107      	bne.n	8007496 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800748e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007490:	6878      	ldr	r0, [r7, #4]
 8007492:	f000 f838 	bl	8007506 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	691b      	ldr	r3, [r3, #16]
 800749c:	f003 0320 	and.w	r3, r3, #32
 80074a0:	2b20      	cmp	r3, #32
 80074a2:	d10e      	bne.n	80074c2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	68db      	ldr	r3, [r3, #12]
 80074aa:	f003 0320 	and.w	r3, r3, #32
 80074ae:	2b20      	cmp	r3, #32
 80074b0:	d107      	bne.n	80074c2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f06f 0220 	mvn.w	r2, #32
 80074ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	f000 f8cd 	bl	800765c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80074c2:	bf00      	nop
 80074c4:	3708      	adds	r7, #8
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}

080074ca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80074ca:	b480      	push	{r7}
 80074cc:	b083      	sub	sp, #12
 80074ce:	af00      	add	r7, sp, #0
 80074d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80074d2:	bf00      	nop
 80074d4:	370c      	adds	r7, #12
 80074d6:	46bd      	mov	sp, r7
 80074d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074dc:	4770      	bx	lr

080074de <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80074de:	b480      	push	{r7}
 80074e0:	b083      	sub	sp, #12
 80074e2:	af00      	add	r7, sp, #0
 80074e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80074e6:	bf00      	nop
 80074e8:	370c      	adds	r7, #12
 80074ea:	46bd      	mov	sp, r7
 80074ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f0:	4770      	bx	lr

080074f2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80074f2:	b480      	push	{r7}
 80074f4:	b083      	sub	sp, #12
 80074f6:	af00      	add	r7, sp, #0
 80074f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80074fa:	bf00      	nop
 80074fc:	370c      	adds	r7, #12
 80074fe:	46bd      	mov	sp, r7
 8007500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007504:	4770      	bx	lr

08007506 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007506:	b480      	push	{r7}
 8007508:	b083      	sub	sp, #12
 800750a:	af00      	add	r7, sp, #0
 800750c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800750e:	bf00      	nop
 8007510:	370c      	adds	r7, #12
 8007512:	46bd      	mov	sp, r7
 8007514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007518:	4770      	bx	lr
	...

0800751c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800751c:	b480      	push	{r7}
 800751e:	b085      	sub	sp, #20
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
 8007524:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	4a40      	ldr	r2, [pc, #256]	; (8007630 <TIM_Base_SetConfig+0x114>)
 8007530:	4293      	cmp	r3, r2
 8007532:	d013      	beq.n	800755c <TIM_Base_SetConfig+0x40>
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800753a:	d00f      	beq.n	800755c <TIM_Base_SetConfig+0x40>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	4a3d      	ldr	r2, [pc, #244]	; (8007634 <TIM_Base_SetConfig+0x118>)
 8007540:	4293      	cmp	r3, r2
 8007542:	d00b      	beq.n	800755c <TIM_Base_SetConfig+0x40>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	4a3c      	ldr	r2, [pc, #240]	; (8007638 <TIM_Base_SetConfig+0x11c>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d007      	beq.n	800755c <TIM_Base_SetConfig+0x40>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	4a3b      	ldr	r2, [pc, #236]	; (800763c <TIM_Base_SetConfig+0x120>)
 8007550:	4293      	cmp	r3, r2
 8007552:	d003      	beq.n	800755c <TIM_Base_SetConfig+0x40>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	4a3a      	ldr	r2, [pc, #232]	; (8007640 <TIM_Base_SetConfig+0x124>)
 8007558:	4293      	cmp	r3, r2
 800755a:	d108      	bne.n	800756e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007562:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	685b      	ldr	r3, [r3, #4]
 8007568:	68fa      	ldr	r2, [r7, #12]
 800756a:	4313      	orrs	r3, r2
 800756c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	4a2f      	ldr	r2, [pc, #188]	; (8007630 <TIM_Base_SetConfig+0x114>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d02b      	beq.n	80075ce <TIM_Base_SetConfig+0xb2>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800757c:	d027      	beq.n	80075ce <TIM_Base_SetConfig+0xb2>
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	4a2c      	ldr	r2, [pc, #176]	; (8007634 <TIM_Base_SetConfig+0x118>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d023      	beq.n	80075ce <TIM_Base_SetConfig+0xb2>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	4a2b      	ldr	r2, [pc, #172]	; (8007638 <TIM_Base_SetConfig+0x11c>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d01f      	beq.n	80075ce <TIM_Base_SetConfig+0xb2>
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	4a2a      	ldr	r2, [pc, #168]	; (800763c <TIM_Base_SetConfig+0x120>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d01b      	beq.n	80075ce <TIM_Base_SetConfig+0xb2>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	4a29      	ldr	r2, [pc, #164]	; (8007640 <TIM_Base_SetConfig+0x124>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d017      	beq.n	80075ce <TIM_Base_SetConfig+0xb2>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	4a28      	ldr	r2, [pc, #160]	; (8007644 <TIM_Base_SetConfig+0x128>)
 80075a2:	4293      	cmp	r3, r2
 80075a4:	d013      	beq.n	80075ce <TIM_Base_SetConfig+0xb2>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	4a27      	ldr	r2, [pc, #156]	; (8007648 <TIM_Base_SetConfig+0x12c>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d00f      	beq.n	80075ce <TIM_Base_SetConfig+0xb2>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	4a26      	ldr	r2, [pc, #152]	; (800764c <TIM_Base_SetConfig+0x130>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d00b      	beq.n	80075ce <TIM_Base_SetConfig+0xb2>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	4a25      	ldr	r2, [pc, #148]	; (8007650 <TIM_Base_SetConfig+0x134>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d007      	beq.n	80075ce <TIM_Base_SetConfig+0xb2>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	4a24      	ldr	r2, [pc, #144]	; (8007654 <TIM_Base_SetConfig+0x138>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d003      	beq.n	80075ce <TIM_Base_SetConfig+0xb2>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	4a23      	ldr	r2, [pc, #140]	; (8007658 <TIM_Base_SetConfig+0x13c>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d108      	bne.n	80075e0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	68db      	ldr	r3, [r3, #12]
 80075da:	68fa      	ldr	r2, [r7, #12]
 80075dc:	4313      	orrs	r3, r2
 80075de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	695b      	ldr	r3, [r3, #20]
 80075ea:	4313      	orrs	r3, r2
 80075ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	68fa      	ldr	r2, [r7, #12]
 80075f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	689a      	ldr	r2, [r3, #8]
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	681a      	ldr	r2, [r3, #0]
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	4a0a      	ldr	r2, [pc, #40]	; (8007630 <TIM_Base_SetConfig+0x114>)
 8007608:	4293      	cmp	r3, r2
 800760a:	d003      	beq.n	8007614 <TIM_Base_SetConfig+0xf8>
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	4a0c      	ldr	r2, [pc, #48]	; (8007640 <TIM_Base_SetConfig+0x124>)
 8007610:	4293      	cmp	r3, r2
 8007612:	d103      	bne.n	800761c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	691a      	ldr	r2, [r3, #16]
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2201      	movs	r2, #1
 8007620:	615a      	str	r2, [r3, #20]
}
 8007622:	bf00      	nop
 8007624:	3714      	adds	r7, #20
 8007626:	46bd      	mov	sp, r7
 8007628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762c:	4770      	bx	lr
 800762e:	bf00      	nop
 8007630:	40010000 	.word	0x40010000
 8007634:	40000400 	.word	0x40000400
 8007638:	40000800 	.word	0x40000800
 800763c:	40000c00 	.word	0x40000c00
 8007640:	40010400 	.word	0x40010400
 8007644:	40014000 	.word	0x40014000
 8007648:	40014400 	.word	0x40014400
 800764c:	40014800 	.word	0x40014800
 8007650:	40001800 	.word	0x40001800
 8007654:	40001c00 	.word	0x40001c00
 8007658:	40002000 	.word	0x40002000

0800765c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800765c:	b480      	push	{r7}
 800765e:	b083      	sub	sp, #12
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007664:	bf00      	nop
 8007666:	370c      	adds	r7, #12
 8007668:	46bd      	mov	sp, r7
 800766a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766e:	4770      	bx	lr

08007670 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007670:	b480      	push	{r7}
 8007672:	b083      	sub	sp, #12
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007678:	bf00      	nop
 800767a:	370c      	adds	r7, #12
 800767c:	46bd      	mov	sp, r7
 800767e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007682:	4770      	bx	lr

08007684 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007684:	b480      	push	{r7}
 8007686:	b083      	sub	sp, #12
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800768c:	bf00      	nop
 800768e:	370c      	adds	r7, #12
 8007690:	46bd      	mov	sp, r7
 8007692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007696:	4770      	bx	lr

08007698 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b082      	sub	sp, #8
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d101      	bne.n	80076aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80076a6:	2301      	movs	r3, #1
 80076a8:	e040      	b.n	800772c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d106      	bne.n	80076c0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2200      	movs	r2, #0
 80076b6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f7f9 fdd4 	bl	8001268 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2224      	movs	r2, #36	; 0x24
 80076c4:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	681a      	ldr	r2, [r3, #0]
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f022 0201 	bic.w	r2, r2, #1
 80076d4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f000 f82c 	bl	8007734 <UART_SetConfig>
 80076dc:	4603      	mov	r3, r0
 80076de:	2b01      	cmp	r3, #1
 80076e0:	d101      	bne.n	80076e6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80076e2:	2301      	movs	r3, #1
 80076e4:	e022      	b.n	800772c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d002      	beq.n	80076f4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f000 faca 	bl	8007c88 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	685a      	ldr	r2, [r3, #4]
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007702:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	689a      	ldr	r2, [r3, #8]
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007712:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	681a      	ldr	r2, [r3, #0]
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f042 0201 	orr.w	r2, r2, #1
 8007722:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f000 fb51 	bl	8007dcc <UART_CheckIdleState>
 800772a:	4603      	mov	r3, r0
}
 800772c:	4618      	mov	r0, r3
 800772e:	3708      	adds	r7, #8
 8007730:	46bd      	mov	sp, r7
 8007732:	bd80      	pop	{r7, pc}

08007734 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b088      	sub	sp, #32
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800773c:	2300      	movs	r3, #0
 800773e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8007740:	2300      	movs	r3, #0
 8007742:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	689a      	ldr	r2, [r3, #8]
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	691b      	ldr	r3, [r3, #16]
 800774c:	431a      	orrs	r2, r3
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	695b      	ldr	r3, [r3, #20]
 8007752:	431a      	orrs	r2, r3
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	69db      	ldr	r3, [r3, #28]
 8007758:	4313      	orrs	r3, r2
 800775a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	681a      	ldr	r2, [r3, #0]
 8007762:	4bb1      	ldr	r3, [pc, #708]	; (8007a28 <UART_SetConfig+0x2f4>)
 8007764:	4013      	ands	r3, r2
 8007766:	687a      	ldr	r2, [r7, #4]
 8007768:	6812      	ldr	r2, [r2, #0]
 800776a:	6939      	ldr	r1, [r7, #16]
 800776c:	430b      	orrs	r3, r1
 800776e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	685b      	ldr	r3, [r3, #4]
 8007776:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	68da      	ldr	r2, [r3, #12]
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	430a      	orrs	r2, r1
 8007784:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	699b      	ldr	r3, [r3, #24]
 800778a:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6a1b      	ldr	r3, [r3, #32]
 8007790:	693a      	ldr	r2, [r7, #16]
 8007792:	4313      	orrs	r3, r2
 8007794:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	689b      	ldr	r3, [r3, #8]
 800779c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	693a      	ldr	r2, [r7, #16]
 80077a6:	430a      	orrs	r2, r1
 80077a8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	4a9f      	ldr	r2, [pc, #636]	; (8007a2c <UART_SetConfig+0x2f8>)
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d121      	bne.n	80077f8 <UART_SetConfig+0xc4>
 80077b4:	4b9e      	ldr	r3, [pc, #632]	; (8007a30 <UART_SetConfig+0x2fc>)
 80077b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077ba:	f003 0303 	and.w	r3, r3, #3
 80077be:	2b03      	cmp	r3, #3
 80077c0:	d816      	bhi.n	80077f0 <UART_SetConfig+0xbc>
 80077c2:	a201      	add	r2, pc, #4	; (adr r2, 80077c8 <UART_SetConfig+0x94>)
 80077c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077c8:	080077d9 	.word	0x080077d9
 80077cc:	080077e5 	.word	0x080077e5
 80077d0:	080077df 	.word	0x080077df
 80077d4:	080077eb 	.word	0x080077eb
 80077d8:	2301      	movs	r3, #1
 80077da:	77fb      	strb	r3, [r7, #31]
 80077dc:	e151      	b.n	8007a82 <UART_SetConfig+0x34e>
 80077de:	2302      	movs	r3, #2
 80077e0:	77fb      	strb	r3, [r7, #31]
 80077e2:	e14e      	b.n	8007a82 <UART_SetConfig+0x34e>
 80077e4:	2304      	movs	r3, #4
 80077e6:	77fb      	strb	r3, [r7, #31]
 80077e8:	e14b      	b.n	8007a82 <UART_SetConfig+0x34e>
 80077ea:	2308      	movs	r3, #8
 80077ec:	77fb      	strb	r3, [r7, #31]
 80077ee:	e148      	b.n	8007a82 <UART_SetConfig+0x34e>
 80077f0:	2310      	movs	r3, #16
 80077f2:	77fb      	strb	r3, [r7, #31]
 80077f4:	bf00      	nop
 80077f6:	e144      	b.n	8007a82 <UART_SetConfig+0x34e>
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	4a8d      	ldr	r2, [pc, #564]	; (8007a34 <UART_SetConfig+0x300>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d134      	bne.n	800786c <UART_SetConfig+0x138>
 8007802:	4b8b      	ldr	r3, [pc, #556]	; (8007a30 <UART_SetConfig+0x2fc>)
 8007804:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007808:	f003 030c 	and.w	r3, r3, #12
 800780c:	2b0c      	cmp	r3, #12
 800780e:	d829      	bhi.n	8007864 <UART_SetConfig+0x130>
 8007810:	a201      	add	r2, pc, #4	; (adr r2, 8007818 <UART_SetConfig+0xe4>)
 8007812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007816:	bf00      	nop
 8007818:	0800784d 	.word	0x0800784d
 800781c:	08007865 	.word	0x08007865
 8007820:	08007865 	.word	0x08007865
 8007824:	08007865 	.word	0x08007865
 8007828:	08007859 	.word	0x08007859
 800782c:	08007865 	.word	0x08007865
 8007830:	08007865 	.word	0x08007865
 8007834:	08007865 	.word	0x08007865
 8007838:	08007853 	.word	0x08007853
 800783c:	08007865 	.word	0x08007865
 8007840:	08007865 	.word	0x08007865
 8007844:	08007865 	.word	0x08007865
 8007848:	0800785f 	.word	0x0800785f
 800784c:	2300      	movs	r3, #0
 800784e:	77fb      	strb	r3, [r7, #31]
 8007850:	e117      	b.n	8007a82 <UART_SetConfig+0x34e>
 8007852:	2302      	movs	r3, #2
 8007854:	77fb      	strb	r3, [r7, #31]
 8007856:	e114      	b.n	8007a82 <UART_SetConfig+0x34e>
 8007858:	2304      	movs	r3, #4
 800785a:	77fb      	strb	r3, [r7, #31]
 800785c:	e111      	b.n	8007a82 <UART_SetConfig+0x34e>
 800785e:	2308      	movs	r3, #8
 8007860:	77fb      	strb	r3, [r7, #31]
 8007862:	e10e      	b.n	8007a82 <UART_SetConfig+0x34e>
 8007864:	2310      	movs	r3, #16
 8007866:	77fb      	strb	r3, [r7, #31]
 8007868:	bf00      	nop
 800786a:	e10a      	b.n	8007a82 <UART_SetConfig+0x34e>
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	4a71      	ldr	r2, [pc, #452]	; (8007a38 <UART_SetConfig+0x304>)
 8007872:	4293      	cmp	r3, r2
 8007874:	d120      	bne.n	80078b8 <UART_SetConfig+0x184>
 8007876:	4b6e      	ldr	r3, [pc, #440]	; (8007a30 <UART_SetConfig+0x2fc>)
 8007878:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800787c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007880:	2b10      	cmp	r3, #16
 8007882:	d00f      	beq.n	80078a4 <UART_SetConfig+0x170>
 8007884:	2b10      	cmp	r3, #16
 8007886:	d802      	bhi.n	800788e <UART_SetConfig+0x15a>
 8007888:	2b00      	cmp	r3, #0
 800788a:	d005      	beq.n	8007898 <UART_SetConfig+0x164>
 800788c:	e010      	b.n	80078b0 <UART_SetConfig+0x17c>
 800788e:	2b20      	cmp	r3, #32
 8007890:	d005      	beq.n	800789e <UART_SetConfig+0x16a>
 8007892:	2b30      	cmp	r3, #48	; 0x30
 8007894:	d009      	beq.n	80078aa <UART_SetConfig+0x176>
 8007896:	e00b      	b.n	80078b0 <UART_SetConfig+0x17c>
 8007898:	2300      	movs	r3, #0
 800789a:	77fb      	strb	r3, [r7, #31]
 800789c:	e0f1      	b.n	8007a82 <UART_SetConfig+0x34e>
 800789e:	2302      	movs	r3, #2
 80078a0:	77fb      	strb	r3, [r7, #31]
 80078a2:	e0ee      	b.n	8007a82 <UART_SetConfig+0x34e>
 80078a4:	2304      	movs	r3, #4
 80078a6:	77fb      	strb	r3, [r7, #31]
 80078a8:	e0eb      	b.n	8007a82 <UART_SetConfig+0x34e>
 80078aa:	2308      	movs	r3, #8
 80078ac:	77fb      	strb	r3, [r7, #31]
 80078ae:	e0e8      	b.n	8007a82 <UART_SetConfig+0x34e>
 80078b0:	2310      	movs	r3, #16
 80078b2:	77fb      	strb	r3, [r7, #31]
 80078b4:	bf00      	nop
 80078b6:	e0e4      	b.n	8007a82 <UART_SetConfig+0x34e>
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	4a5f      	ldr	r2, [pc, #380]	; (8007a3c <UART_SetConfig+0x308>)
 80078be:	4293      	cmp	r3, r2
 80078c0:	d120      	bne.n	8007904 <UART_SetConfig+0x1d0>
 80078c2:	4b5b      	ldr	r3, [pc, #364]	; (8007a30 <UART_SetConfig+0x2fc>)
 80078c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078c8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80078cc:	2b40      	cmp	r3, #64	; 0x40
 80078ce:	d00f      	beq.n	80078f0 <UART_SetConfig+0x1bc>
 80078d0:	2b40      	cmp	r3, #64	; 0x40
 80078d2:	d802      	bhi.n	80078da <UART_SetConfig+0x1a6>
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d005      	beq.n	80078e4 <UART_SetConfig+0x1b0>
 80078d8:	e010      	b.n	80078fc <UART_SetConfig+0x1c8>
 80078da:	2b80      	cmp	r3, #128	; 0x80
 80078dc:	d005      	beq.n	80078ea <UART_SetConfig+0x1b6>
 80078de:	2bc0      	cmp	r3, #192	; 0xc0
 80078e0:	d009      	beq.n	80078f6 <UART_SetConfig+0x1c2>
 80078e2:	e00b      	b.n	80078fc <UART_SetConfig+0x1c8>
 80078e4:	2300      	movs	r3, #0
 80078e6:	77fb      	strb	r3, [r7, #31]
 80078e8:	e0cb      	b.n	8007a82 <UART_SetConfig+0x34e>
 80078ea:	2302      	movs	r3, #2
 80078ec:	77fb      	strb	r3, [r7, #31]
 80078ee:	e0c8      	b.n	8007a82 <UART_SetConfig+0x34e>
 80078f0:	2304      	movs	r3, #4
 80078f2:	77fb      	strb	r3, [r7, #31]
 80078f4:	e0c5      	b.n	8007a82 <UART_SetConfig+0x34e>
 80078f6:	2308      	movs	r3, #8
 80078f8:	77fb      	strb	r3, [r7, #31]
 80078fa:	e0c2      	b.n	8007a82 <UART_SetConfig+0x34e>
 80078fc:	2310      	movs	r3, #16
 80078fe:	77fb      	strb	r3, [r7, #31]
 8007900:	bf00      	nop
 8007902:	e0be      	b.n	8007a82 <UART_SetConfig+0x34e>
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	4a4d      	ldr	r2, [pc, #308]	; (8007a40 <UART_SetConfig+0x30c>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d124      	bne.n	8007958 <UART_SetConfig+0x224>
 800790e:	4b48      	ldr	r3, [pc, #288]	; (8007a30 <UART_SetConfig+0x2fc>)
 8007910:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007914:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007918:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800791c:	d012      	beq.n	8007944 <UART_SetConfig+0x210>
 800791e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007922:	d802      	bhi.n	800792a <UART_SetConfig+0x1f6>
 8007924:	2b00      	cmp	r3, #0
 8007926:	d007      	beq.n	8007938 <UART_SetConfig+0x204>
 8007928:	e012      	b.n	8007950 <UART_SetConfig+0x21c>
 800792a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800792e:	d006      	beq.n	800793e <UART_SetConfig+0x20a>
 8007930:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007934:	d009      	beq.n	800794a <UART_SetConfig+0x216>
 8007936:	e00b      	b.n	8007950 <UART_SetConfig+0x21c>
 8007938:	2300      	movs	r3, #0
 800793a:	77fb      	strb	r3, [r7, #31]
 800793c:	e0a1      	b.n	8007a82 <UART_SetConfig+0x34e>
 800793e:	2302      	movs	r3, #2
 8007940:	77fb      	strb	r3, [r7, #31]
 8007942:	e09e      	b.n	8007a82 <UART_SetConfig+0x34e>
 8007944:	2304      	movs	r3, #4
 8007946:	77fb      	strb	r3, [r7, #31]
 8007948:	e09b      	b.n	8007a82 <UART_SetConfig+0x34e>
 800794a:	2308      	movs	r3, #8
 800794c:	77fb      	strb	r3, [r7, #31]
 800794e:	e098      	b.n	8007a82 <UART_SetConfig+0x34e>
 8007950:	2310      	movs	r3, #16
 8007952:	77fb      	strb	r3, [r7, #31]
 8007954:	bf00      	nop
 8007956:	e094      	b.n	8007a82 <UART_SetConfig+0x34e>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4a39      	ldr	r2, [pc, #228]	; (8007a44 <UART_SetConfig+0x310>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d124      	bne.n	80079ac <UART_SetConfig+0x278>
 8007962:	4b33      	ldr	r3, [pc, #204]	; (8007a30 <UART_SetConfig+0x2fc>)
 8007964:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007968:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800796c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007970:	d012      	beq.n	8007998 <UART_SetConfig+0x264>
 8007972:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007976:	d802      	bhi.n	800797e <UART_SetConfig+0x24a>
 8007978:	2b00      	cmp	r3, #0
 800797a:	d007      	beq.n	800798c <UART_SetConfig+0x258>
 800797c:	e012      	b.n	80079a4 <UART_SetConfig+0x270>
 800797e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007982:	d006      	beq.n	8007992 <UART_SetConfig+0x25e>
 8007984:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007988:	d009      	beq.n	800799e <UART_SetConfig+0x26a>
 800798a:	e00b      	b.n	80079a4 <UART_SetConfig+0x270>
 800798c:	2301      	movs	r3, #1
 800798e:	77fb      	strb	r3, [r7, #31]
 8007990:	e077      	b.n	8007a82 <UART_SetConfig+0x34e>
 8007992:	2302      	movs	r3, #2
 8007994:	77fb      	strb	r3, [r7, #31]
 8007996:	e074      	b.n	8007a82 <UART_SetConfig+0x34e>
 8007998:	2304      	movs	r3, #4
 800799a:	77fb      	strb	r3, [r7, #31]
 800799c:	e071      	b.n	8007a82 <UART_SetConfig+0x34e>
 800799e:	2308      	movs	r3, #8
 80079a0:	77fb      	strb	r3, [r7, #31]
 80079a2:	e06e      	b.n	8007a82 <UART_SetConfig+0x34e>
 80079a4:	2310      	movs	r3, #16
 80079a6:	77fb      	strb	r3, [r7, #31]
 80079a8:	bf00      	nop
 80079aa:	e06a      	b.n	8007a82 <UART_SetConfig+0x34e>
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	4a25      	ldr	r2, [pc, #148]	; (8007a48 <UART_SetConfig+0x314>)
 80079b2:	4293      	cmp	r3, r2
 80079b4:	d124      	bne.n	8007a00 <UART_SetConfig+0x2cc>
 80079b6:	4b1e      	ldr	r3, [pc, #120]	; (8007a30 <UART_SetConfig+0x2fc>)
 80079b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079bc:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80079c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079c4:	d012      	beq.n	80079ec <UART_SetConfig+0x2b8>
 80079c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079ca:	d802      	bhi.n	80079d2 <UART_SetConfig+0x29e>
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d007      	beq.n	80079e0 <UART_SetConfig+0x2ac>
 80079d0:	e012      	b.n	80079f8 <UART_SetConfig+0x2c4>
 80079d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079d6:	d006      	beq.n	80079e6 <UART_SetConfig+0x2b2>
 80079d8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80079dc:	d009      	beq.n	80079f2 <UART_SetConfig+0x2be>
 80079de:	e00b      	b.n	80079f8 <UART_SetConfig+0x2c4>
 80079e0:	2300      	movs	r3, #0
 80079e2:	77fb      	strb	r3, [r7, #31]
 80079e4:	e04d      	b.n	8007a82 <UART_SetConfig+0x34e>
 80079e6:	2302      	movs	r3, #2
 80079e8:	77fb      	strb	r3, [r7, #31]
 80079ea:	e04a      	b.n	8007a82 <UART_SetConfig+0x34e>
 80079ec:	2304      	movs	r3, #4
 80079ee:	77fb      	strb	r3, [r7, #31]
 80079f0:	e047      	b.n	8007a82 <UART_SetConfig+0x34e>
 80079f2:	2308      	movs	r3, #8
 80079f4:	77fb      	strb	r3, [r7, #31]
 80079f6:	e044      	b.n	8007a82 <UART_SetConfig+0x34e>
 80079f8:	2310      	movs	r3, #16
 80079fa:	77fb      	strb	r3, [r7, #31]
 80079fc:	bf00      	nop
 80079fe:	e040      	b.n	8007a82 <UART_SetConfig+0x34e>
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	4a11      	ldr	r2, [pc, #68]	; (8007a4c <UART_SetConfig+0x318>)
 8007a06:	4293      	cmp	r3, r2
 8007a08:	d139      	bne.n	8007a7e <UART_SetConfig+0x34a>
 8007a0a:	4b09      	ldr	r3, [pc, #36]	; (8007a30 <UART_SetConfig+0x2fc>)
 8007a0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a10:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007a14:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007a18:	d027      	beq.n	8007a6a <UART_SetConfig+0x336>
 8007a1a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007a1e:	d817      	bhi.n	8007a50 <UART_SetConfig+0x31c>
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d01c      	beq.n	8007a5e <UART_SetConfig+0x32a>
 8007a24:	e027      	b.n	8007a76 <UART_SetConfig+0x342>
 8007a26:	bf00      	nop
 8007a28:	efff69f3 	.word	0xefff69f3
 8007a2c:	40011000 	.word	0x40011000
 8007a30:	40023800 	.word	0x40023800
 8007a34:	40004400 	.word	0x40004400
 8007a38:	40004800 	.word	0x40004800
 8007a3c:	40004c00 	.word	0x40004c00
 8007a40:	40005000 	.word	0x40005000
 8007a44:	40011400 	.word	0x40011400
 8007a48:	40007800 	.word	0x40007800
 8007a4c:	40007c00 	.word	0x40007c00
 8007a50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a54:	d006      	beq.n	8007a64 <UART_SetConfig+0x330>
 8007a56:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007a5a:	d009      	beq.n	8007a70 <UART_SetConfig+0x33c>
 8007a5c:	e00b      	b.n	8007a76 <UART_SetConfig+0x342>
 8007a5e:	2300      	movs	r3, #0
 8007a60:	77fb      	strb	r3, [r7, #31]
 8007a62:	e00e      	b.n	8007a82 <UART_SetConfig+0x34e>
 8007a64:	2302      	movs	r3, #2
 8007a66:	77fb      	strb	r3, [r7, #31]
 8007a68:	e00b      	b.n	8007a82 <UART_SetConfig+0x34e>
 8007a6a:	2304      	movs	r3, #4
 8007a6c:	77fb      	strb	r3, [r7, #31]
 8007a6e:	e008      	b.n	8007a82 <UART_SetConfig+0x34e>
 8007a70:	2308      	movs	r3, #8
 8007a72:	77fb      	strb	r3, [r7, #31]
 8007a74:	e005      	b.n	8007a82 <UART_SetConfig+0x34e>
 8007a76:	2310      	movs	r3, #16
 8007a78:	77fb      	strb	r3, [r7, #31]
 8007a7a:	bf00      	nop
 8007a7c:	e001      	b.n	8007a82 <UART_SetConfig+0x34e>
 8007a7e:	2310      	movs	r3, #16
 8007a80:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	69db      	ldr	r3, [r3, #28]
 8007a86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a8a:	d17f      	bne.n	8007b8c <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8007a8c:	7ffb      	ldrb	r3, [r7, #31]
 8007a8e:	2b08      	cmp	r3, #8
 8007a90:	d85c      	bhi.n	8007b4c <UART_SetConfig+0x418>
 8007a92:	a201      	add	r2, pc, #4	; (adr r2, 8007a98 <UART_SetConfig+0x364>)
 8007a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a98:	08007abd 	.word	0x08007abd
 8007a9c:	08007add 	.word	0x08007add
 8007aa0:	08007afd 	.word	0x08007afd
 8007aa4:	08007b4d 	.word	0x08007b4d
 8007aa8:	08007b15 	.word	0x08007b15
 8007aac:	08007b4d 	.word	0x08007b4d
 8007ab0:	08007b4d 	.word	0x08007b4d
 8007ab4:	08007b4d 	.word	0x08007b4d
 8007ab8:	08007b35 	.word	0x08007b35
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007abc:	f7fd f882 	bl	8004bc4 <HAL_RCC_GetPCLK1Freq>
 8007ac0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	005a      	lsls	r2, r3, #1
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	685b      	ldr	r3, [r3, #4]
 8007aca:	085b      	lsrs	r3, r3, #1
 8007acc:	441a      	add	r2, r3
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	685b      	ldr	r3, [r3, #4]
 8007ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ad6:	b29b      	uxth	r3, r3
 8007ad8:	61bb      	str	r3, [r7, #24]
        break;
 8007ada:	e03a      	b.n	8007b52 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007adc:	f7fd f886 	bl	8004bec <HAL_RCC_GetPCLK2Freq>
 8007ae0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	005a      	lsls	r2, r3, #1
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	685b      	ldr	r3, [r3, #4]
 8007aea:	085b      	lsrs	r3, r3, #1
 8007aec:	441a      	add	r2, r3
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	685b      	ldr	r3, [r3, #4]
 8007af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007af6:	b29b      	uxth	r3, r3
 8007af8:	61bb      	str	r3, [r7, #24]
        break;
 8007afa:	e02a      	b.n	8007b52 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	685b      	ldr	r3, [r3, #4]
 8007b00:	085a      	lsrs	r2, r3, #1
 8007b02:	4b5f      	ldr	r3, [pc, #380]	; (8007c80 <UART_SetConfig+0x54c>)
 8007b04:	4413      	add	r3, r2
 8007b06:	687a      	ldr	r2, [r7, #4]
 8007b08:	6852      	ldr	r2, [r2, #4]
 8007b0a:	fbb3 f3f2 	udiv	r3, r3, r2
 8007b0e:	b29b      	uxth	r3, r3
 8007b10:	61bb      	str	r3, [r7, #24]
        break;
 8007b12:	e01e      	b.n	8007b52 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007b14:	f7fc ff72 	bl	80049fc <HAL_RCC_GetSysClockFreq>
 8007b18:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	005a      	lsls	r2, r3, #1
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	685b      	ldr	r3, [r3, #4]
 8007b22:	085b      	lsrs	r3, r3, #1
 8007b24:	441a      	add	r2, r3
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	685b      	ldr	r3, [r3, #4]
 8007b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b2e:	b29b      	uxth	r3, r3
 8007b30:	61bb      	str	r3, [r7, #24]
        break;
 8007b32:	e00e      	b.n	8007b52 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	685b      	ldr	r3, [r3, #4]
 8007b38:	085b      	lsrs	r3, r3, #1
 8007b3a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	685b      	ldr	r3, [r3, #4]
 8007b42:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b46:	b29b      	uxth	r3, r3
 8007b48:	61bb      	str	r3, [r7, #24]
        break;
 8007b4a:	e002      	b.n	8007b52 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	75fb      	strb	r3, [r7, #23]
        break;
 8007b50:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b52:	69bb      	ldr	r3, [r7, #24]
 8007b54:	2b0f      	cmp	r3, #15
 8007b56:	d916      	bls.n	8007b86 <UART_SetConfig+0x452>
 8007b58:	69bb      	ldr	r3, [r7, #24]
 8007b5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b5e:	d212      	bcs.n	8007b86 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007b60:	69bb      	ldr	r3, [r7, #24]
 8007b62:	b29b      	uxth	r3, r3
 8007b64:	f023 030f 	bic.w	r3, r3, #15
 8007b68:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007b6a:	69bb      	ldr	r3, [r7, #24]
 8007b6c:	085b      	lsrs	r3, r3, #1
 8007b6e:	b29b      	uxth	r3, r3
 8007b70:	f003 0307 	and.w	r3, r3, #7
 8007b74:	b29a      	uxth	r2, r3
 8007b76:	897b      	ldrh	r3, [r7, #10]
 8007b78:	4313      	orrs	r3, r2
 8007b7a:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	897a      	ldrh	r2, [r7, #10]
 8007b82:	60da      	str	r2, [r3, #12]
 8007b84:	e070      	b.n	8007c68 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8007b86:	2301      	movs	r3, #1
 8007b88:	75fb      	strb	r3, [r7, #23]
 8007b8a:	e06d      	b.n	8007c68 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8007b8c:	7ffb      	ldrb	r3, [r7, #31]
 8007b8e:	2b08      	cmp	r3, #8
 8007b90:	d859      	bhi.n	8007c46 <UART_SetConfig+0x512>
 8007b92:	a201      	add	r2, pc, #4	; (adr r2, 8007b98 <UART_SetConfig+0x464>)
 8007b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b98:	08007bbd 	.word	0x08007bbd
 8007b9c:	08007bdb 	.word	0x08007bdb
 8007ba0:	08007bf9 	.word	0x08007bf9
 8007ba4:	08007c47 	.word	0x08007c47
 8007ba8:	08007c11 	.word	0x08007c11
 8007bac:	08007c47 	.word	0x08007c47
 8007bb0:	08007c47 	.word	0x08007c47
 8007bb4:	08007c47 	.word	0x08007c47
 8007bb8:	08007c2f 	.word	0x08007c2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007bbc:	f7fd f802 	bl	8004bc4 <HAL_RCC_GetPCLK1Freq>
 8007bc0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	685b      	ldr	r3, [r3, #4]
 8007bc6:	085a      	lsrs	r2, r3, #1
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	441a      	add	r2, r3
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	685b      	ldr	r3, [r3, #4]
 8007bd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bd4:	b29b      	uxth	r3, r3
 8007bd6:	61bb      	str	r3, [r7, #24]
        break;
 8007bd8:	e038      	b.n	8007c4c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007bda:	f7fd f807 	bl	8004bec <HAL_RCC_GetPCLK2Freq>
 8007bde:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	685b      	ldr	r3, [r3, #4]
 8007be4:	085a      	lsrs	r2, r3, #1
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	441a      	add	r2, r3
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	685b      	ldr	r3, [r3, #4]
 8007bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bf2:	b29b      	uxth	r3, r3
 8007bf4:	61bb      	str	r3, [r7, #24]
        break;
 8007bf6:	e029      	b.n	8007c4c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	685b      	ldr	r3, [r3, #4]
 8007bfc:	085a      	lsrs	r2, r3, #1
 8007bfe:	4b21      	ldr	r3, [pc, #132]	; (8007c84 <UART_SetConfig+0x550>)
 8007c00:	4413      	add	r3, r2
 8007c02:	687a      	ldr	r2, [r7, #4]
 8007c04:	6852      	ldr	r2, [r2, #4]
 8007c06:	fbb3 f3f2 	udiv	r3, r3, r2
 8007c0a:	b29b      	uxth	r3, r3
 8007c0c:	61bb      	str	r3, [r7, #24]
        break;
 8007c0e:	e01d      	b.n	8007c4c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c10:	f7fc fef4 	bl	80049fc <HAL_RCC_GetSysClockFreq>
 8007c14:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	685b      	ldr	r3, [r3, #4]
 8007c1a:	085a      	lsrs	r2, r3, #1
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	441a      	add	r2, r3
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	685b      	ldr	r3, [r3, #4]
 8007c24:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c28:	b29b      	uxth	r3, r3
 8007c2a:	61bb      	str	r3, [r7, #24]
        break;
 8007c2c:	e00e      	b.n	8007c4c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	685b      	ldr	r3, [r3, #4]
 8007c32:	085b      	lsrs	r3, r3, #1
 8007c34:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	685b      	ldr	r3, [r3, #4]
 8007c3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c40:	b29b      	uxth	r3, r3
 8007c42:	61bb      	str	r3, [r7, #24]
        break;
 8007c44:	e002      	b.n	8007c4c <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8007c46:	2301      	movs	r3, #1
 8007c48:	75fb      	strb	r3, [r7, #23]
        break;
 8007c4a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007c4c:	69bb      	ldr	r3, [r7, #24]
 8007c4e:	2b0f      	cmp	r3, #15
 8007c50:	d908      	bls.n	8007c64 <UART_SetConfig+0x530>
 8007c52:	69bb      	ldr	r3, [r7, #24]
 8007c54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c58:	d204      	bcs.n	8007c64 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	69ba      	ldr	r2, [r7, #24]
 8007c60:	60da      	str	r2, [r3, #12]
 8007c62:	e001      	b.n	8007c68 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8007c64:	2301      	movs	r3, #1
 8007c66:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2200      	movs	r2, #0
 8007c72:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8007c74:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c76:	4618      	mov	r0, r3
 8007c78:	3720      	adds	r7, #32
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bd80      	pop	{r7, pc}
 8007c7e:	bf00      	nop
 8007c80:	01e84800 	.word	0x01e84800
 8007c84:	00f42400 	.word	0x00f42400

08007c88 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007c88:	b480      	push	{r7}
 8007c8a:	b083      	sub	sp, #12
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c94:	f003 0301 	and.w	r3, r3, #1
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d00a      	beq.n	8007cb2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	685b      	ldr	r3, [r3, #4]
 8007ca2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	430a      	orrs	r2, r1
 8007cb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cb6:	f003 0302 	and.w	r3, r3, #2
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d00a      	beq.n	8007cd4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	685b      	ldr	r3, [r3, #4]
 8007cc4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	430a      	orrs	r2, r1
 8007cd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cd8:	f003 0304 	and.w	r3, r3, #4
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d00a      	beq.n	8007cf6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	685b      	ldr	r3, [r3, #4]
 8007ce6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	430a      	orrs	r2, r1
 8007cf4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cfa:	f003 0308 	and.w	r3, r3, #8
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d00a      	beq.n	8007d18 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	685b      	ldr	r3, [r3, #4]
 8007d08:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	430a      	orrs	r2, r1
 8007d16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d1c:	f003 0310 	and.w	r3, r3, #16
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d00a      	beq.n	8007d3a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	689b      	ldr	r3, [r3, #8]
 8007d2a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	430a      	orrs	r2, r1
 8007d38:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d3e:	f003 0320 	and.w	r3, r3, #32
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d00a      	beq.n	8007d5c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	689b      	ldr	r3, [r3, #8]
 8007d4c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	430a      	orrs	r2, r1
 8007d5a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d01a      	beq.n	8007d9e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	685b      	ldr	r3, [r3, #4]
 8007d6e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	430a      	orrs	r2, r1
 8007d7c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d86:	d10a      	bne.n	8007d9e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	685b      	ldr	r3, [r3, #4]
 8007d8e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	430a      	orrs	r2, r1
 8007d9c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007da2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d00a      	beq.n	8007dc0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	685b      	ldr	r3, [r3, #4]
 8007db0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	430a      	orrs	r2, r1
 8007dbe:	605a      	str	r2, [r3, #4]
  }
}
 8007dc0:	bf00      	nop
 8007dc2:	370c      	adds	r7, #12
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dca:	4770      	bx	lr

08007dcc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b086      	sub	sp, #24
 8007dd0:	af02      	add	r7, sp, #8
 8007dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8007dda:	f7f9 fbcd 	bl	8001578 <HAL_GetTick>
 8007dde:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f003 0308 	and.w	r3, r3, #8
 8007dea:	2b08      	cmp	r3, #8
 8007dec:	d10e      	bne.n	8007e0c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007dee:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007df2:	9300      	str	r3, [sp, #0]
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	2200      	movs	r2, #0
 8007df8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	f000 f82a 	bl	8007e56 <UART_WaitOnFlagUntilTimeout>
 8007e02:	4603      	mov	r3, r0
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d001      	beq.n	8007e0c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e08:	2303      	movs	r3, #3
 8007e0a:	e020      	b.n	8007e4e <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f003 0304 	and.w	r3, r3, #4
 8007e16:	2b04      	cmp	r3, #4
 8007e18:	d10e      	bne.n	8007e38 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e1a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007e1e:	9300      	str	r3, [sp, #0]
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	2200      	movs	r2, #0
 8007e24:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	f000 f814 	bl	8007e56 <UART_WaitOnFlagUntilTimeout>
 8007e2e:	4603      	mov	r3, r0
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d001      	beq.n	8007e38 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e34:	2303      	movs	r3, #3
 8007e36:	e00a      	b.n	8007e4e <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2220      	movs	r2, #32
 8007e3c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2220      	movs	r2, #32
 8007e42:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2200      	movs	r2, #0
 8007e48:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8007e4c:	2300      	movs	r3, #0
}
 8007e4e:	4618      	mov	r0, r3
 8007e50:	3710      	adds	r7, #16
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bd80      	pop	{r7, pc}

08007e56 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007e56:	b580      	push	{r7, lr}
 8007e58:	b084      	sub	sp, #16
 8007e5a:	af00      	add	r7, sp, #0
 8007e5c:	60f8      	str	r0, [r7, #12]
 8007e5e:	60b9      	str	r1, [r7, #8]
 8007e60:	603b      	str	r3, [r7, #0]
 8007e62:	4613      	mov	r3, r2
 8007e64:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e66:	e05d      	b.n	8007f24 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e68:	69bb      	ldr	r3, [r7, #24]
 8007e6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e6e:	d059      	beq.n	8007f24 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e70:	f7f9 fb82 	bl	8001578 <HAL_GetTick>
 8007e74:	4602      	mov	r2, r0
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	1ad3      	subs	r3, r2, r3
 8007e7a:	69ba      	ldr	r2, [r7, #24]
 8007e7c:	429a      	cmp	r2, r3
 8007e7e:	d302      	bcc.n	8007e86 <UART_WaitOnFlagUntilTimeout+0x30>
 8007e80:	69bb      	ldr	r3, [r7, #24]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d11b      	bne.n	8007ebe <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	681a      	ldr	r2, [r3, #0]
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007e94:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	689a      	ldr	r2, [r3, #8]
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f022 0201 	bic.w	r2, r2, #1
 8007ea4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	2220      	movs	r2, #32
 8007eaa:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	2220      	movs	r2, #32
 8007eb0:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8007eba:	2303      	movs	r3, #3
 8007ebc:	e042      	b.n	8007f44 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f003 0304 	and.w	r3, r3, #4
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d02b      	beq.n	8007f24 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	69db      	ldr	r3, [r3, #28]
 8007ed2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ed6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007eda:	d123      	bne.n	8007f24 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007ee4:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	681a      	ldr	r2, [r3, #0]
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007ef4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	689a      	ldr	r2, [r3, #8]
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f022 0201 	bic.w	r2, r2, #1
 8007f04:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	2220      	movs	r2, #32
 8007f0a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	2220      	movs	r2, #32
 8007f10:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	2220      	movs	r2, #32
 8007f16:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8007f20:	2303      	movs	r3, #3
 8007f22:	e00f      	b.n	8007f44 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	69da      	ldr	r2, [r3, #28]
 8007f2a:	68bb      	ldr	r3, [r7, #8]
 8007f2c:	4013      	ands	r3, r2
 8007f2e:	68ba      	ldr	r2, [r7, #8]
 8007f30:	429a      	cmp	r2, r3
 8007f32:	bf0c      	ite	eq
 8007f34:	2301      	moveq	r3, #1
 8007f36:	2300      	movne	r3, #0
 8007f38:	b2db      	uxtb	r3, r3
 8007f3a:	461a      	mov	r2, r3
 8007f3c:	79fb      	ldrb	r3, [r7, #7]
 8007f3e:	429a      	cmp	r2, r3
 8007f40:	d092      	beq.n	8007e68 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007f42:	2300      	movs	r3, #0
}
 8007f44:	4618      	mov	r0, r3
 8007f46:	3710      	adds	r7, #16
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	bd80      	pop	{r7, pc}

08007f4c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8007f4c:	b084      	sub	sp, #16
 8007f4e:	b480      	push	{r7}
 8007f50:	b085      	sub	sp, #20
 8007f52:	af00      	add	r7, sp, #0
 8007f54:	6078      	str	r0, [r7, #4]
 8007f56:	f107 001c 	add.w	r0, r7, #28
 8007f5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8007f5e:	2300      	movs	r3, #0
 8007f60:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8007f62:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8007f64:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8007f66:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8007f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8007f6a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8007f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8007f6e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8007f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8007f72:	431a      	orrs	r2, r3
             Init.ClockDiv
 8007f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8007f76:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8007f78:	68fa      	ldr	r2, [r7, #12]
 8007f7a:	4313      	orrs	r3, r2
 8007f7c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	685a      	ldr	r2, [r3, #4]
 8007f82:	4b07      	ldr	r3, [pc, #28]	; (8007fa0 <SDMMC_Init+0x54>)
 8007f84:	4013      	ands	r3, r2
 8007f86:	68fa      	ldr	r2, [r7, #12]
 8007f88:	431a      	orrs	r2, r3
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8007f8e:	2300      	movs	r3, #0
}
 8007f90:	4618      	mov	r0, r3
 8007f92:	3714      	adds	r7, #20
 8007f94:	46bd      	mov	sp, r7
 8007f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9a:	b004      	add	sp, #16
 8007f9c:	4770      	bx	lr
 8007f9e:	bf00      	nop
 8007fa0:	ffff8100 	.word	0xffff8100

08007fa4 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8007fa4:	b480      	push	{r7}
 8007fa6:	b083      	sub	sp, #12
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	370c      	adds	r7, #12
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbc:	4770      	bx	lr

08007fbe <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 8007fbe:	b480      	push	{r7}
 8007fc0:	b083      	sub	sp, #12
 8007fc2:	af00      	add	r7, sp, #0
 8007fc4:	6078      	str	r0, [r7, #4]
 8007fc6:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	681a      	ldr	r2, [r3, #0]
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007fd2:	2300      	movs	r3, #0
}
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	370c      	adds	r7, #12
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fde:	4770      	bx	lr

08007fe0 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b082      	sub	sp, #8
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2203      	movs	r2, #3
 8007fec:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8007fee:	2002      	movs	r0, #2
 8007ff0:	f7f9 face 	bl	8001590 <HAL_Delay>
  
  return HAL_OK;
 8007ff4:	2300      	movs	r3, #0
}
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	3708      	adds	r7, #8
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	bd80      	pop	{r7, pc}

08007ffe <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8007ffe:	b480      	push	{r7}
 8008000:	b083      	sub	sp, #12
 8008002:	af00      	add	r7, sp, #0
 8008004:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f003 0303 	and.w	r3, r3, #3
}
 800800e:	4618      	mov	r0, r3
 8008010:	370c      	adds	r7, #12
 8008012:	46bd      	mov	sp, r7
 8008014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008018:	4770      	bx	lr
	...

0800801c <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800801c:	b480      	push	{r7}
 800801e:	b085      	sub	sp, #20
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
 8008024:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008026:	2300      	movs	r3, #0
 8008028:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	681a      	ldr	r2, [r3, #0]
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800803a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8008040:	431a      	orrs	r2, r3
                       Command->CPSM);
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8008046:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008048:	68fa      	ldr	r2, [r7, #12]
 800804a:	4313      	orrs	r3, r2
 800804c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	68da      	ldr	r2, [r3, #12]
 8008052:	4b06      	ldr	r3, [pc, #24]	; (800806c <SDMMC_SendCommand+0x50>)
 8008054:	4013      	ands	r3, r2
 8008056:	68fa      	ldr	r2, [r7, #12]
 8008058:	431a      	orrs	r2, r3
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800805e:	2300      	movs	r3, #0
}
 8008060:	4618      	mov	r0, r3
 8008062:	3714      	adds	r7, #20
 8008064:	46bd      	mov	sp, r7
 8008066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806a:	4770      	bx	lr
 800806c:	fffff000 	.word	0xfffff000

08008070 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8008070:	b480      	push	{r7}
 8008072:	b083      	sub	sp, #12
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	691b      	ldr	r3, [r3, #16]
 800807c:	b2db      	uxtb	r3, r3
}
 800807e:	4618      	mov	r0, r3
 8008080:	370c      	adds	r7, #12
 8008082:	46bd      	mov	sp, r7
 8008084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008088:	4770      	bx	lr

0800808a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800808a:	b480      	push	{r7}
 800808c:	b085      	sub	sp, #20
 800808e:	af00      	add	r7, sp, #0
 8008090:	6078      	str	r0, [r7, #4]
 8008092:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	3314      	adds	r3, #20
 8008098:	461a      	mov	r2, r3
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	4413      	add	r3, r2
 800809e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	681b      	ldr	r3, [r3, #0]
}  
 80080a4:	4618      	mov	r0, r3
 80080a6:	3714      	adds	r7, #20
 80080a8:	46bd      	mov	sp, r7
 80080aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ae:	4770      	bx	lr

080080b0 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 80080b0:	b480      	push	{r7}
 80080b2:	b085      	sub	sp, #20
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
 80080b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80080ba:	2300      	movs	r3, #0
 80080bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	681a      	ldr	r2, [r3, #0]
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	685a      	ldr	r2, [r3, #4]
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80080d6:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80080dc:	431a      	orrs	r2, r3
                       Data->DPSM);
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80080e2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80080e4:	68fa      	ldr	r2, [r7, #12]
 80080e6:	4313      	orrs	r3, r2
 80080e8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080ee:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	431a      	orrs	r2, r3
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80080fa:	2300      	movs	r3, #0

}
 80080fc:	4618      	mov	r0, r3
 80080fe:	3714      	adds	r7, #20
 8008100:	46bd      	mov	sp, r7
 8008102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008106:	4770      	bx	lr

08008108 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b088      	sub	sp, #32
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
 8008110:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8008116:	2310      	movs	r3, #16
 8008118:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800811a:	2340      	movs	r3, #64	; 0x40
 800811c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800811e:	2300      	movs	r3, #0
 8008120:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008122:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008126:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008128:	f107 0308 	add.w	r3, r7, #8
 800812c:	4619      	mov	r1, r3
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f7ff ff74 	bl	800801c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8008134:	f241 3288 	movw	r2, #5000	; 0x1388
 8008138:	2110      	movs	r1, #16
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	f000 fa42 	bl	80085c4 <SDMMC_GetCmdResp1>
 8008140:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008142:	69fb      	ldr	r3, [r7, #28]
}
 8008144:	4618      	mov	r0, r3
 8008146:	3720      	adds	r7, #32
 8008148:	46bd      	mov	sp, r7
 800814a:	bd80      	pop	{r7, pc}

0800814c <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b088      	sub	sp, #32
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
 8008154:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800815a:	2311      	movs	r3, #17
 800815c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800815e:	2340      	movs	r3, #64	; 0x40
 8008160:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008162:	2300      	movs	r3, #0
 8008164:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008166:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800816a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800816c:	f107 0308 	add.w	r3, r7, #8
 8008170:	4619      	mov	r1, r3
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f7ff ff52 	bl	800801c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008178:	f241 3288 	movw	r2, #5000	; 0x1388
 800817c:	2111      	movs	r1, #17
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f000 fa20 	bl	80085c4 <SDMMC_GetCmdResp1>
 8008184:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008186:	69fb      	ldr	r3, [r7, #28]
}
 8008188:	4618      	mov	r0, r3
 800818a:	3720      	adds	r7, #32
 800818c:	46bd      	mov	sp, r7
 800818e:	bd80      	pop	{r7, pc}

08008190 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b088      	sub	sp, #32
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
 8008198:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800819e:	2312      	movs	r3, #18
 80081a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80081a2:	2340      	movs	r3, #64	; 0x40
 80081a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80081a6:	2300      	movs	r3, #0
 80081a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80081aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80081ae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80081b0:	f107 0308 	add.w	r3, r7, #8
 80081b4:	4619      	mov	r1, r3
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f7ff ff30 	bl	800801c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80081bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80081c0:	2112      	movs	r1, #18
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	f000 f9fe 	bl	80085c4 <SDMMC_GetCmdResp1>
 80081c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80081ca:	69fb      	ldr	r3, [r7, #28]
}
 80081cc:	4618      	mov	r0, r3
 80081ce:	3720      	adds	r7, #32
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bd80      	pop	{r7, pc}

080081d4 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b088      	sub	sp, #32
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
 80081dc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80081e2:	2318      	movs	r3, #24
 80081e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80081e6:	2340      	movs	r3, #64	; 0x40
 80081e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80081ea:	2300      	movs	r3, #0
 80081ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80081ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80081f2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80081f4:	f107 0308 	add.w	r3, r7, #8
 80081f8:	4619      	mov	r1, r3
 80081fa:	6878      	ldr	r0, [r7, #4]
 80081fc:	f7ff ff0e 	bl	800801c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008200:	f241 3288 	movw	r2, #5000	; 0x1388
 8008204:	2118      	movs	r1, #24
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	f000 f9dc 	bl	80085c4 <SDMMC_GetCmdResp1>
 800820c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800820e:	69fb      	ldr	r3, [r7, #28]
}
 8008210:	4618      	mov	r0, r3
 8008212:	3720      	adds	r7, #32
 8008214:	46bd      	mov	sp, r7
 8008216:	bd80      	pop	{r7, pc}

08008218 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b088      	sub	sp, #32
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
 8008220:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8008226:	2319      	movs	r3, #25
 8008228:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800822a:	2340      	movs	r3, #64	; 0x40
 800822c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800822e:	2300      	movs	r3, #0
 8008230:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008232:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008236:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008238:	f107 0308 	add.w	r3, r7, #8
 800823c:	4619      	mov	r1, r3
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f7ff feec 	bl	800801c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8008244:	f241 3288 	movw	r2, #5000	; 0x1388
 8008248:	2119      	movs	r1, #25
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	f000 f9ba 	bl	80085c4 <SDMMC_GetCmdResp1>
 8008250:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008252:	69fb      	ldr	r3, [r7, #28]
}
 8008254:	4618      	mov	r0, r3
 8008256:	3720      	adds	r7, #32
 8008258:	46bd      	mov	sp, r7
 800825a:	bd80      	pop	{r7, pc}

0800825c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b088      	sub	sp, #32
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8008264:	2300      	movs	r3, #0
 8008266:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8008268:	230c      	movs	r3, #12
 800826a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800826c:	2340      	movs	r3, #64	; 0x40
 800826e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008270:	2300      	movs	r3, #0
 8008272:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008274:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008278:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800827a:	f107 0308 	add.w	r3, r7, #8
 800827e:	4619      	mov	r1, r3
 8008280:	6878      	ldr	r0, [r7, #4]
 8008282:	f7ff fecb 	bl	800801c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8008286:	4a05      	ldr	r2, [pc, #20]	; (800829c <SDMMC_CmdStopTransfer+0x40>)
 8008288:	210c      	movs	r1, #12
 800828a:	6878      	ldr	r0, [r7, #4]
 800828c:	f000 f99a 	bl	80085c4 <SDMMC_GetCmdResp1>
 8008290:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008292:	69fb      	ldr	r3, [r7, #28]
}
 8008294:	4618      	mov	r0, r3
 8008296:	3720      	adds	r7, #32
 8008298:	46bd      	mov	sp, r7
 800829a:	bd80      	pop	{r7, pc}
 800829c:	05f5e100 	.word	0x05f5e100

080082a0 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b08a      	sub	sp, #40	; 0x28
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	60f8      	str	r0, [r7, #12]
 80082a8:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80082b0:	2307      	movs	r3, #7
 80082b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80082b4:	2340      	movs	r3, #64	; 0x40
 80082b6:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80082b8:	2300      	movs	r3, #0
 80082ba:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80082bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80082c0:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80082c2:	f107 0310 	add.w	r3, r7, #16
 80082c6:	4619      	mov	r1, r3
 80082c8:	68f8      	ldr	r0, [r7, #12]
 80082ca:	f7ff fea7 	bl	800801c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80082ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80082d2:	2107      	movs	r1, #7
 80082d4:	68f8      	ldr	r0, [r7, #12]
 80082d6:	f000 f975 	bl	80085c4 <SDMMC_GetCmdResp1>
 80082da:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80082dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80082de:	4618      	mov	r0, r3
 80082e0:	3728      	adds	r7, #40	; 0x28
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bd80      	pop	{r7, pc}

080082e6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80082e6:	b580      	push	{r7, lr}
 80082e8:	b088      	sub	sp, #32
 80082ea:	af00      	add	r7, sp, #0
 80082ec:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80082ee:	2300      	movs	r3, #0
 80082f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80082f2:	2300      	movs	r3, #0
 80082f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80082f6:	2300      	movs	r3, #0
 80082f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80082fa:	2300      	movs	r3, #0
 80082fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80082fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008302:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008304:	f107 0308 	add.w	r3, r7, #8
 8008308:	4619      	mov	r1, r3
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	f7ff fe86 	bl	800801c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8008310:	6878      	ldr	r0, [r7, #4]
 8008312:	f000 f92f 	bl	8008574 <SDMMC_GetCmdError>
 8008316:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008318:	69fb      	ldr	r3, [r7, #28]
}
 800831a:	4618      	mov	r0, r3
 800831c:	3720      	adds	r7, #32
 800831e:	46bd      	mov	sp, r7
 8008320:	bd80      	pop	{r7, pc}

08008322 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8008322:	b580      	push	{r7, lr}
 8008324:	b088      	sub	sp, #32
 8008326:	af00      	add	r7, sp, #0
 8008328:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800832a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800832e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8008330:	2308      	movs	r3, #8
 8008332:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008334:	2340      	movs	r3, #64	; 0x40
 8008336:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008338:	2300      	movs	r3, #0
 800833a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800833c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008340:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008342:	f107 0308 	add.w	r3, r7, #8
 8008346:	4619      	mov	r1, r3
 8008348:	6878      	ldr	r0, [r7, #4]
 800834a:	f7ff fe67 	bl	800801c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800834e:	6878      	ldr	r0, [r7, #4]
 8008350:	f000 fb18 	bl	8008984 <SDMMC_GetCmdResp7>
 8008354:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008356:	69fb      	ldr	r3, [r7, #28]
}
 8008358:	4618      	mov	r0, r3
 800835a:	3720      	adds	r7, #32
 800835c:	46bd      	mov	sp, r7
 800835e:	bd80      	pop	{r7, pc}

08008360 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b088      	sub	sp, #32
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
 8008368:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800836e:	2337      	movs	r3, #55	; 0x37
 8008370:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008372:	2340      	movs	r3, #64	; 0x40
 8008374:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008376:	2300      	movs	r3, #0
 8008378:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800837a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800837e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008380:	f107 0308 	add.w	r3, r7, #8
 8008384:	4619      	mov	r1, r3
 8008386:	6878      	ldr	r0, [r7, #4]
 8008388:	f7ff fe48 	bl	800801c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800838c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008390:	2137      	movs	r1, #55	; 0x37
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	f000 f916 	bl	80085c4 <SDMMC_GetCmdResp1>
 8008398:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800839a:	69fb      	ldr	r3, [r7, #28]
}
 800839c:	4618      	mov	r0, r3
 800839e:	3720      	adds	r7, #32
 80083a0:	46bd      	mov	sp, r7
 80083a2:	bd80      	pop	{r7, pc}

080083a4 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b088      	sub	sp, #32
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
 80083ac:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80083ae:	683a      	ldr	r2, [r7, #0]
 80083b0:	4b0d      	ldr	r3, [pc, #52]	; (80083e8 <SDMMC_CmdAppOperCommand+0x44>)
 80083b2:	4313      	orrs	r3, r2
 80083b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80083b6:	2329      	movs	r3, #41	; 0x29
 80083b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80083ba:	2340      	movs	r3, #64	; 0x40
 80083bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80083be:	2300      	movs	r3, #0
 80083c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80083c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80083c6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80083c8:	f107 0308 	add.w	r3, r7, #8
 80083cc:	4619      	mov	r1, r3
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f7ff fe24 	bl	800801c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80083d4:	6878      	ldr	r0, [r7, #4]
 80083d6:	f000 fa27 	bl	8008828 <SDMMC_GetCmdResp3>
 80083da:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80083dc:	69fb      	ldr	r3, [r7, #28]
}
 80083de:	4618      	mov	r0, r3
 80083e0:	3720      	adds	r7, #32
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bd80      	pop	{r7, pc}
 80083e6:	bf00      	nop
 80083e8:	80100000 	.word	0x80100000

080083ec <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b088      	sub	sp, #32
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
 80083f4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80083fa:	2306      	movs	r3, #6
 80083fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80083fe:	2340      	movs	r3, #64	; 0x40
 8008400:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008402:	2300      	movs	r3, #0
 8008404:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008406:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800840a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800840c:	f107 0308 	add.w	r3, r7, #8
 8008410:	4619      	mov	r1, r3
 8008412:	6878      	ldr	r0, [r7, #4]
 8008414:	f7ff fe02 	bl	800801c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8008418:	f241 3288 	movw	r2, #5000	; 0x1388
 800841c:	2106      	movs	r1, #6
 800841e:	6878      	ldr	r0, [r7, #4]
 8008420:	f000 f8d0 	bl	80085c4 <SDMMC_GetCmdResp1>
 8008424:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008426:	69fb      	ldr	r3, [r7, #28]
}
 8008428:	4618      	mov	r0, r3
 800842a:	3720      	adds	r7, #32
 800842c:	46bd      	mov	sp, r7
 800842e:	bd80      	pop	{r7, pc}

08008430 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b088      	sub	sp, #32
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8008438:	2300      	movs	r3, #0
 800843a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800843c:	2333      	movs	r3, #51	; 0x33
 800843e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008440:	2340      	movs	r3, #64	; 0x40
 8008442:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008444:	2300      	movs	r3, #0
 8008446:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008448:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800844c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800844e:	f107 0308 	add.w	r3, r7, #8
 8008452:	4619      	mov	r1, r3
 8008454:	6878      	ldr	r0, [r7, #4]
 8008456:	f7ff fde1 	bl	800801c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800845a:	f241 3288 	movw	r2, #5000	; 0x1388
 800845e:	2133      	movs	r1, #51	; 0x33
 8008460:	6878      	ldr	r0, [r7, #4]
 8008462:	f000 f8af 	bl	80085c4 <SDMMC_GetCmdResp1>
 8008466:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008468:	69fb      	ldr	r3, [r7, #28]
}
 800846a:	4618      	mov	r0, r3
 800846c:	3720      	adds	r7, #32
 800846e:	46bd      	mov	sp, r7
 8008470:	bd80      	pop	{r7, pc}

08008472 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8008472:	b580      	push	{r7, lr}
 8008474:	b088      	sub	sp, #32
 8008476:	af00      	add	r7, sp, #0
 8008478:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800847a:	2300      	movs	r3, #0
 800847c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800847e:	2302      	movs	r3, #2
 8008480:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8008482:	23c0      	movs	r3, #192	; 0xc0
 8008484:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008486:	2300      	movs	r3, #0
 8008488:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800848a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800848e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008490:	f107 0308 	add.w	r3, r7, #8
 8008494:	4619      	mov	r1, r3
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f7ff fdc0 	bl	800801c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800849c:	6878      	ldr	r0, [r7, #4]
 800849e:	f000 f97d 	bl	800879c <SDMMC_GetCmdResp2>
 80084a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80084a4:	69fb      	ldr	r3, [r7, #28]
}
 80084a6:	4618      	mov	r0, r3
 80084a8:	3720      	adds	r7, #32
 80084aa:	46bd      	mov	sp, r7
 80084ac:	bd80      	pop	{r7, pc}

080084ae <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80084ae:	b580      	push	{r7, lr}
 80084b0:	b088      	sub	sp, #32
 80084b2:	af00      	add	r7, sp, #0
 80084b4:	6078      	str	r0, [r7, #4]
 80084b6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80084bc:	2309      	movs	r3, #9
 80084be:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80084c0:	23c0      	movs	r3, #192	; 0xc0
 80084c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80084c4:	2300      	movs	r3, #0
 80084c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80084c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80084cc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80084ce:	f107 0308 	add.w	r3, r7, #8
 80084d2:	4619      	mov	r1, r3
 80084d4:	6878      	ldr	r0, [r7, #4]
 80084d6:	f7ff fda1 	bl	800801c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80084da:	6878      	ldr	r0, [r7, #4]
 80084dc:	f000 f95e 	bl	800879c <SDMMC_GetCmdResp2>
 80084e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80084e2:	69fb      	ldr	r3, [r7, #28]
}
 80084e4:	4618      	mov	r0, r3
 80084e6:	3720      	adds	r7, #32
 80084e8:	46bd      	mov	sp, r7
 80084ea:	bd80      	pop	{r7, pc}

080084ec <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b088      	sub	sp, #32
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
 80084f4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80084f6:	2300      	movs	r3, #0
 80084f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80084fa:	2303      	movs	r3, #3
 80084fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80084fe:	2340      	movs	r3, #64	; 0x40
 8008500:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008502:	2300      	movs	r3, #0
 8008504:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008506:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800850a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800850c:	f107 0308 	add.w	r3, r7, #8
 8008510:	4619      	mov	r1, r3
 8008512:	6878      	ldr	r0, [r7, #4]
 8008514:	f7ff fd82 	bl	800801c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8008518:	683a      	ldr	r2, [r7, #0]
 800851a:	2103      	movs	r1, #3
 800851c:	6878      	ldr	r0, [r7, #4]
 800851e:	f000 f9bd 	bl	800889c <SDMMC_GetCmdResp6>
 8008522:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008524:	69fb      	ldr	r3, [r7, #28]
}
 8008526:	4618      	mov	r0, r3
 8008528:	3720      	adds	r7, #32
 800852a:	46bd      	mov	sp, r7
 800852c:	bd80      	pop	{r7, pc}

0800852e <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800852e:	b580      	push	{r7, lr}
 8008530:	b088      	sub	sp, #32
 8008532:	af00      	add	r7, sp, #0
 8008534:	6078      	str	r0, [r7, #4]
 8008536:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800853c:	230d      	movs	r3, #13
 800853e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008540:	2340      	movs	r3, #64	; 0x40
 8008542:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008544:	2300      	movs	r3, #0
 8008546:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008548:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800854c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800854e:	f107 0308 	add.w	r3, r7, #8
 8008552:	4619      	mov	r1, r3
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	f7ff fd61 	bl	800801c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800855a:	f241 3288 	movw	r2, #5000	; 0x1388
 800855e:	210d      	movs	r1, #13
 8008560:	6878      	ldr	r0, [r7, #4]
 8008562:	f000 f82f 	bl	80085c4 <SDMMC_GetCmdResp1>
 8008566:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008568:	69fb      	ldr	r3, [r7, #28]
}
 800856a:	4618      	mov	r0, r3
 800856c:	3720      	adds	r7, #32
 800856e:	46bd      	mov	sp, r7
 8008570:	bd80      	pop	{r7, pc}
	...

08008574 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8008574:	b490      	push	{r4, r7}
 8008576:	b082      	sub	sp, #8
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800857c:	4b0f      	ldr	r3, [pc, #60]	; (80085bc <SDMMC_GetCmdError+0x48>)
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	4a0f      	ldr	r2, [pc, #60]	; (80085c0 <SDMMC_GetCmdError+0x4c>)
 8008582:	fba2 2303 	umull	r2, r3, r2, r3
 8008586:	0a5b      	lsrs	r3, r3, #9
 8008588:	f241 3288 	movw	r2, #5000	; 0x1388
 800858c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8008590:	4623      	mov	r3, r4
 8008592:	1e5c      	subs	r4, r3, #1
 8008594:	2b00      	cmp	r3, #0
 8008596:	d102      	bne.n	800859e <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008598:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800859c:	e009      	b.n	80085b2 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d0f2      	beq.n	8008590 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	22c5      	movs	r2, #197	; 0xc5
 80085ae:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80085b0:	2300      	movs	r3, #0
}
 80085b2:	4618      	mov	r0, r3
 80085b4:	3708      	adds	r7, #8
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bc90      	pop	{r4, r7}
 80085ba:	4770      	bx	lr
 80085bc:	20000010 	.word	0x20000010
 80085c0:	10624dd3 	.word	0x10624dd3

080085c4 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80085c4:	b590      	push	{r4, r7, lr}
 80085c6:	b087      	sub	sp, #28
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	60f8      	str	r0, [r7, #12]
 80085cc:	460b      	mov	r3, r1
 80085ce:	607a      	str	r2, [r7, #4]
 80085d0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80085d2:	4b6f      	ldr	r3, [pc, #444]	; (8008790 <SDMMC_GetCmdResp1+0x1cc>)
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	4a6f      	ldr	r2, [pc, #444]	; (8008794 <SDMMC_GetCmdResp1+0x1d0>)
 80085d8:	fba2 2303 	umull	r2, r3, r2, r3
 80085dc:	0a5b      	lsrs	r3, r3, #9
 80085de:	687a      	ldr	r2, [r7, #4]
 80085e0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80085e4:	4623      	mov	r3, r4
 80085e6:	1e5c      	subs	r4, r3, #1
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d102      	bne.n	80085f2 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80085ec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80085f0:	e0c9      	b.n	8008786 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDMMCx->STA;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085f6:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80085f8:	697b      	ldr	r3, [r7, #20]
 80085fa:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d0f0      	beq.n	80085e4 <SDMMC_GetCmdResp1+0x20>
 8008602:	697b      	ldr	r3, [r7, #20]
 8008604:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008608:	2b00      	cmp	r3, #0
 800860a:	d1eb      	bne.n	80085e4 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008610:	f003 0304 	and.w	r3, r3, #4
 8008614:	2b00      	cmp	r3, #0
 8008616:	d004      	beq.n	8008622 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	2204      	movs	r2, #4
 800861c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800861e:	2304      	movs	r3, #4
 8008620:	e0b1      	b.n	8008786 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008626:	f003 0301 	and.w	r3, r3, #1
 800862a:	2b00      	cmp	r3, #0
 800862c:	d004      	beq.n	8008638 <SDMMC_GetCmdResp1+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	2201      	movs	r2, #1
 8008632:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008634:	2301      	movs	r3, #1
 8008636:	e0a6      	b.n	8008786 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	22c5      	movs	r2, #197	; 0xc5
 800863c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800863e:	68f8      	ldr	r0, [r7, #12]
 8008640:	f7ff fd16 	bl	8008070 <SDMMC_GetCommandResponse>
 8008644:	4603      	mov	r3, r0
 8008646:	461a      	mov	r2, r3
 8008648:	7afb      	ldrb	r3, [r7, #11]
 800864a:	4293      	cmp	r3, r2
 800864c:	d001      	beq.n	8008652 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800864e:	2301      	movs	r3, #1
 8008650:	e099      	b.n	8008786 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8008652:	2100      	movs	r1, #0
 8008654:	68f8      	ldr	r0, [r7, #12]
 8008656:	f7ff fd18 	bl	800808a <SDMMC_GetResponse>
 800865a:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800865c:	693a      	ldr	r2, [r7, #16]
 800865e:	4b4e      	ldr	r3, [pc, #312]	; (8008798 <SDMMC_GetCmdResp1+0x1d4>)
 8008660:	4013      	ands	r3, r2
 8008662:	2b00      	cmp	r3, #0
 8008664:	d101      	bne.n	800866a <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 8008666:	2300      	movs	r3, #0
 8008668:	e08d      	b.n	8008786 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800866a:	693b      	ldr	r3, [r7, #16]
 800866c:	2b00      	cmp	r3, #0
 800866e:	da02      	bge.n	8008676 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8008670:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008674:	e087      	b.n	8008786 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8008676:	693b      	ldr	r3, [r7, #16]
 8008678:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800867c:	2b00      	cmp	r3, #0
 800867e:	d001      	beq.n	8008684 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8008680:	2340      	movs	r3, #64	; 0x40
 8008682:	e080      	b.n	8008786 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8008684:	693b      	ldr	r3, [r7, #16]
 8008686:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800868a:	2b00      	cmp	r3, #0
 800868c:	d001      	beq.n	8008692 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800868e:	2380      	movs	r3, #128	; 0x80
 8008690:	e079      	b.n	8008786 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8008692:	693b      	ldr	r3, [r7, #16]
 8008694:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008698:	2b00      	cmp	r3, #0
 800869a:	d002      	beq.n	80086a2 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800869c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80086a0:	e071      	b.n	8008786 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80086a2:	693b      	ldr	r3, [r7, #16]
 80086a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d002      	beq.n	80086b2 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80086ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80086b0:	e069      	b.n	8008786 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80086b2:	693b      	ldr	r3, [r7, #16]
 80086b4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d002      	beq.n	80086c2 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80086bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80086c0:	e061      	b.n	8008786 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80086c2:	693b      	ldr	r3, [r7, #16]
 80086c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d002      	beq.n	80086d2 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80086cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80086d0:	e059      	b.n	8008786 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80086d2:	693b      	ldr	r3, [r7, #16]
 80086d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d002      	beq.n	80086e2 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80086dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80086e0:	e051      	b.n	8008786 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80086e2:	693b      	ldr	r3, [r7, #16]
 80086e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d002      	beq.n	80086f2 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80086ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80086f0:	e049      	b.n	8008786 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80086f2:	693b      	ldr	r3, [r7, #16]
 80086f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d002      	beq.n	8008702 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80086fc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008700:	e041      	b.n	8008786 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8008702:	693b      	ldr	r3, [r7, #16]
 8008704:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008708:	2b00      	cmp	r3, #0
 800870a:	d002      	beq.n	8008712 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800870c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008710:	e039      	b.n	8008786 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8008712:	693b      	ldr	r3, [r7, #16]
 8008714:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008718:	2b00      	cmp	r3, #0
 800871a:	d002      	beq.n	8008722 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800871c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008720:	e031      	b.n	8008786 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8008722:	693b      	ldr	r3, [r7, #16]
 8008724:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008728:	2b00      	cmp	r3, #0
 800872a:	d002      	beq.n	8008732 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800872c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008730:	e029      	b.n	8008786 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8008732:	693b      	ldr	r3, [r7, #16]
 8008734:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008738:	2b00      	cmp	r3, #0
 800873a:	d002      	beq.n	8008742 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800873c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008740:	e021      	b.n	8008786 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8008742:	693b      	ldr	r3, [r7, #16]
 8008744:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008748:	2b00      	cmp	r3, #0
 800874a:	d002      	beq.n	8008752 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800874c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008750:	e019      	b.n	8008786 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8008752:	693b      	ldr	r3, [r7, #16]
 8008754:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008758:	2b00      	cmp	r3, #0
 800875a:	d002      	beq.n	8008762 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800875c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008760:	e011      	b.n	8008786 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8008762:	693b      	ldr	r3, [r7, #16]
 8008764:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008768:	2b00      	cmp	r3, #0
 800876a:	d002      	beq.n	8008772 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800876c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008770:	e009      	b.n	8008786 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8008772:	693b      	ldr	r3, [r7, #16]
 8008774:	f003 0308 	and.w	r3, r3, #8
 8008778:	2b00      	cmp	r3, #0
 800877a:	d002      	beq.n	8008782 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800877c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8008780:	e001      	b.n	8008786 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008782:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8008786:	4618      	mov	r0, r3
 8008788:	371c      	adds	r7, #28
 800878a:	46bd      	mov	sp, r7
 800878c:	bd90      	pop	{r4, r7, pc}
 800878e:	bf00      	nop
 8008790:	20000010 	.word	0x20000010
 8008794:	10624dd3 	.word	0x10624dd3
 8008798:	fdffe008 	.word	0xfdffe008

0800879c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800879c:	b490      	push	{r4, r7}
 800879e:	b084      	sub	sp, #16
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80087a4:	4b1e      	ldr	r3, [pc, #120]	; (8008820 <SDMMC_GetCmdResp2+0x84>)
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	4a1e      	ldr	r2, [pc, #120]	; (8008824 <SDMMC_GetCmdResp2+0x88>)
 80087aa:	fba2 2303 	umull	r2, r3, r2, r3
 80087ae:	0a5b      	lsrs	r3, r3, #9
 80087b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80087b4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80087b8:	4623      	mov	r3, r4
 80087ba:	1e5c      	subs	r4, r3, #1
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d102      	bne.n	80087c6 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80087c0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80087c4:	e026      	b.n	8008814 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDMMCx->STA;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087ca:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d0f0      	beq.n	80087b8 <SDMMC_GetCmdResp2+0x1c>
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d1eb      	bne.n	80087b8 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087e4:	f003 0304 	and.w	r3, r3, #4
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d004      	beq.n	80087f6 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2204      	movs	r2, #4
 80087f0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80087f2:	2304      	movs	r3, #4
 80087f4:	e00e      	b.n	8008814 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087fa:	f003 0301 	and.w	r3, r3, #1
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d004      	beq.n	800880c <SDMMC_GetCmdResp2+0x70>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2201      	movs	r2, #1
 8008806:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008808:	2301      	movs	r3, #1
 800880a:	e003      	b.n	8008814 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	22c5      	movs	r2, #197	; 0xc5
 8008810:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8008812:	2300      	movs	r3, #0
}
 8008814:	4618      	mov	r0, r3
 8008816:	3710      	adds	r7, #16
 8008818:	46bd      	mov	sp, r7
 800881a:	bc90      	pop	{r4, r7}
 800881c:	4770      	bx	lr
 800881e:	bf00      	nop
 8008820:	20000010 	.word	0x20000010
 8008824:	10624dd3 	.word	0x10624dd3

08008828 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8008828:	b490      	push	{r4, r7}
 800882a:	b084      	sub	sp, #16
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008830:	4b18      	ldr	r3, [pc, #96]	; (8008894 <SDMMC_GetCmdResp3+0x6c>)
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	4a18      	ldr	r2, [pc, #96]	; (8008898 <SDMMC_GetCmdResp3+0x70>)
 8008836:	fba2 2303 	umull	r2, r3, r2, r3
 800883a:	0a5b      	lsrs	r3, r3, #9
 800883c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008840:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8008844:	4623      	mov	r3, r4
 8008846:	1e5c      	subs	r4, r3, #1
 8008848:	2b00      	cmp	r3, #0
 800884a:	d102      	bne.n	8008852 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800884c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008850:	e01b      	b.n	800888a <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDMMCx->STA;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008856:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800885e:	2b00      	cmp	r3, #0
 8008860:	d0f0      	beq.n	8008844 <SDMMC_GetCmdResp3+0x1c>
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008868:	2b00      	cmp	r3, #0
 800886a:	d1eb      	bne.n	8008844 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008870:	f003 0304 	and.w	r3, r3, #4
 8008874:	2b00      	cmp	r3, #0
 8008876:	d004      	beq.n	8008882 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2204      	movs	r2, #4
 800887c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800887e:	2304      	movs	r3, #4
 8008880:	e003      	b.n	800888a <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	22c5      	movs	r2, #197	; 0xc5
 8008886:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8008888:	2300      	movs	r3, #0
}
 800888a:	4618      	mov	r0, r3
 800888c:	3710      	adds	r7, #16
 800888e:	46bd      	mov	sp, r7
 8008890:	bc90      	pop	{r4, r7}
 8008892:	4770      	bx	lr
 8008894:	20000010 	.word	0x20000010
 8008898:	10624dd3 	.word	0x10624dd3

0800889c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800889c:	b590      	push	{r4, r7, lr}
 800889e:	b087      	sub	sp, #28
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	60f8      	str	r0, [r7, #12]
 80088a4:	460b      	mov	r3, r1
 80088a6:	607a      	str	r2, [r7, #4]
 80088a8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80088aa:	4b34      	ldr	r3, [pc, #208]	; (800897c <SDMMC_GetCmdResp6+0xe0>)
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	4a34      	ldr	r2, [pc, #208]	; (8008980 <SDMMC_GetCmdResp6+0xe4>)
 80088b0:	fba2 2303 	umull	r2, r3, r2, r3
 80088b4:	0a5b      	lsrs	r3, r3, #9
 80088b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80088ba:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80088be:	4623      	mov	r3, r4
 80088c0:	1e5c      	subs	r4, r3, #1
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d102      	bne.n	80088cc <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 80088c6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80088ca:	e052      	b.n	8008972 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDMMCx->STA;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088d0:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80088d2:	697b      	ldr	r3, [r7, #20]
 80088d4:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d0f0      	beq.n	80088be <SDMMC_GetCmdResp6+0x22>
 80088dc:	697b      	ldr	r3, [r7, #20]
 80088de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d1eb      	bne.n	80088be <SDMMC_GetCmdResp6+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088ea:	f003 0304 	and.w	r3, r3, #4
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d004      	beq.n	80088fc <SDMMC_GetCmdResp6+0x60>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	2204      	movs	r2, #4
 80088f6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80088f8:	2304      	movs	r3, #4
 80088fa:	e03a      	b.n	8008972 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008900:	f003 0301 	and.w	r3, r3, #1
 8008904:	2b00      	cmp	r3, #0
 8008906:	d004      	beq.n	8008912 <SDMMC_GetCmdResp6+0x76>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	2201      	movs	r2, #1
 800890c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800890e:	2301      	movs	r3, #1
 8008910:	e02f      	b.n	8008972 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8008912:	68f8      	ldr	r0, [r7, #12]
 8008914:	f7ff fbac 	bl	8008070 <SDMMC_GetCommandResponse>
 8008918:	4603      	mov	r3, r0
 800891a:	461a      	mov	r2, r3
 800891c:	7afb      	ldrb	r3, [r7, #11]
 800891e:	4293      	cmp	r3, r2
 8008920:	d001      	beq.n	8008926 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008922:	2301      	movs	r3, #1
 8008924:	e025      	b.n	8008972 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	22c5      	movs	r2, #197	; 0xc5
 800892a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800892c:	2100      	movs	r1, #0
 800892e:	68f8      	ldr	r0, [r7, #12]
 8008930:	f7ff fbab 	bl	800808a <SDMMC_GetResponse>
 8008934:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8008936:	693b      	ldr	r3, [r7, #16]
 8008938:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800893c:	2b00      	cmp	r3, #0
 800893e:	d106      	bne.n	800894e <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8008940:	693b      	ldr	r3, [r7, #16]
 8008942:	0c1b      	lsrs	r3, r3, #16
 8008944:	b29a      	uxth	r2, r3
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800894a:	2300      	movs	r3, #0
 800894c:	e011      	b.n	8008972 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800894e:	693b      	ldr	r3, [r7, #16]
 8008950:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008954:	2b00      	cmp	r3, #0
 8008956:	d002      	beq.n	800895e <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008958:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800895c:	e009      	b.n	8008972 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800895e:	693b      	ldr	r3, [r7, #16]
 8008960:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008964:	2b00      	cmp	r3, #0
 8008966:	d002      	beq.n	800896e <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008968:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800896c:	e001      	b.n	8008972 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800896e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8008972:	4618      	mov	r0, r3
 8008974:	371c      	adds	r7, #28
 8008976:	46bd      	mov	sp, r7
 8008978:	bd90      	pop	{r4, r7, pc}
 800897a:	bf00      	nop
 800897c:	20000010 	.word	0x20000010
 8008980:	10624dd3 	.word	0x10624dd3

08008984 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8008984:	b490      	push	{r4, r7}
 8008986:	b084      	sub	sp, #16
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800898c:	4b21      	ldr	r3, [pc, #132]	; (8008a14 <SDMMC_GetCmdResp7+0x90>)
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	4a21      	ldr	r2, [pc, #132]	; (8008a18 <SDMMC_GetCmdResp7+0x94>)
 8008992:	fba2 2303 	umull	r2, r3, r2, r3
 8008996:	0a5b      	lsrs	r3, r3, #9
 8008998:	f241 3288 	movw	r2, #5000	; 0x1388
 800899c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80089a0:	4623      	mov	r3, r4
 80089a2:	1e5c      	subs	r4, r3, #1
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d102      	bne.n	80089ae <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80089a8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80089ac:	e02c      	b.n	8008a08 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDMMCx->STA;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089b2:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d0f0      	beq.n	80089a0 <SDMMC_GetCmdResp7+0x1c>
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d1eb      	bne.n	80089a0 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089cc:	f003 0304 	and.w	r3, r3, #4
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d004      	beq.n	80089de <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2204      	movs	r2, #4
 80089d8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80089da:	2304      	movs	r3, #4
 80089dc:	e014      	b.n	8008a08 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089e2:	f003 0301 	and.w	r3, r3, #1
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d004      	beq.n	80089f4 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	2201      	movs	r2, #1
 80089ee:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80089f0:	2301      	movs	r3, #1
 80089f2:	e009      	b.n	8008a08 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d002      	beq.n	8008a06 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2240      	movs	r2, #64	; 0x40
 8008a04:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8008a06:	2300      	movs	r3, #0
  
}
 8008a08:	4618      	mov	r0, r3
 8008a0a:	3710      	adds	r7, #16
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	bc90      	pop	{r4, r7}
 8008a10:	4770      	bx	lr
 8008a12:	bf00      	nop
 8008a14:	20000010 	.word	0x20000010
 8008a18:	10624dd3 	.word	0x10624dd3

08008a1c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008a1c:	b084      	sub	sp, #16
 8008a1e:	b580      	push	{r7, lr}
 8008a20:	b084      	sub	sp, #16
 8008a22:	af00      	add	r7, sp, #0
 8008a24:	6078      	str	r0, [r7, #4]
 8008a26:	f107 001c 	add.w	r0, r7, #28
 8008a2a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a30:	2b01      	cmp	r3, #1
 8008a32:	d120      	bne.n	8008a76 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a38:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	68da      	ldr	r2, [r3, #12]
 8008a44:	4b20      	ldr	r3, [pc, #128]	; (8008ac8 <USB_CoreInit+0xac>)
 8008a46:	4013      	ands	r3, r2
 8008a48:	687a      	ldr	r2, [r7, #4]
 8008a4a:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	68db      	ldr	r3, [r3, #12]
 8008a50:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008a58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a5a:	2b01      	cmp	r3, #1
 8008a5c:	d105      	bne.n	8008a6a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	68db      	ldr	r3, [r3, #12]
 8008a62:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8008a6a:	6878      	ldr	r0, [r7, #4]
 8008a6c:	f001 fac4 	bl	8009ff8 <USB_CoreReset>
 8008a70:	4603      	mov	r3, r0
 8008a72:	73fb      	strb	r3, [r7, #15]
 8008a74:	e010      	b.n	8008a98 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	68db      	ldr	r3, [r3, #12]
 8008a7a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8008a82:	6878      	ldr	r0, [r7, #4]
 8008a84:	f001 fab8 	bl	8009ff8 <USB_CoreReset>
 8008a88:	4603      	mov	r3, r0
 8008a8a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a90:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8008a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a9a:	2b01      	cmp	r3, #1
 8008a9c:	d10b      	bne.n	8008ab6 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	689b      	ldr	r3, [r3, #8]
 8008aa2:	f043 0206 	orr.w	r2, r3, #6
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	689b      	ldr	r3, [r3, #8]
 8008aae:	f043 0220 	orr.w	r2, r3, #32
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008ab6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ab8:	4618      	mov	r0, r3
 8008aba:	3710      	adds	r7, #16
 8008abc:	46bd      	mov	sp, r7
 8008abe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008ac2:	b004      	add	sp, #16
 8008ac4:	4770      	bx	lr
 8008ac6:	bf00      	nop
 8008ac8:	ffbdffbf 	.word	0xffbdffbf

08008acc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008acc:	b480      	push	{r7}
 8008ace:	b087      	sub	sp, #28
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	60f8      	str	r0, [r7, #12]
 8008ad4:	60b9      	str	r1, [r7, #8]
 8008ad6:	4613      	mov	r3, r2
 8008ad8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008ada:	79fb      	ldrb	r3, [r7, #7]
 8008adc:	2b02      	cmp	r3, #2
 8008ade:	d165      	bne.n	8008bac <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008ae0:	68bb      	ldr	r3, [r7, #8]
 8008ae2:	4a41      	ldr	r2, [pc, #260]	; (8008be8 <USB_SetTurnaroundTime+0x11c>)
 8008ae4:	4293      	cmp	r3, r2
 8008ae6:	d906      	bls.n	8008af6 <USB_SetTurnaroundTime+0x2a>
 8008ae8:	68bb      	ldr	r3, [r7, #8]
 8008aea:	4a40      	ldr	r2, [pc, #256]	; (8008bec <USB_SetTurnaroundTime+0x120>)
 8008aec:	4293      	cmp	r3, r2
 8008aee:	d802      	bhi.n	8008af6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008af0:	230f      	movs	r3, #15
 8008af2:	617b      	str	r3, [r7, #20]
 8008af4:	e062      	b.n	8008bbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008af6:	68bb      	ldr	r3, [r7, #8]
 8008af8:	4a3c      	ldr	r2, [pc, #240]	; (8008bec <USB_SetTurnaroundTime+0x120>)
 8008afa:	4293      	cmp	r3, r2
 8008afc:	d906      	bls.n	8008b0c <USB_SetTurnaroundTime+0x40>
 8008afe:	68bb      	ldr	r3, [r7, #8]
 8008b00:	4a3b      	ldr	r2, [pc, #236]	; (8008bf0 <USB_SetTurnaroundTime+0x124>)
 8008b02:	4293      	cmp	r3, r2
 8008b04:	d802      	bhi.n	8008b0c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008b06:	230e      	movs	r3, #14
 8008b08:	617b      	str	r3, [r7, #20]
 8008b0a:	e057      	b.n	8008bbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008b0c:	68bb      	ldr	r3, [r7, #8]
 8008b0e:	4a38      	ldr	r2, [pc, #224]	; (8008bf0 <USB_SetTurnaroundTime+0x124>)
 8008b10:	4293      	cmp	r3, r2
 8008b12:	d906      	bls.n	8008b22 <USB_SetTurnaroundTime+0x56>
 8008b14:	68bb      	ldr	r3, [r7, #8]
 8008b16:	4a37      	ldr	r2, [pc, #220]	; (8008bf4 <USB_SetTurnaroundTime+0x128>)
 8008b18:	4293      	cmp	r3, r2
 8008b1a:	d802      	bhi.n	8008b22 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008b1c:	230d      	movs	r3, #13
 8008b1e:	617b      	str	r3, [r7, #20]
 8008b20:	e04c      	b.n	8008bbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008b22:	68bb      	ldr	r3, [r7, #8]
 8008b24:	4a33      	ldr	r2, [pc, #204]	; (8008bf4 <USB_SetTurnaroundTime+0x128>)
 8008b26:	4293      	cmp	r3, r2
 8008b28:	d906      	bls.n	8008b38 <USB_SetTurnaroundTime+0x6c>
 8008b2a:	68bb      	ldr	r3, [r7, #8]
 8008b2c:	4a32      	ldr	r2, [pc, #200]	; (8008bf8 <USB_SetTurnaroundTime+0x12c>)
 8008b2e:	4293      	cmp	r3, r2
 8008b30:	d802      	bhi.n	8008b38 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008b32:	230c      	movs	r3, #12
 8008b34:	617b      	str	r3, [r7, #20]
 8008b36:	e041      	b.n	8008bbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008b38:	68bb      	ldr	r3, [r7, #8]
 8008b3a:	4a2f      	ldr	r2, [pc, #188]	; (8008bf8 <USB_SetTurnaroundTime+0x12c>)
 8008b3c:	4293      	cmp	r3, r2
 8008b3e:	d906      	bls.n	8008b4e <USB_SetTurnaroundTime+0x82>
 8008b40:	68bb      	ldr	r3, [r7, #8]
 8008b42:	4a2e      	ldr	r2, [pc, #184]	; (8008bfc <USB_SetTurnaroundTime+0x130>)
 8008b44:	4293      	cmp	r3, r2
 8008b46:	d802      	bhi.n	8008b4e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008b48:	230b      	movs	r3, #11
 8008b4a:	617b      	str	r3, [r7, #20]
 8008b4c:	e036      	b.n	8008bbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008b4e:	68bb      	ldr	r3, [r7, #8]
 8008b50:	4a2a      	ldr	r2, [pc, #168]	; (8008bfc <USB_SetTurnaroundTime+0x130>)
 8008b52:	4293      	cmp	r3, r2
 8008b54:	d906      	bls.n	8008b64 <USB_SetTurnaroundTime+0x98>
 8008b56:	68bb      	ldr	r3, [r7, #8]
 8008b58:	4a29      	ldr	r2, [pc, #164]	; (8008c00 <USB_SetTurnaroundTime+0x134>)
 8008b5a:	4293      	cmp	r3, r2
 8008b5c:	d802      	bhi.n	8008b64 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008b5e:	230a      	movs	r3, #10
 8008b60:	617b      	str	r3, [r7, #20]
 8008b62:	e02b      	b.n	8008bbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008b64:	68bb      	ldr	r3, [r7, #8]
 8008b66:	4a26      	ldr	r2, [pc, #152]	; (8008c00 <USB_SetTurnaroundTime+0x134>)
 8008b68:	4293      	cmp	r3, r2
 8008b6a:	d906      	bls.n	8008b7a <USB_SetTurnaroundTime+0xae>
 8008b6c:	68bb      	ldr	r3, [r7, #8]
 8008b6e:	4a25      	ldr	r2, [pc, #148]	; (8008c04 <USB_SetTurnaroundTime+0x138>)
 8008b70:	4293      	cmp	r3, r2
 8008b72:	d802      	bhi.n	8008b7a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008b74:	2309      	movs	r3, #9
 8008b76:	617b      	str	r3, [r7, #20]
 8008b78:	e020      	b.n	8008bbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008b7a:	68bb      	ldr	r3, [r7, #8]
 8008b7c:	4a21      	ldr	r2, [pc, #132]	; (8008c04 <USB_SetTurnaroundTime+0x138>)
 8008b7e:	4293      	cmp	r3, r2
 8008b80:	d906      	bls.n	8008b90 <USB_SetTurnaroundTime+0xc4>
 8008b82:	68bb      	ldr	r3, [r7, #8]
 8008b84:	4a20      	ldr	r2, [pc, #128]	; (8008c08 <USB_SetTurnaroundTime+0x13c>)
 8008b86:	4293      	cmp	r3, r2
 8008b88:	d802      	bhi.n	8008b90 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008b8a:	2308      	movs	r3, #8
 8008b8c:	617b      	str	r3, [r7, #20]
 8008b8e:	e015      	b.n	8008bbc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008b90:	68bb      	ldr	r3, [r7, #8]
 8008b92:	4a1d      	ldr	r2, [pc, #116]	; (8008c08 <USB_SetTurnaroundTime+0x13c>)
 8008b94:	4293      	cmp	r3, r2
 8008b96:	d906      	bls.n	8008ba6 <USB_SetTurnaroundTime+0xda>
 8008b98:	68bb      	ldr	r3, [r7, #8]
 8008b9a:	4a1c      	ldr	r2, [pc, #112]	; (8008c0c <USB_SetTurnaroundTime+0x140>)
 8008b9c:	4293      	cmp	r3, r2
 8008b9e:	d802      	bhi.n	8008ba6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008ba0:	2307      	movs	r3, #7
 8008ba2:	617b      	str	r3, [r7, #20]
 8008ba4:	e00a      	b.n	8008bbc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008ba6:	2306      	movs	r3, #6
 8008ba8:	617b      	str	r3, [r7, #20]
 8008baa:	e007      	b.n	8008bbc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008bac:	79fb      	ldrb	r3, [r7, #7]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d102      	bne.n	8008bb8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008bb2:	2309      	movs	r3, #9
 8008bb4:	617b      	str	r3, [r7, #20]
 8008bb6:	e001      	b.n	8008bbc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008bb8:	2309      	movs	r3, #9
 8008bba:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	68db      	ldr	r3, [r3, #12]
 8008bc0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	68da      	ldr	r2, [r3, #12]
 8008bcc:	697b      	ldr	r3, [r7, #20]
 8008bce:	029b      	lsls	r3, r3, #10
 8008bd0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008bd4:	431a      	orrs	r2, r3
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008bda:	2300      	movs	r3, #0
}
 8008bdc:	4618      	mov	r0, r3
 8008bde:	371c      	adds	r7, #28
 8008be0:	46bd      	mov	sp, r7
 8008be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be6:	4770      	bx	lr
 8008be8:	00d8acbf 	.word	0x00d8acbf
 8008bec:	00e4e1bf 	.word	0x00e4e1bf
 8008bf0:	00f423ff 	.word	0x00f423ff
 8008bf4:	0106737f 	.word	0x0106737f
 8008bf8:	011a499f 	.word	0x011a499f
 8008bfc:	01312cff 	.word	0x01312cff
 8008c00:	014ca43f 	.word	0x014ca43f
 8008c04:	016e35ff 	.word	0x016e35ff
 8008c08:	01a6ab1f 	.word	0x01a6ab1f
 8008c0c:	01e847ff 	.word	0x01e847ff

08008c10 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008c10:	b480      	push	{r7}
 8008c12:	b083      	sub	sp, #12
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	689b      	ldr	r3, [r3, #8]
 8008c1c:	f043 0201 	orr.w	r2, r3, #1
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008c24:	2300      	movs	r3, #0
}
 8008c26:	4618      	mov	r0, r3
 8008c28:	370c      	adds	r7, #12
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c30:	4770      	bx	lr

08008c32 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008c32:	b480      	push	{r7}
 8008c34:	b083      	sub	sp, #12
 8008c36:	af00      	add	r7, sp, #0
 8008c38:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	689b      	ldr	r3, [r3, #8]
 8008c3e:	f023 0201 	bic.w	r2, r3, #1
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008c46:	2300      	movs	r3, #0
}
 8008c48:	4618      	mov	r0, r3
 8008c4a:	370c      	adds	r7, #12
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c52:	4770      	bx	lr

08008c54 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b082      	sub	sp, #8
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
 8008c5c:	460b      	mov	r3, r1
 8008c5e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	68db      	ldr	r3, [r3, #12]
 8008c64:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008c6c:	78fb      	ldrb	r3, [r7, #3]
 8008c6e:	2b01      	cmp	r3, #1
 8008c70:	d106      	bne.n	8008c80 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	68db      	ldr	r3, [r3, #12]
 8008c76:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	60da      	str	r2, [r3, #12]
 8008c7e:	e00b      	b.n	8008c98 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8008c80:	78fb      	ldrb	r3, [r7, #3]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d106      	bne.n	8008c94 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	68db      	ldr	r3, [r3, #12]
 8008c8a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	60da      	str	r2, [r3, #12]
 8008c92:	e001      	b.n	8008c98 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8008c94:	2301      	movs	r3, #1
 8008c96:	e003      	b.n	8008ca0 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8008c98:	2032      	movs	r0, #50	; 0x32
 8008c9a:	f7f8 fc79 	bl	8001590 <HAL_Delay>

  return HAL_OK;
 8008c9e:	2300      	movs	r3, #0
}
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	3708      	adds	r7, #8
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	bd80      	pop	{r7, pc}

08008ca8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008ca8:	b084      	sub	sp, #16
 8008caa:	b580      	push	{r7, lr}
 8008cac:	b086      	sub	sp, #24
 8008cae:	af00      	add	r7, sp, #0
 8008cb0:	6078      	str	r0, [r7, #4]
 8008cb2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008cb6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008cba:	2300      	movs	r3, #0
 8008cbc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	613b      	str	r3, [r7, #16]
 8008cc6:	e009      	b.n	8008cdc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008cc8:	687a      	ldr	r2, [r7, #4]
 8008cca:	693b      	ldr	r3, [r7, #16]
 8008ccc:	3340      	adds	r3, #64	; 0x40
 8008cce:	009b      	lsls	r3, r3, #2
 8008cd0:	4413      	add	r3, r2
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008cd6:	693b      	ldr	r3, [r7, #16]
 8008cd8:	3301      	adds	r3, #1
 8008cda:	613b      	str	r3, [r7, #16]
 8008cdc:	693b      	ldr	r3, [r7, #16]
 8008cde:	2b0e      	cmp	r3, #14
 8008ce0:	d9f2      	bls.n	8008cc8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008ce2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d11c      	bne.n	8008d22 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cee:	685b      	ldr	r3, [r3, #4]
 8008cf0:	68fa      	ldr	r2, [r7, #12]
 8008cf2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008cf6:	f043 0302 	orr.w	r3, r3, #2
 8008cfa:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d00:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	601a      	str	r2, [r3, #0]
 8008d20:	e005      	b.n	8008d2e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d26:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008d34:	461a      	mov	r2, r3
 8008d36:	2300      	movs	r3, #0
 8008d38:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d40:	4619      	mov	r1, r3
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d48:	461a      	mov	r2, r3
 8008d4a:	680b      	ldr	r3, [r1, #0]
 8008d4c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d50:	2b01      	cmp	r3, #1
 8008d52:	d10c      	bne.n	8008d6e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d104      	bne.n	8008d64 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008d5a:	2100      	movs	r1, #0
 8008d5c:	6878      	ldr	r0, [r7, #4]
 8008d5e:	f000 f959 	bl	8009014 <USB_SetDevSpeed>
 8008d62:	e018      	b.n	8008d96 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008d64:	2101      	movs	r1, #1
 8008d66:	6878      	ldr	r0, [r7, #4]
 8008d68:	f000 f954 	bl	8009014 <USB_SetDevSpeed>
 8008d6c:	e013      	b.n	8008d96 <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8008d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d70:	2b03      	cmp	r3, #3
 8008d72:	d10c      	bne.n	8008d8e <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d104      	bne.n	8008d84 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008d7a:	2100      	movs	r1, #0
 8008d7c:	6878      	ldr	r0, [r7, #4]
 8008d7e:	f000 f949 	bl	8009014 <USB_SetDevSpeed>
 8008d82:	e008      	b.n	8008d96 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008d84:	2101      	movs	r1, #1
 8008d86:	6878      	ldr	r0, [r7, #4]
 8008d88:	f000 f944 	bl	8009014 <USB_SetDevSpeed>
 8008d8c:	e003      	b.n	8008d96 <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008d8e:	2103      	movs	r1, #3
 8008d90:	6878      	ldr	r0, [r7, #4]
 8008d92:	f000 f93f 	bl	8009014 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008d96:	2110      	movs	r1, #16
 8008d98:	6878      	ldr	r0, [r7, #4]
 8008d9a:	f000 f8f3 	bl	8008f84 <USB_FlushTxFifo>
 8008d9e:	4603      	mov	r3, r0
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d001      	beq.n	8008da8 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 8008da4:	2301      	movs	r3, #1
 8008da6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008da8:	6878      	ldr	r0, [r7, #4]
 8008daa:	f000 f911 	bl	8008fd0 <USB_FlushRxFifo>
 8008dae:	4603      	mov	r3, r0
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d001      	beq.n	8008db8 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 8008db4:	2301      	movs	r3, #1
 8008db6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008dbe:	461a      	mov	r2, r3
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008dca:	461a      	mov	r2, r3
 8008dcc:	2300      	movs	r3, #0
 8008dce:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008dd6:	461a      	mov	r2, r3
 8008dd8:	2300      	movs	r3, #0
 8008dda:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008ddc:	2300      	movs	r3, #0
 8008dde:	613b      	str	r3, [r7, #16]
 8008de0:	e043      	b.n	8008e6a <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008de2:	693b      	ldr	r3, [r7, #16]
 8008de4:	015a      	lsls	r2, r3, #5
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	4413      	add	r3, r2
 8008dea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008df4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008df8:	d118      	bne.n	8008e2c <USB_DevInit+0x184>
    {
      if (i == 0U)
 8008dfa:	693b      	ldr	r3, [r7, #16]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d10a      	bne.n	8008e16 <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008e00:	693b      	ldr	r3, [r7, #16]
 8008e02:	015a      	lsls	r2, r3, #5
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	4413      	add	r3, r2
 8008e08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e0c:	461a      	mov	r2, r3
 8008e0e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008e12:	6013      	str	r3, [r2, #0]
 8008e14:	e013      	b.n	8008e3e <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008e16:	693b      	ldr	r3, [r7, #16]
 8008e18:	015a      	lsls	r2, r3, #5
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	4413      	add	r3, r2
 8008e1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e22:	461a      	mov	r2, r3
 8008e24:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008e28:	6013      	str	r3, [r2, #0]
 8008e2a:	e008      	b.n	8008e3e <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008e2c:	693b      	ldr	r3, [r7, #16]
 8008e2e:	015a      	lsls	r2, r3, #5
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	4413      	add	r3, r2
 8008e34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e38:	461a      	mov	r2, r3
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008e3e:	693b      	ldr	r3, [r7, #16]
 8008e40:	015a      	lsls	r2, r3, #5
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	4413      	add	r3, r2
 8008e46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e4a:	461a      	mov	r2, r3
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008e50:	693b      	ldr	r3, [r7, #16]
 8008e52:	015a      	lsls	r2, r3, #5
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	4413      	add	r3, r2
 8008e58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e5c:	461a      	mov	r2, r3
 8008e5e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008e62:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008e64:	693b      	ldr	r3, [r7, #16]
 8008e66:	3301      	adds	r3, #1
 8008e68:	613b      	str	r3, [r7, #16]
 8008e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e6c:	693a      	ldr	r2, [r7, #16]
 8008e6e:	429a      	cmp	r2, r3
 8008e70:	d3b7      	bcc.n	8008de2 <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008e72:	2300      	movs	r3, #0
 8008e74:	613b      	str	r3, [r7, #16]
 8008e76:	e043      	b.n	8008f00 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008e78:	693b      	ldr	r3, [r7, #16]
 8008e7a:	015a      	lsls	r2, r3, #5
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	4413      	add	r3, r2
 8008e80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008e8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008e8e:	d118      	bne.n	8008ec2 <USB_DevInit+0x21a>
    {
      if (i == 0U)
 8008e90:	693b      	ldr	r3, [r7, #16]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d10a      	bne.n	8008eac <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008e96:	693b      	ldr	r3, [r7, #16]
 8008e98:	015a      	lsls	r2, r3, #5
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	4413      	add	r3, r2
 8008e9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ea2:	461a      	mov	r2, r3
 8008ea4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008ea8:	6013      	str	r3, [r2, #0]
 8008eaa:	e013      	b.n	8008ed4 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008eac:	693b      	ldr	r3, [r7, #16]
 8008eae:	015a      	lsls	r2, r3, #5
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	4413      	add	r3, r2
 8008eb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008eb8:	461a      	mov	r2, r3
 8008eba:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008ebe:	6013      	str	r3, [r2, #0]
 8008ec0:	e008      	b.n	8008ed4 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008ec2:	693b      	ldr	r3, [r7, #16]
 8008ec4:	015a      	lsls	r2, r3, #5
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	4413      	add	r3, r2
 8008eca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ece:	461a      	mov	r2, r3
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008ed4:	693b      	ldr	r3, [r7, #16]
 8008ed6:	015a      	lsls	r2, r3, #5
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	4413      	add	r3, r2
 8008edc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ee0:	461a      	mov	r2, r3
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008ee6:	693b      	ldr	r3, [r7, #16]
 8008ee8:	015a      	lsls	r2, r3, #5
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	4413      	add	r3, r2
 8008eee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ef2:	461a      	mov	r2, r3
 8008ef4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008ef8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008efa:	693b      	ldr	r3, [r7, #16]
 8008efc:	3301      	adds	r3, #1
 8008efe:	613b      	str	r3, [r7, #16]
 8008f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f02:	693a      	ldr	r2, [r7, #16]
 8008f04:	429a      	cmp	r2, r3
 8008f06:	d3b7      	bcc.n	8008e78 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f0e:	691b      	ldr	r3, [r3, #16]
 8008f10:	68fa      	ldr	r2, [r7, #12]
 8008f12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008f16:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008f1a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2200      	movs	r2, #0
 8008f20:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008f28:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d105      	bne.n	8008f3c <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	699b      	ldr	r3, [r3, #24]
 8008f34:	f043 0210 	orr.w	r2, r3, #16
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	699a      	ldr	r2, [r3, #24]
 8008f40:	4b0e      	ldr	r3, [pc, #56]	; (8008f7c <USB_DevInit+0x2d4>)
 8008f42:	4313      	orrs	r3, r2
 8008f44:	687a      	ldr	r2, [r7, #4]
 8008f46:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008f48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d005      	beq.n	8008f5a <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	699b      	ldr	r3, [r3, #24]
 8008f52:	f043 0208 	orr.w	r2, r3, #8
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008f5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f5c:	2b01      	cmp	r3, #1
 8008f5e:	d105      	bne.n	8008f6c <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	699a      	ldr	r2, [r3, #24]
 8008f64:	4b06      	ldr	r3, [pc, #24]	; (8008f80 <USB_DevInit+0x2d8>)
 8008f66:	4313      	orrs	r3, r2
 8008f68:	687a      	ldr	r2, [r7, #4]
 8008f6a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008f6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f6e:	4618      	mov	r0, r3
 8008f70:	3718      	adds	r7, #24
 8008f72:	46bd      	mov	sp, r7
 8008f74:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008f78:	b004      	add	sp, #16
 8008f7a:	4770      	bx	lr
 8008f7c:	803c3800 	.word	0x803c3800
 8008f80:	40000004 	.word	0x40000004

08008f84 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008f84:	b480      	push	{r7}
 8008f86:	b085      	sub	sp, #20
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
 8008f8c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8008f8e:	2300      	movs	r3, #0
 8008f90:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	019b      	lsls	r3, r3, #6
 8008f96:	f043 0220 	orr.w	r2, r3, #32
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	3301      	adds	r3, #1
 8008fa2:	60fb      	str	r3, [r7, #12]
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	4a09      	ldr	r2, [pc, #36]	; (8008fcc <USB_FlushTxFifo+0x48>)
 8008fa8:	4293      	cmp	r3, r2
 8008faa:	d901      	bls.n	8008fb0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8008fac:	2303      	movs	r3, #3
 8008fae:	e006      	b.n	8008fbe <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	691b      	ldr	r3, [r3, #16]
 8008fb4:	f003 0320 	and.w	r3, r3, #32
 8008fb8:	2b20      	cmp	r3, #32
 8008fba:	d0f0      	beq.n	8008f9e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8008fbc:	2300      	movs	r3, #0
}
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	3714      	adds	r7, #20
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc8:	4770      	bx	lr
 8008fca:	bf00      	nop
 8008fcc:	00030d40 	.word	0x00030d40

08008fd0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008fd0:	b480      	push	{r7}
 8008fd2:	b085      	sub	sp, #20
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8008fd8:	2300      	movs	r3, #0
 8008fda:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2210      	movs	r2, #16
 8008fe0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	3301      	adds	r3, #1
 8008fe6:	60fb      	str	r3, [r7, #12]
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	4a09      	ldr	r2, [pc, #36]	; (8009010 <USB_FlushRxFifo+0x40>)
 8008fec:	4293      	cmp	r3, r2
 8008fee:	d901      	bls.n	8008ff4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8008ff0:	2303      	movs	r3, #3
 8008ff2:	e006      	b.n	8009002 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	691b      	ldr	r3, [r3, #16]
 8008ff8:	f003 0310 	and.w	r3, r3, #16
 8008ffc:	2b10      	cmp	r3, #16
 8008ffe:	d0f0      	beq.n	8008fe2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8009000:	2300      	movs	r3, #0
}
 8009002:	4618      	mov	r0, r3
 8009004:	3714      	adds	r7, #20
 8009006:	46bd      	mov	sp, r7
 8009008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900c:	4770      	bx	lr
 800900e:	bf00      	nop
 8009010:	00030d40 	.word	0x00030d40

08009014 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009014:	b480      	push	{r7}
 8009016:	b085      	sub	sp, #20
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
 800901c:	460b      	mov	r3, r1
 800901e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800902a:	681a      	ldr	r2, [r3, #0]
 800902c:	78fb      	ldrb	r3, [r7, #3]
 800902e:	68f9      	ldr	r1, [r7, #12]
 8009030:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009034:	4313      	orrs	r3, r2
 8009036:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009038:	2300      	movs	r3, #0
}
 800903a:	4618      	mov	r0, r3
 800903c:	3714      	adds	r7, #20
 800903e:	46bd      	mov	sp, r7
 8009040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009044:	4770      	bx	lr

08009046 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009046:	b480      	push	{r7}
 8009048:	b087      	sub	sp, #28
 800904a:	af00      	add	r7, sp, #0
 800904c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009052:	693b      	ldr	r3, [r7, #16]
 8009054:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009058:	689b      	ldr	r3, [r3, #8]
 800905a:	f003 0306 	and.w	r3, r3, #6
 800905e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d102      	bne.n	800906c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009066:	2300      	movs	r3, #0
 8009068:	75fb      	strb	r3, [r7, #23]
 800906a:	e00a      	b.n	8009082 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	2b02      	cmp	r3, #2
 8009070:	d002      	beq.n	8009078 <USB_GetDevSpeed+0x32>
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	2b06      	cmp	r3, #6
 8009076:	d102      	bne.n	800907e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009078:	2302      	movs	r3, #2
 800907a:	75fb      	strb	r3, [r7, #23]
 800907c:	e001      	b.n	8009082 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800907e:	230f      	movs	r3, #15
 8009080:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009082:	7dfb      	ldrb	r3, [r7, #23]
}
 8009084:	4618      	mov	r0, r3
 8009086:	371c      	adds	r7, #28
 8009088:	46bd      	mov	sp, r7
 800908a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908e:	4770      	bx	lr

08009090 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009090:	b480      	push	{r7}
 8009092:	b085      	sub	sp, #20
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
 8009098:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800909e:	683b      	ldr	r3, [r7, #0]
 80090a0:	781b      	ldrb	r3, [r3, #0]
 80090a2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	785b      	ldrb	r3, [r3, #1]
 80090a8:	2b01      	cmp	r3, #1
 80090aa:	d139      	bne.n	8009120 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090b2:	69da      	ldr	r2, [r3, #28]
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	781b      	ldrb	r3, [r3, #0]
 80090b8:	f003 030f 	and.w	r3, r3, #15
 80090bc:	2101      	movs	r1, #1
 80090be:	fa01 f303 	lsl.w	r3, r1, r3
 80090c2:	b29b      	uxth	r3, r3
 80090c4:	68f9      	ldr	r1, [r7, #12]
 80090c6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80090ca:	4313      	orrs	r3, r2
 80090cc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80090ce:	68bb      	ldr	r3, [r7, #8]
 80090d0:	015a      	lsls	r2, r3, #5
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	4413      	add	r3, r2
 80090d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d153      	bne.n	800918c <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80090e4:	68bb      	ldr	r3, [r7, #8]
 80090e6:	015a      	lsls	r2, r3, #5
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	4413      	add	r3, r2
 80090ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090f0:	681a      	ldr	r2, [r3, #0]
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	689b      	ldr	r3, [r3, #8]
 80090f6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	78db      	ldrb	r3, [r3, #3]
 80090fe:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009100:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009102:	68bb      	ldr	r3, [r7, #8]
 8009104:	059b      	lsls	r3, r3, #22
 8009106:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009108:	431a      	orrs	r2, r3
 800910a:	68bb      	ldr	r3, [r7, #8]
 800910c:	0159      	lsls	r1, r3, #5
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	440b      	add	r3, r1
 8009112:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009116:	4619      	mov	r1, r3
 8009118:	4b20      	ldr	r3, [pc, #128]	; (800919c <USB_ActivateEndpoint+0x10c>)
 800911a:	4313      	orrs	r3, r2
 800911c:	600b      	str	r3, [r1, #0]
 800911e:	e035      	b.n	800918c <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009126:	69da      	ldr	r2, [r3, #28]
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	781b      	ldrb	r3, [r3, #0]
 800912c:	f003 030f 	and.w	r3, r3, #15
 8009130:	2101      	movs	r1, #1
 8009132:	fa01 f303 	lsl.w	r3, r1, r3
 8009136:	041b      	lsls	r3, r3, #16
 8009138:	68f9      	ldr	r1, [r7, #12]
 800913a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800913e:	4313      	orrs	r3, r2
 8009140:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009142:	68bb      	ldr	r3, [r7, #8]
 8009144:	015a      	lsls	r2, r3, #5
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	4413      	add	r3, r2
 800914a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009154:	2b00      	cmp	r3, #0
 8009156:	d119      	bne.n	800918c <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009158:	68bb      	ldr	r3, [r7, #8]
 800915a:	015a      	lsls	r2, r3, #5
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	4413      	add	r3, r2
 8009160:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009164:	681a      	ldr	r2, [r3, #0]
 8009166:	683b      	ldr	r3, [r7, #0]
 8009168:	689b      	ldr	r3, [r3, #8]
 800916a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800916e:	683b      	ldr	r3, [r7, #0]
 8009170:	78db      	ldrb	r3, [r3, #3]
 8009172:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009174:	430b      	orrs	r3, r1
 8009176:	431a      	orrs	r2, r3
 8009178:	68bb      	ldr	r3, [r7, #8]
 800917a:	0159      	lsls	r1, r3, #5
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	440b      	add	r3, r1
 8009180:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009184:	4619      	mov	r1, r3
 8009186:	4b05      	ldr	r3, [pc, #20]	; (800919c <USB_ActivateEndpoint+0x10c>)
 8009188:	4313      	orrs	r3, r2
 800918a:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800918c:	2300      	movs	r3, #0
}
 800918e:	4618      	mov	r0, r3
 8009190:	3714      	adds	r7, #20
 8009192:	46bd      	mov	sp, r7
 8009194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009198:	4770      	bx	lr
 800919a:	bf00      	nop
 800919c:	10008000 	.word	0x10008000

080091a0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80091a0:	b480      	push	{r7}
 80091a2:	b085      	sub	sp, #20
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
 80091a8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80091ae:	683b      	ldr	r3, [r7, #0]
 80091b0:	781b      	ldrb	r3, [r3, #0]
 80091b2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80091b4:	683b      	ldr	r3, [r7, #0]
 80091b6:	785b      	ldrb	r3, [r3, #1]
 80091b8:	2b01      	cmp	r3, #1
 80091ba:	d161      	bne.n	8009280 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80091bc:	68bb      	ldr	r3, [r7, #8]
 80091be:	015a      	lsls	r2, r3, #5
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	4413      	add	r3, r2
 80091c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80091ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80091d2:	d11f      	bne.n	8009214 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80091d4:	68bb      	ldr	r3, [r7, #8]
 80091d6:	015a      	lsls	r2, r3, #5
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	4413      	add	r3, r2
 80091dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	68ba      	ldr	r2, [r7, #8]
 80091e4:	0151      	lsls	r1, r2, #5
 80091e6:	68fa      	ldr	r2, [r7, #12]
 80091e8:	440a      	add	r2, r1
 80091ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80091ee:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80091f2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80091f4:	68bb      	ldr	r3, [r7, #8]
 80091f6:	015a      	lsls	r2, r3, #5
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	4413      	add	r3, r2
 80091fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	68ba      	ldr	r2, [r7, #8]
 8009204:	0151      	lsls	r1, r2, #5
 8009206:	68fa      	ldr	r2, [r7, #12]
 8009208:	440a      	add	r2, r1
 800920a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800920e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009212:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800921a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800921c:	683b      	ldr	r3, [r7, #0]
 800921e:	781b      	ldrb	r3, [r3, #0]
 8009220:	f003 030f 	and.w	r3, r3, #15
 8009224:	2101      	movs	r1, #1
 8009226:	fa01 f303 	lsl.w	r3, r1, r3
 800922a:	b29b      	uxth	r3, r3
 800922c:	43db      	mvns	r3, r3
 800922e:	68f9      	ldr	r1, [r7, #12]
 8009230:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009234:	4013      	ands	r3, r2
 8009236:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800923e:	69da      	ldr	r2, [r3, #28]
 8009240:	683b      	ldr	r3, [r7, #0]
 8009242:	781b      	ldrb	r3, [r3, #0]
 8009244:	f003 030f 	and.w	r3, r3, #15
 8009248:	2101      	movs	r1, #1
 800924a:	fa01 f303 	lsl.w	r3, r1, r3
 800924e:	b29b      	uxth	r3, r3
 8009250:	43db      	mvns	r3, r3
 8009252:	68f9      	ldr	r1, [r7, #12]
 8009254:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009258:	4013      	ands	r3, r2
 800925a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800925c:	68bb      	ldr	r3, [r7, #8]
 800925e:	015a      	lsls	r2, r3, #5
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	4413      	add	r3, r2
 8009264:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009268:	681a      	ldr	r2, [r3, #0]
 800926a:	68bb      	ldr	r3, [r7, #8]
 800926c:	0159      	lsls	r1, r3, #5
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	440b      	add	r3, r1
 8009272:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009276:	4619      	mov	r1, r3
 8009278:	4b35      	ldr	r3, [pc, #212]	; (8009350 <USB_DeactivateEndpoint+0x1b0>)
 800927a:	4013      	ands	r3, r2
 800927c:	600b      	str	r3, [r1, #0]
 800927e:	e060      	b.n	8009342 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009280:	68bb      	ldr	r3, [r7, #8]
 8009282:	015a      	lsls	r2, r3, #5
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	4413      	add	r3, r2
 8009288:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009292:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009296:	d11f      	bne.n	80092d8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009298:	68bb      	ldr	r3, [r7, #8]
 800929a:	015a      	lsls	r2, r3, #5
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	4413      	add	r3, r2
 80092a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	68ba      	ldr	r2, [r7, #8]
 80092a8:	0151      	lsls	r1, r2, #5
 80092aa:	68fa      	ldr	r2, [r7, #12]
 80092ac:	440a      	add	r2, r1
 80092ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80092b2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80092b6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80092b8:	68bb      	ldr	r3, [r7, #8]
 80092ba:	015a      	lsls	r2, r3, #5
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	4413      	add	r3, r2
 80092c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	68ba      	ldr	r2, [r7, #8]
 80092c8:	0151      	lsls	r1, r2, #5
 80092ca:	68fa      	ldr	r2, [r7, #12]
 80092cc:	440a      	add	r2, r1
 80092ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80092d2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80092d6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80092e0:	683b      	ldr	r3, [r7, #0]
 80092e2:	781b      	ldrb	r3, [r3, #0]
 80092e4:	f003 030f 	and.w	r3, r3, #15
 80092e8:	2101      	movs	r1, #1
 80092ea:	fa01 f303 	lsl.w	r3, r1, r3
 80092ee:	041b      	lsls	r3, r3, #16
 80092f0:	43db      	mvns	r3, r3
 80092f2:	68f9      	ldr	r1, [r7, #12]
 80092f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80092f8:	4013      	ands	r3, r2
 80092fa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009302:	69da      	ldr	r2, [r3, #28]
 8009304:	683b      	ldr	r3, [r7, #0]
 8009306:	781b      	ldrb	r3, [r3, #0]
 8009308:	f003 030f 	and.w	r3, r3, #15
 800930c:	2101      	movs	r1, #1
 800930e:	fa01 f303 	lsl.w	r3, r1, r3
 8009312:	041b      	lsls	r3, r3, #16
 8009314:	43db      	mvns	r3, r3
 8009316:	68f9      	ldr	r1, [r7, #12]
 8009318:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800931c:	4013      	ands	r3, r2
 800931e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009320:	68bb      	ldr	r3, [r7, #8]
 8009322:	015a      	lsls	r2, r3, #5
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	4413      	add	r3, r2
 8009328:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800932c:	681a      	ldr	r2, [r3, #0]
 800932e:	68bb      	ldr	r3, [r7, #8]
 8009330:	0159      	lsls	r1, r3, #5
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	440b      	add	r3, r1
 8009336:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800933a:	4619      	mov	r1, r3
 800933c:	4b05      	ldr	r3, [pc, #20]	; (8009354 <USB_DeactivateEndpoint+0x1b4>)
 800933e:	4013      	ands	r3, r2
 8009340:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009342:	2300      	movs	r3, #0
}
 8009344:	4618      	mov	r0, r3
 8009346:	3714      	adds	r7, #20
 8009348:	46bd      	mov	sp, r7
 800934a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934e:	4770      	bx	lr
 8009350:	ec337800 	.word	0xec337800
 8009354:	eff37800 	.word	0xeff37800

08009358 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b08a      	sub	sp, #40	; 0x28
 800935c:	af02      	add	r7, sp, #8
 800935e:	60f8      	str	r0, [r7, #12]
 8009360:	60b9      	str	r1, [r7, #8]
 8009362:	4613      	mov	r3, r2
 8009364:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800936a:	68bb      	ldr	r3, [r7, #8]
 800936c:	781b      	ldrb	r3, [r3, #0]
 800936e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009370:	68bb      	ldr	r3, [r7, #8]
 8009372:	785b      	ldrb	r3, [r3, #1]
 8009374:	2b01      	cmp	r3, #1
 8009376:	f040 8163 	bne.w	8009640 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800937a:	68bb      	ldr	r3, [r7, #8]
 800937c:	695b      	ldr	r3, [r3, #20]
 800937e:	2b00      	cmp	r3, #0
 8009380:	d132      	bne.n	80093e8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009382:	69bb      	ldr	r3, [r7, #24]
 8009384:	015a      	lsls	r2, r3, #5
 8009386:	69fb      	ldr	r3, [r7, #28]
 8009388:	4413      	add	r3, r2
 800938a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800938e:	691a      	ldr	r2, [r3, #16]
 8009390:	69bb      	ldr	r3, [r7, #24]
 8009392:	0159      	lsls	r1, r3, #5
 8009394:	69fb      	ldr	r3, [r7, #28]
 8009396:	440b      	add	r3, r1
 8009398:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800939c:	4619      	mov	r1, r3
 800939e:	4ba5      	ldr	r3, [pc, #660]	; (8009634 <USB_EPStartXfer+0x2dc>)
 80093a0:	4013      	ands	r3, r2
 80093a2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80093a4:	69bb      	ldr	r3, [r7, #24]
 80093a6:	015a      	lsls	r2, r3, #5
 80093a8:	69fb      	ldr	r3, [r7, #28]
 80093aa:	4413      	add	r3, r2
 80093ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093b0:	691b      	ldr	r3, [r3, #16]
 80093b2:	69ba      	ldr	r2, [r7, #24]
 80093b4:	0151      	lsls	r1, r2, #5
 80093b6:	69fa      	ldr	r2, [r7, #28]
 80093b8:	440a      	add	r2, r1
 80093ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80093be:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80093c2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80093c4:	69bb      	ldr	r3, [r7, #24]
 80093c6:	015a      	lsls	r2, r3, #5
 80093c8:	69fb      	ldr	r3, [r7, #28]
 80093ca:	4413      	add	r3, r2
 80093cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093d0:	691a      	ldr	r2, [r3, #16]
 80093d2:	69bb      	ldr	r3, [r7, #24]
 80093d4:	0159      	lsls	r1, r3, #5
 80093d6:	69fb      	ldr	r3, [r7, #28]
 80093d8:	440b      	add	r3, r1
 80093da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093de:	4619      	mov	r1, r3
 80093e0:	4b95      	ldr	r3, [pc, #596]	; (8009638 <USB_EPStartXfer+0x2e0>)
 80093e2:	4013      	ands	r3, r2
 80093e4:	610b      	str	r3, [r1, #16]
 80093e6:	e074      	b.n	80094d2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80093e8:	69bb      	ldr	r3, [r7, #24]
 80093ea:	015a      	lsls	r2, r3, #5
 80093ec:	69fb      	ldr	r3, [r7, #28]
 80093ee:	4413      	add	r3, r2
 80093f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093f4:	691a      	ldr	r2, [r3, #16]
 80093f6:	69bb      	ldr	r3, [r7, #24]
 80093f8:	0159      	lsls	r1, r3, #5
 80093fa:	69fb      	ldr	r3, [r7, #28]
 80093fc:	440b      	add	r3, r1
 80093fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009402:	4619      	mov	r1, r3
 8009404:	4b8c      	ldr	r3, [pc, #560]	; (8009638 <USB_EPStartXfer+0x2e0>)
 8009406:	4013      	ands	r3, r2
 8009408:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800940a:	69bb      	ldr	r3, [r7, #24]
 800940c:	015a      	lsls	r2, r3, #5
 800940e:	69fb      	ldr	r3, [r7, #28]
 8009410:	4413      	add	r3, r2
 8009412:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009416:	691a      	ldr	r2, [r3, #16]
 8009418:	69bb      	ldr	r3, [r7, #24]
 800941a:	0159      	lsls	r1, r3, #5
 800941c:	69fb      	ldr	r3, [r7, #28]
 800941e:	440b      	add	r3, r1
 8009420:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009424:	4619      	mov	r1, r3
 8009426:	4b83      	ldr	r3, [pc, #524]	; (8009634 <USB_EPStartXfer+0x2dc>)
 8009428:	4013      	ands	r3, r2
 800942a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800942c:	69bb      	ldr	r3, [r7, #24]
 800942e:	015a      	lsls	r2, r3, #5
 8009430:	69fb      	ldr	r3, [r7, #28]
 8009432:	4413      	add	r3, r2
 8009434:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009438:	691a      	ldr	r2, [r3, #16]
 800943a:	68bb      	ldr	r3, [r7, #8]
 800943c:	6959      	ldr	r1, [r3, #20]
 800943e:	68bb      	ldr	r3, [r7, #8]
 8009440:	689b      	ldr	r3, [r3, #8]
 8009442:	440b      	add	r3, r1
 8009444:	1e59      	subs	r1, r3, #1
 8009446:	68bb      	ldr	r3, [r7, #8]
 8009448:	689b      	ldr	r3, [r3, #8]
 800944a:	fbb1 f3f3 	udiv	r3, r1, r3
 800944e:	04d9      	lsls	r1, r3, #19
 8009450:	4b7a      	ldr	r3, [pc, #488]	; (800963c <USB_EPStartXfer+0x2e4>)
 8009452:	400b      	ands	r3, r1
 8009454:	69b9      	ldr	r1, [r7, #24]
 8009456:	0148      	lsls	r0, r1, #5
 8009458:	69f9      	ldr	r1, [r7, #28]
 800945a:	4401      	add	r1, r0
 800945c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009460:	4313      	orrs	r3, r2
 8009462:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009464:	69bb      	ldr	r3, [r7, #24]
 8009466:	015a      	lsls	r2, r3, #5
 8009468:	69fb      	ldr	r3, [r7, #28]
 800946a:	4413      	add	r3, r2
 800946c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009470:	691a      	ldr	r2, [r3, #16]
 8009472:	68bb      	ldr	r3, [r7, #8]
 8009474:	695b      	ldr	r3, [r3, #20]
 8009476:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800947a:	69b9      	ldr	r1, [r7, #24]
 800947c:	0148      	lsls	r0, r1, #5
 800947e:	69f9      	ldr	r1, [r7, #28]
 8009480:	4401      	add	r1, r0
 8009482:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009486:	4313      	orrs	r3, r2
 8009488:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800948a:	68bb      	ldr	r3, [r7, #8]
 800948c:	78db      	ldrb	r3, [r3, #3]
 800948e:	2b01      	cmp	r3, #1
 8009490:	d11f      	bne.n	80094d2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009492:	69bb      	ldr	r3, [r7, #24]
 8009494:	015a      	lsls	r2, r3, #5
 8009496:	69fb      	ldr	r3, [r7, #28]
 8009498:	4413      	add	r3, r2
 800949a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800949e:	691b      	ldr	r3, [r3, #16]
 80094a0:	69ba      	ldr	r2, [r7, #24]
 80094a2:	0151      	lsls	r1, r2, #5
 80094a4:	69fa      	ldr	r2, [r7, #28]
 80094a6:	440a      	add	r2, r1
 80094a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80094ac:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80094b0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80094b2:	69bb      	ldr	r3, [r7, #24]
 80094b4:	015a      	lsls	r2, r3, #5
 80094b6:	69fb      	ldr	r3, [r7, #28]
 80094b8:	4413      	add	r3, r2
 80094ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094be:	691b      	ldr	r3, [r3, #16]
 80094c0:	69ba      	ldr	r2, [r7, #24]
 80094c2:	0151      	lsls	r1, r2, #5
 80094c4:	69fa      	ldr	r2, [r7, #28]
 80094c6:	440a      	add	r2, r1
 80094c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80094cc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80094d0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80094d2:	79fb      	ldrb	r3, [r7, #7]
 80094d4:	2b01      	cmp	r3, #1
 80094d6:	d14b      	bne.n	8009570 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80094d8:	68bb      	ldr	r3, [r7, #8]
 80094da:	691b      	ldr	r3, [r3, #16]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d009      	beq.n	80094f4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80094e0:	69bb      	ldr	r3, [r7, #24]
 80094e2:	015a      	lsls	r2, r3, #5
 80094e4:	69fb      	ldr	r3, [r7, #28]
 80094e6:	4413      	add	r3, r2
 80094e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094ec:	461a      	mov	r2, r3
 80094ee:	68bb      	ldr	r3, [r7, #8]
 80094f0:	691b      	ldr	r3, [r3, #16]
 80094f2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80094f4:	68bb      	ldr	r3, [r7, #8]
 80094f6:	78db      	ldrb	r3, [r3, #3]
 80094f8:	2b01      	cmp	r3, #1
 80094fa:	d128      	bne.n	800954e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80094fc:	69fb      	ldr	r3, [r7, #28]
 80094fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009502:	689b      	ldr	r3, [r3, #8]
 8009504:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009508:	2b00      	cmp	r3, #0
 800950a:	d110      	bne.n	800952e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800950c:	69bb      	ldr	r3, [r7, #24]
 800950e:	015a      	lsls	r2, r3, #5
 8009510:	69fb      	ldr	r3, [r7, #28]
 8009512:	4413      	add	r3, r2
 8009514:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	69ba      	ldr	r2, [r7, #24]
 800951c:	0151      	lsls	r1, r2, #5
 800951e:	69fa      	ldr	r2, [r7, #28]
 8009520:	440a      	add	r2, r1
 8009522:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009526:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800952a:	6013      	str	r3, [r2, #0]
 800952c:	e00f      	b.n	800954e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800952e:	69bb      	ldr	r3, [r7, #24]
 8009530:	015a      	lsls	r2, r3, #5
 8009532:	69fb      	ldr	r3, [r7, #28]
 8009534:	4413      	add	r3, r2
 8009536:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	69ba      	ldr	r2, [r7, #24]
 800953e:	0151      	lsls	r1, r2, #5
 8009540:	69fa      	ldr	r2, [r7, #28]
 8009542:	440a      	add	r2, r1
 8009544:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009548:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800954c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800954e:	69bb      	ldr	r3, [r7, #24]
 8009550:	015a      	lsls	r2, r3, #5
 8009552:	69fb      	ldr	r3, [r7, #28]
 8009554:	4413      	add	r3, r2
 8009556:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	69ba      	ldr	r2, [r7, #24]
 800955e:	0151      	lsls	r1, r2, #5
 8009560:	69fa      	ldr	r2, [r7, #28]
 8009562:	440a      	add	r2, r1
 8009564:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009568:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800956c:	6013      	str	r3, [r2, #0]
 800956e:	e133      	b.n	80097d8 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009570:	69bb      	ldr	r3, [r7, #24]
 8009572:	015a      	lsls	r2, r3, #5
 8009574:	69fb      	ldr	r3, [r7, #28]
 8009576:	4413      	add	r3, r2
 8009578:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	69ba      	ldr	r2, [r7, #24]
 8009580:	0151      	lsls	r1, r2, #5
 8009582:	69fa      	ldr	r2, [r7, #28]
 8009584:	440a      	add	r2, r1
 8009586:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800958a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800958e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009590:	68bb      	ldr	r3, [r7, #8]
 8009592:	78db      	ldrb	r3, [r3, #3]
 8009594:	2b01      	cmp	r3, #1
 8009596:	d015      	beq.n	80095c4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009598:	68bb      	ldr	r3, [r7, #8]
 800959a:	695b      	ldr	r3, [r3, #20]
 800959c:	2b00      	cmp	r3, #0
 800959e:	f000 811b 	beq.w	80097d8 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80095a2:	69fb      	ldr	r3, [r7, #28]
 80095a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80095aa:	68bb      	ldr	r3, [r7, #8]
 80095ac:	781b      	ldrb	r3, [r3, #0]
 80095ae:	f003 030f 	and.w	r3, r3, #15
 80095b2:	2101      	movs	r1, #1
 80095b4:	fa01 f303 	lsl.w	r3, r1, r3
 80095b8:	69f9      	ldr	r1, [r7, #28]
 80095ba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80095be:	4313      	orrs	r3, r2
 80095c0:	634b      	str	r3, [r1, #52]	; 0x34
 80095c2:	e109      	b.n	80097d8 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80095c4:	69fb      	ldr	r3, [r7, #28]
 80095c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095ca:	689b      	ldr	r3, [r3, #8]
 80095cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d110      	bne.n	80095f6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80095d4:	69bb      	ldr	r3, [r7, #24]
 80095d6:	015a      	lsls	r2, r3, #5
 80095d8:	69fb      	ldr	r3, [r7, #28]
 80095da:	4413      	add	r3, r2
 80095dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	69ba      	ldr	r2, [r7, #24]
 80095e4:	0151      	lsls	r1, r2, #5
 80095e6:	69fa      	ldr	r2, [r7, #28]
 80095e8:	440a      	add	r2, r1
 80095ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095ee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80095f2:	6013      	str	r3, [r2, #0]
 80095f4:	e00f      	b.n	8009616 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80095f6:	69bb      	ldr	r3, [r7, #24]
 80095f8:	015a      	lsls	r2, r3, #5
 80095fa:	69fb      	ldr	r3, [r7, #28]
 80095fc:	4413      	add	r3, r2
 80095fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	69ba      	ldr	r2, [r7, #24]
 8009606:	0151      	lsls	r1, r2, #5
 8009608:	69fa      	ldr	r2, [r7, #28]
 800960a:	440a      	add	r2, r1
 800960c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009610:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009614:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009616:	68bb      	ldr	r3, [r7, #8]
 8009618:	68d9      	ldr	r1, [r3, #12]
 800961a:	68bb      	ldr	r3, [r7, #8]
 800961c:	781a      	ldrb	r2, [r3, #0]
 800961e:	68bb      	ldr	r3, [r7, #8]
 8009620:	695b      	ldr	r3, [r3, #20]
 8009622:	b298      	uxth	r0, r3
 8009624:	79fb      	ldrb	r3, [r7, #7]
 8009626:	9300      	str	r3, [sp, #0]
 8009628:	4603      	mov	r3, r0
 800962a:	68f8      	ldr	r0, [r7, #12]
 800962c:	f000 fa38 	bl	8009aa0 <USB_WritePacket>
 8009630:	e0d2      	b.n	80097d8 <USB_EPStartXfer+0x480>
 8009632:	bf00      	nop
 8009634:	e007ffff 	.word	0xe007ffff
 8009638:	fff80000 	.word	0xfff80000
 800963c:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009640:	69bb      	ldr	r3, [r7, #24]
 8009642:	015a      	lsls	r2, r3, #5
 8009644:	69fb      	ldr	r3, [r7, #28]
 8009646:	4413      	add	r3, r2
 8009648:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800964c:	691a      	ldr	r2, [r3, #16]
 800964e:	69bb      	ldr	r3, [r7, #24]
 8009650:	0159      	lsls	r1, r3, #5
 8009652:	69fb      	ldr	r3, [r7, #28]
 8009654:	440b      	add	r3, r1
 8009656:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800965a:	4619      	mov	r1, r3
 800965c:	4b61      	ldr	r3, [pc, #388]	; (80097e4 <USB_EPStartXfer+0x48c>)
 800965e:	4013      	ands	r3, r2
 8009660:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009662:	69bb      	ldr	r3, [r7, #24]
 8009664:	015a      	lsls	r2, r3, #5
 8009666:	69fb      	ldr	r3, [r7, #28]
 8009668:	4413      	add	r3, r2
 800966a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800966e:	691a      	ldr	r2, [r3, #16]
 8009670:	69bb      	ldr	r3, [r7, #24]
 8009672:	0159      	lsls	r1, r3, #5
 8009674:	69fb      	ldr	r3, [r7, #28]
 8009676:	440b      	add	r3, r1
 8009678:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800967c:	4619      	mov	r1, r3
 800967e:	4b5a      	ldr	r3, [pc, #360]	; (80097e8 <USB_EPStartXfer+0x490>)
 8009680:	4013      	ands	r3, r2
 8009682:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8009684:	68bb      	ldr	r3, [r7, #8]
 8009686:	695b      	ldr	r3, [r3, #20]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d123      	bne.n	80096d4 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800968c:	69bb      	ldr	r3, [r7, #24]
 800968e:	015a      	lsls	r2, r3, #5
 8009690:	69fb      	ldr	r3, [r7, #28]
 8009692:	4413      	add	r3, r2
 8009694:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009698:	691a      	ldr	r2, [r3, #16]
 800969a:	68bb      	ldr	r3, [r7, #8]
 800969c:	689b      	ldr	r3, [r3, #8]
 800969e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80096a2:	69b9      	ldr	r1, [r7, #24]
 80096a4:	0148      	lsls	r0, r1, #5
 80096a6:	69f9      	ldr	r1, [r7, #28]
 80096a8:	4401      	add	r1, r0
 80096aa:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80096ae:	4313      	orrs	r3, r2
 80096b0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80096b2:	69bb      	ldr	r3, [r7, #24]
 80096b4:	015a      	lsls	r2, r3, #5
 80096b6:	69fb      	ldr	r3, [r7, #28]
 80096b8:	4413      	add	r3, r2
 80096ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096be:	691b      	ldr	r3, [r3, #16]
 80096c0:	69ba      	ldr	r2, [r7, #24]
 80096c2:	0151      	lsls	r1, r2, #5
 80096c4:	69fa      	ldr	r2, [r7, #28]
 80096c6:	440a      	add	r2, r1
 80096c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80096cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80096d0:	6113      	str	r3, [r2, #16]
 80096d2:	e033      	b.n	800973c <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80096d4:	68bb      	ldr	r3, [r7, #8]
 80096d6:	695a      	ldr	r2, [r3, #20]
 80096d8:	68bb      	ldr	r3, [r7, #8]
 80096da:	689b      	ldr	r3, [r3, #8]
 80096dc:	4413      	add	r3, r2
 80096de:	1e5a      	subs	r2, r3, #1
 80096e0:	68bb      	ldr	r3, [r7, #8]
 80096e2:	689b      	ldr	r3, [r3, #8]
 80096e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80096e8:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80096ea:	69bb      	ldr	r3, [r7, #24]
 80096ec:	015a      	lsls	r2, r3, #5
 80096ee:	69fb      	ldr	r3, [r7, #28]
 80096f0:	4413      	add	r3, r2
 80096f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096f6:	691a      	ldr	r2, [r3, #16]
 80096f8:	8afb      	ldrh	r3, [r7, #22]
 80096fa:	04d9      	lsls	r1, r3, #19
 80096fc:	4b3b      	ldr	r3, [pc, #236]	; (80097ec <USB_EPStartXfer+0x494>)
 80096fe:	400b      	ands	r3, r1
 8009700:	69b9      	ldr	r1, [r7, #24]
 8009702:	0148      	lsls	r0, r1, #5
 8009704:	69f9      	ldr	r1, [r7, #28]
 8009706:	4401      	add	r1, r0
 8009708:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800970c:	4313      	orrs	r3, r2
 800970e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8009710:	69bb      	ldr	r3, [r7, #24]
 8009712:	015a      	lsls	r2, r3, #5
 8009714:	69fb      	ldr	r3, [r7, #28]
 8009716:	4413      	add	r3, r2
 8009718:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800971c:	691a      	ldr	r2, [r3, #16]
 800971e:	68bb      	ldr	r3, [r7, #8]
 8009720:	689b      	ldr	r3, [r3, #8]
 8009722:	8af9      	ldrh	r1, [r7, #22]
 8009724:	fb01 f303 	mul.w	r3, r1, r3
 8009728:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800972c:	69b9      	ldr	r1, [r7, #24]
 800972e:	0148      	lsls	r0, r1, #5
 8009730:	69f9      	ldr	r1, [r7, #28]
 8009732:	4401      	add	r1, r0
 8009734:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009738:	4313      	orrs	r3, r2
 800973a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800973c:	79fb      	ldrb	r3, [r7, #7]
 800973e:	2b01      	cmp	r3, #1
 8009740:	d10d      	bne.n	800975e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009742:	68bb      	ldr	r3, [r7, #8]
 8009744:	68db      	ldr	r3, [r3, #12]
 8009746:	2b00      	cmp	r3, #0
 8009748:	d009      	beq.n	800975e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800974a:	68bb      	ldr	r3, [r7, #8]
 800974c:	68d9      	ldr	r1, [r3, #12]
 800974e:	69bb      	ldr	r3, [r7, #24]
 8009750:	015a      	lsls	r2, r3, #5
 8009752:	69fb      	ldr	r3, [r7, #28]
 8009754:	4413      	add	r3, r2
 8009756:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800975a:	460a      	mov	r2, r1
 800975c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800975e:	68bb      	ldr	r3, [r7, #8]
 8009760:	78db      	ldrb	r3, [r3, #3]
 8009762:	2b01      	cmp	r3, #1
 8009764:	d128      	bne.n	80097b8 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009766:	69fb      	ldr	r3, [r7, #28]
 8009768:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800976c:	689b      	ldr	r3, [r3, #8]
 800976e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009772:	2b00      	cmp	r3, #0
 8009774:	d110      	bne.n	8009798 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009776:	69bb      	ldr	r3, [r7, #24]
 8009778:	015a      	lsls	r2, r3, #5
 800977a:	69fb      	ldr	r3, [r7, #28]
 800977c:	4413      	add	r3, r2
 800977e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	69ba      	ldr	r2, [r7, #24]
 8009786:	0151      	lsls	r1, r2, #5
 8009788:	69fa      	ldr	r2, [r7, #28]
 800978a:	440a      	add	r2, r1
 800978c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009790:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009794:	6013      	str	r3, [r2, #0]
 8009796:	e00f      	b.n	80097b8 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009798:	69bb      	ldr	r3, [r7, #24]
 800979a:	015a      	lsls	r2, r3, #5
 800979c:	69fb      	ldr	r3, [r7, #28]
 800979e:	4413      	add	r3, r2
 80097a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	69ba      	ldr	r2, [r7, #24]
 80097a8:	0151      	lsls	r1, r2, #5
 80097aa:	69fa      	ldr	r2, [r7, #28]
 80097ac:	440a      	add	r2, r1
 80097ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80097b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80097b6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80097b8:	69bb      	ldr	r3, [r7, #24]
 80097ba:	015a      	lsls	r2, r3, #5
 80097bc:	69fb      	ldr	r3, [r7, #28]
 80097be:	4413      	add	r3, r2
 80097c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	69ba      	ldr	r2, [r7, #24]
 80097c8:	0151      	lsls	r1, r2, #5
 80097ca:	69fa      	ldr	r2, [r7, #28]
 80097cc:	440a      	add	r2, r1
 80097ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80097d2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80097d6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80097d8:	2300      	movs	r3, #0
}
 80097da:	4618      	mov	r0, r3
 80097dc:	3720      	adds	r7, #32
 80097de:	46bd      	mov	sp, r7
 80097e0:	bd80      	pop	{r7, pc}
 80097e2:	bf00      	nop
 80097e4:	fff80000 	.word	0xfff80000
 80097e8:	e007ffff 	.word	0xe007ffff
 80097ec:	1ff80000 	.word	0x1ff80000

080097f0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80097f0:	b480      	push	{r7}
 80097f2:	b087      	sub	sp, #28
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	60f8      	str	r0, [r7, #12]
 80097f8:	60b9      	str	r1, [r7, #8]
 80097fa:	4613      	mov	r3, r2
 80097fc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8009802:	68bb      	ldr	r3, [r7, #8]
 8009804:	781b      	ldrb	r3, [r3, #0]
 8009806:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009808:	68bb      	ldr	r3, [r7, #8]
 800980a:	785b      	ldrb	r3, [r3, #1]
 800980c:	2b01      	cmp	r3, #1
 800980e:	f040 80cd 	bne.w	80099ac <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009812:	68bb      	ldr	r3, [r7, #8]
 8009814:	695b      	ldr	r3, [r3, #20]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d132      	bne.n	8009880 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800981a:	693b      	ldr	r3, [r7, #16]
 800981c:	015a      	lsls	r2, r3, #5
 800981e:	697b      	ldr	r3, [r7, #20]
 8009820:	4413      	add	r3, r2
 8009822:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009826:	691a      	ldr	r2, [r3, #16]
 8009828:	693b      	ldr	r3, [r7, #16]
 800982a:	0159      	lsls	r1, r3, #5
 800982c:	697b      	ldr	r3, [r7, #20]
 800982e:	440b      	add	r3, r1
 8009830:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009834:	4619      	mov	r1, r3
 8009836:	4b98      	ldr	r3, [pc, #608]	; (8009a98 <USB_EP0StartXfer+0x2a8>)
 8009838:	4013      	ands	r3, r2
 800983a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800983c:	693b      	ldr	r3, [r7, #16]
 800983e:	015a      	lsls	r2, r3, #5
 8009840:	697b      	ldr	r3, [r7, #20]
 8009842:	4413      	add	r3, r2
 8009844:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009848:	691b      	ldr	r3, [r3, #16]
 800984a:	693a      	ldr	r2, [r7, #16]
 800984c:	0151      	lsls	r1, r2, #5
 800984e:	697a      	ldr	r2, [r7, #20]
 8009850:	440a      	add	r2, r1
 8009852:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009856:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800985a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800985c:	693b      	ldr	r3, [r7, #16]
 800985e:	015a      	lsls	r2, r3, #5
 8009860:	697b      	ldr	r3, [r7, #20]
 8009862:	4413      	add	r3, r2
 8009864:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009868:	691a      	ldr	r2, [r3, #16]
 800986a:	693b      	ldr	r3, [r7, #16]
 800986c:	0159      	lsls	r1, r3, #5
 800986e:	697b      	ldr	r3, [r7, #20]
 8009870:	440b      	add	r3, r1
 8009872:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009876:	4619      	mov	r1, r3
 8009878:	4b88      	ldr	r3, [pc, #544]	; (8009a9c <USB_EP0StartXfer+0x2ac>)
 800987a:	4013      	ands	r3, r2
 800987c:	610b      	str	r3, [r1, #16]
 800987e:	e04e      	b.n	800991e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009880:	693b      	ldr	r3, [r7, #16]
 8009882:	015a      	lsls	r2, r3, #5
 8009884:	697b      	ldr	r3, [r7, #20]
 8009886:	4413      	add	r3, r2
 8009888:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800988c:	691a      	ldr	r2, [r3, #16]
 800988e:	693b      	ldr	r3, [r7, #16]
 8009890:	0159      	lsls	r1, r3, #5
 8009892:	697b      	ldr	r3, [r7, #20]
 8009894:	440b      	add	r3, r1
 8009896:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800989a:	4619      	mov	r1, r3
 800989c:	4b7f      	ldr	r3, [pc, #508]	; (8009a9c <USB_EP0StartXfer+0x2ac>)
 800989e:	4013      	ands	r3, r2
 80098a0:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80098a2:	693b      	ldr	r3, [r7, #16]
 80098a4:	015a      	lsls	r2, r3, #5
 80098a6:	697b      	ldr	r3, [r7, #20]
 80098a8:	4413      	add	r3, r2
 80098aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098ae:	691a      	ldr	r2, [r3, #16]
 80098b0:	693b      	ldr	r3, [r7, #16]
 80098b2:	0159      	lsls	r1, r3, #5
 80098b4:	697b      	ldr	r3, [r7, #20]
 80098b6:	440b      	add	r3, r1
 80098b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098bc:	4619      	mov	r1, r3
 80098be:	4b76      	ldr	r3, [pc, #472]	; (8009a98 <USB_EP0StartXfer+0x2a8>)
 80098c0:	4013      	ands	r3, r2
 80098c2:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 80098c4:	68bb      	ldr	r3, [r7, #8]
 80098c6:	695a      	ldr	r2, [r3, #20]
 80098c8:	68bb      	ldr	r3, [r7, #8]
 80098ca:	689b      	ldr	r3, [r3, #8]
 80098cc:	429a      	cmp	r2, r3
 80098ce:	d903      	bls.n	80098d8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80098d0:	68bb      	ldr	r3, [r7, #8]
 80098d2:	689a      	ldr	r2, [r3, #8]
 80098d4:	68bb      	ldr	r3, [r7, #8]
 80098d6:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80098d8:	693b      	ldr	r3, [r7, #16]
 80098da:	015a      	lsls	r2, r3, #5
 80098dc:	697b      	ldr	r3, [r7, #20]
 80098de:	4413      	add	r3, r2
 80098e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098e4:	691b      	ldr	r3, [r3, #16]
 80098e6:	693a      	ldr	r2, [r7, #16]
 80098e8:	0151      	lsls	r1, r2, #5
 80098ea:	697a      	ldr	r2, [r7, #20]
 80098ec:	440a      	add	r2, r1
 80098ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80098f2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80098f6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80098f8:	693b      	ldr	r3, [r7, #16]
 80098fa:	015a      	lsls	r2, r3, #5
 80098fc:	697b      	ldr	r3, [r7, #20]
 80098fe:	4413      	add	r3, r2
 8009900:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009904:	691a      	ldr	r2, [r3, #16]
 8009906:	68bb      	ldr	r3, [r7, #8]
 8009908:	695b      	ldr	r3, [r3, #20]
 800990a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800990e:	6939      	ldr	r1, [r7, #16]
 8009910:	0148      	lsls	r0, r1, #5
 8009912:	6979      	ldr	r1, [r7, #20]
 8009914:	4401      	add	r1, r0
 8009916:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800991a:	4313      	orrs	r3, r2
 800991c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800991e:	79fb      	ldrb	r3, [r7, #7]
 8009920:	2b01      	cmp	r3, #1
 8009922:	d11e      	bne.n	8009962 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009924:	68bb      	ldr	r3, [r7, #8]
 8009926:	691b      	ldr	r3, [r3, #16]
 8009928:	2b00      	cmp	r3, #0
 800992a:	d009      	beq.n	8009940 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800992c:	693b      	ldr	r3, [r7, #16]
 800992e:	015a      	lsls	r2, r3, #5
 8009930:	697b      	ldr	r3, [r7, #20]
 8009932:	4413      	add	r3, r2
 8009934:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009938:	461a      	mov	r2, r3
 800993a:	68bb      	ldr	r3, [r7, #8]
 800993c:	691b      	ldr	r3, [r3, #16]
 800993e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009940:	693b      	ldr	r3, [r7, #16]
 8009942:	015a      	lsls	r2, r3, #5
 8009944:	697b      	ldr	r3, [r7, #20]
 8009946:	4413      	add	r3, r2
 8009948:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	693a      	ldr	r2, [r7, #16]
 8009950:	0151      	lsls	r1, r2, #5
 8009952:	697a      	ldr	r2, [r7, #20]
 8009954:	440a      	add	r2, r1
 8009956:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800995a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800995e:	6013      	str	r3, [r2, #0]
 8009960:	e092      	b.n	8009a88 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009962:	693b      	ldr	r3, [r7, #16]
 8009964:	015a      	lsls	r2, r3, #5
 8009966:	697b      	ldr	r3, [r7, #20]
 8009968:	4413      	add	r3, r2
 800996a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	693a      	ldr	r2, [r7, #16]
 8009972:	0151      	lsls	r1, r2, #5
 8009974:	697a      	ldr	r2, [r7, #20]
 8009976:	440a      	add	r2, r1
 8009978:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800997c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009980:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8009982:	68bb      	ldr	r3, [r7, #8]
 8009984:	695b      	ldr	r3, [r3, #20]
 8009986:	2b00      	cmp	r3, #0
 8009988:	d07e      	beq.n	8009a88 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800998a:	697b      	ldr	r3, [r7, #20]
 800998c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009990:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009992:	68bb      	ldr	r3, [r7, #8]
 8009994:	781b      	ldrb	r3, [r3, #0]
 8009996:	f003 030f 	and.w	r3, r3, #15
 800999a:	2101      	movs	r1, #1
 800999c:	fa01 f303 	lsl.w	r3, r1, r3
 80099a0:	6979      	ldr	r1, [r7, #20]
 80099a2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80099a6:	4313      	orrs	r3, r2
 80099a8:	634b      	str	r3, [r1, #52]	; 0x34
 80099aa:	e06d      	b.n	8009a88 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80099ac:	693b      	ldr	r3, [r7, #16]
 80099ae:	015a      	lsls	r2, r3, #5
 80099b0:	697b      	ldr	r3, [r7, #20]
 80099b2:	4413      	add	r3, r2
 80099b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099b8:	691a      	ldr	r2, [r3, #16]
 80099ba:	693b      	ldr	r3, [r7, #16]
 80099bc:	0159      	lsls	r1, r3, #5
 80099be:	697b      	ldr	r3, [r7, #20]
 80099c0:	440b      	add	r3, r1
 80099c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099c6:	4619      	mov	r1, r3
 80099c8:	4b34      	ldr	r3, [pc, #208]	; (8009a9c <USB_EP0StartXfer+0x2ac>)
 80099ca:	4013      	ands	r3, r2
 80099cc:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80099ce:	693b      	ldr	r3, [r7, #16]
 80099d0:	015a      	lsls	r2, r3, #5
 80099d2:	697b      	ldr	r3, [r7, #20]
 80099d4:	4413      	add	r3, r2
 80099d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099da:	691a      	ldr	r2, [r3, #16]
 80099dc:	693b      	ldr	r3, [r7, #16]
 80099de:	0159      	lsls	r1, r3, #5
 80099e0:	697b      	ldr	r3, [r7, #20]
 80099e2:	440b      	add	r3, r1
 80099e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099e8:	4619      	mov	r1, r3
 80099ea:	4b2b      	ldr	r3, [pc, #172]	; (8009a98 <USB_EP0StartXfer+0x2a8>)
 80099ec:	4013      	ands	r3, r2
 80099ee:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 80099f0:	68bb      	ldr	r3, [r7, #8]
 80099f2:	695b      	ldr	r3, [r3, #20]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d003      	beq.n	8009a00 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80099f8:	68bb      	ldr	r3, [r7, #8]
 80099fa:	689a      	ldr	r2, [r3, #8]
 80099fc:	68bb      	ldr	r3, [r7, #8]
 80099fe:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009a00:	693b      	ldr	r3, [r7, #16]
 8009a02:	015a      	lsls	r2, r3, #5
 8009a04:	697b      	ldr	r3, [r7, #20]
 8009a06:	4413      	add	r3, r2
 8009a08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a0c:	691b      	ldr	r3, [r3, #16]
 8009a0e:	693a      	ldr	r2, [r7, #16]
 8009a10:	0151      	lsls	r1, r2, #5
 8009a12:	697a      	ldr	r2, [r7, #20]
 8009a14:	440a      	add	r2, r1
 8009a16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a1a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009a1e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8009a20:	693b      	ldr	r3, [r7, #16]
 8009a22:	015a      	lsls	r2, r3, #5
 8009a24:	697b      	ldr	r3, [r7, #20]
 8009a26:	4413      	add	r3, r2
 8009a28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a2c:	691a      	ldr	r2, [r3, #16]
 8009a2e:	68bb      	ldr	r3, [r7, #8]
 8009a30:	689b      	ldr	r3, [r3, #8]
 8009a32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009a36:	6939      	ldr	r1, [r7, #16]
 8009a38:	0148      	lsls	r0, r1, #5
 8009a3a:	6979      	ldr	r1, [r7, #20]
 8009a3c:	4401      	add	r1, r0
 8009a3e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009a42:	4313      	orrs	r3, r2
 8009a44:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8009a46:	79fb      	ldrb	r3, [r7, #7]
 8009a48:	2b01      	cmp	r3, #1
 8009a4a:	d10d      	bne.n	8009a68 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009a4c:	68bb      	ldr	r3, [r7, #8]
 8009a4e:	68db      	ldr	r3, [r3, #12]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d009      	beq.n	8009a68 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009a54:	68bb      	ldr	r3, [r7, #8]
 8009a56:	68d9      	ldr	r1, [r3, #12]
 8009a58:	693b      	ldr	r3, [r7, #16]
 8009a5a:	015a      	lsls	r2, r3, #5
 8009a5c:	697b      	ldr	r3, [r7, #20]
 8009a5e:	4413      	add	r3, r2
 8009a60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a64:	460a      	mov	r2, r1
 8009a66:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009a68:	693b      	ldr	r3, [r7, #16]
 8009a6a:	015a      	lsls	r2, r3, #5
 8009a6c:	697b      	ldr	r3, [r7, #20]
 8009a6e:	4413      	add	r3, r2
 8009a70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	693a      	ldr	r2, [r7, #16]
 8009a78:	0151      	lsls	r1, r2, #5
 8009a7a:	697a      	ldr	r2, [r7, #20]
 8009a7c:	440a      	add	r2, r1
 8009a7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a82:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009a86:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009a88:	2300      	movs	r3, #0
}
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	371c      	adds	r7, #28
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a94:	4770      	bx	lr
 8009a96:	bf00      	nop
 8009a98:	e007ffff 	.word	0xe007ffff
 8009a9c:	fff80000 	.word	0xfff80000

08009aa0 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009aa0:	b480      	push	{r7}
 8009aa2:	b089      	sub	sp, #36	; 0x24
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	60f8      	str	r0, [r7, #12]
 8009aa8:	60b9      	str	r1, [r7, #8]
 8009aaa:	4611      	mov	r1, r2
 8009aac:	461a      	mov	r2, r3
 8009aae:	460b      	mov	r3, r1
 8009ab0:	71fb      	strb	r3, [r7, #7]
 8009ab2:	4613      	mov	r3, r2
 8009ab4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8009aba:	68bb      	ldr	r3, [r7, #8]
 8009abc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8009abe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d11a      	bne.n	8009afc <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009ac6:	88bb      	ldrh	r3, [r7, #4]
 8009ac8:	3303      	adds	r3, #3
 8009aca:	089b      	lsrs	r3, r3, #2
 8009acc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009ace:	2300      	movs	r3, #0
 8009ad0:	61bb      	str	r3, [r7, #24]
 8009ad2:	e00f      	b.n	8009af4 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009ad4:	79fb      	ldrb	r3, [r7, #7]
 8009ad6:	031a      	lsls	r2, r3, #12
 8009ad8:	697b      	ldr	r3, [r7, #20]
 8009ada:	4413      	add	r3, r2
 8009adc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ae0:	461a      	mov	r2, r3
 8009ae2:	69fb      	ldr	r3, [r7, #28]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009ae8:	69fb      	ldr	r3, [r7, #28]
 8009aea:	3304      	adds	r3, #4
 8009aec:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009aee:	69bb      	ldr	r3, [r7, #24]
 8009af0:	3301      	adds	r3, #1
 8009af2:	61bb      	str	r3, [r7, #24]
 8009af4:	69ba      	ldr	r2, [r7, #24]
 8009af6:	693b      	ldr	r3, [r7, #16]
 8009af8:	429a      	cmp	r2, r3
 8009afa:	d3eb      	bcc.n	8009ad4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009afc:	2300      	movs	r3, #0
}
 8009afe:	4618      	mov	r0, r3
 8009b00:	3724      	adds	r7, #36	; 0x24
 8009b02:	46bd      	mov	sp, r7
 8009b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b08:	4770      	bx	lr

08009b0a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009b0a:	b480      	push	{r7}
 8009b0c:	b089      	sub	sp, #36	; 0x24
 8009b0e:	af00      	add	r7, sp, #0
 8009b10:	60f8      	str	r0, [r7, #12]
 8009b12:	60b9      	str	r1, [r7, #8]
 8009b14:	4613      	mov	r3, r2
 8009b16:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8009b1c:	68bb      	ldr	r3, [r7, #8]
 8009b1e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8009b20:	88fb      	ldrh	r3, [r7, #6]
 8009b22:	3303      	adds	r3, #3
 8009b24:	089b      	lsrs	r3, r3, #2
 8009b26:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8009b28:	2300      	movs	r3, #0
 8009b2a:	61bb      	str	r3, [r7, #24]
 8009b2c:	e00b      	b.n	8009b46 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009b2e:	697b      	ldr	r3, [r7, #20]
 8009b30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b34:	681a      	ldr	r2, [r3, #0]
 8009b36:	69fb      	ldr	r3, [r7, #28]
 8009b38:	601a      	str	r2, [r3, #0]
    pDest++;
 8009b3a:	69fb      	ldr	r3, [r7, #28]
 8009b3c:	3304      	adds	r3, #4
 8009b3e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8009b40:	69bb      	ldr	r3, [r7, #24]
 8009b42:	3301      	adds	r3, #1
 8009b44:	61bb      	str	r3, [r7, #24]
 8009b46:	69ba      	ldr	r2, [r7, #24]
 8009b48:	693b      	ldr	r3, [r7, #16]
 8009b4a:	429a      	cmp	r2, r3
 8009b4c:	d3ef      	bcc.n	8009b2e <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8009b4e:	69fb      	ldr	r3, [r7, #28]
}
 8009b50:	4618      	mov	r0, r3
 8009b52:	3724      	adds	r7, #36	; 0x24
 8009b54:	46bd      	mov	sp, r7
 8009b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5a:	4770      	bx	lr

08009b5c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009b5c:	b480      	push	{r7}
 8009b5e:	b085      	sub	sp, #20
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
 8009b64:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009b6a:	683b      	ldr	r3, [r7, #0]
 8009b6c:	781b      	ldrb	r3, [r3, #0]
 8009b6e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009b70:	683b      	ldr	r3, [r7, #0]
 8009b72:	785b      	ldrb	r3, [r3, #1]
 8009b74:	2b01      	cmp	r3, #1
 8009b76:	d12c      	bne.n	8009bd2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009b78:	68bb      	ldr	r3, [r7, #8]
 8009b7a:	015a      	lsls	r2, r3, #5
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	4413      	add	r3, r2
 8009b80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	db12      	blt.n	8009bb0 <USB_EPSetStall+0x54>
 8009b8a:	68bb      	ldr	r3, [r7, #8]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d00f      	beq.n	8009bb0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009b90:	68bb      	ldr	r3, [r7, #8]
 8009b92:	015a      	lsls	r2, r3, #5
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	4413      	add	r3, r2
 8009b98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	68ba      	ldr	r2, [r7, #8]
 8009ba0:	0151      	lsls	r1, r2, #5
 8009ba2:	68fa      	ldr	r2, [r7, #12]
 8009ba4:	440a      	add	r2, r1
 8009ba6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009baa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009bae:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009bb0:	68bb      	ldr	r3, [r7, #8]
 8009bb2:	015a      	lsls	r2, r3, #5
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	4413      	add	r3, r2
 8009bb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	68ba      	ldr	r2, [r7, #8]
 8009bc0:	0151      	lsls	r1, r2, #5
 8009bc2:	68fa      	ldr	r2, [r7, #12]
 8009bc4:	440a      	add	r2, r1
 8009bc6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009bca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009bce:	6013      	str	r3, [r2, #0]
 8009bd0:	e02b      	b.n	8009c2a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009bd2:	68bb      	ldr	r3, [r7, #8]
 8009bd4:	015a      	lsls	r2, r3, #5
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	4413      	add	r3, r2
 8009bda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	db12      	blt.n	8009c0a <USB_EPSetStall+0xae>
 8009be4:	68bb      	ldr	r3, [r7, #8]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d00f      	beq.n	8009c0a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009bea:	68bb      	ldr	r3, [r7, #8]
 8009bec:	015a      	lsls	r2, r3, #5
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	4413      	add	r3, r2
 8009bf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	68ba      	ldr	r2, [r7, #8]
 8009bfa:	0151      	lsls	r1, r2, #5
 8009bfc:	68fa      	ldr	r2, [r7, #12]
 8009bfe:	440a      	add	r2, r1
 8009c00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c04:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009c08:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009c0a:	68bb      	ldr	r3, [r7, #8]
 8009c0c:	015a      	lsls	r2, r3, #5
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	4413      	add	r3, r2
 8009c12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	68ba      	ldr	r2, [r7, #8]
 8009c1a:	0151      	lsls	r1, r2, #5
 8009c1c:	68fa      	ldr	r2, [r7, #12]
 8009c1e:	440a      	add	r2, r1
 8009c20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c24:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009c28:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009c2a:	2300      	movs	r3, #0
}
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	3714      	adds	r7, #20
 8009c30:	46bd      	mov	sp, r7
 8009c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c36:	4770      	bx	lr

08009c38 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009c38:	b480      	push	{r7}
 8009c3a:	b085      	sub	sp, #20
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
 8009c40:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009c46:	683b      	ldr	r3, [r7, #0]
 8009c48:	781b      	ldrb	r3, [r3, #0]
 8009c4a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009c4c:	683b      	ldr	r3, [r7, #0]
 8009c4e:	785b      	ldrb	r3, [r3, #1]
 8009c50:	2b01      	cmp	r3, #1
 8009c52:	d128      	bne.n	8009ca6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009c54:	68bb      	ldr	r3, [r7, #8]
 8009c56:	015a      	lsls	r2, r3, #5
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	4413      	add	r3, r2
 8009c5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	68ba      	ldr	r2, [r7, #8]
 8009c64:	0151      	lsls	r1, r2, #5
 8009c66:	68fa      	ldr	r2, [r7, #12]
 8009c68:	440a      	add	r2, r1
 8009c6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c6e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009c72:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009c74:	683b      	ldr	r3, [r7, #0]
 8009c76:	78db      	ldrb	r3, [r3, #3]
 8009c78:	2b03      	cmp	r3, #3
 8009c7a:	d003      	beq.n	8009c84 <USB_EPClearStall+0x4c>
 8009c7c:	683b      	ldr	r3, [r7, #0]
 8009c7e:	78db      	ldrb	r3, [r3, #3]
 8009c80:	2b02      	cmp	r3, #2
 8009c82:	d138      	bne.n	8009cf6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009c84:	68bb      	ldr	r3, [r7, #8]
 8009c86:	015a      	lsls	r2, r3, #5
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	4413      	add	r3, r2
 8009c8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	68ba      	ldr	r2, [r7, #8]
 8009c94:	0151      	lsls	r1, r2, #5
 8009c96:	68fa      	ldr	r2, [r7, #12]
 8009c98:	440a      	add	r2, r1
 8009c9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009ca2:	6013      	str	r3, [r2, #0]
 8009ca4:	e027      	b.n	8009cf6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009ca6:	68bb      	ldr	r3, [r7, #8]
 8009ca8:	015a      	lsls	r2, r3, #5
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	4413      	add	r3, r2
 8009cae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	68ba      	ldr	r2, [r7, #8]
 8009cb6:	0151      	lsls	r1, r2, #5
 8009cb8:	68fa      	ldr	r2, [r7, #12]
 8009cba:	440a      	add	r2, r1
 8009cbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009cc0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009cc4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009cc6:	683b      	ldr	r3, [r7, #0]
 8009cc8:	78db      	ldrb	r3, [r3, #3]
 8009cca:	2b03      	cmp	r3, #3
 8009ccc:	d003      	beq.n	8009cd6 <USB_EPClearStall+0x9e>
 8009cce:	683b      	ldr	r3, [r7, #0]
 8009cd0:	78db      	ldrb	r3, [r3, #3]
 8009cd2:	2b02      	cmp	r3, #2
 8009cd4:	d10f      	bne.n	8009cf6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009cd6:	68bb      	ldr	r3, [r7, #8]
 8009cd8:	015a      	lsls	r2, r3, #5
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	4413      	add	r3, r2
 8009cde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	68ba      	ldr	r2, [r7, #8]
 8009ce6:	0151      	lsls	r1, r2, #5
 8009ce8:	68fa      	ldr	r2, [r7, #12]
 8009cea:	440a      	add	r2, r1
 8009cec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009cf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009cf4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009cf6:	2300      	movs	r3, #0
}
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	3714      	adds	r7, #20
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d02:	4770      	bx	lr

08009d04 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009d04:	b480      	push	{r7}
 8009d06:	b085      	sub	sp, #20
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
 8009d0c:	460b      	mov	r3, r1
 8009d0e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	68fa      	ldr	r2, [r7, #12]
 8009d1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009d22:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009d26:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d2e:	681a      	ldr	r2, [r3, #0]
 8009d30:	78fb      	ldrb	r3, [r7, #3]
 8009d32:	011b      	lsls	r3, r3, #4
 8009d34:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8009d38:	68f9      	ldr	r1, [r7, #12]
 8009d3a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009d3e:	4313      	orrs	r3, r2
 8009d40:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009d42:	2300      	movs	r3, #0
}
 8009d44:	4618      	mov	r0, r3
 8009d46:	3714      	adds	r7, #20
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4e:	4770      	bx	lr

08009d50 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b084      	sub	sp, #16
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d62:	685b      	ldr	r3, [r3, #4]
 8009d64:	68fa      	ldr	r2, [r7, #12]
 8009d66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009d6a:	f023 0302 	bic.w	r3, r3, #2
 8009d6e:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8009d70:	2003      	movs	r0, #3
 8009d72:	f7f7 fc0d 	bl	8001590 <HAL_Delay>

  return HAL_OK;
 8009d76:	2300      	movs	r3, #0
}
 8009d78:	4618      	mov	r0, r3
 8009d7a:	3710      	adds	r7, #16
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	bd80      	pop	{r7, pc}

08009d80 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b084      	sub	sp, #16
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d92:	685b      	ldr	r3, [r3, #4]
 8009d94:	68fa      	ldr	r2, [r7, #12]
 8009d96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009d9a:	f043 0302 	orr.w	r3, r3, #2
 8009d9e:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8009da0:	2003      	movs	r0, #3
 8009da2:	f7f7 fbf5 	bl	8001590 <HAL_Delay>

  return HAL_OK;
 8009da6:	2300      	movs	r3, #0
}
 8009da8:	4618      	mov	r0, r3
 8009daa:	3710      	adds	r7, #16
 8009dac:	46bd      	mov	sp, r7
 8009dae:	bd80      	pop	{r7, pc}

08009db0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009db0:	b480      	push	{r7}
 8009db2:	b085      	sub	sp, #20
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	695b      	ldr	r3, [r3, #20]
 8009dbc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	699b      	ldr	r3, [r3, #24]
 8009dc2:	68fa      	ldr	r2, [r7, #12]
 8009dc4:	4013      	ands	r3, r2
 8009dc6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009dc8:	68fb      	ldr	r3, [r7, #12]
}
 8009dca:	4618      	mov	r0, r3
 8009dcc:	3714      	adds	r7, #20
 8009dce:	46bd      	mov	sp, r7
 8009dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd4:	4770      	bx	lr

08009dd6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009dd6:	b480      	push	{r7}
 8009dd8:	b085      	sub	sp, #20
 8009dda:	af00      	add	r7, sp, #0
 8009ddc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009de8:	699b      	ldr	r3, [r3, #24]
 8009dea:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009df2:	69db      	ldr	r3, [r3, #28]
 8009df4:	68ba      	ldr	r2, [r7, #8]
 8009df6:	4013      	ands	r3, r2
 8009df8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009dfa:	68bb      	ldr	r3, [r7, #8]
 8009dfc:	0c1b      	lsrs	r3, r3, #16
}
 8009dfe:	4618      	mov	r0, r3
 8009e00:	3714      	adds	r7, #20
 8009e02:	46bd      	mov	sp, r7
 8009e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e08:	4770      	bx	lr

08009e0a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009e0a:	b480      	push	{r7}
 8009e0c:	b085      	sub	sp, #20
 8009e0e:	af00      	add	r7, sp, #0
 8009e10:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e1c:	699b      	ldr	r3, [r3, #24]
 8009e1e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e26:	69db      	ldr	r3, [r3, #28]
 8009e28:	68ba      	ldr	r2, [r7, #8]
 8009e2a:	4013      	ands	r3, r2
 8009e2c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009e2e:	68bb      	ldr	r3, [r7, #8]
 8009e30:	b29b      	uxth	r3, r3
}
 8009e32:	4618      	mov	r0, r3
 8009e34:	3714      	adds	r7, #20
 8009e36:	46bd      	mov	sp, r7
 8009e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3c:	4770      	bx	lr

08009e3e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009e3e:	b480      	push	{r7}
 8009e40:	b085      	sub	sp, #20
 8009e42:	af00      	add	r7, sp, #0
 8009e44:	6078      	str	r0, [r7, #4]
 8009e46:	460b      	mov	r3, r1
 8009e48:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009e4e:	78fb      	ldrb	r3, [r7, #3]
 8009e50:	015a      	lsls	r2, r3, #5
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	4413      	add	r3, r2
 8009e56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e5a:	689b      	ldr	r3, [r3, #8]
 8009e5c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e64:	695b      	ldr	r3, [r3, #20]
 8009e66:	68ba      	ldr	r2, [r7, #8]
 8009e68:	4013      	ands	r3, r2
 8009e6a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009e6c:	68bb      	ldr	r3, [r7, #8]
}
 8009e6e:	4618      	mov	r0, r3
 8009e70:	3714      	adds	r7, #20
 8009e72:	46bd      	mov	sp, r7
 8009e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e78:	4770      	bx	lr

08009e7a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009e7a:	b480      	push	{r7}
 8009e7c:	b087      	sub	sp, #28
 8009e7e:	af00      	add	r7, sp, #0
 8009e80:	6078      	str	r0, [r7, #4]
 8009e82:	460b      	mov	r3, r1
 8009e84:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009e8a:	697b      	ldr	r3, [r7, #20]
 8009e8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e90:	691b      	ldr	r3, [r3, #16]
 8009e92:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009e94:	697b      	ldr	r3, [r7, #20]
 8009e96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e9c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009e9e:	78fb      	ldrb	r3, [r7, #3]
 8009ea0:	f003 030f 	and.w	r3, r3, #15
 8009ea4:	68fa      	ldr	r2, [r7, #12]
 8009ea6:	fa22 f303 	lsr.w	r3, r2, r3
 8009eaa:	01db      	lsls	r3, r3, #7
 8009eac:	b2db      	uxtb	r3, r3
 8009eae:	693a      	ldr	r2, [r7, #16]
 8009eb0:	4313      	orrs	r3, r2
 8009eb2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009eb4:	78fb      	ldrb	r3, [r7, #3]
 8009eb6:	015a      	lsls	r2, r3, #5
 8009eb8:	697b      	ldr	r3, [r7, #20]
 8009eba:	4413      	add	r3, r2
 8009ebc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ec0:	689b      	ldr	r3, [r3, #8]
 8009ec2:	693a      	ldr	r2, [r7, #16]
 8009ec4:	4013      	ands	r3, r2
 8009ec6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009ec8:	68bb      	ldr	r3, [r7, #8]
}
 8009eca:	4618      	mov	r0, r3
 8009ecc:	371c      	adds	r7, #28
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed4:	4770      	bx	lr

08009ed6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009ed6:	b480      	push	{r7}
 8009ed8:	b083      	sub	sp, #12
 8009eda:	af00      	add	r7, sp, #0
 8009edc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	695b      	ldr	r3, [r3, #20]
 8009ee2:	f003 0301 	and.w	r3, r3, #1
}
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	370c      	adds	r7, #12
 8009eea:	46bd      	mov	sp, r7
 8009eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef0:	4770      	bx	lr
	...

08009ef4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8009ef4:	b480      	push	{r7}
 8009ef6:	b085      	sub	sp, #20
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f06:	681a      	ldr	r2, [r3, #0]
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f0e:	4619      	mov	r1, r3
 8009f10:	4b09      	ldr	r3, [pc, #36]	; (8009f38 <USB_ActivateSetup+0x44>)
 8009f12:	4013      	ands	r3, r2
 8009f14:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f1c:	685b      	ldr	r3, [r3, #4]
 8009f1e:	68fa      	ldr	r2, [r7, #12]
 8009f20:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009f24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009f28:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009f2a:	2300      	movs	r3, #0
}
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	3714      	adds	r7, #20
 8009f30:	46bd      	mov	sp, r7
 8009f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f36:	4770      	bx	lr
 8009f38:	fffff800 	.word	0xfffff800

08009f3c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8009f3c:	b480      	push	{r7}
 8009f3e:	b087      	sub	sp, #28
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	60f8      	str	r0, [r7, #12]
 8009f44:	460b      	mov	r3, r1
 8009f46:	607a      	str	r2, [r7, #4]
 8009f48:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	333c      	adds	r3, #60	; 0x3c
 8009f52:	3304      	adds	r3, #4
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009f58:	693b      	ldr	r3, [r7, #16]
 8009f5a:	4a26      	ldr	r2, [pc, #152]	; (8009ff4 <USB_EP0_OutStart+0xb8>)
 8009f5c:	4293      	cmp	r3, r2
 8009f5e:	d90a      	bls.n	8009f76 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009f60:	697b      	ldr	r3, [r7, #20]
 8009f62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009f6c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009f70:	d101      	bne.n	8009f76 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009f72:	2300      	movs	r3, #0
 8009f74:	e037      	b.n	8009fe6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009f76:	697b      	ldr	r3, [r7, #20]
 8009f78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f7c:	461a      	mov	r2, r3
 8009f7e:	2300      	movs	r3, #0
 8009f80:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009f82:	697b      	ldr	r3, [r7, #20]
 8009f84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f88:	691b      	ldr	r3, [r3, #16]
 8009f8a:	697a      	ldr	r2, [r7, #20]
 8009f8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f90:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009f94:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009f96:	697b      	ldr	r3, [r7, #20]
 8009f98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f9c:	691b      	ldr	r3, [r3, #16]
 8009f9e:	697a      	ldr	r2, [r7, #20]
 8009fa0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009fa4:	f043 0318 	orr.w	r3, r3, #24
 8009fa8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009faa:	697b      	ldr	r3, [r7, #20]
 8009fac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fb0:	691b      	ldr	r3, [r3, #16]
 8009fb2:	697a      	ldr	r2, [r7, #20]
 8009fb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009fb8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8009fbc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009fbe:	7afb      	ldrb	r3, [r7, #11]
 8009fc0:	2b01      	cmp	r3, #1
 8009fc2:	d10f      	bne.n	8009fe4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009fc4:	697b      	ldr	r3, [r7, #20]
 8009fc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fca:	461a      	mov	r2, r3
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009fd0:	697b      	ldr	r3, [r7, #20]
 8009fd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	697a      	ldr	r2, [r7, #20]
 8009fda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009fde:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8009fe2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009fe4:	2300      	movs	r3, #0
}
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	371c      	adds	r7, #28
 8009fea:	46bd      	mov	sp, r7
 8009fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff0:	4770      	bx	lr
 8009ff2:	bf00      	nop
 8009ff4:	4f54300a 	.word	0x4f54300a

08009ff8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009ff8:	b480      	push	{r7}
 8009ffa:	b085      	sub	sp, #20
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800a000:	2300      	movs	r3, #0
 800a002:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	3301      	adds	r3, #1
 800a008:	60fb      	str	r3, [r7, #12]
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	4a13      	ldr	r2, [pc, #76]	; (800a05c <USB_CoreReset+0x64>)
 800a00e:	4293      	cmp	r3, r2
 800a010:	d901      	bls.n	800a016 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a012:	2303      	movs	r3, #3
 800a014:	e01b      	b.n	800a04e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	691b      	ldr	r3, [r3, #16]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	daf2      	bge.n	800a004 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a01e:	2300      	movs	r3, #0
 800a020:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	691b      	ldr	r3, [r3, #16]
 800a026:	f043 0201 	orr.w	r2, r3, #1
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	3301      	adds	r3, #1
 800a032:	60fb      	str	r3, [r7, #12]
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	4a09      	ldr	r2, [pc, #36]	; (800a05c <USB_CoreReset+0x64>)
 800a038:	4293      	cmp	r3, r2
 800a03a:	d901      	bls.n	800a040 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a03c:	2303      	movs	r3, #3
 800a03e:	e006      	b.n	800a04e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	691b      	ldr	r3, [r3, #16]
 800a044:	f003 0301 	and.w	r3, r3, #1
 800a048:	2b01      	cmp	r3, #1
 800a04a:	d0f0      	beq.n	800a02e <USB_CoreReset+0x36>

  return HAL_OK;
 800a04c:	2300      	movs	r3, #0
}
 800a04e:	4618      	mov	r0, r3
 800a050:	3714      	adds	r7, #20
 800a052:	46bd      	mov	sp, r7
 800a054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a058:	4770      	bx	lr
 800a05a:	bf00      	nop
 800a05c:	00030d40 	.word	0x00030d40

0800a060 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800a060:	b580      	push	{r7, lr}
 800a062:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800a064:	4904      	ldr	r1, [pc, #16]	; (800a078 <MX_FATFS_Init+0x18>)
 800a066:	4805      	ldr	r0, [pc, #20]	; (800a07c <MX_FATFS_Init+0x1c>)
 800a068:	f007 fb10 	bl	801168c <FATFS_LinkDriver>
 800a06c:	4603      	mov	r3, r0
 800a06e:	461a      	mov	r2, r3
 800a070:	4b03      	ldr	r3, [pc, #12]	; (800a080 <MX_FATFS_Init+0x20>)
 800a072:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800a074:	bf00      	nop
 800a076:	bd80      	pop	{r7, pc}
 800a078:	2000736c 	.word	0x2000736c
 800a07c:	080160fc 	.word	0x080160fc
 800a080:	20007368 	.word	0x20007368

0800a084 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800a084:	b480      	push	{r7}
 800a086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800a088:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 800a08a:	4618      	mov	r0, r3
 800a08c:	46bd      	mov	sp, r7
 800a08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a092:	4770      	bx	lr

0800a094 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800a094:	b580      	push	{r7, lr}
 800a096:	b082      	sub	sp, #8
 800a098:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800a09a:	2300      	movs	r3, #0
 800a09c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800a09e:	f000 f896 	bl	800a1ce <BSP_SD_IsDetected>
 800a0a2:	4603      	mov	r3, r0
 800a0a4:	2b01      	cmp	r3, #1
 800a0a6:	d001      	beq.n	800a0ac <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800a0a8:	2302      	movs	r3, #2
 800a0aa:	e012      	b.n	800a0d2 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800a0ac:	480b      	ldr	r0, [pc, #44]	; (800a0dc <BSP_SD_Init+0x48>)
 800a0ae:	f7fb fa09 	bl	80054c4 <HAL_SD_Init>
 800a0b2:	4603      	mov	r3, r0
 800a0b4:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800a0b6:	79fb      	ldrb	r3, [r7, #7]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d109      	bne.n	800a0d0 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800a0bc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a0c0:	4806      	ldr	r0, [pc, #24]	; (800a0dc <BSP_SD_Init+0x48>)
 800a0c2:	f7fc fb59 	bl	8006778 <HAL_SD_ConfigWideBusOperation>
 800a0c6:	4603      	mov	r3, r0
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d001      	beq.n	800a0d0 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800a0cc:	2301      	movs	r3, #1
 800a0ce:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800a0d0:	79fb      	ldrb	r3, [r7, #7]
}
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	3708      	adds	r7, #8
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	bd80      	pop	{r7, pc}
 800a0da:	bf00      	nop
 800a0dc:	20004c8c 	.word	0x20004c8c

0800a0e0 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800a0e0:	b580      	push	{r7, lr}
 800a0e2:	b086      	sub	sp, #24
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	60f8      	str	r0, [r7, #12]
 800a0e8:	60b9      	str	r1, [r7, #8]
 800a0ea:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	68ba      	ldr	r2, [r7, #8]
 800a0f4:	68f9      	ldr	r1, [r7, #12]
 800a0f6:	4806      	ldr	r0, [pc, #24]	; (800a110 <BSP_SD_ReadBlocks_DMA+0x30>)
 800a0f8:	f7fb fe14 	bl	8005d24 <HAL_SD_ReadBlocks_DMA>
 800a0fc:	4603      	mov	r3, r0
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d001      	beq.n	800a106 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800a102:	2301      	movs	r3, #1
 800a104:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800a106:	7dfb      	ldrb	r3, [r7, #23]
}
 800a108:	4618      	mov	r0, r3
 800a10a:	3718      	adds	r7, #24
 800a10c:	46bd      	mov	sp, r7
 800a10e:	bd80      	pop	{r7, pc}
 800a110:	20004c8c 	.word	0x20004c8c

0800a114 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800a114:	b580      	push	{r7, lr}
 800a116:	b086      	sub	sp, #24
 800a118:	af00      	add	r7, sp, #0
 800a11a:	60f8      	str	r0, [r7, #12]
 800a11c:	60b9      	str	r1, [r7, #8]
 800a11e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800a120:	2300      	movs	r3, #0
 800a122:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	68ba      	ldr	r2, [r7, #8]
 800a128:	68f9      	ldr	r1, [r7, #12]
 800a12a:	4806      	ldr	r0, [pc, #24]	; (800a144 <BSP_SD_WriteBlocks_DMA+0x30>)
 800a12c:	f7fb fee6 	bl	8005efc <HAL_SD_WriteBlocks_DMA>
 800a130:	4603      	mov	r3, r0
 800a132:	2b00      	cmp	r3, #0
 800a134:	d001      	beq.n	800a13a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800a136:	2301      	movs	r3, #1
 800a138:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800a13a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a13c:	4618      	mov	r0, r3
 800a13e:	3718      	adds	r7, #24
 800a140:	46bd      	mov	sp, r7
 800a142:	bd80      	pop	{r7, pc}
 800a144:	20004c8c 	.word	0x20004c8c

0800a148 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800a148:	b580      	push	{r7, lr}
 800a14a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800a14c:	4805      	ldr	r0, [pc, #20]	; (800a164 <BSP_SD_GetCardState+0x1c>)
 800a14e:	f7fc fb8f 	bl	8006870 <HAL_SD_GetCardState>
 800a152:	4603      	mov	r3, r0
 800a154:	2b04      	cmp	r3, #4
 800a156:	bf14      	ite	ne
 800a158:	2301      	movne	r3, #1
 800a15a:	2300      	moveq	r3, #0
 800a15c:	b2db      	uxtb	r3, r3
}
 800a15e:	4618      	mov	r0, r3
 800a160:	bd80      	pop	{r7, pc}
 800a162:	bf00      	nop
 800a164:	20004c8c 	.word	0x20004c8c

0800a168 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800a168:	b580      	push	{r7, lr}
 800a16a:	b082      	sub	sp, #8
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800a170:	6879      	ldr	r1, [r7, #4]
 800a172:	4803      	ldr	r0, [pc, #12]	; (800a180 <BSP_SD_GetCardInfo+0x18>)
 800a174:	f7fc fad4 	bl	8006720 <HAL_SD_GetCardInfo>
}
 800a178:	bf00      	nop
 800a17a:	3708      	adds	r7, #8
 800a17c:	46bd      	mov	sp, r7
 800a17e:	bd80      	pop	{r7, pc}
 800a180:	20004c8c 	.word	0x20004c8c

0800a184 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800a184:	b580      	push	{r7, lr}
 800a186:	b082      	sub	sp, #8
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800a18c:	f000 f818 	bl	800a1c0 <BSP_SD_AbortCallback>
}
 800a190:	bf00      	nop
 800a192:	3708      	adds	r7, #8
 800a194:	46bd      	mov	sp, r7
 800a196:	bd80      	pop	{r7, pc}

0800a198 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800a198:	b580      	push	{r7, lr}
 800a19a:	b082      	sub	sp, #8
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800a1a0:	f000 f9b4 	bl	800a50c <BSP_SD_WriteCpltCallback>
}
 800a1a4:	bf00      	nop
 800a1a6:	3708      	adds	r7, #8
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	bd80      	pop	{r7, pc}

0800a1ac <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b082      	sub	sp, #8
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800a1b4:	f000 f9bc 	bl	800a530 <BSP_SD_ReadCpltCallback>
}
 800a1b8:	bf00      	nop
 800a1ba:	3708      	adds	r7, #8
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	bd80      	pop	{r7, pc}

0800a1c0 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800a1c0:	b480      	push	{r7}
 800a1c2:	af00      	add	r7, sp, #0

}
 800a1c4:	bf00      	nop
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1cc:	4770      	bx	lr

0800a1ce <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800a1ce:	b580      	push	{r7, lr}
 800a1d0:	b082      	sub	sp, #8
 800a1d2:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800a1d4:	2301      	movs	r3, #1
 800a1d6:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 800a1d8:	f000 f80c 	bl	800a1f4 <BSP_PlatformIsDetected>
 800a1dc:	4603      	mov	r3, r0
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d101      	bne.n	800a1e6 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800a1e6:	79fb      	ldrb	r3, [r7, #7]
 800a1e8:	b2db      	uxtb	r3, r3
}
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	3708      	adds	r7, #8
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	bd80      	pop	{r7, pc}
	...

0800a1f4 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b082      	sub	sp, #8
 800a1f8:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800a1fa:	2301      	movs	r3, #1
 800a1fc:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800a1fe:	2104      	movs	r1, #4
 800a200:	4806      	ldr	r0, [pc, #24]	; (800a21c <BSP_PlatformIsDetected+0x28>)
 800a202:	f7f8 fdcb 	bl	8002d9c <HAL_GPIO_ReadPin>
 800a206:	4603      	mov	r3, r0
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d001      	beq.n	800a210 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800a20c:	2300      	movs	r3, #0
 800a20e:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 800a210:	79fb      	ldrb	r3, [r7, #7]
}  
 800a212:	4618      	mov	r0, r3
 800a214:	3708      	adds	r7, #8
 800a216:	46bd      	mov	sp, r7
 800a218:	bd80      	pop	{r7, pc}
 800a21a:	bf00      	nop
 800a21c:	40021800 	.word	0x40021800

0800a220 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800a220:	b580      	push	{r7, lr}
 800a222:	b084      	sub	sp, #16
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripherial is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 800a228:	f007 fbf8 	bl	8011a1c <osKernelGetTickCount>
 800a22c:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 800a22e:	e006      	b.n	800a23e <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a230:	f7ff ff8a 	bl	800a148 <BSP_SD_GetCardState>
 800a234:	4603      	mov	r3, r0
 800a236:	2b00      	cmp	r3, #0
 800a238:	d101      	bne.n	800a23e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800a23a:	2300      	movs	r3, #0
 800a23c:	e009      	b.n	800a252 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 800a23e:	f007 fbed 	bl	8011a1c <osKernelGetTickCount>
 800a242:	4602      	mov	r2, r0
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	1ad3      	subs	r3, r2, r3
 800a248:	687a      	ldr	r2, [r7, #4]
 800a24a:	429a      	cmp	r2, r3
 800a24c:	d8f0      	bhi.n	800a230 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800a24e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a252:	4618      	mov	r0, r3
 800a254:	3710      	adds	r7, #16
 800a256:	46bd      	mov	sp, r7
 800a258:	bd80      	pop	{r7, pc}
	...

0800a25c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b082      	sub	sp, #8
 800a260:	af00      	add	r7, sp, #0
 800a262:	4603      	mov	r3, r0
 800a264:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800a266:	4b0b      	ldr	r3, [pc, #44]	; (800a294 <SD_CheckStatus+0x38>)
 800a268:	2201      	movs	r2, #1
 800a26a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a26c:	f7ff ff6c 	bl	800a148 <BSP_SD_GetCardState>
 800a270:	4603      	mov	r3, r0
 800a272:	2b00      	cmp	r3, #0
 800a274:	d107      	bne.n	800a286 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800a276:	4b07      	ldr	r3, [pc, #28]	; (800a294 <SD_CheckStatus+0x38>)
 800a278:	781b      	ldrb	r3, [r3, #0]
 800a27a:	b2db      	uxtb	r3, r3
 800a27c:	f023 0301 	bic.w	r3, r3, #1
 800a280:	b2da      	uxtb	r2, r3
 800a282:	4b04      	ldr	r3, [pc, #16]	; (800a294 <SD_CheckStatus+0x38>)
 800a284:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800a286:	4b03      	ldr	r3, [pc, #12]	; (800a294 <SD_CheckStatus+0x38>)
 800a288:	781b      	ldrb	r3, [r3, #0]
 800a28a:	b2db      	uxtb	r3, r3
}
 800a28c:	4618      	mov	r0, r3
 800a28e:	3708      	adds	r7, #8
 800a290:	46bd      	mov	sp, r7
 800a292:	bd80      	pop	{r7, pc}
 800a294:	20000019 	.word	0x20000019

0800a298 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800a298:	b580      	push	{r7, lr}
 800a29a:	b082      	sub	sp, #8
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	4603      	mov	r3, r0
 800a2a0:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT; 
 800a2a2:	4b1c      	ldr	r3, [pc, #112]	; (800a314 <SD_initialize+0x7c>)
 800a2a4:	2201      	movs	r2, #1
 800a2a6:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 800a2a8:	f007 fb60 	bl	801196c <osKernelGetState>
 800a2ac:	4603      	mov	r3, r0
 800a2ae:	2b02      	cmp	r3, #2
 800a2b0:	d129      	bne.n	800a306 <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800a2b2:	f7ff feef 	bl	800a094 <BSP_SD_Init>
 800a2b6:	4603      	mov	r3, r0
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d107      	bne.n	800a2cc <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800a2bc:	79fb      	ldrb	r3, [r7, #7]
 800a2be:	4618      	mov	r0, r3
 800a2c0:	f7ff ffcc 	bl	800a25c <SD_CheckStatus>
 800a2c4:	4603      	mov	r3, r0
 800a2c6:	461a      	mov	r2, r3
 800a2c8:	4b12      	ldr	r3, [pc, #72]	; (800a314 <SD_initialize+0x7c>)
 800a2ca:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800a2cc:	4b11      	ldr	r3, [pc, #68]	; (800a314 <SD_initialize+0x7c>)
 800a2ce:	781b      	ldrb	r3, [r3, #0]
 800a2d0:	b2db      	uxtb	r3, r3
 800a2d2:	2b01      	cmp	r3, #1
 800a2d4:	d017      	beq.n	800a306 <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 800a2d6:	4b10      	ldr	r3, [pc, #64]	; (800a318 <SD_initialize+0x80>)
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d107      	bne.n	800a2ee <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 800a2de:	2200      	movs	r2, #0
 800a2e0:	2102      	movs	r1, #2
 800a2e2:	200a      	movs	r0, #10
 800a2e4:	f007 fe28 	bl	8011f38 <osMessageQueueNew>
 800a2e8:	4602      	mov	r2, r0
 800a2ea:	4b0b      	ldr	r3, [pc, #44]	; (800a318 <SD_initialize+0x80>)
 800a2ec:	601a      	str	r2, [r3, #0]
#endif
      }

      if (SDQueueID == NULL)
 800a2ee:	4b0a      	ldr	r3, [pc, #40]	; (800a318 <SD_initialize+0x80>)
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d107      	bne.n	800a306 <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 800a2f6:	4b07      	ldr	r3, [pc, #28]	; (800a314 <SD_initialize+0x7c>)
 800a2f8:	781b      	ldrb	r3, [r3, #0]
 800a2fa:	b2db      	uxtb	r3, r3
 800a2fc:	f043 0301 	orr.w	r3, r3, #1
 800a300:	b2da      	uxtb	r2, r3
 800a302:	4b04      	ldr	r3, [pc, #16]	; (800a314 <SD_initialize+0x7c>)
 800a304:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800a306:	4b03      	ldr	r3, [pc, #12]	; (800a314 <SD_initialize+0x7c>)
 800a308:	781b      	ldrb	r3, [r3, #0]
 800a30a:	b2db      	uxtb	r3, r3
}
 800a30c:	4618      	mov	r0, r3
 800a30e:	3708      	adds	r7, #8
 800a310:	46bd      	mov	sp, r7
 800a312:	bd80      	pop	{r7, pc}
 800a314:	20000019 	.word	0x20000019
 800a318:	20000214 	.word	0x20000214

0800a31c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800a31c:	b580      	push	{r7, lr}
 800a31e:	b082      	sub	sp, #8
 800a320:	af00      	add	r7, sp, #0
 800a322:	4603      	mov	r3, r0
 800a324:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800a326:	79fb      	ldrb	r3, [r7, #7]
 800a328:	4618      	mov	r0, r3
 800a32a:	f7ff ff97 	bl	800a25c <SD_CheckStatus>
 800a32e:	4603      	mov	r3, r0
}
 800a330:	4618      	mov	r0, r3
 800a332:	3708      	adds	r7, #8
 800a334:	46bd      	mov	sp, r7
 800a336:	bd80      	pop	{r7, pc}

0800a338 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
   
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800a338:	b580      	push	{r7, lr}
 800a33a:	b088      	sub	sp, #32
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	60b9      	str	r1, [r7, #8]
 800a340:	607a      	str	r2, [r7, #4]
 800a342:	603b      	str	r3, [r7, #0]
 800a344:	4603      	mov	r3, r0
 800a346:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a348:	2301      	movs	r3, #1
 800a34a:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800a34c:	f247 5030 	movw	r0, #30000	; 0x7530
 800a350:	f7ff ff66 	bl	800a220 <SD_CheckStatusWithTimeout>
 800a354:	4603      	mov	r3, r0
 800a356:	2b00      	cmp	r3, #0
 800a358:	da01      	bge.n	800a35e <SD_read+0x26>
  {
    return res;
 800a35a:	7ffb      	ldrb	r3, [r7, #31]
 800a35c:	e02f      	b.n	800a3be <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800a35e:	683a      	ldr	r2, [r7, #0]
 800a360:	6879      	ldr	r1, [r7, #4]
 800a362:	68b8      	ldr	r0, [r7, #8]
 800a364:	f7ff febc 	bl	800a0e0 <BSP_SD_ReadBlocks_DMA>
 800a368:	4603      	mov	r3, r0
 800a36a:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 800a36c:	7fbb      	ldrb	r3, [r7, #30]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d124      	bne.n	800a3bc <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800a372:	4b15      	ldr	r3, [pc, #84]	; (800a3c8 <SD_read+0x90>)
 800a374:	6818      	ldr	r0, [r3, #0]
 800a376:	f107 0112 	add.w	r1, r7, #18
 800a37a:	f247 5330 	movw	r3, #30000	; 0x7530
 800a37e:	2200      	movs	r2, #0
 800a380:	f007 fed4 	bl	801212c <osMessageQueueGet>
 800a384:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 800a386:	69bb      	ldr	r3, [r7, #24]
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d117      	bne.n	800a3bc <SD_read+0x84>
 800a38c:	8a7b      	ldrh	r3, [r7, #18]
 800a38e:	2b01      	cmp	r3, #1
 800a390:	d114      	bne.n	800a3bc <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 800a392:	f007 fb43 	bl	8011a1c <osKernelGetTickCount>
 800a396:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800a398:	e007      	b.n	800a3aa <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a39a:	f7ff fed5 	bl	800a148 <BSP_SD_GetCardState>
 800a39e:	4603      	mov	r3, r0
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d102      	bne.n	800a3aa <SD_read+0x72>
              {
                res = RES_OK;
 800a3a4:	2300      	movs	r3, #0
 800a3a6:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800a3a8:	e008      	b.n	800a3bc <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800a3aa:	f007 fb37 	bl	8011a1c <osKernelGetTickCount>
 800a3ae:	4602      	mov	r2, r0
 800a3b0:	697b      	ldr	r3, [r7, #20]
 800a3b2:	1ad3      	subs	r3, r2, r3
 800a3b4:	f247 522f 	movw	r2, #29999	; 0x752f
 800a3b8:	4293      	cmp	r3, r2
 800a3ba:	d9ee      	bls.n	800a39a <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800a3bc:	7ffb      	ldrb	r3, [r7, #31]
}
 800a3be:	4618      	mov	r0, r3
 800a3c0:	3720      	adds	r7, #32
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	bd80      	pop	{r7, pc}
 800a3c6:	bf00      	nop
 800a3c8:	20000214 	.word	0x20000214

0800a3cc <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
   
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	b088      	sub	sp, #32
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	60b9      	str	r1, [r7, #8]
 800a3d4:	607a      	str	r2, [r7, #4]
 800a3d6:	603b      	str	r3, [r7, #0]
 800a3d8:	4603      	mov	r3, r0
 800a3da:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a3dc:	2301      	movs	r3, #1
 800a3de:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800a3e0:	f247 5030 	movw	r0, #30000	; 0x7530
 800a3e4:	f7ff ff1c 	bl	800a220 <SD_CheckStatusWithTimeout>
 800a3e8:	4603      	mov	r3, r0
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	da01      	bge.n	800a3f2 <SD_write+0x26>
  {
    return res;
 800a3ee:	7ffb      	ldrb	r3, [r7, #31]
 800a3f0:	e02d      	b.n	800a44e <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800a3f2:	683a      	ldr	r2, [r7, #0]
 800a3f4:	6879      	ldr	r1, [r7, #4]
 800a3f6:	68b8      	ldr	r0, [r7, #8]
 800a3f8:	f7ff fe8c 	bl	800a114 <BSP_SD_WriteBlocks_DMA>
 800a3fc:	4603      	mov	r3, r0
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d124      	bne.n	800a44c <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800a402:	4b15      	ldr	r3, [pc, #84]	; (800a458 <SD_write+0x8c>)
 800a404:	6818      	ldr	r0, [r3, #0]
 800a406:	f107 0112 	add.w	r1, r7, #18
 800a40a:	f247 5330 	movw	r3, #30000	; 0x7530
 800a40e:	2200      	movs	r2, #0
 800a410:	f007 fe8c 	bl	801212c <osMessageQueueGet>
 800a414:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 800a416:	69bb      	ldr	r3, [r7, #24]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d117      	bne.n	800a44c <SD_write+0x80>
 800a41c:	8a7b      	ldrh	r3, [r7, #18]
 800a41e:	2b02      	cmp	r3, #2
 800a420:	d114      	bne.n	800a44c <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 800a422:	f007 fafb 	bl	8011a1c <osKernelGetTickCount>
 800a426:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800a428:	e007      	b.n	800a43a <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a42a:	f7ff fe8d 	bl	800a148 <BSP_SD_GetCardState>
 800a42e:	4603      	mov	r3, r0
 800a430:	2b00      	cmp	r3, #0
 800a432:	d102      	bne.n	800a43a <SD_write+0x6e>
          {
            res = RES_OK;
 800a434:	2300      	movs	r3, #0
 800a436:	77fb      	strb	r3, [r7, #31]
            break;
 800a438:	e008      	b.n	800a44c <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800a43a:	f007 faef 	bl	8011a1c <osKernelGetTickCount>
 800a43e:	4602      	mov	r2, r0
 800a440:	697b      	ldr	r3, [r7, #20]
 800a442:	1ad3      	subs	r3, r2, r3
 800a444:	f247 522f 	movw	r2, #29999	; 0x752f
 800a448:	4293      	cmp	r3, r2
 800a44a:	d9ee      	bls.n	800a42a <SD_write+0x5e>
    }

  }
#endif

  return res;
 800a44c:	7ffb      	ldrb	r3, [r7, #31]
}
 800a44e:	4618      	mov	r0, r3
 800a450:	3720      	adds	r7, #32
 800a452:	46bd      	mov	sp, r7
 800a454:	bd80      	pop	{r7, pc}
 800a456:	bf00      	nop
 800a458:	20000214 	.word	0x20000214

0800a45c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b08c      	sub	sp, #48	; 0x30
 800a460:	af00      	add	r7, sp, #0
 800a462:	4603      	mov	r3, r0
 800a464:	603a      	str	r2, [r7, #0]
 800a466:	71fb      	strb	r3, [r7, #7]
 800a468:	460b      	mov	r3, r1
 800a46a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800a46c:	2301      	movs	r3, #1
 800a46e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800a472:	4b25      	ldr	r3, [pc, #148]	; (800a508 <SD_ioctl+0xac>)
 800a474:	781b      	ldrb	r3, [r3, #0]
 800a476:	b2db      	uxtb	r3, r3
 800a478:	f003 0301 	and.w	r3, r3, #1
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d001      	beq.n	800a484 <SD_ioctl+0x28>
 800a480:	2303      	movs	r3, #3
 800a482:	e03c      	b.n	800a4fe <SD_ioctl+0xa2>

  switch (cmd)
 800a484:	79bb      	ldrb	r3, [r7, #6]
 800a486:	2b03      	cmp	r3, #3
 800a488:	d834      	bhi.n	800a4f4 <SD_ioctl+0x98>
 800a48a:	a201      	add	r2, pc, #4	; (adr r2, 800a490 <SD_ioctl+0x34>)
 800a48c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a490:	0800a4a1 	.word	0x0800a4a1
 800a494:	0800a4a9 	.word	0x0800a4a9
 800a498:	0800a4c1 	.word	0x0800a4c1
 800a49c:	0800a4db 	.word	0x0800a4db
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a4a6:	e028      	b.n	800a4fa <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800a4a8:	f107 030c 	add.w	r3, r7, #12
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	f7ff fe5b 	bl	800a168 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800a4b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a4b4:	683b      	ldr	r3, [r7, #0]
 800a4b6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a4be:	e01c      	b.n	800a4fa <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a4c0:	f107 030c 	add.w	r3, r7, #12
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	f7ff fe4f 	bl	800a168 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800a4ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4cc:	b29a      	uxth	r2, r3
 800a4ce:	683b      	ldr	r3, [r7, #0]
 800a4d0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a4d8:	e00f      	b.n	800a4fa <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a4da:	f107 030c 	add.w	r3, r7, #12
 800a4de:	4618      	mov	r0, r3
 800a4e0:	f7ff fe42 	bl	800a168 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800a4e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4e6:	0a5a      	lsrs	r2, r3, #9
 800a4e8:	683b      	ldr	r3, [r7, #0]
 800a4ea:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a4f2:	e002      	b.n	800a4fa <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800a4f4:	2304      	movs	r3, #4
 800a4f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800a4fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a4fe:	4618      	mov	r0, r3
 800a500:	3730      	adds	r7, #48	; 0x30
 800a502:	46bd      	mov	sp, r7
 800a504:	bd80      	pop	{r7, pc}
 800a506:	bf00      	nop
 800a508:	20000019 	.word	0x20000019

0800a50c <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b082      	sub	sp, #8
 800a510:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
#else
   const uint16_t msg = WRITE_CPLT_MSG;
 800a512:	2302      	movs	r3, #2
 800a514:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800a516:	4b05      	ldr	r3, [pc, #20]	; (800a52c <BSP_SD_WriteCpltCallback+0x20>)
 800a518:	6818      	ldr	r0, [r3, #0]
 800a51a:	1db9      	adds	r1, r7, #6
 800a51c:	2300      	movs	r3, #0
 800a51e:	2200      	movs	r2, #0
 800a520:	f007 fd90 	bl	8012044 <osMessageQueuePut>
#endif
}
 800a524:	bf00      	nop
 800a526:	3708      	adds	r7, #8
 800a528:	46bd      	mov	sp, r7
 800a52a:	bd80      	pop	{r7, pc}
 800a52c:	20000214 	.word	0x20000214

0800a530 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800a530:	b580      	push	{r7, lr}
 800a532:	b082      	sub	sp, #8
 800a534:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 800a536:	2301      	movs	r3, #1
 800a538:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800a53a:	4b05      	ldr	r3, [pc, #20]	; (800a550 <BSP_SD_ReadCpltCallback+0x20>)
 800a53c:	6818      	ldr	r0, [r3, #0]
 800a53e:	1db9      	adds	r1, r7, #6
 800a540:	2300      	movs	r3, #0
 800a542:	2200      	movs	r2, #0
 800a544:	f007 fd7e 	bl	8012044 <osMessageQueuePut>
#endif
}
 800a548:	bf00      	nop
 800a54a:	3708      	adds	r7, #8
 800a54c:	46bd      	mov	sp, r7
 800a54e:	bd80      	pop	{r7, pc}
 800a550:	20000214 	.word	0x20000214

0800a554 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a554:	b580      	push	{r7, lr}
 800a556:	b084      	sub	sp, #16
 800a558:	af00      	add	r7, sp, #0
 800a55a:	6078      	str	r0, [r7, #4]
 800a55c:	460b      	mov	r3, r1
 800a55e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 800a560:	f44f 701d 	mov.w	r0, #628	; 0x274
 800a564:	f00b fc60 	bl	8015e28 <malloc>
 800a568:	4603      	mov	r3, r0
 800a56a:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d105      	bne.n	800a57e <USBD_MSC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	2200      	movs	r2, #0
 800a576:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800a57a:	2302      	movs	r3, #2
 800a57c:	e034      	b.n	800a5e8 <USBD_MSC_Init+0x94>
  }

  pdev->pClassData = (void *)hmsc;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	68fa      	ldr	r2, [r7, #12]
 800a582:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	7c1b      	ldrb	r3, [r3, #16]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d115      	bne.n	800a5ba <USBD_MSC_Init+0x66>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800a58e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a592:	2202      	movs	r2, #2
 800a594:	2101      	movs	r1, #1
 800a596:	6878      	ldr	r0, [r7, #4]
 800a598:	f00b fa59 	bl	8015a4e <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	2201      	movs	r2, #1
 800a5a0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800a5a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a5a8:	2202      	movs	r2, #2
 800a5aa:	2181      	movs	r1, #129	; 0x81
 800a5ac:	6878      	ldr	r0, [r7, #4]
 800a5ae:	f00b fa4e 	bl	8015a4e <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	2201      	movs	r2, #1
 800a5b6:	871a      	strh	r2, [r3, #56]	; 0x38
 800a5b8:	e012      	b.n	800a5e0 <USBD_MSC_Init+0x8c>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800a5ba:	2340      	movs	r3, #64	; 0x40
 800a5bc:	2202      	movs	r2, #2
 800a5be:	2101      	movs	r1, #1
 800a5c0:	6878      	ldr	r0, [r7, #4]
 800a5c2:	f00b fa44 	bl	8015a4e <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	2201      	movs	r2, #1
 800a5ca:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800a5ce:	2340      	movs	r3, #64	; 0x40
 800a5d0:	2202      	movs	r2, #2
 800a5d2:	2181      	movs	r1, #129	; 0x81
 800a5d4:	6878      	ldr	r0, [r7, #4]
 800a5d6:	f00b fa3a 	bl	8015a4e <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	2201      	movs	r2, #1
 800a5de:	871a      	strh	r2, [r3, #56]	; 0x38
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 800a5e0:	6878      	ldr	r0, [r7, #4]
 800a5e2:	f000 f98e 	bl	800a902 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 800a5e6:	2300      	movs	r3, #0
}
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	3710      	adds	r7, #16
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	bd80      	pop	{r7, pc}

0800a5f0 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a5f0:	b580      	push	{r7, lr}
 800a5f2:	b082      	sub	sp, #8
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	6078      	str	r0, [r7, #4]
 800a5f8:	460b      	mov	r3, r1
 800a5fa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 800a5fc:	2101      	movs	r1, #1
 800a5fe:	6878      	ldr	r0, [r7, #4]
 800a600:	f00b fa4b 	bl	8015a9a <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	2200      	movs	r2, #0
 800a608:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 800a60c:	2181      	movs	r1, #129	; 0x81
 800a60e:	6878      	ldr	r0, [r7, #4]
 800a610:	f00b fa43 	bl	8015a9a <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	2200      	movs	r2, #0
 800a618:	871a      	strh	r2, [r3, #56]	; 0x38

  /* De-Init the BOT layer */
  MSC_BOT_DeInit(pdev);
 800a61a:	6878      	ldr	r0, [r7, #4]
 800a61c:	f000 f9c7 	bl	800a9ae <MSC_BOT_DeInit>

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a626:	2b00      	cmp	r3, #0
 800a628:	d009      	beq.n	800a63e <USBD_MSC_DeInit+0x4e>
  {
    (void)USBD_free(pdev->pClassData);
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a630:	4618      	mov	r0, r3
 800a632:	f00b fc01 	bl	8015e38 <free>
    pdev->pClassData = NULL;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	2200      	movs	r2, #0
 800a63a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a63e:	2300      	movs	r3, #0
}
 800a640:	4618      	mov	r0, r3
 800a642:	3708      	adds	r7, #8
 800a644:	46bd      	mov	sp, r7
 800a646:	bd80      	pop	{r7, pc}

0800a648 <USBD_MSC_Setup>:
* @param  pdev: device instance
* @param  req: USB request
* @retval status
*/
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a648:	b580      	push	{r7, lr}
 800a64a:	b086      	sub	sp, #24
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	6078      	str	r0, [r7, #4]
 800a650:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a658:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 800a65a:	2300      	movs	r3, #0
 800a65c:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 800a65e:	2300      	movs	r3, #0
 800a660:	81fb      	strh	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a662:	683b      	ldr	r3, [r7, #0]
 800a664:	781b      	ldrb	r3, [r3, #0]
 800a666:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d04d      	beq.n	800a70a <USBD_MSC_Setup+0xc2>
 800a66e:	2b20      	cmp	r3, #32
 800a670:	f040 80c6 	bne.w	800a800 <USBD_MSC_Setup+0x1b8>
  {
    /* Class request */
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 800a674:	683b      	ldr	r3, [r7, #0]
 800a676:	785b      	ldrb	r3, [r3, #1]
 800a678:	2bfe      	cmp	r3, #254	; 0xfe
 800a67a:	d002      	beq.n	800a682 <USBD_MSC_Setup+0x3a>
 800a67c:	2bff      	cmp	r3, #255	; 0xff
 800a67e:	d024      	beq.n	800a6ca <USBD_MSC_Setup+0x82>
 800a680:	e03b      	b.n	800a6fa <USBD_MSC_Setup+0xb2>
    {
    case BOT_GET_MAX_LUN:
      if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800a682:	683b      	ldr	r3, [r7, #0]
 800a684:	885b      	ldrh	r3, [r3, #2]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d118      	bne.n	800a6bc <USBD_MSC_Setup+0x74>
 800a68a:	683b      	ldr	r3, [r7, #0]
 800a68c:	88db      	ldrh	r3, [r3, #6]
 800a68e:	2b01      	cmp	r3, #1
 800a690:	d114      	bne.n	800a6bc <USBD_MSC_Setup+0x74>
          ((req->bmRequest & 0x80U) == 0x80U))
 800a692:	683b      	ldr	r3, [r7, #0]
 800a694:	781b      	ldrb	r3, [r3, #0]
 800a696:	b25b      	sxtb	r3, r3
      if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800a698:	2b00      	cmp	r3, #0
 800a69a:	da0f      	bge.n	800a6bc <USBD_MSC_Setup+0x74>
      {
        hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a6a2:	699b      	ldr	r3, [r3, #24]
 800a6a4:	4798      	blx	r3
 800a6a6:	4603      	mov	r3, r0
 800a6a8:	461a      	mov	r2, r3
 800a6aa:	693b      	ldr	r3, [r7, #16]
 800a6ac:	601a      	str	r2, [r3, #0]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 800a6ae:	693b      	ldr	r3, [r7, #16]
 800a6b0:	2201      	movs	r2, #1
 800a6b2:	4619      	mov	r1, r3
 800a6b4:	6878      	ldr	r0, [r7, #4]
 800a6b6:	f002 fc82 	bl	800cfbe <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800a6ba:	e025      	b.n	800a708 <USBD_MSC_Setup+0xc0>
        USBD_CtlError(pdev, req);
 800a6bc:	6839      	ldr	r1, [r7, #0]
 800a6be:	6878      	ldr	r0, [r7, #4]
 800a6c0:	f002 fc0c 	bl	800cedc <USBD_CtlError>
        ret = USBD_FAIL;
 800a6c4:	2303      	movs	r3, #3
 800a6c6:	75fb      	strb	r3, [r7, #23]
      break;
 800a6c8:	e01e      	b.n	800a708 <USBD_MSC_Setup+0xc0>

    case BOT_RESET :
      if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800a6ca:	683b      	ldr	r3, [r7, #0]
 800a6cc:	885b      	ldrh	r3, [r3, #2]
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d10c      	bne.n	800a6ec <USBD_MSC_Setup+0xa4>
 800a6d2:	683b      	ldr	r3, [r7, #0]
 800a6d4:	88db      	ldrh	r3, [r3, #6]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d108      	bne.n	800a6ec <USBD_MSC_Setup+0xa4>
          ((req->bmRequest & 0x80U) != 0x80U))
 800a6da:	683b      	ldr	r3, [r7, #0]
 800a6dc:	781b      	ldrb	r3, [r3, #0]
 800a6de:	b25b      	sxtb	r3, r3
      if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	db03      	blt.n	800a6ec <USBD_MSC_Setup+0xa4>
      {
        MSC_BOT_Reset(pdev);
 800a6e4:	6878      	ldr	r0, [r7, #4]
 800a6e6:	f000 f940 	bl	800a96a <MSC_BOT_Reset>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800a6ea:	e00d      	b.n	800a708 <USBD_MSC_Setup+0xc0>
        USBD_CtlError(pdev, req);
 800a6ec:	6839      	ldr	r1, [r7, #0]
 800a6ee:	6878      	ldr	r0, [r7, #4]
 800a6f0:	f002 fbf4 	bl	800cedc <USBD_CtlError>
        ret = USBD_FAIL;
 800a6f4:	2303      	movs	r3, #3
 800a6f6:	75fb      	strb	r3, [r7, #23]
      break;
 800a6f8:	e006      	b.n	800a708 <USBD_MSC_Setup+0xc0>

    default:
      USBD_CtlError(pdev, req);
 800a6fa:	6839      	ldr	r1, [r7, #0]
 800a6fc:	6878      	ldr	r0, [r7, #4]
 800a6fe:	f002 fbed 	bl	800cedc <USBD_CtlError>
      ret = USBD_FAIL;
 800a702:	2303      	movs	r3, #3
 800a704:	75fb      	strb	r3, [r7, #23]
      break;
 800a706:	bf00      	nop
    }
    break;
 800a708:	e081      	b.n	800a80e <USBD_MSC_Setup+0x1c6>
    /* Interface & Endpoint request */
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800a70a:	683b      	ldr	r3, [r7, #0]
 800a70c:	785b      	ldrb	r3, [r3, #1]
 800a70e:	2b0b      	cmp	r3, #11
 800a710:	d86d      	bhi.n	800a7ee <USBD_MSC_Setup+0x1a6>
 800a712:	a201      	add	r2, pc, #4	; (adr r2, 800a718 <USBD_MSC_Setup+0xd0>)
 800a714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a718:	0800a749 	.word	0x0800a749
 800a71c:	0800a7bf 	.word	0x0800a7bf
 800a720:	0800a7ef 	.word	0x0800a7ef
 800a724:	0800a7ef 	.word	0x0800a7ef
 800a728:	0800a7ef 	.word	0x0800a7ef
 800a72c:	0800a7ef 	.word	0x0800a7ef
 800a730:	0800a7ef 	.word	0x0800a7ef
 800a734:	0800a7ef 	.word	0x0800a7ef
 800a738:	0800a7ef 	.word	0x0800a7ef
 800a73c:	0800a7ef 	.word	0x0800a7ef
 800a740:	0800a771 	.word	0x0800a771
 800a744:	0800a799 	.word	0x0800a799
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a74e:	2b03      	cmp	r3, #3
 800a750:	d107      	bne.n	800a762 <USBD_MSC_Setup+0x11a>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a752:	f107 030e 	add.w	r3, r7, #14
 800a756:	2202      	movs	r2, #2
 800a758:	4619      	mov	r1, r3
 800a75a:	6878      	ldr	r0, [r7, #4]
 800a75c:	f002 fc2f 	bl	800cfbe <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800a760:	e04d      	b.n	800a7fe <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 800a762:	6839      	ldr	r1, [r7, #0]
 800a764:	6878      	ldr	r0, [r7, #4]
 800a766:	f002 fbb9 	bl	800cedc <USBD_CtlError>
        ret = USBD_FAIL;
 800a76a:	2303      	movs	r3, #3
 800a76c:	75fb      	strb	r3, [r7, #23]
      break;
 800a76e:	e046      	b.n	800a7fe <USBD_MSC_Setup+0x1b6>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a776:	2b03      	cmp	r3, #3
 800a778:	d107      	bne.n	800a78a <USBD_MSC_Setup+0x142>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 800a77a:	693b      	ldr	r3, [r7, #16]
 800a77c:	3304      	adds	r3, #4
 800a77e:	2201      	movs	r2, #1
 800a780:	4619      	mov	r1, r3
 800a782:	6878      	ldr	r0, [r7, #4]
 800a784:	f002 fc1b 	bl	800cfbe <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800a788:	e039      	b.n	800a7fe <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 800a78a:	6839      	ldr	r1, [r7, #0]
 800a78c:	6878      	ldr	r0, [r7, #4]
 800a78e:	f002 fba5 	bl	800cedc <USBD_CtlError>
        ret = USBD_FAIL;
 800a792:	2303      	movs	r3, #3
 800a794:	75fb      	strb	r3, [r7, #23]
      break;
 800a796:	e032      	b.n	800a7fe <USBD_MSC_Setup+0x1b6>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a79e:	2b03      	cmp	r3, #3
 800a7a0:	d106      	bne.n	800a7b0 <USBD_MSC_Setup+0x168>
      {
        hmsc->interface = (uint8_t)(req->wValue);
 800a7a2:	683b      	ldr	r3, [r7, #0]
 800a7a4:	885b      	ldrh	r3, [r3, #2]
 800a7a6:	b2db      	uxtb	r3, r3
 800a7a8:	461a      	mov	r2, r3
 800a7aa:	693b      	ldr	r3, [r7, #16]
 800a7ac:	605a      	str	r2, [r3, #4]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800a7ae:	e026      	b.n	800a7fe <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 800a7b0:	6839      	ldr	r1, [r7, #0]
 800a7b2:	6878      	ldr	r0, [r7, #4]
 800a7b4:	f002 fb92 	bl	800cedc <USBD_CtlError>
        ret = USBD_FAIL;
 800a7b8:	2303      	movs	r3, #3
 800a7ba:	75fb      	strb	r3, [r7, #23]
      break;
 800a7bc:	e01f      	b.n	800a7fe <USBD_MSC_Setup+0x1b6>

    case USB_REQ_CLEAR_FEATURE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a7c4:	2b03      	cmp	r3, #3
 800a7c6:	d119      	bne.n	800a7fc <USBD_MSC_Setup+0x1b4>
      {
        if (req->wValue == USB_FEATURE_EP_HALT)
 800a7c8:	683b      	ldr	r3, [r7, #0]
 800a7ca:	885b      	ldrh	r3, [r3, #2]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d115      	bne.n	800a7fc <USBD_MSC_Setup+0x1b4>
        {
          /* Flush the FIFO */
          (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 800a7d0:	683b      	ldr	r3, [r7, #0]
 800a7d2:	889b      	ldrh	r3, [r3, #4]
 800a7d4:	b2db      	uxtb	r3, r3
 800a7d6:	4619      	mov	r1, r3
 800a7d8:	6878      	ldr	r0, [r7, #4]
 800a7da:	f00b f97d 	bl	8015ad8 <USBD_LL_FlushEP>

          /* Handle BOT error */
          MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 800a7de:	683b      	ldr	r3, [r7, #0]
 800a7e0:	889b      	ldrh	r3, [r3, #4]
 800a7e2:	b2db      	uxtb	r3, r3
 800a7e4:	4619      	mov	r1, r3
 800a7e6:	6878      	ldr	r0, [r7, #4]
 800a7e8:	f000 fa5a 	bl	800aca0 <MSC_BOT_CplClrFeature>
        }
      }
      break;
 800a7ec:	e006      	b.n	800a7fc <USBD_MSC_Setup+0x1b4>

    default:
      USBD_CtlError(pdev, req);
 800a7ee:	6839      	ldr	r1, [r7, #0]
 800a7f0:	6878      	ldr	r0, [r7, #4]
 800a7f2:	f002 fb73 	bl	800cedc <USBD_CtlError>
      ret = USBD_FAIL;
 800a7f6:	2303      	movs	r3, #3
 800a7f8:	75fb      	strb	r3, [r7, #23]
      break;
 800a7fa:	e000      	b.n	800a7fe <USBD_MSC_Setup+0x1b6>
      break;
 800a7fc:	bf00      	nop
    }
    break;
 800a7fe:	e006      	b.n	800a80e <USBD_MSC_Setup+0x1c6>

  default:
    USBD_CtlError(pdev, req);
 800a800:	6839      	ldr	r1, [r7, #0]
 800a802:	6878      	ldr	r0, [r7, #4]
 800a804:	f002 fb6a 	bl	800cedc <USBD_CtlError>
    ret = USBD_FAIL;
 800a808:	2303      	movs	r3, #3
 800a80a:	75fb      	strb	r3, [r7, #23]
    break;
 800a80c:	bf00      	nop
  }

  return (uint8_t)ret;
 800a80e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a810:	4618      	mov	r0, r3
 800a812:	3718      	adds	r7, #24
 800a814:	46bd      	mov	sp, r7
 800a816:	bd80      	pop	{r7, pc}

0800a818 <USBD_MSC_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a818:	b580      	push	{r7, lr}
 800a81a:	b082      	sub	sp, #8
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
 800a820:	460b      	mov	r3, r1
 800a822:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 800a824:	78fb      	ldrb	r3, [r7, #3]
 800a826:	4619      	mov	r1, r3
 800a828:	6878      	ldr	r0, [r7, #4]
 800a82a:	f000 f8d1 	bl	800a9d0 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 800a82e:	2300      	movs	r3, #0
}
 800a830:	4618      	mov	r0, r3
 800a832:	3708      	adds	r7, #8
 800a834:	46bd      	mov	sp, r7
 800a836:	bd80      	pop	{r7, pc}

0800a838 <USBD_MSC_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a838:	b580      	push	{r7, lr}
 800a83a:	b082      	sub	sp, #8
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
 800a840:	460b      	mov	r3, r1
 800a842:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 800a844:	78fb      	ldrb	r3, [r7, #3]
 800a846:	4619      	mov	r1, r3
 800a848:	6878      	ldr	r0, [r7, #4]
 800a84a:	f000 f8f2 	bl	800aa32 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 800a84e:	2300      	movs	r3, #0
}
 800a850:	4618      	mov	r0, r3
 800a852:	3708      	adds	r7, #8
 800a854:	46bd      	mov	sp, r7
 800a856:	bd80      	pop	{r7, pc}

0800a858 <USBD_MSC_GetHSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 800a858:	b480      	push	{r7}
 800a85a:	b083      	sub	sp, #12
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgHSDesc);
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	2220      	movs	r2, #32
 800a864:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 800a866:	4b03      	ldr	r3, [pc, #12]	; (800a874 <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 800a868:	4618      	mov	r0, r3
 800a86a:	370c      	adds	r7, #12
 800a86c:	46bd      	mov	sp, r7
 800a86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a872:	4770      	bx	lr
 800a874:	20000054 	.word	0x20000054

0800a878 <USBD_MSC_GetFSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 800a878:	b480      	push	{r7}
 800a87a:	b083      	sub	sp, #12
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgFSDesc);
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	2220      	movs	r2, #32
 800a884:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 800a886:	4b03      	ldr	r3, [pc, #12]	; (800a894 <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 800a888:	4618      	mov	r0, r3
 800a88a:	370c      	adds	r7, #12
 800a88c:	46bd      	mov	sp, r7
 800a88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a892:	4770      	bx	lr
 800a894:	20000074 	.word	0x20000074

0800a898 <USBD_MSC_GetOtherSpeedCfgDesc>:
*         return other speed configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a898:	b480      	push	{r7}
 800a89a:	b083      	sub	sp, #12
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_OtherSpeedCfgDesc);
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	2220      	movs	r2, #32
 800a8a4:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 800a8a6:	4b03      	ldr	r3, [pc, #12]	; (800a8b4 <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	370c      	adds	r7, #12
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b2:	4770      	bx	lr
 800a8b4:	20000094 	.word	0x20000094

0800a8b8 <USBD_MSC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a8b8:	b480      	push	{r7}
 800a8ba:	b083      	sub	sp, #12
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	220a      	movs	r2, #10
 800a8c4:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 800a8c6:	4b03      	ldr	r3, [pc, #12]	; (800a8d4 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	370c      	adds	r7, #12
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d2:	4770      	bx	lr
 800a8d4:	200000b4 	.word	0x200000b4

0800a8d8 <USBD_MSC_RegisterStorage>:
* @brief  USBD_MSC_RegisterStorage
* @param  fops: storage callback
* @retval status
*/
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 800a8d8:	b480      	push	{r7}
 800a8da:	b083      	sub	sp, #12
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]
 800a8e0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a8e2:	683b      	ldr	r3, [r7, #0]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d101      	bne.n	800a8ec <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a8e8:	2303      	movs	r3, #3
 800a8ea:	e004      	b.n	800a8f6 <USBD_MSC_RegisterStorage+0x1e>
  }

  pdev->pUserData = fops;
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	683a      	ldr	r2, [r7, #0]
 800a8f0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800a8f4:	2300      	movs	r3, #0
}
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	370c      	adds	r7, #12
 800a8fa:	46bd      	mov	sp, r7
 800a8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a900:	4770      	bx	lr

0800a902 <MSC_BOT_Init>:
*         Initialize the BOT Process
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 800a902:	b580      	push	{r7, lr}
 800a904:	b084      	sub	sp, #16
 800a906:	af00      	add	r7, sp, #0
 800a908:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a910:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state = USBD_BOT_IDLE;
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	2200      	movs	r2, #0
 800a916:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	2200      	movs	r2, #0
 800a91c:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	2200      	movs	r2, #0
 800a922:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  hmsc->scsi_sense_head = 0U;
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	2200      	movs	r2, #0
 800a92a:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	2200      	movs	r2, #0
 800a932:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	2000      	movs	r0, #0
 800a940:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 800a942:	2101      	movs	r1, #1
 800a944:	6878      	ldr	r0, [r7, #4]
 800a946:	f00b f8c7 	bl	8015ad8 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 800a94a:	2181      	movs	r1, #129	; 0x81
 800a94c:	6878      	ldr	r0, [r7, #4]
 800a94e:	f00b f8c3 	bl	8015ad8 <USBD_LL_FlushEP>

  /* Prapare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800a958:	231f      	movs	r3, #31
 800a95a:	2101      	movs	r1, #1
 800a95c:	6878      	ldr	r0, [r7, #4]
 800a95e:	f00b f984 	bl	8015c6a <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 800a962:	bf00      	nop
 800a964:	3710      	adds	r7, #16
 800a966:	46bd      	mov	sp, r7
 800a968:	bd80      	pop	{r7, pc}

0800a96a <MSC_BOT_Reset>:
*         Reset the BOT Machine
* @param  pdev: device instance
* @retval  None
*/
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 800a96a:	b580      	push	{r7, lr}
 800a96c:	b084      	sub	sp, #16
 800a96e:	af00      	add	r7, sp, #0
 800a970:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a978:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state  = USBD_BOT_IDLE;
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	2200      	movs	r2, #0
 800a97e:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	2201      	movs	r2, #1
 800a984:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSC_EPIN_ADDR);
 800a986:	2181      	movs	r1, #129	; 0x81
 800a988:	6878      	ldr	r0, [r7, #4]
 800a98a:	f00b f8e3 	bl	8015b54 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSC_EPOUT_ADDR);
 800a98e:	2101      	movs	r1, #1
 800a990:	6878      	ldr	r0, [r7, #4]
 800a992:	f00b f8df 	bl	8015b54 <USBD_LL_ClearStallEP>

  /* Prapare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800a99c:	231f      	movs	r3, #31
 800a99e:	2101      	movs	r1, #1
 800a9a0:	6878      	ldr	r0, [r7, #4]
 800a9a2:	f00b f962 	bl	8015c6a <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 800a9a6:	bf00      	nop
 800a9a8:	3710      	adds	r7, #16
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	bd80      	pop	{r7, pc}

0800a9ae <MSC_BOT_DeInit>:
*         Deinitialize the BOT Machine
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 800a9ae:	b480      	push	{r7}
 800a9b0:	b085      	sub	sp, #20
 800a9b2:	af00      	add	r7, sp, #0
 800a9b4:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a9bc:	60fb      	str	r3, [r7, #12]
  hmsc->bot_state = USBD_BOT_IDLE;
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	2200      	movs	r2, #0
 800a9c2:	721a      	strb	r2, [r3, #8]
}
 800a9c4:	bf00      	nop
 800a9c6:	3714      	adds	r7, #20
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ce:	4770      	bx	lr

0800a9d0 <MSC_BOT_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	b084      	sub	sp, #16
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
 800a9d8:	460b      	mov	r3, r1
 800a9da:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a9e2:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	7a1b      	ldrb	r3, [r3, #8]
 800a9e8:	2b02      	cmp	r3, #2
 800a9ea:	d004      	beq.n	800a9f6 <MSC_BOT_DataIn+0x26>
 800a9ec:	2b02      	cmp	r3, #2
 800a9ee:	db19      	blt.n	800aa24 <MSC_BOT_DataIn+0x54>
 800a9f0:	2b04      	cmp	r3, #4
 800a9f2:	dc17      	bgt.n	800aa24 <MSC_BOT_DataIn+0x54>
 800a9f4:	e011      	b.n	800aa1a <MSC_BOT_DataIn+0x4a>
  {
  case USBD_BOT_DATA_IN:
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	f203 231f 	addw	r3, r3, #543	; 0x21f
 800aa02:	461a      	mov	r2, r3
 800aa04:	6878      	ldr	r0, [r7, #4]
 800aa06:	f000 f973 	bl	800acf0 <SCSI_ProcessCmd>
 800aa0a:	4603      	mov	r3, r0
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	da0b      	bge.n	800aa28 <MSC_BOT_DataIn+0x58>
    {
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800aa10:	2101      	movs	r1, #1
 800aa12:	6878      	ldr	r0, [r7, #4]
 800aa14:	f000 f8ea 	bl	800abec <MSC_BOT_SendCSW>
    }
    break;
 800aa18:	e006      	b.n	800aa28 <MSC_BOT_DataIn+0x58>

  case USBD_BOT_SEND_DATA:
  case USBD_BOT_LAST_DATA_IN:
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800aa1a:	2100      	movs	r1, #0
 800aa1c:	6878      	ldr	r0, [r7, #4]
 800aa1e:	f000 f8e5 	bl	800abec <MSC_BOT_SendCSW>
    break;
 800aa22:	e002      	b.n	800aa2a <MSC_BOT_DataIn+0x5a>

  default:
    break;
 800aa24:	bf00      	nop
 800aa26:	e000      	b.n	800aa2a <MSC_BOT_DataIn+0x5a>
    break;
 800aa28:	bf00      	nop
  }
}
 800aa2a:	bf00      	nop
 800aa2c:	3710      	adds	r7, #16
 800aa2e:	46bd      	mov	sp, r7
 800aa30:	bd80      	pop	{r7, pc}

0800aa32 <MSC_BOT_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800aa32:	b580      	push	{r7, lr}
 800aa34:	b084      	sub	sp, #16
 800aa36:	af00      	add	r7, sp, #0
 800aa38:	6078      	str	r0, [r7, #4]
 800aa3a:	460b      	mov	r3, r1
 800aa3c:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aa44:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	7a1b      	ldrb	r3, [r3, #8]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d002      	beq.n	800aa54 <MSC_BOT_DataOut+0x22>
 800aa4e:	2b01      	cmp	r3, #1
 800aa50:	d004      	beq.n	800aa5c <MSC_BOT_DataOut+0x2a>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 800aa52:	e015      	b.n	800aa80 <MSC_BOT_DataOut+0x4e>
      MSC_BOT_CBW_Decode(pdev);
 800aa54:	6878      	ldr	r0, [r7, #4]
 800aa56:	f000 f817 	bl	800aa88 <MSC_BOT_CBW_Decode>
      break;
 800aa5a:	e011      	b.n	800aa80 <MSC_BOT_DataOut+0x4e>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	f203 231f 	addw	r3, r3, #543	; 0x21f
 800aa68:	461a      	mov	r2, r3
 800aa6a:	6878      	ldr	r0, [r7, #4]
 800aa6c:	f000 f940 	bl	800acf0 <SCSI_ProcessCmd>
 800aa70:	4603      	mov	r3, r0
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	da03      	bge.n	800aa7e <MSC_BOT_DataOut+0x4c>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800aa76:	2101      	movs	r1, #1
 800aa78:	6878      	ldr	r0, [r7, #4]
 800aa7a:	f000 f8b7 	bl	800abec <MSC_BOT_SendCSW>
      break;
 800aa7e:	bf00      	nop
  }
}
 800aa80:	bf00      	nop
 800aa82:	3710      	adds	r7, #16
 800aa84:	46bd      	mov	sp, r7
 800aa86:	bd80      	pop	{r7, pc}

0800aa88 <MSC_BOT_CBW_Decode>:
*         Decode the CBW command and set the BOT state machine accordingly
* @param  pdev: device instance
* @retval None
*/
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b084      	sub	sp, #16
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aa96:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dTag = hmsc->cbw.dTag;
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 800aab0:	2101      	movs	r1, #1
 800aab2:	6878      	ldr	r0, [r7, #4]
 800aab4:	f00b f8fa 	bl	8015cac <USBD_LL_GetRxDataSize>
 800aab8:	4603      	mov	r3, r0
 800aaba:	2b1f      	cmp	r3, #31
 800aabc:	d114      	bne.n	800aae8 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 800aac4:	4a32      	ldr	r2, [pc, #200]	; (800ab90 <MSC_BOT_CBW_Decode+0x108>)
 800aac6:	4293      	cmp	r3, r2
 800aac8:	d10e      	bne.n	800aae8 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800aad0:	2b01      	cmp	r3, #1
 800aad2:	d809      	bhi.n	800aae8 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d004      	beq.n	800aae8 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bCBLength > 16U))
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800aae4:	2b10      	cmp	r3, #16
 800aae6:	d90e      	bls.n	800ab06 <MSC_BOT_CBW_Decode+0x7e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800aaee:	2320      	movs	r3, #32
 800aaf0:	2205      	movs	r2, #5
 800aaf2:	6878      	ldr	r0, [r7, #4]
 800aaf4:	f000 fcc9 	bl	800b48a <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	2202      	movs	r2, #2
 800aafc:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 800aafe:	6878      	ldr	r0, [r7, #4]
 800ab00:	f000 f8a0 	bl	800ac44 <MSC_BOT_Abort>
 800ab04:	e041      	b.n	800ab8a <MSC_BOT_CBW_Decode+0x102>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	f203 231f 	addw	r3, r3, #543	; 0x21f
 800ab12:	461a      	mov	r2, r3
 800ab14:	6878      	ldr	r0, [r7, #4]
 800ab16:	f000 f8eb 	bl	800acf0 <SCSI_ProcessCmd>
 800ab1a:	4603      	mov	r3, r0
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	da0c      	bge.n	800ab3a <MSC_BOT_CBW_Decode+0xb2>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	7a1b      	ldrb	r3, [r3, #8]
 800ab24:	2b05      	cmp	r3, #5
 800ab26:	d104      	bne.n	800ab32 <MSC_BOT_CBW_Decode+0xaa>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800ab28:	2101      	movs	r1, #1
 800ab2a:	6878      	ldr	r0, [r7, #4]
 800ab2c:	f000 f85e 	bl	800abec <MSC_BOT_SendCSW>
 800ab30:	e02b      	b.n	800ab8a <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800ab32:	6878      	ldr	r0, [r7, #4]
 800ab34:	f000 f886 	bl	800ac44 <MSC_BOT_Abort>
 800ab38:	e027      	b.n	800ab8a <MSC_BOT_CBW_Decode+0x102>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	7a1b      	ldrb	r3, [r3, #8]
 800ab3e:	2b02      	cmp	r3, #2
 800ab40:	d022      	beq.n	800ab88 <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800ab46:	2b01      	cmp	r3, #1
 800ab48:	d01e      	beq.n	800ab88 <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800ab4e:	2b03      	cmp	r3, #3
 800ab50:	d01a      	beq.n	800ab88 <MSC_BOT_CBW_Decode+0x100>
    {
      if (hmsc->bot_data_length > 0U)
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	68db      	ldr	r3, [r3, #12]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d009      	beq.n	800ab6e <MSC_BOT_CBW_Decode+0xe6>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	f103 0110 	add.w	r1, r3, #16
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	68db      	ldr	r3, [r3, #12]
 800ab64:	461a      	mov	r2, r3
 800ab66:	6878      	ldr	r0, [r7, #4]
 800ab68:	f000 f814 	bl	800ab94 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 800ab6c:	e00d      	b.n	800ab8a <MSC_BOT_CBW_Decode+0x102>
      }
      else if (hmsc->bot_data_length == 0U)
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	68db      	ldr	r3, [r3, #12]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d104      	bne.n	800ab80 <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800ab76:	2100      	movs	r1, #0
 800ab78:	6878      	ldr	r0, [r7, #4]
 800ab7a:	f000 f837 	bl	800abec <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 800ab7e:	e004      	b.n	800ab8a <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800ab80:	6878      	ldr	r0, [r7, #4]
 800ab82:	f000 f85f 	bl	800ac44 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 800ab86:	e000      	b.n	800ab8a <MSC_BOT_CBW_Decode+0x102>
      }
    }
    else
    {
      return;
 800ab88:	bf00      	nop
    }
  }
}
 800ab8a:	3710      	adds	r7, #16
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	bd80      	pop	{r7, pc}
 800ab90:	43425355 	.word	0x43425355

0800ab94 <MSC_BOT_SendData>:
* @param  buf: pointer to data buffer
* @param  len: Data Length
* @retval None
*/
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 800ab94:	b580      	push	{r7, lr}
 800ab96:	b086      	sub	sp, #24
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	60f8      	str	r0, [r7, #12]
 800ab9c:	60b9      	str	r1, [r7, #8]
 800ab9e:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aba6:	617b      	str	r3, [r7, #20]

  uint32_t length = MIN(hmsc->cbw.dDataLength, len);
 800aba8:	697b      	ldr	r3, [r7, #20]
 800abaa:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800abae:	687a      	ldr	r2, [r7, #4]
 800abb0:	4293      	cmp	r3, r2
 800abb2:	bf28      	it	cs
 800abb4:	4613      	movcs	r3, r2
 800abb6:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 800abb8:	697b      	ldr	r3, [r7, #20]
 800abba:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	1ad2      	subs	r2, r2, r3
 800abc2:	697b      	ldr	r3, [r7, #20]
 800abc4:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 800abc8:	697b      	ldr	r3, [r7, #20]
 800abca:	2200      	movs	r2, #0
 800abcc:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 800abd0:	697b      	ldr	r3, [r7, #20]
 800abd2:	2204      	movs	r2, #4
 800abd4:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 800abd6:	693b      	ldr	r3, [r7, #16]
 800abd8:	68ba      	ldr	r2, [r7, #8]
 800abda:	2181      	movs	r1, #129	; 0x81
 800abdc:	68f8      	ldr	r0, [r7, #12]
 800abde:	f00b f823 	bl	8015c28 <USBD_LL_Transmit>
}
 800abe2:	bf00      	nop
 800abe4:	3718      	adds	r7, #24
 800abe6:	46bd      	mov	sp, r7
 800abe8:	bd80      	pop	{r7, pc}
	...

0800abec <MSC_BOT_SendCSW>:
* @param  pdev: device instance
* @param  status : CSW status
* @retval None
*/
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 800abec:	b580      	push	{r7, lr}
 800abee:	b084      	sub	sp, #16
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	6078      	str	r0, [r7, #4]
 800abf4:	460b      	mov	r3, r1
 800abf6:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800abfe:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	4a0f      	ldr	r2, [pc, #60]	; (800ac40 <MSC_BOT_SendCSW+0x54>)
 800ac04:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.bStatus = CSW_Status;
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	78fa      	ldrb	r2, [r7, #3]
 800ac0c:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	2200      	movs	r2, #0
 800ac14:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)&hmsc->csw,
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	f503 720c 	add.w	r2, r3, #560	; 0x230
 800ac1c:	230d      	movs	r3, #13
 800ac1e:	2181      	movs	r1, #129	; 0x81
 800ac20:	6878      	ldr	r0, [r7, #4]
 800ac22:	f00b f801 	bl	8015c28 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800ac2c:	231f      	movs	r3, #31
 800ac2e:	2101      	movs	r1, #1
 800ac30:	6878      	ldr	r0, [r7, #4]
 800ac32:	f00b f81a 	bl	8015c6a <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 800ac36:	bf00      	nop
 800ac38:	3710      	adds	r7, #16
 800ac3a:	46bd      	mov	sp, r7
 800ac3c:	bd80      	pop	{r7, pc}
 800ac3e:	bf00      	nop
 800ac40:	53425355 	.word	0x53425355

0800ac44 <MSC_BOT_Abort>:
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 800ac44:	b580      	push	{r7, lr}
 800ac46:	b084      	sub	sp, #16
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ac52:	60fb      	str	r3, [r7, #12]

  if ((hmsc->cbw.bmFlags == 0U) &&
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d10c      	bne.n	800ac78 <MSC_BOT_Abort+0x34>
      (hmsc->cbw.dDataLength != 0U) &&
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d007      	beq.n	800ac78 <MSC_BOT_Abort+0x34>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d103      	bne.n	800ac78 <MSC_BOT_Abort+0x34>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 800ac70:	2101      	movs	r1, #1
 800ac72:	6878      	ldr	r0, [r7, #4]
 800ac74:	f00a ff4f 	bl	8015b16 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 800ac78:	2181      	movs	r1, #129	; 0x81
 800ac7a:	6878      	ldr	r0, [r7, #4]
 800ac7c:	f00a ff4b 	bl	8015b16 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	7a5b      	ldrb	r3, [r3, #9]
 800ac84:	2b02      	cmp	r3, #2
 800ac86:	d107      	bne.n	800ac98 <MSC_BOT_Abort+0x54>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 800ac88:	2181      	movs	r1, #129	; 0x81
 800ac8a:	6878      	ldr	r0, [r7, #4]
 800ac8c:	f00a ff43 	bl	8015b16 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 800ac90:	2101      	movs	r1, #1
 800ac92:	6878      	ldr	r0, [r7, #4]
 800ac94:	f00a ff3f 	bl	8015b16 <USBD_LL_StallEP>
  }
}
 800ac98:	bf00      	nop
 800ac9a:	3710      	adds	r7, #16
 800ac9c:	46bd      	mov	sp, r7
 800ac9e:	bd80      	pop	{r7, pc}

0800aca0 <MSC_BOT_CplClrFeature>:
* @param  epnum: endpoint index
* @retval None
*/

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800aca0:	b580      	push	{r7, lr}
 800aca2:	b084      	sub	sp, #16
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	6078      	str	r0, [r7, #4]
 800aca8:	460b      	mov	r3, r1
 800acaa:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800acb2:	60fb      	str	r3, [r7, #12]

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	7a5b      	ldrb	r3, [r3, #9]
 800acb8:	2b02      	cmp	r3, #2
 800acba:	d108      	bne.n	800acce <MSC_BOT_CplClrFeature+0x2e>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 800acbc:	2181      	movs	r1, #129	; 0x81
 800acbe:	6878      	ldr	r0, [r7, #4]
 800acc0:	f00a ff29 	bl	8015b16 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 800acc4:	2101      	movs	r1, #1
 800acc6:	6878      	ldr	r0, [r7, #4]
 800acc8:	f00a ff25 	bl	8015b16 <USBD_LL_StallEP>
 800accc:	e00d      	b.n	800acea <MSC_BOT_CplClrFeature+0x4a>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 800acce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	da08      	bge.n	800ace8 <MSC_BOT_CplClrFeature+0x48>
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	7a5b      	ldrb	r3, [r3, #9]
 800acda:	2b01      	cmp	r3, #1
 800acdc:	d004      	beq.n	800ace8 <MSC_BOT_CplClrFeature+0x48>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800acde:	2101      	movs	r1, #1
 800ace0:	6878      	ldr	r0, [r7, #4]
 800ace2:	f7ff ff83 	bl	800abec <MSC_BOT_SendCSW>
 800ace6:	e000      	b.n	800acea <MSC_BOT_CplClrFeature+0x4a>
  }
  else
  {
    return;
 800ace8:	bf00      	nop
  }
}
 800acea:	3710      	adds	r7, #16
 800acec:	46bd      	mov	sp, r7
 800acee:	bd80      	pop	{r7, pc}

0800acf0 <SCSI_ProcessCmd>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 800acf0:	b580      	push	{r7, lr}
 800acf2:	b086      	sub	sp, #24
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	60f8      	str	r0, [r7, #12]
 800acf8:	460b      	mov	r3, r1
 800acfa:	607a      	str	r2, [r7, #4]
 800acfc:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ad04:	613b      	str	r3, [r7, #16]

  switch (cmd[0])
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	781b      	ldrb	r3, [r3, #0]
 800ad0a:	2b25      	cmp	r3, #37	; 0x25
 800ad0c:	d06e      	beq.n	800adec <SCSI_ProcessCmd+0xfc>
 800ad0e:	2b25      	cmp	r3, #37	; 0x25
 800ad10:	dc11      	bgt.n	800ad36 <SCSI_ProcessCmd+0x46>
 800ad12:	2b1a      	cmp	r3, #26
 800ad14:	d04f      	beq.n	800adb6 <SCSI_ProcessCmd+0xc6>
 800ad16:	2b1a      	cmp	r3, #26
 800ad18:	dc06      	bgt.n	800ad28 <SCSI_ProcessCmd+0x38>
 800ad1a:	2b03      	cmp	r3, #3
 800ad1c:	d027      	beq.n	800ad6e <SCSI_ProcessCmd+0x7e>
 800ad1e:	2b12      	cmp	r3, #18
 800ad20:	d02e      	beq.n	800ad80 <SCSI_ProcessCmd+0x90>
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d01a      	beq.n	800ad5c <SCSI_ProcessCmd+0x6c>
 800ad26:	e0a0      	b.n	800ae6a <SCSI_ProcessCmd+0x17a>
 800ad28:	2b1e      	cmp	r3, #30
 800ad2a:	d03b      	beq.n	800ada4 <SCSI_ProcessCmd+0xb4>
 800ad2c:	2b23      	cmp	r3, #35	; 0x23
 800ad2e:	d054      	beq.n	800adda <SCSI_ProcessCmd+0xea>
 800ad30:	2b1b      	cmp	r3, #27
 800ad32:	d02e      	beq.n	800ad92 <SCSI_ProcessCmd+0xa2>
 800ad34:	e099      	b.n	800ae6a <SCSI_ProcessCmd+0x17a>
 800ad36:	2b5a      	cmp	r3, #90	; 0x5a
 800ad38:	d046      	beq.n	800adc8 <SCSI_ProcessCmd+0xd8>
 800ad3a:	2b5a      	cmp	r3, #90	; 0x5a
 800ad3c:	dc07      	bgt.n	800ad4e <SCSI_ProcessCmd+0x5e>
 800ad3e:	2b2a      	cmp	r3, #42	; 0x2a
 800ad40:	d078      	beq.n	800ae34 <SCSI_ProcessCmd+0x144>
 800ad42:	2b2f      	cmp	r3, #47	; 0x2f
 800ad44:	f000 8088 	beq.w	800ae58 <SCSI_ProcessCmd+0x168>
 800ad48:	2b28      	cmp	r3, #40	; 0x28
 800ad4a:	d061      	beq.n	800ae10 <SCSI_ProcessCmd+0x120>
 800ad4c:	e08d      	b.n	800ae6a <SCSI_ProcessCmd+0x17a>
 800ad4e:	2ba8      	cmp	r3, #168	; 0xa8
 800ad50:	d067      	beq.n	800ae22 <SCSI_ProcessCmd+0x132>
 800ad52:	2baa      	cmp	r3, #170	; 0xaa
 800ad54:	d077      	beq.n	800ae46 <SCSI_ProcessCmd+0x156>
 800ad56:	2b9e      	cmp	r3, #158	; 0x9e
 800ad58:	d051      	beq.n	800adfe <SCSI_ProcessCmd+0x10e>
 800ad5a:	e086      	b.n	800ae6a <SCSI_ProcessCmd+0x17a>
  {
  case SCSI_TEST_UNIT_READY:
    ret = SCSI_TestUnitReady(pdev, lun, cmd);
 800ad5c:	7afb      	ldrb	r3, [r7, #11]
 800ad5e:	687a      	ldr	r2, [r7, #4]
 800ad60:	4619      	mov	r1, r3
 800ad62:	68f8      	ldr	r0, [r7, #12]
 800ad64:	f000 f893 	bl	800ae8e <SCSI_TestUnitReady>
 800ad68:	4603      	mov	r3, r0
 800ad6a:	75fb      	strb	r3, [r7, #23]
    break;
 800ad6c:	e089      	b.n	800ae82 <SCSI_ProcessCmd+0x192>

  case SCSI_REQUEST_SENSE:
    ret = SCSI_RequestSense(pdev, lun, cmd);
 800ad6e:	7afb      	ldrb	r3, [r7, #11]
 800ad70:	687a      	ldr	r2, [r7, #4]
 800ad72:	4619      	mov	r1, r3
 800ad74:	68f8      	ldr	r0, [r7, #12]
 800ad76:	f000 fb0f 	bl	800b398 <SCSI_RequestSense>
 800ad7a:	4603      	mov	r3, r0
 800ad7c:	75fb      	strb	r3, [r7, #23]
    break;
 800ad7e:	e080      	b.n	800ae82 <SCSI_ProcessCmd+0x192>

  case SCSI_INQUIRY:
    ret = SCSI_Inquiry(pdev, lun, cmd);
 800ad80:	7afb      	ldrb	r3, [r7, #11]
 800ad82:	687a      	ldr	r2, [r7, #4]
 800ad84:	4619      	mov	r1, r3
 800ad86:	68f8      	ldr	r0, [r7, #12]
 800ad88:	f000 f8cc 	bl	800af24 <SCSI_Inquiry>
 800ad8c:	4603      	mov	r3, r0
 800ad8e:	75fb      	strb	r3, [r7, #23]
    break;
 800ad90:	e077      	b.n	800ae82 <SCSI_ProcessCmd+0x192>

  case SCSI_START_STOP_UNIT:
    ret = SCSI_StartStopUnit(pdev, lun, cmd);
 800ad92:	7afb      	ldrb	r3, [r7, #11]
 800ad94:	687a      	ldr	r2, [r7, #4]
 800ad96:	4619      	mov	r1, r3
 800ad98:	68f8      	ldr	r0, [r7, #12]
 800ad9a:	f000 fbb9 	bl	800b510 <SCSI_StartStopUnit>
 800ad9e:	4603      	mov	r3, r0
 800ada0:	75fb      	strb	r3, [r7, #23]
    break;
 800ada2:	e06e      	b.n	800ae82 <SCSI_ProcessCmd+0x192>

  case SCSI_ALLOW_MEDIUM_REMOVAL:
    ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 800ada4:	7afb      	ldrb	r3, [r7, #11]
 800ada6:	687a      	ldr	r2, [r7, #4]
 800ada8:	4619      	mov	r1, r3
 800adaa:	68f8      	ldr	r0, [r7, #12]
 800adac:	f000 fbfb 	bl	800b5a6 <SCSI_AllowPreventRemovable>
 800adb0:	4603      	mov	r3, r0
 800adb2:	75fb      	strb	r3, [r7, #23]
    break;
 800adb4:	e065      	b.n	800ae82 <SCSI_ProcessCmd+0x192>

  case SCSI_MODE_SENSE6:
    ret = SCSI_ModeSense6(pdev, lun, cmd);
 800adb6:	7afb      	ldrb	r3, [r7, #11]
 800adb8:	687a      	ldr	r2, [r7, #4]
 800adba:	4619      	mov	r1, r3
 800adbc:	68f8      	ldr	r0, [r7, #12]
 800adbe:	f000 fa9f 	bl	800b300 <SCSI_ModeSense6>
 800adc2:	4603      	mov	r3, r0
 800adc4:	75fb      	strb	r3, [r7, #23]
    break;
 800adc6:	e05c      	b.n	800ae82 <SCSI_ProcessCmd+0x192>

  case SCSI_MODE_SENSE10:
    ret = SCSI_ModeSense10(pdev, lun, cmd);
 800adc8:	7afb      	ldrb	r3, [r7, #11]
 800adca:	687a      	ldr	r2, [r7, #4]
 800adcc:	4619      	mov	r1, r3
 800adce:	68f8      	ldr	r0, [r7, #12]
 800add0:	f000 fabc 	bl	800b34c <SCSI_ModeSense10>
 800add4:	4603      	mov	r3, r0
 800add6:	75fb      	strb	r3, [r7, #23]
    break;
 800add8:	e053      	b.n	800ae82 <SCSI_ProcessCmd+0x192>

  case SCSI_READ_FORMAT_CAPACITIES:
    ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 800adda:	7afb      	ldrb	r3, [r7, #11]
 800addc:	687a      	ldr	r2, [r7, #4]
 800adde:	4619      	mov	r1, r3
 800ade0:	68f8      	ldr	r0, [r7, #12]
 800ade2:	f000 fa20 	bl	800b226 <SCSI_ReadFormatCapacity>
 800ade6:	4603      	mov	r3, r0
 800ade8:	75fb      	strb	r3, [r7, #23]
    break;
 800adea:	e04a      	b.n	800ae82 <SCSI_ProcessCmd+0x192>

  case SCSI_READ_CAPACITY10:
    ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 800adec:	7afb      	ldrb	r3, [r7, #11]
 800adee:	687a      	ldr	r2, [r7, #4]
 800adf0:	4619      	mov	r1, r3
 800adf2:	68f8      	ldr	r0, [r7, #12]
 800adf4:	f000 f904 	bl	800b000 <SCSI_ReadCapacity10>
 800adf8:	4603      	mov	r3, r0
 800adfa:	75fb      	strb	r3, [r7, #23]
    break;
 800adfc:	e041      	b.n	800ae82 <SCSI_ProcessCmd+0x192>

  case SCSI_READ_CAPACITY16:
    ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 800adfe:	7afb      	ldrb	r3, [r7, #11]
 800ae00:	687a      	ldr	r2, [r7, #4]
 800ae02:	4619      	mov	r1, r3
 800ae04:	68f8      	ldr	r0, [r7, #12]
 800ae06:	f000 f96a 	bl	800b0de <SCSI_ReadCapacity16>
 800ae0a:	4603      	mov	r3, r0
 800ae0c:	75fb      	strb	r3, [r7, #23]
    break;
 800ae0e:	e038      	b.n	800ae82 <SCSI_ProcessCmd+0x192>

  case SCSI_READ10:
    ret = SCSI_Read10(pdev, lun, cmd);
 800ae10:	7afb      	ldrb	r3, [r7, #11]
 800ae12:	687a      	ldr	r2, [r7, #4]
 800ae14:	4619      	mov	r1, r3
 800ae16:	68f8      	ldr	r0, [r7, #12]
 800ae18:	f000 fbe8 	bl	800b5ec <SCSI_Read10>
 800ae1c:	4603      	mov	r3, r0
 800ae1e:	75fb      	strb	r3, [r7, #23]
    break;
 800ae20:	e02f      	b.n	800ae82 <SCSI_ProcessCmd+0x192>

  case SCSI_READ12:
    ret = SCSI_Read12(pdev, lun, cmd);
 800ae22:	7afb      	ldrb	r3, [r7, #11]
 800ae24:	687a      	ldr	r2, [r7, #4]
 800ae26:	4619      	mov	r1, r3
 800ae28:	68f8      	ldr	r0, [r7, #12]
 800ae2a:	f000 fc79 	bl	800b720 <SCSI_Read12>
 800ae2e:	4603      	mov	r3, r0
 800ae30:	75fb      	strb	r3, [r7, #23]
    break;
 800ae32:	e026      	b.n	800ae82 <SCSI_ProcessCmd+0x192>

  case SCSI_WRITE10:
    ret = SCSI_Write10(pdev, lun, cmd);
 800ae34:	7afb      	ldrb	r3, [r7, #11]
 800ae36:	687a      	ldr	r2, [r7, #4]
 800ae38:	4619      	mov	r1, r3
 800ae3a:	68f8      	ldr	r0, [r7, #12]
 800ae3c:	f000 fd15 	bl	800b86a <SCSI_Write10>
 800ae40:	4603      	mov	r3, r0
 800ae42:	75fb      	strb	r3, [r7, #23]
    break;
 800ae44:	e01d      	b.n	800ae82 <SCSI_ProcessCmd+0x192>

  case SCSI_WRITE12:
    ret = SCSI_Write12(pdev, lun, cmd);
 800ae46:	7afb      	ldrb	r3, [r7, #11]
 800ae48:	687a      	ldr	r2, [r7, #4]
 800ae4a:	4619      	mov	r1, r3
 800ae4c:	68f8      	ldr	r0, [r7, #12]
 800ae4e:	f000 fdcb 	bl	800b9e8 <SCSI_Write12>
 800ae52:	4603      	mov	r3, r0
 800ae54:	75fb      	strb	r3, [r7, #23]
    break;
 800ae56:	e014      	b.n	800ae82 <SCSI_ProcessCmd+0x192>

  case SCSI_VERIFY10:
    ret = SCSI_Verify10(pdev, lun, cmd);
 800ae58:	7afb      	ldrb	r3, [r7, #11]
 800ae5a:	687a      	ldr	r2, [r7, #4]
 800ae5c:	4619      	mov	r1, r3
 800ae5e:	68f8      	ldr	r0, [r7, #12]
 800ae60:	f000 fe91 	bl	800bb86 <SCSI_Verify10>
 800ae64:	4603      	mov	r3, r0
 800ae66:	75fb      	strb	r3, [r7, #23]
    break;
 800ae68:	e00b      	b.n	800ae82 <SCSI_ProcessCmd+0x192>

  default:
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 800ae6a:	7af9      	ldrb	r1, [r7, #11]
 800ae6c:	2320      	movs	r3, #32
 800ae6e:	2205      	movs	r2, #5
 800ae70:	68f8      	ldr	r0, [r7, #12]
 800ae72:	f000 fb0a 	bl	800b48a <SCSI_SenseCode>
    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800ae76:	693b      	ldr	r3, [r7, #16]
 800ae78:	2202      	movs	r2, #2
 800ae7a:	725a      	strb	r2, [r3, #9]
    ret = -1;
 800ae7c:	23ff      	movs	r3, #255	; 0xff
 800ae7e:	75fb      	strb	r3, [r7, #23]
    break;
 800ae80:	bf00      	nop
  }

  return ret;
 800ae82:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ae86:	4618      	mov	r0, r3
 800ae88:	3718      	adds	r7, #24
 800ae8a:	46bd      	mov	sp, r7
 800ae8c:	bd80      	pop	{r7, pc}

0800ae8e <SCSI_TestUnitReady>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800ae8e:	b580      	push	{r7, lr}
 800ae90:	b086      	sub	sp, #24
 800ae92:	af00      	add	r7, sp, #0
 800ae94:	60f8      	str	r0, [r7, #12]
 800ae96:	460b      	mov	r3, r1
 800ae98:	607a      	str	r2, [r7, #4]
 800ae9a:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aea2:	617b      	str	r3, [r7, #20]

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 800aea4:	697b      	ldr	r3, [r7, #20]
 800aea6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d00a      	beq.n	800aec4 <SCSI_TestUnitReady+0x36>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800aeae:	697b      	ldr	r3, [r7, #20]
 800aeb0:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800aeb4:	2320      	movs	r3, #32
 800aeb6:	2205      	movs	r2, #5
 800aeb8:	68f8      	ldr	r0, [r7, #12]
 800aeba:	f000 fae6 	bl	800b48a <SCSI_SenseCode>

    return -1;
 800aebe:	f04f 33ff 	mov.w	r3, #4294967295
 800aec2:	e02a      	b.n	800af1a <SCSI_TestUnitReady+0x8c>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800aec4:	697b      	ldr	r3, [r7, #20]
 800aec6:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800aeca:	2b02      	cmp	r3, #2
 800aecc:	d10b      	bne.n	800aee6 <SCSI_TestUnitReady+0x58>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800aece:	7af9      	ldrb	r1, [r7, #11]
 800aed0:	233a      	movs	r3, #58	; 0x3a
 800aed2:	2202      	movs	r2, #2
 800aed4:	68f8      	ldr	r0, [r7, #12]
 800aed6:	f000 fad8 	bl	800b48a <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800aeda:	697b      	ldr	r3, [r7, #20]
 800aedc:	2205      	movs	r2, #5
 800aede:	721a      	strb	r2, [r3, #8]
    return -1;
 800aee0:	f04f 33ff 	mov.w	r3, #4294967295
 800aee4:	e019      	b.n	800af1a <SCSI_TestUnitReady+0x8c>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aeec:	689b      	ldr	r3, [r3, #8]
 800aeee:	7afa      	ldrb	r2, [r7, #11]
 800aef0:	4610      	mov	r0, r2
 800aef2:	4798      	blx	r3
 800aef4:	4603      	mov	r3, r0
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d00b      	beq.n	800af12 <SCSI_TestUnitReady+0x84>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800aefa:	7af9      	ldrb	r1, [r7, #11]
 800aefc:	233a      	movs	r3, #58	; 0x3a
 800aefe:	2202      	movs	r2, #2
 800af00:	68f8      	ldr	r0, [r7, #12]
 800af02:	f000 fac2 	bl	800b48a <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800af06:	697b      	ldr	r3, [r7, #20]
 800af08:	2205      	movs	r2, #5
 800af0a:	721a      	strb	r2, [r3, #8]

    return -1;
 800af0c:	f04f 33ff 	mov.w	r3, #4294967295
 800af10:	e003      	b.n	800af1a <SCSI_TestUnitReady+0x8c>
  }
  hmsc->bot_data_length = 0U;
 800af12:	697b      	ldr	r3, [r7, #20]
 800af14:	2200      	movs	r2, #0
 800af16:	60da      	str	r2, [r3, #12]

  return 0;
 800af18:	2300      	movs	r3, #0
}
 800af1a:	4618      	mov	r0, r3
 800af1c:	3718      	adds	r7, #24
 800af1e:	46bd      	mov	sp, r7
 800af20:	bd80      	pop	{r7, pc}
	...

0800af24 <SCSI_Inquiry>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800af24:	b580      	push	{r7, lr}
 800af26:	b088      	sub	sp, #32
 800af28:	af00      	add	r7, sp, #0
 800af2a:	60f8      	str	r0, [r7, #12]
 800af2c:	460b      	mov	r3, r1
 800af2e:	607a      	str	r2, [r7, #4]
 800af30:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800af38:	61bb      	str	r3, [r7, #24]

  if (hmsc->cbw.dDataLength == 0U)
 800af3a:	69bb      	ldr	r3, [r7, #24]
 800af3c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800af40:	2b00      	cmp	r3, #0
 800af42:	d10a      	bne.n	800af5a <SCSI_Inquiry+0x36>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800af44:	69bb      	ldr	r3, [r7, #24]
 800af46:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800af4a:	2320      	movs	r3, #32
 800af4c:	2205      	movs	r2, #5
 800af4e:	68f8      	ldr	r0, [r7, #12]
 800af50:	f000 fa9b 	bl	800b48a <SCSI_SenseCode>
    return -1;
 800af54:	f04f 33ff 	mov.w	r3, #4294967295
 800af58:	e04a      	b.n	800aff0 <SCSI_Inquiry+0xcc>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	3301      	adds	r3, #1
 800af5e:	781b      	ldrb	r3, [r3, #0]
 800af60:	f003 0301 	and.w	r3, r3, #1
 800af64:	2b00      	cmp	r3, #0
 800af66:	d020      	beq.n	800afaa <SCSI_Inquiry+0x86>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	3302      	adds	r3, #2
 800af6c:	781b      	ldrb	r3, [r3, #0]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d105      	bne.n	800af7e <SCSI_Inquiry+0x5a>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 800af72:	2206      	movs	r2, #6
 800af74:	4920      	ldr	r1, [pc, #128]	; (800aff8 <SCSI_Inquiry+0xd4>)
 800af76:	69b8      	ldr	r0, [r7, #24]
 800af78:	f000 ff50 	bl	800be1c <SCSI_UpdateBotData>
 800af7c:	e037      	b.n	800afee <SCSI_Inquiry+0xca>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	3302      	adds	r3, #2
 800af82:	781b      	ldrb	r3, [r3, #0]
 800af84:	2b80      	cmp	r3, #128	; 0x80
 800af86:	d105      	bne.n	800af94 <SCSI_Inquiry+0x70>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 800af88:	2208      	movs	r2, #8
 800af8a:	491c      	ldr	r1, [pc, #112]	; (800affc <SCSI_Inquiry+0xd8>)
 800af8c:	69b8      	ldr	r0, [r7, #24]
 800af8e:	f000 ff45 	bl	800be1c <SCSI_UpdateBotData>
 800af92:	e02c      	b.n	800afee <SCSI_Inquiry+0xca>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 800af94:	69bb      	ldr	r3, [r7, #24]
 800af96:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800af9a:	2324      	movs	r3, #36	; 0x24
 800af9c:	2205      	movs	r2, #5
 800af9e:	68f8      	ldr	r0, [r7, #12]
 800afa0:	f000 fa73 	bl	800b48a <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 800afa4:	f04f 33ff 	mov.w	r3, #4294967295
 800afa8:	e022      	b.n	800aff0 <SCSI_Inquiry+0xcc>
    }
  }
  else
  {
    pPage = (uint8_t *)&((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800afb0:	69d9      	ldr	r1, [r3, #28]
 800afb2:	7afa      	ldrb	r2, [r7, #11]
 800afb4:	4613      	mov	r3, r2
 800afb6:	00db      	lsls	r3, r3, #3
 800afb8:	4413      	add	r3, r2
 800afba:	009b      	lsls	r3, r3, #2
 800afbc:	440b      	add	r3, r1
 800afbe:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 800afc0:	697b      	ldr	r3, [r7, #20]
 800afc2:	3304      	adds	r3, #4
 800afc4:	781b      	ldrb	r3, [r3, #0]
 800afc6:	b29b      	uxth	r3, r3
 800afc8:	3305      	adds	r3, #5
 800afca:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	3304      	adds	r3, #4
 800afd0:	781b      	ldrb	r3, [r3, #0]
 800afd2:	b29b      	uxth	r3, r3
 800afd4:	8bfa      	ldrh	r2, [r7, #30]
 800afd6:	429a      	cmp	r2, r3
 800afd8:	d303      	bcc.n	800afe2 <SCSI_Inquiry+0xbe>
    {
      len = params[4];
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	3304      	adds	r3, #4
 800afde:	781b      	ldrb	r3, [r3, #0]
 800afe0:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 800afe2:	8bfb      	ldrh	r3, [r7, #30]
 800afe4:	461a      	mov	r2, r3
 800afe6:	6979      	ldr	r1, [r7, #20]
 800afe8:	69b8      	ldr	r0, [r7, #24]
 800afea:	f000 ff17 	bl	800be1c <SCSI_UpdateBotData>
  }

  return 0;
 800afee:	2300      	movs	r3, #0
}
 800aff0:	4618      	mov	r0, r3
 800aff2:	3720      	adds	r7, #32
 800aff4:	46bd      	mov	sp, r7
 800aff6:	bd80      	pop	{r7, pc}
 800aff8:	200000c0 	.word	0x200000c0
 800affc:	200000c8 	.word	0x200000c8

0800b000 <SCSI_ReadCapacity10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800b000:	b580      	push	{r7, lr}
 800b002:	b086      	sub	sp, #24
 800b004:	af00      	add	r7, sp, #0
 800b006:	60f8      	str	r0, [r7, #12]
 800b008:	460b      	mov	r3, r1
 800b00a:	607a      	str	r2, [r7, #4]
 800b00c:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b014:	617b      	str	r3, [r7, #20]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b01c:	685b      	ldr	r3, [r3, #4]
 800b01e:	697a      	ldr	r2, [r7, #20]
 800b020:	f502 711a 	add.w	r1, r2, #616	; 0x268
 800b024:	697a      	ldr	r2, [r7, #20]
 800b026:	f502 7219 	add.w	r2, r2, #612	; 0x264
 800b02a:	7af8      	ldrb	r0, [r7, #11]
 800b02c:	4798      	blx	r3
 800b02e:	4603      	mov	r3, r0
 800b030:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800b032:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b036:	2b00      	cmp	r3, #0
 800b038:	d104      	bne.n	800b044 <SCSI_ReadCapacity10+0x44>
 800b03a:	697b      	ldr	r3, [r7, #20]
 800b03c:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800b040:	2b02      	cmp	r3, #2
 800b042:	d108      	bne.n	800b056 <SCSI_ReadCapacity10+0x56>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800b044:	7af9      	ldrb	r1, [r7, #11]
 800b046:	233a      	movs	r3, #58	; 0x3a
 800b048:	2202      	movs	r2, #2
 800b04a:	68f8      	ldr	r0, [r7, #12]
 800b04c:	f000 fa1d 	bl	800b48a <SCSI_SenseCode>
    return -1;
 800b050:	f04f 33ff 	mov.w	r3, #4294967295
 800b054:	e03f      	b.n	800b0d6 <SCSI_ReadCapacity10+0xd6>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800b056:	697b      	ldr	r3, [r7, #20]
 800b058:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800b05c:	3b01      	subs	r3, #1
 800b05e:	0e1b      	lsrs	r3, r3, #24
 800b060:	b2da      	uxtb	r2, r3
 800b062:	697b      	ldr	r3, [r7, #20]
 800b064:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800b066:	697b      	ldr	r3, [r7, #20]
 800b068:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800b06c:	3b01      	subs	r3, #1
 800b06e:	0c1b      	lsrs	r3, r3, #16
 800b070:	b2da      	uxtb	r2, r3
 800b072:	697b      	ldr	r3, [r7, #20]
 800b074:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800b076:	697b      	ldr	r3, [r7, #20]
 800b078:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800b07c:	3b01      	subs	r3, #1
 800b07e:	0a1b      	lsrs	r3, r3, #8
 800b080:	b2da      	uxtb	r2, r3
 800b082:	697b      	ldr	r3, [r7, #20]
 800b084:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800b086:	697b      	ldr	r3, [r7, #20]
 800b088:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800b08c:	b2db      	uxtb	r3, r3
 800b08e:	3b01      	subs	r3, #1
 800b090:	b2da      	uxtb	r2, r3
 800b092:	697b      	ldr	r3, [r7, #20]
 800b094:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800b096:	697b      	ldr	r3, [r7, #20]
 800b098:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800b09c:	161b      	asrs	r3, r3, #24
 800b09e:	b2da      	uxtb	r2, r3
 800b0a0:	697b      	ldr	r3, [r7, #20]
 800b0a2:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800b0a4:	697b      	ldr	r3, [r7, #20]
 800b0a6:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800b0aa:	141b      	asrs	r3, r3, #16
 800b0ac:	b2da      	uxtb	r2, r3
 800b0ae:	697b      	ldr	r3, [r7, #20]
 800b0b0:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800b0b2:	697b      	ldr	r3, [r7, #20]
 800b0b4:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800b0b8:	0a1b      	lsrs	r3, r3, #8
 800b0ba:	b29b      	uxth	r3, r3
 800b0bc:	b2da      	uxtb	r2, r3
 800b0be:	697b      	ldr	r3, [r7, #20]
 800b0c0:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 800b0c2:	697b      	ldr	r3, [r7, #20]
 800b0c4:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800b0c8:	b2da      	uxtb	r2, r3
 800b0ca:	697b      	ldr	r3, [r7, #20]
 800b0cc:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 800b0ce:	697b      	ldr	r3, [r7, #20]
 800b0d0:	2208      	movs	r2, #8
 800b0d2:	60da      	str	r2, [r3, #12]

  return 0;
 800b0d4:	2300      	movs	r3, #0

}
 800b0d6:	4618      	mov	r0, r3
 800b0d8:	3718      	adds	r7, #24
 800b0da:	46bd      	mov	sp, r7
 800b0dc:	bd80      	pop	{r7, pc}

0800b0de <SCSI_ReadCapacity16>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800b0de:	b580      	push	{r7, lr}
 800b0e0:	b088      	sub	sp, #32
 800b0e2:	af00      	add	r7, sp, #0
 800b0e4:	60f8      	str	r0, [r7, #12]
 800b0e6:	460b      	mov	r3, r1
 800b0e8:	607a      	str	r2, [r7, #4]
 800b0ea:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b0f2:	61bb      	str	r3, [r7, #24]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b0fa:	685b      	ldr	r3, [r3, #4]
 800b0fc:	69ba      	ldr	r2, [r7, #24]
 800b0fe:	f502 711a 	add.w	r1, r2, #616	; 0x268
 800b102:	69ba      	ldr	r2, [r7, #24]
 800b104:	f502 7219 	add.w	r2, r2, #612	; 0x264
 800b108:	7af8      	ldrb	r0, [r7, #11]
 800b10a:	4798      	blx	r3
 800b10c:	4603      	mov	r3, r0
 800b10e:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800b110:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b114:	2b00      	cmp	r3, #0
 800b116:	d104      	bne.n	800b122 <SCSI_ReadCapacity16+0x44>
 800b118:	69bb      	ldr	r3, [r7, #24]
 800b11a:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800b11e:	2b02      	cmp	r3, #2
 800b120:	d108      	bne.n	800b134 <SCSI_ReadCapacity16+0x56>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800b122:	7af9      	ldrb	r1, [r7, #11]
 800b124:	233a      	movs	r3, #58	; 0x3a
 800b126:	2202      	movs	r2, #2
 800b128:	68f8      	ldr	r0, [r7, #12]
 800b12a:	f000 f9ae 	bl	800b48a <SCSI_SenseCode>
    return -1;
 800b12e:	f04f 33ff 	mov.w	r3, #4294967295
 800b132:	e074      	b.n	800b21e <SCSI_ReadCapacity16+0x140>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	330a      	adds	r3, #10
 800b138:	781b      	ldrb	r3, [r3, #0]
 800b13a:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	330b      	adds	r3, #11
 800b140:	781b      	ldrb	r3, [r3, #0]
 800b142:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800b144:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	330c      	adds	r3, #12
 800b14a:	781b      	ldrb	r3, [r3, #0]
 800b14c:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800b14e:	4313      	orrs	r3, r2
                           (uint32_t)params[13];
 800b150:	687a      	ldr	r2, [r7, #4]
 800b152:	320d      	adds	r2, #13
 800b154:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800b156:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800b158:	69bb      	ldr	r3, [r7, #24]
 800b15a:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800b15c:	2300      	movs	r3, #0
 800b15e:	77fb      	strb	r3, [r7, #31]
 800b160:	e007      	b.n	800b172 <SCSI_ReadCapacity16+0x94>
  {
    hmsc->bot_data[idx] = 0U;
 800b162:	7ffb      	ldrb	r3, [r7, #31]
 800b164:	69ba      	ldr	r2, [r7, #24]
 800b166:	4413      	add	r3, r2
 800b168:	2200      	movs	r2, #0
 800b16a:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800b16c:	7ffb      	ldrb	r3, [r7, #31]
 800b16e:	3301      	adds	r3, #1
 800b170:	77fb      	strb	r3, [r7, #31]
 800b172:	7ffa      	ldrb	r2, [r7, #31]
 800b174:	69bb      	ldr	r3, [r7, #24]
 800b176:	68db      	ldr	r3, [r3, #12]
 800b178:	429a      	cmp	r2, r3
 800b17a:	d3f2      	bcc.n	800b162 <SCSI_ReadCapacity16+0x84>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800b17c:	69bb      	ldr	r3, [r7, #24]
 800b17e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800b182:	3b01      	subs	r3, #1
 800b184:	0e1b      	lsrs	r3, r3, #24
 800b186:	b2da      	uxtb	r2, r3
 800b188:	69bb      	ldr	r3, [r7, #24]
 800b18a:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800b18c:	69bb      	ldr	r3, [r7, #24]
 800b18e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800b192:	3b01      	subs	r3, #1
 800b194:	0c1b      	lsrs	r3, r3, #16
 800b196:	b2da      	uxtb	r2, r3
 800b198:	69bb      	ldr	r3, [r7, #24]
 800b19a:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800b19c:	69bb      	ldr	r3, [r7, #24]
 800b19e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800b1a2:	3b01      	subs	r3, #1
 800b1a4:	0a1b      	lsrs	r3, r3, #8
 800b1a6:	b2da      	uxtb	r2, r3
 800b1a8:	69bb      	ldr	r3, [r7, #24]
 800b1aa:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800b1ac:	69bb      	ldr	r3, [r7, #24]
 800b1ae:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800b1b2:	b2db      	uxtb	r3, r3
 800b1b4:	3b01      	subs	r3, #1
 800b1b6:	b2da      	uxtb	r2, r3
 800b1b8:	69bb      	ldr	r3, [r7, #24]
 800b1ba:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800b1bc:	69bb      	ldr	r3, [r7, #24]
 800b1be:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800b1c2:	161b      	asrs	r3, r3, #24
 800b1c4:	b2da      	uxtb	r2, r3
 800b1c6:	69bb      	ldr	r3, [r7, #24]
 800b1c8:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800b1ca:	69bb      	ldr	r3, [r7, #24]
 800b1cc:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800b1d0:	141b      	asrs	r3, r3, #16
 800b1d2:	b2da      	uxtb	r2, r3
 800b1d4:	69bb      	ldr	r3, [r7, #24]
 800b1d6:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800b1d8:	69bb      	ldr	r3, [r7, #24]
 800b1da:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800b1de:	0a1b      	lsrs	r3, r3, #8
 800b1e0:	b29b      	uxth	r3, r3
 800b1e2:	b2da      	uxtb	r2, r3
 800b1e4:	69bb      	ldr	r3, [r7, #24]
 800b1e6:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 800b1e8:	69bb      	ldr	r3, [r7, #24]
 800b1ea:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800b1ee:	b2da      	uxtb	r2, r3
 800b1f0:	69bb      	ldr	r3, [r7, #24]
 800b1f2:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	330a      	adds	r3, #10
 800b1f8:	781b      	ldrb	r3, [r3, #0]
 800b1fa:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	330b      	adds	r3, #11
 800b200:	781b      	ldrb	r3, [r3, #0]
 800b202:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800b204:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	330c      	adds	r3, #12
 800b20a:	781b      	ldrb	r3, [r3, #0]
 800b20c:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800b20e:	4313      	orrs	r3, r2
                           (uint32_t)params[13];
 800b210:	687a      	ldr	r2, [r7, #4]
 800b212:	320d      	adds	r2, #13
 800b214:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800b216:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800b218:	69bb      	ldr	r3, [r7, #24]
 800b21a:	60da      	str	r2, [r3, #12]

  return 0;
 800b21c:	2300      	movs	r3, #0
}
 800b21e:	4618      	mov	r0, r3
 800b220:	3720      	adds	r7, #32
 800b222:	46bd      	mov	sp, r7
 800b224:	bd80      	pop	{r7, pc}

0800b226 <SCSI_ReadFormatCapacity>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800b226:	b580      	push	{r7, lr}
 800b228:	b088      	sub	sp, #32
 800b22a:	af00      	add	r7, sp, #0
 800b22c:	60f8      	str	r0, [r7, #12]
 800b22e:	460b      	mov	r3, r1
 800b230:	607a      	str	r2, [r7, #4]
 800b232:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b23a:	61bb      	str	r3, [r7, #24]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size);
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b242:	685b      	ldr	r3, [r3, #4]
 800b244:	f107 0214 	add.w	r2, r7, #20
 800b248:	f107 0110 	add.w	r1, r7, #16
 800b24c:	7af8      	ldrb	r0, [r7, #11]
 800b24e:	4798      	blx	r3
 800b250:	4603      	mov	r3, r0
 800b252:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800b254:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d104      	bne.n	800b266 <SCSI_ReadFormatCapacity+0x40>
 800b25c:	69bb      	ldr	r3, [r7, #24]
 800b25e:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800b262:	2b02      	cmp	r3, #2
 800b264:	d108      	bne.n	800b278 <SCSI_ReadFormatCapacity+0x52>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800b266:	7af9      	ldrb	r1, [r7, #11]
 800b268:	233a      	movs	r3, #58	; 0x3a
 800b26a:	2202      	movs	r2, #2
 800b26c:	68f8      	ldr	r0, [r7, #12]
 800b26e:	f000 f90c 	bl	800b48a <SCSI_SenseCode>
    return -1;
 800b272:	f04f 33ff 	mov.w	r3, #4294967295
 800b276:	e03e      	b.n	800b2f6 <SCSI_ReadFormatCapacity+0xd0>
  }

  for (i = 0U; i < 12U ; i++)
 800b278:	2300      	movs	r3, #0
 800b27a:	83fb      	strh	r3, [r7, #30]
 800b27c:	e007      	b.n	800b28e <SCSI_ReadFormatCapacity+0x68>
  {
    hmsc->bot_data[i] = 0U;
 800b27e:	8bfb      	ldrh	r3, [r7, #30]
 800b280:	69ba      	ldr	r2, [r7, #24]
 800b282:	4413      	add	r3, r2
 800b284:	2200      	movs	r2, #0
 800b286:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 800b288:	8bfb      	ldrh	r3, [r7, #30]
 800b28a:	3301      	adds	r3, #1
 800b28c:	83fb      	strh	r3, [r7, #30]
 800b28e:	8bfb      	ldrh	r3, [r7, #30]
 800b290:	2b0b      	cmp	r3, #11
 800b292:	d9f4      	bls.n	800b27e <SCSI_ReadFormatCapacity+0x58>
  }

  hmsc->bot_data[3] = 0x08U;
 800b294:	69bb      	ldr	r3, [r7, #24]
 800b296:	2208      	movs	r2, #8
 800b298:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 800b29a:	693b      	ldr	r3, [r7, #16]
 800b29c:	3b01      	subs	r3, #1
 800b29e:	0e1b      	lsrs	r3, r3, #24
 800b2a0:	b2da      	uxtb	r2, r3
 800b2a2:	69bb      	ldr	r3, [r7, #24]
 800b2a4:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 800b2a6:	693b      	ldr	r3, [r7, #16]
 800b2a8:	3b01      	subs	r3, #1
 800b2aa:	0c1b      	lsrs	r3, r3, #16
 800b2ac:	b2da      	uxtb	r2, r3
 800b2ae:	69bb      	ldr	r3, [r7, #24]
 800b2b0:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 800b2b2:	693b      	ldr	r3, [r7, #16]
 800b2b4:	3b01      	subs	r3, #1
 800b2b6:	0a1b      	lsrs	r3, r3, #8
 800b2b8:	b2da      	uxtb	r2, r3
 800b2ba:	69bb      	ldr	r3, [r7, #24]
 800b2bc:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 800b2be:	693b      	ldr	r3, [r7, #16]
 800b2c0:	b2db      	uxtb	r3, r3
 800b2c2:	3b01      	subs	r3, #1
 800b2c4:	b2da      	uxtb	r2, r3
 800b2c6:	69bb      	ldr	r3, [r7, #24]
 800b2c8:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 800b2ca:	69bb      	ldr	r3, [r7, #24]
 800b2cc:	2202      	movs	r2, #2
 800b2ce:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 800b2d0:	8abb      	ldrh	r3, [r7, #20]
 800b2d2:	141b      	asrs	r3, r3, #16
 800b2d4:	b2da      	uxtb	r2, r3
 800b2d6:	69bb      	ldr	r3, [r7, #24]
 800b2d8:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 800b2da:	8abb      	ldrh	r3, [r7, #20]
 800b2dc:	0a1b      	lsrs	r3, r3, #8
 800b2de:	b29b      	uxth	r3, r3
 800b2e0:	b2da      	uxtb	r2, r3
 800b2e2:	69bb      	ldr	r3, [r7, #24]
 800b2e4:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 800b2e6:	8abb      	ldrh	r3, [r7, #20]
 800b2e8:	b2da      	uxtb	r2, r3
 800b2ea:	69bb      	ldr	r3, [r7, #24]
 800b2ec:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 800b2ee:	69bb      	ldr	r3, [r7, #24]
 800b2f0:	220c      	movs	r2, #12
 800b2f2:	60da      	str	r2, [r3, #12]

  return 0;
 800b2f4:	2300      	movs	r3, #0
}
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	3720      	adds	r7, #32
 800b2fa:	46bd      	mov	sp, r7
 800b2fc:	bd80      	pop	{r7, pc}
	...

0800b300 <SCSI_ModeSense6>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800b300:	b580      	push	{r7, lr}
 800b302:	b086      	sub	sp, #24
 800b304:	af00      	add	r7, sp, #0
 800b306:	60f8      	str	r0, [r7, #12]
 800b308:	460b      	mov	r3, r1
 800b30a:	607a      	str	r2, [r7, #4]
 800b30c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b314:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 800b316:	2317      	movs	r3, #23
 800b318:	82fb      	strh	r3, [r7, #22]

  if (params[4] <= len)
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	3304      	adds	r3, #4
 800b31e:	781b      	ldrb	r3, [r3, #0]
 800b320:	b29b      	uxth	r3, r3
 800b322:	8afa      	ldrh	r2, [r7, #22]
 800b324:	429a      	cmp	r2, r3
 800b326:	d303      	bcc.n	800b330 <SCSI_ModeSense6+0x30>
  {
    len = params[4];
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	3304      	adds	r3, #4
 800b32c:	781b      	ldrb	r3, [r3, #0]
 800b32e:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 800b330:	8afb      	ldrh	r3, [r7, #22]
 800b332:	461a      	mov	r2, r3
 800b334:	4904      	ldr	r1, [pc, #16]	; (800b348 <SCSI_ModeSense6+0x48>)
 800b336:	6938      	ldr	r0, [r7, #16]
 800b338:	f000 fd70 	bl	800be1c <SCSI_UpdateBotData>

  return 0;
 800b33c:	2300      	movs	r3, #0
}
 800b33e:	4618      	mov	r0, r3
 800b340:	3718      	adds	r7, #24
 800b342:	46bd      	mov	sp, r7
 800b344:	bd80      	pop	{r7, pc}
 800b346:	bf00      	nop
 800b348:	200000d0 	.word	0x200000d0

0800b34c <SCSI_ModeSense10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800b34c:	b580      	push	{r7, lr}
 800b34e:	b086      	sub	sp, #24
 800b350:	af00      	add	r7, sp, #0
 800b352:	60f8      	str	r0, [r7, #12]
 800b354:	460b      	mov	r3, r1
 800b356:	607a      	str	r2, [r7, #4]
 800b358:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b360:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 800b362:	231b      	movs	r3, #27
 800b364:	82fb      	strh	r3, [r7, #22]

  if (params[8] <= len)
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	3308      	adds	r3, #8
 800b36a:	781b      	ldrb	r3, [r3, #0]
 800b36c:	b29b      	uxth	r3, r3
 800b36e:	8afa      	ldrh	r2, [r7, #22]
 800b370:	429a      	cmp	r2, r3
 800b372:	d303      	bcc.n	800b37c <SCSI_ModeSense10+0x30>
  {
    len = params[8];
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	3308      	adds	r3, #8
 800b378:	781b      	ldrb	r3, [r3, #0]
 800b37a:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 800b37c:	8afb      	ldrh	r3, [r7, #22]
 800b37e:	461a      	mov	r2, r3
 800b380:	4904      	ldr	r1, [pc, #16]	; (800b394 <SCSI_ModeSense10+0x48>)
 800b382:	6938      	ldr	r0, [r7, #16]
 800b384:	f000 fd4a 	bl	800be1c <SCSI_UpdateBotData>

  return 0;
 800b388:	2300      	movs	r3, #0
}
 800b38a:	4618      	mov	r0, r3
 800b38c:	3718      	adds	r7, #24
 800b38e:	46bd      	mov	sp, r7
 800b390:	bd80      	pop	{r7, pc}
 800b392:	bf00      	nop
 800b394:	200000e8 	.word	0x200000e8

0800b398 <SCSI_RequestSense>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800b398:	b580      	push	{r7, lr}
 800b39a:	b086      	sub	sp, #24
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	60f8      	str	r0, [r7, #12]
 800b3a0:	460b      	mov	r3, r1
 800b3a2:	607a      	str	r2, [r7, #4]
 800b3a4:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b3ac:	613b      	str	r3, [r7, #16]

  if (hmsc->cbw.dDataLength == 0U)
 800b3ae:	693b      	ldr	r3, [r7, #16]
 800b3b0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d10a      	bne.n	800b3ce <SCSI_RequestSense+0x36>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800b3b8:	693b      	ldr	r3, [r7, #16]
 800b3ba:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800b3be:	2320      	movs	r3, #32
 800b3c0:	2205      	movs	r2, #5
 800b3c2:	68f8      	ldr	r0, [r7, #12]
 800b3c4:	f000 f861 	bl	800b48a <SCSI_SenseCode>
    return -1;
 800b3c8:	f04f 33ff 	mov.w	r3, #4294967295
 800b3cc:	e059      	b.n	800b482 <SCSI_RequestSense+0xea>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800b3ce:	2300      	movs	r3, #0
 800b3d0:	75fb      	strb	r3, [r7, #23]
 800b3d2:	e007      	b.n	800b3e4 <SCSI_RequestSense+0x4c>
  {
    hmsc->bot_data[i] = 0U;
 800b3d4:	7dfb      	ldrb	r3, [r7, #23]
 800b3d6:	693a      	ldr	r2, [r7, #16]
 800b3d8:	4413      	add	r3, r2
 800b3da:	2200      	movs	r2, #0
 800b3dc:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800b3de:	7dfb      	ldrb	r3, [r7, #23]
 800b3e0:	3301      	adds	r3, #1
 800b3e2:	75fb      	strb	r3, [r7, #23]
 800b3e4:	7dfb      	ldrb	r3, [r7, #23]
 800b3e6:	2b11      	cmp	r3, #17
 800b3e8:	d9f4      	bls.n	800b3d4 <SCSI_RequestSense+0x3c>
  }

  hmsc->bot_data[0] = 0x70U;
 800b3ea:	693b      	ldr	r3, [r7, #16]
 800b3ec:	2270      	movs	r2, #112	; 0x70
 800b3ee:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 800b3f0:	693b      	ldr	r3, [r7, #16]
 800b3f2:	220c      	movs	r2, #12
 800b3f4:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 800b3f6:	693b      	ldr	r3, [r7, #16]
 800b3f8:	f893 2260 	ldrb.w	r2, [r3, #608]	; 0x260
 800b3fc:	693b      	ldr	r3, [r7, #16]
 800b3fe:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800b402:	429a      	cmp	r2, r3
 800b404:	d02e      	beq.n	800b464 <SCSI_RequestSense+0xcc>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 800b406:	693b      	ldr	r3, [r7, #16]
 800b408:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800b40c:	461a      	mov	r2, r3
 800b40e:	693b      	ldr	r3, [r7, #16]
 800b410:	3248      	adds	r2, #72	; 0x48
 800b412:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 800b416:	693b      	ldr	r3, [r7, #16]
 800b418:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 800b41a:	693b      	ldr	r3, [r7, #16]
 800b41c:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800b420:	693a      	ldr	r2, [r7, #16]
 800b422:	3348      	adds	r3, #72	; 0x48
 800b424:	00db      	lsls	r3, r3, #3
 800b426:	4413      	add	r3, r2
 800b428:	791a      	ldrb	r2, [r3, #4]
 800b42a:	693b      	ldr	r3, [r7, #16]
 800b42c:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 800b42e:	693b      	ldr	r3, [r7, #16]
 800b430:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800b434:	693a      	ldr	r2, [r7, #16]
 800b436:	3348      	adds	r3, #72	; 0x48
 800b438:	00db      	lsls	r3, r3, #3
 800b43a:	4413      	add	r3, r2
 800b43c:	795a      	ldrb	r2, [r3, #5]
 800b43e:	693b      	ldr	r3, [r7, #16]
 800b440:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 800b442:	693b      	ldr	r3, [r7, #16]
 800b444:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800b448:	3301      	adds	r3, #1
 800b44a:	b2da      	uxtb	r2, r3
 800b44c:	693b      	ldr	r3, [r7, #16]
 800b44e:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 800b452:	693b      	ldr	r3, [r7, #16]
 800b454:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800b458:	2b04      	cmp	r3, #4
 800b45a:	d103      	bne.n	800b464 <SCSI_RequestSense+0xcc>
    {
      hmsc->scsi_sense_head = 0U;
 800b45c:	693b      	ldr	r3, [r7, #16]
 800b45e:	2200      	movs	r2, #0
 800b460:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 800b464:	693b      	ldr	r3, [r7, #16]
 800b466:	2212      	movs	r2, #18
 800b468:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	3304      	adds	r3, #4
 800b46e:	781b      	ldrb	r3, [r3, #0]
 800b470:	2b12      	cmp	r3, #18
 800b472:	d805      	bhi.n	800b480 <SCSI_RequestSense+0xe8>
  {
    hmsc->bot_data_length = params[4];
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	3304      	adds	r3, #4
 800b478:	781b      	ldrb	r3, [r3, #0]
 800b47a:	461a      	mov	r2, r3
 800b47c:	693b      	ldr	r3, [r7, #16]
 800b47e:	60da      	str	r2, [r3, #12]
  }

  return 0;
 800b480:	2300      	movs	r3, #0
}
 800b482:	4618      	mov	r0, r3
 800b484:	3718      	adds	r7, #24
 800b486:	46bd      	mov	sp, r7
 800b488:	bd80      	pop	{r7, pc}

0800b48a <SCSI_SenseCode>:
* @param  ASC: Additional Sense Code
* @retval none

*/
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 800b48a:	b480      	push	{r7}
 800b48c:	b085      	sub	sp, #20
 800b48e:	af00      	add	r7, sp, #0
 800b490:	6078      	str	r0, [r7, #4]
 800b492:	4608      	mov	r0, r1
 800b494:	4611      	mov	r1, r2
 800b496:	461a      	mov	r2, r3
 800b498:	4603      	mov	r3, r0
 800b49a:	70fb      	strb	r3, [r7, #3]
 800b49c:	460b      	mov	r3, r1
 800b49e:	70bb      	strb	r3, [r7, #2]
 800b4a0:	4613      	mov	r3, r2
 800b4a2:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b4aa:	60fb      	str	r3, [r7, #12]

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800b4b2:	461a      	mov	r2, r3
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	3248      	adds	r2, #72	; 0x48
 800b4b8:	78b9      	ldrb	r1, [r7, #2]
 800b4ba:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800b4c4:	68fa      	ldr	r2, [r7, #12]
 800b4c6:	3348      	adds	r3, #72	; 0x48
 800b4c8:	00db      	lsls	r3, r3, #3
 800b4ca:	4413      	add	r3, r2
 800b4cc:	787a      	ldrb	r2, [r7, #1]
 800b4ce:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800b4d6:	68fa      	ldr	r2, [r7, #12]
 800b4d8:	3348      	adds	r3, #72	; 0x48
 800b4da:	00db      	lsls	r3, r3, #3
 800b4dc:	4413      	add	r3, r2
 800b4de:	2200      	movs	r2, #0
 800b4e0:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800b4e8:	3301      	adds	r3, #1
 800b4ea:	b2da      	uxtb	r2, r3
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800b4f8:	2b04      	cmp	r3, #4
 800b4fa:	d103      	bne.n	800b504 <SCSI_SenseCode+0x7a>
  {
    hmsc->scsi_sense_tail = 0U;
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	2200      	movs	r2, #0
 800b500:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  }
}
 800b504:	bf00      	nop
 800b506:	3714      	adds	r7, #20
 800b508:	46bd      	mov	sp, r7
 800b50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b50e:	4770      	bx	lr

0800b510 <SCSI_StartStopUnit>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800b510:	b580      	push	{r7, lr}
 800b512:	b086      	sub	sp, #24
 800b514:	af00      	add	r7, sp, #0
 800b516:	60f8      	str	r0, [r7, #12]
 800b518:	460b      	mov	r3, r1
 800b51a:	607a      	str	r2, [r7, #4]
 800b51c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b524:	617b      	str	r3, [r7, #20]

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 800b526:	697b      	ldr	r3, [r7, #20]
 800b528:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800b52c:	2b01      	cmp	r3, #1
 800b52e:	d10f      	bne.n	800b550 <SCSI_StartStopUnit+0x40>
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	3304      	adds	r3, #4
 800b534:	781b      	ldrb	r3, [r3, #0]
 800b536:	f003 0303 	and.w	r3, r3, #3
 800b53a:	2b02      	cmp	r3, #2
 800b53c:	d108      	bne.n	800b550 <SCSI_StartStopUnit+0x40>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800b53e:	7af9      	ldrb	r1, [r7, #11]
 800b540:	2324      	movs	r3, #36	; 0x24
 800b542:	2205      	movs	r2, #5
 800b544:	68f8      	ldr	r0, [r7, #12]
 800b546:	f7ff ffa0 	bl	800b48a <SCSI_SenseCode>

    return -1;
 800b54a:	f04f 33ff 	mov.w	r3, #4294967295
 800b54e:	e026      	b.n	800b59e <SCSI_StartStopUnit+0x8e>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	3304      	adds	r3, #4
 800b554:	781b      	ldrb	r3, [r3, #0]
 800b556:	f003 0303 	and.w	r3, r3, #3
 800b55a:	2b01      	cmp	r3, #1
 800b55c:	d104      	bne.n	800b568 <SCSI_StartStopUnit+0x58>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800b55e:	697b      	ldr	r3, [r7, #20]
 800b560:	2200      	movs	r2, #0
 800b562:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 800b566:	e016      	b.n	800b596 <SCSI_StartStopUnit+0x86>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	3304      	adds	r3, #4
 800b56c:	781b      	ldrb	r3, [r3, #0]
 800b56e:	f003 0303 	and.w	r3, r3, #3
 800b572:	2b02      	cmp	r3, #2
 800b574:	d104      	bne.n	800b580 <SCSI_StartStopUnit+0x70>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 800b576:	697b      	ldr	r3, [r7, #20]
 800b578:	2202      	movs	r2, #2
 800b57a:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 800b57e:	e00a      	b.n	800b596 <SCSI_StartStopUnit+0x86>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	3304      	adds	r3, #4
 800b584:	781b      	ldrb	r3, [r3, #0]
 800b586:	f003 0303 	and.w	r3, r3, #3
 800b58a:	2b03      	cmp	r3, #3
 800b58c:	d103      	bne.n	800b596 <SCSI_StartStopUnit+0x86>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800b58e:	697b      	ldr	r3, [r7, #20]
 800b590:	2200      	movs	r2, #0
 800b592:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 800b596:	697b      	ldr	r3, [r7, #20]
 800b598:	2200      	movs	r2, #0
 800b59a:	60da      	str	r2, [r3, #12]

  return 0;
 800b59c:	2300      	movs	r3, #0
}
 800b59e:	4618      	mov	r0, r3
 800b5a0:	3718      	adds	r7, #24
 800b5a2:	46bd      	mov	sp, r7
 800b5a4:	bd80      	pop	{r7, pc}

0800b5a6 <SCSI_AllowPreventRemovable>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800b5a6:	b480      	push	{r7}
 800b5a8:	b087      	sub	sp, #28
 800b5aa:	af00      	add	r7, sp, #0
 800b5ac:	60f8      	str	r0, [r7, #12]
 800b5ae:	460b      	mov	r3, r1
 800b5b0:	607a      	str	r2, [r7, #4]
 800b5b2:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b5ba:	617b      	str	r3, [r7, #20]

  if (params[4] == 0U)
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	3304      	adds	r3, #4
 800b5c0:	781b      	ldrb	r3, [r3, #0]
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d104      	bne.n	800b5d0 <SCSI_AllowPreventRemovable+0x2a>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800b5c6:	697b      	ldr	r3, [r7, #20]
 800b5c8:	2200      	movs	r2, #0
 800b5ca:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 800b5ce:	e003      	b.n	800b5d8 <SCSI_AllowPreventRemovable+0x32>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 800b5d0:	697b      	ldr	r3, [r7, #20]
 800b5d2:	2201      	movs	r2, #1
 800b5d4:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }

  hmsc->bot_data_length = 0U;
 800b5d8:	697b      	ldr	r3, [r7, #20]
 800b5da:	2200      	movs	r2, #0
 800b5dc:	60da      	str	r2, [r3, #12]

  return 0;
 800b5de:	2300      	movs	r3, #0
}
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	371c      	adds	r7, #28
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ea:	4770      	bx	lr

0800b5ec <SCSI_Read10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800b5ec:	b580      	push	{r7, lr}
 800b5ee:	b086      	sub	sp, #24
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	60f8      	str	r0, [r7, #12]
 800b5f4:	460b      	mov	r3, r1
 800b5f6:	607a      	str	r2, [r7, #4]
 800b5f8:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b600:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800b602:	697b      	ldr	r3, [r7, #20]
 800b604:	7a1b      	ldrb	r3, [r3, #8]
 800b606:	2b00      	cmp	r3, #0
 800b608:	d17c      	bne.n	800b704 <SCSI_Read10+0x118>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800b60a:	697b      	ldr	r3, [r7, #20]
 800b60c:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800b610:	b25b      	sxtb	r3, r3
 800b612:	2b00      	cmp	r3, #0
 800b614:	db0a      	blt.n	800b62c <SCSI_Read10+0x40>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800b616:	697b      	ldr	r3, [r7, #20]
 800b618:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800b61c:	2320      	movs	r3, #32
 800b61e:	2205      	movs	r2, #5
 800b620:	68f8      	ldr	r0, [r7, #12]
 800b622:	f7ff ff32 	bl	800b48a <SCSI_SenseCode>
      return -1;
 800b626:	f04f 33ff 	mov.w	r3, #4294967295
 800b62a:	e075      	b.n	800b718 <SCSI_Read10+0x12c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800b62c:	697b      	ldr	r3, [r7, #20]
 800b62e:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800b632:	2b02      	cmp	r3, #2
 800b634:	d108      	bne.n	800b648 <SCSI_Read10+0x5c>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800b636:	7af9      	ldrb	r1, [r7, #11]
 800b638:	233a      	movs	r3, #58	; 0x3a
 800b63a:	2202      	movs	r2, #2
 800b63c:	68f8      	ldr	r0, [r7, #12]
 800b63e:	f7ff ff24 	bl	800b48a <SCSI_SenseCode>

      return -1;
 800b642:	f04f 33ff 	mov.w	r3, #4294967295
 800b646:	e067      	b.n	800b718 <SCSI_Read10+0x12c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b64e:	689b      	ldr	r3, [r3, #8]
 800b650:	7afa      	ldrb	r2, [r7, #11]
 800b652:	4610      	mov	r0, r2
 800b654:	4798      	blx	r3
 800b656:	4603      	mov	r3, r0
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d008      	beq.n	800b66e <SCSI_Read10+0x82>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800b65c:	7af9      	ldrb	r1, [r7, #11]
 800b65e:	233a      	movs	r3, #58	; 0x3a
 800b660:	2202      	movs	r2, #2
 800b662:	68f8      	ldr	r0, [r7, #12]
 800b664:	f7ff ff11 	bl	800b48a <SCSI_SenseCode>
      return -1;
 800b668:	f04f 33ff 	mov.w	r3, #4294967295
 800b66c:	e054      	b.n	800b718 <SCSI_Read10+0x12c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	3302      	adds	r3, #2
 800b672:	781b      	ldrb	r3, [r3, #0]
 800b674:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	3303      	adds	r3, #3
 800b67a:	781b      	ldrb	r3, [r3, #0]
 800b67c:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800b67e:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	3304      	adds	r3, #4
 800b684:	781b      	ldrb	r3, [r3, #0]
 800b686:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800b688:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800b68a:	687a      	ldr	r2, [r7, #4]
 800b68c:	3205      	adds	r2, #5
 800b68e:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800b690:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800b692:	697b      	ldr	r3, [r7, #20]
 800b694:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	3307      	adds	r3, #7
 800b69c:	781b      	ldrb	r3, [r3, #0]
 800b69e:	021b      	lsls	r3, r3, #8
 800b6a0:	687a      	ldr	r2, [r7, #4]
 800b6a2:	3208      	adds	r2, #8
 800b6a4:	7812      	ldrb	r2, [r2, #0]
 800b6a6:	431a      	orrs	r2, r3
 800b6a8:	697b      	ldr	r3, [r7, #20]
 800b6aa:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800b6ae:	697b      	ldr	r3, [r7, #20]
 800b6b0:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800b6b4:	697b      	ldr	r3, [r7, #20]
 800b6b6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800b6ba:	7af9      	ldrb	r1, [r7, #11]
 800b6bc:	68f8      	ldr	r0, [r7, #12]
 800b6be:	f000 fa95 	bl	800bbec <SCSI_CheckAddressRange>
 800b6c2:	4603      	mov	r3, r0
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	da02      	bge.n	800b6ce <SCSI_Read10+0xe2>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800b6c8:	f04f 33ff 	mov.w	r3, #4294967295
 800b6cc:	e024      	b.n	800b718 <SCSI_Read10+0x12c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800b6ce:	697b      	ldr	r3, [r7, #20]
 800b6d0:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800b6d4:	697b      	ldr	r3, [r7, #20]
 800b6d6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800b6da:	6979      	ldr	r1, [r7, #20]
 800b6dc:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 800b6e0:	fb01 f303 	mul.w	r3, r1, r3
 800b6e4:	429a      	cmp	r2, r3
 800b6e6:	d00a      	beq.n	800b6fe <SCSI_Read10+0x112>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800b6e8:	697b      	ldr	r3, [r7, #20]
 800b6ea:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800b6ee:	2320      	movs	r3, #32
 800b6f0:	2205      	movs	r2, #5
 800b6f2:	68f8      	ldr	r0, [r7, #12]
 800b6f4:	f7ff fec9 	bl	800b48a <SCSI_SenseCode>
      return -1;
 800b6f8:	f04f 33ff 	mov.w	r3, #4294967295
 800b6fc:	e00c      	b.n	800b718 <SCSI_Read10+0x12c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800b6fe:	697b      	ldr	r3, [r7, #20]
 800b700:	2202      	movs	r2, #2
 800b702:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800b704:	697b      	ldr	r3, [r7, #20]
 800b706:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b70a:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800b70c:	7afb      	ldrb	r3, [r7, #11]
 800b70e:	4619      	mov	r1, r3
 800b710:	68f8      	ldr	r0, [r7, #12]
 800b712:	f000 fa8d 	bl	800bc30 <SCSI_ProcessRead>
 800b716:	4603      	mov	r3, r0
}
 800b718:	4618      	mov	r0, r3
 800b71a:	3718      	adds	r7, #24
 800b71c:	46bd      	mov	sp, r7
 800b71e:	bd80      	pop	{r7, pc}

0800b720 <SCSI_Read12>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800b720:	b580      	push	{r7, lr}
 800b722:	b086      	sub	sp, #24
 800b724:	af00      	add	r7, sp, #0
 800b726:	60f8      	str	r0, [r7, #12]
 800b728:	460b      	mov	r3, r1
 800b72a:	607a      	str	r2, [r7, #4]
 800b72c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b734:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800b736:	697b      	ldr	r3, [r7, #20]
 800b738:	7a1b      	ldrb	r3, [r3, #8]
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	f040 8087 	bne.w	800b84e <SCSI_Read12+0x12e>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800b740:	697b      	ldr	r3, [r7, #20]
 800b742:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800b746:	b25b      	sxtb	r3, r3
 800b748:	2b00      	cmp	r3, #0
 800b74a:	db0a      	blt.n	800b762 <SCSI_Read12+0x42>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800b74c:	697b      	ldr	r3, [r7, #20]
 800b74e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800b752:	2320      	movs	r3, #32
 800b754:	2205      	movs	r2, #5
 800b756:	68f8      	ldr	r0, [r7, #12]
 800b758:	f7ff fe97 	bl	800b48a <SCSI_SenseCode>
      return -1;
 800b75c:	f04f 33ff 	mov.w	r3, #4294967295
 800b760:	e07f      	b.n	800b862 <SCSI_Read12+0x142>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800b762:	697b      	ldr	r3, [r7, #20]
 800b764:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800b768:	2b02      	cmp	r3, #2
 800b76a:	d108      	bne.n	800b77e <SCSI_Read12+0x5e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800b76c:	7af9      	ldrb	r1, [r7, #11]
 800b76e:	233a      	movs	r3, #58	; 0x3a
 800b770:	2202      	movs	r2, #2
 800b772:	68f8      	ldr	r0, [r7, #12]
 800b774:	f7ff fe89 	bl	800b48a <SCSI_SenseCode>
      return -1;
 800b778:	f04f 33ff 	mov.w	r3, #4294967295
 800b77c:	e071      	b.n	800b862 <SCSI_Read12+0x142>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b784:	689b      	ldr	r3, [r3, #8]
 800b786:	7afa      	ldrb	r2, [r7, #11]
 800b788:	4610      	mov	r0, r2
 800b78a:	4798      	blx	r3
 800b78c:	4603      	mov	r3, r0
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d008      	beq.n	800b7a4 <SCSI_Read12+0x84>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800b792:	7af9      	ldrb	r1, [r7, #11]
 800b794:	233a      	movs	r3, #58	; 0x3a
 800b796:	2202      	movs	r2, #2
 800b798:	68f8      	ldr	r0, [r7, #12]
 800b79a:	f7ff fe76 	bl	800b48a <SCSI_SenseCode>
      return -1;
 800b79e:	f04f 33ff 	mov.w	r3, #4294967295
 800b7a2:	e05e      	b.n	800b862 <SCSI_Read12+0x142>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	3302      	adds	r3, #2
 800b7a8:	781b      	ldrb	r3, [r3, #0]
 800b7aa:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	3303      	adds	r3, #3
 800b7b0:	781b      	ldrb	r3, [r3, #0]
 800b7b2:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800b7b4:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	3304      	adds	r3, #4
 800b7ba:	781b      	ldrb	r3, [r3, #0]
 800b7bc:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800b7be:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800b7c0:	687a      	ldr	r2, [r7, #4]
 800b7c2:	3205      	adds	r2, #5
 800b7c4:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800b7c6:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800b7c8:	697b      	ldr	r3, [r7, #20]
 800b7ca:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	3306      	adds	r3, #6
 800b7d2:	781b      	ldrb	r3, [r3, #0]
 800b7d4:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	3307      	adds	r3, #7
 800b7da:	781b      	ldrb	r3, [r3, #0]
 800b7dc:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800b7de:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	3308      	adds	r3, #8
 800b7e4:	781b      	ldrb	r3, [r3, #0]
 800b7e6:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800b7e8:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800b7ea:	687a      	ldr	r2, [r7, #4]
 800b7ec:	3209      	adds	r2, #9
 800b7ee:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800b7f0:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800b7f2:	697b      	ldr	r3, [r7, #20]
 800b7f4:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800b7f8:	697b      	ldr	r3, [r7, #20]
 800b7fa:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800b7fe:	697b      	ldr	r3, [r7, #20]
 800b800:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800b804:	7af9      	ldrb	r1, [r7, #11]
 800b806:	68f8      	ldr	r0, [r7, #12]
 800b808:	f000 f9f0 	bl	800bbec <SCSI_CheckAddressRange>
 800b80c:	4603      	mov	r3, r0
 800b80e:	2b00      	cmp	r3, #0
 800b810:	da02      	bge.n	800b818 <SCSI_Read12+0xf8>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800b812:	f04f 33ff 	mov.w	r3, #4294967295
 800b816:	e024      	b.n	800b862 <SCSI_Read12+0x142>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800b818:	697b      	ldr	r3, [r7, #20]
 800b81a:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800b81e:	697b      	ldr	r3, [r7, #20]
 800b820:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800b824:	6979      	ldr	r1, [r7, #20]
 800b826:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 800b82a:	fb01 f303 	mul.w	r3, r1, r3
 800b82e:	429a      	cmp	r2, r3
 800b830:	d00a      	beq.n	800b848 <SCSI_Read12+0x128>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800b832:	697b      	ldr	r3, [r7, #20]
 800b834:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800b838:	2320      	movs	r3, #32
 800b83a:	2205      	movs	r2, #5
 800b83c:	68f8      	ldr	r0, [r7, #12]
 800b83e:	f7ff fe24 	bl	800b48a <SCSI_SenseCode>
      return -1;
 800b842:	f04f 33ff 	mov.w	r3, #4294967295
 800b846:	e00c      	b.n	800b862 <SCSI_Read12+0x142>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800b848:	697b      	ldr	r3, [r7, #20]
 800b84a:	2202      	movs	r2, #2
 800b84c:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800b84e:	697b      	ldr	r3, [r7, #20]
 800b850:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b854:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800b856:	7afb      	ldrb	r3, [r7, #11]
 800b858:	4619      	mov	r1, r3
 800b85a:	68f8      	ldr	r0, [r7, #12]
 800b85c:	f000 f9e8 	bl	800bc30 <SCSI_ProcessRead>
 800b860:	4603      	mov	r3, r0
}
 800b862:	4618      	mov	r0, r3
 800b864:	3718      	adds	r7, #24
 800b866:	46bd      	mov	sp, r7
 800b868:	bd80      	pop	{r7, pc}

0800b86a <SCSI_Write10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800b86a:	b580      	push	{r7, lr}
 800b86c:	b086      	sub	sp, #24
 800b86e:	af00      	add	r7, sp, #0
 800b870:	60f8      	str	r0, [r7, #12]
 800b872:	460b      	mov	r3, r1
 800b874:	607a      	str	r2, [r7, #4]
 800b876:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b87e:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800b880:	697b      	ldr	r3, [r7, #20]
 800b882:	7a1b      	ldrb	r3, [r3, #8]
 800b884:	2b00      	cmp	r3, #0
 800b886:	f040 80a5 	bne.w	800b9d4 <SCSI_Write10+0x16a>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800b88a:	697b      	ldr	r3, [r7, #20]
 800b88c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800b890:	2b00      	cmp	r3, #0
 800b892:	d10a      	bne.n	800b8aa <SCSI_Write10+0x40>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800b894:	697b      	ldr	r3, [r7, #20]
 800b896:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800b89a:	2320      	movs	r3, #32
 800b89c:	2205      	movs	r2, #5
 800b89e:	68f8      	ldr	r0, [r7, #12]
 800b8a0:	f7ff fdf3 	bl	800b48a <SCSI_SenseCode>
      return -1;
 800b8a4:	f04f 33ff 	mov.w	r3, #4294967295
 800b8a8:	e09a      	b.n	800b9e0 <SCSI_Write10+0x176>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800b8aa:	697b      	ldr	r3, [r7, #20]
 800b8ac:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800b8b0:	b25b      	sxtb	r3, r3
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	da0a      	bge.n	800b8cc <SCSI_Write10+0x62>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800b8b6:	697b      	ldr	r3, [r7, #20]
 800b8b8:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800b8bc:	2320      	movs	r3, #32
 800b8be:	2205      	movs	r2, #5
 800b8c0:	68f8      	ldr	r0, [r7, #12]
 800b8c2:	f7ff fde2 	bl	800b48a <SCSI_SenseCode>
      return -1;
 800b8c6:	f04f 33ff 	mov.w	r3, #4294967295
 800b8ca:	e089      	b.n	800b9e0 <SCSI_Write10+0x176>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b8d2:	689b      	ldr	r3, [r3, #8]
 800b8d4:	7afa      	ldrb	r2, [r7, #11]
 800b8d6:	4610      	mov	r0, r2
 800b8d8:	4798      	blx	r3
 800b8da:	4603      	mov	r3, r0
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d008      	beq.n	800b8f2 <SCSI_Write10+0x88>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800b8e0:	7af9      	ldrb	r1, [r7, #11]
 800b8e2:	233a      	movs	r3, #58	; 0x3a
 800b8e4:	2202      	movs	r2, #2
 800b8e6:	68f8      	ldr	r0, [r7, #12]
 800b8e8:	f7ff fdcf 	bl	800b48a <SCSI_SenseCode>
      return -1;
 800b8ec:	f04f 33ff 	mov.w	r3, #4294967295
 800b8f0:	e076      	b.n	800b9e0 <SCSI_Write10+0x176>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b8f8:	68db      	ldr	r3, [r3, #12]
 800b8fa:	7afa      	ldrb	r2, [r7, #11]
 800b8fc:	4610      	mov	r0, r2
 800b8fe:	4798      	blx	r3
 800b900:	4603      	mov	r3, r0
 800b902:	2b00      	cmp	r3, #0
 800b904:	d008      	beq.n	800b918 <SCSI_Write10+0xae>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800b906:	7af9      	ldrb	r1, [r7, #11]
 800b908:	2327      	movs	r3, #39	; 0x27
 800b90a:	2202      	movs	r2, #2
 800b90c:	68f8      	ldr	r0, [r7, #12]
 800b90e:	f7ff fdbc 	bl	800b48a <SCSI_SenseCode>
      return -1;
 800b912:	f04f 33ff 	mov.w	r3, #4294967295
 800b916:	e063      	b.n	800b9e0 <SCSI_Write10+0x176>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	3302      	adds	r3, #2
 800b91c:	781b      	ldrb	r3, [r3, #0]
 800b91e:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	3303      	adds	r3, #3
 800b924:	781b      	ldrb	r3, [r3, #0]
 800b926:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800b928:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	3304      	adds	r3, #4
 800b92e:	781b      	ldrb	r3, [r3, #0]
 800b930:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800b932:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800b934:	687a      	ldr	r2, [r7, #4]
 800b936:	3205      	adds	r2, #5
 800b938:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800b93a:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800b93c:	697b      	ldr	r3, [r7, #20]
 800b93e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	3307      	adds	r3, #7
 800b946:	781b      	ldrb	r3, [r3, #0]
 800b948:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 800b94a:	687a      	ldr	r2, [r7, #4]
 800b94c:	3208      	adds	r2, #8
 800b94e:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800b950:	431a      	orrs	r2, r3
 800b952:	697b      	ldr	r3, [r7, #20]
 800b954:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800b958:	697b      	ldr	r3, [r7, #20]
 800b95a:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800b95e:	697b      	ldr	r3, [r7, #20]
 800b960:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800b964:	7af9      	ldrb	r1, [r7, #11]
 800b966:	68f8      	ldr	r0, [r7, #12]
 800b968:	f000 f940 	bl	800bbec <SCSI_CheckAddressRange>
 800b96c:	4603      	mov	r3, r0
 800b96e:	2b00      	cmp	r3, #0
 800b970:	da02      	bge.n	800b978 <SCSI_Write10+0x10e>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800b972:	f04f 33ff 	mov.w	r3, #4294967295
 800b976:	e033      	b.n	800b9e0 <SCSI_Write10+0x176>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800b978:	697b      	ldr	r3, [r7, #20]
 800b97a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800b97e:	697a      	ldr	r2, [r7, #20]
 800b980:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800b984:	fb02 f303 	mul.w	r3, r2, r3
 800b988:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800b98a:	697b      	ldr	r3, [r7, #20]
 800b98c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800b990:	693a      	ldr	r2, [r7, #16]
 800b992:	429a      	cmp	r2, r3
 800b994:	d00a      	beq.n	800b9ac <SCSI_Write10+0x142>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800b996:	697b      	ldr	r3, [r7, #20]
 800b998:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800b99c:	2320      	movs	r3, #32
 800b99e:	2205      	movs	r2, #5
 800b9a0:	68f8      	ldr	r0, [r7, #12]
 800b9a2:	f7ff fd72 	bl	800b48a <SCSI_SenseCode>
      return -1;
 800b9a6:	f04f 33ff 	mov.w	r3, #4294967295
 800b9aa:	e019      	b.n	800b9e0 <SCSI_Write10+0x176>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800b9ac:	693b      	ldr	r3, [r7, #16]
 800b9ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b9b2:	bf28      	it	cs
 800b9b4:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800b9b8:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800b9ba:	697b      	ldr	r3, [r7, #20]
 800b9bc:	2201      	movs	r2, #1
 800b9be:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 800b9c0:	697b      	ldr	r3, [r7, #20]
 800b9c2:	f103 0210 	add.w	r2, r3, #16
 800b9c6:	693b      	ldr	r3, [r7, #16]
 800b9c8:	2101      	movs	r1, #1
 800b9ca:	68f8      	ldr	r0, [r7, #12]
 800b9cc:	f00a f94d 	bl	8015c6a <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800b9d0:	2300      	movs	r3, #0
 800b9d2:	e005      	b.n	800b9e0 <SCSI_Write10+0x176>
    return SCSI_ProcessWrite(pdev, lun);
 800b9d4:	7afb      	ldrb	r3, [r7, #11]
 800b9d6:	4619      	mov	r1, r3
 800b9d8:	68f8      	ldr	r0, [r7, #12]
 800b9da:	f000 f99c 	bl	800bd16 <SCSI_ProcessWrite>
 800b9de:	4603      	mov	r3, r0
}
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	3718      	adds	r7, #24
 800b9e4:	46bd      	mov	sp, r7
 800b9e6:	bd80      	pop	{r7, pc}

0800b9e8 <SCSI_Write12>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800b9e8:	b580      	push	{r7, lr}
 800b9ea:	b086      	sub	sp, #24
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	60f8      	str	r0, [r7, #12]
 800b9f0:	460b      	mov	r3, r1
 800b9f2:	607a      	str	r2, [r7, #4]
 800b9f4:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b9fc:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800b9fe:	697b      	ldr	r3, [r7, #20]
 800ba00:	7a1b      	ldrb	r3, [r3, #8]
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	f040 80b5 	bne.w	800bb72 <SCSI_Write12+0x18a>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800ba08:	697b      	ldr	r3, [r7, #20]
 800ba0a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d10a      	bne.n	800ba28 <SCSI_Write12+0x40>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800ba12:	697b      	ldr	r3, [r7, #20]
 800ba14:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800ba18:	2320      	movs	r3, #32
 800ba1a:	2205      	movs	r2, #5
 800ba1c:	68f8      	ldr	r0, [r7, #12]
 800ba1e:	f7ff fd34 	bl	800b48a <SCSI_SenseCode>
      return -1;
 800ba22:	f04f 33ff 	mov.w	r3, #4294967295
 800ba26:	e0aa      	b.n	800bb7e <SCSI_Write12+0x196>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800ba28:	697b      	ldr	r3, [r7, #20]
 800ba2a:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800ba2e:	b25b      	sxtb	r3, r3
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	da0a      	bge.n	800ba4a <SCSI_Write12+0x62>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800ba34:	697b      	ldr	r3, [r7, #20]
 800ba36:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800ba3a:	2320      	movs	r3, #32
 800ba3c:	2205      	movs	r2, #5
 800ba3e:	68f8      	ldr	r0, [r7, #12]
 800ba40:	f7ff fd23 	bl	800b48a <SCSI_SenseCode>
      return -1;
 800ba44:	f04f 33ff 	mov.w	r3, #4294967295
 800ba48:	e099      	b.n	800bb7e <SCSI_Write12+0x196>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ba50:	689b      	ldr	r3, [r3, #8]
 800ba52:	7afa      	ldrb	r2, [r7, #11]
 800ba54:	4610      	mov	r0, r2
 800ba56:	4798      	blx	r3
 800ba58:	4603      	mov	r3, r0
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d00b      	beq.n	800ba76 <SCSI_Write12+0x8e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800ba5e:	7af9      	ldrb	r1, [r7, #11]
 800ba60:	233a      	movs	r3, #58	; 0x3a
 800ba62:	2202      	movs	r2, #2
 800ba64:	68f8      	ldr	r0, [r7, #12]
 800ba66:	f7ff fd10 	bl	800b48a <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800ba6a:	697b      	ldr	r3, [r7, #20]
 800ba6c:	2205      	movs	r2, #5
 800ba6e:	721a      	strb	r2, [r3, #8]
      return -1;
 800ba70:	f04f 33ff 	mov.w	r3, #4294967295
 800ba74:	e083      	b.n	800bb7e <SCSI_Write12+0x196>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ba7c:	68db      	ldr	r3, [r3, #12]
 800ba7e:	7afa      	ldrb	r2, [r7, #11]
 800ba80:	4610      	mov	r0, r2
 800ba82:	4798      	blx	r3
 800ba84:	4603      	mov	r3, r0
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d00b      	beq.n	800baa2 <SCSI_Write12+0xba>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800ba8a:	7af9      	ldrb	r1, [r7, #11]
 800ba8c:	2327      	movs	r3, #39	; 0x27
 800ba8e:	2202      	movs	r2, #2
 800ba90:	68f8      	ldr	r0, [r7, #12]
 800ba92:	f7ff fcfa 	bl	800b48a <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800ba96:	697b      	ldr	r3, [r7, #20]
 800ba98:	2205      	movs	r2, #5
 800ba9a:	721a      	strb	r2, [r3, #8]
      return -1;
 800ba9c:	f04f 33ff 	mov.w	r3, #4294967295
 800baa0:	e06d      	b.n	800bb7e <SCSI_Write12+0x196>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	3302      	adds	r3, #2
 800baa6:	781b      	ldrb	r3, [r3, #0]
 800baa8:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	3303      	adds	r3, #3
 800baae:	781b      	ldrb	r3, [r3, #0]
 800bab0:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800bab2:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	3304      	adds	r3, #4
 800bab8:	781b      	ldrb	r3, [r3, #0]
 800baba:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800babc:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800babe:	687a      	ldr	r2, [r7, #4]
 800bac0:	3205      	adds	r2, #5
 800bac2:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800bac4:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800bac6:	697b      	ldr	r3, [r7, #20]
 800bac8:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	3306      	adds	r3, #6
 800bad0:	781b      	ldrb	r3, [r3, #0]
 800bad2:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	3307      	adds	r3, #7
 800bad8:	781b      	ldrb	r3, [r3, #0]
 800bada:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800badc:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	3308      	adds	r3, #8
 800bae2:	781b      	ldrb	r3, [r3, #0]
 800bae4:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800bae6:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800bae8:	687a      	ldr	r2, [r7, #4]
 800baea:	3209      	adds	r2, #9
 800baec:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800baee:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800baf0:	697b      	ldr	r3, [r7, #20]
 800baf2:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800baf6:	697b      	ldr	r3, [r7, #20]
 800baf8:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800bafc:	697b      	ldr	r3, [r7, #20]
 800bafe:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800bb02:	7af9      	ldrb	r1, [r7, #11]
 800bb04:	68f8      	ldr	r0, [r7, #12]
 800bb06:	f000 f871 	bl	800bbec <SCSI_CheckAddressRange>
 800bb0a:	4603      	mov	r3, r0
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	da02      	bge.n	800bb16 <SCSI_Write12+0x12e>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800bb10:	f04f 33ff 	mov.w	r3, #4294967295
 800bb14:	e033      	b.n	800bb7e <SCSI_Write12+0x196>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800bb16:	697b      	ldr	r3, [r7, #20]
 800bb18:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800bb1c:	697a      	ldr	r2, [r7, #20]
 800bb1e:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800bb22:	fb02 f303 	mul.w	r3, r2, r3
 800bb26:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800bb28:	697b      	ldr	r3, [r7, #20]
 800bb2a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800bb2e:	693a      	ldr	r2, [r7, #16]
 800bb30:	429a      	cmp	r2, r3
 800bb32:	d00a      	beq.n	800bb4a <SCSI_Write12+0x162>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800bb34:	697b      	ldr	r3, [r7, #20]
 800bb36:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800bb3a:	2320      	movs	r3, #32
 800bb3c:	2205      	movs	r2, #5
 800bb3e:	68f8      	ldr	r0, [r7, #12]
 800bb40:	f7ff fca3 	bl	800b48a <SCSI_SenseCode>
      return -1;
 800bb44:	f04f 33ff 	mov.w	r3, #4294967295
 800bb48:	e019      	b.n	800bb7e <SCSI_Write12+0x196>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800bb4a:	693b      	ldr	r3, [r7, #16]
 800bb4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bb50:	bf28      	it	cs
 800bb52:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800bb56:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800bb58:	697b      	ldr	r3, [r7, #20]
 800bb5a:	2201      	movs	r2, #1
 800bb5c:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 800bb5e:	697b      	ldr	r3, [r7, #20]
 800bb60:	f103 0210 	add.w	r2, r3, #16
 800bb64:	693b      	ldr	r3, [r7, #16]
 800bb66:	2101      	movs	r1, #1
 800bb68:	68f8      	ldr	r0, [r7, #12]
 800bb6a:	f00a f87e 	bl	8015c6a <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800bb6e:	2300      	movs	r3, #0
 800bb70:	e005      	b.n	800bb7e <SCSI_Write12+0x196>
    return SCSI_ProcessWrite(pdev, lun);
 800bb72:	7afb      	ldrb	r3, [r7, #11]
 800bb74:	4619      	mov	r1, r3
 800bb76:	68f8      	ldr	r0, [r7, #12]
 800bb78:	f000 f8cd 	bl	800bd16 <SCSI_ProcessWrite>
 800bb7c:	4603      	mov	r3, r0
}
 800bb7e:	4618      	mov	r0, r3
 800bb80:	3718      	adds	r7, #24
 800bb82:	46bd      	mov	sp, r7
 800bb84:	bd80      	pop	{r7, pc}

0800bb86 <SCSI_Verify10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800bb86:	b580      	push	{r7, lr}
 800bb88:	b086      	sub	sp, #24
 800bb8a:	af00      	add	r7, sp, #0
 800bb8c:	60f8      	str	r0, [r7, #12]
 800bb8e:	460b      	mov	r3, r1
 800bb90:	607a      	str	r2, [r7, #4]
 800bb92:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bb9a:	617b      	str	r3, [r7, #20]

  if ((params[1] & 0x02U) == 0x02U)
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	3301      	adds	r3, #1
 800bba0:	781b      	ldrb	r3, [r3, #0]
 800bba2:	f003 0302 	and.w	r3, r3, #2
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d008      	beq.n	800bbbc <SCSI_Verify10+0x36>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800bbaa:	7af9      	ldrb	r1, [r7, #11]
 800bbac:	2324      	movs	r3, #36	; 0x24
 800bbae:	2205      	movs	r2, #5
 800bbb0:	68f8      	ldr	r0, [r7, #12]
 800bbb2:	f7ff fc6a 	bl	800b48a <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 800bbb6:	f04f 33ff 	mov.w	r3, #4294967295
 800bbba:	e013      	b.n	800bbe4 <SCSI_Verify10+0x5e>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 800bbbc:	697b      	ldr	r3, [r7, #20]
 800bbbe:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800bbc2:	697b      	ldr	r3, [r7, #20]
 800bbc4:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800bbc8:	7af9      	ldrb	r1, [r7, #11]
 800bbca:	68f8      	ldr	r0, [r7, #12]
 800bbcc:	f000 f80e 	bl	800bbec <SCSI_CheckAddressRange>
 800bbd0:	4603      	mov	r3, r0
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	da02      	bge.n	800bbdc <SCSI_Verify10+0x56>
  {
    return -1; /* error */
 800bbd6:	f04f 33ff 	mov.w	r3, #4294967295
 800bbda:	e003      	b.n	800bbe4 <SCSI_Verify10+0x5e>
  }

  hmsc->bot_data_length = 0U;
 800bbdc:	697b      	ldr	r3, [r7, #20]
 800bbde:	2200      	movs	r2, #0
 800bbe0:	60da      	str	r2, [r3, #12]

  return 0;
 800bbe2:	2300      	movs	r3, #0
}
 800bbe4:	4618      	mov	r0, r3
 800bbe6:	3718      	adds	r7, #24
 800bbe8:	46bd      	mov	sp, r7
 800bbea:	bd80      	pop	{r7, pc}

0800bbec <SCSI_CheckAddressRange>:
* @param  blk_nbr: number of block to be processed
* @retval status
*/
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 800bbec:	b580      	push	{r7, lr}
 800bbee:	b086      	sub	sp, #24
 800bbf0:	af00      	add	r7, sp, #0
 800bbf2:	60f8      	str	r0, [r7, #12]
 800bbf4:	607a      	str	r2, [r7, #4]
 800bbf6:	603b      	str	r3, [r7, #0]
 800bbf8:	460b      	mov	r3, r1
 800bbfa:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bc02:	617b      	str	r3, [r7, #20]

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 800bc04:	687a      	ldr	r2, [r7, #4]
 800bc06:	683b      	ldr	r3, [r7, #0]
 800bc08:	441a      	add	r2, r3
 800bc0a:	697b      	ldr	r3, [r7, #20]
 800bc0c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800bc10:	429a      	cmp	r2, r3
 800bc12:	d908      	bls.n	800bc26 <SCSI_CheckAddressRange+0x3a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 800bc14:	7af9      	ldrb	r1, [r7, #11]
 800bc16:	2321      	movs	r3, #33	; 0x21
 800bc18:	2205      	movs	r2, #5
 800bc1a:	68f8      	ldr	r0, [r7, #12]
 800bc1c:	f7ff fc35 	bl	800b48a <SCSI_SenseCode>
    return -1;
 800bc20:	f04f 33ff 	mov.w	r3, #4294967295
 800bc24:	e000      	b.n	800bc28 <SCSI_CheckAddressRange+0x3c>
  }

  return 0;
 800bc26:	2300      	movs	r3, #0
}
 800bc28:	4618      	mov	r0, r3
 800bc2a:	3718      	adds	r7, #24
 800bc2c:	46bd      	mov	sp, r7
 800bc2e:	bd80      	pop	{r7, pc}

0800bc30 <SCSI_ProcessRead>:
*         Handle Read Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800bc30:	b590      	push	{r4, r7, lr}
 800bc32:	b085      	sub	sp, #20
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	6078      	str	r0, [r7, #4]
 800bc38:	460b      	mov	r3, r1
 800bc3a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bc42:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800bc4a:	68fa      	ldr	r2, [r7, #12]
 800bc4c:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800bc50:	fb02 f303 	mul.w	r3, r2, r3
 800bc54:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 800bc56:	68bb      	ldr	r3, [r7, #8]
 800bc58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bc5c:	bf28      	it	cs
 800bc5e:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800bc62:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bc6a:	691c      	ldr	r4, [r3, #16]
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	f103 0110 	add.w	r1, r3, #16
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800bc7e:	4618      	mov	r0, r3
 800bc80:	68bb      	ldr	r3, [r7, #8]
 800bc82:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 800bc86:	b29b      	uxth	r3, r3
 800bc88:	78f8      	ldrb	r0, [r7, #3]
 800bc8a:	47a0      	blx	r4
 800bc8c:	4603      	mov	r3, r0
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	da08      	bge.n	800bca4 <SCSI_ProcessRead+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 800bc92:	78f9      	ldrb	r1, [r7, #3]
 800bc94:	2311      	movs	r3, #17
 800bc96:	2204      	movs	r2, #4
 800bc98:	6878      	ldr	r0, [r7, #4]
 800bc9a:	f7ff fbf6 	bl	800b48a <SCSI_SenseCode>
    return -1;
 800bc9e:	f04f 33ff 	mov.w	r3, #4294967295
 800bca2:	e034      	b.n	800bd0e <SCSI_ProcessRead+0xde>
  }

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	f103 0210 	add.w	r2, r3, #16
 800bcaa:	68bb      	ldr	r3, [r7, #8]
 800bcac:	2181      	movs	r1, #129	; 0x81
 800bcae:	6878      	ldr	r0, [r7, #4]
 800bcb0:	f009 ffba 	bl	8015c28 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800bcc0:	4619      	mov	r1, r3
 800bcc2:	68bb      	ldr	r3, [r7, #8]
 800bcc4:	fbb3 f3f1 	udiv	r3, r3, r1
 800bcc8:	441a      	add	r2, r3
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800bcdc:	4619      	mov	r1, r3
 800bcde:	68bb      	ldr	r3, [r7, #8]
 800bce0:	fbb3 f3f1 	udiv	r3, r3, r1
 800bce4:	1ad2      	subs	r2, r2, r3
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 800bcf2:	68bb      	ldr	r3, [r7, #8]
 800bcf4:	1ad2      	subs	r2, r2, r3
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d102      	bne.n	800bd0c <SCSI_ProcessRead+0xdc>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	2203      	movs	r2, #3
 800bd0a:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 800bd0c:	2300      	movs	r3, #0
}
 800bd0e:	4618      	mov	r0, r3
 800bd10:	3714      	adds	r7, #20
 800bd12:	46bd      	mov	sp, r7
 800bd14:	bd90      	pop	{r4, r7, pc}

0800bd16 <SCSI_ProcessWrite>:
*         Handle Write Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800bd16:	b590      	push	{r4, r7, lr}
 800bd18:	b085      	sub	sp, #20
 800bd1a:	af00      	add	r7, sp, #0
 800bd1c:	6078      	str	r0, [r7, #4]
 800bd1e:	460b      	mov	r3, r1
 800bd20:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bd28:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800bd30:	68fa      	ldr	r2, [r7, #12]
 800bd32:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800bd36:	fb02 f303 	mul.w	r3, r2, r3
 800bd3a:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 800bd3c:	68bb      	ldr	r3, [r7, #8]
 800bd3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bd42:	bf28      	it	cs
 800bd44:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800bd48:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bd50:	695c      	ldr	r4, [r3, #20]
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	f103 0110 	add.w	r1, r3, #16
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800bd64:	4618      	mov	r0, r3
 800bd66:	68bb      	ldr	r3, [r7, #8]
 800bd68:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 800bd6c:	b29b      	uxth	r3, r3
 800bd6e:	78f8      	ldrb	r0, [r7, #3]
 800bd70:	47a0      	blx	r4
 800bd72:	4603      	mov	r3, r0
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	da08      	bge.n	800bd8a <SCSI_ProcessWrite+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 800bd78:	78f9      	ldrb	r1, [r7, #3]
 800bd7a:	2303      	movs	r3, #3
 800bd7c:	2204      	movs	r2, #4
 800bd7e:	6878      	ldr	r0, [r7, #4]
 800bd80:	f7ff fb83 	bl	800b48a <SCSI_SenseCode>
    return -1;
 800bd84:	f04f 33ff 	mov.w	r3, #4294967295
 800bd88:	e044      	b.n	800be14 <SCSI_ProcessWrite+0xfe>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800bd96:	4619      	mov	r1, r3
 800bd98:	68bb      	ldr	r3, [r7, #8]
 800bd9a:	fbb3 f3f1 	udiv	r3, r3, r1
 800bd9e:	441a      	add	r2, r3
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800bdb2:	4619      	mov	r1, r3
 800bdb4:	68bb      	ldr	r3, [r7, #8]
 800bdb6:	fbb3 f3f1 	udiv	r3, r3, r1
 800bdba:	1ad2      	subs	r2, r2, r3
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 800bdc8:	68bb      	ldr	r3, [r7, #8]
 800bdca:	1ad2      	subs	r2, r2, r3
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d104      	bne.n	800bde6 <SCSI_ProcessWrite+0xd0>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800bddc:	2100      	movs	r1, #0
 800bdde:	6878      	ldr	r0, [r7, #4]
 800bde0:	f7fe ff04 	bl	800abec <MSC_BOT_SendCSW>
 800bde4:	e015      	b.n	800be12 <SCSI_ProcessWrite+0xfc>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800bdec:	68fa      	ldr	r2, [r7, #12]
 800bdee:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800bdf2:	fb02 f303 	mul.w	r3, r2, r3
 800bdf6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bdfa:	bf28      	it	cs
 800bdfc:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800be00:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	f103 0210 	add.w	r2, r3, #16
 800be08:	68bb      	ldr	r3, [r7, #8]
 800be0a:	2101      	movs	r1, #1
 800be0c:	6878      	ldr	r0, [r7, #4]
 800be0e:	f009 ff2c 	bl	8015c6a <USBD_LL_PrepareReceive>
  }

  return 0;
 800be12:	2300      	movs	r3, #0
}
 800be14:	4618      	mov	r0, r3
 800be16:	3714      	adds	r7, #20
 800be18:	46bd      	mov	sp, r7
 800be1a:	bd90      	pop	{r4, r7, pc}

0800be1c <SCSI_UpdateBotData>:
* @param  length: Data length
* @retval status
*/
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 800be1c:	b480      	push	{r7}
 800be1e:	b087      	sub	sp, #28
 800be20:	af00      	add	r7, sp, #0
 800be22:	60f8      	str	r0, [r7, #12]
 800be24:	60b9      	str	r1, [r7, #8]
 800be26:	4613      	mov	r3, r2
 800be28:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 800be2a:	88fb      	ldrh	r3, [r7, #6]
 800be2c:	82fb      	strh	r3, [r7, #22]

  hmsc->bot_data_length = len;
 800be2e:	8afa      	ldrh	r2, [r7, #22]
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 800be34:	e00b      	b.n	800be4e <SCSI_UpdateBotData+0x32>
  {
    len--;
 800be36:	8afb      	ldrh	r3, [r7, #22]
 800be38:	3b01      	subs	r3, #1
 800be3a:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 800be3c:	8afb      	ldrh	r3, [r7, #22]
 800be3e:	68ba      	ldr	r2, [r7, #8]
 800be40:	441a      	add	r2, r3
 800be42:	8afb      	ldrh	r3, [r7, #22]
 800be44:	7811      	ldrb	r1, [r2, #0]
 800be46:	68fa      	ldr	r2, [r7, #12]
 800be48:	4413      	add	r3, r2
 800be4a:	460a      	mov	r2, r1
 800be4c:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 800be4e:	8afb      	ldrh	r3, [r7, #22]
 800be50:	2b00      	cmp	r3, #0
 800be52:	d1f0      	bne.n	800be36 <SCSI_UpdateBotData+0x1a>
  }

  return 0;
 800be54:	2300      	movs	r3, #0
}
 800be56:	4618      	mov	r0, r3
 800be58:	371c      	adds	r7, #28
 800be5a:	46bd      	mov	sp, r7
 800be5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be60:	4770      	bx	lr

0800be62 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800be62:	b580      	push	{r7, lr}
 800be64:	b086      	sub	sp, #24
 800be66:	af00      	add	r7, sp, #0
 800be68:	60f8      	str	r0, [r7, #12]
 800be6a:	60b9      	str	r1, [r7, #8]
 800be6c:	4613      	mov	r3, r2
 800be6e:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	2b00      	cmp	r3, #0
 800be74:	d101      	bne.n	800be7a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800be76:	2303      	movs	r3, #3
 800be78:	e025      	b.n	800bec6 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be80:	2b00      	cmp	r3, #0
 800be82:	d003      	beq.n	800be8c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	2200      	movs	r2, #0
 800be88:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800be92:	2b00      	cmp	r3, #0
 800be94:	d003      	beq.n	800be9e <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	2200      	movs	r2, #0
 800be9a:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800be9e:	68bb      	ldr	r3, [r7, #8]
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d003      	beq.n	800beac <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	68ba      	ldr	r2, [r7, #8]
 800bea8:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	2201      	movs	r2, #1
 800beb0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	79fa      	ldrb	r2, [r7, #7]
 800beb8:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800beba:	68f8      	ldr	r0, [r7, #12]
 800bebc:	f009 fd60 	bl	8015980 <USBD_LL_Init>
 800bec0:	4603      	mov	r3, r0
 800bec2:	75fb      	strb	r3, [r7, #23]

  return ret;
 800bec4:	7dfb      	ldrb	r3, [r7, #23]
}
 800bec6:	4618      	mov	r0, r3
 800bec8:	3718      	adds	r7, #24
 800beca:	46bd      	mov	sp, r7
 800becc:	bd80      	pop	{r7, pc}

0800bece <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800bece:	b580      	push	{r7, lr}
 800bed0:	b084      	sub	sp, #16
 800bed2:	af00      	add	r7, sp, #0
 800bed4:	6078      	str	r0, [r7, #4]
 800bed6:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bed8:	2300      	movs	r3, #0
 800beda:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800bedc:	683b      	ldr	r3, [r7, #0]
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d101      	bne.n	800bee6 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800bee2:	2303      	movs	r3, #3
 800bee4:	e010      	b.n	800bf08 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	683a      	ldr	r2, [r7, #0]
 800beea:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bef6:	f107 020e 	add.w	r2, r7, #14
 800befa:	4610      	mov	r0, r2
 800befc:	4798      	blx	r3
 800befe:	4602      	mov	r2, r0
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 800bf06:	2300      	movs	r3, #0
}
 800bf08:	4618      	mov	r0, r3
 800bf0a:	3710      	adds	r7, #16
 800bf0c:	46bd      	mov	sp, r7
 800bf0e:	bd80      	pop	{r7, pc}

0800bf10 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800bf10:	b580      	push	{r7, lr}
 800bf12:	b082      	sub	sp, #8
 800bf14:	af00      	add	r7, sp, #0
 800bf16:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800bf18:	6878      	ldr	r0, [r7, #4]
 800bf1a:	f009 fd7d 	bl	8015a18 <USBD_LL_Start>
 800bf1e:	4603      	mov	r3, r0
}
 800bf20:	4618      	mov	r0, r3
 800bf22:	3708      	adds	r7, #8
 800bf24:	46bd      	mov	sp, r7
 800bf26:	bd80      	pop	{r7, pc}

0800bf28 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800bf28:	b480      	push	{r7}
 800bf2a:	b083      	sub	sp, #12
 800bf2c:	af00      	add	r7, sp, #0
 800bf2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bf30:	2300      	movs	r3, #0
}
 800bf32:	4618      	mov	r0, r3
 800bf34:	370c      	adds	r7, #12
 800bf36:	46bd      	mov	sp, r7
 800bf38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf3c:	4770      	bx	lr

0800bf3e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bf3e:	b580      	push	{r7, lr}
 800bf40:	b084      	sub	sp, #16
 800bf42:	af00      	add	r7, sp, #0
 800bf44:	6078      	str	r0, [r7, #4]
 800bf46:	460b      	mov	r3, r1
 800bf48:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800bf4a:	2303      	movs	r3, #3
 800bf4c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d009      	beq.n	800bf6c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	78fa      	ldrb	r2, [r7, #3]
 800bf62:	4611      	mov	r1, r2
 800bf64:	6878      	ldr	r0, [r7, #4]
 800bf66:	4798      	blx	r3
 800bf68:	4603      	mov	r3, r0
 800bf6a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800bf6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf6e:	4618      	mov	r0, r3
 800bf70:	3710      	adds	r7, #16
 800bf72:	46bd      	mov	sp, r7
 800bf74:	bd80      	pop	{r7, pc}

0800bf76 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bf76:	b580      	push	{r7, lr}
 800bf78:	b082      	sub	sp, #8
 800bf7a:	af00      	add	r7, sp, #0
 800bf7c:	6078      	str	r0, [r7, #4]
 800bf7e:	460b      	mov	r3, r1
 800bf80:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d007      	beq.n	800bf9c <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf92:	685b      	ldr	r3, [r3, #4]
 800bf94:	78fa      	ldrb	r2, [r7, #3]
 800bf96:	4611      	mov	r1, r2
 800bf98:	6878      	ldr	r0, [r7, #4]
 800bf9a:	4798      	blx	r3
  }

  return USBD_OK;
 800bf9c:	2300      	movs	r3, #0
}
 800bf9e:	4618      	mov	r0, r3
 800bfa0:	3708      	adds	r7, #8
 800bfa2:	46bd      	mov	sp, r7
 800bfa4:	bd80      	pop	{r7, pc}

0800bfa6 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800bfa6:	b580      	push	{r7, lr}
 800bfa8:	b084      	sub	sp, #16
 800bfaa:	af00      	add	r7, sp, #0
 800bfac:	6078      	str	r0, [r7, #4]
 800bfae:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bfb6:	6839      	ldr	r1, [r7, #0]
 800bfb8:	4618      	mov	r0, r3
 800bfba:	f000 ff55 	bl	800ce68 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	2201      	movs	r2, #1
 800bfc2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800bfcc:	461a      	mov	r2, r3
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800bfda:	f003 031f 	and.w	r3, r3, #31
 800bfde:	2b01      	cmp	r3, #1
 800bfe0:	d00e      	beq.n	800c000 <USBD_LL_SetupStage+0x5a>
 800bfe2:	2b01      	cmp	r3, #1
 800bfe4:	d302      	bcc.n	800bfec <USBD_LL_SetupStage+0x46>
 800bfe6:	2b02      	cmp	r3, #2
 800bfe8:	d014      	beq.n	800c014 <USBD_LL_SetupStage+0x6e>
 800bfea:	e01d      	b.n	800c028 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bff2:	4619      	mov	r1, r3
 800bff4:	6878      	ldr	r0, [r7, #4]
 800bff6:	f000 fa17 	bl	800c428 <USBD_StdDevReq>
 800bffa:	4603      	mov	r3, r0
 800bffc:	73fb      	strb	r3, [r7, #15]
      break;
 800bffe:	e020      	b.n	800c042 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c006:	4619      	mov	r1, r3
 800c008:	6878      	ldr	r0, [r7, #4]
 800c00a:	f000 fa7b 	bl	800c504 <USBD_StdItfReq>
 800c00e:	4603      	mov	r3, r0
 800c010:	73fb      	strb	r3, [r7, #15]
      break;
 800c012:	e016      	b.n	800c042 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c01a:	4619      	mov	r1, r3
 800c01c:	6878      	ldr	r0, [r7, #4]
 800c01e:	f000 fab7 	bl	800c590 <USBD_StdEPReq>
 800c022:	4603      	mov	r3, r0
 800c024:	73fb      	strb	r3, [r7, #15]
      break;
 800c026:	e00c      	b.n	800c042 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c02e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c032:	b2db      	uxtb	r3, r3
 800c034:	4619      	mov	r1, r3
 800c036:	6878      	ldr	r0, [r7, #4]
 800c038:	f009 fd6d 	bl	8015b16 <USBD_LL_StallEP>
 800c03c:	4603      	mov	r3, r0
 800c03e:	73fb      	strb	r3, [r7, #15]
      break;
 800c040:	bf00      	nop
  }

  return ret;
 800c042:	7bfb      	ldrb	r3, [r7, #15]
}
 800c044:	4618      	mov	r0, r3
 800c046:	3710      	adds	r7, #16
 800c048:	46bd      	mov	sp, r7
 800c04a:	bd80      	pop	{r7, pc}

0800c04c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c04c:	b580      	push	{r7, lr}
 800c04e:	b086      	sub	sp, #24
 800c050:	af00      	add	r7, sp, #0
 800c052:	60f8      	str	r0, [r7, #12]
 800c054:	460b      	mov	r3, r1
 800c056:	607a      	str	r2, [r7, #4]
 800c058:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c05a:	7afb      	ldrb	r3, [r7, #11]
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d137      	bne.n	800c0d0 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800c066:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c06e:	2b03      	cmp	r3, #3
 800c070:	d14a      	bne.n	800c108 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800c072:	693b      	ldr	r3, [r7, #16]
 800c074:	689a      	ldr	r2, [r3, #8]
 800c076:	693b      	ldr	r3, [r7, #16]
 800c078:	68db      	ldr	r3, [r3, #12]
 800c07a:	429a      	cmp	r2, r3
 800c07c:	d913      	bls.n	800c0a6 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c07e:	693b      	ldr	r3, [r7, #16]
 800c080:	689a      	ldr	r2, [r3, #8]
 800c082:	693b      	ldr	r3, [r7, #16]
 800c084:	68db      	ldr	r3, [r3, #12]
 800c086:	1ad2      	subs	r2, r2, r3
 800c088:	693b      	ldr	r3, [r7, #16]
 800c08a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c08c:	693b      	ldr	r3, [r7, #16]
 800c08e:	68da      	ldr	r2, [r3, #12]
 800c090:	693b      	ldr	r3, [r7, #16]
 800c092:	689b      	ldr	r3, [r3, #8]
 800c094:	4293      	cmp	r3, r2
 800c096:	bf28      	it	cs
 800c098:	4613      	movcs	r3, r2
 800c09a:	461a      	mov	r2, r3
 800c09c:	6879      	ldr	r1, [r7, #4]
 800c09e:	68f8      	ldr	r0, [r7, #12]
 800c0a0:	f000 ffb9 	bl	800d016 <USBD_CtlContinueRx>
 800c0a4:	e030      	b.n	800c108 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c0ac:	691b      	ldr	r3, [r3, #16]
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d00a      	beq.n	800c0c8 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800c0b8:	2b03      	cmp	r3, #3
 800c0ba:	d105      	bne.n	800c0c8 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c0c2:	691b      	ldr	r3, [r3, #16]
 800c0c4:	68f8      	ldr	r0, [r7, #12]
 800c0c6:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800c0c8:	68f8      	ldr	r0, [r7, #12]
 800c0ca:	f000 ffb5 	bl	800d038 <USBD_CtlSendStatus>
 800c0ce:	e01b      	b.n	800c108 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c0d6:	699b      	ldr	r3, [r3, #24]
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d013      	beq.n	800c104 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800c0e2:	2b03      	cmp	r3, #3
 800c0e4:	d10e      	bne.n	800c104 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c0ec:	699b      	ldr	r3, [r3, #24]
 800c0ee:	7afa      	ldrb	r2, [r7, #11]
 800c0f0:	4611      	mov	r1, r2
 800c0f2:	68f8      	ldr	r0, [r7, #12]
 800c0f4:	4798      	blx	r3
 800c0f6:	4603      	mov	r3, r0
 800c0f8:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800c0fa:	7dfb      	ldrb	r3, [r7, #23]
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d003      	beq.n	800c108 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800c100:	7dfb      	ldrb	r3, [r7, #23]
 800c102:	e002      	b.n	800c10a <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800c104:	2303      	movs	r3, #3
 800c106:	e000      	b.n	800c10a <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800c108:	2300      	movs	r3, #0
}
 800c10a:	4618      	mov	r0, r3
 800c10c:	3718      	adds	r7, #24
 800c10e:	46bd      	mov	sp, r7
 800c110:	bd80      	pop	{r7, pc}

0800c112 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c112:	b580      	push	{r7, lr}
 800c114:	b086      	sub	sp, #24
 800c116:	af00      	add	r7, sp, #0
 800c118:	60f8      	str	r0, [r7, #12]
 800c11a:	460b      	mov	r3, r1
 800c11c:	607a      	str	r2, [r7, #4]
 800c11e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c120:	7afb      	ldrb	r3, [r7, #11]
 800c122:	2b00      	cmp	r3, #0
 800c124:	d16a      	bne.n	800c1fc <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	3314      	adds	r3, #20
 800c12a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c132:	2b02      	cmp	r3, #2
 800c134:	d155      	bne.n	800c1e2 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800c136:	693b      	ldr	r3, [r7, #16]
 800c138:	689a      	ldr	r2, [r3, #8]
 800c13a:	693b      	ldr	r3, [r7, #16]
 800c13c:	68db      	ldr	r3, [r3, #12]
 800c13e:	429a      	cmp	r2, r3
 800c140:	d914      	bls.n	800c16c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c142:	693b      	ldr	r3, [r7, #16]
 800c144:	689a      	ldr	r2, [r3, #8]
 800c146:	693b      	ldr	r3, [r7, #16]
 800c148:	68db      	ldr	r3, [r3, #12]
 800c14a:	1ad2      	subs	r2, r2, r3
 800c14c:	693b      	ldr	r3, [r7, #16]
 800c14e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c150:	693b      	ldr	r3, [r7, #16]
 800c152:	689b      	ldr	r3, [r3, #8]
 800c154:	461a      	mov	r2, r3
 800c156:	6879      	ldr	r1, [r7, #4]
 800c158:	68f8      	ldr	r0, [r7, #12]
 800c15a:	f000 ff4b 	bl	800cff4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c15e:	2300      	movs	r3, #0
 800c160:	2200      	movs	r2, #0
 800c162:	2100      	movs	r1, #0
 800c164:	68f8      	ldr	r0, [r7, #12]
 800c166:	f009 fd80 	bl	8015c6a <USBD_LL_PrepareReceive>
 800c16a:	e03a      	b.n	800c1e2 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c16c:	693b      	ldr	r3, [r7, #16]
 800c16e:	68da      	ldr	r2, [r3, #12]
 800c170:	693b      	ldr	r3, [r7, #16]
 800c172:	689b      	ldr	r3, [r3, #8]
 800c174:	429a      	cmp	r2, r3
 800c176:	d11c      	bne.n	800c1b2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800c178:	693b      	ldr	r3, [r7, #16]
 800c17a:	685a      	ldr	r2, [r3, #4]
 800c17c:	693b      	ldr	r3, [r7, #16]
 800c17e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c180:	429a      	cmp	r2, r3
 800c182:	d316      	bcc.n	800c1b2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800c184:	693b      	ldr	r3, [r7, #16]
 800c186:	685a      	ldr	r2, [r3, #4]
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c18e:	429a      	cmp	r2, r3
 800c190:	d20f      	bcs.n	800c1b2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c192:	2200      	movs	r2, #0
 800c194:	2100      	movs	r1, #0
 800c196:	68f8      	ldr	r0, [r7, #12]
 800c198:	f000 ff2c 	bl	800cff4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	2200      	movs	r2, #0
 800c1a0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c1a4:	2300      	movs	r3, #0
 800c1a6:	2200      	movs	r2, #0
 800c1a8:	2100      	movs	r1, #0
 800c1aa:	68f8      	ldr	r0, [r7, #12]
 800c1ac:	f009 fd5d 	bl	8015c6a <USBD_LL_PrepareReceive>
 800c1b0:	e017      	b.n	800c1e2 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c1b8:	68db      	ldr	r3, [r3, #12]
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d00a      	beq.n	800c1d4 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800c1c4:	2b03      	cmp	r3, #3
 800c1c6:	d105      	bne.n	800c1d4 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c1ce:	68db      	ldr	r3, [r3, #12]
 800c1d0:	68f8      	ldr	r0, [r7, #12]
 800c1d2:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c1d4:	2180      	movs	r1, #128	; 0x80
 800c1d6:	68f8      	ldr	r0, [r7, #12]
 800c1d8:	f009 fc9d 	bl	8015b16 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c1dc:	68f8      	ldr	r0, [r7, #12]
 800c1de:	f000 ff3e 	bl	800d05e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800c1e8:	2b01      	cmp	r3, #1
 800c1ea:	d123      	bne.n	800c234 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800c1ec:	68f8      	ldr	r0, [r7, #12]
 800c1ee:	f7ff fe9b 	bl	800bf28 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	2200      	movs	r2, #0
 800c1f6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800c1fa:	e01b      	b.n	800c234 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c202:	695b      	ldr	r3, [r3, #20]
 800c204:	2b00      	cmp	r3, #0
 800c206:	d013      	beq.n	800c230 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800c20e:	2b03      	cmp	r3, #3
 800c210:	d10e      	bne.n	800c230 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c218:	695b      	ldr	r3, [r3, #20]
 800c21a:	7afa      	ldrb	r2, [r7, #11]
 800c21c:	4611      	mov	r1, r2
 800c21e:	68f8      	ldr	r0, [r7, #12]
 800c220:	4798      	blx	r3
 800c222:	4603      	mov	r3, r0
 800c224:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800c226:	7dfb      	ldrb	r3, [r7, #23]
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d003      	beq.n	800c234 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800c22c:	7dfb      	ldrb	r3, [r7, #23]
 800c22e:	e002      	b.n	800c236 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800c230:	2303      	movs	r3, #3
 800c232:	e000      	b.n	800c236 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800c234:	2300      	movs	r3, #0
}
 800c236:	4618      	mov	r0, r3
 800c238:	3718      	adds	r7, #24
 800c23a:	46bd      	mov	sp, r7
 800c23c:	bd80      	pop	{r7, pc}

0800c23e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c23e:	b580      	push	{r7, lr}
 800c240:	b082      	sub	sp, #8
 800c242:	af00      	add	r7, sp, #0
 800c244:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	2201      	movs	r2, #1
 800c24a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	2200      	movs	r2, #0
 800c252:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	2200      	movs	r2, #0
 800c25a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	2200      	movs	r2, #0
 800c260:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d009      	beq.n	800c282 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c274:	685b      	ldr	r3, [r3, #4]
 800c276:	687a      	ldr	r2, [r7, #4]
 800c278:	6852      	ldr	r2, [r2, #4]
 800c27a:	b2d2      	uxtb	r2, r2
 800c27c:	4611      	mov	r1, r2
 800c27e:	6878      	ldr	r0, [r7, #4]
 800c280:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c282:	2340      	movs	r3, #64	; 0x40
 800c284:	2200      	movs	r2, #0
 800c286:	2100      	movs	r1, #0
 800c288:	6878      	ldr	r0, [r7, #4]
 800c28a:	f009 fbe0 	bl	8015a4e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	2201      	movs	r2, #1
 800c292:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	2240      	movs	r2, #64	; 0x40
 800c29a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c29e:	2340      	movs	r3, #64	; 0x40
 800c2a0:	2200      	movs	r2, #0
 800c2a2:	2180      	movs	r1, #128	; 0x80
 800c2a4:	6878      	ldr	r0, [r7, #4]
 800c2a6:	f009 fbd2 	bl	8015a4e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	2201      	movs	r2, #1
 800c2ae:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	2240      	movs	r2, #64	; 0x40
 800c2b4:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800c2b6:	2300      	movs	r3, #0
}
 800c2b8:	4618      	mov	r0, r3
 800c2ba:	3708      	adds	r7, #8
 800c2bc:	46bd      	mov	sp, r7
 800c2be:	bd80      	pop	{r7, pc}

0800c2c0 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c2c0:	b480      	push	{r7}
 800c2c2:	b083      	sub	sp, #12
 800c2c4:	af00      	add	r7, sp, #0
 800c2c6:	6078      	str	r0, [r7, #4]
 800c2c8:	460b      	mov	r3, r1
 800c2ca:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	78fa      	ldrb	r2, [r7, #3]
 800c2d0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c2d2:	2300      	movs	r3, #0
}
 800c2d4:	4618      	mov	r0, r3
 800c2d6:	370c      	adds	r7, #12
 800c2d8:	46bd      	mov	sp, r7
 800c2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2de:	4770      	bx	lr

0800c2e0 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c2e0:	b480      	push	{r7}
 800c2e2:	b083      	sub	sp, #12
 800c2e4:	af00      	add	r7, sp, #0
 800c2e6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	2204      	movs	r2, #4
 800c2f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800c2fc:	2300      	movs	r3, #0
}
 800c2fe:	4618      	mov	r0, r3
 800c300:	370c      	adds	r7, #12
 800c302:	46bd      	mov	sp, r7
 800c304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c308:	4770      	bx	lr

0800c30a <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c30a:	b480      	push	{r7}
 800c30c:	b083      	sub	sp, #12
 800c30e:	af00      	add	r7, sp, #0
 800c310:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c318:	2b04      	cmp	r3, #4
 800c31a:	d105      	bne.n	800c328 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800c328:	2300      	movs	r3, #0
}
 800c32a:	4618      	mov	r0, r3
 800c32c:	370c      	adds	r7, #12
 800c32e:	46bd      	mov	sp, r7
 800c330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c334:	4770      	bx	lr

0800c336 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c336:	b580      	push	{r7, lr}
 800c338:	b082      	sub	sp, #8
 800c33a:	af00      	add	r7, sp, #0
 800c33c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c344:	2b03      	cmp	r3, #3
 800c346:	d10b      	bne.n	800c360 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c34e:	69db      	ldr	r3, [r3, #28]
 800c350:	2b00      	cmp	r3, #0
 800c352:	d005      	beq.n	800c360 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c35a:	69db      	ldr	r3, [r3, #28]
 800c35c:	6878      	ldr	r0, [r7, #4]
 800c35e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c360:	2300      	movs	r3, #0
}
 800c362:	4618      	mov	r0, r3
 800c364:	3708      	adds	r7, #8
 800c366:	46bd      	mov	sp, r7
 800c368:	bd80      	pop	{r7, pc}

0800c36a <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800c36a:	b480      	push	{r7}
 800c36c:	b083      	sub	sp, #12
 800c36e:	af00      	add	r7, sp, #0
 800c370:	6078      	str	r0, [r7, #4]
 800c372:	460b      	mov	r3, r1
 800c374:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800c376:	2300      	movs	r3, #0
}
 800c378:	4618      	mov	r0, r3
 800c37a:	370c      	adds	r7, #12
 800c37c:	46bd      	mov	sp, r7
 800c37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c382:	4770      	bx	lr

0800c384 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800c384:	b480      	push	{r7}
 800c386:	b083      	sub	sp, #12
 800c388:	af00      	add	r7, sp, #0
 800c38a:	6078      	str	r0, [r7, #4]
 800c38c:	460b      	mov	r3, r1
 800c38e:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800c390:	2300      	movs	r3, #0
}
 800c392:	4618      	mov	r0, r3
 800c394:	370c      	adds	r7, #12
 800c396:	46bd      	mov	sp, r7
 800c398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c39c:	4770      	bx	lr

0800c39e <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800c39e:	b480      	push	{r7}
 800c3a0:	b083      	sub	sp, #12
 800c3a2:	af00      	add	r7, sp, #0
 800c3a4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c3a6:	2300      	movs	r3, #0
}
 800c3a8:	4618      	mov	r0, r3
 800c3aa:	370c      	adds	r7, #12
 800c3ac:	46bd      	mov	sp, r7
 800c3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b2:	4770      	bx	lr

0800c3b4 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800c3b4:	b580      	push	{r7, lr}
 800c3b6:	b082      	sub	sp, #8
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	2201      	movs	r2, #1
 800c3c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d009      	beq.n	800c3e2 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c3d4:	685b      	ldr	r3, [r3, #4]
 800c3d6:	687a      	ldr	r2, [r7, #4]
 800c3d8:	6852      	ldr	r2, [r2, #4]
 800c3da:	b2d2      	uxtb	r2, r2
 800c3dc:	4611      	mov	r1, r2
 800c3de:	6878      	ldr	r0, [r7, #4]
 800c3e0:	4798      	blx	r3
  }

  return USBD_OK;
 800c3e2:	2300      	movs	r3, #0
}
 800c3e4:	4618      	mov	r0, r3
 800c3e6:	3708      	adds	r7, #8
 800c3e8:	46bd      	mov	sp, r7
 800c3ea:	bd80      	pop	{r7, pc}

0800c3ec <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c3ec:	b480      	push	{r7}
 800c3ee:	b087      	sub	sp, #28
 800c3f0:	af00      	add	r7, sp, #0
 800c3f2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c3f8:	697b      	ldr	r3, [r7, #20]
 800c3fa:	781b      	ldrb	r3, [r3, #0]
 800c3fc:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c3fe:	697b      	ldr	r3, [r7, #20]
 800c400:	3301      	adds	r3, #1
 800c402:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c404:	697b      	ldr	r3, [r7, #20]
 800c406:	781b      	ldrb	r3, [r3, #0]
 800c408:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c40a:	8a3b      	ldrh	r3, [r7, #16]
 800c40c:	021b      	lsls	r3, r3, #8
 800c40e:	b21a      	sxth	r2, r3
 800c410:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c414:	4313      	orrs	r3, r2
 800c416:	b21b      	sxth	r3, r3
 800c418:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c41a:	89fb      	ldrh	r3, [r7, #14]
}
 800c41c:	4618      	mov	r0, r3
 800c41e:	371c      	adds	r7, #28
 800c420:	46bd      	mov	sp, r7
 800c422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c426:	4770      	bx	lr

0800c428 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c428:	b580      	push	{r7, lr}
 800c42a:	b084      	sub	sp, #16
 800c42c:	af00      	add	r7, sp, #0
 800c42e:	6078      	str	r0, [r7, #4]
 800c430:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c432:	2300      	movs	r3, #0
 800c434:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c436:	683b      	ldr	r3, [r7, #0]
 800c438:	781b      	ldrb	r3, [r3, #0]
 800c43a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c43e:	2b20      	cmp	r3, #32
 800c440:	d004      	beq.n	800c44c <USBD_StdDevReq+0x24>
 800c442:	2b40      	cmp	r3, #64	; 0x40
 800c444:	d002      	beq.n	800c44c <USBD_StdDevReq+0x24>
 800c446:	2b00      	cmp	r3, #0
 800c448:	d00a      	beq.n	800c460 <USBD_StdDevReq+0x38>
 800c44a:	e050      	b.n	800c4ee <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c452:	689b      	ldr	r3, [r3, #8]
 800c454:	6839      	ldr	r1, [r7, #0]
 800c456:	6878      	ldr	r0, [r7, #4]
 800c458:	4798      	blx	r3
 800c45a:	4603      	mov	r3, r0
 800c45c:	73fb      	strb	r3, [r7, #15]
    break;
 800c45e:	e04b      	b.n	800c4f8 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800c460:	683b      	ldr	r3, [r7, #0]
 800c462:	785b      	ldrb	r3, [r3, #1]
 800c464:	2b09      	cmp	r3, #9
 800c466:	d83c      	bhi.n	800c4e2 <USBD_StdDevReq+0xba>
 800c468:	a201      	add	r2, pc, #4	; (adr r2, 800c470 <USBD_StdDevReq+0x48>)
 800c46a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c46e:	bf00      	nop
 800c470:	0800c4c5 	.word	0x0800c4c5
 800c474:	0800c4d9 	.word	0x0800c4d9
 800c478:	0800c4e3 	.word	0x0800c4e3
 800c47c:	0800c4cf 	.word	0x0800c4cf
 800c480:	0800c4e3 	.word	0x0800c4e3
 800c484:	0800c4a3 	.word	0x0800c4a3
 800c488:	0800c499 	.word	0x0800c499
 800c48c:	0800c4e3 	.word	0x0800c4e3
 800c490:	0800c4bb 	.word	0x0800c4bb
 800c494:	0800c4ad 	.word	0x0800c4ad
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800c498:	6839      	ldr	r1, [r7, #0]
 800c49a:	6878      	ldr	r0, [r7, #4]
 800c49c:	f000 f9ce 	bl	800c83c <USBD_GetDescriptor>
      break;
 800c4a0:	e024      	b.n	800c4ec <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800c4a2:	6839      	ldr	r1, [r7, #0]
 800c4a4:	6878      	ldr	r0, [r7, #4]
 800c4a6:	f000 fb5d 	bl	800cb64 <USBD_SetAddress>
      break;
 800c4aa:	e01f      	b.n	800c4ec <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800c4ac:	6839      	ldr	r1, [r7, #0]
 800c4ae:	6878      	ldr	r0, [r7, #4]
 800c4b0:	f000 fb9a 	bl	800cbe8 <USBD_SetConfig>
 800c4b4:	4603      	mov	r3, r0
 800c4b6:	73fb      	strb	r3, [r7, #15]
      break;
 800c4b8:	e018      	b.n	800c4ec <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800c4ba:	6839      	ldr	r1, [r7, #0]
 800c4bc:	6878      	ldr	r0, [r7, #4]
 800c4be:	f000 fc37 	bl	800cd30 <USBD_GetConfig>
      break;
 800c4c2:	e013      	b.n	800c4ec <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800c4c4:	6839      	ldr	r1, [r7, #0]
 800c4c6:	6878      	ldr	r0, [r7, #4]
 800c4c8:	f000 fc66 	bl	800cd98 <USBD_GetStatus>
      break;
 800c4cc:	e00e      	b.n	800c4ec <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800c4ce:	6839      	ldr	r1, [r7, #0]
 800c4d0:	6878      	ldr	r0, [r7, #4]
 800c4d2:	f000 fc94 	bl	800cdfe <USBD_SetFeature>
      break;
 800c4d6:	e009      	b.n	800c4ec <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800c4d8:	6839      	ldr	r1, [r7, #0]
 800c4da:	6878      	ldr	r0, [r7, #4]
 800c4dc:	f000 fca3 	bl	800ce26 <USBD_ClrFeature>
      break;
 800c4e0:	e004      	b.n	800c4ec <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800c4e2:	6839      	ldr	r1, [r7, #0]
 800c4e4:	6878      	ldr	r0, [r7, #4]
 800c4e6:	f000 fcf9 	bl	800cedc <USBD_CtlError>
      break;
 800c4ea:	bf00      	nop
    }
    break;
 800c4ec:	e004      	b.n	800c4f8 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800c4ee:	6839      	ldr	r1, [r7, #0]
 800c4f0:	6878      	ldr	r0, [r7, #4]
 800c4f2:	f000 fcf3 	bl	800cedc <USBD_CtlError>
    break;
 800c4f6:	bf00      	nop
  }

  return ret;
 800c4f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4fa:	4618      	mov	r0, r3
 800c4fc:	3710      	adds	r7, #16
 800c4fe:	46bd      	mov	sp, r7
 800c500:	bd80      	pop	{r7, pc}
 800c502:	bf00      	nop

0800c504 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c504:	b580      	push	{r7, lr}
 800c506:	b084      	sub	sp, #16
 800c508:	af00      	add	r7, sp, #0
 800c50a:	6078      	str	r0, [r7, #4]
 800c50c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c50e:	2300      	movs	r3, #0
 800c510:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c512:	683b      	ldr	r3, [r7, #0]
 800c514:	781b      	ldrb	r3, [r3, #0]
 800c516:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c51a:	2b20      	cmp	r3, #32
 800c51c:	d003      	beq.n	800c526 <USBD_StdItfReq+0x22>
 800c51e:	2b40      	cmp	r3, #64	; 0x40
 800c520:	d001      	beq.n	800c526 <USBD_StdItfReq+0x22>
 800c522:	2b00      	cmp	r3, #0
 800c524:	d12a      	bne.n	800c57c <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c52c:	3b01      	subs	r3, #1
 800c52e:	2b02      	cmp	r3, #2
 800c530:	d81d      	bhi.n	800c56e <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c532:	683b      	ldr	r3, [r7, #0]
 800c534:	889b      	ldrh	r3, [r3, #4]
 800c536:	b2db      	uxtb	r3, r3
 800c538:	2b01      	cmp	r3, #1
 800c53a:	d813      	bhi.n	800c564 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c542:	689b      	ldr	r3, [r3, #8]
 800c544:	6839      	ldr	r1, [r7, #0]
 800c546:	6878      	ldr	r0, [r7, #4]
 800c548:	4798      	blx	r3
 800c54a:	4603      	mov	r3, r0
 800c54c:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800c54e:	683b      	ldr	r3, [r7, #0]
 800c550:	88db      	ldrh	r3, [r3, #6]
 800c552:	2b00      	cmp	r3, #0
 800c554:	d110      	bne.n	800c578 <USBD_StdItfReq+0x74>
 800c556:	7bfb      	ldrb	r3, [r7, #15]
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d10d      	bne.n	800c578 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800c55c:	6878      	ldr	r0, [r7, #4]
 800c55e:	f000 fd6b 	bl	800d038 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800c562:	e009      	b.n	800c578 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800c564:	6839      	ldr	r1, [r7, #0]
 800c566:	6878      	ldr	r0, [r7, #4]
 800c568:	f000 fcb8 	bl	800cedc <USBD_CtlError>
      break;
 800c56c:	e004      	b.n	800c578 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800c56e:	6839      	ldr	r1, [r7, #0]
 800c570:	6878      	ldr	r0, [r7, #4]
 800c572:	f000 fcb3 	bl	800cedc <USBD_CtlError>
      break;
 800c576:	e000      	b.n	800c57a <USBD_StdItfReq+0x76>
      break;
 800c578:	bf00      	nop
    }
    break;
 800c57a:	e004      	b.n	800c586 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800c57c:	6839      	ldr	r1, [r7, #0]
 800c57e:	6878      	ldr	r0, [r7, #4]
 800c580:	f000 fcac 	bl	800cedc <USBD_CtlError>
    break;
 800c584:	bf00      	nop
  }

  return ret;
 800c586:	7bfb      	ldrb	r3, [r7, #15]
}
 800c588:	4618      	mov	r0, r3
 800c58a:	3710      	adds	r7, #16
 800c58c:	46bd      	mov	sp, r7
 800c58e:	bd80      	pop	{r7, pc}

0800c590 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c590:	b580      	push	{r7, lr}
 800c592:	b084      	sub	sp, #16
 800c594:	af00      	add	r7, sp, #0
 800c596:	6078      	str	r0, [r7, #4]
 800c598:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800c59a:	2300      	movs	r3, #0
 800c59c:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800c59e:	683b      	ldr	r3, [r7, #0]
 800c5a0:	889b      	ldrh	r3, [r3, #4]
 800c5a2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c5a4:	683b      	ldr	r3, [r7, #0]
 800c5a6:	781b      	ldrb	r3, [r3, #0]
 800c5a8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c5ac:	2b20      	cmp	r3, #32
 800c5ae:	d004      	beq.n	800c5ba <USBD_StdEPReq+0x2a>
 800c5b0:	2b40      	cmp	r3, #64	; 0x40
 800c5b2:	d002      	beq.n	800c5ba <USBD_StdEPReq+0x2a>
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d00a      	beq.n	800c5ce <USBD_StdEPReq+0x3e>
 800c5b8:	e135      	b.n	800c826 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c5c0:	689b      	ldr	r3, [r3, #8]
 800c5c2:	6839      	ldr	r1, [r7, #0]
 800c5c4:	6878      	ldr	r0, [r7, #4]
 800c5c6:	4798      	blx	r3
 800c5c8:	4603      	mov	r3, r0
 800c5ca:	73fb      	strb	r3, [r7, #15]
    break;
 800c5cc:	e130      	b.n	800c830 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800c5ce:	683b      	ldr	r3, [r7, #0]
 800c5d0:	785b      	ldrb	r3, [r3, #1]
 800c5d2:	2b01      	cmp	r3, #1
 800c5d4:	d03e      	beq.n	800c654 <USBD_StdEPReq+0xc4>
 800c5d6:	2b03      	cmp	r3, #3
 800c5d8:	d002      	beq.n	800c5e0 <USBD_StdEPReq+0x50>
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d077      	beq.n	800c6ce <USBD_StdEPReq+0x13e>
 800c5de:	e11c      	b.n	800c81a <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c5e6:	2b02      	cmp	r3, #2
 800c5e8:	d002      	beq.n	800c5f0 <USBD_StdEPReq+0x60>
 800c5ea:	2b03      	cmp	r3, #3
 800c5ec:	d015      	beq.n	800c61a <USBD_StdEPReq+0x8a>
 800c5ee:	e02b      	b.n	800c648 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c5f0:	7bbb      	ldrb	r3, [r7, #14]
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d00c      	beq.n	800c610 <USBD_StdEPReq+0x80>
 800c5f6:	7bbb      	ldrb	r3, [r7, #14]
 800c5f8:	2b80      	cmp	r3, #128	; 0x80
 800c5fa:	d009      	beq.n	800c610 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800c5fc:	7bbb      	ldrb	r3, [r7, #14]
 800c5fe:	4619      	mov	r1, r3
 800c600:	6878      	ldr	r0, [r7, #4]
 800c602:	f009 fa88 	bl	8015b16 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c606:	2180      	movs	r1, #128	; 0x80
 800c608:	6878      	ldr	r0, [r7, #4]
 800c60a:	f009 fa84 	bl	8015b16 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800c60e:	e020      	b.n	800c652 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 800c610:	6839      	ldr	r1, [r7, #0]
 800c612:	6878      	ldr	r0, [r7, #4]
 800c614:	f000 fc62 	bl	800cedc <USBD_CtlError>
        break;
 800c618:	e01b      	b.n	800c652 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800c61a:	683b      	ldr	r3, [r7, #0]
 800c61c:	885b      	ldrh	r3, [r3, #2]
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d10e      	bne.n	800c640 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c622:	7bbb      	ldrb	r3, [r7, #14]
 800c624:	2b00      	cmp	r3, #0
 800c626:	d00b      	beq.n	800c640 <USBD_StdEPReq+0xb0>
 800c628:	7bbb      	ldrb	r3, [r7, #14]
 800c62a:	2b80      	cmp	r3, #128	; 0x80
 800c62c:	d008      	beq.n	800c640 <USBD_StdEPReq+0xb0>
 800c62e:	683b      	ldr	r3, [r7, #0]
 800c630:	88db      	ldrh	r3, [r3, #6]
 800c632:	2b00      	cmp	r3, #0
 800c634:	d104      	bne.n	800c640 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800c636:	7bbb      	ldrb	r3, [r7, #14]
 800c638:	4619      	mov	r1, r3
 800c63a:	6878      	ldr	r0, [r7, #4]
 800c63c:	f009 fa6b 	bl	8015b16 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800c640:	6878      	ldr	r0, [r7, #4]
 800c642:	f000 fcf9 	bl	800d038 <USBD_CtlSendStatus>

        break;
 800c646:	e004      	b.n	800c652 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800c648:	6839      	ldr	r1, [r7, #0]
 800c64a:	6878      	ldr	r0, [r7, #4]
 800c64c:	f000 fc46 	bl	800cedc <USBD_CtlError>
        break;
 800c650:	bf00      	nop
      }
      break;
 800c652:	e0e7      	b.n	800c824 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c65a:	2b02      	cmp	r3, #2
 800c65c:	d002      	beq.n	800c664 <USBD_StdEPReq+0xd4>
 800c65e:	2b03      	cmp	r3, #3
 800c660:	d015      	beq.n	800c68e <USBD_StdEPReq+0xfe>
 800c662:	e02d      	b.n	800c6c0 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c664:	7bbb      	ldrb	r3, [r7, #14]
 800c666:	2b00      	cmp	r3, #0
 800c668:	d00c      	beq.n	800c684 <USBD_StdEPReq+0xf4>
 800c66a:	7bbb      	ldrb	r3, [r7, #14]
 800c66c:	2b80      	cmp	r3, #128	; 0x80
 800c66e:	d009      	beq.n	800c684 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800c670:	7bbb      	ldrb	r3, [r7, #14]
 800c672:	4619      	mov	r1, r3
 800c674:	6878      	ldr	r0, [r7, #4]
 800c676:	f009 fa4e 	bl	8015b16 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c67a:	2180      	movs	r1, #128	; 0x80
 800c67c:	6878      	ldr	r0, [r7, #4]
 800c67e:	f009 fa4a 	bl	8015b16 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800c682:	e023      	b.n	800c6cc <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 800c684:	6839      	ldr	r1, [r7, #0]
 800c686:	6878      	ldr	r0, [r7, #4]
 800c688:	f000 fc28 	bl	800cedc <USBD_CtlError>
        break;
 800c68c:	e01e      	b.n	800c6cc <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800c68e:	683b      	ldr	r3, [r7, #0]
 800c690:	885b      	ldrh	r3, [r3, #2]
 800c692:	2b00      	cmp	r3, #0
 800c694:	d119      	bne.n	800c6ca <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800c696:	7bbb      	ldrb	r3, [r7, #14]
 800c698:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d004      	beq.n	800c6aa <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c6a0:	7bbb      	ldrb	r3, [r7, #14]
 800c6a2:	4619      	mov	r1, r3
 800c6a4:	6878      	ldr	r0, [r7, #4]
 800c6a6:	f009 fa55 	bl	8015b54 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800c6aa:	6878      	ldr	r0, [r7, #4]
 800c6ac:	f000 fcc4 	bl	800d038 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c6b6:	689b      	ldr	r3, [r3, #8]
 800c6b8:	6839      	ldr	r1, [r7, #0]
 800c6ba:	6878      	ldr	r0, [r7, #4]
 800c6bc:	4798      	blx	r3
        }
        break;
 800c6be:	e004      	b.n	800c6ca <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 800c6c0:	6839      	ldr	r1, [r7, #0]
 800c6c2:	6878      	ldr	r0, [r7, #4]
 800c6c4:	f000 fc0a 	bl	800cedc <USBD_CtlError>
        break;
 800c6c8:	e000      	b.n	800c6cc <USBD_StdEPReq+0x13c>
        break;
 800c6ca:	bf00      	nop
      }
      break;
 800c6cc:	e0aa      	b.n	800c824 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c6d4:	2b02      	cmp	r3, #2
 800c6d6:	d002      	beq.n	800c6de <USBD_StdEPReq+0x14e>
 800c6d8:	2b03      	cmp	r3, #3
 800c6da:	d032      	beq.n	800c742 <USBD_StdEPReq+0x1b2>
 800c6dc:	e097      	b.n	800c80e <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c6de:	7bbb      	ldrb	r3, [r7, #14]
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d007      	beq.n	800c6f4 <USBD_StdEPReq+0x164>
 800c6e4:	7bbb      	ldrb	r3, [r7, #14]
 800c6e6:	2b80      	cmp	r3, #128	; 0x80
 800c6e8:	d004      	beq.n	800c6f4 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800c6ea:	6839      	ldr	r1, [r7, #0]
 800c6ec:	6878      	ldr	r0, [r7, #4]
 800c6ee:	f000 fbf5 	bl	800cedc <USBD_CtlError>
          break;
 800c6f2:	e091      	b.n	800c818 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c6f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	da0b      	bge.n	800c714 <USBD_StdEPReq+0x184>
 800c6fc:	7bbb      	ldrb	r3, [r7, #14]
 800c6fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c702:	4613      	mov	r3, r2
 800c704:	009b      	lsls	r3, r3, #2
 800c706:	4413      	add	r3, r2
 800c708:	009b      	lsls	r3, r3, #2
 800c70a:	3310      	adds	r3, #16
 800c70c:	687a      	ldr	r2, [r7, #4]
 800c70e:	4413      	add	r3, r2
 800c710:	3304      	adds	r3, #4
 800c712:	e00b      	b.n	800c72c <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800c714:	7bbb      	ldrb	r3, [r7, #14]
 800c716:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c71a:	4613      	mov	r3, r2
 800c71c:	009b      	lsls	r3, r3, #2
 800c71e:	4413      	add	r3, r2
 800c720:	009b      	lsls	r3, r3, #2
 800c722:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c726:	687a      	ldr	r2, [r7, #4]
 800c728:	4413      	add	r3, r2
 800c72a:	3304      	adds	r3, #4
 800c72c:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800c72e:	68bb      	ldr	r3, [r7, #8]
 800c730:	2200      	movs	r2, #0
 800c732:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c734:	68bb      	ldr	r3, [r7, #8]
 800c736:	2202      	movs	r2, #2
 800c738:	4619      	mov	r1, r3
 800c73a:	6878      	ldr	r0, [r7, #4]
 800c73c:	f000 fc3f 	bl	800cfbe <USBD_CtlSendData>
        break;
 800c740:	e06a      	b.n	800c818 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800c742:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c746:	2b00      	cmp	r3, #0
 800c748:	da11      	bge.n	800c76e <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c74a:	7bbb      	ldrb	r3, [r7, #14]
 800c74c:	f003 020f 	and.w	r2, r3, #15
 800c750:	6879      	ldr	r1, [r7, #4]
 800c752:	4613      	mov	r3, r2
 800c754:	009b      	lsls	r3, r3, #2
 800c756:	4413      	add	r3, r2
 800c758:	009b      	lsls	r3, r3, #2
 800c75a:	440b      	add	r3, r1
 800c75c:	3324      	adds	r3, #36	; 0x24
 800c75e:	881b      	ldrh	r3, [r3, #0]
 800c760:	2b00      	cmp	r3, #0
 800c762:	d117      	bne.n	800c794 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800c764:	6839      	ldr	r1, [r7, #0]
 800c766:	6878      	ldr	r0, [r7, #4]
 800c768:	f000 fbb8 	bl	800cedc <USBD_CtlError>
            break;
 800c76c:	e054      	b.n	800c818 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c76e:	7bbb      	ldrb	r3, [r7, #14]
 800c770:	f003 020f 	and.w	r2, r3, #15
 800c774:	6879      	ldr	r1, [r7, #4]
 800c776:	4613      	mov	r3, r2
 800c778:	009b      	lsls	r3, r3, #2
 800c77a:	4413      	add	r3, r2
 800c77c:	009b      	lsls	r3, r3, #2
 800c77e:	440b      	add	r3, r1
 800c780:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c784:	881b      	ldrh	r3, [r3, #0]
 800c786:	2b00      	cmp	r3, #0
 800c788:	d104      	bne.n	800c794 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800c78a:	6839      	ldr	r1, [r7, #0]
 800c78c:	6878      	ldr	r0, [r7, #4]
 800c78e:	f000 fba5 	bl	800cedc <USBD_CtlError>
            break;
 800c792:	e041      	b.n	800c818 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c794:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c798:	2b00      	cmp	r3, #0
 800c79a:	da0b      	bge.n	800c7b4 <USBD_StdEPReq+0x224>
 800c79c:	7bbb      	ldrb	r3, [r7, #14]
 800c79e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c7a2:	4613      	mov	r3, r2
 800c7a4:	009b      	lsls	r3, r3, #2
 800c7a6:	4413      	add	r3, r2
 800c7a8:	009b      	lsls	r3, r3, #2
 800c7aa:	3310      	adds	r3, #16
 800c7ac:	687a      	ldr	r2, [r7, #4]
 800c7ae:	4413      	add	r3, r2
 800c7b0:	3304      	adds	r3, #4
 800c7b2:	e00b      	b.n	800c7cc <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800c7b4:	7bbb      	ldrb	r3, [r7, #14]
 800c7b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c7ba:	4613      	mov	r3, r2
 800c7bc:	009b      	lsls	r3, r3, #2
 800c7be:	4413      	add	r3, r2
 800c7c0:	009b      	lsls	r3, r3, #2
 800c7c2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c7c6:	687a      	ldr	r2, [r7, #4]
 800c7c8:	4413      	add	r3, r2
 800c7ca:	3304      	adds	r3, #4
 800c7cc:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c7ce:	7bbb      	ldrb	r3, [r7, #14]
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d002      	beq.n	800c7da <USBD_StdEPReq+0x24a>
 800c7d4:	7bbb      	ldrb	r3, [r7, #14]
 800c7d6:	2b80      	cmp	r3, #128	; 0x80
 800c7d8:	d103      	bne.n	800c7e2 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800c7da:	68bb      	ldr	r3, [r7, #8]
 800c7dc:	2200      	movs	r2, #0
 800c7de:	601a      	str	r2, [r3, #0]
 800c7e0:	e00e      	b.n	800c800 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c7e2:	7bbb      	ldrb	r3, [r7, #14]
 800c7e4:	4619      	mov	r1, r3
 800c7e6:	6878      	ldr	r0, [r7, #4]
 800c7e8:	f009 f9d3 	bl	8015b92 <USBD_LL_IsStallEP>
 800c7ec:	4603      	mov	r3, r0
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d003      	beq.n	800c7fa <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 800c7f2:	68bb      	ldr	r3, [r7, #8]
 800c7f4:	2201      	movs	r2, #1
 800c7f6:	601a      	str	r2, [r3, #0]
 800c7f8:	e002      	b.n	800c800 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800c7fa:	68bb      	ldr	r3, [r7, #8]
 800c7fc:	2200      	movs	r2, #0
 800c7fe:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c800:	68bb      	ldr	r3, [r7, #8]
 800c802:	2202      	movs	r2, #2
 800c804:	4619      	mov	r1, r3
 800c806:	6878      	ldr	r0, [r7, #4]
 800c808:	f000 fbd9 	bl	800cfbe <USBD_CtlSendData>
          break;
 800c80c:	e004      	b.n	800c818 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 800c80e:	6839      	ldr	r1, [r7, #0]
 800c810:	6878      	ldr	r0, [r7, #4]
 800c812:	f000 fb63 	bl	800cedc <USBD_CtlError>
        break;
 800c816:	bf00      	nop
      }
      break;
 800c818:	e004      	b.n	800c824 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800c81a:	6839      	ldr	r1, [r7, #0]
 800c81c:	6878      	ldr	r0, [r7, #4]
 800c81e:	f000 fb5d 	bl	800cedc <USBD_CtlError>
      break;
 800c822:	bf00      	nop
    }
    break;
 800c824:	e004      	b.n	800c830 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800c826:	6839      	ldr	r1, [r7, #0]
 800c828:	6878      	ldr	r0, [r7, #4]
 800c82a:	f000 fb57 	bl	800cedc <USBD_CtlError>
    break;
 800c82e:	bf00      	nop
  }

  return ret;
 800c830:	7bfb      	ldrb	r3, [r7, #15]
}
 800c832:	4618      	mov	r0, r3
 800c834:	3710      	adds	r7, #16
 800c836:	46bd      	mov	sp, r7
 800c838:	bd80      	pop	{r7, pc}
	...

0800c83c <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c83c:	b580      	push	{r7, lr}
 800c83e:	b084      	sub	sp, #16
 800c840:	af00      	add	r7, sp, #0
 800c842:	6078      	str	r0, [r7, #4]
 800c844:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c846:	2300      	movs	r3, #0
 800c848:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c84a:	2300      	movs	r3, #0
 800c84c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c84e:	2300      	movs	r3, #0
 800c850:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c852:	683b      	ldr	r3, [r7, #0]
 800c854:	885b      	ldrh	r3, [r3, #2]
 800c856:	0a1b      	lsrs	r3, r3, #8
 800c858:	b29b      	uxth	r3, r3
 800c85a:	3b01      	subs	r3, #1
 800c85c:	2b0e      	cmp	r3, #14
 800c85e:	f200 8152 	bhi.w	800cb06 <USBD_GetDescriptor+0x2ca>
 800c862:	a201      	add	r2, pc, #4	; (adr r2, 800c868 <USBD_GetDescriptor+0x2c>)
 800c864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c868:	0800c8d9 	.word	0x0800c8d9
 800c86c:	0800c8f1 	.word	0x0800c8f1
 800c870:	0800c931 	.word	0x0800c931
 800c874:	0800cb07 	.word	0x0800cb07
 800c878:	0800cb07 	.word	0x0800cb07
 800c87c:	0800caa7 	.word	0x0800caa7
 800c880:	0800cad3 	.word	0x0800cad3
 800c884:	0800cb07 	.word	0x0800cb07
 800c888:	0800cb07 	.word	0x0800cb07
 800c88c:	0800cb07 	.word	0x0800cb07
 800c890:	0800cb07 	.word	0x0800cb07
 800c894:	0800cb07 	.word	0x0800cb07
 800c898:	0800cb07 	.word	0x0800cb07
 800c89c:	0800cb07 	.word	0x0800cb07
 800c8a0:	0800c8a5 	.word	0x0800c8a5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c8aa:	69db      	ldr	r3, [r3, #28]
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d00b      	beq.n	800c8c8 <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c8b6:	69db      	ldr	r3, [r3, #28]
 800c8b8:	687a      	ldr	r2, [r7, #4]
 800c8ba:	7c12      	ldrb	r2, [r2, #16]
 800c8bc:	f107 0108 	add.w	r1, r7, #8
 800c8c0:	4610      	mov	r0, r2
 800c8c2:	4798      	blx	r3
 800c8c4:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800c8c6:	e126      	b.n	800cb16 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800c8c8:	6839      	ldr	r1, [r7, #0]
 800c8ca:	6878      	ldr	r0, [r7, #4]
 800c8cc:	f000 fb06 	bl	800cedc <USBD_CtlError>
      err++;
 800c8d0:	7afb      	ldrb	r3, [r7, #11]
 800c8d2:	3301      	adds	r3, #1
 800c8d4:	72fb      	strb	r3, [r7, #11]
    break;
 800c8d6:	e11e      	b.n	800cb16 <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	687a      	ldr	r2, [r7, #4]
 800c8e2:	7c12      	ldrb	r2, [r2, #16]
 800c8e4:	f107 0108 	add.w	r1, r7, #8
 800c8e8:	4610      	mov	r0, r2
 800c8ea:	4798      	blx	r3
 800c8ec:	60f8      	str	r0, [r7, #12]
    break;
 800c8ee:	e112      	b.n	800cb16 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	7c1b      	ldrb	r3, [r3, #16]
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d10d      	bne.n	800c914 <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c8fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c900:	f107 0208 	add.w	r2, r7, #8
 800c904:	4610      	mov	r0, r2
 800c906:	4798      	blx	r3
 800c908:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	3301      	adds	r3, #1
 800c90e:	2202      	movs	r2, #2
 800c910:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800c912:	e100      	b.n	800cb16 <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c91a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c91c:	f107 0208 	add.w	r2, r7, #8
 800c920:	4610      	mov	r0, r2
 800c922:	4798      	blx	r3
 800c924:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	3301      	adds	r3, #1
 800c92a:	2202      	movs	r2, #2
 800c92c:	701a      	strb	r2, [r3, #0]
    break;
 800c92e:	e0f2      	b.n	800cb16 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800c930:	683b      	ldr	r3, [r7, #0]
 800c932:	885b      	ldrh	r3, [r3, #2]
 800c934:	b2db      	uxtb	r3, r3
 800c936:	2b05      	cmp	r3, #5
 800c938:	f200 80ac 	bhi.w	800ca94 <USBD_GetDescriptor+0x258>
 800c93c:	a201      	add	r2, pc, #4	; (adr r2, 800c944 <USBD_GetDescriptor+0x108>)
 800c93e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c942:	bf00      	nop
 800c944:	0800c95d 	.word	0x0800c95d
 800c948:	0800c991 	.word	0x0800c991
 800c94c:	0800c9c5 	.word	0x0800c9c5
 800c950:	0800c9f9 	.word	0x0800c9f9
 800c954:	0800ca2d 	.word	0x0800ca2d
 800c958:	0800ca61 	.word	0x0800ca61
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c962:	685b      	ldr	r3, [r3, #4]
 800c964:	2b00      	cmp	r3, #0
 800c966:	d00b      	beq.n	800c980 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c96e:	685b      	ldr	r3, [r3, #4]
 800c970:	687a      	ldr	r2, [r7, #4]
 800c972:	7c12      	ldrb	r2, [r2, #16]
 800c974:	f107 0108 	add.w	r1, r7, #8
 800c978:	4610      	mov	r0, r2
 800c97a:	4798      	blx	r3
 800c97c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c97e:	e091      	b.n	800caa4 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800c980:	6839      	ldr	r1, [r7, #0]
 800c982:	6878      	ldr	r0, [r7, #4]
 800c984:	f000 faaa 	bl	800cedc <USBD_CtlError>
        err++;
 800c988:	7afb      	ldrb	r3, [r7, #11]
 800c98a:	3301      	adds	r3, #1
 800c98c:	72fb      	strb	r3, [r7, #11]
      break;
 800c98e:	e089      	b.n	800caa4 <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c996:	689b      	ldr	r3, [r3, #8]
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d00b      	beq.n	800c9b4 <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c9a2:	689b      	ldr	r3, [r3, #8]
 800c9a4:	687a      	ldr	r2, [r7, #4]
 800c9a6:	7c12      	ldrb	r2, [r2, #16]
 800c9a8:	f107 0108 	add.w	r1, r7, #8
 800c9ac:	4610      	mov	r0, r2
 800c9ae:	4798      	blx	r3
 800c9b0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c9b2:	e077      	b.n	800caa4 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800c9b4:	6839      	ldr	r1, [r7, #0]
 800c9b6:	6878      	ldr	r0, [r7, #4]
 800c9b8:	f000 fa90 	bl	800cedc <USBD_CtlError>
        err++;
 800c9bc:	7afb      	ldrb	r3, [r7, #11]
 800c9be:	3301      	adds	r3, #1
 800c9c0:	72fb      	strb	r3, [r7, #11]
      break;
 800c9c2:	e06f      	b.n	800caa4 <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c9ca:	68db      	ldr	r3, [r3, #12]
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d00b      	beq.n	800c9e8 <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c9d6:	68db      	ldr	r3, [r3, #12]
 800c9d8:	687a      	ldr	r2, [r7, #4]
 800c9da:	7c12      	ldrb	r2, [r2, #16]
 800c9dc:	f107 0108 	add.w	r1, r7, #8
 800c9e0:	4610      	mov	r0, r2
 800c9e2:	4798      	blx	r3
 800c9e4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c9e6:	e05d      	b.n	800caa4 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800c9e8:	6839      	ldr	r1, [r7, #0]
 800c9ea:	6878      	ldr	r0, [r7, #4]
 800c9ec:	f000 fa76 	bl	800cedc <USBD_CtlError>
        err++;
 800c9f0:	7afb      	ldrb	r3, [r7, #11]
 800c9f2:	3301      	adds	r3, #1
 800c9f4:	72fb      	strb	r3, [r7, #11]
      break;
 800c9f6:	e055      	b.n	800caa4 <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c9fe:	691b      	ldr	r3, [r3, #16]
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d00b      	beq.n	800ca1c <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ca0a:	691b      	ldr	r3, [r3, #16]
 800ca0c:	687a      	ldr	r2, [r7, #4]
 800ca0e:	7c12      	ldrb	r2, [r2, #16]
 800ca10:	f107 0108 	add.w	r1, r7, #8
 800ca14:	4610      	mov	r0, r2
 800ca16:	4798      	blx	r3
 800ca18:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ca1a:	e043      	b.n	800caa4 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800ca1c:	6839      	ldr	r1, [r7, #0]
 800ca1e:	6878      	ldr	r0, [r7, #4]
 800ca20:	f000 fa5c 	bl	800cedc <USBD_CtlError>
        err++;
 800ca24:	7afb      	ldrb	r3, [r7, #11]
 800ca26:	3301      	adds	r3, #1
 800ca28:	72fb      	strb	r3, [r7, #11]
      break;
 800ca2a:	e03b      	b.n	800caa4 <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ca32:	695b      	ldr	r3, [r3, #20]
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d00b      	beq.n	800ca50 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ca3e:	695b      	ldr	r3, [r3, #20]
 800ca40:	687a      	ldr	r2, [r7, #4]
 800ca42:	7c12      	ldrb	r2, [r2, #16]
 800ca44:	f107 0108 	add.w	r1, r7, #8
 800ca48:	4610      	mov	r0, r2
 800ca4a:	4798      	blx	r3
 800ca4c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ca4e:	e029      	b.n	800caa4 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800ca50:	6839      	ldr	r1, [r7, #0]
 800ca52:	6878      	ldr	r0, [r7, #4]
 800ca54:	f000 fa42 	bl	800cedc <USBD_CtlError>
        err++;
 800ca58:	7afb      	ldrb	r3, [r7, #11]
 800ca5a:	3301      	adds	r3, #1
 800ca5c:	72fb      	strb	r3, [r7, #11]
      break;
 800ca5e:	e021      	b.n	800caa4 <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ca66:	699b      	ldr	r3, [r3, #24]
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d00b      	beq.n	800ca84 <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ca72:	699b      	ldr	r3, [r3, #24]
 800ca74:	687a      	ldr	r2, [r7, #4]
 800ca76:	7c12      	ldrb	r2, [r2, #16]
 800ca78:	f107 0108 	add.w	r1, r7, #8
 800ca7c:	4610      	mov	r0, r2
 800ca7e:	4798      	blx	r3
 800ca80:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ca82:	e00f      	b.n	800caa4 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800ca84:	6839      	ldr	r1, [r7, #0]
 800ca86:	6878      	ldr	r0, [r7, #4]
 800ca88:	f000 fa28 	bl	800cedc <USBD_CtlError>
        err++;
 800ca8c:	7afb      	ldrb	r3, [r7, #11]
 800ca8e:	3301      	adds	r3, #1
 800ca90:	72fb      	strb	r3, [r7, #11]
      break;
 800ca92:	e007      	b.n	800caa4 <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800ca94:	6839      	ldr	r1, [r7, #0]
 800ca96:	6878      	ldr	r0, [r7, #4]
 800ca98:	f000 fa20 	bl	800cedc <USBD_CtlError>
      err++;
 800ca9c:	7afb      	ldrb	r3, [r7, #11]
 800ca9e:	3301      	adds	r3, #1
 800caa0:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800caa2:	bf00      	nop
    }
    break;
 800caa4:	e037      	b.n	800cb16 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	7c1b      	ldrb	r3, [r3, #16]
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d109      	bne.n	800cac2 <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cab4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cab6:	f107 0208 	add.w	r2, r7, #8
 800caba:	4610      	mov	r0, r2
 800cabc:	4798      	blx	r3
 800cabe:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800cac0:	e029      	b.n	800cb16 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800cac2:	6839      	ldr	r1, [r7, #0]
 800cac4:	6878      	ldr	r0, [r7, #4]
 800cac6:	f000 fa09 	bl	800cedc <USBD_CtlError>
      err++;
 800caca:	7afb      	ldrb	r3, [r7, #11]
 800cacc:	3301      	adds	r3, #1
 800cace:	72fb      	strb	r3, [r7, #11]
    break;
 800cad0:	e021      	b.n	800cb16 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	7c1b      	ldrb	r3, [r3, #16]
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d10d      	bne.n	800caf6 <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cae2:	f107 0208 	add.w	r2, r7, #8
 800cae6:	4610      	mov	r0, r2
 800cae8:	4798      	blx	r3
 800caea:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	3301      	adds	r3, #1
 800caf0:	2207      	movs	r2, #7
 800caf2:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800caf4:	e00f      	b.n	800cb16 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800caf6:	6839      	ldr	r1, [r7, #0]
 800caf8:	6878      	ldr	r0, [r7, #4]
 800cafa:	f000 f9ef 	bl	800cedc <USBD_CtlError>
      err++;
 800cafe:	7afb      	ldrb	r3, [r7, #11]
 800cb00:	3301      	adds	r3, #1
 800cb02:	72fb      	strb	r3, [r7, #11]
    break;
 800cb04:	e007      	b.n	800cb16 <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 800cb06:	6839      	ldr	r1, [r7, #0]
 800cb08:	6878      	ldr	r0, [r7, #4]
 800cb0a:	f000 f9e7 	bl	800cedc <USBD_CtlError>
    err++;
 800cb0e:	7afb      	ldrb	r3, [r7, #11]
 800cb10:	3301      	adds	r3, #1
 800cb12:	72fb      	strb	r3, [r7, #11]
    break;
 800cb14:	bf00      	nop
  }

  if (err != 0U)
 800cb16:	7afb      	ldrb	r3, [r7, #11]
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d11e      	bne.n	800cb5a <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800cb1c:	683b      	ldr	r3, [r7, #0]
 800cb1e:	88db      	ldrh	r3, [r3, #6]
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d016      	beq.n	800cb52 <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 800cb24:	893b      	ldrh	r3, [r7, #8]
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d00e      	beq.n	800cb48 <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 800cb2a:	683b      	ldr	r3, [r7, #0]
 800cb2c:	88da      	ldrh	r2, [r3, #6]
 800cb2e:	893b      	ldrh	r3, [r7, #8]
 800cb30:	4293      	cmp	r3, r2
 800cb32:	bf28      	it	cs
 800cb34:	4613      	movcs	r3, r2
 800cb36:	b29b      	uxth	r3, r3
 800cb38:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800cb3a:	893b      	ldrh	r3, [r7, #8]
 800cb3c:	461a      	mov	r2, r3
 800cb3e:	68f9      	ldr	r1, [r7, #12]
 800cb40:	6878      	ldr	r0, [r7, #4]
 800cb42:	f000 fa3c 	bl	800cfbe <USBD_CtlSendData>
 800cb46:	e009      	b.n	800cb5c <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800cb48:	6839      	ldr	r1, [r7, #0]
 800cb4a:	6878      	ldr	r0, [r7, #4]
 800cb4c:	f000 f9c6 	bl	800cedc <USBD_CtlError>
 800cb50:	e004      	b.n	800cb5c <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800cb52:	6878      	ldr	r0, [r7, #4]
 800cb54:	f000 fa70 	bl	800d038 <USBD_CtlSendStatus>
 800cb58:	e000      	b.n	800cb5c <USBD_GetDescriptor+0x320>
    return;
 800cb5a:	bf00      	nop
    }
  }
}
 800cb5c:	3710      	adds	r7, #16
 800cb5e:	46bd      	mov	sp, r7
 800cb60:	bd80      	pop	{r7, pc}
 800cb62:	bf00      	nop

0800cb64 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cb64:	b580      	push	{r7, lr}
 800cb66:	b084      	sub	sp, #16
 800cb68:	af00      	add	r7, sp, #0
 800cb6a:	6078      	str	r0, [r7, #4]
 800cb6c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800cb6e:	683b      	ldr	r3, [r7, #0]
 800cb70:	889b      	ldrh	r3, [r3, #4]
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d130      	bne.n	800cbd8 <USBD_SetAddress+0x74>
 800cb76:	683b      	ldr	r3, [r7, #0]
 800cb78:	88db      	ldrh	r3, [r3, #6]
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d12c      	bne.n	800cbd8 <USBD_SetAddress+0x74>
 800cb7e:	683b      	ldr	r3, [r7, #0]
 800cb80:	885b      	ldrh	r3, [r3, #2]
 800cb82:	2b7f      	cmp	r3, #127	; 0x7f
 800cb84:	d828      	bhi.n	800cbd8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800cb86:	683b      	ldr	r3, [r7, #0]
 800cb88:	885b      	ldrh	r3, [r3, #2]
 800cb8a:	b2db      	uxtb	r3, r3
 800cb8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cb90:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cb98:	2b03      	cmp	r3, #3
 800cb9a:	d104      	bne.n	800cba6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800cb9c:	6839      	ldr	r1, [r7, #0]
 800cb9e:	6878      	ldr	r0, [r7, #4]
 800cba0:	f000 f99c 	bl	800cedc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cba4:	e01c      	b.n	800cbe0 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	7bfa      	ldrb	r2, [r7, #15]
 800cbaa:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800cbae:	7bfb      	ldrb	r3, [r7, #15]
 800cbb0:	4619      	mov	r1, r3
 800cbb2:	6878      	ldr	r0, [r7, #4]
 800cbb4:	f009 f819 	bl	8015bea <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800cbb8:	6878      	ldr	r0, [r7, #4]
 800cbba:	f000 fa3d 	bl	800d038 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800cbbe:	7bfb      	ldrb	r3, [r7, #15]
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d004      	beq.n	800cbce <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	2202      	movs	r2, #2
 800cbc8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cbcc:	e008      	b.n	800cbe0 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	2201      	movs	r2, #1
 800cbd2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cbd6:	e003      	b.n	800cbe0 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800cbd8:	6839      	ldr	r1, [r7, #0]
 800cbda:	6878      	ldr	r0, [r7, #4]
 800cbdc:	f000 f97e 	bl	800cedc <USBD_CtlError>
  }
}
 800cbe0:	bf00      	nop
 800cbe2:	3710      	adds	r7, #16
 800cbe4:	46bd      	mov	sp, r7
 800cbe6:	bd80      	pop	{r7, pc}

0800cbe8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cbe8:	b580      	push	{r7, lr}
 800cbea:	b084      	sub	sp, #16
 800cbec:	af00      	add	r7, sp, #0
 800cbee:	6078      	str	r0, [r7, #4]
 800cbf0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cbf2:	2300      	movs	r3, #0
 800cbf4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800cbf6:	683b      	ldr	r3, [r7, #0]
 800cbf8:	885b      	ldrh	r3, [r3, #2]
 800cbfa:	b2da      	uxtb	r2, r3
 800cbfc:	4b4b      	ldr	r3, [pc, #300]	; (800cd2c <USBD_SetConfig+0x144>)
 800cbfe:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800cc00:	4b4a      	ldr	r3, [pc, #296]	; (800cd2c <USBD_SetConfig+0x144>)
 800cc02:	781b      	ldrb	r3, [r3, #0]
 800cc04:	2b01      	cmp	r3, #1
 800cc06:	d905      	bls.n	800cc14 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800cc08:	6839      	ldr	r1, [r7, #0]
 800cc0a:	6878      	ldr	r0, [r7, #4]
 800cc0c:	f000 f966 	bl	800cedc <USBD_CtlError>
    return USBD_FAIL;
 800cc10:	2303      	movs	r3, #3
 800cc12:	e087      	b.n	800cd24 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cc1a:	2b02      	cmp	r3, #2
 800cc1c:	d002      	beq.n	800cc24 <USBD_SetConfig+0x3c>
 800cc1e:	2b03      	cmp	r3, #3
 800cc20:	d025      	beq.n	800cc6e <USBD_SetConfig+0x86>
 800cc22:	e071      	b.n	800cd08 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800cc24:	4b41      	ldr	r3, [pc, #260]	; (800cd2c <USBD_SetConfig+0x144>)
 800cc26:	781b      	ldrb	r3, [r3, #0]
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d01c      	beq.n	800cc66 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800cc2c:	4b3f      	ldr	r3, [pc, #252]	; (800cd2c <USBD_SetConfig+0x144>)
 800cc2e:	781b      	ldrb	r3, [r3, #0]
 800cc30:	461a      	mov	r2, r3
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800cc36:	4b3d      	ldr	r3, [pc, #244]	; (800cd2c <USBD_SetConfig+0x144>)
 800cc38:	781b      	ldrb	r3, [r3, #0]
 800cc3a:	4619      	mov	r1, r3
 800cc3c:	6878      	ldr	r0, [r7, #4]
 800cc3e:	f7ff f97e 	bl	800bf3e <USBD_SetClassConfig>
 800cc42:	4603      	mov	r3, r0
 800cc44:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800cc46:	7bfb      	ldrb	r3, [r7, #15]
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d004      	beq.n	800cc56 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800cc4c:	6839      	ldr	r1, [r7, #0]
 800cc4e:	6878      	ldr	r0, [r7, #4]
 800cc50:	f000 f944 	bl	800cedc <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800cc54:	e065      	b.n	800cd22 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800cc56:	6878      	ldr	r0, [r7, #4]
 800cc58:	f000 f9ee 	bl	800d038 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	2203      	movs	r2, #3
 800cc60:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800cc64:	e05d      	b.n	800cd22 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800cc66:	6878      	ldr	r0, [r7, #4]
 800cc68:	f000 f9e6 	bl	800d038 <USBD_CtlSendStatus>
    break;
 800cc6c:	e059      	b.n	800cd22 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800cc6e:	4b2f      	ldr	r3, [pc, #188]	; (800cd2c <USBD_SetConfig+0x144>)
 800cc70:	781b      	ldrb	r3, [r3, #0]
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d112      	bne.n	800cc9c <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	2202      	movs	r2, #2
 800cc7a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800cc7e:	4b2b      	ldr	r3, [pc, #172]	; (800cd2c <USBD_SetConfig+0x144>)
 800cc80:	781b      	ldrb	r3, [r3, #0]
 800cc82:	461a      	mov	r2, r3
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cc88:	4b28      	ldr	r3, [pc, #160]	; (800cd2c <USBD_SetConfig+0x144>)
 800cc8a:	781b      	ldrb	r3, [r3, #0]
 800cc8c:	4619      	mov	r1, r3
 800cc8e:	6878      	ldr	r0, [r7, #4]
 800cc90:	f7ff f971 	bl	800bf76 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800cc94:	6878      	ldr	r0, [r7, #4]
 800cc96:	f000 f9cf 	bl	800d038 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800cc9a:	e042      	b.n	800cd22 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800cc9c:	4b23      	ldr	r3, [pc, #140]	; (800cd2c <USBD_SetConfig+0x144>)
 800cc9e:	781b      	ldrb	r3, [r3, #0]
 800cca0:	461a      	mov	r2, r3
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	685b      	ldr	r3, [r3, #4]
 800cca6:	429a      	cmp	r2, r3
 800cca8:	d02a      	beq.n	800cd00 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	685b      	ldr	r3, [r3, #4]
 800ccae:	b2db      	uxtb	r3, r3
 800ccb0:	4619      	mov	r1, r3
 800ccb2:	6878      	ldr	r0, [r7, #4]
 800ccb4:	f7ff f95f 	bl	800bf76 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800ccb8:	4b1c      	ldr	r3, [pc, #112]	; (800cd2c <USBD_SetConfig+0x144>)
 800ccba:	781b      	ldrb	r3, [r3, #0]
 800ccbc:	461a      	mov	r2, r3
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800ccc2:	4b1a      	ldr	r3, [pc, #104]	; (800cd2c <USBD_SetConfig+0x144>)
 800ccc4:	781b      	ldrb	r3, [r3, #0]
 800ccc6:	4619      	mov	r1, r3
 800ccc8:	6878      	ldr	r0, [r7, #4]
 800ccca:	f7ff f938 	bl	800bf3e <USBD_SetClassConfig>
 800ccce:	4603      	mov	r3, r0
 800ccd0:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800ccd2:	7bfb      	ldrb	r3, [r7, #15]
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d00f      	beq.n	800ccf8 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800ccd8:	6839      	ldr	r1, [r7, #0]
 800ccda:	6878      	ldr	r0, [r7, #4]
 800ccdc:	f000 f8fe 	bl	800cedc <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	685b      	ldr	r3, [r3, #4]
 800cce4:	b2db      	uxtb	r3, r3
 800cce6:	4619      	mov	r1, r3
 800cce8:	6878      	ldr	r0, [r7, #4]
 800ccea:	f7ff f944 	bl	800bf76 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	2202      	movs	r2, #2
 800ccf2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800ccf6:	e014      	b.n	800cd22 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800ccf8:	6878      	ldr	r0, [r7, #4]
 800ccfa:	f000 f99d 	bl	800d038 <USBD_CtlSendStatus>
    break;
 800ccfe:	e010      	b.n	800cd22 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800cd00:	6878      	ldr	r0, [r7, #4]
 800cd02:	f000 f999 	bl	800d038 <USBD_CtlSendStatus>
    break;
 800cd06:	e00c      	b.n	800cd22 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800cd08:	6839      	ldr	r1, [r7, #0]
 800cd0a:	6878      	ldr	r0, [r7, #4]
 800cd0c:	f000 f8e6 	bl	800cedc <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cd10:	4b06      	ldr	r3, [pc, #24]	; (800cd2c <USBD_SetConfig+0x144>)
 800cd12:	781b      	ldrb	r3, [r3, #0]
 800cd14:	4619      	mov	r1, r3
 800cd16:	6878      	ldr	r0, [r7, #4]
 800cd18:	f7ff f92d 	bl	800bf76 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800cd1c:	2303      	movs	r3, #3
 800cd1e:	73fb      	strb	r3, [r7, #15]
    break;
 800cd20:	bf00      	nop
  }

  return ret;
 800cd22:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd24:	4618      	mov	r0, r3
 800cd26:	3710      	adds	r7, #16
 800cd28:	46bd      	mov	sp, r7
 800cd2a:	bd80      	pop	{r7, pc}
 800cd2c:	20000218 	.word	0x20000218

0800cd30 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cd30:	b580      	push	{r7, lr}
 800cd32:	b082      	sub	sp, #8
 800cd34:	af00      	add	r7, sp, #0
 800cd36:	6078      	str	r0, [r7, #4]
 800cd38:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800cd3a:	683b      	ldr	r3, [r7, #0]
 800cd3c:	88db      	ldrh	r3, [r3, #6]
 800cd3e:	2b01      	cmp	r3, #1
 800cd40:	d004      	beq.n	800cd4c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800cd42:	6839      	ldr	r1, [r7, #0]
 800cd44:	6878      	ldr	r0, [r7, #4]
 800cd46:	f000 f8c9 	bl	800cedc <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800cd4a:	e021      	b.n	800cd90 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cd52:	2b01      	cmp	r3, #1
 800cd54:	db17      	blt.n	800cd86 <USBD_GetConfig+0x56>
 800cd56:	2b02      	cmp	r3, #2
 800cd58:	dd02      	ble.n	800cd60 <USBD_GetConfig+0x30>
 800cd5a:	2b03      	cmp	r3, #3
 800cd5c:	d00b      	beq.n	800cd76 <USBD_GetConfig+0x46>
 800cd5e:	e012      	b.n	800cd86 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	2200      	movs	r2, #0
 800cd64:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	3308      	adds	r3, #8
 800cd6a:	2201      	movs	r2, #1
 800cd6c:	4619      	mov	r1, r3
 800cd6e:	6878      	ldr	r0, [r7, #4]
 800cd70:	f000 f925 	bl	800cfbe <USBD_CtlSendData>
      break;
 800cd74:	e00c      	b.n	800cd90 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	3304      	adds	r3, #4
 800cd7a:	2201      	movs	r2, #1
 800cd7c:	4619      	mov	r1, r3
 800cd7e:	6878      	ldr	r0, [r7, #4]
 800cd80:	f000 f91d 	bl	800cfbe <USBD_CtlSendData>
      break;
 800cd84:	e004      	b.n	800cd90 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800cd86:	6839      	ldr	r1, [r7, #0]
 800cd88:	6878      	ldr	r0, [r7, #4]
 800cd8a:	f000 f8a7 	bl	800cedc <USBD_CtlError>
      break;
 800cd8e:	bf00      	nop
}
 800cd90:	bf00      	nop
 800cd92:	3708      	adds	r7, #8
 800cd94:	46bd      	mov	sp, r7
 800cd96:	bd80      	pop	{r7, pc}

0800cd98 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cd98:	b580      	push	{r7, lr}
 800cd9a:	b082      	sub	sp, #8
 800cd9c:	af00      	add	r7, sp, #0
 800cd9e:	6078      	str	r0, [r7, #4]
 800cda0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cda8:	3b01      	subs	r3, #1
 800cdaa:	2b02      	cmp	r3, #2
 800cdac:	d81e      	bhi.n	800cdec <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800cdae:	683b      	ldr	r3, [r7, #0]
 800cdb0:	88db      	ldrh	r3, [r3, #6]
 800cdb2:	2b02      	cmp	r3, #2
 800cdb4:	d004      	beq.n	800cdc0 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800cdb6:	6839      	ldr	r1, [r7, #0]
 800cdb8:	6878      	ldr	r0, [r7, #4]
 800cdba:	f000 f88f 	bl	800cedc <USBD_CtlError>
      break;
 800cdbe:	e01a      	b.n	800cdf6 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	2201      	movs	r2, #1
 800cdc4:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d005      	beq.n	800cddc <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	68db      	ldr	r3, [r3, #12]
 800cdd4:	f043 0202 	orr.w	r2, r3, #2
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	330c      	adds	r3, #12
 800cde0:	2202      	movs	r2, #2
 800cde2:	4619      	mov	r1, r3
 800cde4:	6878      	ldr	r0, [r7, #4]
 800cde6:	f000 f8ea 	bl	800cfbe <USBD_CtlSendData>
    break;
 800cdea:	e004      	b.n	800cdf6 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800cdec:	6839      	ldr	r1, [r7, #0]
 800cdee:	6878      	ldr	r0, [r7, #4]
 800cdf0:	f000 f874 	bl	800cedc <USBD_CtlError>
    break;
 800cdf4:	bf00      	nop
  }
}
 800cdf6:	bf00      	nop
 800cdf8:	3708      	adds	r7, #8
 800cdfa:	46bd      	mov	sp, r7
 800cdfc:	bd80      	pop	{r7, pc}

0800cdfe <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cdfe:	b580      	push	{r7, lr}
 800ce00:	b082      	sub	sp, #8
 800ce02:	af00      	add	r7, sp, #0
 800ce04:	6078      	str	r0, [r7, #4]
 800ce06:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ce08:	683b      	ldr	r3, [r7, #0]
 800ce0a:	885b      	ldrh	r3, [r3, #2]
 800ce0c:	2b01      	cmp	r3, #1
 800ce0e:	d106      	bne.n	800ce1e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	2201      	movs	r2, #1
 800ce14:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ce18:	6878      	ldr	r0, [r7, #4]
 800ce1a:	f000 f90d 	bl	800d038 <USBD_CtlSendStatus>
  }
}
 800ce1e:	bf00      	nop
 800ce20:	3708      	adds	r7, #8
 800ce22:	46bd      	mov	sp, r7
 800ce24:	bd80      	pop	{r7, pc}

0800ce26 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ce26:	b580      	push	{r7, lr}
 800ce28:	b082      	sub	sp, #8
 800ce2a:	af00      	add	r7, sp, #0
 800ce2c:	6078      	str	r0, [r7, #4]
 800ce2e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ce36:	3b01      	subs	r3, #1
 800ce38:	2b02      	cmp	r3, #2
 800ce3a:	d80b      	bhi.n	800ce54 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ce3c:	683b      	ldr	r3, [r7, #0]
 800ce3e:	885b      	ldrh	r3, [r3, #2]
 800ce40:	2b01      	cmp	r3, #1
 800ce42:	d10c      	bne.n	800ce5e <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	2200      	movs	r2, #0
 800ce48:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ce4c:	6878      	ldr	r0, [r7, #4]
 800ce4e:	f000 f8f3 	bl	800d038 <USBD_CtlSendStatus>
      }
      break;
 800ce52:	e004      	b.n	800ce5e <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800ce54:	6839      	ldr	r1, [r7, #0]
 800ce56:	6878      	ldr	r0, [r7, #4]
 800ce58:	f000 f840 	bl	800cedc <USBD_CtlError>
      break;
 800ce5c:	e000      	b.n	800ce60 <USBD_ClrFeature+0x3a>
      break;
 800ce5e:	bf00      	nop
  }
}
 800ce60:	bf00      	nop
 800ce62:	3708      	adds	r7, #8
 800ce64:	46bd      	mov	sp, r7
 800ce66:	bd80      	pop	{r7, pc}

0800ce68 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ce68:	b580      	push	{r7, lr}
 800ce6a:	b084      	sub	sp, #16
 800ce6c:	af00      	add	r7, sp, #0
 800ce6e:	6078      	str	r0, [r7, #4]
 800ce70:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ce72:	683b      	ldr	r3, [r7, #0]
 800ce74:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	781a      	ldrb	r2, [r3, #0]
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	3301      	adds	r3, #1
 800ce82:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	781a      	ldrb	r2, [r3, #0]
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	3301      	adds	r3, #1
 800ce90:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ce92:	68f8      	ldr	r0, [r7, #12]
 800ce94:	f7ff faaa 	bl	800c3ec <SWAPBYTE>
 800ce98:	4603      	mov	r3, r0
 800ce9a:	461a      	mov	r2, r3
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	3301      	adds	r3, #1
 800cea4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	3301      	adds	r3, #1
 800ceaa:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ceac:	68f8      	ldr	r0, [r7, #12]
 800ceae:	f7ff fa9d 	bl	800c3ec <SWAPBYTE>
 800ceb2:	4603      	mov	r3, r0
 800ceb4:	461a      	mov	r2, r3
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	3301      	adds	r3, #1
 800cebe:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	3301      	adds	r3, #1
 800cec4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800cec6:	68f8      	ldr	r0, [r7, #12]
 800cec8:	f7ff fa90 	bl	800c3ec <SWAPBYTE>
 800cecc:	4603      	mov	r3, r0
 800cece:	461a      	mov	r2, r3
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	80da      	strh	r2, [r3, #6]
}
 800ced4:	bf00      	nop
 800ced6:	3710      	adds	r7, #16
 800ced8:	46bd      	mov	sp, r7
 800ceda:	bd80      	pop	{r7, pc}

0800cedc <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cedc:	b580      	push	{r7, lr}
 800cede:	b082      	sub	sp, #8
 800cee0:	af00      	add	r7, sp, #0
 800cee2:	6078      	str	r0, [r7, #4]
 800cee4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800cee6:	2180      	movs	r1, #128	; 0x80
 800cee8:	6878      	ldr	r0, [r7, #4]
 800ceea:	f008 fe14 	bl	8015b16 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ceee:	2100      	movs	r1, #0
 800cef0:	6878      	ldr	r0, [r7, #4]
 800cef2:	f008 fe10 	bl	8015b16 <USBD_LL_StallEP>
}
 800cef6:	bf00      	nop
 800cef8:	3708      	adds	r7, #8
 800cefa:	46bd      	mov	sp, r7
 800cefc:	bd80      	pop	{r7, pc}

0800cefe <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800cefe:	b580      	push	{r7, lr}
 800cf00:	b086      	sub	sp, #24
 800cf02:	af00      	add	r7, sp, #0
 800cf04:	60f8      	str	r0, [r7, #12]
 800cf06:	60b9      	str	r1, [r7, #8]
 800cf08:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800cf0a:	2300      	movs	r3, #0
 800cf0c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d036      	beq.n	800cf82 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800cf18:	6938      	ldr	r0, [r7, #16]
 800cf1a:	f000 f836 	bl	800cf8a <USBD_GetLen>
 800cf1e:	4603      	mov	r3, r0
 800cf20:	3301      	adds	r3, #1
 800cf22:	b29b      	uxth	r3, r3
 800cf24:	005b      	lsls	r3, r3, #1
 800cf26:	b29a      	uxth	r2, r3
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800cf2c:	7dfb      	ldrb	r3, [r7, #23]
 800cf2e:	68ba      	ldr	r2, [r7, #8]
 800cf30:	4413      	add	r3, r2
 800cf32:	687a      	ldr	r2, [r7, #4]
 800cf34:	7812      	ldrb	r2, [r2, #0]
 800cf36:	701a      	strb	r2, [r3, #0]
  idx++;
 800cf38:	7dfb      	ldrb	r3, [r7, #23]
 800cf3a:	3301      	adds	r3, #1
 800cf3c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800cf3e:	7dfb      	ldrb	r3, [r7, #23]
 800cf40:	68ba      	ldr	r2, [r7, #8]
 800cf42:	4413      	add	r3, r2
 800cf44:	2203      	movs	r2, #3
 800cf46:	701a      	strb	r2, [r3, #0]
  idx++;
 800cf48:	7dfb      	ldrb	r3, [r7, #23]
 800cf4a:	3301      	adds	r3, #1
 800cf4c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800cf4e:	e013      	b.n	800cf78 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800cf50:	7dfb      	ldrb	r3, [r7, #23]
 800cf52:	68ba      	ldr	r2, [r7, #8]
 800cf54:	4413      	add	r3, r2
 800cf56:	693a      	ldr	r2, [r7, #16]
 800cf58:	7812      	ldrb	r2, [r2, #0]
 800cf5a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800cf5c:	693b      	ldr	r3, [r7, #16]
 800cf5e:	3301      	adds	r3, #1
 800cf60:	613b      	str	r3, [r7, #16]
    idx++;
 800cf62:	7dfb      	ldrb	r3, [r7, #23]
 800cf64:	3301      	adds	r3, #1
 800cf66:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800cf68:	7dfb      	ldrb	r3, [r7, #23]
 800cf6a:	68ba      	ldr	r2, [r7, #8]
 800cf6c:	4413      	add	r3, r2
 800cf6e:	2200      	movs	r2, #0
 800cf70:	701a      	strb	r2, [r3, #0]
    idx++;
 800cf72:	7dfb      	ldrb	r3, [r7, #23]
 800cf74:	3301      	adds	r3, #1
 800cf76:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800cf78:	693b      	ldr	r3, [r7, #16]
 800cf7a:	781b      	ldrb	r3, [r3, #0]
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d1e7      	bne.n	800cf50 <USBD_GetString+0x52>
 800cf80:	e000      	b.n	800cf84 <USBD_GetString+0x86>
    return;
 800cf82:	bf00      	nop
  }
}
 800cf84:	3718      	adds	r7, #24
 800cf86:	46bd      	mov	sp, r7
 800cf88:	bd80      	pop	{r7, pc}

0800cf8a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800cf8a:	b480      	push	{r7}
 800cf8c:	b085      	sub	sp, #20
 800cf8e:	af00      	add	r7, sp, #0
 800cf90:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800cf92:	2300      	movs	r3, #0
 800cf94:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800cf9a:	e005      	b.n	800cfa8 <USBD_GetLen+0x1e>
  {
    len++;
 800cf9c:	7bfb      	ldrb	r3, [r7, #15]
 800cf9e:	3301      	adds	r3, #1
 800cfa0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800cfa2:	68bb      	ldr	r3, [r7, #8]
 800cfa4:	3301      	adds	r3, #1
 800cfa6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800cfa8:	68bb      	ldr	r3, [r7, #8]
 800cfaa:	781b      	ldrb	r3, [r3, #0]
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d1f5      	bne.n	800cf9c <USBD_GetLen+0x12>
  }

  return len;
 800cfb0:	7bfb      	ldrb	r3, [r7, #15]
}
 800cfb2:	4618      	mov	r0, r3
 800cfb4:	3714      	adds	r7, #20
 800cfb6:	46bd      	mov	sp, r7
 800cfb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfbc:	4770      	bx	lr

0800cfbe <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800cfbe:	b580      	push	{r7, lr}
 800cfc0:	b084      	sub	sp, #16
 800cfc2:	af00      	add	r7, sp, #0
 800cfc4:	60f8      	str	r0, [r7, #12]
 800cfc6:	60b9      	str	r1, [r7, #8]
 800cfc8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	2202      	movs	r2, #2
 800cfce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	687a      	ldr	r2, [r7, #4]
 800cfd6:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	687a      	ldr	r2, [r7, #4]
 800cfdc:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	68ba      	ldr	r2, [r7, #8]
 800cfe2:	2100      	movs	r1, #0
 800cfe4:	68f8      	ldr	r0, [r7, #12]
 800cfe6:	f008 fe1f 	bl	8015c28 <USBD_LL_Transmit>

  return USBD_OK;
 800cfea:	2300      	movs	r3, #0
}
 800cfec:	4618      	mov	r0, r3
 800cfee:	3710      	adds	r7, #16
 800cff0:	46bd      	mov	sp, r7
 800cff2:	bd80      	pop	{r7, pc}

0800cff4 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800cff4:	b580      	push	{r7, lr}
 800cff6:	b084      	sub	sp, #16
 800cff8:	af00      	add	r7, sp, #0
 800cffa:	60f8      	str	r0, [r7, #12]
 800cffc:	60b9      	str	r1, [r7, #8]
 800cffe:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	68ba      	ldr	r2, [r7, #8]
 800d004:	2100      	movs	r1, #0
 800d006:	68f8      	ldr	r0, [r7, #12]
 800d008:	f008 fe0e 	bl	8015c28 <USBD_LL_Transmit>

  return USBD_OK;
 800d00c:	2300      	movs	r3, #0
}
 800d00e:	4618      	mov	r0, r3
 800d010:	3710      	adds	r7, #16
 800d012:	46bd      	mov	sp, r7
 800d014:	bd80      	pop	{r7, pc}

0800d016 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d016:	b580      	push	{r7, lr}
 800d018:	b084      	sub	sp, #16
 800d01a:	af00      	add	r7, sp, #0
 800d01c:	60f8      	str	r0, [r7, #12]
 800d01e:	60b9      	str	r1, [r7, #8]
 800d020:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	68ba      	ldr	r2, [r7, #8]
 800d026:	2100      	movs	r1, #0
 800d028:	68f8      	ldr	r0, [r7, #12]
 800d02a:	f008 fe1e 	bl	8015c6a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d02e:	2300      	movs	r3, #0
}
 800d030:	4618      	mov	r0, r3
 800d032:	3710      	adds	r7, #16
 800d034:	46bd      	mov	sp, r7
 800d036:	bd80      	pop	{r7, pc}

0800d038 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d038:	b580      	push	{r7, lr}
 800d03a:	b082      	sub	sp, #8
 800d03c:	af00      	add	r7, sp, #0
 800d03e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	2204      	movs	r2, #4
 800d044:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d048:	2300      	movs	r3, #0
 800d04a:	2200      	movs	r2, #0
 800d04c:	2100      	movs	r1, #0
 800d04e:	6878      	ldr	r0, [r7, #4]
 800d050:	f008 fdea 	bl	8015c28 <USBD_LL_Transmit>

  return USBD_OK;
 800d054:	2300      	movs	r3, #0
}
 800d056:	4618      	mov	r0, r3
 800d058:	3708      	adds	r7, #8
 800d05a:	46bd      	mov	sp, r7
 800d05c:	bd80      	pop	{r7, pc}

0800d05e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d05e:	b580      	push	{r7, lr}
 800d060:	b082      	sub	sp, #8
 800d062:	af00      	add	r7, sp, #0
 800d064:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	2205      	movs	r2, #5
 800d06a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d06e:	2300      	movs	r3, #0
 800d070:	2200      	movs	r2, #0
 800d072:	2100      	movs	r1, #0
 800d074:	6878      	ldr	r0, [r7, #4]
 800d076:	f008 fdf8 	bl	8015c6a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d07a:	2300      	movs	r3, #0
}
 800d07c:	4618      	mov	r0, r3
 800d07e:	3708      	adds	r7, #8
 800d080:	46bd      	mov	sp, r7
 800d082:	bd80      	pop	{r7, pc}

0800d084 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800d084:	b580      	push	{r7, lr}
 800d086:	b084      	sub	sp, #16
 800d088:	af00      	add	r7, sp, #0
 800d08a:	4603      	mov	r3, r0
 800d08c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800d08e:	79fb      	ldrb	r3, [r7, #7]
 800d090:	4a08      	ldr	r2, [pc, #32]	; (800d0b4 <disk_status+0x30>)
 800d092:	009b      	lsls	r3, r3, #2
 800d094:	4413      	add	r3, r2
 800d096:	685b      	ldr	r3, [r3, #4]
 800d098:	685b      	ldr	r3, [r3, #4]
 800d09a:	79fa      	ldrb	r2, [r7, #7]
 800d09c:	4905      	ldr	r1, [pc, #20]	; (800d0b4 <disk_status+0x30>)
 800d09e:	440a      	add	r2, r1
 800d0a0:	7a12      	ldrb	r2, [r2, #8]
 800d0a2:	4610      	mov	r0, r2
 800d0a4:	4798      	blx	r3
 800d0a6:	4603      	mov	r3, r0
 800d0a8:	73fb      	strb	r3, [r7, #15]
  return stat;
 800d0aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0ac:	4618      	mov	r0, r3
 800d0ae:	3710      	adds	r7, #16
 800d0b0:	46bd      	mov	sp, r7
 800d0b2:	bd80      	pop	{r7, pc}
 800d0b4:	200002c4 	.word	0x200002c4

0800d0b8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800d0b8:	b580      	push	{r7, lr}
 800d0ba:	b084      	sub	sp, #16
 800d0bc:	af00      	add	r7, sp, #0
 800d0be:	4603      	mov	r3, r0
 800d0c0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800d0c2:	2300      	movs	r3, #0
 800d0c4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800d0c6:	79fb      	ldrb	r3, [r7, #7]
 800d0c8:	4a0d      	ldr	r2, [pc, #52]	; (800d100 <disk_initialize+0x48>)
 800d0ca:	5cd3      	ldrb	r3, [r2, r3]
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d111      	bne.n	800d0f4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800d0d0:	79fb      	ldrb	r3, [r7, #7]
 800d0d2:	4a0b      	ldr	r2, [pc, #44]	; (800d100 <disk_initialize+0x48>)
 800d0d4:	2101      	movs	r1, #1
 800d0d6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800d0d8:	79fb      	ldrb	r3, [r7, #7]
 800d0da:	4a09      	ldr	r2, [pc, #36]	; (800d100 <disk_initialize+0x48>)
 800d0dc:	009b      	lsls	r3, r3, #2
 800d0de:	4413      	add	r3, r2
 800d0e0:	685b      	ldr	r3, [r3, #4]
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	79fa      	ldrb	r2, [r7, #7]
 800d0e6:	4906      	ldr	r1, [pc, #24]	; (800d100 <disk_initialize+0x48>)
 800d0e8:	440a      	add	r2, r1
 800d0ea:	7a12      	ldrb	r2, [r2, #8]
 800d0ec:	4610      	mov	r0, r2
 800d0ee:	4798      	blx	r3
 800d0f0:	4603      	mov	r3, r0
 800d0f2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800d0f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0f6:	4618      	mov	r0, r3
 800d0f8:	3710      	adds	r7, #16
 800d0fa:	46bd      	mov	sp, r7
 800d0fc:	bd80      	pop	{r7, pc}
 800d0fe:	bf00      	nop
 800d100:	200002c4 	.word	0x200002c4

0800d104 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800d104:	b590      	push	{r4, r7, lr}
 800d106:	b087      	sub	sp, #28
 800d108:	af00      	add	r7, sp, #0
 800d10a:	60b9      	str	r1, [r7, #8]
 800d10c:	607a      	str	r2, [r7, #4]
 800d10e:	603b      	str	r3, [r7, #0]
 800d110:	4603      	mov	r3, r0
 800d112:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800d114:	7bfb      	ldrb	r3, [r7, #15]
 800d116:	4a0a      	ldr	r2, [pc, #40]	; (800d140 <disk_read+0x3c>)
 800d118:	009b      	lsls	r3, r3, #2
 800d11a:	4413      	add	r3, r2
 800d11c:	685b      	ldr	r3, [r3, #4]
 800d11e:	689c      	ldr	r4, [r3, #8]
 800d120:	7bfb      	ldrb	r3, [r7, #15]
 800d122:	4a07      	ldr	r2, [pc, #28]	; (800d140 <disk_read+0x3c>)
 800d124:	4413      	add	r3, r2
 800d126:	7a18      	ldrb	r0, [r3, #8]
 800d128:	683b      	ldr	r3, [r7, #0]
 800d12a:	687a      	ldr	r2, [r7, #4]
 800d12c:	68b9      	ldr	r1, [r7, #8]
 800d12e:	47a0      	blx	r4
 800d130:	4603      	mov	r3, r0
 800d132:	75fb      	strb	r3, [r7, #23]
  return res;
 800d134:	7dfb      	ldrb	r3, [r7, #23]
}
 800d136:	4618      	mov	r0, r3
 800d138:	371c      	adds	r7, #28
 800d13a:	46bd      	mov	sp, r7
 800d13c:	bd90      	pop	{r4, r7, pc}
 800d13e:	bf00      	nop
 800d140:	200002c4 	.word	0x200002c4

0800d144 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800d144:	b590      	push	{r4, r7, lr}
 800d146:	b087      	sub	sp, #28
 800d148:	af00      	add	r7, sp, #0
 800d14a:	60b9      	str	r1, [r7, #8]
 800d14c:	607a      	str	r2, [r7, #4]
 800d14e:	603b      	str	r3, [r7, #0]
 800d150:	4603      	mov	r3, r0
 800d152:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800d154:	7bfb      	ldrb	r3, [r7, #15]
 800d156:	4a0a      	ldr	r2, [pc, #40]	; (800d180 <disk_write+0x3c>)
 800d158:	009b      	lsls	r3, r3, #2
 800d15a:	4413      	add	r3, r2
 800d15c:	685b      	ldr	r3, [r3, #4]
 800d15e:	68dc      	ldr	r4, [r3, #12]
 800d160:	7bfb      	ldrb	r3, [r7, #15]
 800d162:	4a07      	ldr	r2, [pc, #28]	; (800d180 <disk_write+0x3c>)
 800d164:	4413      	add	r3, r2
 800d166:	7a18      	ldrb	r0, [r3, #8]
 800d168:	683b      	ldr	r3, [r7, #0]
 800d16a:	687a      	ldr	r2, [r7, #4]
 800d16c:	68b9      	ldr	r1, [r7, #8]
 800d16e:	47a0      	blx	r4
 800d170:	4603      	mov	r3, r0
 800d172:	75fb      	strb	r3, [r7, #23]
  return res;
 800d174:	7dfb      	ldrb	r3, [r7, #23]
}
 800d176:	4618      	mov	r0, r3
 800d178:	371c      	adds	r7, #28
 800d17a:	46bd      	mov	sp, r7
 800d17c:	bd90      	pop	{r4, r7, pc}
 800d17e:	bf00      	nop
 800d180:	200002c4 	.word	0x200002c4

0800d184 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800d184:	b580      	push	{r7, lr}
 800d186:	b084      	sub	sp, #16
 800d188:	af00      	add	r7, sp, #0
 800d18a:	4603      	mov	r3, r0
 800d18c:	603a      	str	r2, [r7, #0]
 800d18e:	71fb      	strb	r3, [r7, #7]
 800d190:	460b      	mov	r3, r1
 800d192:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800d194:	79fb      	ldrb	r3, [r7, #7]
 800d196:	4a09      	ldr	r2, [pc, #36]	; (800d1bc <disk_ioctl+0x38>)
 800d198:	009b      	lsls	r3, r3, #2
 800d19a:	4413      	add	r3, r2
 800d19c:	685b      	ldr	r3, [r3, #4]
 800d19e:	691b      	ldr	r3, [r3, #16]
 800d1a0:	79fa      	ldrb	r2, [r7, #7]
 800d1a2:	4906      	ldr	r1, [pc, #24]	; (800d1bc <disk_ioctl+0x38>)
 800d1a4:	440a      	add	r2, r1
 800d1a6:	7a10      	ldrb	r0, [r2, #8]
 800d1a8:	79b9      	ldrb	r1, [r7, #6]
 800d1aa:	683a      	ldr	r2, [r7, #0]
 800d1ac:	4798      	blx	r3
 800d1ae:	4603      	mov	r3, r0
 800d1b0:	73fb      	strb	r3, [r7, #15]
  return res;
 800d1b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1b4:	4618      	mov	r0, r3
 800d1b6:	3710      	adds	r7, #16
 800d1b8:	46bd      	mov	sp, r7
 800d1ba:	bd80      	pop	{r7, pc}
 800d1bc:	200002c4 	.word	0x200002c4

0800d1c0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800d1c0:	b480      	push	{r7}
 800d1c2:	b085      	sub	sp, #20
 800d1c4:	af00      	add	r7, sp, #0
 800d1c6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	3301      	adds	r3, #1
 800d1cc:	781b      	ldrb	r3, [r3, #0]
 800d1ce:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800d1d0:	89fb      	ldrh	r3, [r7, #14]
 800d1d2:	021b      	lsls	r3, r3, #8
 800d1d4:	b21a      	sxth	r2, r3
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	781b      	ldrb	r3, [r3, #0]
 800d1da:	b21b      	sxth	r3, r3
 800d1dc:	4313      	orrs	r3, r2
 800d1de:	b21b      	sxth	r3, r3
 800d1e0:	81fb      	strh	r3, [r7, #14]
	return rv;
 800d1e2:	89fb      	ldrh	r3, [r7, #14]
}
 800d1e4:	4618      	mov	r0, r3
 800d1e6:	3714      	adds	r7, #20
 800d1e8:	46bd      	mov	sp, r7
 800d1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ee:	4770      	bx	lr

0800d1f0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800d1f0:	b480      	push	{r7}
 800d1f2:	b085      	sub	sp, #20
 800d1f4:	af00      	add	r7, sp, #0
 800d1f6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	3303      	adds	r3, #3
 800d1fc:	781b      	ldrb	r3, [r3, #0]
 800d1fe:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	021b      	lsls	r3, r3, #8
 800d204:	687a      	ldr	r2, [r7, #4]
 800d206:	3202      	adds	r2, #2
 800d208:	7812      	ldrb	r2, [r2, #0]
 800d20a:	4313      	orrs	r3, r2
 800d20c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	021b      	lsls	r3, r3, #8
 800d212:	687a      	ldr	r2, [r7, #4]
 800d214:	3201      	adds	r2, #1
 800d216:	7812      	ldrb	r2, [r2, #0]
 800d218:	4313      	orrs	r3, r2
 800d21a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	021b      	lsls	r3, r3, #8
 800d220:	687a      	ldr	r2, [r7, #4]
 800d222:	7812      	ldrb	r2, [r2, #0]
 800d224:	4313      	orrs	r3, r2
 800d226:	60fb      	str	r3, [r7, #12]
	return rv;
 800d228:	68fb      	ldr	r3, [r7, #12]
}
 800d22a:	4618      	mov	r0, r3
 800d22c:	3714      	adds	r7, #20
 800d22e:	46bd      	mov	sp, r7
 800d230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d234:	4770      	bx	lr

0800d236 <ld_qword>:

#if _FS_EXFAT
static
QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 800d236:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 800d23a:	b085      	sub	sp, #20
 800d23c:	af00      	add	r7, sp, #0
 800d23e:	6078      	str	r0, [r7, #4]
	QWORD rv;

	rv = ptr[7];
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	3307      	adds	r3, #7
 800d244:	781b      	ldrb	r3, [r3, #0]
 800d246:	b2db      	uxtb	r3, r3
 800d248:	f04f 0400 	mov.w	r4, #0
 800d24c:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[6];
 800d250:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800d254:	f04f 0b00 	mov.w	fp, #0
 800d258:	f04f 0c00 	mov.w	ip, #0
 800d25c:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 800d260:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 800d264:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 800d268:	687a      	ldr	r2, [r7, #4]
 800d26a:	3206      	adds	r2, #6
 800d26c:	7812      	ldrb	r2, [r2, #0]
 800d26e:	b2d1      	uxtb	r1, r2
 800d270:	f04f 0200 	mov.w	r2, #0
 800d274:	ea4b 0301 	orr.w	r3, fp, r1
 800d278:	ea4c 0402 	orr.w	r4, ip, r2
 800d27c:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[5];
 800d280:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800d284:	f04f 0b00 	mov.w	fp, #0
 800d288:	f04f 0c00 	mov.w	ip, #0
 800d28c:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 800d290:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 800d294:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 800d298:	687a      	ldr	r2, [r7, #4]
 800d29a:	3205      	adds	r2, #5
 800d29c:	7812      	ldrb	r2, [r2, #0]
 800d29e:	b2d1      	uxtb	r1, r2
 800d2a0:	f04f 0200 	mov.w	r2, #0
 800d2a4:	ea4b 0301 	orr.w	r3, fp, r1
 800d2a8:	ea4c 0402 	orr.w	r4, ip, r2
 800d2ac:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[4];
 800d2b0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800d2b4:	f04f 0b00 	mov.w	fp, #0
 800d2b8:	f04f 0c00 	mov.w	ip, #0
 800d2bc:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 800d2c0:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 800d2c4:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 800d2c8:	687a      	ldr	r2, [r7, #4]
 800d2ca:	3204      	adds	r2, #4
 800d2cc:	7812      	ldrb	r2, [r2, #0]
 800d2ce:	b2d1      	uxtb	r1, r2
 800d2d0:	f04f 0200 	mov.w	r2, #0
 800d2d4:	ea4b 0301 	orr.w	r3, fp, r1
 800d2d8:	ea4c 0402 	orr.w	r4, ip, r2
 800d2dc:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[3];
 800d2e0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800d2e4:	f04f 0b00 	mov.w	fp, #0
 800d2e8:	f04f 0c00 	mov.w	ip, #0
 800d2ec:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 800d2f0:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 800d2f4:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 800d2f8:	687a      	ldr	r2, [r7, #4]
 800d2fa:	3203      	adds	r2, #3
 800d2fc:	7812      	ldrb	r2, [r2, #0]
 800d2fe:	b2d1      	uxtb	r1, r2
 800d300:	f04f 0200 	mov.w	r2, #0
 800d304:	ea4b 0301 	orr.w	r3, fp, r1
 800d308:	ea4c 0402 	orr.w	r4, ip, r2
 800d30c:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[2];
 800d310:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800d314:	f04f 0b00 	mov.w	fp, #0
 800d318:	f04f 0c00 	mov.w	ip, #0
 800d31c:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 800d320:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 800d324:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 800d328:	687a      	ldr	r2, [r7, #4]
 800d32a:	3202      	adds	r2, #2
 800d32c:	7812      	ldrb	r2, [r2, #0]
 800d32e:	b2d1      	uxtb	r1, r2
 800d330:	f04f 0200 	mov.w	r2, #0
 800d334:	ea4b 0301 	orr.w	r3, fp, r1
 800d338:	ea4c 0402 	orr.w	r4, ip, r2
 800d33c:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[1];
 800d340:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800d344:	f04f 0b00 	mov.w	fp, #0
 800d348:	f04f 0c00 	mov.w	ip, #0
 800d34c:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 800d350:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 800d354:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 800d358:	687a      	ldr	r2, [r7, #4]
 800d35a:	3201      	adds	r2, #1
 800d35c:	7812      	ldrb	r2, [r2, #0]
 800d35e:	b2d1      	uxtb	r1, r2
 800d360:	f04f 0200 	mov.w	r2, #0
 800d364:	ea4b 0301 	orr.w	r3, fp, r1
 800d368:	ea4c 0402 	orr.w	r4, ip, r2
 800d36c:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[0];
 800d370:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800d374:	f04f 0b00 	mov.w	fp, #0
 800d378:	f04f 0c00 	mov.w	ip, #0
 800d37c:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 800d380:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 800d384:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 800d388:	687a      	ldr	r2, [r7, #4]
 800d38a:	7812      	ldrb	r2, [r2, #0]
 800d38c:	b2d1      	uxtb	r1, r2
 800d38e:	f04f 0200 	mov.w	r2, #0
 800d392:	ea4b 0301 	orr.w	r3, fp, r1
 800d396:	ea4c 0402 	orr.w	r4, ip, r2
 800d39a:	e9c7 3402 	strd	r3, r4, [r7, #8]
	return rv;
 800d39e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
}
 800d3a2:	4618      	mov	r0, r3
 800d3a4:	4621      	mov	r1, r4
 800d3a6:	3714      	adds	r7, #20
 800d3a8:	46bd      	mov	sp, r7
 800d3aa:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 800d3ae:	4770      	bx	lr

0800d3b0 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800d3b0:	b480      	push	{r7}
 800d3b2:	b083      	sub	sp, #12
 800d3b4:	af00      	add	r7, sp, #0
 800d3b6:	6078      	str	r0, [r7, #4]
 800d3b8:	460b      	mov	r3, r1
 800d3ba:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	1c5a      	adds	r2, r3, #1
 800d3c0:	607a      	str	r2, [r7, #4]
 800d3c2:	887a      	ldrh	r2, [r7, #2]
 800d3c4:	b2d2      	uxtb	r2, r2
 800d3c6:	701a      	strb	r2, [r3, #0]
 800d3c8:	887b      	ldrh	r3, [r7, #2]
 800d3ca:	0a1b      	lsrs	r3, r3, #8
 800d3cc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	1c5a      	adds	r2, r3, #1
 800d3d2:	607a      	str	r2, [r7, #4]
 800d3d4:	887a      	ldrh	r2, [r7, #2]
 800d3d6:	b2d2      	uxtb	r2, r2
 800d3d8:	701a      	strb	r2, [r3, #0]
}
 800d3da:	bf00      	nop
 800d3dc:	370c      	adds	r7, #12
 800d3de:	46bd      	mov	sp, r7
 800d3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3e4:	4770      	bx	lr

0800d3e6 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800d3e6:	b480      	push	{r7}
 800d3e8:	b083      	sub	sp, #12
 800d3ea:	af00      	add	r7, sp, #0
 800d3ec:	6078      	str	r0, [r7, #4]
 800d3ee:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	1c5a      	adds	r2, r3, #1
 800d3f4:	607a      	str	r2, [r7, #4]
 800d3f6:	683a      	ldr	r2, [r7, #0]
 800d3f8:	b2d2      	uxtb	r2, r2
 800d3fa:	701a      	strb	r2, [r3, #0]
 800d3fc:	683b      	ldr	r3, [r7, #0]
 800d3fe:	0a1b      	lsrs	r3, r3, #8
 800d400:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	1c5a      	adds	r2, r3, #1
 800d406:	607a      	str	r2, [r7, #4]
 800d408:	683a      	ldr	r2, [r7, #0]
 800d40a:	b2d2      	uxtb	r2, r2
 800d40c:	701a      	strb	r2, [r3, #0]
 800d40e:	683b      	ldr	r3, [r7, #0]
 800d410:	0a1b      	lsrs	r3, r3, #8
 800d412:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	1c5a      	adds	r2, r3, #1
 800d418:	607a      	str	r2, [r7, #4]
 800d41a:	683a      	ldr	r2, [r7, #0]
 800d41c:	b2d2      	uxtb	r2, r2
 800d41e:	701a      	strb	r2, [r3, #0]
 800d420:	683b      	ldr	r3, [r7, #0]
 800d422:	0a1b      	lsrs	r3, r3, #8
 800d424:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	1c5a      	adds	r2, r3, #1
 800d42a:	607a      	str	r2, [r7, #4]
 800d42c:	683a      	ldr	r2, [r7, #0]
 800d42e:	b2d2      	uxtb	r2, r2
 800d430:	701a      	strb	r2, [r3, #0]
}
 800d432:	bf00      	nop
 800d434:	370c      	adds	r7, #12
 800d436:	46bd      	mov	sp, r7
 800d438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d43c:	4770      	bx	lr

0800d43e <st_qword>:

#if _FS_EXFAT
static
void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
 800d43e:	b490      	push	{r4, r7}
 800d440:	b084      	sub	sp, #16
 800d442:	af00      	add	r7, sp, #0
 800d444:	60f8      	str	r0, [r7, #12]
 800d446:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	1c5a      	adds	r2, r3, #1
 800d44e:	60fa      	str	r2, [r7, #12]
 800d450:	783a      	ldrb	r2, [r7, #0]
 800d452:	701a      	strb	r2, [r3, #0]
 800d454:	e9d7 1200 	ldrd	r1, r2, [r7]
 800d458:	f04f 0300 	mov.w	r3, #0
 800d45c:	f04f 0400 	mov.w	r4, #0
 800d460:	0a0b      	lsrs	r3, r1, #8
 800d462:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d466:	0a14      	lsrs	r4, r2, #8
 800d468:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	1c5a      	adds	r2, r3, #1
 800d470:	60fa      	str	r2, [r7, #12]
 800d472:	783a      	ldrb	r2, [r7, #0]
 800d474:	701a      	strb	r2, [r3, #0]
 800d476:	e9d7 1200 	ldrd	r1, r2, [r7]
 800d47a:	f04f 0300 	mov.w	r3, #0
 800d47e:	f04f 0400 	mov.w	r4, #0
 800d482:	0a0b      	lsrs	r3, r1, #8
 800d484:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d488:	0a14      	lsrs	r4, r2, #8
 800d48a:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	1c5a      	adds	r2, r3, #1
 800d492:	60fa      	str	r2, [r7, #12]
 800d494:	783a      	ldrb	r2, [r7, #0]
 800d496:	701a      	strb	r2, [r3, #0]
 800d498:	e9d7 1200 	ldrd	r1, r2, [r7]
 800d49c:	f04f 0300 	mov.w	r3, #0
 800d4a0:	f04f 0400 	mov.w	r4, #0
 800d4a4:	0a0b      	lsrs	r3, r1, #8
 800d4a6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d4aa:	0a14      	lsrs	r4, r2, #8
 800d4ac:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	1c5a      	adds	r2, r3, #1
 800d4b4:	60fa      	str	r2, [r7, #12]
 800d4b6:	783a      	ldrb	r2, [r7, #0]
 800d4b8:	701a      	strb	r2, [r3, #0]
 800d4ba:	e9d7 1200 	ldrd	r1, r2, [r7]
 800d4be:	f04f 0300 	mov.w	r3, #0
 800d4c2:	f04f 0400 	mov.w	r4, #0
 800d4c6:	0a0b      	lsrs	r3, r1, #8
 800d4c8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d4cc:	0a14      	lsrs	r4, r2, #8
 800d4ce:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	1c5a      	adds	r2, r3, #1
 800d4d6:	60fa      	str	r2, [r7, #12]
 800d4d8:	783a      	ldrb	r2, [r7, #0]
 800d4da:	701a      	strb	r2, [r3, #0]
 800d4dc:	e9d7 1200 	ldrd	r1, r2, [r7]
 800d4e0:	f04f 0300 	mov.w	r3, #0
 800d4e4:	f04f 0400 	mov.w	r4, #0
 800d4e8:	0a0b      	lsrs	r3, r1, #8
 800d4ea:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d4ee:	0a14      	lsrs	r4, r2, #8
 800d4f0:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	1c5a      	adds	r2, r3, #1
 800d4f8:	60fa      	str	r2, [r7, #12]
 800d4fa:	783a      	ldrb	r2, [r7, #0]
 800d4fc:	701a      	strb	r2, [r3, #0]
 800d4fe:	e9d7 1200 	ldrd	r1, r2, [r7]
 800d502:	f04f 0300 	mov.w	r3, #0
 800d506:	f04f 0400 	mov.w	r4, #0
 800d50a:	0a0b      	lsrs	r3, r1, #8
 800d50c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d510:	0a14      	lsrs	r4, r2, #8
 800d512:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	1c5a      	adds	r2, r3, #1
 800d51a:	60fa      	str	r2, [r7, #12]
 800d51c:	783a      	ldrb	r2, [r7, #0]
 800d51e:	701a      	strb	r2, [r3, #0]
 800d520:	e9d7 1200 	ldrd	r1, r2, [r7]
 800d524:	f04f 0300 	mov.w	r3, #0
 800d528:	f04f 0400 	mov.w	r4, #0
 800d52c:	0a0b      	lsrs	r3, r1, #8
 800d52e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d532:	0a14      	lsrs	r4, r2, #8
 800d534:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val;
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	1c5a      	adds	r2, r3, #1
 800d53c:	60fa      	str	r2, [r7, #12]
 800d53e:	783a      	ldrb	r2, [r7, #0]
 800d540:	701a      	strb	r2, [r3, #0]
}
 800d542:	bf00      	nop
 800d544:	3710      	adds	r7, #16
 800d546:	46bd      	mov	sp, r7
 800d548:	bc90      	pop	{r4, r7}
 800d54a:	4770      	bx	lr

0800d54c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800d54c:	b480      	push	{r7}
 800d54e:	b087      	sub	sp, #28
 800d550:	af00      	add	r7, sp, #0
 800d552:	60f8      	str	r0, [r7, #12]
 800d554:	60b9      	str	r1, [r7, #8]
 800d556:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800d55c:	68bb      	ldr	r3, [r7, #8]
 800d55e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	2b00      	cmp	r3, #0
 800d564:	d00d      	beq.n	800d582 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800d566:	693a      	ldr	r2, [r7, #16]
 800d568:	1c53      	adds	r3, r2, #1
 800d56a:	613b      	str	r3, [r7, #16]
 800d56c:	697b      	ldr	r3, [r7, #20]
 800d56e:	1c59      	adds	r1, r3, #1
 800d570:	6179      	str	r1, [r7, #20]
 800d572:	7812      	ldrb	r2, [r2, #0]
 800d574:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	3b01      	subs	r3, #1
 800d57a:	607b      	str	r3, [r7, #4]
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d1f1      	bne.n	800d566 <mem_cpy+0x1a>
	}
}
 800d582:	bf00      	nop
 800d584:	371c      	adds	r7, #28
 800d586:	46bd      	mov	sp, r7
 800d588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d58c:	4770      	bx	lr

0800d58e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800d58e:	b480      	push	{r7}
 800d590:	b087      	sub	sp, #28
 800d592:	af00      	add	r7, sp, #0
 800d594:	60f8      	str	r0, [r7, #12]
 800d596:	60b9      	str	r1, [r7, #8]
 800d598:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800d59e:	697b      	ldr	r3, [r7, #20]
 800d5a0:	1c5a      	adds	r2, r3, #1
 800d5a2:	617a      	str	r2, [r7, #20]
 800d5a4:	68ba      	ldr	r2, [r7, #8]
 800d5a6:	b2d2      	uxtb	r2, r2
 800d5a8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	3b01      	subs	r3, #1
 800d5ae:	607b      	str	r3, [r7, #4]
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d1f3      	bne.n	800d59e <mem_set+0x10>
}
 800d5b6:	bf00      	nop
 800d5b8:	371c      	adds	r7, #28
 800d5ba:	46bd      	mov	sp, r7
 800d5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5c0:	4770      	bx	lr

0800d5c2 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800d5c2:	b480      	push	{r7}
 800d5c4:	b089      	sub	sp, #36	; 0x24
 800d5c6:	af00      	add	r7, sp, #0
 800d5c8:	60f8      	str	r0, [r7, #12]
 800d5ca:	60b9      	str	r1, [r7, #8]
 800d5cc:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	61fb      	str	r3, [r7, #28]
 800d5d2:	68bb      	ldr	r3, [r7, #8]
 800d5d4:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800d5d6:	2300      	movs	r3, #0
 800d5d8:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800d5da:	69fb      	ldr	r3, [r7, #28]
 800d5dc:	1c5a      	adds	r2, r3, #1
 800d5de:	61fa      	str	r2, [r7, #28]
 800d5e0:	781b      	ldrb	r3, [r3, #0]
 800d5e2:	4619      	mov	r1, r3
 800d5e4:	69bb      	ldr	r3, [r7, #24]
 800d5e6:	1c5a      	adds	r2, r3, #1
 800d5e8:	61ba      	str	r2, [r7, #24]
 800d5ea:	781b      	ldrb	r3, [r3, #0]
 800d5ec:	1acb      	subs	r3, r1, r3
 800d5ee:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	3b01      	subs	r3, #1
 800d5f4:	607b      	str	r3, [r7, #4]
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d002      	beq.n	800d602 <mem_cmp+0x40>
 800d5fc:	697b      	ldr	r3, [r7, #20]
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d0eb      	beq.n	800d5da <mem_cmp+0x18>

	return r;
 800d602:	697b      	ldr	r3, [r7, #20]
}
 800d604:	4618      	mov	r0, r3
 800d606:	3724      	adds	r7, #36	; 0x24
 800d608:	46bd      	mov	sp, r7
 800d60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d60e:	4770      	bx	lr

0800d610 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800d610:	b480      	push	{r7}
 800d612:	b083      	sub	sp, #12
 800d614:	af00      	add	r7, sp, #0
 800d616:	6078      	str	r0, [r7, #4]
 800d618:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800d61a:	e002      	b.n	800d622 <chk_chr+0x12>
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	3301      	adds	r3, #1
 800d620:	607b      	str	r3, [r7, #4]
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	781b      	ldrb	r3, [r3, #0]
 800d626:	2b00      	cmp	r3, #0
 800d628:	d005      	beq.n	800d636 <chk_chr+0x26>
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	781b      	ldrb	r3, [r3, #0]
 800d62e:	461a      	mov	r2, r3
 800d630:	683b      	ldr	r3, [r7, #0]
 800d632:	4293      	cmp	r3, r2
 800d634:	d1f2      	bne.n	800d61c <chk_chr+0xc>
	return *str;
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	781b      	ldrb	r3, [r3, #0]
}
 800d63a:	4618      	mov	r0, r3
 800d63c:	370c      	adds	r7, #12
 800d63e:	46bd      	mov	sp, r7
 800d640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d644:	4770      	bx	lr

0800d646 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800d646:	b580      	push	{r7, lr}
 800d648:	b082      	sub	sp, #8
 800d64a:	af00      	add	r7, sp, #0
 800d64c:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	2b00      	cmp	r3, #0
 800d652:	d009      	beq.n	800d668 <lock_fs+0x22>
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	699b      	ldr	r3, [r3, #24]
 800d658:	4618      	mov	r0, r3
 800d65a:	f004 f914 	bl	8011886 <ff_req_grant>
 800d65e:	4603      	mov	r3, r0
 800d660:	2b00      	cmp	r3, #0
 800d662:	d001      	beq.n	800d668 <lock_fs+0x22>
 800d664:	2301      	movs	r3, #1
 800d666:	e000      	b.n	800d66a <lock_fs+0x24>
 800d668:	2300      	movs	r3, #0
}
 800d66a:	4618      	mov	r0, r3
 800d66c:	3708      	adds	r7, #8
 800d66e:	46bd      	mov	sp, r7
 800d670:	bd80      	pop	{r7, pc}

0800d672 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800d672:	b580      	push	{r7, lr}
 800d674:	b082      	sub	sp, #8
 800d676:	af00      	add	r7, sp, #0
 800d678:	6078      	str	r0, [r7, #4]
 800d67a:	460b      	mov	r3, r1
 800d67c:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	2b00      	cmp	r3, #0
 800d682:	d00d      	beq.n	800d6a0 <unlock_fs+0x2e>
 800d684:	78fb      	ldrb	r3, [r7, #3]
 800d686:	2b0c      	cmp	r3, #12
 800d688:	d00a      	beq.n	800d6a0 <unlock_fs+0x2e>
 800d68a:	78fb      	ldrb	r3, [r7, #3]
 800d68c:	2b0b      	cmp	r3, #11
 800d68e:	d007      	beq.n	800d6a0 <unlock_fs+0x2e>
 800d690:	78fb      	ldrb	r3, [r7, #3]
 800d692:	2b0f      	cmp	r3, #15
 800d694:	d004      	beq.n	800d6a0 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	699b      	ldr	r3, [r3, #24]
 800d69a:	4618      	mov	r0, r3
 800d69c:	f004 f908 	bl	80118b0 <ff_rel_grant>
	}
}
 800d6a0:	bf00      	nop
 800d6a2:	3708      	adds	r7, #8
 800d6a4:	46bd      	mov	sp, r7
 800d6a6:	bd80      	pop	{r7, pc}

0800d6a8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d6a8:	b480      	push	{r7}
 800d6aa:	b085      	sub	sp, #20
 800d6ac:	af00      	add	r7, sp, #0
 800d6ae:	6078      	str	r0, [r7, #4]
 800d6b0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d6b2:	2300      	movs	r3, #0
 800d6b4:	60bb      	str	r3, [r7, #8]
 800d6b6:	68bb      	ldr	r3, [r7, #8]
 800d6b8:	60fb      	str	r3, [r7, #12]
 800d6ba:	e029      	b.n	800d710 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800d6bc:	4a27      	ldr	r2, [pc, #156]	; (800d75c <chk_lock+0xb4>)
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	011b      	lsls	r3, r3, #4
 800d6c2:	4413      	add	r3, r2
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d01d      	beq.n	800d706 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d6ca:	4a24      	ldr	r2, [pc, #144]	; (800d75c <chk_lock+0xb4>)
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	011b      	lsls	r3, r3, #4
 800d6d0:	4413      	add	r3, r2
 800d6d2:	681a      	ldr	r2, [r3, #0]
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	429a      	cmp	r2, r3
 800d6da:	d116      	bne.n	800d70a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800d6dc:	4a1f      	ldr	r2, [pc, #124]	; (800d75c <chk_lock+0xb4>)
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	011b      	lsls	r3, r3, #4
 800d6e2:	4413      	add	r3, r2
 800d6e4:	3304      	adds	r3, #4
 800d6e6:	681a      	ldr	r2, [r3, #0]
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d6ec:	429a      	cmp	r2, r3
 800d6ee:	d10c      	bne.n	800d70a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d6f0:	4a1a      	ldr	r2, [pc, #104]	; (800d75c <chk_lock+0xb4>)
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	011b      	lsls	r3, r3, #4
 800d6f6:	4413      	add	r3, r2
 800d6f8:	3308      	adds	r3, #8
 800d6fa:	681a      	ldr	r2, [r3, #0]
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
				Files[i].clu == dp->obj.sclust &&
 800d700:	429a      	cmp	r2, r3
 800d702:	d102      	bne.n	800d70a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d704:	e007      	b.n	800d716 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800d706:	2301      	movs	r3, #1
 800d708:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	3301      	adds	r3, #1
 800d70e:	60fb      	str	r3, [r7, #12]
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	2b09      	cmp	r3, #9
 800d714:	d9d2      	bls.n	800d6bc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	2b0a      	cmp	r3, #10
 800d71a:	d109      	bne.n	800d730 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800d71c:	68bb      	ldr	r3, [r7, #8]
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d102      	bne.n	800d728 <chk_lock+0x80>
 800d722:	683b      	ldr	r3, [r7, #0]
 800d724:	2b02      	cmp	r3, #2
 800d726:	d101      	bne.n	800d72c <chk_lock+0x84>
 800d728:	2300      	movs	r3, #0
 800d72a:	e010      	b.n	800d74e <chk_lock+0xa6>
 800d72c:	2312      	movs	r3, #18
 800d72e:	e00e      	b.n	800d74e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800d730:	683b      	ldr	r3, [r7, #0]
 800d732:	2b00      	cmp	r3, #0
 800d734:	d108      	bne.n	800d748 <chk_lock+0xa0>
 800d736:	4a09      	ldr	r2, [pc, #36]	; (800d75c <chk_lock+0xb4>)
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	011b      	lsls	r3, r3, #4
 800d73c:	4413      	add	r3, r2
 800d73e:	330c      	adds	r3, #12
 800d740:	881b      	ldrh	r3, [r3, #0]
 800d742:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d746:	d101      	bne.n	800d74c <chk_lock+0xa4>
 800d748:	2310      	movs	r3, #16
 800d74a:	e000      	b.n	800d74e <chk_lock+0xa6>
 800d74c:	2300      	movs	r3, #0
}
 800d74e:	4618      	mov	r0, r3
 800d750:	3714      	adds	r7, #20
 800d752:	46bd      	mov	sp, r7
 800d754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d758:	4770      	bx	lr
 800d75a:	bf00      	nop
 800d75c:	20000224 	.word	0x20000224

0800d760 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800d760:	b480      	push	{r7}
 800d762:	b083      	sub	sp, #12
 800d764:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d766:	2300      	movs	r3, #0
 800d768:	607b      	str	r3, [r7, #4]
 800d76a:	e002      	b.n	800d772 <enq_lock+0x12>
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	3301      	adds	r3, #1
 800d770:	607b      	str	r3, [r7, #4]
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	2b09      	cmp	r3, #9
 800d776:	d806      	bhi.n	800d786 <enq_lock+0x26>
 800d778:	4a09      	ldr	r2, [pc, #36]	; (800d7a0 <enq_lock+0x40>)
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	011b      	lsls	r3, r3, #4
 800d77e:	4413      	add	r3, r2
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	2b00      	cmp	r3, #0
 800d784:	d1f2      	bne.n	800d76c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	2b0a      	cmp	r3, #10
 800d78a:	bf14      	ite	ne
 800d78c:	2301      	movne	r3, #1
 800d78e:	2300      	moveq	r3, #0
 800d790:	b2db      	uxtb	r3, r3
}
 800d792:	4618      	mov	r0, r3
 800d794:	370c      	adds	r7, #12
 800d796:	46bd      	mov	sp, r7
 800d798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d79c:	4770      	bx	lr
 800d79e:	bf00      	nop
 800d7a0:	20000224 	.word	0x20000224

0800d7a4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d7a4:	b480      	push	{r7}
 800d7a6:	b085      	sub	sp, #20
 800d7a8:	af00      	add	r7, sp, #0
 800d7aa:	6078      	str	r0, [r7, #4]
 800d7ac:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d7ae:	2300      	movs	r3, #0
 800d7b0:	60fb      	str	r3, [r7, #12]
 800d7b2:	e01f      	b.n	800d7f4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800d7b4:	4a41      	ldr	r2, [pc, #260]	; (800d8bc <inc_lock+0x118>)
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	011b      	lsls	r3, r3, #4
 800d7ba:	4413      	add	r3, r2
 800d7bc:	681a      	ldr	r2, [r3, #0]
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	429a      	cmp	r2, r3
 800d7c4:	d113      	bne.n	800d7ee <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800d7c6:	4a3d      	ldr	r2, [pc, #244]	; (800d8bc <inc_lock+0x118>)
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	011b      	lsls	r3, r3, #4
 800d7cc:	4413      	add	r3, r2
 800d7ce:	3304      	adds	r3, #4
 800d7d0:	681a      	ldr	r2, [r3, #0]
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800d7d6:	429a      	cmp	r2, r3
 800d7d8:	d109      	bne.n	800d7ee <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800d7da:	4a38      	ldr	r2, [pc, #224]	; (800d8bc <inc_lock+0x118>)
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	011b      	lsls	r3, r3, #4
 800d7e0:	4413      	add	r3, r2
 800d7e2:	3308      	adds	r3, #8
 800d7e4:	681a      	ldr	r2, [r3, #0]
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			Files[i].clu == dp->obj.sclust &&
 800d7ea:	429a      	cmp	r2, r3
 800d7ec:	d006      	beq.n	800d7fc <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	3301      	adds	r3, #1
 800d7f2:	60fb      	str	r3, [r7, #12]
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	2b09      	cmp	r3, #9
 800d7f8:	d9dc      	bls.n	800d7b4 <inc_lock+0x10>
 800d7fa:	e000      	b.n	800d7fe <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800d7fc:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	2b0a      	cmp	r3, #10
 800d802:	d132      	bne.n	800d86a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d804:	2300      	movs	r3, #0
 800d806:	60fb      	str	r3, [r7, #12]
 800d808:	e002      	b.n	800d810 <inc_lock+0x6c>
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	3301      	adds	r3, #1
 800d80e:	60fb      	str	r3, [r7, #12]
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	2b09      	cmp	r3, #9
 800d814:	d806      	bhi.n	800d824 <inc_lock+0x80>
 800d816:	4a29      	ldr	r2, [pc, #164]	; (800d8bc <inc_lock+0x118>)
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	011b      	lsls	r3, r3, #4
 800d81c:	4413      	add	r3, r2
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	2b00      	cmp	r3, #0
 800d822:	d1f2      	bne.n	800d80a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	2b0a      	cmp	r3, #10
 800d828:	d101      	bne.n	800d82e <inc_lock+0x8a>
 800d82a:	2300      	movs	r3, #0
 800d82c:	e040      	b.n	800d8b0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	681a      	ldr	r2, [r3, #0]
 800d832:	4922      	ldr	r1, [pc, #136]	; (800d8bc <inc_lock+0x118>)
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	011b      	lsls	r3, r3, #4
 800d838:	440b      	add	r3, r1
 800d83a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	689a      	ldr	r2, [r3, #8]
 800d840:	491e      	ldr	r1, [pc, #120]	; (800d8bc <inc_lock+0x118>)
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	011b      	lsls	r3, r3, #4
 800d846:	440b      	add	r3, r1
 800d848:	3304      	adds	r3, #4
 800d84a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d850:	491a      	ldr	r1, [pc, #104]	; (800d8bc <inc_lock+0x118>)
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	011b      	lsls	r3, r3, #4
 800d856:	440b      	add	r3, r1
 800d858:	3308      	adds	r3, #8
 800d85a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800d85c:	4a17      	ldr	r2, [pc, #92]	; (800d8bc <inc_lock+0x118>)
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	011b      	lsls	r3, r3, #4
 800d862:	4413      	add	r3, r2
 800d864:	330c      	adds	r3, #12
 800d866:	2200      	movs	r2, #0
 800d868:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800d86a:	683b      	ldr	r3, [r7, #0]
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d009      	beq.n	800d884 <inc_lock+0xe0>
 800d870:	4a12      	ldr	r2, [pc, #72]	; (800d8bc <inc_lock+0x118>)
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	011b      	lsls	r3, r3, #4
 800d876:	4413      	add	r3, r2
 800d878:	330c      	adds	r3, #12
 800d87a:	881b      	ldrh	r3, [r3, #0]
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d001      	beq.n	800d884 <inc_lock+0xe0>
 800d880:	2300      	movs	r3, #0
 800d882:	e015      	b.n	800d8b0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800d884:	683b      	ldr	r3, [r7, #0]
 800d886:	2b00      	cmp	r3, #0
 800d888:	d108      	bne.n	800d89c <inc_lock+0xf8>
 800d88a:	4a0c      	ldr	r2, [pc, #48]	; (800d8bc <inc_lock+0x118>)
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	011b      	lsls	r3, r3, #4
 800d890:	4413      	add	r3, r2
 800d892:	330c      	adds	r3, #12
 800d894:	881b      	ldrh	r3, [r3, #0]
 800d896:	3301      	adds	r3, #1
 800d898:	b29a      	uxth	r2, r3
 800d89a:	e001      	b.n	800d8a0 <inc_lock+0xfc>
 800d89c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d8a0:	4906      	ldr	r1, [pc, #24]	; (800d8bc <inc_lock+0x118>)
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	011b      	lsls	r3, r3, #4
 800d8a6:	440b      	add	r3, r1
 800d8a8:	330c      	adds	r3, #12
 800d8aa:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	3301      	adds	r3, #1
}
 800d8b0:	4618      	mov	r0, r3
 800d8b2:	3714      	adds	r7, #20
 800d8b4:	46bd      	mov	sp, r7
 800d8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ba:	4770      	bx	lr
 800d8bc:	20000224 	.word	0x20000224

0800d8c0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800d8c0:	b480      	push	{r7}
 800d8c2:	b085      	sub	sp, #20
 800d8c4:	af00      	add	r7, sp, #0
 800d8c6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	3b01      	subs	r3, #1
 800d8cc:	607b      	str	r3, [r7, #4]
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	2b09      	cmp	r3, #9
 800d8d2:	d825      	bhi.n	800d920 <dec_lock+0x60>
		n = Files[i].ctr;
 800d8d4:	4a17      	ldr	r2, [pc, #92]	; (800d934 <dec_lock+0x74>)
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	011b      	lsls	r3, r3, #4
 800d8da:	4413      	add	r3, r2
 800d8dc:	330c      	adds	r3, #12
 800d8de:	881b      	ldrh	r3, [r3, #0]
 800d8e0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800d8e2:	89fb      	ldrh	r3, [r7, #14]
 800d8e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d8e8:	d101      	bne.n	800d8ee <dec_lock+0x2e>
 800d8ea:	2300      	movs	r3, #0
 800d8ec:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800d8ee:	89fb      	ldrh	r3, [r7, #14]
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d002      	beq.n	800d8fa <dec_lock+0x3a>
 800d8f4:	89fb      	ldrh	r3, [r7, #14]
 800d8f6:	3b01      	subs	r3, #1
 800d8f8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800d8fa:	4a0e      	ldr	r2, [pc, #56]	; (800d934 <dec_lock+0x74>)
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	011b      	lsls	r3, r3, #4
 800d900:	4413      	add	r3, r2
 800d902:	330c      	adds	r3, #12
 800d904:	89fa      	ldrh	r2, [r7, #14]
 800d906:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800d908:	89fb      	ldrh	r3, [r7, #14]
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d105      	bne.n	800d91a <dec_lock+0x5a>
 800d90e:	4a09      	ldr	r2, [pc, #36]	; (800d934 <dec_lock+0x74>)
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	011b      	lsls	r3, r3, #4
 800d914:	4413      	add	r3, r2
 800d916:	2200      	movs	r2, #0
 800d918:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800d91a:	2300      	movs	r3, #0
 800d91c:	737b      	strb	r3, [r7, #13]
 800d91e:	e001      	b.n	800d924 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800d920:	2302      	movs	r3, #2
 800d922:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800d924:	7b7b      	ldrb	r3, [r7, #13]
}
 800d926:	4618      	mov	r0, r3
 800d928:	3714      	adds	r7, #20
 800d92a:	46bd      	mov	sp, r7
 800d92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d930:	4770      	bx	lr
 800d932:	bf00      	nop
 800d934:	20000224 	.word	0x20000224

0800d938 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800d938:	b480      	push	{r7}
 800d93a:	b085      	sub	sp, #20
 800d93c:	af00      	add	r7, sp, #0
 800d93e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800d940:	2300      	movs	r3, #0
 800d942:	60fb      	str	r3, [r7, #12]
 800d944:	e010      	b.n	800d968 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800d946:	4a0d      	ldr	r2, [pc, #52]	; (800d97c <clear_lock+0x44>)
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	011b      	lsls	r3, r3, #4
 800d94c:	4413      	add	r3, r2
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	687a      	ldr	r2, [r7, #4]
 800d952:	429a      	cmp	r2, r3
 800d954:	d105      	bne.n	800d962 <clear_lock+0x2a>
 800d956:	4a09      	ldr	r2, [pc, #36]	; (800d97c <clear_lock+0x44>)
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	011b      	lsls	r3, r3, #4
 800d95c:	4413      	add	r3, r2
 800d95e:	2200      	movs	r2, #0
 800d960:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	3301      	adds	r3, #1
 800d966:	60fb      	str	r3, [r7, #12]
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	2b09      	cmp	r3, #9
 800d96c:	d9eb      	bls.n	800d946 <clear_lock+0xe>
	}
}
 800d96e:	bf00      	nop
 800d970:	3714      	adds	r7, #20
 800d972:	46bd      	mov	sp, r7
 800d974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d978:	4770      	bx	lr
 800d97a:	bf00      	nop
 800d97c:	20000224 	.word	0x20000224

0800d980 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800d980:	b580      	push	{r7, lr}
 800d982:	b086      	sub	sp, #24
 800d984:	af00      	add	r7, sp, #0
 800d986:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800d988:	2300      	movs	r3, #0
 800d98a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	78db      	ldrb	r3, [r3, #3]
 800d990:	2b00      	cmp	r3, #0
 800d992:	d034      	beq.n	800d9fe <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d998:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	7858      	ldrb	r0, [r3, #1]
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800d9a4:	2301      	movs	r3, #1
 800d9a6:	697a      	ldr	r2, [r7, #20]
 800d9a8:	f7ff fbcc 	bl	800d144 <disk_write>
 800d9ac:	4603      	mov	r3, r0
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d002      	beq.n	800d9b8 <sync_window+0x38>
			res = FR_DISK_ERR;
 800d9b2:	2301      	movs	r3, #1
 800d9b4:	73fb      	strb	r3, [r7, #15]
 800d9b6:	e022      	b.n	800d9fe <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	2200      	movs	r2, #0
 800d9bc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d9c2:	697a      	ldr	r2, [r7, #20]
 800d9c4:	1ad2      	subs	r2, r2, r3
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d9ca:	429a      	cmp	r2, r3
 800d9cc:	d217      	bcs.n	800d9fe <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	789b      	ldrb	r3, [r3, #2]
 800d9d2:	613b      	str	r3, [r7, #16]
 800d9d4:	e010      	b.n	800d9f8 <sync_window+0x78>
					wsect += fs->fsize;
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d9da:	697a      	ldr	r2, [r7, #20]
 800d9dc:	4413      	add	r3, r2
 800d9de:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	7858      	ldrb	r0, [r3, #1]
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800d9ea:	2301      	movs	r3, #1
 800d9ec:	697a      	ldr	r2, [r7, #20]
 800d9ee:	f7ff fba9 	bl	800d144 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d9f2:	693b      	ldr	r3, [r7, #16]
 800d9f4:	3b01      	subs	r3, #1
 800d9f6:	613b      	str	r3, [r7, #16]
 800d9f8:	693b      	ldr	r3, [r7, #16]
 800d9fa:	2b01      	cmp	r3, #1
 800d9fc:	d8eb      	bhi.n	800d9d6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800d9fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800da00:	4618      	mov	r0, r3
 800da02:	3718      	adds	r7, #24
 800da04:	46bd      	mov	sp, r7
 800da06:	bd80      	pop	{r7, pc}

0800da08 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800da08:	b580      	push	{r7, lr}
 800da0a:	b084      	sub	sp, #16
 800da0c:	af00      	add	r7, sp, #0
 800da0e:	6078      	str	r0, [r7, #4]
 800da10:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800da12:	2300      	movs	r3, #0
 800da14:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da1a:	683a      	ldr	r2, [r7, #0]
 800da1c:	429a      	cmp	r2, r3
 800da1e:	d01b      	beq.n	800da58 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800da20:	6878      	ldr	r0, [r7, #4]
 800da22:	f7ff ffad 	bl	800d980 <sync_window>
 800da26:	4603      	mov	r3, r0
 800da28:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800da2a:	7bfb      	ldrb	r3, [r7, #15]
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d113      	bne.n	800da58 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	7858      	ldrb	r0, [r3, #1]
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800da3a:	2301      	movs	r3, #1
 800da3c:	683a      	ldr	r2, [r7, #0]
 800da3e:	f7ff fb61 	bl	800d104 <disk_read>
 800da42:	4603      	mov	r3, r0
 800da44:	2b00      	cmp	r3, #0
 800da46:	d004      	beq.n	800da52 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800da48:	f04f 33ff 	mov.w	r3, #4294967295
 800da4c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800da4e:	2301      	movs	r3, #1
 800da50:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	683a      	ldr	r2, [r7, #0]
 800da56:	63da      	str	r2, [r3, #60]	; 0x3c
		}
	}
	return res;
 800da58:	7bfb      	ldrb	r3, [r7, #15]
}
 800da5a:	4618      	mov	r0, r3
 800da5c:	3710      	adds	r7, #16
 800da5e:	46bd      	mov	sp, r7
 800da60:	bd80      	pop	{r7, pc}
	...

0800da64 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800da64:	b580      	push	{r7, lr}
 800da66:	b084      	sub	sp, #16
 800da68:	af00      	add	r7, sp, #0
 800da6a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800da6c:	6878      	ldr	r0, [r7, #4]
 800da6e:	f7ff ff87 	bl	800d980 <sync_window>
 800da72:	4603      	mov	r3, r0
 800da74:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800da76:	7bfb      	ldrb	r3, [r7, #15]
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d159      	bne.n	800db30 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	781b      	ldrb	r3, [r3, #0]
 800da80:	2b03      	cmp	r3, #3
 800da82:	d149      	bne.n	800db18 <sync_fs+0xb4>
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	791b      	ldrb	r3, [r3, #4]
 800da88:	2b01      	cmp	r3, #1
 800da8a:	d145      	bne.n	800db18 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	899b      	ldrh	r3, [r3, #12]
 800da96:	461a      	mov	r2, r3
 800da98:	2100      	movs	r1, #0
 800da9a:	f7ff fd78 	bl	800d58e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	3340      	adds	r3, #64	; 0x40
 800daa2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800daa6:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800daaa:	4618      	mov	r0, r3
 800daac:	f7ff fc80 	bl	800d3b0 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	3340      	adds	r3, #64	; 0x40
 800dab4:	4921      	ldr	r1, [pc, #132]	; (800db3c <sync_fs+0xd8>)
 800dab6:	4618      	mov	r0, r3
 800dab8:	f7ff fc95 	bl	800d3e6 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	3340      	adds	r3, #64	; 0x40
 800dac0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800dac4:	491e      	ldr	r1, [pc, #120]	; (800db40 <sync_fs+0xdc>)
 800dac6:	4618      	mov	r0, r3
 800dac8:	f7ff fc8d 	bl	800d3e6 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	3340      	adds	r3, #64	; 0x40
 800dad0:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	6a1b      	ldr	r3, [r3, #32]
 800dad8:	4619      	mov	r1, r3
 800dada:	4610      	mov	r0, r2
 800dadc:	f7ff fc83 	bl	800d3e6 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	3340      	adds	r3, #64	; 0x40
 800dae4:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	69db      	ldr	r3, [r3, #28]
 800daec:	4619      	mov	r1, r3
 800daee:	4610      	mov	r0, r2
 800daf0:	f7ff fc79 	bl	800d3e6 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800daf8:	1c5a      	adds	r2, r3, #1
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	63da      	str	r2, [r3, #60]	; 0x3c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	7858      	ldrb	r0, [r3, #1]
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800db0c:	2301      	movs	r3, #1
 800db0e:	f7ff fb19 	bl	800d144 <disk_write>
			fs->fsi_flag = 0;
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	2200      	movs	r2, #0
 800db16:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	785b      	ldrb	r3, [r3, #1]
 800db1c:	2200      	movs	r2, #0
 800db1e:	2100      	movs	r1, #0
 800db20:	4618      	mov	r0, r3
 800db22:	f7ff fb2f 	bl	800d184 <disk_ioctl>
 800db26:	4603      	mov	r3, r0
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d001      	beq.n	800db30 <sync_fs+0xcc>
 800db2c:	2301      	movs	r3, #1
 800db2e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800db30:	7bfb      	ldrb	r3, [r7, #15]
}
 800db32:	4618      	mov	r0, r3
 800db34:	3710      	adds	r7, #16
 800db36:	46bd      	mov	sp, r7
 800db38:	bd80      	pop	{r7, pc}
 800db3a:	bf00      	nop
 800db3c:	41615252 	.word	0x41615252
 800db40:	61417272 	.word	0x61417272

0800db44 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800db44:	b480      	push	{r7}
 800db46:	b083      	sub	sp, #12
 800db48:	af00      	add	r7, sp, #0
 800db4a:	6078      	str	r0, [r7, #4]
 800db4c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800db4e:	683b      	ldr	r3, [r7, #0]
 800db50:	3b02      	subs	r3, #2
 800db52:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db58:	3b02      	subs	r3, #2
 800db5a:	683a      	ldr	r2, [r7, #0]
 800db5c:	429a      	cmp	r2, r3
 800db5e:	d301      	bcc.n	800db64 <clust2sect+0x20>
 800db60:	2300      	movs	r3, #0
 800db62:	e008      	b.n	800db76 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	895b      	ldrh	r3, [r3, #10]
 800db68:	461a      	mov	r2, r3
 800db6a:	683b      	ldr	r3, [r7, #0]
 800db6c:	fb03 f202 	mul.w	r2, r3, r2
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db74:	4413      	add	r3, r2
}
 800db76:	4618      	mov	r0, r3
 800db78:	370c      	adds	r7, #12
 800db7a:	46bd      	mov	sp, r7
 800db7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db80:	4770      	bx	lr
	...

0800db84 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800db84:	b590      	push	{r4, r7, lr}
 800db86:	b089      	sub	sp, #36	; 0x24
 800db88:	af00      	add	r7, sp, #0
 800db8a:	6078      	str	r0, [r7, #4]
 800db8c:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	61bb      	str	r3, [r7, #24]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800db94:	683b      	ldr	r3, [r7, #0]
 800db96:	2b01      	cmp	r3, #1
 800db98:	d904      	bls.n	800dba4 <get_fat+0x20>
 800db9a:	69bb      	ldr	r3, [r7, #24]
 800db9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db9e:	683a      	ldr	r2, [r7, #0]
 800dba0:	429a      	cmp	r2, r3
 800dba2:	d302      	bcc.n	800dbaa <get_fat+0x26>
		val = 1;	/* Internal error */
 800dba4:	2301      	movs	r3, #1
 800dba6:	61fb      	str	r3, [r7, #28]
 800dba8:	e13a      	b.n	800de20 <get_fat+0x29c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800dbaa:	f04f 33ff 	mov.w	r3, #4294967295
 800dbae:	61fb      	str	r3, [r7, #28]

		switch (fs->fs_type) {
 800dbb0:	69bb      	ldr	r3, [r7, #24]
 800dbb2:	781b      	ldrb	r3, [r3, #0]
 800dbb4:	3b01      	subs	r3, #1
 800dbb6:	2b03      	cmp	r3, #3
 800dbb8:	f200 8126 	bhi.w	800de08 <get_fat+0x284>
 800dbbc:	a201      	add	r2, pc, #4	; (adr r2, 800dbc4 <get_fat+0x40>)
 800dbbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbc2:	bf00      	nop
 800dbc4:	0800dbd5 	.word	0x0800dbd5
 800dbc8:	0800dc83 	.word	0x0800dc83
 800dbcc:	0800dccf 	.word	0x0800dccf
 800dbd0:	0800dd1f 	.word	0x0800dd1f
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800dbd4:	683b      	ldr	r3, [r7, #0]
 800dbd6:	60fb      	str	r3, [r7, #12]
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	085b      	lsrs	r3, r3, #1
 800dbdc:	68fa      	ldr	r2, [r7, #12]
 800dbde:	4413      	add	r3, r2
 800dbe0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800dbe2:	69bb      	ldr	r3, [r7, #24]
 800dbe4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dbe6:	69bb      	ldr	r3, [r7, #24]
 800dbe8:	899b      	ldrh	r3, [r3, #12]
 800dbea:	4619      	mov	r1, r3
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	fbb3 f3f1 	udiv	r3, r3, r1
 800dbf2:	4413      	add	r3, r2
 800dbf4:	4619      	mov	r1, r3
 800dbf6:	69b8      	ldr	r0, [r7, #24]
 800dbf8:	f7ff ff06 	bl	800da08 <move_window>
 800dbfc:	4603      	mov	r3, r0
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	f040 8105 	bne.w	800de0e <get_fat+0x28a>
			wc = fs->win[bc++ % SS(fs)];
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	1c5a      	adds	r2, r3, #1
 800dc08:	60fa      	str	r2, [r7, #12]
 800dc0a:	69ba      	ldr	r2, [r7, #24]
 800dc0c:	8992      	ldrh	r2, [r2, #12]
 800dc0e:	fbb3 f1f2 	udiv	r1, r3, r2
 800dc12:	fb02 f201 	mul.w	r2, r2, r1
 800dc16:	1a9b      	subs	r3, r3, r2
 800dc18:	69ba      	ldr	r2, [r7, #24]
 800dc1a:	4413      	add	r3, r2
 800dc1c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800dc20:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800dc22:	69bb      	ldr	r3, [r7, #24]
 800dc24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dc26:	69bb      	ldr	r3, [r7, #24]
 800dc28:	899b      	ldrh	r3, [r3, #12]
 800dc2a:	4619      	mov	r1, r3
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	fbb3 f3f1 	udiv	r3, r3, r1
 800dc32:	4413      	add	r3, r2
 800dc34:	4619      	mov	r1, r3
 800dc36:	69b8      	ldr	r0, [r7, #24]
 800dc38:	f7ff fee6 	bl	800da08 <move_window>
 800dc3c:	4603      	mov	r3, r0
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	f040 80e7 	bne.w	800de12 <get_fat+0x28e>
			wc |= fs->win[bc % SS(fs)] << 8;
 800dc44:	69bb      	ldr	r3, [r7, #24]
 800dc46:	899b      	ldrh	r3, [r3, #12]
 800dc48:	461a      	mov	r2, r3
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	fbb3 f1f2 	udiv	r1, r3, r2
 800dc50:	fb02 f201 	mul.w	r2, r2, r1
 800dc54:	1a9b      	subs	r3, r3, r2
 800dc56:	69ba      	ldr	r2, [r7, #24]
 800dc58:	4413      	add	r3, r2
 800dc5a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800dc5e:	021b      	lsls	r3, r3, #8
 800dc60:	461a      	mov	r2, r3
 800dc62:	68bb      	ldr	r3, [r7, #8]
 800dc64:	4313      	orrs	r3, r2
 800dc66:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800dc68:	683b      	ldr	r3, [r7, #0]
 800dc6a:	f003 0301 	and.w	r3, r3, #1
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d002      	beq.n	800dc78 <get_fat+0xf4>
 800dc72:	68bb      	ldr	r3, [r7, #8]
 800dc74:	091b      	lsrs	r3, r3, #4
 800dc76:	e002      	b.n	800dc7e <get_fat+0xfa>
 800dc78:	68bb      	ldr	r3, [r7, #8]
 800dc7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800dc7e:	61fb      	str	r3, [r7, #28]
			break;
 800dc80:	e0ce      	b.n	800de20 <get_fat+0x29c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800dc82:	69bb      	ldr	r3, [r7, #24]
 800dc84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dc86:	69bb      	ldr	r3, [r7, #24]
 800dc88:	899b      	ldrh	r3, [r3, #12]
 800dc8a:	085b      	lsrs	r3, r3, #1
 800dc8c:	b29b      	uxth	r3, r3
 800dc8e:	4619      	mov	r1, r3
 800dc90:	683b      	ldr	r3, [r7, #0]
 800dc92:	fbb3 f3f1 	udiv	r3, r3, r1
 800dc96:	4413      	add	r3, r2
 800dc98:	4619      	mov	r1, r3
 800dc9a:	69b8      	ldr	r0, [r7, #24]
 800dc9c:	f7ff feb4 	bl	800da08 <move_window>
 800dca0:	4603      	mov	r3, r0
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	f040 80b7 	bne.w	800de16 <get_fat+0x292>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800dca8:	69bb      	ldr	r3, [r7, #24]
 800dcaa:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800dcae:	683b      	ldr	r3, [r7, #0]
 800dcb0:	005b      	lsls	r3, r3, #1
 800dcb2:	69ba      	ldr	r2, [r7, #24]
 800dcb4:	8992      	ldrh	r2, [r2, #12]
 800dcb6:	fbb3 f0f2 	udiv	r0, r3, r2
 800dcba:	fb02 f200 	mul.w	r2, r2, r0
 800dcbe:	1a9b      	subs	r3, r3, r2
 800dcc0:	440b      	add	r3, r1
 800dcc2:	4618      	mov	r0, r3
 800dcc4:	f7ff fa7c 	bl	800d1c0 <ld_word>
 800dcc8:	4603      	mov	r3, r0
 800dcca:	61fb      	str	r3, [r7, #28]
			break;
 800dccc:	e0a8      	b.n	800de20 <get_fat+0x29c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800dcce:	69bb      	ldr	r3, [r7, #24]
 800dcd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dcd2:	69bb      	ldr	r3, [r7, #24]
 800dcd4:	899b      	ldrh	r3, [r3, #12]
 800dcd6:	089b      	lsrs	r3, r3, #2
 800dcd8:	b29b      	uxth	r3, r3
 800dcda:	4619      	mov	r1, r3
 800dcdc:	683b      	ldr	r3, [r7, #0]
 800dcde:	fbb3 f3f1 	udiv	r3, r3, r1
 800dce2:	4413      	add	r3, r2
 800dce4:	4619      	mov	r1, r3
 800dce6:	69b8      	ldr	r0, [r7, #24]
 800dce8:	f7ff fe8e 	bl	800da08 <move_window>
 800dcec:	4603      	mov	r3, r0
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	f040 8093 	bne.w	800de1a <get_fat+0x296>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800dcf4:	69bb      	ldr	r3, [r7, #24]
 800dcf6:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800dcfa:	683b      	ldr	r3, [r7, #0]
 800dcfc:	009b      	lsls	r3, r3, #2
 800dcfe:	69ba      	ldr	r2, [r7, #24]
 800dd00:	8992      	ldrh	r2, [r2, #12]
 800dd02:	fbb3 f0f2 	udiv	r0, r3, r2
 800dd06:	fb02 f200 	mul.w	r2, r2, r0
 800dd0a:	1a9b      	subs	r3, r3, r2
 800dd0c:	440b      	add	r3, r1
 800dd0e:	4618      	mov	r0, r3
 800dd10:	f7ff fa6e 	bl	800d1f0 <ld_dword>
 800dd14:	4603      	mov	r3, r0
 800dd16:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800dd1a:	61fb      	str	r3, [r7, #28]
			break;
 800dd1c:	e080      	b.n	800de20 <get_fat+0x29c>
#if _FS_EXFAT
		case FS_EXFAT :
			if (obj->objsize) {
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800dd24:	4323      	orrs	r3, r4
 800dd26:	d06f      	beq.n	800de08 <get_fat+0x284>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	689b      	ldr	r3, [r3, #8]
 800dd2c:	683a      	ldr	r2, [r7, #0]
 800dd2e:	1ad3      	subs	r3, r2, r3
 800dd30:	617b      	str	r3, [r7, #20]
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800dd38:	f113 30ff 	adds.w	r0, r3, #4294967295
 800dd3c:	f144 31ff 	adc.w	r1, r4, #4294967295
 800dd40:	69bb      	ldr	r3, [r7, #24]
 800dd42:	899b      	ldrh	r3, [r3, #12]
 800dd44:	b29b      	uxth	r3, r3
 800dd46:	f04f 0400 	mov.w	r4, #0
 800dd4a:	461a      	mov	r2, r3
 800dd4c:	4623      	mov	r3, r4
 800dd4e:	f7f2 fa77 	bl	8000240 <__aeabi_uldivmod>
 800dd52:	4603      	mov	r3, r0
 800dd54:	460c      	mov	r4, r1
 800dd56:	461a      	mov	r2, r3
 800dd58:	69bb      	ldr	r3, [r7, #24]
 800dd5a:	895b      	ldrh	r3, [r3, #10]
 800dd5c:	fbb2 f3f3 	udiv	r3, r2, r3
 800dd60:	613b      	str	r3, [r7, #16]

				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	79db      	ldrb	r3, [r3, #7]
 800dd66:	2b02      	cmp	r3, #2
 800dd68:	d10e      	bne.n	800dd88 <get_fat+0x204>
					if (cofs <= clen) {
 800dd6a:	697a      	ldr	r2, [r7, #20]
 800dd6c:	693b      	ldr	r3, [r7, #16]
 800dd6e:	429a      	cmp	r2, r3
 800dd70:	d80a      	bhi.n	800dd88 <get_fat+0x204>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 800dd72:	697a      	ldr	r2, [r7, #20]
 800dd74:	693b      	ldr	r3, [r7, #16]
 800dd76:	429a      	cmp	r2, r3
 800dd78:	d002      	beq.n	800dd80 <get_fat+0x1fc>
 800dd7a:	683b      	ldr	r3, [r7, #0]
 800dd7c:	3301      	adds	r3, #1
 800dd7e:	e001      	b.n	800dd84 <get_fat+0x200>
 800dd80:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800dd84:	61fb      	str	r3, [r7, #28]
						break;
 800dd86:	e04b      	b.n	800de20 <get_fat+0x29c>
					}
				}
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	79db      	ldrb	r3, [r3, #7]
 800dd8c:	2b03      	cmp	r3, #3
 800dd8e:	d108      	bne.n	800dda2 <get_fat+0x21e>
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	699b      	ldr	r3, [r3, #24]
 800dd94:	697a      	ldr	r2, [r7, #20]
 800dd96:	429a      	cmp	r2, r3
 800dd98:	d203      	bcs.n	800dda2 <get_fat+0x21e>
					val = clst + 1; 	/* Generate the value */
 800dd9a:	683b      	ldr	r3, [r7, #0]
 800dd9c:	3301      	adds	r3, #1
 800dd9e:	61fb      	str	r3, [r7, #28]
					break;
 800dda0:	e03e      	b.n	800de20 <get_fat+0x29c>
				}
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	79db      	ldrb	r3, [r3, #7]
 800dda6:	2b02      	cmp	r3, #2
 800dda8:	d02e      	beq.n	800de08 <get_fat+0x284>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	69db      	ldr	r3, [r3, #28]
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d003      	beq.n	800ddba <get_fat+0x236>
						val = 0x7FFFFFFF;	/* Generate EOC */
 800ddb2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800ddb6:	61fb      	str	r3, [r7, #28]
					} else {
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
					}
					break;
 800ddb8:	e032      	b.n	800de20 <get_fat+0x29c>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ddba:	69bb      	ldr	r3, [r7, #24]
 800ddbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ddbe:	69bb      	ldr	r3, [r7, #24]
 800ddc0:	899b      	ldrh	r3, [r3, #12]
 800ddc2:	089b      	lsrs	r3, r3, #2
 800ddc4:	b29b      	uxth	r3, r3
 800ddc6:	4619      	mov	r1, r3
 800ddc8:	683b      	ldr	r3, [r7, #0]
 800ddca:	fbb3 f3f1 	udiv	r3, r3, r1
 800ddce:	4413      	add	r3, r2
 800ddd0:	4619      	mov	r1, r3
 800ddd2:	69b8      	ldr	r0, [r7, #24]
 800ddd4:	f7ff fe18 	bl	800da08 <move_window>
 800ddd8:	4603      	mov	r3, r0
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d11f      	bne.n	800de1e <get_fat+0x29a>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 800ddde:	69bb      	ldr	r3, [r7, #24]
 800dde0:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800dde4:	683b      	ldr	r3, [r7, #0]
 800dde6:	009b      	lsls	r3, r3, #2
 800dde8:	69ba      	ldr	r2, [r7, #24]
 800ddea:	8992      	ldrh	r2, [r2, #12]
 800ddec:	fbb3 f0f2 	udiv	r0, r3, r2
 800ddf0:	fb02 f200 	mul.w	r2, r2, r0
 800ddf4:	1a9b      	subs	r3, r3, r2
 800ddf6:	440b      	add	r3, r1
 800ddf8:	4618      	mov	r0, r3
 800ddfa:	f7ff f9f9 	bl	800d1f0 <ld_dword>
 800ddfe:	4603      	mov	r3, r0
 800de00:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800de04:	61fb      	str	r3, [r7, #28]
					break;
 800de06:	e00b      	b.n	800de20 <get_fat+0x29c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800de08:	2301      	movs	r3, #1
 800de0a:	61fb      	str	r3, [r7, #28]
 800de0c:	e008      	b.n	800de20 <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800de0e:	bf00      	nop
 800de10:	e006      	b.n	800de20 <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800de12:	bf00      	nop
 800de14:	e004      	b.n	800de20 <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800de16:	bf00      	nop
 800de18:	e002      	b.n	800de20 <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800de1a:	bf00      	nop
 800de1c:	e000      	b.n	800de20 <get_fat+0x29c>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800de1e:	bf00      	nop
		}
	}

	return val;
 800de20:	69fb      	ldr	r3, [r7, #28]
}
 800de22:	4618      	mov	r0, r3
 800de24:	3724      	adds	r7, #36	; 0x24
 800de26:	46bd      	mov	sp, r7
 800de28:	bd90      	pop	{r4, r7, pc}
 800de2a:	bf00      	nop

0800de2c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800de2c:	b590      	push	{r4, r7, lr}
 800de2e:	b089      	sub	sp, #36	; 0x24
 800de30:	af00      	add	r7, sp, #0
 800de32:	60f8      	str	r0, [r7, #12]
 800de34:	60b9      	str	r1, [r7, #8]
 800de36:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800de38:	2302      	movs	r3, #2
 800de3a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800de3c:	68bb      	ldr	r3, [r7, #8]
 800de3e:	2b01      	cmp	r3, #1
 800de40:	f240 8111 	bls.w	800e066 <put_fat+0x23a>
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de48:	68ba      	ldr	r2, [r7, #8]
 800de4a:	429a      	cmp	r2, r3
 800de4c:	f080 810b 	bcs.w	800e066 <put_fat+0x23a>
		switch (fs->fs_type) {
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	781b      	ldrb	r3, [r3, #0]
 800de54:	3b01      	subs	r3, #1
 800de56:	2b03      	cmp	r3, #3
 800de58:	f200 8105 	bhi.w	800e066 <put_fat+0x23a>
 800de5c:	a201      	add	r2, pc, #4	; (adr r2, 800de64 <put_fat+0x38>)
 800de5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de62:	bf00      	nop
 800de64:	0800de75 	.word	0x0800de75
 800de68:	0800df79 	.word	0x0800df79
 800de6c:	0800dfcf 	.word	0x0800dfcf
 800de70:	0800dfcf 	.word	0x0800dfcf
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800de74:	68bb      	ldr	r3, [r7, #8]
 800de76:	61bb      	str	r3, [r7, #24]
 800de78:	69bb      	ldr	r3, [r7, #24]
 800de7a:	085b      	lsrs	r3, r3, #1
 800de7c:	69ba      	ldr	r2, [r7, #24]
 800de7e:	4413      	add	r3, r2
 800de80:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	899b      	ldrh	r3, [r3, #12]
 800de8a:	4619      	mov	r1, r3
 800de8c:	69bb      	ldr	r3, [r7, #24]
 800de8e:	fbb3 f3f1 	udiv	r3, r3, r1
 800de92:	4413      	add	r3, r2
 800de94:	4619      	mov	r1, r3
 800de96:	68f8      	ldr	r0, [r7, #12]
 800de98:	f7ff fdb6 	bl	800da08 <move_window>
 800de9c:	4603      	mov	r3, r0
 800de9e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800dea0:	7ffb      	ldrb	r3, [r7, #31]
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	f040 80d8 	bne.w	800e058 <put_fat+0x22c>
			p = fs->win + bc++ % SS(fs);
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800deae:	69bb      	ldr	r3, [r7, #24]
 800deb0:	1c5a      	adds	r2, r3, #1
 800deb2:	61ba      	str	r2, [r7, #24]
 800deb4:	68fa      	ldr	r2, [r7, #12]
 800deb6:	8992      	ldrh	r2, [r2, #12]
 800deb8:	fbb3 f0f2 	udiv	r0, r3, r2
 800debc:	fb02 f200 	mul.w	r2, r2, r0
 800dec0:	1a9b      	subs	r3, r3, r2
 800dec2:	440b      	add	r3, r1
 800dec4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800dec6:	68bb      	ldr	r3, [r7, #8]
 800dec8:	f003 0301 	and.w	r3, r3, #1
 800decc:	2b00      	cmp	r3, #0
 800dece:	d00d      	beq.n	800deec <put_fat+0xc0>
 800ded0:	697b      	ldr	r3, [r7, #20]
 800ded2:	781b      	ldrb	r3, [r3, #0]
 800ded4:	b25b      	sxtb	r3, r3
 800ded6:	f003 030f 	and.w	r3, r3, #15
 800deda:	b25a      	sxtb	r2, r3
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	b2db      	uxtb	r3, r3
 800dee0:	011b      	lsls	r3, r3, #4
 800dee2:	b25b      	sxtb	r3, r3
 800dee4:	4313      	orrs	r3, r2
 800dee6:	b25b      	sxtb	r3, r3
 800dee8:	b2db      	uxtb	r3, r3
 800deea:	e001      	b.n	800def0 <put_fat+0xc4>
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	b2db      	uxtb	r3, r3
 800def0:	697a      	ldr	r2, [r7, #20]
 800def2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	2201      	movs	r2, #1
 800def8:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	899b      	ldrh	r3, [r3, #12]
 800df02:	4619      	mov	r1, r3
 800df04:	69bb      	ldr	r3, [r7, #24]
 800df06:	fbb3 f3f1 	udiv	r3, r3, r1
 800df0a:	4413      	add	r3, r2
 800df0c:	4619      	mov	r1, r3
 800df0e:	68f8      	ldr	r0, [r7, #12]
 800df10:	f7ff fd7a 	bl	800da08 <move_window>
 800df14:	4603      	mov	r3, r0
 800df16:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800df18:	7ffb      	ldrb	r3, [r7, #31]
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	f040 809e 	bne.w	800e05c <put_fat+0x230>
			p = fs->win + bc % SS(fs);
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	899b      	ldrh	r3, [r3, #12]
 800df2a:	461a      	mov	r2, r3
 800df2c:	69bb      	ldr	r3, [r7, #24]
 800df2e:	fbb3 f0f2 	udiv	r0, r3, r2
 800df32:	fb02 f200 	mul.w	r2, r2, r0
 800df36:	1a9b      	subs	r3, r3, r2
 800df38:	440b      	add	r3, r1
 800df3a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800df3c:	68bb      	ldr	r3, [r7, #8]
 800df3e:	f003 0301 	and.w	r3, r3, #1
 800df42:	2b00      	cmp	r3, #0
 800df44:	d003      	beq.n	800df4e <put_fat+0x122>
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	091b      	lsrs	r3, r3, #4
 800df4a:	b2db      	uxtb	r3, r3
 800df4c:	e00e      	b.n	800df6c <put_fat+0x140>
 800df4e:	697b      	ldr	r3, [r7, #20]
 800df50:	781b      	ldrb	r3, [r3, #0]
 800df52:	b25b      	sxtb	r3, r3
 800df54:	f023 030f 	bic.w	r3, r3, #15
 800df58:	b25a      	sxtb	r2, r3
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	0a1b      	lsrs	r3, r3, #8
 800df5e:	b25b      	sxtb	r3, r3
 800df60:	f003 030f 	and.w	r3, r3, #15
 800df64:	b25b      	sxtb	r3, r3
 800df66:	4313      	orrs	r3, r2
 800df68:	b25b      	sxtb	r3, r3
 800df6a:	b2db      	uxtb	r3, r3
 800df6c:	697a      	ldr	r2, [r7, #20]
 800df6e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	2201      	movs	r2, #1
 800df74:	70da      	strb	r2, [r3, #3]
			break;
 800df76:	e076      	b.n	800e066 <put_fat+0x23a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	899b      	ldrh	r3, [r3, #12]
 800df80:	085b      	lsrs	r3, r3, #1
 800df82:	b29b      	uxth	r3, r3
 800df84:	4619      	mov	r1, r3
 800df86:	68bb      	ldr	r3, [r7, #8]
 800df88:	fbb3 f3f1 	udiv	r3, r3, r1
 800df8c:	4413      	add	r3, r2
 800df8e:	4619      	mov	r1, r3
 800df90:	68f8      	ldr	r0, [r7, #12]
 800df92:	f7ff fd39 	bl	800da08 <move_window>
 800df96:	4603      	mov	r3, r0
 800df98:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800df9a:	7ffb      	ldrb	r3, [r7, #31]
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d15f      	bne.n	800e060 <put_fat+0x234>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800dfa6:	68bb      	ldr	r3, [r7, #8]
 800dfa8:	005b      	lsls	r3, r3, #1
 800dfaa:	68fa      	ldr	r2, [r7, #12]
 800dfac:	8992      	ldrh	r2, [r2, #12]
 800dfae:	fbb3 f0f2 	udiv	r0, r3, r2
 800dfb2:	fb02 f200 	mul.w	r2, r2, r0
 800dfb6:	1a9b      	subs	r3, r3, r2
 800dfb8:	440b      	add	r3, r1
 800dfba:	687a      	ldr	r2, [r7, #4]
 800dfbc:	b292      	uxth	r2, r2
 800dfbe:	4611      	mov	r1, r2
 800dfc0:	4618      	mov	r0, r3
 800dfc2:	f7ff f9f5 	bl	800d3b0 <st_word>
			fs->wflag = 1;
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	2201      	movs	r2, #1
 800dfca:	70da      	strb	r2, [r3, #3]
			break;
 800dfcc:	e04b      	b.n	800e066 <put_fat+0x23a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	899b      	ldrh	r3, [r3, #12]
 800dfd6:	089b      	lsrs	r3, r3, #2
 800dfd8:	b29b      	uxth	r3, r3
 800dfda:	4619      	mov	r1, r3
 800dfdc:	68bb      	ldr	r3, [r7, #8]
 800dfde:	fbb3 f3f1 	udiv	r3, r3, r1
 800dfe2:	4413      	add	r3, r2
 800dfe4:	4619      	mov	r1, r3
 800dfe6:	68f8      	ldr	r0, [r7, #12]
 800dfe8:	f7ff fd0e 	bl	800da08 <move_window>
 800dfec:	4603      	mov	r3, r0
 800dfee:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800dff0:	7ffb      	ldrb	r3, [r7, #31]
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d136      	bne.n	800e064 <put_fat+0x238>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800dff6:	68fb      	ldr	r3, [r7, #12]
 800dff8:	781b      	ldrb	r3, [r3, #0]
 800dffa:	2b04      	cmp	r3, #4
 800dffc:	d017      	beq.n	800e02e <put_fat+0x202>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800e00a:	68bb      	ldr	r3, [r7, #8]
 800e00c:	009b      	lsls	r3, r3, #2
 800e00e:	68fa      	ldr	r2, [r7, #12]
 800e010:	8992      	ldrh	r2, [r2, #12]
 800e012:	fbb3 f0f2 	udiv	r0, r3, r2
 800e016:	fb02 f200 	mul.w	r2, r2, r0
 800e01a:	1a9b      	subs	r3, r3, r2
 800e01c:	440b      	add	r3, r1
 800e01e:	4618      	mov	r0, r3
 800e020:	f7ff f8e6 	bl	800d1f0 <ld_dword>
 800e024:	4603      	mov	r3, r0
 800e026:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800e02a:	4323      	orrs	r3, r4
 800e02c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800e034:	68bb      	ldr	r3, [r7, #8]
 800e036:	009b      	lsls	r3, r3, #2
 800e038:	68fa      	ldr	r2, [r7, #12]
 800e03a:	8992      	ldrh	r2, [r2, #12]
 800e03c:	fbb3 f0f2 	udiv	r0, r3, r2
 800e040:	fb02 f200 	mul.w	r2, r2, r0
 800e044:	1a9b      	subs	r3, r3, r2
 800e046:	440b      	add	r3, r1
 800e048:	6879      	ldr	r1, [r7, #4]
 800e04a:	4618      	mov	r0, r3
 800e04c:	f7ff f9cb 	bl	800d3e6 <st_dword>
			fs->wflag = 1;
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	2201      	movs	r2, #1
 800e054:	70da      	strb	r2, [r3, #3]
			break;
 800e056:	e006      	b.n	800e066 <put_fat+0x23a>
			if (res != FR_OK) break;
 800e058:	bf00      	nop
 800e05a:	e004      	b.n	800e066 <put_fat+0x23a>
			if (res != FR_OK) break;
 800e05c:	bf00      	nop
 800e05e:	e002      	b.n	800e066 <put_fat+0x23a>
			if (res != FR_OK) break;
 800e060:	bf00      	nop
 800e062:	e000      	b.n	800e066 <put_fat+0x23a>
			if (res != FR_OK) break;
 800e064:	bf00      	nop
		}
	}
	return res;
 800e066:	7ffb      	ldrb	r3, [r7, #31]
}
 800e068:	4618      	mov	r0, r3
 800e06a:	3724      	adds	r7, #36	; 0x24
 800e06c:	46bd      	mov	sp, r7
 800e06e:	bd90      	pop	{r4, r7, pc}

0800e070 <find_bitmap>:
DWORD find_bitmap (	/* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to scan from */
	DWORD ncl	/* Number of contiguous clusters to find (1..) */
)
{
 800e070:	b580      	push	{r7, lr}
 800e072:	b08a      	sub	sp, #40	; 0x28
 800e074:	af00      	add	r7, sp, #0
 800e076:	60f8      	str	r0, [r7, #12]
 800e078:	60b9      	str	r1, [r7, #8]
 800e07a:	607a      	str	r2, [r7, #4]
	BYTE bm, bv;
	UINT i;
	DWORD val, scl, ctr;


	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 800e07c:	68bb      	ldr	r3, [r7, #8]
 800e07e:	3b02      	subs	r3, #2
 800e080:	60bb      	str	r3, [r7, #8]
	if (clst >= fs->n_fatent - 2) clst = 0;
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e086:	3b02      	subs	r3, #2
 800e088:	68ba      	ldr	r2, [r7, #8]
 800e08a:	429a      	cmp	r2, r3
 800e08c:	d301      	bcc.n	800e092 <find_bitmap+0x22>
 800e08e:	2300      	movs	r3, #0
 800e090:	60bb      	str	r3, [r7, #8]
	scl = val = clst; ctr = 0;
 800e092:	68bb      	ldr	r3, [r7, #8]
 800e094:	61fb      	str	r3, [r7, #28]
 800e096:	69fb      	ldr	r3, [r7, #28]
 800e098:	61bb      	str	r3, [r7, #24]
 800e09a:	2300      	movs	r3, #0
 800e09c:	617b      	str	r3, [r7, #20]
	for (;;) {
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e0a2:	69fb      	ldr	r3, [r7, #28]
 800e0a4:	08db      	lsrs	r3, r3, #3
 800e0a6:	68f9      	ldr	r1, [r7, #12]
 800e0a8:	8989      	ldrh	r1, [r1, #12]
 800e0aa:	fbb3 f3f1 	udiv	r3, r3, r1
 800e0ae:	4413      	add	r3, r2
 800e0b0:	4619      	mov	r1, r3
 800e0b2:	68f8      	ldr	r0, [r7, #12]
 800e0b4:	f7ff fca8 	bl	800da08 <move_window>
 800e0b8:	4603      	mov	r3, r0
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d002      	beq.n	800e0c4 <find_bitmap+0x54>
 800e0be:	f04f 33ff 	mov.w	r3, #4294967295
 800e0c2:	e058      	b.n	800e176 <find_bitmap+0x106>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 800e0c4:	69fb      	ldr	r3, [r7, #28]
 800e0c6:	08db      	lsrs	r3, r3, #3
 800e0c8:	68fa      	ldr	r2, [r7, #12]
 800e0ca:	8992      	ldrh	r2, [r2, #12]
 800e0cc:	fbb3 f1f2 	udiv	r1, r3, r2
 800e0d0:	fb02 f201 	mul.w	r2, r2, r1
 800e0d4:	1a9b      	subs	r3, r3, r2
 800e0d6:	623b      	str	r3, [r7, #32]
 800e0d8:	69fb      	ldr	r3, [r7, #28]
 800e0da:	f003 0307 	and.w	r3, r3, #7
 800e0de:	2201      	movs	r2, #1
 800e0e0:	fa02 f303 	lsl.w	r3, r2, r3
 800e0e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		do {
			do {
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 800e0e8:	68fa      	ldr	r2, [r7, #12]
 800e0ea:	6a3b      	ldr	r3, [r7, #32]
 800e0ec:	4413      	add	r3, r2
 800e0ee:	3340      	adds	r3, #64	; 0x40
 800e0f0:	781a      	ldrb	r2, [r3, #0]
 800e0f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e0f6:	4013      	ands	r3, r2
 800e0f8:	74fb      	strb	r3, [r7, #19]
 800e0fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e0fe:	005b      	lsls	r3, r3, #1
 800e100:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 800e104:	69fb      	ldr	r3, [r7, #28]
 800e106:	3301      	adds	r3, #1
 800e108:	61fb      	str	r3, [r7, #28]
 800e10a:	68fb      	ldr	r3, [r7, #12]
 800e10c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e10e:	3b02      	subs	r3, #2
 800e110:	69fa      	ldr	r2, [r7, #28]
 800e112:	429a      	cmp	r2, r3
 800e114:	d307      	bcc.n	800e126 <find_bitmap+0xb6>
					val = 0; bm = 0; i = SS(fs);
 800e116:	2300      	movs	r3, #0
 800e118:	61fb      	str	r3, [r7, #28]
 800e11a:	2300      	movs	r3, #0
 800e11c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e120:	68fb      	ldr	r3, [r7, #12]
 800e122:	899b      	ldrh	r3, [r3, #12]
 800e124:	623b      	str	r3, [r7, #32]
				}
				if (!bv) {	/* Is it a free cluster? */
 800e126:	7cfb      	ldrb	r3, [r7, #19]
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d109      	bne.n	800e140 <find_bitmap+0xd0>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 800e12c:	697b      	ldr	r3, [r7, #20]
 800e12e:	3301      	adds	r3, #1
 800e130:	617b      	str	r3, [r7, #20]
 800e132:	697a      	ldr	r2, [r7, #20]
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	429a      	cmp	r2, r3
 800e138:	d106      	bne.n	800e148 <find_bitmap+0xd8>
 800e13a:	69bb      	ldr	r3, [r7, #24]
 800e13c:	3302      	adds	r3, #2
 800e13e:	e01a      	b.n	800e176 <find_bitmap+0x106>
				} else {
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
 800e140:	69fb      	ldr	r3, [r7, #28]
 800e142:	61bb      	str	r3, [r7, #24]
 800e144:	2300      	movs	r3, #0
 800e146:	617b      	str	r3, [r7, #20]
				}
				if (val == clst) return 0;	/* All cluster scanned? */
 800e148:	69fa      	ldr	r2, [r7, #28]
 800e14a:	68bb      	ldr	r3, [r7, #8]
 800e14c:	429a      	cmp	r2, r3
 800e14e:	d101      	bne.n	800e154 <find_bitmap+0xe4>
 800e150:	2300      	movs	r3, #0
 800e152:	e010      	b.n	800e176 <find_bitmap+0x106>
			} while (bm);
 800e154:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d1c5      	bne.n	800e0e8 <find_bitmap+0x78>
			bm = 1;
 800e15c:	2301      	movs	r3, #1
 800e15e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		} while (++i < SS(fs));
 800e162:	6a3b      	ldr	r3, [r7, #32]
 800e164:	3301      	adds	r3, #1
 800e166:	623b      	str	r3, [r7, #32]
 800e168:	68fb      	ldr	r3, [r7, #12]
 800e16a:	899b      	ldrh	r3, [r3, #12]
 800e16c:	461a      	mov	r2, r3
 800e16e:	6a3b      	ldr	r3, [r7, #32]
 800e170:	4293      	cmp	r3, r2
 800e172:	d3b9      	bcc.n	800e0e8 <find_bitmap+0x78>
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 800e174:	e793      	b.n	800e09e <find_bitmap+0x2e>
	}
}
 800e176:	4618      	mov	r0, r3
 800e178:	3728      	adds	r7, #40	; 0x28
 800e17a:	46bd      	mov	sp, r7
 800e17c:	bd80      	pop	{r7, pc}

0800e17e <change_bitmap>:
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to change from */
	DWORD ncl,	/* Number of clusters to be changed */
	int bv		/* bit value to be set (0 or 1) */
)
{
 800e17e:	b580      	push	{r7, lr}
 800e180:	b088      	sub	sp, #32
 800e182:	af00      	add	r7, sp, #0
 800e184:	60f8      	str	r0, [r7, #12]
 800e186:	60b9      	str	r1, [r7, #8]
 800e188:	607a      	str	r2, [r7, #4]
 800e18a:	603b      	str	r3, [r7, #0]
	BYTE bm;
	UINT i;
	DWORD sect;

	clst -= 2;	/* The first bit corresponds to cluster #2 */
 800e18c:	68bb      	ldr	r3, [r7, #8]
 800e18e:	3b02      	subs	r3, #2
 800e190:	60bb      	str	r3, [r7, #8]
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e196:	68bb      	ldr	r3, [r7, #8]
 800e198:	08db      	lsrs	r3, r3, #3
 800e19a:	68f9      	ldr	r1, [r7, #12]
 800e19c:	8989      	ldrh	r1, [r1, #12]
 800e19e:	fbb3 f3f1 	udiv	r3, r3, r1
 800e1a2:	4413      	add	r3, r2
 800e1a4:	617b      	str	r3, [r7, #20]
	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
 800e1a6:	68bb      	ldr	r3, [r7, #8]
 800e1a8:	08db      	lsrs	r3, r3, #3
 800e1aa:	68fa      	ldr	r2, [r7, #12]
 800e1ac:	8992      	ldrh	r2, [r2, #12]
 800e1ae:	fbb3 f1f2 	udiv	r1, r3, r2
 800e1b2:	fb02 f201 	mul.w	r2, r2, r1
 800e1b6:	1a9b      	subs	r3, r3, r2
 800e1b8:	61bb      	str	r3, [r7, #24]
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
 800e1ba:	68bb      	ldr	r3, [r7, #8]
 800e1bc:	f003 0307 	and.w	r3, r3, #7
 800e1c0:	2201      	movs	r2, #1
 800e1c2:	fa02 f303 	lsl.w	r3, r2, r3
 800e1c6:	77fb      	strb	r3, [r7, #31]
	for (;;) {
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800e1c8:	697b      	ldr	r3, [r7, #20]
 800e1ca:	1c5a      	adds	r2, r3, #1
 800e1cc:	617a      	str	r2, [r7, #20]
 800e1ce:	4619      	mov	r1, r3
 800e1d0:	68f8      	ldr	r0, [r7, #12]
 800e1d2:	f7ff fc19 	bl	800da08 <move_window>
 800e1d6:	4603      	mov	r3, r0
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d001      	beq.n	800e1e0 <change_bitmap+0x62>
 800e1dc:	2301      	movs	r3, #1
 800e1de:	e03f      	b.n	800e260 <change_bitmap+0xe2>
		do {
			do {
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 800e1e0:	68fa      	ldr	r2, [r7, #12]
 800e1e2:	69bb      	ldr	r3, [r7, #24]
 800e1e4:	4413      	add	r3, r2
 800e1e6:	3340      	adds	r3, #64	; 0x40
 800e1e8:	781a      	ldrb	r2, [r3, #0]
 800e1ea:	7ffb      	ldrb	r3, [r7, #31]
 800e1ec:	4013      	ands	r3, r2
 800e1ee:	b2db      	uxtb	r3, r3
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	bf14      	ite	ne
 800e1f4:	2301      	movne	r3, #1
 800e1f6:	2300      	moveq	r3, #0
 800e1f8:	b2db      	uxtb	r3, r3
 800e1fa:	461a      	mov	r2, r3
 800e1fc:	683b      	ldr	r3, [r7, #0]
 800e1fe:	4293      	cmp	r3, r2
 800e200:	d101      	bne.n	800e206 <change_bitmap+0x88>
 800e202:	2302      	movs	r3, #2
 800e204:	e02c      	b.n	800e260 <change_bitmap+0xe2>
				fs->win[i] ^= bm;	/* Flip the bit */
 800e206:	68fa      	ldr	r2, [r7, #12]
 800e208:	69bb      	ldr	r3, [r7, #24]
 800e20a:	4413      	add	r3, r2
 800e20c:	3340      	adds	r3, #64	; 0x40
 800e20e:	781a      	ldrb	r2, [r3, #0]
 800e210:	7ffb      	ldrb	r3, [r7, #31]
 800e212:	4053      	eors	r3, r2
 800e214:	b2d9      	uxtb	r1, r3
 800e216:	68fa      	ldr	r2, [r7, #12]
 800e218:	69bb      	ldr	r3, [r7, #24]
 800e21a:	4413      	add	r3, r2
 800e21c:	3340      	adds	r3, #64	; 0x40
 800e21e:	460a      	mov	r2, r1
 800e220:	701a      	strb	r2, [r3, #0]
				fs->wflag = 1;
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	2201      	movs	r2, #1
 800e226:	70da      	strb	r2, [r3, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	3b01      	subs	r3, #1
 800e22c:	607b      	str	r3, [r7, #4]
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	2b00      	cmp	r3, #0
 800e232:	d101      	bne.n	800e238 <change_bitmap+0xba>
 800e234:	2300      	movs	r3, #0
 800e236:	e013      	b.n	800e260 <change_bitmap+0xe2>
			} while (bm <<= 1);		/* Next bit */
 800e238:	7ffb      	ldrb	r3, [r7, #31]
 800e23a:	005b      	lsls	r3, r3, #1
 800e23c:	77fb      	strb	r3, [r7, #31]
 800e23e:	7ffb      	ldrb	r3, [r7, #31]
 800e240:	2b00      	cmp	r3, #0
 800e242:	d1cd      	bne.n	800e1e0 <change_bitmap+0x62>
			bm = 1;
 800e244:	2301      	movs	r3, #1
 800e246:	77fb      	strb	r3, [r7, #31]
		} while (++i < SS(fs));		/* Next byte */
 800e248:	69bb      	ldr	r3, [r7, #24]
 800e24a:	3301      	adds	r3, #1
 800e24c:	61bb      	str	r3, [r7, #24]
 800e24e:	68fb      	ldr	r3, [r7, #12]
 800e250:	899b      	ldrh	r3, [r3, #12]
 800e252:	461a      	mov	r2, r3
 800e254:	69bb      	ldr	r3, [r7, #24]
 800e256:	4293      	cmp	r3, r2
 800e258:	d3c2      	bcc.n	800e1e0 <change_bitmap+0x62>
		i = 0;
 800e25a:	2300      	movs	r3, #0
 800e25c:	61bb      	str	r3, [r7, #24]
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800e25e:	e7b3      	b.n	800e1c8 <change_bitmap+0x4a>
	}
}
 800e260:	4618      	mov	r0, r3
 800e262:	3720      	adds	r7, #32
 800e264:	46bd      	mov	sp, r7
 800e266:	bd80      	pop	{r7, pc}

0800e268 <fill_first_frag>:

static
FRESULT fill_first_frag (
	_FDID* obj	/* Pointer to the corresponding object */
)
{
 800e268:	b580      	push	{r7, lr}
 800e26a:	b086      	sub	sp, #24
 800e26c:	af00      	add	r7, sp, #0
 800e26e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD cl, n;

	if (obj->stat == 3) {	/* Has the object been changed 'fragmented'? */
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	79db      	ldrb	r3, [r3, #7]
 800e274:	2b03      	cmp	r3, #3
 800e276:	d121      	bne.n	800e2bc <fill_first_frag+0x54>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	689b      	ldr	r3, [r3, #8]
 800e27c:	617b      	str	r3, [r7, #20]
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	699b      	ldr	r3, [r3, #24]
 800e282:	613b      	str	r3, [r7, #16]
 800e284:	e014      	b.n	800e2b0 <fill_first_frag+0x48>
			res = put_fat(obj->fs, cl, cl + 1);
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	6818      	ldr	r0, [r3, #0]
 800e28a:	697b      	ldr	r3, [r7, #20]
 800e28c:	3301      	adds	r3, #1
 800e28e:	461a      	mov	r2, r3
 800e290:	6979      	ldr	r1, [r7, #20]
 800e292:	f7ff fdcb 	bl	800de2c <put_fat>
 800e296:	4603      	mov	r3, r0
 800e298:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) return res;
 800e29a:	7bfb      	ldrb	r3, [r7, #15]
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d001      	beq.n	800e2a4 <fill_first_frag+0x3c>
 800e2a0:	7bfb      	ldrb	r3, [r7, #15]
 800e2a2:	e00c      	b.n	800e2be <fill_first_frag+0x56>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800e2a4:	697b      	ldr	r3, [r7, #20]
 800e2a6:	3301      	adds	r3, #1
 800e2a8:	617b      	str	r3, [r7, #20]
 800e2aa:	693b      	ldr	r3, [r7, #16]
 800e2ac:	3b01      	subs	r3, #1
 800e2ae:	613b      	str	r3, [r7, #16]
 800e2b0:	693b      	ldr	r3, [r7, #16]
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d1e7      	bne.n	800e286 <fill_first_frag+0x1e>
		}
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	2200      	movs	r2, #0
 800e2ba:	71da      	strb	r2, [r3, #7]
	}
	return FR_OK;
 800e2bc:	2300      	movs	r3, #0
}
 800e2be:	4618      	mov	r0, r3
 800e2c0:	3718      	adds	r7, #24
 800e2c2:	46bd      	mov	sp, r7
 800e2c4:	bd80      	pop	{r7, pc}

0800e2c6 <fill_last_frag>:
FRESULT fill_last_frag (
	_FDID* obj,	/* Pointer to the corresponding object */
	DWORD lcl,	/* Last cluster of the fragment */
	DWORD term	/* Value to set the last FAT entry */
)
{
 800e2c6:	b580      	push	{r7, lr}
 800e2c8:	b086      	sub	sp, #24
 800e2ca:	af00      	add	r7, sp, #0
 800e2cc:	60f8      	str	r0, [r7, #12]
 800e2ce:	60b9      	str	r1, [r7, #8]
 800e2d0:	607a      	str	r2, [r7, #4]
	FRESULT res;

	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 800e2d2:	e020      	b.n	800e316 <fill_last_frag+0x50>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	6818      	ldr	r0, [r3, #0]
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	69db      	ldr	r3, [r3, #28]
 800e2dc:	68ba      	ldr	r2, [r7, #8]
 800e2de:	1ad3      	subs	r3, r2, r3
 800e2e0:	1c59      	adds	r1, r3, #1
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	69db      	ldr	r3, [r3, #28]
 800e2e6:	2b01      	cmp	r3, #1
 800e2e8:	d905      	bls.n	800e2f6 <fill_last_frag+0x30>
 800e2ea:	68fb      	ldr	r3, [r7, #12]
 800e2ec:	69db      	ldr	r3, [r3, #28]
 800e2ee:	68ba      	ldr	r2, [r7, #8]
 800e2f0:	1ad3      	subs	r3, r2, r3
 800e2f2:	3302      	adds	r3, #2
 800e2f4:	e000      	b.n	800e2f8 <fill_last_frag+0x32>
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	461a      	mov	r2, r3
 800e2fa:	f7ff fd97 	bl	800de2c <put_fat>
 800e2fe:	4603      	mov	r3, r0
 800e300:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 800e302:	7dfb      	ldrb	r3, [r7, #23]
 800e304:	2b00      	cmp	r3, #0
 800e306:	d001      	beq.n	800e30c <fill_last_frag+0x46>
 800e308:	7dfb      	ldrb	r3, [r7, #23]
 800e30a:	e009      	b.n	800e320 <fill_last_frag+0x5a>
		obj->n_frag--;
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	69db      	ldr	r3, [r3, #28]
 800e310:	1e5a      	subs	r2, r3, #1
 800e312:	68fb      	ldr	r3, [r7, #12]
 800e314:	61da      	str	r2, [r3, #28]
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	69db      	ldr	r3, [r3, #28]
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d1da      	bne.n	800e2d4 <fill_last_frag+0xe>
	}
	return FR_OK;
 800e31e:	2300      	movs	r3, #0
}
 800e320:	4618      	mov	r0, r3
 800e322:	3718      	adds	r7, #24
 800e324:	46bd      	mov	sp, r7
 800e326:	bd80      	pop	{r7, pc}

0800e328 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800e328:	b580      	push	{r7, lr}
 800e32a:	b08a      	sub	sp, #40	; 0x28
 800e32c:	af00      	add	r7, sp, #0
 800e32e:	60f8      	str	r0, [r7, #12]
 800e330:	60b9      	str	r1, [r7, #8]
 800e332:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800e334:	2300      	movs	r3, #0
 800e336:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800e338:	68fb      	ldr	r3, [r7, #12]
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	61bb      	str	r3, [r7, #24]
#if _FS_EXFAT || _USE_TRIM
	DWORD scl = clst, ecl = clst;
 800e33e:	68bb      	ldr	r3, [r7, #8]
 800e340:	627b      	str	r3, [r7, #36]	; 0x24
 800e342:	68bb      	ldr	r3, [r7, #8]
 800e344:	623b      	str	r3, [r7, #32]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800e346:	68bb      	ldr	r3, [r7, #8]
 800e348:	2b01      	cmp	r3, #1
 800e34a:	d904      	bls.n	800e356 <remove_chain+0x2e>
 800e34c:	69bb      	ldr	r3, [r7, #24]
 800e34e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e350:	68ba      	ldr	r2, [r7, #8]
 800e352:	429a      	cmp	r2, r3
 800e354:	d301      	bcc.n	800e35a <remove_chain+0x32>
 800e356:	2302      	movs	r3, #2
 800e358:	e096      	b.n	800e488 <remove_chain+0x160>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d014      	beq.n	800e38a <remove_chain+0x62>
 800e360:	69bb      	ldr	r3, [r7, #24]
 800e362:	781b      	ldrb	r3, [r3, #0]
 800e364:	2b04      	cmp	r3, #4
 800e366:	d103      	bne.n	800e370 <remove_chain+0x48>
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	79db      	ldrb	r3, [r3, #7]
 800e36c:	2b02      	cmp	r3, #2
 800e36e:	d00c      	beq.n	800e38a <remove_chain+0x62>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800e370:	f04f 32ff 	mov.w	r2, #4294967295
 800e374:	6879      	ldr	r1, [r7, #4]
 800e376:	69b8      	ldr	r0, [r7, #24]
 800e378:	f7ff fd58 	bl	800de2c <put_fat>
 800e37c:	4603      	mov	r3, r0
 800e37e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800e380:	7ffb      	ldrb	r3, [r7, #31]
 800e382:	2b00      	cmp	r3, #0
 800e384:	d001      	beq.n	800e38a <remove_chain+0x62>
 800e386:	7ffb      	ldrb	r3, [r7, #31]
 800e388:	e07e      	b.n	800e488 <remove_chain+0x160>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800e38a:	68b9      	ldr	r1, [r7, #8]
 800e38c:	68f8      	ldr	r0, [r7, #12]
 800e38e:	f7ff fbf9 	bl	800db84 <get_fat>
 800e392:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800e394:	697b      	ldr	r3, [r7, #20]
 800e396:	2b00      	cmp	r3, #0
 800e398:	d055      	beq.n	800e446 <remove_chain+0x11e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800e39a:	697b      	ldr	r3, [r7, #20]
 800e39c:	2b01      	cmp	r3, #1
 800e39e:	d101      	bne.n	800e3a4 <remove_chain+0x7c>
 800e3a0:	2302      	movs	r3, #2
 800e3a2:	e071      	b.n	800e488 <remove_chain+0x160>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800e3a4:	697b      	ldr	r3, [r7, #20]
 800e3a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3aa:	d101      	bne.n	800e3b0 <remove_chain+0x88>
 800e3ac:	2301      	movs	r3, #1
 800e3ae:	e06b      	b.n	800e488 <remove_chain+0x160>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800e3b0:	69bb      	ldr	r3, [r7, #24]
 800e3b2:	781b      	ldrb	r3, [r3, #0]
 800e3b4:	2b04      	cmp	r3, #4
 800e3b6:	d00b      	beq.n	800e3d0 <remove_chain+0xa8>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800e3b8:	2200      	movs	r2, #0
 800e3ba:	68b9      	ldr	r1, [r7, #8]
 800e3bc:	69b8      	ldr	r0, [r7, #24]
 800e3be:	f7ff fd35 	bl	800de2c <put_fat>
 800e3c2:	4603      	mov	r3, r0
 800e3c4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800e3c6:	7ffb      	ldrb	r3, [r7, #31]
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d001      	beq.n	800e3d0 <remove_chain+0xa8>
 800e3cc:	7ffb      	ldrb	r3, [r7, #31]
 800e3ce:	e05b      	b.n	800e488 <remove_chain+0x160>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800e3d0:	69bb      	ldr	r3, [r7, #24]
 800e3d2:	6a1a      	ldr	r2, [r3, #32]
 800e3d4:	69bb      	ldr	r3, [r7, #24]
 800e3d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3d8:	3b02      	subs	r3, #2
 800e3da:	429a      	cmp	r2, r3
 800e3dc:	d20b      	bcs.n	800e3f6 <remove_chain+0xce>
			fs->free_clst++;
 800e3de:	69bb      	ldr	r3, [r7, #24]
 800e3e0:	6a1b      	ldr	r3, [r3, #32]
 800e3e2:	1c5a      	adds	r2, r3, #1
 800e3e4:	69bb      	ldr	r3, [r7, #24]
 800e3e6:	621a      	str	r2, [r3, #32]
			fs->fsi_flag |= 1;
 800e3e8:	69bb      	ldr	r3, [r7, #24]
 800e3ea:	791b      	ldrb	r3, [r3, #4]
 800e3ec:	f043 0301 	orr.w	r3, r3, #1
 800e3f0:	b2da      	uxtb	r2, r3
 800e3f2:	69bb      	ldr	r3, [r7, #24]
 800e3f4:	711a      	strb	r2, [r3, #4]
		}
#if _FS_EXFAT || _USE_TRIM
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 800e3f6:	6a3b      	ldr	r3, [r7, #32]
 800e3f8:	3301      	adds	r3, #1
 800e3fa:	697a      	ldr	r2, [r7, #20]
 800e3fc:	429a      	cmp	r2, r3
 800e3fe:	d102      	bne.n	800e406 <remove_chain+0xde>
			ecl = nxt;
 800e400:	697b      	ldr	r3, [r7, #20]
 800e402:	623b      	str	r3, [r7, #32]
 800e404:	e017      	b.n	800e436 <remove_chain+0x10e>
		} else {				/* End of contiguous cluster block */
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800e406:	69bb      	ldr	r3, [r7, #24]
 800e408:	781b      	ldrb	r3, [r3, #0]
 800e40a:	2b04      	cmp	r3, #4
 800e40c:	d10f      	bne.n	800e42e <remove_chain+0x106>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 800e40e:	6a3a      	ldr	r2, [r7, #32]
 800e410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e412:	1ad3      	subs	r3, r2, r3
 800e414:	1c5a      	adds	r2, r3, #1
 800e416:	2300      	movs	r3, #0
 800e418:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e41a:	69b8      	ldr	r0, [r7, #24]
 800e41c:	f7ff feaf 	bl	800e17e <change_bitmap>
 800e420:	4603      	mov	r3, r0
 800e422:	77fb      	strb	r3, [r7, #31]
				if (res != FR_OK) return res;
 800e424:	7ffb      	ldrb	r3, [r7, #31]
 800e426:	2b00      	cmp	r3, #0
 800e428:	d001      	beq.n	800e42e <remove_chain+0x106>
 800e42a:	7ffb      	ldrb	r3, [r7, #31]
 800e42c:	e02c      	b.n	800e488 <remove_chain+0x160>
#if _USE_TRIM
			rt[0] = clust2sect(fs, scl);					/* Start sector */
			rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
 800e42e:	697b      	ldr	r3, [r7, #20]
 800e430:	623b      	str	r3, [r7, #32]
 800e432:	6a3b      	ldr	r3, [r7, #32]
 800e434:	627b      	str	r3, [r7, #36]	; 0x24
		}
#endif
		clst = nxt;					/* Next cluster */
 800e436:	697b      	ldr	r3, [r7, #20]
 800e438:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800e43a:	69bb      	ldr	r3, [r7, #24]
 800e43c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e43e:	68ba      	ldr	r2, [r7, #8]
 800e440:	429a      	cmp	r2, r3
 800e442:	d3a2      	bcc.n	800e38a <remove_chain+0x62>
 800e444:	e000      	b.n	800e448 <remove_chain+0x120>
		if (nxt == 0) break;				/* Empty cluster? */
 800e446:	bf00      	nop

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {
 800e448:	69bb      	ldr	r3, [r7, #24]
 800e44a:	781b      	ldrb	r3, [r3, #0]
 800e44c:	2b04      	cmp	r3, #4
 800e44e:	d11a      	bne.n	800e486 <remove_chain+0x15e>
		if (pclst == 0) {	/* Does the object have no chain? */
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	2b00      	cmp	r3, #0
 800e454:	d103      	bne.n	800e45e <remove_chain+0x136>
			obj->stat = 0;		/* Change the object status 'initial' */
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	2200      	movs	r2, #0
 800e45a:	71da      	strb	r2, [r3, #7]
 800e45c:	e013      	b.n	800e486 <remove_chain+0x15e>
		} else {
			if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Did the chain get contiguous? */
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	79db      	ldrb	r3, [r3, #7]
 800e462:	2b03      	cmp	r3, #3
 800e464:	d10f      	bne.n	800e486 <remove_chain+0x15e>
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	689b      	ldr	r3, [r3, #8]
 800e46a:	687a      	ldr	r2, [r7, #4]
 800e46c:	429a      	cmp	r2, r3
 800e46e:	d30a      	bcc.n	800e486 <remove_chain+0x15e>
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	689a      	ldr	r2, [r3, #8]
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	699b      	ldr	r3, [r3, #24]
 800e478:	4413      	add	r3, r2
 800e47a:	687a      	ldr	r2, [r7, #4]
 800e47c:	429a      	cmp	r2, r3
 800e47e:	d802      	bhi.n	800e486 <remove_chain+0x15e>
				obj->stat = 2;	/* Change the object status 'contiguous' */
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	2202      	movs	r2, #2
 800e484:	71da      	strb	r2, [r3, #7]
			}
		}
	}
#endif
	return FR_OK;
 800e486:	2300      	movs	r3, #0
}
 800e488:	4618      	mov	r0, r3
 800e48a:	3728      	adds	r7, #40	; 0x28
 800e48c:	46bd      	mov	sp, r7
 800e48e:	bd80      	pop	{r7, pc}

0800e490 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800e490:	b580      	push	{r7, lr}
 800e492:	b088      	sub	sp, #32
 800e494:	af00      	add	r7, sp, #0
 800e496:	6078      	str	r0, [r7, #4]
 800e498:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800e4a0:	683b      	ldr	r3, [r7, #0]
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d10d      	bne.n	800e4c2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800e4a6:	693b      	ldr	r3, [r7, #16]
 800e4a8:	69db      	ldr	r3, [r3, #28]
 800e4aa:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800e4ac:	69bb      	ldr	r3, [r7, #24]
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d004      	beq.n	800e4bc <create_chain+0x2c>
 800e4b2:	693b      	ldr	r3, [r7, #16]
 800e4b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4b6:	69ba      	ldr	r2, [r7, #24]
 800e4b8:	429a      	cmp	r2, r3
 800e4ba:	d31b      	bcc.n	800e4f4 <create_chain+0x64>
 800e4bc:	2301      	movs	r3, #1
 800e4be:	61bb      	str	r3, [r7, #24]
 800e4c0:	e018      	b.n	800e4f4 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800e4c2:	6839      	ldr	r1, [r7, #0]
 800e4c4:	6878      	ldr	r0, [r7, #4]
 800e4c6:	f7ff fb5d 	bl	800db84 <get_fat>
 800e4ca:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	2b01      	cmp	r3, #1
 800e4d0:	d801      	bhi.n	800e4d6 <create_chain+0x46>
 800e4d2:	2301      	movs	r3, #1
 800e4d4:	e0d9      	b.n	800e68a <create_chain+0x1fa>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4dc:	d101      	bne.n	800e4e2 <create_chain+0x52>
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	e0d3      	b.n	800e68a <create_chain+0x1fa>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800e4e2:	693b      	ldr	r3, [r7, #16]
 800e4e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4e6:	68fa      	ldr	r2, [r7, #12]
 800e4e8:	429a      	cmp	r2, r3
 800e4ea:	d201      	bcs.n	800e4f0 <create_chain+0x60>
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	e0cc      	b.n	800e68a <create_chain+0x1fa>
		scl = clst;
 800e4f0:	683b      	ldr	r3, [r7, #0]
 800e4f2:	61bb      	str	r3, [r7, #24]
	}

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800e4f4:	693b      	ldr	r3, [r7, #16]
 800e4f6:	781b      	ldrb	r3, [r3, #0]
 800e4f8:	2b04      	cmp	r3, #4
 800e4fa:	d164      	bne.n	800e5c6 <create_chain+0x136>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 800e4fc:	2201      	movs	r2, #1
 800e4fe:	69b9      	ldr	r1, [r7, #24]
 800e500:	6938      	ldr	r0, [r7, #16]
 800e502:	f7ff fdb5 	bl	800e070 <find_bitmap>
 800e506:	61f8      	str	r0, [r7, #28]
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 800e508:	69fb      	ldr	r3, [r7, #28]
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d003      	beq.n	800e516 <create_chain+0x86>
 800e50e:	69fb      	ldr	r3, [r7, #28]
 800e510:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e514:	d101      	bne.n	800e51a <create_chain+0x8a>
 800e516:	69fb      	ldr	r3, [r7, #28]
 800e518:	e0b7      	b.n	800e68a <create_chain+0x1fa>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 800e51a:	2301      	movs	r3, #1
 800e51c:	2201      	movs	r2, #1
 800e51e:	69f9      	ldr	r1, [r7, #28]
 800e520:	6938      	ldr	r0, [r7, #16]
 800e522:	f7ff fe2c 	bl	800e17e <change_bitmap>
 800e526:	4603      	mov	r3, r0
 800e528:	75fb      	strb	r3, [r7, #23]
		if (res == FR_INT_ERR) return 1;
 800e52a:	7dfb      	ldrb	r3, [r7, #23]
 800e52c:	2b02      	cmp	r3, #2
 800e52e:	d101      	bne.n	800e534 <create_chain+0xa4>
 800e530:	2301      	movs	r3, #1
 800e532:	e0aa      	b.n	800e68a <create_chain+0x1fa>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 800e534:	7dfb      	ldrb	r3, [r7, #23]
 800e536:	2b01      	cmp	r3, #1
 800e538:	d102      	bne.n	800e540 <create_chain+0xb0>
 800e53a:	f04f 33ff 	mov.w	r3, #4294967295
 800e53e:	e0a4      	b.n	800e68a <create_chain+0x1fa>
		if (clst == 0) {							/* Is it a new chain? */
 800e540:	683b      	ldr	r3, [r7, #0]
 800e542:	2b00      	cmp	r3, #0
 800e544:	d103      	bne.n	800e54e <create_chain+0xbe>
			obj->stat = 2;							/* Set status 'contiguous' */
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	2202      	movs	r2, #2
 800e54a:	71da      	strb	r2, [r3, #7]
 800e54c:	e011      	b.n	800e572 <create_chain+0xe2>
		} else {									/* It is a stretched chain */
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	79db      	ldrb	r3, [r3, #7]
 800e552:	2b02      	cmp	r3, #2
 800e554:	d10d      	bne.n	800e572 <create_chain+0xe2>
 800e556:	69bb      	ldr	r3, [r7, #24]
 800e558:	3301      	adds	r3, #1
 800e55a:	69fa      	ldr	r2, [r7, #28]
 800e55c:	429a      	cmp	r2, r3
 800e55e:	d008      	beq.n	800e572 <create_chain+0xe2>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	689b      	ldr	r3, [r3, #8]
 800e564:	69ba      	ldr	r2, [r7, #24]
 800e566:	1ad2      	subs	r2, r2, r3
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	619a      	str	r2, [r3, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	2203      	movs	r2, #3
 800e570:	71da      	strb	r2, [r3, #7]
			}
		}
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	79db      	ldrb	r3, [r3, #7]
 800e576:	2b02      	cmp	r3, #2
 800e578:	d064      	beq.n	800e644 <create_chain+0x1b4>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 800e57a:	683b      	ldr	r3, [r7, #0]
 800e57c:	3301      	adds	r3, #1
 800e57e:	69fa      	ldr	r2, [r7, #28]
 800e580:	429a      	cmp	r2, r3
 800e582:	d10b      	bne.n	800e59c <create_chain+0x10c>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	69db      	ldr	r3, [r3, #28]
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d003      	beq.n	800e594 <create_chain+0x104>
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	69db      	ldr	r3, [r3, #28]
 800e590:	3301      	adds	r3, #1
 800e592:	e000      	b.n	800e596 <create_chain+0x106>
 800e594:	2302      	movs	r3, #2
 800e596:	687a      	ldr	r2, [r7, #4]
 800e598:	61d3      	str	r3, [r2, #28]
 800e59a:	e053      	b.n	800e644 <create_chain+0x1b4>
			} else {				/* New fragment */
				if (obj->n_frag == 0) obj->n_frag = 1;
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	69db      	ldr	r3, [r3, #28]
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d102      	bne.n	800e5aa <create_chain+0x11a>
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	2201      	movs	r2, #1
 800e5a8:	61da      	str	r2, [r3, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 800e5aa:	69fa      	ldr	r2, [r7, #28]
 800e5ac:	6839      	ldr	r1, [r7, #0]
 800e5ae:	6878      	ldr	r0, [r7, #4]
 800e5b0:	f7ff fe89 	bl	800e2c6 <fill_last_frag>
 800e5b4:	4603      	mov	r3, r0
 800e5b6:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) obj->n_frag = 1;
 800e5b8:	7dfb      	ldrb	r3, [r7, #23]
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d142      	bne.n	800e644 <create_chain+0x1b4>
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	2201      	movs	r2, #1
 800e5c2:	61da      	str	r2, [r3, #28]
 800e5c4:	e03e      	b.n	800e644 <create_chain+0x1b4>
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800e5c6:	69bb      	ldr	r3, [r7, #24]
 800e5c8:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800e5ca:	69fb      	ldr	r3, [r7, #28]
 800e5cc:	3301      	adds	r3, #1
 800e5ce:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800e5d0:	693b      	ldr	r3, [r7, #16]
 800e5d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5d4:	69fa      	ldr	r2, [r7, #28]
 800e5d6:	429a      	cmp	r2, r3
 800e5d8:	d307      	bcc.n	800e5ea <create_chain+0x15a>
				ncl = 2;
 800e5da:	2302      	movs	r3, #2
 800e5dc:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800e5de:	69fa      	ldr	r2, [r7, #28]
 800e5e0:	69bb      	ldr	r3, [r7, #24]
 800e5e2:	429a      	cmp	r2, r3
 800e5e4:	d901      	bls.n	800e5ea <create_chain+0x15a>
 800e5e6:	2300      	movs	r3, #0
 800e5e8:	e04f      	b.n	800e68a <create_chain+0x1fa>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800e5ea:	69f9      	ldr	r1, [r7, #28]
 800e5ec:	6878      	ldr	r0, [r7, #4]
 800e5ee:	f7ff fac9 	bl	800db84 <get_fat>
 800e5f2:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d00e      	beq.n	800e618 <create_chain+0x188>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800e5fa:	68fb      	ldr	r3, [r7, #12]
 800e5fc:	2b01      	cmp	r3, #1
 800e5fe:	d003      	beq.n	800e608 <create_chain+0x178>
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e606:	d101      	bne.n	800e60c <create_chain+0x17c>
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	e03e      	b.n	800e68a <create_chain+0x1fa>
			if (ncl == scl) return 0;		/* No free cluster */
 800e60c:	69fa      	ldr	r2, [r7, #28]
 800e60e:	69bb      	ldr	r3, [r7, #24]
 800e610:	429a      	cmp	r2, r3
 800e612:	d1da      	bne.n	800e5ca <create_chain+0x13a>
 800e614:	2300      	movs	r3, #0
 800e616:	e038      	b.n	800e68a <create_chain+0x1fa>
			if (cs == 0) break;				/* Found a free cluster */
 800e618:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800e61a:	f04f 32ff 	mov.w	r2, #4294967295
 800e61e:	69f9      	ldr	r1, [r7, #28]
 800e620:	6938      	ldr	r0, [r7, #16]
 800e622:	f7ff fc03 	bl	800de2c <put_fat>
 800e626:	4603      	mov	r3, r0
 800e628:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800e62a:	7dfb      	ldrb	r3, [r7, #23]
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d109      	bne.n	800e644 <create_chain+0x1b4>
 800e630:	683b      	ldr	r3, [r7, #0]
 800e632:	2b00      	cmp	r3, #0
 800e634:	d006      	beq.n	800e644 <create_chain+0x1b4>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800e636:	69fa      	ldr	r2, [r7, #28]
 800e638:	6839      	ldr	r1, [r7, #0]
 800e63a:	6938      	ldr	r0, [r7, #16]
 800e63c:	f7ff fbf6 	bl	800de2c <put_fat>
 800e640:	4603      	mov	r3, r0
 800e642:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800e644:	7dfb      	ldrb	r3, [r7, #23]
 800e646:	2b00      	cmp	r3, #0
 800e648:	d116      	bne.n	800e678 <create_chain+0x1e8>
		fs->last_clst = ncl;
 800e64a:	693b      	ldr	r3, [r7, #16]
 800e64c:	69fa      	ldr	r2, [r7, #28]
 800e64e:	61da      	str	r2, [r3, #28]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800e650:	693b      	ldr	r3, [r7, #16]
 800e652:	6a1a      	ldr	r2, [r3, #32]
 800e654:	693b      	ldr	r3, [r7, #16]
 800e656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e658:	3b02      	subs	r3, #2
 800e65a:	429a      	cmp	r2, r3
 800e65c:	d804      	bhi.n	800e668 <create_chain+0x1d8>
 800e65e:	693b      	ldr	r3, [r7, #16]
 800e660:	6a1b      	ldr	r3, [r3, #32]
 800e662:	1e5a      	subs	r2, r3, #1
 800e664:	693b      	ldr	r3, [r7, #16]
 800e666:	621a      	str	r2, [r3, #32]
		fs->fsi_flag |= 1;
 800e668:	693b      	ldr	r3, [r7, #16]
 800e66a:	791b      	ldrb	r3, [r3, #4]
 800e66c:	f043 0301 	orr.w	r3, r3, #1
 800e670:	b2da      	uxtb	r2, r3
 800e672:	693b      	ldr	r3, [r7, #16]
 800e674:	711a      	strb	r2, [r3, #4]
 800e676:	e007      	b.n	800e688 <create_chain+0x1f8>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800e678:	7dfb      	ldrb	r3, [r7, #23]
 800e67a:	2b01      	cmp	r3, #1
 800e67c:	d102      	bne.n	800e684 <create_chain+0x1f4>
 800e67e:	f04f 33ff 	mov.w	r3, #4294967295
 800e682:	e000      	b.n	800e686 <create_chain+0x1f6>
 800e684:	2301      	movs	r3, #1
 800e686:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800e688:	69fb      	ldr	r3, [r7, #28]
}
 800e68a:	4618      	mov	r0, r3
 800e68c:	3720      	adds	r7, #32
 800e68e:	46bd      	mov	sp, r7
 800e690:	bd80      	pop	{r7, pc}

0800e692 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800e692:	b590      	push	{r4, r7, lr}
 800e694:	b089      	sub	sp, #36	; 0x24
 800e696:	af00      	add	r7, sp, #0
 800e698:	60f8      	str	r0, [r7, #12]
 800e69a:	e9c7 2300 	strd	r2, r3, [r7]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800e69e:	68fb      	ldr	r3, [r7, #12]
 800e6a0:	681b      	ldr	r3, [r3, #0]
 800e6a2:	617b      	str	r3, [r7, #20]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e6a8:	3304      	adds	r3, #4
 800e6aa:	61bb      	str	r3, [r7, #24]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800e6ac:	697b      	ldr	r3, [r7, #20]
 800e6ae:	899b      	ldrh	r3, [r3, #12]
 800e6b0:	b29b      	uxth	r3, r3
 800e6b2:	f04f 0400 	mov.w	r4, #0
 800e6b6:	461a      	mov	r2, r3
 800e6b8:	4623      	mov	r3, r4
 800e6ba:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e6be:	f7f1 fdbf 	bl	8000240 <__aeabi_uldivmod>
 800e6c2:	4603      	mov	r3, r0
 800e6c4:	460c      	mov	r4, r1
 800e6c6:	4618      	mov	r0, r3
 800e6c8:	4621      	mov	r1, r4
 800e6ca:	697b      	ldr	r3, [r7, #20]
 800e6cc:	895b      	ldrh	r3, [r3, #10]
 800e6ce:	b29b      	uxth	r3, r3
 800e6d0:	f04f 0400 	mov.w	r4, #0
 800e6d4:	461a      	mov	r2, r3
 800e6d6:	4623      	mov	r3, r4
 800e6d8:	f7f1 fdb2 	bl	8000240 <__aeabi_uldivmod>
 800e6dc:	4603      	mov	r3, r0
 800e6de:	460c      	mov	r4, r1
 800e6e0:	61fb      	str	r3, [r7, #28]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800e6e2:	69bb      	ldr	r3, [r7, #24]
 800e6e4:	1d1a      	adds	r2, r3, #4
 800e6e6:	61ba      	str	r2, [r7, #24]
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	613b      	str	r3, [r7, #16]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800e6ec:	693b      	ldr	r3, [r7, #16]
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d101      	bne.n	800e6f6 <clmt_clust+0x64>
 800e6f2:	2300      	movs	r3, #0
 800e6f4:	e010      	b.n	800e718 <clmt_clust+0x86>
		if (cl < ncl) break;	/* In this fragment? */
 800e6f6:	69fa      	ldr	r2, [r7, #28]
 800e6f8:	693b      	ldr	r3, [r7, #16]
 800e6fa:	429a      	cmp	r2, r3
 800e6fc:	d307      	bcc.n	800e70e <clmt_clust+0x7c>
		cl -= ncl; tbl++;		/* Next fragment */
 800e6fe:	69fa      	ldr	r2, [r7, #28]
 800e700:	693b      	ldr	r3, [r7, #16]
 800e702:	1ad3      	subs	r3, r2, r3
 800e704:	61fb      	str	r3, [r7, #28]
 800e706:	69bb      	ldr	r3, [r7, #24]
 800e708:	3304      	adds	r3, #4
 800e70a:	61bb      	str	r3, [r7, #24]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800e70c:	e7e9      	b.n	800e6e2 <clmt_clust+0x50>
		if (cl < ncl) break;	/* In this fragment? */
 800e70e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800e710:	69bb      	ldr	r3, [r7, #24]
 800e712:	681a      	ldr	r2, [r3, #0]
 800e714:	69fb      	ldr	r3, [r7, #28]
 800e716:	4413      	add	r3, r2
}
 800e718:	4618      	mov	r0, r3
 800e71a:	3724      	adds	r7, #36	; 0x24
 800e71c:	46bd      	mov	sp, r7
 800e71e:	bd90      	pop	{r4, r7, pc}

0800e720 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800e720:	b580      	push	{r7, lr}
 800e722:	b086      	sub	sp, #24
 800e724:	af00      	add	r7, sp, #0
 800e726:	6078      	str	r0, [r7, #4]
 800e728:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	681b      	ldr	r3, [r3, #0]
 800e72e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800e730:	693b      	ldr	r3, [r7, #16]
 800e732:	781b      	ldrb	r3, [r3, #0]
 800e734:	2b04      	cmp	r3, #4
 800e736:	d102      	bne.n	800e73e <dir_sdi+0x1e>
 800e738:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e73c:	e001      	b.n	800e742 <dir_sdi+0x22>
 800e73e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800e742:	683b      	ldr	r3, [r7, #0]
 800e744:	429a      	cmp	r2, r3
 800e746:	d904      	bls.n	800e752 <dir_sdi+0x32>
 800e748:	683b      	ldr	r3, [r7, #0]
 800e74a:	f003 031f 	and.w	r3, r3, #31
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d001      	beq.n	800e756 <dir_sdi+0x36>
		return FR_INT_ERR;
 800e752:	2302      	movs	r3, #2
 800e754:	e074      	b.n	800e840 <dir_sdi+0x120>
	}
	dp->dptr = ofs;				/* Set current offset */
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	683a      	ldr	r2, [r7, #0]
 800e75a:	631a      	str	r2, [r3, #48]	; 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	689b      	ldr	r3, [r3, #8]
 800e760:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800e762:	697b      	ldr	r3, [r7, #20]
 800e764:	2b00      	cmp	r3, #0
 800e766:	d109      	bne.n	800e77c <dir_sdi+0x5c>
 800e768:	693b      	ldr	r3, [r7, #16]
 800e76a:	781b      	ldrb	r3, [r3, #0]
 800e76c:	2b02      	cmp	r3, #2
 800e76e:	d905      	bls.n	800e77c <dir_sdi+0x5c>
		clst = fs->dirbase;
 800e770:	693b      	ldr	r3, [r7, #16]
 800e772:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e774:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	2200      	movs	r2, #0
 800e77a:	71da      	strb	r2, [r3, #7]
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800e77c:	697b      	ldr	r3, [r7, #20]
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d10c      	bne.n	800e79c <dir_sdi+0x7c>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800e782:	683b      	ldr	r3, [r7, #0]
 800e784:	095b      	lsrs	r3, r3, #5
 800e786:	693a      	ldr	r2, [r7, #16]
 800e788:	8912      	ldrh	r2, [r2, #8]
 800e78a:	4293      	cmp	r3, r2
 800e78c:	d301      	bcc.n	800e792 <dir_sdi+0x72>
 800e78e:	2302      	movs	r3, #2
 800e790:	e056      	b.n	800e840 <dir_sdi+0x120>
		dp->sect = fs->dirbase;
 800e792:	693b      	ldr	r3, [r7, #16]
 800e794:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	639a      	str	r2, [r3, #56]	; 0x38
 800e79a:	e02d      	b.n	800e7f8 <dir_sdi+0xd8>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800e79c:	693b      	ldr	r3, [r7, #16]
 800e79e:	895b      	ldrh	r3, [r3, #10]
 800e7a0:	461a      	mov	r2, r3
 800e7a2:	693b      	ldr	r3, [r7, #16]
 800e7a4:	899b      	ldrh	r3, [r3, #12]
 800e7a6:	fb03 f302 	mul.w	r3, r3, r2
 800e7aa:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800e7ac:	e019      	b.n	800e7e2 <dir_sdi+0xc2>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	6979      	ldr	r1, [r7, #20]
 800e7b2:	4618      	mov	r0, r3
 800e7b4:	f7ff f9e6 	bl	800db84 <get_fat>
 800e7b8:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e7ba:	697b      	ldr	r3, [r7, #20]
 800e7bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7c0:	d101      	bne.n	800e7c6 <dir_sdi+0xa6>
 800e7c2:	2301      	movs	r3, #1
 800e7c4:	e03c      	b.n	800e840 <dir_sdi+0x120>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800e7c6:	697b      	ldr	r3, [r7, #20]
 800e7c8:	2b01      	cmp	r3, #1
 800e7ca:	d904      	bls.n	800e7d6 <dir_sdi+0xb6>
 800e7cc:	693b      	ldr	r3, [r7, #16]
 800e7ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7d0:	697a      	ldr	r2, [r7, #20]
 800e7d2:	429a      	cmp	r2, r3
 800e7d4:	d301      	bcc.n	800e7da <dir_sdi+0xba>
 800e7d6:	2302      	movs	r3, #2
 800e7d8:	e032      	b.n	800e840 <dir_sdi+0x120>
			ofs -= csz;
 800e7da:	683a      	ldr	r2, [r7, #0]
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	1ad3      	subs	r3, r2, r3
 800e7e0:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800e7e2:	683a      	ldr	r2, [r7, #0]
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	429a      	cmp	r2, r3
 800e7e8:	d2e1      	bcs.n	800e7ae <dir_sdi+0x8e>
		}
		dp->sect = clust2sect(fs, clst);
 800e7ea:	6979      	ldr	r1, [r7, #20]
 800e7ec:	6938      	ldr	r0, [r7, #16]
 800e7ee:	f7ff f9a9 	bl	800db44 <clust2sect>
 800e7f2:	4602      	mov	r2, r0
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	639a      	str	r2, [r3, #56]	; 0x38
	}
	dp->clust = clst;					/* Current cluster# */
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	697a      	ldr	r2, [r7, #20]
 800e7fc:	635a      	str	r2, [r3, #52]	; 0x34
	if (!dp->sect) return FR_INT_ERR;
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e802:	2b00      	cmp	r3, #0
 800e804:	d101      	bne.n	800e80a <dir_sdi+0xea>
 800e806:	2302      	movs	r3, #2
 800e808:	e01a      	b.n	800e840 <dir_sdi+0x120>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e80e:	693b      	ldr	r3, [r7, #16]
 800e810:	899b      	ldrh	r3, [r3, #12]
 800e812:	4619      	mov	r1, r3
 800e814:	683b      	ldr	r3, [r7, #0]
 800e816:	fbb3 f3f1 	udiv	r3, r3, r1
 800e81a:	441a      	add	r2, r3
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	639a      	str	r2, [r3, #56]	; 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800e820:	693b      	ldr	r3, [r7, #16]
 800e822:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800e826:	693b      	ldr	r3, [r7, #16]
 800e828:	899b      	ldrh	r3, [r3, #12]
 800e82a:	461a      	mov	r2, r3
 800e82c:	683b      	ldr	r3, [r7, #0]
 800e82e:	fbb3 f0f2 	udiv	r0, r3, r2
 800e832:	fb02 f200 	mul.w	r2, r2, r0
 800e836:	1a9b      	subs	r3, r3, r2
 800e838:	18ca      	adds	r2, r1, r3
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 800e83e:	2300      	movs	r3, #0
}
 800e840:	4618      	mov	r0, r3
 800e842:	3718      	adds	r7, #24
 800e844:	46bd      	mov	sp, r7
 800e846:	bd80      	pop	{r7, pc}

0800e848 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800e848:	b580      	push	{r7, lr}
 800e84a:	b086      	sub	sp, #24
 800e84c:	af00      	add	r7, sp, #0
 800e84e:	6078      	str	r0, [r7, #4]
 800e850:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e85c:	3320      	adds	r3, #32
 800e85e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e864:	2b00      	cmp	r3, #0
 800e866:	d00b      	beq.n	800e880 <dir_next+0x38>
 800e868:	68fb      	ldr	r3, [r7, #12]
 800e86a:	781b      	ldrb	r3, [r3, #0]
 800e86c:	2b04      	cmp	r3, #4
 800e86e:	d102      	bne.n	800e876 <dir_next+0x2e>
 800e870:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e874:	e001      	b.n	800e87a <dir_next+0x32>
 800e876:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800e87a:	68bb      	ldr	r3, [r7, #8]
 800e87c:	429a      	cmp	r2, r3
 800e87e:	d801      	bhi.n	800e884 <dir_next+0x3c>
 800e880:	2304      	movs	r3, #4
 800e882:	e0c3      	b.n	800ea0c <dir_next+0x1c4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800e884:	68fb      	ldr	r3, [r7, #12]
 800e886:	899b      	ldrh	r3, [r3, #12]
 800e888:	461a      	mov	r2, r3
 800e88a:	68bb      	ldr	r3, [r7, #8]
 800e88c:	fbb3 f1f2 	udiv	r1, r3, r2
 800e890:	fb02 f201 	mul.w	r2, r2, r1
 800e894:	1a9b      	subs	r3, r3, r2
 800e896:	2b00      	cmp	r3, #0
 800e898:	f040 80a5 	bne.w	800e9e6 <dir_next+0x19e>
		dp->sect++;				/* Next sector */
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e8a0:	1c5a      	adds	r2, r3, #1
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	639a      	str	r2, [r3, #56]	; 0x38

		if (!dp->clust) {		/* Static table */
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d10b      	bne.n	800e8c6 <dir_next+0x7e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800e8ae:	68bb      	ldr	r3, [r7, #8]
 800e8b0:	095b      	lsrs	r3, r3, #5
 800e8b2:	68fa      	ldr	r2, [r7, #12]
 800e8b4:	8912      	ldrh	r2, [r2, #8]
 800e8b6:	4293      	cmp	r3, r2
 800e8b8:	f0c0 8095 	bcc.w	800e9e6 <dir_next+0x19e>
				dp->sect = 0; return FR_NO_FILE;
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	2200      	movs	r2, #0
 800e8c0:	639a      	str	r2, [r3, #56]	; 0x38
 800e8c2:	2304      	movs	r3, #4
 800e8c4:	e0a2      	b.n	800ea0c <dir_next+0x1c4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	899b      	ldrh	r3, [r3, #12]
 800e8ca:	461a      	mov	r2, r3
 800e8cc:	68bb      	ldr	r3, [r7, #8]
 800e8ce:	fbb3 f3f2 	udiv	r3, r3, r2
 800e8d2:	68fa      	ldr	r2, [r7, #12]
 800e8d4:	8952      	ldrh	r2, [r2, #10]
 800e8d6:	3a01      	subs	r2, #1
 800e8d8:	4013      	ands	r3, r2
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	f040 8083 	bne.w	800e9e6 <dir_next+0x19e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800e8e0:	687a      	ldr	r2, [r7, #4]
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e8e6:	4619      	mov	r1, r3
 800e8e8:	4610      	mov	r0, r2
 800e8ea:	f7ff f94b 	bl	800db84 <get_fat>
 800e8ee:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800e8f0:	697b      	ldr	r3, [r7, #20]
 800e8f2:	2b01      	cmp	r3, #1
 800e8f4:	d801      	bhi.n	800e8fa <dir_next+0xb2>
 800e8f6:	2302      	movs	r3, #2
 800e8f8:	e088      	b.n	800ea0c <dir_next+0x1c4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800e8fa:	697b      	ldr	r3, [r7, #20]
 800e8fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e900:	d101      	bne.n	800e906 <dir_next+0xbe>
 800e902:	2301      	movs	r3, #1
 800e904:	e082      	b.n	800ea0c <dir_next+0x1c4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800e906:	68fb      	ldr	r3, [r7, #12]
 800e908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e90a:	697a      	ldr	r2, [r7, #20]
 800e90c:	429a      	cmp	r2, r3
 800e90e:	d360      	bcc.n	800e9d2 <dir_next+0x18a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800e910:	683b      	ldr	r3, [r7, #0]
 800e912:	2b00      	cmp	r3, #0
 800e914:	d104      	bne.n	800e920 <dir_next+0xd8>
						dp->sect = 0; return FR_NO_FILE;
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	2200      	movs	r2, #0
 800e91a:	639a      	str	r2, [r3, #56]	; 0x38
 800e91c:	2304      	movs	r3, #4
 800e91e:	e075      	b.n	800ea0c <dir_next+0x1c4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800e920:	687a      	ldr	r2, [r7, #4]
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e926:	4619      	mov	r1, r3
 800e928:	4610      	mov	r0, r2
 800e92a:	f7ff fdb1 	bl	800e490 <create_chain>
 800e92e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800e930:	697b      	ldr	r3, [r7, #20]
 800e932:	2b00      	cmp	r3, #0
 800e934:	d101      	bne.n	800e93a <dir_next+0xf2>
 800e936:	2307      	movs	r3, #7
 800e938:	e068      	b.n	800ea0c <dir_next+0x1c4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800e93a:	697b      	ldr	r3, [r7, #20]
 800e93c:	2b01      	cmp	r3, #1
 800e93e:	d101      	bne.n	800e944 <dir_next+0xfc>
 800e940:	2302      	movs	r3, #2
 800e942:	e063      	b.n	800ea0c <dir_next+0x1c4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e944:	697b      	ldr	r3, [r7, #20]
 800e946:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e94a:	d101      	bne.n	800e950 <dir_next+0x108>
 800e94c:	2301      	movs	r3, #1
 800e94e:	e05d      	b.n	800ea0c <dir_next+0x1c4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	79db      	ldrb	r3, [r3, #7]
 800e954:	f043 0304 	orr.w	r3, r3, #4
 800e958:	b2da      	uxtb	r2, r3
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	71da      	strb	r2, [r3, #7]
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800e95e:	68f8      	ldr	r0, [r7, #12]
 800e960:	f7ff f80e 	bl	800d980 <sync_window>
 800e964:	4603      	mov	r3, r0
 800e966:	2b00      	cmp	r3, #0
 800e968:	d001      	beq.n	800e96e <dir_next+0x126>
 800e96a:	2301      	movs	r3, #1
 800e96c:	e04e      	b.n	800ea0c <dir_next+0x1c4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800e96e:	68fb      	ldr	r3, [r7, #12]
 800e970:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	899b      	ldrh	r3, [r3, #12]
 800e978:	461a      	mov	r2, r3
 800e97a:	2100      	movs	r1, #0
 800e97c:	f7fe fe07 	bl	800d58e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800e980:	2300      	movs	r3, #0
 800e982:	613b      	str	r3, [r7, #16]
 800e984:	6979      	ldr	r1, [r7, #20]
 800e986:	68f8      	ldr	r0, [r7, #12]
 800e988:	f7ff f8dc 	bl	800db44 <clust2sect>
 800e98c:	4602      	mov	r2, r0
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	63da      	str	r2, [r3, #60]	; 0x3c
 800e992:	e012      	b.n	800e9ba <dir_next+0x172>
						fs->wflag = 1;
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	2201      	movs	r2, #1
 800e998:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800e99a:	68f8      	ldr	r0, [r7, #12]
 800e99c:	f7fe fff0 	bl	800d980 <sync_window>
 800e9a0:	4603      	mov	r3, r0
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d001      	beq.n	800e9aa <dir_next+0x162>
 800e9a6:	2301      	movs	r3, #1
 800e9a8:	e030      	b.n	800ea0c <dir_next+0x1c4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800e9aa:	693b      	ldr	r3, [r7, #16]
 800e9ac:	3301      	adds	r3, #1
 800e9ae:	613b      	str	r3, [r7, #16]
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e9b4:	1c5a      	adds	r2, r3, #1
 800e9b6:	68fb      	ldr	r3, [r7, #12]
 800e9b8:	63da      	str	r2, [r3, #60]	; 0x3c
 800e9ba:	68fb      	ldr	r3, [r7, #12]
 800e9bc:	895b      	ldrh	r3, [r3, #10]
 800e9be:	461a      	mov	r2, r3
 800e9c0:	693b      	ldr	r3, [r7, #16]
 800e9c2:	4293      	cmp	r3, r2
 800e9c4:	d3e6      	bcc.n	800e994 <dir_next+0x14c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800e9c6:	68fb      	ldr	r3, [r7, #12]
 800e9c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e9ca:	693b      	ldr	r3, [r7, #16]
 800e9cc:	1ad2      	subs	r2, r2, r3
 800e9ce:	68fb      	ldr	r3, [r7, #12]
 800e9d0:	63da      	str	r2, [r3, #60]	; 0x3c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	697a      	ldr	r2, [r7, #20]
 800e9d6:	635a      	str	r2, [r3, #52]	; 0x34
				dp->sect = clust2sect(fs, clst);
 800e9d8:	6979      	ldr	r1, [r7, #20]
 800e9da:	68f8      	ldr	r0, [r7, #12]
 800e9dc:	f7ff f8b2 	bl	800db44 <clust2sect>
 800e9e0:	4602      	mov	r2, r0
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	639a      	str	r2, [r3, #56]	; 0x38
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	68ba      	ldr	r2, [r7, #8]
 800e9ea:	631a      	str	r2, [r3, #48]	; 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800e9ec:	68fb      	ldr	r3, [r7, #12]
 800e9ee:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800e9f2:	68fb      	ldr	r3, [r7, #12]
 800e9f4:	899b      	ldrh	r3, [r3, #12]
 800e9f6:	461a      	mov	r2, r3
 800e9f8:	68bb      	ldr	r3, [r7, #8]
 800e9fa:	fbb3 f0f2 	udiv	r0, r3, r2
 800e9fe:	fb02 f200 	mul.w	r2, r2, r0
 800ea02:	1a9b      	subs	r3, r3, r2
 800ea04:	18ca      	adds	r2, r1, r3
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 800ea0a:	2300      	movs	r3, #0
}
 800ea0c:	4618      	mov	r0, r3
 800ea0e:	3718      	adds	r7, #24
 800ea10:	46bd      	mov	sp, r7
 800ea12:	bd80      	pop	{r7, pc}

0800ea14 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800ea14:	b580      	push	{r7, lr}
 800ea16:	b086      	sub	sp, #24
 800ea18:	af00      	add	r7, sp, #0
 800ea1a:	6078      	str	r0, [r7, #4]
 800ea1c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	681b      	ldr	r3, [r3, #0]
 800ea22:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800ea24:	2100      	movs	r1, #0
 800ea26:	6878      	ldr	r0, [r7, #4]
 800ea28:	f7ff fe7a 	bl	800e720 <dir_sdi>
 800ea2c:	4603      	mov	r3, r0
 800ea2e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ea30:	7dfb      	ldrb	r3, [r7, #23]
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d140      	bne.n	800eab8 <dir_alloc+0xa4>
		n = 0;
 800ea36:	2300      	movs	r3, #0
 800ea38:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea3e:	4619      	mov	r1, r3
 800ea40:	68f8      	ldr	r0, [r7, #12]
 800ea42:	f7fe ffe1 	bl	800da08 <move_window>
 800ea46:	4603      	mov	r3, r0
 800ea48:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ea4a:	7dfb      	ldrb	r3, [r7, #23]
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	d132      	bne.n	800eab6 <dir_alloc+0xa2>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
 800ea50:	68fb      	ldr	r3, [r7, #12]
 800ea52:	781b      	ldrb	r3, [r3, #0]
 800ea54:	2b04      	cmp	r3, #4
 800ea56:	d108      	bne.n	800ea6a <dir_alloc+0x56>
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea5c:	781b      	ldrb	r3, [r3, #0]
 800ea5e:	b25b      	sxtb	r3, r3
 800ea60:	43db      	mvns	r3, r3
 800ea62:	b2db      	uxtb	r3, r3
 800ea64:	09db      	lsrs	r3, r3, #7
 800ea66:	b2db      	uxtb	r3, r3
 800ea68:	e00f      	b.n	800ea8a <dir_alloc+0x76>
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea6e:	781b      	ldrb	r3, [r3, #0]
 800ea70:	2be5      	cmp	r3, #229	; 0xe5
 800ea72:	d004      	beq.n	800ea7e <dir_alloc+0x6a>
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea78:	781b      	ldrb	r3, [r3, #0]
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d101      	bne.n	800ea82 <dir_alloc+0x6e>
 800ea7e:	2301      	movs	r3, #1
 800ea80:	e000      	b.n	800ea84 <dir_alloc+0x70>
 800ea82:	2300      	movs	r3, #0
 800ea84:	f003 0301 	and.w	r3, r3, #1
 800ea88:	b2db      	uxtb	r3, r3
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d007      	beq.n	800ea9e <dir_alloc+0x8a>
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800ea8e:	693b      	ldr	r3, [r7, #16]
 800ea90:	3301      	adds	r3, #1
 800ea92:	613b      	str	r3, [r7, #16]
 800ea94:	693a      	ldr	r2, [r7, #16]
 800ea96:	683b      	ldr	r3, [r7, #0]
 800ea98:	429a      	cmp	r2, r3
 800ea9a:	d102      	bne.n	800eaa2 <dir_alloc+0x8e>
 800ea9c:	e00c      	b.n	800eab8 <dir_alloc+0xa4>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800ea9e:	2300      	movs	r3, #0
 800eaa0:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800eaa2:	2101      	movs	r1, #1
 800eaa4:	6878      	ldr	r0, [r7, #4]
 800eaa6:	f7ff fecf 	bl	800e848 <dir_next>
 800eaaa:	4603      	mov	r3, r0
 800eaac:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800eaae:	7dfb      	ldrb	r3, [r7, #23]
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d0c2      	beq.n	800ea3a <dir_alloc+0x26>
 800eab4:	e000      	b.n	800eab8 <dir_alloc+0xa4>
			if (res != FR_OK) break;
 800eab6:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800eab8:	7dfb      	ldrb	r3, [r7, #23]
 800eaba:	2b04      	cmp	r3, #4
 800eabc:	d101      	bne.n	800eac2 <dir_alloc+0xae>
 800eabe:	2307      	movs	r3, #7
 800eac0:	75fb      	strb	r3, [r7, #23]
	return res;
 800eac2:	7dfb      	ldrb	r3, [r7, #23]
}
 800eac4:	4618      	mov	r0, r3
 800eac6:	3718      	adds	r7, #24
 800eac8:	46bd      	mov	sp, r7
 800eaca:	bd80      	pop	{r7, pc}

0800eacc <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800eacc:	b580      	push	{r7, lr}
 800eace:	b084      	sub	sp, #16
 800ead0:	af00      	add	r7, sp, #0
 800ead2:	6078      	str	r0, [r7, #4]
 800ead4:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800ead6:	683b      	ldr	r3, [r7, #0]
 800ead8:	331a      	adds	r3, #26
 800eada:	4618      	mov	r0, r3
 800eadc:	f7fe fb70 	bl	800d1c0 <ld_word>
 800eae0:	4603      	mov	r3, r0
 800eae2:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	781b      	ldrb	r3, [r3, #0]
 800eae8:	2b03      	cmp	r3, #3
 800eaea:	d109      	bne.n	800eb00 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800eaec:	683b      	ldr	r3, [r7, #0]
 800eaee:	3314      	adds	r3, #20
 800eaf0:	4618      	mov	r0, r3
 800eaf2:	f7fe fb65 	bl	800d1c0 <ld_word>
 800eaf6:	4603      	mov	r3, r0
 800eaf8:	041b      	lsls	r3, r3, #16
 800eafa:	68fa      	ldr	r2, [r7, #12]
 800eafc:	4313      	orrs	r3, r2
 800eafe:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800eb00:	68fb      	ldr	r3, [r7, #12]
}
 800eb02:	4618      	mov	r0, r3
 800eb04:	3710      	adds	r7, #16
 800eb06:	46bd      	mov	sp, r7
 800eb08:	bd80      	pop	{r7, pc}

0800eb0a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800eb0a:	b580      	push	{r7, lr}
 800eb0c:	b084      	sub	sp, #16
 800eb0e:	af00      	add	r7, sp, #0
 800eb10:	60f8      	str	r0, [r7, #12]
 800eb12:	60b9      	str	r1, [r7, #8]
 800eb14:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800eb16:	68bb      	ldr	r3, [r7, #8]
 800eb18:	331a      	adds	r3, #26
 800eb1a:	687a      	ldr	r2, [r7, #4]
 800eb1c:	b292      	uxth	r2, r2
 800eb1e:	4611      	mov	r1, r2
 800eb20:	4618      	mov	r0, r3
 800eb22:	f7fe fc45 	bl	800d3b0 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800eb26:	68fb      	ldr	r3, [r7, #12]
 800eb28:	781b      	ldrb	r3, [r3, #0]
 800eb2a:	2b03      	cmp	r3, #3
 800eb2c:	d109      	bne.n	800eb42 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800eb2e:	68bb      	ldr	r3, [r7, #8]
 800eb30:	f103 0214 	add.w	r2, r3, #20
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	0c1b      	lsrs	r3, r3, #16
 800eb38:	b29b      	uxth	r3, r3
 800eb3a:	4619      	mov	r1, r3
 800eb3c:	4610      	mov	r0, r2
 800eb3e:	f7fe fc37 	bl	800d3b0 <st_word>
	}
}
 800eb42:	bf00      	nop
 800eb44:	3710      	adds	r7, #16
 800eb46:	46bd      	mov	sp, r7
 800eb48:	bd80      	pop	{r7, pc}
	...

0800eb4c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800eb4c:	b590      	push	{r4, r7, lr}
 800eb4e:	b087      	sub	sp, #28
 800eb50:	af00      	add	r7, sp, #0
 800eb52:	6078      	str	r0, [r7, #4]
 800eb54:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800eb56:	683b      	ldr	r3, [r7, #0]
 800eb58:	331a      	adds	r3, #26
 800eb5a:	4618      	mov	r0, r3
 800eb5c:	f7fe fb30 	bl	800d1c0 <ld_word>
 800eb60:	4603      	mov	r3, r0
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d001      	beq.n	800eb6a <cmp_lfn+0x1e>
 800eb66:	2300      	movs	r3, #0
 800eb68:	e059      	b.n	800ec1e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800eb6a:	683b      	ldr	r3, [r7, #0]
 800eb6c:	781b      	ldrb	r3, [r3, #0]
 800eb6e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800eb72:	1e5a      	subs	r2, r3, #1
 800eb74:	4613      	mov	r3, r2
 800eb76:	005b      	lsls	r3, r3, #1
 800eb78:	4413      	add	r3, r2
 800eb7a:	009b      	lsls	r3, r3, #2
 800eb7c:	4413      	add	r3, r2
 800eb7e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800eb80:	2301      	movs	r3, #1
 800eb82:	81fb      	strh	r3, [r7, #14]
 800eb84:	2300      	movs	r3, #0
 800eb86:	613b      	str	r3, [r7, #16]
 800eb88:	e033      	b.n	800ebf2 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800eb8a:	4a27      	ldr	r2, [pc, #156]	; (800ec28 <cmp_lfn+0xdc>)
 800eb8c:	693b      	ldr	r3, [r7, #16]
 800eb8e:	4413      	add	r3, r2
 800eb90:	781b      	ldrb	r3, [r3, #0]
 800eb92:	461a      	mov	r2, r3
 800eb94:	683b      	ldr	r3, [r7, #0]
 800eb96:	4413      	add	r3, r2
 800eb98:	4618      	mov	r0, r3
 800eb9a:	f7fe fb11 	bl	800d1c0 <ld_word>
 800eb9e:	4603      	mov	r3, r0
 800eba0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800eba2:	89fb      	ldrh	r3, [r7, #14]
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d01a      	beq.n	800ebde <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800eba8:	697b      	ldr	r3, [r7, #20]
 800ebaa:	2bfe      	cmp	r3, #254	; 0xfe
 800ebac:	d812      	bhi.n	800ebd4 <cmp_lfn+0x88>
 800ebae:	89bb      	ldrh	r3, [r7, #12]
 800ebb0:	4618      	mov	r0, r3
 800ebb2:	f002 fdb7 	bl	8011724 <ff_wtoupper>
 800ebb6:	4603      	mov	r3, r0
 800ebb8:	461c      	mov	r4, r3
 800ebba:	697b      	ldr	r3, [r7, #20]
 800ebbc:	1c5a      	adds	r2, r3, #1
 800ebbe:	617a      	str	r2, [r7, #20]
 800ebc0:	005b      	lsls	r3, r3, #1
 800ebc2:	687a      	ldr	r2, [r7, #4]
 800ebc4:	4413      	add	r3, r2
 800ebc6:	881b      	ldrh	r3, [r3, #0]
 800ebc8:	4618      	mov	r0, r3
 800ebca:	f002 fdab 	bl	8011724 <ff_wtoupper>
 800ebce:	4603      	mov	r3, r0
 800ebd0:	429c      	cmp	r4, r3
 800ebd2:	d001      	beq.n	800ebd8 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800ebd4:	2300      	movs	r3, #0
 800ebd6:	e022      	b.n	800ec1e <cmp_lfn+0xd2>
			}
			wc = uc;
 800ebd8:	89bb      	ldrh	r3, [r7, #12]
 800ebda:	81fb      	strh	r3, [r7, #14]
 800ebdc:	e006      	b.n	800ebec <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800ebde:	89bb      	ldrh	r3, [r7, #12]
 800ebe0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ebe4:	4293      	cmp	r3, r2
 800ebe6:	d001      	beq.n	800ebec <cmp_lfn+0xa0>
 800ebe8:	2300      	movs	r3, #0
 800ebea:	e018      	b.n	800ec1e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800ebec:	693b      	ldr	r3, [r7, #16]
 800ebee:	3301      	adds	r3, #1
 800ebf0:	613b      	str	r3, [r7, #16]
 800ebf2:	693b      	ldr	r3, [r7, #16]
 800ebf4:	2b0c      	cmp	r3, #12
 800ebf6:	d9c8      	bls.n	800eb8a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800ebf8:	683b      	ldr	r3, [r7, #0]
 800ebfa:	781b      	ldrb	r3, [r3, #0]
 800ebfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d00b      	beq.n	800ec1c <cmp_lfn+0xd0>
 800ec04:	89fb      	ldrh	r3, [r7, #14]
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d008      	beq.n	800ec1c <cmp_lfn+0xd0>
 800ec0a:	697b      	ldr	r3, [r7, #20]
 800ec0c:	005b      	lsls	r3, r3, #1
 800ec0e:	687a      	ldr	r2, [r7, #4]
 800ec10:	4413      	add	r3, r2
 800ec12:	881b      	ldrh	r3, [r3, #0]
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d001      	beq.n	800ec1c <cmp_lfn+0xd0>
 800ec18:	2300      	movs	r3, #0
 800ec1a:	e000      	b.n	800ec1e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800ec1c:	2301      	movs	r3, #1
}
 800ec1e:	4618      	mov	r0, r3
 800ec20:	371c      	adds	r7, #28
 800ec22:	46bd      	mov	sp, r7
 800ec24:	bd90      	pop	{r4, r7, pc}
 800ec26:	bf00      	nop
 800ec28:	08016190 	.word	0x08016190

0800ec2c <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800ec2c:	b580      	push	{r7, lr}
 800ec2e:	b086      	sub	sp, #24
 800ec30:	af00      	add	r7, sp, #0
 800ec32:	6078      	str	r0, [r7, #4]
 800ec34:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800ec36:	683b      	ldr	r3, [r7, #0]
 800ec38:	331a      	adds	r3, #26
 800ec3a:	4618      	mov	r0, r3
 800ec3c:	f7fe fac0 	bl	800d1c0 <ld_word>
 800ec40:	4603      	mov	r3, r0
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d001      	beq.n	800ec4a <pick_lfn+0x1e>
 800ec46:	2300      	movs	r3, #0
 800ec48:	e04d      	b.n	800ece6 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800ec4a:	683b      	ldr	r3, [r7, #0]
 800ec4c:	781b      	ldrb	r3, [r3, #0]
 800ec4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ec52:	1e5a      	subs	r2, r3, #1
 800ec54:	4613      	mov	r3, r2
 800ec56:	005b      	lsls	r3, r3, #1
 800ec58:	4413      	add	r3, r2
 800ec5a:	009b      	lsls	r3, r3, #2
 800ec5c:	4413      	add	r3, r2
 800ec5e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800ec60:	2301      	movs	r3, #1
 800ec62:	81fb      	strh	r3, [r7, #14]
 800ec64:	2300      	movs	r3, #0
 800ec66:	613b      	str	r3, [r7, #16]
 800ec68:	e028      	b.n	800ecbc <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800ec6a:	4a21      	ldr	r2, [pc, #132]	; (800ecf0 <pick_lfn+0xc4>)
 800ec6c:	693b      	ldr	r3, [r7, #16]
 800ec6e:	4413      	add	r3, r2
 800ec70:	781b      	ldrb	r3, [r3, #0]
 800ec72:	461a      	mov	r2, r3
 800ec74:	683b      	ldr	r3, [r7, #0]
 800ec76:	4413      	add	r3, r2
 800ec78:	4618      	mov	r0, r3
 800ec7a:	f7fe faa1 	bl	800d1c0 <ld_word>
 800ec7e:	4603      	mov	r3, r0
 800ec80:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800ec82:	89fb      	ldrh	r3, [r7, #14]
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	d00f      	beq.n	800eca8 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800ec88:	697b      	ldr	r3, [r7, #20]
 800ec8a:	2bfe      	cmp	r3, #254	; 0xfe
 800ec8c:	d901      	bls.n	800ec92 <pick_lfn+0x66>
 800ec8e:	2300      	movs	r3, #0
 800ec90:	e029      	b.n	800ece6 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800ec92:	89bb      	ldrh	r3, [r7, #12]
 800ec94:	81fb      	strh	r3, [r7, #14]
 800ec96:	697b      	ldr	r3, [r7, #20]
 800ec98:	1c5a      	adds	r2, r3, #1
 800ec9a:	617a      	str	r2, [r7, #20]
 800ec9c:	005b      	lsls	r3, r3, #1
 800ec9e:	687a      	ldr	r2, [r7, #4]
 800eca0:	4413      	add	r3, r2
 800eca2:	89fa      	ldrh	r2, [r7, #14]
 800eca4:	801a      	strh	r2, [r3, #0]
 800eca6:	e006      	b.n	800ecb6 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800eca8:	89bb      	ldrh	r3, [r7, #12]
 800ecaa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ecae:	4293      	cmp	r3, r2
 800ecb0:	d001      	beq.n	800ecb6 <pick_lfn+0x8a>
 800ecb2:	2300      	movs	r3, #0
 800ecb4:	e017      	b.n	800ece6 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800ecb6:	693b      	ldr	r3, [r7, #16]
 800ecb8:	3301      	adds	r3, #1
 800ecba:	613b      	str	r3, [r7, #16]
 800ecbc:	693b      	ldr	r3, [r7, #16]
 800ecbe:	2b0c      	cmp	r3, #12
 800ecc0:	d9d3      	bls.n	800ec6a <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800ecc2:	683b      	ldr	r3, [r7, #0]
 800ecc4:	781b      	ldrb	r3, [r3, #0]
 800ecc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d00a      	beq.n	800ece4 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800ecce:	697b      	ldr	r3, [r7, #20]
 800ecd0:	2bfe      	cmp	r3, #254	; 0xfe
 800ecd2:	d901      	bls.n	800ecd8 <pick_lfn+0xac>
 800ecd4:	2300      	movs	r3, #0
 800ecd6:	e006      	b.n	800ece6 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800ecd8:	697b      	ldr	r3, [r7, #20]
 800ecda:	005b      	lsls	r3, r3, #1
 800ecdc:	687a      	ldr	r2, [r7, #4]
 800ecde:	4413      	add	r3, r2
 800ece0:	2200      	movs	r2, #0
 800ece2:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800ece4:	2301      	movs	r3, #1
}
 800ece6:	4618      	mov	r0, r3
 800ece8:	3718      	adds	r7, #24
 800ecea:	46bd      	mov	sp, r7
 800ecec:	bd80      	pop	{r7, pc}
 800ecee:	bf00      	nop
 800ecf0:	08016190 	.word	0x08016190

0800ecf4 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800ecf4:	b580      	push	{r7, lr}
 800ecf6:	b088      	sub	sp, #32
 800ecf8:	af00      	add	r7, sp, #0
 800ecfa:	60f8      	str	r0, [r7, #12]
 800ecfc:	60b9      	str	r1, [r7, #8]
 800ecfe:	4611      	mov	r1, r2
 800ed00:	461a      	mov	r2, r3
 800ed02:	460b      	mov	r3, r1
 800ed04:	71fb      	strb	r3, [r7, #7]
 800ed06:	4613      	mov	r3, r2
 800ed08:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800ed0a:	68bb      	ldr	r3, [r7, #8]
 800ed0c:	330d      	adds	r3, #13
 800ed0e:	79ba      	ldrb	r2, [r7, #6]
 800ed10:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800ed12:	68bb      	ldr	r3, [r7, #8]
 800ed14:	330b      	adds	r3, #11
 800ed16:	220f      	movs	r2, #15
 800ed18:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800ed1a:	68bb      	ldr	r3, [r7, #8]
 800ed1c:	330c      	adds	r3, #12
 800ed1e:	2200      	movs	r2, #0
 800ed20:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800ed22:	68bb      	ldr	r3, [r7, #8]
 800ed24:	331a      	adds	r3, #26
 800ed26:	2100      	movs	r1, #0
 800ed28:	4618      	mov	r0, r3
 800ed2a:	f7fe fb41 	bl	800d3b0 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800ed2e:	79fb      	ldrb	r3, [r7, #7]
 800ed30:	1e5a      	subs	r2, r3, #1
 800ed32:	4613      	mov	r3, r2
 800ed34:	005b      	lsls	r3, r3, #1
 800ed36:	4413      	add	r3, r2
 800ed38:	009b      	lsls	r3, r3, #2
 800ed3a:	4413      	add	r3, r2
 800ed3c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800ed3e:	2300      	movs	r3, #0
 800ed40:	82fb      	strh	r3, [r7, #22]
 800ed42:	2300      	movs	r3, #0
 800ed44:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800ed46:	8afb      	ldrh	r3, [r7, #22]
 800ed48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ed4c:	4293      	cmp	r3, r2
 800ed4e:	d007      	beq.n	800ed60 <put_lfn+0x6c>
 800ed50:	69fb      	ldr	r3, [r7, #28]
 800ed52:	1c5a      	adds	r2, r3, #1
 800ed54:	61fa      	str	r2, [r7, #28]
 800ed56:	005b      	lsls	r3, r3, #1
 800ed58:	68fa      	ldr	r2, [r7, #12]
 800ed5a:	4413      	add	r3, r2
 800ed5c:	881b      	ldrh	r3, [r3, #0]
 800ed5e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800ed60:	4a17      	ldr	r2, [pc, #92]	; (800edc0 <put_lfn+0xcc>)
 800ed62:	69bb      	ldr	r3, [r7, #24]
 800ed64:	4413      	add	r3, r2
 800ed66:	781b      	ldrb	r3, [r3, #0]
 800ed68:	461a      	mov	r2, r3
 800ed6a:	68bb      	ldr	r3, [r7, #8]
 800ed6c:	4413      	add	r3, r2
 800ed6e:	8afa      	ldrh	r2, [r7, #22]
 800ed70:	4611      	mov	r1, r2
 800ed72:	4618      	mov	r0, r3
 800ed74:	f7fe fb1c 	bl	800d3b0 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800ed78:	8afb      	ldrh	r3, [r7, #22]
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d102      	bne.n	800ed84 <put_lfn+0x90>
 800ed7e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ed82:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800ed84:	69bb      	ldr	r3, [r7, #24]
 800ed86:	3301      	adds	r3, #1
 800ed88:	61bb      	str	r3, [r7, #24]
 800ed8a:	69bb      	ldr	r3, [r7, #24]
 800ed8c:	2b0c      	cmp	r3, #12
 800ed8e:	d9da      	bls.n	800ed46 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800ed90:	8afb      	ldrh	r3, [r7, #22]
 800ed92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ed96:	4293      	cmp	r3, r2
 800ed98:	d006      	beq.n	800eda8 <put_lfn+0xb4>
 800ed9a:	69fb      	ldr	r3, [r7, #28]
 800ed9c:	005b      	lsls	r3, r3, #1
 800ed9e:	68fa      	ldr	r2, [r7, #12]
 800eda0:	4413      	add	r3, r2
 800eda2:	881b      	ldrh	r3, [r3, #0]
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d103      	bne.n	800edb0 <put_lfn+0xbc>
 800eda8:	79fb      	ldrb	r3, [r7, #7]
 800edaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800edae:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800edb0:	68bb      	ldr	r3, [r7, #8]
 800edb2:	79fa      	ldrb	r2, [r7, #7]
 800edb4:	701a      	strb	r2, [r3, #0]
}
 800edb6:	bf00      	nop
 800edb8:	3720      	adds	r7, #32
 800edba:	46bd      	mov	sp, r7
 800edbc:	bd80      	pop	{r7, pc}
 800edbe:	bf00      	nop
 800edc0:	08016190 	.word	0x08016190

0800edc4 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800edc4:	b580      	push	{r7, lr}
 800edc6:	b08c      	sub	sp, #48	; 0x30
 800edc8:	af00      	add	r7, sp, #0
 800edca:	60f8      	str	r0, [r7, #12]
 800edcc:	60b9      	str	r1, [r7, #8]
 800edce:	607a      	str	r2, [r7, #4]
 800edd0:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800edd2:	220b      	movs	r2, #11
 800edd4:	68b9      	ldr	r1, [r7, #8]
 800edd6:	68f8      	ldr	r0, [r7, #12]
 800edd8:	f7fe fbb8 	bl	800d54c <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800eddc:	683b      	ldr	r3, [r7, #0]
 800edde:	2b05      	cmp	r3, #5
 800ede0:	d929      	bls.n	800ee36 <gen_numname+0x72>
		sr = seq;
 800ede2:	683b      	ldr	r3, [r7, #0]
 800ede4:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800ede6:	e020      	b.n	800ee2a <gen_numname+0x66>
			wc = *lfn++;
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	1c9a      	adds	r2, r3, #2
 800edec:	607a      	str	r2, [r7, #4]
 800edee:	881b      	ldrh	r3, [r3, #0]
 800edf0:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800edf2:	2300      	movs	r3, #0
 800edf4:	62bb      	str	r3, [r7, #40]	; 0x28
 800edf6:	e015      	b.n	800ee24 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 800edf8:	69fb      	ldr	r3, [r7, #28]
 800edfa:	005a      	lsls	r2, r3, #1
 800edfc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800edfe:	f003 0301 	and.w	r3, r3, #1
 800ee02:	4413      	add	r3, r2
 800ee04:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800ee06:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ee08:	085b      	lsrs	r3, r3, #1
 800ee0a:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800ee0c:	69fb      	ldr	r3, [r7, #28]
 800ee0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	d003      	beq.n	800ee1e <gen_numname+0x5a>
 800ee16:	69fa      	ldr	r2, [r7, #28]
 800ee18:	4b31      	ldr	r3, [pc, #196]	; (800eee0 <gen_numname+0x11c>)
 800ee1a:	4053      	eors	r3, r2
 800ee1c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800ee1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee20:	3301      	adds	r3, #1
 800ee22:	62bb      	str	r3, [r7, #40]	; 0x28
 800ee24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee26:	2b0f      	cmp	r3, #15
 800ee28:	d9e6      	bls.n	800edf8 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	881b      	ldrh	r3, [r3, #0]
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	d1da      	bne.n	800ede8 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800ee32:	69fb      	ldr	r3, [r7, #28]
 800ee34:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800ee36:	2307      	movs	r3, #7
 800ee38:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800ee3a:	683b      	ldr	r3, [r7, #0]
 800ee3c:	b2db      	uxtb	r3, r3
 800ee3e:	f003 030f 	and.w	r3, r3, #15
 800ee42:	b2db      	uxtb	r3, r3
 800ee44:	3330      	adds	r3, #48	; 0x30
 800ee46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800ee4a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ee4e:	2b39      	cmp	r3, #57	; 0x39
 800ee50:	d904      	bls.n	800ee5c <gen_numname+0x98>
 800ee52:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ee56:	3307      	adds	r3, #7
 800ee58:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800ee5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee5e:	1e5a      	subs	r2, r3, #1
 800ee60:	62ba      	str	r2, [r7, #40]	; 0x28
 800ee62:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800ee66:	4413      	add	r3, r2
 800ee68:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800ee6c:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800ee70:	683b      	ldr	r3, [r7, #0]
 800ee72:	091b      	lsrs	r3, r3, #4
 800ee74:	603b      	str	r3, [r7, #0]
	} while (seq);
 800ee76:	683b      	ldr	r3, [r7, #0]
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	d1de      	bne.n	800ee3a <gen_numname+0x76>
	ns[i] = '~';
 800ee7c:	f107 0214 	add.w	r2, r7, #20
 800ee80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee82:	4413      	add	r3, r2
 800ee84:	227e      	movs	r2, #126	; 0x7e
 800ee86:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800ee88:	2300      	movs	r3, #0
 800ee8a:	627b      	str	r3, [r7, #36]	; 0x24
 800ee8c:	e002      	b.n	800ee94 <gen_numname+0xd0>
 800ee8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee90:	3301      	adds	r3, #1
 800ee92:	627b      	str	r3, [r7, #36]	; 0x24
 800ee94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ee96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee98:	429a      	cmp	r2, r3
 800ee9a:	d205      	bcs.n	800eea8 <gen_numname+0xe4>
 800ee9c:	68fa      	ldr	r2, [r7, #12]
 800ee9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eea0:	4413      	add	r3, r2
 800eea2:	781b      	ldrb	r3, [r3, #0]
 800eea4:	2b20      	cmp	r3, #32
 800eea6:	d1f2      	bne.n	800ee8e <gen_numname+0xca>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800eea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eeaa:	2b07      	cmp	r3, #7
 800eeac:	d808      	bhi.n	800eec0 <gen_numname+0xfc>
 800eeae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eeb0:	1c5a      	adds	r2, r3, #1
 800eeb2:	62ba      	str	r2, [r7, #40]	; 0x28
 800eeb4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800eeb8:	4413      	add	r3, r2
 800eeba:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800eebe:	e000      	b.n	800eec2 <gen_numname+0xfe>
 800eec0:	2120      	movs	r1, #32
 800eec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eec4:	1c5a      	adds	r2, r3, #1
 800eec6:	627a      	str	r2, [r7, #36]	; 0x24
 800eec8:	68fa      	ldr	r2, [r7, #12]
 800eeca:	4413      	add	r3, r2
 800eecc:	460a      	mov	r2, r1
 800eece:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800eed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eed2:	2b07      	cmp	r3, #7
 800eed4:	d9e8      	bls.n	800eea8 <gen_numname+0xe4>
}
 800eed6:	bf00      	nop
 800eed8:	3730      	adds	r7, #48	; 0x30
 800eeda:	46bd      	mov	sp, r7
 800eedc:	bd80      	pop	{r7, pc}
 800eede:	bf00      	nop
 800eee0:	00011021 	.word	0x00011021

0800eee4 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800eee4:	b480      	push	{r7}
 800eee6:	b085      	sub	sp, #20
 800eee8:	af00      	add	r7, sp, #0
 800eeea:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800eeec:	2300      	movs	r3, #0
 800eeee:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800eef0:	230b      	movs	r3, #11
 800eef2:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800eef4:	7bfb      	ldrb	r3, [r7, #15]
 800eef6:	b2da      	uxtb	r2, r3
 800eef8:	0852      	lsrs	r2, r2, #1
 800eefa:	01db      	lsls	r3, r3, #7
 800eefc:	4313      	orrs	r3, r2
 800eefe:	b2da      	uxtb	r2, r3
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	1c59      	adds	r1, r3, #1
 800ef04:	6079      	str	r1, [r7, #4]
 800ef06:	781b      	ldrb	r3, [r3, #0]
 800ef08:	4413      	add	r3, r2
 800ef0a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800ef0c:	68bb      	ldr	r3, [r7, #8]
 800ef0e:	3b01      	subs	r3, #1
 800ef10:	60bb      	str	r3, [r7, #8]
 800ef12:	68bb      	ldr	r3, [r7, #8]
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d1ed      	bne.n	800eef4 <sum_sfn+0x10>
	return sum;
 800ef18:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef1a:	4618      	mov	r0, r3
 800ef1c:	3714      	adds	r7, #20
 800ef1e:	46bd      	mov	sp, r7
 800ef20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef24:	4770      	bx	lr

0800ef26 <xdir_sum>:

static
WORD xdir_sum (			/* Get checksum of the directoly block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 800ef26:	b480      	push	{r7}
 800ef28:	b087      	sub	sp, #28
 800ef2a:	af00      	add	r7, sp, #0
 800ef2c:	6078      	str	r0, [r7, #4]
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	3301      	adds	r3, #1
 800ef32:	781b      	ldrb	r3, [r3, #0]
 800ef34:	3301      	adds	r3, #1
 800ef36:	015b      	lsls	r3, r3, #5
 800ef38:	60fb      	str	r3, [r7, #12]
	for (i = sum = 0; i < szblk; i++) {
 800ef3a:	2300      	movs	r3, #0
 800ef3c:	827b      	strh	r3, [r7, #18]
 800ef3e:	2300      	movs	r3, #0
 800ef40:	617b      	str	r3, [r7, #20]
 800ef42:	e018      	b.n	800ef76 <xdir_sum+0x50>
		if (i == XDIR_SetSum) {	/* Skip sum field */
 800ef44:	697b      	ldr	r3, [r7, #20]
 800ef46:	2b02      	cmp	r3, #2
 800ef48:	d103      	bne.n	800ef52 <xdir_sum+0x2c>
			i++;
 800ef4a:	697b      	ldr	r3, [r7, #20]
 800ef4c:	3301      	adds	r3, #1
 800ef4e:	617b      	str	r3, [r7, #20]
 800ef50:	e00e      	b.n	800ef70 <xdir_sum+0x4a>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 800ef52:	8a7b      	ldrh	r3, [r7, #18]
 800ef54:	03db      	lsls	r3, r3, #15
 800ef56:	b29a      	uxth	r2, r3
 800ef58:	8a7b      	ldrh	r3, [r7, #18]
 800ef5a:	085b      	lsrs	r3, r3, #1
 800ef5c:	b29b      	uxth	r3, r3
 800ef5e:	4413      	add	r3, r2
 800ef60:	b29a      	uxth	r2, r3
 800ef62:	6879      	ldr	r1, [r7, #4]
 800ef64:	697b      	ldr	r3, [r7, #20]
 800ef66:	440b      	add	r3, r1
 800ef68:	781b      	ldrb	r3, [r3, #0]
 800ef6a:	b29b      	uxth	r3, r3
 800ef6c:	4413      	add	r3, r2
 800ef6e:	827b      	strh	r3, [r7, #18]
	for (i = sum = 0; i < szblk; i++) {
 800ef70:	697b      	ldr	r3, [r7, #20]
 800ef72:	3301      	adds	r3, #1
 800ef74:	617b      	str	r3, [r7, #20]
 800ef76:	697a      	ldr	r2, [r7, #20]
 800ef78:	68fb      	ldr	r3, [r7, #12]
 800ef7a:	429a      	cmp	r2, r3
 800ef7c:	d3e2      	bcc.n	800ef44 <xdir_sum+0x1e>
		}
	}
	return sum;
 800ef7e:	8a7b      	ldrh	r3, [r7, #18]
}
 800ef80:	4618      	mov	r0, r3
 800ef82:	371c      	adds	r7, #28
 800ef84:	46bd      	mov	sp, r7
 800ef86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef8a:	4770      	bx	lr

0800ef8c <xname_sum>:

static
WORD xname_sum (		/* Get check sum (to be used as hash) of the name */
	const WCHAR* name	/* File name to be calculated */
)
{
 800ef8c:	b580      	push	{r7, lr}
 800ef8e:	b084      	sub	sp, #16
 800ef90:	af00      	add	r7, sp, #0
 800ef92:	6078      	str	r0, [r7, #4]
	WCHAR chr;
	WORD sum = 0;
 800ef94:	2300      	movs	r3, #0
 800ef96:	81fb      	strh	r3, [r7, #14]


	while ((chr = *name++) != 0) {
 800ef98:	e01f      	b.n	800efda <xname_sum+0x4e>
		chr = ff_wtoupper(chr);		/* File name needs to be ignored case */
 800ef9a:	89bb      	ldrh	r3, [r7, #12]
 800ef9c:	4618      	mov	r0, r3
 800ef9e:	f002 fbc1 	bl	8011724 <ff_wtoupper>
 800efa2:	4603      	mov	r3, r0
 800efa4:	81bb      	strh	r3, [r7, #12]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 800efa6:	89fb      	ldrh	r3, [r7, #14]
 800efa8:	03db      	lsls	r3, r3, #15
 800efaa:	b29a      	uxth	r2, r3
 800efac:	89fb      	ldrh	r3, [r7, #14]
 800efae:	085b      	lsrs	r3, r3, #1
 800efb0:	b29b      	uxth	r3, r3
 800efb2:	4413      	add	r3, r2
 800efb4:	b29a      	uxth	r2, r3
 800efb6:	89bb      	ldrh	r3, [r7, #12]
 800efb8:	b2db      	uxtb	r3, r3
 800efba:	b29b      	uxth	r3, r3
 800efbc:	4413      	add	r3, r2
 800efbe:	81fb      	strh	r3, [r7, #14]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 800efc0:	89fb      	ldrh	r3, [r7, #14]
 800efc2:	03db      	lsls	r3, r3, #15
 800efc4:	b29a      	uxth	r2, r3
 800efc6:	89fb      	ldrh	r3, [r7, #14]
 800efc8:	085b      	lsrs	r3, r3, #1
 800efca:	b29b      	uxth	r3, r3
 800efcc:	4413      	add	r3, r2
 800efce:	b29a      	uxth	r2, r3
 800efd0:	89bb      	ldrh	r3, [r7, #12]
 800efd2:	0a1b      	lsrs	r3, r3, #8
 800efd4:	b29b      	uxth	r3, r3
 800efd6:	4413      	add	r3, r2
 800efd8:	81fb      	strh	r3, [r7, #14]
	while ((chr = *name++) != 0) {
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	1c9a      	adds	r2, r3, #2
 800efde:	607a      	str	r2, [r7, #4]
 800efe0:	881b      	ldrh	r3, [r3, #0]
 800efe2:	81bb      	strh	r3, [r7, #12]
 800efe4:	89bb      	ldrh	r3, [r7, #12]
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	d1d7      	bne.n	800ef9a <xname_sum+0xe>
	}
	return sum;
 800efea:	89fb      	ldrh	r3, [r7, #14]
}
 800efec:	4618      	mov	r0, r3
 800efee:	3710      	adds	r7, #16
 800eff0:	46bd      	mov	sp, r7
 800eff2:	bd80      	pop	{r7, pc}

0800eff4 <load_xdir>:

static
FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
	DIR* dp			/* Pointer to the reading direcotry object pointing the 85 entry */
)
{
 800eff4:	b590      	push	{r4, r7, lr}
 800eff6:	b087      	sub	sp, #28
 800eff8:	af00      	add	r7, sp, #0
 800effa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT i, sz_ent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	695b      	ldr	r3, [r3, #20]
 800f002:	613b      	str	r3, [r7, #16]


	/* Load 85 entry */
	res = move_window(dp->obj.fs, dp->sect);
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	681a      	ldr	r2, [r3, #0]
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f00c:	4619      	mov	r1, r3
 800f00e:	4610      	mov	r0, r2
 800f010:	f7fe fcfa 	bl	800da08 <move_window>
 800f014:	4603      	mov	r3, r0
 800f016:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800f018:	7bfb      	ldrb	r3, [r7, #15]
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	d001      	beq.n	800f022 <load_xdir+0x2e>
 800f01e:	7bfb      	ldrb	r3, [r7, #15]
 800f020:	e09f      	b.n	800f162 <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f026:	781b      	ldrb	r3, [r3, #0]
 800f028:	2b85      	cmp	r3, #133	; 0x85
 800f02a:	d001      	beq.n	800f030 <load_xdir+0x3c>
 800f02c:	2302      	movs	r3, #2
 800f02e:	e098      	b.n	800f162 <load_xdir+0x16e>
	mem_cpy(dirb + 0, dp->dir, SZDIRE);
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f034:	2220      	movs	r2, #32
 800f036:	4619      	mov	r1, r3
 800f038:	6938      	ldr	r0, [r7, #16]
 800f03a:	f7fe fa87 	bl	800d54c <mem_cpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 800f03e:	693b      	ldr	r3, [r7, #16]
 800f040:	3301      	adds	r3, #1
 800f042:	781b      	ldrb	r3, [r3, #0]
 800f044:	3301      	adds	r3, #1
 800f046:	015b      	lsls	r3, r3, #5
 800f048:	60bb      	str	r3, [r7, #8]
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 800f04a:	68bb      	ldr	r3, [r7, #8]
 800f04c:	2b5f      	cmp	r3, #95	; 0x5f
 800f04e:	d903      	bls.n	800f058 <load_xdir+0x64>
 800f050:	68bb      	ldr	r3, [r7, #8]
 800f052:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800f056:	d901      	bls.n	800f05c <load_xdir+0x68>
 800f058:	2302      	movs	r3, #2
 800f05a:	e082      	b.n	800f162 <load_xdir+0x16e>

	/* Load C0 entry */
	res = dir_next(dp, 0);
 800f05c:	2100      	movs	r1, #0
 800f05e:	6878      	ldr	r0, [r7, #4]
 800f060:	f7ff fbf2 	bl	800e848 <dir_next>
 800f064:	4603      	mov	r3, r0
 800f066:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800f068:	7bfb      	ldrb	r3, [r7, #15]
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	d001      	beq.n	800f072 <load_xdir+0x7e>
 800f06e:	7bfb      	ldrb	r3, [r7, #15]
 800f070:	e077      	b.n	800f162 <load_xdir+0x16e>
	res = move_window(dp->obj.fs, dp->sect);
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	681a      	ldr	r2, [r3, #0]
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f07a:	4619      	mov	r1, r3
 800f07c:	4610      	mov	r0, r2
 800f07e:	f7fe fcc3 	bl	800da08 <move_window>
 800f082:	4603      	mov	r3, r0
 800f084:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800f086:	7bfb      	ldrb	r3, [r7, #15]
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d001      	beq.n	800f090 <load_xdir+0x9c>
 800f08c:	7bfb      	ldrb	r3, [r7, #15]
 800f08e:	e068      	b.n	800f162 <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f094:	781b      	ldrb	r3, [r3, #0]
 800f096:	2bc0      	cmp	r3, #192	; 0xc0
 800f098:	d001      	beq.n	800f09e <load_xdir+0xaa>
 800f09a:	2302      	movs	r3, #2
 800f09c:	e061      	b.n	800f162 <load_xdir+0x16e>
	mem_cpy(dirb + SZDIRE, dp->dir, SZDIRE);
 800f09e:	693b      	ldr	r3, [r7, #16]
 800f0a0:	f103 0020 	add.w	r0, r3, #32
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f0a8:	2220      	movs	r2, #32
 800f0aa:	4619      	mov	r1, r3
 800f0ac:	f7fe fa4e 	bl	800d54c <mem_cpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 800f0b0:	693b      	ldr	r3, [r7, #16]
 800f0b2:	3323      	adds	r3, #35	; 0x23
 800f0b4:	781b      	ldrb	r3, [r3, #0]
 800f0b6:	332c      	adds	r3, #44	; 0x2c
 800f0b8:	4a2c      	ldr	r2, [pc, #176]	; (800f16c <load_xdir+0x178>)
 800f0ba:	fba2 2303 	umull	r2, r3, r2, r3
 800f0be:	08db      	lsrs	r3, r3, #3
 800f0c0:	015b      	lsls	r3, r3, #5
 800f0c2:	68ba      	ldr	r2, [r7, #8]
 800f0c4:	429a      	cmp	r2, r3
 800f0c6:	d201      	bcs.n	800f0cc <load_xdir+0xd8>
 800f0c8:	2302      	movs	r3, #2
 800f0ca:	e04a      	b.n	800f162 <load_xdir+0x16e>

	/* Load C1 entries */
	i = SZDIRE * 2;	/* C1 offset */
 800f0cc:	2340      	movs	r3, #64	; 0x40
 800f0ce:	617b      	str	r3, [r7, #20]
	do {
		res = dir_next(dp, 0);
 800f0d0:	2100      	movs	r1, #0
 800f0d2:	6878      	ldr	r0, [r7, #4]
 800f0d4:	f7ff fbb8 	bl	800e848 <dir_next>
 800f0d8:	4603      	mov	r3, r0
 800f0da:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 800f0dc:	7bfb      	ldrb	r3, [r7, #15]
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	d001      	beq.n	800f0e6 <load_xdir+0xf2>
 800f0e2:	7bfb      	ldrb	r3, [r7, #15]
 800f0e4:	e03d      	b.n	800f162 <load_xdir+0x16e>
		res = move_window(dp->obj.fs, dp->sect);
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	681a      	ldr	r2, [r3, #0]
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f0ee:	4619      	mov	r1, r3
 800f0f0:	4610      	mov	r0, r2
 800f0f2:	f7fe fc89 	bl	800da08 <move_window>
 800f0f6:	4603      	mov	r3, r0
 800f0f8:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 800f0fa:	7bfb      	ldrb	r3, [r7, #15]
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d001      	beq.n	800f104 <load_xdir+0x110>
 800f100:	7bfb      	ldrb	r3, [r7, #15]
 800f102:	e02e      	b.n	800f162 <load_xdir+0x16e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f108:	781b      	ldrb	r3, [r3, #0]
 800f10a:	2bc1      	cmp	r3, #193	; 0xc1
 800f10c:	d001      	beq.n	800f112 <load_xdir+0x11e>
 800f10e:	2302      	movs	r3, #2
 800f110:	e027      	b.n	800f162 <load_xdir+0x16e>
		if (i < MAXDIRB(_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
 800f112:	697b      	ldr	r3, [r7, #20]
 800f114:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800f118:	d208      	bcs.n	800f12c <load_xdir+0x138>
 800f11a:	693a      	ldr	r2, [r7, #16]
 800f11c:	697b      	ldr	r3, [r7, #20]
 800f11e:	18d0      	adds	r0, r2, r3
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f124:	2220      	movs	r2, #32
 800f126:	4619      	mov	r1, r3
 800f128:	f7fe fa10 	bl	800d54c <mem_cpy>
	} while ((i += SZDIRE) < sz_ent);
 800f12c:	697b      	ldr	r3, [r7, #20]
 800f12e:	3320      	adds	r3, #32
 800f130:	617b      	str	r3, [r7, #20]
 800f132:	697a      	ldr	r2, [r7, #20]
 800f134:	68bb      	ldr	r3, [r7, #8]
 800f136:	429a      	cmp	r2, r3
 800f138:	d3ca      	bcc.n	800f0d0 <load_xdir+0xdc>

	/* Sanity check (do it when accessible object name) */
	if (i <= MAXDIRB(_MAX_LFN)) {
 800f13a:	697b      	ldr	r3, [r7, #20]
 800f13c:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800f140:	d80e      	bhi.n	800f160 <load_xdir+0x16c>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 800f142:	6938      	ldr	r0, [r7, #16]
 800f144:	f7ff feef 	bl	800ef26 <xdir_sum>
 800f148:	4603      	mov	r3, r0
 800f14a:	461c      	mov	r4, r3
 800f14c:	693b      	ldr	r3, [r7, #16]
 800f14e:	3302      	adds	r3, #2
 800f150:	4618      	mov	r0, r3
 800f152:	f7fe f835 	bl	800d1c0 <ld_word>
 800f156:	4603      	mov	r3, r0
 800f158:	429c      	cmp	r4, r3
 800f15a:	d001      	beq.n	800f160 <load_xdir+0x16c>
 800f15c:	2302      	movs	r3, #2
 800f15e:	e000      	b.n	800f162 <load_xdir+0x16e>
	}
	return FR_OK;
 800f160:	2300      	movs	r3, #0
}
 800f162:	4618      	mov	r0, r3
 800f164:	371c      	adds	r7, #28
 800f166:	46bd      	mov	sp, r7
 800f168:	bd90      	pop	{r4, r7, pc}
 800f16a:	bf00      	nop
 800f16c:	88888889 	.word	0x88888889

0800f170 <load_obj_dir>:
static
FRESULT load_obj_dir (
	DIR* dp,			/* Blank directory object to be used to access containing direcotry */
	const _FDID* obj	/* Object with its containing directory information */
)
{
 800f170:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800f174:	b084      	sub	sp, #16
 800f176:	af00      	add	r7, sp, #0
 800f178:	6078      	str	r0, [r7, #4]
 800f17a:	6039      	str	r1, [r7, #0]
	FRESULT res;

	/* Open object containing directory */
	dp->obj.fs = obj->fs;
 800f17c:	683b      	ldr	r3, [r7, #0]
 800f17e:	681a      	ldr	r2, [r3, #0]
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	601a      	str	r2, [r3, #0]
	dp->obj.sclust = obj->c_scl;
 800f184:	683b      	ldr	r3, [r7, #0]
 800f186:	6a1a      	ldr	r2, [r3, #32]
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	609a      	str	r2, [r3, #8]
	dp->obj.stat = (BYTE)obj->c_size;
 800f18c:	683b      	ldr	r3, [r7, #0]
 800f18e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f190:	b2da      	uxtb	r2, r3
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	71da      	strb	r2, [r3, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 800f196:	683b      	ldr	r3, [r7, #0]
 800f198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f19a:	469b      	mov	fp, r3
 800f19c:	f04f 0c00 	mov.w	ip, #0
 800f1a0:	f06f 01ff 	mvn.w	r1, #255	; 0xff
 800f1a4:	f04f 0200 	mov.w	r2, #0
 800f1a8:	ea0b 0301 	and.w	r3, fp, r1
 800f1ac:	ea0c 0402 	and.w	r4, ip, r2
 800f1b0:	687a      	ldr	r2, [r7, #4]
 800f1b2:	e9c2 3404 	strd	r3, r4, [r2, #16]
	dp->blk_ofs = obj->c_ofs;
 800f1b6:	683b      	ldr	r3, [r7, #0]
 800f1b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	64da      	str	r2, [r3, #76]	; 0x4c

	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f1c2:	4619      	mov	r1, r3
 800f1c4:	6878      	ldr	r0, [r7, #4]
 800f1c6:	f7ff faab 	bl	800e720 <dir_sdi>
 800f1ca:	4603      	mov	r3, r0
 800f1cc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800f1ce:	7bfb      	ldrb	r3, [r7, #15]
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	d104      	bne.n	800f1de <load_obj_dir+0x6e>
		res = load_xdir(dp);		/* Load the object's entry block */
 800f1d4:	6878      	ldr	r0, [r7, #4]
 800f1d6:	f7ff ff0d 	bl	800eff4 <load_xdir>
 800f1da:	4603      	mov	r3, r0
 800f1dc:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 800f1de:	7bfb      	ldrb	r3, [r7, #15]
}
 800f1e0:	4618      	mov	r0, r3
 800f1e2:	3710      	adds	r7, #16
 800f1e4:	46bd      	mov	sp, r7
 800f1e6:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800f1ea <store_xdir>:
/*-----------------------------------------------*/
static
FRESULT store_xdir (
	DIR* dp				/* Pointer to the direcotry object */
)
{
 800f1ea:	b590      	push	{r4, r7, lr}
 800f1ec:	b087      	sub	sp, #28
 800f1ee:	af00      	add	r7, sp, #0
 800f1f0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT nent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	695b      	ldr	r3, [r3, #20]
 800f1f8:	60fb      	str	r3, [r7, #12]

	/* Create set sum */
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
 800f1fa:	68fb      	ldr	r3, [r7, #12]
 800f1fc:	1c9c      	adds	r4, r3, #2
 800f1fe:	68f8      	ldr	r0, [r7, #12]
 800f200:	f7ff fe91 	bl	800ef26 <xdir_sum>
 800f204:	4603      	mov	r3, r0
 800f206:	4619      	mov	r1, r3
 800f208:	4620      	mov	r0, r4
 800f20a:	f7fe f8d1 	bl	800d3b0 <st_word>
	nent = dirb[XDIR_NumSec] + 1;
 800f20e:	68fb      	ldr	r3, [r7, #12]
 800f210:	3301      	adds	r3, #1
 800f212:	781b      	ldrb	r3, [r3, #0]
 800f214:	3301      	adds	r3, #1
 800f216:	613b      	str	r3, [r7, #16]

	/* Store the set of directory to the volume */
	res = dir_sdi(dp, dp->blk_ofs);
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f21c:	4619      	mov	r1, r3
 800f21e:	6878      	ldr	r0, [r7, #4]
 800f220:	f7ff fa7e 	bl	800e720 <dir_sdi>
 800f224:	4603      	mov	r3, r0
 800f226:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800f228:	e026      	b.n	800f278 <store_xdir+0x8e>
		res = move_window(dp->obj.fs, dp->sect);
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	681a      	ldr	r2, [r3, #0]
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f232:	4619      	mov	r1, r3
 800f234:	4610      	mov	r0, r2
 800f236:	f7fe fbe7 	bl	800da08 <move_window>
 800f23a:	4603      	mov	r3, r0
 800f23c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f23e:	7dfb      	ldrb	r3, [r7, #23]
 800f240:	2b00      	cmp	r3, #0
 800f242:	d11d      	bne.n	800f280 <store_xdir+0x96>
		mem_cpy(dp->dir, dirb, SZDIRE);
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f248:	2220      	movs	r2, #32
 800f24a:	68f9      	ldr	r1, [r7, #12]
 800f24c:	4618      	mov	r0, r3
 800f24e:	f7fe f97d 	bl	800d54c <mem_cpy>
		dp->obj.fs->wflag = 1;
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	681b      	ldr	r3, [r3, #0]
 800f256:	2201      	movs	r2, #1
 800f258:	70da      	strb	r2, [r3, #3]
		if (--nent == 0) break;
 800f25a:	693b      	ldr	r3, [r7, #16]
 800f25c:	3b01      	subs	r3, #1
 800f25e:	613b      	str	r3, [r7, #16]
 800f260:	693b      	ldr	r3, [r7, #16]
 800f262:	2b00      	cmp	r3, #0
 800f264:	d00e      	beq.n	800f284 <store_xdir+0x9a>
		dirb += SZDIRE;
 800f266:	68fb      	ldr	r3, [r7, #12]
 800f268:	3320      	adds	r3, #32
 800f26a:	60fb      	str	r3, [r7, #12]
		res = dir_next(dp, 0);
 800f26c:	2100      	movs	r1, #0
 800f26e:	6878      	ldr	r0, [r7, #4]
 800f270:	f7ff faea 	bl	800e848 <dir_next>
 800f274:	4603      	mov	r3, r0
 800f276:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800f278:	7dfb      	ldrb	r3, [r7, #23]
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d0d5      	beq.n	800f22a <store_xdir+0x40>
 800f27e:	e002      	b.n	800f286 <store_xdir+0x9c>
		if (res != FR_OK) break;
 800f280:	bf00      	nop
 800f282:	e000      	b.n	800f286 <store_xdir+0x9c>
		if (--nent == 0) break;
 800f284:	bf00      	nop
	}
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 800f286:	7dfb      	ldrb	r3, [r7, #23]
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d002      	beq.n	800f292 <store_xdir+0xa8>
 800f28c:	7dfb      	ldrb	r3, [r7, #23]
 800f28e:	2b01      	cmp	r3, #1
 800f290:	d101      	bne.n	800f296 <store_xdir+0xac>
 800f292:	7dfb      	ldrb	r3, [r7, #23]
 800f294:	e000      	b.n	800f298 <store_xdir+0xae>
 800f296:	2302      	movs	r3, #2
}
 800f298:	4618      	mov	r0, r3
 800f29a:	371c      	adds	r7, #28
 800f29c:	46bd      	mov	sp, r7
 800f29e:	bd90      	pop	{r4, r7, pc}

0800f2a0 <create_xdir>:
static
void create_xdir (
	BYTE* dirb,			/* Pointer to the direcotry entry block buffer */
	const WCHAR* lfn	/* Pointer to the nul terminated file name */
)
{
 800f2a0:	b590      	push	{r4, r7, lr}
 800f2a2:	b085      	sub	sp, #20
 800f2a4:	af00      	add	r7, sp, #0
 800f2a6:	6078      	str	r0, [r7, #4]
 800f2a8:	6039      	str	r1, [r7, #0]
	BYTE nb, nc;
	WCHAR chr;


	/* Create 85+C0 entry */
	mem_set(dirb, 0, 2 * SZDIRE);
 800f2aa:	2240      	movs	r2, #64	; 0x40
 800f2ac:	2100      	movs	r1, #0
 800f2ae:	6878      	ldr	r0, [r7, #4]
 800f2b0:	f7fe f96d 	bl	800d58e <mem_set>
	dirb[XDIR_Type] = 0x85;
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	2285      	movs	r2, #133	; 0x85
 800f2b8:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_Type + SZDIRE] = 0xC0;
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	3320      	adds	r3, #32
 800f2be:	22c0      	movs	r2, #192	; 0xc0
 800f2c0:	701a      	strb	r2, [r3, #0]

	/* Create C1 entries */
	nc = 0; nb = 1; chr = 1; i = SZDIRE * 2;
 800f2c2:	2300      	movs	r3, #0
 800f2c4:	72bb      	strb	r3, [r7, #10]
 800f2c6:	2301      	movs	r3, #1
 800f2c8:	72fb      	strb	r3, [r7, #11]
 800f2ca:	2301      	movs	r3, #1
 800f2cc:	813b      	strh	r3, [r7, #8]
 800f2ce:	2340      	movs	r3, #64	; 0x40
 800f2d0:	60fb      	str	r3, [r7, #12]
	do {
		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
 800f2d2:	68fb      	ldr	r3, [r7, #12]
 800f2d4:	1c5a      	adds	r2, r3, #1
 800f2d6:	60fa      	str	r2, [r7, #12]
 800f2d8:	687a      	ldr	r2, [r7, #4]
 800f2da:	4413      	add	r3, r2
 800f2dc:	22c1      	movs	r2, #193	; 0xc1
 800f2de:	701a      	strb	r2, [r3, #0]
 800f2e0:	68fb      	ldr	r3, [r7, #12]
 800f2e2:	1c5a      	adds	r2, r3, #1
 800f2e4:	60fa      	str	r2, [r7, #12]
 800f2e6:	687a      	ldr	r2, [r7, #4]
 800f2e8:	4413      	add	r3, r2
 800f2ea:	2200      	movs	r2, #0
 800f2ec:	701a      	strb	r2, [r3, #0]
		do {	/* Fill name field */
			if (chr && (chr = lfn[nc]) != 0) nc++;	/* Get a character if exist */
 800f2ee:	893b      	ldrh	r3, [r7, #8]
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d00b      	beq.n	800f30c <create_xdir+0x6c>
 800f2f4:	7abb      	ldrb	r3, [r7, #10]
 800f2f6:	005b      	lsls	r3, r3, #1
 800f2f8:	683a      	ldr	r2, [r7, #0]
 800f2fa:	4413      	add	r3, r2
 800f2fc:	881b      	ldrh	r3, [r3, #0]
 800f2fe:	813b      	strh	r3, [r7, #8]
 800f300:	893b      	ldrh	r3, [r7, #8]
 800f302:	2b00      	cmp	r3, #0
 800f304:	d002      	beq.n	800f30c <create_xdir+0x6c>
 800f306:	7abb      	ldrb	r3, [r7, #10]
 800f308:	3301      	adds	r3, #1
 800f30a:	72bb      	strb	r3, [r7, #10]
			st_word(dirb + i, chr); 		/* Store it */
 800f30c:	687a      	ldr	r2, [r7, #4]
 800f30e:	68fb      	ldr	r3, [r7, #12]
 800f310:	4413      	add	r3, r2
 800f312:	893a      	ldrh	r2, [r7, #8]
 800f314:	4611      	mov	r1, r2
 800f316:	4618      	mov	r0, r3
 800f318:	f7fe f84a 	bl	800d3b0 <st_word>
		} while ((i += 2) % SZDIRE != 0);
 800f31c:	68fb      	ldr	r3, [r7, #12]
 800f31e:	3302      	adds	r3, #2
 800f320:	60fb      	str	r3, [r7, #12]
 800f322:	68fb      	ldr	r3, [r7, #12]
 800f324:	f003 031f 	and.w	r3, r3, #31
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d1e0      	bne.n	800f2ee <create_xdir+0x4e>
		nb++;
 800f32c:	7afb      	ldrb	r3, [r7, #11]
 800f32e:	3301      	adds	r3, #1
 800f330:	72fb      	strb	r3, [r7, #11]
	} while (lfn[nc]);	/* Fill next entry if any char follows */
 800f332:	7abb      	ldrb	r3, [r7, #10]
 800f334:	005b      	lsls	r3, r3, #1
 800f336:	683a      	ldr	r2, [r7, #0]
 800f338:	4413      	add	r3, r2
 800f33a:	881b      	ldrh	r3, [r3, #0]
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d1c8      	bne.n	800f2d2 <create_xdir+0x32>

	dirb[XDIR_NumName] = nc;	/* Set name length */
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	3323      	adds	r3, #35	; 0x23
 800f344:	7aba      	ldrb	r2, [r7, #10]
 800f346:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_NumSec] = nb;		/* Set block length */
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	3301      	adds	r3, #1
 800f34c:	7afa      	ldrb	r2, [r7, #11]
 800f34e:	701a      	strb	r2, [r3, #0]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	f103 0424 	add.w	r4, r3, #36	; 0x24
 800f356:	6838      	ldr	r0, [r7, #0]
 800f358:	f7ff fe18 	bl	800ef8c <xname_sum>
 800f35c:	4603      	mov	r3, r0
 800f35e:	4619      	mov	r1, r3
 800f360:	4620      	mov	r0, r4
 800f362:	f7fe f825 	bl	800d3b0 <st_word>
}
 800f366:	bf00      	nop
 800f368:	3714      	adds	r7, #20
 800f36a:	46bd      	mov	sp, r7
 800f36c:	bd90      	pop	{r4, r7, pc}

0800f36e <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800f36e:	b580      	push	{r7, lr}
 800f370:	b086      	sub	sp, #24
 800f372:	af00      	add	r7, sp, #0
 800f374:	6078      	str	r0, [r7, #4]
 800f376:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800f378:	2304      	movs	r3, #4
 800f37a:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	681b      	ldr	r3, [r3, #0]
 800f380:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800f382:	23ff      	movs	r3, #255	; 0xff
 800f384:	757b      	strb	r3, [r7, #21]
 800f386:	23ff      	movs	r3, #255	; 0xff
 800f388:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800f38a:	e09f      	b.n	800f4cc <dir_read+0x15e>
		res = move_window(fs, dp->sect);
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f390:	4619      	mov	r1, r3
 800f392:	6938      	ldr	r0, [r7, #16]
 800f394:	f7fe fb38 	bl	800da08 <move_window>
 800f398:	4603      	mov	r3, r0
 800f39a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f39c:	7dfb      	ldrb	r3, [r7, #23]
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	f040 809a 	bne.w	800f4d8 <dir_read+0x16a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f3a8:	781b      	ldrb	r3, [r3, #0]
 800f3aa:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800f3ac:	7dbb      	ldrb	r3, [r7, #22]
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d102      	bne.n	800f3b8 <dir_read+0x4a>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800f3b2:	2304      	movs	r3, #4
 800f3b4:	75fb      	strb	r3, [r7, #23]
 800f3b6:	e096      	b.n	800f4e6 <dir_read+0x178>
		}
#if _FS_EXFAT
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800f3b8:	693b      	ldr	r3, [r7, #16]
 800f3ba:	781b      	ldrb	r3, [r3, #0]
 800f3bc:	2b04      	cmp	r3, #4
 800f3be:	d118      	bne.n	800f3f2 <dir_read+0x84>
			if (_USE_LABEL && vol) {
				if (c == 0x83) break;	/* Volume label entry? */
			} else {
				if (c == 0x85) {		/* Start of the file entry block? */
 800f3c0:	7dbb      	ldrb	r3, [r7, #22]
 800f3c2:	2b85      	cmp	r3, #133	; 0x85
 800f3c4:	d179      	bne.n	800f4ba <dir_read+0x14c>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	64da      	str	r2, [r3, #76]	; 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 800f3ce:	6878      	ldr	r0, [r7, #4]
 800f3d0:	f7ff fe10 	bl	800eff4 <load_xdir>
 800f3d4:	4603      	mov	r3, r0
 800f3d6:	75fb      	strb	r3, [r7, #23]
					if (res == FR_OK) {
 800f3d8:	7dfb      	ldrb	r3, [r7, #23]
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d17e      	bne.n	800f4dc <dir_read+0x16e>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 800f3de:	693b      	ldr	r3, [r7, #16]
 800f3e0:	695b      	ldr	r3, [r3, #20]
 800f3e2:	3304      	adds	r3, #4
 800f3e4:	781b      	ldrb	r3, [r3, #0]
 800f3e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f3ea:	b2da      	uxtb	r2, r3
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	719a      	strb	r2, [r3, #6]
					}
					break;
 800f3f0:	e074      	b.n	800f4dc <dir_read+0x16e>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f3f6:	330b      	adds	r3, #11
 800f3f8:	781b      	ldrb	r3, [r3, #0]
 800f3fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f3fe:	73fb      	strb	r3, [r7, #15]
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	7bfa      	ldrb	r2, [r7, #15]
 800f404:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800f406:	7dbb      	ldrb	r3, [r7, #22]
 800f408:	2be5      	cmp	r3, #229	; 0xe5
 800f40a:	d00e      	beq.n	800f42a <dir_read+0xbc>
 800f40c:	7dbb      	ldrb	r3, [r7, #22]
 800f40e:	2b2e      	cmp	r3, #46	; 0x2e
 800f410:	d00b      	beq.n	800f42a <dir_read+0xbc>
 800f412:	7bfb      	ldrb	r3, [r7, #15]
 800f414:	f023 0320 	bic.w	r3, r3, #32
 800f418:	2b08      	cmp	r3, #8
 800f41a:	bf0c      	ite	eq
 800f41c:	2301      	moveq	r3, #1
 800f41e:	2300      	movne	r3, #0
 800f420:	b2db      	uxtb	r3, r3
 800f422:	461a      	mov	r2, r3
 800f424:	683b      	ldr	r3, [r7, #0]
 800f426:	4293      	cmp	r3, r2
 800f428:	d002      	beq.n	800f430 <dir_read+0xc2>
				ord = 0xFF;
 800f42a:	23ff      	movs	r3, #255	; 0xff
 800f42c:	757b      	strb	r3, [r7, #21]
 800f42e:	e044      	b.n	800f4ba <dir_read+0x14c>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800f430:	7bfb      	ldrb	r3, [r7, #15]
 800f432:	2b0f      	cmp	r3, #15
 800f434:	d12f      	bne.n	800f496 <dir_read+0x128>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800f436:	7dbb      	ldrb	r3, [r7, #22]
 800f438:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	d00d      	beq.n	800f45c <dir_read+0xee>
						sum = dp->dir[LDIR_Chksum];
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f444:	7b5b      	ldrb	r3, [r3, #13]
 800f446:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800f448:	7dbb      	ldrb	r3, [r7, #22]
 800f44a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f44e:	75bb      	strb	r3, [r7, #22]
 800f450:	7dbb      	ldrb	r3, [r7, #22]
 800f452:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800f45c:	7dba      	ldrb	r2, [r7, #22]
 800f45e:	7d7b      	ldrb	r3, [r7, #21]
 800f460:	429a      	cmp	r2, r3
 800f462:	d115      	bne.n	800f490 <dir_read+0x122>
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f468:	330d      	adds	r3, #13
 800f46a:	781b      	ldrb	r3, [r3, #0]
 800f46c:	7d3a      	ldrb	r2, [r7, #20]
 800f46e:	429a      	cmp	r2, r3
 800f470:	d10e      	bne.n	800f490 <dir_read+0x122>
 800f472:	693b      	ldr	r3, [r7, #16]
 800f474:	691a      	ldr	r2, [r3, #16]
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f47a:	4619      	mov	r1, r3
 800f47c:	4610      	mov	r0, r2
 800f47e:	f7ff fbd5 	bl	800ec2c <pick_lfn>
 800f482:	4603      	mov	r3, r0
 800f484:	2b00      	cmp	r3, #0
 800f486:	d003      	beq.n	800f490 <dir_read+0x122>
 800f488:	7d7b      	ldrb	r3, [r7, #21]
 800f48a:	3b01      	subs	r3, #1
 800f48c:	b2db      	uxtb	r3, r3
 800f48e:	e000      	b.n	800f492 <dir_read+0x124>
 800f490:	23ff      	movs	r3, #255	; 0xff
 800f492:	757b      	strb	r3, [r7, #21]
 800f494:	e011      	b.n	800f4ba <dir_read+0x14c>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800f496:	7d7b      	ldrb	r3, [r7, #21]
 800f498:	2b00      	cmp	r3, #0
 800f49a:	d109      	bne.n	800f4b0 <dir_read+0x142>
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f4a0:	4618      	mov	r0, r3
 800f4a2:	f7ff fd1f 	bl	800eee4 <sum_sfn>
 800f4a6:	4603      	mov	r3, r0
 800f4a8:	461a      	mov	r2, r3
 800f4aa:	7d3b      	ldrb	r3, [r7, #20]
 800f4ac:	4293      	cmp	r3, r2
 800f4ae:	d017      	beq.n	800f4e0 <dir_read+0x172>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	f04f 32ff 	mov.w	r2, #4294967295
 800f4b6:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					break;
 800f4b8:	e012      	b.n	800f4e0 <dir_read+0x172>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800f4ba:	2100      	movs	r1, #0
 800f4bc:	6878      	ldr	r0, [r7, #4]
 800f4be:	f7ff f9c3 	bl	800e848 <dir_next>
 800f4c2:	4603      	mov	r3, r0
 800f4c4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f4c6:	7dfb      	ldrb	r3, [r7, #23]
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	d10b      	bne.n	800f4e4 <dir_read+0x176>
	while (dp->sect) {
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	f47f af5b 	bne.w	800f38c <dir_read+0x1e>
 800f4d6:	e006      	b.n	800f4e6 <dir_read+0x178>
		if (res != FR_OK) break;
 800f4d8:	bf00      	nop
 800f4da:	e004      	b.n	800f4e6 <dir_read+0x178>
					break;
 800f4dc:	bf00      	nop
 800f4de:	e002      	b.n	800f4e6 <dir_read+0x178>
					break;
 800f4e0:	bf00      	nop
 800f4e2:	e000      	b.n	800f4e6 <dir_read+0x178>
		if (res != FR_OK) break;
 800f4e4:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800f4e6:	7dfb      	ldrb	r3, [r7, #23]
 800f4e8:	2b00      	cmp	r3, #0
 800f4ea:	d002      	beq.n	800f4f2 <dir_read+0x184>
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	2200      	movs	r2, #0
 800f4f0:	639a      	str	r2, [r3, #56]	; 0x38
	return res;
 800f4f2:	7dfb      	ldrb	r3, [r7, #23]
}
 800f4f4:	4618      	mov	r0, r3
 800f4f6:	3718      	adds	r7, #24
 800f4f8:	46bd      	mov	sp, r7
 800f4fa:	bd80      	pop	{r7, pc}

0800f4fc <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800f4fc:	b590      	push	{r4, r7, lr}
 800f4fe:	b089      	sub	sp, #36	; 0x24
 800f500:	af00      	add	r7, sp, #0
 800f502:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	681b      	ldr	r3, [r3, #0]
 800f508:	60fb      	str	r3, [r7, #12]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800f50a:	2100      	movs	r1, #0
 800f50c:	6878      	ldr	r0, [r7, #4]
 800f50e:	f7ff f907 	bl	800e720 <dir_sdi>
 800f512:	4603      	mov	r3, r0
 800f514:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) return res;
 800f516:	7ffb      	ldrb	r3, [r7, #31]
 800f518:	2b00      	cmp	r3, #0
 800f51a:	d001      	beq.n	800f520 <dir_find+0x24>
 800f51c:	7ffb      	ldrb	r3, [r7, #31]
 800f51e:	e112      	b.n	800f746 <dir_find+0x24a>
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800f520:	68fb      	ldr	r3, [r7, #12]
 800f522:	781b      	ldrb	r3, [r3, #0]
 800f524:	2b04      	cmp	r3, #4
 800f526:	d164      	bne.n	800f5f2 <dir_find+0xf6>
		BYTE nc;
		UINT di, ni;
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 800f528:	68fb      	ldr	r3, [r7, #12]
 800f52a:	691b      	ldr	r3, [r3, #16]
 800f52c:	4618      	mov	r0, r3
 800f52e:	f7ff fd2d 	bl	800ef8c <xname_sum>
 800f532:	4603      	mov	r3, r0
 800f534:	813b      	strh	r3, [r7, #8]

		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800f536:	e04f      	b.n	800f5d8 <dir_find+0xdc>
#if _MAX_LFN < 255
			if (fs->dirbuf[XDIR_NumName] > _MAX_LFN) continue;			/* Skip comparison if inaccessible object name */
#endif
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 800f538:	68fb      	ldr	r3, [r7, #12]
 800f53a:	695b      	ldr	r3, [r3, #20]
 800f53c:	3324      	adds	r3, #36	; 0x24
 800f53e:	4618      	mov	r0, r3
 800f540:	f7fd fe3e 	bl	800d1c0 <ld_word>
 800f544:	4603      	mov	r3, r0
 800f546:	461a      	mov	r2, r3
 800f548:	893b      	ldrh	r3, [r7, #8]
 800f54a:	4293      	cmp	r3, r2
 800f54c:	d000      	beq.n	800f550 <dir_find+0x54>
 800f54e:	e043      	b.n	800f5d8 <dir_find+0xdc>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800f550:	68fb      	ldr	r3, [r7, #12]
 800f552:	695b      	ldr	r3, [r3, #20]
 800f554:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800f558:	76fb      	strb	r3, [r7, #27]
 800f55a:	2340      	movs	r3, #64	; 0x40
 800f55c:	617b      	str	r3, [r7, #20]
 800f55e:	2300      	movs	r3, #0
 800f560:	613b      	str	r3, [r7, #16]
 800f562:	e029      	b.n	800f5b8 <dir_find+0xbc>
				if ((di % SZDIRE) == 0) di += 2;
 800f564:	697b      	ldr	r3, [r7, #20]
 800f566:	f003 031f 	and.w	r3, r3, #31
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d102      	bne.n	800f574 <dir_find+0x78>
 800f56e:	697b      	ldr	r3, [r7, #20]
 800f570:	3302      	adds	r3, #2
 800f572:	617b      	str	r3, [r7, #20]
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800f574:	68fb      	ldr	r3, [r7, #12]
 800f576:	695a      	ldr	r2, [r3, #20]
 800f578:	697b      	ldr	r3, [r7, #20]
 800f57a:	4413      	add	r3, r2
 800f57c:	4618      	mov	r0, r3
 800f57e:	f7fd fe1f 	bl	800d1c0 <ld_word>
 800f582:	4603      	mov	r3, r0
 800f584:	4618      	mov	r0, r3
 800f586:	f002 f8cd 	bl	8011724 <ff_wtoupper>
 800f58a:	4603      	mov	r3, r0
 800f58c:	461c      	mov	r4, r3
 800f58e:	68fb      	ldr	r3, [r7, #12]
 800f590:	691a      	ldr	r2, [r3, #16]
 800f592:	693b      	ldr	r3, [r7, #16]
 800f594:	005b      	lsls	r3, r3, #1
 800f596:	4413      	add	r3, r2
 800f598:	881b      	ldrh	r3, [r3, #0]
 800f59a:	4618      	mov	r0, r3
 800f59c:	f002 f8c2 	bl	8011724 <ff_wtoupper>
 800f5a0:	4603      	mov	r3, r0
 800f5a2:	429c      	cmp	r4, r3
 800f5a4:	d10c      	bne.n	800f5c0 <dir_find+0xc4>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800f5a6:	7efb      	ldrb	r3, [r7, #27]
 800f5a8:	3b01      	subs	r3, #1
 800f5aa:	76fb      	strb	r3, [r7, #27]
 800f5ac:	697b      	ldr	r3, [r7, #20]
 800f5ae:	3302      	adds	r3, #2
 800f5b0:	617b      	str	r3, [r7, #20]
 800f5b2:	693b      	ldr	r3, [r7, #16]
 800f5b4:	3301      	adds	r3, #1
 800f5b6:	613b      	str	r3, [r7, #16]
 800f5b8:	7efb      	ldrb	r3, [r7, #27]
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	d1d2      	bne.n	800f564 <dir_find+0x68>
 800f5be:	e000      	b.n	800f5c2 <dir_find+0xc6>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800f5c0:	bf00      	nop
			}
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800f5c2:	7efb      	ldrb	r3, [r7, #27]
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	d107      	bne.n	800f5d8 <dir_find+0xdc>
 800f5c8:	68fb      	ldr	r3, [r7, #12]
 800f5ca:	691a      	ldr	r2, [r3, #16]
 800f5cc:	693b      	ldr	r3, [r7, #16]
 800f5ce:	005b      	lsls	r3, r3, #1
 800f5d0:	4413      	add	r3, r2
 800f5d2:	881b      	ldrh	r3, [r3, #0]
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	d009      	beq.n	800f5ec <dir_find+0xf0>
		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800f5d8:	2100      	movs	r1, #0
 800f5da:	6878      	ldr	r0, [r7, #4]
 800f5dc:	f7ff fec7 	bl	800f36e <dir_read>
 800f5e0:	4603      	mov	r3, r0
 800f5e2:	77fb      	strb	r3, [r7, #31]
 800f5e4:	7ffb      	ldrb	r3, [r7, #31]
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	d0a6      	beq.n	800f538 <dir_find+0x3c>
 800f5ea:	e000      	b.n	800f5ee <dir_find+0xf2>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800f5ec:	bf00      	nop
		}
		return res;
 800f5ee:	7ffb      	ldrb	r3, [r7, #31]
 800f5f0:	e0a9      	b.n	800f746 <dir_find+0x24a>
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800f5f2:	23ff      	movs	r3, #255	; 0xff
 800f5f4:	773b      	strb	r3, [r7, #28]
 800f5f6:	7f3b      	ldrb	r3, [r7, #28]
 800f5f8:	777b      	strb	r3, [r7, #29]
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	f04f 32ff 	mov.w	r2, #4294967295
 800f600:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
	do {
		res = move_window(fs, dp->sect);
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f606:	4619      	mov	r1, r3
 800f608:	68f8      	ldr	r0, [r7, #12]
 800f60a:	f7fe f9fd 	bl	800da08 <move_window>
 800f60e:	4603      	mov	r3, r0
 800f610:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) break;
 800f612:	7ffb      	ldrb	r3, [r7, #31]
 800f614:	2b00      	cmp	r3, #0
 800f616:	f040 8090 	bne.w	800f73a <dir_find+0x23e>
		c = dp->dir[DIR_Name];
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f61e:	781b      	ldrb	r3, [r3, #0]
 800f620:	77bb      	strb	r3, [r7, #30]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800f622:	7fbb      	ldrb	r3, [r7, #30]
 800f624:	2b00      	cmp	r3, #0
 800f626:	d102      	bne.n	800f62e <dir_find+0x132>
 800f628:	2304      	movs	r3, #4
 800f62a:	77fb      	strb	r3, [r7, #31]
 800f62c:	e08a      	b.n	800f744 <dir_find+0x248>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f632:	330b      	adds	r3, #11
 800f634:	781b      	ldrb	r3, [r3, #0]
 800f636:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f63a:	72fb      	strb	r3, [r7, #11]
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	7afa      	ldrb	r2, [r7, #11]
 800f640:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800f642:	7fbb      	ldrb	r3, [r7, #30]
 800f644:	2be5      	cmp	r3, #229	; 0xe5
 800f646:	d007      	beq.n	800f658 <dir_find+0x15c>
 800f648:	7afb      	ldrb	r3, [r7, #11]
 800f64a:	f003 0308 	and.w	r3, r3, #8
 800f64e:	2b00      	cmp	r3, #0
 800f650:	d009      	beq.n	800f666 <dir_find+0x16a>
 800f652:	7afb      	ldrb	r3, [r7, #11]
 800f654:	2b0f      	cmp	r3, #15
 800f656:	d006      	beq.n	800f666 <dir_find+0x16a>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800f658:	23ff      	movs	r3, #255	; 0xff
 800f65a:	777b      	strb	r3, [r7, #29]
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	f04f 32ff 	mov.w	r2, #4294967295
 800f662:	64da      	str	r2, [r3, #76]	; 0x4c
 800f664:	e05e      	b.n	800f724 <dir_find+0x228>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800f666:	7afb      	ldrb	r3, [r7, #11]
 800f668:	2b0f      	cmp	r3, #15
 800f66a:	d136      	bne.n	800f6da <dir_find+0x1de>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800f672:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f676:	2b00      	cmp	r3, #0
 800f678:	d154      	bne.n	800f724 <dir_find+0x228>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800f67a:	7fbb      	ldrb	r3, [r7, #30]
 800f67c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f680:	2b00      	cmp	r3, #0
 800f682:	d00d      	beq.n	800f6a0 <dir_find+0x1a4>
						sum = dp->dir[LDIR_Chksum];
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f688:	7b5b      	ldrb	r3, [r3, #13]
 800f68a:	773b      	strb	r3, [r7, #28]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800f68c:	7fbb      	ldrb	r3, [r7, #30]
 800f68e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f692:	77bb      	strb	r3, [r7, #30]
 800f694:	7fbb      	ldrb	r3, [r7, #30]
 800f696:	777b      	strb	r3, [r7, #29]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800f6a0:	7fba      	ldrb	r2, [r7, #30]
 800f6a2:	7f7b      	ldrb	r3, [r7, #29]
 800f6a4:	429a      	cmp	r2, r3
 800f6a6:	d115      	bne.n	800f6d4 <dir_find+0x1d8>
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f6ac:	330d      	adds	r3, #13
 800f6ae:	781b      	ldrb	r3, [r3, #0]
 800f6b0:	7f3a      	ldrb	r2, [r7, #28]
 800f6b2:	429a      	cmp	r2, r3
 800f6b4:	d10e      	bne.n	800f6d4 <dir_find+0x1d8>
 800f6b6:	68fb      	ldr	r3, [r7, #12]
 800f6b8:	691a      	ldr	r2, [r3, #16]
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f6be:	4619      	mov	r1, r3
 800f6c0:	4610      	mov	r0, r2
 800f6c2:	f7ff fa43 	bl	800eb4c <cmp_lfn>
 800f6c6:	4603      	mov	r3, r0
 800f6c8:	2b00      	cmp	r3, #0
 800f6ca:	d003      	beq.n	800f6d4 <dir_find+0x1d8>
 800f6cc:	7f7b      	ldrb	r3, [r7, #29]
 800f6ce:	3b01      	subs	r3, #1
 800f6d0:	b2db      	uxtb	r3, r3
 800f6d2:	e000      	b.n	800f6d6 <dir_find+0x1da>
 800f6d4:	23ff      	movs	r3, #255	; 0xff
 800f6d6:	777b      	strb	r3, [r7, #29]
 800f6d8:	e024      	b.n	800f724 <dir_find+0x228>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800f6da:	7f7b      	ldrb	r3, [r7, #29]
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d109      	bne.n	800f6f4 <dir_find+0x1f8>
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f6e4:	4618      	mov	r0, r3
 800f6e6:	f7ff fbfd 	bl	800eee4 <sum_sfn>
 800f6ea:	4603      	mov	r3, r0
 800f6ec:	461a      	mov	r2, r3
 800f6ee:	7f3b      	ldrb	r3, [r7, #28]
 800f6f0:	4293      	cmp	r3, r2
 800f6f2:	d024      	beq.n	800f73e <dir_find+0x242>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800f6fa:	f003 0301 	and.w	r3, r3, #1
 800f6fe:	2b00      	cmp	r3, #0
 800f700:	d10a      	bne.n	800f718 <dir_find+0x21c>
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	3340      	adds	r3, #64	; 0x40
 800f70a:	220b      	movs	r2, #11
 800f70c:	4619      	mov	r1, r3
 800f70e:	f7fd ff58 	bl	800d5c2 <mem_cmp>
 800f712:	4603      	mov	r3, r0
 800f714:	2b00      	cmp	r3, #0
 800f716:	d014      	beq.n	800f742 <dir_find+0x246>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800f718:	23ff      	movs	r3, #255	; 0xff
 800f71a:	777b      	strb	r3, [r7, #29]
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	f04f 32ff 	mov.w	r2, #4294967295
 800f722:	64da      	str	r2, [r3, #76]	; 0x4c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800f724:	2100      	movs	r1, #0
 800f726:	6878      	ldr	r0, [r7, #4]
 800f728:	f7ff f88e 	bl	800e848 <dir_next>
 800f72c:	4603      	mov	r3, r0
 800f72e:	77fb      	strb	r3, [r7, #31]
	} while (res == FR_OK);
 800f730:	7ffb      	ldrb	r3, [r7, #31]
 800f732:	2b00      	cmp	r3, #0
 800f734:	f43f af65 	beq.w	800f602 <dir_find+0x106>
 800f738:	e004      	b.n	800f744 <dir_find+0x248>
		if (res != FR_OK) break;
 800f73a:	bf00      	nop
 800f73c:	e002      	b.n	800f744 <dir_find+0x248>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800f73e:	bf00      	nop
 800f740:	e000      	b.n	800f744 <dir_find+0x248>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800f742:	bf00      	nop

	return res;
 800f744:	7ffb      	ldrb	r3, [r7, #31]
}
 800f746:	4618      	mov	r0, r3
 800f748:	3724      	adds	r7, #36	; 0x24
 800f74a:	46bd      	mov	sp, r7
 800f74c:	bd90      	pop	{r4, r7, pc}
	...

0800f750 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800f750:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800f754:	b0a0      	sub	sp, #128	; 0x80
 800f756:	af00      	add	r7, sp, #0
 800f758:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	681b      	ldr	r3, [r3, #0]
 800f75e:	66fb      	str	r3, [r7, #108]	; 0x6c
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800f766:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	d001      	beq.n	800f772 <dir_register+0x22>
 800f76e:	2306      	movs	r3, #6
 800f770:	e198      	b.n	800faa4 <dir_register+0x354>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800f772:	2300      	movs	r3, #0
 800f774:	677b      	str	r3, [r7, #116]	; 0x74
 800f776:	e002      	b.n	800f77e <dir_register+0x2e>
 800f778:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f77a:	3301      	adds	r3, #1
 800f77c:	677b      	str	r3, [r7, #116]	; 0x74
 800f77e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f780:	691a      	ldr	r2, [r3, #16]
 800f782:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f784:	005b      	lsls	r3, r3, #1
 800f786:	4413      	add	r3, r2
 800f788:	881b      	ldrh	r3, [r3, #0]
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d1f4      	bne.n	800f778 <dir_register+0x28>

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800f78e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f790:	781b      	ldrb	r3, [r3, #0]
 800f792:	2b04      	cmp	r3, #4
 800f794:	f040 80a9 	bne.w	800f8ea <dir_register+0x19a>
		DIR dj;

		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 800f798:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f79a:	330e      	adds	r3, #14
 800f79c:	4aa7      	ldr	r2, [pc, #668]	; (800fa3c <dir_register+0x2ec>)
 800f79e:	fba2 2303 	umull	r2, r3, r2, r3
 800f7a2:	08db      	lsrs	r3, r3, #3
 800f7a4:	3302      	adds	r3, #2
 800f7a6:	673b      	str	r3, [r7, #112]	; 0x70
		res = dir_alloc(dp, nent);		/* Allocate entries */
 800f7a8:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800f7aa:	6878      	ldr	r0, [r7, #4]
 800f7ac:	f7ff f932 	bl	800ea14 <dir_alloc>
 800f7b0:	4603      	mov	r3, r0
 800f7b2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res != FR_OK) return res;
 800f7b6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	d002      	beq.n	800f7c4 <dir_register+0x74>
 800f7be:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f7c2:	e16f      	b.n	800faa4 <dir_register+0x354>
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f7c8:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800f7ca:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
 800f7ce:	440b      	add	r3, r1
 800f7d0:	015b      	lsls	r3, r3, #5
 800f7d2:	1ad2      	subs	r2, r2, r3
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	64da      	str	r2, [r3, #76]	; 0x4c

		if (dp->obj.sclust != 0 && (dp->obj.stat & 4)) {	/* Has the sub-directory been stretched? */
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	689b      	ldr	r3, [r3, #8]
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	d07a      	beq.n	800f8d6 <dir_register+0x186>
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	79db      	ldrb	r3, [r3, #7]
 800f7e4:	f003 0304 	and.w	r3, r3, #4
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	d074      	beq.n	800f8d6 <dir_register+0x186>
			dp->obj.objsize += (DWORD)fs->csize * SS(fs);	/* Increase the directory size by cluster size */
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
 800f7f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f7f4:	895b      	ldrh	r3, [r3, #10]
 800f7f6:	4618      	mov	r0, r3
 800f7f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f7fa:	899b      	ldrh	r3, [r3, #12]
 800f7fc:	fb03 f300 	mul.w	r3, r3, r0
 800f800:	469b      	mov	fp, r3
 800f802:	f04f 0c00 	mov.w	ip, #0
 800f806:	eb1b 0301 	adds.w	r3, fp, r1
 800f80a:	eb4c 0402 	adc.w	r4, ip, r2
 800f80e:	687a      	ldr	r2, [r7, #4]
 800f810:	e9c2 3404 	strd	r3, r4, [r2, #16]
			res = fill_first_frag(&dp->obj);				/* Fill first fragment on the FAT if needed */
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	4618      	mov	r0, r3
 800f818:	f7fe fd26 	bl	800e268 <fill_first_frag>
 800f81c:	4603      	mov	r3, r0
 800f81e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800f822:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f826:	2b00      	cmp	r3, #0
 800f828:	d002      	beq.n	800f830 <dir_register+0xe0>
 800f82a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f82e:	e139      	b.n	800faa4 <dir_register+0x354>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800f830:	6878      	ldr	r0, [r7, #4]
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f836:	f04f 32ff 	mov.w	r2, #4294967295
 800f83a:	4619      	mov	r1, r3
 800f83c:	f7fe fd43 	bl	800e2c6 <fill_last_frag>
 800f840:	4603      	mov	r3, r0
 800f842:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800f846:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f84a:	2b00      	cmp	r3, #0
 800f84c:	d002      	beq.n	800f854 <dir_register+0x104>
 800f84e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f852:	e127      	b.n	800faa4 <dir_register+0x354>
			res = load_obj_dir(&dj, &dp->obj);				/* Load the object status */
 800f854:	687a      	ldr	r2, [r7, #4]
 800f856:	f107 0308 	add.w	r3, r7, #8
 800f85a:	4611      	mov	r1, r2
 800f85c:	4618      	mov	r0, r3
 800f85e:	f7ff fc87 	bl	800f170 <load_obj_dir>
 800f862:	4603      	mov	r3, r0
 800f864:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800f868:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	d002      	beq.n	800f876 <dir_register+0x126>
 800f870:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f874:	e116      	b.n	800faa4 <dir_register+0x354>
			st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);		/* Update the allocation status */
 800f876:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f878:	695b      	ldr	r3, [r3, #20]
 800f87a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800f884:	461a      	mov	r2, r3
 800f886:	4623      	mov	r3, r4
 800f888:	4608      	mov	r0, r1
 800f88a:	f7fd fdd8 	bl	800d43e <st_qword>
			st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 800f88e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f890:	695b      	ldr	r3, [r3, #20]
 800f892:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800f89c:	461a      	mov	r2, r3
 800f89e:	4623      	mov	r3, r4
 800f8a0:	4608      	mov	r0, r1
 800f8a2:	f7fd fdcc 	bl	800d43e <st_qword>
			fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	79da      	ldrb	r2, [r3, #7]
 800f8aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f8ac:	695b      	ldr	r3, [r3, #20]
 800f8ae:	3321      	adds	r3, #33	; 0x21
 800f8b0:	f042 0201 	orr.w	r2, r2, #1
 800f8b4:	b2d2      	uxtb	r2, r2
 800f8b6:	701a      	strb	r2, [r3, #0]
			res = store_xdir(&dj);							/* Store the object status */
 800f8b8:	f107 0308 	add.w	r3, r7, #8
 800f8bc:	4618      	mov	r0, r3
 800f8be:	f7ff fc94 	bl	800f1ea <store_xdir>
 800f8c2:	4603      	mov	r3, r0
 800f8c4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800f8c8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f8cc:	2b00      	cmp	r3, #0
 800f8ce:	d002      	beq.n	800f8d6 <dir_register+0x186>
 800f8d0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f8d4:	e0e6      	b.n	800faa4 <dir_register+0x354>
		}

		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 800f8d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f8d8:	695a      	ldr	r2, [r3, #20]
 800f8da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f8dc:	691b      	ldr	r3, [r3, #16]
 800f8de:	4619      	mov	r1, r3
 800f8e0:	4610      	mov	r0, r2
 800f8e2:	f7ff fcdd 	bl	800f2a0 <create_xdir>
		return FR_OK;
 800f8e6:	2300      	movs	r3, #0
 800f8e8:	e0dc      	b.n	800faa4 <dir_register+0x354>
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800f8f0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800f8f4:	220c      	movs	r2, #12
 800f8f6:	4618      	mov	r0, r3
 800f8f8:	f7fd fe28 	bl	800d54c <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800f8fc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f900:	f003 0301 	and.w	r3, r3, #1
 800f904:	2b00      	cmp	r3, #0
 800f906:	d033      	beq.n	800f970 <dir_register+0x220>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	2240      	movs	r2, #64	; 0x40
 800f90c:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		for (n = 1; n < 100; n++) {
 800f910:	2301      	movs	r3, #1
 800f912:	67bb      	str	r3, [r7, #120]	; 0x78
 800f914:	e016      	b.n	800f944 <dir_register+0x1f4>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800f91c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f91e:	691a      	ldr	r2, [r3, #16]
 800f920:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 800f924:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f926:	f7ff fa4d 	bl	800edc4 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800f92a:	6878      	ldr	r0, [r7, #4]
 800f92c:	f7ff fde6 	bl	800f4fc <dir_find>
 800f930:	4603      	mov	r3, r0
 800f932:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) break;
 800f936:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f93a:	2b00      	cmp	r3, #0
 800f93c:	d106      	bne.n	800f94c <dir_register+0x1fc>
		for (n = 1; n < 100; n++) {
 800f93e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f940:	3301      	adds	r3, #1
 800f942:	67bb      	str	r3, [r7, #120]	; 0x78
 800f944:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f946:	2b63      	cmp	r3, #99	; 0x63
 800f948:	d9e5      	bls.n	800f916 <dir_register+0x1c6>
 800f94a:	e000      	b.n	800f94e <dir_register+0x1fe>
			if (res != FR_OK) break;
 800f94c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800f94e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f950:	2b64      	cmp	r3, #100	; 0x64
 800f952:	d101      	bne.n	800f958 <dir_register+0x208>
 800f954:	2307      	movs	r3, #7
 800f956:	e0a5      	b.n	800faa4 <dir_register+0x354>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800f958:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f95c:	2b04      	cmp	r3, #4
 800f95e:	d002      	beq.n	800f966 <dir_register+0x216>
 800f960:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f964:	e09e      	b.n	800faa4 <dir_register+0x354>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800f966:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800f970:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f974:	f003 0302 	and.w	r3, r3, #2
 800f978:	2b00      	cmp	r3, #0
 800f97a:	d007      	beq.n	800f98c <dir_register+0x23c>
 800f97c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f97e:	330c      	adds	r3, #12
 800f980:	4a2f      	ldr	r2, [pc, #188]	; (800fa40 <dir_register+0x2f0>)
 800f982:	fba2 2303 	umull	r2, r3, r2, r3
 800f986:	089b      	lsrs	r3, r3, #2
 800f988:	3301      	adds	r3, #1
 800f98a:	e000      	b.n	800f98e <dir_register+0x23e>
 800f98c:	2301      	movs	r3, #1
 800f98e:	673b      	str	r3, [r7, #112]	; 0x70
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800f990:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800f992:	6878      	ldr	r0, [r7, #4]
 800f994:	f7ff f83e 	bl	800ea14 <dir_alloc>
 800f998:	4603      	mov	r3, r0
 800f99a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800f99e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	d14f      	bne.n	800fa46 <dir_register+0x2f6>
 800f9a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f9a8:	3b01      	subs	r3, #1
 800f9aa:	673b      	str	r3, [r7, #112]	; 0x70
 800f9ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	d049      	beq.n	800fa46 <dir_register+0x2f6>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f9b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f9b8:	015b      	lsls	r3, r3, #5
 800f9ba:	1ad3      	subs	r3, r2, r3
 800f9bc:	4619      	mov	r1, r3
 800f9be:	6878      	ldr	r0, [r7, #4]
 800f9c0:	f7fe feae 	bl	800e720 <dir_sdi>
 800f9c4:	4603      	mov	r3, r0
 800f9c6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 800f9ca:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	d139      	bne.n	800fa46 <dir_register+0x2f6>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	3340      	adds	r3, #64	; 0x40
 800f9d6:	4618      	mov	r0, r3
 800f9d8:	f7ff fa84 	bl	800eee4 <sum_sfn>
 800f9dc:	4603      	mov	r3, r0
 800f9de:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f9e6:	4619      	mov	r1, r3
 800f9e8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800f9ea:	f7fe f80d 	bl	800da08 <move_window>
 800f9ee:	4603      	mov	r3, r0
 800f9f0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (res != FR_OK) break;
 800f9f4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f9f8:	2b00      	cmp	r3, #0
 800f9fa:	d123      	bne.n	800fa44 <dir_register+0x2f4>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800f9fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f9fe:	6918      	ldr	r0, [r3, #16]
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800fa04:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fa06:	b2da      	uxtb	r2, r3
 800fa08:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800fa0c:	f7ff f972 	bl	800ecf4 <put_lfn>
				fs->wflag = 1;
 800fa10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fa12:	2201      	movs	r2, #1
 800fa14:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800fa16:	2100      	movs	r1, #0
 800fa18:	6878      	ldr	r0, [r7, #4]
 800fa1a:	f7fe ff15 	bl	800e848 <dir_next>
 800fa1e:	4603      	mov	r3, r0
 800fa20:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			} while (res == FR_OK && --nent);
 800fa24:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	d10c      	bne.n	800fa46 <dir_register+0x2f6>
 800fa2c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fa2e:	3b01      	subs	r3, #1
 800fa30:	673b      	str	r3, [r7, #112]	; 0x70
 800fa32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	d1d4      	bne.n	800f9e2 <dir_register+0x292>
 800fa38:	e005      	b.n	800fa46 <dir_register+0x2f6>
 800fa3a:	bf00      	nop
 800fa3c:	88888889 	.word	0x88888889
 800fa40:	4ec4ec4f 	.word	0x4ec4ec4f
				if (res != FR_OK) break;
 800fa44:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800fa46:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	d128      	bne.n	800faa0 <dir_register+0x350>
		res = move_window(fs, dp->sect);
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa52:	4619      	mov	r1, r3
 800fa54:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800fa56:	f7fd ffd7 	bl	800da08 <move_window>
 800fa5a:	4603      	mov	r3, r0
 800fa5c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 800fa60:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	d11b      	bne.n	800faa0 <dir_register+0x350>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fa6c:	2220      	movs	r2, #32
 800fa6e:	2100      	movs	r1, #0
 800fa70:	4618      	mov	r0, r3
 800fa72:	f7fd fd8c 	bl	800d58e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	3340      	adds	r3, #64	; 0x40
 800fa7e:	220b      	movs	r2, #11
 800fa80:	4619      	mov	r1, r3
 800fa82:	f7fd fd63 	bl	800d54c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fa90:	330c      	adds	r3, #12
 800fa92:	f002 0218 	and.w	r2, r2, #24
 800fa96:	b2d2      	uxtb	r2, r2
 800fa98:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800fa9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fa9c:	2201      	movs	r2, #1
 800fa9e:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800faa0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800faa4:	4618      	mov	r0, r3
 800faa6:	3780      	adds	r7, #128	; 0x80
 800faa8:	46bd      	mov	sp, r7
 800faaa:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800faae:	bf00      	nop

0800fab0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800fab0:	b580      	push	{r7, lr}
 800fab2:	b08a      	sub	sp, #40	; 0x28
 800fab4:	af00      	add	r7, sp, #0
 800fab6:	6078      	str	r0, [r7, #4]
 800fab8:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800faba:	683b      	ldr	r3, [r7, #0]
 800fabc:	681b      	ldr	r3, [r3, #0]
 800fabe:	613b      	str	r3, [r7, #16]
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	681b      	ldr	r3, [r3, #0]
 800fac4:	691b      	ldr	r3, [r3, #16]
 800fac6:	60fb      	str	r3, [r7, #12]
 800fac8:	2300      	movs	r3, #0
 800faca:	617b      	str	r3, [r7, #20]
 800facc:	697b      	ldr	r3, [r7, #20]
 800face:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800fad0:	69bb      	ldr	r3, [r7, #24]
 800fad2:	1c5a      	adds	r2, r3, #1
 800fad4:	61ba      	str	r2, [r7, #24]
 800fad6:	693a      	ldr	r2, [r7, #16]
 800fad8:	4413      	add	r3, r2
 800fada:	781b      	ldrb	r3, [r3, #0]
 800fadc:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800fade:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fae0:	2b1f      	cmp	r3, #31
 800fae2:	d940      	bls.n	800fb66 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800fae4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fae6:	2b2f      	cmp	r3, #47	; 0x2f
 800fae8:	d006      	beq.n	800faf8 <create_name+0x48>
 800faea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800faec:	2b5c      	cmp	r3, #92	; 0x5c
 800faee:	d110      	bne.n	800fb12 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800faf0:	e002      	b.n	800faf8 <create_name+0x48>
 800faf2:	69bb      	ldr	r3, [r7, #24]
 800faf4:	3301      	adds	r3, #1
 800faf6:	61bb      	str	r3, [r7, #24]
 800faf8:	693a      	ldr	r2, [r7, #16]
 800fafa:	69bb      	ldr	r3, [r7, #24]
 800fafc:	4413      	add	r3, r2
 800fafe:	781b      	ldrb	r3, [r3, #0]
 800fb00:	2b2f      	cmp	r3, #47	; 0x2f
 800fb02:	d0f6      	beq.n	800faf2 <create_name+0x42>
 800fb04:	693a      	ldr	r2, [r7, #16]
 800fb06:	69bb      	ldr	r3, [r7, #24]
 800fb08:	4413      	add	r3, r2
 800fb0a:	781b      	ldrb	r3, [r3, #0]
 800fb0c:	2b5c      	cmp	r3, #92	; 0x5c
 800fb0e:	d0f0      	beq.n	800faf2 <create_name+0x42>
			break;
 800fb10:	e02a      	b.n	800fb68 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800fb12:	697b      	ldr	r3, [r7, #20]
 800fb14:	2bfe      	cmp	r3, #254	; 0xfe
 800fb16:	d901      	bls.n	800fb1c <create_name+0x6c>
 800fb18:	2306      	movs	r3, #6
 800fb1a:	e177      	b.n	800fe0c <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 800fb1c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fb1e:	b2db      	uxtb	r3, r3
 800fb20:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800fb22:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fb24:	2101      	movs	r1, #1
 800fb26:	4618      	mov	r0, r3
 800fb28:	f001 fdc0 	bl	80116ac <ff_convert>
 800fb2c:	4603      	mov	r3, r0
 800fb2e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800fb30:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	d101      	bne.n	800fb3a <create_name+0x8a>
 800fb36:	2306      	movs	r3, #6
 800fb38:	e168      	b.n	800fe0c <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800fb3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fb3c:	2b7f      	cmp	r3, #127	; 0x7f
 800fb3e:	d809      	bhi.n	800fb54 <create_name+0xa4>
 800fb40:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fb42:	4619      	mov	r1, r3
 800fb44:	48b3      	ldr	r0, [pc, #716]	; (800fe14 <create_name+0x364>)
 800fb46:	f7fd fd63 	bl	800d610 <chk_chr>
 800fb4a:	4603      	mov	r3, r0
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	d001      	beq.n	800fb54 <create_name+0xa4>
 800fb50:	2306      	movs	r3, #6
 800fb52:	e15b      	b.n	800fe0c <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 800fb54:	697b      	ldr	r3, [r7, #20]
 800fb56:	1c5a      	adds	r2, r3, #1
 800fb58:	617a      	str	r2, [r7, #20]
 800fb5a:	005b      	lsls	r3, r3, #1
 800fb5c:	68fa      	ldr	r2, [r7, #12]
 800fb5e:	4413      	add	r3, r2
 800fb60:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800fb62:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800fb64:	e7b4      	b.n	800fad0 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800fb66:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800fb68:	693a      	ldr	r2, [r7, #16]
 800fb6a:	69bb      	ldr	r3, [r7, #24]
 800fb6c:	441a      	add	r2, r3
 800fb6e:	683b      	ldr	r3, [r7, #0]
 800fb70:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800fb72:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fb74:	2b1f      	cmp	r3, #31
 800fb76:	d801      	bhi.n	800fb7c <create_name+0xcc>
 800fb78:	2304      	movs	r3, #4
 800fb7a:	e000      	b.n	800fb7e <create_name+0xce>
 800fb7c:	2300      	movs	r3, #0
 800fb7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800fb82:	e011      	b.n	800fba8 <create_name+0xf8>
		w = lfn[di - 1];
 800fb84:	697a      	ldr	r2, [r7, #20]
 800fb86:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800fb8a:	4413      	add	r3, r2
 800fb8c:	005b      	lsls	r3, r3, #1
 800fb8e:	68fa      	ldr	r2, [r7, #12]
 800fb90:	4413      	add	r3, r2
 800fb92:	881b      	ldrh	r3, [r3, #0]
 800fb94:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800fb96:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fb98:	2b20      	cmp	r3, #32
 800fb9a:	d002      	beq.n	800fba2 <create_name+0xf2>
 800fb9c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fb9e:	2b2e      	cmp	r3, #46	; 0x2e
 800fba0:	d106      	bne.n	800fbb0 <create_name+0x100>
		di--;
 800fba2:	697b      	ldr	r3, [r7, #20]
 800fba4:	3b01      	subs	r3, #1
 800fba6:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800fba8:	697b      	ldr	r3, [r7, #20]
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	d1ea      	bne.n	800fb84 <create_name+0xd4>
 800fbae:	e000      	b.n	800fbb2 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800fbb0:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800fbb2:	697b      	ldr	r3, [r7, #20]
 800fbb4:	005b      	lsls	r3, r3, #1
 800fbb6:	68fa      	ldr	r2, [r7, #12]
 800fbb8:	4413      	add	r3, r2
 800fbba:	2200      	movs	r2, #0
 800fbbc:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800fbbe:	697b      	ldr	r3, [r7, #20]
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	d101      	bne.n	800fbc8 <create_name+0x118>
 800fbc4:	2306      	movs	r3, #6
 800fbc6:	e121      	b.n	800fe0c <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	3340      	adds	r3, #64	; 0x40
 800fbcc:	220b      	movs	r2, #11
 800fbce:	2120      	movs	r1, #32
 800fbd0:	4618      	mov	r0, r3
 800fbd2:	f7fd fcdc 	bl	800d58e <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800fbd6:	2300      	movs	r3, #0
 800fbd8:	61bb      	str	r3, [r7, #24]
 800fbda:	e002      	b.n	800fbe2 <create_name+0x132>
 800fbdc:	69bb      	ldr	r3, [r7, #24]
 800fbde:	3301      	adds	r3, #1
 800fbe0:	61bb      	str	r3, [r7, #24]
 800fbe2:	69bb      	ldr	r3, [r7, #24]
 800fbe4:	005b      	lsls	r3, r3, #1
 800fbe6:	68fa      	ldr	r2, [r7, #12]
 800fbe8:	4413      	add	r3, r2
 800fbea:	881b      	ldrh	r3, [r3, #0]
 800fbec:	2b20      	cmp	r3, #32
 800fbee:	d0f5      	beq.n	800fbdc <create_name+0x12c>
 800fbf0:	69bb      	ldr	r3, [r7, #24]
 800fbf2:	005b      	lsls	r3, r3, #1
 800fbf4:	68fa      	ldr	r2, [r7, #12]
 800fbf6:	4413      	add	r3, r2
 800fbf8:	881b      	ldrh	r3, [r3, #0]
 800fbfa:	2b2e      	cmp	r3, #46	; 0x2e
 800fbfc:	d0ee      	beq.n	800fbdc <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800fbfe:	69bb      	ldr	r3, [r7, #24]
 800fc00:	2b00      	cmp	r3, #0
 800fc02:	d009      	beq.n	800fc18 <create_name+0x168>
 800fc04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fc08:	f043 0303 	orr.w	r3, r3, #3
 800fc0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800fc10:	e002      	b.n	800fc18 <create_name+0x168>
 800fc12:	697b      	ldr	r3, [r7, #20]
 800fc14:	3b01      	subs	r3, #1
 800fc16:	617b      	str	r3, [r7, #20]
 800fc18:	697b      	ldr	r3, [r7, #20]
 800fc1a:	2b00      	cmp	r3, #0
 800fc1c:	d009      	beq.n	800fc32 <create_name+0x182>
 800fc1e:	697a      	ldr	r2, [r7, #20]
 800fc20:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800fc24:	4413      	add	r3, r2
 800fc26:	005b      	lsls	r3, r3, #1
 800fc28:	68fa      	ldr	r2, [r7, #12]
 800fc2a:	4413      	add	r3, r2
 800fc2c:	881b      	ldrh	r3, [r3, #0]
 800fc2e:	2b2e      	cmp	r3, #46	; 0x2e
 800fc30:	d1ef      	bne.n	800fc12 <create_name+0x162>

	i = b = 0; ni = 8;
 800fc32:	2300      	movs	r3, #0
 800fc34:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800fc38:	2300      	movs	r3, #0
 800fc3a:	623b      	str	r3, [r7, #32]
 800fc3c:	2308      	movs	r3, #8
 800fc3e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800fc40:	69bb      	ldr	r3, [r7, #24]
 800fc42:	1c5a      	adds	r2, r3, #1
 800fc44:	61ba      	str	r2, [r7, #24]
 800fc46:	005b      	lsls	r3, r3, #1
 800fc48:	68fa      	ldr	r2, [r7, #12]
 800fc4a:	4413      	add	r3, r2
 800fc4c:	881b      	ldrh	r3, [r3, #0]
 800fc4e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800fc50:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fc52:	2b00      	cmp	r3, #0
 800fc54:	f000 8090 	beq.w	800fd78 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800fc58:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fc5a:	2b20      	cmp	r3, #32
 800fc5c:	d006      	beq.n	800fc6c <create_name+0x1bc>
 800fc5e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fc60:	2b2e      	cmp	r3, #46	; 0x2e
 800fc62:	d10a      	bne.n	800fc7a <create_name+0x1ca>
 800fc64:	69ba      	ldr	r2, [r7, #24]
 800fc66:	697b      	ldr	r3, [r7, #20]
 800fc68:	429a      	cmp	r2, r3
 800fc6a:	d006      	beq.n	800fc7a <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800fc6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fc70:	f043 0303 	orr.w	r3, r3, #3
 800fc74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fc78:	e07d      	b.n	800fd76 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800fc7a:	6a3a      	ldr	r2, [r7, #32]
 800fc7c:	69fb      	ldr	r3, [r7, #28]
 800fc7e:	429a      	cmp	r2, r3
 800fc80:	d203      	bcs.n	800fc8a <create_name+0x1da>
 800fc82:	69ba      	ldr	r2, [r7, #24]
 800fc84:	697b      	ldr	r3, [r7, #20]
 800fc86:	429a      	cmp	r2, r3
 800fc88:	d123      	bne.n	800fcd2 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800fc8a:	69fb      	ldr	r3, [r7, #28]
 800fc8c:	2b0b      	cmp	r3, #11
 800fc8e:	d106      	bne.n	800fc9e <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800fc90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fc94:	f043 0303 	orr.w	r3, r3, #3
 800fc98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fc9c:	e06f      	b.n	800fd7e <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800fc9e:	69ba      	ldr	r2, [r7, #24]
 800fca0:	697b      	ldr	r3, [r7, #20]
 800fca2:	429a      	cmp	r2, r3
 800fca4:	d005      	beq.n	800fcb2 <create_name+0x202>
 800fca6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fcaa:	f043 0303 	orr.w	r3, r3, #3
 800fcae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800fcb2:	69ba      	ldr	r2, [r7, #24]
 800fcb4:	697b      	ldr	r3, [r7, #20]
 800fcb6:	429a      	cmp	r2, r3
 800fcb8:	d860      	bhi.n	800fd7c <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800fcba:	697b      	ldr	r3, [r7, #20]
 800fcbc:	61bb      	str	r3, [r7, #24]
 800fcbe:	2308      	movs	r3, #8
 800fcc0:	623b      	str	r3, [r7, #32]
 800fcc2:	230b      	movs	r3, #11
 800fcc4:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800fcc6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fcca:	009b      	lsls	r3, r3, #2
 800fccc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800fcd0:	e051      	b.n	800fd76 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800fcd2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fcd4:	2b7f      	cmp	r3, #127	; 0x7f
 800fcd6:	d914      	bls.n	800fd02 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800fcd8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fcda:	2100      	movs	r1, #0
 800fcdc:	4618      	mov	r0, r3
 800fcde:	f001 fce5 	bl	80116ac <ff_convert>
 800fce2:	4603      	mov	r3, r0
 800fce4:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800fce6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	d004      	beq.n	800fcf6 <create_name+0x246>
 800fcec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fcee:	3b80      	subs	r3, #128	; 0x80
 800fcf0:	4a49      	ldr	r2, [pc, #292]	; (800fe18 <create_name+0x368>)
 800fcf2:	5cd3      	ldrb	r3, [r2, r3]
 800fcf4:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800fcf6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fcfa:	f043 0302 	orr.w	r3, r3, #2
 800fcfe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800fd02:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	d007      	beq.n	800fd18 <create_name+0x268>
 800fd08:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fd0a:	4619      	mov	r1, r3
 800fd0c:	4843      	ldr	r0, [pc, #268]	; (800fe1c <create_name+0x36c>)
 800fd0e:	f7fd fc7f 	bl	800d610 <chk_chr>
 800fd12:	4603      	mov	r3, r0
 800fd14:	2b00      	cmp	r3, #0
 800fd16:	d008      	beq.n	800fd2a <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800fd18:	235f      	movs	r3, #95	; 0x5f
 800fd1a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800fd1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fd20:	f043 0303 	orr.w	r3, r3, #3
 800fd24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fd28:	e01b      	b.n	800fd62 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800fd2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fd2c:	2b40      	cmp	r3, #64	; 0x40
 800fd2e:	d909      	bls.n	800fd44 <create_name+0x294>
 800fd30:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fd32:	2b5a      	cmp	r3, #90	; 0x5a
 800fd34:	d806      	bhi.n	800fd44 <create_name+0x294>
					b |= 2;
 800fd36:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fd3a:	f043 0302 	orr.w	r3, r3, #2
 800fd3e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800fd42:	e00e      	b.n	800fd62 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800fd44:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fd46:	2b60      	cmp	r3, #96	; 0x60
 800fd48:	d90b      	bls.n	800fd62 <create_name+0x2b2>
 800fd4a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fd4c:	2b7a      	cmp	r3, #122	; 0x7a
 800fd4e:	d808      	bhi.n	800fd62 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800fd50:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fd54:	f043 0301 	orr.w	r3, r3, #1
 800fd58:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800fd5c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fd5e:	3b20      	subs	r3, #32
 800fd60:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800fd62:	6a3b      	ldr	r3, [r7, #32]
 800fd64:	1c5a      	adds	r2, r3, #1
 800fd66:	623a      	str	r2, [r7, #32]
 800fd68:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800fd6a:	b2d1      	uxtb	r1, r2
 800fd6c:	687a      	ldr	r2, [r7, #4]
 800fd6e:	4413      	add	r3, r2
 800fd70:	460a      	mov	r2, r1
 800fd72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		w = lfn[si++];					/* Get an LFN character */
 800fd76:	e763      	b.n	800fc40 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800fd78:	bf00      	nop
 800fd7a:	e000      	b.n	800fd7e <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 800fd7c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fd84:	2be5      	cmp	r3, #229	; 0xe5
 800fd86:	d103      	bne.n	800fd90 <create_name+0x2e0>
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	2205      	movs	r2, #5
 800fd8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	if (ni == 8) b <<= 2;
 800fd90:	69fb      	ldr	r3, [r7, #28]
 800fd92:	2b08      	cmp	r3, #8
 800fd94:	d104      	bne.n	800fda0 <create_name+0x2f0>
 800fd96:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fd9a:	009b      	lsls	r3, r3, #2
 800fd9c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800fda0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fda4:	f003 030c 	and.w	r3, r3, #12
 800fda8:	2b0c      	cmp	r3, #12
 800fdaa:	d005      	beq.n	800fdb8 <create_name+0x308>
 800fdac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fdb0:	f003 0303 	and.w	r3, r3, #3
 800fdb4:	2b03      	cmp	r3, #3
 800fdb6:	d105      	bne.n	800fdc4 <create_name+0x314>
 800fdb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fdbc:	f043 0302 	orr.w	r3, r3, #2
 800fdc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800fdc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fdc8:	f003 0302 	and.w	r3, r3, #2
 800fdcc:	2b00      	cmp	r3, #0
 800fdce:	d117      	bne.n	800fe00 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800fdd0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fdd4:	f003 0303 	and.w	r3, r3, #3
 800fdd8:	2b01      	cmp	r3, #1
 800fdda:	d105      	bne.n	800fde8 <create_name+0x338>
 800fddc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fde0:	f043 0310 	orr.w	r3, r3, #16
 800fde4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800fde8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fdec:	f003 030c 	and.w	r3, r3, #12
 800fdf0:	2b04      	cmp	r3, #4
 800fdf2:	d105      	bne.n	800fe00 <create_name+0x350>
 800fdf4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fdf8:	f043 0308 	orr.w	r3, r3, #8
 800fdfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800fe06:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b

	return FR_OK;
 800fe0a:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800fe0c:	4618      	mov	r0, r3
 800fe0e:	3728      	adds	r7, #40	; 0x28
 800fe10:	46bd      	mov	sp, r7
 800fe12:	bd80      	pop	{r7, pc}
 800fe14:	08016008 	.word	0x08016008
 800fe18:	08016110 	.word	0x08016110
 800fe1c:	08016014 	.word	0x08016014

0800fe20 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800fe20:	b590      	push	{r4, r7, lr}
 800fe22:	b087      	sub	sp, #28
 800fe24:	af00      	add	r7, sp, #0
 800fe26:	6078      	str	r0, [r7, #4]
 800fe28:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800fe2e:	693b      	ldr	r3, [r7, #16]
 800fe30:	681b      	ldr	r3, [r3, #0]
 800fe32:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800fe34:	e002      	b.n	800fe3c <follow_path+0x1c>
 800fe36:	683b      	ldr	r3, [r7, #0]
 800fe38:	3301      	adds	r3, #1
 800fe3a:	603b      	str	r3, [r7, #0]
 800fe3c:	683b      	ldr	r3, [r7, #0]
 800fe3e:	781b      	ldrb	r3, [r3, #0]
 800fe40:	2b2f      	cmp	r3, #47	; 0x2f
 800fe42:	d0f8      	beq.n	800fe36 <follow_path+0x16>
 800fe44:	683b      	ldr	r3, [r7, #0]
 800fe46:	781b      	ldrb	r3, [r3, #0]
 800fe48:	2b5c      	cmp	r3, #92	; 0x5c
 800fe4a:	d0f4      	beq.n	800fe36 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800fe4c:	693b      	ldr	r3, [r7, #16]
 800fe4e:	2200      	movs	r2, #0
 800fe50:	609a      	str	r2, [r3, #8]
	}
#if _FS_EXFAT
	obj->n_frag = 0;	/* Invalidate last fragment counter of the object */
 800fe52:	693b      	ldr	r3, [r7, #16]
 800fe54:	2200      	movs	r2, #0
 800fe56:	61da      	str	r2, [r3, #28]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800fe58:	683b      	ldr	r3, [r7, #0]
 800fe5a:	781b      	ldrb	r3, [r3, #0]
 800fe5c:	2b1f      	cmp	r3, #31
 800fe5e:	d80a      	bhi.n	800fe76 <follow_path+0x56>
		dp->fn[NSFLAG] = NS_NONAME;
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	2280      	movs	r2, #128	; 0x80
 800fe64:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		res = dir_sdi(dp, 0);
 800fe68:	2100      	movs	r1, #0
 800fe6a:	6878      	ldr	r0, [r7, #4]
 800fe6c:	f7fe fc58 	bl	800e720 <dir_sdi>
 800fe70:	4603      	mov	r3, r0
 800fe72:	75fb      	strb	r3, [r7, #23]
 800fe74:	e07c      	b.n	800ff70 <follow_path+0x150>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800fe76:	463b      	mov	r3, r7
 800fe78:	4619      	mov	r1, r3
 800fe7a:	6878      	ldr	r0, [r7, #4]
 800fe7c:	f7ff fe18 	bl	800fab0 <create_name>
 800fe80:	4603      	mov	r3, r0
 800fe82:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800fe84:	7dfb      	ldrb	r3, [r7, #23]
 800fe86:	2b00      	cmp	r3, #0
 800fe88:	d16d      	bne.n	800ff66 <follow_path+0x146>
			res = dir_find(dp);				/* Find an object with the segment name */
 800fe8a:	6878      	ldr	r0, [r7, #4]
 800fe8c:	f7ff fb36 	bl	800f4fc <dir_find>
 800fe90:	4603      	mov	r3, r0
 800fe92:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800fe9a:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800fe9c:	7dfb      	ldrb	r3, [r7, #23]
 800fe9e:	2b00      	cmp	r3, #0
 800fea0:	d00a      	beq.n	800feb8 <follow_path+0x98>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800fea2:	7dfb      	ldrb	r3, [r7, #23]
 800fea4:	2b04      	cmp	r3, #4
 800fea6:	d160      	bne.n	800ff6a <follow_path+0x14a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800fea8:	7afb      	ldrb	r3, [r7, #11]
 800feaa:	f003 0304 	and.w	r3, r3, #4
 800feae:	2b00      	cmp	r3, #0
 800feb0:	d15b      	bne.n	800ff6a <follow_path+0x14a>
 800feb2:	2305      	movs	r3, #5
 800feb4:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800feb6:	e058      	b.n	800ff6a <follow_path+0x14a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800feb8:	7afb      	ldrb	r3, [r7, #11]
 800feba:	f003 0304 	and.w	r3, r3, #4
 800febe:	2b00      	cmp	r3, #0
 800fec0:	d155      	bne.n	800ff6e <follow_path+0x14e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800fec2:	693b      	ldr	r3, [r7, #16]
 800fec4:	799b      	ldrb	r3, [r3, #6]
 800fec6:	f003 0310 	and.w	r3, r3, #16
 800feca:	2b00      	cmp	r3, #0
 800fecc:	d102      	bne.n	800fed4 <follow_path+0xb4>
				res = FR_NO_PATH; break;
 800fece:	2305      	movs	r3, #5
 800fed0:	75fb      	strb	r3, [r7, #23]
 800fed2:	e04d      	b.n	800ff70 <follow_path+0x150>
			}
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
 800fed4:	68fb      	ldr	r3, [r7, #12]
 800fed6:	781b      	ldrb	r3, [r3, #0]
 800fed8:	2b04      	cmp	r3, #4
 800feda:	d12f      	bne.n	800ff3c <follow_path+0x11c>
				obj->c_scl = obj->sclust;
 800fedc:	693b      	ldr	r3, [r7, #16]
 800fede:	689a      	ldr	r2, [r3, #8]
 800fee0:	693b      	ldr	r3, [r7, #16]
 800fee2:	621a      	str	r2, [r3, #32]
				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 800fee4:	693b      	ldr	r3, [r7, #16]
 800fee6:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800feea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800feee:	693a      	ldr	r2, [r7, #16]
 800fef0:	79d2      	ldrb	r2, [r2, #7]
 800fef2:	431a      	orrs	r2, r3
 800fef4:	693b      	ldr	r3, [r7, #16]
 800fef6:	625a      	str	r2, [r3, #36]	; 0x24
				obj->c_ofs = dp->blk_ofs;
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800fefc:	693b      	ldr	r3, [r7, #16]
 800fefe:	629a      	str	r2, [r3, #40]	; 0x28
				obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
 800ff00:	68fb      	ldr	r3, [r7, #12]
 800ff02:	695b      	ldr	r3, [r3, #20]
 800ff04:	3334      	adds	r3, #52	; 0x34
 800ff06:	4618      	mov	r0, r3
 800ff08:	f7fd f972 	bl	800d1f0 <ld_dword>
 800ff0c:	4602      	mov	r2, r0
 800ff0e:	693b      	ldr	r3, [r7, #16]
 800ff10:	609a      	str	r2, [r3, #8]
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800ff12:	68fb      	ldr	r3, [r7, #12]
 800ff14:	695b      	ldr	r3, [r3, #20]
 800ff16:	3321      	adds	r3, #33	; 0x21
 800ff18:	781b      	ldrb	r3, [r3, #0]
 800ff1a:	f003 0302 	and.w	r3, r3, #2
 800ff1e:	b2da      	uxtb	r2, r3
 800ff20:	693b      	ldr	r3, [r7, #16]
 800ff22:	71da      	strb	r2, [r3, #7]
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800ff24:	68fb      	ldr	r3, [r7, #12]
 800ff26:	695b      	ldr	r3, [r3, #20]
 800ff28:	3338      	adds	r3, #56	; 0x38
 800ff2a:	4618      	mov	r0, r3
 800ff2c:	f7fd f983 	bl	800d236 <ld_qword>
 800ff30:	4603      	mov	r3, r0
 800ff32:	460c      	mov	r4, r1
 800ff34:	693a      	ldr	r2, [r7, #16]
 800ff36:	e9c2 3404 	strd	r3, r4, [r2, #16]
 800ff3a:	e79c      	b.n	800fe76 <follow_path+0x56>
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800ff3c:	68fb      	ldr	r3, [r7, #12]
 800ff3e:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ff46:	68fa      	ldr	r2, [r7, #12]
 800ff48:	8992      	ldrh	r2, [r2, #12]
 800ff4a:	fbb3 f0f2 	udiv	r0, r3, r2
 800ff4e:	fb02 f200 	mul.w	r2, r2, r0
 800ff52:	1a9b      	subs	r3, r3, r2
 800ff54:	440b      	add	r3, r1
 800ff56:	4619      	mov	r1, r3
 800ff58:	68f8      	ldr	r0, [r7, #12]
 800ff5a:	f7fe fdb7 	bl	800eacc <ld_clust>
 800ff5e:	4602      	mov	r2, r0
 800ff60:	693b      	ldr	r3, [r7, #16]
 800ff62:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ff64:	e787      	b.n	800fe76 <follow_path+0x56>
			if (res != FR_OK) break;
 800ff66:	bf00      	nop
 800ff68:	e002      	b.n	800ff70 <follow_path+0x150>
				break;
 800ff6a:	bf00      	nop
 800ff6c:	e000      	b.n	800ff70 <follow_path+0x150>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ff6e:	bf00      	nop
			}
		}
	}

	return res;
 800ff70:	7dfb      	ldrb	r3, [r7, #23]
}
 800ff72:	4618      	mov	r0, r3
 800ff74:	371c      	adds	r7, #28
 800ff76:	46bd      	mov	sp, r7
 800ff78:	bd90      	pop	{r4, r7, pc}

0800ff7a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800ff7a:	b480      	push	{r7}
 800ff7c:	b087      	sub	sp, #28
 800ff7e:	af00      	add	r7, sp, #0
 800ff80:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800ff82:	f04f 33ff 	mov.w	r3, #4294967295
 800ff86:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	681b      	ldr	r3, [r3, #0]
 800ff8c:	2b00      	cmp	r3, #0
 800ff8e:	d031      	beq.n	800fff4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	681b      	ldr	r3, [r3, #0]
 800ff94:	617b      	str	r3, [r7, #20]
 800ff96:	e002      	b.n	800ff9e <get_ldnumber+0x24>
 800ff98:	697b      	ldr	r3, [r7, #20]
 800ff9a:	3301      	adds	r3, #1
 800ff9c:	617b      	str	r3, [r7, #20]
 800ff9e:	697b      	ldr	r3, [r7, #20]
 800ffa0:	781b      	ldrb	r3, [r3, #0]
 800ffa2:	2b1f      	cmp	r3, #31
 800ffa4:	d903      	bls.n	800ffae <get_ldnumber+0x34>
 800ffa6:	697b      	ldr	r3, [r7, #20]
 800ffa8:	781b      	ldrb	r3, [r3, #0]
 800ffaa:	2b3a      	cmp	r3, #58	; 0x3a
 800ffac:	d1f4      	bne.n	800ff98 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800ffae:	697b      	ldr	r3, [r7, #20]
 800ffb0:	781b      	ldrb	r3, [r3, #0]
 800ffb2:	2b3a      	cmp	r3, #58	; 0x3a
 800ffb4:	d11c      	bne.n	800fff0 <get_ldnumber+0x76>
			tp = *path;
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	681b      	ldr	r3, [r3, #0]
 800ffba:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800ffbc:	68fb      	ldr	r3, [r7, #12]
 800ffbe:	1c5a      	adds	r2, r3, #1
 800ffc0:	60fa      	str	r2, [r7, #12]
 800ffc2:	781b      	ldrb	r3, [r3, #0]
 800ffc4:	3b30      	subs	r3, #48	; 0x30
 800ffc6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800ffc8:	68bb      	ldr	r3, [r7, #8]
 800ffca:	2b09      	cmp	r3, #9
 800ffcc:	d80e      	bhi.n	800ffec <get_ldnumber+0x72>
 800ffce:	68fa      	ldr	r2, [r7, #12]
 800ffd0:	697b      	ldr	r3, [r7, #20]
 800ffd2:	429a      	cmp	r2, r3
 800ffd4:	d10a      	bne.n	800ffec <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800ffd6:	68bb      	ldr	r3, [r7, #8]
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	d107      	bne.n	800ffec <get_ldnumber+0x72>
					vol = (int)i;
 800ffdc:	68bb      	ldr	r3, [r7, #8]
 800ffde:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800ffe0:	697b      	ldr	r3, [r7, #20]
 800ffe2:	3301      	adds	r3, #1
 800ffe4:	617b      	str	r3, [r7, #20]
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	697a      	ldr	r2, [r7, #20]
 800ffea:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800ffec:	693b      	ldr	r3, [r7, #16]
 800ffee:	e002      	b.n	800fff6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800fff0:	2300      	movs	r3, #0
 800fff2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800fff4:	693b      	ldr	r3, [r7, #16]
}
 800fff6:	4618      	mov	r0, r3
 800fff8:	371c      	adds	r7, #28
 800fffa:	46bd      	mov	sp, r7
 800fffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010000:	4770      	bx	lr
	...

08010004 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8010004:	b580      	push	{r7, lr}
 8010006:	b082      	sub	sp, #8
 8010008:	af00      	add	r7, sp, #0
 801000a:	6078      	str	r0, [r7, #4]
 801000c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	2200      	movs	r2, #0
 8010012:	70da      	strb	r2, [r3, #3]
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	f04f 32ff 	mov.w	r2, #4294967295
 801001a:	63da      	str	r2, [r3, #60]	; 0x3c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 801001c:	6839      	ldr	r1, [r7, #0]
 801001e:	6878      	ldr	r0, [r7, #4]
 8010020:	f7fd fcf2 	bl	800da08 <move_window>
 8010024:	4603      	mov	r3, r0
 8010026:	2b00      	cmp	r3, #0
 8010028:	d001      	beq.n	801002e <check_fs+0x2a>
 801002a:	2304      	movs	r3, #4
 801002c:	e044      	b.n	80100b8 <check_fs+0xb4>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	3340      	adds	r3, #64	; 0x40
 8010032:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010036:	4618      	mov	r0, r3
 8010038:	f7fd f8c2 	bl	800d1c0 <ld_word>
 801003c:	4603      	mov	r3, r0
 801003e:	461a      	mov	r2, r3
 8010040:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8010044:	429a      	cmp	r2, r3
 8010046:	d001      	beq.n	801004c <check_fs+0x48>
 8010048:	2303      	movs	r3, #3
 801004a:	e035      	b.n	80100b8 <check_fs+0xb4>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010052:	2be9      	cmp	r3, #233	; 0xe9
 8010054:	d009      	beq.n	801006a <check_fs+0x66>
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801005c:	2beb      	cmp	r3, #235	; 0xeb
 801005e:	d11e      	bne.n	801009e <check_fs+0x9a>
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010066:	2b90      	cmp	r3, #144	; 0x90
 8010068:	d119      	bne.n	801009e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	3340      	adds	r3, #64	; 0x40
 801006e:	3336      	adds	r3, #54	; 0x36
 8010070:	4618      	mov	r0, r3
 8010072:	f7fd f8bd 	bl	800d1f0 <ld_dword>
 8010076:	4603      	mov	r3, r0
 8010078:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 801007c:	4a10      	ldr	r2, [pc, #64]	; (80100c0 <check_fs+0xbc>)
 801007e:	4293      	cmp	r3, r2
 8010080:	d101      	bne.n	8010086 <check_fs+0x82>
 8010082:	2300      	movs	r3, #0
 8010084:	e018      	b.n	80100b8 <check_fs+0xb4>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	3340      	adds	r3, #64	; 0x40
 801008a:	3352      	adds	r3, #82	; 0x52
 801008c:	4618      	mov	r0, r3
 801008e:	f7fd f8af 	bl	800d1f0 <ld_dword>
 8010092:	4602      	mov	r2, r0
 8010094:	4b0b      	ldr	r3, [pc, #44]	; (80100c4 <check_fs+0xc0>)
 8010096:	429a      	cmp	r2, r3
 8010098:	d101      	bne.n	801009e <check_fs+0x9a>
 801009a:	2300      	movs	r3, #0
 801009c:	e00c      	b.n	80100b8 <check_fs+0xb4>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	3340      	adds	r3, #64	; 0x40
 80100a2:	220b      	movs	r2, #11
 80100a4:	4908      	ldr	r1, [pc, #32]	; (80100c8 <check_fs+0xc4>)
 80100a6:	4618      	mov	r0, r3
 80100a8:	f7fd fa8b 	bl	800d5c2 <mem_cmp>
 80100ac:	4603      	mov	r3, r0
 80100ae:	2b00      	cmp	r3, #0
 80100b0:	d101      	bne.n	80100b6 <check_fs+0xb2>
 80100b2:	2301      	movs	r3, #1
 80100b4:	e000      	b.n	80100b8 <check_fs+0xb4>
#endif
	return 2;
 80100b6:	2302      	movs	r3, #2
}
 80100b8:	4618      	mov	r0, r3
 80100ba:	3708      	adds	r7, #8
 80100bc:	46bd      	mov	sp, r7
 80100be:	bd80      	pop	{r7, pc}
 80100c0:	00544146 	.word	0x00544146
 80100c4:	33544146 	.word	0x33544146
 80100c8:	0801601c 	.word	0x0801601c

080100cc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80100cc:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80100d0:	b098      	sub	sp, #96	; 0x60
 80100d2:	af00      	add	r7, sp, #0
 80100d4:	60f8      	str	r0, [r7, #12]
 80100d6:	60b9      	str	r1, [r7, #8]
 80100d8:	4613      	mov	r3, r2
 80100da:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80100dc:	68bb      	ldr	r3, [r7, #8]
 80100de:	2200      	movs	r2, #0
 80100e0:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80100e2:	68f8      	ldr	r0, [r7, #12]
 80100e4:	f7ff ff49 	bl	800ff7a <get_ldnumber>
 80100e8:	6478      	str	r0, [r7, #68]	; 0x44
	if (vol < 0) return FR_INVALID_DRIVE;
 80100ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80100ec:	2b00      	cmp	r3, #0
 80100ee:	da01      	bge.n	80100f4 <find_volume+0x28>
 80100f0:	230b      	movs	r3, #11
 80100f2:	e370      	b.n	80107d6 <find_volume+0x70a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80100f4:	4aae      	ldr	r2, [pc, #696]	; (80103b0 <find_volume+0x2e4>)
 80100f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80100f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80100fc:	643b      	str	r3, [r7, #64]	; 0x40
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80100fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010100:	2b00      	cmp	r3, #0
 8010102:	d101      	bne.n	8010108 <find_volume+0x3c>
 8010104:	230c      	movs	r3, #12
 8010106:	e366      	b.n	80107d6 <find_volume+0x70a>

	ENTER_FF(fs);						/* Lock the volume */
 8010108:	6c38      	ldr	r0, [r7, #64]	; 0x40
 801010a:	f7fd fa9c 	bl	800d646 <lock_fs>
 801010e:	4603      	mov	r3, r0
 8010110:	2b00      	cmp	r3, #0
 8010112:	d101      	bne.n	8010118 <find_volume+0x4c>
 8010114:	230f      	movs	r3, #15
 8010116:	e35e      	b.n	80107d6 <find_volume+0x70a>
	*rfs = fs;							/* Return pointer to the file system object */
 8010118:	68bb      	ldr	r3, [r7, #8]
 801011a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801011c:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 801011e:	79fb      	ldrb	r3, [r7, #7]
 8010120:	f023 0301 	bic.w	r3, r3, #1
 8010124:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8010126:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010128:	781b      	ldrb	r3, [r3, #0]
 801012a:	2b00      	cmp	r3, #0
 801012c:	d01a      	beq.n	8010164 <find_volume+0x98>
		stat = disk_status(fs->drv);
 801012e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010130:	785b      	ldrb	r3, [r3, #1]
 8010132:	4618      	mov	r0, r3
 8010134:	f7fc ffa6 	bl	800d084 <disk_status>
 8010138:	4603      	mov	r3, r0
 801013a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 801013e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010142:	f003 0301 	and.w	r3, r3, #1
 8010146:	2b00      	cmp	r3, #0
 8010148:	d10c      	bne.n	8010164 <find_volume+0x98>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 801014a:	79fb      	ldrb	r3, [r7, #7]
 801014c:	2b00      	cmp	r3, #0
 801014e:	d007      	beq.n	8010160 <find_volume+0x94>
 8010150:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010154:	f003 0304 	and.w	r3, r3, #4
 8010158:	2b00      	cmp	r3, #0
 801015a:	d001      	beq.n	8010160 <find_volume+0x94>
				return FR_WRITE_PROTECTED;
 801015c:	230a      	movs	r3, #10
 801015e:	e33a      	b.n	80107d6 <find_volume+0x70a>
			}
			return FR_OK;				/* The file system object is valid */
 8010160:	2300      	movs	r3, #0
 8010162:	e338      	b.n	80107d6 <find_volume+0x70a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8010164:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010166:	2200      	movs	r2, #0
 8010168:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 801016a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801016c:	b2da      	uxtb	r2, r3
 801016e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010170:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8010172:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010174:	785b      	ldrb	r3, [r3, #1]
 8010176:	4618      	mov	r0, r3
 8010178:	f7fc ff9e 	bl	800d0b8 <disk_initialize>
 801017c:	4603      	mov	r3, r0
 801017e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8010182:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010186:	f003 0301 	and.w	r3, r3, #1
 801018a:	2b00      	cmp	r3, #0
 801018c:	d001      	beq.n	8010192 <find_volume+0xc6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 801018e:	2303      	movs	r3, #3
 8010190:	e321      	b.n	80107d6 <find_volume+0x70a>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8010192:	79fb      	ldrb	r3, [r7, #7]
 8010194:	2b00      	cmp	r3, #0
 8010196:	d007      	beq.n	80101a8 <find_volume+0xdc>
 8010198:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801019c:	f003 0304 	and.w	r3, r3, #4
 80101a0:	2b00      	cmp	r3, #0
 80101a2:	d001      	beq.n	80101a8 <find_volume+0xdc>
		return FR_WRITE_PROTECTED;
 80101a4:	230a      	movs	r3, #10
 80101a6:	e316      	b.n	80107d6 <find_volume+0x70a>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80101a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80101aa:	7858      	ldrb	r0, [r3, #1]
 80101ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80101ae:	330c      	adds	r3, #12
 80101b0:	461a      	mov	r2, r3
 80101b2:	2102      	movs	r1, #2
 80101b4:	f7fc ffe6 	bl	800d184 <disk_ioctl>
 80101b8:	4603      	mov	r3, r0
 80101ba:	2b00      	cmp	r3, #0
 80101bc:	d001      	beq.n	80101c2 <find_volume+0xf6>
 80101be:	2301      	movs	r3, #1
 80101c0:	e309      	b.n	80107d6 <find_volume+0x70a>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80101c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80101c4:	899b      	ldrh	r3, [r3, #12]
 80101c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80101ca:	d80d      	bhi.n	80101e8 <find_volume+0x11c>
 80101cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80101ce:	899b      	ldrh	r3, [r3, #12]
 80101d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80101d4:	d308      	bcc.n	80101e8 <find_volume+0x11c>
 80101d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80101d8:	899b      	ldrh	r3, [r3, #12]
 80101da:	461a      	mov	r2, r3
 80101dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80101de:	899b      	ldrh	r3, [r3, #12]
 80101e0:	3b01      	subs	r3, #1
 80101e2:	4013      	ands	r3, r2
 80101e4:	2b00      	cmp	r3, #0
 80101e6:	d001      	beq.n	80101ec <find_volume+0x120>
 80101e8:	2301      	movs	r3, #1
 80101ea:	e2f4      	b.n	80107d6 <find_volume+0x70a>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80101ec:	2300      	movs	r3, #0
 80101ee:	65bb      	str	r3, [r7, #88]	; 0x58
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80101f0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80101f2:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80101f4:	f7ff ff06 	bl	8010004 <check_fs>
 80101f8:	4603      	mov	r3, r0
 80101fa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80101fe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010202:	2b02      	cmp	r3, #2
 8010204:	d14b      	bne.n	801029e <find_volume+0x1d2>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8010206:	2300      	movs	r3, #0
 8010208:	64bb      	str	r3, [r7, #72]	; 0x48
 801020a:	e01f      	b.n	801024c <find_volume+0x180>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801020c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801020e:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8010212:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010214:	011b      	lsls	r3, r3, #4
 8010216:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 801021a:	4413      	add	r3, r2
 801021c:	63bb      	str	r3, [r7, #56]	; 0x38
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 801021e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010220:	3304      	adds	r3, #4
 8010222:	781b      	ldrb	r3, [r3, #0]
 8010224:	2b00      	cmp	r3, #0
 8010226:	d006      	beq.n	8010236 <find_volume+0x16a>
 8010228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801022a:	3308      	adds	r3, #8
 801022c:	4618      	mov	r0, r3
 801022e:	f7fc ffdf 	bl	800d1f0 <ld_dword>
 8010232:	4602      	mov	r2, r0
 8010234:	e000      	b.n	8010238 <find_volume+0x16c>
 8010236:	2200      	movs	r2, #0
 8010238:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801023a:	009b      	lsls	r3, r3, #2
 801023c:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8010240:	440b      	add	r3, r1
 8010242:	f843 2c50 	str.w	r2, [r3, #-80]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8010246:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010248:	3301      	adds	r3, #1
 801024a:	64bb      	str	r3, [r7, #72]	; 0x48
 801024c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801024e:	2b03      	cmp	r3, #3
 8010250:	d9dc      	bls.n	801020c <find_volume+0x140>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8010252:	2300      	movs	r3, #0
 8010254:	64bb      	str	r3, [r7, #72]	; 0x48
		if (i) i--;
 8010256:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010258:	2b00      	cmp	r3, #0
 801025a:	d002      	beq.n	8010262 <find_volume+0x196>
 801025c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801025e:	3b01      	subs	r3, #1
 8010260:	64bb      	str	r3, [r7, #72]	; 0x48
		do {							/* Find an FAT volume */
			bsect = br[i];
 8010262:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010264:	009b      	lsls	r3, r3, #2
 8010266:	f107 0260 	add.w	r2, r7, #96	; 0x60
 801026a:	4413      	add	r3, r2
 801026c:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8010270:	65bb      	str	r3, [r7, #88]	; 0x58
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8010272:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010274:	2b00      	cmp	r3, #0
 8010276:	d005      	beq.n	8010284 <find_volume+0x1b8>
 8010278:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801027a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 801027c:	f7ff fec2 	bl	8010004 <check_fs>
 8010280:	4603      	mov	r3, r0
 8010282:	e000      	b.n	8010286 <find_volume+0x1ba>
 8010284:	2303      	movs	r3, #3
 8010286:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 801028a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801028e:	2b01      	cmp	r3, #1
 8010290:	d905      	bls.n	801029e <find_volume+0x1d2>
 8010292:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010294:	3301      	adds	r3, #1
 8010296:	64bb      	str	r3, [r7, #72]	; 0x48
 8010298:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801029a:	2b03      	cmp	r3, #3
 801029c:	d9e1      	bls.n	8010262 <find_volume+0x196>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 801029e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80102a2:	2b04      	cmp	r3, #4
 80102a4:	d101      	bne.n	80102aa <find_volume+0x1de>
 80102a6:	2301      	movs	r3, #1
 80102a8:	e295      	b.n	80107d6 <find_volume+0x70a>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80102aa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80102ae:	2b01      	cmp	r3, #1
 80102b0:	d901      	bls.n	80102b6 <find_volume+0x1ea>
 80102b2:	230d      	movs	r3, #13
 80102b4:	e28f      	b.n	80107d6 <find_volume+0x70a>

	/* An FAT volume is found (bsect). Following code initializes the file system object */

#if _FS_EXFAT
	if (fmt == 1) {
 80102b6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80102ba:	2b01      	cmp	r3, #1
 80102bc:	f040 8101 	bne.w	80104c2 <find_volume+0x3f6>
		QWORD maxlba;

		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 80102c0:	230b      	movs	r3, #11
 80102c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80102c4:	e002      	b.n	80102cc <find_volume+0x200>
 80102c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80102c8:	3301      	adds	r3, #1
 80102ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80102cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80102ce:	2b3f      	cmp	r3, #63	; 0x3f
 80102d0:	d806      	bhi.n	80102e0 <find_volume+0x214>
 80102d2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80102d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80102d6:	4413      	add	r3, r2
 80102d8:	3340      	adds	r3, #64	; 0x40
 80102da:	781b      	ldrb	r3, [r3, #0]
 80102dc:	2b00      	cmp	r3, #0
 80102de:	d0f2      	beq.n	80102c6 <find_volume+0x1fa>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 80102e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80102e2:	2b3f      	cmp	r3, #63	; 0x3f
 80102e4:	d801      	bhi.n	80102ea <find_volume+0x21e>
 80102e6:	230d      	movs	r3, #13
 80102e8:	e275      	b.n	80107d6 <find_volume+0x70a>

		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Must be 1.0) */
 80102ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80102ec:	3340      	adds	r3, #64	; 0x40
 80102ee:	3368      	adds	r3, #104	; 0x68
 80102f0:	4618      	mov	r0, r3
 80102f2:	f7fc ff65 	bl	800d1c0 <ld_word>
 80102f6:	4603      	mov	r3, r0
 80102f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80102fc:	d001      	beq.n	8010302 <find_volume+0x236>
 80102fe:	230d      	movs	r3, #13
 8010300:	e269      	b.n	80107d6 <find_volume+0x70a>

		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 8010302:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010304:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 8010308:	461a      	mov	r2, r3
 801030a:	2301      	movs	r3, #1
 801030c:	4093      	lsls	r3, r2
 801030e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010310:	8992      	ldrh	r2, [r2, #12]
 8010312:	4293      	cmp	r3, r2
 8010314:	d001      	beq.n	801031a <find_volume+0x24e>
			return FR_NO_FILESYSTEM;
 8010316:	230d      	movs	r3, #13
 8010318:	e25d      	b.n	80107d6 <find_volume+0x70a>
		}

		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 801031a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801031c:	3340      	adds	r3, #64	; 0x40
 801031e:	3348      	adds	r3, #72	; 0x48
 8010320:	4618      	mov	r0, r3
 8010322:	f7fc ff88 	bl	800d236 <ld_qword>
 8010326:	460a      	mov	r2, r1
 8010328:	4601      	mov	r1, r0
 801032a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801032c:	469b      	mov	fp, r3
 801032e:	f04f 0c00 	mov.w	ip, #0
 8010332:	eb1b 0301 	adds.w	r3, fp, r1
 8010336:	eb4c 0402 	adc.w	r4, ip, r2
 801033a:	e9c7 3408 	strd	r3, r4, [r7, #32]
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 801033e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8010342:	2c01      	cmp	r4, #1
 8010344:	bf08      	it	eq
 8010346:	2b00      	cmpeq	r3, #0
 8010348:	d301      	bcc.n	801034e <find_volume+0x282>
 801034a:	230d      	movs	r3, #13
 801034c:	e243      	b.n	80107d6 <find_volume+0x70a>

		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 801034e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010350:	3340      	adds	r3, #64	; 0x40
 8010352:	3354      	adds	r3, #84	; 0x54
 8010354:	4618      	mov	r0, r3
 8010356:	f7fc ff4b 	bl	800d1f0 <ld_dword>
 801035a:	4602      	mov	r2, r0
 801035c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801035e:	629a      	str	r2, [r3, #40]	; 0x28

		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 8010360:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010362:	f893 20ae 	ldrb.w	r2, [r3, #174]	; 0xae
 8010366:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010368:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 801036a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801036c:	789b      	ldrb	r3, [r3, #2]
 801036e:	2b01      	cmp	r3, #1
 8010370:	d001      	beq.n	8010376 <find_volume+0x2aa>
 8010372:	230d      	movs	r3, #13
 8010374:	e22f      	b.n	80107d6 <find_volume+0x70a>

		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 8010376:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010378:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 801037c:	461a      	mov	r2, r3
 801037e:	2301      	movs	r3, #1
 8010380:	4093      	lsls	r3, r2
 8010382:	b29a      	uxth	r2, r3
 8010384:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010386:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 8010388:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801038a:	895b      	ldrh	r3, [r3, #10]
 801038c:	2b00      	cmp	r3, #0
 801038e:	d101      	bne.n	8010394 <find_volume+0x2c8>
 8010390:	230d      	movs	r3, #13
 8010392:	e220      	b.n	80107d6 <find_volume+0x70a>

		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 8010394:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010396:	3340      	adds	r3, #64	; 0x40
 8010398:	335c      	adds	r3, #92	; 0x5c
 801039a:	4618      	mov	r0, r3
 801039c:	f7fc ff28 	bl	800d1f0 <ld_dword>
 80103a0:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 80103a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103a4:	4a03      	ldr	r2, [pc, #12]	; (80103b4 <find_volume+0x2e8>)
 80103a6:	4293      	cmp	r3, r2
 80103a8:	d906      	bls.n	80103b8 <find_volume+0x2ec>
 80103aa:	230d      	movs	r3, #13
 80103ac:	e213      	b.n	80107d6 <find_volume+0x70a>
 80103ae:	bf00      	nop
 80103b0:	2000021c 	.word	0x2000021c
 80103b4:	7ffffffd 	.word	0x7ffffffd
		fs->n_fatent = nclst + 2;
 80103b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103ba:	1c9a      	adds	r2, r3, #2
 80103bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80103be:	625a      	str	r2, [r3, #36]	; 0x24

		/* Boundaries and Limits */
		fs->volbase = bsect;
 80103c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80103c2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80103c4:	62da      	str	r2, [r3, #44]	; 0x2c
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 80103c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80103c8:	3340      	adds	r3, #64	; 0x40
 80103ca:	3358      	adds	r3, #88	; 0x58
 80103cc:	4618      	mov	r0, r3
 80103ce:	f7fc ff0f 	bl	800d1f0 <ld_dword>
 80103d2:	4602      	mov	r2, r0
 80103d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80103d6:	441a      	add	r2, r3
 80103d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80103da:	639a      	str	r2, [r3, #56]	; 0x38
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 80103dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80103de:	3340      	adds	r3, #64	; 0x40
 80103e0:	3350      	adds	r3, #80	; 0x50
 80103e2:	4618      	mov	r0, r3
 80103e4:	f7fc ff04 	bl	800d1f0 <ld_dword>
 80103e8:	4602      	mov	r2, r0
 80103ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80103ec:	441a      	add	r2, r3
 80103ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80103f0:	631a      	str	r2, [r3, #48]	; 0x30
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 80103f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80103f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80103f6:	4619      	mov	r1, r3
 80103f8:	f04f 0200 	mov.w	r2, #0
 80103fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80103fe:	895b      	ldrh	r3, [r3, #10]
 8010400:	4618      	mov	r0, r3
 8010402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010404:	fb03 f300 	mul.w	r3, r3, r0
 8010408:	469b      	mov	fp, r3
 801040a:	f04f 0c00 	mov.w	ip, #0
 801040e:	eb1b 0301 	adds.w	r3, fp, r1
 8010412:	eb4c 0402 	adc.w	r4, ip, r2
 8010416:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 801041a:	42a2      	cmp	r2, r4
 801041c:	bf08      	it	eq
 801041e:	4299      	cmpeq	r1, r3
 8010420:	d201      	bcs.n	8010426 <find_volume+0x35a>
 8010422:	230d      	movs	r3, #13
 8010424:	e1d7      	b.n	80107d6 <find_volume+0x70a>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 8010426:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010428:	3340      	adds	r3, #64	; 0x40
 801042a:	3360      	adds	r3, #96	; 0x60
 801042c:	4618      	mov	r0, r3
 801042e:	f7fc fedf 	bl	800d1f0 <ld_dword>
 8010432:	4602      	mov	r2, r0
 8010434:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010436:	635a      	str	r2, [r3, #52]	; 0x34

		/* Check if bitmap location is in assumption (at the first cluster) */
		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 8010438:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801043a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801043c:	4619      	mov	r1, r3
 801043e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8010440:	f7fd fb80 	bl	800db44 <clust2sect>
 8010444:	4603      	mov	r3, r0
 8010446:	4619      	mov	r1, r3
 8010448:	6c38      	ldr	r0, [r7, #64]	; 0x40
 801044a:	f7fd fadd 	bl	800da08 <move_window>
 801044e:	4603      	mov	r3, r0
 8010450:	2b00      	cmp	r3, #0
 8010452:	d001      	beq.n	8010458 <find_volume+0x38c>
 8010454:	2301      	movs	r3, #1
 8010456:	e1be      	b.n	80107d6 <find_volume+0x70a>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 8010458:	2300      	movs	r3, #0
 801045a:	64bb      	str	r3, [r7, #72]	; 0x48
 801045c:	e015      	b.n	801048a <find_volume+0x3be>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 801045e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010460:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010462:	4413      	add	r3, r2
 8010464:	3340      	adds	r3, #64	; 0x40
 8010466:	781b      	ldrb	r3, [r3, #0]
 8010468:	2b81      	cmp	r3, #129	; 0x81
 801046a:	d10b      	bne.n	8010484 <find_volume+0x3b8>
 801046c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801046e:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8010472:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010474:	3314      	adds	r3, #20
 8010476:	4413      	add	r3, r2
 8010478:	4618      	mov	r0, r3
 801047a:	f7fc feb9 	bl	800d1f0 <ld_dword>
 801047e:	4603      	mov	r3, r0
 8010480:	2b02      	cmp	r3, #2
 8010482:	d009      	beq.n	8010498 <find_volume+0x3cc>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 8010484:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010486:	3320      	adds	r3, #32
 8010488:	64bb      	str	r3, [r7, #72]	; 0x48
 801048a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801048c:	899b      	ldrh	r3, [r3, #12]
 801048e:	461a      	mov	r2, r3
 8010490:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010492:	4293      	cmp	r3, r2
 8010494:	d3e3      	bcc.n	801045e <find_volume+0x392>
 8010496:	e000      	b.n	801049a <find_volume+0x3ce>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 8010498:	bf00      	nop
		}
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
 801049a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801049c:	899b      	ldrh	r3, [r3, #12]
 801049e:	461a      	mov	r2, r3
 80104a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80104a2:	4293      	cmp	r3, r2
 80104a4:	d101      	bne.n	80104aa <find_volume+0x3de>
 80104a6:	230d      	movs	r3, #13
 80104a8:	e195      	b.n	80107d6 <find_volume+0x70a>
#if !_FS_READONLY
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80104aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80104ac:	f04f 32ff 	mov.w	r2, #4294967295
 80104b0:	621a      	str	r2, [r3, #32]
 80104b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80104b4:	6a1a      	ldr	r2, [r3, #32]
 80104b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80104b8:	61da      	str	r2, [r3, #28]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
 80104ba:	2304      	movs	r3, #4
 80104bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80104c0:	e177      	b.n	80107b2 <find_volume+0x6e6>
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80104c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80104c4:	3340      	adds	r3, #64	; 0x40
 80104c6:	330b      	adds	r3, #11
 80104c8:	4618      	mov	r0, r3
 80104ca:	f7fc fe79 	bl	800d1c0 <ld_word>
 80104ce:	4603      	mov	r3, r0
 80104d0:	461a      	mov	r2, r3
 80104d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80104d4:	899b      	ldrh	r3, [r3, #12]
 80104d6:	429a      	cmp	r2, r3
 80104d8:	d001      	beq.n	80104de <find_volume+0x412>
 80104da:	230d      	movs	r3, #13
 80104dc:	e17b      	b.n	80107d6 <find_volume+0x70a>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80104de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80104e0:	3340      	adds	r3, #64	; 0x40
 80104e2:	3316      	adds	r3, #22
 80104e4:	4618      	mov	r0, r3
 80104e6:	f7fc fe6b 	bl	800d1c0 <ld_word>
 80104ea:	4603      	mov	r3, r0
 80104ec:	657b      	str	r3, [r7, #84]	; 0x54
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80104ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	d106      	bne.n	8010502 <find_volume+0x436>
 80104f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80104f6:	3340      	adds	r3, #64	; 0x40
 80104f8:	3324      	adds	r3, #36	; 0x24
 80104fa:	4618      	mov	r0, r3
 80104fc:	f7fc fe78 	bl	800d1f0 <ld_dword>
 8010500:	6578      	str	r0, [r7, #84]	; 0x54
		fs->fsize = fasize;
 8010502:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010504:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010506:	629a      	str	r2, [r3, #40]	; 0x28

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8010508:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801050a:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 801050e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010510:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8010512:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010514:	789b      	ldrb	r3, [r3, #2]
 8010516:	2b01      	cmp	r3, #1
 8010518:	d005      	beq.n	8010526 <find_volume+0x45a>
 801051a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801051c:	789b      	ldrb	r3, [r3, #2]
 801051e:	2b02      	cmp	r3, #2
 8010520:	d001      	beq.n	8010526 <find_volume+0x45a>
 8010522:	230d      	movs	r3, #13
 8010524:	e157      	b.n	80107d6 <find_volume+0x70a>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8010526:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010528:	789b      	ldrb	r3, [r3, #2]
 801052a:	461a      	mov	r2, r3
 801052c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801052e:	fb02 f303 	mul.w	r3, r2, r3
 8010532:	657b      	str	r3, [r7, #84]	; 0x54

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8010534:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010536:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 801053a:	b29a      	uxth	r2, r3
 801053c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801053e:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8010540:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010542:	895b      	ldrh	r3, [r3, #10]
 8010544:	2b00      	cmp	r3, #0
 8010546:	d008      	beq.n	801055a <find_volume+0x48e>
 8010548:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801054a:	895b      	ldrh	r3, [r3, #10]
 801054c:	461a      	mov	r2, r3
 801054e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010550:	895b      	ldrh	r3, [r3, #10]
 8010552:	3b01      	subs	r3, #1
 8010554:	4013      	ands	r3, r2
 8010556:	2b00      	cmp	r3, #0
 8010558:	d001      	beq.n	801055e <find_volume+0x492>
 801055a:	230d      	movs	r3, #13
 801055c:	e13b      	b.n	80107d6 <find_volume+0x70a>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 801055e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010560:	3340      	adds	r3, #64	; 0x40
 8010562:	3311      	adds	r3, #17
 8010564:	4618      	mov	r0, r3
 8010566:	f7fc fe2b 	bl	800d1c0 <ld_word>
 801056a:	4603      	mov	r3, r0
 801056c:	461a      	mov	r2, r3
 801056e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010570:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8010572:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010574:	891b      	ldrh	r3, [r3, #8]
 8010576:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010578:	8992      	ldrh	r2, [r2, #12]
 801057a:	0952      	lsrs	r2, r2, #5
 801057c:	b292      	uxth	r2, r2
 801057e:	fbb3 f1f2 	udiv	r1, r3, r2
 8010582:	fb02 f201 	mul.w	r2, r2, r1
 8010586:	1a9b      	subs	r3, r3, r2
 8010588:	b29b      	uxth	r3, r3
 801058a:	2b00      	cmp	r3, #0
 801058c:	d001      	beq.n	8010592 <find_volume+0x4c6>
 801058e:	230d      	movs	r3, #13
 8010590:	e121      	b.n	80107d6 <find_volume+0x70a>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8010592:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010594:	3340      	adds	r3, #64	; 0x40
 8010596:	3313      	adds	r3, #19
 8010598:	4618      	mov	r0, r3
 801059a:	f7fc fe11 	bl	800d1c0 <ld_word>
 801059e:	4603      	mov	r3, r0
 80105a0:	653b      	str	r3, [r7, #80]	; 0x50
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80105a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80105a4:	2b00      	cmp	r3, #0
 80105a6:	d106      	bne.n	80105b6 <find_volume+0x4ea>
 80105a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80105aa:	3340      	adds	r3, #64	; 0x40
 80105ac:	3320      	adds	r3, #32
 80105ae:	4618      	mov	r0, r3
 80105b0:	f7fc fe1e 	bl	800d1f0 <ld_dword>
 80105b4:	6538      	str	r0, [r7, #80]	; 0x50

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80105b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80105b8:	3340      	adds	r3, #64	; 0x40
 80105ba:	330e      	adds	r3, #14
 80105bc:	4618      	mov	r0, r3
 80105be:	f7fc fdff 	bl	800d1c0 <ld_word>
 80105c2:	4603      	mov	r3, r0
 80105c4:	86fb      	strh	r3, [r7, #54]	; 0x36
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80105c6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80105c8:	2b00      	cmp	r3, #0
 80105ca:	d101      	bne.n	80105d0 <find_volume+0x504>
 80105cc:	230d      	movs	r3, #13
 80105ce:	e102      	b.n	80107d6 <find_volume+0x70a>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80105d0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80105d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80105d4:	4413      	add	r3, r2
 80105d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80105d8:	8911      	ldrh	r1, [r2, #8]
 80105da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80105dc:	8992      	ldrh	r2, [r2, #12]
 80105de:	0952      	lsrs	r2, r2, #5
 80105e0:	b292      	uxth	r2, r2
 80105e2:	fbb1 f2f2 	udiv	r2, r1, r2
 80105e6:	b292      	uxth	r2, r2
 80105e8:	4413      	add	r3, r2
 80105ea:	633b      	str	r3, [r7, #48]	; 0x30
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80105ec:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80105ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105f0:	429a      	cmp	r2, r3
 80105f2:	d201      	bcs.n	80105f8 <find_volume+0x52c>
 80105f4:	230d      	movs	r3, #13
 80105f6:	e0ee      	b.n	80107d6 <find_volume+0x70a>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80105f8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80105fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105fc:	1ad3      	subs	r3, r2, r3
 80105fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010600:	8952      	ldrh	r2, [r2, #10]
 8010602:	fbb3 f3f2 	udiv	r3, r3, r2
 8010606:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8010608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801060a:	2b00      	cmp	r3, #0
 801060c:	d101      	bne.n	8010612 <find_volume+0x546>
 801060e:	230d      	movs	r3, #13
 8010610:	e0e1      	b.n	80107d6 <find_volume+0x70a>
		fmt = FS_FAT32;
 8010612:	2303      	movs	r3, #3
 8010614:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8010618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801061a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 801061e:	4293      	cmp	r3, r2
 8010620:	d802      	bhi.n	8010628 <find_volume+0x55c>
 8010622:	2302      	movs	r3, #2
 8010624:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8010628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801062a:	f640 72f5 	movw	r2, #4085	; 0xff5
 801062e:	4293      	cmp	r3, r2
 8010630:	d802      	bhi.n	8010638 <find_volume+0x56c>
 8010632:	2301      	movs	r3, #1
 8010634:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8010638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801063a:	1c9a      	adds	r2, r3, #2
 801063c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801063e:	625a      	str	r2, [r3, #36]	; 0x24
		fs->volbase = bsect;							/* Volume start sector */
 8010640:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010642:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010644:	62da      	str	r2, [r3, #44]	; 0x2c
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8010646:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8010648:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801064a:	441a      	add	r2, r3
 801064c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801064e:	631a      	str	r2, [r3, #48]	; 0x30
		fs->database = bsect + sysect;					/* Data start sector */
 8010650:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010654:	441a      	add	r2, r3
 8010656:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010658:	639a      	str	r2, [r3, #56]	; 0x38
		if (fmt == FS_FAT32) {
 801065a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801065e:	2b03      	cmp	r3, #3
 8010660:	d11e      	bne.n	80106a0 <find_volume+0x5d4>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8010662:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010664:	3340      	adds	r3, #64	; 0x40
 8010666:	332a      	adds	r3, #42	; 0x2a
 8010668:	4618      	mov	r0, r3
 801066a:	f7fc fda9 	bl	800d1c0 <ld_word>
 801066e:	4603      	mov	r3, r0
 8010670:	2b00      	cmp	r3, #0
 8010672:	d001      	beq.n	8010678 <find_volume+0x5ac>
 8010674:	230d      	movs	r3, #13
 8010676:	e0ae      	b.n	80107d6 <find_volume+0x70a>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8010678:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801067a:	891b      	ldrh	r3, [r3, #8]
 801067c:	2b00      	cmp	r3, #0
 801067e:	d001      	beq.n	8010684 <find_volume+0x5b8>
 8010680:	230d      	movs	r3, #13
 8010682:	e0a8      	b.n	80107d6 <find_volume+0x70a>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8010684:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010686:	3340      	adds	r3, #64	; 0x40
 8010688:	332c      	adds	r3, #44	; 0x2c
 801068a:	4618      	mov	r0, r3
 801068c:	f7fc fdb0 	bl	800d1f0 <ld_dword>
 8010690:	4602      	mov	r2, r0
 8010692:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010694:	635a      	str	r2, [r3, #52]	; 0x34
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8010696:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801069a:	009b      	lsls	r3, r3, #2
 801069c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801069e:	e01f      	b.n	80106e0 <find_volume+0x614>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80106a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80106a2:	891b      	ldrh	r3, [r3, #8]
 80106a4:	2b00      	cmp	r3, #0
 80106a6:	d101      	bne.n	80106ac <find_volume+0x5e0>
 80106a8:	230d      	movs	r3, #13
 80106aa:	e094      	b.n	80107d6 <find_volume+0x70a>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80106ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80106ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80106b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80106b2:	441a      	add	r2, r3
 80106b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80106b6:	635a      	str	r2, [r3, #52]	; 0x34
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80106b8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80106bc:	2b02      	cmp	r3, #2
 80106be:	d103      	bne.n	80106c8 <find_volume+0x5fc>
 80106c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80106c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106c4:	005b      	lsls	r3, r3, #1
 80106c6:	e00a      	b.n	80106de <find_volume+0x612>
 80106c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80106ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80106cc:	4613      	mov	r3, r2
 80106ce:	005b      	lsls	r3, r3, #1
 80106d0:	4413      	add	r3, r2
 80106d2:	085a      	lsrs	r2, r3, #1
 80106d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80106d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106d8:	f003 0301 	and.w	r3, r3, #1
 80106dc:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80106de:	64fb      	str	r3, [r7, #76]	; 0x4c
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80106e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80106e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80106e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80106e6:	899b      	ldrh	r3, [r3, #12]
 80106e8:	4619      	mov	r1, r3
 80106ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80106ec:	440b      	add	r3, r1
 80106ee:	3b01      	subs	r3, #1
 80106f0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80106f2:	8989      	ldrh	r1, [r1, #12]
 80106f4:	fbb3 f3f1 	udiv	r3, r3, r1
 80106f8:	429a      	cmp	r2, r3
 80106fa:	d201      	bcs.n	8010700 <find_volume+0x634>
 80106fc:	230d      	movs	r3, #13
 80106fe:	e06a      	b.n	80107d6 <find_volume+0x70a>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8010700:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010702:	f04f 32ff 	mov.w	r2, #4294967295
 8010706:	621a      	str	r2, [r3, #32]
 8010708:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801070a:	6a1a      	ldr	r2, [r3, #32]
 801070c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801070e:	61da      	str	r2, [r3, #28]
		fs->fsi_flag = 0x80;
 8010710:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010712:	2280      	movs	r2, #128	; 0x80
 8010714:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8010716:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801071a:	2b03      	cmp	r3, #3
 801071c:	d149      	bne.n	80107b2 <find_volume+0x6e6>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801071e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010720:	3340      	adds	r3, #64	; 0x40
 8010722:	3330      	adds	r3, #48	; 0x30
 8010724:	4618      	mov	r0, r3
 8010726:	f7fc fd4b 	bl	800d1c0 <ld_word>
 801072a:	4603      	mov	r3, r0
 801072c:	2b01      	cmp	r3, #1
 801072e:	d140      	bne.n	80107b2 <find_volume+0x6e6>
			&& move_window(fs, bsect + 1) == FR_OK)
 8010730:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010732:	3301      	adds	r3, #1
 8010734:	4619      	mov	r1, r3
 8010736:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8010738:	f7fd f966 	bl	800da08 <move_window>
 801073c:	4603      	mov	r3, r0
 801073e:	2b00      	cmp	r3, #0
 8010740:	d137      	bne.n	80107b2 <find_volume+0x6e6>
		{
			fs->fsi_flag = 0;
 8010742:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010744:	2200      	movs	r2, #0
 8010746:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8010748:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801074a:	3340      	adds	r3, #64	; 0x40
 801074c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010750:	4618      	mov	r0, r3
 8010752:	f7fc fd35 	bl	800d1c0 <ld_word>
 8010756:	4603      	mov	r3, r0
 8010758:	461a      	mov	r2, r3
 801075a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801075e:	429a      	cmp	r2, r3
 8010760:	d127      	bne.n	80107b2 <find_volume+0x6e6>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8010762:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010764:	3340      	adds	r3, #64	; 0x40
 8010766:	4618      	mov	r0, r3
 8010768:	f7fc fd42 	bl	800d1f0 <ld_dword>
 801076c:	4602      	mov	r2, r0
 801076e:	4b1c      	ldr	r3, [pc, #112]	; (80107e0 <find_volume+0x714>)
 8010770:	429a      	cmp	r2, r3
 8010772:	d11e      	bne.n	80107b2 <find_volume+0x6e6>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8010774:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010776:	3340      	adds	r3, #64	; 0x40
 8010778:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801077c:	4618      	mov	r0, r3
 801077e:	f7fc fd37 	bl	800d1f0 <ld_dword>
 8010782:	4602      	mov	r2, r0
 8010784:	4b17      	ldr	r3, [pc, #92]	; (80107e4 <find_volume+0x718>)
 8010786:	429a      	cmp	r2, r3
 8010788:	d113      	bne.n	80107b2 <find_volume+0x6e6>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 801078a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801078c:	3340      	adds	r3, #64	; 0x40
 801078e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8010792:	4618      	mov	r0, r3
 8010794:	f7fc fd2c 	bl	800d1f0 <ld_dword>
 8010798:	4602      	mov	r2, r0
 801079a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801079c:	621a      	str	r2, [r3, #32]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801079e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80107a0:	3340      	adds	r3, #64	; 0x40
 80107a2:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80107a6:	4618      	mov	r0, r3
 80107a8:	f7fc fd22 	bl	800d1f0 <ld_dword>
 80107ac:	4602      	mov	r2, r0
 80107ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80107b0:	61da      	str	r2, [r3, #28]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80107b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80107b4:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 80107b8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80107ba:	4b0b      	ldr	r3, [pc, #44]	; (80107e8 <find_volume+0x71c>)
 80107bc:	881b      	ldrh	r3, [r3, #0]
 80107be:	3301      	adds	r3, #1
 80107c0:	b29a      	uxth	r2, r3
 80107c2:	4b09      	ldr	r3, [pc, #36]	; (80107e8 <find_volume+0x71c>)
 80107c4:	801a      	strh	r2, [r3, #0]
 80107c6:	4b08      	ldr	r3, [pc, #32]	; (80107e8 <find_volume+0x71c>)
 80107c8:	881a      	ldrh	r2, [r3, #0]
 80107ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80107cc:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80107ce:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80107d0:	f7fd f8b2 	bl	800d938 <clear_lock>
#endif
	return FR_OK;
 80107d4:	2300      	movs	r3, #0
}
 80107d6:	4618      	mov	r0, r3
 80107d8:	3760      	adds	r7, #96	; 0x60
 80107da:	46bd      	mov	sp, r7
 80107dc:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80107e0:	41615252 	.word	0x41615252
 80107e4:	61417272 	.word	0x61417272
 80107e8:	20000220 	.word	0x20000220

080107ec <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80107ec:	b580      	push	{r7, lr}
 80107ee:	b084      	sub	sp, #16
 80107f0:	af00      	add	r7, sp, #0
 80107f2:	6078      	str	r0, [r7, #4]
 80107f4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80107f6:	2309      	movs	r3, #9
 80107f8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	d02e      	beq.n	801085e <validate+0x72>
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	681b      	ldr	r3, [r3, #0]
 8010804:	2b00      	cmp	r3, #0
 8010806:	d02a      	beq.n	801085e <validate+0x72>
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	681b      	ldr	r3, [r3, #0]
 801080c:	781b      	ldrb	r3, [r3, #0]
 801080e:	2b00      	cmp	r3, #0
 8010810:	d025      	beq.n	801085e <validate+0x72>
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	889a      	ldrh	r2, [r3, #4]
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	681b      	ldr	r3, [r3, #0]
 801081a:	88db      	ldrh	r3, [r3, #6]
 801081c:	429a      	cmp	r2, r3
 801081e:	d11e      	bne.n	801085e <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	681b      	ldr	r3, [r3, #0]
 8010824:	4618      	mov	r0, r3
 8010826:	f7fc ff0e 	bl	800d646 <lock_fs>
 801082a:	4603      	mov	r3, r0
 801082c:	2b00      	cmp	r3, #0
 801082e:	d014      	beq.n	801085a <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	681b      	ldr	r3, [r3, #0]
 8010834:	785b      	ldrb	r3, [r3, #1]
 8010836:	4618      	mov	r0, r3
 8010838:	f7fc fc24 	bl	800d084 <disk_status>
 801083c:	4603      	mov	r3, r0
 801083e:	f003 0301 	and.w	r3, r3, #1
 8010842:	2b00      	cmp	r3, #0
 8010844:	d102      	bne.n	801084c <validate+0x60>
				res = FR_OK;
 8010846:	2300      	movs	r3, #0
 8010848:	73fb      	strb	r3, [r7, #15]
 801084a:	e008      	b.n	801085e <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	681b      	ldr	r3, [r3, #0]
 8010850:	2100      	movs	r1, #0
 8010852:	4618      	mov	r0, r3
 8010854:	f7fc ff0d 	bl	800d672 <unlock_fs>
 8010858:	e001      	b.n	801085e <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 801085a:	230f      	movs	r3, #15
 801085c:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801085e:	7bfb      	ldrb	r3, [r7, #15]
 8010860:	2b00      	cmp	r3, #0
 8010862:	d102      	bne.n	801086a <validate+0x7e>
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	681b      	ldr	r3, [r3, #0]
 8010868:	e000      	b.n	801086c <validate+0x80>
 801086a:	2300      	movs	r3, #0
 801086c:	683a      	ldr	r2, [r7, #0]
 801086e:	6013      	str	r3, [r2, #0]
	return res;
 8010870:	7bfb      	ldrb	r3, [r7, #15]
}
 8010872:	4618      	mov	r0, r3
 8010874:	3710      	adds	r7, #16
 8010876:	46bd      	mov	sp, r7
 8010878:	bd80      	pop	{r7, pc}
	...

0801087c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 801087c:	b580      	push	{r7, lr}
 801087e:	b088      	sub	sp, #32
 8010880:	af00      	add	r7, sp, #0
 8010882:	60f8      	str	r0, [r7, #12]
 8010884:	60b9      	str	r1, [r7, #8]
 8010886:	4613      	mov	r3, r2
 8010888:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801088a:	68bb      	ldr	r3, [r7, #8]
 801088c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801088e:	f107 0310 	add.w	r3, r7, #16
 8010892:	4618      	mov	r0, r3
 8010894:	f7ff fb71 	bl	800ff7a <get_ldnumber>
 8010898:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801089a:	69fb      	ldr	r3, [r7, #28]
 801089c:	2b00      	cmp	r3, #0
 801089e:	da01      	bge.n	80108a4 <f_mount+0x28>
 80108a0:	230b      	movs	r3, #11
 80108a2:	e048      	b.n	8010936 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80108a4:	4a26      	ldr	r2, [pc, #152]	; (8010940 <f_mount+0xc4>)
 80108a6:	69fb      	ldr	r3, [r7, #28]
 80108a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80108ac:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80108ae:	69bb      	ldr	r3, [r7, #24]
 80108b0:	2b00      	cmp	r3, #0
 80108b2:	d00f      	beq.n	80108d4 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80108b4:	69b8      	ldr	r0, [r7, #24]
 80108b6:	f7fd f83f 	bl	800d938 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 80108ba:	69bb      	ldr	r3, [r7, #24]
 80108bc:	699b      	ldr	r3, [r3, #24]
 80108be:	4618      	mov	r0, r3
 80108c0:	f000 ffd5 	bl	801186e <ff_del_syncobj>
 80108c4:	4603      	mov	r3, r0
 80108c6:	2b00      	cmp	r3, #0
 80108c8:	d101      	bne.n	80108ce <f_mount+0x52>
 80108ca:	2302      	movs	r3, #2
 80108cc:	e033      	b.n	8010936 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80108ce:	69bb      	ldr	r3, [r7, #24]
 80108d0:	2200      	movs	r2, #0
 80108d2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80108d4:	68fb      	ldr	r3, [r7, #12]
 80108d6:	2b00      	cmp	r3, #0
 80108d8:	d00f      	beq.n	80108fa <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 80108da:	68fb      	ldr	r3, [r7, #12]
 80108dc:	2200      	movs	r2, #0
 80108de:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 80108e0:	69fb      	ldr	r3, [r7, #28]
 80108e2:	b2da      	uxtb	r2, r3
 80108e4:	68fb      	ldr	r3, [r7, #12]
 80108e6:	3318      	adds	r3, #24
 80108e8:	4619      	mov	r1, r3
 80108ea:	4610      	mov	r0, r2
 80108ec:	f000 ffa4 	bl	8011838 <ff_cre_syncobj>
 80108f0:	4603      	mov	r3, r0
 80108f2:	2b00      	cmp	r3, #0
 80108f4:	d101      	bne.n	80108fa <f_mount+0x7e>
 80108f6:	2302      	movs	r3, #2
 80108f8:	e01d      	b.n	8010936 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80108fa:	68fa      	ldr	r2, [r7, #12]
 80108fc:	4910      	ldr	r1, [pc, #64]	; (8010940 <f_mount+0xc4>)
 80108fe:	69fb      	ldr	r3, [r7, #28]
 8010900:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8010904:	68fb      	ldr	r3, [r7, #12]
 8010906:	2b00      	cmp	r3, #0
 8010908:	d002      	beq.n	8010910 <f_mount+0x94>
 801090a:	79fb      	ldrb	r3, [r7, #7]
 801090c:	2b01      	cmp	r3, #1
 801090e:	d001      	beq.n	8010914 <f_mount+0x98>
 8010910:	2300      	movs	r3, #0
 8010912:	e010      	b.n	8010936 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8010914:	f107 010c 	add.w	r1, r7, #12
 8010918:	f107 0308 	add.w	r3, r7, #8
 801091c:	2200      	movs	r2, #0
 801091e:	4618      	mov	r0, r3
 8010920:	f7ff fbd4 	bl	80100cc <find_volume>
 8010924:	4603      	mov	r3, r0
 8010926:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8010928:	68fb      	ldr	r3, [r7, #12]
 801092a:	7dfa      	ldrb	r2, [r7, #23]
 801092c:	4611      	mov	r1, r2
 801092e:	4618      	mov	r0, r3
 8010930:	f7fc fe9f 	bl	800d672 <unlock_fs>
 8010934:	7dfb      	ldrb	r3, [r7, #23]
}
 8010936:	4618      	mov	r0, r3
 8010938:	3720      	adds	r7, #32
 801093a:	46bd      	mov	sp, r7
 801093c:	bd80      	pop	{r7, pc}
 801093e:	bf00      	nop
 8010940:	2000021c 	.word	0x2000021c

08010944 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8010944:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8010948:	b0a4      	sub	sp, #144	; 0x90
 801094a:	af00      	add	r7, sp, #0
 801094c:	60f8      	str	r0, [r7, #12]
 801094e:	60b9      	str	r1, [r7, #8]
 8010950:	4613      	mov	r3, r2
 8010952:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8010954:	68fb      	ldr	r3, [r7, #12]
 8010956:	2b00      	cmp	r3, #0
 8010958:	d101      	bne.n	801095e <f_open+0x1a>
 801095a:	2309      	movs	r3, #9
 801095c:	e2c9      	b.n	8010ef2 <f_open+0x5ae>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 801095e:	79fb      	ldrb	r3, [r7, #7]
 8010960:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010964:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8010966:	79fa      	ldrb	r2, [r7, #7]
 8010968:	f107 0114 	add.w	r1, r7, #20
 801096c:	f107 0308 	add.w	r3, r7, #8
 8010970:	4618      	mov	r0, r3
 8010972:	f7ff fbab 	bl	80100cc <find_volume>
 8010976:	4603      	mov	r3, r0
 8010978:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	if (res == FR_OK) {
 801097c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8010980:	2b00      	cmp	r3, #0
 8010982:	f040 82a6 	bne.w	8010ed2 <f_open+0x58e>
		dj.obj.fs = fs;
 8010986:	697b      	ldr	r3, [r7, #20]
 8010988:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
 801098a:	f44f 608c 	mov.w	r0, #1120	; 0x460
 801098e:	f000 ff9a 	bl	80118c6 <ff_memalloc>
 8010992:	67f8      	str	r0, [r7, #124]	; 0x7c
 8010994:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8010996:	2b00      	cmp	r3, #0
 8010998:	d106      	bne.n	80109a8 <f_open+0x64>
 801099a:	697b      	ldr	r3, [r7, #20]
 801099c:	2111      	movs	r1, #17
 801099e:	4618      	mov	r0, r3
 80109a0:	f7fc fe67 	bl	800d672 <unlock_fs>
 80109a4:	2311      	movs	r3, #17
 80109a6:	e2a4      	b.n	8010ef2 <f_open+0x5ae>
 80109a8:	697b      	ldr	r3, [r7, #20]
 80109aa:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80109ac:	611a      	str	r2, [r3, #16]
 80109ae:	697b      	ldr	r3, [r7, #20]
 80109b0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80109b2:	f502 7200 	add.w	r2, r2, #512	; 0x200
 80109b6:	615a      	str	r2, [r3, #20]
		res = follow_path(&dj, path);	/* Follow the file path */
 80109b8:	68ba      	ldr	r2, [r7, #8]
 80109ba:	f107 0318 	add.w	r3, r7, #24
 80109be:	4611      	mov	r1, r2
 80109c0:	4618      	mov	r0, r3
 80109c2:	f7ff fa2d 	bl	800fe20 <follow_path>
 80109c6:	4603      	mov	r3, r0
 80109c8:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80109cc:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80109d0:	2b00      	cmp	r3, #0
 80109d2:	d11a      	bne.n	8010a0a <f_open+0xc6>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80109d4:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80109d8:	b25b      	sxtb	r3, r3
 80109da:	2b00      	cmp	r3, #0
 80109dc:	da03      	bge.n	80109e6 <f_open+0xa2>
				res = FR_INVALID_NAME;
 80109de:	2306      	movs	r3, #6
 80109e0:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 80109e4:	e011      	b.n	8010a0a <f_open+0xc6>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80109e6:	79fb      	ldrb	r3, [r7, #7]
 80109e8:	f023 0301 	bic.w	r3, r3, #1
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	bf14      	ite	ne
 80109f0:	2301      	movne	r3, #1
 80109f2:	2300      	moveq	r3, #0
 80109f4:	b2db      	uxtb	r3, r3
 80109f6:	461a      	mov	r2, r3
 80109f8:	f107 0318 	add.w	r3, r7, #24
 80109fc:	4611      	mov	r1, r2
 80109fe:	4618      	mov	r0, r3
 8010a00:	f7fc fe52 	bl	800d6a8 <chk_lock>
 8010a04:	4603      	mov	r3, r0
 8010a06:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8010a0a:	79fb      	ldrb	r3, [r7, #7]
 8010a0c:	f003 031c 	and.w	r3, r3, #28
 8010a10:	2b00      	cmp	r3, #0
 8010a12:	f000 8109 	beq.w	8010c28 <f_open+0x2e4>
			if (res != FR_OK) {					/* No file, create new */
 8010a16:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8010a1a:	2b00      	cmp	r3, #0
 8010a1c:	d017      	beq.n	8010a4e <f_open+0x10a>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8010a1e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8010a22:	2b04      	cmp	r3, #4
 8010a24:	d10e      	bne.n	8010a44 <f_open+0x100>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8010a26:	f7fc fe9b 	bl	800d760 <enq_lock>
 8010a2a:	4603      	mov	r3, r0
 8010a2c:	2b00      	cmp	r3, #0
 8010a2e:	d006      	beq.n	8010a3e <f_open+0xfa>
 8010a30:	f107 0318 	add.w	r3, r7, #24
 8010a34:	4618      	mov	r0, r3
 8010a36:	f7fe fe8b 	bl	800f750 <dir_register>
 8010a3a:	4603      	mov	r3, r0
 8010a3c:	e000      	b.n	8010a40 <f_open+0xfc>
 8010a3e:	2312      	movs	r3, #18
 8010a40:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8010a44:	79fb      	ldrb	r3, [r7, #7]
 8010a46:	f043 0308 	orr.w	r3, r3, #8
 8010a4a:	71fb      	strb	r3, [r7, #7]
 8010a4c:	e010      	b.n	8010a70 <f_open+0x12c>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8010a4e:	7fbb      	ldrb	r3, [r7, #30]
 8010a50:	f003 0311 	and.w	r3, r3, #17
 8010a54:	2b00      	cmp	r3, #0
 8010a56:	d003      	beq.n	8010a60 <f_open+0x11c>
					res = FR_DENIED;
 8010a58:	2307      	movs	r3, #7
 8010a5a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8010a5e:	e007      	b.n	8010a70 <f_open+0x12c>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8010a60:	79fb      	ldrb	r3, [r7, #7]
 8010a62:	f003 0304 	and.w	r3, r3, #4
 8010a66:	2b00      	cmp	r3, #0
 8010a68:	d002      	beq.n	8010a70 <f_open+0x12c>
 8010a6a:	2308      	movs	r3, #8
 8010a6c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8010a70:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8010a74:	2b00      	cmp	r3, #0
 8010a76:	f040 80f1 	bne.w	8010c5c <f_open+0x318>
 8010a7a:	79fb      	ldrb	r3, [r7, #7]
 8010a7c:	f003 0308 	and.w	r3, r3, #8
 8010a80:	2b00      	cmp	r3, #0
 8010a82:	f000 80eb 	beq.w	8010c5c <f_open+0x318>
				dw = GET_FATTIME();
 8010a86:	f7f9 fafd 	bl	800a084 <get_fattime>
 8010a8a:	67b8      	str	r0, [r7, #120]	; 0x78
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
 8010a8c:	697b      	ldr	r3, [r7, #20]
 8010a8e:	781b      	ldrb	r3, [r3, #0]
 8010a90:	2b04      	cmp	r3, #4
 8010a92:	f040 8082 	bne.w	8010b9a <f_open+0x256>
					/* Get current allocation info */
					fp->obj.fs = fs;
 8010a96:	697a      	ldr	r2, [r7, #20]
 8010a98:	68fb      	ldr	r3, [r7, #12]
 8010a9a:	601a      	str	r2, [r3, #0]
					fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);
 8010a9c:	697b      	ldr	r3, [r7, #20]
 8010a9e:	695b      	ldr	r3, [r3, #20]
 8010aa0:	3334      	adds	r3, #52	; 0x34
 8010aa2:	4618      	mov	r0, r3
 8010aa4:	f7fc fba4 	bl	800d1f0 <ld_dword>
 8010aa8:	4602      	mov	r2, r0
 8010aaa:	68fb      	ldr	r3, [r7, #12]
 8010aac:	609a      	str	r2, [r3, #8]
					fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 8010aae:	697b      	ldr	r3, [r7, #20]
 8010ab0:	695b      	ldr	r3, [r3, #20]
 8010ab2:	3338      	adds	r3, #56	; 0x38
 8010ab4:	4618      	mov	r0, r3
 8010ab6:	f7fc fbbe 	bl	800d236 <ld_qword>
 8010aba:	4603      	mov	r3, r0
 8010abc:	460c      	mov	r4, r1
 8010abe:	68fa      	ldr	r2, [r7, #12]
 8010ac0:	e9c2 3404 	strd	r3, r4, [r2, #16]
					fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 8010ac4:	697b      	ldr	r3, [r7, #20]
 8010ac6:	695b      	ldr	r3, [r3, #20]
 8010ac8:	3321      	adds	r3, #33	; 0x21
 8010aca:	781b      	ldrb	r3, [r3, #0]
 8010acc:	f003 0302 	and.w	r3, r3, #2
 8010ad0:	b2da      	uxtb	r2, r3
 8010ad2:	68fb      	ldr	r3, [r7, #12]
 8010ad4:	71da      	strb	r2, [r3, #7]
					fp->obj.n_frag = 0;
 8010ad6:	68fb      	ldr	r3, [r7, #12]
 8010ad8:	2200      	movs	r2, #0
 8010ada:	61da      	str	r2, [r3, #28]
					/* Initialize directory entry block */
					st_dword(fs->dirbuf + XDIR_CrtTime, dw);	/* Set created time */
 8010adc:	697b      	ldr	r3, [r7, #20]
 8010ade:	695b      	ldr	r3, [r3, #20]
 8010ae0:	3308      	adds	r3, #8
 8010ae2:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8010ae4:	4618      	mov	r0, r3
 8010ae6:	f7fc fc7e 	bl	800d3e6 <st_dword>
					fs->dirbuf[XDIR_CrtTime10] = 0;
 8010aea:	697b      	ldr	r3, [r7, #20]
 8010aec:	695b      	ldr	r3, [r3, #20]
 8010aee:	3314      	adds	r3, #20
 8010af0:	2200      	movs	r2, #0
 8010af2:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_ModTime, dw);	/* Set modified time */
 8010af4:	697b      	ldr	r3, [r7, #20]
 8010af6:	695b      	ldr	r3, [r3, #20]
 8010af8:	330c      	adds	r3, #12
 8010afa:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8010afc:	4618      	mov	r0, r3
 8010afe:	f7fc fc72 	bl	800d3e6 <st_dword>
					fs->dirbuf[XDIR_ModTime10] = 0;
 8010b02:	697b      	ldr	r3, [r7, #20]
 8010b04:	695b      	ldr	r3, [r3, #20]
 8010b06:	3315      	adds	r3, #21
 8010b08:	2200      	movs	r2, #0
 8010b0a:	701a      	strb	r2, [r3, #0]
					fs->dirbuf[XDIR_Attr] = AM_ARC;				/* Reset attribute */
 8010b0c:	697b      	ldr	r3, [r7, #20]
 8010b0e:	695b      	ldr	r3, [r3, #20]
 8010b10:	3304      	adds	r3, #4
 8010b12:	2220      	movs	r2, #32
 8010b14:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_FstClus, 0);		/* Reset file allocation info */
 8010b16:	697b      	ldr	r3, [r7, #20]
 8010b18:	695b      	ldr	r3, [r3, #20]
 8010b1a:	3334      	adds	r3, #52	; 0x34
 8010b1c:	2100      	movs	r1, #0
 8010b1e:	4618      	mov	r0, r3
 8010b20:	f7fc fc61 	bl	800d3e6 <st_dword>
					st_qword(fs->dirbuf + XDIR_FileSize, 0);
 8010b24:	697b      	ldr	r3, [r7, #20]
 8010b26:	695b      	ldr	r3, [r3, #20]
 8010b28:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8010b2c:	f04f 0200 	mov.w	r2, #0
 8010b30:	f04f 0300 	mov.w	r3, #0
 8010b34:	4608      	mov	r0, r1
 8010b36:	f7fc fc82 	bl	800d43e <st_qword>
					st_qword(fs->dirbuf + XDIR_ValidFileSize, 0);
 8010b3a:	697b      	ldr	r3, [r7, #20]
 8010b3c:	695b      	ldr	r3, [r3, #20]
 8010b3e:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8010b42:	f04f 0200 	mov.w	r2, #0
 8010b46:	f04f 0300 	mov.w	r3, #0
 8010b4a:	4608      	mov	r0, r1
 8010b4c:	f7fc fc77 	bl	800d43e <st_qword>
					fs->dirbuf[XDIR_GenFlags] = 1;
 8010b50:	697b      	ldr	r3, [r7, #20]
 8010b52:	695b      	ldr	r3, [r3, #20]
 8010b54:	3321      	adds	r3, #33	; 0x21
 8010b56:	2201      	movs	r2, #1
 8010b58:	701a      	strb	r2, [r3, #0]
					res = store_xdir(&dj);
 8010b5a:	f107 0318 	add.w	r3, r7, #24
 8010b5e:	4618      	mov	r0, r3
 8010b60:	f7fe fb43 	bl	800f1ea <store_xdir>
 8010b64:	4603      	mov	r3, r0
 8010b66:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
					if (res == FR_OK && fp->obj.sclust) {		/* Remove the cluster chain if exist */
 8010b6a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8010b6e:	2b00      	cmp	r3, #0
 8010b70:	d174      	bne.n	8010c5c <f_open+0x318>
 8010b72:	68fb      	ldr	r3, [r7, #12]
 8010b74:	689b      	ldr	r3, [r3, #8]
 8010b76:	2b00      	cmp	r3, #0
 8010b78:	d070      	beq.n	8010c5c <f_open+0x318>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 8010b7a:	68f8      	ldr	r0, [r7, #12]
 8010b7c:	68fb      	ldr	r3, [r7, #12]
 8010b7e:	689b      	ldr	r3, [r3, #8]
 8010b80:	2200      	movs	r2, #0
 8010b82:	4619      	mov	r1, r3
 8010b84:	f7fd fbd0 	bl	800e328 <remove_chain>
 8010b88:	4603      	mov	r3, r0
 8010b8a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 8010b8e:	68fb      	ldr	r3, [r7, #12]
 8010b90:	689a      	ldr	r2, [r3, #8]
 8010b92:	697b      	ldr	r3, [r7, #20]
 8010b94:	3a01      	subs	r2, #1
 8010b96:	61da      	str	r2, [r3, #28]
 8010b98:	e060      	b.n	8010c5c <f_open+0x318>
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8010b9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010b9c:	330e      	adds	r3, #14
 8010b9e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8010ba0:	4618      	mov	r0, r3
 8010ba2:	f7fc fc20 	bl	800d3e6 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8010ba6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010ba8:	3316      	adds	r3, #22
 8010baa:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8010bac:	4618      	mov	r0, r3
 8010bae:	f7fc fc1a 	bl	800d3e6 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8010bb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010bb4:	330b      	adds	r3, #11
 8010bb6:	2220      	movs	r2, #32
 8010bb8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8010bba:	697b      	ldr	r3, [r7, #20]
 8010bbc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010bbe:	4611      	mov	r1, r2
 8010bc0:	4618      	mov	r0, r3
 8010bc2:	f7fd ff83 	bl	800eacc <ld_clust>
 8010bc6:	6778      	str	r0, [r7, #116]	; 0x74
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8010bc8:	697b      	ldr	r3, [r7, #20]
 8010bca:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010bcc:	2200      	movs	r2, #0
 8010bce:	4618      	mov	r0, r3
 8010bd0:	f7fd ff9b 	bl	800eb0a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8010bd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010bd6:	331c      	adds	r3, #28
 8010bd8:	2100      	movs	r1, #0
 8010bda:	4618      	mov	r0, r3
 8010bdc:	f7fc fc03 	bl	800d3e6 <st_dword>
					fs->wflag = 1;
 8010be0:	697b      	ldr	r3, [r7, #20]
 8010be2:	2201      	movs	r2, #1
 8010be4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8010be6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	d037      	beq.n	8010c5c <f_open+0x318>
						dw = fs->winsect;
 8010bec:	697b      	ldr	r3, [r7, #20]
 8010bee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010bf0:	67bb      	str	r3, [r7, #120]	; 0x78
						res = remove_chain(&dj.obj, cl, 0);
 8010bf2:	f107 0318 	add.w	r3, r7, #24
 8010bf6:	2200      	movs	r2, #0
 8010bf8:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8010bfa:	4618      	mov	r0, r3
 8010bfc:	f7fd fb94 	bl	800e328 <remove_chain>
 8010c00:	4603      	mov	r3, r0
 8010c02:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
						if (res == FR_OK) {
 8010c06:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8010c0a:	2b00      	cmp	r3, #0
 8010c0c:	d126      	bne.n	8010c5c <f_open+0x318>
							res = move_window(fs, dw);
 8010c0e:	697b      	ldr	r3, [r7, #20]
 8010c10:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8010c12:	4618      	mov	r0, r3
 8010c14:	f7fc fef8 	bl	800da08 <move_window>
 8010c18:	4603      	mov	r3, r0
 8010c1a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8010c1e:	697b      	ldr	r3, [r7, #20]
 8010c20:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8010c22:	3a01      	subs	r2, #1
 8010c24:	61da      	str	r2, [r3, #28]
 8010c26:	e019      	b.n	8010c5c <f_open+0x318>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8010c28:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8010c2c:	2b00      	cmp	r3, #0
 8010c2e:	d115      	bne.n	8010c5c <f_open+0x318>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8010c30:	7fbb      	ldrb	r3, [r7, #30]
 8010c32:	f003 0310 	and.w	r3, r3, #16
 8010c36:	2b00      	cmp	r3, #0
 8010c38:	d003      	beq.n	8010c42 <f_open+0x2fe>
					res = FR_NO_FILE;
 8010c3a:	2304      	movs	r3, #4
 8010c3c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8010c40:	e00c      	b.n	8010c5c <f_open+0x318>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8010c42:	79fb      	ldrb	r3, [r7, #7]
 8010c44:	f003 0302 	and.w	r3, r3, #2
 8010c48:	2b00      	cmp	r3, #0
 8010c4a:	d007      	beq.n	8010c5c <f_open+0x318>
 8010c4c:	7fbb      	ldrb	r3, [r7, #30]
 8010c4e:	f003 0301 	and.w	r3, r3, #1
 8010c52:	2b00      	cmp	r3, #0
 8010c54:	d002      	beq.n	8010c5c <f_open+0x318>
						res = FR_DENIED;
 8010c56:	2307      	movs	r3, #7
 8010c58:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
					}
				}
			}
		}
		if (res == FR_OK) {
 8010c5c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8010c60:	2b00      	cmp	r3, #0
 8010c62:	d128      	bne.n	8010cb6 <f_open+0x372>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8010c64:	79fb      	ldrb	r3, [r7, #7]
 8010c66:	f003 0308 	and.w	r3, r3, #8
 8010c6a:	2b00      	cmp	r3, #0
 8010c6c:	d003      	beq.n	8010c76 <f_open+0x332>
				mode |= FA_MODIFIED;
 8010c6e:	79fb      	ldrb	r3, [r7, #7]
 8010c70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010c74:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8010c76:	697b      	ldr	r3, [r7, #20]
 8010c78:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010c7a:	68fb      	ldr	r3, [r7, #12]
 8010c7c:	649a      	str	r2, [r3, #72]	; 0x48
			fp->dir_ptr = dj.dir;
 8010c7e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010c80:	68fb      	ldr	r3, [r7, #12]
 8010c82:	64da      	str	r2, [r3, #76]	; 0x4c
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8010c84:	79fb      	ldrb	r3, [r7, #7]
 8010c86:	f023 0301 	bic.w	r3, r3, #1
 8010c8a:	2b00      	cmp	r3, #0
 8010c8c:	bf14      	ite	ne
 8010c8e:	2301      	movne	r3, #1
 8010c90:	2300      	moveq	r3, #0
 8010c92:	b2db      	uxtb	r3, r3
 8010c94:	461a      	mov	r2, r3
 8010c96:	f107 0318 	add.w	r3, r7, #24
 8010c9a:	4611      	mov	r1, r2
 8010c9c:	4618      	mov	r0, r3
 8010c9e:	f7fc fd81 	bl	800d7a4 <inc_lock>
 8010ca2:	4602      	mov	r2, r0
 8010ca4:	68fb      	ldr	r3, [r7, #12]
 8010ca6:	62da      	str	r2, [r3, #44]	; 0x2c
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8010ca8:	68fb      	ldr	r3, [r7, #12]
 8010caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010cac:	2b00      	cmp	r3, #0
 8010cae:	d102      	bne.n	8010cb6 <f_open+0x372>
 8010cb0:	2302      	movs	r3, #2
 8010cb2:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8010cb6:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	f040 8106 	bne.w	8010ecc <f_open+0x588>
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 8010cc0:	697b      	ldr	r3, [r7, #20]
 8010cc2:	781b      	ldrb	r3, [r3, #0]
 8010cc4:	2b04      	cmp	r3, #4
 8010cc6:	d12b      	bne.n	8010d20 <f_open+0x3dc>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 8010cc8:	6a3a      	ldr	r2, [r7, #32]
 8010cca:	68fb      	ldr	r3, [r7, #12]
 8010ccc:	621a      	str	r2, [r3, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 8010cce:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8010cd2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8010cd6:	7ffa      	ldrb	r2, [r7, #31]
 8010cd8:	431a      	orrs	r2, r3
 8010cda:	68fb      	ldr	r3, [r7, #12]
 8010cdc:	625a      	str	r2, [r3, #36]	; 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 8010cde:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8010ce0:	68fb      	ldr	r3, [r7, #12]
 8010ce2:	629a      	str	r2, [r3, #40]	; 0x28
				fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 8010ce4:	697b      	ldr	r3, [r7, #20]
 8010ce6:	695b      	ldr	r3, [r3, #20]
 8010ce8:	3334      	adds	r3, #52	; 0x34
 8010cea:	4618      	mov	r0, r3
 8010cec:	f7fc fa80 	bl	800d1f0 <ld_dword>
 8010cf0:	4602      	mov	r2, r0
 8010cf2:	68fb      	ldr	r3, [r7, #12]
 8010cf4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 8010cf6:	697b      	ldr	r3, [r7, #20]
 8010cf8:	695b      	ldr	r3, [r3, #20]
 8010cfa:	3338      	adds	r3, #56	; 0x38
 8010cfc:	4618      	mov	r0, r3
 8010cfe:	f7fc fa9a 	bl	800d236 <ld_qword>
 8010d02:	4603      	mov	r3, r0
 8010d04:	460c      	mov	r4, r1
 8010d06:	68fa      	ldr	r2, [r7, #12]
 8010d08:	e9c2 3404 	strd	r3, r4, [r2, #16]
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 8010d0c:	697b      	ldr	r3, [r7, #20]
 8010d0e:	695b      	ldr	r3, [r3, #20]
 8010d10:	3321      	adds	r3, #33	; 0x21
 8010d12:	781b      	ldrb	r3, [r3, #0]
 8010d14:	f003 0302 	and.w	r3, r3, #2
 8010d18:	b2da      	uxtb	r2, r3
 8010d1a:	68fb      	ldr	r3, [r7, #12]
 8010d1c:	71da      	strb	r2, [r3, #7]
 8010d1e:	e013      	b.n	8010d48 <f_open+0x404>
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8010d20:	697b      	ldr	r3, [r7, #20]
 8010d22:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010d24:	4611      	mov	r1, r2
 8010d26:	4618      	mov	r0, r3
 8010d28:	f7fd fed0 	bl	800eacc <ld_clust>
 8010d2c:	4602      	mov	r2, r0
 8010d2e:	68fb      	ldr	r3, [r7, #12]
 8010d30:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8010d32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010d34:	331c      	adds	r3, #28
 8010d36:	4618      	mov	r0, r3
 8010d38:	f7fc fa5a 	bl	800d1f0 <ld_dword>
 8010d3c:	4603      	mov	r3, r0
 8010d3e:	f04f 0400 	mov.w	r4, #0
 8010d42:	68fa      	ldr	r2, [r7, #12]
 8010d44:	e9c2 3404 	strd	r3, r4, [r2, #16]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8010d48:	68fb      	ldr	r3, [r7, #12]
 8010d4a:	2200      	movs	r2, #0
 8010d4c:	651a      	str	r2, [r3, #80]	; 0x50
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8010d4e:	697a      	ldr	r2, [r7, #20]
 8010d50:	68fb      	ldr	r3, [r7, #12]
 8010d52:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8010d54:	697b      	ldr	r3, [r7, #20]
 8010d56:	88da      	ldrh	r2, [r3, #6]
 8010d58:	68fb      	ldr	r3, [r7, #12]
 8010d5a:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8010d5c:	68fb      	ldr	r3, [r7, #12]
 8010d5e:	79fa      	ldrb	r2, [r7, #7]
 8010d60:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			fp->err = 0;			/* Clear error flag */
 8010d64:	68fb      	ldr	r3, [r7, #12]
 8010d66:	2200      	movs	r2, #0
 8010d68:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			fp->sect = 0;			/* Invalidate current data sector */
 8010d6c:	68fb      	ldr	r3, [r7, #12]
 8010d6e:	2200      	movs	r2, #0
 8010d70:	645a      	str	r2, [r3, #68]	; 0x44
			fp->fptr = 0;			/* Set file pointer top of the file */
 8010d72:	68fa      	ldr	r2, [r7, #12]
 8010d74:	f04f 0300 	mov.w	r3, #0
 8010d78:	f04f 0400 	mov.w	r4, #0
 8010d7c:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8010d80:	68fb      	ldr	r3, [r7, #12]
 8010d82:	3354      	adds	r3, #84	; 0x54
 8010d84:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8010d88:	2100      	movs	r1, #0
 8010d8a:	4618      	mov	r0, r3
 8010d8c:	f7fc fbff 	bl	800d58e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8010d90:	79fb      	ldrb	r3, [r7, #7]
 8010d92:	f003 0320 	and.w	r3, r3, #32
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	f000 8098 	beq.w	8010ecc <f_open+0x588>
 8010d9c:	68fb      	ldr	r3, [r7, #12]
 8010d9e:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8010da2:	4323      	orrs	r3, r4
 8010da4:	f000 8092 	beq.w	8010ecc <f_open+0x588>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8010da8:	68fb      	ldr	r3, [r7, #12]
 8010daa:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8010dae:	68fa      	ldr	r2, [r7, #12]
 8010db0:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8010db4:	697b      	ldr	r3, [r7, #20]
 8010db6:	895b      	ldrh	r3, [r3, #10]
 8010db8:	461a      	mov	r2, r3
 8010dba:	697b      	ldr	r3, [r7, #20]
 8010dbc:	899b      	ldrh	r3, [r3, #12]
 8010dbe:	fb03 f302 	mul.w	r3, r3, r2
 8010dc2:	673b      	str	r3, [r7, #112]	; 0x70
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8010dc4:	68fb      	ldr	r3, [r7, #12]
 8010dc6:	689b      	ldr	r3, [r3, #8]
 8010dc8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8010dcc:	68fb      	ldr	r3, [r7, #12]
 8010dce:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8010dd2:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
 8010dd6:	e024      	b.n	8010e22 <f_open+0x4de>
					clst = get_fat(&fp->obj, clst);
 8010dd8:	68fb      	ldr	r3, [r7, #12]
 8010dda:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8010dde:	4618      	mov	r0, r3
 8010de0:	f7fc fed0 	bl	800db84 <get_fat>
 8010de4:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
					if (clst <= 1) res = FR_INT_ERR;
 8010de8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010dec:	2b01      	cmp	r3, #1
 8010dee:	d802      	bhi.n	8010df6 <f_open+0x4b2>
 8010df0:	2302      	movs	r3, #2
 8010df2:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8010df6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010dfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010dfe:	d102      	bne.n	8010e06 <f_open+0x4c2>
 8010e00:	2301      	movs	r3, #1
 8010e02:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8010e06:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010e08:	469b      	mov	fp, r3
 8010e0a:	f04f 0c00 	mov.w	ip, #0
 8010e0e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8010e12:	460b      	mov	r3, r1
 8010e14:	4614      	mov	r4, r2
 8010e16:	ebb3 030b 	subs.w	r3, r3, fp
 8010e1a:	eb64 040c 	sbc.w	r4, r4, ip
 8010e1e:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
 8010e22:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8010e26:	2b00      	cmp	r3, #0
 8010e28:	d109      	bne.n	8010e3e <f_open+0x4fa>
 8010e2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010e2c:	4619      	mov	r1, r3
 8010e2e:	f04f 0200 	mov.w	r2, #0
 8010e32:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 8010e36:	42a2      	cmp	r2, r4
 8010e38:	bf08      	it	eq
 8010e3a:	4299      	cmpeq	r1, r3
 8010e3c:	d3cc      	bcc.n	8010dd8 <f_open+0x494>
				}
				fp->clust = clst;
 8010e3e:	68fb      	ldr	r3, [r7, #12]
 8010e40:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8010e44:	641a      	str	r2, [r3, #64]	; 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8010e46:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	d13e      	bne.n	8010ecc <f_open+0x588>
 8010e4e:	697b      	ldr	r3, [r7, #20]
 8010e50:	899b      	ldrh	r3, [r3, #12]
 8010e52:	b29b      	uxth	r3, r3
 8010e54:	f04f 0400 	mov.w	r4, #0
 8010e58:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8010e5c:	461a      	mov	r2, r3
 8010e5e:	4623      	mov	r3, r4
 8010e60:	f7ef f9ee 	bl	8000240 <__aeabi_uldivmod>
 8010e64:	461c      	mov	r4, r3
 8010e66:	4613      	mov	r3, r2
 8010e68:	4323      	orrs	r3, r4
 8010e6a:	d02f      	beq.n	8010ecc <f_open+0x588>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8010e6c:	697b      	ldr	r3, [r7, #20]
 8010e6e:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8010e72:	4618      	mov	r0, r3
 8010e74:	f7fc fe66 	bl	800db44 <clust2sect>
 8010e78:	66f8      	str	r0, [r7, #108]	; 0x6c
 8010e7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	d103      	bne.n	8010e88 <f_open+0x544>
						res = FR_INT_ERR;
 8010e80:	2302      	movs	r3, #2
 8010e82:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8010e86:	e021      	b.n	8010ecc <f_open+0x588>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8010e88:	697b      	ldr	r3, [r7, #20]
 8010e8a:	899b      	ldrh	r3, [r3, #12]
 8010e8c:	b29b      	uxth	r3, r3
 8010e8e:	f04f 0400 	mov.w	r4, #0
 8010e92:	461a      	mov	r2, r3
 8010e94:	4623      	mov	r3, r4
 8010e96:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8010e9a:	f7ef f9d1 	bl	8000240 <__aeabi_uldivmod>
 8010e9e:	4603      	mov	r3, r0
 8010ea0:	460c      	mov	r4, r1
 8010ea2:	461a      	mov	r2, r3
 8010ea4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010ea6:	441a      	add	r2, r3
 8010ea8:	68fb      	ldr	r3, [r7, #12]
 8010eaa:	645a      	str	r2, [r3, #68]	; 0x44
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8010eac:	697b      	ldr	r3, [r7, #20]
 8010eae:	7858      	ldrb	r0, [r3, #1]
 8010eb0:	68fb      	ldr	r3, [r7, #12]
 8010eb2:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8010eb6:	68fb      	ldr	r3, [r7, #12]
 8010eb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010eba:	2301      	movs	r3, #1
 8010ebc:	f7fc f922 	bl	800d104 <disk_read>
 8010ec0:	4603      	mov	r3, r0
 8010ec2:	2b00      	cmp	r3, #0
 8010ec4:	d002      	beq.n	8010ecc <f_open+0x588>
 8010ec6:	2301      	movs	r3, #1
 8010ec8:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
				}
			}
#endif
		}

		FREE_NAMBUF();
 8010ecc:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8010ece:	f000 fd06 	bl	80118de <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8010ed2:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8010ed6:	2b00      	cmp	r3, #0
 8010ed8:	d002      	beq.n	8010ee0 <f_open+0x59c>
 8010eda:	68fb      	ldr	r3, [r7, #12]
 8010edc:	2200      	movs	r2, #0
 8010ede:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8010ee0:	697b      	ldr	r3, [r7, #20]
 8010ee2:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 8010ee6:	4611      	mov	r1, r2
 8010ee8:	4618      	mov	r0, r3
 8010eea:	f7fc fbc2 	bl	800d672 <unlock_fs>
 8010eee:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 8010ef2:	4618      	mov	r0, r3
 8010ef4:	3790      	adds	r7, #144	; 0x90
 8010ef6:	46bd      	mov	sp, r7
 8010ef8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08010efc <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8010efc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010efe:	b08d      	sub	sp, #52	; 0x34
 8010f00:	af00      	add	r7, sp, #0
 8010f02:	60f8      	str	r0, [r7, #12]
 8010f04:	60b9      	str	r1, [r7, #8]
 8010f06:	607a      	str	r2, [r7, #4]
 8010f08:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8010f0a:	68bb      	ldr	r3, [r7, #8]
 8010f0c:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8010f0e:	683b      	ldr	r3, [r7, #0]
 8010f10:	2200      	movs	r2, #0
 8010f12:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8010f14:	68fb      	ldr	r3, [r7, #12]
 8010f16:	f107 0210 	add.w	r2, r7, #16
 8010f1a:	4611      	mov	r1, r2
 8010f1c:	4618      	mov	r0, r3
 8010f1e:	f7ff fc65 	bl	80107ec <validate>
 8010f22:	4603      	mov	r3, r0
 8010f24:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8010f28:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010f2c:	2b00      	cmp	r3, #0
 8010f2e:	d108      	bne.n	8010f42 <f_write+0x46>
 8010f30:	68fb      	ldr	r3, [r7, #12]
 8010f32:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010f36:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8010f3a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010f3e:	2b00      	cmp	r3, #0
 8010f40:	d009      	beq.n	8010f56 <f_write+0x5a>
 8010f42:	693b      	ldr	r3, [r7, #16]
 8010f44:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8010f48:	4611      	mov	r1, r2
 8010f4a:	4618      	mov	r0, r3
 8010f4c:	f7fc fb91 	bl	800d672 <unlock_fs>
 8010f50:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010f54:	e1d3      	b.n	80112fe <f_write+0x402>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8010f56:	68fb      	ldr	r3, [r7, #12]
 8010f58:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010f5c:	f003 0302 	and.w	r3, r3, #2
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	d106      	bne.n	8010f72 <f_write+0x76>
 8010f64:	693b      	ldr	r3, [r7, #16]
 8010f66:	2107      	movs	r1, #7
 8010f68:	4618      	mov	r0, r3
 8010f6a:	f7fc fb82 	bl	800d672 <unlock_fs>
 8010f6e:	2307      	movs	r3, #7
 8010f70:	e1c5      	b.n	80112fe <f_write+0x402>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8010f72:	693b      	ldr	r3, [r7, #16]
 8010f74:	781b      	ldrb	r3, [r3, #0]
 8010f76:	2b04      	cmp	r3, #4
 8010f78:	f000 81ac 	beq.w	80112d4 <f_write+0x3d8>
 8010f7c:	68fb      	ldr	r3, [r7, #12]
 8010f7e:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8010f82:	461a      	mov	r2, r3
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	441a      	add	r2, r3
 8010f88:	68fb      	ldr	r3, [r7, #12]
 8010f8a:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8010f8e:	429a      	cmp	r2, r3
 8010f90:	f080 81a0 	bcs.w	80112d4 <f_write+0x3d8>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8010f94:	68fb      	ldr	r3, [r7, #12]
 8010f96:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8010f9a:	43db      	mvns	r3, r3
 8010f9c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8010f9e:	e199      	b.n	80112d4 <f_write+0x3d8>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8010fa0:	68fb      	ldr	r3, [r7, #12]
 8010fa2:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8010fa6:	693b      	ldr	r3, [r7, #16]
 8010fa8:	899b      	ldrh	r3, [r3, #12]
 8010faa:	b29b      	uxth	r3, r3
 8010fac:	f04f 0400 	mov.w	r4, #0
 8010fb0:	461a      	mov	r2, r3
 8010fb2:	4623      	mov	r3, r4
 8010fb4:	f7ef f944 	bl	8000240 <__aeabi_uldivmod>
 8010fb8:	461c      	mov	r4, r3
 8010fba:	4613      	mov	r3, r2
 8010fbc:	4323      	orrs	r3, r4
 8010fbe:	f040 812a 	bne.w	8011216 <f_write+0x31a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8010fc2:	68fb      	ldr	r3, [r7, #12]
 8010fc4:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8010fc8:	693b      	ldr	r3, [r7, #16]
 8010fca:	899b      	ldrh	r3, [r3, #12]
 8010fcc:	b29b      	uxth	r3, r3
 8010fce:	f04f 0400 	mov.w	r4, #0
 8010fd2:	461a      	mov	r2, r3
 8010fd4:	4623      	mov	r3, r4
 8010fd6:	f7ef f933 	bl	8000240 <__aeabi_uldivmod>
 8010fda:	4603      	mov	r3, r0
 8010fdc:	460c      	mov	r4, r1
 8010fde:	461a      	mov	r2, r3
 8010fe0:	693b      	ldr	r3, [r7, #16]
 8010fe2:	895b      	ldrh	r3, [r3, #10]
 8010fe4:	3b01      	subs	r3, #1
 8010fe6:	4013      	ands	r3, r2
 8010fe8:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8010fea:	69bb      	ldr	r3, [r7, #24]
 8010fec:	2b00      	cmp	r3, #0
 8010fee:	d152      	bne.n	8011096 <f_write+0x19a>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8010ff0:	68fb      	ldr	r3, [r7, #12]
 8010ff2:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8010ff6:	4323      	orrs	r3, r4
 8010ff8:	d10c      	bne.n	8011014 <f_write+0x118>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8010ffa:	68fb      	ldr	r3, [r7, #12]
 8010ffc:	689b      	ldr	r3, [r3, #8]
 8010ffe:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8011000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011002:	2b00      	cmp	r3, #0
 8011004:	d11c      	bne.n	8011040 <f_write+0x144>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8011006:	68fb      	ldr	r3, [r7, #12]
 8011008:	2100      	movs	r1, #0
 801100a:	4618      	mov	r0, r3
 801100c:	f7fd fa40 	bl	800e490 <create_chain>
 8011010:	62b8      	str	r0, [r7, #40]	; 0x28
 8011012:	e015      	b.n	8011040 <f_write+0x144>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8011014:	68fb      	ldr	r3, [r7, #12]
 8011016:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011018:	2b00      	cmp	r3, #0
 801101a:	d009      	beq.n	8011030 <f_write+0x134>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801101c:	68fb      	ldr	r3, [r7, #12]
 801101e:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8011022:	461a      	mov	r2, r3
 8011024:	4623      	mov	r3, r4
 8011026:	68f8      	ldr	r0, [r7, #12]
 8011028:	f7fd fb33 	bl	800e692 <clmt_clust>
 801102c:	62b8      	str	r0, [r7, #40]	; 0x28
 801102e:	e007      	b.n	8011040 <f_write+0x144>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8011030:	68fa      	ldr	r2, [r7, #12]
 8011032:	68fb      	ldr	r3, [r7, #12]
 8011034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011036:	4619      	mov	r1, r3
 8011038:	4610      	mov	r0, r2
 801103a:	f7fd fa29 	bl	800e490 <create_chain>
 801103e:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8011040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011042:	2b00      	cmp	r3, #0
 8011044:	f000 814b 	beq.w	80112de <f_write+0x3e2>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8011048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801104a:	2b01      	cmp	r3, #1
 801104c:	d10a      	bne.n	8011064 <f_write+0x168>
 801104e:	68fb      	ldr	r3, [r7, #12]
 8011050:	2202      	movs	r2, #2
 8011052:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8011056:	693b      	ldr	r3, [r7, #16]
 8011058:	2102      	movs	r1, #2
 801105a:	4618      	mov	r0, r3
 801105c:	f7fc fb09 	bl	800d672 <unlock_fs>
 8011060:	2302      	movs	r3, #2
 8011062:	e14c      	b.n	80112fe <f_write+0x402>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011066:	f1b3 3fff 	cmp.w	r3, #4294967295
 801106a:	d10a      	bne.n	8011082 <f_write+0x186>
 801106c:	68fb      	ldr	r3, [r7, #12]
 801106e:	2201      	movs	r2, #1
 8011070:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8011074:	693b      	ldr	r3, [r7, #16]
 8011076:	2101      	movs	r1, #1
 8011078:	4618      	mov	r0, r3
 801107a:	f7fc fafa 	bl	800d672 <unlock_fs>
 801107e:	2301      	movs	r3, #1
 8011080:	e13d      	b.n	80112fe <f_write+0x402>
				fp->clust = clst;			/* Update current cluster */
 8011082:	68fb      	ldr	r3, [r7, #12]
 8011084:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011086:	641a      	str	r2, [r3, #64]	; 0x40
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8011088:	68fb      	ldr	r3, [r7, #12]
 801108a:	689b      	ldr	r3, [r3, #8]
 801108c:	2b00      	cmp	r3, #0
 801108e:	d102      	bne.n	8011096 <f_write+0x19a>
 8011090:	68fb      	ldr	r3, [r7, #12]
 8011092:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011094:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8011096:	68fb      	ldr	r3, [r7, #12]
 8011098:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801109c:	b25b      	sxtb	r3, r3
 801109e:	2b00      	cmp	r3, #0
 80110a0:	da20      	bge.n	80110e4 <f_write+0x1e8>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80110a2:	693b      	ldr	r3, [r7, #16]
 80110a4:	7858      	ldrb	r0, [r3, #1]
 80110a6:	68fb      	ldr	r3, [r7, #12]
 80110a8:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80110ac:	68fb      	ldr	r3, [r7, #12]
 80110ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80110b0:	2301      	movs	r3, #1
 80110b2:	f7fc f847 	bl	800d144 <disk_write>
 80110b6:	4603      	mov	r3, r0
 80110b8:	2b00      	cmp	r3, #0
 80110ba:	d00a      	beq.n	80110d2 <f_write+0x1d6>
 80110bc:	68fb      	ldr	r3, [r7, #12]
 80110be:	2201      	movs	r2, #1
 80110c0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80110c4:	693b      	ldr	r3, [r7, #16]
 80110c6:	2101      	movs	r1, #1
 80110c8:	4618      	mov	r0, r3
 80110ca:	f7fc fad2 	bl	800d672 <unlock_fs>
 80110ce:	2301      	movs	r3, #1
 80110d0:	e115      	b.n	80112fe <f_write+0x402>
				fp->flag &= (BYTE)~FA_DIRTY;
 80110d2:	68fb      	ldr	r3, [r7, #12]
 80110d4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80110d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80110dc:	b2da      	uxtb	r2, r3
 80110de:	68fb      	ldr	r3, [r7, #12]
 80110e0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80110e4:	693a      	ldr	r2, [r7, #16]
 80110e6:	68fb      	ldr	r3, [r7, #12]
 80110e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80110ea:	4619      	mov	r1, r3
 80110ec:	4610      	mov	r0, r2
 80110ee:	f7fc fd29 	bl	800db44 <clust2sect>
 80110f2:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80110f4:	697b      	ldr	r3, [r7, #20]
 80110f6:	2b00      	cmp	r3, #0
 80110f8:	d10a      	bne.n	8011110 <f_write+0x214>
 80110fa:	68fb      	ldr	r3, [r7, #12]
 80110fc:	2202      	movs	r2, #2
 80110fe:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8011102:	693b      	ldr	r3, [r7, #16]
 8011104:	2102      	movs	r1, #2
 8011106:	4618      	mov	r0, r3
 8011108:	f7fc fab3 	bl	800d672 <unlock_fs>
 801110c:	2302      	movs	r3, #2
 801110e:	e0f6      	b.n	80112fe <f_write+0x402>
			sect += csect;
 8011110:	697a      	ldr	r2, [r7, #20]
 8011112:	69bb      	ldr	r3, [r7, #24]
 8011114:	4413      	add	r3, r2
 8011116:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8011118:	693b      	ldr	r3, [r7, #16]
 801111a:	899b      	ldrh	r3, [r3, #12]
 801111c:	461a      	mov	r2, r3
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	fbb3 f3f2 	udiv	r3, r3, r2
 8011124:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8011126:	6a3b      	ldr	r3, [r7, #32]
 8011128:	2b00      	cmp	r3, #0
 801112a:	d04b      	beq.n	80111c4 <f_write+0x2c8>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801112c:	69ba      	ldr	r2, [r7, #24]
 801112e:	6a3b      	ldr	r3, [r7, #32]
 8011130:	4413      	add	r3, r2
 8011132:	693a      	ldr	r2, [r7, #16]
 8011134:	8952      	ldrh	r2, [r2, #10]
 8011136:	4293      	cmp	r3, r2
 8011138:	d905      	bls.n	8011146 <f_write+0x24a>
					cc = fs->csize - csect;
 801113a:	693b      	ldr	r3, [r7, #16]
 801113c:	895b      	ldrh	r3, [r3, #10]
 801113e:	461a      	mov	r2, r3
 8011140:	69bb      	ldr	r3, [r7, #24]
 8011142:	1ad3      	subs	r3, r2, r3
 8011144:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011146:	693b      	ldr	r3, [r7, #16]
 8011148:	7858      	ldrb	r0, [r3, #1]
 801114a:	6a3b      	ldr	r3, [r7, #32]
 801114c:	697a      	ldr	r2, [r7, #20]
 801114e:	69f9      	ldr	r1, [r7, #28]
 8011150:	f7fb fff8 	bl	800d144 <disk_write>
 8011154:	4603      	mov	r3, r0
 8011156:	2b00      	cmp	r3, #0
 8011158:	d00a      	beq.n	8011170 <f_write+0x274>
 801115a:	68fb      	ldr	r3, [r7, #12]
 801115c:	2201      	movs	r2, #1
 801115e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8011162:	693b      	ldr	r3, [r7, #16]
 8011164:	2101      	movs	r1, #1
 8011166:	4618      	mov	r0, r3
 8011168:	f7fc fa83 	bl	800d672 <unlock_fs>
 801116c:	2301      	movs	r3, #1
 801116e:	e0c6      	b.n	80112fe <f_write+0x402>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8011170:	68fb      	ldr	r3, [r7, #12]
 8011172:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011174:	697b      	ldr	r3, [r7, #20]
 8011176:	1ad3      	subs	r3, r2, r3
 8011178:	6a3a      	ldr	r2, [r7, #32]
 801117a:	429a      	cmp	r2, r3
 801117c:	d91a      	bls.n	80111b4 <f_write+0x2b8>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 801117e:	68fb      	ldr	r3, [r7, #12]
 8011180:	f103 0054 	add.w	r0, r3, #84	; 0x54
 8011184:	68fb      	ldr	r3, [r7, #12]
 8011186:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011188:	697b      	ldr	r3, [r7, #20]
 801118a:	1ad3      	subs	r3, r2, r3
 801118c:	693a      	ldr	r2, [r7, #16]
 801118e:	8992      	ldrh	r2, [r2, #12]
 8011190:	fb02 f303 	mul.w	r3, r2, r3
 8011194:	69fa      	ldr	r2, [r7, #28]
 8011196:	18d1      	adds	r1, r2, r3
 8011198:	693b      	ldr	r3, [r7, #16]
 801119a:	899b      	ldrh	r3, [r3, #12]
 801119c:	461a      	mov	r2, r3
 801119e:	f7fc f9d5 	bl	800d54c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80111a2:	68fb      	ldr	r3, [r7, #12]
 80111a4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80111a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80111ac:	b2da      	uxtb	r2, r3
 80111ae:	68fb      	ldr	r3, [r7, #12]
 80111b0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80111b4:	693b      	ldr	r3, [r7, #16]
 80111b6:	899b      	ldrh	r3, [r3, #12]
 80111b8:	461a      	mov	r2, r3
 80111ba:	6a3b      	ldr	r3, [r7, #32]
 80111bc:	fb02 f303 	mul.w	r3, r2, r3
 80111c0:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80111c2:	e05d      	b.n	8011280 <f_write+0x384>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80111c4:	68fb      	ldr	r3, [r7, #12]
 80111c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80111c8:	697a      	ldr	r2, [r7, #20]
 80111ca:	429a      	cmp	r2, r3
 80111cc:	d020      	beq.n	8011210 <f_write+0x314>
				fp->fptr < fp->obj.objsize &&
 80111ce:	68fb      	ldr	r3, [r7, #12]
 80111d0:	e9d3 120e 	ldrd	r1, r2, [r3, #56]	; 0x38
 80111d4:	68fb      	ldr	r3, [r7, #12]
 80111d6:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80111da:	42a2      	cmp	r2, r4
 80111dc:	bf08      	it	eq
 80111de:	4299      	cmpeq	r1, r3
 80111e0:	d216      	bcs.n	8011210 <f_write+0x314>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80111e2:	693b      	ldr	r3, [r7, #16]
 80111e4:	7858      	ldrb	r0, [r3, #1]
 80111e6:	68fb      	ldr	r3, [r7, #12]
 80111e8:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80111ec:	2301      	movs	r3, #1
 80111ee:	697a      	ldr	r2, [r7, #20]
 80111f0:	f7fb ff88 	bl	800d104 <disk_read>
 80111f4:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	d00a      	beq.n	8011210 <f_write+0x314>
					ABORT(fs, FR_DISK_ERR);
 80111fa:	68fb      	ldr	r3, [r7, #12]
 80111fc:	2201      	movs	r2, #1
 80111fe:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8011202:	693b      	ldr	r3, [r7, #16]
 8011204:	2101      	movs	r1, #1
 8011206:	4618      	mov	r0, r3
 8011208:	f7fc fa33 	bl	800d672 <unlock_fs>
 801120c:	2301      	movs	r3, #1
 801120e:	e076      	b.n	80112fe <f_write+0x402>
			}
#endif
			fp->sect = sect;
 8011210:	68fb      	ldr	r3, [r7, #12]
 8011212:	697a      	ldr	r2, [r7, #20]
 8011214:	645a      	str	r2, [r3, #68]	; 0x44
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8011216:	693b      	ldr	r3, [r7, #16]
 8011218:	899b      	ldrh	r3, [r3, #12]
 801121a:	4618      	mov	r0, r3
 801121c:	68fb      	ldr	r3, [r7, #12]
 801121e:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8011222:	693a      	ldr	r2, [r7, #16]
 8011224:	8992      	ldrh	r2, [r2, #12]
 8011226:	fbb3 f1f2 	udiv	r1, r3, r2
 801122a:	fb02 f201 	mul.w	r2, r2, r1
 801122e:	1a9b      	subs	r3, r3, r2
 8011230:	1ac3      	subs	r3, r0, r3
 8011232:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8011234:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	429a      	cmp	r2, r3
 801123a:	d901      	bls.n	8011240 <f_write+0x344>
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8011240:	68fb      	ldr	r3, [r7, #12]
 8011242:	f103 0554 	add.w	r5, r3, #84	; 0x54
 8011246:	68fb      	ldr	r3, [r7, #12]
 8011248:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 801124c:	693b      	ldr	r3, [r7, #16]
 801124e:	899b      	ldrh	r3, [r3, #12]
 8011250:	b29b      	uxth	r3, r3
 8011252:	f04f 0400 	mov.w	r4, #0
 8011256:	461a      	mov	r2, r3
 8011258:	4623      	mov	r3, r4
 801125a:	f7ee fff1 	bl	8000240 <__aeabi_uldivmod>
 801125e:	461c      	mov	r4, r3
 8011260:	4613      	mov	r3, r2
 8011262:	442b      	add	r3, r5
 8011264:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011266:	69f9      	ldr	r1, [r7, #28]
 8011268:	4618      	mov	r0, r3
 801126a:	f7fc f96f 	bl	800d54c <mem_cpy>
		fp->flag |= FA_DIRTY;
 801126e:	68fb      	ldr	r3, [r7, #12]
 8011270:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011274:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011278:	b2da      	uxtb	r2, r3
 801127a:	68fb      	ldr	r3, [r7, #12]
 801127c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8011280:	69fa      	ldr	r2, [r7, #28]
 8011282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011284:	4413      	add	r3, r2
 8011286:	61fb      	str	r3, [r7, #28]
 8011288:	68fb      	ldr	r3, [r7, #12]
 801128a:	e9d3 120e 	ldrd	r1, r2, [r3, #56]	; 0x38
 801128e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011290:	461d      	mov	r5, r3
 8011292:	f04f 0600 	mov.w	r6, #0
 8011296:	186b      	adds	r3, r5, r1
 8011298:	eb46 0402 	adc.w	r4, r6, r2
 801129c:	68fa      	ldr	r2, [r7, #12]
 801129e:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
 80112a2:	68fb      	ldr	r3, [r7, #12]
 80112a4:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 80112a8:	68fa      	ldr	r2, [r7, #12]
 80112aa:	e9d2 120e 	ldrd	r1, r2, [r2, #56]	; 0x38
 80112ae:	4294      	cmp	r4, r2
 80112b0:	bf08      	it	eq
 80112b2:	428b      	cmpeq	r3, r1
 80112b4:	d201      	bcs.n	80112ba <f_write+0x3be>
 80112b6:	460b      	mov	r3, r1
 80112b8:	4614      	mov	r4, r2
 80112ba:	68fa      	ldr	r2, [r7, #12]
 80112bc:	e9c2 3404 	strd	r3, r4, [r2, #16]
 80112c0:	683b      	ldr	r3, [r7, #0]
 80112c2:	681a      	ldr	r2, [r3, #0]
 80112c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112c6:	441a      	add	r2, r3
 80112c8:	683b      	ldr	r3, [r7, #0]
 80112ca:	601a      	str	r2, [r3, #0]
 80112cc:	687a      	ldr	r2, [r7, #4]
 80112ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112d0:	1ad3      	subs	r3, r2, r3
 80112d2:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	2b00      	cmp	r3, #0
 80112d8:	f47f ae62 	bne.w	8010fa0 <f_write+0xa4>
 80112dc:	e000      	b.n	80112e0 <f_write+0x3e4>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80112de:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80112e0:	68fb      	ldr	r3, [r7, #12]
 80112e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80112e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80112ea:	b2da      	uxtb	r2, r3
 80112ec:	68fb      	ldr	r3, [r7, #12]
 80112ee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	LEAVE_FF(fs, FR_OK);
 80112f2:	693b      	ldr	r3, [r7, #16]
 80112f4:	2100      	movs	r1, #0
 80112f6:	4618      	mov	r0, r3
 80112f8:	f7fc f9bb 	bl	800d672 <unlock_fs>
 80112fc:	2300      	movs	r3, #0
}
 80112fe:	4618      	mov	r0, r3
 8011300:	3734      	adds	r7, #52	; 0x34
 8011302:	46bd      	mov	sp, r7
 8011304:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011306 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8011306:	b590      	push	{r4, r7, lr}
 8011308:	b09d      	sub	sp, #116	; 0x74
 801130a:	af00      	add	r7, sp, #0
 801130c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8011314:	4611      	mov	r1, r2
 8011316:	4618      	mov	r0, r3
 8011318:	f7ff fa68 	bl	80107ec <validate>
 801131c:	4603      	mov	r3, r0
 801131e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if (res == FR_OK) {
 8011322:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8011326:	2b00      	cmp	r3, #0
 8011328:	f040 8127 	bne.w	801157a <f_sync+0x274>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011332:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011336:	2b00      	cmp	r3, #0
 8011338:	f000 811f 	beq.w	801157a <f_sync+0x274>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011342:	b25b      	sxtb	r3, r3
 8011344:	2b00      	cmp	r3, #0
 8011346:	da1c      	bge.n	8011382 <f_sync+0x7c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8011348:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801134a:	7858      	ldrb	r0, [r3, #1]
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011356:	2301      	movs	r3, #1
 8011358:	f7fb fef4 	bl	800d144 <disk_write>
 801135c:	4603      	mov	r3, r0
 801135e:	2b00      	cmp	r3, #0
 8011360:	d006      	beq.n	8011370 <f_sync+0x6a>
 8011362:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011364:	2101      	movs	r1, #1
 8011366:	4618      	mov	r0, r3
 8011368:	f7fc f983 	bl	800d672 <unlock_fs>
 801136c:	2301      	movs	r3, #1
 801136e:	e10d      	b.n	801158c <f_sync+0x286>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011376:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801137a:	b2da      	uxtb	r2, r3
 801137c:	687b      	ldr	r3, [r7, #4]
 801137e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8011382:	f7f8 fe7f 	bl	800a084 <get_fattime>
 8011386:	66b8      	str	r0, [r7, #104]	; 0x68
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 8011388:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801138a:	781b      	ldrb	r3, [r3, #0]
 801138c:	2b04      	cmp	r3, #4
 801138e:	f040 80a9 	bne.w	80114e4 <f_sync+0x1de>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	4618      	mov	r0, r3
 8011396:	f7fc ff67 	bl	800e268 <fill_first_frag>
 801139a:	4603      	mov	r3, r0
 801139c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
				if (res == FR_OK) {
 80113a0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80113a4:	2b00      	cmp	r3, #0
 80113a6:	d10a      	bne.n	80113be <f_sync+0xb8>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 80113a8:	6878      	ldr	r0, [r7, #4]
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80113ae:	f04f 32ff 	mov.w	r2, #4294967295
 80113b2:	4619      	mov	r1, r3
 80113b4:	f7fc ff87 	bl	800e2c6 <fill_last_frag>
 80113b8:	4603      	mov	r3, r0
 80113ba:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
				}
				if (res == FR_OK) {
 80113be:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	f040 80d9 	bne.w	801157a <f_sync+0x274>
					INIT_NAMBUF(fs);
 80113c8:	f44f 608c 	mov.w	r0, #1120	; 0x460
 80113cc:	f000 fa7b 	bl	80118c6 <ff_memalloc>
 80113d0:	6638      	str	r0, [r7, #96]	; 0x60
 80113d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80113d4:	2b00      	cmp	r3, #0
 80113d6:	d106      	bne.n	80113e6 <f_sync+0xe0>
 80113d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80113da:	2111      	movs	r1, #17
 80113dc:	4618      	mov	r0, r3
 80113de:	f7fc f948 	bl	800d672 <unlock_fs>
 80113e2:	2311      	movs	r3, #17
 80113e4:	e0d2      	b.n	801158c <f_sync+0x286>
 80113e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80113e8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80113ea:	611a      	str	r2, [r3, #16]
 80113ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80113ee:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80113f0:	f502 7200 	add.w	r2, r2, #512	; 0x200
 80113f4:	615a      	str	r2, [r3, #20]
					res = load_obj_dir(&dj, &fp->obj);	/* Load directory entry block */
 80113f6:	687a      	ldr	r2, [r7, #4]
 80113f8:	f107 0308 	add.w	r3, r7, #8
 80113fc:	4611      	mov	r1, r2
 80113fe:	4618      	mov	r0, r3
 8011400:	f7fd feb6 	bl	800f170 <load_obj_dir>
 8011404:	4603      	mov	r3, r0
 8011406:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					if (res == FR_OK) {
 801140a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 801140e:	2b00      	cmp	r3, #0
 8011410:	d164      	bne.n	80114dc <f_sync+0x1d6>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive bit */
 8011412:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011414:	695b      	ldr	r3, [r3, #20]
 8011416:	3304      	adds	r3, #4
 8011418:	781a      	ldrb	r2, [r3, #0]
 801141a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801141c:	695b      	ldr	r3, [r3, #20]
 801141e:	3304      	adds	r3, #4
 8011420:	f042 0220 	orr.w	r2, r2, #32
 8011424:	b2d2      	uxtb	r2, r2
 8011426:	701a      	strb	r2, [r3, #0]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation info */
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	79da      	ldrb	r2, [r3, #7]
 801142c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801142e:	695b      	ldr	r3, [r3, #20]
 8011430:	3321      	adds	r3, #33	; 0x21
 8011432:	f042 0201 	orr.w	r2, r2, #1
 8011436:	b2d2      	uxtb	r2, r2
 8011438:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);
 801143a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801143c:	695b      	ldr	r3, [r3, #20]
 801143e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	689b      	ldr	r3, [r3, #8]
 8011446:	4619      	mov	r1, r3
 8011448:	4610      	mov	r0, r2
 801144a:	f7fb ffcc 	bl	800d3e6 <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
 801144e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011450:	695b      	ldr	r3, [r3, #20]
 8011452:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 801145c:	461a      	mov	r2, r3
 801145e:	4623      	mov	r3, r4
 8011460:	4608      	mov	r0, r1
 8011462:	f7fb ffec 	bl	800d43e <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
 8011466:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011468:	695b      	ldr	r3, [r3, #20]
 801146a:	f103 0128 	add.w	r1, r3, #40	; 0x28
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8011474:	461a      	mov	r2, r3
 8011476:	4623      	mov	r3, r4
 8011478:	4608      	mov	r0, r1
 801147a:	f7fb ffe0 	bl	800d43e <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 801147e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011480:	695b      	ldr	r3, [r3, #20]
 8011482:	330c      	adds	r3, #12
 8011484:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8011486:	4618      	mov	r0, r3
 8011488:	f7fb ffad 	bl	800d3e6 <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
 801148c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801148e:	695b      	ldr	r3, [r3, #20]
 8011490:	3315      	adds	r3, #21
 8011492:	2200      	movs	r2, #0
 8011494:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 8011496:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011498:	695b      	ldr	r3, [r3, #20]
 801149a:	3310      	adds	r3, #16
 801149c:	2100      	movs	r1, #0
 801149e:	4618      	mov	r0, r3
 80114a0:	f7fb ffa1 	bl	800d3e6 <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
 80114a4:	f107 0308 	add.w	r3, r7, #8
 80114a8:	4618      	mov	r0, r3
 80114aa:	f7fd fe9e 	bl	800f1ea <store_xdir>
 80114ae:	4603      	mov	r3, r0
 80114b0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
						if (res == FR_OK) {
 80114b4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80114b8:	2b00      	cmp	r3, #0
 80114ba:	d10f      	bne.n	80114dc <f_sync+0x1d6>
							res = sync_fs(fs);
 80114bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80114be:	4618      	mov	r0, r3
 80114c0:	f7fc fad0 	bl	800da64 <sync_fs>
 80114c4:	4603      	mov	r3, r0
 80114c6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
							fp->flag &= (BYTE)~FA_MODIFIED;
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80114d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80114d4:	b2da      	uxtb	r2, r3
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
						}
					}
					FREE_NAMBUF();
 80114dc:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80114de:	f000 f9fe 	bl	80118de <ff_memfree>
 80114e2:	e04a      	b.n	801157a <f_sync+0x274>
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80114e4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80114ea:	4619      	mov	r1, r3
 80114ec:	4610      	mov	r0, r2
 80114ee:	f7fc fa8b 	bl	800da08 <move_window>
 80114f2:	4603      	mov	r3, r0
 80114f4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
				if (res == FR_OK) {
 80114f8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80114fc:	2b00      	cmp	r3, #0
 80114fe:	d13c      	bne.n	801157a <f_sync+0x274>
					dir = fp->dir_ptr;
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011504:	667b      	str	r3, [r7, #100]	; 0x64
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8011506:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011508:	330b      	adds	r3, #11
 801150a:	781a      	ldrb	r2, [r3, #0]
 801150c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801150e:	330b      	adds	r3, #11
 8011510:	f042 0220 	orr.w	r2, r2, #32
 8011514:	b2d2      	uxtb	r2, r2
 8011516:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	6818      	ldr	r0, [r3, #0]
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	689b      	ldr	r3, [r3, #8]
 8011520:	461a      	mov	r2, r3
 8011522:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8011524:	f7fd faf1 	bl	800eb0a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8011528:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801152a:	f103 021c 	add.w	r2, r3, #28
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8011534:	4619      	mov	r1, r3
 8011536:	4610      	mov	r0, r2
 8011538:	f7fb ff55 	bl	800d3e6 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801153c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801153e:	3316      	adds	r3, #22
 8011540:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8011542:	4618      	mov	r0, r3
 8011544:	f7fb ff4f 	bl	800d3e6 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8011548:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801154a:	3312      	adds	r3, #18
 801154c:	2100      	movs	r1, #0
 801154e:	4618      	mov	r0, r3
 8011550:	f7fb ff2e 	bl	800d3b0 <st_word>
					fs->wflag = 1;
 8011554:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011556:	2201      	movs	r2, #1
 8011558:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801155a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801155c:	4618      	mov	r0, r3
 801155e:	f7fc fa81 	bl	800da64 <sync_fs>
 8011562:	4603      	mov	r3, r0
 8011564:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					fp->flag &= (BYTE)~FA_MODIFIED;
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801156e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011572:	b2da      	uxtb	r2, r3
 8011574:	687b      	ldr	r3, [r7, #4]
 8011576:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801157a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801157c:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8011580:	4611      	mov	r1, r2
 8011582:	4618      	mov	r0, r3
 8011584:	f7fc f875 	bl	800d672 <unlock_fs>
 8011588:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 801158c:	4618      	mov	r0, r3
 801158e:	3774      	adds	r7, #116	; 0x74
 8011590:	46bd      	mov	sp, r7
 8011592:	bd90      	pop	{r4, r7, pc}

08011594 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8011594:	b580      	push	{r7, lr}
 8011596:	b084      	sub	sp, #16
 8011598:	af00      	add	r7, sp, #0
 801159a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 801159c:	6878      	ldr	r0, [r7, #4]
 801159e:	f7ff feb2 	bl	8011306 <f_sync>
 80115a2:	4603      	mov	r3, r0
 80115a4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80115a6:	7bfb      	ldrb	r3, [r7, #15]
 80115a8:	2b00      	cmp	r3, #0
 80115aa:	d11d      	bne.n	80115e8 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	f107 0208 	add.w	r2, r7, #8
 80115b2:	4611      	mov	r1, r2
 80115b4:	4618      	mov	r0, r3
 80115b6:	f7ff f919 	bl	80107ec <validate>
 80115ba:	4603      	mov	r3, r0
 80115bc:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80115be:	7bfb      	ldrb	r3, [r7, #15]
 80115c0:	2b00      	cmp	r3, #0
 80115c2:	d111      	bne.n	80115e8 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80115c8:	4618      	mov	r0, r3
 80115ca:	f7fc f979 	bl	800d8c0 <dec_lock>
 80115ce:	4603      	mov	r3, r0
 80115d0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80115d2:	7bfb      	ldrb	r3, [r7, #15]
 80115d4:	2b00      	cmp	r3, #0
 80115d6:	d102      	bne.n	80115de <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	2200      	movs	r2, #0
 80115dc:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 80115de:	68bb      	ldr	r3, [r7, #8]
 80115e0:	2100      	movs	r1, #0
 80115e2:	4618      	mov	r0, r3
 80115e4:	f7fc f845 	bl	800d672 <unlock_fs>
#endif
		}
	}
	return res;
 80115e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80115ea:	4618      	mov	r0, r3
 80115ec:	3710      	adds	r7, #16
 80115ee:	46bd      	mov	sp, r7
 80115f0:	bd80      	pop	{r7, pc}
	...

080115f4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80115f4:	b480      	push	{r7}
 80115f6:	b087      	sub	sp, #28
 80115f8:	af00      	add	r7, sp, #0
 80115fa:	60f8      	str	r0, [r7, #12]
 80115fc:	60b9      	str	r1, [r7, #8]
 80115fe:	4613      	mov	r3, r2
 8011600:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8011602:	2301      	movs	r3, #1
 8011604:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8011606:	2300      	movs	r3, #0
 8011608:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801160a:	4b1f      	ldr	r3, [pc, #124]	; (8011688 <FATFS_LinkDriverEx+0x94>)
 801160c:	7a5b      	ldrb	r3, [r3, #9]
 801160e:	b2db      	uxtb	r3, r3
 8011610:	2b00      	cmp	r3, #0
 8011612:	d131      	bne.n	8011678 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8011614:	4b1c      	ldr	r3, [pc, #112]	; (8011688 <FATFS_LinkDriverEx+0x94>)
 8011616:	7a5b      	ldrb	r3, [r3, #9]
 8011618:	b2db      	uxtb	r3, r3
 801161a:	461a      	mov	r2, r3
 801161c:	4b1a      	ldr	r3, [pc, #104]	; (8011688 <FATFS_LinkDriverEx+0x94>)
 801161e:	2100      	movs	r1, #0
 8011620:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8011622:	4b19      	ldr	r3, [pc, #100]	; (8011688 <FATFS_LinkDriverEx+0x94>)
 8011624:	7a5b      	ldrb	r3, [r3, #9]
 8011626:	b2db      	uxtb	r3, r3
 8011628:	4a17      	ldr	r2, [pc, #92]	; (8011688 <FATFS_LinkDriverEx+0x94>)
 801162a:	009b      	lsls	r3, r3, #2
 801162c:	4413      	add	r3, r2
 801162e:	68fa      	ldr	r2, [r7, #12]
 8011630:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8011632:	4b15      	ldr	r3, [pc, #84]	; (8011688 <FATFS_LinkDriverEx+0x94>)
 8011634:	7a5b      	ldrb	r3, [r3, #9]
 8011636:	b2db      	uxtb	r3, r3
 8011638:	461a      	mov	r2, r3
 801163a:	4b13      	ldr	r3, [pc, #76]	; (8011688 <FATFS_LinkDriverEx+0x94>)
 801163c:	4413      	add	r3, r2
 801163e:	79fa      	ldrb	r2, [r7, #7]
 8011640:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8011642:	4b11      	ldr	r3, [pc, #68]	; (8011688 <FATFS_LinkDriverEx+0x94>)
 8011644:	7a5b      	ldrb	r3, [r3, #9]
 8011646:	b2db      	uxtb	r3, r3
 8011648:	1c5a      	adds	r2, r3, #1
 801164a:	b2d1      	uxtb	r1, r2
 801164c:	4a0e      	ldr	r2, [pc, #56]	; (8011688 <FATFS_LinkDriverEx+0x94>)
 801164e:	7251      	strb	r1, [r2, #9]
 8011650:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8011652:	7dbb      	ldrb	r3, [r7, #22]
 8011654:	3330      	adds	r3, #48	; 0x30
 8011656:	b2da      	uxtb	r2, r3
 8011658:	68bb      	ldr	r3, [r7, #8]
 801165a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801165c:	68bb      	ldr	r3, [r7, #8]
 801165e:	3301      	adds	r3, #1
 8011660:	223a      	movs	r2, #58	; 0x3a
 8011662:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8011664:	68bb      	ldr	r3, [r7, #8]
 8011666:	3302      	adds	r3, #2
 8011668:	222f      	movs	r2, #47	; 0x2f
 801166a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801166c:	68bb      	ldr	r3, [r7, #8]
 801166e:	3303      	adds	r3, #3
 8011670:	2200      	movs	r2, #0
 8011672:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8011674:	2300      	movs	r3, #0
 8011676:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8011678:	7dfb      	ldrb	r3, [r7, #23]
}
 801167a:	4618      	mov	r0, r3
 801167c:	371c      	adds	r7, #28
 801167e:	46bd      	mov	sp, r7
 8011680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011684:	4770      	bx	lr
 8011686:	bf00      	nop
 8011688:	200002c4 	.word	0x200002c4

0801168c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801168c:	b580      	push	{r7, lr}
 801168e:	b082      	sub	sp, #8
 8011690:	af00      	add	r7, sp, #0
 8011692:	6078      	str	r0, [r7, #4]
 8011694:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8011696:	2200      	movs	r2, #0
 8011698:	6839      	ldr	r1, [r7, #0]
 801169a:	6878      	ldr	r0, [r7, #4]
 801169c:	f7ff ffaa 	bl	80115f4 <FATFS_LinkDriverEx>
 80116a0:	4603      	mov	r3, r0
}
 80116a2:	4618      	mov	r0, r3
 80116a4:	3708      	adds	r7, #8
 80116a6:	46bd      	mov	sp, r7
 80116a8:	bd80      	pop	{r7, pc}
	...

080116ac <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 80116ac:	b480      	push	{r7}
 80116ae:	b085      	sub	sp, #20
 80116b0:	af00      	add	r7, sp, #0
 80116b2:	4603      	mov	r3, r0
 80116b4:	6039      	str	r1, [r7, #0]
 80116b6:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80116b8:	88fb      	ldrh	r3, [r7, #6]
 80116ba:	2b7f      	cmp	r3, #127	; 0x7f
 80116bc:	d802      	bhi.n	80116c4 <ff_convert+0x18>
		c = chr;
 80116be:	88fb      	ldrh	r3, [r7, #6]
 80116c0:	81fb      	strh	r3, [r7, #14]
 80116c2:	e025      	b.n	8011710 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 80116c4:	683b      	ldr	r3, [r7, #0]
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	d00b      	beq.n	80116e2 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80116ca:	88fb      	ldrh	r3, [r7, #6]
 80116cc:	2bff      	cmp	r3, #255	; 0xff
 80116ce:	d805      	bhi.n	80116dc <ff_convert+0x30>
 80116d0:	88fb      	ldrh	r3, [r7, #6]
 80116d2:	3b80      	subs	r3, #128	; 0x80
 80116d4:	4a12      	ldr	r2, [pc, #72]	; (8011720 <ff_convert+0x74>)
 80116d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80116da:	e000      	b.n	80116de <ff_convert+0x32>
 80116dc:	2300      	movs	r3, #0
 80116de:	81fb      	strh	r3, [r7, #14]
 80116e0:	e016      	b.n	8011710 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 80116e2:	2300      	movs	r3, #0
 80116e4:	81fb      	strh	r3, [r7, #14]
 80116e6:	e009      	b.n	80116fc <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 80116e8:	89fb      	ldrh	r3, [r7, #14]
 80116ea:	4a0d      	ldr	r2, [pc, #52]	; (8011720 <ff_convert+0x74>)
 80116ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80116f0:	88fa      	ldrh	r2, [r7, #6]
 80116f2:	429a      	cmp	r2, r3
 80116f4:	d006      	beq.n	8011704 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 80116f6:	89fb      	ldrh	r3, [r7, #14]
 80116f8:	3301      	adds	r3, #1
 80116fa:	81fb      	strh	r3, [r7, #14]
 80116fc:	89fb      	ldrh	r3, [r7, #14]
 80116fe:	2b7f      	cmp	r3, #127	; 0x7f
 8011700:	d9f2      	bls.n	80116e8 <ff_convert+0x3c>
 8011702:	e000      	b.n	8011706 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8011704:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8011706:	89fb      	ldrh	r3, [r7, #14]
 8011708:	3380      	adds	r3, #128	; 0x80
 801170a:	b29b      	uxth	r3, r3
 801170c:	b2db      	uxtb	r3, r3
 801170e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8011710:	89fb      	ldrh	r3, [r7, #14]
}
 8011712:	4618      	mov	r0, r3
 8011714:	3714      	adds	r7, #20
 8011716:	46bd      	mov	sp, r7
 8011718:	f85d 7b04 	ldr.w	r7, [sp], #4
 801171c:	4770      	bx	lr
 801171e:	bf00      	nop
 8011720:	080161a0 	.word	0x080161a0

08011724 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8011724:	b480      	push	{r7}
 8011726:	b087      	sub	sp, #28
 8011728:	af00      	add	r7, sp, #0
 801172a:	4603      	mov	r3, r0
 801172c:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 801172e:	88fb      	ldrh	r3, [r7, #6]
 8011730:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011734:	d201      	bcs.n	801173a <ff_wtoupper+0x16>
 8011736:	4b3e      	ldr	r3, [pc, #248]	; (8011830 <ff_wtoupper+0x10c>)
 8011738:	e000      	b.n	801173c <ff_wtoupper+0x18>
 801173a:	4b3e      	ldr	r3, [pc, #248]	; (8011834 <ff_wtoupper+0x110>)
 801173c:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 801173e:	697b      	ldr	r3, [r7, #20]
 8011740:	1c9a      	adds	r2, r3, #2
 8011742:	617a      	str	r2, [r7, #20]
 8011744:	881b      	ldrh	r3, [r3, #0]
 8011746:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8011748:	8a7b      	ldrh	r3, [r7, #18]
 801174a:	2b00      	cmp	r3, #0
 801174c:	d068      	beq.n	8011820 <ff_wtoupper+0xfc>
 801174e:	88fa      	ldrh	r2, [r7, #6]
 8011750:	8a7b      	ldrh	r3, [r7, #18]
 8011752:	429a      	cmp	r2, r3
 8011754:	d364      	bcc.n	8011820 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8011756:	697b      	ldr	r3, [r7, #20]
 8011758:	1c9a      	adds	r2, r3, #2
 801175a:	617a      	str	r2, [r7, #20]
 801175c:	881b      	ldrh	r3, [r3, #0]
 801175e:	823b      	strh	r3, [r7, #16]
 8011760:	8a3b      	ldrh	r3, [r7, #16]
 8011762:	0a1b      	lsrs	r3, r3, #8
 8011764:	81fb      	strh	r3, [r7, #14]
 8011766:	8a3b      	ldrh	r3, [r7, #16]
 8011768:	b2db      	uxtb	r3, r3
 801176a:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 801176c:	88fa      	ldrh	r2, [r7, #6]
 801176e:	8a79      	ldrh	r1, [r7, #18]
 8011770:	8a3b      	ldrh	r3, [r7, #16]
 8011772:	440b      	add	r3, r1
 8011774:	429a      	cmp	r2, r3
 8011776:	da49      	bge.n	801180c <ff_wtoupper+0xe8>
			switch (cmd) {
 8011778:	89fb      	ldrh	r3, [r7, #14]
 801177a:	2b08      	cmp	r3, #8
 801177c:	d84f      	bhi.n	801181e <ff_wtoupper+0xfa>
 801177e:	a201      	add	r2, pc, #4	; (adr r2, 8011784 <ff_wtoupper+0x60>)
 8011780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011784:	080117a9 	.word	0x080117a9
 8011788:	080117bb 	.word	0x080117bb
 801178c:	080117d1 	.word	0x080117d1
 8011790:	080117d9 	.word	0x080117d9
 8011794:	080117e1 	.word	0x080117e1
 8011798:	080117e9 	.word	0x080117e9
 801179c:	080117f1 	.word	0x080117f1
 80117a0:	080117f9 	.word	0x080117f9
 80117a4:	08011801 	.word	0x08011801
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 80117a8:	88fa      	ldrh	r2, [r7, #6]
 80117aa:	8a7b      	ldrh	r3, [r7, #18]
 80117ac:	1ad3      	subs	r3, r2, r3
 80117ae:	005b      	lsls	r3, r3, #1
 80117b0:	697a      	ldr	r2, [r7, #20]
 80117b2:	4413      	add	r3, r2
 80117b4:	881b      	ldrh	r3, [r3, #0]
 80117b6:	80fb      	strh	r3, [r7, #6]
 80117b8:	e027      	b.n	801180a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 80117ba:	88fa      	ldrh	r2, [r7, #6]
 80117bc:	8a7b      	ldrh	r3, [r7, #18]
 80117be:	1ad3      	subs	r3, r2, r3
 80117c0:	b29b      	uxth	r3, r3
 80117c2:	f003 0301 	and.w	r3, r3, #1
 80117c6:	b29b      	uxth	r3, r3
 80117c8:	88fa      	ldrh	r2, [r7, #6]
 80117ca:	1ad3      	subs	r3, r2, r3
 80117cc:	80fb      	strh	r3, [r7, #6]
 80117ce:	e01c      	b.n	801180a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 80117d0:	88fb      	ldrh	r3, [r7, #6]
 80117d2:	3b10      	subs	r3, #16
 80117d4:	80fb      	strh	r3, [r7, #6]
 80117d6:	e018      	b.n	801180a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 80117d8:	88fb      	ldrh	r3, [r7, #6]
 80117da:	3b20      	subs	r3, #32
 80117dc:	80fb      	strh	r3, [r7, #6]
 80117de:	e014      	b.n	801180a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 80117e0:	88fb      	ldrh	r3, [r7, #6]
 80117e2:	3b30      	subs	r3, #48	; 0x30
 80117e4:	80fb      	strh	r3, [r7, #6]
 80117e6:	e010      	b.n	801180a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 80117e8:	88fb      	ldrh	r3, [r7, #6]
 80117ea:	3b1a      	subs	r3, #26
 80117ec:	80fb      	strh	r3, [r7, #6]
 80117ee:	e00c      	b.n	801180a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 80117f0:	88fb      	ldrh	r3, [r7, #6]
 80117f2:	3308      	adds	r3, #8
 80117f4:	80fb      	strh	r3, [r7, #6]
 80117f6:	e008      	b.n	801180a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 80117f8:	88fb      	ldrh	r3, [r7, #6]
 80117fa:	3b50      	subs	r3, #80	; 0x50
 80117fc:	80fb      	strh	r3, [r7, #6]
 80117fe:	e004      	b.n	801180a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8011800:	88fb      	ldrh	r3, [r7, #6]
 8011802:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8011806:	80fb      	strh	r3, [r7, #6]
 8011808:	bf00      	nop
			}
			break;
 801180a:	e008      	b.n	801181e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 801180c:	89fb      	ldrh	r3, [r7, #14]
 801180e:	2b00      	cmp	r3, #0
 8011810:	d195      	bne.n	801173e <ff_wtoupper+0x1a>
 8011812:	8a3b      	ldrh	r3, [r7, #16]
 8011814:	005b      	lsls	r3, r3, #1
 8011816:	697a      	ldr	r2, [r7, #20]
 8011818:	4413      	add	r3, r2
 801181a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 801181c:	e78f      	b.n	801173e <ff_wtoupper+0x1a>
			break;
 801181e:	bf00      	nop
	}

	return chr;
 8011820:	88fb      	ldrh	r3, [r7, #6]
}
 8011822:	4618      	mov	r0, r3
 8011824:	371c      	adds	r7, #28
 8011826:	46bd      	mov	sp, r7
 8011828:	f85d 7b04 	ldr.w	r7, [sp], #4
 801182c:	4770      	bx	lr
 801182e:	bf00      	nop
 8011830:	080162a0 	.word	0x080162a0
 8011834:	08016494 	.word	0x08016494

08011838 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8011838:	b580      	push	{r7, lr}
 801183a:	b084      	sub	sp, #16
 801183c:	af00      	add	r7, sp, #0
 801183e:	4603      	mov	r3, r0
 8011840:	6039      	str	r1, [r7, #0]
 8011842:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 8011844:	2200      	movs	r2, #0
 8011846:	2101      	movs	r1, #1
 8011848:	2001      	movs	r0, #1
 801184a:	f000 f9e3 	bl	8011c14 <osSemaphoreNew>
 801184e:	4602      	mov	r2, r0
 8011850:	683b      	ldr	r3, [r7, #0]
 8011852:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 8011854:	683b      	ldr	r3, [r7, #0]
 8011856:	681b      	ldr	r3, [r3, #0]
 8011858:	2b00      	cmp	r3, #0
 801185a:	bf14      	ite	ne
 801185c:	2301      	movne	r3, #1
 801185e:	2300      	moveq	r3, #0
 8011860:	b2db      	uxtb	r3, r3
 8011862:	60fb      	str	r3, [r7, #12]

    return ret;
 8011864:	68fb      	ldr	r3, [r7, #12]
}
 8011866:	4618      	mov	r0, r3
 8011868:	3710      	adds	r7, #16
 801186a:	46bd      	mov	sp, r7
 801186c:	bd80      	pop	{r7, pc}

0801186e <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 801186e:	b580      	push	{r7, lr}
 8011870:	b082      	sub	sp, #8
 8011872:	af00      	add	r7, sp, #0
 8011874:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 8011876:	6878      	ldr	r0, [r7, #4]
 8011878:	f000 fb28 	bl	8011ecc <osSemaphoreDelete>
#endif
    return 1;
 801187c:	2301      	movs	r3, #1
}
 801187e:	4618      	mov	r0, r3
 8011880:	3708      	adds	r7, #8
 8011882:	46bd      	mov	sp, r7
 8011884:	bd80      	pop	{r7, pc}

08011886 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8011886:	b580      	push	{r7, lr}
 8011888:	b084      	sub	sp, #16
 801188a:	af00      	add	r7, sp, #0
 801188c:	6078      	str	r0, [r7, #4]
  int ret = 0;
 801188e:	2300      	movs	r3, #0
 8011890:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 8011892:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8011896:	6878      	ldr	r0, [r7, #4]
 8011898:	f000 fa5a 	bl	8011d50 <osSemaphoreAcquire>
 801189c:	4603      	mov	r3, r0
 801189e:	2b00      	cmp	r3, #0
 80118a0:	d101      	bne.n	80118a6 <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 80118a2:	2301      	movs	r3, #1
 80118a4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80118a6:	68fb      	ldr	r3, [r7, #12]
}
 80118a8:	4618      	mov	r0, r3
 80118aa:	3710      	adds	r7, #16
 80118ac:	46bd      	mov	sp, r7
 80118ae:	bd80      	pop	{r7, pc}

080118b0 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 80118b0:	b580      	push	{r7, lr}
 80118b2:	b082      	sub	sp, #8
 80118b4:	af00      	add	r7, sp, #0
 80118b6:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 80118b8:	6878      	ldr	r0, [r7, #4]
 80118ba:	f000 faaf 	bl	8011e1c <osSemaphoreRelease>
#endif
}
 80118be:	bf00      	nop
 80118c0:	3708      	adds	r7, #8
 80118c2:	46bd      	mov	sp, r7
 80118c4:	bd80      	pop	{r7, pc}

080118c6 <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 80118c6:	b580      	push	{r7, lr}
 80118c8:	b082      	sub	sp, #8
 80118ca:	af00      	add	r7, sp, #0
 80118cc:	6078      	str	r0, [r7, #4]
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 80118ce:	6878      	ldr	r0, [r7, #4]
 80118d0:	f003 fb54 	bl	8014f7c <pvPortMalloc>
 80118d4:	4603      	mov	r3, r0
}
 80118d6:	4618      	mov	r0, r3
 80118d8:	3708      	adds	r7, #8
 80118da:	46bd      	mov	sp, r7
 80118dc:	bd80      	pop	{r7, pc}

080118de <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 80118de:	b580      	push	{r7, lr}
 80118e0:	b082      	sub	sp, #8
 80118e2:	af00      	add	r7, sp, #0
 80118e4:	6078      	str	r0, [r7, #4]
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 80118e6:	6878      	ldr	r0, [r7, #4]
 80118e8:	f003 fc10 	bl	801510c <vPortFree>
}
 80118ec:	bf00      	nop
 80118ee:	3708      	adds	r7, #8
 80118f0:	46bd      	mov	sp, r7
 80118f2:	bd80      	pop	{r7, pc}

080118f4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80118f4:	b480      	push	{r7}
 80118f6:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80118f8:	bf00      	nop
 80118fa:	46bd      	mov	sp, r7
 80118fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011900:	4770      	bx	lr
	...

08011904 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8011904:	b480      	push	{r7}
 8011906:	b085      	sub	sp, #20
 8011908:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801190a:	f3ef 8305 	mrs	r3, IPSR
 801190e:	60bb      	str	r3, [r7, #8]
  return(result);
 8011910:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8011912:	2b00      	cmp	r3, #0
 8011914:	d10f      	bne.n	8011936 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011916:	f3ef 8310 	mrs	r3, PRIMASK
 801191a:	607b      	str	r3, [r7, #4]
  return(result);
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	2b00      	cmp	r3, #0
 8011920:	d105      	bne.n	801192e <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011922:	f3ef 8311 	mrs	r3, BASEPRI
 8011926:	603b      	str	r3, [r7, #0]
  return(result);
 8011928:	683b      	ldr	r3, [r7, #0]
 801192a:	2b00      	cmp	r3, #0
 801192c:	d007      	beq.n	801193e <osKernelInitialize+0x3a>
 801192e:	4b0e      	ldr	r3, [pc, #56]	; (8011968 <osKernelInitialize+0x64>)
 8011930:	681b      	ldr	r3, [r3, #0]
 8011932:	2b02      	cmp	r3, #2
 8011934:	d103      	bne.n	801193e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8011936:	f06f 0305 	mvn.w	r3, #5
 801193a:	60fb      	str	r3, [r7, #12]
 801193c:	e00c      	b.n	8011958 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 801193e:	4b0a      	ldr	r3, [pc, #40]	; (8011968 <osKernelInitialize+0x64>)
 8011940:	681b      	ldr	r3, [r3, #0]
 8011942:	2b00      	cmp	r3, #0
 8011944:	d105      	bne.n	8011952 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8011946:	4b08      	ldr	r3, [pc, #32]	; (8011968 <osKernelInitialize+0x64>)
 8011948:	2201      	movs	r2, #1
 801194a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 801194c:	2300      	movs	r3, #0
 801194e:	60fb      	str	r3, [r7, #12]
 8011950:	e002      	b.n	8011958 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8011952:	f04f 33ff 	mov.w	r3, #4294967295
 8011956:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8011958:	68fb      	ldr	r3, [r7, #12]
}
 801195a:	4618      	mov	r0, r3
 801195c:	3714      	adds	r7, #20
 801195e:	46bd      	mov	sp, r7
 8011960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011964:	4770      	bx	lr
 8011966:	bf00      	nop
 8011968:	200002d0 	.word	0x200002d0

0801196c <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 801196c:	b580      	push	{r7, lr}
 801196e:	b082      	sub	sp, #8
 8011970:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 8011972:	f002 fba1 	bl	80140b8 <xTaskGetSchedulerState>
 8011976:	4603      	mov	r3, r0
 8011978:	2b00      	cmp	r3, #0
 801197a:	d004      	beq.n	8011986 <osKernelGetState+0x1a>
 801197c:	2b02      	cmp	r3, #2
 801197e:	d105      	bne.n	801198c <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 8011980:	2302      	movs	r3, #2
 8011982:	607b      	str	r3, [r7, #4]
      break;
 8011984:	e00c      	b.n	80119a0 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 8011986:	2303      	movs	r3, #3
 8011988:	607b      	str	r3, [r7, #4]
      break;
 801198a:	e009      	b.n	80119a0 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 801198c:	4b07      	ldr	r3, [pc, #28]	; (80119ac <osKernelGetState+0x40>)
 801198e:	681b      	ldr	r3, [r3, #0]
 8011990:	2b01      	cmp	r3, #1
 8011992:	d102      	bne.n	801199a <osKernelGetState+0x2e>
        state = osKernelReady;
 8011994:	2301      	movs	r3, #1
 8011996:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 8011998:	e001      	b.n	801199e <osKernelGetState+0x32>
        state = osKernelInactive;
 801199a:	2300      	movs	r3, #0
 801199c:	607b      	str	r3, [r7, #4]
      break;
 801199e:	bf00      	nop
  }

  return (state);
 80119a0:	687b      	ldr	r3, [r7, #4]
}
 80119a2:	4618      	mov	r0, r3
 80119a4:	3708      	adds	r7, #8
 80119a6:	46bd      	mov	sp, r7
 80119a8:	bd80      	pop	{r7, pc}
 80119aa:	bf00      	nop
 80119ac:	200002d0 	.word	0x200002d0

080119b0 <osKernelStart>:

osStatus_t osKernelStart (void) {
 80119b0:	b580      	push	{r7, lr}
 80119b2:	b084      	sub	sp, #16
 80119b4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80119b6:	f3ef 8305 	mrs	r3, IPSR
 80119ba:	60bb      	str	r3, [r7, #8]
  return(result);
 80119bc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80119be:	2b00      	cmp	r3, #0
 80119c0:	d10f      	bne.n	80119e2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80119c2:	f3ef 8310 	mrs	r3, PRIMASK
 80119c6:	607b      	str	r3, [r7, #4]
  return(result);
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	2b00      	cmp	r3, #0
 80119cc:	d105      	bne.n	80119da <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80119ce:	f3ef 8311 	mrs	r3, BASEPRI
 80119d2:	603b      	str	r3, [r7, #0]
  return(result);
 80119d4:	683b      	ldr	r3, [r7, #0]
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	d007      	beq.n	80119ea <osKernelStart+0x3a>
 80119da:	4b0f      	ldr	r3, [pc, #60]	; (8011a18 <osKernelStart+0x68>)
 80119dc:	681b      	ldr	r3, [r3, #0]
 80119de:	2b02      	cmp	r3, #2
 80119e0:	d103      	bne.n	80119ea <osKernelStart+0x3a>
    stat = osErrorISR;
 80119e2:	f06f 0305 	mvn.w	r3, #5
 80119e6:	60fb      	str	r3, [r7, #12]
 80119e8:	e010      	b.n	8011a0c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80119ea:	4b0b      	ldr	r3, [pc, #44]	; (8011a18 <osKernelStart+0x68>)
 80119ec:	681b      	ldr	r3, [r3, #0]
 80119ee:	2b01      	cmp	r3, #1
 80119f0:	d109      	bne.n	8011a06 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80119f2:	f7ff ff7f 	bl	80118f4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80119f6:	4b08      	ldr	r3, [pc, #32]	; (8011a18 <osKernelStart+0x68>)
 80119f8:	2202      	movs	r2, #2
 80119fa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80119fc:	f001 fefe 	bl	80137fc <vTaskStartScheduler>
      stat = osOK;
 8011a00:	2300      	movs	r3, #0
 8011a02:	60fb      	str	r3, [r7, #12]
 8011a04:	e002      	b.n	8011a0c <osKernelStart+0x5c>
    } else {
      stat = osError;
 8011a06:	f04f 33ff 	mov.w	r3, #4294967295
 8011a0a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8011a0c:	68fb      	ldr	r3, [r7, #12]
}
 8011a0e:	4618      	mov	r0, r3
 8011a10:	3710      	adds	r7, #16
 8011a12:	46bd      	mov	sp, r7
 8011a14:	bd80      	pop	{r7, pc}
 8011a16:	bf00      	nop
 8011a18:	200002d0 	.word	0x200002d0

08011a1c <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8011a1c:	b580      	push	{r7, lr}
 8011a1e:	b084      	sub	sp, #16
 8011a20:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011a22:	f3ef 8305 	mrs	r3, IPSR
 8011a26:	60bb      	str	r3, [r7, #8]
  return(result);
 8011a28:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	d10f      	bne.n	8011a4e <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011a2e:	f3ef 8310 	mrs	r3, PRIMASK
 8011a32:	607b      	str	r3, [r7, #4]
  return(result);
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	2b00      	cmp	r3, #0
 8011a38:	d105      	bne.n	8011a46 <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011a3a:	f3ef 8311 	mrs	r3, BASEPRI
 8011a3e:	603b      	str	r3, [r7, #0]
  return(result);
 8011a40:	683b      	ldr	r3, [r7, #0]
 8011a42:	2b00      	cmp	r3, #0
 8011a44:	d007      	beq.n	8011a56 <osKernelGetTickCount+0x3a>
 8011a46:	4b08      	ldr	r3, [pc, #32]	; (8011a68 <osKernelGetTickCount+0x4c>)
 8011a48:	681b      	ldr	r3, [r3, #0]
 8011a4a:	2b02      	cmp	r3, #2
 8011a4c:	d103      	bne.n	8011a56 <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 8011a4e:	f001 fff9 	bl	8013a44 <xTaskGetTickCountFromISR>
 8011a52:	60f8      	str	r0, [r7, #12]
 8011a54:	e002      	b.n	8011a5c <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 8011a56:	f001 ffe5 	bl	8013a24 <xTaskGetTickCount>
 8011a5a:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 8011a5c:	68fb      	ldr	r3, [r7, #12]
}
 8011a5e:	4618      	mov	r0, r3
 8011a60:	3710      	adds	r7, #16
 8011a62:	46bd      	mov	sp, r7
 8011a64:	bd80      	pop	{r7, pc}
 8011a66:	bf00      	nop
 8011a68:	200002d0 	.word	0x200002d0

08011a6c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8011a6c:	b580      	push	{r7, lr}
 8011a6e:	b090      	sub	sp, #64	; 0x40
 8011a70:	af04      	add	r7, sp, #16
 8011a72:	60f8      	str	r0, [r7, #12]
 8011a74:	60b9      	str	r1, [r7, #8]
 8011a76:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8011a78:	2300      	movs	r3, #0
 8011a7a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011a7c:	f3ef 8305 	mrs	r3, IPSR
 8011a80:	61fb      	str	r3, [r7, #28]
  return(result);
 8011a82:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	f040 808f 	bne.w	8011ba8 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011a8a:	f3ef 8310 	mrs	r3, PRIMASK
 8011a8e:	61bb      	str	r3, [r7, #24]
  return(result);
 8011a90:	69bb      	ldr	r3, [r7, #24]
 8011a92:	2b00      	cmp	r3, #0
 8011a94:	d105      	bne.n	8011aa2 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011a96:	f3ef 8311 	mrs	r3, BASEPRI
 8011a9a:	617b      	str	r3, [r7, #20]
  return(result);
 8011a9c:	697b      	ldr	r3, [r7, #20]
 8011a9e:	2b00      	cmp	r3, #0
 8011aa0:	d003      	beq.n	8011aaa <osThreadNew+0x3e>
 8011aa2:	4b44      	ldr	r3, [pc, #272]	; (8011bb4 <osThreadNew+0x148>)
 8011aa4:	681b      	ldr	r3, [r3, #0]
 8011aa6:	2b02      	cmp	r3, #2
 8011aa8:	d07e      	beq.n	8011ba8 <osThreadNew+0x13c>
 8011aaa:	68fb      	ldr	r3, [r7, #12]
 8011aac:	2b00      	cmp	r3, #0
 8011aae:	d07b      	beq.n	8011ba8 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8011ab0:	2380      	movs	r3, #128	; 0x80
 8011ab2:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8011ab4:	2318      	movs	r3, #24
 8011ab6:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8011ab8:	2300      	movs	r3, #0
 8011aba:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8011abc:	f04f 33ff 	mov.w	r3, #4294967295
 8011ac0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8011ac2:	687b      	ldr	r3, [r7, #4]
 8011ac4:	2b00      	cmp	r3, #0
 8011ac6:	d045      	beq.n	8011b54 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	681b      	ldr	r3, [r3, #0]
 8011acc:	2b00      	cmp	r3, #0
 8011ace:	d002      	beq.n	8011ad6 <osThreadNew+0x6a>
        name = attr->name;
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	681b      	ldr	r3, [r3, #0]
 8011ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	699b      	ldr	r3, [r3, #24]
 8011ada:	2b00      	cmp	r3, #0
 8011adc:	d002      	beq.n	8011ae4 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	699b      	ldr	r3, [r3, #24]
 8011ae2:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8011ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	d008      	beq.n	8011afc <osThreadNew+0x90>
 8011aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011aec:	2b38      	cmp	r3, #56	; 0x38
 8011aee:	d805      	bhi.n	8011afc <osThreadNew+0x90>
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	685b      	ldr	r3, [r3, #4]
 8011af4:	f003 0301 	and.w	r3, r3, #1
 8011af8:	2b00      	cmp	r3, #0
 8011afa:	d001      	beq.n	8011b00 <osThreadNew+0x94>
        return (NULL);
 8011afc:	2300      	movs	r3, #0
 8011afe:	e054      	b.n	8011baa <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	695b      	ldr	r3, [r3, #20]
 8011b04:	2b00      	cmp	r3, #0
 8011b06:	d003      	beq.n	8011b10 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	695b      	ldr	r3, [r3, #20]
 8011b0c:	089b      	lsrs	r3, r3, #2
 8011b0e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	689b      	ldr	r3, [r3, #8]
 8011b14:	2b00      	cmp	r3, #0
 8011b16:	d00e      	beq.n	8011b36 <osThreadNew+0xca>
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	68db      	ldr	r3, [r3, #12]
 8011b1c:	2b5b      	cmp	r3, #91	; 0x5b
 8011b1e:	d90a      	bls.n	8011b36 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8011b20:	687b      	ldr	r3, [r7, #4]
 8011b22:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8011b24:	2b00      	cmp	r3, #0
 8011b26:	d006      	beq.n	8011b36 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	695b      	ldr	r3, [r3, #20]
 8011b2c:	2b00      	cmp	r3, #0
 8011b2e:	d002      	beq.n	8011b36 <osThreadNew+0xca>
        mem = 1;
 8011b30:	2301      	movs	r3, #1
 8011b32:	623b      	str	r3, [r7, #32]
 8011b34:	e010      	b.n	8011b58 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	689b      	ldr	r3, [r3, #8]
 8011b3a:	2b00      	cmp	r3, #0
 8011b3c:	d10c      	bne.n	8011b58 <osThreadNew+0xec>
 8011b3e:	687b      	ldr	r3, [r7, #4]
 8011b40:	68db      	ldr	r3, [r3, #12]
 8011b42:	2b00      	cmp	r3, #0
 8011b44:	d108      	bne.n	8011b58 <osThreadNew+0xec>
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	691b      	ldr	r3, [r3, #16]
 8011b4a:	2b00      	cmp	r3, #0
 8011b4c:	d104      	bne.n	8011b58 <osThreadNew+0xec>
          mem = 0;
 8011b4e:	2300      	movs	r3, #0
 8011b50:	623b      	str	r3, [r7, #32]
 8011b52:	e001      	b.n	8011b58 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8011b54:	2300      	movs	r3, #0
 8011b56:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8011b58:	6a3b      	ldr	r3, [r7, #32]
 8011b5a:	2b01      	cmp	r3, #1
 8011b5c:	d110      	bne.n	8011b80 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8011b5e:	687b      	ldr	r3, [r7, #4]
 8011b60:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8011b62:	687a      	ldr	r2, [r7, #4]
 8011b64:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8011b66:	9202      	str	r2, [sp, #8]
 8011b68:	9301      	str	r3, [sp, #4]
 8011b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b6c:	9300      	str	r3, [sp, #0]
 8011b6e:	68bb      	ldr	r3, [r7, #8]
 8011b70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011b72:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011b74:	68f8      	ldr	r0, [r7, #12]
 8011b76:	f001 fc65 	bl	8013444 <xTaskCreateStatic>
 8011b7a:	4603      	mov	r3, r0
 8011b7c:	613b      	str	r3, [r7, #16]
 8011b7e:	e013      	b.n	8011ba8 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8011b80:	6a3b      	ldr	r3, [r7, #32]
 8011b82:	2b00      	cmp	r3, #0
 8011b84:	d110      	bne.n	8011ba8 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8011b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b88:	b29a      	uxth	r2, r3
 8011b8a:	f107 0310 	add.w	r3, r7, #16
 8011b8e:	9301      	str	r3, [sp, #4]
 8011b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b92:	9300      	str	r3, [sp, #0]
 8011b94:	68bb      	ldr	r3, [r7, #8]
 8011b96:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011b98:	68f8      	ldr	r0, [r7, #12]
 8011b9a:	f001 fcb3 	bl	8013504 <xTaskCreate>
 8011b9e:	4603      	mov	r3, r0
 8011ba0:	2b01      	cmp	r3, #1
 8011ba2:	d001      	beq.n	8011ba8 <osThreadNew+0x13c>
          hTask = NULL;
 8011ba4:	2300      	movs	r3, #0
 8011ba6:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8011ba8:	693b      	ldr	r3, [r7, #16]
}
 8011baa:	4618      	mov	r0, r3
 8011bac:	3730      	adds	r7, #48	; 0x30
 8011bae:	46bd      	mov	sp, r7
 8011bb0:	bd80      	pop	{r7, pc}
 8011bb2:	bf00      	nop
 8011bb4:	200002d0 	.word	0x200002d0

08011bb8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8011bb8:	b580      	push	{r7, lr}
 8011bba:	b086      	sub	sp, #24
 8011bbc:	af00      	add	r7, sp, #0
 8011bbe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011bc0:	f3ef 8305 	mrs	r3, IPSR
 8011bc4:	613b      	str	r3, [r7, #16]
  return(result);
 8011bc6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8011bc8:	2b00      	cmp	r3, #0
 8011bca:	d10f      	bne.n	8011bec <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011bcc:	f3ef 8310 	mrs	r3, PRIMASK
 8011bd0:	60fb      	str	r3, [r7, #12]
  return(result);
 8011bd2:	68fb      	ldr	r3, [r7, #12]
 8011bd4:	2b00      	cmp	r3, #0
 8011bd6:	d105      	bne.n	8011be4 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011bd8:	f3ef 8311 	mrs	r3, BASEPRI
 8011bdc:	60bb      	str	r3, [r7, #8]
  return(result);
 8011bde:	68bb      	ldr	r3, [r7, #8]
 8011be0:	2b00      	cmp	r3, #0
 8011be2:	d007      	beq.n	8011bf4 <osDelay+0x3c>
 8011be4:	4b0a      	ldr	r3, [pc, #40]	; (8011c10 <osDelay+0x58>)
 8011be6:	681b      	ldr	r3, [r3, #0]
 8011be8:	2b02      	cmp	r3, #2
 8011bea:	d103      	bne.n	8011bf4 <osDelay+0x3c>
    stat = osErrorISR;
 8011bec:	f06f 0305 	mvn.w	r3, #5
 8011bf0:	617b      	str	r3, [r7, #20]
 8011bf2:	e007      	b.n	8011c04 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8011bf4:	2300      	movs	r3, #0
 8011bf6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8011bf8:	687b      	ldr	r3, [r7, #4]
 8011bfa:	2b00      	cmp	r3, #0
 8011bfc:	d002      	beq.n	8011c04 <osDelay+0x4c>
      vTaskDelay(ticks);
 8011bfe:	6878      	ldr	r0, [r7, #4]
 8011c00:	f001 fdc6 	bl	8013790 <vTaskDelay>
    }
  }

  return (stat);
 8011c04:	697b      	ldr	r3, [r7, #20]
}
 8011c06:	4618      	mov	r0, r3
 8011c08:	3718      	adds	r7, #24
 8011c0a:	46bd      	mov	sp, r7
 8011c0c:	bd80      	pop	{r7, pc}
 8011c0e:	bf00      	nop
 8011c10:	200002d0 	.word	0x200002d0

08011c14 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8011c14:	b580      	push	{r7, lr}
 8011c16:	b08c      	sub	sp, #48	; 0x30
 8011c18:	af02      	add	r7, sp, #8
 8011c1a:	60f8      	str	r0, [r7, #12]
 8011c1c:	60b9      	str	r1, [r7, #8]
 8011c1e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8011c20:	2300      	movs	r3, #0
 8011c22:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011c24:	f3ef 8305 	mrs	r3, IPSR
 8011c28:	61bb      	str	r3, [r7, #24]
  return(result);
 8011c2a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8011c2c:	2b00      	cmp	r3, #0
 8011c2e:	f040 8087 	bne.w	8011d40 <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011c32:	f3ef 8310 	mrs	r3, PRIMASK
 8011c36:	617b      	str	r3, [r7, #20]
  return(result);
 8011c38:	697b      	ldr	r3, [r7, #20]
 8011c3a:	2b00      	cmp	r3, #0
 8011c3c:	d105      	bne.n	8011c4a <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011c3e:	f3ef 8311 	mrs	r3, BASEPRI
 8011c42:	613b      	str	r3, [r7, #16]
  return(result);
 8011c44:	693b      	ldr	r3, [r7, #16]
 8011c46:	2b00      	cmp	r3, #0
 8011c48:	d003      	beq.n	8011c52 <osSemaphoreNew+0x3e>
 8011c4a:	4b40      	ldr	r3, [pc, #256]	; (8011d4c <osSemaphoreNew+0x138>)
 8011c4c:	681b      	ldr	r3, [r3, #0]
 8011c4e:	2b02      	cmp	r3, #2
 8011c50:	d076      	beq.n	8011d40 <osSemaphoreNew+0x12c>
 8011c52:	68fb      	ldr	r3, [r7, #12]
 8011c54:	2b00      	cmp	r3, #0
 8011c56:	d073      	beq.n	8011d40 <osSemaphoreNew+0x12c>
 8011c58:	68ba      	ldr	r2, [r7, #8]
 8011c5a:	68fb      	ldr	r3, [r7, #12]
 8011c5c:	429a      	cmp	r2, r3
 8011c5e:	d86f      	bhi.n	8011d40 <osSemaphoreNew+0x12c>
    mem = -1;
 8011c60:	f04f 33ff 	mov.w	r3, #4294967295
 8011c64:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	2b00      	cmp	r3, #0
 8011c6a:	d015      	beq.n	8011c98 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8011c6c:	687b      	ldr	r3, [r7, #4]
 8011c6e:	689b      	ldr	r3, [r3, #8]
 8011c70:	2b00      	cmp	r3, #0
 8011c72:	d006      	beq.n	8011c82 <osSemaphoreNew+0x6e>
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	68db      	ldr	r3, [r3, #12]
 8011c78:	2b4f      	cmp	r3, #79	; 0x4f
 8011c7a:	d902      	bls.n	8011c82 <osSemaphoreNew+0x6e>
        mem = 1;
 8011c7c:	2301      	movs	r3, #1
 8011c7e:	623b      	str	r3, [r7, #32]
 8011c80:	e00c      	b.n	8011c9c <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8011c82:	687b      	ldr	r3, [r7, #4]
 8011c84:	689b      	ldr	r3, [r3, #8]
 8011c86:	2b00      	cmp	r3, #0
 8011c88:	d108      	bne.n	8011c9c <osSemaphoreNew+0x88>
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	68db      	ldr	r3, [r3, #12]
 8011c8e:	2b00      	cmp	r3, #0
 8011c90:	d104      	bne.n	8011c9c <osSemaphoreNew+0x88>
          mem = 0;
 8011c92:	2300      	movs	r3, #0
 8011c94:	623b      	str	r3, [r7, #32]
 8011c96:	e001      	b.n	8011c9c <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8011c98:	2300      	movs	r3, #0
 8011c9a:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8011c9c:	6a3b      	ldr	r3, [r7, #32]
 8011c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011ca2:	d04d      	beq.n	8011d40 <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 8011ca4:	68fb      	ldr	r3, [r7, #12]
 8011ca6:	2b01      	cmp	r3, #1
 8011ca8:	d129      	bne.n	8011cfe <osSemaphoreNew+0xea>
        if (mem == 1) {
 8011caa:	6a3b      	ldr	r3, [r7, #32]
 8011cac:	2b01      	cmp	r3, #1
 8011cae:	d10b      	bne.n	8011cc8 <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	689a      	ldr	r2, [r3, #8]
 8011cb4:	2303      	movs	r3, #3
 8011cb6:	9300      	str	r3, [sp, #0]
 8011cb8:	4613      	mov	r3, r2
 8011cba:	2200      	movs	r2, #0
 8011cbc:	2100      	movs	r1, #0
 8011cbe:	2001      	movs	r0, #1
 8011cc0:	f000 fbf8 	bl	80124b4 <xQueueGenericCreateStatic>
 8011cc4:	6278      	str	r0, [r7, #36]	; 0x24
 8011cc6:	e005      	b.n	8011cd4 <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8011cc8:	2203      	movs	r2, #3
 8011cca:	2100      	movs	r1, #0
 8011ccc:	2001      	movs	r0, #1
 8011cce:	f000 fc6e 	bl	80125ae <xQueueGenericCreate>
 8011cd2:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8011cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cd6:	2b00      	cmp	r3, #0
 8011cd8:	d022      	beq.n	8011d20 <osSemaphoreNew+0x10c>
 8011cda:	68bb      	ldr	r3, [r7, #8]
 8011cdc:	2b00      	cmp	r3, #0
 8011cde:	d01f      	beq.n	8011d20 <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8011ce0:	2300      	movs	r3, #0
 8011ce2:	2200      	movs	r2, #0
 8011ce4:	2100      	movs	r1, #0
 8011ce6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011ce8:	f000 fd34 	bl	8012754 <xQueueGenericSend>
 8011cec:	4603      	mov	r3, r0
 8011cee:	2b01      	cmp	r3, #1
 8011cf0:	d016      	beq.n	8011d20 <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 8011cf2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011cf4:	f001 f9d3 	bl	801309e <vQueueDelete>
            hSemaphore = NULL;
 8011cf8:	2300      	movs	r3, #0
 8011cfa:	627b      	str	r3, [r7, #36]	; 0x24
 8011cfc:	e010      	b.n	8011d20 <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 8011cfe:	6a3b      	ldr	r3, [r7, #32]
 8011d00:	2b01      	cmp	r3, #1
 8011d02:	d108      	bne.n	8011d16 <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	689b      	ldr	r3, [r3, #8]
 8011d08:	461a      	mov	r2, r3
 8011d0a:	68b9      	ldr	r1, [r7, #8]
 8011d0c:	68f8      	ldr	r0, [r7, #12]
 8011d0e:	f000 fcb2 	bl	8012676 <xQueueCreateCountingSemaphoreStatic>
 8011d12:	6278      	str	r0, [r7, #36]	; 0x24
 8011d14:	e004      	b.n	8011d20 <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8011d16:	68b9      	ldr	r1, [r7, #8]
 8011d18:	68f8      	ldr	r0, [r7, #12]
 8011d1a:	f000 fce5 	bl	80126e8 <xQueueCreateCountingSemaphore>
 8011d1e:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8011d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d22:	2b00      	cmp	r3, #0
 8011d24:	d00c      	beq.n	8011d40 <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	2b00      	cmp	r3, #0
 8011d2a:	d003      	beq.n	8011d34 <osSemaphoreNew+0x120>
          name = attr->name;
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	681b      	ldr	r3, [r3, #0]
 8011d30:	61fb      	str	r3, [r7, #28]
 8011d32:	e001      	b.n	8011d38 <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 8011d34:	2300      	movs	r3, #0
 8011d36:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8011d38:	69f9      	ldr	r1, [r7, #28]
 8011d3a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011d3c:	f001 fafc 	bl	8013338 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8011d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8011d42:	4618      	mov	r0, r3
 8011d44:	3728      	adds	r7, #40	; 0x28
 8011d46:	46bd      	mov	sp, r7
 8011d48:	bd80      	pop	{r7, pc}
 8011d4a:	bf00      	nop
 8011d4c:	200002d0 	.word	0x200002d0

08011d50 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8011d50:	b580      	push	{r7, lr}
 8011d52:	b088      	sub	sp, #32
 8011d54:	af00      	add	r7, sp, #0
 8011d56:	6078      	str	r0, [r7, #4]
 8011d58:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8011d5e:	2300      	movs	r3, #0
 8011d60:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8011d62:	69bb      	ldr	r3, [r7, #24]
 8011d64:	2b00      	cmp	r3, #0
 8011d66:	d103      	bne.n	8011d70 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8011d68:	f06f 0303 	mvn.w	r3, #3
 8011d6c:	61fb      	str	r3, [r7, #28]
 8011d6e:	e04b      	b.n	8011e08 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011d70:	f3ef 8305 	mrs	r3, IPSR
 8011d74:	617b      	str	r3, [r7, #20]
  return(result);
 8011d76:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8011d78:	2b00      	cmp	r3, #0
 8011d7a:	d10f      	bne.n	8011d9c <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011d7c:	f3ef 8310 	mrs	r3, PRIMASK
 8011d80:	613b      	str	r3, [r7, #16]
  return(result);
 8011d82:	693b      	ldr	r3, [r7, #16]
 8011d84:	2b00      	cmp	r3, #0
 8011d86:	d105      	bne.n	8011d94 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011d88:	f3ef 8311 	mrs	r3, BASEPRI
 8011d8c:	60fb      	str	r3, [r7, #12]
  return(result);
 8011d8e:	68fb      	ldr	r3, [r7, #12]
 8011d90:	2b00      	cmp	r3, #0
 8011d92:	d026      	beq.n	8011de2 <osSemaphoreAcquire+0x92>
 8011d94:	4b1f      	ldr	r3, [pc, #124]	; (8011e14 <osSemaphoreAcquire+0xc4>)
 8011d96:	681b      	ldr	r3, [r3, #0]
 8011d98:	2b02      	cmp	r3, #2
 8011d9a:	d122      	bne.n	8011de2 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8011d9c:	683b      	ldr	r3, [r7, #0]
 8011d9e:	2b00      	cmp	r3, #0
 8011da0:	d003      	beq.n	8011daa <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8011da2:	f06f 0303 	mvn.w	r3, #3
 8011da6:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8011da8:	e02d      	b.n	8011e06 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8011daa:	2300      	movs	r3, #0
 8011dac:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8011dae:	f107 0308 	add.w	r3, r7, #8
 8011db2:	461a      	mov	r2, r3
 8011db4:	2100      	movs	r1, #0
 8011db6:	69b8      	ldr	r0, [r7, #24]
 8011db8:	f001 f8ee 	bl	8012f98 <xQueueReceiveFromISR>
 8011dbc:	4603      	mov	r3, r0
 8011dbe:	2b01      	cmp	r3, #1
 8011dc0:	d003      	beq.n	8011dca <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8011dc2:	f06f 0302 	mvn.w	r3, #2
 8011dc6:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8011dc8:	e01d      	b.n	8011e06 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8011dca:	68bb      	ldr	r3, [r7, #8]
 8011dcc:	2b00      	cmp	r3, #0
 8011dce:	d01a      	beq.n	8011e06 <osSemaphoreAcquire+0xb6>
 8011dd0:	4b11      	ldr	r3, [pc, #68]	; (8011e18 <osSemaphoreAcquire+0xc8>)
 8011dd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011dd6:	601a      	str	r2, [r3, #0]
 8011dd8:	f3bf 8f4f 	dsb	sy
 8011ddc:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8011de0:	e011      	b.n	8011e06 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8011de2:	6839      	ldr	r1, [r7, #0]
 8011de4:	69b8      	ldr	r0, [r7, #24]
 8011de6:	f000 ffc7 	bl	8012d78 <xQueueSemaphoreTake>
 8011dea:	4603      	mov	r3, r0
 8011dec:	2b01      	cmp	r3, #1
 8011dee:	d00b      	beq.n	8011e08 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8011df0:	683b      	ldr	r3, [r7, #0]
 8011df2:	2b00      	cmp	r3, #0
 8011df4:	d003      	beq.n	8011dfe <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8011df6:	f06f 0301 	mvn.w	r3, #1
 8011dfa:	61fb      	str	r3, [r7, #28]
 8011dfc:	e004      	b.n	8011e08 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8011dfe:	f06f 0302 	mvn.w	r3, #2
 8011e02:	61fb      	str	r3, [r7, #28]
 8011e04:	e000      	b.n	8011e08 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8011e06:	bf00      	nop
      }
    }
  }

  return (stat);
 8011e08:	69fb      	ldr	r3, [r7, #28]
}
 8011e0a:	4618      	mov	r0, r3
 8011e0c:	3720      	adds	r7, #32
 8011e0e:	46bd      	mov	sp, r7
 8011e10:	bd80      	pop	{r7, pc}
 8011e12:	bf00      	nop
 8011e14:	200002d0 	.word	0x200002d0
 8011e18:	e000ed04 	.word	0xe000ed04

08011e1c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8011e1c:	b580      	push	{r7, lr}
 8011e1e:	b088      	sub	sp, #32
 8011e20:	af00      	add	r7, sp, #0
 8011e22:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8011e28:	2300      	movs	r3, #0
 8011e2a:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8011e2c:	69bb      	ldr	r3, [r7, #24]
 8011e2e:	2b00      	cmp	r3, #0
 8011e30:	d103      	bne.n	8011e3a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8011e32:	f06f 0303 	mvn.w	r3, #3
 8011e36:	61fb      	str	r3, [r7, #28]
 8011e38:	e03e      	b.n	8011eb8 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011e3a:	f3ef 8305 	mrs	r3, IPSR
 8011e3e:	617b      	str	r3, [r7, #20]
  return(result);
 8011e40:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8011e42:	2b00      	cmp	r3, #0
 8011e44:	d10f      	bne.n	8011e66 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011e46:	f3ef 8310 	mrs	r3, PRIMASK
 8011e4a:	613b      	str	r3, [r7, #16]
  return(result);
 8011e4c:	693b      	ldr	r3, [r7, #16]
 8011e4e:	2b00      	cmp	r3, #0
 8011e50:	d105      	bne.n	8011e5e <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011e52:	f3ef 8311 	mrs	r3, BASEPRI
 8011e56:	60fb      	str	r3, [r7, #12]
  return(result);
 8011e58:	68fb      	ldr	r3, [r7, #12]
 8011e5a:	2b00      	cmp	r3, #0
 8011e5c:	d01e      	beq.n	8011e9c <osSemaphoreRelease+0x80>
 8011e5e:	4b19      	ldr	r3, [pc, #100]	; (8011ec4 <osSemaphoreRelease+0xa8>)
 8011e60:	681b      	ldr	r3, [r3, #0]
 8011e62:	2b02      	cmp	r3, #2
 8011e64:	d11a      	bne.n	8011e9c <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8011e66:	2300      	movs	r3, #0
 8011e68:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8011e6a:	f107 0308 	add.w	r3, r7, #8
 8011e6e:	4619      	mov	r1, r3
 8011e70:	69b8      	ldr	r0, [r7, #24]
 8011e72:	f000 fe0d 	bl	8012a90 <xQueueGiveFromISR>
 8011e76:	4603      	mov	r3, r0
 8011e78:	2b01      	cmp	r3, #1
 8011e7a:	d003      	beq.n	8011e84 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8011e7c:	f06f 0302 	mvn.w	r3, #2
 8011e80:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8011e82:	e018      	b.n	8011eb6 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8011e84:	68bb      	ldr	r3, [r7, #8]
 8011e86:	2b00      	cmp	r3, #0
 8011e88:	d015      	beq.n	8011eb6 <osSemaphoreRelease+0x9a>
 8011e8a:	4b0f      	ldr	r3, [pc, #60]	; (8011ec8 <osSemaphoreRelease+0xac>)
 8011e8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011e90:	601a      	str	r2, [r3, #0]
 8011e92:	f3bf 8f4f 	dsb	sy
 8011e96:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8011e9a:	e00c      	b.n	8011eb6 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8011e9c:	2300      	movs	r3, #0
 8011e9e:	2200      	movs	r2, #0
 8011ea0:	2100      	movs	r1, #0
 8011ea2:	69b8      	ldr	r0, [r7, #24]
 8011ea4:	f000 fc56 	bl	8012754 <xQueueGenericSend>
 8011ea8:	4603      	mov	r3, r0
 8011eaa:	2b01      	cmp	r3, #1
 8011eac:	d004      	beq.n	8011eb8 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8011eae:	f06f 0302 	mvn.w	r3, #2
 8011eb2:	61fb      	str	r3, [r7, #28]
 8011eb4:	e000      	b.n	8011eb8 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8011eb6:	bf00      	nop
    }
  }

  return (stat);
 8011eb8:	69fb      	ldr	r3, [r7, #28]
}
 8011eba:	4618      	mov	r0, r3
 8011ebc:	3720      	adds	r7, #32
 8011ebe:	46bd      	mov	sp, r7
 8011ec0:	bd80      	pop	{r7, pc}
 8011ec2:	bf00      	nop
 8011ec4:	200002d0 	.word	0x200002d0
 8011ec8:	e000ed04 	.word	0xe000ed04

08011ecc <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8011ecc:	b580      	push	{r7, lr}
 8011ece:	b088      	sub	sp, #32
 8011ed0:	af00      	add	r7, sp, #0
 8011ed2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011ed8:	f3ef 8305 	mrs	r3, IPSR
 8011edc:	617b      	str	r3, [r7, #20]
  return(result);
 8011ede:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8011ee0:	2b00      	cmp	r3, #0
 8011ee2:	d10f      	bne.n	8011f04 <osSemaphoreDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011ee4:	f3ef 8310 	mrs	r3, PRIMASK
 8011ee8:	613b      	str	r3, [r7, #16]
  return(result);
 8011eea:	693b      	ldr	r3, [r7, #16]
 8011eec:	2b00      	cmp	r3, #0
 8011eee:	d105      	bne.n	8011efc <osSemaphoreDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011ef0:	f3ef 8311 	mrs	r3, BASEPRI
 8011ef4:	60fb      	str	r3, [r7, #12]
  return(result);
 8011ef6:	68fb      	ldr	r3, [r7, #12]
 8011ef8:	2b00      	cmp	r3, #0
 8011efa:	d007      	beq.n	8011f0c <osSemaphoreDelete+0x40>
 8011efc:	4b0d      	ldr	r3, [pc, #52]	; (8011f34 <osSemaphoreDelete+0x68>)
 8011efe:	681b      	ldr	r3, [r3, #0]
 8011f00:	2b02      	cmp	r3, #2
 8011f02:	d103      	bne.n	8011f0c <osSemaphoreDelete+0x40>
    stat = osErrorISR;
 8011f04:	f06f 0305 	mvn.w	r3, #5
 8011f08:	61fb      	str	r3, [r7, #28]
 8011f0a:	e00e      	b.n	8011f2a <osSemaphoreDelete+0x5e>
  }
  else if (hSemaphore == NULL) {
 8011f0c:	69bb      	ldr	r3, [r7, #24]
 8011f0e:	2b00      	cmp	r3, #0
 8011f10:	d103      	bne.n	8011f1a <osSemaphoreDelete+0x4e>
    stat = osErrorParameter;
 8011f12:	f06f 0303 	mvn.w	r3, #3
 8011f16:	61fb      	str	r3, [r7, #28]
 8011f18:	e007      	b.n	8011f2a <osSemaphoreDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 8011f1a:	69b8      	ldr	r0, [r7, #24]
 8011f1c:	f001 fa34 	bl	8013388 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8011f20:	2300      	movs	r3, #0
 8011f22:	61fb      	str	r3, [r7, #28]
    vSemaphoreDelete (hSemaphore);
 8011f24:	69b8      	ldr	r0, [r7, #24]
 8011f26:	f001 f8ba 	bl	801309e <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8011f2a:	69fb      	ldr	r3, [r7, #28]
}
 8011f2c:	4618      	mov	r0, r3
 8011f2e:	3720      	adds	r7, #32
 8011f30:	46bd      	mov	sp, r7
 8011f32:	bd80      	pop	{r7, pc}
 8011f34:	200002d0 	.word	0x200002d0

08011f38 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8011f38:	b580      	push	{r7, lr}
 8011f3a:	b08c      	sub	sp, #48	; 0x30
 8011f3c:	af02      	add	r7, sp, #8
 8011f3e:	60f8      	str	r0, [r7, #12]
 8011f40:	60b9      	str	r1, [r7, #8]
 8011f42:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8011f44:	2300      	movs	r3, #0
 8011f46:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011f48:	f3ef 8305 	mrs	r3, IPSR
 8011f4c:	61bb      	str	r3, [r7, #24]
  return(result);
 8011f4e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8011f50:	2b00      	cmp	r3, #0
 8011f52:	d170      	bne.n	8012036 <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011f54:	f3ef 8310 	mrs	r3, PRIMASK
 8011f58:	617b      	str	r3, [r7, #20]
  return(result);
 8011f5a:	697b      	ldr	r3, [r7, #20]
 8011f5c:	2b00      	cmp	r3, #0
 8011f5e:	d105      	bne.n	8011f6c <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011f60:	f3ef 8311 	mrs	r3, BASEPRI
 8011f64:	613b      	str	r3, [r7, #16]
  return(result);
 8011f66:	693b      	ldr	r3, [r7, #16]
 8011f68:	2b00      	cmp	r3, #0
 8011f6a:	d003      	beq.n	8011f74 <osMessageQueueNew+0x3c>
 8011f6c:	4b34      	ldr	r3, [pc, #208]	; (8012040 <osMessageQueueNew+0x108>)
 8011f6e:	681b      	ldr	r3, [r3, #0]
 8011f70:	2b02      	cmp	r3, #2
 8011f72:	d060      	beq.n	8012036 <osMessageQueueNew+0xfe>
 8011f74:	68fb      	ldr	r3, [r7, #12]
 8011f76:	2b00      	cmp	r3, #0
 8011f78:	d05d      	beq.n	8012036 <osMessageQueueNew+0xfe>
 8011f7a:	68bb      	ldr	r3, [r7, #8]
 8011f7c:	2b00      	cmp	r3, #0
 8011f7e:	d05a      	beq.n	8012036 <osMessageQueueNew+0xfe>
    mem = -1;
 8011f80:	f04f 33ff 	mov.w	r3, #4294967295
 8011f84:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8011f86:	687b      	ldr	r3, [r7, #4]
 8011f88:	2b00      	cmp	r3, #0
 8011f8a:	d029      	beq.n	8011fe0 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	689b      	ldr	r3, [r3, #8]
 8011f90:	2b00      	cmp	r3, #0
 8011f92:	d012      	beq.n	8011fba <osMessageQueueNew+0x82>
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	68db      	ldr	r3, [r3, #12]
 8011f98:	2b4f      	cmp	r3, #79	; 0x4f
 8011f9a:	d90e      	bls.n	8011fba <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8011fa0:	2b00      	cmp	r3, #0
 8011fa2:	d00a      	beq.n	8011fba <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8011fa4:	687b      	ldr	r3, [r7, #4]
 8011fa6:	695a      	ldr	r2, [r3, #20]
 8011fa8:	68fb      	ldr	r3, [r7, #12]
 8011faa:	68b9      	ldr	r1, [r7, #8]
 8011fac:	fb01 f303 	mul.w	r3, r1, r3
 8011fb0:	429a      	cmp	r2, r3
 8011fb2:	d302      	bcc.n	8011fba <osMessageQueueNew+0x82>
        mem = 1;
 8011fb4:	2301      	movs	r3, #1
 8011fb6:	623b      	str	r3, [r7, #32]
 8011fb8:	e014      	b.n	8011fe4 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8011fba:	687b      	ldr	r3, [r7, #4]
 8011fbc:	689b      	ldr	r3, [r3, #8]
 8011fbe:	2b00      	cmp	r3, #0
 8011fc0:	d110      	bne.n	8011fe4 <osMessageQueueNew+0xac>
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	68db      	ldr	r3, [r3, #12]
 8011fc6:	2b00      	cmp	r3, #0
 8011fc8:	d10c      	bne.n	8011fe4 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8011fca:	687b      	ldr	r3, [r7, #4]
 8011fcc:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8011fce:	2b00      	cmp	r3, #0
 8011fd0:	d108      	bne.n	8011fe4 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	695b      	ldr	r3, [r3, #20]
 8011fd6:	2b00      	cmp	r3, #0
 8011fd8:	d104      	bne.n	8011fe4 <osMessageQueueNew+0xac>
          mem = 0;
 8011fda:	2300      	movs	r3, #0
 8011fdc:	623b      	str	r3, [r7, #32]
 8011fde:	e001      	b.n	8011fe4 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8011fe0:	2300      	movs	r3, #0
 8011fe2:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8011fe4:	6a3b      	ldr	r3, [r7, #32]
 8011fe6:	2b01      	cmp	r3, #1
 8011fe8:	d10c      	bne.n	8012004 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8011fea:	687b      	ldr	r3, [r7, #4]
 8011fec:	691a      	ldr	r2, [r3, #16]
 8011fee:	687b      	ldr	r3, [r7, #4]
 8011ff0:	6899      	ldr	r1, [r3, #8]
 8011ff2:	2300      	movs	r3, #0
 8011ff4:	9300      	str	r3, [sp, #0]
 8011ff6:	460b      	mov	r3, r1
 8011ff8:	68b9      	ldr	r1, [r7, #8]
 8011ffa:	68f8      	ldr	r0, [r7, #12]
 8011ffc:	f000 fa5a 	bl	80124b4 <xQueueGenericCreateStatic>
 8012000:	6278      	str	r0, [r7, #36]	; 0x24
 8012002:	e008      	b.n	8012016 <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 8012004:	6a3b      	ldr	r3, [r7, #32]
 8012006:	2b00      	cmp	r3, #0
 8012008:	d105      	bne.n	8012016 <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 801200a:	2200      	movs	r2, #0
 801200c:	68b9      	ldr	r1, [r7, #8]
 801200e:	68f8      	ldr	r0, [r7, #12]
 8012010:	f000 facd 	bl	80125ae <xQueueGenericCreate>
 8012014:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8012016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012018:	2b00      	cmp	r3, #0
 801201a:	d00c      	beq.n	8012036 <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 801201c:	687b      	ldr	r3, [r7, #4]
 801201e:	2b00      	cmp	r3, #0
 8012020:	d003      	beq.n	801202a <osMessageQueueNew+0xf2>
        name = attr->name;
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	681b      	ldr	r3, [r3, #0]
 8012026:	61fb      	str	r3, [r7, #28]
 8012028:	e001      	b.n	801202e <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 801202a:	2300      	movs	r3, #0
 801202c:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 801202e:	69f9      	ldr	r1, [r7, #28]
 8012030:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012032:	f001 f981 	bl	8013338 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8012036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8012038:	4618      	mov	r0, r3
 801203a:	3728      	adds	r7, #40	; 0x28
 801203c:	46bd      	mov	sp, r7
 801203e:	bd80      	pop	{r7, pc}
 8012040:	200002d0 	.word	0x200002d0

08012044 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8012044:	b580      	push	{r7, lr}
 8012046:	b08a      	sub	sp, #40	; 0x28
 8012048:	af00      	add	r7, sp, #0
 801204a:	60f8      	str	r0, [r7, #12]
 801204c:	60b9      	str	r1, [r7, #8]
 801204e:	603b      	str	r3, [r7, #0]
 8012050:	4613      	mov	r3, r2
 8012052:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8012054:	68fb      	ldr	r3, [r7, #12]
 8012056:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8012058:	2300      	movs	r3, #0
 801205a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801205c:	f3ef 8305 	mrs	r3, IPSR
 8012060:	61fb      	str	r3, [r7, #28]
  return(result);
 8012062:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8012064:	2b00      	cmp	r3, #0
 8012066:	d10f      	bne.n	8012088 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012068:	f3ef 8310 	mrs	r3, PRIMASK
 801206c:	61bb      	str	r3, [r7, #24]
  return(result);
 801206e:	69bb      	ldr	r3, [r7, #24]
 8012070:	2b00      	cmp	r3, #0
 8012072:	d105      	bne.n	8012080 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8012074:	f3ef 8311 	mrs	r3, BASEPRI
 8012078:	617b      	str	r3, [r7, #20]
  return(result);
 801207a:	697b      	ldr	r3, [r7, #20]
 801207c:	2b00      	cmp	r3, #0
 801207e:	d02c      	beq.n	80120da <osMessageQueuePut+0x96>
 8012080:	4b28      	ldr	r3, [pc, #160]	; (8012124 <osMessageQueuePut+0xe0>)
 8012082:	681b      	ldr	r3, [r3, #0]
 8012084:	2b02      	cmp	r3, #2
 8012086:	d128      	bne.n	80120da <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012088:	6a3b      	ldr	r3, [r7, #32]
 801208a:	2b00      	cmp	r3, #0
 801208c:	d005      	beq.n	801209a <osMessageQueuePut+0x56>
 801208e:	68bb      	ldr	r3, [r7, #8]
 8012090:	2b00      	cmp	r3, #0
 8012092:	d002      	beq.n	801209a <osMessageQueuePut+0x56>
 8012094:	683b      	ldr	r3, [r7, #0]
 8012096:	2b00      	cmp	r3, #0
 8012098:	d003      	beq.n	80120a2 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 801209a:	f06f 0303 	mvn.w	r3, #3
 801209e:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80120a0:	e039      	b.n	8012116 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 80120a2:	2300      	movs	r3, #0
 80120a4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80120a6:	f107 0210 	add.w	r2, r7, #16
 80120aa:	2300      	movs	r3, #0
 80120ac:	68b9      	ldr	r1, [r7, #8]
 80120ae:	6a38      	ldr	r0, [r7, #32]
 80120b0:	f000 fc52 	bl	8012958 <xQueueGenericSendFromISR>
 80120b4:	4603      	mov	r3, r0
 80120b6:	2b01      	cmp	r3, #1
 80120b8:	d003      	beq.n	80120c2 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 80120ba:	f06f 0302 	mvn.w	r3, #2
 80120be:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80120c0:	e029      	b.n	8012116 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 80120c2:	693b      	ldr	r3, [r7, #16]
 80120c4:	2b00      	cmp	r3, #0
 80120c6:	d026      	beq.n	8012116 <osMessageQueuePut+0xd2>
 80120c8:	4b17      	ldr	r3, [pc, #92]	; (8012128 <osMessageQueuePut+0xe4>)
 80120ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80120ce:	601a      	str	r2, [r3, #0]
 80120d0:	f3bf 8f4f 	dsb	sy
 80120d4:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80120d8:	e01d      	b.n	8012116 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80120da:	6a3b      	ldr	r3, [r7, #32]
 80120dc:	2b00      	cmp	r3, #0
 80120de:	d002      	beq.n	80120e6 <osMessageQueuePut+0xa2>
 80120e0:	68bb      	ldr	r3, [r7, #8]
 80120e2:	2b00      	cmp	r3, #0
 80120e4:	d103      	bne.n	80120ee <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 80120e6:	f06f 0303 	mvn.w	r3, #3
 80120ea:	627b      	str	r3, [r7, #36]	; 0x24
 80120ec:	e014      	b.n	8012118 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80120ee:	2300      	movs	r3, #0
 80120f0:	683a      	ldr	r2, [r7, #0]
 80120f2:	68b9      	ldr	r1, [r7, #8]
 80120f4:	6a38      	ldr	r0, [r7, #32]
 80120f6:	f000 fb2d 	bl	8012754 <xQueueGenericSend>
 80120fa:	4603      	mov	r3, r0
 80120fc:	2b01      	cmp	r3, #1
 80120fe:	d00b      	beq.n	8012118 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8012100:	683b      	ldr	r3, [r7, #0]
 8012102:	2b00      	cmp	r3, #0
 8012104:	d003      	beq.n	801210e <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8012106:	f06f 0301 	mvn.w	r3, #1
 801210a:	627b      	str	r3, [r7, #36]	; 0x24
 801210c:	e004      	b.n	8012118 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 801210e:	f06f 0302 	mvn.w	r3, #2
 8012112:	627b      	str	r3, [r7, #36]	; 0x24
 8012114:	e000      	b.n	8012118 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012116:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8012118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801211a:	4618      	mov	r0, r3
 801211c:	3728      	adds	r7, #40	; 0x28
 801211e:	46bd      	mov	sp, r7
 8012120:	bd80      	pop	{r7, pc}
 8012122:	bf00      	nop
 8012124:	200002d0 	.word	0x200002d0
 8012128:	e000ed04 	.word	0xe000ed04

0801212c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 801212c:	b580      	push	{r7, lr}
 801212e:	b08a      	sub	sp, #40	; 0x28
 8012130:	af00      	add	r7, sp, #0
 8012132:	60f8      	str	r0, [r7, #12]
 8012134:	60b9      	str	r1, [r7, #8]
 8012136:	607a      	str	r2, [r7, #4]
 8012138:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 801213a:	68fb      	ldr	r3, [r7, #12]
 801213c:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 801213e:	2300      	movs	r3, #0
 8012140:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012142:	f3ef 8305 	mrs	r3, IPSR
 8012146:	61fb      	str	r3, [r7, #28]
  return(result);
 8012148:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 801214a:	2b00      	cmp	r3, #0
 801214c:	d10f      	bne.n	801216e <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801214e:	f3ef 8310 	mrs	r3, PRIMASK
 8012152:	61bb      	str	r3, [r7, #24]
  return(result);
 8012154:	69bb      	ldr	r3, [r7, #24]
 8012156:	2b00      	cmp	r3, #0
 8012158:	d105      	bne.n	8012166 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801215a:	f3ef 8311 	mrs	r3, BASEPRI
 801215e:	617b      	str	r3, [r7, #20]
  return(result);
 8012160:	697b      	ldr	r3, [r7, #20]
 8012162:	2b00      	cmp	r3, #0
 8012164:	d02c      	beq.n	80121c0 <osMessageQueueGet+0x94>
 8012166:	4b28      	ldr	r3, [pc, #160]	; (8012208 <osMessageQueueGet+0xdc>)
 8012168:	681b      	ldr	r3, [r3, #0]
 801216a:	2b02      	cmp	r3, #2
 801216c:	d128      	bne.n	80121c0 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801216e:	6a3b      	ldr	r3, [r7, #32]
 8012170:	2b00      	cmp	r3, #0
 8012172:	d005      	beq.n	8012180 <osMessageQueueGet+0x54>
 8012174:	68bb      	ldr	r3, [r7, #8]
 8012176:	2b00      	cmp	r3, #0
 8012178:	d002      	beq.n	8012180 <osMessageQueueGet+0x54>
 801217a:	683b      	ldr	r3, [r7, #0]
 801217c:	2b00      	cmp	r3, #0
 801217e:	d003      	beq.n	8012188 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8012180:	f06f 0303 	mvn.w	r3, #3
 8012184:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012186:	e038      	b.n	80121fa <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8012188:	2300      	movs	r3, #0
 801218a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 801218c:	f107 0310 	add.w	r3, r7, #16
 8012190:	461a      	mov	r2, r3
 8012192:	68b9      	ldr	r1, [r7, #8]
 8012194:	6a38      	ldr	r0, [r7, #32]
 8012196:	f000 feff 	bl	8012f98 <xQueueReceiveFromISR>
 801219a:	4603      	mov	r3, r0
 801219c:	2b01      	cmp	r3, #1
 801219e:	d003      	beq.n	80121a8 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 80121a0:	f06f 0302 	mvn.w	r3, #2
 80121a4:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80121a6:	e028      	b.n	80121fa <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 80121a8:	693b      	ldr	r3, [r7, #16]
 80121aa:	2b00      	cmp	r3, #0
 80121ac:	d025      	beq.n	80121fa <osMessageQueueGet+0xce>
 80121ae:	4b17      	ldr	r3, [pc, #92]	; (801220c <osMessageQueueGet+0xe0>)
 80121b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80121b4:	601a      	str	r2, [r3, #0]
 80121b6:	f3bf 8f4f 	dsb	sy
 80121ba:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80121be:	e01c      	b.n	80121fa <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80121c0:	6a3b      	ldr	r3, [r7, #32]
 80121c2:	2b00      	cmp	r3, #0
 80121c4:	d002      	beq.n	80121cc <osMessageQueueGet+0xa0>
 80121c6:	68bb      	ldr	r3, [r7, #8]
 80121c8:	2b00      	cmp	r3, #0
 80121ca:	d103      	bne.n	80121d4 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 80121cc:	f06f 0303 	mvn.w	r3, #3
 80121d0:	627b      	str	r3, [r7, #36]	; 0x24
 80121d2:	e013      	b.n	80121fc <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80121d4:	683a      	ldr	r2, [r7, #0]
 80121d6:	68b9      	ldr	r1, [r7, #8]
 80121d8:	6a38      	ldr	r0, [r7, #32]
 80121da:	f000 fceb 	bl	8012bb4 <xQueueReceive>
 80121de:	4603      	mov	r3, r0
 80121e0:	2b01      	cmp	r3, #1
 80121e2:	d00b      	beq.n	80121fc <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 80121e4:	683b      	ldr	r3, [r7, #0]
 80121e6:	2b00      	cmp	r3, #0
 80121e8:	d003      	beq.n	80121f2 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 80121ea:	f06f 0301 	mvn.w	r3, #1
 80121ee:	627b      	str	r3, [r7, #36]	; 0x24
 80121f0:	e004      	b.n	80121fc <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 80121f2:	f06f 0302 	mvn.w	r3, #2
 80121f6:	627b      	str	r3, [r7, #36]	; 0x24
 80121f8:	e000      	b.n	80121fc <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80121fa:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80121fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80121fe:	4618      	mov	r0, r3
 8012200:	3728      	adds	r7, #40	; 0x28
 8012202:	46bd      	mov	sp, r7
 8012204:	bd80      	pop	{r7, pc}
 8012206:	bf00      	nop
 8012208:	200002d0 	.word	0x200002d0
 801220c:	e000ed04 	.word	0xe000ed04

08012210 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8012210:	b480      	push	{r7}
 8012212:	b085      	sub	sp, #20
 8012214:	af00      	add	r7, sp, #0
 8012216:	60f8      	str	r0, [r7, #12]
 8012218:	60b9      	str	r1, [r7, #8]
 801221a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 801221c:	68fb      	ldr	r3, [r7, #12]
 801221e:	4a07      	ldr	r2, [pc, #28]	; (801223c <vApplicationGetIdleTaskMemory+0x2c>)
 8012220:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8012222:	68bb      	ldr	r3, [r7, #8]
 8012224:	4a06      	ldr	r2, [pc, #24]	; (8012240 <vApplicationGetIdleTaskMemory+0x30>)
 8012226:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8012228:	687b      	ldr	r3, [r7, #4]
 801222a:	2280      	movs	r2, #128	; 0x80
 801222c:	601a      	str	r2, [r3, #0]
}
 801222e:	bf00      	nop
 8012230:	3714      	adds	r7, #20
 8012232:	46bd      	mov	sp, r7
 8012234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012238:	4770      	bx	lr
 801223a:	bf00      	nop
 801223c:	200002d4 	.word	0x200002d4
 8012240:	20000330 	.word	0x20000330

08012244 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8012244:	b480      	push	{r7}
 8012246:	b085      	sub	sp, #20
 8012248:	af00      	add	r7, sp, #0
 801224a:	60f8      	str	r0, [r7, #12]
 801224c:	60b9      	str	r1, [r7, #8]
 801224e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8012250:	68fb      	ldr	r3, [r7, #12]
 8012252:	4a07      	ldr	r2, [pc, #28]	; (8012270 <vApplicationGetTimerTaskMemory+0x2c>)
 8012254:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8012256:	68bb      	ldr	r3, [r7, #8]
 8012258:	4a06      	ldr	r2, [pc, #24]	; (8012274 <vApplicationGetTimerTaskMemory+0x30>)
 801225a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 801225c:	687b      	ldr	r3, [r7, #4]
 801225e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8012262:	601a      	str	r2, [r3, #0]
}
 8012264:	bf00      	nop
 8012266:	3714      	adds	r7, #20
 8012268:	46bd      	mov	sp, r7
 801226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801226e:	4770      	bx	lr
 8012270:	20000530 	.word	0x20000530
 8012274:	2000058c 	.word	0x2000058c

08012278 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8012278:	b480      	push	{r7}
 801227a:	b083      	sub	sp, #12
 801227c:	af00      	add	r7, sp, #0
 801227e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012280:	687b      	ldr	r3, [r7, #4]
 8012282:	f103 0208 	add.w	r2, r3, #8
 8012286:	687b      	ldr	r3, [r7, #4]
 8012288:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801228a:	687b      	ldr	r3, [r7, #4]
 801228c:	f04f 32ff 	mov.w	r2, #4294967295
 8012290:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	f103 0208 	add.w	r2, r3, #8
 8012298:	687b      	ldr	r3, [r7, #4]
 801229a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	f103 0208 	add.w	r2, r3, #8
 80122a2:	687b      	ldr	r3, [r7, #4]
 80122a4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80122a6:	687b      	ldr	r3, [r7, #4]
 80122a8:	2200      	movs	r2, #0
 80122aa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80122ac:	bf00      	nop
 80122ae:	370c      	adds	r7, #12
 80122b0:	46bd      	mov	sp, r7
 80122b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122b6:	4770      	bx	lr

080122b8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80122b8:	b480      	push	{r7}
 80122ba:	b083      	sub	sp, #12
 80122bc:	af00      	add	r7, sp, #0
 80122be:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80122c0:	687b      	ldr	r3, [r7, #4]
 80122c2:	2200      	movs	r2, #0
 80122c4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80122c6:	bf00      	nop
 80122c8:	370c      	adds	r7, #12
 80122ca:	46bd      	mov	sp, r7
 80122cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122d0:	4770      	bx	lr

080122d2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80122d2:	b480      	push	{r7}
 80122d4:	b085      	sub	sp, #20
 80122d6:	af00      	add	r7, sp, #0
 80122d8:	6078      	str	r0, [r7, #4]
 80122da:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80122dc:	687b      	ldr	r3, [r7, #4]
 80122de:	685b      	ldr	r3, [r3, #4]
 80122e0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80122e2:	683b      	ldr	r3, [r7, #0]
 80122e4:	68fa      	ldr	r2, [r7, #12]
 80122e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80122e8:	68fb      	ldr	r3, [r7, #12]
 80122ea:	689a      	ldr	r2, [r3, #8]
 80122ec:	683b      	ldr	r3, [r7, #0]
 80122ee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80122f0:	68fb      	ldr	r3, [r7, #12]
 80122f2:	689b      	ldr	r3, [r3, #8]
 80122f4:	683a      	ldr	r2, [r7, #0]
 80122f6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80122f8:	68fb      	ldr	r3, [r7, #12]
 80122fa:	683a      	ldr	r2, [r7, #0]
 80122fc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80122fe:	683b      	ldr	r3, [r7, #0]
 8012300:	687a      	ldr	r2, [r7, #4]
 8012302:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012304:	687b      	ldr	r3, [r7, #4]
 8012306:	681b      	ldr	r3, [r3, #0]
 8012308:	1c5a      	adds	r2, r3, #1
 801230a:	687b      	ldr	r3, [r7, #4]
 801230c:	601a      	str	r2, [r3, #0]
}
 801230e:	bf00      	nop
 8012310:	3714      	adds	r7, #20
 8012312:	46bd      	mov	sp, r7
 8012314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012318:	4770      	bx	lr

0801231a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801231a:	b480      	push	{r7}
 801231c:	b085      	sub	sp, #20
 801231e:	af00      	add	r7, sp, #0
 8012320:	6078      	str	r0, [r7, #4]
 8012322:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8012324:	683b      	ldr	r3, [r7, #0]
 8012326:	681b      	ldr	r3, [r3, #0]
 8012328:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801232a:	68bb      	ldr	r3, [r7, #8]
 801232c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012330:	d103      	bne.n	801233a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8012332:	687b      	ldr	r3, [r7, #4]
 8012334:	691b      	ldr	r3, [r3, #16]
 8012336:	60fb      	str	r3, [r7, #12]
 8012338:	e00c      	b.n	8012354 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801233a:	687b      	ldr	r3, [r7, #4]
 801233c:	3308      	adds	r3, #8
 801233e:	60fb      	str	r3, [r7, #12]
 8012340:	e002      	b.n	8012348 <vListInsert+0x2e>
 8012342:	68fb      	ldr	r3, [r7, #12]
 8012344:	685b      	ldr	r3, [r3, #4]
 8012346:	60fb      	str	r3, [r7, #12]
 8012348:	68fb      	ldr	r3, [r7, #12]
 801234a:	685b      	ldr	r3, [r3, #4]
 801234c:	681b      	ldr	r3, [r3, #0]
 801234e:	68ba      	ldr	r2, [r7, #8]
 8012350:	429a      	cmp	r2, r3
 8012352:	d2f6      	bcs.n	8012342 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8012354:	68fb      	ldr	r3, [r7, #12]
 8012356:	685a      	ldr	r2, [r3, #4]
 8012358:	683b      	ldr	r3, [r7, #0]
 801235a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 801235c:	683b      	ldr	r3, [r7, #0]
 801235e:	685b      	ldr	r3, [r3, #4]
 8012360:	683a      	ldr	r2, [r7, #0]
 8012362:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8012364:	683b      	ldr	r3, [r7, #0]
 8012366:	68fa      	ldr	r2, [r7, #12]
 8012368:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801236a:	68fb      	ldr	r3, [r7, #12]
 801236c:	683a      	ldr	r2, [r7, #0]
 801236e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8012370:	683b      	ldr	r3, [r7, #0]
 8012372:	687a      	ldr	r2, [r7, #4]
 8012374:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	681b      	ldr	r3, [r3, #0]
 801237a:	1c5a      	adds	r2, r3, #1
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	601a      	str	r2, [r3, #0]
}
 8012380:	bf00      	nop
 8012382:	3714      	adds	r7, #20
 8012384:	46bd      	mov	sp, r7
 8012386:	f85d 7b04 	ldr.w	r7, [sp], #4
 801238a:	4770      	bx	lr

0801238c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 801238c:	b480      	push	{r7}
 801238e:	b085      	sub	sp, #20
 8012390:	af00      	add	r7, sp, #0
 8012392:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	691b      	ldr	r3, [r3, #16]
 8012398:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801239a:	687b      	ldr	r3, [r7, #4]
 801239c:	685b      	ldr	r3, [r3, #4]
 801239e:	687a      	ldr	r2, [r7, #4]
 80123a0:	6892      	ldr	r2, [r2, #8]
 80123a2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	689b      	ldr	r3, [r3, #8]
 80123a8:	687a      	ldr	r2, [r7, #4]
 80123aa:	6852      	ldr	r2, [r2, #4]
 80123ac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80123ae:	68fb      	ldr	r3, [r7, #12]
 80123b0:	685b      	ldr	r3, [r3, #4]
 80123b2:	687a      	ldr	r2, [r7, #4]
 80123b4:	429a      	cmp	r2, r3
 80123b6:	d103      	bne.n	80123c0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80123b8:	687b      	ldr	r3, [r7, #4]
 80123ba:	689a      	ldr	r2, [r3, #8]
 80123bc:	68fb      	ldr	r3, [r7, #12]
 80123be:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	2200      	movs	r2, #0
 80123c4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80123c6:	68fb      	ldr	r3, [r7, #12]
 80123c8:	681b      	ldr	r3, [r3, #0]
 80123ca:	1e5a      	subs	r2, r3, #1
 80123cc:	68fb      	ldr	r3, [r7, #12]
 80123ce:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80123d0:	68fb      	ldr	r3, [r7, #12]
 80123d2:	681b      	ldr	r3, [r3, #0]
}
 80123d4:	4618      	mov	r0, r3
 80123d6:	3714      	adds	r7, #20
 80123d8:	46bd      	mov	sp, r7
 80123da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123de:	4770      	bx	lr

080123e0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80123e0:	b580      	push	{r7, lr}
 80123e2:	b084      	sub	sp, #16
 80123e4:	af00      	add	r7, sp, #0
 80123e6:	6078      	str	r0, [r7, #4]
 80123e8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80123ea:	687b      	ldr	r3, [r7, #4]
 80123ec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80123ee:	68fb      	ldr	r3, [r7, #12]
 80123f0:	2b00      	cmp	r3, #0
 80123f2:	d10b      	bne.n	801240c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80123f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123f8:	b672      	cpsid	i
 80123fa:	f383 8811 	msr	BASEPRI, r3
 80123fe:	f3bf 8f6f 	isb	sy
 8012402:	f3bf 8f4f 	dsb	sy
 8012406:	b662      	cpsie	i
 8012408:	60bb      	str	r3, [r7, #8]
 801240a:	e7fe      	b.n	801240a <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 801240c:	f002 fc94 	bl	8014d38 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012410:	68fb      	ldr	r3, [r7, #12]
 8012412:	681a      	ldr	r2, [r3, #0]
 8012414:	68fb      	ldr	r3, [r7, #12]
 8012416:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012418:	68f9      	ldr	r1, [r7, #12]
 801241a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801241c:	fb01 f303 	mul.w	r3, r1, r3
 8012420:	441a      	add	r2, r3
 8012422:	68fb      	ldr	r3, [r7, #12]
 8012424:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8012426:	68fb      	ldr	r3, [r7, #12]
 8012428:	2200      	movs	r2, #0
 801242a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801242c:	68fb      	ldr	r3, [r7, #12]
 801242e:	681a      	ldr	r2, [r3, #0]
 8012430:	68fb      	ldr	r3, [r7, #12]
 8012432:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012434:	68fb      	ldr	r3, [r7, #12]
 8012436:	681a      	ldr	r2, [r3, #0]
 8012438:	68fb      	ldr	r3, [r7, #12]
 801243a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801243c:	3b01      	subs	r3, #1
 801243e:	68f9      	ldr	r1, [r7, #12]
 8012440:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8012442:	fb01 f303 	mul.w	r3, r1, r3
 8012446:	441a      	add	r2, r3
 8012448:	68fb      	ldr	r3, [r7, #12]
 801244a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801244c:	68fb      	ldr	r3, [r7, #12]
 801244e:	22ff      	movs	r2, #255	; 0xff
 8012450:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8012454:	68fb      	ldr	r3, [r7, #12]
 8012456:	22ff      	movs	r2, #255	; 0xff
 8012458:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 801245c:	683b      	ldr	r3, [r7, #0]
 801245e:	2b00      	cmp	r3, #0
 8012460:	d114      	bne.n	801248c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012462:	68fb      	ldr	r3, [r7, #12]
 8012464:	691b      	ldr	r3, [r3, #16]
 8012466:	2b00      	cmp	r3, #0
 8012468:	d01a      	beq.n	80124a0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801246a:	68fb      	ldr	r3, [r7, #12]
 801246c:	3310      	adds	r3, #16
 801246e:	4618      	mov	r0, r3
 8012470:	f001 fc64 	bl	8013d3c <xTaskRemoveFromEventList>
 8012474:	4603      	mov	r3, r0
 8012476:	2b00      	cmp	r3, #0
 8012478:	d012      	beq.n	80124a0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 801247a:	4b0d      	ldr	r3, [pc, #52]	; (80124b0 <xQueueGenericReset+0xd0>)
 801247c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012480:	601a      	str	r2, [r3, #0]
 8012482:	f3bf 8f4f 	dsb	sy
 8012486:	f3bf 8f6f 	isb	sy
 801248a:	e009      	b.n	80124a0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801248c:	68fb      	ldr	r3, [r7, #12]
 801248e:	3310      	adds	r3, #16
 8012490:	4618      	mov	r0, r3
 8012492:	f7ff fef1 	bl	8012278 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8012496:	68fb      	ldr	r3, [r7, #12]
 8012498:	3324      	adds	r3, #36	; 0x24
 801249a:	4618      	mov	r0, r3
 801249c:	f7ff feec 	bl	8012278 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80124a0:	f002 fc7c 	bl	8014d9c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80124a4:	2301      	movs	r3, #1
}
 80124a6:	4618      	mov	r0, r3
 80124a8:	3710      	adds	r7, #16
 80124aa:	46bd      	mov	sp, r7
 80124ac:	bd80      	pop	{r7, pc}
 80124ae:	bf00      	nop
 80124b0:	e000ed04 	.word	0xe000ed04

080124b4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80124b4:	b580      	push	{r7, lr}
 80124b6:	b08e      	sub	sp, #56	; 0x38
 80124b8:	af02      	add	r7, sp, #8
 80124ba:	60f8      	str	r0, [r7, #12]
 80124bc:	60b9      	str	r1, [r7, #8]
 80124be:	607a      	str	r2, [r7, #4]
 80124c0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80124c2:	68fb      	ldr	r3, [r7, #12]
 80124c4:	2b00      	cmp	r3, #0
 80124c6:	d10b      	bne.n	80124e0 <xQueueGenericCreateStatic+0x2c>
 80124c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124cc:	b672      	cpsid	i
 80124ce:	f383 8811 	msr	BASEPRI, r3
 80124d2:	f3bf 8f6f 	isb	sy
 80124d6:	f3bf 8f4f 	dsb	sy
 80124da:	b662      	cpsie	i
 80124dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80124de:	e7fe      	b.n	80124de <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80124e0:	683b      	ldr	r3, [r7, #0]
 80124e2:	2b00      	cmp	r3, #0
 80124e4:	d10b      	bne.n	80124fe <xQueueGenericCreateStatic+0x4a>
 80124e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124ea:	b672      	cpsid	i
 80124ec:	f383 8811 	msr	BASEPRI, r3
 80124f0:	f3bf 8f6f 	isb	sy
 80124f4:	f3bf 8f4f 	dsb	sy
 80124f8:	b662      	cpsie	i
 80124fa:	627b      	str	r3, [r7, #36]	; 0x24
 80124fc:	e7fe      	b.n	80124fc <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80124fe:	687b      	ldr	r3, [r7, #4]
 8012500:	2b00      	cmp	r3, #0
 8012502:	d002      	beq.n	801250a <xQueueGenericCreateStatic+0x56>
 8012504:	68bb      	ldr	r3, [r7, #8]
 8012506:	2b00      	cmp	r3, #0
 8012508:	d001      	beq.n	801250e <xQueueGenericCreateStatic+0x5a>
 801250a:	2301      	movs	r3, #1
 801250c:	e000      	b.n	8012510 <xQueueGenericCreateStatic+0x5c>
 801250e:	2300      	movs	r3, #0
 8012510:	2b00      	cmp	r3, #0
 8012512:	d10b      	bne.n	801252c <xQueueGenericCreateStatic+0x78>
 8012514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012518:	b672      	cpsid	i
 801251a:	f383 8811 	msr	BASEPRI, r3
 801251e:	f3bf 8f6f 	isb	sy
 8012522:	f3bf 8f4f 	dsb	sy
 8012526:	b662      	cpsie	i
 8012528:	623b      	str	r3, [r7, #32]
 801252a:	e7fe      	b.n	801252a <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801252c:	687b      	ldr	r3, [r7, #4]
 801252e:	2b00      	cmp	r3, #0
 8012530:	d102      	bne.n	8012538 <xQueueGenericCreateStatic+0x84>
 8012532:	68bb      	ldr	r3, [r7, #8]
 8012534:	2b00      	cmp	r3, #0
 8012536:	d101      	bne.n	801253c <xQueueGenericCreateStatic+0x88>
 8012538:	2301      	movs	r3, #1
 801253a:	e000      	b.n	801253e <xQueueGenericCreateStatic+0x8a>
 801253c:	2300      	movs	r3, #0
 801253e:	2b00      	cmp	r3, #0
 8012540:	d10b      	bne.n	801255a <xQueueGenericCreateStatic+0xa6>
 8012542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012546:	b672      	cpsid	i
 8012548:	f383 8811 	msr	BASEPRI, r3
 801254c:	f3bf 8f6f 	isb	sy
 8012550:	f3bf 8f4f 	dsb	sy
 8012554:	b662      	cpsie	i
 8012556:	61fb      	str	r3, [r7, #28]
 8012558:	e7fe      	b.n	8012558 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801255a:	2350      	movs	r3, #80	; 0x50
 801255c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801255e:	697b      	ldr	r3, [r7, #20]
 8012560:	2b50      	cmp	r3, #80	; 0x50
 8012562:	d00b      	beq.n	801257c <xQueueGenericCreateStatic+0xc8>
 8012564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012568:	b672      	cpsid	i
 801256a:	f383 8811 	msr	BASEPRI, r3
 801256e:	f3bf 8f6f 	isb	sy
 8012572:	f3bf 8f4f 	dsb	sy
 8012576:	b662      	cpsie	i
 8012578:	61bb      	str	r3, [r7, #24]
 801257a:	e7fe      	b.n	801257a <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801257c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801257e:	683b      	ldr	r3, [r7, #0]
 8012580:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8012582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012584:	2b00      	cmp	r3, #0
 8012586:	d00d      	beq.n	80125a4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8012588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801258a:	2201      	movs	r2, #1
 801258c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8012590:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8012594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012596:	9300      	str	r3, [sp, #0]
 8012598:	4613      	mov	r3, r2
 801259a:	687a      	ldr	r2, [r7, #4]
 801259c:	68b9      	ldr	r1, [r7, #8]
 801259e:	68f8      	ldr	r0, [r7, #12]
 80125a0:	f000 f846 	bl	8012630 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80125a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80125a6:	4618      	mov	r0, r3
 80125a8:	3730      	adds	r7, #48	; 0x30
 80125aa:	46bd      	mov	sp, r7
 80125ac:	bd80      	pop	{r7, pc}

080125ae <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80125ae:	b580      	push	{r7, lr}
 80125b0:	b08a      	sub	sp, #40	; 0x28
 80125b2:	af02      	add	r7, sp, #8
 80125b4:	60f8      	str	r0, [r7, #12]
 80125b6:	60b9      	str	r1, [r7, #8]
 80125b8:	4613      	mov	r3, r2
 80125ba:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80125bc:	68fb      	ldr	r3, [r7, #12]
 80125be:	2b00      	cmp	r3, #0
 80125c0:	d10b      	bne.n	80125da <xQueueGenericCreate+0x2c>
 80125c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125c6:	b672      	cpsid	i
 80125c8:	f383 8811 	msr	BASEPRI, r3
 80125cc:	f3bf 8f6f 	isb	sy
 80125d0:	f3bf 8f4f 	dsb	sy
 80125d4:	b662      	cpsie	i
 80125d6:	613b      	str	r3, [r7, #16]
 80125d8:	e7fe      	b.n	80125d8 <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80125da:	68bb      	ldr	r3, [r7, #8]
 80125dc:	2b00      	cmp	r3, #0
 80125de:	d102      	bne.n	80125e6 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80125e0:	2300      	movs	r3, #0
 80125e2:	61fb      	str	r3, [r7, #28]
 80125e4:	e004      	b.n	80125f0 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80125e6:	68fb      	ldr	r3, [r7, #12]
 80125e8:	68ba      	ldr	r2, [r7, #8]
 80125ea:	fb02 f303 	mul.w	r3, r2, r3
 80125ee:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80125f0:	69fb      	ldr	r3, [r7, #28]
 80125f2:	3350      	adds	r3, #80	; 0x50
 80125f4:	4618      	mov	r0, r3
 80125f6:	f002 fcc1 	bl	8014f7c <pvPortMalloc>
 80125fa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80125fc:	69bb      	ldr	r3, [r7, #24]
 80125fe:	2b00      	cmp	r3, #0
 8012600:	d011      	beq.n	8012626 <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8012602:	69bb      	ldr	r3, [r7, #24]
 8012604:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012606:	697b      	ldr	r3, [r7, #20]
 8012608:	3350      	adds	r3, #80	; 0x50
 801260a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 801260c:	69bb      	ldr	r3, [r7, #24]
 801260e:	2200      	movs	r2, #0
 8012610:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8012614:	79fa      	ldrb	r2, [r7, #7]
 8012616:	69bb      	ldr	r3, [r7, #24]
 8012618:	9300      	str	r3, [sp, #0]
 801261a:	4613      	mov	r3, r2
 801261c:	697a      	ldr	r2, [r7, #20]
 801261e:	68b9      	ldr	r1, [r7, #8]
 8012620:	68f8      	ldr	r0, [r7, #12]
 8012622:	f000 f805 	bl	8012630 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8012626:	69bb      	ldr	r3, [r7, #24]
	}
 8012628:	4618      	mov	r0, r3
 801262a:	3720      	adds	r7, #32
 801262c:	46bd      	mov	sp, r7
 801262e:	bd80      	pop	{r7, pc}

08012630 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8012630:	b580      	push	{r7, lr}
 8012632:	b084      	sub	sp, #16
 8012634:	af00      	add	r7, sp, #0
 8012636:	60f8      	str	r0, [r7, #12]
 8012638:	60b9      	str	r1, [r7, #8]
 801263a:	607a      	str	r2, [r7, #4]
 801263c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801263e:	68bb      	ldr	r3, [r7, #8]
 8012640:	2b00      	cmp	r3, #0
 8012642:	d103      	bne.n	801264c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8012644:	69bb      	ldr	r3, [r7, #24]
 8012646:	69ba      	ldr	r2, [r7, #24]
 8012648:	601a      	str	r2, [r3, #0]
 801264a:	e002      	b.n	8012652 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 801264c:	69bb      	ldr	r3, [r7, #24]
 801264e:	687a      	ldr	r2, [r7, #4]
 8012650:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8012652:	69bb      	ldr	r3, [r7, #24]
 8012654:	68fa      	ldr	r2, [r7, #12]
 8012656:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8012658:	69bb      	ldr	r3, [r7, #24]
 801265a:	68ba      	ldr	r2, [r7, #8]
 801265c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801265e:	2101      	movs	r1, #1
 8012660:	69b8      	ldr	r0, [r7, #24]
 8012662:	f7ff febd 	bl	80123e0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8012666:	69bb      	ldr	r3, [r7, #24]
 8012668:	78fa      	ldrb	r2, [r7, #3]
 801266a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801266e:	bf00      	nop
 8012670:	3710      	adds	r7, #16
 8012672:	46bd      	mov	sp, r7
 8012674:	bd80      	pop	{r7, pc}

08012676 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8012676:	b580      	push	{r7, lr}
 8012678:	b08a      	sub	sp, #40	; 0x28
 801267a:	af02      	add	r7, sp, #8
 801267c:	60f8      	str	r0, [r7, #12]
 801267e:	60b9      	str	r1, [r7, #8]
 8012680:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8012682:	68fb      	ldr	r3, [r7, #12]
 8012684:	2b00      	cmp	r3, #0
 8012686:	d10b      	bne.n	80126a0 <xQueueCreateCountingSemaphoreStatic+0x2a>
 8012688:	f04f 0350 	mov.w	r3, #80	; 0x50
 801268c:	b672      	cpsid	i
 801268e:	f383 8811 	msr	BASEPRI, r3
 8012692:	f3bf 8f6f 	isb	sy
 8012696:	f3bf 8f4f 	dsb	sy
 801269a:	b662      	cpsie	i
 801269c:	61bb      	str	r3, [r7, #24]
 801269e:	e7fe      	b.n	801269e <xQueueCreateCountingSemaphoreStatic+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 80126a0:	68ba      	ldr	r2, [r7, #8]
 80126a2:	68fb      	ldr	r3, [r7, #12]
 80126a4:	429a      	cmp	r2, r3
 80126a6:	d90b      	bls.n	80126c0 <xQueueCreateCountingSemaphoreStatic+0x4a>
 80126a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126ac:	b672      	cpsid	i
 80126ae:	f383 8811 	msr	BASEPRI, r3
 80126b2:	f3bf 8f6f 	isb	sy
 80126b6:	f3bf 8f4f 	dsb	sy
 80126ba:	b662      	cpsie	i
 80126bc:	617b      	str	r3, [r7, #20]
 80126be:	e7fe      	b.n	80126be <xQueueCreateCountingSemaphoreStatic+0x48>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80126c0:	2302      	movs	r3, #2
 80126c2:	9300      	str	r3, [sp, #0]
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	2200      	movs	r2, #0
 80126c8:	2100      	movs	r1, #0
 80126ca:	68f8      	ldr	r0, [r7, #12]
 80126cc:	f7ff fef2 	bl	80124b4 <xQueueGenericCreateStatic>
 80126d0:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80126d2:	69fb      	ldr	r3, [r7, #28]
 80126d4:	2b00      	cmp	r3, #0
 80126d6:	d002      	beq.n	80126de <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80126d8:	69fb      	ldr	r3, [r7, #28]
 80126da:	68ba      	ldr	r2, [r7, #8]
 80126dc:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80126de:	69fb      	ldr	r3, [r7, #28]
	}
 80126e0:	4618      	mov	r0, r3
 80126e2:	3720      	adds	r7, #32
 80126e4:	46bd      	mov	sp, r7
 80126e6:	bd80      	pop	{r7, pc}

080126e8 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80126e8:	b580      	push	{r7, lr}
 80126ea:	b086      	sub	sp, #24
 80126ec:	af00      	add	r7, sp, #0
 80126ee:	6078      	str	r0, [r7, #4]
 80126f0:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80126f2:	687b      	ldr	r3, [r7, #4]
 80126f4:	2b00      	cmp	r3, #0
 80126f6:	d10b      	bne.n	8012710 <xQueueCreateCountingSemaphore+0x28>
 80126f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126fc:	b672      	cpsid	i
 80126fe:	f383 8811 	msr	BASEPRI, r3
 8012702:	f3bf 8f6f 	isb	sy
 8012706:	f3bf 8f4f 	dsb	sy
 801270a:	b662      	cpsie	i
 801270c:	613b      	str	r3, [r7, #16]
 801270e:	e7fe      	b.n	801270e <xQueueCreateCountingSemaphore+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8012710:	683a      	ldr	r2, [r7, #0]
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	429a      	cmp	r2, r3
 8012716:	d90b      	bls.n	8012730 <xQueueCreateCountingSemaphore+0x48>
 8012718:	f04f 0350 	mov.w	r3, #80	; 0x50
 801271c:	b672      	cpsid	i
 801271e:	f383 8811 	msr	BASEPRI, r3
 8012722:	f3bf 8f6f 	isb	sy
 8012726:	f3bf 8f4f 	dsb	sy
 801272a:	b662      	cpsie	i
 801272c:	60fb      	str	r3, [r7, #12]
 801272e:	e7fe      	b.n	801272e <xQueueCreateCountingSemaphore+0x46>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8012730:	2202      	movs	r2, #2
 8012732:	2100      	movs	r1, #0
 8012734:	6878      	ldr	r0, [r7, #4]
 8012736:	f7ff ff3a 	bl	80125ae <xQueueGenericCreate>
 801273a:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 801273c:	697b      	ldr	r3, [r7, #20]
 801273e:	2b00      	cmp	r3, #0
 8012740:	d002      	beq.n	8012748 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8012742:	697b      	ldr	r3, [r7, #20]
 8012744:	683a      	ldr	r2, [r7, #0]
 8012746:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8012748:	697b      	ldr	r3, [r7, #20]
	}
 801274a:	4618      	mov	r0, r3
 801274c:	3718      	adds	r7, #24
 801274e:	46bd      	mov	sp, r7
 8012750:	bd80      	pop	{r7, pc}
	...

08012754 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8012754:	b580      	push	{r7, lr}
 8012756:	b08e      	sub	sp, #56	; 0x38
 8012758:	af00      	add	r7, sp, #0
 801275a:	60f8      	str	r0, [r7, #12]
 801275c:	60b9      	str	r1, [r7, #8]
 801275e:	607a      	str	r2, [r7, #4]
 8012760:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8012762:	2300      	movs	r3, #0
 8012764:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8012766:	68fb      	ldr	r3, [r7, #12]
 8012768:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801276a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801276c:	2b00      	cmp	r3, #0
 801276e:	d10b      	bne.n	8012788 <xQueueGenericSend+0x34>
 8012770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012774:	b672      	cpsid	i
 8012776:	f383 8811 	msr	BASEPRI, r3
 801277a:	f3bf 8f6f 	isb	sy
 801277e:	f3bf 8f4f 	dsb	sy
 8012782:	b662      	cpsie	i
 8012784:	62bb      	str	r3, [r7, #40]	; 0x28
 8012786:	e7fe      	b.n	8012786 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012788:	68bb      	ldr	r3, [r7, #8]
 801278a:	2b00      	cmp	r3, #0
 801278c:	d103      	bne.n	8012796 <xQueueGenericSend+0x42>
 801278e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012792:	2b00      	cmp	r3, #0
 8012794:	d101      	bne.n	801279a <xQueueGenericSend+0x46>
 8012796:	2301      	movs	r3, #1
 8012798:	e000      	b.n	801279c <xQueueGenericSend+0x48>
 801279a:	2300      	movs	r3, #0
 801279c:	2b00      	cmp	r3, #0
 801279e:	d10b      	bne.n	80127b8 <xQueueGenericSend+0x64>
 80127a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127a4:	b672      	cpsid	i
 80127a6:	f383 8811 	msr	BASEPRI, r3
 80127aa:	f3bf 8f6f 	isb	sy
 80127ae:	f3bf 8f4f 	dsb	sy
 80127b2:	b662      	cpsie	i
 80127b4:	627b      	str	r3, [r7, #36]	; 0x24
 80127b6:	e7fe      	b.n	80127b6 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80127b8:	683b      	ldr	r3, [r7, #0]
 80127ba:	2b02      	cmp	r3, #2
 80127bc:	d103      	bne.n	80127c6 <xQueueGenericSend+0x72>
 80127be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80127c2:	2b01      	cmp	r3, #1
 80127c4:	d101      	bne.n	80127ca <xQueueGenericSend+0x76>
 80127c6:	2301      	movs	r3, #1
 80127c8:	e000      	b.n	80127cc <xQueueGenericSend+0x78>
 80127ca:	2300      	movs	r3, #0
 80127cc:	2b00      	cmp	r3, #0
 80127ce:	d10b      	bne.n	80127e8 <xQueueGenericSend+0x94>
 80127d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127d4:	b672      	cpsid	i
 80127d6:	f383 8811 	msr	BASEPRI, r3
 80127da:	f3bf 8f6f 	isb	sy
 80127de:	f3bf 8f4f 	dsb	sy
 80127e2:	b662      	cpsie	i
 80127e4:	623b      	str	r3, [r7, #32]
 80127e6:	e7fe      	b.n	80127e6 <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80127e8:	f001 fc66 	bl	80140b8 <xTaskGetSchedulerState>
 80127ec:	4603      	mov	r3, r0
 80127ee:	2b00      	cmp	r3, #0
 80127f0:	d102      	bne.n	80127f8 <xQueueGenericSend+0xa4>
 80127f2:	687b      	ldr	r3, [r7, #4]
 80127f4:	2b00      	cmp	r3, #0
 80127f6:	d101      	bne.n	80127fc <xQueueGenericSend+0xa8>
 80127f8:	2301      	movs	r3, #1
 80127fa:	e000      	b.n	80127fe <xQueueGenericSend+0xaa>
 80127fc:	2300      	movs	r3, #0
 80127fe:	2b00      	cmp	r3, #0
 8012800:	d10b      	bne.n	801281a <xQueueGenericSend+0xc6>
 8012802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012806:	b672      	cpsid	i
 8012808:	f383 8811 	msr	BASEPRI, r3
 801280c:	f3bf 8f6f 	isb	sy
 8012810:	f3bf 8f4f 	dsb	sy
 8012814:	b662      	cpsie	i
 8012816:	61fb      	str	r3, [r7, #28]
 8012818:	e7fe      	b.n	8012818 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801281a:	f002 fa8d 	bl	8014d38 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801281e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012820:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012826:	429a      	cmp	r2, r3
 8012828:	d302      	bcc.n	8012830 <xQueueGenericSend+0xdc>
 801282a:	683b      	ldr	r3, [r7, #0]
 801282c:	2b02      	cmp	r3, #2
 801282e:	d129      	bne.n	8012884 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012830:	683a      	ldr	r2, [r7, #0]
 8012832:	68b9      	ldr	r1, [r7, #8]
 8012834:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012836:	f000 fc6e 	bl	8013116 <prvCopyDataToQueue>
 801283a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801283c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801283e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012840:	2b00      	cmp	r3, #0
 8012842:	d010      	beq.n	8012866 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012846:	3324      	adds	r3, #36	; 0x24
 8012848:	4618      	mov	r0, r3
 801284a:	f001 fa77 	bl	8013d3c <xTaskRemoveFromEventList>
 801284e:	4603      	mov	r3, r0
 8012850:	2b00      	cmp	r3, #0
 8012852:	d013      	beq.n	801287c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8012854:	4b3f      	ldr	r3, [pc, #252]	; (8012954 <xQueueGenericSend+0x200>)
 8012856:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801285a:	601a      	str	r2, [r3, #0]
 801285c:	f3bf 8f4f 	dsb	sy
 8012860:	f3bf 8f6f 	isb	sy
 8012864:	e00a      	b.n	801287c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8012866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012868:	2b00      	cmp	r3, #0
 801286a:	d007      	beq.n	801287c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 801286c:	4b39      	ldr	r3, [pc, #228]	; (8012954 <xQueueGenericSend+0x200>)
 801286e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012872:	601a      	str	r2, [r3, #0]
 8012874:	f3bf 8f4f 	dsb	sy
 8012878:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 801287c:	f002 fa8e 	bl	8014d9c <vPortExitCritical>
				return pdPASS;
 8012880:	2301      	movs	r3, #1
 8012882:	e063      	b.n	801294c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	2b00      	cmp	r3, #0
 8012888:	d103      	bne.n	8012892 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801288a:	f002 fa87 	bl	8014d9c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801288e:	2300      	movs	r3, #0
 8012890:	e05c      	b.n	801294c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012892:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012894:	2b00      	cmp	r3, #0
 8012896:	d106      	bne.n	80128a6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012898:	f107 0314 	add.w	r3, r7, #20
 801289c:	4618      	mov	r0, r3
 801289e:	f001 fab1 	bl	8013e04 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80128a2:	2301      	movs	r3, #1
 80128a4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80128a6:	f002 fa79 	bl	8014d9c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80128aa:	f001 f80f 	bl	80138cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80128ae:	f002 fa43 	bl	8014d38 <vPortEnterCritical>
 80128b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80128b8:	b25b      	sxtb	r3, r3
 80128ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80128be:	d103      	bne.n	80128c8 <xQueueGenericSend+0x174>
 80128c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128c2:	2200      	movs	r2, #0
 80128c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80128c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80128ce:	b25b      	sxtb	r3, r3
 80128d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80128d4:	d103      	bne.n	80128de <xQueueGenericSend+0x18a>
 80128d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128d8:	2200      	movs	r2, #0
 80128da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80128de:	f002 fa5d 	bl	8014d9c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80128e2:	1d3a      	adds	r2, r7, #4
 80128e4:	f107 0314 	add.w	r3, r7, #20
 80128e8:	4611      	mov	r1, r2
 80128ea:	4618      	mov	r0, r3
 80128ec:	f001 faa0 	bl	8013e30 <xTaskCheckForTimeOut>
 80128f0:	4603      	mov	r3, r0
 80128f2:	2b00      	cmp	r3, #0
 80128f4:	d124      	bne.n	8012940 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80128f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80128f8:	f000 fd05 	bl	8013306 <prvIsQueueFull>
 80128fc:	4603      	mov	r3, r0
 80128fe:	2b00      	cmp	r3, #0
 8012900:	d018      	beq.n	8012934 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8012902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012904:	3310      	adds	r3, #16
 8012906:	687a      	ldr	r2, [r7, #4]
 8012908:	4611      	mov	r1, r2
 801290a:	4618      	mov	r0, r3
 801290c:	f001 f9c4 	bl	8013c98 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8012910:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012912:	f000 fc90 	bl	8013236 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8012916:	f000 ffe7 	bl	80138e8 <xTaskResumeAll>
 801291a:	4603      	mov	r3, r0
 801291c:	2b00      	cmp	r3, #0
 801291e:	f47f af7c 	bne.w	801281a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8012922:	4b0c      	ldr	r3, [pc, #48]	; (8012954 <xQueueGenericSend+0x200>)
 8012924:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012928:	601a      	str	r2, [r3, #0]
 801292a:	f3bf 8f4f 	dsb	sy
 801292e:	f3bf 8f6f 	isb	sy
 8012932:	e772      	b.n	801281a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8012934:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012936:	f000 fc7e 	bl	8013236 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801293a:	f000 ffd5 	bl	80138e8 <xTaskResumeAll>
 801293e:	e76c      	b.n	801281a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8012940:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012942:	f000 fc78 	bl	8013236 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012946:	f000 ffcf 	bl	80138e8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801294a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 801294c:	4618      	mov	r0, r3
 801294e:	3738      	adds	r7, #56	; 0x38
 8012950:	46bd      	mov	sp, r7
 8012952:	bd80      	pop	{r7, pc}
 8012954:	e000ed04 	.word	0xe000ed04

08012958 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8012958:	b580      	push	{r7, lr}
 801295a:	b08e      	sub	sp, #56	; 0x38
 801295c:	af00      	add	r7, sp, #0
 801295e:	60f8      	str	r0, [r7, #12]
 8012960:	60b9      	str	r1, [r7, #8]
 8012962:	607a      	str	r2, [r7, #4]
 8012964:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8012966:	68fb      	ldr	r3, [r7, #12]
 8012968:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801296a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801296c:	2b00      	cmp	r3, #0
 801296e:	d10b      	bne.n	8012988 <xQueueGenericSendFromISR+0x30>
 8012970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012974:	b672      	cpsid	i
 8012976:	f383 8811 	msr	BASEPRI, r3
 801297a:	f3bf 8f6f 	isb	sy
 801297e:	f3bf 8f4f 	dsb	sy
 8012982:	b662      	cpsie	i
 8012984:	627b      	str	r3, [r7, #36]	; 0x24
 8012986:	e7fe      	b.n	8012986 <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012988:	68bb      	ldr	r3, [r7, #8]
 801298a:	2b00      	cmp	r3, #0
 801298c:	d103      	bne.n	8012996 <xQueueGenericSendFromISR+0x3e>
 801298e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012992:	2b00      	cmp	r3, #0
 8012994:	d101      	bne.n	801299a <xQueueGenericSendFromISR+0x42>
 8012996:	2301      	movs	r3, #1
 8012998:	e000      	b.n	801299c <xQueueGenericSendFromISR+0x44>
 801299a:	2300      	movs	r3, #0
 801299c:	2b00      	cmp	r3, #0
 801299e:	d10b      	bne.n	80129b8 <xQueueGenericSendFromISR+0x60>
 80129a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129a4:	b672      	cpsid	i
 80129a6:	f383 8811 	msr	BASEPRI, r3
 80129aa:	f3bf 8f6f 	isb	sy
 80129ae:	f3bf 8f4f 	dsb	sy
 80129b2:	b662      	cpsie	i
 80129b4:	623b      	str	r3, [r7, #32]
 80129b6:	e7fe      	b.n	80129b6 <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80129b8:	683b      	ldr	r3, [r7, #0]
 80129ba:	2b02      	cmp	r3, #2
 80129bc:	d103      	bne.n	80129c6 <xQueueGenericSendFromISR+0x6e>
 80129be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80129c2:	2b01      	cmp	r3, #1
 80129c4:	d101      	bne.n	80129ca <xQueueGenericSendFromISR+0x72>
 80129c6:	2301      	movs	r3, #1
 80129c8:	e000      	b.n	80129cc <xQueueGenericSendFromISR+0x74>
 80129ca:	2300      	movs	r3, #0
 80129cc:	2b00      	cmp	r3, #0
 80129ce:	d10b      	bne.n	80129e8 <xQueueGenericSendFromISR+0x90>
 80129d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129d4:	b672      	cpsid	i
 80129d6:	f383 8811 	msr	BASEPRI, r3
 80129da:	f3bf 8f6f 	isb	sy
 80129de:	f3bf 8f4f 	dsb	sy
 80129e2:	b662      	cpsie	i
 80129e4:	61fb      	str	r3, [r7, #28]
 80129e6:	e7fe      	b.n	80129e6 <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80129e8:	f002 fa86 	bl	8014ef8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80129ec:	f3ef 8211 	mrs	r2, BASEPRI
 80129f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129f4:	b672      	cpsid	i
 80129f6:	f383 8811 	msr	BASEPRI, r3
 80129fa:	f3bf 8f6f 	isb	sy
 80129fe:	f3bf 8f4f 	dsb	sy
 8012a02:	b662      	cpsie	i
 8012a04:	61ba      	str	r2, [r7, #24]
 8012a06:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8012a08:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8012a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012a14:	429a      	cmp	r2, r3
 8012a16:	d302      	bcc.n	8012a1e <xQueueGenericSendFromISR+0xc6>
 8012a18:	683b      	ldr	r3, [r7, #0]
 8012a1a:	2b02      	cmp	r3, #2
 8012a1c:	d12c      	bne.n	8012a78 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8012a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a20:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012a24:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012a28:	683a      	ldr	r2, [r7, #0]
 8012a2a:	68b9      	ldr	r1, [r7, #8]
 8012a2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012a2e:	f000 fb72 	bl	8013116 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8012a32:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8012a36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012a3a:	d112      	bne.n	8012a62 <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a40:	2b00      	cmp	r3, #0
 8012a42:	d016      	beq.n	8012a72 <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a46:	3324      	adds	r3, #36	; 0x24
 8012a48:	4618      	mov	r0, r3
 8012a4a:	f001 f977 	bl	8013d3c <xTaskRemoveFromEventList>
 8012a4e:	4603      	mov	r3, r0
 8012a50:	2b00      	cmp	r3, #0
 8012a52:	d00e      	beq.n	8012a72 <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8012a54:	687b      	ldr	r3, [r7, #4]
 8012a56:	2b00      	cmp	r3, #0
 8012a58:	d00b      	beq.n	8012a72 <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8012a5a:	687b      	ldr	r3, [r7, #4]
 8012a5c:	2201      	movs	r2, #1
 8012a5e:	601a      	str	r2, [r3, #0]
 8012a60:	e007      	b.n	8012a72 <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8012a62:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8012a66:	3301      	adds	r3, #1
 8012a68:	b2db      	uxtb	r3, r3
 8012a6a:	b25a      	sxtb	r2, r3
 8012a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8012a72:	2301      	movs	r3, #1
 8012a74:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8012a76:	e001      	b.n	8012a7c <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8012a78:	2300      	movs	r3, #0
 8012a7a:	637b      	str	r3, [r7, #52]	; 0x34
 8012a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a7e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8012a80:	693b      	ldr	r3, [r7, #16]
 8012a82:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012a86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8012a88:	4618      	mov	r0, r3
 8012a8a:	3738      	adds	r7, #56	; 0x38
 8012a8c:	46bd      	mov	sp, r7
 8012a8e:	bd80      	pop	{r7, pc}

08012a90 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8012a90:	b580      	push	{r7, lr}
 8012a92:	b08e      	sub	sp, #56	; 0x38
 8012a94:	af00      	add	r7, sp, #0
 8012a96:	6078      	str	r0, [r7, #4]
 8012a98:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8012a9a:	687b      	ldr	r3, [r7, #4]
 8012a9c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8012a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012aa0:	2b00      	cmp	r3, #0
 8012aa2:	d10b      	bne.n	8012abc <xQueueGiveFromISR+0x2c>
	__asm volatile
 8012aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012aa8:	b672      	cpsid	i
 8012aaa:	f383 8811 	msr	BASEPRI, r3
 8012aae:	f3bf 8f6f 	isb	sy
 8012ab2:	f3bf 8f4f 	dsb	sy
 8012ab6:	b662      	cpsie	i
 8012ab8:	623b      	str	r3, [r7, #32]
 8012aba:	e7fe      	b.n	8012aba <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8012abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012ac0:	2b00      	cmp	r3, #0
 8012ac2:	d00b      	beq.n	8012adc <xQueueGiveFromISR+0x4c>
 8012ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ac8:	b672      	cpsid	i
 8012aca:	f383 8811 	msr	BASEPRI, r3
 8012ace:	f3bf 8f6f 	isb	sy
 8012ad2:	f3bf 8f4f 	dsb	sy
 8012ad6:	b662      	cpsie	i
 8012ad8:	61fb      	str	r3, [r7, #28]
 8012ada:	e7fe      	b.n	8012ada <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8012adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ade:	681b      	ldr	r3, [r3, #0]
 8012ae0:	2b00      	cmp	r3, #0
 8012ae2:	d103      	bne.n	8012aec <xQueueGiveFromISR+0x5c>
 8012ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ae6:	689b      	ldr	r3, [r3, #8]
 8012ae8:	2b00      	cmp	r3, #0
 8012aea:	d101      	bne.n	8012af0 <xQueueGiveFromISR+0x60>
 8012aec:	2301      	movs	r3, #1
 8012aee:	e000      	b.n	8012af2 <xQueueGiveFromISR+0x62>
 8012af0:	2300      	movs	r3, #0
 8012af2:	2b00      	cmp	r3, #0
 8012af4:	d10b      	bne.n	8012b0e <xQueueGiveFromISR+0x7e>
 8012af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012afa:	b672      	cpsid	i
 8012afc:	f383 8811 	msr	BASEPRI, r3
 8012b00:	f3bf 8f6f 	isb	sy
 8012b04:	f3bf 8f4f 	dsb	sy
 8012b08:	b662      	cpsie	i
 8012b0a:	61bb      	str	r3, [r7, #24]
 8012b0c:	e7fe      	b.n	8012b0c <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012b0e:	f002 f9f3 	bl	8014ef8 <vPortValidateInterruptPriority>
	__asm volatile
 8012b12:	f3ef 8211 	mrs	r2, BASEPRI
 8012b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b1a:	b672      	cpsid	i
 8012b1c:	f383 8811 	msr	BASEPRI, r3
 8012b20:	f3bf 8f6f 	isb	sy
 8012b24:	f3bf 8f4f 	dsb	sy
 8012b28:	b662      	cpsie	i
 8012b2a:	617a      	str	r2, [r7, #20]
 8012b2c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8012b2e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012b30:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012b36:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8012b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012b3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012b3e:	429a      	cmp	r2, r3
 8012b40:	d22b      	bcs.n	8012b9a <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8012b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012b48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8012b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b4e:	1c5a      	adds	r2, r3, #1
 8012b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b52:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8012b54:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012b5c:	d112      	bne.n	8012b84 <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b62:	2b00      	cmp	r3, #0
 8012b64:	d016      	beq.n	8012b94 <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b68:	3324      	adds	r3, #36	; 0x24
 8012b6a:	4618      	mov	r0, r3
 8012b6c:	f001 f8e6 	bl	8013d3c <xTaskRemoveFromEventList>
 8012b70:	4603      	mov	r3, r0
 8012b72:	2b00      	cmp	r3, #0
 8012b74:	d00e      	beq.n	8012b94 <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8012b76:	683b      	ldr	r3, [r7, #0]
 8012b78:	2b00      	cmp	r3, #0
 8012b7a:	d00b      	beq.n	8012b94 <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8012b7c:	683b      	ldr	r3, [r7, #0]
 8012b7e:	2201      	movs	r2, #1
 8012b80:	601a      	str	r2, [r3, #0]
 8012b82:	e007      	b.n	8012b94 <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8012b84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012b88:	3301      	adds	r3, #1
 8012b8a:	b2db      	uxtb	r3, r3
 8012b8c:	b25a      	sxtb	r2, r3
 8012b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8012b94:	2301      	movs	r3, #1
 8012b96:	637b      	str	r3, [r7, #52]	; 0x34
 8012b98:	e001      	b.n	8012b9e <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8012b9a:	2300      	movs	r3, #0
 8012b9c:	637b      	str	r3, [r7, #52]	; 0x34
 8012b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ba0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8012ba2:	68fb      	ldr	r3, [r7, #12]
 8012ba4:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012ba8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8012baa:	4618      	mov	r0, r3
 8012bac:	3738      	adds	r7, #56	; 0x38
 8012bae:	46bd      	mov	sp, r7
 8012bb0:	bd80      	pop	{r7, pc}
	...

08012bb4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8012bb4:	b580      	push	{r7, lr}
 8012bb6:	b08c      	sub	sp, #48	; 0x30
 8012bb8:	af00      	add	r7, sp, #0
 8012bba:	60f8      	str	r0, [r7, #12]
 8012bbc:	60b9      	str	r1, [r7, #8]
 8012bbe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8012bc0:	2300      	movs	r3, #0
 8012bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8012bc4:	68fb      	ldr	r3, [r7, #12]
 8012bc6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8012bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bca:	2b00      	cmp	r3, #0
 8012bcc:	d10b      	bne.n	8012be6 <xQueueReceive+0x32>
	__asm volatile
 8012bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012bd2:	b672      	cpsid	i
 8012bd4:	f383 8811 	msr	BASEPRI, r3
 8012bd8:	f3bf 8f6f 	isb	sy
 8012bdc:	f3bf 8f4f 	dsb	sy
 8012be0:	b662      	cpsie	i
 8012be2:	623b      	str	r3, [r7, #32]
 8012be4:	e7fe      	b.n	8012be4 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012be6:	68bb      	ldr	r3, [r7, #8]
 8012be8:	2b00      	cmp	r3, #0
 8012bea:	d103      	bne.n	8012bf4 <xQueueReceive+0x40>
 8012bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012bf0:	2b00      	cmp	r3, #0
 8012bf2:	d101      	bne.n	8012bf8 <xQueueReceive+0x44>
 8012bf4:	2301      	movs	r3, #1
 8012bf6:	e000      	b.n	8012bfa <xQueueReceive+0x46>
 8012bf8:	2300      	movs	r3, #0
 8012bfa:	2b00      	cmp	r3, #0
 8012bfc:	d10b      	bne.n	8012c16 <xQueueReceive+0x62>
 8012bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c02:	b672      	cpsid	i
 8012c04:	f383 8811 	msr	BASEPRI, r3
 8012c08:	f3bf 8f6f 	isb	sy
 8012c0c:	f3bf 8f4f 	dsb	sy
 8012c10:	b662      	cpsie	i
 8012c12:	61fb      	str	r3, [r7, #28]
 8012c14:	e7fe      	b.n	8012c14 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012c16:	f001 fa4f 	bl	80140b8 <xTaskGetSchedulerState>
 8012c1a:	4603      	mov	r3, r0
 8012c1c:	2b00      	cmp	r3, #0
 8012c1e:	d102      	bne.n	8012c26 <xQueueReceive+0x72>
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	2b00      	cmp	r3, #0
 8012c24:	d101      	bne.n	8012c2a <xQueueReceive+0x76>
 8012c26:	2301      	movs	r3, #1
 8012c28:	e000      	b.n	8012c2c <xQueueReceive+0x78>
 8012c2a:	2300      	movs	r3, #0
 8012c2c:	2b00      	cmp	r3, #0
 8012c2e:	d10b      	bne.n	8012c48 <xQueueReceive+0x94>
 8012c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c34:	b672      	cpsid	i
 8012c36:	f383 8811 	msr	BASEPRI, r3
 8012c3a:	f3bf 8f6f 	isb	sy
 8012c3e:	f3bf 8f4f 	dsb	sy
 8012c42:	b662      	cpsie	i
 8012c44:	61bb      	str	r3, [r7, #24]
 8012c46:	e7fe      	b.n	8012c46 <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8012c48:	f002 f876 	bl	8014d38 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012c50:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c54:	2b00      	cmp	r3, #0
 8012c56:	d01f      	beq.n	8012c98 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8012c58:	68b9      	ldr	r1, [r7, #8]
 8012c5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012c5c:	f000 fac5 	bl	80131ea <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8012c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c62:	1e5a      	subs	r2, r3, #1
 8012c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c66:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c6a:	691b      	ldr	r3, [r3, #16]
 8012c6c:	2b00      	cmp	r3, #0
 8012c6e:	d00f      	beq.n	8012c90 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c72:	3310      	adds	r3, #16
 8012c74:	4618      	mov	r0, r3
 8012c76:	f001 f861 	bl	8013d3c <xTaskRemoveFromEventList>
 8012c7a:	4603      	mov	r3, r0
 8012c7c:	2b00      	cmp	r3, #0
 8012c7e:	d007      	beq.n	8012c90 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8012c80:	4b3c      	ldr	r3, [pc, #240]	; (8012d74 <xQueueReceive+0x1c0>)
 8012c82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012c86:	601a      	str	r2, [r3, #0]
 8012c88:	f3bf 8f4f 	dsb	sy
 8012c8c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8012c90:	f002 f884 	bl	8014d9c <vPortExitCritical>
				return pdPASS;
 8012c94:	2301      	movs	r3, #1
 8012c96:	e069      	b.n	8012d6c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012c98:	687b      	ldr	r3, [r7, #4]
 8012c9a:	2b00      	cmp	r3, #0
 8012c9c:	d103      	bne.n	8012ca6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8012c9e:	f002 f87d 	bl	8014d9c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8012ca2:	2300      	movs	r3, #0
 8012ca4:	e062      	b.n	8012d6c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ca8:	2b00      	cmp	r3, #0
 8012caa:	d106      	bne.n	8012cba <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012cac:	f107 0310 	add.w	r3, r7, #16
 8012cb0:	4618      	mov	r0, r3
 8012cb2:	f001 f8a7 	bl	8013e04 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012cb6:	2301      	movs	r3, #1
 8012cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012cba:	f002 f86f 	bl	8014d9c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012cbe:	f000 fe05 	bl	80138cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012cc2:	f002 f839 	bl	8014d38 <vPortEnterCritical>
 8012cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012cc8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012ccc:	b25b      	sxtb	r3, r3
 8012cce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012cd2:	d103      	bne.n	8012cdc <xQueueReceive+0x128>
 8012cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012cd6:	2200      	movs	r2, #0
 8012cd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012cde:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012ce2:	b25b      	sxtb	r3, r3
 8012ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012ce8:	d103      	bne.n	8012cf2 <xQueueReceive+0x13e>
 8012cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012cec:	2200      	movs	r2, #0
 8012cee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012cf2:	f002 f853 	bl	8014d9c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012cf6:	1d3a      	adds	r2, r7, #4
 8012cf8:	f107 0310 	add.w	r3, r7, #16
 8012cfc:	4611      	mov	r1, r2
 8012cfe:	4618      	mov	r0, r3
 8012d00:	f001 f896 	bl	8013e30 <xTaskCheckForTimeOut>
 8012d04:	4603      	mov	r3, r0
 8012d06:	2b00      	cmp	r3, #0
 8012d08:	d123      	bne.n	8012d52 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012d0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012d0c:	f000 fae5 	bl	80132da <prvIsQueueEmpty>
 8012d10:	4603      	mov	r3, r0
 8012d12:	2b00      	cmp	r3, #0
 8012d14:	d017      	beq.n	8012d46 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8012d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d18:	3324      	adds	r3, #36	; 0x24
 8012d1a:	687a      	ldr	r2, [r7, #4]
 8012d1c:	4611      	mov	r1, r2
 8012d1e:	4618      	mov	r0, r3
 8012d20:	f000 ffba 	bl	8013c98 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8012d24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012d26:	f000 fa86 	bl	8013236 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8012d2a:	f000 fddd 	bl	80138e8 <xTaskResumeAll>
 8012d2e:	4603      	mov	r3, r0
 8012d30:	2b00      	cmp	r3, #0
 8012d32:	d189      	bne.n	8012c48 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8012d34:	4b0f      	ldr	r3, [pc, #60]	; (8012d74 <xQueueReceive+0x1c0>)
 8012d36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012d3a:	601a      	str	r2, [r3, #0]
 8012d3c:	f3bf 8f4f 	dsb	sy
 8012d40:	f3bf 8f6f 	isb	sy
 8012d44:	e780      	b.n	8012c48 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8012d46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012d48:	f000 fa75 	bl	8013236 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012d4c:	f000 fdcc 	bl	80138e8 <xTaskResumeAll>
 8012d50:	e77a      	b.n	8012c48 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8012d52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012d54:	f000 fa6f 	bl	8013236 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012d58:	f000 fdc6 	bl	80138e8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012d5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012d5e:	f000 fabc 	bl	80132da <prvIsQueueEmpty>
 8012d62:	4603      	mov	r3, r0
 8012d64:	2b00      	cmp	r3, #0
 8012d66:	f43f af6f 	beq.w	8012c48 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8012d6a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8012d6c:	4618      	mov	r0, r3
 8012d6e:	3730      	adds	r7, #48	; 0x30
 8012d70:	46bd      	mov	sp, r7
 8012d72:	bd80      	pop	{r7, pc}
 8012d74:	e000ed04 	.word	0xe000ed04

08012d78 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8012d78:	b580      	push	{r7, lr}
 8012d7a:	b08e      	sub	sp, #56	; 0x38
 8012d7c:	af00      	add	r7, sp, #0
 8012d7e:	6078      	str	r0, [r7, #4]
 8012d80:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8012d82:	2300      	movs	r3, #0
 8012d84:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8012d86:	687b      	ldr	r3, [r7, #4]
 8012d88:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8012d8a:	2300      	movs	r3, #0
 8012d8c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8012d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d90:	2b00      	cmp	r3, #0
 8012d92:	d10b      	bne.n	8012dac <xQueueSemaphoreTake+0x34>
 8012d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d98:	b672      	cpsid	i
 8012d9a:	f383 8811 	msr	BASEPRI, r3
 8012d9e:	f3bf 8f6f 	isb	sy
 8012da2:	f3bf 8f4f 	dsb	sy
 8012da6:	b662      	cpsie	i
 8012da8:	623b      	str	r3, [r7, #32]
 8012daa:	e7fe      	b.n	8012daa <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8012dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012db0:	2b00      	cmp	r3, #0
 8012db2:	d00b      	beq.n	8012dcc <xQueueSemaphoreTake+0x54>
 8012db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012db8:	b672      	cpsid	i
 8012dba:	f383 8811 	msr	BASEPRI, r3
 8012dbe:	f3bf 8f6f 	isb	sy
 8012dc2:	f3bf 8f4f 	dsb	sy
 8012dc6:	b662      	cpsie	i
 8012dc8:	61fb      	str	r3, [r7, #28]
 8012dca:	e7fe      	b.n	8012dca <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012dcc:	f001 f974 	bl	80140b8 <xTaskGetSchedulerState>
 8012dd0:	4603      	mov	r3, r0
 8012dd2:	2b00      	cmp	r3, #0
 8012dd4:	d102      	bne.n	8012ddc <xQueueSemaphoreTake+0x64>
 8012dd6:	683b      	ldr	r3, [r7, #0]
 8012dd8:	2b00      	cmp	r3, #0
 8012dda:	d101      	bne.n	8012de0 <xQueueSemaphoreTake+0x68>
 8012ddc:	2301      	movs	r3, #1
 8012dde:	e000      	b.n	8012de2 <xQueueSemaphoreTake+0x6a>
 8012de0:	2300      	movs	r3, #0
 8012de2:	2b00      	cmp	r3, #0
 8012de4:	d10b      	bne.n	8012dfe <xQueueSemaphoreTake+0x86>
 8012de6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012dea:	b672      	cpsid	i
 8012dec:	f383 8811 	msr	BASEPRI, r3
 8012df0:	f3bf 8f6f 	isb	sy
 8012df4:	f3bf 8f4f 	dsb	sy
 8012df8:	b662      	cpsie	i
 8012dfa:	61bb      	str	r3, [r7, #24]
 8012dfc:	e7fe      	b.n	8012dfc <xQueueSemaphoreTake+0x84>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8012dfe:	f001 ff9b 	bl	8014d38 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8012e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012e06:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8012e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e0a:	2b00      	cmp	r3, #0
 8012e0c:	d024      	beq.n	8012e58 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8012e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e10:	1e5a      	subs	r2, r3, #1
 8012e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e14:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e18:	681b      	ldr	r3, [r3, #0]
 8012e1a:	2b00      	cmp	r3, #0
 8012e1c:	d104      	bne.n	8012e28 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8012e1e:	f001 fac5 	bl	80143ac <pvTaskIncrementMutexHeldCount>
 8012e22:	4602      	mov	r2, r0
 8012e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e26:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e2a:	691b      	ldr	r3, [r3, #16]
 8012e2c:	2b00      	cmp	r3, #0
 8012e2e:	d00f      	beq.n	8012e50 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e32:	3310      	adds	r3, #16
 8012e34:	4618      	mov	r0, r3
 8012e36:	f000 ff81 	bl	8013d3c <xTaskRemoveFromEventList>
 8012e3a:	4603      	mov	r3, r0
 8012e3c:	2b00      	cmp	r3, #0
 8012e3e:	d007      	beq.n	8012e50 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8012e40:	4b54      	ldr	r3, [pc, #336]	; (8012f94 <xQueueSemaphoreTake+0x21c>)
 8012e42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012e46:	601a      	str	r2, [r3, #0]
 8012e48:	f3bf 8f4f 	dsb	sy
 8012e4c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8012e50:	f001 ffa4 	bl	8014d9c <vPortExitCritical>
				return pdPASS;
 8012e54:	2301      	movs	r3, #1
 8012e56:	e098      	b.n	8012f8a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012e58:	683b      	ldr	r3, [r7, #0]
 8012e5a:	2b00      	cmp	r3, #0
 8012e5c:	d112      	bne.n	8012e84 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8012e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e60:	2b00      	cmp	r3, #0
 8012e62:	d00b      	beq.n	8012e7c <xQueueSemaphoreTake+0x104>
 8012e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e68:	b672      	cpsid	i
 8012e6a:	f383 8811 	msr	BASEPRI, r3
 8012e6e:	f3bf 8f6f 	isb	sy
 8012e72:	f3bf 8f4f 	dsb	sy
 8012e76:	b662      	cpsie	i
 8012e78:	617b      	str	r3, [r7, #20]
 8012e7a:	e7fe      	b.n	8012e7a <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8012e7c:	f001 ff8e 	bl	8014d9c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8012e80:	2300      	movs	r3, #0
 8012e82:	e082      	b.n	8012f8a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012e84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012e86:	2b00      	cmp	r3, #0
 8012e88:	d106      	bne.n	8012e98 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012e8a:	f107 030c 	add.w	r3, r7, #12
 8012e8e:	4618      	mov	r0, r3
 8012e90:	f000 ffb8 	bl	8013e04 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012e94:	2301      	movs	r3, #1
 8012e96:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012e98:	f001 ff80 	bl	8014d9c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012e9c:	f000 fd16 	bl	80138cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012ea0:	f001 ff4a 	bl	8014d38 <vPortEnterCritical>
 8012ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ea6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012eaa:	b25b      	sxtb	r3, r3
 8012eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012eb0:	d103      	bne.n	8012eba <xQueueSemaphoreTake+0x142>
 8012eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012eb4:	2200      	movs	r2, #0
 8012eb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ebc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012ec0:	b25b      	sxtb	r3, r3
 8012ec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012ec6:	d103      	bne.n	8012ed0 <xQueueSemaphoreTake+0x158>
 8012ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012eca:	2200      	movs	r2, #0
 8012ecc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012ed0:	f001 ff64 	bl	8014d9c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012ed4:	463a      	mov	r2, r7
 8012ed6:	f107 030c 	add.w	r3, r7, #12
 8012eda:	4611      	mov	r1, r2
 8012edc:	4618      	mov	r0, r3
 8012ede:	f000 ffa7 	bl	8013e30 <xTaskCheckForTimeOut>
 8012ee2:	4603      	mov	r3, r0
 8012ee4:	2b00      	cmp	r3, #0
 8012ee6:	d132      	bne.n	8012f4e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012ee8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012eea:	f000 f9f6 	bl	80132da <prvIsQueueEmpty>
 8012eee:	4603      	mov	r3, r0
 8012ef0:	2b00      	cmp	r3, #0
 8012ef2:	d026      	beq.n	8012f42 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ef6:	681b      	ldr	r3, [r3, #0]
 8012ef8:	2b00      	cmp	r3, #0
 8012efa:	d109      	bne.n	8012f10 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8012efc:	f001 ff1c 	bl	8014d38 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8012f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f02:	689b      	ldr	r3, [r3, #8]
 8012f04:	4618      	mov	r0, r3
 8012f06:	f001 f8f5 	bl	80140f4 <xTaskPriorityInherit>
 8012f0a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8012f0c:	f001 ff46 	bl	8014d9c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8012f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f12:	3324      	adds	r3, #36	; 0x24
 8012f14:	683a      	ldr	r2, [r7, #0]
 8012f16:	4611      	mov	r1, r2
 8012f18:	4618      	mov	r0, r3
 8012f1a:	f000 febd 	bl	8013c98 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8012f1e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012f20:	f000 f989 	bl	8013236 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8012f24:	f000 fce0 	bl	80138e8 <xTaskResumeAll>
 8012f28:	4603      	mov	r3, r0
 8012f2a:	2b00      	cmp	r3, #0
 8012f2c:	f47f af67 	bne.w	8012dfe <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8012f30:	4b18      	ldr	r3, [pc, #96]	; (8012f94 <xQueueSemaphoreTake+0x21c>)
 8012f32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012f36:	601a      	str	r2, [r3, #0]
 8012f38:	f3bf 8f4f 	dsb	sy
 8012f3c:	f3bf 8f6f 	isb	sy
 8012f40:	e75d      	b.n	8012dfe <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8012f42:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012f44:	f000 f977 	bl	8013236 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012f48:	f000 fcce 	bl	80138e8 <xTaskResumeAll>
 8012f4c:	e757      	b.n	8012dfe <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8012f4e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012f50:	f000 f971 	bl	8013236 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012f54:	f000 fcc8 	bl	80138e8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012f58:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012f5a:	f000 f9be 	bl	80132da <prvIsQueueEmpty>
 8012f5e:	4603      	mov	r3, r0
 8012f60:	2b00      	cmp	r3, #0
 8012f62:	f43f af4c 	beq.w	8012dfe <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8012f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f68:	2b00      	cmp	r3, #0
 8012f6a:	d00d      	beq.n	8012f88 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8012f6c:	f001 fee4 	bl	8014d38 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8012f70:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012f72:	f000 f8b8 	bl	80130e6 <prvGetDisinheritPriorityAfterTimeout>
 8012f76:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8012f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f7a:	689b      	ldr	r3, [r3, #8]
 8012f7c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012f7e:	4618      	mov	r0, r3
 8012f80:	f001 f990 	bl	80142a4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8012f84:	f001 ff0a 	bl	8014d9c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8012f88:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8012f8a:	4618      	mov	r0, r3
 8012f8c:	3738      	adds	r7, #56	; 0x38
 8012f8e:	46bd      	mov	sp, r7
 8012f90:	bd80      	pop	{r7, pc}
 8012f92:	bf00      	nop
 8012f94:	e000ed04 	.word	0xe000ed04

08012f98 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8012f98:	b580      	push	{r7, lr}
 8012f9a:	b08e      	sub	sp, #56	; 0x38
 8012f9c:	af00      	add	r7, sp, #0
 8012f9e:	60f8      	str	r0, [r7, #12]
 8012fa0:	60b9      	str	r1, [r7, #8]
 8012fa2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8012fa4:	68fb      	ldr	r3, [r7, #12]
 8012fa6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8012fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012faa:	2b00      	cmp	r3, #0
 8012fac:	d10b      	bne.n	8012fc6 <xQueueReceiveFromISR+0x2e>
 8012fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012fb2:	b672      	cpsid	i
 8012fb4:	f383 8811 	msr	BASEPRI, r3
 8012fb8:	f3bf 8f6f 	isb	sy
 8012fbc:	f3bf 8f4f 	dsb	sy
 8012fc0:	b662      	cpsie	i
 8012fc2:	623b      	str	r3, [r7, #32]
 8012fc4:	e7fe      	b.n	8012fc4 <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012fc6:	68bb      	ldr	r3, [r7, #8]
 8012fc8:	2b00      	cmp	r3, #0
 8012fca:	d103      	bne.n	8012fd4 <xQueueReceiveFromISR+0x3c>
 8012fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012fd0:	2b00      	cmp	r3, #0
 8012fd2:	d101      	bne.n	8012fd8 <xQueueReceiveFromISR+0x40>
 8012fd4:	2301      	movs	r3, #1
 8012fd6:	e000      	b.n	8012fda <xQueueReceiveFromISR+0x42>
 8012fd8:	2300      	movs	r3, #0
 8012fda:	2b00      	cmp	r3, #0
 8012fdc:	d10b      	bne.n	8012ff6 <xQueueReceiveFromISR+0x5e>
 8012fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012fe2:	b672      	cpsid	i
 8012fe4:	f383 8811 	msr	BASEPRI, r3
 8012fe8:	f3bf 8f6f 	isb	sy
 8012fec:	f3bf 8f4f 	dsb	sy
 8012ff0:	b662      	cpsie	i
 8012ff2:	61fb      	str	r3, [r7, #28]
 8012ff4:	e7fe      	b.n	8012ff4 <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012ff6:	f001 ff7f 	bl	8014ef8 <vPortValidateInterruptPriority>
	__asm volatile
 8012ffa:	f3ef 8211 	mrs	r2, BASEPRI
 8012ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013002:	b672      	cpsid	i
 8013004:	f383 8811 	msr	BASEPRI, r3
 8013008:	f3bf 8f6f 	isb	sy
 801300c:	f3bf 8f4f 	dsb	sy
 8013010:	b662      	cpsie	i
 8013012:	61ba      	str	r2, [r7, #24]
 8013014:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8013016:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013018:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801301a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801301c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801301e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013022:	2b00      	cmp	r3, #0
 8013024:	d02f      	beq.n	8013086 <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8013026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013028:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801302c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013030:	68b9      	ldr	r1, [r7, #8]
 8013032:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013034:	f000 f8d9 	bl	80131ea <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801303a:	1e5a      	subs	r2, r3, #1
 801303c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801303e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8013040:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8013044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013048:	d112      	bne.n	8013070 <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801304a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801304c:	691b      	ldr	r3, [r3, #16]
 801304e:	2b00      	cmp	r3, #0
 8013050:	d016      	beq.n	8013080 <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013054:	3310      	adds	r3, #16
 8013056:	4618      	mov	r0, r3
 8013058:	f000 fe70 	bl	8013d3c <xTaskRemoveFromEventList>
 801305c:	4603      	mov	r3, r0
 801305e:	2b00      	cmp	r3, #0
 8013060:	d00e      	beq.n	8013080 <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8013062:	687b      	ldr	r3, [r7, #4]
 8013064:	2b00      	cmp	r3, #0
 8013066:	d00b      	beq.n	8013080 <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8013068:	687b      	ldr	r3, [r7, #4]
 801306a:	2201      	movs	r2, #1
 801306c:	601a      	str	r2, [r3, #0]
 801306e:	e007      	b.n	8013080 <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8013070:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013074:	3301      	adds	r3, #1
 8013076:	b2db      	uxtb	r3, r3
 8013078:	b25a      	sxtb	r2, r3
 801307a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801307c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8013080:	2301      	movs	r3, #1
 8013082:	637b      	str	r3, [r7, #52]	; 0x34
 8013084:	e001      	b.n	801308a <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 8013086:	2300      	movs	r3, #0
 8013088:	637b      	str	r3, [r7, #52]	; 0x34
 801308a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801308c:	613b      	str	r3, [r7, #16]
	__asm volatile
 801308e:	693b      	ldr	r3, [r7, #16]
 8013090:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013094:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8013096:	4618      	mov	r0, r3
 8013098:	3738      	adds	r7, #56	; 0x38
 801309a:	46bd      	mov	sp, r7
 801309c:	bd80      	pop	{r7, pc}

0801309e <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 801309e:	b580      	push	{r7, lr}
 80130a0:	b084      	sub	sp, #16
 80130a2:	af00      	add	r7, sp, #0
 80130a4:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80130a6:	687b      	ldr	r3, [r7, #4]
 80130a8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80130aa:	68fb      	ldr	r3, [r7, #12]
 80130ac:	2b00      	cmp	r3, #0
 80130ae:	d10b      	bne.n	80130c8 <vQueueDelete+0x2a>
	__asm volatile
 80130b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130b4:	b672      	cpsid	i
 80130b6:	f383 8811 	msr	BASEPRI, r3
 80130ba:	f3bf 8f6f 	isb	sy
 80130be:	f3bf 8f4f 	dsb	sy
 80130c2:	b662      	cpsie	i
 80130c4:	60bb      	str	r3, [r7, #8]
 80130c6:	e7fe      	b.n	80130c6 <vQueueDelete+0x28>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80130c8:	68f8      	ldr	r0, [r7, #12]
 80130ca:	f000 f95d 	bl	8013388 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80130ce:	68fb      	ldr	r3, [r7, #12]
 80130d0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80130d4:	2b00      	cmp	r3, #0
 80130d6:	d102      	bne.n	80130de <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 80130d8:	68f8      	ldr	r0, [r7, #12]
 80130da:	f002 f817 	bl	801510c <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80130de:	bf00      	nop
 80130e0:	3710      	adds	r7, #16
 80130e2:	46bd      	mov	sp, r7
 80130e4:	bd80      	pop	{r7, pc}

080130e6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80130e6:	b480      	push	{r7}
 80130e8:	b085      	sub	sp, #20
 80130ea:	af00      	add	r7, sp, #0
 80130ec:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80130ee:	687b      	ldr	r3, [r7, #4]
 80130f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80130f2:	2b00      	cmp	r3, #0
 80130f4:	d006      	beq.n	8013104 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80130f6:	687b      	ldr	r3, [r7, #4]
 80130f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80130fa:	681b      	ldr	r3, [r3, #0]
 80130fc:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8013100:	60fb      	str	r3, [r7, #12]
 8013102:	e001      	b.n	8013108 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8013104:	2300      	movs	r3, #0
 8013106:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8013108:	68fb      	ldr	r3, [r7, #12]
	}
 801310a:	4618      	mov	r0, r3
 801310c:	3714      	adds	r7, #20
 801310e:	46bd      	mov	sp, r7
 8013110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013114:	4770      	bx	lr

08013116 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8013116:	b580      	push	{r7, lr}
 8013118:	b086      	sub	sp, #24
 801311a:	af00      	add	r7, sp, #0
 801311c:	60f8      	str	r0, [r7, #12]
 801311e:	60b9      	str	r1, [r7, #8]
 8013120:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8013122:	2300      	movs	r3, #0
 8013124:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013126:	68fb      	ldr	r3, [r7, #12]
 8013128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801312a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801312c:	68fb      	ldr	r3, [r7, #12]
 801312e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013130:	2b00      	cmp	r3, #0
 8013132:	d10d      	bne.n	8013150 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013134:	68fb      	ldr	r3, [r7, #12]
 8013136:	681b      	ldr	r3, [r3, #0]
 8013138:	2b00      	cmp	r3, #0
 801313a:	d14d      	bne.n	80131d8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801313c:	68fb      	ldr	r3, [r7, #12]
 801313e:	689b      	ldr	r3, [r3, #8]
 8013140:	4618      	mov	r0, r3
 8013142:	f001 f83f 	bl	80141c4 <xTaskPriorityDisinherit>
 8013146:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8013148:	68fb      	ldr	r3, [r7, #12]
 801314a:	2200      	movs	r2, #0
 801314c:	609a      	str	r2, [r3, #8]
 801314e:	e043      	b.n	80131d8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8013150:	687b      	ldr	r3, [r7, #4]
 8013152:	2b00      	cmp	r3, #0
 8013154:	d119      	bne.n	801318a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013156:	68fb      	ldr	r3, [r7, #12]
 8013158:	6858      	ldr	r0, [r3, #4]
 801315a:	68fb      	ldr	r3, [r7, #12]
 801315c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801315e:	461a      	mov	r2, r3
 8013160:	68b9      	ldr	r1, [r7, #8]
 8013162:	f002 fe71 	bl	8015e48 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013166:	68fb      	ldr	r3, [r7, #12]
 8013168:	685a      	ldr	r2, [r3, #4]
 801316a:	68fb      	ldr	r3, [r7, #12]
 801316c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801316e:	441a      	add	r2, r3
 8013170:	68fb      	ldr	r3, [r7, #12]
 8013172:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013174:	68fb      	ldr	r3, [r7, #12]
 8013176:	685a      	ldr	r2, [r3, #4]
 8013178:	68fb      	ldr	r3, [r7, #12]
 801317a:	689b      	ldr	r3, [r3, #8]
 801317c:	429a      	cmp	r2, r3
 801317e:	d32b      	bcc.n	80131d8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8013180:	68fb      	ldr	r3, [r7, #12]
 8013182:	681a      	ldr	r2, [r3, #0]
 8013184:	68fb      	ldr	r3, [r7, #12]
 8013186:	605a      	str	r2, [r3, #4]
 8013188:	e026      	b.n	80131d8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801318a:	68fb      	ldr	r3, [r7, #12]
 801318c:	68d8      	ldr	r0, [r3, #12]
 801318e:	68fb      	ldr	r3, [r7, #12]
 8013190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013192:	461a      	mov	r2, r3
 8013194:	68b9      	ldr	r1, [r7, #8]
 8013196:	f002 fe57 	bl	8015e48 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801319a:	68fb      	ldr	r3, [r7, #12]
 801319c:	68da      	ldr	r2, [r3, #12]
 801319e:	68fb      	ldr	r3, [r7, #12]
 80131a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80131a2:	425b      	negs	r3, r3
 80131a4:	441a      	add	r2, r3
 80131a6:	68fb      	ldr	r3, [r7, #12]
 80131a8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80131aa:	68fb      	ldr	r3, [r7, #12]
 80131ac:	68da      	ldr	r2, [r3, #12]
 80131ae:	68fb      	ldr	r3, [r7, #12]
 80131b0:	681b      	ldr	r3, [r3, #0]
 80131b2:	429a      	cmp	r2, r3
 80131b4:	d207      	bcs.n	80131c6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80131b6:	68fb      	ldr	r3, [r7, #12]
 80131b8:	689a      	ldr	r2, [r3, #8]
 80131ba:	68fb      	ldr	r3, [r7, #12]
 80131bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80131be:	425b      	negs	r3, r3
 80131c0:	441a      	add	r2, r3
 80131c2:	68fb      	ldr	r3, [r7, #12]
 80131c4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80131c6:	687b      	ldr	r3, [r7, #4]
 80131c8:	2b02      	cmp	r3, #2
 80131ca:	d105      	bne.n	80131d8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80131cc:	693b      	ldr	r3, [r7, #16]
 80131ce:	2b00      	cmp	r3, #0
 80131d0:	d002      	beq.n	80131d8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80131d2:	693b      	ldr	r3, [r7, #16]
 80131d4:	3b01      	subs	r3, #1
 80131d6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80131d8:	693b      	ldr	r3, [r7, #16]
 80131da:	1c5a      	adds	r2, r3, #1
 80131dc:	68fb      	ldr	r3, [r7, #12]
 80131de:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80131e0:	697b      	ldr	r3, [r7, #20]
}
 80131e2:	4618      	mov	r0, r3
 80131e4:	3718      	adds	r7, #24
 80131e6:	46bd      	mov	sp, r7
 80131e8:	bd80      	pop	{r7, pc}

080131ea <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80131ea:	b580      	push	{r7, lr}
 80131ec:	b082      	sub	sp, #8
 80131ee:	af00      	add	r7, sp, #0
 80131f0:	6078      	str	r0, [r7, #4]
 80131f2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80131f4:	687b      	ldr	r3, [r7, #4]
 80131f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80131f8:	2b00      	cmp	r3, #0
 80131fa:	d018      	beq.n	801322e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80131fc:	687b      	ldr	r3, [r7, #4]
 80131fe:	68da      	ldr	r2, [r3, #12]
 8013200:	687b      	ldr	r3, [r7, #4]
 8013202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013204:	441a      	add	r2, r3
 8013206:	687b      	ldr	r3, [r7, #4]
 8013208:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801320a:	687b      	ldr	r3, [r7, #4]
 801320c:	68da      	ldr	r2, [r3, #12]
 801320e:	687b      	ldr	r3, [r7, #4]
 8013210:	689b      	ldr	r3, [r3, #8]
 8013212:	429a      	cmp	r2, r3
 8013214:	d303      	bcc.n	801321e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8013216:	687b      	ldr	r3, [r7, #4]
 8013218:	681a      	ldr	r2, [r3, #0]
 801321a:	687b      	ldr	r3, [r7, #4]
 801321c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801321e:	687b      	ldr	r3, [r7, #4]
 8013220:	68d9      	ldr	r1, [r3, #12]
 8013222:	687b      	ldr	r3, [r7, #4]
 8013224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013226:	461a      	mov	r2, r3
 8013228:	6838      	ldr	r0, [r7, #0]
 801322a:	f002 fe0d 	bl	8015e48 <memcpy>
	}
}
 801322e:	bf00      	nop
 8013230:	3708      	adds	r7, #8
 8013232:	46bd      	mov	sp, r7
 8013234:	bd80      	pop	{r7, pc}

08013236 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8013236:	b580      	push	{r7, lr}
 8013238:	b084      	sub	sp, #16
 801323a:	af00      	add	r7, sp, #0
 801323c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801323e:	f001 fd7b 	bl	8014d38 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8013242:	687b      	ldr	r3, [r7, #4]
 8013244:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013248:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801324a:	e011      	b.n	8013270 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801324c:	687b      	ldr	r3, [r7, #4]
 801324e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013250:	2b00      	cmp	r3, #0
 8013252:	d012      	beq.n	801327a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013254:	687b      	ldr	r3, [r7, #4]
 8013256:	3324      	adds	r3, #36	; 0x24
 8013258:	4618      	mov	r0, r3
 801325a:	f000 fd6f 	bl	8013d3c <xTaskRemoveFromEventList>
 801325e:	4603      	mov	r3, r0
 8013260:	2b00      	cmp	r3, #0
 8013262:	d001      	beq.n	8013268 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8013264:	f000 fe48 	bl	8013ef8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8013268:	7bfb      	ldrb	r3, [r7, #15]
 801326a:	3b01      	subs	r3, #1
 801326c:	b2db      	uxtb	r3, r3
 801326e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013270:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013274:	2b00      	cmp	r3, #0
 8013276:	dce9      	bgt.n	801324c <prvUnlockQueue+0x16>
 8013278:	e000      	b.n	801327c <prvUnlockQueue+0x46>
					break;
 801327a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801327c:	687b      	ldr	r3, [r7, #4]
 801327e:	22ff      	movs	r2, #255	; 0xff
 8013280:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8013284:	f001 fd8a 	bl	8014d9c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8013288:	f001 fd56 	bl	8014d38 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801328c:	687b      	ldr	r3, [r7, #4]
 801328e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013292:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013294:	e011      	b.n	80132ba <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013296:	687b      	ldr	r3, [r7, #4]
 8013298:	691b      	ldr	r3, [r3, #16]
 801329a:	2b00      	cmp	r3, #0
 801329c:	d012      	beq.n	80132c4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801329e:	687b      	ldr	r3, [r7, #4]
 80132a0:	3310      	adds	r3, #16
 80132a2:	4618      	mov	r0, r3
 80132a4:	f000 fd4a 	bl	8013d3c <xTaskRemoveFromEventList>
 80132a8:	4603      	mov	r3, r0
 80132aa:	2b00      	cmp	r3, #0
 80132ac:	d001      	beq.n	80132b2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80132ae:	f000 fe23 	bl	8013ef8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80132b2:	7bbb      	ldrb	r3, [r7, #14]
 80132b4:	3b01      	subs	r3, #1
 80132b6:	b2db      	uxtb	r3, r3
 80132b8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80132ba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80132be:	2b00      	cmp	r3, #0
 80132c0:	dce9      	bgt.n	8013296 <prvUnlockQueue+0x60>
 80132c2:	e000      	b.n	80132c6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80132c4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80132c6:	687b      	ldr	r3, [r7, #4]
 80132c8:	22ff      	movs	r2, #255	; 0xff
 80132ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80132ce:	f001 fd65 	bl	8014d9c <vPortExitCritical>
}
 80132d2:	bf00      	nop
 80132d4:	3710      	adds	r7, #16
 80132d6:	46bd      	mov	sp, r7
 80132d8:	bd80      	pop	{r7, pc}

080132da <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80132da:	b580      	push	{r7, lr}
 80132dc:	b084      	sub	sp, #16
 80132de:	af00      	add	r7, sp, #0
 80132e0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80132e2:	f001 fd29 	bl	8014d38 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80132e6:	687b      	ldr	r3, [r7, #4]
 80132e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80132ea:	2b00      	cmp	r3, #0
 80132ec:	d102      	bne.n	80132f4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80132ee:	2301      	movs	r3, #1
 80132f0:	60fb      	str	r3, [r7, #12]
 80132f2:	e001      	b.n	80132f8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80132f4:	2300      	movs	r3, #0
 80132f6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80132f8:	f001 fd50 	bl	8014d9c <vPortExitCritical>

	return xReturn;
 80132fc:	68fb      	ldr	r3, [r7, #12]
}
 80132fe:	4618      	mov	r0, r3
 8013300:	3710      	adds	r7, #16
 8013302:	46bd      	mov	sp, r7
 8013304:	bd80      	pop	{r7, pc}

08013306 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8013306:	b580      	push	{r7, lr}
 8013308:	b084      	sub	sp, #16
 801330a:	af00      	add	r7, sp, #0
 801330c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801330e:	f001 fd13 	bl	8014d38 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8013312:	687b      	ldr	r3, [r7, #4]
 8013314:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013316:	687b      	ldr	r3, [r7, #4]
 8013318:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801331a:	429a      	cmp	r2, r3
 801331c:	d102      	bne.n	8013324 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801331e:	2301      	movs	r3, #1
 8013320:	60fb      	str	r3, [r7, #12]
 8013322:	e001      	b.n	8013328 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8013324:	2300      	movs	r3, #0
 8013326:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013328:	f001 fd38 	bl	8014d9c <vPortExitCritical>

	return xReturn;
 801332c:	68fb      	ldr	r3, [r7, #12]
}
 801332e:	4618      	mov	r0, r3
 8013330:	3710      	adds	r7, #16
 8013332:	46bd      	mov	sp, r7
 8013334:	bd80      	pop	{r7, pc}
	...

08013338 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8013338:	b480      	push	{r7}
 801333a:	b085      	sub	sp, #20
 801333c:	af00      	add	r7, sp, #0
 801333e:	6078      	str	r0, [r7, #4]
 8013340:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013342:	2300      	movs	r3, #0
 8013344:	60fb      	str	r3, [r7, #12]
 8013346:	e014      	b.n	8013372 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8013348:	4a0e      	ldr	r2, [pc, #56]	; (8013384 <vQueueAddToRegistry+0x4c>)
 801334a:	68fb      	ldr	r3, [r7, #12]
 801334c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8013350:	2b00      	cmp	r3, #0
 8013352:	d10b      	bne.n	801336c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8013354:	490b      	ldr	r1, [pc, #44]	; (8013384 <vQueueAddToRegistry+0x4c>)
 8013356:	68fb      	ldr	r3, [r7, #12]
 8013358:	683a      	ldr	r2, [r7, #0]
 801335a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801335e:	4a09      	ldr	r2, [pc, #36]	; (8013384 <vQueueAddToRegistry+0x4c>)
 8013360:	68fb      	ldr	r3, [r7, #12]
 8013362:	00db      	lsls	r3, r3, #3
 8013364:	4413      	add	r3, r2
 8013366:	687a      	ldr	r2, [r7, #4]
 8013368:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801336a:	e005      	b.n	8013378 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801336c:	68fb      	ldr	r3, [r7, #12]
 801336e:	3301      	adds	r3, #1
 8013370:	60fb      	str	r3, [r7, #12]
 8013372:	68fb      	ldr	r3, [r7, #12]
 8013374:	2b07      	cmp	r3, #7
 8013376:	d9e7      	bls.n	8013348 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8013378:	bf00      	nop
 801337a:	3714      	adds	r7, #20
 801337c:	46bd      	mov	sp, r7
 801337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013382:	4770      	bx	lr
 8013384:	20009408 	.word	0x20009408

08013388 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8013388:	b480      	push	{r7}
 801338a:	b085      	sub	sp, #20
 801338c:	af00      	add	r7, sp, #0
 801338e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013390:	2300      	movs	r3, #0
 8013392:	60fb      	str	r3, [r7, #12]
 8013394:	e016      	b.n	80133c4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8013396:	4a10      	ldr	r2, [pc, #64]	; (80133d8 <vQueueUnregisterQueue+0x50>)
 8013398:	68fb      	ldr	r3, [r7, #12]
 801339a:	00db      	lsls	r3, r3, #3
 801339c:	4413      	add	r3, r2
 801339e:	685b      	ldr	r3, [r3, #4]
 80133a0:	687a      	ldr	r2, [r7, #4]
 80133a2:	429a      	cmp	r2, r3
 80133a4:	d10b      	bne.n	80133be <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80133a6:	4a0c      	ldr	r2, [pc, #48]	; (80133d8 <vQueueUnregisterQueue+0x50>)
 80133a8:	68fb      	ldr	r3, [r7, #12]
 80133aa:	2100      	movs	r1, #0
 80133ac:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80133b0:	4a09      	ldr	r2, [pc, #36]	; (80133d8 <vQueueUnregisterQueue+0x50>)
 80133b2:	68fb      	ldr	r3, [r7, #12]
 80133b4:	00db      	lsls	r3, r3, #3
 80133b6:	4413      	add	r3, r2
 80133b8:	2200      	movs	r2, #0
 80133ba:	605a      	str	r2, [r3, #4]
				break;
 80133bc:	e005      	b.n	80133ca <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80133be:	68fb      	ldr	r3, [r7, #12]
 80133c0:	3301      	adds	r3, #1
 80133c2:	60fb      	str	r3, [r7, #12]
 80133c4:	68fb      	ldr	r3, [r7, #12]
 80133c6:	2b07      	cmp	r3, #7
 80133c8:	d9e5      	bls.n	8013396 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80133ca:	bf00      	nop
 80133cc:	3714      	adds	r7, #20
 80133ce:	46bd      	mov	sp, r7
 80133d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133d4:	4770      	bx	lr
 80133d6:	bf00      	nop
 80133d8:	20009408 	.word	0x20009408

080133dc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80133dc:	b580      	push	{r7, lr}
 80133de:	b086      	sub	sp, #24
 80133e0:	af00      	add	r7, sp, #0
 80133e2:	60f8      	str	r0, [r7, #12]
 80133e4:	60b9      	str	r1, [r7, #8]
 80133e6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80133e8:	68fb      	ldr	r3, [r7, #12]
 80133ea:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80133ec:	f001 fca4 	bl	8014d38 <vPortEnterCritical>
 80133f0:	697b      	ldr	r3, [r7, #20]
 80133f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80133f6:	b25b      	sxtb	r3, r3
 80133f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80133fc:	d103      	bne.n	8013406 <vQueueWaitForMessageRestricted+0x2a>
 80133fe:	697b      	ldr	r3, [r7, #20]
 8013400:	2200      	movs	r2, #0
 8013402:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013406:	697b      	ldr	r3, [r7, #20]
 8013408:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801340c:	b25b      	sxtb	r3, r3
 801340e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013412:	d103      	bne.n	801341c <vQueueWaitForMessageRestricted+0x40>
 8013414:	697b      	ldr	r3, [r7, #20]
 8013416:	2200      	movs	r2, #0
 8013418:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801341c:	f001 fcbe 	bl	8014d9c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8013420:	697b      	ldr	r3, [r7, #20]
 8013422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013424:	2b00      	cmp	r3, #0
 8013426:	d106      	bne.n	8013436 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8013428:	697b      	ldr	r3, [r7, #20]
 801342a:	3324      	adds	r3, #36	; 0x24
 801342c:	687a      	ldr	r2, [r7, #4]
 801342e:	68b9      	ldr	r1, [r7, #8]
 8013430:	4618      	mov	r0, r3
 8013432:	f000 fc57 	bl	8013ce4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8013436:	6978      	ldr	r0, [r7, #20]
 8013438:	f7ff fefd 	bl	8013236 <prvUnlockQueue>
	}
 801343c:	bf00      	nop
 801343e:	3718      	adds	r7, #24
 8013440:	46bd      	mov	sp, r7
 8013442:	bd80      	pop	{r7, pc}

08013444 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8013444:	b580      	push	{r7, lr}
 8013446:	b08e      	sub	sp, #56	; 0x38
 8013448:	af04      	add	r7, sp, #16
 801344a:	60f8      	str	r0, [r7, #12]
 801344c:	60b9      	str	r1, [r7, #8]
 801344e:	607a      	str	r2, [r7, #4]
 8013450:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8013452:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013454:	2b00      	cmp	r3, #0
 8013456:	d10b      	bne.n	8013470 <xTaskCreateStatic+0x2c>
 8013458:	f04f 0350 	mov.w	r3, #80	; 0x50
 801345c:	b672      	cpsid	i
 801345e:	f383 8811 	msr	BASEPRI, r3
 8013462:	f3bf 8f6f 	isb	sy
 8013466:	f3bf 8f4f 	dsb	sy
 801346a:	b662      	cpsie	i
 801346c:	623b      	str	r3, [r7, #32]
 801346e:	e7fe      	b.n	801346e <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 8013470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013472:	2b00      	cmp	r3, #0
 8013474:	d10b      	bne.n	801348e <xTaskCreateStatic+0x4a>
 8013476:	f04f 0350 	mov.w	r3, #80	; 0x50
 801347a:	b672      	cpsid	i
 801347c:	f383 8811 	msr	BASEPRI, r3
 8013480:	f3bf 8f6f 	isb	sy
 8013484:	f3bf 8f4f 	dsb	sy
 8013488:	b662      	cpsie	i
 801348a:	61fb      	str	r3, [r7, #28]
 801348c:	e7fe      	b.n	801348c <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801348e:	235c      	movs	r3, #92	; 0x5c
 8013490:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8013492:	693b      	ldr	r3, [r7, #16]
 8013494:	2b5c      	cmp	r3, #92	; 0x5c
 8013496:	d00b      	beq.n	80134b0 <xTaskCreateStatic+0x6c>
 8013498:	f04f 0350 	mov.w	r3, #80	; 0x50
 801349c:	b672      	cpsid	i
 801349e:	f383 8811 	msr	BASEPRI, r3
 80134a2:	f3bf 8f6f 	isb	sy
 80134a6:	f3bf 8f4f 	dsb	sy
 80134aa:	b662      	cpsie	i
 80134ac:	61bb      	str	r3, [r7, #24]
 80134ae:	e7fe      	b.n	80134ae <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80134b0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80134b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80134b4:	2b00      	cmp	r3, #0
 80134b6:	d01e      	beq.n	80134f6 <xTaskCreateStatic+0xb2>
 80134b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80134ba:	2b00      	cmp	r3, #0
 80134bc:	d01b      	beq.n	80134f6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80134be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80134c0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80134c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80134c6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80134c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134ca:	2202      	movs	r2, #2
 80134cc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80134d0:	2300      	movs	r3, #0
 80134d2:	9303      	str	r3, [sp, #12]
 80134d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134d6:	9302      	str	r3, [sp, #8]
 80134d8:	f107 0314 	add.w	r3, r7, #20
 80134dc:	9301      	str	r3, [sp, #4]
 80134de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134e0:	9300      	str	r3, [sp, #0]
 80134e2:	683b      	ldr	r3, [r7, #0]
 80134e4:	687a      	ldr	r2, [r7, #4]
 80134e6:	68b9      	ldr	r1, [r7, #8]
 80134e8:	68f8      	ldr	r0, [r7, #12]
 80134ea:	f000 f850 	bl	801358e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80134ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80134f0:	f000 f8de 	bl	80136b0 <prvAddNewTaskToReadyList>
 80134f4:	e001      	b.n	80134fa <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80134f6:	2300      	movs	r3, #0
 80134f8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80134fa:	697b      	ldr	r3, [r7, #20]
	}
 80134fc:	4618      	mov	r0, r3
 80134fe:	3728      	adds	r7, #40	; 0x28
 8013500:	46bd      	mov	sp, r7
 8013502:	bd80      	pop	{r7, pc}

08013504 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8013504:	b580      	push	{r7, lr}
 8013506:	b08c      	sub	sp, #48	; 0x30
 8013508:	af04      	add	r7, sp, #16
 801350a:	60f8      	str	r0, [r7, #12]
 801350c:	60b9      	str	r1, [r7, #8]
 801350e:	603b      	str	r3, [r7, #0]
 8013510:	4613      	mov	r3, r2
 8013512:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8013514:	88fb      	ldrh	r3, [r7, #6]
 8013516:	009b      	lsls	r3, r3, #2
 8013518:	4618      	mov	r0, r3
 801351a:	f001 fd2f 	bl	8014f7c <pvPortMalloc>
 801351e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8013520:	697b      	ldr	r3, [r7, #20]
 8013522:	2b00      	cmp	r3, #0
 8013524:	d00e      	beq.n	8013544 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8013526:	205c      	movs	r0, #92	; 0x5c
 8013528:	f001 fd28 	bl	8014f7c <pvPortMalloc>
 801352c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801352e:	69fb      	ldr	r3, [r7, #28]
 8013530:	2b00      	cmp	r3, #0
 8013532:	d003      	beq.n	801353c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8013534:	69fb      	ldr	r3, [r7, #28]
 8013536:	697a      	ldr	r2, [r7, #20]
 8013538:	631a      	str	r2, [r3, #48]	; 0x30
 801353a:	e005      	b.n	8013548 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801353c:	6978      	ldr	r0, [r7, #20]
 801353e:	f001 fde5 	bl	801510c <vPortFree>
 8013542:	e001      	b.n	8013548 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8013544:	2300      	movs	r3, #0
 8013546:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8013548:	69fb      	ldr	r3, [r7, #28]
 801354a:	2b00      	cmp	r3, #0
 801354c:	d017      	beq.n	801357e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801354e:	69fb      	ldr	r3, [r7, #28]
 8013550:	2200      	movs	r2, #0
 8013552:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8013556:	88fa      	ldrh	r2, [r7, #6]
 8013558:	2300      	movs	r3, #0
 801355a:	9303      	str	r3, [sp, #12]
 801355c:	69fb      	ldr	r3, [r7, #28]
 801355e:	9302      	str	r3, [sp, #8]
 8013560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013562:	9301      	str	r3, [sp, #4]
 8013564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013566:	9300      	str	r3, [sp, #0]
 8013568:	683b      	ldr	r3, [r7, #0]
 801356a:	68b9      	ldr	r1, [r7, #8]
 801356c:	68f8      	ldr	r0, [r7, #12]
 801356e:	f000 f80e 	bl	801358e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013572:	69f8      	ldr	r0, [r7, #28]
 8013574:	f000 f89c 	bl	80136b0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8013578:	2301      	movs	r3, #1
 801357a:	61bb      	str	r3, [r7, #24]
 801357c:	e002      	b.n	8013584 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801357e:	f04f 33ff 	mov.w	r3, #4294967295
 8013582:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8013584:	69bb      	ldr	r3, [r7, #24]
	}
 8013586:	4618      	mov	r0, r3
 8013588:	3720      	adds	r7, #32
 801358a:	46bd      	mov	sp, r7
 801358c:	bd80      	pop	{r7, pc}

0801358e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801358e:	b580      	push	{r7, lr}
 8013590:	b088      	sub	sp, #32
 8013592:	af00      	add	r7, sp, #0
 8013594:	60f8      	str	r0, [r7, #12]
 8013596:	60b9      	str	r1, [r7, #8]
 8013598:	607a      	str	r2, [r7, #4]
 801359a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801359c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801359e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80135a0:	687b      	ldr	r3, [r7, #4]
 80135a2:	009b      	lsls	r3, r3, #2
 80135a4:	461a      	mov	r2, r3
 80135a6:	21a5      	movs	r1, #165	; 0xa5
 80135a8:	f002 fc59 	bl	8015e5e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80135ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80135b0:	6879      	ldr	r1, [r7, #4]
 80135b2:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80135b6:	440b      	add	r3, r1
 80135b8:	009b      	lsls	r3, r3, #2
 80135ba:	4413      	add	r3, r2
 80135bc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80135be:	69bb      	ldr	r3, [r7, #24]
 80135c0:	f023 0307 	bic.w	r3, r3, #7
 80135c4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80135c6:	69bb      	ldr	r3, [r7, #24]
 80135c8:	f003 0307 	and.w	r3, r3, #7
 80135cc:	2b00      	cmp	r3, #0
 80135ce:	d00b      	beq.n	80135e8 <prvInitialiseNewTask+0x5a>
 80135d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135d4:	b672      	cpsid	i
 80135d6:	f383 8811 	msr	BASEPRI, r3
 80135da:	f3bf 8f6f 	isb	sy
 80135de:	f3bf 8f4f 	dsb	sy
 80135e2:	b662      	cpsie	i
 80135e4:	617b      	str	r3, [r7, #20]
 80135e6:	e7fe      	b.n	80135e6 <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80135e8:	68bb      	ldr	r3, [r7, #8]
 80135ea:	2b00      	cmp	r3, #0
 80135ec:	d01f      	beq.n	801362e <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80135ee:	2300      	movs	r3, #0
 80135f0:	61fb      	str	r3, [r7, #28]
 80135f2:	e012      	b.n	801361a <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80135f4:	68ba      	ldr	r2, [r7, #8]
 80135f6:	69fb      	ldr	r3, [r7, #28]
 80135f8:	4413      	add	r3, r2
 80135fa:	7819      	ldrb	r1, [r3, #0]
 80135fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80135fe:	69fb      	ldr	r3, [r7, #28]
 8013600:	4413      	add	r3, r2
 8013602:	3334      	adds	r3, #52	; 0x34
 8013604:	460a      	mov	r2, r1
 8013606:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8013608:	68ba      	ldr	r2, [r7, #8]
 801360a:	69fb      	ldr	r3, [r7, #28]
 801360c:	4413      	add	r3, r2
 801360e:	781b      	ldrb	r3, [r3, #0]
 8013610:	2b00      	cmp	r3, #0
 8013612:	d006      	beq.n	8013622 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013614:	69fb      	ldr	r3, [r7, #28]
 8013616:	3301      	adds	r3, #1
 8013618:	61fb      	str	r3, [r7, #28]
 801361a:	69fb      	ldr	r3, [r7, #28]
 801361c:	2b0f      	cmp	r3, #15
 801361e:	d9e9      	bls.n	80135f4 <prvInitialiseNewTask+0x66>
 8013620:	e000      	b.n	8013624 <prvInitialiseNewTask+0x96>
			{
				break;
 8013622:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8013624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013626:	2200      	movs	r2, #0
 8013628:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801362c:	e003      	b.n	8013636 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801362e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013630:	2200      	movs	r2, #0
 8013632:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8013636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013638:	2b37      	cmp	r3, #55	; 0x37
 801363a:	d901      	bls.n	8013640 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801363c:	2337      	movs	r3, #55	; 0x37
 801363e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8013640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013642:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013644:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8013646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013648:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801364a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 801364c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801364e:	2200      	movs	r2, #0
 8013650:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8013652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013654:	3304      	adds	r3, #4
 8013656:	4618      	mov	r0, r3
 8013658:	f7fe fe2e 	bl	80122b8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801365c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801365e:	3318      	adds	r3, #24
 8013660:	4618      	mov	r0, r3
 8013662:	f7fe fe29 	bl	80122b8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8013666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013668:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801366a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801366c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801366e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8013672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013674:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8013676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013678:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801367a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801367c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801367e:	2200      	movs	r2, #0
 8013680:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8013682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013684:	2200      	movs	r2, #0
 8013686:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801368a:	683a      	ldr	r2, [r7, #0]
 801368c:	68f9      	ldr	r1, [r7, #12]
 801368e:	69b8      	ldr	r0, [r7, #24]
 8013690:	f001 fa48 	bl	8014b24 <pxPortInitialiseStack>
 8013694:	4602      	mov	r2, r0
 8013696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013698:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801369a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801369c:	2b00      	cmp	r3, #0
 801369e:	d002      	beq.n	80136a6 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80136a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80136a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80136a6:	bf00      	nop
 80136a8:	3720      	adds	r7, #32
 80136aa:	46bd      	mov	sp, r7
 80136ac:	bd80      	pop	{r7, pc}
	...

080136b0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80136b0:	b580      	push	{r7, lr}
 80136b2:	b082      	sub	sp, #8
 80136b4:	af00      	add	r7, sp, #0
 80136b6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80136b8:	f001 fb3e 	bl	8014d38 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80136bc:	4b2d      	ldr	r3, [pc, #180]	; (8013774 <prvAddNewTaskToReadyList+0xc4>)
 80136be:	681b      	ldr	r3, [r3, #0]
 80136c0:	3301      	adds	r3, #1
 80136c2:	4a2c      	ldr	r2, [pc, #176]	; (8013774 <prvAddNewTaskToReadyList+0xc4>)
 80136c4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80136c6:	4b2c      	ldr	r3, [pc, #176]	; (8013778 <prvAddNewTaskToReadyList+0xc8>)
 80136c8:	681b      	ldr	r3, [r3, #0]
 80136ca:	2b00      	cmp	r3, #0
 80136cc:	d109      	bne.n	80136e2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80136ce:	4a2a      	ldr	r2, [pc, #168]	; (8013778 <prvAddNewTaskToReadyList+0xc8>)
 80136d0:	687b      	ldr	r3, [r7, #4]
 80136d2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80136d4:	4b27      	ldr	r3, [pc, #156]	; (8013774 <prvAddNewTaskToReadyList+0xc4>)
 80136d6:	681b      	ldr	r3, [r3, #0]
 80136d8:	2b01      	cmp	r3, #1
 80136da:	d110      	bne.n	80136fe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80136dc:	f000 fc30 	bl	8013f40 <prvInitialiseTaskLists>
 80136e0:	e00d      	b.n	80136fe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80136e2:	4b26      	ldr	r3, [pc, #152]	; (801377c <prvAddNewTaskToReadyList+0xcc>)
 80136e4:	681b      	ldr	r3, [r3, #0]
 80136e6:	2b00      	cmp	r3, #0
 80136e8:	d109      	bne.n	80136fe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80136ea:	4b23      	ldr	r3, [pc, #140]	; (8013778 <prvAddNewTaskToReadyList+0xc8>)
 80136ec:	681b      	ldr	r3, [r3, #0]
 80136ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80136f0:	687b      	ldr	r3, [r7, #4]
 80136f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80136f4:	429a      	cmp	r2, r3
 80136f6:	d802      	bhi.n	80136fe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80136f8:	4a1f      	ldr	r2, [pc, #124]	; (8013778 <prvAddNewTaskToReadyList+0xc8>)
 80136fa:	687b      	ldr	r3, [r7, #4]
 80136fc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80136fe:	4b20      	ldr	r3, [pc, #128]	; (8013780 <prvAddNewTaskToReadyList+0xd0>)
 8013700:	681b      	ldr	r3, [r3, #0]
 8013702:	3301      	adds	r3, #1
 8013704:	4a1e      	ldr	r2, [pc, #120]	; (8013780 <prvAddNewTaskToReadyList+0xd0>)
 8013706:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8013708:	4b1d      	ldr	r3, [pc, #116]	; (8013780 <prvAddNewTaskToReadyList+0xd0>)
 801370a:	681a      	ldr	r2, [r3, #0]
 801370c:	687b      	ldr	r3, [r7, #4]
 801370e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8013710:	687b      	ldr	r3, [r7, #4]
 8013712:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013714:	4b1b      	ldr	r3, [pc, #108]	; (8013784 <prvAddNewTaskToReadyList+0xd4>)
 8013716:	681b      	ldr	r3, [r3, #0]
 8013718:	429a      	cmp	r2, r3
 801371a:	d903      	bls.n	8013724 <prvAddNewTaskToReadyList+0x74>
 801371c:	687b      	ldr	r3, [r7, #4]
 801371e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013720:	4a18      	ldr	r2, [pc, #96]	; (8013784 <prvAddNewTaskToReadyList+0xd4>)
 8013722:	6013      	str	r3, [r2, #0]
 8013724:	687b      	ldr	r3, [r7, #4]
 8013726:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013728:	4613      	mov	r3, r2
 801372a:	009b      	lsls	r3, r3, #2
 801372c:	4413      	add	r3, r2
 801372e:	009b      	lsls	r3, r3, #2
 8013730:	4a15      	ldr	r2, [pc, #84]	; (8013788 <prvAddNewTaskToReadyList+0xd8>)
 8013732:	441a      	add	r2, r3
 8013734:	687b      	ldr	r3, [r7, #4]
 8013736:	3304      	adds	r3, #4
 8013738:	4619      	mov	r1, r3
 801373a:	4610      	mov	r0, r2
 801373c:	f7fe fdc9 	bl	80122d2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8013740:	f001 fb2c 	bl	8014d9c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8013744:	4b0d      	ldr	r3, [pc, #52]	; (801377c <prvAddNewTaskToReadyList+0xcc>)
 8013746:	681b      	ldr	r3, [r3, #0]
 8013748:	2b00      	cmp	r3, #0
 801374a:	d00e      	beq.n	801376a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801374c:	4b0a      	ldr	r3, [pc, #40]	; (8013778 <prvAddNewTaskToReadyList+0xc8>)
 801374e:	681b      	ldr	r3, [r3, #0]
 8013750:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013752:	687b      	ldr	r3, [r7, #4]
 8013754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013756:	429a      	cmp	r2, r3
 8013758:	d207      	bcs.n	801376a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801375a:	4b0c      	ldr	r3, [pc, #48]	; (801378c <prvAddNewTaskToReadyList+0xdc>)
 801375c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013760:	601a      	str	r2, [r3, #0]
 8013762:	f3bf 8f4f 	dsb	sy
 8013766:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801376a:	bf00      	nop
 801376c:	3708      	adds	r7, #8
 801376e:	46bd      	mov	sp, r7
 8013770:	bd80      	pop	{r7, pc}
 8013772:	bf00      	nop
 8013774:	20000e60 	.word	0x20000e60
 8013778:	2000098c 	.word	0x2000098c
 801377c:	20000e6c 	.word	0x20000e6c
 8013780:	20000e7c 	.word	0x20000e7c
 8013784:	20000e68 	.word	0x20000e68
 8013788:	20000990 	.word	0x20000990
 801378c:	e000ed04 	.word	0xe000ed04

08013790 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8013790:	b580      	push	{r7, lr}
 8013792:	b084      	sub	sp, #16
 8013794:	af00      	add	r7, sp, #0
 8013796:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8013798:	2300      	movs	r3, #0
 801379a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 801379c:	687b      	ldr	r3, [r7, #4]
 801379e:	2b00      	cmp	r3, #0
 80137a0:	d018      	beq.n	80137d4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80137a2:	4b14      	ldr	r3, [pc, #80]	; (80137f4 <vTaskDelay+0x64>)
 80137a4:	681b      	ldr	r3, [r3, #0]
 80137a6:	2b00      	cmp	r3, #0
 80137a8:	d00b      	beq.n	80137c2 <vTaskDelay+0x32>
 80137aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137ae:	b672      	cpsid	i
 80137b0:	f383 8811 	msr	BASEPRI, r3
 80137b4:	f3bf 8f6f 	isb	sy
 80137b8:	f3bf 8f4f 	dsb	sy
 80137bc:	b662      	cpsie	i
 80137be:	60bb      	str	r3, [r7, #8]
 80137c0:	e7fe      	b.n	80137c0 <vTaskDelay+0x30>
			vTaskSuspendAll();
 80137c2:	f000 f883 	bl	80138cc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80137c6:	2100      	movs	r1, #0
 80137c8:	6878      	ldr	r0, [r7, #4]
 80137ca:	f000 fe03 	bl	80143d4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80137ce:	f000 f88b 	bl	80138e8 <xTaskResumeAll>
 80137d2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80137d4:	68fb      	ldr	r3, [r7, #12]
 80137d6:	2b00      	cmp	r3, #0
 80137d8:	d107      	bne.n	80137ea <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80137da:	4b07      	ldr	r3, [pc, #28]	; (80137f8 <vTaskDelay+0x68>)
 80137dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80137e0:	601a      	str	r2, [r3, #0]
 80137e2:	f3bf 8f4f 	dsb	sy
 80137e6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80137ea:	bf00      	nop
 80137ec:	3710      	adds	r7, #16
 80137ee:	46bd      	mov	sp, r7
 80137f0:	bd80      	pop	{r7, pc}
 80137f2:	bf00      	nop
 80137f4:	20000e88 	.word	0x20000e88
 80137f8:	e000ed04 	.word	0xe000ed04

080137fc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80137fc:	b580      	push	{r7, lr}
 80137fe:	b08a      	sub	sp, #40	; 0x28
 8013800:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8013802:	2300      	movs	r3, #0
 8013804:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8013806:	2300      	movs	r3, #0
 8013808:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801380a:	463a      	mov	r2, r7
 801380c:	1d39      	adds	r1, r7, #4
 801380e:	f107 0308 	add.w	r3, r7, #8
 8013812:	4618      	mov	r0, r3
 8013814:	f7fe fcfc 	bl	8012210 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8013818:	6839      	ldr	r1, [r7, #0]
 801381a:	687b      	ldr	r3, [r7, #4]
 801381c:	68ba      	ldr	r2, [r7, #8]
 801381e:	9202      	str	r2, [sp, #8]
 8013820:	9301      	str	r3, [sp, #4]
 8013822:	2300      	movs	r3, #0
 8013824:	9300      	str	r3, [sp, #0]
 8013826:	2300      	movs	r3, #0
 8013828:	460a      	mov	r2, r1
 801382a:	4922      	ldr	r1, [pc, #136]	; (80138b4 <vTaskStartScheduler+0xb8>)
 801382c:	4822      	ldr	r0, [pc, #136]	; (80138b8 <vTaskStartScheduler+0xbc>)
 801382e:	f7ff fe09 	bl	8013444 <xTaskCreateStatic>
 8013832:	4602      	mov	r2, r0
 8013834:	4b21      	ldr	r3, [pc, #132]	; (80138bc <vTaskStartScheduler+0xc0>)
 8013836:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8013838:	4b20      	ldr	r3, [pc, #128]	; (80138bc <vTaskStartScheduler+0xc0>)
 801383a:	681b      	ldr	r3, [r3, #0]
 801383c:	2b00      	cmp	r3, #0
 801383e:	d002      	beq.n	8013846 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8013840:	2301      	movs	r3, #1
 8013842:	617b      	str	r3, [r7, #20]
 8013844:	e001      	b.n	801384a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8013846:	2300      	movs	r3, #0
 8013848:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801384a:	697b      	ldr	r3, [r7, #20]
 801384c:	2b01      	cmp	r3, #1
 801384e:	d102      	bne.n	8013856 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8013850:	f000 fe14 	bl	801447c <xTimerCreateTimerTask>
 8013854:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8013856:	697b      	ldr	r3, [r7, #20]
 8013858:	2b01      	cmp	r3, #1
 801385a:	d117      	bne.n	801388c <vTaskStartScheduler+0x90>
 801385c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013860:	b672      	cpsid	i
 8013862:	f383 8811 	msr	BASEPRI, r3
 8013866:	f3bf 8f6f 	isb	sy
 801386a:	f3bf 8f4f 	dsb	sy
 801386e:	b662      	cpsie	i
 8013870:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8013872:	4b13      	ldr	r3, [pc, #76]	; (80138c0 <vTaskStartScheduler+0xc4>)
 8013874:	f04f 32ff 	mov.w	r2, #4294967295
 8013878:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801387a:	4b12      	ldr	r3, [pc, #72]	; (80138c4 <vTaskStartScheduler+0xc8>)
 801387c:	2201      	movs	r2, #1
 801387e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8013880:	4b11      	ldr	r3, [pc, #68]	; (80138c8 <vTaskStartScheduler+0xcc>)
 8013882:	2200      	movs	r2, #0
 8013884:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8013886:	f001 f9db 	bl	8014c40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801388a:	e00f      	b.n	80138ac <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801388c:	697b      	ldr	r3, [r7, #20]
 801388e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013892:	d10b      	bne.n	80138ac <vTaskStartScheduler+0xb0>
 8013894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013898:	b672      	cpsid	i
 801389a:	f383 8811 	msr	BASEPRI, r3
 801389e:	f3bf 8f6f 	isb	sy
 80138a2:	f3bf 8f4f 	dsb	sy
 80138a6:	b662      	cpsie	i
 80138a8:	60fb      	str	r3, [r7, #12]
 80138aa:	e7fe      	b.n	80138aa <vTaskStartScheduler+0xae>
}
 80138ac:	bf00      	nop
 80138ae:	3718      	adds	r7, #24
 80138b0:	46bd      	mov	sp, r7
 80138b2:	bd80      	pop	{r7, pc}
 80138b4:	0801605c 	.word	0x0801605c
 80138b8:	08013f11 	.word	0x08013f11
 80138bc:	20000e84 	.word	0x20000e84
 80138c0:	20000e80 	.word	0x20000e80
 80138c4:	20000e6c 	.word	0x20000e6c
 80138c8:	20000e64 	.word	0x20000e64

080138cc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80138cc:	b480      	push	{r7}
 80138ce:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80138d0:	4b04      	ldr	r3, [pc, #16]	; (80138e4 <vTaskSuspendAll+0x18>)
 80138d2:	681b      	ldr	r3, [r3, #0]
 80138d4:	3301      	adds	r3, #1
 80138d6:	4a03      	ldr	r2, [pc, #12]	; (80138e4 <vTaskSuspendAll+0x18>)
 80138d8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80138da:	bf00      	nop
 80138dc:	46bd      	mov	sp, r7
 80138de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138e2:	4770      	bx	lr
 80138e4:	20000e88 	.word	0x20000e88

080138e8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80138e8:	b580      	push	{r7, lr}
 80138ea:	b084      	sub	sp, #16
 80138ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80138ee:	2300      	movs	r3, #0
 80138f0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80138f2:	2300      	movs	r3, #0
 80138f4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80138f6:	4b42      	ldr	r3, [pc, #264]	; (8013a00 <xTaskResumeAll+0x118>)
 80138f8:	681b      	ldr	r3, [r3, #0]
 80138fa:	2b00      	cmp	r3, #0
 80138fc:	d10b      	bne.n	8013916 <xTaskResumeAll+0x2e>
 80138fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013902:	b672      	cpsid	i
 8013904:	f383 8811 	msr	BASEPRI, r3
 8013908:	f3bf 8f6f 	isb	sy
 801390c:	f3bf 8f4f 	dsb	sy
 8013910:	b662      	cpsie	i
 8013912:	603b      	str	r3, [r7, #0]
 8013914:	e7fe      	b.n	8013914 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8013916:	f001 fa0f 	bl	8014d38 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801391a:	4b39      	ldr	r3, [pc, #228]	; (8013a00 <xTaskResumeAll+0x118>)
 801391c:	681b      	ldr	r3, [r3, #0]
 801391e:	3b01      	subs	r3, #1
 8013920:	4a37      	ldr	r2, [pc, #220]	; (8013a00 <xTaskResumeAll+0x118>)
 8013922:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013924:	4b36      	ldr	r3, [pc, #216]	; (8013a00 <xTaskResumeAll+0x118>)
 8013926:	681b      	ldr	r3, [r3, #0]
 8013928:	2b00      	cmp	r3, #0
 801392a:	d162      	bne.n	80139f2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801392c:	4b35      	ldr	r3, [pc, #212]	; (8013a04 <xTaskResumeAll+0x11c>)
 801392e:	681b      	ldr	r3, [r3, #0]
 8013930:	2b00      	cmp	r3, #0
 8013932:	d05e      	beq.n	80139f2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013934:	e02f      	b.n	8013996 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013936:	4b34      	ldr	r3, [pc, #208]	; (8013a08 <xTaskResumeAll+0x120>)
 8013938:	68db      	ldr	r3, [r3, #12]
 801393a:	68db      	ldr	r3, [r3, #12]
 801393c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801393e:	68fb      	ldr	r3, [r7, #12]
 8013940:	3318      	adds	r3, #24
 8013942:	4618      	mov	r0, r3
 8013944:	f7fe fd22 	bl	801238c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013948:	68fb      	ldr	r3, [r7, #12]
 801394a:	3304      	adds	r3, #4
 801394c:	4618      	mov	r0, r3
 801394e:	f7fe fd1d 	bl	801238c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8013952:	68fb      	ldr	r3, [r7, #12]
 8013954:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013956:	4b2d      	ldr	r3, [pc, #180]	; (8013a0c <xTaskResumeAll+0x124>)
 8013958:	681b      	ldr	r3, [r3, #0]
 801395a:	429a      	cmp	r2, r3
 801395c:	d903      	bls.n	8013966 <xTaskResumeAll+0x7e>
 801395e:	68fb      	ldr	r3, [r7, #12]
 8013960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013962:	4a2a      	ldr	r2, [pc, #168]	; (8013a0c <xTaskResumeAll+0x124>)
 8013964:	6013      	str	r3, [r2, #0]
 8013966:	68fb      	ldr	r3, [r7, #12]
 8013968:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801396a:	4613      	mov	r3, r2
 801396c:	009b      	lsls	r3, r3, #2
 801396e:	4413      	add	r3, r2
 8013970:	009b      	lsls	r3, r3, #2
 8013972:	4a27      	ldr	r2, [pc, #156]	; (8013a10 <xTaskResumeAll+0x128>)
 8013974:	441a      	add	r2, r3
 8013976:	68fb      	ldr	r3, [r7, #12]
 8013978:	3304      	adds	r3, #4
 801397a:	4619      	mov	r1, r3
 801397c:	4610      	mov	r0, r2
 801397e:	f7fe fca8 	bl	80122d2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013982:	68fb      	ldr	r3, [r7, #12]
 8013984:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013986:	4b23      	ldr	r3, [pc, #140]	; (8013a14 <xTaskResumeAll+0x12c>)
 8013988:	681b      	ldr	r3, [r3, #0]
 801398a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801398c:	429a      	cmp	r2, r3
 801398e:	d302      	bcc.n	8013996 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8013990:	4b21      	ldr	r3, [pc, #132]	; (8013a18 <xTaskResumeAll+0x130>)
 8013992:	2201      	movs	r2, #1
 8013994:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013996:	4b1c      	ldr	r3, [pc, #112]	; (8013a08 <xTaskResumeAll+0x120>)
 8013998:	681b      	ldr	r3, [r3, #0]
 801399a:	2b00      	cmp	r3, #0
 801399c:	d1cb      	bne.n	8013936 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801399e:	68fb      	ldr	r3, [r7, #12]
 80139a0:	2b00      	cmp	r3, #0
 80139a2:	d001      	beq.n	80139a8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80139a4:	f000 fb68 	bl	8014078 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80139a8:	4b1c      	ldr	r3, [pc, #112]	; (8013a1c <xTaskResumeAll+0x134>)
 80139aa:	681b      	ldr	r3, [r3, #0]
 80139ac:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80139ae:	687b      	ldr	r3, [r7, #4]
 80139b0:	2b00      	cmp	r3, #0
 80139b2:	d010      	beq.n	80139d6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80139b4:	f000 f858 	bl	8013a68 <xTaskIncrementTick>
 80139b8:	4603      	mov	r3, r0
 80139ba:	2b00      	cmp	r3, #0
 80139bc:	d002      	beq.n	80139c4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80139be:	4b16      	ldr	r3, [pc, #88]	; (8013a18 <xTaskResumeAll+0x130>)
 80139c0:	2201      	movs	r2, #1
 80139c2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80139c4:	687b      	ldr	r3, [r7, #4]
 80139c6:	3b01      	subs	r3, #1
 80139c8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80139ca:	687b      	ldr	r3, [r7, #4]
 80139cc:	2b00      	cmp	r3, #0
 80139ce:	d1f1      	bne.n	80139b4 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 80139d0:	4b12      	ldr	r3, [pc, #72]	; (8013a1c <xTaskResumeAll+0x134>)
 80139d2:	2200      	movs	r2, #0
 80139d4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80139d6:	4b10      	ldr	r3, [pc, #64]	; (8013a18 <xTaskResumeAll+0x130>)
 80139d8:	681b      	ldr	r3, [r3, #0]
 80139da:	2b00      	cmp	r3, #0
 80139dc:	d009      	beq.n	80139f2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80139de:	2301      	movs	r3, #1
 80139e0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80139e2:	4b0f      	ldr	r3, [pc, #60]	; (8013a20 <xTaskResumeAll+0x138>)
 80139e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80139e8:	601a      	str	r2, [r3, #0]
 80139ea:	f3bf 8f4f 	dsb	sy
 80139ee:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80139f2:	f001 f9d3 	bl	8014d9c <vPortExitCritical>

	return xAlreadyYielded;
 80139f6:	68bb      	ldr	r3, [r7, #8]
}
 80139f8:	4618      	mov	r0, r3
 80139fa:	3710      	adds	r7, #16
 80139fc:	46bd      	mov	sp, r7
 80139fe:	bd80      	pop	{r7, pc}
 8013a00:	20000e88 	.word	0x20000e88
 8013a04:	20000e60 	.word	0x20000e60
 8013a08:	20000e20 	.word	0x20000e20
 8013a0c:	20000e68 	.word	0x20000e68
 8013a10:	20000990 	.word	0x20000990
 8013a14:	2000098c 	.word	0x2000098c
 8013a18:	20000e74 	.word	0x20000e74
 8013a1c:	20000e70 	.word	0x20000e70
 8013a20:	e000ed04 	.word	0xe000ed04

08013a24 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8013a24:	b480      	push	{r7}
 8013a26:	b083      	sub	sp, #12
 8013a28:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8013a2a:	4b05      	ldr	r3, [pc, #20]	; (8013a40 <xTaskGetTickCount+0x1c>)
 8013a2c:	681b      	ldr	r3, [r3, #0]
 8013a2e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8013a30:	687b      	ldr	r3, [r7, #4]
}
 8013a32:	4618      	mov	r0, r3
 8013a34:	370c      	adds	r7, #12
 8013a36:	46bd      	mov	sp, r7
 8013a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a3c:	4770      	bx	lr
 8013a3e:	bf00      	nop
 8013a40:	20000e64 	.word	0x20000e64

08013a44 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8013a44:	b580      	push	{r7, lr}
 8013a46:	b082      	sub	sp, #8
 8013a48:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013a4a:	f001 fa55 	bl	8014ef8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8013a4e:	2300      	movs	r3, #0
 8013a50:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8013a52:	4b04      	ldr	r3, [pc, #16]	; (8013a64 <xTaskGetTickCountFromISR+0x20>)
 8013a54:	681b      	ldr	r3, [r3, #0]
 8013a56:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013a58:	683b      	ldr	r3, [r7, #0]
}
 8013a5a:	4618      	mov	r0, r3
 8013a5c:	3708      	adds	r7, #8
 8013a5e:	46bd      	mov	sp, r7
 8013a60:	bd80      	pop	{r7, pc}
 8013a62:	bf00      	nop
 8013a64:	20000e64 	.word	0x20000e64

08013a68 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8013a68:	b580      	push	{r7, lr}
 8013a6a:	b086      	sub	sp, #24
 8013a6c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8013a6e:	2300      	movs	r3, #0
 8013a70:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013a72:	4b4f      	ldr	r3, [pc, #316]	; (8013bb0 <xTaskIncrementTick+0x148>)
 8013a74:	681b      	ldr	r3, [r3, #0]
 8013a76:	2b00      	cmp	r3, #0
 8013a78:	f040 808a 	bne.w	8013b90 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8013a7c:	4b4d      	ldr	r3, [pc, #308]	; (8013bb4 <xTaskIncrementTick+0x14c>)
 8013a7e:	681b      	ldr	r3, [r3, #0]
 8013a80:	3301      	adds	r3, #1
 8013a82:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8013a84:	4a4b      	ldr	r2, [pc, #300]	; (8013bb4 <xTaskIncrementTick+0x14c>)
 8013a86:	693b      	ldr	r3, [r7, #16]
 8013a88:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8013a8a:	693b      	ldr	r3, [r7, #16]
 8013a8c:	2b00      	cmp	r3, #0
 8013a8e:	d121      	bne.n	8013ad4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8013a90:	4b49      	ldr	r3, [pc, #292]	; (8013bb8 <xTaskIncrementTick+0x150>)
 8013a92:	681b      	ldr	r3, [r3, #0]
 8013a94:	681b      	ldr	r3, [r3, #0]
 8013a96:	2b00      	cmp	r3, #0
 8013a98:	d00b      	beq.n	8013ab2 <xTaskIncrementTick+0x4a>
 8013a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a9e:	b672      	cpsid	i
 8013aa0:	f383 8811 	msr	BASEPRI, r3
 8013aa4:	f3bf 8f6f 	isb	sy
 8013aa8:	f3bf 8f4f 	dsb	sy
 8013aac:	b662      	cpsie	i
 8013aae:	603b      	str	r3, [r7, #0]
 8013ab0:	e7fe      	b.n	8013ab0 <xTaskIncrementTick+0x48>
 8013ab2:	4b41      	ldr	r3, [pc, #260]	; (8013bb8 <xTaskIncrementTick+0x150>)
 8013ab4:	681b      	ldr	r3, [r3, #0]
 8013ab6:	60fb      	str	r3, [r7, #12]
 8013ab8:	4b40      	ldr	r3, [pc, #256]	; (8013bbc <xTaskIncrementTick+0x154>)
 8013aba:	681b      	ldr	r3, [r3, #0]
 8013abc:	4a3e      	ldr	r2, [pc, #248]	; (8013bb8 <xTaskIncrementTick+0x150>)
 8013abe:	6013      	str	r3, [r2, #0]
 8013ac0:	4a3e      	ldr	r2, [pc, #248]	; (8013bbc <xTaskIncrementTick+0x154>)
 8013ac2:	68fb      	ldr	r3, [r7, #12]
 8013ac4:	6013      	str	r3, [r2, #0]
 8013ac6:	4b3e      	ldr	r3, [pc, #248]	; (8013bc0 <xTaskIncrementTick+0x158>)
 8013ac8:	681b      	ldr	r3, [r3, #0]
 8013aca:	3301      	adds	r3, #1
 8013acc:	4a3c      	ldr	r2, [pc, #240]	; (8013bc0 <xTaskIncrementTick+0x158>)
 8013ace:	6013      	str	r3, [r2, #0]
 8013ad0:	f000 fad2 	bl	8014078 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8013ad4:	4b3b      	ldr	r3, [pc, #236]	; (8013bc4 <xTaskIncrementTick+0x15c>)
 8013ad6:	681b      	ldr	r3, [r3, #0]
 8013ad8:	693a      	ldr	r2, [r7, #16]
 8013ada:	429a      	cmp	r2, r3
 8013adc:	d349      	bcc.n	8013b72 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013ade:	4b36      	ldr	r3, [pc, #216]	; (8013bb8 <xTaskIncrementTick+0x150>)
 8013ae0:	681b      	ldr	r3, [r3, #0]
 8013ae2:	681b      	ldr	r3, [r3, #0]
 8013ae4:	2b00      	cmp	r3, #0
 8013ae6:	d104      	bne.n	8013af2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013ae8:	4b36      	ldr	r3, [pc, #216]	; (8013bc4 <xTaskIncrementTick+0x15c>)
 8013aea:	f04f 32ff 	mov.w	r2, #4294967295
 8013aee:	601a      	str	r2, [r3, #0]
					break;
 8013af0:	e03f      	b.n	8013b72 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013af2:	4b31      	ldr	r3, [pc, #196]	; (8013bb8 <xTaskIncrementTick+0x150>)
 8013af4:	681b      	ldr	r3, [r3, #0]
 8013af6:	68db      	ldr	r3, [r3, #12]
 8013af8:	68db      	ldr	r3, [r3, #12]
 8013afa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8013afc:	68bb      	ldr	r3, [r7, #8]
 8013afe:	685b      	ldr	r3, [r3, #4]
 8013b00:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8013b02:	693a      	ldr	r2, [r7, #16]
 8013b04:	687b      	ldr	r3, [r7, #4]
 8013b06:	429a      	cmp	r2, r3
 8013b08:	d203      	bcs.n	8013b12 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8013b0a:	4a2e      	ldr	r2, [pc, #184]	; (8013bc4 <xTaskIncrementTick+0x15c>)
 8013b0c:	687b      	ldr	r3, [r7, #4]
 8013b0e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8013b10:	e02f      	b.n	8013b72 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013b12:	68bb      	ldr	r3, [r7, #8]
 8013b14:	3304      	adds	r3, #4
 8013b16:	4618      	mov	r0, r3
 8013b18:	f7fe fc38 	bl	801238c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8013b1c:	68bb      	ldr	r3, [r7, #8]
 8013b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013b20:	2b00      	cmp	r3, #0
 8013b22:	d004      	beq.n	8013b2e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013b24:	68bb      	ldr	r3, [r7, #8]
 8013b26:	3318      	adds	r3, #24
 8013b28:	4618      	mov	r0, r3
 8013b2a:	f7fe fc2f 	bl	801238c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8013b2e:	68bb      	ldr	r3, [r7, #8]
 8013b30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013b32:	4b25      	ldr	r3, [pc, #148]	; (8013bc8 <xTaskIncrementTick+0x160>)
 8013b34:	681b      	ldr	r3, [r3, #0]
 8013b36:	429a      	cmp	r2, r3
 8013b38:	d903      	bls.n	8013b42 <xTaskIncrementTick+0xda>
 8013b3a:	68bb      	ldr	r3, [r7, #8]
 8013b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b3e:	4a22      	ldr	r2, [pc, #136]	; (8013bc8 <xTaskIncrementTick+0x160>)
 8013b40:	6013      	str	r3, [r2, #0]
 8013b42:	68bb      	ldr	r3, [r7, #8]
 8013b44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013b46:	4613      	mov	r3, r2
 8013b48:	009b      	lsls	r3, r3, #2
 8013b4a:	4413      	add	r3, r2
 8013b4c:	009b      	lsls	r3, r3, #2
 8013b4e:	4a1f      	ldr	r2, [pc, #124]	; (8013bcc <xTaskIncrementTick+0x164>)
 8013b50:	441a      	add	r2, r3
 8013b52:	68bb      	ldr	r3, [r7, #8]
 8013b54:	3304      	adds	r3, #4
 8013b56:	4619      	mov	r1, r3
 8013b58:	4610      	mov	r0, r2
 8013b5a:	f7fe fbba 	bl	80122d2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013b5e:	68bb      	ldr	r3, [r7, #8]
 8013b60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013b62:	4b1b      	ldr	r3, [pc, #108]	; (8013bd0 <xTaskIncrementTick+0x168>)
 8013b64:	681b      	ldr	r3, [r3, #0]
 8013b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b68:	429a      	cmp	r2, r3
 8013b6a:	d3b8      	bcc.n	8013ade <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8013b6c:	2301      	movs	r3, #1
 8013b6e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013b70:	e7b5      	b.n	8013ade <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8013b72:	4b17      	ldr	r3, [pc, #92]	; (8013bd0 <xTaskIncrementTick+0x168>)
 8013b74:	681b      	ldr	r3, [r3, #0]
 8013b76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013b78:	4914      	ldr	r1, [pc, #80]	; (8013bcc <xTaskIncrementTick+0x164>)
 8013b7a:	4613      	mov	r3, r2
 8013b7c:	009b      	lsls	r3, r3, #2
 8013b7e:	4413      	add	r3, r2
 8013b80:	009b      	lsls	r3, r3, #2
 8013b82:	440b      	add	r3, r1
 8013b84:	681b      	ldr	r3, [r3, #0]
 8013b86:	2b01      	cmp	r3, #1
 8013b88:	d907      	bls.n	8013b9a <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8013b8a:	2301      	movs	r3, #1
 8013b8c:	617b      	str	r3, [r7, #20]
 8013b8e:	e004      	b.n	8013b9a <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8013b90:	4b10      	ldr	r3, [pc, #64]	; (8013bd4 <xTaskIncrementTick+0x16c>)
 8013b92:	681b      	ldr	r3, [r3, #0]
 8013b94:	3301      	adds	r3, #1
 8013b96:	4a0f      	ldr	r2, [pc, #60]	; (8013bd4 <xTaskIncrementTick+0x16c>)
 8013b98:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8013b9a:	4b0f      	ldr	r3, [pc, #60]	; (8013bd8 <xTaskIncrementTick+0x170>)
 8013b9c:	681b      	ldr	r3, [r3, #0]
 8013b9e:	2b00      	cmp	r3, #0
 8013ba0:	d001      	beq.n	8013ba6 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8013ba2:	2301      	movs	r3, #1
 8013ba4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8013ba6:	697b      	ldr	r3, [r7, #20]
}
 8013ba8:	4618      	mov	r0, r3
 8013baa:	3718      	adds	r7, #24
 8013bac:	46bd      	mov	sp, r7
 8013bae:	bd80      	pop	{r7, pc}
 8013bb0:	20000e88 	.word	0x20000e88
 8013bb4:	20000e64 	.word	0x20000e64
 8013bb8:	20000e18 	.word	0x20000e18
 8013bbc:	20000e1c 	.word	0x20000e1c
 8013bc0:	20000e78 	.word	0x20000e78
 8013bc4:	20000e80 	.word	0x20000e80
 8013bc8:	20000e68 	.word	0x20000e68
 8013bcc:	20000990 	.word	0x20000990
 8013bd0:	2000098c 	.word	0x2000098c
 8013bd4:	20000e70 	.word	0x20000e70
 8013bd8:	20000e74 	.word	0x20000e74

08013bdc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8013bdc:	b480      	push	{r7}
 8013bde:	b085      	sub	sp, #20
 8013be0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8013be2:	4b28      	ldr	r3, [pc, #160]	; (8013c84 <vTaskSwitchContext+0xa8>)
 8013be4:	681b      	ldr	r3, [r3, #0]
 8013be6:	2b00      	cmp	r3, #0
 8013be8:	d003      	beq.n	8013bf2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8013bea:	4b27      	ldr	r3, [pc, #156]	; (8013c88 <vTaskSwitchContext+0xac>)
 8013bec:	2201      	movs	r2, #1
 8013bee:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8013bf0:	e042      	b.n	8013c78 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8013bf2:	4b25      	ldr	r3, [pc, #148]	; (8013c88 <vTaskSwitchContext+0xac>)
 8013bf4:	2200      	movs	r2, #0
 8013bf6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013bf8:	4b24      	ldr	r3, [pc, #144]	; (8013c8c <vTaskSwitchContext+0xb0>)
 8013bfa:	681b      	ldr	r3, [r3, #0]
 8013bfc:	60fb      	str	r3, [r7, #12]
 8013bfe:	e011      	b.n	8013c24 <vTaskSwitchContext+0x48>
 8013c00:	68fb      	ldr	r3, [r7, #12]
 8013c02:	2b00      	cmp	r3, #0
 8013c04:	d10b      	bne.n	8013c1e <vTaskSwitchContext+0x42>
 8013c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c0a:	b672      	cpsid	i
 8013c0c:	f383 8811 	msr	BASEPRI, r3
 8013c10:	f3bf 8f6f 	isb	sy
 8013c14:	f3bf 8f4f 	dsb	sy
 8013c18:	b662      	cpsie	i
 8013c1a:	607b      	str	r3, [r7, #4]
 8013c1c:	e7fe      	b.n	8013c1c <vTaskSwitchContext+0x40>
 8013c1e:	68fb      	ldr	r3, [r7, #12]
 8013c20:	3b01      	subs	r3, #1
 8013c22:	60fb      	str	r3, [r7, #12]
 8013c24:	491a      	ldr	r1, [pc, #104]	; (8013c90 <vTaskSwitchContext+0xb4>)
 8013c26:	68fa      	ldr	r2, [r7, #12]
 8013c28:	4613      	mov	r3, r2
 8013c2a:	009b      	lsls	r3, r3, #2
 8013c2c:	4413      	add	r3, r2
 8013c2e:	009b      	lsls	r3, r3, #2
 8013c30:	440b      	add	r3, r1
 8013c32:	681b      	ldr	r3, [r3, #0]
 8013c34:	2b00      	cmp	r3, #0
 8013c36:	d0e3      	beq.n	8013c00 <vTaskSwitchContext+0x24>
 8013c38:	68fa      	ldr	r2, [r7, #12]
 8013c3a:	4613      	mov	r3, r2
 8013c3c:	009b      	lsls	r3, r3, #2
 8013c3e:	4413      	add	r3, r2
 8013c40:	009b      	lsls	r3, r3, #2
 8013c42:	4a13      	ldr	r2, [pc, #76]	; (8013c90 <vTaskSwitchContext+0xb4>)
 8013c44:	4413      	add	r3, r2
 8013c46:	60bb      	str	r3, [r7, #8]
 8013c48:	68bb      	ldr	r3, [r7, #8]
 8013c4a:	685b      	ldr	r3, [r3, #4]
 8013c4c:	685a      	ldr	r2, [r3, #4]
 8013c4e:	68bb      	ldr	r3, [r7, #8]
 8013c50:	605a      	str	r2, [r3, #4]
 8013c52:	68bb      	ldr	r3, [r7, #8]
 8013c54:	685a      	ldr	r2, [r3, #4]
 8013c56:	68bb      	ldr	r3, [r7, #8]
 8013c58:	3308      	adds	r3, #8
 8013c5a:	429a      	cmp	r2, r3
 8013c5c:	d104      	bne.n	8013c68 <vTaskSwitchContext+0x8c>
 8013c5e:	68bb      	ldr	r3, [r7, #8]
 8013c60:	685b      	ldr	r3, [r3, #4]
 8013c62:	685a      	ldr	r2, [r3, #4]
 8013c64:	68bb      	ldr	r3, [r7, #8]
 8013c66:	605a      	str	r2, [r3, #4]
 8013c68:	68bb      	ldr	r3, [r7, #8]
 8013c6a:	685b      	ldr	r3, [r3, #4]
 8013c6c:	68db      	ldr	r3, [r3, #12]
 8013c6e:	4a09      	ldr	r2, [pc, #36]	; (8013c94 <vTaskSwitchContext+0xb8>)
 8013c70:	6013      	str	r3, [r2, #0]
 8013c72:	4a06      	ldr	r2, [pc, #24]	; (8013c8c <vTaskSwitchContext+0xb0>)
 8013c74:	68fb      	ldr	r3, [r7, #12]
 8013c76:	6013      	str	r3, [r2, #0]
}
 8013c78:	bf00      	nop
 8013c7a:	3714      	adds	r7, #20
 8013c7c:	46bd      	mov	sp, r7
 8013c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c82:	4770      	bx	lr
 8013c84:	20000e88 	.word	0x20000e88
 8013c88:	20000e74 	.word	0x20000e74
 8013c8c:	20000e68 	.word	0x20000e68
 8013c90:	20000990 	.word	0x20000990
 8013c94:	2000098c 	.word	0x2000098c

08013c98 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8013c98:	b580      	push	{r7, lr}
 8013c9a:	b084      	sub	sp, #16
 8013c9c:	af00      	add	r7, sp, #0
 8013c9e:	6078      	str	r0, [r7, #4]
 8013ca0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8013ca2:	687b      	ldr	r3, [r7, #4]
 8013ca4:	2b00      	cmp	r3, #0
 8013ca6:	d10b      	bne.n	8013cc0 <vTaskPlaceOnEventList+0x28>
 8013ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013cac:	b672      	cpsid	i
 8013cae:	f383 8811 	msr	BASEPRI, r3
 8013cb2:	f3bf 8f6f 	isb	sy
 8013cb6:	f3bf 8f4f 	dsb	sy
 8013cba:	b662      	cpsie	i
 8013cbc:	60fb      	str	r3, [r7, #12]
 8013cbe:	e7fe      	b.n	8013cbe <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8013cc0:	4b07      	ldr	r3, [pc, #28]	; (8013ce0 <vTaskPlaceOnEventList+0x48>)
 8013cc2:	681b      	ldr	r3, [r3, #0]
 8013cc4:	3318      	adds	r3, #24
 8013cc6:	4619      	mov	r1, r3
 8013cc8:	6878      	ldr	r0, [r7, #4]
 8013cca:	f7fe fb26 	bl	801231a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8013cce:	2101      	movs	r1, #1
 8013cd0:	6838      	ldr	r0, [r7, #0]
 8013cd2:	f000 fb7f 	bl	80143d4 <prvAddCurrentTaskToDelayedList>
}
 8013cd6:	bf00      	nop
 8013cd8:	3710      	adds	r7, #16
 8013cda:	46bd      	mov	sp, r7
 8013cdc:	bd80      	pop	{r7, pc}
 8013cde:	bf00      	nop
 8013ce0:	2000098c 	.word	0x2000098c

08013ce4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8013ce4:	b580      	push	{r7, lr}
 8013ce6:	b086      	sub	sp, #24
 8013ce8:	af00      	add	r7, sp, #0
 8013cea:	60f8      	str	r0, [r7, #12]
 8013cec:	60b9      	str	r1, [r7, #8]
 8013cee:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8013cf0:	68fb      	ldr	r3, [r7, #12]
 8013cf2:	2b00      	cmp	r3, #0
 8013cf4:	d10b      	bne.n	8013d0e <vTaskPlaceOnEventListRestricted+0x2a>
 8013cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013cfa:	b672      	cpsid	i
 8013cfc:	f383 8811 	msr	BASEPRI, r3
 8013d00:	f3bf 8f6f 	isb	sy
 8013d04:	f3bf 8f4f 	dsb	sy
 8013d08:	b662      	cpsie	i
 8013d0a:	617b      	str	r3, [r7, #20]
 8013d0c:	e7fe      	b.n	8013d0c <vTaskPlaceOnEventListRestricted+0x28>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8013d0e:	4b0a      	ldr	r3, [pc, #40]	; (8013d38 <vTaskPlaceOnEventListRestricted+0x54>)
 8013d10:	681b      	ldr	r3, [r3, #0]
 8013d12:	3318      	adds	r3, #24
 8013d14:	4619      	mov	r1, r3
 8013d16:	68f8      	ldr	r0, [r7, #12]
 8013d18:	f7fe fadb 	bl	80122d2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8013d1c:	687b      	ldr	r3, [r7, #4]
 8013d1e:	2b00      	cmp	r3, #0
 8013d20:	d002      	beq.n	8013d28 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8013d22:	f04f 33ff 	mov.w	r3, #4294967295
 8013d26:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8013d28:	6879      	ldr	r1, [r7, #4]
 8013d2a:	68b8      	ldr	r0, [r7, #8]
 8013d2c:	f000 fb52 	bl	80143d4 <prvAddCurrentTaskToDelayedList>
	}
 8013d30:	bf00      	nop
 8013d32:	3718      	adds	r7, #24
 8013d34:	46bd      	mov	sp, r7
 8013d36:	bd80      	pop	{r7, pc}
 8013d38:	2000098c 	.word	0x2000098c

08013d3c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8013d3c:	b580      	push	{r7, lr}
 8013d3e:	b086      	sub	sp, #24
 8013d40:	af00      	add	r7, sp, #0
 8013d42:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013d44:	687b      	ldr	r3, [r7, #4]
 8013d46:	68db      	ldr	r3, [r3, #12]
 8013d48:	68db      	ldr	r3, [r3, #12]
 8013d4a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8013d4c:	693b      	ldr	r3, [r7, #16]
 8013d4e:	2b00      	cmp	r3, #0
 8013d50:	d10b      	bne.n	8013d6a <xTaskRemoveFromEventList+0x2e>
 8013d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d56:	b672      	cpsid	i
 8013d58:	f383 8811 	msr	BASEPRI, r3
 8013d5c:	f3bf 8f6f 	isb	sy
 8013d60:	f3bf 8f4f 	dsb	sy
 8013d64:	b662      	cpsie	i
 8013d66:	60fb      	str	r3, [r7, #12]
 8013d68:	e7fe      	b.n	8013d68 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8013d6a:	693b      	ldr	r3, [r7, #16]
 8013d6c:	3318      	adds	r3, #24
 8013d6e:	4618      	mov	r0, r3
 8013d70:	f7fe fb0c 	bl	801238c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013d74:	4b1d      	ldr	r3, [pc, #116]	; (8013dec <xTaskRemoveFromEventList+0xb0>)
 8013d76:	681b      	ldr	r3, [r3, #0]
 8013d78:	2b00      	cmp	r3, #0
 8013d7a:	d11d      	bne.n	8013db8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8013d7c:	693b      	ldr	r3, [r7, #16]
 8013d7e:	3304      	adds	r3, #4
 8013d80:	4618      	mov	r0, r3
 8013d82:	f7fe fb03 	bl	801238c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8013d86:	693b      	ldr	r3, [r7, #16]
 8013d88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013d8a:	4b19      	ldr	r3, [pc, #100]	; (8013df0 <xTaskRemoveFromEventList+0xb4>)
 8013d8c:	681b      	ldr	r3, [r3, #0]
 8013d8e:	429a      	cmp	r2, r3
 8013d90:	d903      	bls.n	8013d9a <xTaskRemoveFromEventList+0x5e>
 8013d92:	693b      	ldr	r3, [r7, #16]
 8013d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d96:	4a16      	ldr	r2, [pc, #88]	; (8013df0 <xTaskRemoveFromEventList+0xb4>)
 8013d98:	6013      	str	r3, [r2, #0]
 8013d9a:	693b      	ldr	r3, [r7, #16]
 8013d9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013d9e:	4613      	mov	r3, r2
 8013da0:	009b      	lsls	r3, r3, #2
 8013da2:	4413      	add	r3, r2
 8013da4:	009b      	lsls	r3, r3, #2
 8013da6:	4a13      	ldr	r2, [pc, #76]	; (8013df4 <xTaskRemoveFromEventList+0xb8>)
 8013da8:	441a      	add	r2, r3
 8013daa:	693b      	ldr	r3, [r7, #16]
 8013dac:	3304      	adds	r3, #4
 8013dae:	4619      	mov	r1, r3
 8013db0:	4610      	mov	r0, r2
 8013db2:	f7fe fa8e 	bl	80122d2 <vListInsertEnd>
 8013db6:	e005      	b.n	8013dc4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8013db8:	693b      	ldr	r3, [r7, #16]
 8013dba:	3318      	adds	r3, #24
 8013dbc:	4619      	mov	r1, r3
 8013dbe:	480e      	ldr	r0, [pc, #56]	; (8013df8 <xTaskRemoveFromEventList+0xbc>)
 8013dc0:	f7fe fa87 	bl	80122d2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8013dc4:	693b      	ldr	r3, [r7, #16]
 8013dc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013dc8:	4b0c      	ldr	r3, [pc, #48]	; (8013dfc <xTaskRemoveFromEventList+0xc0>)
 8013dca:	681b      	ldr	r3, [r3, #0]
 8013dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013dce:	429a      	cmp	r2, r3
 8013dd0:	d905      	bls.n	8013dde <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8013dd2:	2301      	movs	r3, #1
 8013dd4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8013dd6:	4b0a      	ldr	r3, [pc, #40]	; (8013e00 <xTaskRemoveFromEventList+0xc4>)
 8013dd8:	2201      	movs	r2, #1
 8013dda:	601a      	str	r2, [r3, #0]
 8013ddc:	e001      	b.n	8013de2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8013dde:	2300      	movs	r3, #0
 8013de0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8013de2:	697b      	ldr	r3, [r7, #20]
}
 8013de4:	4618      	mov	r0, r3
 8013de6:	3718      	adds	r7, #24
 8013de8:	46bd      	mov	sp, r7
 8013dea:	bd80      	pop	{r7, pc}
 8013dec:	20000e88 	.word	0x20000e88
 8013df0:	20000e68 	.word	0x20000e68
 8013df4:	20000990 	.word	0x20000990
 8013df8:	20000e20 	.word	0x20000e20
 8013dfc:	2000098c 	.word	0x2000098c
 8013e00:	20000e74 	.word	0x20000e74

08013e04 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8013e04:	b480      	push	{r7}
 8013e06:	b083      	sub	sp, #12
 8013e08:	af00      	add	r7, sp, #0
 8013e0a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8013e0c:	4b06      	ldr	r3, [pc, #24]	; (8013e28 <vTaskInternalSetTimeOutState+0x24>)
 8013e0e:	681a      	ldr	r2, [r3, #0]
 8013e10:	687b      	ldr	r3, [r7, #4]
 8013e12:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8013e14:	4b05      	ldr	r3, [pc, #20]	; (8013e2c <vTaskInternalSetTimeOutState+0x28>)
 8013e16:	681a      	ldr	r2, [r3, #0]
 8013e18:	687b      	ldr	r3, [r7, #4]
 8013e1a:	605a      	str	r2, [r3, #4]
}
 8013e1c:	bf00      	nop
 8013e1e:	370c      	adds	r7, #12
 8013e20:	46bd      	mov	sp, r7
 8013e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e26:	4770      	bx	lr
 8013e28:	20000e78 	.word	0x20000e78
 8013e2c:	20000e64 	.word	0x20000e64

08013e30 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8013e30:	b580      	push	{r7, lr}
 8013e32:	b088      	sub	sp, #32
 8013e34:	af00      	add	r7, sp, #0
 8013e36:	6078      	str	r0, [r7, #4]
 8013e38:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8013e3a:	687b      	ldr	r3, [r7, #4]
 8013e3c:	2b00      	cmp	r3, #0
 8013e3e:	d10b      	bne.n	8013e58 <xTaskCheckForTimeOut+0x28>
 8013e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e44:	b672      	cpsid	i
 8013e46:	f383 8811 	msr	BASEPRI, r3
 8013e4a:	f3bf 8f6f 	isb	sy
 8013e4e:	f3bf 8f4f 	dsb	sy
 8013e52:	b662      	cpsie	i
 8013e54:	613b      	str	r3, [r7, #16]
 8013e56:	e7fe      	b.n	8013e56 <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 8013e58:	683b      	ldr	r3, [r7, #0]
 8013e5a:	2b00      	cmp	r3, #0
 8013e5c:	d10b      	bne.n	8013e76 <xTaskCheckForTimeOut+0x46>
 8013e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e62:	b672      	cpsid	i
 8013e64:	f383 8811 	msr	BASEPRI, r3
 8013e68:	f3bf 8f6f 	isb	sy
 8013e6c:	f3bf 8f4f 	dsb	sy
 8013e70:	b662      	cpsie	i
 8013e72:	60fb      	str	r3, [r7, #12]
 8013e74:	e7fe      	b.n	8013e74 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 8013e76:	f000 ff5f 	bl	8014d38 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8013e7a:	4b1d      	ldr	r3, [pc, #116]	; (8013ef0 <xTaskCheckForTimeOut+0xc0>)
 8013e7c:	681b      	ldr	r3, [r3, #0]
 8013e7e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8013e80:	687b      	ldr	r3, [r7, #4]
 8013e82:	685b      	ldr	r3, [r3, #4]
 8013e84:	69ba      	ldr	r2, [r7, #24]
 8013e86:	1ad3      	subs	r3, r2, r3
 8013e88:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8013e8a:	683b      	ldr	r3, [r7, #0]
 8013e8c:	681b      	ldr	r3, [r3, #0]
 8013e8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013e92:	d102      	bne.n	8013e9a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8013e94:	2300      	movs	r3, #0
 8013e96:	61fb      	str	r3, [r7, #28]
 8013e98:	e023      	b.n	8013ee2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8013e9a:	687b      	ldr	r3, [r7, #4]
 8013e9c:	681a      	ldr	r2, [r3, #0]
 8013e9e:	4b15      	ldr	r3, [pc, #84]	; (8013ef4 <xTaskCheckForTimeOut+0xc4>)
 8013ea0:	681b      	ldr	r3, [r3, #0]
 8013ea2:	429a      	cmp	r2, r3
 8013ea4:	d007      	beq.n	8013eb6 <xTaskCheckForTimeOut+0x86>
 8013ea6:	687b      	ldr	r3, [r7, #4]
 8013ea8:	685b      	ldr	r3, [r3, #4]
 8013eaa:	69ba      	ldr	r2, [r7, #24]
 8013eac:	429a      	cmp	r2, r3
 8013eae:	d302      	bcc.n	8013eb6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8013eb0:	2301      	movs	r3, #1
 8013eb2:	61fb      	str	r3, [r7, #28]
 8013eb4:	e015      	b.n	8013ee2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8013eb6:	683b      	ldr	r3, [r7, #0]
 8013eb8:	681b      	ldr	r3, [r3, #0]
 8013eba:	697a      	ldr	r2, [r7, #20]
 8013ebc:	429a      	cmp	r2, r3
 8013ebe:	d20b      	bcs.n	8013ed8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8013ec0:	683b      	ldr	r3, [r7, #0]
 8013ec2:	681a      	ldr	r2, [r3, #0]
 8013ec4:	697b      	ldr	r3, [r7, #20]
 8013ec6:	1ad2      	subs	r2, r2, r3
 8013ec8:	683b      	ldr	r3, [r7, #0]
 8013eca:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8013ecc:	6878      	ldr	r0, [r7, #4]
 8013ece:	f7ff ff99 	bl	8013e04 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8013ed2:	2300      	movs	r3, #0
 8013ed4:	61fb      	str	r3, [r7, #28]
 8013ed6:	e004      	b.n	8013ee2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8013ed8:	683b      	ldr	r3, [r7, #0]
 8013eda:	2200      	movs	r2, #0
 8013edc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8013ede:	2301      	movs	r3, #1
 8013ee0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8013ee2:	f000 ff5b 	bl	8014d9c <vPortExitCritical>

	return xReturn;
 8013ee6:	69fb      	ldr	r3, [r7, #28]
}
 8013ee8:	4618      	mov	r0, r3
 8013eea:	3720      	adds	r7, #32
 8013eec:	46bd      	mov	sp, r7
 8013eee:	bd80      	pop	{r7, pc}
 8013ef0:	20000e64 	.word	0x20000e64
 8013ef4:	20000e78 	.word	0x20000e78

08013ef8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8013ef8:	b480      	push	{r7}
 8013efa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8013efc:	4b03      	ldr	r3, [pc, #12]	; (8013f0c <vTaskMissedYield+0x14>)
 8013efe:	2201      	movs	r2, #1
 8013f00:	601a      	str	r2, [r3, #0]
}
 8013f02:	bf00      	nop
 8013f04:	46bd      	mov	sp, r7
 8013f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f0a:	4770      	bx	lr
 8013f0c:	20000e74 	.word	0x20000e74

08013f10 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8013f10:	b580      	push	{r7, lr}
 8013f12:	b082      	sub	sp, #8
 8013f14:	af00      	add	r7, sp, #0
 8013f16:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8013f18:	f000 f852 	bl	8013fc0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8013f1c:	4b06      	ldr	r3, [pc, #24]	; (8013f38 <prvIdleTask+0x28>)
 8013f1e:	681b      	ldr	r3, [r3, #0]
 8013f20:	2b01      	cmp	r3, #1
 8013f22:	d9f9      	bls.n	8013f18 <prvIdleTask+0x8>
			{
				taskYIELD();
 8013f24:	4b05      	ldr	r3, [pc, #20]	; (8013f3c <prvIdleTask+0x2c>)
 8013f26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013f2a:	601a      	str	r2, [r3, #0]
 8013f2c:	f3bf 8f4f 	dsb	sy
 8013f30:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8013f34:	e7f0      	b.n	8013f18 <prvIdleTask+0x8>
 8013f36:	bf00      	nop
 8013f38:	20000990 	.word	0x20000990
 8013f3c:	e000ed04 	.word	0xe000ed04

08013f40 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8013f40:	b580      	push	{r7, lr}
 8013f42:	b082      	sub	sp, #8
 8013f44:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013f46:	2300      	movs	r3, #0
 8013f48:	607b      	str	r3, [r7, #4]
 8013f4a:	e00c      	b.n	8013f66 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8013f4c:	687a      	ldr	r2, [r7, #4]
 8013f4e:	4613      	mov	r3, r2
 8013f50:	009b      	lsls	r3, r3, #2
 8013f52:	4413      	add	r3, r2
 8013f54:	009b      	lsls	r3, r3, #2
 8013f56:	4a12      	ldr	r2, [pc, #72]	; (8013fa0 <prvInitialiseTaskLists+0x60>)
 8013f58:	4413      	add	r3, r2
 8013f5a:	4618      	mov	r0, r3
 8013f5c:	f7fe f98c 	bl	8012278 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013f60:	687b      	ldr	r3, [r7, #4]
 8013f62:	3301      	adds	r3, #1
 8013f64:	607b      	str	r3, [r7, #4]
 8013f66:	687b      	ldr	r3, [r7, #4]
 8013f68:	2b37      	cmp	r3, #55	; 0x37
 8013f6a:	d9ef      	bls.n	8013f4c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8013f6c:	480d      	ldr	r0, [pc, #52]	; (8013fa4 <prvInitialiseTaskLists+0x64>)
 8013f6e:	f7fe f983 	bl	8012278 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8013f72:	480d      	ldr	r0, [pc, #52]	; (8013fa8 <prvInitialiseTaskLists+0x68>)
 8013f74:	f7fe f980 	bl	8012278 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8013f78:	480c      	ldr	r0, [pc, #48]	; (8013fac <prvInitialiseTaskLists+0x6c>)
 8013f7a:	f7fe f97d 	bl	8012278 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8013f7e:	480c      	ldr	r0, [pc, #48]	; (8013fb0 <prvInitialiseTaskLists+0x70>)
 8013f80:	f7fe f97a 	bl	8012278 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8013f84:	480b      	ldr	r0, [pc, #44]	; (8013fb4 <prvInitialiseTaskLists+0x74>)
 8013f86:	f7fe f977 	bl	8012278 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8013f8a:	4b0b      	ldr	r3, [pc, #44]	; (8013fb8 <prvInitialiseTaskLists+0x78>)
 8013f8c:	4a05      	ldr	r2, [pc, #20]	; (8013fa4 <prvInitialiseTaskLists+0x64>)
 8013f8e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8013f90:	4b0a      	ldr	r3, [pc, #40]	; (8013fbc <prvInitialiseTaskLists+0x7c>)
 8013f92:	4a05      	ldr	r2, [pc, #20]	; (8013fa8 <prvInitialiseTaskLists+0x68>)
 8013f94:	601a      	str	r2, [r3, #0]
}
 8013f96:	bf00      	nop
 8013f98:	3708      	adds	r7, #8
 8013f9a:	46bd      	mov	sp, r7
 8013f9c:	bd80      	pop	{r7, pc}
 8013f9e:	bf00      	nop
 8013fa0:	20000990 	.word	0x20000990
 8013fa4:	20000df0 	.word	0x20000df0
 8013fa8:	20000e04 	.word	0x20000e04
 8013fac:	20000e20 	.word	0x20000e20
 8013fb0:	20000e34 	.word	0x20000e34
 8013fb4:	20000e4c 	.word	0x20000e4c
 8013fb8:	20000e18 	.word	0x20000e18
 8013fbc:	20000e1c 	.word	0x20000e1c

08013fc0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8013fc0:	b580      	push	{r7, lr}
 8013fc2:	b082      	sub	sp, #8
 8013fc4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013fc6:	e019      	b.n	8013ffc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8013fc8:	f000 feb6 	bl	8014d38 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013fcc:	4b0f      	ldr	r3, [pc, #60]	; (801400c <prvCheckTasksWaitingTermination+0x4c>)
 8013fce:	68db      	ldr	r3, [r3, #12]
 8013fd0:	68db      	ldr	r3, [r3, #12]
 8013fd2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013fd4:	687b      	ldr	r3, [r7, #4]
 8013fd6:	3304      	adds	r3, #4
 8013fd8:	4618      	mov	r0, r3
 8013fda:	f7fe f9d7 	bl	801238c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8013fde:	4b0c      	ldr	r3, [pc, #48]	; (8014010 <prvCheckTasksWaitingTermination+0x50>)
 8013fe0:	681b      	ldr	r3, [r3, #0]
 8013fe2:	3b01      	subs	r3, #1
 8013fe4:	4a0a      	ldr	r2, [pc, #40]	; (8014010 <prvCheckTasksWaitingTermination+0x50>)
 8013fe6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8013fe8:	4b0a      	ldr	r3, [pc, #40]	; (8014014 <prvCheckTasksWaitingTermination+0x54>)
 8013fea:	681b      	ldr	r3, [r3, #0]
 8013fec:	3b01      	subs	r3, #1
 8013fee:	4a09      	ldr	r2, [pc, #36]	; (8014014 <prvCheckTasksWaitingTermination+0x54>)
 8013ff0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8013ff2:	f000 fed3 	bl	8014d9c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8013ff6:	6878      	ldr	r0, [r7, #4]
 8013ff8:	f000 f80e 	bl	8014018 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013ffc:	4b05      	ldr	r3, [pc, #20]	; (8014014 <prvCheckTasksWaitingTermination+0x54>)
 8013ffe:	681b      	ldr	r3, [r3, #0]
 8014000:	2b00      	cmp	r3, #0
 8014002:	d1e1      	bne.n	8013fc8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8014004:	bf00      	nop
 8014006:	3708      	adds	r7, #8
 8014008:	46bd      	mov	sp, r7
 801400a:	bd80      	pop	{r7, pc}
 801400c:	20000e34 	.word	0x20000e34
 8014010:	20000e60 	.word	0x20000e60
 8014014:	20000e48 	.word	0x20000e48

08014018 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8014018:	b580      	push	{r7, lr}
 801401a:	b084      	sub	sp, #16
 801401c:	af00      	add	r7, sp, #0
 801401e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8014020:	687b      	ldr	r3, [r7, #4]
 8014022:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8014026:	2b00      	cmp	r3, #0
 8014028:	d108      	bne.n	801403c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801402a:	687b      	ldr	r3, [r7, #4]
 801402c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801402e:	4618      	mov	r0, r3
 8014030:	f001 f86c 	bl	801510c <vPortFree>
				vPortFree( pxTCB );
 8014034:	6878      	ldr	r0, [r7, #4]
 8014036:	f001 f869 	bl	801510c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801403a:	e019      	b.n	8014070 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801403c:	687b      	ldr	r3, [r7, #4]
 801403e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8014042:	2b01      	cmp	r3, #1
 8014044:	d103      	bne.n	801404e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8014046:	6878      	ldr	r0, [r7, #4]
 8014048:	f001 f860 	bl	801510c <vPortFree>
	}
 801404c:	e010      	b.n	8014070 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801404e:	687b      	ldr	r3, [r7, #4]
 8014050:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8014054:	2b02      	cmp	r3, #2
 8014056:	d00b      	beq.n	8014070 <prvDeleteTCB+0x58>
 8014058:	f04f 0350 	mov.w	r3, #80	; 0x50
 801405c:	b672      	cpsid	i
 801405e:	f383 8811 	msr	BASEPRI, r3
 8014062:	f3bf 8f6f 	isb	sy
 8014066:	f3bf 8f4f 	dsb	sy
 801406a:	b662      	cpsie	i
 801406c:	60fb      	str	r3, [r7, #12]
 801406e:	e7fe      	b.n	801406e <prvDeleteTCB+0x56>
	}
 8014070:	bf00      	nop
 8014072:	3710      	adds	r7, #16
 8014074:	46bd      	mov	sp, r7
 8014076:	bd80      	pop	{r7, pc}

08014078 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8014078:	b480      	push	{r7}
 801407a:	b083      	sub	sp, #12
 801407c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801407e:	4b0c      	ldr	r3, [pc, #48]	; (80140b0 <prvResetNextTaskUnblockTime+0x38>)
 8014080:	681b      	ldr	r3, [r3, #0]
 8014082:	681b      	ldr	r3, [r3, #0]
 8014084:	2b00      	cmp	r3, #0
 8014086:	d104      	bne.n	8014092 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8014088:	4b0a      	ldr	r3, [pc, #40]	; (80140b4 <prvResetNextTaskUnblockTime+0x3c>)
 801408a:	f04f 32ff 	mov.w	r2, #4294967295
 801408e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8014090:	e008      	b.n	80140a4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014092:	4b07      	ldr	r3, [pc, #28]	; (80140b0 <prvResetNextTaskUnblockTime+0x38>)
 8014094:	681b      	ldr	r3, [r3, #0]
 8014096:	68db      	ldr	r3, [r3, #12]
 8014098:	68db      	ldr	r3, [r3, #12]
 801409a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801409c:	687b      	ldr	r3, [r7, #4]
 801409e:	685b      	ldr	r3, [r3, #4]
 80140a0:	4a04      	ldr	r2, [pc, #16]	; (80140b4 <prvResetNextTaskUnblockTime+0x3c>)
 80140a2:	6013      	str	r3, [r2, #0]
}
 80140a4:	bf00      	nop
 80140a6:	370c      	adds	r7, #12
 80140a8:	46bd      	mov	sp, r7
 80140aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140ae:	4770      	bx	lr
 80140b0:	20000e18 	.word	0x20000e18
 80140b4:	20000e80 	.word	0x20000e80

080140b8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80140b8:	b480      	push	{r7}
 80140ba:	b083      	sub	sp, #12
 80140bc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80140be:	4b0b      	ldr	r3, [pc, #44]	; (80140ec <xTaskGetSchedulerState+0x34>)
 80140c0:	681b      	ldr	r3, [r3, #0]
 80140c2:	2b00      	cmp	r3, #0
 80140c4:	d102      	bne.n	80140cc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80140c6:	2301      	movs	r3, #1
 80140c8:	607b      	str	r3, [r7, #4]
 80140ca:	e008      	b.n	80140de <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80140cc:	4b08      	ldr	r3, [pc, #32]	; (80140f0 <xTaskGetSchedulerState+0x38>)
 80140ce:	681b      	ldr	r3, [r3, #0]
 80140d0:	2b00      	cmp	r3, #0
 80140d2:	d102      	bne.n	80140da <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80140d4:	2302      	movs	r3, #2
 80140d6:	607b      	str	r3, [r7, #4]
 80140d8:	e001      	b.n	80140de <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80140da:	2300      	movs	r3, #0
 80140dc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80140de:	687b      	ldr	r3, [r7, #4]
	}
 80140e0:	4618      	mov	r0, r3
 80140e2:	370c      	adds	r7, #12
 80140e4:	46bd      	mov	sp, r7
 80140e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140ea:	4770      	bx	lr
 80140ec:	20000e6c 	.word	0x20000e6c
 80140f0:	20000e88 	.word	0x20000e88

080140f4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80140f4:	b580      	push	{r7, lr}
 80140f6:	b084      	sub	sp, #16
 80140f8:	af00      	add	r7, sp, #0
 80140fa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80140fc:	687b      	ldr	r3, [r7, #4]
 80140fe:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8014100:	2300      	movs	r3, #0
 8014102:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8014104:	687b      	ldr	r3, [r7, #4]
 8014106:	2b00      	cmp	r3, #0
 8014108:	d051      	beq.n	80141ae <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801410a:	68bb      	ldr	r3, [r7, #8]
 801410c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801410e:	4b2a      	ldr	r3, [pc, #168]	; (80141b8 <xTaskPriorityInherit+0xc4>)
 8014110:	681b      	ldr	r3, [r3, #0]
 8014112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014114:	429a      	cmp	r2, r3
 8014116:	d241      	bcs.n	801419c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8014118:	68bb      	ldr	r3, [r7, #8]
 801411a:	699b      	ldr	r3, [r3, #24]
 801411c:	2b00      	cmp	r3, #0
 801411e:	db06      	blt.n	801412e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014120:	4b25      	ldr	r3, [pc, #148]	; (80141b8 <xTaskPriorityInherit+0xc4>)
 8014122:	681b      	ldr	r3, [r3, #0]
 8014124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014126:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801412a:	68bb      	ldr	r3, [r7, #8]
 801412c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801412e:	68bb      	ldr	r3, [r7, #8]
 8014130:	6959      	ldr	r1, [r3, #20]
 8014132:	68bb      	ldr	r3, [r7, #8]
 8014134:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014136:	4613      	mov	r3, r2
 8014138:	009b      	lsls	r3, r3, #2
 801413a:	4413      	add	r3, r2
 801413c:	009b      	lsls	r3, r3, #2
 801413e:	4a1f      	ldr	r2, [pc, #124]	; (80141bc <xTaskPriorityInherit+0xc8>)
 8014140:	4413      	add	r3, r2
 8014142:	4299      	cmp	r1, r3
 8014144:	d122      	bne.n	801418c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014146:	68bb      	ldr	r3, [r7, #8]
 8014148:	3304      	adds	r3, #4
 801414a:	4618      	mov	r0, r3
 801414c:	f7fe f91e 	bl	801238c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8014150:	4b19      	ldr	r3, [pc, #100]	; (80141b8 <xTaskPriorityInherit+0xc4>)
 8014152:	681b      	ldr	r3, [r3, #0]
 8014154:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014156:	68bb      	ldr	r3, [r7, #8]
 8014158:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801415a:	68bb      	ldr	r3, [r7, #8]
 801415c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801415e:	4b18      	ldr	r3, [pc, #96]	; (80141c0 <xTaskPriorityInherit+0xcc>)
 8014160:	681b      	ldr	r3, [r3, #0]
 8014162:	429a      	cmp	r2, r3
 8014164:	d903      	bls.n	801416e <xTaskPriorityInherit+0x7a>
 8014166:	68bb      	ldr	r3, [r7, #8]
 8014168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801416a:	4a15      	ldr	r2, [pc, #84]	; (80141c0 <xTaskPriorityInherit+0xcc>)
 801416c:	6013      	str	r3, [r2, #0]
 801416e:	68bb      	ldr	r3, [r7, #8]
 8014170:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014172:	4613      	mov	r3, r2
 8014174:	009b      	lsls	r3, r3, #2
 8014176:	4413      	add	r3, r2
 8014178:	009b      	lsls	r3, r3, #2
 801417a:	4a10      	ldr	r2, [pc, #64]	; (80141bc <xTaskPriorityInherit+0xc8>)
 801417c:	441a      	add	r2, r3
 801417e:	68bb      	ldr	r3, [r7, #8]
 8014180:	3304      	adds	r3, #4
 8014182:	4619      	mov	r1, r3
 8014184:	4610      	mov	r0, r2
 8014186:	f7fe f8a4 	bl	80122d2 <vListInsertEnd>
 801418a:	e004      	b.n	8014196 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801418c:	4b0a      	ldr	r3, [pc, #40]	; (80141b8 <xTaskPriorityInherit+0xc4>)
 801418e:	681b      	ldr	r3, [r3, #0]
 8014190:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014192:	68bb      	ldr	r3, [r7, #8]
 8014194:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8014196:	2301      	movs	r3, #1
 8014198:	60fb      	str	r3, [r7, #12]
 801419a:	e008      	b.n	80141ae <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801419c:	68bb      	ldr	r3, [r7, #8]
 801419e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80141a0:	4b05      	ldr	r3, [pc, #20]	; (80141b8 <xTaskPriorityInherit+0xc4>)
 80141a2:	681b      	ldr	r3, [r3, #0]
 80141a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80141a6:	429a      	cmp	r2, r3
 80141a8:	d201      	bcs.n	80141ae <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80141aa:	2301      	movs	r3, #1
 80141ac:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80141ae:	68fb      	ldr	r3, [r7, #12]
	}
 80141b0:	4618      	mov	r0, r3
 80141b2:	3710      	adds	r7, #16
 80141b4:	46bd      	mov	sp, r7
 80141b6:	bd80      	pop	{r7, pc}
 80141b8:	2000098c 	.word	0x2000098c
 80141bc:	20000990 	.word	0x20000990
 80141c0:	20000e68 	.word	0x20000e68

080141c4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80141c4:	b580      	push	{r7, lr}
 80141c6:	b086      	sub	sp, #24
 80141c8:	af00      	add	r7, sp, #0
 80141ca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80141cc:	687b      	ldr	r3, [r7, #4]
 80141ce:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80141d0:	2300      	movs	r3, #0
 80141d2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80141d4:	687b      	ldr	r3, [r7, #4]
 80141d6:	2b00      	cmp	r3, #0
 80141d8:	d058      	beq.n	801428c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80141da:	4b2f      	ldr	r3, [pc, #188]	; (8014298 <xTaskPriorityDisinherit+0xd4>)
 80141dc:	681b      	ldr	r3, [r3, #0]
 80141de:	693a      	ldr	r2, [r7, #16]
 80141e0:	429a      	cmp	r2, r3
 80141e2:	d00b      	beq.n	80141fc <xTaskPriorityDisinherit+0x38>
 80141e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141e8:	b672      	cpsid	i
 80141ea:	f383 8811 	msr	BASEPRI, r3
 80141ee:	f3bf 8f6f 	isb	sy
 80141f2:	f3bf 8f4f 	dsb	sy
 80141f6:	b662      	cpsie	i
 80141f8:	60fb      	str	r3, [r7, #12]
 80141fa:	e7fe      	b.n	80141fa <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 80141fc:	693b      	ldr	r3, [r7, #16]
 80141fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014200:	2b00      	cmp	r3, #0
 8014202:	d10b      	bne.n	801421c <xTaskPriorityDisinherit+0x58>
 8014204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014208:	b672      	cpsid	i
 801420a:	f383 8811 	msr	BASEPRI, r3
 801420e:	f3bf 8f6f 	isb	sy
 8014212:	f3bf 8f4f 	dsb	sy
 8014216:	b662      	cpsie	i
 8014218:	60bb      	str	r3, [r7, #8]
 801421a:	e7fe      	b.n	801421a <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 801421c:	693b      	ldr	r3, [r7, #16]
 801421e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014220:	1e5a      	subs	r2, r3, #1
 8014222:	693b      	ldr	r3, [r7, #16]
 8014224:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8014226:	693b      	ldr	r3, [r7, #16]
 8014228:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801422a:	693b      	ldr	r3, [r7, #16]
 801422c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801422e:	429a      	cmp	r2, r3
 8014230:	d02c      	beq.n	801428c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8014232:	693b      	ldr	r3, [r7, #16]
 8014234:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014236:	2b00      	cmp	r3, #0
 8014238:	d128      	bne.n	801428c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801423a:	693b      	ldr	r3, [r7, #16]
 801423c:	3304      	adds	r3, #4
 801423e:	4618      	mov	r0, r3
 8014240:	f7fe f8a4 	bl	801238c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8014244:	693b      	ldr	r3, [r7, #16]
 8014246:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014248:	693b      	ldr	r3, [r7, #16]
 801424a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801424c:	693b      	ldr	r3, [r7, #16]
 801424e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014250:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8014254:	693b      	ldr	r3, [r7, #16]
 8014256:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8014258:	693b      	ldr	r3, [r7, #16]
 801425a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801425c:	4b0f      	ldr	r3, [pc, #60]	; (801429c <xTaskPriorityDisinherit+0xd8>)
 801425e:	681b      	ldr	r3, [r3, #0]
 8014260:	429a      	cmp	r2, r3
 8014262:	d903      	bls.n	801426c <xTaskPriorityDisinherit+0xa8>
 8014264:	693b      	ldr	r3, [r7, #16]
 8014266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014268:	4a0c      	ldr	r2, [pc, #48]	; (801429c <xTaskPriorityDisinherit+0xd8>)
 801426a:	6013      	str	r3, [r2, #0]
 801426c:	693b      	ldr	r3, [r7, #16]
 801426e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014270:	4613      	mov	r3, r2
 8014272:	009b      	lsls	r3, r3, #2
 8014274:	4413      	add	r3, r2
 8014276:	009b      	lsls	r3, r3, #2
 8014278:	4a09      	ldr	r2, [pc, #36]	; (80142a0 <xTaskPriorityDisinherit+0xdc>)
 801427a:	441a      	add	r2, r3
 801427c:	693b      	ldr	r3, [r7, #16]
 801427e:	3304      	adds	r3, #4
 8014280:	4619      	mov	r1, r3
 8014282:	4610      	mov	r0, r2
 8014284:	f7fe f825 	bl	80122d2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8014288:	2301      	movs	r3, #1
 801428a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801428c:	697b      	ldr	r3, [r7, #20]
	}
 801428e:	4618      	mov	r0, r3
 8014290:	3718      	adds	r7, #24
 8014292:	46bd      	mov	sp, r7
 8014294:	bd80      	pop	{r7, pc}
 8014296:	bf00      	nop
 8014298:	2000098c 	.word	0x2000098c
 801429c:	20000e68 	.word	0x20000e68
 80142a0:	20000990 	.word	0x20000990

080142a4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80142a4:	b580      	push	{r7, lr}
 80142a6:	b088      	sub	sp, #32
 80142a8:	af00      	add	r7, sp, #0
 80142aa:	6078      	str	r0, [r7, #4]
 80142ac:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80142ae:	687b      	ldr	r3, [r7, #4]
 80142b0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80142b2:	2301      	movs	r3, #1
 80142b4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80142b6:	687b      	ldr	r3, [r7, #4]
 80142b8:	2b00      	cmp	r3, #0
 80142ba:	d06c      	beq.n	8014396 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80142bc:	69bb      	ldr	r3, [r7, #24]
 80142be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80142c0:	2b00      	cmp	r3, #0
 80142c2:	d10b      	bne.n	80142dc <vTaskPriorityDisinheritAfterTimeout+0x38>
 80142c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80142c8:	b672      	cpsid	i
 80142ca:	f383 8811 	msr	BASEPRI, r3
 80142ce:	f3bf 8f6f 	isb	sy
 80142d2:	f3bf 8f4f 	dsb	sy
 80142d6:	b662      	cpsie	i
 80142d8:	60fb      	str	r3, [r7, #12]
 80142da:	e7fe      	b.n	80142da <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80142dc:	69bb      	ldr	r3, [r7, #24]
 80142de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80142e0:	683a      	ldr	r2, [r7, #0]
 80142e2:	429a      	cmp	r2, r3
 80142e4:	d902      	bls.n	80142ec <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80142e6:	683b      	ldr	r3, [r7, #0]
 80142e8:	61fb      	str	r3, [r7, #28]
 80142ea:	e002      	b.n	80142f2 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80142ec:	69bb      	ldr	r3, [r7, #24]
 80142ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80142f0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80142f2:	69bb      	ldr	r3, [r7, #24]
 80142f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80142f6:	69fa      	ldr	r2, [r7, #28]
 80142f8:	429a      	cmp	r2, r3
 80142fa:	d04c      	beq.n	8014396 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80142fc:	69bb      	ldr	r3, [r7, #24]
 80142fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014300:	697a      	ldr	r2, [r7, #20]
 8014302:	429a      	cmp	r2, r3
 8014304:	d147      	bne.n	8014396 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8014306:	4b26      	ldr	r3, [pc, #152]	; (80143a0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8014308:	681b      	ldr	r3, [r3, #0]
 801430a:	69ba      	ldr	r2, [r7, #24]
 801430c:	429a      	cmp	r2, r3
 801430e:	d10b      	bne.n	8014328 <vTaskPriorityDisinheritAfterTimeout+0x84>
 8014310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014314:	b672      	cpsid	i
 8014316:	f383 8811 	msr	BASEPRI, r3
 801431a:	f3bf 8f6f 	isb	sy
 801431e:	f3bf 8f4f 	dsb	sy
 8014322:	b662      	cpsie	i
 8014324:	60bb      	str	r3, [r7, #8]
 8014326:	e7fe      	b.n	8014326 <vTaskPriorityDisinheritAfterTimeout+0x82>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8014328:	69bb      	ldr	r3, [r7, #24]
 801432a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801432c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801432e:	69bb      	ldr	r3, [r7, #24]
 8014330:	69fa      	ldr	r2, [r7, #28]
 8014332:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8014334:	69bb      	ldr	r3, [r7, #24]
 8014336:	699b      	ldr	r3, [r3, #24]
 8014338:	2b00      	cmp	r3, #0
 801433a:	db04      	blt.n	8014346 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801433c:	69fb      	ldr	r3, [r7, #28]
 801433e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8014342:	69bb      	ldr	r3, [r7, #24]
 8014344:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8014346:	69bb      	ldr	r3, [r7, #24]
 8014348:	6959      	ldr	r1, [r3, #20]
 801434a:	693a      	ldr	r2, [r7, #16]
 801434c:	4613      	mov	r3, r2
 801434e:	009b      	lsls	r3, r3, #2
 8014350:	4413      	add	r3, r2
 8014352:	009b      	lsls	r3, r3, #2
 8014354:	4a13      	ldr	r2, [pc, #76]	; (80143a4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8014356:	4413      	add	r3, r2
 8014358:	4299      	cmp	r1, r3
 801435a:	d11c      	bne.n	8014396 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801435c:	69bb      	ldr	r3, [r7, #24]
 801435e:	3304      	adds	r3, #4
 8014360:	4618      	mov	r0, r3
 8014362:	f7fe f813 	bl	801238c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8014366:	69bb      	ldr	r3, [r7, #24]
 8014368:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801436a:	4b0f      	ldr	r3, [pc, #60]	; (80143a8 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 801436c:	681b      	ldr	r3, [r3, #0]
 801436e:	429a      	cmp	r2, r3
 8014370:	d903      	bls.n	801437a <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8014372:	69bb      	ldr	r3, [r7, #24]
 8014374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014376:	4a0c      	ldr	r2, [pc, #48]	; (80143a8 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8014378:	6013      	str	r3, [r2, #0]
 801437a:	69bb      	ldr	r3, [r7, #24]
 801437c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801437e:	4613      	mov	r3, r2
 8014380:	009b      	lsls	r3, r3, #2
 8014382:	4413      	add	r3, r2
 8014384:	009b      	lsls	r3, r3, #2
 8014386:	4a07      	ldr	r2, [pc, #28]	; (80143a4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8014388:	441a      	add	r2, r3
 801438a:	69bb      	ldr	r3, [r7, #24]
 801438c:	3304      	adds	r3, #4
 801438e:	4619      	mov	r1, r3
 8014390:	4610      	mov	r0, r2
 8014392:	f7fd ff9e 	bl	80122d2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8014396:	bf00      	nop
 8014398:	3720      	adds	r7, #32
 801439a:	46bd      	mov	sp, r7
 801439c:	bd80      	pop	{r7, pc}
 801439e:	bf00      	nop
 80143a0:	2000098c 	.word	0x2000098c
 80143a4:	20000990 	.word	0x20000990
 80143a8:	20000e68 	.word	0x20000e68

080143ac <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80143ac:	b480      	push	{r7}
 80143ae:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80143b0:	4b07      	ldr	r3, [pc, #28]	; (80143d0 <pvTaskIncrementMutexHeldCount+0x24>)
 80143b2:	681b      	ldr	r3, [r3, #0]
 80143b4:	2b00      	cmp	r3, #0
 80143b6:	d004      	beq.n	80143c2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80143b8:	4b05      	ldr	r3, [pc, #20]	; (80143d0 <pvTaskIncrementMutexHeldCount+0x24>)
 80143ba:	681b      	ldr	r3, [r3, #0]
 80143bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80143be:	3201      	adds	r2, #1
 80143c0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80143c2:	4b03      	ldr	r3, [pc, #12]	; (80143d0 <pvTaskIncrementMutexHeldCount+0x24>)
 80143c4:	681b      	ldr	r3, [r3, #0]
	}
 80143c6:	4618      	mov	r0, r3
 80143c8:	46bd      	mov	sp, r7
 80143ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143ce:	4770      	bx	lr
 80143d0:	2000098c 	.word	0x2000098c

080143d4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80143d4:	b580      	push	{r7, lr}
 80143d6:	b084      	sub	sp, #16
 80143d8:	af00      	add	r7, sp, #0
 80143da:	6078      	str	r0, [r7, #4]
 80143dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80143de:	4b21      	ldr	r3, [pc, #132]	; (8014464 <prvAddCurrentTaskToDelayedList+0x90>)
 80143e0:	681b      	ldr	r3, [r3, #0]
 80143e2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80143e4:	4b20      	ldr	r3, [pc, #128]	; (8014468 <prvAddCurrentTaskToDelayedList+0x94>)
 80143e6:	681b      	ldr	r3, [r3, #0]
 80143e8:	3304      	adds	r3, #4
 80143ea:	4618      	mov	r0, r3
 80143ec:	f7fd ffce 	bl	801238c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80143f0:	687b      	ldr	r3, [r7, #4]
 80143f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80143f6:	d10a      	bne.n	801440e <prvAddCurrentTaskToDelayedList+0x3a>
 80143f8:	683b      	ldr	r3, [r7, #0]
 80143fa:	2b00      	cmp	r3, #0
 80143fc:	d007      	beq.n	801440e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80143fe:	4b1a      	ldr	r3, [pc, #104]	; (8014468 <prvAddCurrentTaskToDelayedList+0x94>)
 8014400:	681b      	ldr	r3, [r3, #0]
 8014402:	3304      	adds	r3, #4
 8014404:	4619      	mov	r1, r3
 8014406:	4819      	ldr	r0, [pc, #100]	; (801446c <prvAddCurrentTaskToDelayedList+0x98>)
 8014408:	f7fd ff63 	bl	80122d2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801440c:	e026      	b.n	801445c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801440e:	68fa      	ldr	r2, [r7, #12]
 8014410:	687b      	ldr	r3, [r7, #4]
 8014412:	4413      	add	r3, r2
 8014414:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8014416:	4b14      	ldr	r3, [pc, #80]	; (8014468 <prvAddCurrentTaskToDelayedList+0x94>)
 8014418:	681b      	ldr	r3, [r3, #0]
 801441a:	68ba      	ldr	r2, [r7, #8]
 801441c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801441e:	68ba      	ldr	r2, [r7, #8]
 8014420:	68fb      	ldr	r3, [r7, #12]
 8014422:	429a      	cmp	r2, r3
 8014424:	d209      	bcs.n	801443a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014426:	4b12      	ldr	r3, [pc, #72]	; (8014470 <prvAddCurrentTaskToDelayedList+0x9c>)
 8014428:	681a      	ldr	r2, [r3, #0]
 801442a:	4b0f      	ldr	r3, [pc, #60]	; (8014468 <prvAddCurrentTaskToDelayedList+0x94>)
 801442c:	681b      	ldr	r3, [r3, #0]
 801442e:	3304      	adds	r3, #4
 8014430:	4619      	mov	r1, r3
 8014432:	4610      	mov	r0, r2
 8014434:	f7fd ff71 	bl	801231a <vListInsert>
}
 8014438:	e010      	b.n	801445c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801443a:	4b0e      	ldr	r3, [pc, #56]	; (8014474 <prvAddCurrentTaskToDelayedList+0xa0>)
 801443c:	681a      	ldr	r2, [r3, #0]
 801443e:	4b0a      	ldr	r3, [pc, #40]	; (8014468 <prvAddCurrentTaskToDelayedList+0x94>)
 8014440:	681b      	ldr	r3, [r3, #0]
 8014442:	3304      	adds	r3, #4
 8014444:	4619      	mov	r1, r3
 8014446:	4610      	mov	r0, r2
 8014448:	f7fd ff67 	bl	801231a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801444c:	4b0a      	ldr	r3, [pc, #40]	; (8014478 <prvAddCurrentTaskToDelayedList+0xa4>)
 801444e:	681b      	ldr	r3, [r3, #0]
 8014450:	68ba      	ldr	r2, [r7, #8]
 8014452:	429a      	cmp	r2, r3
 8014454:	d202      	bcs.n	801445c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8014456:	4a08      	ldr	r2, [pc, #32]	; (8014478 <prvAddCurrentTaskToDelayedList+0xa4>)
 8014458:	68bb      	ldr	r3, [r7, #8]
 801445a:	6013      	str	r3, [r2, #0]
}
 801445c:	bf00      	nop
 801445e:	3710      	adds	r7, #16
 8014460:	46bd      	mov	sp, r7
 8014462:	bd80      	pop	{r7, pc}
 8014464:	20000e64 	.word	0x20000e64
 8014468:	2000098c 	.word	0x2000098c
 801446c:	20000e4c 	.word	0x20000e4c
 8014470:	20000e1c 	.word	0x20000e1c
 8014474:	20000e18 	.word	0x20000e18
 8014478:	20000e80 	.word	0x20000e80

0801447c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 801447c:	b580      	push	{r7, lr}
 801447e:	b08a      	sub	sp, #40	; 0x28
 8014480:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8014482:	2300      	movs	r3, #0
 8014484:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8014486:	f000 fb0d 	bl	8014aa4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801448a:	4b1d      	ldr	r3, [pc, #116]	; (8014500 <xTimerCreateTimerTask+0x84>)
 801448c:	681b      	ldr	r3, [r3, #0]
 801448e:	2b00      	cmp	r3, #0
 8014490:	d021      	beq.n	80144d6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8014492:	2300      	movs	r3, #0
 8014494:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8014496:	2300      	movs	r3, #0
 8014498:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801449a:	1d3a      	adds	r2, r7, #4
 801449c:	f107 0108 	add.w	r1, r7, #8
 80144a0:	f107 030c 	add.w	r3, r7, #12
 80144a4:	4618      	mov	r0, r3
 80144a6:	f7fd fecd 	bl	8012244 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80144aa:	6879      	ldr	r1, [r7, #4]
 80144ac:	68bb      	ldr	r3, [r7, #8]
 80144ae:	68fa      	ldr	r2, [r7, #12]
 80144b0:	9202      	str	r2, [sp, #8]
 80144b2:	9301      	str	r3, [sp, #4]
 80144b4:	2302      	movs	r3, #2
 80144b6:	9300      	str	r3, [sp, #0]
 80144b8:	2300      	movs	r3, #0
 80144ba:	460a      	mov	r2, r1
 80144bc:	4911      	ldr	r1, [pc, #68]	; (8014504 <xTimerCreateTimerTask+0x88>)
 80144be:	4812      	ldr	r0, [pc, #72]	; (8014508 <xTimerCreateTimerTask+0x8c>)
 80144c0:	f7fe ffc0 	bl	8013444 <xTaskCreateStatic>
 80144c4:	4602      	mov	r2, r0
 80144c6:	4b11      	ldr	r3, [pc, #68]	; (801450c <xTimerCreateTimerTask+0x90>)
 80144c8:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80144ca:	4b10      	ldr	r3, [pc, #64]	; (801450c <xTimerCreateTimerTask+0x90>)
 80144cc:	681b      	ldr	r3, [r3, #0]
 80144ce:	2b00      	cmp	r3, #0
 80144d0:	d001      	beq.n	80144d6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80144d2:	2301      	movs	r3, #1
 80144d4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80144d6:	697b      	ldr	r3, [r7, #20]
 80144d8:	2b00      	cmp	r3, #0
 80144da:	d10b      	bne.n	80144f4 <xTimerCreateTimerTask+0x78>
 80144dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80144e0:	b672      	cpsid	i
 80144e2:	f383 8811 	msr	BASEPRI, r3
 80144e6:	f3bf 8f6f 	isb	sy
 80144ea:	f3bf 8f4f 	dsb	sy
 80144ee:	b662      	cpsie	i
 80144f0:	613b      	str	r3, [r7, #16]
 80144f2:	e7fe      	b.n	80144f2 <xTimerCreateTimerTask+0x76>
	return xReturn;
 80144f4:	697b      	ldr	r3, [r7, #20]
}
 80144f6:	4618      	mov	r0, r3
 80144f8:	3718      	adds	r7, #24
 80144fa:	46bd      	mov	sp, r7
 80144fc:	bd80      	pop	{r7, pc}
 80144fe:	bf00      	nop
 8014500:	20000ebc 	.word	0x20000ebc
 8014504:	08016064 	.word	0x08016064
 8014508:	08014649 	.word	0x08014649
 801450c:	20000ec0 	.word	0x20000ec0

08014510 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8014510:	b580      	push	{r7, lr}
 8014512:	b08a      	sub	sp, #40	; 0x28
 8014514:	af00      	add	r7, sp, #0
 8014516:	60f8      	str	r0, [r7, #12]
 8014518:	60b9      	str	r1, [r7, #8]
 801451a:	607a      	str	r2, [r7, #4]
 801451c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801451e:	2300      	movs	r3, #0
 8014520:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8014522:	68fb      	ldr	r3, [r7, #12]
 8014524:	2b00      	cmp	r3, #0
 8014526:	d10b      	bne.n	8014540 <xTimerGenericCommand+0x30>
 8014528:	f04f 0350 	mov.w	r3, #80	; 0x50
 801452c:	b672      	cpsid	i
 801452e:	f383 8811 	msr	BASEPRI, r3
 8014532:	f3bf 8f6f 	isb	sy
 8014536:	f3bf 8f4f 	dsb	sy
 801453a:	b662      	cpsie	i
 801453c:	623b      	str	r3, [r7, #32]
 801453e:	e7fe      	b.n	801453e <xTimerGenericCommand+0x2e>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8014540:	4b19      	ldr	r3, [pc, #100]	; (80145a8 <xTimerGenericCommand+0x98>)
 8014542:	681b      	ldr	r3, [r3, #0]
 8014544:	2b00      	cmp	r3, #0
 8014546:	d02a      	beq.n	801459e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8014548:	68bb      	ldr	r3, [r7, #8]
 801454a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801454c:	687b      	ldr	r3, [r7, #4]
 801454e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8014550:	68fb      	ldr	r3, [r7, #12]
 8014552:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8014554:	68bb      	ldr	r3, [r7, #8]
 8014556:	2b05      	cmp	r3, #5
 8014558:	dc18      	bgt.n	801458c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801455a:	f7ff fdad 	bl	80140b8 <xTaskGetSchedulerState>
 801455e:	4603      	mov	r3, r0
 8014560:	2b02      	cmp	r3, #2
 8014562:	d109      	bne.n	8014578 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8014564:	4b10      	ldr	r3, [pc, #64]	; (80145a8 <xTimerGenericCommand+0x98>)
 8014566:	6818      	ldr	r0, [r3, #0]
 8014568:	f107 0110 	add.w	r1, r7, #16
 801456c:	2300      	movs	r3, #0
 801456e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014570:	f7fe f8f0 	bl	8012754 <xQueueGenericSend>
 8014574:	6278      	str	r0, [r7, #36]	; 0x24
 8014576:	e012      	b.n	801459e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8014578:	4b0b      	ldr	r3, [pc, #44]	; (80145a8 <xTimerGenericCommand+0x98>)
 801457a:	6818      	ldr	r0, [r3, #0]
 801457c:	f107 0110 	add.w	r1, r7, #16
 8014580:	2300      	movs	r3, #0
 8014582:	2200      	movs	r2, #0
 8014584:	f7fe f8e6 	bl	8012754 <xQueueGenericSend>
 8014588:	6278      	str	r0, [r7, #36]	; 0x24
 801458a:	e008      	b.n	801459e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801458c:	4b06      	ldr	r3, [pc, #24]	; (80145a8 <xTimerGenericCommand+0x98>)
 801458e:	6818      	ldr	r0, [r3, #0]
 8014590:	f107 0110 	add.w	r1, r7, #16
 8014594:	2300      	movs	r3, #0
 8014596:	683a      	ldr	r2, [r7, #0]
 8014598:	f7fe f9de 	bl	8012958 <xQueueGenericSendFromISR>
 801459c:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801459e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80145a0:	4618      	mov	r0, r3
 80145a2:	3728      	adds	r7, #40	; 0x28
 80145a4:	46bd      	mov	sp, r7
 80145a6:	bd80      	pop	{r7, pc}
 80145a8:	20000ebc 	.word	0x20000ebc

080145ac <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80145ac:	b580      	push	{r7, lr}
 80145ae:	b088      	sub	sp, #32
 80145b0:	af02      	add	r7, sp, #8
 80145b2:	6078      	str	r0, [r7, #4]
 80145b4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80145b6:	4b23      	ldr	r3, [pc, #140]	; (8014644 <prvProcessExpiredTimer+0x98>)
 80145b8:	681b      	ldr	r3, [r3, #0]
 80145ba:	68db      	ldr	r3, [r3, #12]
 80145bc:	68db      	ldr	r3, [r3, #12]
 80145be:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80145c0:	697b      	ldr	r3, [r7, #20]
 80145c2:	3304      	adds	r3, #4
 80145c4:	4618      	mov	r0, r3
 80145c6:	f7fd fee1 	bl	801238c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80145ca:	697b      	ldr	r3, [r7, #20]
 80145cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80145d0:	f003 0304 	and.w	r3, r3, #4
 80145d4:	2b00      	cmp	r3, #0
 80145d6:	d023      	beq.n	8014620 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80145d8:	697b      	ldr	r3, [r7, #20]
 80145da:	699a      	ldr	r2, [r3, #24]
 80145dc:	687b      	ldr	r3, [r7, #4]
 80145de:	18d1      	adds	r1, r2, r3
 80145e0:	687b      	ldr	r3, [r7, #4]
 80145e2:	683a      	ldr	r2, [r7, #0]
 80145e4:	6978      	ldr	r0, [r7, #20]
 80145e6:	f000 f8d3 	bl	8014790 <prvInsertTimerInActiveList>
 80145ea:	4603      	mov	r3, r0
 80145ec:	2b00      	cmp	r3, #0
 80145ee:	d020      	beq.n	8014632 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80145f0:	2300      	movs	r3, #0
 80145f2:	9300      	str	r3, [sp, #0]
 80145f4:	2300      	movs	r3, #0
 80145f6:	687a      	ldr	r2, [r7, #4]
 80145f8:	2100      	movs	r1, #0
 80145fa:	6978      	ldr	r0, [r7, #20]
 80145fc:	f7ff ff88 	bl	8014510 <xTimerGenericCommand>
 8014600:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8014602:	693b      	ldr	r3, [r7, #16]
 8014604:	2b00      	cmp	r3, #0
 8014606:	d114      	bne.n	8014632 <prvProcessExpiredTimer+0x86>
 8014608:	f04f 0350 	mov.w	r3, #80	; 0x50
 801460c:	b672      	cpsid	i
 801460e:	f383 8811 	msr	BASEPRI, r3
 8014612:	f3bf 8f6f 	isb	sy
 8014616:	f3bf 8f4f 	dsb	sy
 801461a:	b662      	cpsie	i
 801461c:	60fb      	str	r3, [r7, #12]
 801461e:	e7fe      	b.n	801461e <prvProcessExpiredTimer+0x72>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8014620:	697b      	ldr	r3, [r7, #20]
 8014622:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014626:	f023 0301 	bic.w	r3, r3, #1
 801462a:	b2da      	uxtb	r2, r3
 801462c:	697b      	ldr	r3, [r7, #20]
 801462e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8014632:	697b      	ldr	r3, [r7, #20]
 8014634:	6a1b      	ldr	r3, [r3, #32]
 8014636:	6978      	ldr	r0, [r7, #20]
 8014638:	4798      	blx	r3
}
 801463a:	bf00      	nop
 801463c:	3718      	adds	r7, #24
 801463e:	46bd      	mov	sp, r7
 8014640:	bd80      	pop	{r7, pc}
 8014642:	bf00      	nop
 8014644:	20000eb4 	.word	0x20000eb4

08014648 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8014648:	b580      	push	{r7, lr}
 801464a:	b084      	sub	sp, #16
 801464c:	af00      	add	r7, sp, #0
 801464e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8014650:	f107 0308 	add.w	r3, r7, #8
 8014654:	4618      	mov	r0, r3
 8014656:	f000 f857 	bl	8014708 <prvGetNextExpireTime>
 801465a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801465c:	68bb      	ldr	r3, [r7, #8]
 801465e:	4619      	mov	r1, r3
 8014660:	68f8      	ldr	r0, [r7, #12]
 8014662:	f000 f803 	bl	801466c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8014666:	f000 f8d5 	bl	8014814 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801466a:	e7f1      	b.n	8014650 <prvTimerTask+0x8>

0801466c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 801466c:	b580      	push	{r7, lr}
 801466e:	b084      	sub	sp, #16
 8014670:	af00      	add	r7, sp, #0
 8014672:	6078      	str	r0, [r7, #4]
 8014674:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8014676:	f7ff f929 	bl	80138cc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801467a:	f107 0308 	add.w	r3, r7, #8
 801467e:	4618      	mov	r0, r3
 8014680:	f000 f866 	bl	8014750 <prvSampleTimeNow>
 8014684:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8014686:	68bb      	ldr	r3, [r7, #8]
 8014688:	2b00      	cmp	r3, #0
 801468a:	d130      	bne.n	80146ee <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801468c:	683b      	ldr	r3, [r7, #0]
 801468e:	2b00      	cmp	r3, #0
 8014690:	d10a      	bne.n	80146a8 <prvProcessTimerOrBlockTask+0x3c>
 8014692:	687a      	ldr	r2, [r7, #4]
 8014694:	68fb      	ldr	r3, [r7, #12]
 8014696:	429a      	cmp	r2, r3
 8014698:	d806      	bhi.n	80146a8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801469a:	f7ff f925 	bl	80138e8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801469e:	68f9      	ldr	r1, [r7, #12]
 80146a0:	6878      	ldr	r0, [r7, #4]
 80146a2:	f7ff ff83 	bl	80145ac <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80146a6:	e024      	b.n	80146f2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80146a8:	683b      	ldr	r3, [r7, #0]
 80146aa:	2b00      	cmp	r3, #0
 80146ac:	d008      	beq.n	80146c0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80146ae:	4b13      	ldr	r3, [pc, #76]	; (80146fc <prvProcessTimerOrBlockTask+0x90>)
 80146b0:	681b      	ldr	r3, [r3, #0]
 80146b2:	681b      	ldr	r3, [r3, #0]
 80146b4:	2b00      	cmp	r3, #0
 80146b6:	d101      	bne.n	80146bc <prvProcessTimerOrBlockTask+0x50>
 80146b8:	2301      	movs	r3, #1
 80146ba:	e000      	b.n	80146be <prvProcessTimerOrBlockTask+0x52>
 80146bc:	2300      	movs	r3, #0
 80146be:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80146c0:	4b0f      	ldr	r3, [pc, #60]	; (8014700 <prvProcessTimerOrBlockTask+0x94>)
 80146c2:	6818      	ldr	r0, [r3, #0]
 80146c4:	687a      	ldr	r2, [r7, #4]
 80146c6:	68fb      	ldr	r3, [r7, #12]
 80146c8:	1ad3      	subs	r3, r2, r3
 80146ca:	683a      	ldr	r2, [r7, #0]
 80146cc:	4619      	mov	r1, r3
 80146ce:	f7fe fe85 	bl	80133dc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80146d2:	f7ff f909 	bl	80138e8 <xTaskResumeAll>
 80146d6:	4603      	mov	r3, r0
 80146d8:	2b00      	cmp	r3, #0
 80146da:	d10a      	bne.n	80146f2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80146dc:	4b09      	ldr	r3, [pc, #36]	; (8014704 <prvProcessTimerOrBlockTask+0x98>)
 80146de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80146e2:	601a      	str	r2, [r3, #0]
 80146e4:	f3bf 8f4f 	dsb	sy
 80146e8:	f3bf 8f6f 	isb	sy
}
 80146ec:	e001      	b.n	80146f2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80146ee:	f7ff f8fb 	bl	80138e8 <xTaskResumeAll>
}
 80146f2:	bf00      	nop
 80146f4:	3710      	adds	r7, #16
 80146f6:	46bd      	mov	sp, r7
 80146f8:	bd80      	pop	{r7, pc}
 80146fa:	bf00      	nop
 80146fc:	20000eb8 	.word	0x20000eb8
 8014700:	20000ebc 	.word	0x20000ebc
 8014704:	e000ed04 	.word	0xe000ed04

08014708 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8014708:	b480      	push	{r7}
 801470a:	b085      	sub	sp, #20
 801470c:	af00      	add	r7, sp, #0
 801470e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8014710:	4b0e      	ldr	r3, [pc, #56]	; (801474c <prvGetNextExpireTime+0x44>)
 8014712:	681b      	ldr	r3, [r3, #0]
 8014714:	681b      	ldr	r3, [r3, #0]
 8014716:	2b00      	cmp	r3, #0
 8014718:	d101      	bne.n	801471e <prvGetNextExpireTime+0x16>
 801471a:	2201      	movs	r2, #1
 801471c:	e000      	b.n	8014720 <prvGetNextExpireTime+0x18>
 801471e:	2200      	movs	r2, #0
 8014720:	687b      	ldr	r3, [r7, #4]
 8014722:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8014724:	687b      	ldr	r3, [r7, #4]
 8014726:	681b      	ldr	r3, [r3, #0]
 8014728:	2b00      	cmp	r3, #0
 801472a:	d105      	bne.n	8014738 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801472c:	4b07      	ldr	r3, [pc, #28]	; (801474c <prvGetNextExpireTime+0x44>)
 801472e:	681b      	ldr	r3, [r3, #0]
 8014730:	68db      	ldr	r3, [r3, #12]
 8014732:	681b      	ldr	r3, [r3, #0]
 8014734:	60fb      	str	r3, [r7, #12]
 8014736:	e001      	b.n	801473c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8014738:	2300      	movs	r3, #0
 801473a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 801473c:	68fb      	ldr	r3, [r7, #12]
}
 801473e:	4618      	mov	r0, r3
 8014740:	3714      	adds	r7, #20
 8014742:	46bd      	mov	sp, r7
 8014744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014748:	4770      	bx	lr
 801474a:	bf00      	nop
 801474c:	20000eb4 	.word	0x20000eb4

08014750 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8014750:	b580      	push	{r7, lr}
 8014752:	b084      	sub	sp, #16
 8014754:	af00      	add	r7, sp, #0
 8014756:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8014758:	f7ff f964 	bl	8013a24 <xTaskGetTickCount>
 801475c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801475e:	4b0b      	ldr	r3, [pc, #44]	; (801478c <prvSampleTimeNow+0x3c>)
 8014760:	681b      	ldr	r3, [r3, #0]
 8014762:	68fa      	ldr	r2, [r7, #12]
 8014764:	429a      	cmp	r2, r3
 8014766:	d205      	bcs.n	8014774 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8014768:	f000 f936 	bl	80149d8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801476c:	687b      	ldr	r3, [r7, #4]
 801476e:	2201      	movs	r2, #1
 8014770:	601a      	str	r2, [r3, #0]
 8014772:	e002      	b.n	801477a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8014774:	687b      	ldr	r3, [r7, #4]
 8014776:	2200      	movs	r2, #0
 8014778:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801477a:	4a04      	ldr	r2, [pc, #16]	; (801478c <prvSampleTimeNow+0x3c>)
 801477c:	68fb      	ldr	r3, [r7, #12]
 801477e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8014780:	68fb      	ldr	r3, [r7, #12]
}
 8014782:	4618      	mov	r0, r3
 8014784:	3710      	adds	r7, #16
 8014786:	46bd      	mov	sp, r7
 8014788:	bd80      	pop	{r7, pc}
 801478a:	bf00      	nop
 801478c:	20000ec4 	.word	0x20000ec4

08014790 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8014790:	b580      	push	{r7, lr}
 8014792:	b086      	sub	sp, #24
 8014794:	af00      	add	r7, sp, #0
 8014796:	60f8      	str	r0, [r7, #12]
 8014798:	60b9      	str	r1, [r7, #8]
 801479a:	607a      	str	r2, [r7, #4]
 801479c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801479e:	2300      	movs	r3, #0
 80147a0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80147a2:	68fb      	ldr	r3, [r7, #12]
 80147a4:	68ba      	ldr	r2, [r7, #8]
 80147a6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80147a8:	68fb      	ldr	r3, [r7, #12]
 80147aa:	68fa      	ldr	r2, [r7, #12]
 80147ac:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80147ae:	68ba      	ldr	r2, [r7, #8]
 80147b0:	687b      	ldr	r3, [r7, #4]
 80147b2:	429a      	cmp	r2, r3
 80147b4:	d812      	bhi.n	80147dc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80147b6:	687a      	ldr	r2, [r7, #4]
 80147b8:	683b      	ldr	r3, [r7, #0]
 80147ba:	1ad2      	subs	r2, r2, r3
 80147bc:	68fb      	ldr	r3, [r7, #12]
 80147be:	699b      	ldr	r3, [r3, #24]
 80147c0:	429a      	cmp	r2, r3
 80147c2:	d302      	bcc.n	80147ca <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80147c4:	2301      	movs	r3, #1
 80147c6:	617b      	str	r3, [r7, #20]
 80147c8:	e01b      	b.n	8014802 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80147ca:	4b10      	ldr	r3, [pc, #64]	; (801480c <prvInsertTimerInActiveList+0x7c>)
 80147cc:	681a      	ldr	r2, [r3, #0]
 80147ce:	68fb      	ldr	r3, [r7, #12]
 80147d0:	3304      	adds	r3, #4
 80147d2:	4619      	mov	r1, r3
 80147d4:	4610      	mov	r0, r2
 80147d6:	f7fd fda0 	bl	801231a <vListInsert>
 80147da:	e012      	b.n	8014802 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80147dc:	687a      	ldr	r2, [r7, #4]
 80147de:	683b      	ldr	r3, [r7, #0]
 80147e0:	429a      	cmp	r2, r3
 80147e2:	d206      	bcs.n	80147f2 <prvInsertTimerInActiveList+0x62>
 80147e4:	68ba      	ldr	r2, [r7, #8]
 80147e6:	683b      	ldr	r3, [r7, #0]
 80147e8:	429a      	cmp	r2, r3
 80147ea:	d302      	bcc.n	80147f2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80147ec:	2301      	movs	r3, #1
 80147ee:	617b      	str	r3, [r7, #20]
 80147f0:	e007      	b.n	8014802 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80147f2:	4b07      	ldr	r3, [pc, #28]	; (8014810 <prvInsertTimerInActiveList+0x80>)
 80147f4:	681a      	ldr	r2, [r3, #0]
 80147f6:	68fb      	ldr	r3, [r7, #12]
 80147f8:	3304      	adds	r3, #4
 80147fa:	4619      	mov	r1, r3
 80147fc:	4610      	mov	r0, r2
 80147fe:	f7fd fd8c 	bl	801231a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8014802:	697b      	ldr	r3, [r7, #20]
}
 8014804:	4618      	mov	r0, r3
 8014806:	3718      	adds	r7, #24
 8014808:	46bd      	mov	sp, r7
 801480a:	bd80      	pop	{r7, pc}
 801480c:	20000eb8 	.word	0x20000eb8
 8014810:	20000eb4 	.word	0x20000eb4

08014814 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8014814:	b580      	push	{r7, lr}
 8014816:	b08e      	sub	sp, #56	; 0x38
 8014818:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801481a:	e0cc      	b.n	80149b6 <prvProcessReceivedCommands+0x1a2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801481c:	687b      	ldr	r3, [r7, #4]
 801481e:	2b00      	cmp	r3, #0
 8014820:	da19      	bge.n	8014856 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8014822:	1d3b      	adds	r3, r7, #4
 8014824:	3304      	adds	r3, #4
 8014826:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8014828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801482a:	2b00      	cmp	r3, #0
 801482c:	d10b      	bne.n	8014846 <prvProcessReceivedCommands+0x32>
 801482e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014832:	b672      	cpsid	i
 8014834:	f383 8811 	msr	BASEPRI, r3
 8014838:	f3bf 8f6f 	isb	sy
 801483c:	f3bf 8f4f 	dsb	sy
 8014840:	b662      	cpsie	i
 8014842:	61fb      	str	r3, [r7, #28]
 8014844:	e7fe      	b.n	8014844 <prvProcessReceivedCommands+0x30>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8014846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014848:	681b      	ldr	r3, [r3, #0]
 801484a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801484c:	6850      	ldr	r0, [r2, #4]
 801484e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014850:	6892      	ldr	r2, [r2, #8]
 8014852:	4611      	mov	r1, r2
 8014854:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8014856:	687b      	ldr	r3, [r7, #4]
 8014858:	2b00      	cmp	r3, #0
 801485a:	f2c0 80ab 	blt.w	80149b4 <prvProcessReceivedCommands+0x1a0>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801485e:	68fb      	ldr	r3, [r7, #12]
 8014860:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8014862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014864:	695b      	ldr	r3, [r3, #20]
 8014866:	2b00      	cmp	r3, #0
 8014868:	d004      	beq.n	8014874 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801486a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801486c:	3304      	adds	r3, #4
 801486e:	4618      	mov	r0, r3
 8014870:	f7fd fd8c 	bl	801238c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8014874:	463b      	mov	r3, r7
 8014876:	4618      	mov	r0, r3
 8014878:	f7ff ff6a 	bl	8014750 <prvSampleTimeNow>
 801487c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 801487e:	687b      	ldr	r3, [r7, #4]
 8014880:	2b09      	cmp	r3, #9
 8014882:	f200 8098 	bhi.w	80149b6 <prvProcessReceivedCommands+0x1a2>
 8014886:	a201      	add	r2, pc, #4	; (adr r2, 801488c <prvProcessReceivedCommands+0x78>)
 8014888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801488c:	080148b5 	.word	0x080148b5
 8014890:	080148b5 	.word	0x080148b5
 8014894:	080148b5 	.word	0x080148b5
 8014898:	0801492b 	.word	0x0801492b
 801489c:	0801493f 	.word	0x0801493f
 80148a0:	0801498b 	.word	0x0801498b
 80148a4:	080148b5 	.word	0x080148b5
 80148a8:	080148b5 	.word	0x080148b5
 80148ac:	0801492b 	.word	0x0801492b
 80148b0:	0801493f 	.word	0x0801493f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80148b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80148ba:	f043 0301 	orr.w	r3, r3, #1
 80148be:	b2da      	uxtb	r2, r3
 80148c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80148c6:	68ba      	ldr	r2, [r7, #8]
 80148c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148ca:	699b      	ldr	r3, [r3, #24]
 80148cc:	18d1      	adds	r1, r2, r3
 80148ce:	68bb      	ldr	r3, [r7, #8]
 80148d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80148d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80148d4:	f7ff ff5c 	bl	8014790 <prvInsertTimerInActiveList>
 80148d8:	4603      	mov	r3, r0
 80148da:	2b00      	cmp	r3, #0
 80148dc:	d06b      	beq.n	80149b6 <prvProcessReceivedCommands+0x1a2>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80148de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148e0:	6a1b      	ldr	r3, [r3, #32]
 80148e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80148e4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80148e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80148ec:	f003 0304 	and.w	r3, r3, #4
 80148f0:	2b00      	cmp	r3, #0
 80148f2:	d060      	beq.n	80149b6 <prvProcessReceivedCommands+0x1a2>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80148f4:	68ba      	ldr	r2, [r7, #8]
 80148f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148f8:	699b      	ldr	r3, [r3, #24]
 80148fa:	441a      	add	r2, r3
 80148fc:	2300      	movs	r3, #0
 80148fe:	9300      	str	r3, [sp, #0]
 8014900:	2300      	movs	r3, #0
 8014902:	2100      	movs	r1, #0
 8014904:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014906:	f7ff fe03 	bl	8014510 <xTimerGenericCommand>
 801490a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 801490c:	6a3b      	ldr	r3, [r7, #32]
 801490e:	2b00      	cmp	r3, #0
 8014910:	d151      	bne.n	80149b6 <prvProcessReceivedCommands+0x1a2>
 8014912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014916:	b672      	cpsid	i
 8014918:	f383 8811 	msr	BASEPRI, r3
 801491c:	f3bf 8f6f 	isb	sy
 8014920:	f3bf 8f4f 	dsb	sy
 8014924:	b662      	cpsie	i
 8014926:	61bb      	str	r3, [r7, #24]
 8014928:	e7fe      	b.n	8014928 <prvProcessReceivedCommands+0x114>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801492a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801492c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014930:	f023 0301 	bic.w	r3, r3, #1
 8014934:	b2da      	uxtb	r2, r3
 8014936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014938:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 801493c:	e03b      	b.n	80149b6 <prvProcessReceivedCommands+0x1a2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801493e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014940:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014944:	f043 0301 	orr.w	r3, r3, #1
 8014948:	b2da      	uxtb	r2, r3
 801494a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801494c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8014950:	68ba      	ldr	r2, [r7, #8]
 8014952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014954:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8014956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014958:	699b      	ldr	r3, [r3, #24]
 801495a:	2b00      	cmp	r3, #0
 801495c:	d10b      	bne.n	8014976 <prvProcessReceivedCommands+0x162>
 801495e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014962:	b672      	cpsid	i
 8014964:	f383 8811 	msr	BASEPRI, r3
 8014968:	f3bf 8f6f 	isb	sy
 801496c:	f3bf 8f4f 	dsb	sy
 8014970:	b662      	cpsie	i
 8014972:	617b      	str	r3, [r7, #20]
 8014974:	e7fe      	b.n	8014974 <prvProcessReceivedCommands+0x160>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8014976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014978:	699a      	ldr	r2, [r3, #24]
 801497a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801497c:	18d1      	adds	r1, r2, r3
 801497e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014980:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014982:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014984:	f7ff ff04 	bl	8014790 <prvInsertTimerInActiveList>
					break;
 8014988:	e015      	b.n	80149b6 <prvProcessReceivedCommands+0x1a2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801498a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801498c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014990:	f003 0302 	and.w	r3, r3, #2
 8014994:	2b00      	cmp	r3, #0
 8014996:	d103      	bne.n	80149a0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8014998:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801499a:	f000 fbb7 	bl	801510c <vPortFree>
 801499e:	e00a      	b.n	80149b6 <prvProcessReceivedCommands+0x1a2>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80149a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80149a6:	f023 0301 	bic.w	r3, r3, #1
 80149aa:	b2da      	uxtb	r2, r3
 80149ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80149b2:	e000      	b.n	80149b6 <prvProcessReceivedCommands+0x1a2>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80149b4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80149b6:	4b07      	ldr	r3, [pc, #28]	; (80149d4 <prvProcessReceivedCommands+0x1c0>)
 80149b8:	681b      	ldr	r3, [r3, #0]
 80149ba:	1d39      	adds	r1, r7, #4
 80149bc:	2200      	movs	r2, #0
 80149be:	4618      	mov	r0, r3
 80149c0:	f7fe f8f8 	bl	8012bb4 <xQueueReceive>
 80149c4:	4603      	mov	r3, r0
 80149c6:	2b00      	cmp	r3, #0
 80149c8:	f47f af28 	bne.w	801481c <prvProcessReceivedCommands+0x8>
	}
}
 80149cc:	bf00      	nop
 80149ce:	3730      	adds	r7, #48	; 0x30
 80149d0:	46bd      	mov	sp, r7
 80149d2:	bd80      	pop	{r7, pc}
 80149d4:	20000ebc 	.word	0x20000ebc

080149d8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80149d8:	b580      	push	{r7, lr}
 80149da:	b088      	sub	sp, #32
 80149dc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80149de:	e049      	b.n	8014a74 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80149e0:	4b2e      	ldr	r3, [pc, #184]	; (8014a9c <prvSwitchTimerLists+0xc4>)
 80149e2:	681b      	ldr	r3, [r3, #0]
 80149e4:	68db      	ldr	r3, [r3, #12]
 80149e6:	681b      	ldr	r3, [r3, #0]
 80149e8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80149ea:	4b2c      	ldr	r3, [pc, #176]	; (8014a9c <prvSwitchTimerLists+0xc4>)
 80149ec:	681b      	ldr	r3, [r3, #0]
 80149ee:	68db      	ldr	r3, [r3, #12]
 80149f0:	68db      	ldr	r3, [r3, #12]
 80149f2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80149f4:	68fb      	ldr	r3, [r7, #12]
 80149f6:	3304      	adds	r3, #4
 80149f8:	4618      	mov	r0, r3
 80149fa:	f7fd fcc7 	bl	801238c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80149fe:	68fb      	ldr	r3, [r7, #12]
 8014a00:	6a1b      	ldr	r3, [r3, #32]
 8014a02:	68f8      	ldr	r0, [r7, #12]
 8014a04:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8014a06:	68fb      	ldr	r3, [r7, #12]
 8014a08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014a0c:	f003 0304 	and.w	r3, r3, #4
 8014a10:	2b00      	cmp	r3, #0
 8014a12:	d02f      	beq.n	8014a74 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8014a14:	68fb      	ldr	r3, [r7, #12]
 8014a16:	699b      	ldr	r3, [r3, #24]
 8014a18:	693a      	ldr	r2, [r7, #16]
 8014a1a:	4413      	add	r3, r2
 8014a1c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8014a1e:	68ba      	ldr	r2, [r7, #8]
 8014a20:	693b      	ldr	r3, [r7, #16]
 8014a22:	429a      	cmp	r2, r3
 8014a24:	d90e      	bls.n	8014a44 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8014a26:	68fb      	ldr	r3, [r7, #12]
 8014a28:	68ba      	ldr	r2, [r7, #8]
 8014a2a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8014a2c:	68fb      	ldr	r3, [r7, #12]
 8014a2e:	68fa      	ldr	r2, [r7, #12]
 8014a30:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8014a32:	4b1a      	ldr	r3, [pc, #104]	; (8014a9c <prvSwitchTimerLists+0xc4>)
 8014a34:	681a      	ldr	r2, [r3, #0]
 8014a36:	68fb      	ldr	r3, [r7, #12]
 8014a38:	3304      	adds	r3, #4
 8014a3a:	4619      	mov	r1, r3
 8014a3c:	4610      	mov	r0, r2
 8014a3e:	f7fd fc6c 	bl	801231a <vListInsert>
 8014a42:	e017      	b.n	8014a74 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8014a44:	2300      	movs	r3, #0
 8014a46:	9300      	str	r3, [sp, #0]
 8014a48:	2300      	movs	r3, #0
 8014a4a:	693a      	ldr	r2, [r7, #16]
 8014a4c:	2100      	movs	r1, #0
 8014a4e:	68f8      	ldr	r0, [r7, #12]
 8014a50:	f7ff fd5e 	bl	8014510 <xTimerGenericCommand>
 8014a54:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8014a56:	687b      	ldr	r3, [r7, #4]
 8014a58:	2b00      	cmp	r3, #0
 8014a5a:	d10b      	bne.n	8014a74 <prvSwitchTimerLists+0x9c>
 8014a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a60:	b672      	cpsid	i
 8014a62:	f383 8811 	msr	BASEPRI, r3
 8014a66:	f3bf 8f6f 	isb	sy
 8014a6a:	f3bf 8f4f 	dsb	sy
 8014a6e:	b662      	cpsie	i
 8014a70:	603b      	str	r3, [r7, #0]
 8014a72:	e7fe      	b.n	8014a72 <prvSwitchTimerLists+0x9a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8014a74:	4b09      	ldr	r3, [pc, #36]	; (8014a9c <prvSwitchTimerLists+0xc4>)
 8014a76:	681b      	ldr	r3, [r3, #0]
 8014a78:	681b      	ldr	r3, [r3, #0]
 8014a7a:	2b00      	cmp	r3, #0
 8014a7c:	d1b0      	bne.n	80149e0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8014a7e:	4b07      	ldr	r3, [pc, #28]	; (8014a9c <prvSwitchTimerLists+0xc4>)
 8014a80:	681b      	ldr	r3, [r3, #0]
 8014a82:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8014a84:	4b06      	ldr	r3, [pc, #24]	; (8014aa0 <prvSwitchTimerLists+0xc8>)
 8014a86:	681b      	ldr	r3, [r3, #0]
 8014a88:	4a04      	ldr	r2, [pc, #16]	; (8014a9c <prvSwitchTimerLists+0xc4>)
 8014a8a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8014a8c:	4a04      	ldr	r2, [pc, #16]	; (8014aa0 <prvSwitchTimerLists+0xc8>)
 8014a8e:	697b      	ldr	r3, [r7, #20]
 8014a90:	6013      	str	r3, [r2, #0]
}
 8014a92:	bf00      	nop
 8014a94:	3718      	adds	r7, #24
 8014a96:	46bd      	mov	sp, r7
 8014a98:	bd80      	pop	{r7, pc}
 8014a9a:	bf00      	nop
 8014a9c:	20000eb4 	.word	0x20000eb4
 8014aa0:	20000eb8 	.word	0x20000eb8

08014aa4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8014aa4:	b580      	push	{r7, lr}
 8014aa6:	b082      	sub	sp, #8
 8014aa8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8014aaa:	f000 f945 	bl	8014d38 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8014aae:	4b15      	ldr	r3, [pc, #84]	; (8014b04 <prvCheckForValidListAndQueue+0x60>)
 8014ab0:	681b      	ldr	r3, [r3, #0]
 8014ab2:	2b00      	cmp	r3, #0
 8014ab4:	d120      	bne.n	8014af8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8014ab6:	4814      	ldr	r0, [pc, #80]	; (8014b08 <prvCheckForValidListAndQueue+0x64>)
 8014ab8:	f7fd fbde 	bl	8012278 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8014abc:	4813      	ldr	r0, [pc, #76]	; (8014b0c <prvCheckForValidListAndQueue+0x68>)
 8014abe:	f7fd fbdb 	bl	8012278 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8014ac2:	4b13      	ldr	r3, [pc, #76]	; (8014b10 <prvCheckForValidListAndQueue+0x6c>)
 8014ac4:	4a10      	ldr	r2, [pc, #64]	; (8014b08 <prvCheckForValidListAndQueue+0x64>)
 8014ac6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8014ac8:	4b12      	ldr	r3, [pc, #72]	; (8014b14 <prvCheckForValidListAndQueue+0x70>)
 8014aca:	4a10      	ldr	r2, [pc, #64]	; (8014b0c <prvCheckForValidListAndQueue+0x68>)
 8014acc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8014ace:	2300      	movs	r3, #0
 8014ad0:	9300      	str	r3, [sp, #0]
 8014ad2:	4b11      	ldr	r3, [pc, #68]	; (8014b18 <prvCheckForValidListAndQueue+0x74>)
 8014ad4:	4a11      	ldr	r2, [pc, #68]	; (8014b1c <prvCheckForValidListAndQueue+0x78>)
 8014ad6:	2110      	movs	r1, #16
 8014ad8:	200a      	movs	r0, #10
 8014ada:	f7fd fceb 	bl	80124b4 <xQueueGenericCreateStatic>
 8014ade:	4602      	mov	r2, r0
 8014ae0:	4b08      	ldr	r3, [pc, #32]	; (8014b04 <prvCheckForValidListAndQueue+0x60>)
 8014ae2:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8014ae4:	4b07      	ldr	r3, [pc, #28]	; (8014b04 <prvCheckForValidListAndQueue+0x60>)
 8014ae6:	681b      	ldr	r3, [r3, #0]
 8014ae8:	2b00      	cmp	r3, #0
 8014aea:	d005      	beq.n	8014af8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8014aec:	4b05      	ldr	r3, [pc, #20]	; (8014b04 <prvCheckForValidListAndQueue+0x60>)
 8014aee:	681b      	ldr	r3, [r3, #0]
 8014af0:	490b      	ldr	r1, [pc, #44]	; (8014b20 <prvCheckForValidListAndQueue+0x7c>)
 8014af2:	4618      	mov	r0, r3
 8014af4:	f7fe fc20 	bl	8013338 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8014af8:	f000 f950 	bl	8014d9c <vPortExitCritical>
}
 8014afc:	bf00      	nop
 8014afe:	46bd      	mov	sp, r7
 8014b00:	bd80      	pop	{r7, pc}
 8014b02:	bf00      	nop
 8014b04:	20000ebc 	.word	0x20000ebc
 8014b08:	20000e8c 	.word	0x20000e8c
 8014b0c:	20000ea0 	.word	0x20000ea0
 8014b10:	20000eb4 	.word	0x20000eb4
 8014b14:	20000eb8 	.word	0x20000eb8
 8014b18:	20000f68 	.word	0x20000f68
 8014b1c:	20000ec8 	.word	0x20000ec8
 8014b20:	0801606c 	.word	0x0801606c

08014b24 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8014b24:	b480      	push	{r7}
 8014b26:	b085      	sub	sp, #20
 8014b28:	af00      	add	r7, sp, #0
 8014b2a:	60f8      	str	r0, [r7, #12]
 8014b2c:	60b9      	str	r1, [r7, #8]
 8014b2e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8014b30:	68fb      	ldr	r3, [r7, #12]
 8014b32:	3b04      	subs	r3, #4
 8014b34:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8014b36:	68fb      	ldr	r3, [r7, #12]
 8014b38:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8014b3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014b3e:	68fb      	ldr	r3, [r7, #12]
 8014b40:	3b04      	subs	r3, #4
 8014b42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8014b44:	68bb      	ldr	r3, [r7, #8]
 8014b46:	f023 0201 	bic.w	r2, r3, #1
 8014b4a:	68fb      	ldr	r3, [r7, #12]
 8014b4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014b4e:	68fb      	ldr	r3, [r7, #12]
 8014b50:	3b04      	subs	r3, #4
 8014b52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8014b54:	4a0c      	ldr	r2, [pc, #48]	; (8014b88 <pxPortInitialiseStack+0x64>)
 8014b56:	68fb      	ldr	r3, [r7, #12]
 8014b58:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8014b5a:	68fb      	ldr	r3, [r7, #12]
 8014b5c:	3b14      	subs	r3, #20
 8014b5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8014b60:	687a      	ldr	r2, [r7, #4]
 8014b62:	68fb      	ldr	r3, [r7, #12]
 8014b64:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8014b66:	68fb      	ldr	r3, [r7, #12]
 8014b68:	3b04      	subs	r3, #4
 8014b6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8014b6c:	68fb      	ldr	r3, [r7, #12]
 8014b6e:	f06f 0202 	mvn.w	r2, #2
 8014b72:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8014b74:	68fb      	ldr	r3, [r7, #12]
 8014b76:	3b20      	subs	r3, #32
 8014b78:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8014b7a:	68fb      	ldr	r3, [r7, #12]
}
 8014b7c:	4618      	mov	r0, r3
 8014b7e:	3714      	adds	r7, #20
 8014b80:	46bd      	mov	sp, r7
 8014b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b86:	4770      	bx	lr
 8014b88:	08014b8d 	.word	0x08014b8d

08014b8c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8014b8c:	b480      	push	{r7}
 8014b8e:	b085      	sub	sp, #20
 8014b90:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8014b92:	2300      	movs	r3, #0
 8014b94:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8014b96:	4b13      	ldr	r3, [pc, #76]	; (8014be4 <prvTaskExitError+0x58>)
 8014b98:	681b      	ldr	r3, [r3, #0]
 8014b9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014b9e:	d00b      	beq.n	8014bb8 <prvTaskExitError+0x2c>
 8014ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ba4:	b672      	cpsid	i
 8014ba6:	f383 8811 	msr	BASEPRI, r3
 8014baa:	f3bf 8f6f 	isb	sy
 8014bae:	f3bf 8f4f 	dsb	sy
 8014bb2:	b662      	cpsie	i
 8014bb4:	60fb      	str	r3, [r7, #12]
 8014bb6:	e7fe      	b.n	8014bb6 <prvTaskExitError+0x2a>
 8014bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014bbc:	b672      	cpsid	i
 8014bbe:	f383 8811 	msr	BASEPRI, r3
 8014bc2:	f3bf 8f6f 	isb	sy
 8014bc6:	f3bf 8f4f 	dsb	sy
 8014bca:	b662      	cpsie	i
 8014bcc:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8014bce:	bf00      	nop
 8014bd0:	687b      	ldr	r3, [r7, #4]
 8014bd2:	2b00      	cmp	r3, #0
 8014bd4:	d0fc      	beq.n	8014bd0 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8014bd6:	bf00      	nop
 8014bd8:	3714      	adds	r7, #20
 8014bda:	46bd      	mov	sp, r7
 8014bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014be0:	4770      	bx	lr
 8014be2:	bf00      	nop
 8014be4:	20000104 	.word	0x20000104
	...

08014bf0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8014bf0:	4b07      	ldr	r3, [pc, #28]	; (8014c10 <pxCurrentTCBConst2>)
 8014bf2:	6819      	ldr	r1, [r3, #0]
 8014bf4:	6808      	ldr	r0, [r1, #0]
 8014bf6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014bfa:	f380 8809 	msr	PSP, r0
 8014bfe:	f3bf 8f6f 	isb	sy
 8014c02:	f04f 0000 	mov.w	r0, #0
 8014c06:	f380 8811 	msr	BASEPRI, r0
 8014c0a:	4770      	bx	lr
 8014c0c:	f3af 8000 	nop.w

08014c10 <pxCurrentTCBConst2>:
 8014c10:	2000098c 	.word	0x2000098c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8014c14:	bf00      	nop
 8014c16:	bf00      	nop

08014c18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8014c18:	4808      	ldr	r0, [pc, #32]	; (8014c3c <prvPortStartFirstTask+0x24>)
 8014c1a:	6800      	ldr	r0, [r0, #0]
 8014c1c:	6800      	ldr	r0, [r0, #0]
 8014c1e:	f380 8808 	msr	MSP, r0
 8014c22:	f04f 0000 	mov.w	r0, #0
 8014c26:	f380 8814 	msr	CONTROL, r0
 8014c2a:	b662      	cpsie	i
 8014c2c:	b661      	cpsie	f
 8014c2e:	f3bf 8f4f 	dsb	sy
 8014c32:	f3bf 8f6f 	isb	sy
 8014c36:	df00      	svc	0
 8014c38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8014c3a:	bf00      	nop
 8014c3c:	e000ed08 	.word	0xe000ed08

08014c40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8014c40:	b580      	push	{r7, lr}
 8014c42:	b084      	sub	sp, #16
 8014c44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8014c46:	4b36      	ldr	r3, [pc, #216]	; (8014d20 <xPortStartScheduler+0xe0>)
 8014c48:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8014c4a:	68fb      	ldr	r3, [r7, #12]
 8014c4c:	781b      	ldrb	r3, [r3, #0]
 8014c4e:	b2db      	uxtb	r3, r3
 8014c50:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8014c52:	68fb      	ldr	r3, [r7, #12]
 8014c54:	22ff      	movs	r2, #255	; 0xff
 8014c56:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8014c58:	68fb      	ldr	r3, [r7, #12]
 8014c5a:	781b      	ldrb	r3, [r3, #0]
 8014c5c:	b2db      	uxtb	r3, r3
 8014c5e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8014c60:	78fb      	ldrb	r3, [r7, #3]
 8014c62:	b2db      	uxtb	r3, r3
 8014c64:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8014c68:	b2da      	uxtb	r2, r3
 8014c6a:	4b2e      	ldr	r3, [pc, #184]	; (8014d24 <xPortStartScheduler+0xe4>)
 8014c6c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8014c6e:	4b2e      	ldr	r3, [pc, #184]	; (8014d28 <xPortStartScheduler+0xe8>)
 8014c70:	2207      	movs	r2, #7
 8014c72:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014c74:	e009      	b.n	8014c8a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8014c76:	4b2c      	ldr	r3, [pc, #176]	; (8014d28 <xPortStartScheduler+0xe8>)
 8014c78:	681b      	ldr	r3, [r3, #0]
 8014c7a:	3b01      	subs	r3, #1
 8014c7c:	4a2a      	ldr	r2, [pc, #168]	; (8014d28 <xPortStartScheduler+0xe8>)
 8014c7e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8014c80:	78fb      	ldrb	r3, [r7, #3]
 8014c82:	b2db      	uxtb	r3, r3
 8014c84:	005b      	lsls	r3, r3, #1
 8014c86:	b2db      	uxtb	r3, r3
 8014c88:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014c8a:	78fb      	ldrb	r3, [r7, #3]
 8014c8c:	b2db      	uxtb	r3, r3
 8014c8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014c92:	2b80      	cmp	r3, #128	; 0x80
 8014c94:	d0ef      	beq.n	8014c76 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8014c96:	4b24      	ldr	r3, [pc, #144]	; (8014d28 <xPortStartScheduler+0xe8>)
 8014c98:	681b      	ldr	r3, [r3, #0]
 8014c9a:	f1c3 0307 	rsb	r3, r3, #7
 8014c9e:	2b04      	cmp	r3, #4
 8014ca0:	d00b      	beq.n	8014cba <xPortStartScheduler+0x7a>
 8014ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ca6:	b672      	cpsid	i
 8014ca8:	f383 8811 	msr	BASEPRI, r3
 8014cac:	f3bf 8f6f 	isb	sy
 8014cb0:	f3bf 8f4f 	dsb	sy
 8014cb4:	b662      	cpsie	i
 8014cb6:	60bb      	str	r3, [r7, #8]
 8014cb8:	e7fe      	b.n	8014cb8 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8014cba:	4b1b      	ldr	r3, [pc, #108]	; (8014d28 <xPortStartScheduler+0xe8>)
 8014cbc:	681b      	ldr	r3, [r3, #0]
 8014cbe:	021b      	lsls	r3, r3, #8
 8014cc0:	4a19      	ldr	r2, [pc, #100]	; (8014d28 <xPortStartScheduler+0xe8>)
 8014cc2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8014cc4:	4b18      	ldr	r3, [pc, #96]	; (8014d28 <xPortStartScheduler+0xe8>)
 8014cc6:	681b      	ldr	r3, [r3, #0]
 8014cc8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8014ccc:	4a16      	ldr	r2, [pc, #88]	; (8014d28 <xPortStartScheduler+0xe8>)
 8014cce:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8014cd0:	687b      	ldr	r3, [r7, #4]
 8014cd2:	b2da      	uxtb	r2, r3
 8014cd4:	68fb      	ldr	r3, [r7, #12]
 8014cd6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8014cd8:	4b14      	ldr	r3, [pc, #80]	; (8014d2c <xPortStartScheduler+0xec>)
 8014cda:	681b      	ldr	r3, [r3, #0]
 8014cdc:	4a13      	ldr	r2, [pc, #76]	; (8014d2c <xPortStartScheduler+0xec>)
 8014cde:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8014ce2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8014ce4:	4b11      	ldr	r3, [pc, #68]	; (8014d2c <xPortStartScheduler+0xec>)
 8014ce6:	681b      	ldr	r3, [r3, #0]
 8014ce8:	4a10      	ldr	r2, [pc, #64]	; (8014d2c <xPortStartScheduler+0xec>)
 8014cea:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8014cee:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8014cf0:	f000 f8d4 	bl	8014e9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8014cf4:	4b0e      	ldr	r3, [pc, #56]	; (8014d30 <xPortStartScheduler+0xf0>)
 8014cf6:	2200      	movs	r2, #0
 8014cf8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8014cfa:	f000 f8f3 	bl	8014ee4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8014cfe:	4b0d      	ldr	r3, [pc, #52]	; (8014d34 <xPortStartScheduler+0xf4>)
 8014d00:	681b      	ldr	r3, [r3, #0]
 8014d02:	4a0c      	ldr	r2, [pc, #48]	; (8014d34 <xPortStartScheduler+0xf4>)
 8014d04:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8014d08:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8014d0a:	f7ff ff85 	bl	8014c18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8014d0e:	f7fe ff65 	bl	8013bdc <vTaskSwitchContext>
	prvTaskExitError();
 8014d12:	f7ff ff3b 	bl	8014b8c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8014d16:	2300      	movs	r3, #0
}
 8014d18:	4618      	mov	r0, r3
 8014d1a:	3710      	adds	r7, #16
 8014d1c:	46bd      	mov	sp, r7
 8014d1e:	bd80      	pop	{r7, pc}
 8014d20:	e000e400 	.word	0xe000e400
 8014d24:	20000fb8 	.word	0x20000fb8
 8014d28:	20000fbc 	.word	0x20000fbc
 8014d2c:	e000ed20 	.word	0xe000ed20
 8014d30:	20000104 	.word	0x20000104
 8014d34:	e000ef34 	.word	0xe000ef34

08014d38 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8014d38:	b480      	push	{r7}
 8014d3a:	b083      	sub	sp, #12
 8014d3c:	af00      	add	r7, sp, #0
 8014d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d42:	b672      	cpsid	i
 8014d44:	f383 8811 	msr	BASEPRI, r3
 8014d48:	f3bf 8f6f 	isb	sy
 8014d4c:	f3bf 8f4f 	dsb	sy
 8014d50:	b662      	cpsie	i
 8014d52:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8014d54:	4b0f      	ldr	r3, [pc, #60]	; (8014d94 <vPortEnterCritical+0x5c>)
 8014d56:	681b      	ldr	r3, [r3, #0]
 8014d58:	3301      	adds	r3, #1
 8014d5a:	4a0e      	ldr	r2, [pc, #56]	; (8014d94 <vPortEnterCritical+0x5c>)
 8014d5c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8014d5e:	4b0d      	ldr	r3, [pc, #52]	; (8014d94 <vPortEnterCritical+0x5c>)
 8014d60:	681b      	ldr	r3, [r3, #0]
 8014d62:	2b01      	cmp	r3, #1
 8014d64:	d110      	bne.n	8014d88 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8014d66:	4b0c      	ldr	r3, [pc, #48]	; (8014d98 <vPortEnterCritical+0x60>)
 8014d68:	681b      	ldr	r3, [r3, #0]
 8014d6a:	b2db      	uxtb	r3, r3
 8014d6c:	2b00      	cmp	r3, #0
 8014d6e:	d00b      	beq.n	8014d88 <vPortEnterCritical+0x50>
 8014d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d74:	b672      	cpsid	i
 8014d76:	f383 8811 	msr	BASEPRI, r3
 8014d7a:	f3bf 8f6f 	isb	sy
 8014d7e:	f3bf 8f4f 	dsb	sy
 8014d82:	b662      	cpsie	i
 8014d84:	603b      	str	r3, [r7, #0]
 8014d86:	e7fe      	b.n	8014d86 <vPortEnterCritical+0x4e>
	}
}
 8014d88:	bf00      	nop
 8014d8a:	370c      	adds	r7, #12
 8014d8c:	46bd      	mov	sp, r7
 8014d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d92:	4770      	bx	lr
 8014d94:	20000104 	.word	0x20000104
 8014d98:	e000ed04 	.word	0xe000ed04

08014d9c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8014d9c:	b480      	push	{r7}
 8014d9e:	b083      	sub	sp, #12
 8014da0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8014da2:	4b12      	ldr	r3, [pc, #72]	; (8014dec <vPortExitCritical+0x50>)
 8014da4:	681b      	ldr	r3, [r3, #0]
 8014da6:	2b00      	cmp	r3, #0
 8014da8:	d10b      	bne.n	8014dc2 <vPortExitCritical+0x26>
 8014daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014dae:	b672      	cpsid	i
 8014db0:	f383 8811 	msr	BASEPRI, r3
 8014db4:	f3bf 8f6f 	isb	sy
 8014db8:	f3bf 8f4f 	dsb	sy
 8014dbc:	b662      	cpsie	i
 8014dbe:	607b      	str	r3, [r7, #4]
 8014dc0:	e7fe      	b.n	8014dc0 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 8014dc2:	4b0a      	ldr	r3, [pc, #40]	; (8014dec <vPortExitCritical+0x50>)
 8014dc4:	681b      	ldr	r3, [r3, #0]
 8014dc6:	3b01      	subs	r3, #1
 8014dc8:	4a08      	ldr	r2, [pc, #32]	; (8014dec <vPortExitCritical+0x50>)
 8014dca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8014dcc:	4b07      	ldr	r3, [pc, #28]	; (8014dec <vPortExitCritical+0x50>)
 8014dce:	681b      	ldr	r3, [r3, #0]
 8014dd0:	2b00      	cmp	r3, #0
 8014dd2:	d104      	bne.n	8014dde <vPortExitCritical+0x42>
 8014dd4:	2300      	movs	r3, #0
 8014dd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014dd8:	683b      	ldr	r3, [r7, #0]
 8014dda:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8014dde:	bf00      	nop
 8014de0:	370c      	adds	r7, #12
 8014de2:	46bd      	mov	sp, r7
 8014de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014de8:	4770      	bx	lr
 8014dea:	bf00      	nop
 8014dec:	20000104 	.word	0x20000104

08014df0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8014df0:	f3ef 8009 	mrs	r0, PSP
 8014df4:	f3bf 8f6f 	isb	sy
 8014df8:	4b15      	ldr	r3, [pc, #84]	; (8014e50 <pxCurrentTCBConst>)
 8014dfa:	681a      	ldr	r2, [r3, #0]
 8014dfc:	f01e 0f10 	tst.w	lr, #16
 8014e00:	bf08      	it	eq
 8014e02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8014e06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e0a:	6010      	str	r0, [r2, #0]
 8014e0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8014e10:	f04f 0050 	mov.w	r0, #80	; 0x50
 8014e14:	b672      	cpsid	i
 8014e16:	f380 8811 	msr	BASEPRI, r0
 8014e1a:	f3bf 8f4f 	dsb	sy
 8014e1e:	f3bf 8f6f 	isb	sy
 8014e22:	b662      	cpsie	i
 8014e24:	f7fe feda 	bl	8013bdc <vTaskSwitchContext>
 8014e28:	f04f 0000 	mov.w	r0, #0
 8014e2c:	f380 8811 	msr	BASEPRI, r0
 8014e30:	bc09      	pop	{r0, r3}
 8014e32:	6819      	ldr	r1, [r3, #0]
 8014e34:	6808      	ldr	r0, [r1, #0]
 8014e36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e3a:	f01e 0f10 	tst.w	lr, #16
 8014e3e:	bf08      	it	eq
 8014e40:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8014e44:	f380 8809 	msr	PSP, r0
 8014e48:	f3bf 8f6f 	isb	sy
 8014e4c:	4770      	bx	lr
 8014e4e:	bf00      	nop

08014e50 <pxCurrentTCBConst>:
 8014e50:	2000098c 	.word	0x2000098c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8014e54:	bf00      	nop
 8014e56:	bf00      	nop

08014e58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8014e58:	b580      	push	{r7, lr}
 8014e5a:	b082      	sub	sp, #8
 8014e5c:	af00      	add	r7, sp, #0
	__asm volatile
 8014e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e62:	b672      	cpsid	i
 8014e64:	f383 8811 	msr	BASEPRI, r3
 8014e68:	f3bf 8f6f 	isb	sy
 8014e6c:	f3bf 8f4f 	dsb	sy
 8014e70:	b662      	cpsie	i
 8014e72:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8014e74:	f7fe fdf8 	bl	8013a68 <xTaskIncrementTick>
 8014e78:	4603      	mov	r3, r0
 8014e7a:	2b00      	cmp	r3, #0
 8014e7c:	d003      	beq.n	8014e86 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8014e7e:	4b06      	ldr	r3, [pc, #24]	; (8014e98 <SysTick_Handler+0x40>)
 8014e80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014e84:	601a      	str	r2, [r3, #0]
 8014e86:	2300      	movs	r3, #0
 8014e88:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014e8a:	683b      	ldr	r3, [r7, #0]
 8014e8c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8014e90:	bf00      	nop
 8014e92:	3708      	adds	r7, #8
 8014e94:	46bd      	mov	sp, r7
 8014e96:	bd80      	pop	{r7, pc}
 8014e98:	e000ed04 	.word	0xe000ed04

08014e9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8014e9c:	b480      	push	{r7}
 8014e9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8014ea0:	4b0b      	ldr	r3, [pc, #44]	; (8014ed0 <vPortSetupTimerInterrupt+0x34>)
 8014ea2:	2200      	movs	r2, #0
 8014ea4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8014ea6:	4b0b      	ldr	r3, [pc, #44]	; (8014ed4 <vPortSetupTimerInterrupt+0x38>)
 8014ea8:	2200      	movs	r2, #0
 8014eaa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8014eac:	4b0a      	ldr	r3, [pc, #40]	; (8014ed8 <vPortSetupTimerInterrupt+0x3c>)
 8014eae:	681b      	ldr	r3, [r3, #0]
 8014eb0:	4a0a      	ldr	r2, [pc, #40]	; (8014edc <vPortSetupTimerInterrupt+0x40>)
 8014eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8014eb6:	099b      	lsrs	r3, r3, #6
 8014eb8:	4a09      	ldr	r2, [pc, #36]	; (8014ee0 <vPortSetupTimerInterrupt+0x44>)
 8014eba:	3b01      	subs	r3, #1
 8014ebc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8014ebe:	4b04      	ldr	r3, [pc, #16]	; (8014ed0 <vPortSetupTimerInterrupt+0x34>)
 8014ec0:	2207      	movs	r2, #7
 8014ec2:	601a      	str	r2, [r3, #0]
}
 8014ec4:	bf00      	nop
 8014ec6:	46bd      	mov	sp, r7
 8014ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ecc:	4770      	bx	lr
 8014ece:	bf00      	nop
 8014ed0:	e000e010 	.word	0xe000e010
 8014ed4:	e000e018 	.word	0xe000e018
 8014ed8:	20000010 	.word	0x20000010
 8014edc:	10624dd3 	.word	0x10624dd3
 8014ee0:	e000e014 	.word	0xe000e014

08014ee4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8014ee4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8014ef4 <vPortEnableVFP+0x10>
 8014ee8:	6801      	ldr	r1, [r0, #0]
 8014eea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8014eee:	6001      	str	r1, [r0, #0]
 8014ef0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8014ef2:	bf00      	nop
 8014ef4:	e000ed88 	.word	0xe000ed88

08014ef8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8014ef8:	b480      	push	{r7}
 8014efa:	b085      	sub	sp, #20
 8014efc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8014efe:	f3ef 8305 	mrs	r3, IPSR
 8014f02:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8014f04:	68fb      	ldr	r3, [r7, #12]
 8014f06:	2b0f      	cmp	r3, #15
 8014f08:	d915      	bls.n	8014f36 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8014f0a:	4a18      	ldr	r2, [pc, #96]	; (8014f6c <vPortValidateInterruptPriority+0x74>)
 8014f0c:	68fb      	ldr	r3, [r7, #12]
 8014f0e:	4413      	add	r3, r2
 8014f10:	781b      	ldrb	r3, [r3, #0]
 8014f12:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8014f14:	4b16      	ldr	r3, [pc, #88]	; (8014f70 <vPortValidateInterruptPriority+0x78>)
 8014f16:	781b      	ldrb	r3, [r3, #0]
 8014f18:	7afa      	ldrb	r2, [r7, #11]
 8014f1a:	429a      	cmp	r2, r3
 8014f1c:	d20b      	bcs.n	8014f36 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8014f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f22:	b672      	cpsid	i
 8014f24:	f383 8811 	msr	BASEPRI, r3
 8014f28:	f3bf 8f6f 	isb	sy
 8014f2c:	f3bf 8f4f 	dsb	sy
 8014f30:	b662      	cpsie	i
 8014f32:	607b      	str	r3, [r7, #4]
 8014f34:	e7fe      	b.n	8014f34 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8014f36:	4b0f      	ldr	r3, [pc, #60]	; (8014f74 <vPortValidateInterruptPriority+0x7c>)
 8014f38:	681b      	ldr	r3, [r3, #0]
 8014f3a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8014f3e:	4b0e      	ldr	r3, [pc, #56]	; (8014f78 <vPortValidateInterruptPriority+0x80>)
 8014f40:	681b      	ldr	r3, [r3, #0]
 8014f42:	429a      	cmp	r2, r3
 8014f44:	d90b      	bls.n	8014f5e <vPortValidateInterruptPriority+0x66>
 8014f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f4a:	b672      	cpsid	i
 8014f4c:	f383 8811 	msr	BASEPRI, r3
 8014f50:	f3bf 8f6f 	isb	sy
 8014f54:	f3bf 8f4f 	dsb	sy
 8014f58:	b662      	cpsie	i
 8014f5a:	603b      	str	r3, [r7, #0]
 8014f5c:	e7fe      	b.n	8014f5c <vPortValidateInterruptPriority+0x64>
	}
 8014f5e:	bf00      	nop
 8014f60:	3714      	adds	r7, #20
 8014f62:	46bd      	mov	sp, r7
 8014f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f68:	4770      	bx	lr
 8014f6a:	bf00      	nop
 8014f6c:	e000e3f0 	.word	0xe000e3f0
 8014f70:	20000fb8 	.word	0x20000fb8
 8014f74:	e000ed0c 	.word	0xe000ed0c
 8014f78:	20000fbc 	.word	0x20000fbc

08014f7c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8014f7c:	b580      	push	{r7, lr}
 8014f7e:	b08a      	sub	sp, #40	; 0x28
 8014f80:	af00      	add	r7, sp, #0
 8014f82:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8014f84:	2300      	movs	r3, #0
 8014f86:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8014f88:	f7fe fca0 	bl	80138cc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8014f8c:	4b5a      	ldr	r3, [pc, #360]	; (80150f8 <pvPortMalloc+0x17c>)
 8014f8e:	681b      	ldr	r3, [r3, #0]
 8014f90:	2b00      	cmp	r3, #0
 8014f92:	d101      	bne.n	8014f98 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8014f94:	f000 f916 	bl	80151c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8014f98:	4b58      	ldr	r3, [pc, #352]	; (80150fc <pvPortMalloc+0x180>)
 8014f9a:	681a      	ldr	r2, [r3, #0]
 8014f9c:	687b      	ldr	r3, [r7, #4]
 8014f9e:	4013      	ands	r3, r2
 8014fa0:	2b00      	cmp	r3, #0
 8014fa2:	f040 8090 	bne.w	80150c6 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8014fa6:	687b      	ldr	r3, [r7, #4]
 8014fa8:	2b00      	cmp	r3, #0
 8014faa:	d01e      	beq.n	8014fea <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8014fac:	2208      	movs	r2, #8
 8014fae:	687b      	ldr	r3, [r7, #4]
 8014fb0:	4413      	add	r3, r2
 8014fb2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8014fb4:	687b      	ldr	r3, [r7, #4]
 8014fb6:	f003 0307 	and.w	r3, r3, #7
 8014fba:	2b00      	cmp	r3, #0
 8014fbc:	d015      	beq.n	8014fea <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8014fbe:	687b      	ldr	r3, [r7, #4]
 8014fc0:	f023 0307 	bic.w	r3, r3, #7
 8014fc4:	3308      	adds	r3, #8
 8014fc6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014fc8:	687b      	ldr	r3, [r7, #4]
 8014fca:	f003 0307 	and.w	r3, r3, #7
 8014fce:	2b00      	cmp	r3, #0
 8014fd0:	d00b      	beq.n	8014fea <pvPortMalloc+0x6e>
 8014fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014fd6:	b672      	cpsid	i
 8014fd8:	f383 8811 	msr	BASEPRI, r3
 8014fdc:	f3bf 8f6f 	isb	sy
 8014fe0:	f3bf 8f4f 	dsb	sy
 8014fe4:	b662      	cpsie	i
 8014fe6:	617b      	str	r3, [r7, #20]
 8014fe8:	e7fe      	b.n	8014fe8 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8014fea:	687b      	ldr	r3, [r7, #4]
 8014fec:	2b00      	cmp	r3, #0
 8014fee:	d06a      	beq.n	80150c6 <pvPortMalloc+0x14a>
 8014ff0:	4b43      	ldr	r3, [pc, #268]	; (8015100 <pvPortMalloc+0x184>)
 8014ff2:	681b      	ldr	r3, [r3, #0]
 8014ff4:	687a      	ldr	r2, [r7, #4]
 8014ff6:	429a      	cmp	r2, r3
 8014ff8:	d865      	bhi.n	80150c6 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8014ffa:	4b42      	ldr	r3, [pc, #264]	; (8015104 <pvPortMalloc+0x188>)
 8014ffc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8014ffe:	4b41      	ldr	r3, [pc, #260]	; (8015104 <pvPortMalloc+0x188>)
 8015000:	681b      	ldr	r3, [r3, #0]
 8015002:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8015004:	e004      	b.n	8015010 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8015006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015008:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801500a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801500c:	681b      	ldr	r3, [r3, #0]
 801500e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8015010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015012:	685b      	ldr	r3, [r3, #4]
 8015014:	687a      	ldr	r2, [r7, #4]
 8015016:	429a      	cmp	r2, r3
 8015018:	d903      	bls.n	8015022 <pvPortMalloc+0xa6>
 801501a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801501c:	681b      	ldr	r3, [r3, #0]
 801501e:	2b00      	cmp	r3, #0
 8015020:	d1f1      	bne.n	8015006 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8015022:	4b35      	ldr	r3, [pc, #212]	; (80150f8 <pvPortMalloc+0x17c>)
 8015024:	681b      	ldr	r3, [r3, #0]
 8015026:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015028:	429a      	cmp	r2, r3
 801502a:	d04c      	beq.n	80150c6 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801502c:	6a3b      	ldr	r3, [r7, #32]
 801502e:	681b      	ldr	r3, [r3, #0]
 8015030:	2208      	movs	r2, #8
 8015032:	4413      	add	r3, r2
 8015034:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8015036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015038:	681a      	ldr	r2, [r3, #0]
 801503a:	6a3b      	ldr	r3, [r7, #32]
 801503c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801503e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015040:	685a      	ldr	r2, [r3, #4]
 8015042:	687b      	ldr	r3, [r7, #4]
 8015044:	1ad2      	subs	r2, r2, r3
 8015046:	2308      	movs	r3, #8
 8015048:	005b      	lsls	r3, r3, #1
 801504a:	429a      	cmp	r2, r3
 801504c:	d920      	bls.n	8015090 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801504e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015050:	687b      	ldr	r3, [r7, #4]
 8015052:	4413      	add	r3, r2
 8015054:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015056:	69bb      	ldr	r3, [r7, #24]
 8015058:	f003 0307 	and.w	r3, r3, #7
 801505c:	2b00      	cmp	r3, #0
 801505e:	d00b      	beq.n	8015078 <pvPortMalloc+0xfc>
 8015060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015064:	b672      	cpsid	i
 8015066:	f383 8811 	msr	BASEPRI, r3
 801506a:	f3bf 8f6f 	isb	sy
 801506e:	f3bf 8f4f 	dsb	sy
 8015072:	b662      	cpsie	i
 8015074:	613b      	str	r3, [r7, #16]
 8015076:	e7fe      	b.n	8015076 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8015078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801507a:	685a      	ldr	r2, [r3, #4]
 801507c:	687b      	ldr	r3, [r7, #4]
 801507e:	1ad2      	subs	r2, r2, r3
 8015080:	69bb      	ldr	r3, [r7, #24]
 8015082:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8015084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015086:	687a      	ldr	r2, [r7, #4]
 8015088:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801508a:	69b8      	ldr	r0, [r7, #24]
 801508c:	f000 f8fc 	bl	8015288 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8015090:	4b1b      	ldr	r3, [pc, #108]	; (8015100 <pvPortMalloc+0x184>)
 8015092:	681a      	ldr	r2, [r3, #0]
 8015094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015096:	685b      	ldr	r3, [r3, #4]
 8015098:	1ad3      	subs	r3, r2, r3
 801509a:	4a19      	ldr	r2, [pc, #100]	; (8015100 <pvPortMalloc+0x184>)
 801509c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801509e:	4b18      	ldr	r3, [pc, #96]	; (8015100 <pvPortMalloc+0x184>)
 80150a0:	681a      	ldr	r2, [r3, #0]
 80150a2:	4b19      	ldr	r3, [pc, #100]	; (8015108 <pvPortMalloc+0x18c>)
 80150a4:	681b      	ldr	r3, [r3, #0]
 80150a6:	429a      	cmp	r2, r3
 80150a8:	d203      	bcs.n	80150b2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80150aa:	4b15      	ldr	r3, [pc, #84]	; (8015100 <pvPortMalloc+0x184>)
 80150ac:	681b      	ldr	r3, [r3, #0]
 80150ae:	4a16      	ldr	r2, [pc, #88]	; (8015108 <pvPortMalloc+0x18c>)
 80150b0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80150b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150b4:	685a      	ldr	r2, [r3, #4]
 80150b6:	4b11      	ldr	r3, [pc, #68]	; (80150fc <pvPortMalloc+0x180>)
 80150b8:	681b      	ldr	r3, [r3, #0]
 80150ba:	431a      	orrs	r2, r3
 80150bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150be:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80150c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150c2:	2200      	movs	r2, #0
 80150c4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80150c6:	f7fe fc0f 	bl	80138e8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80150ca:	69fb      	ldr	r3, [r7, #28]
 80150cc:	f003 0307 	and.w	r3, r3, #7
 80150d0:	2b00      	cmp	r3, #0
 80150d2:	d00b      	beq.n	80150ec <pvPortMalloc+0x170>
 80150d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80150d8:	b672      	cpsid	i
 80150da:	f383 8811 	msr	BASEPRI, r3
 80150de:	f3bf 8f6f 	isb	sy
 80150e2:	f3bf 8f4f 	dsb	sy
 80150e6:	b662      	cpsie	i
 80150e8:	60fb      	str	r3, [r7, #12]
 80150ea:	e7fe      	b.n	80150ea <pvPortMalloc+0x16e>
	return pvReturn;
 80150ec:	69fb      	ldr	r3, [r7, #28]
}
 80150ee:	4618      	mov	r0, r3
 80150f0:	3728      	adds	r7, #40	; 0x28
 80150f2:	46bd      	mov	sp, r7
 80150f4:	bd80      	pop	{r7, pc}
 80150f6:	bf00      	nop
 80150f8:	20004bc8 	.word	0x20004bc8
 80150fc:	20004bd4 	.word	0x20004bd4
 8015100:	20004bcc 	.word	0x20004bcc
 8015104:	20004bc0 	.word	0x20004bc0
 8015108:	20004bd0 	.word	0x20004bd0

0801510c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 801510c:	b580      	push	{r7, lr}
 801510e:	b086      	sub	sp, #24
 8015110:	af00      	add	r7, sp, #0
 8015112:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8015114:	687b      	ldr	r3, [r7, #4]
 8015116:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8015118:	687b      	ldr	r3, [r7, #4]
 801511a:	2b00      	cmp	r3, #0
 801511c:	d04a      	beq.n	80151b4 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801511e:	2308      	movs	r3, #8
 8015120:	425b      	negs	r3, r3
 8015122:	697a      	ldr	r2, [r7, #20]
 8015124:	4413      	add	r3, r2
 8015126:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8015128:	697b      	ldr	r3, [r7, #20]
 801512a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801512c:	693b      	ldr	r3, [r7, #16]
 801512e:	685a      	ldr	r2, [r3, #4]
 8015130:	4b22      	ldr	r3, [pc, #136]	; (80151bc <vPortFree+0xb0>)
 8015132:	681b      	ldr	r3, [r3, #0]
 8015134:	4013      	ands	r3, r2
 8015136:	2b00      	cmp	r3, #0
 8015138:	d10b      	bne.n	8015152 <vPortFree+0x46>
 801513a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801513e:	b672      	cpsid	i
 8015140:	f383 8811 	msr	BASEPRI, r3
 8015144:	f3bf 8f6f 	isb	sy
 8015148:	f3bf 8f4f 	dsb	sy
 801514c:	b662      	cpsie	i
 801514e:	60fb      	str	r3, [r7, #12]
 8015150:	e7fe      	b.n	8015150 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8015152:	693b      	ldr	r3, [r7, #16]
 8015154:	681b      	ldr	r3, [r3, #0]
 8015156:	2b00      	cmp	r3, #0
 8015158:	d00b      	beq.n	8015172 <vPortFree+0x66>
 801515a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801515e:	b672      	cpsid	i
 8015160:	f383 8811 	msr	BASEPRI, r3
 8015164:	f3bf 8f6f 	isb	sy
 8015168:	f3bf 8f4f 	dsb	sy
 801516c:	b662      	cpsie	i
 801516e:	60bb      	str	r3, [r7, #8]
 8015170:	e7fe      	b.n	8015170 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8015172:	693b      	ldr	r3, [r7, #16]
 8015174:	685a      	ldr	r2, [r3, #4]
 8015176:	4b11      	ldr	r3, [pc, #68]	; (80151bc <vPortFree+0xb0>)
 8015178:	681b      	ldr	r3, [r3, #0]
 801517a:	4013      	ands	r3, r2
 801517c:	2b00      	cmp	r3, #0
 801517e:	d019      	beq.n	80151b4 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8015180:	693b      	ldr	r3, [r7, #16]
 8015182:	681b      	ldr	r3, [r3, #0]
 8015184:	2b00      	cmp	r3, #0
 8015186:	d115      	bne.n	80151b4 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8015188:	693b      	ldr	r3, [r7, #16]
 801518a:	685a      	ldr	r2, [r3, #4]
 801518c:	4b0b      	ldr	r3, [pc, #44]	; (80151bc <vPortFree+0xb0>)
 801518e:	681b      	ldr	r3, [r3, #0]
 8015190:	43db      	mvns	r3, r3
 8015192:	401a      	ands	r2, r3
 8015194:	693b      	ldr	r3, [r7, #16]
 8015196:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8015198:	f7fe fb98 	bl	80138cc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801519c:	693b      	ldr	r3, [r7, #16]
 801519e:	685a      	ldr	r2, [r3, #4]
 80151a0:	4b07      	ldr	r3, [pc, #28]	; (80151c0 <vPortFree+0xb4>)
 80151a2:	681b      	ldr	r3, [r3, #0]
 80151a4:	4413      	add	r3, r2
 80151a6:	4a06      	ldr	r2, [pc, #24]	; (80151c0 <vPortFree+0xb4>)
 80151a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80151aa:	6938      	ldr	r0, [r7, #16]
 80151ac:	f000 f86c 	bl	8015288 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80151b0:	f7fe fb9a 	bl	80138e8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80151b4:	bf00      	nop
 80151b6:	3718      	adds	r7, #24
 80151b8:	46bd      	mov	sp, r7
 80151ba:	bd80      	pop	{r7, pc}
 80151bc:	20004bd4 	.word	0x20004bd4
 80151c0:	20004bcc 	.word	0x20004bcc

080151c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80151c4:	b480      	push	{r7}
 80151c6:	b085      	sub	sp, #20
 80151c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80151ca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80151ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80151d0:	4b27      	ldr	r3, [pc, #156]	; (8015270 <prvHeapInit+0xac>)
 80151d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80151d4:	68fb      	ldr	r3, [r7, #12]
 80151d6:	f003 0307 	and.w	r3, r3, #7
 80151da:	2b00      	cmp	r3, #0
 80151dc:	d00c      	beq.n	80151f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80151de:	68fb      	ldr	r3, [r7, #12]
 80151e0:	3307      	adds	r3, #7
 80151e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80151e4:	68fb      	ldr	r3, [r7, #12]
 80151e6:	f023 0307 	bic.w	r3, r3, #7
 80151ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80151ec:	68ba      	ldr	r2, [r7, #8]
 80151ee:	68fb      	ldr	r3, [r7, #12]
 80151f0:	1ad3      	subs	r3, r2, r3
 80151f2:	4a1f      	ldr	r2, [pc, #124]	; (8015270 <prvHeapInit+0xac>)
 80151f4:	4413      	add	r3, r2
 80151f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80151f8:	68fb      	ldr	r3, [r7, #12]
 80151fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80151fc:	4a1d      	ldr	r2, [pc, #116]	; (8015274 <prvHeapInit+0xb0>)
 80151fe:	687b      	ldr	r3, [r7, #4]
 8015200:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8015202:	4b1c      	ldr	r3, [pc, #112]	; (8015274 <prvHeapInit+0xb0>)
 8015204:	2200      	movs	r2, #0
 8015206:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8015208:	687b      	ldr	r3, [r7, #4]
 801520a:	68ba      	ldr	r2, [r7, #8]
 801520c:	4413      	add	r3, r2
 801520e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8015210:	2208      	movs	r2, #8
 8015212:	68fb      	ldr	r3, [r7, #12]
 8015214:	1a9b      	subs	r3, r3, r2
 8015216:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015218:	68fb      	ldr	r3, [r7, #12]
 801521a:	f023 0307 	bic.w	r3, r3, #7
 801521e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8015220:	68fb      	ldr	r3, [r7, #12]
 8015222:	4a15      	ldr	r2, [pc, #84]	; (8015278 <prvHeapInit+0xb4>)
 8015224:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8015226:	4b14      	ldr	r3, [pc, #80]	; (8015278 <prvHeapInit+0xb4>)
 8015228:	681b      	ldr	r3, [r3, #0]
 801522a:	2200      	movs	r2, #0
 801522c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801522e:	4b12      	ldr	r3, [pc, #72]	; (8015278 <prvHeapInit+0xb4>)
 8015230:	681b      	ldr	r3, [r3, #0]
 8015232:	2200      	movs	r2, #0
 8015234:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8015236:	687b      	ldr	r3, [r7, #4]
 8015238:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801523a:	683b      	ldr	r3, [r7, #0]
 801523c:	68fa      	ldr	r2, [r7, #12]
 801523e:	1ad2      	subs	r2, r2, r3
 8015240:	683b      	ldr	r3, [r7, #0]
 8015242:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8015244:	4b0c      	ldr	r3, [pc, #48]	; (8015278 <prvHeapInit+0xb4>)
 8015246:	681a      	ldr	r2, [r3, #0]
 8015248:	683b      	ldr	r3, [r7, #0]
 801524a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801524c:	683b      	ldr	r3, [r7, #0]
 801524e:	685b      	ldr	r3, [r3, #4]
 8015250:	4a0a      	ldr	r2, [pc, #40]	; (801527c <prvHeapInit+0xb8>)
 8015252:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8015254:	683b      	ldr	r3, [r7, #0]
 8015256:	685b      	ldr	r3, [r3, #4]
 8015258:	4a09      	ldr	r2, [pc, #36]	; (8015280 <prvHeapInit+0xbc>)
 801525a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801525c:	4b09      	ldr	r3, [pc, #36]	; (8015284 <prvHeapInit+0xc0>)
 801525e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8015262:	601a      	str	r2, [r3, #0]
}
 8015264:	bf00      	nop
 8015266:	3714      	adds	r7, #20
 8015268:	46bd      	mov	sp, r7
 801526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801526e:	4770      	bx	lr
 8015270:	20000fc0 	.word	0x20000fc0
 8015274:	20004bc0 	.word	0x20004bc0
 8015278:	20004bc8 	.word	0x20004bc8
 801527c:	20004bd0 	.word	0x20004bd0
 8015280:	20004bcc 	.word	0x20004bcc
 8015284:	20004bd4 	.word	0x20004bd4

08015288 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8015288:	b480      	push	{r7}
 801528a:	b085      	sub	sp, #20
 801528c:	af00      	add	r7, sp, #0
 801528e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8015290:	4b28      	ldr	r3, [pc, #160]	; (8015334 <prvInsertBlockIntoFreeList+0xac>)
 8015292:	60fb      	str	r3, [r7, #12]
 8015294:	e002      	b.n	801529c <prvInsertBlockIntoFreeList+0x14>
 8015296:	68fb      	ldr	r3, [r7, #12]
 8015298:	681b      	ldr	r3, [r3, #0]
 801529a:	60fb      	str	r3, [r7, #12]
 801529c:	68fb      	ldr	r3, [r7, #12]
 801529e:	681b      	ldr	r3, [r3, #0]
 80152a0:	687a      	ldr	r2, [r7, #4]
 80152a2:	429a      	cmp	r2, r3
 80152a4:	d8f7      	bhi.n	8015296 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80152a6:	68fb      	ldr	r3, [r7, #12]
 80152a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80152aa:	68fb      	ldr	r3, [r7, #12]
 80152ac:	685b      	ldr	r3, [r3, #4]
 80152ae:	68ba      	ldr	r2, [r7, #8]
 80152b0:	4413      	add	r3, r2
 80152b2:	687a      	ldr	r2, [r7, #4]
 80152b4:	429a      	cmp	r2, r3
 80152b6:	d108      	bne.n	80152ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80152b8:	68fb      	ldr	r3, [r7, #12]
 80152ba:	685a      	ldr	r2, [r3, #4]
 80152bc:	687b      	ldr	r3, [r7, #4]
 80152be:	685b      	ldr	r3, [r3, #4]
 80152c0:	441a      	add	r2, r3
 80152c2:	68fb      	ldr	r3, [r7, #12]
 80152c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80152c6:	68fb      	ldr	r3, [r7, #12]
 80152c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80152ca:	687b      	ldr	r3, [r7, #4]
 80152cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80152ce:	687b      	ldr	r3, [r7, #4]
 80152d0:	685b      	ldr	r3, [r3, #4]
 80152d2:	68ba      	ldr	r2, [r7, #8]
 80152d4:	441a      	add	r2, r3
 80152d6:	68fb      	ldr	r3, [r7, #12]
 80152d8:	681b      	ldr	r3, [r3, #0]
 80152da:	429a      	cmp	r2, r3
 80152dc:	d118      	bne.n	8015310 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80152de:	68fb      	ldr	r3, [r7, #12]
 80152e0:	681a      	ldr	r2, [r3, #0]
 80152e2:	4b15      	ldr	r3, [pc, #84]	; (8015338 <prvInsertBlockIntoFreeList+0xb0>)
 80152e4:	681b      	ldr	r3, [r3, #0]
 80152e6:	429a      	cmp	r2, r3
 80152e8:	d00d      	beq.n	8015306 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80152ea:	687b      	ldr	r3, [r7, #4]
 80152ec:	685a      	ldr	r2, [r3, #4]
 80152ee:	68fb      	ldr	r3, [r7, #12]
 80152f0:	681b      	ldr	r3, [r3, #0]
 80152f2:	685b      	ldr	r3, [r3, #4]
 80152f4:	441a      	add	r2, r3
 80152f6:	687b      	ldr	r3, [r7, #4]
 80152f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80152fa:	68fb      	ldr	r3, [r7, #12]
 80152fc:	681b      	ldr	r3, [r3, #0]
 80152fe:	681a      	ldr	r2, [r3, #0]
 8015300:	687b      	ldr	r3, [r7, #4]
 8015302:	601a      	str	r2, [r3, #0]
 8015304:	e008      	b.n	8015318 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8015306:	4b0c      	ldr	r3, [pc, #48]	; (8015338 <prvInsertBlockIntoFreeList+0xb0>)
 8015308:	681a      	ldr	r2, [r3, #0]
 801530a:	687b      	ldr	r3, [r7, #4]
 801530c:	601a      	str	r2, [r3, #0]
 801530e:	e003      	b.n	8015318 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8015310:	68fb      	ldr	r3, [r7, #12]
 8015312:	681a      	ldr	r2, [r3, #0]
 8015314:	687b      	ldr	r3, [r7, #4]
 8015316:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8015318:	68fa      	ldr	r2, [r7, #12]
 801531a:	687b      	ldr	r3, [r7, #4]
 801531c:	429a      	cmp	r2, r3
 801531e:	d002      	beq.n	8015326 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8015320:	68fb      	ldr	r3, [r7, #12]
 8015322:	687a      	ldr	r2, [r7, #4]
 8015324:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015326:	bf00      	nop
 8015328:	3714      	adds	r7, #20
 801532a:	46bd      	mov	sp, r7
 801532c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015330:	4770      	bx	lr
 8015332:	bf00      	nop
 8015334:	20004bc0 	.word	0x20004bc0
 8015338:	20004bc8 	.word	0x20004bc8

0801533c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801533c:	b580      	push	{r7, lr}
 801533e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8015340:	2200      	movs	r2, #0
 8015342:	4912      	ldr	r1, [pc, #72]	; (801538c <MX_USB_DEVICE_Init+0x50>)
 8015344:	4812      	ldr	r0, [pc, #72]	; (8015390 <MX_USB_DEVICE_Init+0x54>)
 8015346:	f7f6 fd8c 	bl	800be62 <USBD_Init>
 801534a:	4603      	mov	r3, r0
 801534c:	2b00      	cmp	r3, #0
 801534e:	d001      	beq.n	8015354 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8015350:	f7eb fe00 	bl	8000f54 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 8015354:	490f      	ldr	r1, [pc, #60]	; (8015394 <MX_USB_DEVICE_Init+0x58>)
 8015356:	480e      	ldr	r0, [pc, #56]	; (8015390 <MX_USB_DEVICE_Init+0x54>)
 8015358:	f7f6 fdb9 	bl	800bece <USBD_RegisterClass>
 801535c:	4603      	mov	r3, r0
 801535e:	2b00      	cmp	r3, #0
 8015360:	d001      	beq.n	8015366 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8015362:	f7eb fdf7 	bl	8000f54 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 8015366:	490c      	ldr	r1, [pc, #48]	; (8015398 <MX_USB_DEVICE_Init+0x5c>)
 8015368:	4809      	ldr	r0, [pc, #36]	; (8015390 <MX_USB_DEVICE_Init+0x54>)
 801536a:	f7f5 fab5 	bl	800a8d8 <USBD_MSC_RegisterStorage>
 801536e:	4603      	mov	r3, r0
 8015370:	2b00      	cmp	r3, #0
 8015372:	d001      	beq.n	8015378 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8015374:	f7eb fdee 	bl	8000f54 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8015378:	4805      	ldr	r0, [pc, #20]	; (8015390 <MX_USB_DEVICE_Init+0x54>)
 801537a:	f7f6 fdc9 	bl	800bf10 <USBD_Start>
 801537e:	4603      	mov	r3, r0
 8015380:	2b00      	cmp	r3, #0
 8015382:	d001      	beq.n	8015388 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8015384:	f7eb fde6 	bl	8000f54 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8015388:	bf00      	nop
 801538a:	bd80      	pop	{r7, pc}
 801538c:	20000108 	.word	0x20000108
 8015390:	20009448 	.word	0x20009448
 8015394:	2000001c 	.word	0x2000001c
 8015398:	20000168 	.word	0x20000168

0801539c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801539c:	b480      	push	{r7}
 801539e:	b083      	sub	sp, #12
 80153a0:	af00      	add	r7, sp, #0
 80153a2:	4603      	mov	r3, r0
 80153a4:	6039      	str	r1, [r7, #0]
 80153a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80153a8:	683b      	ldr	r3, [r7, #0]
 80153aa:	2212      	movs	r2, #18
 80153ac:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80153ae:	4b03      	ldr	r3, [pc, #12]	; (80153bc <USBD_FS_DeviceDescriptor+0x20>)
}
 80153b0:	4618      	mov	r0, r3
 80153b2:	370c      	adds	r7, #12
 80153b4:	46bd      	mov	sp, r7
 80153b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153ba:	4770      	bx	lr
 80153bc:	20000128 	.word	0x20000128

080153c0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80153c0:	b480      	push	{r7}
 80153c2:	b083      	sub	sp, #12
 80153c4:	af00      	add	r7, sp, #0
 80153c6:	4603      	mov	r3, r0
 80153c8:	6039      	str	r1, [r7, #0]
 80153ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80153cc:	683b      	ldr	r3, [r7, #0]
 80153ce:	2204      	movs	r2, #4
 80153d0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80153d2:	4b03      	ldr	r3, [pc, #12]	; (80153e0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80153d4:	4618      	mov	r0, r3
 80153d6:	370c      	adds	r7, #12
 80153d8:	46bd      	mov	sp, r7
 80153da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153de:	4770      	bx	lr
 80153e0:	20000148 	.word	0x20000148

080153e4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80153e4:	b580      	push	{r7, lr}
 80153e6:	b082      	sub	sp, #8
 80153e8:	af00      	add	r7, sp, #0
 80153ea:	4603      	mov	r3, r0
 80153ec:	6039      	str	r1, [r7, #0]
 80153ee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80153f0:	79fb      	ldrb	r3, [r7, #7]
 80153f2:	2b00      	cmp	r3, #0
 80153f4:	d105      	bne.n	8015402 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80153f6:	683a      	ldr	r2, [r7, #0]
 80153f8:	4907      	ldr	r1, [pc, #28]	; (8015418 <USBD_FS_ProductStrDescriptor+0x34>)
 80153fa:	4808      	ldr	r0, [pc, #32]	; (801541c <USBD_FS_ProductStrDescriptor+0x38>)
 80153fc:	f7f7 fd7f 	bl	800cefe <USBD_GetString>
 8015400:	e004      	b.n	801540c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8015402:	683a      	ldr	r2, [r7, #0]
 8015404:	4904      	ldr	r1, [pc, #16]	; (8015418 <USBD_FS_ProductStrDescriptor+0x34>)
 8015406:	4805      	ldr	r0, [pc, #20]	; (801541c <USBD_FS_ProductStrDescriptor+0x38>)
 8015408:	f7f7 fd79 	bl	800cefe <USBD_GetString>
  }
  return USBD_StrDesc;
 801540c:	4b02      	ldr	r3, [pc, #8]	; (8015418 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801540e:	4618      	mov	r0, r3
 8015410:	3708      	adds	r7, #8
 8015412:	46bd      	mov	sp, r7
 8015414:	bd80      	pop	{r7, pc}
 8015416:	bf00      	nop
 8015418:	20009718 	.word	0x20009718
 801541c:	08016074 	.word	0x08016074

08015420 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015420:	b580      	push	{r7, lr}
 8015422:	b082      	sub	sp, #8
 8015424:	af00      	add	r7, sp, #0
 8015426:	4603      	mov	r3, r0
 8015428:	6039      	str	r1, [r7, #0]
 801542a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801542c:	683a      	ldr	r2, [r7, #0]
 801542e:	4904      	ldr	r1, [pc, #16]	; (8015440 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8015430:	4804      	ldr	r0, [pc, #16]	; (8015444 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8015432:	f7f7 fd64 	bl	800cefe <USBD_GetString>
  return USBD_StrDesc;
 8015436:	4b02      	ldr	r3, [pc, #8]	; (8015440 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8015438:	4618      	mov	r0, r3
 801543a:	3708      	adds	r7, #8
 801543c:	46bd      	mov	sp, r7
 801543e:	bd80      	pop	{r7, pc}
 8015440:	20009718 	.word	0x20009718
 8015444:	08016088 	.word	0x08016088

08015448 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015448:	b580      	push	{r7, lr}
 801544a:	b082      	sub	sp, #8
 801544c:	af00      	add	r7, sp, #0
 801544e:	4603      	mov	r3, r0
 8015450:	6039      	str	r1, [r7, #0]
 8015452:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8015454:	683b      	ldr	r3, [r7, #0]
 8015456:	221a      	movs	r2, #26
 8015458:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801545a:	f000 f855 	bl	8015508 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801545e:	4b02      	ldr	r3, [pc, #8]	; (8015468 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8015460:	4618      	mov	r0, r3
 8015462:	3708      	adds	r7, #8
 8015464:	46bd      	mov	sp, r7
 8015466:	bd80      	pop	{r7, pc}
 8015468:	2000014c 	.word	0x2000014c

0801546c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801546c:	b580      	push	{r7, lr}
 801546e:	b082      	sub	sp, #8
 8015470:	af00      	add	r7, sp, #0
 8015472:	4603      	mov	r3, r0
 8015474:	6039      	str	r1, [r7, #0]
 8015476:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8015478:	79fb      	ldrb	r3, [r7, #7]
 801547a:	2b00      	cmp	r3, #0
 801547c:	d105      	bne.n	801548a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801547e:	683a      	ldr	r2, [r7, #0]
 8015480:	4907      	ldr	r1, [pc, #28]	; (80154a0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8015482:	4808      	ldr	r0, [pc, #32]	; (80154a4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8015484:	f7f7 fd3b 	bl	800cefe <USBD_GetString>
 8015488:	e004      	b.n	8015494 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801548a:	683a      	ldr	r2, [r7, #0]
 801548c:	4904      	ldr	r1, [pc, #16]	; (80154a0 <USBD_FS_ConfigStrDescriptor+0x34>)
 801548e:	4805      	ldr	r0, [pc, #20]	; (80154a4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8015490:	f7f7 fd35 	bl	800cefe <USBD_GetString>
  }
  return USBD_StrDesc;
 8015494:	4b02      	ldr	r3, [pc, #8]	; (80154a0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8015496:	4618      	mov	r0, r3
 8015498:	3708      	adds	r7, #8
 801549a:	46bd      	mov	sp, r7
 801549c:	bd80      	pop	{r7, pc}
 801549e:	bf00      	nop
 80154a0:	20009718 	.word	0x20009718
 80154a4:	0801609c 	.word	0x0801609c

080154a8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80154a8:	b580      	push	{r7, lr}
 80154aa:	b082      	sub	sp, #8
 80154ac:	af00      	add	r7, sp, #0
 80154ae:	4603      	mov	r3, r0
 80154b0:	6039      	str	r1, [r7, #0]
 80154b2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80154b4:	79fb      	ldrb	r3, [r7, #7]
 80154b6:	2b00      	cmp	r3, #0
 80154b8:	d105      	bne.n	80154c6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80154ba:	683a      	ldr	r2, [r7, #0]
 80154bc:	4907      	ldr	r1, [pc, #28]	; (80154dc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80154be:	4808      	ldr	r0, [pc, #32]	; (80154e0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80154c0:	f7f7 fd1d 	bl	800cefe <USBD_GetString>
 80154c4:	e004      	b.n	80154d0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80154c6:	683a      	ldr	r2, [r7, #0]
 80154c8:	4904      	ldr	r1, [pc, #16]	; (80154dc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80154ca:	4805      	ldr	r0, [pc, #20]	; (80154e0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80154cc:	f7f7 fd17 	bl	800cefe <USBD_GetString>
  }
  return USBD_StrDesc;
 80154d0:	4b02      	ldr	r3, [pc, #8]	; (80154dc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80154d2:	4618      	mov	r0, r3
 80154d4:	3708      	adds	r7, #8
 80154d6:	46bd      	mov	sp, r7
 80154d8:	bd80      	pop	{r7, pc}
 80154da:	bf00      	nop
 80154dc:	20009718 	.word	0x20009718
 80154e0:	080160a8 	.word	0x080160a8

080154e4 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80154e4:	b480      	push	{r7}
 80154e6:	b083      	sub	sp, #12
 80154e8:	af00      	add	r7, sp, #0
 80154ea:	4603      	mov	r3, r0
 80154ec:	6039      	str	r1, [r7, #0]
 80154ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 80154f0:	683b      	ldr	r3, [r7, #0]
 80154f2:	220c      	movs	r2, #12
 80154f4:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 80154f6:	4b03      	ldr	r3, [pc, #12]	; (8015504 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 80154f8:	4618      	mov	r0, r3
 80154fa:	370c      	adds	r7, #12
 80154fc:	46bd      	mov	sp, r7
 80154fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015502:	4770      	bx	lr
 8015504:	2000013c 	.word	0x2000013c

08015508 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8015508:	b580      	push	{r7, lr}
 801550a:	b084      	sub	sp, #16
 801550c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801550e:	4b0f      	ldr	r3, [pc, #60]	; (801554c <Get_SerialNum+0x44>)
 8015510:	681b      	ldr	r3, [r3, #0]
 8015512:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8015514:	4b0e      	ldr	r3, [pc, #56]	; (8015550 <Get_SerialNum+0x48>)
 8015516:	681b      	ldr	r3, [r3, #0]
 8015518:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801551a:	4b0e      	ldr	r3, [pc, #56]	; (8015554 <Get_SerialNum+0x4c>)
 801551c:	681b      	ldr	r3, [r3, #0]
 801551e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8015520:	68fa      	ldr	r2, [r7, #12]
 8015522:	687b      	ldr	r3, [r7, #4]
 8015524:	4413      	add	r3, r2
 8015526:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8015528:	68fb      	ldr	r3, [r7, #12]
 801552a:	2b00      	cmp	r3, #0
 801552c:	d009      	beq.n	8015542 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801552e:	2208      	movs	r2, #8
 8015530:	4909      	ldr	r1, [pc, #36]	; (8015558 <Get_SerialNum+0x50>)
 8015532:	68f8      	ldr	r0, [r7, #12]
 8015534:	f000 f814 	bl	8015560 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8015538:	2204      	movs	r2, #4
 801553a:	4908      	ldr	r1, [pc, #32]	; (801555c <Get_SerialNum+0x54>)
 801553c:	68b8      	ldr	r0, [r7, #8]
 801553e:	f000 f80f 	bl	8015560 <IntToUnicode>
  }
}
 8015542:	bf00      	nop
 8015544:	3710      	adds	r7, #16
 8015546:	46bd      	mov	sp, r7
 8015548:	bd80      	pop	{r7, pc}
 801554a:	bf00      	nop
 801554c:	1ff0f420 	.word	0x1ff0f420
 8015550:	1ff0f424 	.word	0x1ff0f424
 8015554:	1ff0f428 	.word	0x1ff0f428
 8015558:	2000014e 	.word	0x2000014e
 801555c:	2000015e 	.word	0x2000015e

08015560 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8015560:	b480      	push	{r7}
 8015562:	b087      	sub	sp, #28
 8015564:	af00      	add	r7, sp, #0
 8015566:	60f8      	str	r0, [r7, #12]
 8015568:	60b9      	str	r1, [r7, #8]
 801556a:	4613      	mov	r3, r2
 801556c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801556e:	2300      	movs	r3, #0
 8015570:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8015572:	2300      	movs	r3, #0
 8015574:	75fb      	strb	r3, [r7, #23]
 8015576:	e027      	b.n	80155c8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8015578:	68fb      	ldr	r3, [r7, #12]
 801557a:	0f1b      	lsrs	r3, r3, #28
 801557c:	2b09      	cmp	r3, #9
 801557e:	d80b      	bhi.n	8015598 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8015580:	68fb      	ldr	r3, [r7, #12]
 8015582:	0f1b      	lsrs	r3, r3, #28
 8015584:	b2da      	uxtb	r2, r3
 8015586:	7dfb      	ldrb	r3, [r7, #23]
 8015588:	005b      	lsls	r3, r3, #1
 801558a:	4619      	mov	r1, r3
 801558c:	68bb      	ldr	r3, [r7, #8]
 801558e:	440b      	add	r3, r1
 8015590:	3230      	adds	r2, #48	; 0x30
 8015592:	b2d2      	uxtb	r2, r2
 8015594:	701a      	strb	r2, [r3, #0]
 8015596:	e00a      	b.n	80155ae <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8015598:	68fb      	ldr	r3, [r7, #12]
 801559a:	0f1b      	lsrs	r3, r3, #28
 801559c:	b2da      	uxtb	r2, r3
 801559e:	7dfb      	ldrb	r3, [r7, #23]
 80155a0:	005b      	lsls	r3, r3, #1
 80155a2:	4619      	mov	r1, r3
 80155a4:	68bb      	ldr	r3, [r7, #8]
 80155a6:	440b      	add	r3, r1
 80155a8:	3237      	adds	r2, #55	; 0x37
 80155aa:	b2d2      	uxtb	r2, r2
 80155ac:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80155ae:	68fb      	ldr	r3, [r7, #12]
 80155b0:	011b      	lsls	r3, r3, #4
 80155b2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80155b4:	7dfb      	ldrb	r3, [r7, #23]
 80155b6:	005b      	lsls	r3, r3, #1
 80155b8:	3301      	adds	r3, #1
 80155ba:	68ba      	ldr	r2, [r7, #8]
 80155bc:	4413      	add	r3, r2
 80155be:	2200      	movs	r2, #0
 80155c0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80155c2:	7dfb      	ldrb	r3, [r7, #23]
 80155c4:	3301      	adds	r3, #1
 80155c6:	75fb      	strb	r3, [r7, #23]
 80155c8:	7dfa      	ldrb	r2, [r7, #23]
 80155ca:	79fb      	ldrb	r3, [r7, #7]
 80155cc:	429a      	cmp	r2, r3
 80155ce:	d3d3      	bcc.n	8015578 <IntToUnicode+0x18>
  }
}
 80155d0:	bf00      	nop
 80155d2:	371c      	adds	r7, #28
 80155d4:	46bd      	mov	sp, r7
 80155d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155da:	4770      	bx	lr

080155dc <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 80155dc:	b480      	push	{r7}
 80155de:	b083      	sub	sp, #12
 80155e0:	af00      	add	r7, sp, #0
 80155e2:	4603      	mov	r3, r0
 80155e4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 80155e6:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 80155e8:	4618      	mov	r0, r3
 80155ea:	370c      	adds	r7, #12
 80155ec:	46bd      	mov	sp, r7
 80155ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155f2:	4770      	bx	lr

080155f4 <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 80155f4:	b580      	push	{r7, lr}
 80155f6:	b084      	sub	sp, #16
 80155f8:	af00      	add	r7, sp, #0
 80155fa:	4603      	mov	r3, r0
 80155fc:	60b9      	str	r1, [r7, #8]
 80155fe:	607a      	str	r2, [r7, #4]
 8015600:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  if(HAL_SD_GetCardInfo(&hsd1,&SDCardInfo)==HAL_OK){
 8015602:	490b      	ldr	r1, [pc, #44]	; (8015630 <STORAGE_GetCapacity_FS+0x3c>)
 8015604:	480b      	ldr	r0, [pc, #44]	; (8015634 <STORAGE_GetCapacity_FS+0x40>)
 8015606:	f7f1 f88b 	bl	8006720 <HAL_SD_GetCardInfo>
 801560a:	4603      	mov	r3, r0
 801560c:	2b00      	cmp	r3, #0
 801560e:	d10a      	bne.n	8015626 <STORAGE_GetCapacity_FS+0x32>
  *block_num  = SDCardInfo.LogBlockNbr;
 8015610:	4b07      	ldr	r3, [pc, #28]	; (8015630 <STORAGE_GetCapacity_FS+0x3c>)
 8015612:	699a      	ldr	r2, [r3, #24]
 8015614:	68bb      	ldr	r3, [r7, #8]
 8015616:	601a      	str	r2, [r3, #0]
  *block_size = SDCardInfo.LogBlockSize;
 8015618:	4b05      	ldr	r3, [pc, #20]	; (8015630 <STORAGE_GetCapacity_FS+0x3c>)
 801561a:	69db      	ldr	r3, [r3, #28]
 801561c:	b29a      	uxth	r2, r3
 801561e:	687b      	ldr	r3, [r7, #4]
 8015620:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 8015622:	2300      	movs	r3, #0
 8015624:	e7ff      	b.n	8015626 <STORAGE_GetCapacity_FS+0x32>
  }
  /* USER CODE END 3 */
}
 8015626:	4618      	mov	r0, r3
 8015628:	3710      	adds	r7, #16
 801562a:	46bd      	mov	sp, r7
 801562c:	bd80      	pop	{r7, pc}
 801562e:	bf00      	nop
 8015630:	20004d10 	.word	0x20004d10
 8015634:	20004c8c 	.word	0x20004c8c

08015638 <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 8015638:	b480      	push	{r7}
 801563a:	b083      	sub	sp, #12
 801563c:	af00      	add	r7, sp, #0
 801563e:	4603      	mov	r3, r0
 8015640:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8015642:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8015644:	4618      	mov	r0, r3
 8015646:	370c      	adds	r7, #12
 8015648:	46bd      	mov	sp, r7
 801564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801564e:	4770      	bx	lr

08015650 <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 8015650:	b480      	push	{r7}
 8015652:	b083      	sub	sp, #12
 8015654:	af00      	add	r7, sp, #0
 8015656:	4603      	mov	r3, r0
 8015658:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 801565a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801565c:	4618      	mov	r0, r3
 801565e:	370c      	adds	r7, #12
 8015660:	46bd      	mov	sp, r7
 8015662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015666:	4770      	bx	lr

08015668 <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8015668:	b580      	push	{r7, lr}
 801566a:	b086      	sub	sp, #24
 801566c:	af02      	add	r7, sp, #8
 801566e:	60b9      	str	r1, [r7, #8]
 8015670:	607a      	str	r2, [r7, #4]
 8015672:	461a      	mov	r2, r3
 8015674:	4603      	mov	r3, r0
 8015676:	73fb      	strb	r3, [r7, #15]
 8015678:	4613      	mov	r3, r2
 801567a:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
 if(HAL_SD_ReadBlocks(&hsd1,buf,blk_addr,blk_len,10)==HAL_OK){
 801567c:	89ba      	ldrh	r2, [r7, #12]
 801567e:	230a      	movs	r3, #10
 8015680:	9300      	str	r3, [sp, #0]
 8015682:	4613      	mov	r3, r2
 8015684:	687a      	ldr	r2, [r7, #4]
 8015686:	68b9      	ldr	r1, [r7, #8]
 8015688:	4805      	ldr	r0, [pc, #20]	; (80156a0 <STORAGE_Read_FS+0x38>)
 801568a:	f7ef ffb3 	bl	80055f4 <HAL_SD_ReadBlocks>
 801568e:	4603      	mov	r3, r0
 8015690:	2b00      	cmp	r3, #0
 8015692:	d101      	bne.n	8015698 <STORAGE_Read_FS+0x30>

  return (USBD_OK);
 8015694:	2300      	movs	r3, #0
 8015696:	e7ff      	b.n	8015698 <STORAGE_Read_FS+0x30>
 }
  /* USER CODE END 6 */
}
 8015698:	4618      	mov	r0, r3
 801569a:	3710      	adds	r7, #16
 801569c:	46bd      	mov	sp, r7
 801569e:	bd80      	pop	{r7, pc}
 80156a0:	20004c8c 	.word	0x20004c8c

080156a4 <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 80156a4:	b580      	push	{r7, lr}
 80156a6:	b086      	sub	sp, #24
 80156a8:	af02      	add	r7, sp, #8
 80156aa:	60b9      	str	r1, [r7, #8]
 80156ac:	607a      	str	r2, [r7, #4]
 80156ae:	461a      	mov	r2, r3
 80156b0:	4603      	mov	r3, r0
 80156b2:	73fb      	strb	r3, [r7, #15]
 80156b4:	4613      	mov	r3, r2
 80156b6:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
	if(HAL_SD_WriteBlocks(&hsd1,buf,blk_addr,blk_len,10)==HAL_OK){
 80156b8:	89ba      	ldrh	r2, [r7, #12]
 80156ba:	230a      	movs	r3, #10
 80156bc:	9300      	str	r3, [sp, #0]
 80156be:	4613      	mov	r3, r2
 80156c0:	687a      	ldr	r2, [r7, #4]
 80156c2:	68b9      	ldr	r1, [r7, #8]
 80156c4:	4805      	ldr	r0, [pc, #20]	; (80156dc <STORAGE_Write_FS+0x38>)
 80156c6:	f7f0 f98d 	bl	80059e4 <HAL_SD_WriteBlocks>
 80156ca:	4603      	mov	r3, r0
 80156cc:	2b00      	cmp	r3, #0
 80156ce:	d101      	bne.n	80156d4 <STORAGE_Write_FS+0x30>

	  return (USBD_OK);
 80156d0:	2300      	movs	r3, #0
 80156d2:	e7ff      	b.n	80156d4 <STORAGE_Write_FS+0x30>
	 }
  /* USER CODE END 7 */
}
 80156d4:	4618      	mov	r0, r3
 80156d6:	3710      	adds	r7, #16
 80156d8:	46bd      	mov	sp, r7
 80156da:	bd80      	pop	{r7, pc}
 80156dc:	20004c8c 	.word	0x20004c8c

080156e0 <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 80156e0:	b480      	push	{r7}
 80156e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 80156e4:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 80156e6:	4618      	mov	r0, r3
 80156e8:	46bd      	mov	sp, r7
 80156ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156ee:	4770      	bx	lr

080156f0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80156f0:	b580      	push	{r7, lr}
 80156f2:	b08a      	sub	sp, #40	; 0x28
 80156f4:	af00      	add	r7, sp, #0
 80156f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80156f8:	f107 0314 	add.w	r3, r7, #20
 80156fc:	2200      	movs	r2, #0
 80156fe:	601a      	str	r2, [r3, #0]
 8015700:	605a      	str	r2, [r3, #4]
 8015702:	609a      	str	r2, [r3, #8]
 8015704:	60da      	str	r2, [r3, #12]
 8015706:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8015708:	687b      	ldr	r3, [r7, #4]
 801570a:	681b      	ldr	r3, [r3, #0]
 801570c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8015710:	d13c      	bne.n	801578c <HAL_PCD_MspInit+0x9c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8015712:	4b20      	ldr	r3, [pc, #128]	; (8015794 <HAL_PCD_MspInit+0xa4>)
 8015714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015716:	4a1f      	ldr	r2, [pc, #124]	; (8015794 <HAL_PCD_MspInit+0xa4>)
 8015718:	f043 0301 	orr.w	r3, r3, #1
 801571c:	6313      	str	r3, [r2, #48]	; 0x30
 801571e:	4b1d      	ldr	r3, [pc, #116]	; (8015794 <HAL_PCD_MspInit+0xa4>)
 8015720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015722:	f003 0301 	and.w	r3, r3, #1
 8015726:	613b      	str	r3, [r7, #16]
 8015728:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_DM_Pin|USB_DP_Pin;
 801572a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801572e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015730:	2302      	movs	r3, #2
 8015732:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015734:	2300      	movs	r3, #0
 8015736:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015738:	2303      	movs	r3, #3
 801573a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801573c:	230a      	movs	r3, #10
 801573e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8015740:	f107 0314 	add.w	r3, r7, #20
 8015744:	4619      	mov	r1, r3
 8015746:	4814      	ldr	r0, [pc, #80]	; (8015798 <HAL_PCD_MspInit+0xa8>)
 8015748:	f7ed f97e 	bl	8002a48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801574c:	4b11      	ldr	r3, [pc, #68]	; (8015794 <HAL_PCD_MspInit+0xa4>)
 801574e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015750:	4a10      	ldr	r2, [pc, #64]	; (8015794 <HAL_PCD_MspInit+0xa4>)
 8015752:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015756:	6353      	str	r3, [r2, #52]	; 0x34
 8015758:	4b0e      	ldr	r3, [pc, #56]	; (8015794 <HAL_PCD_MspInit+0xa4>)
 801575a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801575c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015760:	60fb      	str	r3, [r7, #12]
 8015762:	68fb      	ldr	r3, [r7, #12]
 8015764:	4b0b      	ldr	r3, [pc, #44]	; (8015794 <HAL_PCD_MspInit+0xa4>)
 8015766:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015768:	4a0a      	ldr	r2, [pc, #40]	; (8015794 <HAL_PCD_MspInit+0xa4>)
 801576a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801576e:	6453      	str	r3, [r2, #68]	; 0x44
 8015770:	4b08      	ldr	r3, [pc, #32]	; (8015794 <HAL_PCD_MspInit+0xa4>)
 8015772:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015774:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8015778:	60bb      	str	r3, [r7, #8]
 801577a:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 9, 0);
 801577c:	2200      	movs	r2, #0
 801577e:	2109      	movs	r1, #9
 8015780:	2043      	movs	r0, #67	; 0x43
 8015782:	f7ec fd93 	bl	80022ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8015786:	2043      	movs	r0, #67	; 0x43
 8015788:	f7ec fdac 	bl	80022e4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801578c:	bf00      	nop
 801578e:	3728      	adds	r7, #40	; 0x28
 8015790:	46bd      	mov	sp, r7
 8015792:	bd80      	pop	{r7, pc}
 8015794:	40023800 	.word	0x40023800
 8015798:	40020000 	.word	0x40020000

0801579c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801579c:	b580      	push	{r7, lr}
 801579e:	b082      	sub	sp, #8
 80157a0:	af00      	add	r7, sp, #0
 80157a2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80157a4:	687b      	ldr	r3, [r7, #4]
 80157a6:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80157aa:	687b      	ldr	r3, [r7, #4]
 80157ac:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80157b0:	4619      	mov	r1, r3
 80157b2:	4610      	mov	r0, r2
 80157b4:	f7f6 fbf7 	bl	800bfa6 <USBD_LL_SetupStage>
}
 80157b8:	bf00      	nop
 80157ba:	3708      	adds	r7, #8
 80157bc:	46bd      	mov	sp, r7
 80157be:	bd80      	pop	{r7, pc}

080157c0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80157c0:	b580      	push	{r7, lr}
 80157c2:	b082      	sub	sp, #8
 80157c4:	af00      	add	r7, sp, #0
 80157c6:	6078      	str	r0, [r7, #4]
 80157c8:	460b      	mov	r3, r1
 80157ca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80157cc:	687b      	ldr	r3, [r7, #4]
 80157ce:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
 80157d2:	78fa      	ldrb	r2, [r7, #3]
 80157d4:	6879      	ldr	r1, [r7, #4]
 80157d6:	4613      	mov	r3, r2
 80157d8:	00db      	lsls	r3, r3, #3
 80157da:	1a9b      	subs	r3, r3, r2
 80157dc:	009b      	lsls	r3, r3, #2
 80157de:	440b      	add	r3, r1
 80157e0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80157e4:	681a      	ldr	r2, [r3, #0]
 80157e6:	78fb      	ldrb	r3, [r7, #3]
 80157e8:	4619      	mov	r1, r3
 80157ea:	f7f6 fc2f 	bl	800c04c <USBD_LL_DataOutStage>
}
 80157ee:	bf00      	nop
 80157f0:	3708      	adds	r7, #8
 80157f2:	46bd      	mov	sp, r7
 80157f4:	bd80      	pop	{r7, pc}

080157f6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80157f6:	b580      	push	{r7, lr}
 80157f8:	b082      	sub	sp, #8
 80157fa:	af00      	add	r7, sp, #0
 80157fc:	6078      	str	r0, [r7, #4]
 80157fe:	460b      	mov	r3, r1
 8015800:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8015802:	687b      	ldr	r3, [r7, #4]
 8015804:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
 8015808:	78fa      	ldrb	r2, [r7, #3]
 801580a:	6879      	ldr	r1, [r7, #4]
 801580c:	4613      	mov	r3, r2
 801580e:	00db      	lsls	r3, r3, #3
 8015810:	1a9b      	subs	r3, r3, r2
 8015812:	009b      	lsls	r3, r3, #2
 8015814:	440b      	add	r3, r1
 8015816:	3348      	adds	r3, #72	; 0x48
 8015818:	681a      	ldr	r2, [r3, #0]
 801581a:	78fb      	ldrb	r3, [r7, #3]
 801581c:	4619      	mov	r1, r3
 801581e:	f7f6 fc78 	bl	800c112 <USBD_LL_DataInStage>
}
 8015822:	bf00      	nop
 8015824:	3708      	adds	r7, #8
 8015826:	46bd      	mov	sp, r7
 8015828:	bd80      	pop	{r7, pc}

0801582a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801582a:	b580      	push	{r7, lr}
 801582c:	b082      	sub	sp, #8
 801582e:	af00      	add	r7, sp, #0
 8015830:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8015832:	687b      	ldr	r3, [r7, #4]
 8015834:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8015838:	4618      	mov	r0, r3
 801583a:	f7f6 fd7c 	bl	800c336 <USBD_LL_SOF>
}
 801583e:	bf00      	nop
 8015840:	3708      	adds	r7, #8
 8015842:	46bd      	mov	sp, r7
 8015844:	bd80      	pop	{r7, pc}

08015846 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8015846:	b580      	push	{r7, lr}
 8015848:	b084      	sub	sp, #16
 801584a:	af00      	add	r7, sp, #0
 801584c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801584e:	2301      	movs	r3, #1
 8015850:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8015852:	687b      	ldr	r3, [r7, #4]
 8015854:	68db      	ldr	r3, [r3, #12]
 8015856:	2b00      	cmp	r3, #0
 8015858:	d102      	bne.n	8015860 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801585a:	2300      	movs	r3, #0
 801585c:	73fb      	strb	r3, [r7, #15]
 801585e:	e008      	b.n	8015872 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8015860:	687b      	ldr	r3, [r7, #4]
 8015862:	68db      	ldr	r3, [r3, #12]
 8015864:	2b02      	cmp	r3, #2
 8015866:	d102      	bne.n	801586e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8015868:	2301      	movs	r3, #1
 801586a:	73fb      	strb	r3, [r7, #15]
 801586c:	e001      	b.n	8015872 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801586e:	f7eb fb71 	bl	8000f54 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8015872:	687b      	ldr	r3, [r7, #4]
 8015874:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8015878:	7bfa      	ldrb	r2, [r7, #15]
 801587a:	4611      	mov	r1, r2
 801587c:	4618      	mov	r0, r3
 801587e:	f7f6 fd1f 	bl	800c2c0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8015882:	687b      	ldr	r3, [r7, #4]
 8015884:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8015888:	4618      	mov	r0, r3
 801588a:	f7f6 fcd8 	bl	800c23e <USBD_LL_Reset>
}
 801588e:	bf00      	nop
 8015890:	3710      	adds	r7, #16
 8015892:	46bd      	mov	sp, r7
 8015894:	bd80      	pop	{r7, pc}
	...

08015898 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015898:	b580      	push	{r7, lr}
 801589a:	b082      	sub	sp, #8
 801589c:	af00      	add	r7, sp, #0
 801589e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80158a0:	687b      	ldr	r3, [r7, #4]
 80158a2:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80158a6:	4618      	mov	r0, r3
 80158a8:	f7f6 fd1a 	bl	800c2e0 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80158ac:	687b      	ldr	r3, [r7, #4]
 80158ae:	681b      	ldr	r3, [r3, #0]
 80158b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80158b4:	681b      	ldr	r3, [r3, #0]
 80158b6:	687a      	ldr	r2, [r7, #4]
 80158b8:	6812      	ldr	r2, [r2, #0]
 80158ba:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80158be:	f043 0301 	orr.w	r3, r3, #1
 80158c2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80158c4:	687b      	ldr	r3, [r7, #4]
 80158c6:	6a1b      	ldr	r3, [r3, #32]
 80158c8:	2b00      	cmp	r3, #0
 80158ca:	d005      	beq.n	80158d8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80158cc:	4b04      	ldr	r3, [pc, #16]	; (80158e0 <HAL_PCD_SuspendCallback+0x48>)
 80158ce:	691b      	ldr	r3, [r3, #16]
 80158d0:	4a03      	ldr	r2, [pc, #12]	; (80158e0 <HAL_PCD_SuspendCallback+0x48>)
 80158d2:	f043 0306 	orr.w	r3, r3, #6
 80158d6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80158d8:	bf00      	nop
 80158da:	3708      	adds	r7, #8
 80158dc:	46bd      	mov	sp, r7
 80158de:	bd80      	pop	{r7, pc}
 80158e0:	e000ed00 	.word	0xe000ed00

080158e4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80158e4:	b580      	push	{r7, lr}
 80158e6:	b082      	sub	sp, #8
 80158e8:	af00      	add	r7, sp, #0
 80158ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80158ec:	687b      	ldr	r3, [r7, #4]
 80158ee:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80158f2:	4618      	mov	r0, r3
 80158f4:	f7f6 fd09 	bl	800c30a <USBD_LL_Resume>
}
 80158f8:	bf00      	nop
 80158fa:	3708      	adds	r7, #8
 80158fc:	46bd      	mov	sp, r7
 80158fe:	bd80      	pop	{r7, pc}

08015900 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015900:	b580      	push	{r7, lr}
 8015902:	b082      	sub	sp, #8
 8015904:	af00      	add	r7, sp, #0
 8015906:	6078      	str	r0, [r7, #4]
 8015908:	460b      	mov	r3, r1
 801590a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801590c:	687b      	ldr	r3, [r7, #4]
 801590e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8015912:	78fa      	ldrb	r2, [r7, #3]
 8015914:	4611      	mov	r1, r2
 8015916:	4618      	mov	r0, r3
 8015918:	f7f6 fd34 	bl	800c384 <USBD_LL_IsoOUTIncomplete>
}
 801591c:	bf00      	nop
 801591e:	3708      	adds	r7, #8
 8015920:	46bd      	mov	sp, r7
 8015922:	bd80      	pop	{r7, pc}

08015924 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015924:	b580      	push	{r7, lr}
 8015926:	b082      	sub	sp, #8
 8015928:	af00      	add	r7, sp, #0
 801592a:	6078      	str	r0, [r7, #4]
 801592c:	460b      	mov	r3, r1
 801592e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8015930:	687b      	ldr	r3, [r7, #4]
 8015932:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8015936:	78fa      	ldrb	r2, [r7, #3]
 8015938:	4611      	mov	r1, r2
 801593a:	4618      	mov	r0, r3
 801593c:	f7f6 fd15 	bl	800c36a <USBD_LL_IsoINIncomplete>
}
 8015940:	bf00      	nop
 8015942:	3708      	adds	r7, #8
 8015944:	46bd      	mov	sp, r7
 8015946:	bd80      	pop	{r7, pc}

08015948 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015948:	b580      	push	{r7, lr}
 801594a:	b082      	sub	sp, #8
 801594c:	af00      	add	r7, sp, #0
 801594e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8015950:	687b      	ldr	r3, [r7, #4]
 8015952:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8015956:	4618      	mov	r0, r3
 8015958:	f7f6 fd21 	bl	800c39e <USBD_LL_DevConnected>
}
 801595c:	bf00      	nop
 801595e:	3708      	adds	r7, #8
 8015960:	46bd      	mov	sp, r7
 8015962:	bd80      	pop	{r7, pc}

08015964 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015964:	b580      	push	{r7, lr}
 8015966:	b082      	sub	sp, #8
 8015968:	af00      	add	r7, sp, #0
 801596a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801596c:	687b      	ldr	r3, [r7, #4]
 801596e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8015972:	4618      	mov	r0, r3
 8015974:	f7f6 fd1e 	bl	800c3b4 <USBD_LL_DevDisconnected>
}
 8015978:	bf00      	nop
 801597a:	3708      	adds	r7, #8
 801597c:	46bd      	mov	sp, r7
 801597e:	bd80      	pop	{r7, pc}

08015980 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8015980:	b580      	push	{r7, lr}
 8015982:	b082      	sub	sp, #8
 8015984:	af00      	add	r7, sp, #0
 8015986:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8015988:	687b      	ldr	r3, [r7, #4]
 801598a:	781b      	ldrb	r3, [r3, #0]
 801598c:	2b00      	cmp	r3, #0
 801598e:	d13c      	bne.n	8015a0a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8015990:	4a20      	ldr	r2, [pc, #128]	; (8015a14 <USBD_LL_Init+0x94>)
 8015992:	687b      	ldr	r3, [r7, #4]
 8015994:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
  pdev->pData = &hpcd_USB_OTG_FS;
 8015998:	687b      	ldr	r3, [r7, #4]
 801599a:	4a1e      	ldr	r2, [pc, #120]	; (8015a14 <USBD_LL_Init+0x94>)
 801599c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80159a0:	4b1c      	ldr	r3, [pc, #112]	; (8015a14 <USBD_LL_Init+0x94>)
 80159a2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80159a6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80159a8:	4b1a      	ldr	r3, [pc, #104]	; (8015a14 <USBD_LL_Init+0x94>)
 80159aa:	2206      	movs	r2, #6
 80159ac:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80159ae:	4b19      	ldr	r3, [pc, #100]	; (8015a14 <USBD_LL_Init+0x94>)
 80159b0:	2202      	movs	r2, #2
 80159b2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80159b4:	4b17      	ldr	r3, [pc, #92]	; (8015a14 <USBD_LL_Init+0x94>)
 80159b6:	2200      	movs	r2, #0
 80159b8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80159ba:	4b16      	ldr	r3, [pc, #88]	; (8015a14 <USBD_LL_Init+0x94>)
 80159bc:	2202      	movs	r2, #2
 80159be:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80159c0:	4b14      	ldr	r3, [pc, #80]	; (8015a14 <USBD_LL_Init+0x94>)
 80159c2:	2200      	movs	r2, #0
 80159c4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80159c6:	4b13      	ldr	r3, [pc, #76]	; (8015a14 <USBD_LL_Init+0x94>)
 80159c8:	2200      	movs	r2, #0
 80159ca:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80159cc:	4b11      	ldr	r3, [pc, #68]	; (8015a14 <USBD_LL_Init+0x94>)
 80159ce:	2200      	movs	r2, #0
 80159d0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80159d2:	4b10      	ldr	r3, [pc, #64]	; (8015a14 <USBD_LL_Init+0x94>)
 80159d4:	2200      	movs	r2, #0
 80159d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80159d8:	4b0e      	ldr	r3, [pc, #56]	; (8015a14 <USBD_LL_Init+0x94>)
 80159da:	2200      	movs	r2, #0
 80159dc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80159de:	480d      	ldr	r0, [pc, #52]	; (8015a14 <USBD_LL_Init+0x94>)
 80159e0:	f7ed fa27 	bl	8002e32 <HAL_PCD_Init>
 80159e4:	4603      	mov	r3, r0
 80159e6:	2b00      	cmp	r3, #0
 80159e8:	d001      	beq.n	80159ee <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80159ea:	f7eb fab3 	bl	8000f54 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80159ee:	2180      	movs	r1, #128	; 0x80
 80159f0:	4808      	ldr	r0, [pc, #32]	; (8015a14 <USBD_LL_Init+0x94>)
 80159f2:	f7ee fbd4 	bl	800419e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80159f6:	2240      	movs	r2, #64	; 0x40
 80159f8:	2100      	movs	r1, #0
 80159fa:	4806      	ldr	r0, [pc, #24]	; (8015a14 <USBD_LL_Init+0x94>)
 80159fc:	f7ee fb88 	bl	8004110 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8015a00:	2280      	movs	r2, #128	; 0x80
 8015a02:	2101      	movs	r1, #1
 8015a04:	4803      	ldr	r0, [pc, #12]	; (8015a14 <USBD_LL_Init+0x94>)
 8015a06:	f7ee fb83 	bl	8004110 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8015a0a:	2300      	movs	r3, #0
}
 8015a0c:	4618      	mov	r0, r3
 8015a0e:	3708      	adds	r7, #8
 8015a10:	46bd      	mov	sp, r7
 8015a12:	bd80      	pop	{r7, pc}
 8015a14:	20009918 	.word	0x20009918

08015a18 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8015a18:	b580      	push	{r7, lr}
 8015a1a:	b084      	sub	sp, #16
 8015a1c:	af00      	add	r7, sp, #0
 8015a1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015a20:	2300      	movs	r3, #0
 8015a22:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015a24:	2300      	movs	r3, #0
 8015a26:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8015a28:	687b      	ldr	r3, [r7, #4]
 8015a2a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015a2e:	4618      	mov	r0, r3
 8015a30:	f7ed fb23 	bl	800307a <HAL_PCD_Start>
 8015a34:	4603      	mov	r3, r0
 8015a36:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 8015a38:	7bfb      	ldrb	r3, [r7, #15]
 8015a3a:	4618      	mov	r0, r3
 8015a3c:	f000 f99e 	bl	8015d7c <USBD_Get_USB_Status>
 8015a40:	4603      	mov	r3, r0
 8015a42:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8015a44:	7bbb      	ldrb	r3, [r7, #14]
}
 8015a46:	4618      	mov	r0, r3
 8015a48:	3710      	adds	r7, #16
 8015a4a:	46bd      	mov	sp, r7
 8015a4c:	bd80      	pop	{r7, pc}

08015a4e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8015a4e:	b580      	push	{r7, lr}
 8015a50:	b084      	sub	sp, #16
 8015a52:	af00      	add	r7, sp, #0
 8015a54:	6078      	str	r0, [r7, #4]
 8015a56:	4608      	mov	r0, r1
 8015a58:	4611      	mov	r1, r2
 8015a5a:	461a      	mov	r2, r3
 8015a5c:	4603      	mov	r3, r0
 8015a5e:	70fb      	strb	r3, [r7, #3]
 8015a60:	460b      	mov	r3, r1
 8015a62:	70bb      	strb	r3, [r7, #2]
 8015a64:	4613      	mov	r3, r2
 8015a66:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015a68:	2300      	movs	r3, #0
 8015a6a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015a6c:	2300      	movs	r3, #0
 8015a6e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8015a70:	687b      	ldr	r3, [r7, #4]
 8015a72:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015a76:	78bb      	ldrb	r3, [r7, #2]
 8015a78:	883a      	ldrh	r2, [r7, #0]
 8015a7a:	78f9      	ldrb	r1, [r7, #3]
 8015a7c:	f7ed ff23 	bl	80038c6 <HAL_PCD_EP_Open>
 8015a80:	4603      	mov	r3, r0
 8015a82:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015a84:	7bfb      	ldrb	r3, [r7, #15]
 8015a86:	4618      	mov	r0, r3
 8015a88:	f000 f978 	bl	8015d7c <USBD_Get_USB_Status>
 8015a8c:	4603      	mov	r3, r0
 8015a8e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8015a90:	7bbb      	ldrb	r3, [r7, #14]
}
 8015a92:	4618      	mov	r0, r3
 8015a94:	3710      	adds	r7, #16
 8015a96:	46bd      	mov	sp, r7
 8015a98:	bd80      	pop	{r7, pc}

08015a9a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015a9a:	b580      	push	{r7, lr}
 8015a9c:	b084      	sub	sp, #16
 8015a9e:	af00      	add	r7, sp, #0
 8015aa0:	6078      	str	r0, [r7, #4]
 8015aa2:	460b      	mov	r3, r1
 8015aa4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015aa6:	2300      	movs	r3, #0
 8015aa8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015aaa:	2300      	movs	r3, #0
 8015aac:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8015aae:	687b      	ldr	r3, [r7, #4]
 8015ab0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015ab4:	78fa      	ldrb	r2, [r7, #3]
 8015ab6:	4611      	mov	r1, r2
 8015ab8:	4618      	mov	r0, r3
 8015aba:	f7ed ff6c 	bl	8003996 <HAL_PCD_EP_Close>
 8015abe:	4603      	mov	r3, r0
 8015ac0:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 8015ac2:	7bfb      	ldrb	r3, [r7, #15]
 8015ac4:	4618      	mov	r0, r3
 8015ac6:	f000 f959 	bl	8015d7c <USBD_Get_USB_Status>
 8015aca:	4603      	mov	r3, r0
 8015acc:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8015ace:	7bbb      	ldrb	r3, [r7, #14]
}
 8015ad0:	4618      	mov	r0, r3
 8015ad2:	3710      	adds	r7, #16
 8015ad4:	46bd      	mov	sp, r7
 8015ad6:	bd80      	pop	{r7, pc}

08015ad8 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015ad8:	b580      	push	{r7, lr}
 8015ada:	b084      	sub	sp, #16
 8015adc:	af00      	add	r7, sp, #0
 8015ade:	6078      	str	r0, [r7, #4]
 8015ae0:	460b      	mov	r3, r1
 8015ae2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015ae4:	2300      	movs	r3, #0
 8015ae6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015ae8:	2300      	movs	r3, #0
 8015aea:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 8015aec:	687b      	ldr	r3, [r7, #4]
 8015aee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015af2:	78fa      	ldrb	r2, [r7, #3]
 8015af4:	4611      	mov	r1, r2
 8015af6:	4618      	mov	r0, r3
 8015af8:	f7ee f8fe 	bl	8003cf8 <HAL_PCD_EP_Flush>
 8015afc:	4603      	mov	r3, r0
 8015afe:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 8015b00:	7bfb      	ldrb	r3, [r7, #15]
 8015b02:	4618      	mov	r0, r3
 8015b04:	f000 f93a 	bl	8015d7c <USBD_Get_USB_Status>
 8015b08:	4603      	mov	r3, r0
 8015b0a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8015b0c:	7bbb      	ldrb	r3, [r7, #14]
}
 8015b0e:	4618      	mov	r0, r3
 8015b10:	3710      	adds	r7, #16
 8015b12:	46bd      	mov	sp, r7
 8015b14:	bd80      	pop	{r7, pc}

08015b16 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015b16:	b580      	push	{r7, lr}
 8015b18:	b084      	sub	sp, #16
 8015b1a:	af00      	add	r7, sp, #0
 8015b1c:	6078      	str	r0, [r7, #4]
 8015b1e:	460b      	mov	r3, r1
 8015b20:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015b22:	2300      	movs	r3, #0
 8015b24:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015b26:	2300      	movs	r3, #0
 8015b28:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8015b2a:	687b      	ldr	r3, [r7, #4]
 8015b2c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015b30:	78fa      	ldrb	r2, [r7, #3]
 8015b32:	4611      	mov	r1, r2
 8015b34:	4618      	mov	r0, r3
 8015b36:	f7ee f825 	bl	8003b84 <HAL_PCD_EP_SetStall>
 8015b3a:	4603      	mov	r3, r0
 8015b3c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015b3e:	7bfb      	ldrb	r3, [r7, #15]
 8015b40:	4618      	mov	r0, r3
 8015b42:	f000 f91b 	bl	8015d7c <USBD_Get_USB_Status>
 8015b46:	4603      	mov	r3, r0
 8015b48:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8015b4a:	7bbb      	ldrb	r3, [r7, #14]
}
 8015b4c:	4618      	mov	r0, r3
 8015b4e:	3710      	adds	r7, #16
 8015b50:	46bd      	mov	sp, r7
 8015b52:	bd80      	pop	{r7, pc}

08015b54 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015b54:	b580      	push	{r7, lr}
 8015b56:	b084      	sub	sp, #16
 8015b58:	af00      	add	r7, sp, #0
 8015b5a:	6078      	str	r0, [r7, #4]
 8015b5c:	460b      	mov	r3, r1
 8015b5e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015b60:	2300      	movs	r3, #0
 8015b62:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015b64:	2300      	movs	r3, #0
 8015b66:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8015b68:	687b      	ldr	r3, [r7, #4]
 8015b6a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015b6e:	78fa      	ldrb	r2, [r7, #3]
 8015b70:	4611      	mov	r1, r2
 8015b72:	4618      	mov	r0, r3
 8015b74:	f7ee f86a 	bl	8003c4c <HAL_PCD_EP_ClrStall>
 8015b78:	4603      	mov	r3, r0
 8015b7a:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 8015b7c:	7bfb      	ldrb	r3, [r7, #15]
 8015b7e:	4618      	mov	r0, r3
 8015b80:	f000 f8fc 	bl	8015d7c <USBD_Get_USB_Status>
 8015b84:	4603      	mov	r3, r0
 8015b86:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 8015b88:	7bbb      	ldrb	r3, [r7, #14]
}
 8015b8a:	4618      	mov	r0, r3
 8015b8c:	3710      	adds	r7, #16
 8015b8e:	46bd      	mov	sp, r7
 8015b90:	bd80      	pop	{r7, pc}

08015b92 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015b92:	b480      	push	{r7}
 8015b94:	b085      	sub	sp, #20
 8015b96:	af00      	add	r7, sp, #0
 8015b98:	6078      	str	r0, [r7, #4]
 8015b9a:	460b      	mov	r3, r1
 8015b9c:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8015b9e:	687b      	ldr	r3, [r7, #4]
 8015ba0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015ba4:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8015ba6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8015baa:	2b00      	cmp	r3, #0
 8015bac:	da0b      	bge.n	8015bc6 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8015bae:	78fb      	ldrb	r3, [r7, #3]
 8015bb0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015bb4:	68f9      	ldr	r1, [r7, #12]
 8015bb6:	4613      	mov	r3, r2
 8015bb8:	00db      	lsls	r3, r3, #3
 8015bba:	1a9b      	subs	r3, r3, r2
 8015bbc:	009b      	lsls	r3, r3, #2
 8015bbe:	440b      	add	r3, r1
 8015bc0:	333e      	adds	r3, #62	; 0x3e
 8015bc2:	781b      	ldrb	r3, [r3, #0]
 8015bc4:	e00b      	b.n	8015bde <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8015bc6:	78fb      	ldrb	r3, [r7, #3]
 8015bc8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015bcc:	68f9      	ldr	r1, [r7, #12]
 8015bce:	4613      	mov	r3, r2
 8015bd0:	00db      	lsls	r3, r3, #3
 8015bd2:	1a9b      	subs	r3, r3, r2
 8015bd4:	009b      	lsls	r3, r3, #2
 8015bd6:	440b      	add	r3, r1
 8015bd8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8015bdc:	781b      	ldrb	r3, [r3, #0]
  }
}
 8015bde:	4618      	mov	r0, r3
 8015be0:	3714      	adds	r7, #20
 8015be2:	46bd      	mov	sp, r7
 8015be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015be8:	4770      	bx	lr

08015bea <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8015bea:	b580      	push	{r7, lr}
 8015bec:	b084      	sub	sp, #16
 8015bee:	af00      	add	r7, sp, #0
 8015bf0:	6078      	str	r0, [r7, #4]
 8015bf2:	460b      	mov	r3, r1
 8015bf4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015bf6:	2300      	movs	r3, #0
 8015bf8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015bfa:	2300      	movs	r3, #0
 8015bfc:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8015bfe:	687b      	ldr	r3, [r7, #4]
 8015c00:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015c04:	78fa      	ldrb	r2, [r7, #3]
 8015c06:	4611      	mov	r1, r2
 8015c08:	4618      	mov	r0, r3
 8015c0a:	f7ed fe37 	bl	800387c <HAL_PCD_SetAddress>
 8015c0e:	4603      	mov	r3, r0
 8015c10:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 8015c12:	7bfb      	ldrb	r3, [r7, #15]
 8015c14:	4618      	mov	r0, r3
 8015c16:	f000 f8b1 	bl	8015d7c <USBD_Get_USB_Status>
 8015c1a:	4603      	mov	r3, r0
 8015c1c:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8015c1e:	7bbb      	ldrb	r3, [r7, #14]
}
 8015c20:	4618      	mov	r0, r3
 8015c22:	3710      	adds	r7, #16
 8015c24:	46bd      	mov	sp, r7
 8015c26:	bd80      	pop	{r7, pc}

08015c28 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8015c28:	b580      	push	{r7, lr}
 8015c2a:	b086      	sub	sp, #24
 8015c2c:	af00      	add	r7, sp, #0
 8015c2e:	60f8      	str	r0, [r7, #12]
 8015c30:	607a      	str	r2, [r7, #4]
 8015c32:	603b      	str	r3, [r7, #0]
 8015c34:	460b      	mov	r3, r1
 8015c36:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015c38:	2300      	movs	r3, #0
 8015c3a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015c3c:	2300      	movs	r3, #0
 8015c3e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8015c40:	68fb      	ldr	r3, [r7, #12]
 8015c42:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015c46:	7af9      	ldrb	r1, [r7, #11]
 8015c48:	683b      	ldr	r3, [r7, #0]
 8015c4a:	687a      	ldr	r2, [r7, #4]
 8015c4c:	f7ed ff50 	bl	8003af0 <HAL_PCD_EP_Transmit>
 8015c50:	4603      	mov	r3, r0
 8015c52:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 8015c54:	7dfb      	ldrb	r3, [r7, #23]
 8015c56:	4618      	mov	r0, r3
 8015c58:	f000 f890 	bl	8015d7c <USBD_Get_USB_Status>
 8015c5c:	4603      	mov	r3, r0
 8015c5e:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8015c60:	7dbb      	ldrb	r3, [r7, #22]
}
 8015c62:	4618      	mov	r0, r3
 8015c64:	3718      	adds	r7, #24
 8015c66:	46bd      	mov	sp, r7
 8015c68:	bd80      	pop	{r7, pc}

08015c6a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8015c6a:	b580      	push	{r7, lr}
 8015c6c:	b086      	sub	sp, #24
 8015c6e:	af00      	add	r7, sp, #0
 8015c70:	60f8      	str	r0, [r7, #12]
 8015c72:	607a      	str	r2, [r7, #4]
 8015c74:	603b      	str	r3, [r7, #0]
 8015c76:	460b      	mov	r3, r1
 8015c78:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015c7a:	2300      	movs	r3, #0
 8015c7c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015c7e:	2300      	movs	r3, #0
 8015c80:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8015c82:	68fb      	ldr	r3, [r7, #12]
 8015c84:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015c88:	7af9      	ldrb	r1, [r7, #11]
 8015c8a:	683b      	ldr	r3, [r7, #0]
 8015c8c:	687a      	ldr	r2, [r7, #4]
 8015c8e:	f7ed fecc 	bl	8003a2a <HAL_PCD_EP_Receive>
 8015c92:	4603      	mov	r3, r0
 8015c94:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 8015c96:	7dfb      	ldrb	r3, [r7, #23]
 8015c98:	4618      	mov	r0, r3
 8015c9a:	f000 f86f 	bl	8015d7c <USBD_Get_USB_Status>
 8015c9e:	4603      	mov	r3, r0
 8015ca0:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 8015ca2:	7dbb      	ldrb	r3, [r7, #22]
}
 8015ca4:	4618      	mov	r0, r3
 8015ca6:	3718      	adds	r7, #24
 8015ca8:	46bd      	mov	sp, r7
 8015caa:	bd80      	pop	{r7, pc}

08015cac <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015cac:	b580      	push	{r7, lr}
 8015cae:	b082      	sub	sp, #8
 8015cb0:	af00      	add	r7, sp, #0
 8015cb2:	6078      	str	r0, [r7, #4]
 8015cb4:	460b      	mov	r3, r1
 8015cb6:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8015cb8:	687b      	ldr	r3, [r7, #4]
 8015cba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015cbe:	78fa      	ldrb	r2, [r7, #3]
 8015cc0:	4611      	mov	r1, r2
 8015cc2:	4618      	mov	r0, r3
 8015cc4:	f7ed fefc 	bl	8003ac0 <HAL_PCD_EP_GetRxCount>
 8015cc8:	4603      	mov	r3, r0
}
 8015cca:	4618      	mov	r0, r3
 8015ccc:	3708      	adds	r7, #8
 8015cce:	46bd      	mov	sp, r7
 8015cd0:	bd80      	pop	{r7, pc}
	...

08015cd4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8015cd4:	b580      	push	{r7, lr}
 8015cd6:	b082      	sub	sp, #8
 8015cd8:	af00      	add	r7, sp, #0
 8015cda:	6078      	str	r0, [r7, #4]
 8015cdc:	460b      	mov	r3, r1
 8015cde:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8015ce0:	78fb      	ldrb	r3, [r7, #3]
 8015ce2:	2b00      	cmp	r3, #0
 8015ce4:	d002      	beq.n	8015cec <HAL_PCDEx_LPM_Callback+0x18>
 8015ce6:	2b01      	cmp	r3, #1
 8015ce8:	d01f      	beq.n	8015d2a <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;   
  }
}
 8015cea:	e03b      	b.n	8015d64 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8015cec:	687b      	ldr	r3, [r7, #4]
 8015cee:	6a1b      	ldr	r3, [r3, #32]
 8015cf0:	2b00      	cmp	r3, #0
 8015cf2:	d007      	beq.n	8015d04 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8015cf4:	f000 f83c 	bl	8015d70 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8015cf8:	4b1c      	ldr	r3, [pc, #112]	; (8015d6c <HAL_PCDEx_LPM_Callback+0x98>)
 8015cfa:	691b      	ldr	r3, [r3, #16]
 8015cfc:	4a1b      	ldr	r2, [pc, #108]	; (8015d6c <HAL_PCDEx_LPM_Callback+0x98>)
 8015cfe:	f023 0306 	bic.w	r3, r3, #6
 8015d02:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8015d04:	687b      	ldr	r3, [r7, #4]
 8015d06:	681b      	ldr	r3, [r3, #0]
 8015d08:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8015d0c:	681b      	ldr	r3, [r3, #0]
 8015d0e:	687a      	ldr	r2, [r7, #4]
 8015d10:	6812      	ldr	r2, [r2, #0]
 8015d12:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8015d16:	f023 0301 	bic.w	r3, r3, #1
 8015d1a:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8015d1c:	687b      	ldr	r3, [r7, #4]
 8015d1e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8015d22:	4618      	mov	r0, r3
 8015d24:	f7f6 faf1 	bl	800c30a <USBD_LL_Resume>
    break;
 8015d28:	e01c      	b.n	8015d64 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8015d2a:	687b      	ldr	r3, [r7, #4]
 8015d2c:	681b      	ldr	r3, [r3, #0]
 8015d2e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8015d32:	681b      	ldr	r3, [r3, #0]
 8015d34:	687a      	ldr	r2, [r7, #4]
 8015d36:	6812      	ldr	r2, [r2, #0]
 8015d38:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8015d3c:	f043 0301 	orr.w	r3, r3, #1
 8015d40:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8015d42:	687b      	ldr	r3, [r7, #4]
 8015d44:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8015d48:	4618      	mov	r0, r3
 8015d4a:	f7f6 fac9 	bl	800c2e0 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8015d4e:	687b      	ldr	r3, [r7, #4]
 8015d50:	6a1b      	ldr	r3, [r3, #32]
 8015d52:	2b00      	cmp	r3, #0
 8015d54:	d005      	beq.n	8015d62 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8015d56:	4b05      	ldr	r3, [pc, #20]	; (8015d6c <HAL_PCDEx_LPM_Callback+0x98>)
 8015d58:	691b      	ldr	r3, [r3, #16]
 8015d5a:	4a04      	ldr	r2, [pc, #16]	; (8015d6c <HAL_PCDEx_LPM_Callback+0x98>)
 8015d5c:	f043 0306 	orr.w	r3, r3, #6
 8015d60:	6113      	str	r3, [r2, #16]
    break;   
 8015d62:	bf00      	nop
}
 8015d64:	bf00      	nop
 8015d66:	3708      	adds	r7, #8
 8015d68:	46bd      	mov	sp, r7
 8015d6a:	bd80      	pop	{r7, pc}
 8015d6c:	e000ed00 	.word	0xe000ed00

08015d70 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8015d70:	b580      	push	{r7, lr}
 8015d72:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8015d74:	f7ea fc38 	bl	80005e8 <SystemClock_Config>
}
 8015d78:	bf00      	nop
 8015d7a:	bd80      	pop	{r7, pc}

08015d7c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8015d7c:	b480      	push	{r7}
 8015d7e:	b085      	sub	sp, #20
 8015d80:	af00      	add	r7, sp, #0
 8015d82:	4603      	mov	r3, r0
 8015d84:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015d86:	2300      	movs	r3, #0
 8015d88:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8015d8a:	79fb      	ldrb	r3, [r7, #7]
 8015d8c:	2b03      	cmp	r3, #3
 8015d8e:	d817      	bhi.n	8015dc0 <USBD_Get_USB_Status+0x44>
 8015d90:	a201      	add	r2, pc, #4	; (adr r2, 8015d98 <USBD_Get_USB_Status+0x1c>)
 8015d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015d96:	bf00      	nop
 8015d98:	08015da9 	.word	0x08015da9
 8015d9c:	08015daf 	.word	0x08015daf
 8015da0:	08015db5 	.word	0x08015db5
 8015da4:	08015dbb 	.word	0x08015dbb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8015da8:	2300      	movs	r3, #0
 8015daa:	73fb      	strb	r3, [r7, #15]
    break;
 8015dac:	e00b      	b.n	8015dc6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8015dae:	2303      	movs	r3, #3
 8015db0:	73fb      	strb	r3, [r7, #15]
    break;
 8015db2:	e008      	b.n	8015dc6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8015db4:	2301      	movs	r3, #1
 8015db6:	73fb      	strb	r3, [r7, #15]
    break;
 8015db8:	e005      	b.n	8015dc6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8015dba:	2303      	movs	r3, #3
 8015dbc:	73fb      	strb	r3, [r7, #15]
    break;
 8015dbe:	e002      	b.n	8015dc6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8015dc0:	2303      	movs	r3, #3
 8015dc2:	73fb      	strb	r3, [r7, #15]
    break;
 8015dc4:	bf00      	nop
  }
  return usb_status;
 8015dc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8015dc8:	4618      	mov	r0, r3
 8015dca:	3714      	adds	r7, #20
 8015dcc:	46bd      	mov	sp, r7
 8015dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015dd2:	4770      	bx	lr

08015dd4 <__errno>:
 8015dd4:	4b01      	ldr	r3, [pc, #4]	; (8015ddc <__errno+0x8>)
 8015dd6:	6818      	ldr	r0, [r3, #0]
 8015dd8:	4770      	bx	lr
 8015dda:	bf00      	nop
 8015ddc:	20000188 	.word	0x20000188

08015de0 <__libc_init_array>:
 8015de0:	b570      	push	{r4, r5, r6, lr}
 8015de2:	4e0d      	ldr	r6, [pc, #52]	; (8015e18 <__libc_init_array+0x38>)
 8015de4:	4c0d      	ldr	r4, [pc, #52]	; (8015e1c <__libc_init_array+0x3c>)
 8015de6:	1ba4      	subs	r4, r4, r6
 8015de8:	10a4      	asrs	r4, r4, #2
 8015dea:	2500      	movs	r5, #0
 8015dec:	42a5      	cmp	r5, r4
 8015dee:	d109      	bne.n	8015e04 <__libc_init_array+0x24>
 8015df0:	4e0b      	ldr	r6, [pc, #44]	; (8015e20 <__libc_init_array+0x40>)
 8015df2:	4c0c      	ldr	r4, [pc, #48]	; (8015e24 <__libc_init_array+0x44>)
 8015df4:	f000 f8f6 	bl	8015fe4 <_init>
 8015df8:	1ba4      	subs	r4, r4, r6
 8015dfa:	10a4      	asrs	r4, r4, #2
 8015dfc:	2500      	movs	r5, #0
 8015dfe:	42a5      	cmp	r5, r4
 8015e00:	d105      	bne.n	8015e0e <__libc_init_array+0x2e>
 8015e02:	bd70      	pop	{r4, r5, r6, pc}
 8015e04:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8015e08:	4798      	blx	r3
 8015e0a:	3501      	adds	r5, #1
 8015e0c:	e7ee      	b.n	8015dec <__libc_init_array+0xc>
 8015e0e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8015e12:	4798      	blx	r3
 8015e14:	3501      	adds	r5, #1
 8015e16:	e7f2      	b.n	8015dfe <__libc_init_array+0x1e>
 8015e18:	0801657c 	.word	0x0801657c
 8015e1c:	0801657c 	.word	0x0801657c
 8015e20:	0801657c 	.word	0x0801657c
 8015e24:	08016580 	.word	0x08016580

08015e28 <malloc>:
 8015e28:	4b02      	ldr	r3, [pc, #8]	; (8015e34 <malloc+0xc>)
 8015e2a:	4601      	mov	r1, r0
 8015e2c:	6818      	ldr	r0, [r3, #0]
 8015e2e:	f000 b86d 	b.w	8015f0c <_malloc_r>
 8015e32:	bf00      	nop
 8015e34:	20000188 	.word	0x20000188

08015e38 <free>:
 8015e38:	4b02      	ldr	r3, [pc, #8]	; (8015e44 <free+0xc>)
 8015e3a:	4601      	mov	r1, r0
 8015e3c:	6818      	ldr	r0, [r3, #0]
 8015e3e:	f000 b817 	b.w	8015e70 <_free_r>
 8015e42:	bf00      	nop
 8015e44:	20000188 	.word	0x20000188

08015e48 <memcpy>:
 8015e48:	b510      	push	{r4, lr}
 8015e4a:	1e43      	subs	r3, r0, #1
 8015e4c:	440a      	add	r2, r1
 8015e4e:	4291      	cmp	r1, r2
 8015e50:	d100      	bne.n	8015e54 <memcpy+0xc>
 8015e52:	bd10      	pop	{r4, pc}
 8015e54:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015e58:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015e5c:	e7f7      	b.n	8015e4e <memcpy+0x6>

08015e5e <memset>:
 8015e5e:	4402      	add	r2, r0
 8015e60:	4603      	mov	r3, r0
 8015e62:	4293      	cmp	r3, r2
 8015e64:	d100      	bne.n	8015e68 <memset+0xa>
 8015e66:	4770      	bx	lr
 8015e68:	f803 1b01 	strb.w	r1, [r3], #1
 8015e6c:	e7f9      	b.n	8015e62 <memset+0x4>
	...

08015e70 <_free_r>:
 8015e70:	b538      	push	{r3, r4, r5, lr}
 8015e72:	4605      	mov	r5, r0
 8015e74:	2900      	cmp	r1, #0
 8015e76:	d045      	beq.n	8015f04 <_free_r+0x94>
 8015e78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015e7c:	1f0c      	subs	r4, r1, #4
 8015e7e:	2b00      	cmp	r3, #0
 8015e80:	bfb8      	it	lt
 8015e82:	18e4      	addlt	r4, r4, r3
 8015e84:	f000 f8ac 	bl	8015fe0 <__malloc_lock>
 8015e88:	4a1f      	ldr	r2, [pc, #124]	; (8015f08 <_free_r+0x98>)
 8015e8a:	6813      	ldr	r3, [r2, #0]
 8015e8c:	4610      	mov	r0, r2
 8015e8e:	b933      	cbnz	r3, 8015e9e <_free_r+0x2e>
 8015e90:	6063      	str	r3, [r4, #4]
 8015e92:	6014      	str	r4, [r2, #0]
 8015e94:	4628      	mov	r0, r5
 8015e96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015e9a:	f000 b8a2 	b.w	8015fe2 <__malloc_unlock>
 8015e9e:	42a3      	cmp	r3, r4
 8015ea0:	d90c      	bls.n	8015ebc <_free_r+0x4c>
 8015ea2:	6821      	ldr	r1, [r4, #0]
 8015ea4:	1862      	adds	r2, r4, r1
 8015ea6:	4293      	cmp	r3, r2
 8015ea8:	bf04      	itt	eq
 8015eaa:	681a      	ldreq	r2, [r3, #0]
 8015eac:	685b      	ldreq	r3, [r3, #4]
 8015eae:	6063      	str	r3, [r4, #4]
 8015eb0:	bf04      	itt	eq
 8015eb2:	1852      	addeq	r2, r2, r1
 8015eb4:	6022      	streq	r2, [r4, #0]
 8015eb6:	6004      	str	r4, [r0, #0]
 8015eb8:	e7ec      	b.n	8015e94 <_free_r+0x24>
 8015eba:	4613      	mov	r3, r2
 8015ebc:	685a      	ldr	r2, [r3, #4]
 8015ebe:	b10a      	cbz	r2, 8015ec4 <_free_r+0x54>
 8015ec0:	42a2      	cmp	r2, r4
 8015ec2:	d9fa      	bls.n	8015eba <_free_r+0x4a>
 8015ec4:	6819      	ldr	r1, [r3, #0]
 8015ec6:	1858      	adds	r0, r3, r1
 8015ec8:	42a0      	cmp	r0, r4
 8015eca:	d10b      	bne.n	8015ee4 <_free_r+0x74>
 8015ecc:	6820      	ldr	r0, [r4, #0]
 8015ece:	4401      	add	r1, r0
 8015ed0:	1858      	adds	r0, r3, r1
 8015ed2:	4282      	cmp	r2, r0
 8015ed4:	6019      	str	r1, [r3, #0]
 8015ed6:	d1dd      	bne.n	8015e94 <_free_r+0x24>
 8015ed8:	6810      	ldr	r0, [r2, #0]
 8015eda:	6852      	ldr	r2, [r2, #4]
 8015edc:	605a      	str	r2, [r3, #4]
 8015ede:	4401      	add	r1, r0
 8015ee0:	6019      	str	r1, [r3, #0]
 8015ee2:	e7d7      	b.n	8015e94 <_free_r+0x24>
 8015ee4:	d902      	bls.n	8015eec <_free_r+0x7c>
 8015ee6:	230c      	movs	r3, #12
 8015ee8:	602b      	str	r3, [r5, #0]
 8015eea:	e7d3      	b.n	8015e94 <_free_r+0x24>
 8015eec:	6820      	ldr	r0, [r4, #0]
 8015eee:	1821      	adds	r1, r4, r0
 8015ef0:	428a      	cmp	r2, r1
 8015ef2:	bf04      	itt	eq
 8015ef4:	6811      	ldreq	r1, [r2, #0]
 8015ef6:	6852      	ldreq	r2, [r2, #4]
 8015ef8:	6062      	str	r2, [r4, #4]
 8015efa:	bf04      	itt	eq
 8015efc:	1809      	addeq	r1, r1, r0
 8015efe:	6021      	streq	r1, [r4, #0]
 8015f00:	605c      	str	r4, [r3, #4]
 8015f02:	e7c7      	b.n	8015e94 <_free_r+0x24>
 8015f04:	bd38      	pop	{r3, r4, r5, pc}
 8015f06:	bf00      	nop
 8015f08:	20004bd8 	.word	0x20004bd8

08015f0c <_malloc_r>:
 8015f0c:	b570      	push	{r4, r5, r6, lr}
 8015f0e:	1ccd      	adds	r5, r1, #3
 8015f10:	f025 0503 	bic.w	r5, r5, #3
 8015f14:	3508      	adds	r5, #8
 8015f16:	2d0c      	cmp	r5, #12
 8015f18:	bf38      	it	cc
 8015f1a:	250c      	movcc	r5, #12
 8015f1c:	2d00      	cmp	r5, #0
 8015f1e:	4606      	mov	r6, r0
 8015f20:	db01      	blt.n	8015f26 <_malloc_r+0x1a>
 8015f22:	42a9      	cmp	r1, r5
 8015f24:	d903      	bls.n	8015f2e <_malloc_r+0x22>
 8015f26:	230c      	movs	r3, #12
 8015f28:	6033      	str	r3, [r6, #0]
 8015f2a:	2000      	movs	r0, #0
 8015f2c:	bd70      	pop	{r4, r5, r6, pc}
 8015f2e:	f000 f857 	bl	8015fe0 <__malloc_lock>
 8015f32:	4a21      	ldr	r2, [pc, #132]	; (8015fb8 <_malloc_r+0xac>)
 8015f34:	6814      	ldr	r4, [r2, #0]
 8015f36:	4621      	mov	r1, r4
 8015f38:	b991      	cbnz	r1, 8015f60 <_malloc_r+0x54>
 8015f3a:	4c20      	ldr	r4, [pc, #128]	; (8015fbc <_malloc_r+0xb0>)
 8015f3c:	6823      	ldr	r3, [r4, #0]
 8015f3e:	b91b      	cbnz	r3, 8015f48 <_malloc_r+0x3c>
 8015f40:	4630      	mov	r0, r6
 8015f42:	f000 f83d 	bl	8015fc0 <_sbrk_r>
 8015f46:	6020      	str	r0, [r4, #0]
 8015f48:	4629      	mov	r1, r5
 8015f4a:	4630      	mov	r0, r6
 8015f4c:	f000 f838 	bl	8015fc0 <_sbrk_r>
 8015f50:	1c43      	adds	r3, r0, #1
 8015f52:	d124      	bne.n	8015f9e <_malloc_r+0x92>
 8015f54:	230c      	movs	r3, #12
 8015f56:	6033      	str	r3, [r6, #0]
 8015f58:	4630      	mov	r0, r6
 8015f5a:	f000 f842 	bl	8015fe2 <__malloc_unlock>
 8015f5e:	e7e4      	b.n	8015f2a <_malloc_r+0x1e>
 8015f60:	680b      	ldr	r3, [r1, #0]
 8015f62:	1b5b      	subs	r3, r3, r5
 8015f64:	d418      	bmi.n	8015f98 <_malloc_r+0x8c>
 8015f66:	2b0b      	cmp	r3, #11
 8015f68:	d90f      	bls.n	8015f8a <_malloc_r+0x7e>
 8015f6a:	600b      	str	r3, [r1, #0]
 8015f6c:	50cd      	str	r5, [r1, r3]
 8015f6e:	18cc      	adds	r4, r1, r3
 8015f70:	4630      	mov	r0, r6
 8015f72:	f000 f836 	bl	8015fe2 <__malloc_unlock>
 8015f76:	f104 000b 	add.w	r0, r4, #11
 8015f7a:	1d23      	adds	r3, r4, #4
 8015f7c:	f020 0007 	bic.w	r0, r0, #7
 8015f80:	1ac3      	subs	r3, r0, r3
 8015f82:	d0d3      	beq.n	8015f2c <_malloc_r+0x20>
 8015f84:	425a      	negs	r2, r3
 8015f86:	50e2      	str	r2, [r4, r3]
 8015f88:	e7d0      	b.n	8015f2c <_malloc_r+0x20>
 8015f8a:	428c      	cmp	r4, r1
 8015f8c:	684b      	ldr	r3, [r1, #4]
 8015f8e:	bf16      	itet	ne
 8015f90:	6063      	strne	r3, [r4, #4]
 8015f92:	6013      	streq	r3, [r2, #0]
 8015f94:	460c      	movne	r4, r1
 8015f96:	e7eb      	b.n	8015f70 <_malloc_r+0x64>
 8015f98:	460c      	mov	r4, r1
 8015f9a:	6849      	ldr	r1, [r1, #4]
 8015f9c:	e7cc      	b.n	8015f38 <_malloc_r+0x2c>
 8015f9e:	1cc4      	adds	r4, r0, #3
 8015fa0:	f024 0403 	bic.w	r4, r4, #3
 8015fa4:	42a0      	cmp	r0, r4
 8015fa6:	d005      	beq.n	8015fb4 <_malloc_r+0xa8>
 8015fa8:	1a21      	subs	r1, r4, r0
 8015faa:	4630      	mov	r0, r6
 8015fac:	f000 f808 	bl	8015fc0 <_sbrk_r>
 8015fb0:	3001      	adds	r0, #1
 8015fb2:	d0cf      	beq.n	8015f54 <_malloc_r+0x48>
 8015fb4:	6025      	str	r5, [r4, #0]
 8015fb6:	e7db      	b.n	8015f70 <_malloc_r+0x64>
 8015fb8:	20004bd8 	.word	0x20004bd8
 8015fbc:	20004bdc 	.word	0x20004bdc

08015fc0 <_sbrk_r>:
 8015fc0:	b538      	push	{r3, r4, r5, lr}
 8015fc2:	4c06      	ldr	r4, [pc, #24]	; (8015fdc <_sbrk_r+0x1c>)
 8015fc4:	2300      	movs	r3, #0
 8015fc6:	4605      	mov	r5, r0
 8015fc8:	4608      	mov	r0, r1
 8015fca:	6023      	str	r3, [r4, #0]
 8015fcc:	f7eb fa48 	bl	8001460 <_sbrk>
 8015fd0:	1c43      	adds	r3, r0, #1
 8015fd2:	d102      	bne.n	8015fda <_sbrk_r+0x1a>
 8015fd4:	6823      	ldr	r3, [r4, #0]
 8015fd6:	b103      	cbz	r3, 8015fda <_sbrk_r+0x1a>
 8015fd8:	602b      	str	r3, [r5, #0]
 8015fda:	bd38      	pop	{r3, r4, r5, pc}
 8015fdc:	20009d1c 	.word	0x20009d1c

08015fe0 <__malloc_lock>:
 8015fe0:	4770      	bx	lr

08015fe2 <__malloc_unlock>:
 8015fe2:	4770      	bx	lr

08015fe4 <_init>:
 8015fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015fe6:	bf00      	nop
 8015fe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015fea:	bc08      	pop	{r3}
 8015fec:	469e      	mov	lr, r3
 8015fee:	4770      	bx	lr

08015ff0 <_fini>:
 8015ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015ff2:	bf00      	nop
 8015ff4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015ff6:	bc08      	pop	{r3}
 8015ff8:	469e      	mov	lr, r3
 8015ffa:	4770      	bx	lr
