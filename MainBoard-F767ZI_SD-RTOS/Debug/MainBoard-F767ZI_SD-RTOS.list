
MainBoard-F767ZI_SD-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f074  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d4  0800f274  0800f274  0001f274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f748  0800f748  00020020  2**0
                  CONTENTS
  4 .ARM          00000008  0800f748  0800f748  0001f748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f750  0800f750  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f750  0800f750  0001f750  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f754  0800f754  0001f754  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  0800f758  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008c00  20000020  0800f778  00020020  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20008c20  0800f778  00028c20  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024a3d  00000000  00000000  0002004e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004d23  00000000  00000000  00044a8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001f30  00000000  00000000  000497b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001ce0  00000000  00000000  0004b6e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002d936  00000000  00000000  0004d3c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001c06c  00000000  00000000  0007acf6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010e95c  00000000  00000000  00096d62  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001a56be  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008274  00000000  00000000  001a573c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000020 	.word	0x20000020
 800021c:	00000000 	.word	0x00000000
 8000220:	0800f25c 	.word	0x0800f25c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000024 	.word	0x20000024
 800023c:	0800f25c 	.word	0x0800f25c

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b972 	b.w	800053c <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9e08      	ldr	r6, [sp, #32]
 8000276:	4604      	mov	r4, r0
 8000278:	4688      	mov	r8, r1
 800027a:	2b00      	cmp	r3, #0
 800027c:	d14b      	bne.n	8000316 <__udivmoddi4+0xa6>
 800027e:	428a      	cmp	r2, r1
 8000280:	4615      	mov	r5, r2
 8000282:	d967      	bls.n	8000354 <__udivmoddi4+0xe4>
 8000284:	fab2 f282 	clz	r2, r2
 8000288:	b14a      	cbz	r2, 800029e <__udivmoddi4+0x2e>
 800028a:	f1c2 0720 	rsb	r7, r2, #32
 800028e:	fa01 f302 	lsl.w	r3, r1, r2
 8000292:	fa20 f707 	lsr.w	r7, r0, r7
 8000296:	4095      	lsls	r5, r2
 8000298:	ea47 0803 	orr.w	r8, r7, r3
 800029c:	4094      	lsls	r4, r2
 800029e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002a2:	0c23      	lsrs	r3, r4, #16
 80002a4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002a8:	fa1f fc85 	uxth.w	ip, r5
 80002ac:	fb0e 8817 	mls	r8, lr, r7, r8
 80002b0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002b4:	fb07 f10c 	mul.w	r1, r7, ip
 80002b8:	4299      	cmp	r1, r3
 80002ba:	d909      	bls.n	80002d0 <__udivmoddi4+0x60>
 80002bc:	18eb      	adds	r3, r5, r3
 80002be:	f107 30ff 	add.w	r0, r7, #4294967295
 80002c2:	f080 811b 	bcs.w	80004fc <__udivmoddi4+0x28c>
 80002c6:	4299      	cmp	r1, r3
 80002c8:	f240 8118 	bls.w	80004fc <__udivmoddi4+0x28c>
 80002cc:	3f02      	subs	r7, #2
 80002ce:	442b      	add	r3, r5
 80002d0:	1a5b      	subs	r3, r3, r1
 80002d2:	b2a4      	uxth	r4, r4
 80002d4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002d8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002dc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002e4:	45a4      	cmp	ip, r4
 80002e6:	d909      	bls.n	80002fc <__udivmoddi4+0x8c>
 80002e8:	192c      	adds	r4, r5, r4
 80002ea:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ee:	f080 8107 	bcs.w	8000500 <__udivmoddi4+0x290>
 80002f2:	45a4      	cmp	ip, r4
 80002f4:	f240 8104 	bls.w	8000500 <__udivmoddi4+0x290>
 80002f8:	3802      	subs	r0, #2
 80002fa:	442c      	add	r4, r5
 80002fc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000300:	eba4 040c 	sub.w	r4, r4, ip
 8000304:	2700      	movs	r7, #0
 8000306:	b11e      	cbz	r6, 8000310 <__udivmoddi4+0xa0>
 8000308:	40d4      	lsrs	r4, r2
 800030a:	2300      	movs	r3, #0
 800030c:	e9c6 4300 	strd	r4, r3, [r6]
 8000310:	4639      	mov	r1, r7
 8000312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000316:	428b      	cmp	r3, r1
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0xbe>
 800031a:	2e00      	cmp	r6, #0
 800031c:	f000 80eb 	beq.w	80004f6 <__udivmoddi4+0x286>
 8000320:	2700      	movs	r7, #0
 8000322:	e9c6 0100 	strd	r0, r1, [r6]
 8000326:	4638      	mov	r0, r7
 8000328:	4639      	mov	r1, r7
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	fab3 f783 	clz	r7, r3
 8000332:	2f00      	cmp	r7, #0
 8000334:	d147      	bne.n	80003c6 <__udivmoddi4+0x156>
 8000336:	428b      	cmp	r3, r1
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0xd0>
 800033a:	4282      	cmp	r2, r0
 800033c:	f200 80fa 	bhi.w	8000534 <__udivmoddi4+0x2c4>
 8000340:	1a84      	subs	r4, r0, r2
 8000342:	eb61 0303 	sbc.w	r3, r1, r3
 8000346:	2001      	movs	r0, #1
 8000348:	4698      	mov	r8, r3
 800034a:	2e00      	cmp	r6, #0
 800034c:	d0e0      	beq.n	8000310 <__udivmoddi4+0xa0>
 800034e:	e9c6 4800 	strd	r4, r8, [r6]
 8000352:	e7dd      	b.n	8000310 <__udivmoddi4+0xa0>
 8000354:	b902      	cbnz	r2, 8000358 <__udivmoddi4+0xe8>
 8000356:	deff      	udf	#255	; 0xff
 8000358:	fab2 f282 	clz	r2, r2
 800035c:	2a00      	cmp	r2, #0
 800035e:	f040 808f 	bne.w	8000480 <__udivmoddi4+0x210>
 8000362:	1b49      	subs	r1, r1, r5
 8000364:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000368:	fa1f f885 	uxth.w	r8, r5
 800036c:	2701      	movs	r7, #1
 800036e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000372:	0c23      	lsrs	r3, r4, #16
 8000374:	fb0e 111c 	mls	r1, lr, ip, r1
 8000378:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037c:	fb08 f10c 	mul.w	r1, r8, ip
 8000380:	4299      	cmp	r1, r3
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x124>
 8000384:	18eb      	adds	r3, r5, r3
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x122>
 800038c:	4299      	cmp	r1, r3
 800038e:	f200 80cd 	bhi.w	800052c <__udivmoddi4+0x2bc>
 8000392:	4684      	mov	ip, r0
 8000394:	1a59      	subs	r1, r3, r1
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1410 	mls	r4, lr, r0, r1
 80003a0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x14c>
 80003ac:	192c      	adds	r4, r5, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x14a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80b6 	bhi.w	8000526 <__udivmoddi4+0x2b6>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e79f      	b.n	8000306 <__udivmoddi4+0x96>
 80003c6:	f1c7 0c20 	rsb	ip, r7, #32
 80003ca:	40bb      	lsls	r3, r7
 80003cc:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003d0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003d4:	fa01 f407 	lsl.w	r4, r1, r7
 80003d8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003dc:	fa21 f30c 	lsr.w	r3, r1, ip
 80003e0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003e4:	4325      	orrs	r5, r4
 80003e6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ea:	0c2c      	lsrs	r4, r5, #16
 80003ec:	fb08 3319 	mls	r3, r8, r9, r3
 80003f0:	fa1f fa8e 	uxth.w	sl, lr
 80003f4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003f8:	fb09 f40a 	mul.w	r4, r9, sl
 80003fc:	429c      	cmp	r4, r3
 80003fe:	fa02 f207 	lsl.w	r2, r2, r7
 8000402:	fa00 f107 	lsl.w	r1, r0, r7
 8000406:	d90b      	bls.n	8000420 <__udivmoddi4+0x1b0>
 8000408:	eb1e 0303 	adds.w	r3, lr, r3
 800040c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000410:	f080 8087 	bcs.w	8000522 <__udivmoddi4+0x2b2>
 8000414:	429c      	cmp	r4, r3
 8000416:	f240 8084 	bls.w	8000522 <__udivmoddi4+0x2b2>
 800041a:	f1a9 0902 	sub.w	r9, r9, #2
 800041e:	4473      	add	r3, lr
 8000420:	1b1b      	subs	r3, r3, r4
 8000422:	b2ad      	uxth	r5, r5
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000430:	fb00 fa0a 	mul.w	sl, r0, sl
 8000434:	45a2      	cmp	sl, r4
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x1da>
 8000438:	eb1e 0404 	adds.w	r4, lr, r4
 800043c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000440:	d26b      	bcs.n	800051a <__udivmoddi4+0x2aa>
 8000442:	45a2      	cmp	sl, r4
 8000444:	d969      	bls.n	800051a <__udivmoddi4+0x2aa>
 8000446:	3802      	subs	r0, #2
 8000448:	4474      	add	r4, lr
 800044a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044e:	fba0 8902 	umull	r8, r9, r0, r2
 8000452:	eba4 040a 	sub.w	r4, r4, sl
 8000456:	454c      	cmp	r4, r9
 8000458:	46c2      	mov	sl, r8
 800045a:	464b      	mov	r3, r9
 800045c:	d354      	bcc.n	8000508 <__udivmoddi4+0x298>
 800045e:	d051      	beq.n	8000504 <__udivmoddi4+0x294>
 8000460:	2e00      	cmp	r6, #0
 8000462:	d069      	beq.n	8000538 <__udivmoddi4+0x2c8>
 8000464:	ebb1 050a 	subs.w	r5, r1, sl
 8000468:	eb64 0403 	sbc.w	r4, r4, r3
 800046c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000470:	40fd      	lsrs	r5, r7
 8000472:	40fc      	lsrs	r4, r7
 8000474:	ea4c 0505 	orr.w	r5, ip, r5
 8000478:	e9c6 5400 	strd	r5, r4, [r6]
 800047c:	2700      	movs	r7, #0
 800047e:	e747      	b.n	8000310 <__udivmoddi4+0xa0>
 8000480:	f1c2 0320 	rsb	r3, r2, #32
 8000484:	fa20 f703 	lsr.w	r7, r0, r3
 8000488:	4095      	lsls	r5, r2
 800048a:	fa01 f002 	lsl.w	r0, r1, r2
 800048e:	fa21 f303 	lsr.w	r3, r1, r3
 8000492:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000496:	4338      	orrs	r0, r7
 8000498:	0c01      	lsrs	r1, r0, #16
 800049a:	fbb3 f7fe 	udiv	r7, r3, lr
 800049e:	fa1f f885 	uxth.w	r8, r5
 80004a2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004a6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004aa:	fb07 f308 	mul.w	r3, r7, r8
 80004ae:	428b      	cmp	r3, r1
 80004b0:	fa04 f402 	lsl.w	r4, r4, r2
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x256>
 80004b6:	1869      	adds	r1, r5, r1
 80004b8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004bc:	d22f      	bcs.n	800051e <__udivmoddi4+0x2ae>
 80004be:	428b      	cmp	r3, r1
 80004c0:	d92d      	bls.n	800051e <__udivmoddi4+0x2ae>
 80004c2:	3f02      	subs	r7, #2
 80004c4:	4429      	add	r1, r5
 80004c6:	1acb      	subs	r3, r1, r3
 80004c8:	b281      	uxth	r1, r0
 80004ca:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ce:	fb0e 3310 	mls	r3, lr, r0, r3
 80004d2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d6:	fb00 f308 	mul.w	r3, r0, r8
 80004da:	428b      	cmp	r3, r1
 80004dc:	d907      	bls.n	80004ee <__udivmoddi4+0x27e>
 80004de:	1869      	adds	r1, r5, r1
 80004e0:	f100 3cff 	add.w	ip, r0, #4294967295
 80004e4:	d217      	bcs.n	8000516 <__udivmoddi4+0x2a6>
 80004e6:	428b      	cmp	r3, r1
 80004e8:	d915      	bls.n	8000516 <__udivmoddi4+0x2a6>
 80004ea:	3802      	subs	r0, #2
 80004ec:	4429      	add	r1, r5
 80004ee:	1ac9      	subs	r1, r1, r3
 80004f0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004f4:	e73b      	b.n	800036e <__udivmoddi4+0xfe>
 80004f6:	4637      	mov	r7, r6
 80004f8:	4630      	mov	r0, r6
 80004fa:	e709      	b.n	8000310 <__udivmoddi4+0xa0>
 80004fc:	4607      	mov	r7, r0
 80004fe:	e6e7      	b.n	80002d0 <__udivmoddi4+0x60>
 8000500:	4618      	mov	r0, r3
 8000502:	e6fb      	b.n	80002fc <__udivmoddi4+0x8c>
 8000504:	4541      	cmp	r1, r8
 8000506:	d2ab      	bcs.n	8000460 <__udivmoddi4+0x1f0>
 8000508:	ebb8 0a02 	subs.w	sl, r8, r2
 800050c:	eb69 020e 	sbc.w	r2, r9, lr
 8000510:	3801      	subs	r0, #1
 8000512:	4613      	mov	r3, r2
 8000514:	e7a4      	b.n	8000460 <__udivmoddi4+0x1f0>
 8000516:	4660      	mov	r0, ip
 8000518:	e7e9      	b.n	80004ee <__udivmoddi4+0x27e>
 800051a:	4618      	mov	r0, r3
 800051c:	e795      	b.n	800044a <__udivmoddi4+0x1da>
 800051e:	4667      	mov	r7, ip
 8000520:	e7d1      	b.n	80004c6 <__udivmoddi4+0x256>
 8000522:	4681      	mov	r9, r0
 8000524:	e77c      	b.n	8000420 <__udivmoddi4+0x1b0>
 8000526:	3802      	subs	r0, #2
 8000528:	442c      	add	r4, r5
 800052a:	e747      	b.n	80003bc <__udivmoddi4+0x14c>
 800052c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000530:	442b      	add	r3, r5
 8000532:	e72f      	b.n	8000394 <__udivmoddi4+0x124>
 8000534:	4638      	mov	r0, r7
 8000536:	e708      	b.n	800034a <__udivmoddi4+0xda>
 8000538:	4637      	mov	r7, r6
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0xa0>

0800053c <__aeabi_idiv0>:
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop

08000540 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000540:	b480      	push	{r7}
 8000542:	b085      	sub	sp, #20
 8000544:	af00      	add	r7, sp, #0
 8000546:	60f8      	str	r0, [r7, #12]
 8000548:	60b9      	str	r1, [r7, #8]
 800054a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	4a07      	ldr	r2, [pc, #28]	; (800056c <vApplicationGetIdleTaskMemory+0x2c>)
 8000550:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000552:	68bb      	ldr	r3, [r7, #8]
 8000554:	4a06      	ldr	r2, [pc, #24]	; (8000570 <vApplicationGetIdleTaskMemory+0x30>)
 8000556:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	2280      	movs	r2, #128	; 0x80
 800055c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 800055e:	bf00      	nop
 8000560:	3714      	adds	r7, #20
 8000562:	46bd      	mov	sp, r7
 8000564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop
 800056c:	2000003c 	.word	0x2000003c
 8000570:	20000090 	.word	0x20000090

08000574 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000574:	b5b0      	push	{r4, r5, r7, lr}
 8000576:	b088      	sub	sp, #32
 8000578:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057a:	f000 ffc2 	bl	8001502 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057e:	f000 f82f 	bl	80005e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000582:	f000 f9b1 	bl	80008e8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000586:	f000 f989 	bl	800089c <MX_DMA_Init>
  MX_USART3_UART_Init();
 800058a:	f000 f929 	bl	80007e0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800058e:	f000 f957 	bl	8000840 <MX_USB_OTG_FS_PCD_Init>
  MX_CAN1_Init();
 8000592:	f000 f8c9 	bl	8000728 <MX_CAN1_Init>
  MX_SDMMC1_SD_Init();
 8000596:	f000 f8fd 	bl	8000794 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 800059a:	f007 f981 	bl	80078a0 <MX_FATFS_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800059e:	f000 f8b7 	bl	8000710 <MX_NVIC_Init>
  res = f_close(&SDFile);
  res = f_open(&SDFile, &path[0], FA_OPEN_APPEND | FA_WRITE);*/
  //USB start
  //MX_USB_DEVICE_Init();
  // CAN Initialization
  CAN_Config();
 80005a2:	f000 fbe3 	bl	8000d6c <CAN_Config>
  HAL_CAN_Start(&hcan1);
 80005a6:	480b      	ldr	r0, [pc, #44]	; (80005d4 <main+0x60>)
 80005a8:	f001 f9e2 	bl	8001970 <HAL_CAN_Start>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 80005ac:	4b0a      	ldr	r3, [pc, #40]	; (80005d8 <main+0x64>)
 80005ae:	1d3c      	adds	r4, r7, #4
 80005b0:	461d      	mov	r5, r3
 80005b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005b6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005be:	1d3b      	adds	r3, r7, #4
 80005c0:	2100      	movs	r1, #0
 80005c2:	4618      	mov	r0, r3
 80005c4:	f00b fffc 	bl	800c5c0 <osThreadCreate>
 80005c8:	4602      	mov	r2, r0
 80005ca:	4b04      	ldr	r3, [pc, #16]	; (80005dc <main+0x68>)
 80005cc:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005ce:	f00b ffd4 	bl	800c57a <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005d2:	e7fe      	b.n	80005d2 <main+0x5e>
 80005d4:	2000683c 	.word	0x2000683c
 80005d8:	0800f280 	.word	0x0800f280
 80005dc:	20004040 	.word	0x20004040

080005e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b0b8      	sub	sp, #224	; 0xe0
 80005e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80005ea:	2234      	movs	r2, #52	; 0x34
 80005ec:	2100      	movs	r1, #0
 80005ee:	4618      	mov	r0, r3
 80005f0:	f00e fe2b 	bl	800f24a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000604:	f107 0308 	add.w	r3, r7, #8
 8000608:	2290      	movs	r2, #144	; 0x90
 800060a:	2100      	movs	r1, #0
 800060c:	4618      	mov	r0, r3
 800060e:	f00e fe1c 	bl	800f24a <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8000612:	f002 fe19 	bl	8003248 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000616:	4b3b      	ldr	r3, [pc, #236]	; (8000704 <SystemClock_Config+0x124>)
 8000618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800061a:	4a3a      	ldr	r2, [pc, #232]	; (8000704 <SystemClock_Config+0x124>)
 800061c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000620:	6413      	str	r3, [r2, #64]	; 0x40
 8000622:	4b38      	ldr	r3, [pc, #224]	; (8000704 <SystemClock_Config+0x124>)
 8000624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000626:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800062a:	607b      	str	r3, [r7, #4]
 800062c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800062e:	4b36      	ldr	r3, [pc, #216]	; (8000708 <SystemClock_Config+0x128>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	4a35      	ldr	r2, [pc, #212]	; (8000708 <SystemClock_Config+0x128>)
 8000634:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000638:	6013      	str	r3, [r2, #0]
 800063a:	4b33      	ldr	r3, [pc, #204]	; (8000708 <SystemClock_Config+0x128>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000642:	603b      	str	r3, [r7, #0]
 8000644:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000646:	2301      	movs	r3, #1
 8000648:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800064c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000650:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000654:	2302      	movs	r3, #2
 8000656:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800065a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800065e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000662:	2304      	movs	r3, #4
 8000664:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000668:	23c0      	movs	r3, #192	; 0xc0
 800066a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800066e:	2302      	movs	r3, #2
 8000670:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000674:	2308      	movs	r3, #8
 8000676:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800067a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800067e:	4618      	mov	r0, r3
 8000680:	f002 fe42 	bl	8003308 <HAL_RCC_OscConfig>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800068a:	f000 fc61 	bl	8000f50 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800068e:	f002 fdeb 	bl	8003268 <HAL_PWREx_EnableOverDrive>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000698:	f000 fc5a 	bl	8000f50 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800069c:	230f      	movs	r3, #15
 800069e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a2:	2302      	movs	r3, #2
 80006a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a8:	2300      	movs	r3, #0
 80006aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006ae:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80006be:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80006c2:	2106      	movs	r1, #6
 80006c4:	4618      	mov	r0, r3
 80006c6:	f003 f8cd 	bl	8003864 <HAL_RCC_ClockConfig>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 80006d0:	f000 fc3e 	bl	8000f50 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_SDMMC1
 80006d4:	4b0d      	ldr	r3, [pc, #52]	; (800070c <SystemClock_Config+0x12c>)
 80006d6:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80006d8:	2300      	movs	r3, #0
 80006da:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80006dc:	2300      	movs	r3, #0
 80006de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 80006e2:	2300      	movs	r3, #0
 80006e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006e8:	f107 0308 	add.w	r3, r7, #8
 80006ec:	4618      	mov	r0, r3
 80006ee:	f003 fae3 	bl	8003cb8 <HAL_RCCEx_PeriphCLKConfig>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <SystemClock_Config+0x11c>
  {
    Error_Handler();
 80006f8:	f000 fc2a 	bl	8000f50 <Error_Handler>
  }
}
 80006fc:	bf00      	nop
 80006fe:	37e0      	adds	r7, #224	; 0xe0
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	40023800 	.word	0x40023800
 8000708:	40007000 	.word	0x40007000
 800070c:	00a00100 	.word	0x00a00100

08000710 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* CAN1_RX0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 6, 0);
 8000714:	2200      	movs	r2, #0
 8000716:	2106      	movs	r1, #6
 8000718:	2014      	movs	r0, #20
 800071a:	f001 fe89 	bl	8002430 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800071e:	2014      	movs	r0, #20
 8000720:	f001 fea2 	bl	8002468 <HAL_NVIC_EnableIRQ>
}
 8000724:	bf00      	nop
 8000726:	bd80      	pop	{r7, pc}

08000728 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800072c:	4b17      	ldr	r3, [pc, #92]	; (800078c <MX_CAN1_Init+0x64>)
 800072e:	4a18      	ldr	r2, [pc, #96]	; (8000790 <MX_CAN1_Init+0x68>)
 8000730:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 4;
 8000732:	4b16      	ldr	r3, [pc, #88]	; (800078c <MX_CAN1_Init+0x64>)
 8000734:	2204      	movs	r2, #4
 8000736:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000738:	4b14      	ldr	r3, [pc, #80]	; (800078c <MX_CAN1_Init+0x64>)
 800073a:	2200      	movs	r2, #0
 800073c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800073e:	4b13      	ldr	r3, [pc, #76]	; (800078c <MX_CAN1_Init+0x64>)
 8000740:	2200      	movs	r2, #0
 8000742:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_12TQ;
 8000744:	4b11      	ldr	r3, [pc, #68]	; (800078c <MX_CAN1_Init+0x64>)
 8000746:	f44f 2230 	mov.w	r2, #720896	; 0xb0000
 800074a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 800074c:	4b0f      	ldr	r3, [pc, #60]	; (800078c <MX_CAN1_Init+0x64>)
 800074e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000752:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000754:	4b0d      	ldr	r3, [pc, #52]	; (800078c <MX_CAN1_Init+0x64>)
 8000756:	2200      	movs	r2, #0
 8000758:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800075a:	4b0c      	ldr	r3, [pc, #48]	; (800078c <MX_CAN1_Init+0x64>)
 800075c:	2200      	movs	r2, #0
 800075e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000760:	4b0a      	ldr	r3, [pc, #40]	; (800078c <MX_CAN1_Init+0x64>)
 8000762:	2200      	movs	r2, #0
 8000764:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000766:	4b09      	ldr	r3, [pc, #36]	; (800078c <MX_CAN1_Init+0x64>)
 8000768:	2200      	movs	r2, #0
 800076a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = ENABLE;
 800076c:	4b07      	ldr	r3, [pc, #28]	; (800078c <MX_CAN1_Init+0x64>)
 800076e:	2201      	movs	r2, #1
 8000770:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000772:	4b06      	ldr	r3, [pc, #24]	; (800078c <MX_CAN1_Init+0x64>)
 8000774:	2200      	movs	r2, #0
 8000776:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000778:	4804      	ldr	r0, [pc, #16]	; (800078c <MX_CAN1_Init+0x64>)
 800077a:	f000 ff11 	bl	80015a0 <HAL_CAN_Init>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000784:	f000 fbe4 	bl	8000f50 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000788:	bf00      	nop
 800078a:	bd80      	pop	{r7, pc}
 800078c:	2000683c 	.word	0x2000683c
 8000790:	40006400 	.word	0x40006400

08000794 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000798:	4b0f      	ldr	r3, [pc, #60]	; (80007d8 <MX_SDMMC1_SD_Init+0x44>)
 800079a:	4a10      	ldr	r2, [pc, #64]	; (80007dc <MX_SDMMC1_SD_Init+0x48>)
 800079c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800079e:	4b0e      	ldr	r3, [pc, #56]	; (80007d8 <MX_SDMMC1_SD_Init+0x44>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 80007a4:	4b0c      	ldr	r3, [pc, #48]	; (80007d8 <MX_SDMMC1_SD_Init+0x44>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80007aa:	4b0b      	ldr	r3, [pc, #44]	; (80007d8 <MX_SDMMC1_SD_Init+0x44>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 80007b0:	4b09      	ldr	r3, [pc, #36]	; (80007d8 <MX_SDMMC1_SD_Init+0x44>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80007b6:	4b08      	ldr	r3, [pc, #32]	; (80007d8 <MX_SDMMC1_SD_Init+0x44>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 80007bc:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <MX_SDMMC1_SD_Init+0x44>)
 80007be:	2200      	movs	r2, #0
 80007c0:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */
  // Is Redundant
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 80007c2:	4805      	ldr	r0, [pc, #20]	; (80007d8 <MX_SDMMC1_SD_Init+0x44>)
 80007c4:	f003 fe9e 	bl	8004504 <HAL_SD_Init>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_SDMMC1_SD_Init+0x3e>
  {
	  Error_Handler();
 80007ce:	f000 fbbf 	bl	8000f50 <Error_Handler>
  }
  /* USER CODE END SDMMC1_Init 2 */

}
 80007d2:	bf00      	nop
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	200044c8 	.word	0x200044c8
 80007dc:	40012c00 	.word	0x40012c00

080007e0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007e4:	4b14      	ldr	r3, [pc, #80]	; (8000838 <MX_USART3_UART_Init+0x58>)
 80007e6:	4a15      	ldr	r2, [pc, #84]	; (800083c <MX_USART3_UART_Init+0x5c>)
 80007e8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007ea:	4b13      	ldr	r3, [pc, #76]	; (8000838 <MX_USART3_UART_Init+0x58>)
 80007ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007f0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007f2:	4b11      	ldr	r3, [pc, #68]	; (8000838 <MX_USART3_UART_Init+0x58>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007f8:	4b0f      	ldr	r3, [pc, #60]	; (8000838 <MX_USART3_UART_Init+0x58>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007fe:	4b0e      	ldr	r3, [pc, #56]	; (8000838 <MX_USART3_UART_Init+0x58>)
 8000800:	2200      	movs	r2, #0
 8000802:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000804:	4b0c      	ldr	r3, [pc, #48]	; (8000838 <MX_USART3_UART_Init+0x58>)
 8000806:	220c      	movs	r2, #12
 8000808:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800080a:	4b0b      	ldr	r3, [pc, #44]	; (8000838 <MX_USART3_UART_Init+0x58>)
 800080c:	2200      	movs	r2, #0
 800080e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000810:	4b09      	ldr	r3, [pc, #36]	; (8000838 <MX_USART3_UART_Init+0x58>)
 8000812:	2200      	movs	r2, #0
 8000814:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000816:	4b08      	ldr	r3, [pc, #32]	; (8000838 <MX_USART3_UART_Init+0x58>)
 8000818:	2200      	movs	r2, #0
 800081a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800081c:	4b06      	ldr	r3, [pc, #24]	; (8000838 <MX_USART3_UART_Init+0x58>)
 800081e:	2200      	movs	r2, #0
 8000820:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000822:	4805      	ldr	r0, [pc, #20]	; (8000838 <MX_USART3_UART_Init+0x58>)
 8000824:	f005 fbca 	bl	8005fbc <HAL_UART_Init>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800082e:	f000 fb8f 	bl	8000f50 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000832:	bf00      	nop
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	20004044 	.word	0x20004044
 800083c:	40004800 	.word	0x40004800

08000840 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000844:	4b14      	ldr	r3, [pc, #80]	; (8000898 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000846:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800084a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800084c:	4b12      	ldr	r3, [pc, #72]	; (8000898 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800084e:	2206      	movs	r2, #6
 8000850:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000852:	4b11      	ldr	r3, [pc, #68]	; (8000898 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000854:	2202      	movs	r2, #2
 8000856:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000858:	4b0f      	ldr	r3, [pc, #60]	; (8000898 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800085a:	2200      	movs	r2, #0
 800085c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800085e:	4b0e      	ldr	r3, [pc, #56]	; (8000898 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000860:	2202      	movs	r2, #2
 8000862:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000864:	4b0c      	ldr	r3, [pc, #48]	; (8000898 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000866:	2200      	movs	r2, #0
 8000868:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800086a:	4b0b      	ldr	r3, [pc, #44]	; (8000898 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800086c:	2200      	movs	r2, #0
 800086e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000870:	4b09      	ldr	r3, [pc, #36]	; (8000898 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000872:	2200      	movs	r2, #0
 8000874:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000876:	4b08      	ldr	r3, [pc, #32]	; (8000898 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000878:	2200      	movs	r2, #0
 800087a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800087c:	4b06      	ldr	r3, [pc, #24]	; (8000898 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800087e:	2200      	movs	r2, #0
 8000880:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000882:	4805      	ldr	r0, [pc, #20]	; (8000898 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000884:	f002 fb97 	bl	8002fb6 <HAL_PCD_Init>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800088e:	f000 fb5f 	bl	8000f50 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000892:	bf00      	nop
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	200040c4 	.word	0x200040c4

0800089c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80008a2:	4b10      	ldr	r3, [pc, #64]	; (80008e4 <MX_DMA_Init+0x48>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	4a0f      	ldr	r2, [pc, #60]	; (80008e4 <MX_DMA_Init+0x48>)
 80008a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80008ac:	6313      	str	r3, [r2, #48]	; 0x30
 80008ae:	4b0d      	ldr	r3, [pc, #52]	; (80008e4 <MX_DMA_Init+0x48>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80008b6:	607b      	str	r3, [r7, #4]
 80008b8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 7, 0);
 80008ba:	2200      	movs	r2, #0
 80008bc:	2107      	movs	r1, #7
 80008be:	203b      	movs	r0, #59	; 0x3b
 80008c0:	f001 fdb6 	bl	8002430 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80008c4:	203b      	movs	r0, #59	; 0x3b
 80008c6:	f001 fdcf 	bl	8002468 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 7, 0);
 80008ca:	2200      	movs	r2, #0
 80008cc:	2107      	movs	r1, #7
 80008ce:	2045      	movs	r0, #69	; 0x45
 80008d0:	f001 fdae 	bl	8002430 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80008d4:	2045      	movs	r0, #69	; 0x45
 80008d6:	f001 fdc7 	bl	8002468 <HAL_NVIC_EnableIRQ>

}
 80008da:	bf00      	nop
 80008dc:	3708      	adds	r7, #8
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	40023800 	.word	0x40023800

080008e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b08c      	sub	sp, #48	; 0x30
 80008ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ee:	f107 031c 	add.w	r3, r7, #28
 80008f2:	2200      	movs	r2, #0
 80008f4:	601a      	str	r2, [r3, #0]
 80008f6:	605a      	str	r2, [r3, #4]
 80008f8:	609a      	str	r2, [r3, #8]
 80008fa:	60da      	str	r2, [r3, #12]
 80008fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008fe:	4b6d      	ldr	r3, [pc, #436]	; (8000ab4 <MX_GPIO_Init+0x1cc>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	4a6c      	ldr	r2, [pc, #432]	; (8000ab4 <MX_GPIO_Init+0x1cc>)
 8000904:	f043 0304 	orr.w	r3, r3, #4
 8000908:	6313      	str	r3, [r2, #48]	; 0x30
 800090a:	4b6a      	ldr	r3, [pc, #424]	; (8000ab4 <MX_GPIO_Init+0x1cc>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	f003 0304 	and.w	r3, r3, #4
 8000912:	61bb      	str	r3, [r7, #24]
 8000914:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000916:	4b67      	ldr	r3, [pc, #412]	; (8000ab4 <MX_GPIO_Init+0x1cc>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	4a66      	ldr	r2, [pc, #408]	; (8000ab4 <MX_GPIO_Init+0x1cc>)
 800091c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000920:	6313      	str	r3, [r2, #48]	; 0x30
 8000922:	4b64      	ldr	r3, [pc, #400]	; (8000ab4 <MX_GPIO_Init+0x1cc>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800092a:	617b      	str	r3, [r7, #20]
 800092c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800092e:	4b61      	ldr	r3, [pc, #388]	; (8000ab4 <MX_GPIO_Init+0x1cc>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	4a60      	ldr	r2, [pc, #384]	; (8000ab4 <MX_GPIO_Init+0x1cc>)
 8000934:	f043 0301 	orr.w	r3, r3, #1
 8000938:	6313      	str	r3, [r2, #48]	; 0x30
 800093a:	4b5e      	ldr	r3, [pc, #376]	; (8000ab4 <MX_GPIO_Init+0x1cc>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	f003 0301 	and.w	r3, r3, #1
 8000942:	613b      	str	r3, [r7, #16]
 8000944:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000946:	4b5b      	ldr	r3, [pc, #364]	; (8000ab4 <MX_GPIO_Init+0x1cc>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	4a5a      	ldr	r2, [pc, #360]	; (8000ab4 <MX_GPIO_Init+0x1cc>)
 800094c:	f043 0302 	orr.w	r3, r3, #2
 8000950:	6313      	str	r3, [r2, #48]	; 0x30
 8000952:	4b58      	ldr	r3, [pc, #352]	; (8000ab4 <MX_GPIO_Init+0x1cc>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	f003 0302 	and.w	r3, r3, #2
 800095a:	60fb      	str	r3, [r7, #12]
 800095c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800095e:	4b55      	ldr	r3, [pc, #340]	; (8000ab4 <MX_GPIO_Init+0x1cc>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	4a54      	ldr	r2, [pc, #336]	; (8000ab4 <MX_GPIO_Init+0x1cc>)
 8000964:	f043 0308 	orr.w	r3, r3, #8
 8000968:	6313      	str	r3, [r2, #48]	; 0x30
 800096a:	4b52      	ldr	r3, [pc, #328]	; (8000ab4 <MX_GPIO_Init+0x1cc>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	f003 0308 	and.w	r3, r3, #8
 8000972:	60bb      	str	r3, [r7, #8]
 8000974:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000976:	4b4f      	ldr	r3, [pc, #316]	; (8000ab4 <MX_GPIO_Init+0x1cc>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	4a4e      	ldr	r2, [pc, #312]	; (8000ab4 <MX_GPIO_Init+0x1cc>)
 800097c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000980:	6313      	str	r3, [r2, #48]	; 0x30
 8000982:	4b4c      	ldr	r3, [pc, #304]	; (8000ab4 <MX_GPIO_Init+0x1cc>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800098a:	607b      	str	r3, [r7, #4]
 800098c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin|GPIO_PIN_8 
 800098e:	2200      	movs	r2, #0
 8000990:	f244 3181 	movw	r1, #17281	; 0x4381
 8000994:	4848      	ldr	r0, [pc, #288]	; (8000ab8 <MX_GPIO_Init+0x1d0>)
 8000996:	f002 fadb 	bl	8002f50 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800099a:	2200      	movs	r2, #0
 800099c:	2140      	movs	r1, #64	; 0x40
 800099e:	4847      	ldr	r0, [pc, #284]	; (8000abc <MX_GPIO_Init+0x1d4>)
 80009a0:	f002 fad6 	bl	8002f50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80009a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009aa:	4b45      	ldr	r3, [pc, #276]	; (8000ac0 <MX_GPIO_Init+0x1d8>)
 80009ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ae:	2300      	movs	r3, #0
 80009b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80009b2:	f107 031c 	add.w	r3, r7, #28
 80009b6:	4619      	mov	r1, r3
 80009b8:	4842      	ldr	r0, [pc, #264]	; (8000ac4 <MX_GPIO_Init+0x1dc>)
 80009ba:	f002 f907 	bl	8002bcc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80009be:	2332      	movs	r3, #50	; 0x32
 80009c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c2:	2302      	movs	r3, #2
 80009c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	2300      	movs	r3, #0
 80009c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ca:	2303      	movs	r3, #3
 80009cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009ce:	230b      	movs	r3, #11
 80009d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009d2:	f107 031c 	add.w	r3, r7, #28
 80009d6:	4619      	mov	r1, r3
 80009d8:	483a      	ldr	r0, [pc, #232]	; (8000ac4 <MX_GPIO_Init+0x1dc>)
 80009da:	f002 f8f7 	bl	8002bcc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80009de:	2386      	movs	r3, #134	; 0x86
 80009e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e2:	2302      	movs	r3, #2
 80009e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e6:	2300      	movs	r3, #0
 80009e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ea:	2303      	movs	r3, #3
 80009ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009ee:	230b      	movs	r3, #11
 80009f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f2:	f107 031c 	add.w	r3, r7, #28
 80009f6:	4619      	mov	r1, r3
 80009f8:	4833      	ldr	r0, [pc, #204]	; (8000ac8 <MX_GPIO_Init+0x1e0>)
 80009fa:	f002 f8e7 	bl	8002bcc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin PB8 
                           PB9 */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin|GPIO_PIN_8 
 80009fe:	f244 3381 	movw	r3, #17281	; 0x4381
 8000a02:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a04:	2301      	movs	r3, #1
 8000a06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a10:	f107 031c 	add.w	r3, r7, #28
 8000a14:	4619      	mov	r1, r3
 8000a16:	4828      	ldr	r0, [pc, #160]	; (8000ab8 <MX_GPIO_Init+0x1d0>)
 8000a18:	f002 f8d8 	bl	8002bcc <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000a1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a22:	2302      	movs	r3, #2
 8000a24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a26:	2300      	movs	r3, #0
 8000a28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a2a:	2303      	movs	r3, #3
 8000a2c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a2e:	230b      	movs	r3, #11
 8000a30:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000a32:	f107 031c 	add.w	r3, r7, #28
 8000a36:	4619      	mov	r1, r3
 8000a38:	481f      	ldr	r0, [pc, #124]	; (8000ab8 <MX_GPIO_Init+0x1d0>)
 8000a3a:	f002 f8c7 	bl	8002bcc <HAL_GPIO_Init>

  /*Configure GPIO pin : PG2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a3e:	2304      	movs	r3, #4
 8000a40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a42:	2300      	movs	r3, #0
 8000a44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a46:	2302      	movs	r3, #2
 8000a48:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a4a:	f107 031c 	add.w	r3, r7, #28
 8000a4e:	4619      	mov	r1, r3
 8000a50:	481a      	ldr	r0, [pc, #104]	; (8000abc <MX_GPIO_Init+0x1d4>)
 8000a52:	f002 f8bb 	bl	8002bcc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a56:	2340      	movs	r3, #64	; 0x40
 8000a58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a62:	2300      	movs	r3, #0
 8000a64:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a66:	f107 031c 	add.w	r3, r7, #28
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	4813      	ldr	r0, [pc, #76]	; (8000abc <MX_GPIO_Init+0x1d4>)
 8000a6e:	f002 f8ad 	bl	8002bcc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a72:	2380      	movs	r3, #128	; 0x80
 8000a74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a76:	2300      	movs	r3, #0
 8000a78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a7e:	f107 031c 	add.w	r3, r7, #28
 8000a82:	4619      	mov	r1, r3
 8000a84:	480d      	ldr	r0, [pc, #52]	; (8000abc <MX_GPIO_Init+0x1d4>)
 8000a86:	f002 f8a1 	bl	8002bcc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000a8a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000a8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a90:	2302      	movs	r3, #2
 8000a92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a94:	2300      	movs	r3, #0
 8000a96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a98:	2303      	movs	r3, #3
 8000a9a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a9c:	230b      	movs	r3, #11
 8000a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000aa0:	f107 031c 	add.w	r3, r7, #28
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4805      	ldr	r0, [pc, #20]	; (8000abc <MX_GPIO_Init+0x1d4>)
 8000aa8:	f002 f890 	bl	8002bcc <HAL_GPIO_Init>

}
 8000aac:	bf00      	nop
 8000aae:	3730      	adds	r7, #48	; 0x30
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	40023800 	.word	0x40023800
 8000ab8:	40020400 	.word	0x40020400
 8000abc:	40021800 	.word	0x40021800
 8000ac0:	10110000 	.word	0x10110000
 8000ac4:	40020800 	.word	0x40020800
 8000ac8:	40020000 	.word	0x40020000

08000acc <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8000acc:	b590      	push	{r4, r7, lr}
 8000ace:	b085      	sub	sp, #20
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ada:	4823      	ldr	r0, [pc, #140]	; (8000b68 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 8000adc:	f002 fa38 	bl	8002f50 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_SET);
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	2180      	movs	r1, #128	; 0x80
 8000ae4:	4820      	ldr	r0, [pc, #128]	; (8000b68 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 8000ae6:	f002 fa33 	bl	8002f50 <HAL_GPIO_WritePin>
	if(HAL_CAN_GetRxMessage(&hcan1,CAN_RX_FIFO0,&RxHeader,RxData) == HAL_OK){
 8000aea:	4b20      	ldr	r3, [pc, #128]	; (8000b6c <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 8000aec:	4a20      	ldr	r2, [pc, #128]	; (8000b70 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 8000aee:	2100      	movs	r1, #0
 8000af0:	4820      	ldr	r0, [pc, #128]	; (8000b74 <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
 8000af2:	f001 f85c 	bl	8001bae <HAL_CAN_GetRxMessage>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d101      	bne.n	8000b00 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>
		Get_Data();
 8000afc:	f000 f844 	bl	8000b88 <Get_Data>
	}
	// Test if the buffer is full
	if(ind >= 32){
 8000b00:	4b1d      	ldr	r3, [pc, #116]	; (8000b78 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	2b1f      	cmp	r3, #31
 8000b06:	d91f      	bls.n	8000b48 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>
		// Move the acquired data to the writing buffer
		for(uint8_t i=0;i<32;i++){
 8000b08:	2300      	movs	r3, #0
 8000b0a:	73fb      	strb	r3, [r7, #15]
 8000b0c:	e016      	b.n	8000b3c <HAL_CAN_RxFifo0MsgPendingCallback+0x70>
			SD_buffer[i] = buffer[i];
 8000b0e:	7bfb      	ldrb	r3, [r7, #15]
 8000b10:	7bfa      	ldrb	r2, [r7, #15]
 8000b12:	491a      	ldr	r1, [pc, #104]	; (8000b7c <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 8000b14:	0112      	lsls	r2, r2, #4
 8000b16:	4411      	add	r1, r2
 8000b18:	4a19      	ldr	r2, [pc, #100]	; (8000b80 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>)
 8000b1a:	011b      	lsls	r3, r3, #4
 8000b1c:	441a      	add	r2, r3
 8000b1e:	460b      	mov	r3, r1
 8000b20:	6814      	ldr	r4, [r2, #0]
 8000b22:	6850      	ldr	r0, [r2, #4]
 8000b24:	6891      	ldr	r1, [r2, #8]
 8000b26:	68d2      	ldr	r2, [r2, #12]
 8000b28:	601c      	str	r4, [r3, #0]
 8000b2a:	6058      	str	r0, [r3, #4]
 8000b2c:	6099      	str	r1, [r3, #8]
 8000b2e:	60da      	str	r2, [r3, #12]
			wf = 1;
 8000b30:	4b14      	ldr	r3, [pc, #80]	; (8000b84 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 8000b32:	2201      	movs	r2, #1
 8000b34:	701a      	strb	r2, [r3, #0]
		for(uint8_t i=0;i<32;i++){
 8000b36:	7bfb      	ldrb	r3, [r7, #15]
 8000b38:	3301      	adds	r3, #1
 8000b3a:	73fb      	strb	r3, [r7, #15]
 8000b3c:	7bfb      	ldrb	r3, [r7, #15]
 8000b3e:	2b1f      	cmp	r3, #31
 8000b40:	d9e5      	bls.n	8000b0e <HAL_CAN_RxFifo0MsgPendingCallback+0x42>
		}
		ind = 0;
 8000b42:	4b0d      	ldr	r3, [pc, #52]	; (8000b78 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	701a      	strb	r2, [r3, #0]
		// Stop the data request to write the buffer to the memory
		//HAL_TIM_Base_Stop_IT(&htim14);
		//HAL_CAN_DeactivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8000b48:	2200      	movs	r2, #0
 8000b4a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b4e:	4806      	ldr	r0, [pc, #24]	; (8000b68 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 8000b50:	f002 f9fe 	bl	8002f50 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_RESET);
 8000b54:	2200      	movs	r2, #0
 8000b56:	2180      	movs	r1, #128	; 0x80
 8000b58:	4803      	ldr	r0, [pc, #12]	; (8000b68 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 8000b5a:	f002 f9f9 	bl	8002f50 <HAL_GPIO_WritePin>
}
 8000b5e:	bf00      	nop
 8000b60:	3714      	adds	r7, #20
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd90      	pop	{r4, r7, pc}
 8000b66:	bf00      	nop
 8000b68:	40020400 	.word	0x40020400
 8000b6c:	20006834 	.word	0x20006834
 8000b70:	20006ae0 	.word	0x20006ae0
 8000b74:	2000683c 	.word	0x2000683c
 8000b78:	20000290 	.word	0x20000290
 8000b7c:	200068e0 	.word	0x200068e0
 8000b80:	2000554c 	.word	0x2000554c
 8000b84:	20000292 	.word	0x20000292

08000b88 <Get_Data>:

void Get_Data(){
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
	 *   | |       ID
	 *   | | _______________
	 * -|-|-|x|x|x|x|x|x|x|x|
	 *   9 8 7 6 5 4 3 2 1 0
	 */
	if((RxHeader.StdId>>8) == 0x00){
 8000b8c:	4b73      	ldr	r3, [pc, #460]	; (8000d5c <Get_Data+0x1d4>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	0a1b      	lsrs	r3, r3, #8
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d169      	bne.n	8000c6a <Get_Data+0xe2>
		buffer[ind].Header_H = ((uint8_t)RxHeader.StdId & 0x1F)<<1;
 8000b96:	4b71      	ldr	r3, [pc, #452]	; (8000d5c <Get_Data+0x1d4>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	b2db      	uxtb	r3, r3
 8000b9c:	005b      	lsls	r3, r3, #1
 8000b9e:	b2db      	uxtb	r3, r3
 8000ba0:	4a6f      	ldr	r2, [pc, #444]	; (8000d60 <Get_Data+0x1d8>)
 8000ba2:	7812      	ldrb	r2, [r2, #0]
 8000ba4:	4610      	mov	r0, r2
 8000ba6:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8000baa:	b2d9      	uxtb	r1, r3
 8000bac:	4a6d      	ldr	r2, [pc, #436]	; (8000d64 <Get_Data+0x1dc>)
 8000bae:	0103      	lsls	r3, r0, #4
 8000bb0:	4413      	add	r3, r2
 8000bb2:	460a      	mov	r2, r1
 8000bb4:	701a      	strb	r2, [r3, #0]
		buffer[ind].Header_L = RxData[0];
 8000bb6:	4b6a      	ldr	r3, [pc, #424]	; (8000d60 <Get_Data+0x1d8>)
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	4618      	mov	r0, r3
 8000bbc:	4b6a      	ldr	r3, [pc, #424]	; (8000d68 <Get_Data+0x1e0>)
 8000bbe:	7819      	ldrb	r1, [r3, #0]
 8000bc0:	4a68      	ldr	r2, [pc, #416]	; (8000d64 <Get_Data+0x1dc>)
 8000bc2:	0103      	lsls	r3, r0, #4
 8000bc4:	4413      	add	r3, r2
 8000bc6:	3302      	adds	r3, #2
 8000bc8:	460a      	mov	r2, r1
 8000bca:	701a      	strb	r2, [r3, #0]
		buffer[ind].Header_M = RxData[1];
 8000bcc:	4b64      	ldr	r3, [pc, #400]	; (8000d60 <Get_Data+0x1d8>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	4b65      	ldr	r3, [pc, #404]	; (8000d68 <Get_Data+0x1e0>)
 8000bd4:	7859      	ldrb	r1, [r3, #1]
 8000bd6:	4a63      	ldr	r2, [pc, #396]	; (8000d64 <Get_Data+0x1dc>)
 8000bd8:	0103      	lsls	r3, r0, #4
 8000bda:	4413      	add	r3, r2
 8000bdc:	3301      	adds	r3, #1
 8000bde:	460a      	mov	r2, r1
 8000be0:	701a      	strb	r2, [r3, #0]
		buffer[ind].Header_H |= (RxData[2] & 0x01);
 8000be2:	4b5f      	ldr	r3, [pc, #380]	; (8000d60 <Get_Data+0x1d8>)
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	4a5f      	ldr	r2, [pc, #380]	; (8000d64 <Get_Data+0x1dc>)
 8000be8:	011b      	lsls	r3, r3, #4
 8000bea:	4413      	add	r3, r2
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	b25a      	sxtb	r2, r3
 8000bf0:	4b5d      	ldr	r3, [pc, #372]	; (8000d68 <Get_Data+0x1e0>)
 8000bf2:	789b      	ldrb	r3, [r3, #2]
 8000bf4:	b25b      	sxtb	r3, r3
 8000bf6:	f003 0301 	and.w	r3, r3, #1
 8000bfa:	b25b      	sxtb	r3, r3
 8000bfc:	4313      	orrs	r3, r2
 8000bfe:	b25a      	sxtb	r2, r3
 8000c00:	4b57      	ldr	r3, [pc, #348]	; (8000d60 <Get_Data+0x1d8>)
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	b2d1      	uxtb	r1, r2
 8000c06:	4a57      	ldr	r2, [pc, #348]	; (8000d64 <Get_Data+0x1dc>)
 8000c08:	011b      	lsls	r3, r3, #4
 8000c0a:	4413      	add	r3, r2
 8000c0c:	460a      	mov	r2, r1
 8000c0e:	701a      	strb	r2, [r3, #0]
		buffer[ind].GyrX_L = RxData[4];
 8000c10:	4b53      	ldr	r3, [pc, #332]	; (8000d60 <Get_Data+0x1d8>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	4618      	mov	r0, r3
 8000c16:	4b54      	ldr	r3, [pc, #336]	; (8000d68 <Get_Data+0x1e0>)
 8000c18:	7919      	ldrb	r1, [r3, #4]
 8000c1a:	4a52      	ldr	r2, [pc, #328]	; (8000d64 <Get_Data+0x1dc>)
 8000c1c:	0103      	lsls	r3, r0, #4
 8000c1e:	4413      	add	r3, r2
 8000c20:	330a      	adds	r3, #10
 8000c22:	460a      	mov	r2, r1
 8000c24:	701a      	strb	r2, [r3, #0]
		buffer[ind].GyrX_H = RxData[5];
 8000c26:	4b4e      	ldr	r3, [pc, #312]	; (8000d60 <Get_Data+0x1d8>)
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	4b4e      	ldr	r3, [pc, #312]	; (8000d68 <Get_Data+0x1e0>)
 8000c2e:	7959      	ldrb	r1, [r3, #5]
 8000c30:	4a4c      	ldr	r2, [pc, #304]	; (8000d64 <Get_Data+0x1dc>)
 8000c32:	0103      	lsls	r3, r0, #4
 8000c34:	4413      	add	r3, r2
 8000c36:	3309      	adds	r3, #9
 8000c38:	460a      	mov	r2, r1
 8000c3a:	701a      	strb	r2, [r3, #0]
		buffer[ind].GyrX_L = RxData[6];
 8000c3c:	4b48      	ldr	r3, [pc, #288]	; (8000d60 <Get_Data+0x1d8>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	4618      	mov	r0, r3
 8000c42:	4b49      	ldr	r3, [pc, #292]	; (8000d68 <Get_Data+0x1e0>)
 8000c44:	7999      	ldrb	r1, [r3, #6]
 8000c46:	4a47      	ldr	r2, [pc, #284]	; (8000d64 <Get_Data+0x1dc>)
 8000c48:	0103      	lsls	r3, r0, #4
 8000c4a:	4413      	add	r3, r2
 8000c4c:	330a      	adds	r3, #10
 8000c4e:	460a      	mov	r2, r1
 8000c50:	701a      	strb	r2, [r3, #0]
		buffer[ind].GyrY_H = RxData[7];
 8000c52:	4b43      	ldr	r3, [pc, #268]	; (8000d60 <Get_Data+0x1d8>)
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	4618      	mov	r0, r3
 8000c58:	4b43      	ldr	r3, [pc, #268]	; (8000d68 <Get_Data+0x1e0>)
 8000c5a:	79d9      	ldrb	r1, [r3, #7]
 8000c5c:	4a41      	ldr	r2, [pc, #260]	; (8000d64 <Get_Data+0x1dc>)
 8000c5e:	0103      	lsls	r3, r0, #4
 8000c60:	4413      	add	r3, r2
 8000c62:	330b      	adds	r3, #11
 8000c64:	460a      	mov	r2, r1
 8000c66:	701a      	strb	r2, [r3, #0]
		buffer[ind].AccZ_H = RxData[5];
		buffer[ind].Temp_L = RxData[6];
		buffer[ind].Temp_H = RxData[7];
		ind++;
	}
}
 8000c68:	e072      	b.n	8000d50 <Get_Data+0x1c8>
	else if((RxHeader.StdId>>8) == 0x01){
 8000c6a:	4b3c      	ldr	r3, [pc, #240]	; (8000d5c <Get_Data+0x1d4>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	0a1b      	lsrs	r3, r3, #8
 8000c70:	2b01      	cmp	r3, #1
 8000c72:	d16d      	bne.n	8000d50 <Get_Data+0x1c8>
		buffer[ind].Header_H = ((uint8_t)RxHeader.StdId & 0x1F)<<1;
 8000c74:	4b39      	ldr	r3, [pc, #228]	; (8000d5c <Get_Data+0x1d4>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	b2db      	uxtb	r3, r3
 8000c7a:	005b      	lsls	r3, r3, #1
 8000c7c:	b2db      	uxtb	r3, r3
 8000c7e:	4a38      	ldr	r2, [pc, #224]	; (8000d60 <Get_Data+0x1d8>)
 8000c80:	7812      	ldrb	r2, [r2, #0]
 8000c82:	4610      	mov	r0, r2
 8000c84:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8000c88:	b2d9      	uxtb	r1, r3
 8000c8a:	4a36      	ldr	r2, [pc, #216]	; (8000d64 <Get_Data+0x1dc>)
 8000c8c:	0103      	lsls	r3, r0, #4
 8000c8e:	4413      	add	r3, r2
 8000c90:	460a      	mov	r2, r1
 8000c92:	701a      	strb	r2, [r3, #0]
		buffer[ind].AccX_L = RxData[0];
 8000c94:	4b32      	ldr	r3, [pc, #200]	; (8000d60 <Get_Data+0x1d8>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	4618      	mov	r0, r3
 8000c9a:	4b33      	ldr	r3, [pc, #204]	; (8000d68 <Get_Data+0x1e0>)
 8000c9c:	7819      	ldrb	r1, [r3, #0]
 8000c9e:	4a31      	ldr	r2, [pc, #196]	; (8000d64 <Get_Data+0x1dc>)
 8000ca0:	0103      	lsls	r3, r0, #4
 8000ca2:	4413      	add	r3, r2
 8000ca4:	3304      	adds	r3, #4
 8000ca6:	460a      	mov	r2, r1
 8000ca8:	701a      	strb	r2, [r3, #0]
		buffer[ind].AccX_H = RxData[1];
 8000caa:	4b2d      	ldr	r3, [pc, #180]	; (8000d60 <Get_Data+0x1d8>)
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	4618      	mov	r0, r3
 8000cb0:	4b2d      	ldr	r3, [pc, #180]	; (8000d68 <Get_Data+0x1e0>)
 8000cb2:	7859      	ldrb	r1, [r3, #1]
 8000cb4:	4a2b      	ldr	r2, [pc, #172]	; (8000d64 <Get_Data+0x1dc>)
 8000cb6:	0103      	lsls	r3, r0, #4
 8000cb8:	4413      	add	r3, r2
 8000cba:	3303      	adds	r3, #3
 8000cbc:	460a      	mov	r2, r1
 8000cbe:	701a      	strb	r2, [r3, #0]
		buffer[ind].AccY_L = RxData[2];
 8000cc0:	4b27      	ldr	r3, [pc, #156]	; (8000d60 <Get_Data+0x1d8>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	4b28      	ldr	r3, [pc, #160]	; (8000d68 <Get_Data+0x1e0>)
 8000cc8:	7899      	ldrb	r1, [r3, #2]
 8000cca:	4a26      	ldr	r2, [pc, #152]	; (8000d64 <Get_Data+0x1dc>)
 8000ccc:	0103      	lsls	r3, r0, #4
 8000cce:	4413      	add	r3, r2
 8000cd0:	3306      	adds	r3, #6
 8000cd2:	460a      	mov	r2, r1
 8000cd4:	701a      	strb	r2, [r3, #0]
		buffer[ind].AccY_H = RxData[3];
 8000cd6:	4b22      	ldr	r3, [pc, #136]	; (8000d60 <Get_Data+0x1d8>)
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	4618      	mov	r0, r3
 8000cdc:	4b22      	ldr	r3, [pc, #136]	; (8000d68 <Get_Data+0x1e0>)
 8000cde:	78d9      	ldrb	r1, [r3, #3]
 8000ce0:	4a20      	ldr	r2, [pc, #128]	; (8000d64 <Get_Data+0x1dc>)
 8000ce2:	0103      	lsls	r3, r0, #4
 8000ce4:	4413      	add	r3, r2
 8000ce6:	3305      	adds	r3, #5
 8000ce8:	460a      	mov	r2, r1
 8000cea:	701a      	strb	r2, [r3, #0]
		buffer[ind].AccZ_L = RxData[4];
 8000cec:	4b1c      	ldr	r3, [pc, #112]	; (8000d60 <Get_Data+0x1d8>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	4b1d      	ldr	r3, [pc, #116]	; (8000d68 <Get_Data+0x1e0>)
 8000cf4:	7919      	ldrb	r1, [r3, #4]
 8000cf6:	4a1b      	ldr	r2, [pc, #108]	; (8000d64 <Get_Data+0x1dc>)
 8000cf8:	0103      	lsls	r3, r0, #4
 8000cfa:	4413      	add	r3, r2
 8000cfc:	3308      	adds	r3, #8
 8000cfe:	460a      	mov	r2, r1
 8000d00:	701a      	strb	r2, [r3, #0]
		buffer[ind].AccZ_H = RxData[5];
 8000d02:	4b17      	ldr	r3, [pc, #92]	; (8000d60 <Get_Data+0x1d8>)
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	4618      	mov	r0, r3
 8000d08:	4b17      	ldr	r3, [pc, #92]	; (8000d68 <Get_Data+0x1e0>)
 8000d0a:	7959      	ldrb	r1, [r3, #5]
 8000d0c:	4a15      	ldr	r2, [pc, #84]	; (8000d64 <Get_Data+0x1dc>)
 8000d0e:	0103      	lsls	r3, r0, #4
 8000d10:	4413      	add	r3, r2
 8000d12:	3307      	adds	r3, #7
 8000d14:	460a      	mov	r2, r1
 8000d16:	701a      	strb	r2, [r3, #0]
		buffer[ind].Temp_L = RxData[6];
 8000d18:	4b11      	ldr	r3, [pc, #68]	; (8000d60 <Get_Data+0x1d8>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	4b12      	ldr	r3, [pc, #72]	; (8000d68 <Get_Data+0x1e0>)
 8000d20:	7999      	ldrb	r1, [r3, #6]
 8000d22:	4a10      	ldr	r2, [pc, #64]	; (8000d64 <Get_Data+0x1dc>)
 8000d24:	0103      	lsls	r3, r0, #4
 8000d26:	4413      	add	r3, r2
 8000d28:	330e      	adds	r3, #14
 8000d2a:	460a      	mov	r2, r1
 8000d2c:	701a      	strb	r2, [r3, #0]
		buffer[ind].Temp_H = RxData[7];
 8000d2e:	4b0c      	ldr	r3, [pc, #48]	; (8000d60 <Get_Data+0x1d8>)
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	4618      	mov	r0, r3
 8000d34:	4b0c      	ldr	r3, [pc, #48]	; (8000d68 <Get_Data+0x1e0>)
 8000d36:	79d9      	ldrb	r1, [r3, #7]
 8000d38:	4a0a      	ldr	r2, [pc, #40]	; (8000d64 <Get_Data+0x1dc>)
 8000d3a:	0103      	lsls	r3, r0, #4
 8000d3c:	4413      	add	r3, r2
 8000d3e:	330d      	adds	r3, #13
 8000d40:	460a      	mov	r2, r1
 8000d42:	701a      	strb	r2, [r3, #0]
		ind++;
 8000d44:	4b06      	ldr	r3, [pc, #24]	; (8000d60 <Get_Data+0x1d8>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	3301      	adds	r3, #1
 8000d4a:	b2da      	uxtb	r2, r3
 8000d4c:	4b04      	ldr	r3, [pc, #16]	; (8000d60 <Get_Data+0x1d8>)
 8000d4e:	701a      	strb	r2, [r3, #0]
}
 8000d50:	bf00      	nop
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	20006ae0 	.word	0x20006ae0
 8000d60:	20000290 	.word	0x20000290
 8000d64:	2000554c 	.word	0x2000554c
 8000d68:	20006834 	.word	0x20006834

08000d6c <CAN_Config>:

void CAN_Config(void){
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
	TxHeader.StdId = 0x00;
 8000d70:	4b16      	ldr	r3, [pc, #88]	; (8000dcc <CAN_Config+0x60>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	601a      	str	r2, [r3, #0]
	TxHeader.ExtId = 0x00;
 8000d76:	4b15      	ldr	r3, [pc, #84]	; (8000dcc <CAN_Config+0x60>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	605a      	str	r2, [r3, #4]
	TxHeader.RTR = CAN_RTR_DATA;
 8000d7c:	4b13      	ldr	r3, [pc, #76]	; (8000dcc <CAN_Config+0x60>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	60da      	str	r2, [r3, #12]
	TxHeader.IDE = CAN_ID_EXT;
 8000d82:	4b12      	ldr	r3, [pc, #72]	; (8000dcc <CAN_Config+0x60>)
 8000d84:	2204      	movs	r2, #4
 8000d86:	609a      	str	r2, [r3, #8]
	TxHeader.DLC = 8;
 8000d88:	4b10      	ldr	r3, [pc, #64]	; (8000dcc <CAN_Config+0x60>)
 8000d8a:	2208      	movs	r2, #8
 8000d8c:	611a      	str	r2, [r3, #16]
	TxHeader.TransmitGlobalTime = DISABLE;
 8000d8e:	4b0f      	ldr	r3, [pc, #60]	; (8000dcc <CAN_Config+0x60>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	751a      	strb	r2, [r3, #20]
	sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000d94:	4b0e      	ldr	r3, [pc, #56]	; (8000dd0 <CAN_Config+0x64>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterIdHigh = 0x0;
 8000d9a:	4b0d      	ldr	r3, [pc, #52]	; (8000dd0 <CAN_Config+0x64>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIdLow = 0;
 8000da0:	4b0b      	ldr	r3, [pc, #44]	; (8000dd0 <CAN_Config+0x64>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterMaskIdHigh = 0x0;
 8000da6:	4b0a      	ldr	r3, [pc, #40]	; (8000dd0 <CAN_Config+0x64>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow = 0;
 8000dac:	4b08      	ldr	r3, [pc, #32]	; (8000dd0 <CAN_Config+0x64>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000db2:	4b07      	ldr	r3, [pc, #28]	; (8000dd0 <CAN_Config+0x64>)
 8000db4:	2201      	movs	r2, #1
 8000db6:	61da      	str	r2, [r3, #28]
	sFilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 8000db8:	4b05      	ldr	r3, [pc, #20]	; (8000dd0 <CAN_Config+0x64>)
 8000dba:	2201      	movs	r2, #1
 8000dbc:	621a      	str	r2, [r3, #32]
	HAL_CAN_ConfigFilter(&hcan1,&sFilterConfig);
 8000dbe:	4904      	ldr	r1, [pc, #16]	; (8000dd0 <CAN_Config+0x64>)
 8000dc0:	4804      	ldr	r0, [pc, #16]	; (8000dd4 <CAN_Config+0x68>)
 8000dc2:	f000 fce9 	bl	8001798 <HAL_CAN_ConfigFilter>
}
 8000dc6:	bf00      	nop
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	20006868 	.word	0x20006868
 8000dd0:	20004018 	.word	0x20004018
 8000dd4:	2000683c 	.word	0x2000683c

08000dd8 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	// Mount filesystem only one time
	if(flag == 0){
 8000de0:	4b37      	ldr	r3, [pc, #220]	; (8000ec0 <StartDefaultTask+0xe8>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d128      	bne.n	8000e3a <StartDefaultTask+0x62>
		res = f_mount(&SDFatFs, SDPath, 1);
 8000de8:	2201      	movs	r2, #1
 8000dea:	4936      	ldr	r1, [pc, #216]	; (8000ec4 <StartDefaultTask+0xec>)
 8000dec:	4836      	ldr	r0, [pc, #216]	; (8000ec8 <StartDefaultTask+0xf0>)
 8000dee:	f00a fb8d 	bl	800b50c <f_mount>
 8000df2:	4603      	mov	r3, r0
 8000df4:	461a      	mov	r2, r3
 8000df6:	4b35      	ldr	r3, [pc, #212]	; (8000ecc <StartDefaultTask+0xf4>)
 8000df8:	701a      	strb	r2, [r3, #0]
		res = f_open(&SDFile, &path[0], FA_CREATE_ALWAYS);
 8000dfa:	2208      	movs	r2, #8
 8000dfc:	4934      	ldr	r1, [pc, #208]	; (8000ed0 <StartDefaultTask+0xf8>)
 8000dfe:	4835      	ldr	r0, [pc, #212]	; (8000ed4 <StartDefaultTask+0xfc>)
 8000e00:	f00a fbe8 	bl	800b5d4 <f_open>
 8000e04:	4603      	mov	r3, r0
 8000e06:	461a      	mov	r2, r3
 8000e08:	4b30      	ldr	r3, [pc, #192]	; (8000ecc <StartDefaultTask+0xf4>)
 8000e0a:	701a      	strb	r2, [r3, #0]
		res = f_close(&SDFile);
 8000e0c:	4831      	ldr	r0, [pc, #196]	; (8000ed4 <StartDefaultTask+0xfc>)
 8000e0e:	f00b f9d6 	bl	800c1be <f_close>
 8000e12:	4603      	mov	r3, r0
 8000e14:	461a      	mov	r2, r3
 8000e16:	4b2d      	ldr	r3, [pc, #180]	; (8000ecc <StartDefaultTask+0xf4>)
 8000e18:	701a      	strb	r2, [r3, #0]
		res = f_open(&SDFile, &path[0], FA_OPEN_APPEND | FA_WRITE);
 8000e1a:	2232      	movs	r2, #50	; 0x32
 8000e1c:	492c      	ldr	r1, [pc, #176]	; (8000ed0 <StartDefaultTask+0xf8>)
 8000e1e:	482d      	ldr	r0, [pc, #180]	; (8000ed4 <StartDefaultTask+0xfc>)
 8000e20:	f00a fbd8 	bl	800b5d4 <f_open>
 8000e24:	4603      	mov	r3, r0
 8000e26:	461a      	mov	r2, r3
 8000e28:	4b28      	ldr	r3, [pc, #160]	; (8000ecc <StartDefaultTask+0xf4>)
 8000e2a:	701a      	strb	r2, [r3, #0]
		flag = 1;
 8000e2c:	4b24      	ldr	r3, [pc, #144]	; (8000ec0 <StartDefaultTask+0xe8>)
 8000e2e:	2201      	movs	r2, #1
 8000e30:	701a      	strb	r2, [r3, #0]
		// Start 5mS timer to trigger the data request
		HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000e32:	2102      	movs	r1, #2
 8000e34:	4828      	ldr	r0, [pc, #160]	; (8000ed8 <StartDefaultTask+0x100>)
 8000e36:	f000 ffcc 	bl	8001dd2 <HAL_CAN_ActivateNotification>
		//HAL_TIM_Base_Start_IT(&htim14);
	}
  /* Infinite loop */
  for(;;)
  {
	if(HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin) == GPIO_PIN_SET){
 8000e3a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e3e:	4827      	ldr	r0, [pc, #156]	; (8000edc <StartDefaultTask+0x104>)
 8000e40:	f002 f86e 	bl	8002f20 <HAL_GPIO_ReadPin>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b01      	cmp	r3, #1
 8000e48:	d110      	bne.n	8000e6c <StartDefaultTask+0x94>
		HAL_CAN_DeactivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000e4a:	2102      	movs	r1, #2
 8000e4c:	4822      	ldr	r0, [pc, #136]	; (8000ed8 <StartDefaultTask+0x100>)
 8000e4e:	f000 ffe6 	bl	8001e1e <HAL_CAN_DeactivateNotification>
		//HAL_TIM_Base_Stop_IT(&htim14);
		res = f_close(&SDFile);
 8000e52:	4820      	ldr	r0, [pc, #128]	; (8000ed4 <StartDefaultTask+0xfc>)
 8000e54:	f00b f9b3 	bl	800c1be <f_close>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	461a      	mov	r2, r3
 8000e5c:	4b1b      	ldr	r3, [pc, #108]	; (8000ecc <StartDefaultTask+0xf4>)
 8000e5e:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_SET);
 8000e60:	2201      	movs	r2, #1
 8000e62:	2180      	movs	r1, #128	; 0x80
 8000e64:	481e      	ldr	r0, [pc, #120]	; (8000ee0 <StartDefaultTask+0x108>)
 8000e66:	f002 f873 	bl	8002f50 <HAL_GPIO_WritePin>
 8000e6a:	e7e6      	b.n	8000e3a <StartDefaultTask+0x62>
	}
	else{
		// Test if the data is ready to be written
		if(wf != 0){
 8000e6c:	4b1d      	ldr	r3, [pc, #116]	; (8000ee4 <StartDefaultTask+0x10c>)
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d0e2      	beq.n	8000e3a <StartDefaultTask+0x62>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8000e74:	2201      	movs	r2, #1
 8000e76:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e7a:	4819      	ldr	r0, [pc, #100]	; (8000ee0 <StartDefaultTask+0x108>)
 8000e7c:	f002 f868 	bl	8002f50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
 8000e80:	2201      	movs	r2, #1
 8000e82:	2101      	movs	r1, #1
 8000e84:	4816      	ldr	r0, [pc, #88]	; (8000ee0 <StartDefaultTask+0x108>)
 8000e86:	f002 f863 	bl	8002f50 <HAL_GPIO_WritePin>
			// Write the buffer to the memory
			res = f_write(&SDFile, SD_buffer, sizeof(SD_buffer), &writeBuff);
 8000e8a:	4b17      	ldr	r3, [pc, #92]	; (8000ee8 <StartDefaultTask+0x110>)
 8000e8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e90:	4916      	ldr	r1, [pc, #88]	; (8000eec <StartDefaultTask+0x114>)
 8000e92:	4810      	ldr	r0, [pc, #64]	; (8000ed4 <StartDefaultTask+0xfc>)
 8000e94:	f00a fe77 	bl	800bb86 <f_write>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	461a      	mov	r2, r3
 8000e9c:	4b0b      	ldr	r3, [pc, #44]	; (8000ecc <StartDefaultTask+0xf4>)
 8000e9e:	701a      	strb	r2, [r3, #0]
			wf = 0;
 8000ea0:	4b10      	ldr	r3, [pc, #64]	; (8000ee4 <StartDefaultTask+0x10c>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000eac:	480c      	ldr	r0, [pc, #48]	; (8000ee0 <StartDefaultTask+0x108>)
 8000eae:	f002 f84f 	bl	8002f50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET);
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	2101      	movs	r1, #1
 8000eb6:	480a      	ldr	r0, [pc, #40]	; (8000ee0 <StartDefaultTask+0x108>)
 8000eb8:	f002 f84a 	bl	8002f50 <HAL_GPIO_WritePin>
	if(HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin) == GPIO_PIN_SET){
 8000ebc:	e7bd      	b.n	8000e3a <StartDefaultTask+0x62>
 8000ebe:	bf00      	nop
 8000ec0:	20000291 	.word	0x20000291
 8000ec4:	20006b4c 	.word	0x20006b4c
 8000ec8:	2000574c 	.word	0x2000574c
 8000ecc:	20006864 	.word	0x20006864
 8000ed0:	20000000 	.word	0x20000000
 8000ed4:	20006b50 	.word	0x20006b50
 8000ed8:	2000683c 	.word	0x2000683c
 8000edc:	40020800 	.word	0x40020800
 8000ee0:	40020400 	.word	0x40020400
 8000ee4:	20000292 	.word	0x20000292
 8000ee8:	20006afc 	.word	0x20006afc
 8000eec:	200068e0 	.word	0x200068e0

08000ef0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a0e      	ldr	r2, [pc, #56]	; (8000f38 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d101      	bne.n	8000f06 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000f02:	f000 fb0b 	bl	800151c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM14) {
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4a0c      	ldr	r2, [pc, #48]	; (8000f3c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000f0c:	4293      	cmp	r3, r2
 8000f0e:	d10f      	bne.n	8000f30 <HAL_TIM_PeriodElapsedCallback+0x40>
	  // Send a Data request
	  TxData[0] = 0x01;
 8000f10:	4b0b      	ldr	r3, [pc, #44]	; (8000f40 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000f12:	2201      	movs	r2, #1
 8000f14:	701a      	strb	r2, [r3, #0]
	  if(HAL_CAN_AddTxMessage(&hcan1,&TxHeader,TxData,&TxMailbox) == HAL_OK){
 8000f16:	4b0b      	ldr	r3, [pc, #44]	; (8000f44 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000f18:	4a09      	ldr	r2, [pc, #36]	; (8000f40 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000f1a:	490b      	ldr	r1, [pc, #44]	; (8000f48 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000f1c:	480b      	ldr	r0, [pc, #44]	; (8000f4c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000f1e:	f000 fd6b 	bl	80019f8 <HAL_CAN_AddTxMessage>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d103      	bne.n	8000f30 <HAL_TIM_PeriodElapsedCallback+0x40>
		  // Listen can bus interrupt
		  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000f28:	2102      	movs	r1, #2
 8000f2a:	4808      	ldr	r0, [pc, #32]	; (8000f4c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000f2c:	f000 ff51 	bl	8001dd2 <HAL_CAN_ActivateNotification>
	  }
  }
  /* USER CODE END Callback 1 */
}
 8000f30:	bf00      	nop
 8000f32:	3708      	adds	r7, #8
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	40001000 	.word	0x40001000
 8000f3c:	40002000 	.word	0x40002000
 8000f40:	2000678c 	.word	0x2000678c
 8000f44:	20006794 	.word	0x20006794
 8000f48:	20006868 	.word	0x20006868
 8000f4c:	2000683c 	.word	0x2000683c

08000f50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	while(1){
		HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
 8000f54:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f58:	4803      	ldr	r0, [pc, #12]	; (8000f68 <Error_Handler+0x18>)
 8000f5a:	f002 f812 	bl	8002f82 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8000f5e:	2064      	movs	r0, #100	; 0x64
 8000f60:	f000 fafc 	bl	800155c <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
 8000f64:	e7f6      	b.n	8000f54 <Error_Handler+0x4>
 8000f66:	bf00      	nop
 8000f68:	40020400 	.word	0x40020400

08000f6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000f72:	4b11      	ldr	r3, [pc, #68]	; (8000fb8 <HAL_MspInit+0x4c>)
 8000f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f76:	4a10      	ldr	r2, [pc, #64]	; (8000fb8 <HAL_MspInit+0x4c>)
 8000f78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f7e:	4b0e      	ldr	r3, [pc, #56]	; (8000fb8 <HAL_MspInit+0x4c>)
 8000f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f86:	607b      	str	r3, [r7, #4]
 8000f88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f8a:	4b0b      	ldr	r3, [pc, #44]	; (8000fb8 <HAL_MspInit+0x4c>)
 8000f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f8e:	4a0a      	ldr	r2, [pc, #40]	; (8000fb8 <HAL_MspInit+0x4c>)
 8000f90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f94:	6453      	str	r3, [r2, #68]	; 0x44
 8000f96:	4b08      	ldr	r3, [pc, #32]	; (8000fb8 <HAL_MspInit+0x4c>)
 8000f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f9e:	603b      	str	r3, [r7, #0]
 8000fa0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	210f      	movs	r1, #15
 8000fa6:	f06f 0001 	mvn.w	r0, #1
 8000faa:	f001 fa41 	bl	8002430 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fae:	bf00      	nop
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	40023800 	.word	0x40023800

08000fbc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b08a      	sub	sp, #40	; 0x28
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc4:	f107 0314 	add.w	r3, r7, #20
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	605a      	str	r2, [r3, #4]
 8000fce:	609a      	str	r2, [r3, #8]
 8000fd0:	60da      	str	r2, [r3, #12]
 8000fd2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a17      	ldr	r2, [pc, #92]	; (8001038 <HAL_CAN_MspInit+0x7c>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d127      	bne.n	800102e <HAL_CAN_MspInit+0x72>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000fde:	4b17      	ldr	r3, [pc, #92]	; (800103c <HAL_CAN_MspInit+0x80>)
 8000fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe2:	4a16      	ldr	r2, [pc, #88]	; (800103c <HAL_CAN_MspInit+0x80>)
 8000fe4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000fe8:	6413      	str	r3, [r2, #64]	; 0x40
 8000fea:	4b14      	ldr	r3, [pc, #80]	; (800103c <HAL_CAN_MspInit+0x80>)
 8000fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ff2:	613b      	str	r3, [r7, #16]
 8000ff4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ff6:	4b11      	ldr	r3, [pc, #68]	; (800103c <HAL_CAN_MspInit+0x80>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffa:	4a10      	ldr	r2, [pc, #64]	; (800103c <HAL_CAN_MspInit+0x80>)
 8000ffc:	f043 0308 	orr.w	r3, r3, #8
 8001000:	6313      	str	r3, [r2, #48]	; 0x30
 8001002:	4b0e      	ldr	r3, [pc, #56]	; (800103c <HAL_CAN_MspInit+0x80>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001006:	f003 0308 	and.w	r3, r3, #8
 800100a:	60fb      	str	r3, [r7, #12]
 800100c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800100e:	2303      	movs	r3, #3
 8001010:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001012:	2302      	movs	r3, #2
 8001014:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001016:	2300      	movs	r3, #0
 8001018:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800101a:	2303      	movs	r3, #3
 800101c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800101e:	2309      	movs	r3, #9
 8001020:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001022:	f107 0314 	add.w	r3, r7, #20
 8001026:	4619      	mov	r1, r3
 8001028:	4805      	ldr	r0, [pc, #20]	; (8001040 <HAL_CAN_MspInit+0x84>)
 800102a:	f001 fdcf 	bl	8002bcc <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800102e:	bf00      	nop
 8001030:	3728      	adds	r7, #40	; 0x28
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	40006400 	.word	0x40006400
 800103c:	40023800 	.word	0x40023800
 8001040:	40020c00 	.word	0x40020c00

08001044 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b08a      	sub	sp, #40	; 0x28
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800104c:	f107 0314 	add.w	r3, r7, #20
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	605a      	str	r2, [r3, #4]
 8001056:	609a      	str	r2, [r3, #8]
 8001058:	60da      	str	r2, [r3, #12]
 800105a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a65      	ldr	r2, [pc, #404]	; (80011f8 <HAL_SD_MspInit+0x1b4>)
 8001062:	4293      	cmp	r3, r2
 8001064:	f040 80c3 	bne.w	80011ee <HAL_SD_MspInit+0x1aa>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001068:	4b64      	ldr	r3, [pc, #400]	; (80011fc <HAL_SD_MspInit+0x1b8>)
 800106a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800106c:	4a63      	ldr	r2, [pc, #396]	; (80011fc <HAL_SD_MspInit+0x1b8>)
 800106e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001072:	6453      	str	r3, [r2, #68]	; 0x44
 8001074:	4b61      	ldr	r3, [pc, #388]	; (80011fc <HAL_SD_MspInit+0x1b8>)
 8001076:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001078:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800107c:	613b      	str	r3, [r7, #16]
 800107e:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001080:	4b5e      	ldr	r3, [pc, #376]	; (80011fc <HAL_SD_MspInit+0x1b8>)
 8001082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001084:	4a5d      	ldr	r2, [pc, #372]	; (80011fc <HAL_SD_MspInit+0x1b8>)
 8001086:	f043 0304 	orr.w	r3, r3, #4
 800108a:	6313      	str	r3, [r2, #48]	; 0x30
 800108c:	4b5b      	ldr	r3, [pc, #364]	; (80011fc <HAL_SD_MspInit+0x1b8>)
 800108e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001090:	f003 0304 	and.w	r3, r3, #4
 8001094:	60fb      	str	r3, [r7, #12]
 8001096:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001098:	4b58      	ldr	r3, [pc, #352]	; (80011fc <HAL_SD_MspInit+0x1b8>)
 800109a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109c:	4a57      	ldr	r2, [pc, #348]	; (80011fc <HAL_SD_MspInit+0x1b8>)
 800109e:	f043 0308 	orr.w	r3, r3, #8
 80010a2:	6313      	str	r3, [r2, #48]	; 0x30
 80010a4:	4b55      	ldr	r3, [pc, #340]	; (80011fc <HAL_SD_MspInit+0x1b8>)
 80010a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a8:	f003 0308 	and.w	r3, r3, #8
 80010ac:	60bb      	str	r3, [r7, #8]
 80010ae:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 80010b0:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80010b4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b6:	2302      	movs	r3, #2
 80010b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ba:	2300      	movs	r3, #0
 80010bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010be:	2303      	movs	r3, #3
 80010c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80010c2:	230c      	movs	r3, #12
 80010c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010c6:	f107 0314 	add.w	r3, r7, #20
 80010ca:	4619      	mov	r1, r3
 80010cc:	484c      	ldr	r0, [pc, #304]	; (8001200 <HAL_SD_MspInit+0x1bc>)
 80010ce:	f001 fd7d 	bl	8002bcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80010d2:	2304      	movs	r3, #4
 80010d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d6:	2302      	movs	r3, #2
 80010d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010da:	2300      	movs	r3, #0
 80010dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010de:	2303      	movs	r3, #3
 80010e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80010e2:	230c      	movs	r3, #12
 80010e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010e6:	f107 0314 	add.w	r3, r7, #20
 80010ea:	4619      	mov	r1, r3
 80010ec:	4845      	ldr	r0, [pc, #276]	; (8001204 <HAL_SD_MspInit+0x1c0>)
 80010ee:	f001 fd6d 	bl	8002bcc <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream3;
 80010f2:	4b45      	ldr	r3, [pc, #276]	; (8001208 <HAL_SD_MspInit+0x1c4>)
 80010f4:	4a45      	ldr	r2, [pc, #276]	; (800120c <HAL_SD_MspInit+0x1c8>)
 80010f6:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 80010f8:	4b43      	ldr	r3, [pc, #268]	; (8001208 <HAL_SD_MspInit+0x1c4>)
 80010fa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80010fe:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001100:	4b41      	ldr	r3, [pc, #260]	; (8001208 <HAL_SD_MspInit+0x1c4>)
 8001102:	2240      	movs	r2, #64	; 0x40
 8001104:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001106:	4b40      	ldr	r3, [pc, #256]	; (8001208 <HAL_SD_MspInit+0x1c4>)
 8001108:	2200      	movs	r2, #0
 800110a:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800110c:	4b3e      	ldr	r3, [pc, #248]	; (8001208 <HAL_SD_MspInit+0x1c4>)
 800110e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001112:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001114:	4b3c      	ldr	r3, [pc, #240]	; (8001208 <HAL_SD_MspInit+0x1c4>)
 8001116:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800111a:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800111c:	4b3a      	ldr	r3, [pc, #232]	; (8001208 <HAL_SD_MspInit+0x1c4>)
 800111e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001122:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 8001124:	4b38      	ldr	r3, [pc, #224]	; (8001208 <HAL_SD_MspInit+0x1c4>)
 8001126:	2220      	movs	r2, #32
 8001128:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800112a:	4b37      	ldr	r3, [pc, #220]	; (8001208 <HAL_SD_MspInit+0x1c4>)
 800112c:	2200      	movs	r2, #0
 800112e:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001130:	4b35      	ldr	r3, [pc, #212]	; (8001208 <HAL_SD_MspInit+0x1c4>)
 8001132:	2204      	movs	r2, #4
 8001134:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001136:	4b34      	ldr	r3, [pc, #208]	; (8001208 <HAL_SD_MspInit+0x1c4>)
 8001138:	2203      	movs	r2, #3
 800113a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 800113c:	4b32      	ldr	r3, [pc, #200]	; (8001208 <HAL_SD_MspInit+0x1c4>)
 800113e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001142:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001144:	4b30      	ldr	r3, [pc, #192]	; (8001208 <HAL_SD_MspInit+0x1c4>)
 8001146:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800114a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 800114c:	482e      	ldr	r0, [pc, #184]	; (8001208 <HAL_SD_MspInit+0x1c4>)
 800114e:	f001 f999 	bl	8002484 <HAL_DMA_Init>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <HAL_SD_MspInit+0x118>
    {
      Error_Handler();
 8001158:	f7ff fefa 	bl	8000f50 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1_tx);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	4a2a      	ldr	r2, [pc, #168]	; (8001208 <HAL_SD_MspInit+0x1c4>)
 8001160:	63da      	str	r2, [r3, #60]	; 0x3c
 8001162:	4a29      	ldr	r2, [pc, #164]	; (8001208 <HAL_SD_MspInit+0x1c4>)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream6;
 8001168:	4b29      	ldr	r3, [pc, #164]	; (8001210 <HAL_SD_MspInit+0x1cc>)
 800116a:	4a2a      	ldr	r2, [pc, #168]	; (8001214 <HAL_SD_MspInit+0x1d0>)
 800116c:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 800116e:	4b28      	ldr	r3, [pc, #160]	; (8001210 <HAL_SD_MspInit+0x1cc>)
 8001170:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001174:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001176:	4b26      	ldr	r3, [pc, #152]	; (8001210 <HAL_SD_MspInit+0x1cc>)
 8001178:	2200      	movs	r2, #0
 800117a:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800117c:	4b24      	ldr	r3, [pc, #144]	; (8001210 <HAL_SD_MspInit+0x1cc>)
 800117e:	2200      	movs	r2, #0
 8001180:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001182:	4b23      	ldr	r3, [pc, #140]	; (8001210 <HAL_SD_MspInit+0x1cc>)
 8001184:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001188:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800118a:	4b21      	ldr	r3, [pc, #132]	; (8001210 <HAL_SD_MspInit+0x1cc>)
 800118c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001190:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001192:	4b1f      	ldr	r3, [pc, #124]	; (8001210 <HAL_SD_MspInit+0x1cc>)
 8001194:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001198:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 800119a:	4b1d      	ldr	r3, [pc, #116]	; (8001210 <HAL_SD_MspInit+0x1cc>)
 800119c:	2220      	movs	r2, #32
 800119e:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80011a0:	4b1b      	ldr	r3, [pc, #108]	; (8001210 <HAL_SD_MspInit+0x1cc>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80011a6:	4b1a      	ldr	r3, [pc, #104]	; (8001210 <HAL_SD_MspInit+0x1cc>)
 80011a8:	2204      	movs	r2, #4
 80011aa:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80011ac:	4b18      	ldr	r3, [pc, #96]	; (8001210 <HAL_SD_MspInit+0x1cc>)
 80011ae:	2203      	movs	r2, #3
 80011b0:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 80011b2:	4b17      	ldr	r3, [pc, #92]	; (8001210 <HAL_SD_MspInit+0x1cc>)
 80011b4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80011b8:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80011ba:	4b15      	ldr	r3, [pc, #84]	; (8001210 <HAL_SD_MspInit+0x1cc>)
 80011bc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80011c0:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 80011c2:	4813      	ldr	r0, [pc, #76]	; (8001210 <HAL_SD_MspInit+0x1cc>)
 80011c4:	f001 f95e 	bl	8002484 <HAL_DMA_Init>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <HAL_SD_MspInit+0x18e>
    {
      Error_Handler();
 80011ce:	f7ff febf 	bl	8000f50 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1_rx);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4a0e      	ldr	r2, [pc, #56]	; (8001210 <HAL_SD_MspInit+0x1cc>)
 80011d6:	641a      	str	r2, [r3, #64]	; 0x40
 80011d8:	4a0d      	ldr	r2, [pc, #52]	; (8001210 <HAL_SD_MspInit+0x1cc>)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 8, 0);
 80011de:	2200      	movs	r2, #0
 80011e0:	2108      	movs	r1, #8
 80011e2:	2031      	movs	r0, #49	; 0x31
 80011e4:	f001 f924 	bl	8002430 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80011e8:	2031      	movs	r0, #49	; 0x31
 80011ea:	f001 f93d 	bl	8002468 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80011ee:	bf00      	nop
 80011f0:	3728      	adds	r7, #40	; 0x28
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	40012c00 	.word	0x40012c00
 80011fc:	40023800 	.word	0x40023800
 8001200:	40020800 	.word	0x40020800
 8001204:	40020c00 	.word	0x40020c00
 8001208:	20006880 	.word	0x20006880
 800120c:	40026458 	.word	0x40026458
 8001210:	200067b4 	.word	0x200067b4
 8001214:	400264a0 	.word	0x400264a0

08001218 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b08a      	sub	sp, #40	; 0x28
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001220:	f107 0314 	add.w	r3, r7, #20
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	605a      	str	r2, [r3, #4]
 800122a:	609a      	str	r2, [r3, #8]
 800122c:	60da      	str	r2, [r3, #12]
 800122e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a17      	ldr	r2, [pc, #92]	; (8001294 <HAL_UART_MspInit+0x7c>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d128      	bne.n	800128c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800123a:	4b17      	ldr	r3, [pc, #92]	; (8001298 <HAL_UART_MspInit+0x80>)
 800123c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123e:	4a16      	ldr	r2, [pc, #88]	; (8001298 <HAL_UART_MspInit+0x80>)
 8001240:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001244:	6413      	str	r3, [r2, #64]	; 0x40
 8001246:	4b14      	ldr	r3, [pc, #80]	; (8001298 <HAL_UART_MspInit+0x80>)
 8001248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800124e:	613b      	str	r3, [r7, #16]
 8001250:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001252:	4b11      	ldr	r3, [pc, #68]	; (8001298 <HAL_UART_MspInit+0x80>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	4a10      	ldr	r2, [pc, #64]	; (8001298 <HAL_UART_MspInit+0x80>)
 8001258:	f043 0308 	orr.w	r3, r3, #8
 800125c:	6313      	str	r3, [r2, #48]	; 0x30
 800125e:	4b0e      	ldr	r3, [pc, #56]	; (8001298 <HAL_UART_MspInit+0x80>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	f003 0308 	and.w	r3, r3, #8
 8001266:	60fb      	str	r3, [r7, #12]
 8001268:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800126a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800126e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001270:	2302      	movs	r3, #2
 8001272:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001274:	2300      	movs	r3, #0
 8001276:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001278:	2303      	movs	r3, #3
 800127a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800127c:	2307      	movs	r3, #7
 800127e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001280:	f107 0314 	add.w	r3, r7, #20
 8001284:	4619      	mov	r1, r3
 8001286:	4805      	ldr	r0, [pc, #20]	; (800129c <HAL_UART_MspInit+0x84>)
 8001288:	f001 fca0 	bl	8002bcc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800128c:	bf00      	nop
 800128e:	3728      	adds	r7, #40	; 0x28
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	40004800 	.word	0x40004800
 8001298:	40023800 	.word	0x40023800
 800129c:	40020c00 	.word	0x40020c00

080012a0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b08a      	sub	sp, #40	; 0x28
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a8:	f107 0314 	add.w	r3, r7, #20
 80012ac:	2200      	movs	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]
 80012b0:	605a      	str	r2, [r3, #4]
 80012b2:	609a      	str	r2, [r3, #8]
 80012b4:	60da      	str	r2, [r3, #12]
 80012b6:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80012c0:	d134      	bne.n	800132c <HAL_PCD_MspInit+0x8c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c2:	4b1c      	ldr	r3, [pc, #112]	; (8001334 <HAL_PCD_MspInit+0x94>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	4a1b      	ldr	r2, [pc, #108]	; (8001334 <HAL_PCD_MspInit+0x94>)
 80012c8:	f043 0301 	orr.w	r3, r3, #1
 80012cc:	6313      	str	r3, [r2, #48]	; 0x30
 80012ce:	4b19      	ldr	r3, [pc, #100]	; (8001334 <HAL_PCD_MspInit+0x94>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	f003 0301 	and.w	r3, r3, #1
 80012d6:	613b      	str	r3, [r7, #16]
 80012d8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_DM_Pin|USB_DP_Pin;
 80012da:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80012de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e0:	2302      	movs	r3, #2
 80012e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e4:	2300      	movs	r3, #0
 80012e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e8:	2303      	movs	r3, #3
 80012ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80012ec:	230a      	movs	r3, #10
 80012ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f0:	f107 0314 	add.w	r3, r7, #20
 80012f4:	4619      	mov	r1, r3
 80012f6:	4810      	ldr	r0, [pc, #64]	; (8001338 <HAL_PCD_MspInit+0x98>)
 80012f8:	f001 fc68 	bl	8002bcc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80012fc:	4b0d      	ldr	r3, [pc, #52]	; (8001334 <HAL_PCD_MspInit+0x94>)
 80012fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001300:	4a0c      	ldr	r2, [pc, #48]	; (8001334 <HAL_PCD_MspInit+0x94>)
 8001302:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001306:	6353      	str	r3, [r2, #52]	; 0x34
 8001308:	4b0a      	ldr	r3, [pc, #40]	; (8001334 <HAL_PCD_MspInit+0x94>)
 800130a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800130c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001310:	60fb      	str	r3, [r7, #12]
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	4b07      	ldr	r3, [pc, #28]	; (8001334 <HAL_PCD_MspInit+0x94>)
 8001316:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001318:	4a06      	ldr	r2, [pc, #24]	; (8001334 <HAL_PCD_MspInit+0x94>)
 800131a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800131e:	6453      	str	r3, [r2, #68]	; 0x44
 8001320:	4b04      	ldr	r3, [pc, #16]	; (8001334 <HAL_PCD_MspInit+0x94>)
 8001322:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001324:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001328:	60bb      	str	r3, [r7, #8]
 800132a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800132c:	bf00      	nop
 800132e:	3728      	adds	r7, #40	; 0x28
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	40023800 	.word	0x40023800
 8001338:	40020000 	.word	0x40020000

0800133c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b08c      	sub	sp, #48	; 0x30
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001344:	2300      	movs	r3, #0
 8001346:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001348:	2300      	movs	r3, #0
 800134a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 800134c:	2200      	movs	r2, #0
 800134e:	6879      	ldr	r1, [r7, #4]
 8001350:	2036      	movs	r0, #54	; 0x36
 8001352:	f001 f86d 	bl	8002430 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8001356:	2036      	movs	r0, #54	; 0x36
 8001358:	f001 f886 	bl	8002468 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800135c:	4b1f      	ldr	r3, [pc, #124]	; (80013dc <HAL_InitTick+0xa0>)
 800135e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001360:	4a1e      	ldr	r2, [pc, #120]	; (80013dc <HAL_InitTick+0xa0>)
 8001362:	f043 0310 	orr.w	r3, r3, #16
 8001366:	6413      	str	r3, [r2, #64]	; 0x40
 8001368:	4b1c      	ldr	r3, [pc, #112]	; (80013dc <HAL_InitTick+0xa0>)
 800136a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136c:	f003 0310 	and.w	r3, r3, #16
 8001370:	60fb      	str	r3, [r7, #12]
 8001372:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001374:	f107 0210 	add.w	r2, r7, #16
 8001378:	f107 0314 	add.w	r3, r7, #20
 800137c:	4611      	mov	r1, r2
 800137e:	4618      	mov	r0, r3
 8001380:	f002 fc68 	bl	8003c54 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001384:	f002 fc3e 	bl	8003c04 <HAL_RCC_GetPCLK1Freq>
 8001388:	4603      	mov	r3, r0
 800138a:	005b      	lsls	r3, r3, #1
 800138c:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800138e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001390:	4a13      	ldr	r2, [pc, #76]	; (80013e0 <HAL_InitTick+0xa4>)
 8001392:	fba2 2303 	umull	r2, r3, r2, r3
 8001396:	0c9b      	lsrs	r3, r3, #18
 8001398:	3b01      	subs	r3, #1
 800139a:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800139c:	4b11      	ldr	r3, [pc, #68]	; (80013e4 <HAL_InitTick+0xa8>)
 800139e:	4a12      	ldr	r2, [pc, #72]	; (80013e8 <HAL_InitTick+0xac>)
 80013a0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 80013a2:	4b10      	ldr	r3, [pc, #64]	; (80013e4 <HAL_InitTick+0xa8>)
 80013a4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80013a8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80013aa:	4a0e      	ldr	r2, [pc, #56]	; (80013e4 <HAL_InitTick+0xa8>)
 80013ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013ae:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80013b0:	4b0c      	ldr	r3, [pc, #48]	; (80013e4 <HAL_InitTick+0xa8>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013b6:	4b0b      	ldr	r3, [pc, #44]	; (80013e4 <HAL_InitTick+0xa8>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80013bc:	4809      	ldr	r0, [pc, #36]	; (80013e4 <HAL_InitTick+0xa8>)
 80013be:	f004 fb97 	bl	8005af0 <HAL_TIM_Base_Init>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d104      	bne.n	80013d2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80013c8:	4806      	ldr	r0, [pc, #24]	; (80013e4 <HAL_InitTick+0xa8>)
 80013ca:	f004 fbc7 	bl	8005b5c <HAL_TIM_Base_Start_IT>
 80013ce:	4603      	mov	r3, r0
 80013d0:	e000      	b.n	80013d4 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	3730      	adds	r7, #48	; 0x30
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	40023800 	.word	0x40023800
 80013e0:	431bde83 	.word	0x431bde83
 80013e4:	20006b00 	.word	0x20006b00
 80013e8:	40001000 	.word	0x40001000

080013ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80013f0:	bf00      	nop
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr

080013fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013fa:	b480      	push	{r7}
 80013fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013fe:	e7fe      	b.n	80013fe <HardFault_Handler+0x4>

08001400 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001404:	e7fe      	b.n	8001404 <MemManage_Handler+0x4>

08001406 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001406:	b480      	push	{r7}
 8001408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800140a:	e7fe      	b.n	800140a <BusFault_Handler+0x4>

0800140c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001410:	e7fe      	b.n	8001410 <UsageFault_Handler+0x4>

08001412 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001412:	b480      	push	{r7}
 8001414:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001416:	bf00      	nop
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr

08001420 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001424:	4802      	ldr	r0, [pc, #8]	; (8001430 <CAN1_RX0_IRQHandler+0x10>)
 8001426:	f000 fd21 	bl	8001e6c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800142a:	bf00      	nop
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	2000683c 	.word	0x2000683c

08001434 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8001438:	4802      	ldr	r0, [pc, #8]	; (8001444 <SDMMC1_IRQHandler+0x10>)
 800143a:	f003 fad5 	bl	80049e8 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 800143e:	bf00      	nop
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	200044c8 	.word	0x200044c8

08001448 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800144c:	4802      	ldr	r0, [pc, #8]	; (8001458 <TIM6_DAC_IRQHandler+0x10>)
 800144e:	f004 fbaf 	bl	8005bb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001452:	bf00      	nop
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	20006b00 	.word	0x20006b00

0800145c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 8001460:	4802      	ldr	r0, [pc, #8]	; (800146c <DMA2_Stream3_IRQHandler+0x10>)
 8001462:	f001 f93f 	bl	80026e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001466:	bf00      	nop
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	20006880 	.word	0x20006880

08001470 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 8001474:	4802      	ldr	r0, [pc, #8]	; (8001480 <DMA2_Stream6_IRQHandler+0x10>)
 8001476:	f001 f935 	bl	80026e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800147a:	bf00      	nop
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	200067b4 	.word	0x200067b4

08001484 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001488:	4b08      	ldr	r3, [pc, #32]	; (80014ac <SystemInit+0x28>)
 800148a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800148e:	4a07      	ldr	r2, [pc, #28]	; (80014ac <SystemInit+0x28>)
 8001490:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001494:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001498:	4b04      	ldr	r3, [pc, #16]	; (80014ac <SystemInit+0x28>)
 800149a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800149e:	609a      	str	r2, [r3, #8]
#endif
}
 80014a0:	bf00      	nop
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	e000ed00 	.word	0xe000ed00

080014b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80014b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014e8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80014b4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80014b6:	e003      	b.n	80014c0 <LoopCopyDataInit>

080014b8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80014b8:	4b0c      	ldr	r3, [pc, #48]	; (80014ec <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80014ba:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80014bc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80014be:	3104      	adds	r1, #4

080014c0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80014c0:	480b      	ldr	r0, [pc, #44]	; (80014f0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80014c2:	4b0c      	ldr	r3, [pc, #48]	; (80014f4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80014c4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80014c6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80014c8:	d3f6      	bcc.n	80014b8 <CopyDataInit>
  ldr  r2, =_sbss
 80014ca:	4a0b      	ldr	r2, [pc, #44]	; (80014f8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80014cc:	e002      	b.n	80014d4 <LoopFillZerobss>

080014ce <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80014ce:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80014d0:	f842 3b04 	str.w	r3, [r2], #4

080014d4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80014d4:	4b09      	ldr	r3, [pc, #36]	; (80014fc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80014d6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80014d8:	d3f9      	bcc.n	80014ce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80014da:	f7ff ffd3 	bl	8001484 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014de:	f00d fe85 	bl	800f1ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014e2:	f7ff f847 	bl	8000574 <main>
  bx  lr    
 80014e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80014e8:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 80014ec:	0800f758 	.word	0x0800f758
  ldr  r0, =_sdata
 80014f0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80014f4:	20000020 	.word	0x20000020
  ldr  r2, =_sbss
 80014f8:	20000020 	.word	0x20000020
  ldr  r3, = _ebss
 80014fc:	20008c20 	.word	0x20008c20

08001500 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001500:	e7fe      	b.n	8001500 <ADC_IRQHandler>

08001502 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001502:	b580      	push	{r7, lr}
 8001504:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001506:	2003      	movs	r0, #3
 8001508:	f000 ff87 	bl	800241a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800150c:	2000      	movs	r0, #0
 800150e:	f7ff ff15 	bl	800133c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001512:	f7ff fd2b 	bl	8000f6c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001516:	2300      	movs	r3, #0
}
 8001518:	4618      	mov	r0, r3
 800151a:	bd80      	pop	{r7, pc}

0800151c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001520:	4b06      	ldr	r3, [pc, #24]	; (800153c <HAL_IncTick+0x20>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	461a      	mov	r2, r3
 8001526:	4b06      	ldr	r3, [pc, #24]	; (8001540 <HAL_IncTick+0x24>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4413      	add	r3, r2
 800152c:	4a04      	ldr	r2, [pc, #16]	; (8001540 <HAL_IncTick+0x24>)
 800152e:	6013      	str	r3, [r2, #0]
}
 8001530:	bf00      	nop
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	20000018 	.word	0x20000018
 8001540:	20006b40 	.word	0x20006b40

08001544 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  return uwTick;
 8001548:	4b03      	ldr	r3, [pc, #12]	; (8001558 <HAL_GetTick+0x14>)
 800154a:	681b      	ldr	r3, [r3, #0]
}
 800154c:	4618      	mov	r0, r3
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	20006b40 	.word	0x20006b40

0800155c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b084      	sub	sp, #16
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001564:	f7ff ffee 	bl	8001544 <HAL_GetTick>
 8001568:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001574:	d005      	beq.n	8001582 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001576:	4b09      	ldr	r3, [pc, #36]	; (800159c <HAL_Delay+0x40>)
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	461a      	mov	r2, r3
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	4413      	add	r3, r2
 8001580:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001582:	bf00      	nop
 8001584:	f7ff ffde 	bl	8001544 <HAL_GetTick>
 8001588:	4602      	mov	r2, r0
 800158a:	68bb      	ldr	r3, [r7, #8]
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	68fa      	ldr	r2, [r7, #12]
 8001590:	429a      	cmp	r2, r3
 8001592:	d8f7      	bhi.n	8001584 <HAL_Delay+0x28>
  {
  }
}
 8001594:	bf00      	nop
 8001596:	3710      	adds	r7, #16
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	20000018 	.word	0x20000018

080015a0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d101      	bne.n	80015b2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	e0ed      	b.n	800178e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d102      	bne.n	80015c4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80015be:	6878      	ldr	r0, [r7, #4]
 80015c0:	f7ff fcfc 	bl	8000fbc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f022 0202 	bic.w	r2, r2, #2
 80015d2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015d4:	f7ff ffb6 	bl	8001544 <HAL_GetTick>
 80015d8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80015da:	e012      	b.n	8001602 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80015dc:	f7ff ffb2 	bl	8001544 <HAL_GetTick>
 80015e0:	4602      	mov	r2, r0
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	2b0a      	cmp	r3, #10
 80015e8:	d90b      	bls.n	8001602 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ee:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2205      	movs	r2, #5
 80015fa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e0c5      	b.n	800178e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f003 0302 	and.w	r3, r3, #2
 800160c:	2b00      	cmp	r3, #0
 800160e:	d1e5      	bne.n	80015dc <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f042 0201 	orr.w	r2, r2, #1
 800161e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001620:	f7ff ff90 	bl	8001544 <HAL_GetTick>
 8001624:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001626:	e012      	b.n	800164e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001628:	f7ff ff8c 	bl	8001544 <HAL_GetTick>
 800162c:	4602      	mov	r2, r0
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	2b0a      	cmp	r3, #10
 8001634:	d90b      	bls.n	800164e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800163a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2205      	movs	r2, #5
 8001646:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	e09f      	b.n	800178e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f003 0301 	and.w	r3, r3, #1
 8001658:	2b00      	cmp	r3, #0
 800165a:	d0e5      	beq.n	8001628 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	7e1b      	ldrb	r3, [r3, #24]
 8001660:	2b01      	cmp	r3, #1
 8001662:	d108      	bne.n	8001676 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001672:	601a      	str	r2, [r3, #0]
 8001674:	e007      	b.n	8001686 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001684:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	7e5b      	ldrb	r3, [r3, #25]
 800168a:	2b01      	cmp	r3, #1
 800168c:	d108      	bne.n	80016a0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800169c:	601a      	str	r2, [r3, #0]
 800169e:	e007      	b.n	80016b0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80016ae:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	7e9b      	ldrb	r3, [r3, #26]
 80016b4:	2b01      	cmp	r3, #1
 80016b6:	d108      	bne.n	80016ca <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f042 0220 	orr.w	r2, r2, #32
 80016c6:	601a      	str	r2, [r3, #0]
 80016c8:	e007      	b.n	80016da <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f022 0220 	bic.w	r2, r2, #32
 80016d8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	7edb      	ldrb	r3, [r3, #27]
 80016de:	2b01      	cmp	r3, #1
 80016e0:	d108      	bne.n	80016f4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f022 0210 	bic.w	r2, r2, #16
 80016f0:	601a      	str	r2, [r3, #0]
 80016f2:	e007      	b.n	8001704 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f042 0210 	orr.w	r2, r2, #16
 8001702:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	7f1b      	ldrb	r3, [r3, #28]
 8001708:	2b01      	cmp	r3, #1
 800170a:	d108      	bne.n	800171e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f042 0208 	orr.w	r2, r2, #8
 800171a:	601a      	str	r2, [r3, #0]
 800171c:	e007      	b.n	800172e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f022 0208 	bic.w	r2, r2, #8
 800172c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	7f5b      	ldrb	r3, [r3, #29]
 8001732:	2b01      	cmp	r3, #1
 8001734:	d108      	bne.n	8001748 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f042 0204 	orr.w	r2, r2, #4
 8001744:	601a      	str	r2, [r3, #0]
 8001746:	e007      	b.n	8001758 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f022 0204 	bic.w	r2, r2, #4
 8001756:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	689a      	ldr	r2, [r3, #8]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	431a      	orrs	r2, r3
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	691b      	ldr	r3, [r3, #16]
 8001766:	431a      	orrs	r2, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	695b      	ldr	r3, [r3, #20]
 800176c:	ea42 0103 	orr.w	r1, r2, r3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	1e5a      	subs	r2, r3, #1
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	430a      	orrs	r2, r1
 800177c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2200      	movs	r2, #0
 8001782:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2201      	movs	r2, #1
 8001788:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800178c:	2300      	movs	r3, #0
}
 800178e:	4618      	mov	r0, r3
 8001790:	3710      	adds	r7, #16
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
	...

08001798 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001798:	b480      	push	{r7}
 800179a:	b087      	sub	sp, #28
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017ae:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80017b0:	7cfb      	ldrb	r3, [r7, #19]
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d003      	beq.n	80017be <HAL_CAN_ConfigFilter+0x26>
 80017b6:	7cfb      	ldrb	r3, [r7, #19]
 80017b8:	2b02      	cmp	r3, #2
 80017ba:	f040 80c7 	bne.w	800194c <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a69      	ldr	r2, [pc, #420]	; (8001968 <HAL_CAN_ConfigFilter+0x1d0>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d001      	beq.n	80017cc <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 80017c8:	4b68      	ldr	r3, [pc, #416]	; (800196c <HAL_CAN_ConfigFilter+0x1d4>)
 80017ca:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80017d2:	f043 0201 	orr.w	r2, r3, #1
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	4a63      	ldr	r2, [pc, #396]	; (800196c <HAL_CAN_ConfigFilter+0x1d4>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d111      	bne.n	8001808 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80017ea:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017fe:	021b      	lsls	r3, r3, #8
 8001800:	431a      	orrs	r2, r3
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	695b      	ldr	r3, [r3, #20]
 800180c:	f003 031f 	and.w	r3, r3, #31
 8001810:	2201      	movs	r2, #1
 8001812:	fa02 f303 	lsl.w	r3, r2, r3
 8001816:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	43db      	mvns	r3, r3
 8001822:	401a      	ands	r2, r3
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	69db      	ldr	r3, [r3, #28]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d123      	bne.n	800187a <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	43db      	mvns	r3, r3
 800183c:	401a      	ands	r2, r3
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001850:	683a      	ldr	r2, [r7, #0]
 8001852:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001854:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	3248      	adds	r2, #72	; 0x48
 800185a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800186e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001870:	6979      	ldr	r1, [r7, #20]
 8001872:	3348      	adds	r3, #72	; 0x48
 8001874:	00db      	lsls	r3, r3, #3
 8001876:	440b      	add	r3, r1
 8001878:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	69db      	ldr	r3, [r3, #28]
 800187e:	2b01      	cmp	r3, #1
 8001880:	d122      	bne.n	80018c8 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	431a      	orrs	r2, r3
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800189e:	683a      	ldr	r2, [r7, #0]
 80018a0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80018a2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	3248      	adds	r2, #72	; 0x48
 80018a8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	68db      	ldr	r3, [r3, #12]
 80018b6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80018bc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80018be:	6979      	ldr	r1, [r7, #20]
 80018c0:	3348      	adds	r3, #72	; 0x48
 80018c2:	00db      	lsls	r3, r3, #3
 80018c4:	440b      	add	r3, r1
 80018c6:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	699b      	ldr	r3, [r3, #24]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d109      	bne.n	80018e4 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	43db      	mvns	r3, r3
 80018da:	401a      	ands	r2, r3
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80018e2:	e007      	b.n	80018f4 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	431a      	orrs	r2, r3
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	691b      	ldr	r3, [r3, #16]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d109      	bne.n	8001910 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	43db      	mvns	r3, r3
 8001906:	401a      	ands	r2, r3
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800190e:	e007      	b.n	8001920 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	431a      	orrs	r2, r3
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	6a1b      	ldr	r3, [r3, #32]
 8001924:	2b01      	cmp	r3, #1
 8001926:	d107      	bne.n	8001938 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	431a      	orrs	r2, r3
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800193e:	f023 0201 	bic.w	r2, r3, #1
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001948:	2300      	movs	r3, #0
 800194a:	e006      	b.n	800195a <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001950:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001958:	2301      	movs	r3, #1
  }
}
 800195a:	4618      	mov	r0, r3
 800195c:	371c      	adds	r7, #28
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	40003400 	.word	0x40003400
 800196c:	40006400 	.word	0x40006400

08001970 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b084      	sub	sp, #16
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800197e:	b2db      	uxtb	r3, r3
 8001980:	2b01      	cmp	r3, #1
 8001982:	d12e      	bne.n	80019e2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2202      	movs	r2, #2
 8001988:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f022 0201 	bic.w	r2, r2, #1
 800199a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800199c:	f7ff fdd2 	bl	8001544 <HAL_GetTick>
 80019a0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80019a2:	e012      	b.n	80019ca <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80019a4:	f7ff fdce 	bl	8001544 <HAL_GetTick>
 80019a8:	4602      	mov	r2, r0
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	2b0a      	cmp	r3, #10
 80019b0:	d90b      	bls.n	80019ca <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2205      	movs	r2, #5
 80019c2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e012      	b.n	80019f0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f003 0301 	and.w	r3, r3, #1
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d1e5      	bne.n	80019a4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2200      	movs	r2, #0
 80019dc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80019de:	2300      	movs	r3, #0
 80019e0:	e006      	b.n	80019f0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
  }
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3710      	adds	r7, #16
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}

080019f8 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b089      	sub	sp, #36	; 0x24
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	60f8      	str	r0, [r7, #12]
 8001a00:	60b9      	str	r1, [r7, #8]
 8001a02:	607a      	str	r2, [r7, #4]
 8001a04:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a0c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001a16:	7ffb      	ldrb	r3, [r7, #31]
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d003      	beq.n	8001a24 <HAL_CAN_AddTxMessage+0x2c>
 8001a1c:	7ffb      	ldrb	r3, [r7, #31]
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	f040 80b8 	bne.w	8001b94 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001a24:	69bb      	ldr	r3, [r7, #24]
 8001a26:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d10a      	bne.n	8001a44 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001a2e:	69bb      	ldr	r3, [r7, #24]
 8001a30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d105      	bne.n	8001a44 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001a38:	69bb      	ldr	r3, [r7, #24]
 8001a3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	f000 80a0 	beq.w	8001b84 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001a44:	69bb      	ldr	r3, [r7, #24]
 8001a46:	0e1b      	lsrs	r3, r3, #24
 8001a48:	f003 0303 	and.w	r3, r3, #3
 8001a4c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	2b02      	cmp	r3, #2
 8001a52:	d907      	bls.n	8001a64 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a58:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e09e      	b.n	8001ba2 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001a64:	2201      	movs	r2, #1
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	409a      	lsls	r2, r3
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d10d      	bne.n	8001a92 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001a80:	68f9      	ldr	r1, [r7, #12]
 8001a82:	6809      	ldr	r1, [r1, #0]
 8001a84:	431a      	orrs	r2, r3
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	3318      	adds	r3, #24
 8001a8a:	011b      	lsls	r3, r3, #4
 8001a8c:	440b      	add	r3, r1
 8001a8e:	601a      	str	r2, [r3, #0]
 8001a90:	e00f      	b.n	8001ab2 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001a9c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001aa2:	68f9      	ldr	r1, [r7, #12]
 8001aa4:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001aa6:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	3318      	adds	r3, #24
 8001aac:	011b      	lsls	r3, r3, #4
 8001aae:	440b      	add	r3, r1
 8001ab0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	6819      	ldr	r1, [r3, #0]
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	691a      	ldr	r2, [r3, #16]
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	3318      	adds	r3, #24
 8001abe:	011b      	lsls	r3, r3, #4
 8001ac0:	440b      	add	r3, r1
 8001ac2:	3304      	adds	r3, #4
 8001ac4:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	7d1b      	ldrb	r3, [r3, #20]
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d111      	bne.n	8001af2 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	3318      	adds	r3, #24
 8001ad6:	011b      	lsls	r3, r3, #4
 8001ad8:	4413      	add	r3, r2
 8001ada:	3304      	adds	r3, #4
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	68fa      	ldr	r2, [r7, #12]
 8001ae0:	6811      	ldr	r1, [r2, #0]
 8001ae2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	3318      	adds	r3, #24
 8001aea:	011b      	lsls	r3, r3, #4
 8001aec:	440b      	add	r3, r1
 8001aee:	3304      	adds	r3, #4
 8001af0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	3307      	adds	r3, #7
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	061a      	lsls	r2, r3, #24
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	3306      	adds	r3, #6
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	041b      	lsls	r3, r3, #16
 8001b02:	431a      	orrs	r2, r3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	3305      	adds	r3, #5
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	021b      	lsls	r3, r3, #8
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	3204      	adds	r2, #4
 8001b12:	7812      	ldrb	r2, [r2, #0]
 8001b14:	4610      	mov	r0, r2
 8001b16:	68fa      	ldr	r2, [r7, #12]
 8001b18:	6811      	ldr	r1, [r2, #0]
 8001b1a:	ea43 0200 	orr.w	r2, r3, r0
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	011b      	lsls	r3, r3, #4
 8001b22:	440b      	add	r3, r1
 8001b24:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001b28:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	3303      	adds	r3, #3
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	061a      	lsls	r2, r3, #24
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	3302      	adds	r3, #2
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	041b      	lsls	r3, r3, #16
 8001b3a:	431a      	orrs	r2, r3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	3301      	adds	r3, #1
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	021b      	lsls	r3, r3, #8
 8001b44:	4313      	orrs	r3, r2
 8001b46:	687a      	ldr	r2, [r7, #4]
 8001b48:	7812      	ldrb	r2, [r2, #0]
 8001b4a:	4610      	mov	r0, r2
 8001b4c:	68fa      	ldr	r2, [r7, #12]
 8001b4e:	6811      	ldr	r1, [r2, #0]
 8001b50:	ea43 0200 	orr.w	r2, r3, r0
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	011b      	lsls	r3, r3, #4
 8001b58:	440b      	add	r3, r1
 8001b5a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001b5e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	3318      	adds	r3, #24
 8001b68:	011b      	lsls	r3, r3, #4
 8001b6a:	4413      	add	r3, r2
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	68fa      	ldr	r2, [r7, #12]
 8001b70:	6811      	ldr	r1, [r2, #0]
 8001b72:	f043 0201 	orr.w	r2, r3, #1
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	3318      	adds	r3, #24
 8001b7a:	011b      	lsls	r3, r3, #4
 8001b7c:	440b      	add	r3, r1
 8001b7e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001b80:	2300      	movs	r3, #0
 8001b82:	e00e      	b.n	8001ba2 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b88:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	e006      	b.n	8001ba2 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b98:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
  }
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3724      	adds	r7, #36	; 0x24
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr

08001bae <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001bae:	b480      	push	{r7}
 8001bb0:	b087      	sub	sp, #28
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	60f8      	str	r0, [r7, #12]
 8001bb6:	60b9      	str	r1, [r7, #8]
 8001bb8:	607a      	str	r2, [r7, #4]
 8001bba:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bc2:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001bc4:	7dfb      	ldrb	r3, [r7, #23]
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d003      	beq.n	8001bd2 <HAL_CAN_GetRxMessage+0x24>
 8001bca:	7dfb      	ldrb	r3, [r7, #23]
 8001bcc:	2b02      	cmp	r3, #2
 8001bce:	f040 80f3 	bne.w	8001db8 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d10e      	bne.n	8001bf6 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	68db      	ldr	r3, [r3, #12]
 8001bde:	f003 0303 	and.w	r3, r3, #3
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d116      	bne.n	8001c14 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bea:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e0e7      	b.n	8001dc6 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	691b      	ldr	r3, [r3, #16]
 8001bfc:	f003 0303 	and.w	r3, r3, #3
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d107      	bne.n	8001c14 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c08:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e0d8      	b.n	8001dc6 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	331b      	adds	r3, #27
 8001c1c:	011b      	lsls	r3, r3, #4
 8001c1e:	4413      	add	r3, r2
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0204 	and.w	r2, r3, #4
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d10c      	bne.n	8001c4c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	331b      	adds	r3, #27
 8001c3a:	011b      	lsls	r3, r3, #4
 8001c3c:	4413      	add	r3, r2
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	0d5b      	lsrs	r3, r3, #21
 8001c42:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	601a      	str	r2, [r3, #0]
 8001c4a:	e00b      	b.n	8001c64 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	331b      	adds	r3, #27
 8001c54:	011b      	lsls	r3, r3, #4
 8001c56:	4413      	add	r3, r2
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	08db      	lsrs	r3, r3, #3
 8001c5c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	331b      	adds	r3, #27
 8001c6c:	011b      	lsls	r3, r3, #4
 8001c6e:	4413      	add	r3, r2
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 0202 	and.w	r2, r3, #2
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	331b      	adds	r3, #27
 8001c82:	011b      	lsls	r3, r3, #4
 8001c84:	4413      	add	r3, r2
 8001c86:	3304      	adds	r3, #4
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 020f 	and.w	r2, r3, #15
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	331b      	adds	r3, #27
 8001c9a:	011b      	lsls	r3, r3, #4
 8001c9c:	4413      	add	r3, r2
 8001c9e:	3304      	adds	r3, #4
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	0a1b      	lsrs	r3, r3, #8
 8001ca4:	b2da      	uxtb	r2, r3
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	331b      	adds	r3, #27
 8001cb2:	011b      	lsls	r3, r3, #4
 8001cb4:	4413      	add	r3, r2
 8001cb6:	3304      	adds	r3, #4
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	0c1b      	lsrs	r3, r3, #16
 8001cbc:	b29a      	uxth	r2, r3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	011b      	lsls	r3, r3, #4
 8001cca:	4413      	add	r3, r2
 8001ccc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	b2da      	uxtb	r2, r3
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	011b      	lsls	r3, r3, #4
 8001ce0:	4413      	add	r3, r2
 8001ce2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	0a1a      	lsrs	r2, r3, #8
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	3301      	adds	r3, #1
 8001cee:	b2d2      	uxtb	r2, r2
 8001cf0:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	011b      	lsls	r3, r3, #4
 8001cfa:	4413      	add	r3, r2
 8001cfc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	0c1a      	lsrs	r2, r3, #16
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	3302      	adds	r3, #2
 8001d08:	b2d2      	uxtb	r2, r2
 8001d0a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	011b      	lsls	r3, r3, #4
 8001d14:	4413      	add	r3, r2
 8001d16:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	0e1a      	lsrs	r2, r3, #24
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	3303      	adds	r3, #3
 8001d22:	b2d2      	uxtb	r2, r2
 8001d24:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	011b      	lsls	r3, r3, #4
 8001d2e:	4413      	add	r3, r2
 8001d30:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	3304      	adds	r3, #4
 8001d3a:	b2d2      	uxtb	r2, r2
 8001d3c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	011b      	lsls	r3, r3, #4
 8001d46:	4413      	add	r3, r2
 8001d48:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	0a1a      	lsrs	r2, r3, #8
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	3305      	adds	r3, #5
 8001d54:	b2d2      	uxtb	r2, r2
 8001d56:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	011b      	lsls	r3, r3, #4
 8001d60:	4413      	add	r3, r2
 8001d62:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	0c1a      	lsrs	r2, r3, #16
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	3306      	adds	r3, #6
 8001d6e:	b2d2      	uxtb	r2, r2
 8001d70:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	011b      	lsls	r3, r3, #4
 8001d7a:	4413      	add	r3, r2
 8001d7c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	0e1a      	lsrs	r2, r3, #24
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	3307      	adds	r3, #7
 8001d88:	b2d2      	uxtb	r2, r2
 8001d8a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d108      	bne.n	8001da4 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	68da      	ldr	r2, [r3, #12]
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f042 0220 	orr.w	r2, r2, #32
 8001da0:	60da      	str	r2, [r3, #12]
 8001da2:	e007      	b.n	8001db4 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	691a      	ldr	r2, [r3, #16]
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f042 0220 	orr.w	r2, r2, #32
 8001db2:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001db4:	2300      	movs	r3, #0
 8001db6:	e006      	b.n	8001dc6 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dbc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
  }
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	371c      	adds	r7, #28
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr

08001dd2 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001dd2:	b480      	push	{r7}
 8001dd4:	b085      	sub	sp, #20
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
 8001dda:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001de2:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001de4:	7bfb      	ldrb	r3, [r7, #15]
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d002      	beq.n	8001df0 <HAL_CAN_ActivateNotification+0x1e>
 8001dea:	7bfb      	ldrb	r3, [r7, #15]
 8001dec:	2b02      	cmp	r3, #2
 8001dee:	d109      	bne.n	8001e04 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	6959      	ldr	r1, [r3, #20]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	683a      	ldr	r2, [r7, #0]
 8001dfc:	430a      	orrs	r2, r1
 8001dfe:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001e00:	2300      	movs	r3, #0
 8001e02:	e006      	b.n	8001e12 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e08:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
  }
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3714      	adds	r7, #20
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr

08001e1e <HAL_CAN_DeactivateNotification>:
  * @param  InactiveITs indicates which interrupts will be disabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeactivateNotification(CAN_HandleTypeDef *hcan, uint32_t InactiveITs)
{
 8001e1e:	b480      	push	{r7}
 8001e20:	b085      	sub	sp, #20
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	6078      	str	r0, [r7, #4]
 8001e26:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e2e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(InactiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001e30:	7bfb      	ldrb	r3, [r7, #15]
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d002      	beq.n	8001e3c <HAL_CAN_DeactivateNotification+0x1e>
 8001e36:	7bfb      	ldrb	r3, [r7, #15]
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	d10a      	bne.n	8001e52 <HAL_CAN_DeactivateNotification+0x34>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Disable the selected interrupts */
    __HAL_CAN_DISABLE_IT(hcan, InactiveITs);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	6959      	ldr	r1, [r3, #20]
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	43da      	mvns	r2, r3
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	400a      	ands	r2, r1
 8001e4c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	e006      	b.n	8001e60 <HAL_CAN_DeactivateNotification+0x42>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e56:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
  }
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	3714      	adds	r7, #20
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr

08001e6c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b08a      	sub	sp, #40	; 0x28
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001e74:	2300      	movs	r3, #0
 8001e76:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	695b      	ldr	r3, [r3, #20]
 8001e7e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	68db      	ldr	r3, [r3, #12]
 8001e96:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	691b      	ldr	r3, [r3, #16]
 8001e9e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	699b      	ldr	r3, [r3, #24]
 8001ea6:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001ea8:	6a3b      	ldr	r3, [r7, #32]
 8001eaa:	f003 0301 	and.w	r3, r3, #1
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d07c      	beq.n	8001fac <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001eb2:	69bb      	ldr	r3, [r7, #24]
 8001eb4:	f003 0301 	and.w	r3, r3, #1
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d023      	beq.n	8001f04 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001ec4:	69bb      	ldr	r3, [r7, #24]
 8001ec6:	f003 0302 	and.w	r3, r3, #2
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d003      	beq.n	8001ed6 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f000 f97d 	bl	80021ce <HAL_CAN_TxMailbox0CompleteCallback>
 8001ed4:	e016      	b.n	8001f04 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001ed6:	69bb      	ldr	r3, [r7, #24]
 8001ed8:	f003 0304 	and.w	r3, r3, #4
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d004      	beq.n	8001eea <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001ee6:	627b      	str	r3, [r7, #36]	; 0x24
 8001ee8:	e00c      	b.n	8001f04 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001eea:	69bb      	ldr	r3, [r7, #24]
 8001eec:	f003 0308 	and.w	r3, r3, #8
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d004      	beq.n	8001efe <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001efa:	627b      	str	r3, [r7, #36]	; 0x24
 8001efc:	e002      	b.n	8001f04 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f000 f983 	bl	800220a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001f04:	69bb      	ldr	r3, [r7, #24]
 8001f06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d024      	beq.n	8001f58 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f16:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001f18:	69bb      	ldr	r3, [r7, #24]
 8001f1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d003      	beq.n	8001f2a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f000 f95d 	bl	80021e2 <HAL_CAN_TxMailbox1CompleteCallback>
 8001f28:	e016      	b.n	8001f58 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001f2a:	69bb      	ldr	r3, [r7, #24]
 8001f2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d004      	beq.n	8001f3e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f36:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001f3a:	627b      	str	r3, [r7, #36]	; 0x24
 8001f3c:	e00c      	b.n	8001f58 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001f3e:	69bb      	ldr	r3, [r7, #24]
 8001f40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d004      	beq.n	8001f52 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f4e:	627b      	str	r3, [r7, #36]	; 0x24
 8001f50:	e002      	b.n	8001f58 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f000 f963 	bl	800221e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001f58:	69bb      	ldr	r3, [r7, #24]
 8001f5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d024      	beq.n	8001fac <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001f6a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001f6c:	69bb      	ldr	r3, [r7, #24]
 8001f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d003      	beq.n	8001f7e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f000 f93d 	bl	80021f6 <HAL_CAN_TxMailbox2CompleteCallback>
 8001f7c:	e016      	b.n	8001fac <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001f7e:	69bb      	ldr	r3, [r7, #24]
 8001f80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d004      	beq.n	8001f92 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f8e:	627b      	str	r3, [r7, #36]	; 0x24
 8001f90:	e00c      	b.n	8001fac <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001f92:	69bb      	ldr	r3, [r7, #24]
 8001f94:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d004      	beq.n	8001fa6 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fa2:	627b      	str	r3, [r7, #36]	; 0x24
 8001fa4:	e002      	b.n	8001fac <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f000 f943 	bl	8002232 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001fac:	6a3b      	ldr	r3, [r7, #32]
 8001fae:	f003 0308 	and.w	r3, r3, #8
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d00c      	beq.n	8001fd0 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	f003 0310 	and.w	r3, r3, #16
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d007      	beq.n	8001fd0 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fc6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	2210      	movs	r2, #16
 8001fce:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001fd0:	6a3b      	ldr	r3, [r7, #32]
 8001fd2:	f003 0304 	and.w	r3, r3, #4
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d00b      	beq.n	8001ff2 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	f003 0308 	and.w	r3, r3, #8
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d006      	beq.n	8001ff2 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	2208      	movs	r2, #8
 8001fea:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	f000 f92a 	bl	8002246 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001ff2:	6a3b      	ldr	r3, [r7, #32]
 8001ff4:	f003 0302 	and.w	r3, r3, #2
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d009      	beq.n	8002010 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	68db      	ldr	r3, [r3, #12]
 8002002:	f003 0303 	and.w	r3, r3, #3
 8002006:	2b00      	cmp	r3, #0
 8002008:	d002      	beq.n	8002010 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f7fe fd5e 	bl	8000acc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002010:	6a3b      	ldr	r3, [r7, #32]
 8002012:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002016:	2b00      	cmp	r3, #0
 8002018:	d00c      	beq.n	8002034 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	f003 0310 	and.w	r3, r3, #16
 8002020:	2b00      	cmp	r3, #0
 8002022:	d007      	beq.n	8002034 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002026:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800202a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2210      	movs	r2, #16
 8002032:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002034:	6a3b      	ldr	r3, [r7, #32]
 8002036:	f003 0320 	and.w	r3, r3, #32
 800203a:	2b00      	cmp	r3, #0
 800203c:	d00b      	beq.n	8002056 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	f003 0308 	and.w	r3, r3, #8
 8002044:	2b00      	cmp	r3, #0
 8002046:	d006      	beq.n	8002056 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	2208      	movs	r2, #8
 800204e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	f000 f90c 	bl	800226e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002056:	6a3b      	ldr	r3, [r7, #32]
 8002058:	f003 0310 	and.w	r3, r3, #16
 800205c:	2b00      	cmp	r3, #0
 800205e:	d009      	beq.n	8002074 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	691b      	ldr	r3, [r3, #16]
 8002066:	f003 0303 	and.w	r3, r3, #3
 800206a:	2b00      	cmp	r3, #0
 800206c:	d002      	beq.n	8002074 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f000 f8f3 	bl	800225a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002074:	6a3b      	ldr	r3, [r7, #32]
 8002076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d00b      	beq.n	8002096 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	f003 0310 	and.w	r3, r3, #16
 8002084:	2b00      	cmp	r3, #0
 8002086:	d006      	beq.n	8002096 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2210      	movs	r2, #16
 800208e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f000 f8f6 	bl	8002282 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002096:	6a3b      	ldr	r3, [r7, #32]
 8002098:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800209c:	2b00      	cmp	r3, #0
 800209e:	d00b      	beq.n	80020b8 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	f003 0308 	and.w	r3, r3, #8
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d006      	beq.n	80020b8 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	2208      	movs	r2, #8
 80020b0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f000 f8ef 	bl	8002296 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80020b8:	6a3b      	ldr	r3, [r7, #32]
 80020ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d075      	beq.n	80021ae <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	f003 0304 	and.w	r3, r3, #4
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d06c      	beq.n	80021a6 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80020cc:	6a3b      	ldr	r3, [r7, #32]
 80020ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d008      	beq.n	80020e8 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d003      	beq.n	80020e8 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80020e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e2:	f043 0301 	orr.w	r3, r3, #1
 80020e6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80020e8:	6a3b      	ldr	r3, [r7, #32]
 80020ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d008      	beq.n	8002104 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d003      	beq.n	8002104 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80020fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fe:	f043 0302 	orr.w	r3, r3, #2
 8002102:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002104:	6a3b      	ldr	r3, [r7, #32]
 8002106:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800210a:	2b00      	cmp	r3, #0
 800210c:	d008      	beq.n	8002120 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002114:	2b00      	cmp	r3, #0
 8002116:	d003      	beq.n	8002120 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211a:	f043 0304 	orr.w	r3, r3, #4
 800211e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002120:	6a3b      	ldr	r3, [r7, #32]
 8002122:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002126:	2b00      	cmp	r3, #0
 8002128:	d03d      	beq.n	80021a6 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002130:	2b00      	cmp	r3, #0
 8002132:	d038      	beq.n	80021a6 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800213a:	2b30      	cmp	r3, #48	; 0x30
 800213c:	d017      	beq.n	800216e <HAL_CAN_IRQHandler+0x302>
 800213e:	2b30      	cmp	r3, #48	; 0x30
 8002140:	d804      	bhi.n	800214c <HAL_CAN_IRQHandler+0x2e0>
 8002142:	2b10      	cmp	r3, #16
 8002144:	d009      	beq.n	800215a <HAL_CAN_IRQHandler+0x2ee>
 8002146:	2b20      	cmp	r3, #32
 8002148:	d00c      	beq.n	8002164 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800214a:	e024      	b.n	8002196 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 800214c:	2b50      	cmp	r3, #80	; 0x50
 800214e:	d018      	beq.n	8002182 <HAL_CAN_IRQHandler+0x316>
 8002150:	2b60      	cmp	r3, #96	; 0x60
 8002152:	d01b      	beq.n	800218c <HAL_CAN_IRQHandler+0x320>
 8002154:	2b40      	cmp	r3, #64	; 0x40
 8002156:	d00f      	beq.n	8002178 <HAL_CAN_IRQHandler+0x30c>
            break;
 8002158:	e01d      	b.n	8002196 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 800215a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215c:	f043 0308 	orr.w	r3, r3, #8
 8002160:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002162:	e018      	b.n	8002196 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002166:	f043 0310 	orr.w	r3, r3, #16
 800216a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800216c:	e013      	b.n	8002196 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 800216e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002170:	f043 0320 	orr.w	r3, r3, #32
 8002174:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002176:	e00e      	b.n	8002196 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8002178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800217e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002180:	e009      	b.n	8002196 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8002182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002184:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002188:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800218a:	e004      	b.n	8002196 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 800218c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002192:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002194:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	699a      	ldr	r2, [r3, #24]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80021a4:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	2204      	movs	r2, #4
 80021ac:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80021ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d008      	beq.n	80021c6 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ba:	431a      	orrs	r2, r3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	f000 f872 	bl	80022aa <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80021c6:	bf00      	nop
 80021c8:	3728      	adds	r7, #40	; 0x28
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}

080021ce <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80021ce:	b480      	push	{r7}
 80021d0:	b083      	sub	sp, #12
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80021d6:	bf00      	nop
 80021d8:	370c      	adds	r7, #12
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr

080021e2 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80021e2:	b480      	push	{r7}
 80021e4:	b083      	sub	sp, #12
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80021ea:	bf00      	nop
 80021ec:	370c      	adds	r7, #12
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr

080021f6 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80021f6:	b480      	push	{r7}
 80021f8:	b083      	sub	sp, #12
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80021fe:	bf00      	nop
 8002200:	370c      	adds	r7, #12
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr

0800220a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800220a:	b480      	push	{r7}
 800220c:	b083      	sub	sp, #12
 800220e:	af00      	add	r7, sp, #0
 8002210:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002212:	bf00      	nop
 8002214:	370c      	adds	r7, #12
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr

0800221e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800221e:	b480      	push	{r7}
 8002220:	b083      	sub	sp, #12
 8002222:	af00      	add	r7, sp, #0
 8002224:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002226:	bf00      	nop
 8002228:	370c      	adds	r7, #12
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr

08002232 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002232:	b480      	push	{r7}
 8002234:	b083      	sub	sp, #12
 8002236:	af00      	add	r7, sp, #0
 8002238:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800223a:	bf00      	nop
 800223c:	370c      	adds	r7, #12
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr

08002246 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002246:	b480      	push	{r7}
 8002248:	b083      	sub	sp, #12
 800224a:	af00      	add	r7, sp, #0
 800224c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800224e:	bf00      	nop
 8002250:	370c      	adds	r7, #12
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr

0800225a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800225a:	b480      	push	{r7}
 800225c:	b083      	sub	sp, #12
 800225e:	af00      	add	r7, sp, #0
 8002260:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002262:	bf00      	nop
 8002264:	370c      	adds	r7, #12
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr

0800226e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800226e:	b480      	push	{r7}
 8002270:	b083      	sub	sp, #12
 8002272:	af00      	add	r7, sp, #0
 8002274:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002276:	bf00      	nop
 8002278:	370c      	adds	r7, #12
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr

08002282 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002282:	b480      	push	{r7}
 8002284:	b083      	sub	sp, #12
 8002286:	af00      	add	r7, sp, #0
 8002288:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800228a:	bf00      	nop
 800228c:	370c      	adds	r7, #12
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr

08002296 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002296:	b480      	push	{r7}
 8002298:	b083      	sub	sp, #12
 800229a:	af00      	add	r7, sp, #0
 800229c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800229e:	bf00      	nop
 80022a0:	370c      	adds	r7, #12
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr

080022aa <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80022aa:	b480      	push	{r7}
 80022ac:	b083      	sub	sp, #12
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80022b2:	bf00      	nop
 80022b4:	370c      	adds	r7, #12
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
	...

080022c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b085      	sub	sp, #20
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	f003 0307 	and.w	r3, r3, #7
 80022ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022d0:	4b0b      	ldr	r3, [pc, #44]	; (8002300 <__NVIC_SetPriorityGrouping+0x40>)
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022d6:	68ba      	ldr	r2, [r7, #8]
 80022d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022dc:	4013      	ands	r3, r2
 80022de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80022e8:	4b06      	ldr	r3, [pc, #24]	; (8002304 <__NVIC_SetPriorityGrouping+0x44>)
 80022ea:	4313      	orrs	r3, r2
 80022ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022ee:	4a04      	ldr	r2, [pc, #16]	; (8002300 <__NVIC_SetPriorityGrouping+0x40>)
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	60d3      	str	r3, [r2, #12]
}
 80022f4:	bf00      	nop
 80022f6:	3714      	adds	r7, #20
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr
 8002300:	e000ed00 	.word	0xe000ed00
 8002304:	05fa0000 	.word	0x05fa0000

08002308 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800230c:	4b04      	ldr	r3, [pc, #16]	; (8002320 <__NVIC_GetPriorityGrouping+0x18>)
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	0a1b      	lsrs	r3, r3, #8
 8002312:	f003 0307 	and.w	r3, r3, #7
}
 8002316:	4618      	mov	r0, r3
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr
 8002320:	e000ed00 	.word	0xe000ed00

08002324 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	4603      	mov	r3, r0
 800232c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800232e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002332:	2b00      	cmp	r3, #0
 8002334:	db0b      	blt.n	800234e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002336:	79fb      	ldrb	r3, [r7, #7]
 8002338:	f003 021f 	and.w	r2, r3, #31
 800233c:	4907      	ldr	r1, [pc, #28]	; (800235c <__NVIC_EnableIRQ+0x38>)
 800233e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002342:	095b      	lsrs	r3, r3, #5
 8002344:	2001      	movs	r0, #1
 8002346:	fa00 f202 	lsl.w	r2, r0, r2
 800234a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800234e:	bf00      	nop
 8002350:	370c      	adds	r7, #12
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	e000e100 	.word	0xe000e100

08002360 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	4603      	mov	r3, r0
 8002368:	6039      	str	r1, [r7, #0]
 800236a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800236c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002370:	2b00      	cmp	r3, #0
 8002372:	db0a      	blt.n	800238a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	b2da      	uxtb	r2, r3
 8002378:	490c      	ldr	r1, [pc, #48]	; (80023ac <__NVIC_SetPriority+0x4c>)
 800237a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800237e:	0112      	lsls	r2, r2, #4
 8002380:	b2d2      	uxtb	r2, r2
 8002382:	440b      	add	r3, r1
 8002384:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002388:	e00a      	b.n	80023a0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	b2da      	uxtb	r2, r3
 800238e:	4908      	ldr	r1, [pc, #32]	; (80023b0 <__NVIC_SetPriority+0x50>)
 8002390:	79fb      	ldrb	r3, [r7, #7]
 8002392:	f003 030f 	and.w	r3, r3, #15
 8002396:	3b04      	subs	r3, #4
 8002398:	0112      	lsls	r2, r2, #4
 800239a:	b2d2      	uxtb	r2, r2
 800239c:	440b      	add	r3, r1
 800239e:	761a      	strb	r2, [r3, #24]
}
 80023a0:	bf00      	nop
 80023a2:	370c      	adds	r7, #12
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr
 80023ac:	e000e100 	.word	0xe000e100
 80023b0:	e000ed00 	.word	0xe000ed00

080023b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b089      	sub	sp, #36	; 0x24
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	60f8      	str	r0, [r7, #12]
 80023bc:	60b9      	str	r1, [r7, #8]
 80023be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	f003 0307 	and.w	r3, r3, #7
 80023c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	f1c3 0307 	rsb	r3, r3, #7
 80023ce:	2b04      	cmp	r3, #4
 80023d0:	bf28      	it	cs
 80023d2:	2304      	movcs	r3, #4
 80023d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	3304      	adds	r3, #4
 80023da:	2b06      	cmp	r3, #6
 80023dc:	d902      	bls.n	80023e4 <NVIC_EncodePriority+0x30>
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	3b03      	subs	r3, #3
 80023e2:	e000      	b.n	80023e6 <NVIC_EncodePriority+0x32>
 80023e4:	2300      	movs	r3, #0
 80023e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023e8:	f04f 32ff 	mov.w	r2, #4294967295
 80023ec:	69bb      	ldr	r3, [r7, #24]
 80023ee:	fa02 f303 	lsl.w	r3, r2, r3
 80023f2:	43da      	mvns	r2, r3
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	401a      	ands	r2, r3
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	fa01 f303 	lsl.w	r3, r1, r3
 8002406:	43d9      	mvns	r1, r3
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800240c:	4313      	orrs	r3, r2
         );
}
 800240e:	4618      	mov	r0, r3
 8002410:	3724      	adds	r7, #36	; 0x24
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr

0800241a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800241a:	b580      	push	{r7, lr}
 800241c:	b082      	sub	sp, #8
 800241e:	af00      	add	r7, sp, #0
 8002420:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f7ff ff4c 	bl	80022c0 <__NVIC_SetPriorityGrouping>
}
 8002428:	bf00      	nop
 800242a:	3708      	adds	r7, #8
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}

08002430 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002430:	b580      	push	{r7, lr}
 8002432:	b086      	sub	sp, #24
 8002434:	af00      	add	r7, sp, #0
 8002436:	4603      	mov	r3, r0
 8002438:	60b9      	str	r1, [r7, #8]
 800243a:	607a      	str	r2, [r7, #4]
 800243c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800243e:	2300      	movs	r3, #0
 8002440:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002442:	f7ff ff61 	bl	8002308 <__NVIC_GetPriorityGrouping>
 8002446:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002448:	687a      	ldr	r2, [r7, #4]
 800244a:	68b9      	ldr	r1, [r7, #8]
 800244c:	6978      	ldr	r0, [r7, #20]
 800244e:	f7ff ffb1 	bl	80023b4 <NVIC_EncodePriority>
 8002452:	4602      	mov	r2, r0
 8002454:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002458:	4611      	mov	r1, r2
 800245a:	4618      	mov	r0, r3
 800245c:	f7ff ff80 	bl	8002360 <__NVIC_SetPriority>
}
 8002460:	bf00      	nop
 8002462:	3718      	adds	r7, #24
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}

08002468 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
 800246e:	4603      	mov	r3, r0
 8002470:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002476:	4618      	mov	r0, r3
 8002478:	f7ff ff54 	bl	8002324 <__NVIC_EnableIRQ>
}
 800247c:	bf00      	nop
 800247e:	3708      	adds	r7, #8
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}

08002484 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b086      	sub	sp, #24
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800248c:	2300      	movs	r3, #0
 800248e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002490:	f7ff f858 	bl	8001544 <HAL_GetTick>
 8002494:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d101      	bne.n	80024a0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e099      	b.n	80025d4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2200      	movs	r2, #0
 80024a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2202      	movs	r2, #2
 80024ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f022 0201 	bic.w	r2, r2, #1
 80024be:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024c0:	e00f      	b.n	80024e2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80024c2:	f7ff f83f 	bl	8001544 <HAL_GetTick>
 80024c6:	4602      	mov	r2, r0
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	1ad3      	subs	r3, r2, r3
 80024cc:	2b05      	cmp	r3, #5
 80024ce:	d908      	bls.n	80024e2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2220      	movs	r2, #32
 80024d4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2203      	movs	r2, #3
 80024da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	e078      	b.n	80025d4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0301 	and.w	r3, r3, #1
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d1e8      	bne.n	80024c2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80024f8:	697a      	ldr	r2, [r7, #20]
 80024fa:	4b38      	ldr	r3, [pc, #224]	; (80025dc <HAL_DMA_Init+0x158>)
 80024fc:	4013      	ands	r3, r2
 80024fe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	685a      	ldr	r2, [r3, #4]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800250e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	691b      	ldr	r3, [r3, #16]
 8002514:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800251a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	699b      	ldr	r3, [r3, #24]
 8002520:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002526:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6a1b      	ldr	r3, [r3, #32]
 800252c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800252e:	697a      	ldr	r2, [r7, #20]
 8002530:	4313      	orrs	r3, r2
 8002532:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002538:	2b04      	cmp	r3, #4
 800253a:	d107      	bne.n	800254c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002544:	4313      	orrs	r3, r2
 8002546:	697a      	ldr	r2, [r7, #20]
 8002548:	4313      	orrs	r3, r2
 800254a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	697a      	ldr	r2, [r7, #20]
 8002552:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	695b      	ldr	r3, [r3, #20]
 800255a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	f023 0307 	bic.w	r3, r3, #7
 8002562:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002568:	697a      	ldr	r2, [r7, #20]
 800256a:	4313      	orrs	r3, r2
 800256c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002572:	2b04      	cmp	r3, #4
 8002574:	d117      	bne.n	80025a6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800257a:	697a      	ldr	r2, [r7, #20]
 800257c:	4313      	orrs	r3, r2
 800257e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002584:	2b00      	cmp	r3, #0
 8002586:	d00e      	beq.n	80025a6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	f000 faa5 	bl	8002ad8 <DMA_CheckFifoParam>
 800258e:	4603      	mov	r3, r0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d008      	beq.n	80025a6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2240      	movs	r2, #64	; 0x40
 8002598:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2201      	movs	r2, #1
 800259e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80025a2:	2301      	movs	r3, #1
 80025a4:	e016      	b.n	80025d4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	697a      	ldr	r2, [r7, #20]
 80025ac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f000 fa5c 	bl	8002a6c <DMA_CalcBaseAndBitshift>
 80025b4:	4603      	mov	r3, r0
 80025b6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025bc:	223f      	movs	r2, #63	; 0x3f
 80025be:	409a      	lsls	r2, r3
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2200      	movs	r2, #0
 80025c8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2201      	movs	r2, #1
 80025ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80025d2:	2300      	movs	r3, #0
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	3718      	adds	r7, #24
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	e010803f 	.word	0xe010803f

080025e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b086      	sub	sp, #24
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	60f8      	str	r0, [r7, #12]
 80025e8:	60b9      	str	r1, [r7, #8]
 80025ea:	607a      	str	r2, [r7, #4]
 80025ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025ee:	2300      	movs	r3, #0
 80025f0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025f6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d101      	bne.n	8002606 <HAL_DMA_Start_IT+0x26>
 8002602:	2302      	movs	r3, #2
 8002604:	e048      	b.n	8002698 <HAL_DMA_Start_IT+0xb8>
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2201      	movs	r2, #1
 800260a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002614:	b2db      	uxtb	r3, r3
 8002616:	2b01      	cmp	r3, #1
 8002618:	d137      	bne.n	800268a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2202      	movs	r2, #2
 800261e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2200      	movs	r2, #0
 8002626:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	687a      	ldr	r2, [r7, #4]
 800262c:	68b9      	ldr	r1, [r7, #8]
 800262e:	68f8      	ldr	r0, [r7, #12]
 8002630:	f000 f9ee 	bl	8002a10 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002638:	223f      	movs	r2, #63	; 0x3f
 800263a:	409a      	lsls	r2, r3
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f042 0216 	orr.w	r2, r2, #22
 800264e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	695a      	ldr	r2, [r3, #20]
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800265e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002664:	2b00      	cmp	r3, #0
 8002666:	d007      	beq.n	8002678 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f042 0208 	orr.w	r2, r2, #8
 8002676:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f042 0201 	orr.w	r2, r2, #1
 8002686:	601a      	str	r2, [r3, #0]
 8002688:	e005      	b.n	8002696 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2200      	movs	r2, #0
 800268e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002692:	2302      	movs	r3, #2
 8002694:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002696:	7dfb      	ldrb	r3, [r7, #23]
}
 8002698:	4618      	mov	r0, r3
 800269a:	3718      	adds	r7, #24
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}

080026a0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	2b02      	cmp	r3, #2
 80026b2:	d004      	beq.n	80026be <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2280      	movs	r2, #128	; 0x80
 80026b8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e00c      	b.n	80026d8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2205      	movs	r2, #5
 80026c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f022 0201 	bic.w	r2, r2, #1
 80026d4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80026d6:	2300      	movs	r3, #0
}
 80026d8:	4618      	mov	r0, r3
 80026da:	370c      	adds	r7, #12
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr

080026e4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b086      	sub	sp, #24
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80026ec:	2300      	movs	r3, #0
 80026ee:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80026f0:	4b92      	ldr	r3, [pc, #584]	; (800293c <HAL_DMA_IRQHandler+0x258>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a92      	ldr	r2, [pc, #584]	; (8002940 <HAL_DMA_IRQHandler+0x25c>)
 80026f6:	fba2 2303 	umull	r2, r3, r2, r3
 80026fa:	0a9b      	lsrs	r3, r3, #10
 80026fc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002702:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800270e:	2208      	movs	r2, #8
 8002710:	409a      	lsls	r2, r3
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	4013      	ands	r3, r2
 8002716:	2b00      	cmp	r3, #0
 8002718:	d01a      	beq.n	8002750 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0304 	and.w	r3, r3, #4
 8002724:	2b00      	cmp	r3, #0
 8002726:	d013      	beq.n	8002750 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f022 0204 	bic.w	r2, r2, #4
 8002736:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800273c:	2208      	movs	r2, #8
 800273e:	409a      	lsls	r2, r3
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002748:	f043 0201 	orr.w	r2, r3, #1
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002754:	2201      	movs	r2, #1
 8002756:	409a      	lsls	r2, r3
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	4013      	ands	r3, r2
 800275c:	2b00      	cmp	r3, #0
 800275e:	d012      	beq.n	8002786 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	695b      	ldr	r3, [r3, #20]
 8002766:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800276a:	2b00      	cmp	r3, #0
 800276c:	d00b      	beq.n	8002786 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002772:	2201      	movs	r2, #1
 8002774:	409a      	lsls	r2, r3
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800277e:	f043 0202 	orr.w	r2, r3, #2
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800278a:	2204      	movs	r2, #4
 800278c:	409a      	lsls	r2, r3
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	4013      	ands	r3, r2
 8002792:	2b00      	cmp	r3, #0
 8002794:	d012      	beq.n	80027bc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0302 	and.w	r3, r3, #2
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d00b      	beq.n	80027bc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027a8:	2204      	movs	r2, #4
 80027aa:	409a      	lsls	r2, r3
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027b4:	f043 0204 	orr.w	r2, r3, #4
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027c0:	2210      	movs	r2, #16
 80027c2:	409a      	lsls	r2, r3
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	4013      	ands	r3, r2
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d043      	beq.n	8002854 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0308 	and.w	r3, r3, #8
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d03c      	beq.n	8002854 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027de:	2210      	movs	r2, #16
 80027e0:	409a      	lsls	r2, r3
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d018      	beq.n	8002826 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d108      	bne.n	8002814 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002806:	2b00      	cmp	r3, #0
 8002808:	d024      	beq.n	8002854 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	4798      	blx	r3
 8002812:	e01f      	b.n	8002854 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002818:	2b00      	cmp	r3, #0
 800281a:	d01b      	beq.n	8002854 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	4798      	blx	r3
 8002824:	e016      	b.n	8002854 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002830:	2b00      	cmp	r3, #0
 8002832:	d107      	bne.n	8002844 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f022 0208 	bic.w	r2, r2, #8
 8002842:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002848:	2b00      	cmp	r3, #0
 800284a:	d003      	beq.n	8002854 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002858:	2220      	movs	r2, #32
 800285a:	409a      	lsls	r2, r3
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	4013      	ands	r3, r2
 8002860:	2b00      	cmp	r3, #0
 8002862:	f000 808e 	beq.w	8002982 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 0310 	and.w	r3, r3, #16
 8002870:	2b00      	cmp	r3, #0
 8002872:	f000 8086 	beq.w	8002982 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800287a:	2220      	movs	r2, #32
 800287c:	409a      	lsls	r2, r3
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002888:	b2db      	uxtb	r3, r3
 800288a:	2b05      	cmp	r3, #5
 800288c:	d136      	bne.n	80028fc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f022 0216 	bic.w	r2, r2, #22
 800289c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	695a      	ldr	r2, [r3, #20]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80028ac:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d103      	bne.n	80028be <HAL_DMA_IRQHandler+0x1da>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d007      	beq.n	80028ce <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f022 0208 	bic.w	r2, r2, #8
 80028cc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028d2:	223f      	movs	r2, #63	; 0x3f
 80028d4:	409a      	lsls	r2, r3
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2200      	movs	r2, #0
 80028de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2201      	movs	r2, #1
 80028e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d07d      	beq.n	80029ee <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	4798      	blx	r3
        }
        return;
 80028fa:	e078      	b.n	80029ee <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d01c      	beq.n	8002944 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002914:	2b00      	cmp	r3, #0
 8002916:	d108      	bne.n	800292a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800291c:	2b00      	cmp	r3, #0
 800291e:	d030      	beq.n	8002982 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	4798      	blx	r3
 8002928:	e02b      	b.n	8002982 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800292e:	2b00      	cmp	r3, #0
 8002930:	d027      	beq.n	8002982 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	4798      	blx	r3
 800293a:	e022      	b.n	8002982 <HAL_DMA_IRQHandler+0x29e>
 800293c:	20000010 	.word	0x20000010
 8002940:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800294e:	2b00      	cmp	r3, #0
 8002950:	d10f      	bne.n	8002972 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f022 0210 	bic.w	r2, r2, #16
 8002960:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2200      	movs	r2, #0
 8002966:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2201      	movs	r2, #1
 800296e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002976:	2b00      	cmp	r3, #0
 8002978:	d003      	beq.n	8002982 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002986:	2b00      	cmp	r3, #0
 8002988:	d032      	beq.n	80029f0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800298e:	f003 0301 	and.w	r3, r3, #1
 8002992:	2b00      	cmp	r3, #0
 8002994:	d022      	beq.n	80029dc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2205      	movs	r2, #5
 800299a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f022 0201 	bic.w	r2, r2, #1
 80029ac:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	3301      	adds	r3, #1
 80029b2:	60bb      	str	r3, [r7, #8]
 80029b4:	697a      	ldr	r2, [r7, #20]
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d307      	bcc.n	80029ca <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0301 	and.w	r3, r3, #1
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d1f2      	bne.n	80029ae <HAL_DMA_IRQHandler+0x2ca>
 80029c8:	e000      	b.n	80029cc <HAL_DMA_IRQHandler+0x2e8>
          break;
 80029ca:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2200      	movs	r2, #0
 80029d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2201      	movs	r2, #1
 80029d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d005      	beq.n	80029f0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	4798      	blx	r3
 80029ec:	e000      	b.n	80029f0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80029ee:	bf00      	nop
    }
  }
}
 80029f0:	3718      	adds	r7, #24
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop

080029f8 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	370c      	adds	r7, #12
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr

08002a10 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b085      	sub	sp, #20
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	60f8      	str	r0, [r7, #12]
 8002a18:	60b9      	str	r1, [r7, #8]
 8002a1a:	607a      	str	r2, [r7, #4]
 8002a1c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002a2c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	683a      	ldr	r2, [r7, #0]
 8002a34:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	2b40      	cmp	r3, #64	; 0x40
 8002a3c:	d108      	bne.n	8002a50 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	68ba      	ldr	r2, [r7, #8]
 8002a4c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002a4e:	e007      	b.n	8002a60 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	68ba      	ldr	r2, [r7, #8]
 8002a56:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	60da      	str	r2, [r3, #12]
}
 8002a60:	bf00      	nop
 8002a62:	3714      	adds	r7, #20
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr

08002a6c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b085      	sub	sp, #20
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	3b10      	subs	r3, #16
 8002a7c:	4a13      	ldr	r2, [pc, #76]	; (8002acc <DMA_CalcBaseAndBitshift+0x60>)
 8002a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a82:	091b      	lsrs	r3, r3, #4
 8002a84:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002a86:	4a12      	ldr	r2, [pc, #72]	; (8002ad0 <DMA_CalcBaseAndBitshift+0x64>)
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	4413      	add	r3, r2
 8002a8c:	781b      	ldrb	r3, [r3, #0]
 8002a8e:	461a      	mov	r2, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2b03      	cmp	r3, #3
 8002a98:	d908      	bls.n	8002aac <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	4b0c      	ldr	r3, [pc, #48]	; (8002ad4 <DMA_CalcBaseAndBitshift+0x68>)
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	1d1a      	adds	r2, r3, #4
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	659a      	str	r2, [r3, #88]	; 0x58
 8002aaa:	e006      	b.n	8002aba <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	4b08      	ldr	r3, [pc, #32]	; (8002ad4 <DMA_CalcBaseAndBitshift+0x68>)
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3714      	adds	r7, #20
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr
 8002aca:	bf00      	nop
 8002acc:	aaaaaaab 	.word	0xaaaaaaab
 8002ad0:	0800f2ec 	.word	0x0800f2ec
 8002ad4:	fffffc00 	.word	0xfffffc00

08002ad8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b085      	sub	sp, #20
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ae8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	699b      	ldr	r3, [r3, #24]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d11f      	bne.n	8002b32 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	2b03      	cmp	r3, #3
 8002af6:	d855      	bhi.n	8002ba4 <DMA_CheckFifoParam+0xcc>
 8002af8:	a201      	add	r2, pc, #4	; (adr r2, 8002b00 <DMA_CheckFifoParam+0x28>)
 8002afa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002afe:	bf00      	nop
 8002b00:	08002b11 	.word	0x08002b11
 8002b04:	08002b23 	.word	0x08002b23
 8002b08:	08002b11 	.word	0x08002b11
 8002b0c:	08002ba5 	.word	0x08002ba5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d045      	beq.n	8002ba8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b20:	e042      	b.n	8002ba8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b26:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b2a:	d13f      	bne.n	8002bac <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b30:	e03c      	b.n	8002bac <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	699b      	ldr	r3, [r3, #24]
 8002b36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b3a:	d121      	bne.n	8002b80 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	2b03      	cmp	r3, #3
 8002b40:	d836      	bhi.n	8002bb0 <DMA_CheckFifoParam+0xd8>
 8002b42:	a201      	add	r2, pc, #4	; (adr r2, 8002b48 <DMA_CheckFifoParam+0x70>)
 8002b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b48:	08002b59 	.word	0x08002b59
 8002b4c:	08002b5f 	.word	0x08002b5f
 8002b50:	08002b59 	.word	0x08002b59
 8002b54:	08002b71 	.word	0x08002b71
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	73fb      	strb	r3, [r7, #15]
      break;
 8002b5c:	e02f      	b.n	8002bbe <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b62:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d024      	beq.n	8002bb4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b6e:	e021      	b.n	8002bb4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b74:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b78:	d11e      	bne.n	8002bb8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002b7e:	e01b      	b.n	8002bb8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d902      	bls.n	8002b8c <DMA_CheckFifoParam+0xb4>
 8002b86:	2b03      	cmp	r3, #3
 8002b88:	d003      	beq.n	8002b92 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002b8a:	e018      	b.n	8002bbe <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	73fb      	strb	r3, [r7, #15]
      break;
 8002b90:	e015      	b.n	8002bbe <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b96:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d00e      	beq.n	8002bbc <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	73fb      	strb	r3, [r7, #15]
      break;
 8002ba2:	e00b      	b.n	8002bbc <DMA_CheckFifoParam+0xe4>
      break;
 8002ba4:	bf00      	nop
 8002ba6:	e00a      	b.n	8002bbe <DMA_CheckFifoParam+0xe6>
      break;
 8002ba8:	bf00      	nop
 8002baa:	e008      	b.n	8002bbe <DMA_CheckFifoParam+0xe6>
      break;
 8002bac:	bf00      	nop
 8002bae:	e006      	b.n	8002bbe <DMA_CheckFifoParam+0xe6>
      break;
 8002bb0:	bf00      	nop
 8002bb2:	e004      	b.n	8002bbe <DMA_CheckFifoParam+0xe6>
      break;
 8002bb4:	bf00      	nop
 8002bb6:	e002      	b.n	8002bbe <DMA_CheckFifoParam+0xe6>
      break;   
 8002bb8:	bf00      	nop
 8002bba:	e000      	b.n	8002bbe <DMA_CheckFifoParam+0xe6>
      break;
 8002bbc:	bf00      	nop
    }
  } 
  
  return status; 
 8002bbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3714      	adds	r7, #20
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr

08002bcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b089      	sub	sp, #36	; 0x24
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002bde:	2300      	movs	r3, #0
 8002be0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002be2:	2300      	movs	r3, #0
 8002be4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002be6:	2300      	movs	r3, #0
 8002be8:	61fb      	str	r3, [r7, #28]
 8002bea:	e175      	b.n	8002ed8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002bec:	2201      	movs	r2, #1
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	697a      	ldr	r2, [r7, #20]
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c00:	693a      	ldr	r2, [r7, #16]
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	429a      	cmp	r2, r3
 8002c06:	f040 8164 	bne.w	8002ed2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d00b      	beq.n	8002c2a <HAL_GPIO_Init+0x5e>
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d007      	beq.n	8002c2a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002c1e:	2b11      	cmp	r3, #17
 8002c20:	d003      	beq.n	8002c2a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	2b12      	cmp	r3, #18
 8002c28:	d130      	bne.n	8002c8c <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	005b      	lsls	r3, r3, #1
 8002c34:	2203      	movs	r2, #3
 8002c36:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3a:	43db      	mvns	r3, r3
 8002c3c:	69ba      	ldr	r2, [r7, #24]
 8002c3e:	4013      	ands	r3, r2
 8002c40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	68da      	ldr	r2, [r3, #12]
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	005b      	lsls	r3, r3, #1
 8002c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4e:	69ba      	ldr	r2, [r7, #24]
 8002c50:	4313      	orrs	r3, r2
 8002c52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	69ba      	ldr	r2, [r7, #24]
 8002c58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c60:	2201      	movs	r2, #1
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	fa02 f303 	lsl.w	r3, r2, r3
 8002c68:	43db      	mvns	r3, r3
 8002c6a:	69ba      	ldr	r2, [r7, #24]
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	091b      	lsrs	r3, r3, #4
 8002c76:	f003 0201 	and.w	r2, r3, #1
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c80:	69ba      	ldr	r2, [r7, #24]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	69ba      	ldr	r2, [r7, #24]
 8002c8a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	005b      	lsls	r3, r3, #1
 8002c96:	2203      	movs	r2, #3
 8002c98:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9c:	43db      	mvns	r3, r3
 8002c9e:	69ba      	ldr	r2, [r7, #24]
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	689a      	ldr	r2, [r3, #8]
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	005b      	lsls	r3, r3, #1
 8002cac:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb0:	69ba      	ldr	r2, [r7, #24]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	69ba      	ldr	r2, [r7, #24]
 8002cba:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	2b02      	cmp	r3, #2
 8002cc2:	d003      	beq.n	8002ccc <HAL_GPIO_Init+0x100>
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	2b12      	cmp	r3, #18
 8002cca:	d123      	bne.n	8002d14 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002ccc:	69fb      	ldr	r3, [r7, #28]
 8002cce:	08da      	lsrs	r2, r3, #3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	3208      	adds	r2, #8
 8002cd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	f003 0307 	and.w	r3, r3, #7
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	220f      	movs	r2, #15
 8002ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce8:	43db      	mvns	r3, r3
 8002cea:	69ba      	ldr	r2, [r7, #24]
 8002cec:	4013      	ands	r3, r2
 8002cee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	691a      	ldr	r2, [r3, #16]
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	f003 0307 	and.w	r3, r3, #7
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002d00:	69ba      	ldr	r2, [r7, #24]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	08da      	lsrs	r2, r3, #3
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	3208      	adds	r2, #8
 8002d0e:	69b9      	ldr	r1, [r7, #24]
 8002d10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	005b      	lsls	r3, r3, #1
 8002d1e:	2203      	movs	r2, #3
 8002d20:	fa02 f303 	lsl.w	r3, r2, r3
 8002d24:	43db      	mvns	r3, r3
 8002d26:	69ba      	ldr	r2, [r7, #24]
 8002d28:	4013      	ands	r3, r2
 8002d2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	f003 0203 	and.w	r2, r3, #3
 8002d34:	69fb      	ldr	r3, [r7, #28]
 8002d36:	005b      	lsls	r3, r3, #1
 8002d38:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3c:	69ba      	ldr	r2, [r7, #24]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	69ba      	ldr	r2, [r7, #24]
 8002d46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	f000 80be 	beq.w	8002ed2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d56:	4b65      	ldr	r3, [pc, #404]	; (8002eec <HAL_GPIO_Init+0x320>)
 8002d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d5a:	4a64      	ldr	r2, [pc, #400]	; (8002eec <HAL_GPIO_Init+0x320>)
 8002d5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d60:	6453      	str	r3, [r2, #68]	; 0x44
 8002d62:	4b62      	ldr	r3, [pc, #392]	; (8002eec <HAL_GPIO_Init+0x320>)
 8002d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d6a:	60fb      	str	r3, [r7, #12]
 8002d6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002d6e:	4a60      	ldr	r2, [pc, #384]	; (8002ef0 <HAL_GPIO_Init+0x324>)
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	089b      	lsrs	r3, r3, #2
 8002d74:	3302      	adds	r3, #2
 8002d76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002d7c:	69fb      	ldr	r3, [r7, #28]
 8002d7e:	f003 0303 	and.w	r3, r3, #3
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	220f      	movs	r2, #15
 8002d86:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8a:	43db      	mvns	r3, r3
 8002d8c:	69ba      	ldr	r2, [r7, #24]
 8002d8e:	4013      	ands	r3, r2
 8002d90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4a57      	ldr	r2, [pc, #348]	; (8002ef4 <HAL_GPIO_Init+0x328>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d037      	beq.n	8002e0a <HAL_GPIO_Init+0x23e>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4a56      	ldr	r2, [pc, #344]	; (8002ef8 <HAL_GPIO_Init+0x32c>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d031      	beq.n	8002e06 <HAL_GPIO_Init+0x23a>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4a55      	ldr	r2, [pc, #340]	; (8002efc <HAL_GPIO_Init+0x330>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d02b      	beq.n	8002e02 <HAL_GPIO_Init+0x236>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4a54      	ldr	r2, [pc, #336]	; (8002f00 <HAL_GPIO_Init+0x334>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d025      	beq.n	8002dfe <HAL_GPIO_Init+0x232>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	4a53      	ldr	r2, [pc, #332]	; (8002f04 <HAL_GPIO_Init+0x338>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d01f      	beq.n	8002dfa <HAL_GPIO_Init+0x22e>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4a52      	ldr	r2, [pc, #328]	; (8002f08 <HAL_GPIO_Init+0x33c>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d019      	beq.n	8002df6 <HAL_GPIO_Init+0x22a>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4a51      	ldr	r2, [pc, #324]	; (8002f0c <HAL_GPIO_Init+0x340>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d013      	beq.n	8002df2 <HAL_GPIO_Init+0x226>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	4a50      	ldr	r2, [pc, #320]	; (8002f10 <HAL_GPIO_Init+0x344>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d00d      	beq.n	8002dee <HAL_GPIO_Init+0x222>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	4a4f      	ldr	r2, [pc, #316]	; (8002f14 <HAL_GPIO_Init+0x348>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d007      	beq.n	8002dea <HAL_GPIO_Init+0x21e>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	4a4e      	ldr	r2, [pc, #312]	; (8002f18 <HAL_GPIO_Init+0x34c>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d101      	bne.n	8002de6 <HAL_GPIO_Init+0x21a>
 8002de2:	2309      	movs	r3, #9
 8002de4:	e012      	b.n	8002e0c <HAL_GPIO_Init+0x240>
 8002de6:	230a      	movs	r3, #10
 8002de8:	e010      	b.n	8002e0c <HAL_GPIO_Init+0x240>
 8002dea:	2308      	movs	r3, #8
 8002dec:	e00e      	b.n	8002e0c <HAL_GPIO_Init+0x240>
 8002dee:	2307      	movs	r3, #7
 8002df0:	e00c      	b.n	8002e0c <HAL_GPIO_Init+0x240>
 8002df2:	2306      	movs	r3, #6
 8002df4:	e00a      	b.n	8002e0c <HAL_GPIO_Init+0x240>
 8002df6:	2305      	movs	r3, #5
 8002df8:	e008      	b.n	8002e0c <HAL_GPIO_Init+0x240>
 8002dfa:	2304      	movs	r3, #4
 8002dfc:	e006      	b.n	8002e0c <HAL_GPIO_Init+0x240>
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e004      	b.n	8002e0c <HAL_GPIO_Init+0x240>
 8002e02:	2302      	movs	r3, #2
 8002e04:	e002      	b.n	8002e0c <HAL_GPIO_Init+0x240>
 8002e06:	2301      	movs	r3, #1
 8002e08:	e000      	b.n	8002e0c <HAL_GPIO_Init+0x240>
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	69fa      	ldr	r2, [r7, #28]
 8002e0e:	f002 0203 	and.w	r2, r2, #3
 8002e12:	0092      	lsls	r2, r2, #2
 8002e14:	4093      	lsls	r3, r2
 8002e16:	69ba      	ldr	r2, [r7, #24]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002e1c:	4934      	ldr	r1, [pc, #208]	; (8002ef0 <HAL_GPIO_Init+0x324>)
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	089b      	lsrs	r3, r3, #2
 8002e22:	3302      	adds	r3, #2
 8002e24:	69ba      	ldr	r2, [r7, #24]
 8002e26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e2a:	4b3c      	ldr	r3, [pc, #240]	; (8002f1c <HAL_GPIO_Init+0x350>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	43db      	mvns	r3, r3
 8002e34:	69ba      	ldr	r2, [r7, #24]
 8002e36:	4013      	ands	r3, r2
 8002e38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d003      	beq.n	8002e4e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002e46:	69ba      	ldr	r2, [r7, #24]
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e4e:	4a33      	ldr	r2, [pc, #204]	; (8002f1c <HAL_GPIO_Init+0x350>)
 8002e50:	69bb      	ldr	r3, [r7, #24]
 8002e52:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002e54:	4b31      	ldr	r3, [pc, #196]	; (8002f1c <HAL_GPIO_Init+0x350>)
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	43db      	mvns	r3, r3
 8002e5e:	69ba      	ldr	r2, [r7, #24]
 8002e60:	4013      	ands	r3, r2
 8002e62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d003      	beq.n	8002e78 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002e70:	69ba      	ldr	r2, [r7, #24]
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	4313      	orrs	r3, r2
 8002e76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e78:	4a28      	ldr	r2, [pc, #160]	; (8002f1c <HAL_GPIO_Init+0x350>)
 8002e7a:	69bb      	ldr	r3, [r7, #24]
 8002e7c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e7e:	4b27      	ldr	r3, [pc, #156]	; (8002f1c <HAL_GPIO_Init+0x350>)
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	43db      	mvns	r3, r3
 8002e88:	69ba      	ldr	r2, [r7, #24]
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d003      	beq.n	8002ea2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002e9a:	69ba      	ldr	r2, [r7, #24]
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ea2:	4a1e      	ldr	r2, [pc, #120]	; (8002f1c <HAL_GPIO_Init+0x350>)
 8002ea4:	69bb      	ldr	r3, [r7, #24]
 8002ea6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ea8:	4b1c      	ldr	r3, [pc, #112]	; (8002f1c <HAL_GPIO_Init+0x350>)
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	43db      	mvns	r3, r3
 8002eb2:	69ba      	ldr	r2, [r7, #24]
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d003      	beq.n	8002ecc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002ec4:	69ba      	ldr	r2, [r7, #24]
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ecc:	4a13      	ldr	r2, [pc, #76]	; (8002f1c <HAL_GPIO_Init+0x350>)
 8002ece:	69bb      	ldr	r3, [r7, #24]
 8002ed0:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	3301      	adds	r3, #1
 8002ed6:	61fb      	str	r3, [r7, #28]
 8002ed8:	69fb      	ldr	r3, [r7, #28]
 8002eda:	2b0f      	cmp	r3, #15
 8002edc:	f67f ae86 	bls.w	8002bec <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002ee0:	bf00      	nop
 8002ee2:	3724      	adds	r7, #36	; 0x24
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr
 8002eec:	40023800 	.word	0x40023800
 8002ef0:	40013800 	.word	0x40013800
 8002ef4:	40020000 	.word	0x40020000
 8002ef8:	40020400 	.word	0x40020400
 8002efc:	40020800 	.word	0x40020800
 8002f00:	40020c00 	.word	0x40020c00
 8002f04:	40021000 	.word	0x40021000
 8002f08:	40021400 	.word	0x40021400
 8002f0c:	40021800 	.word	0x40021800
 8002f10:	40021c00 	.word	0x40021c00
 8002f14:	40022000 	.word	0x40022000
 8002f18:	40022400 	.word	0x40022400
 8002f1c:	40013c00 	.word	0x40013c00

08002f20 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b085      	sub	sp, #20
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
 8002f28:	460b      	mov	r3, r1
 8002f2a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	691a      	ldr	r2, [r3, #16]
 8002f30:	887b      	ldrh	r3, [r7, #2]
 8002f32:	4013      	ands	r3, r2
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d002      	beq.n	8002f3e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	73fb      	strb	r3, [r7, #15]
 8002f3c:	e001      	b.n	8002f42 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002f42:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3714      	adds	r7, #20
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr

08002f50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	460b      	mov	r3, r1
 8002f5a:	807b      	strh	r3, [r7, #2]
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f60:	787b      	ldrb	r3, [r7, #1]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d003      	beq.n	8002f6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f66:	887a      	ldrh	r2, [r7, #2]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002f6c:	e003      	b.n	8002f76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002f6e:	887b      	ldrh	r3, [r7, #2]
 8002f70:	041a      	lsls	r2, r3, #16
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	619a      	str	r2, [r3, #24]
}
 8002f76:	bf00      	nop
 8002f78:	370c      	adds	r7, #12
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr

08002f82 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f82:	b480      	push	{r7}
 8002f84:	b083      	sub	sp, #12
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	6078      	str	r0, [r7, #4]
 8002f8a:	460b      	mov	r3, r1
 8002f8c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	695a      	ldr	r2, [r3, #20]
 8002f92:	887b      	ldrh	r3, [r7, #2]
 8002f94:	4013      	ands	r3, r2
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d004      	beq.n	8002fa4 <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002f9a:	887b      	ldrh	r3, [r7, #2]
 8002f9c:	041a      	lsls	r2, r3, #16
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8002fa2:	e002      	b.n	8002faa <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002fa4:	887a      	ldrh	r2, [r7, #2]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	619a      	str	r2, [r3, #24]
}
 8002faa:	bf00      	nop
 8002fac:	370c      	adds	r7, #12
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr

08002fb6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002fb6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fb8:	b08f      	sub	sp, #60	; 0x3c
 8002fba:	af0a      	add	r7, sp, #40	; 0x28
 8002fbc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d101      	bne.n	8002fc8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e116      	b.n	80031f6 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d106      	bne.n	8002fe8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f7fe f95c 	bl	80012a0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2203      	movs	r2, #3
 8002fec:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ff4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d102      	bne.n	8003002 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2200      	movs	r2, #0
 8003000:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4618      	mov	r0, r3
 8003008:	f004 f9f2 	bl	80073f0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	603b      	str	r3, [r7, #0]
 8003012:	687e      	ldr	r6, [r7, #4]
 8003014:	466d      	mov	r5, sp
 8003016:	f106 0410 	add.w	r4, r6, #16
 800301a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800301c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800301e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003020:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003022:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003026:	e885 0003 	stmia.w	r5, {r0, r1}
 800302a:	1d33      	adds	r3, r6, #4
 800302c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800302e:	6838      	ldr	r0, [r7, #0]
 8003030:	f004 f986 	bl	8007340 <USB_CoreInit>
 8003034:	4603      	mov	r3, r0
 8003036:	2b00      	cmp	r3, #0
 8003038:	d005      	beq.n	8003046 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2202      	movs	r2, #2
 800303e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e0d7      	b.n	80031f6 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	2100      	movs	r1, #0
 800304c:	4618      	mov	r0, r3
 800304e:	f004 f9e0 	bl	8007412 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003052:	2300      	movs	r3, #0
 8003054:	73fb      	strb	r3, [r7, #15]
 8003056:	e04a      	b.n	80030ee <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003058:	7bfa      	ldrb	r2, [r7, #15]
 800305a:	6879      	ldr	r1, [r7, #4]
 800305c:	4613      	mov	r3, r2
 800305e:	00db      	lsls	r3, r3, #3
 8003060:	1a9b      	subs	r3, r3, r2
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	440b      	add	r3, r1
 8003066:	333d      	adds	r3, #61	; 0x3d
 8003068:	2201      	movs	r2, #1
 800306a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800306c:	7bfa      	ldrb	r2, [r7, #15]
 800306e:	6879      	ldr	r1, [r7, #4]
 8003070:	4613      	mov	r3, r2
 8003072:	00db      	lsls	r3, r3, #3
 8003074:	1a9b      	subs	r3, r3, r2
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	440b      	add	r3, r1
 800307a:	333c      	adds	r3, #60	; 0x3c
 800307c:	7bfa      	ldrb	r2, [r7, #15]
 800307e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003080:	7bfa      	ldrb	r2, [r7, #15]
 8003082:	7bfb      	ldrb	r3, [r7, #15]
 8003084:	b298      	uxth	r0, r3
 8003086:	6879      	ldr	r1, [r7, #4]
 8003088:	4613      	mov	r3, r2
 800308a:	00db      	lsls	r3, r3, #3
 800308c:	1a9b      	subs	r3, r3, r2
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	440b      	add	r3, r1
 8003092:	3342      	adds	r3, #66	; 0x42
 8003094:	4602      	mov	r2, r0
 8003096:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003098:	7bfa      	ldrb	r2, [r7, #15]
 800309a:	6879      	ldr	r1, [r7, #4]
 800309c:	4613      	mov	r3, r2
 800309e:	00db      	lsls	r3, r3, #3
 80030a0:	1a9b      	subs	r3, r3, r2
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	440b      	add	r3, r1
 80030a6:	333f      	adds	r3, #63	; 0x3f
 80030a8:	2200      	movs	r2, #0
 80030aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80030ac:	7bfa      	ldrb	r2, [r7, #15]
 80030ae:	6879      	ldr	r1, [r7, #4]
 80030b0:	4613      	mov	r3, r2
 80030b2:	00db      	lsls	r3, r3, #3
 80030b4:	1a9b      	subs	r3, r3, r2
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	440b      	add	r3, r1
 80030ba:	3344      	adds	r3, #68	; 0x44
 80030bc:	2200      	movs	r2, #0
 80030be:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80030c0:	7bfa      	ldrb	r2, [r7, #15]
 80030c2:	6879      	ldr	r1, [r7, #4]
 80030c4:	4613      	mov	r3, r2
 80030c6:	00db      	lsls	r3, r3, #3
 80030c8:	1a9b      	subs	r3, r3, r2
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	440b      	add	r3, r1
 80030ce:	3348      	adds	r3, #72	; 0x48
 80030d0:	2200      	movs	r2, #0
 80030d2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80030d4:	7bfa      	ldrb	r2, [r7, #15]
 80030d6:	6879      	ldr	r1, [r7, #4]
 80030d8:	4613      	mov	r3, r2
 80030da:	00db      	lsls	r3, r3, #3
 80030dc:	1a9b      	subs	r3, r3, r2
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	440b      	add	r3, r1
 80030e2:	3350      	adds	r3, #80	; 0x50
 80030e4:	2200      	movs	r2, #0
 80030e6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030e8:	7bfb      	ldrb	r3, [r7, #15]
 80030ea:	3301      	adds	r3, #1
 80030ec:	73fb      	strb	r3, [r7, #15]
 80030ee:	7bfa      	ldrb	r2, [r7, #15]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d3af      	bcc.n	8003058 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030f8:	2300      	movs	r3, #0
 80030fa:	73fb      	strb	r3, [r7, #15]
 80030fc:	e044      	b.n	8003188 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80030fe:	7bfa      	ldrb	r2, [r7, #15]
 8003100:	6879      	ldr	r1, [r7, #4]
 8003102:	4613      	mov	r3, r2
 8003104:	00db      	lsls	r3, r3, #3
 8003106:	1a9b      	subs	r3, r3, r2
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	440b      	add	r3, r1
 800310c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003110:	2200      	movs	r2, #0
 8003112:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003114:	7bfa      	ldrb	r2, [r7, #15]
 8003116:	6879      	ldr	r1, [r7, #4]
 8003118:	4613      	mov	r3, r2
 800311a:	00db      	lsls	r3, r3, #3
 800311c:	1a9b      	subs	r3, r3, r2
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	440b      	add	r3, r1
 8003122:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003126:	7bfa      	ldrb	r2, [r7, #15]
 8003128:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800312a:	7bfa      	ldrb	r2, [r7, #15]
 800312c:	6879      	ldr	r1, [r7, #4]
 800312e:	4613      	mov	r3, r2
 8003130:	00db      	lsls	r3, r3, #3
 8003132:	1a9b      	subs	r3, r3, r2
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	440b      	add	r3, r1
 8003138:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800313c:	2200      	movs	r2, #0
 800313e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003140:	7bfa      	ldrb	r2, [r7, #15]
 8003142:	6879      	ldr	r1, [r7, #4]
 8003144:	4613      	mov	r3, r2
 8003146:	00db      	lsls	r3, r3, #3
 8003148:	1a9b      	subs	r3, r3, r2
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	440b      	add	r3, r1
 800314e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003152:	2200      	movs	r2, #0
 8003154:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003156:	7bfa      	ldrb	r2, [r7, #15]
 8003158:	6879      	ldr	r1, [r7, #4]
 800315a:	4613      	mov	r3, r2
 800315c:	00db      	lsls	r3, r3, #3
 800315e:	1a9b      	subs	r3, r3, r2
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	440b      	add	r3, r1
 8003164:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003168:	2200      	movs	r2, #0
 800316a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800316c:	7bfa      	ldrb	r2, [r7, #15]
 800316e:	6879      	ldr	r1, [r7, #4]
 8003170:	4613      	mov	r3, r2
 8003172:	00db      	lsls	r3, r3, #3
 8003174:	1a9b      	subs	r3, r3, r2
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	440b      	add	r3, r1
 800317a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800317e:	2200      	movs	r2, #0
 8003180:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003182:	7bfb      	ldrb	r3, [r7, #15]
 8003184:	3301      	adds	r3, #1
 8003186:	73fb      	strb	r3, [r7, #15]
 8003188:	7bfa      	ldrb	r2, [r7, #15]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	429a      	cmp	r2, r3
 8003190:	d3b5      	bcc.n	80030fe <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	603b      	str	r3, [r7, #0]
 8003198:	687e      	ldr	r6, [r7, #4]
 800319a:	466d      	mov	r5, sp
 800319c:	f106 0410 	add.w	r4, r6, #16
 80031a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031a8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80031ac:	e885 0003 	stmia.w	r5, {r0, r1}
 80031b0:	1d33      	adds	r3, r6, #4
 80031b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80031b4:	6838      	ldr	r0, [r7, #0]
 80031b6:	f004 f957 	bl	8007468 <USB_DevInit>
 80031ba:	4603      	mov	r3, r0
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d005      	beq.n	80031cc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2202      	movs	r2, #2
 80031c4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e014      	b.n	80031f6 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2200      	movs	r2, #0
 80031d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2201      	movs	r2, #1
 80031d8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d102      	bne.n	80031ea <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	f000 f80b 	bl	8003200 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4618      	mov	r0, r3
 80031f0:	f004 fb09 	bl	8007806 <USB_DevDisconnect>

  return HAL_OK;
 80031f4:	2300      	movs	r3, #0
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3714      	adds	r7, #20
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003200 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003200:	b480      	push	{r7}
 8003202:	b085      	sub	sp, #20
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2201      	movs	r2, #1
 8003212:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2200      	movs	r2, #0
 800321a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	699b      	ldr	r3, [r3, #24]
 8003222:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800322e:	4b05      	ldr	r3, [pc, #20]	; (8003244 <HAL_PCDEx_ActivateLPM+0x44>)
 8003230:	4313      	orrs	r3, r2
 8003232:	68fa      	ldr	r2, [r7, #12]
 8003234:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003236:	2300      	movs	r3, #0
}
 8003238:	4618      	mov	r0, r3
 800323a:	3714      	adds	r7, #20
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr
 8003244:	10000003 	.word	0x10000003

08003248 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003248:	b480      	push	{r7}
 800324a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800324c:	4b05      	ldr	r3, [pc, #20]	; (8003264 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a04      	ldr	r2, [pc, #16]	; (8003264 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003252:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003256:	6013      	str	r3, [r2, #0]
}
 8003258:	bf00      	nop
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr
 8003262:	bf00      	nop
 8003264:	40007000 	.word	0x40007000

08003268 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b082      	sub	sp, #8
 800326c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800326e:	2300      	movs	r3, #0
 8003270:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003272:	4b23      	ldr	r3, [pc, #140]	; (8003300 <HAL_PWREx_EnableOverDrive+0x98>)
 8003274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003276:	4a22      	ldr	r2, [pc, #136]	; (8003300 <HAL_PWREx_EnableOverDrive+0x98>)
 8003278:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800327c:	6413      	str	r3, [r2, #64]	; 0x40
 800327e:	4b20      	ldr	r3, [pc, #128]	; (8003300 <HAL_PWREx_EnableOverDrive+0x98>)
 8003280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003282:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003286:	603b      	str	r3, [r7, #0]
 8003288:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800328a:	4b1e      	ldr	r3, [pc, #120]	; (8003304 <HAL_PWREx_EnableOverDrive+0x9c>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a1d      	ldr	r2, [pc, #116]	; (8003304 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003290:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003294:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003296:	f7fe f955 	bl	8001544 <HAL_GetTick>
 800329a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800329c:	e009      	b.n	80032b2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800329e:	f7fe f951 	bl	8001544 <HAL_GetTick>
 80032a2:	4602      	mov	r2, r0
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	1ad3      	subs	r3, r2, r3
 80032a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80032ac:	d901      	bls.n	80032b2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	e022      	b.n	80032f8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80032b2:	4b14      	ldr	r3, [pc, #80]	; (8003304 <HAL_PWREx_EnableOverDrive+0x9c>)
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032be:	d1ee      	bne.n	800329e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80032c0:	4b10      	ldr	r3, [pc, #64]	; (8003304 <HAL_PWREx_EnableOverDrive+0x9c>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a0f      	ldr	r2, [pc, #60]	; (8003304 <HAL_PWREx_EnableOverDrive+0x9c>)
 80032c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032ca:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80032cc:	f7fe f93a 	bl	8001544 <HAL_GetTick>
 80032d0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80032d2:	e009      	b.n	80032e8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80032d4:	f7fe f936 	bl	8001544 <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80032e2:	d901      	bls.n	80032e8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80032e4:	2303      	movs	r3, #3
 80032e6:	e007      	b.n	80032f8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80032e8:	4b06      	ldr	r3, [pc, #24]	; (8003304 <HAL_PWREx_EnableOverDrive+0x9c>)
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80032f4:	d1ee      	bne.n	80032d4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80032f6:	2300      	movs	r3, #0
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3708      	adds	r7, #8
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	40023800 	.word	0x40023800
 8003304:	40007000 	.word	0x40007000

08003308 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b086      	sub	sp, #24
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003310:	2300      	movs	r3, #0
 8003312:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d101      	bne.n	800331e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e29b      	b.n	8003856 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0301 	and.w	r3, r3, #1
 8003326:	2b00      	cmp	r3, #0
 8003328:	f000 8087 	beq.w	800343a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800332c:	4b96      	ldr	r3, [pc, #600]	; (8003588 <HAL_RCC_OscConfig+0x280>)
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	f003 030c 	and.w	r3, r3, #12
 8003334:	2b04      	cmp	r3, #4
 8003336:	d00c      	beq.n	8003352 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003338:	4b93      	ldr	r3, [pc, #588]	; (8003588 <HAL_RCC_OscConfig+0x280>)
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	f003 030c 	and.w	r3, r3, #12
 8003340:	2b08      	cmp	r3, #8
 8003342:	d112      	bne.n	800336a <HAL_RCC_OscConfig+0x62>
 8003344:	4b90      	ldr	r3, [pc, #576]	; (8003588 <HAL_RCC_OscConfig+0x280>)
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800334c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003350:	d10b      	bne.n	800336a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003352:	4b8d      	ldr	r3, [pc, #564]	; (8003588 <HAL_RCC_OscConfig+0x280>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d06c      	beq.n	8003438 <HAL_RCC_OscConfig+0x130>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d168      	bne.n	8003438 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e275      	b.n	8003856 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003372:	d106      	bne.n	8003382 <HAL_RCC_OscConfig+0x7a>
 8003374:	4b84      	ldr	r3, [pc, #528]	; (8003588 <HAL_RCC_OscConfig+0x280>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a83      	ldr	r2, [pc, #524]	; (8003588 <HAL_RCC_OscConfig+0x280>)
 800337a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800337e:	6013      	str	r3, [r2, #0]
 8003380:	e02e      	b.n	80033e0 <HAL_RCC_OscConfig+0xd8>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d10c      	bne.n	80033a4 <HAL_RCC_OscConfig+0x9c>
 800338a:	4b7f      	ldr	r3, [pc, #508]	; (8003588 <HAL_RCC_OscConfig+0x280>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a7e      	ldr	r2, [pc, #504]	; (8003588 <HAL_RCC_OscConfig+0x280>)
 8003390:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003394:	6013      	str	r3, [r2, #0]
 8003396:	4b7c      	ldr	r3, [pc, #496]	; (8003588 <HAL_RCC_OscConfig+0x280>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a7b      	ldr	r2, [pc, #492]	; (8003588 <HAL_RCC_OscConfig+0x280>)
 800339c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033a0:	6013      	str	r3, [r2, #0]
 80033a2:	e01d      	b.n	80033e0 <HAL_RCC_OscConfig+0xd8>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033ac:	d10c      	bne.n	80033c8 <HAL_RCC_OscConfig+0xc0>
 80033ae:	4b76      	ldr	r3, [pc, #472]	; (8003588 <HAL_RCC_OscConfig+0x280>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a75      	ldr	r2, [pc, #468]	; (8003588 <HAL_RCC_OscConfig+0x280>)
 80033b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033b8:	6013      	str	r3, [r2, #0]
 80033ba:	4b73      	ldr	r3, [pc, #460]	; (8003588 <HAL_RCC_OscConfig+0x280>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a72      	ldr	r2, [pc, #456]	; (8003588 <HAL_RCC_OscConfig+0x280>)
 80033c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033c4:	6013      	str	r3, [r2, #0]
 80033c6:	e00b      	b.n	80033e0 <HAL_RCC_OscConfig+0xd8>
 80033c8:	4b6f      	ldr	r3, [pc, #444]	; (8003588 <HAL_RCC_OscConfig+0x280>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a6e      	ldr	r2, [pc, #440]	; (8003588 <HAL_RCC_OscConfig+0x280>)
 80033ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033d2:	6013      	str	r3, [r2, #0]
 80033d4:	4b6c      	ldr	r3, [pc, #432]	; (8003588 <HAL_RCC_OscConfig+0x280>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a6b      	ldr	r2, [pc, #428]	; (8003588 <HAL_RCC_OscConfig+0x280>)
 80033da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d013      	beq.n	8003410 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033e8:	f7fe f8ac 	bl	8001544 <HAL_GetTick>
 80033ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033ee:	e008      	b.n	8003402 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033f0:	f7fe f8a8 	bl	8001544 <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	2b64      	cmp	r3, #100	; 0x64
 80033fc:	d901      	bls.n	8003402 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	e229      	b.n	8003856 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003402:	4b61      	ldr	r3, [pc, #388]	; (8003588 <HAL_RCC_OscConfig+0x280>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800340a:	2b00      	cmp	r3, #0
 800340c:	d0f0      	beq.n	80033f0 <HAL_RCC_OscConfig+0xe8>
 800340e:	e014      	b.n	800343a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003410:	f7fe f898 	bl	8001544 <HAL_GetTick>
 8003414:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003416:	e008      	b.n	800342a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003418:	f7fe f894 	bl	8001544 <HAL_GetTick>
 800341c:	4602      	mov	r2, r0
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	2b64      	cmp	r3, #100	; 0x64
 8003424:	d901      	bls.n	800342a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	e215      	b.n	8003856 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800342a:	4b57      	ldr	r3, [pc, #348]	; (8003588 <HAL_RCC_OscConfig+0x280>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003432:	2b00      	cmp	r3, #0
 8003434:	d1f0      	bne.n	8003418 <HAL_RCC_OscConfig+0x110>
 8003436:	e000      	b.n	800343a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003438:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0302 	and.w	r3, r3, #2
 8003442:	2b00      	cmp	r3, #0
 8003444:	d069      	beq.n	800351a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003446:	4b50      	ldr	r3, [pc, #320]	; (8003588 <HAL_RCC_OscConfig+0x280>)
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	f003 030c 	and.w	r3, r3, #12
 800344e:	2b00      	cmp	r3, #0
 8003450:	d00b      	beq.n	800346a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003452:	4b4d      	ldr	r3, [pc, #308]	; (8003588 <HAL_RCC_OscConfig+0x280>)
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	f003 030c 	and.w	r3, r3, #12
 800345a:	2b08      	cmp	r3, #8
 800345c:	d11c      	bne.n	8003498 <HAL_RCC_OscConfig+0x190>
 800345e:	4b4a      	ldr	r3, [pc, #296]	; (8003588 <HAL_RCC_OscConfig+0x280>)
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003466:	2b00      	cmp	r3, #0
 8003468:	d116      	bne.n	8003498 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800346a:	4b47      	ldr	r3, [pc, #284]	; (8003588 <HAL_RCC_OscConfig+0x280>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 0302 	and.w	r3, r3, #2
 8003472:	2b00      	cmp	r3, #0
 8003474:	d005      	beq.n	8003482 <HAL_RCC_OscConfig+0x17a>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	68db      	ldr	r3, [r3, #12]
 800347a:	2b01      	cmp	r3, #1
 800347c:	d001      	beq.n	8003482 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e1e9      	b.n	8003856 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003482:	4b41      	ldr	r3, [pc, #260]	; (8003588 <HAL_RCC_OscConfig+0x280>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	691b      	ldr	r3, [r3, #16]
 800348e:	00db      	lsls	r3, r3, #3
 8003490:	493d      	ldr	r1, [pc, #244]	; (8003588 <HAL_RCC_OscConfig+0x280>)
 8003492:	4313      	orrs	r3, r2
 8003494:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003496:	e040      	b.n	800351a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d023      	beq.n	80034e8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034a0:	4b39      	ldr	r3, [pc, #228]	; (8003588 <HAL_RCC_OscConfig+0x280>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a38      	ldr	r2, [pc, #224]	; (8003588 <HAL_RCC_OscConfig+0x280>)
 80034a6:	f043 0301 	orr.w	r3, r3, #1
 80034aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ac:	f7fe f84a 	bl	8001544 <HAL_GetTick>
 80034b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034b2:	e008      	b.n	80034c6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034b4:	f7fe f846 	bl	8001544 <HAL_GetTick>
 80034b8:	4602      	mov	r2, r0
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	2b02      	cmp	r3, #2
 80034c0:	d901      	bls.n	80034c6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	e1c7      	b.n	8003856 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034c6:	4b30      	ldr	r3, [pc, #192]	; (8003588 <HAL_RCC_OscConfig+0x280>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0302 	and.w	r3, r3, #2
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d0f0      	beq.n	80034b4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034d2:	4b2d      	ldr	r3, [pc, #180]	; (8003588 <HAL_RCC_OscConfig+0x280>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	691b      	ldr	r3, [r3, #16]
 80034de:	00db      	lsls	r3, r3, #3
 80034e0:	4929      	ldr	r1, [pc, #164]	; (8003588 <HAL_RCC_OscConfig+0x280>)
 80034e2:	4313      	orrs	r3, r2
 80034e4:	600b      	str	r3, [r1, #0]
 80034e6:	e018      	b.n	800351a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034e8:	4b27      	ldr	r3, [pc, #156]	; (8003588 <HAL_RCC_OscConfig+0x280>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a26      	ldr	r2, [pc, #152]	; (8003588 <HAL_RCC_OscConfig+0x280>)
 80034ee:	f023 0301 	bic.w	r3, r3, #1
 80034f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034f4:	f7fe f826 	bl	8001544 <HAL_GetTick>
 80034f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034fa:	e008      	b.n	800350e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034fc:	f7fe f822 	bl	8001544 <HAL_GetTick>
 8003500:	4602      	mov	r2, r0
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	2b02      	cmp	r3, #2
 8003508:	d901      	bls.n	800350e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e1a3      	b.n	8003856 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800350e:	4b1e      	ldr	r3, [pc, #120]	; (8003588 <HAL_RCC_OscConfig+0x280>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 0302 	and.w	r3, r3, #2
 8003516:	2b00      	cmp	r3, #0
 8003518:	d1f0      	bne.n	80034fc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 0308 	and.w	r3, r3, #8
 8003522:	2b00      	cmp	r3, #0
 8003524:	d038      	beq.n	8003598 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	695b      	ldr	r3, [r3, #20]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d019      	beq.n	8003562 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800352e:	4b16      	ldr	r3, [pc, #88]	; (8003588 <HAL_RCC_OscConfig+0x280>)
 8003530:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003532:	4a15      	ldr	r2, [pc, #84]	; (8003588 <HAL_RCC_OscConfig+0x280>)
 8003534:	f043 0301 	orr.w	r3, r3, #1
 8003538:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800353a:	f7fe f803 	bl	8001544 <HAL_GetTick>
 800353e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003540:	e008      	b.n	8003554 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003542:	f7fd ffff 	bl	8001544 <HAL_GetTick>
 8003546:	4602      	mov	r2, r0
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	1ad3      	subs	r3, r2, r3
 800354c:	2b02      	cmp	r3, #2
 800354e:	d901      	bls.n	8003554 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003550:	2303      	movs	r3, #3
 8003552:	e180      	b.n	8003856 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003554:	4b0c      	ldr	r3, [pc, #48]	; (8003588 <HAL_RCC_OscConfig+0x280>)
 8003556:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003558:	f003 0302 	and.w	r3, r3, #2
 800355c:	2b00      	cmp	r3, #0
 800355e:	d0f0      	beq.n	8003542 <HAL_RCC_OscConfig+0x23a>
 8003560:	e01a      	b.n	8003598 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003562:	4b09      	ldr	r3, [pc, #36]	; (8003588 <HAL_RCC_OscConfig+0x280>)
 8003564:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003566:	4a08      	ldr	r2, [pc, #32]	; (8003588 <HAL_RCC_OscConfig+0x280>)
 8003568:	f023 0301 	bic.w	r3, r3, #1
 800356c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800356e:	f7fd ffe9 	bl	8001544 <HAL_GetTick>
 8003572:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003574:	e00a      	b.n	800358c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003576:	f7fd ffe5 	bl	8001544 <HAL_GetTick>
 800357a:	4602      	mov	r2, r0
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	1ad3      	subs	r3, r2, r3
 8003580:	2b02      	cmp	r3, #2
 8003582:	d903      	bls.n	800358c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003584:	2303      	movs	r3, #3
 8003586:	e166      	b.n	8003856 <HAL_RCC_OscConfig+0x54e>
 8003588:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800358c:	4b92      	ldr	r3, [pc, #584]	; (80037d8 <HAL_RCC_OscConfig+0x4d0>)
 800358e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003590:	f003 0302 	and.w	r3, r3, #2
 8003594:	2b00      	cmp	r3, #0
 8003596:	d1ee      	bne.n	8003576 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 0304 	and.w	r3, r3, #4
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	f000 80a4 	beq.w	80036ee <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035a6:	4b8c      	ldr	r3, [pc, #560]	; (80037d8 <HAL_RCC_OscConfig+0x4d0>)
 80035a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d10d      	bne.n	80035ce <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80035b2:	4b89      	ldr	r3, [pc, #548]	; (80037d8 <HAL_RCC_OscConfig+0x4d0>)
 80035b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b6:	4a88      	ldr	r2, [pc, #544]	; (80037d8 <HAL_RCC_OscConfig+0x4d0>)
 80035b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035bc:	6413      	str	r3, [r2, #64]	; 0x40
 80035be:	4b86      	ldr	r3, [pc, #536]	; (80037d8 <HAL_RCC_OscConfig+0x4d0>)
 80035c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035c6:	60bb      	str	r3, [r7, #8]
 80035c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035ca:	2301      	movs	r3, #1
 80035cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035ce:	4b83      	ldr	r3, [pc, #524]	; (80037dc <HAL_RCC_OscConfig+0x4d4>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d118      	bne.n	800360c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80035da:	4b80      	ldr	r3, [pc, #512]	; (80037dc <HAL_RCC_OscConfig+0x4d4>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a7f      	ldr	r2, [pc, #508]	; (80037dc <HAL_RCC_OscConfig+0x4d4>)
 80035e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035e6:	f7fd ffad 	bl	8001544 <HAL_GetTick>
 80035ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035ec:	e008      	b.n	8003600 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035ee:	f7fd ffa9 	bl	8001544 <HAL_GetTick>
 80035f2:	4602      	mov	r2, r0
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	1ad3      	subs	r3, r2, r3
 80035f8:	2b64      	cmp	r3, #100	; 0x64
 80035fa:	d901      	bls.n	8003600 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80035fc:	2303      	movs	r3, #3
 80035fe:	e12a      	b.n	8003856 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003600:	4b76      	ldr	r3, [pc, #472]	; (80037dc <HAL_RCC_OscConfig+0x4d4>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003608:	2b00      	cmp	r3, #0
 800360a:	d0f0      	beq.n	80035ee <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	2b01      	cmp	r3, #1
 8003612:	d106      	bne.n	8003622 <HAL_RCC_OscConfig+0x31a>
 8003614:	4b70      	ldr	r3, [pc, #448]	; (80037d8 <HAL_RCC_OscConfig+0x4d0>)
 8003616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003618:	4a6f      	ldr	r2, [pc, #444]	; (80037d8 <HAL_RCC_OscConfig+0x4d0>)
 800361a:	f043 0301 	orr.w	r3, r3, #1
 800361e:	6713      	str	r3, [r2, #112]	; 0x70
 8003620:	e02d      	b.n	800367e <HAL_RCC_OscConfig+0x376>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d10c      	bne.n	8003644 <HAL_RCC_OscConfig+0x33c>
 800362a:	4b6b      	ldr	r3, [pc, #428]	; (80037d8 <HAL_RCC_OscConfig+0x4d0>)
 800362c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800362e:	4a6a      	ldr	r2, [pc, #424]	; (80037d8 <HAL_RCC_OscConfig+0x4d0>)
 8003630:	f023 0301 	bic.w	r3, r3, #1
 8003634:	6713      	str	r3, [r2, #112]	; 0x70
 8003636:	4b68      	ldr	r3, [pc, #416]	; (80037d8 <HAL_RCC_OscConfig+0x4d0>)
 8003638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800363a:	4a67      	ldr	r2, [pc, #412]	; (80037d8 <HAL_RCC_OscConfig+0x4d0>)
 800363c:	f023 0304 	bic.w	r3, r3, #4
 8003640:	6713      	str	r3, [r2, #112]	; 0x70
 8003642:	e01c      	b.n	800367e <HAL_RCC_OscConfig+0x376>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	2b05      	cmp	r3, #5
 800364a:	d10c      	bne.n	8003666 <HAL_RCC_OscConfig+0x35e>
 800364c:	4b62      	ldr	r3, [pc, #392]	; (80037d8 <HAL_RCC_OscConfig+0x4d0>)
 800364e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003650:	4a61      	ldr	r2, [pc, #388]	; (80037d8 <HAL_RCC_OscConfig+0x4d0>)
 8003652:	f043 0304 	orr.w	r3, r3, #4
 8003656:	6713      	str	r3, [r2, #112]	; 0x70
 8003658:	4b5f      	ldr	r3, [pc, #380]	; (80037d8 <HAL_RCC_OscConfig+0x4d0>)
 800365a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800365c:	4a5e      	ldr	r2, [pc, #376]	; (80037d8 <HAL_RCC_OscConfig+0x4d0>)
 800365e:	f043 0301 	orr.w	r3, r3, #1
 8003662:	6713      	str	r3, [r2, #112]	; 0x70
 8003664:	e00b      	b.n	800367e <HAL_RCC_OscConfig+0x376>
 8003666:	4b5c      	ldr	r3, [pc, #368]	; (80037d8 <HAL_RCC_OscConfig+0x4d0>)
 8003668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800366a:	4a5b      	ldr	r2, [pc, #364]	; (80037d8 <HAL_RCC_OscConfig+0x4d0>)
 800366c:	f023 0301 	bic.w	r3, r3, #1
 8003670:	6713      	str	r3, [r2, #112]	; 0x70
 8003672:	4b59      	ldr	r3, [pc, #356]	; (80037d8 <HAL_RCC_OscConfig+0x4d0>)
 8003674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003676:	4a58      	ldr	r2, [pc, #352]	; (80037d8 <HAL_RCC_OscConfig+0x4d0>)
 8003678:	f023 0304 	bic.w	r3, r3, #4
 800367c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d015      	beq.n	80036b2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003686:	f7fd ff5d 	bl	8001544 <HAL_GetTick>
 800368a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800368c:	e00a      	b.n	80036a4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800368e:	f7fd ff59 	bl	8001544 <HAL_GetTick>
 8003692:	4602      	mov	r2, r0
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	f241 3288 	movw	r2, #5000	; 0x1388
 800369c:	4293      	cmp	r3, r2
 800369e:	d901      	bls.n	80036a4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80036a0:	2303      	movs	r3, #3
 80036a2:	e0d8      	b.n	8003856 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036a4:	4b4c      	ldr	r3, [pc, #304]	; (80037d8 <HAL_RCC_OscConfig+0x4d0>)
 80036a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036a8:	f003 0302 	and.w	r3, r3, #2
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d0ee      	beq.n	800368e <HAL_RCC_OscConfig+0x386>
 80036b0:	e014      	b.n	80036dc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036b2:	f7fd ff47 	bl	8001544 <HAL_GetTick>
 80036b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036b8:	e00a      	b.n	80036d0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036ba:	f7fd ff43 	bl	8001544 <HAL_GetTick>
 80036be:	4602      	mov	r2, r0
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	1ad3      	subs	r3, r2, r3
 80036c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d901      	bls.n	80036d0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80036cc:	2303      	movs	r3, #3
 80036ce:	e0c2      	b.n	8003856 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036d0:	4b41      	ldr	r3, [pc, #260]	; (80037d8 <HAL_RCC_OscConfig+0x4d0>)
 80036d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036d4:	f003 0302 	and.w	r3, r3, #2
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d1ee      	bne.n	80036ba <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80036dc:	7dfb      	ldrb	r3, [r7, #23]
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d105      	bne.n	80036ee <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036e2:	4b3d      	ldr	r3, [pc, #244]	; (80037d8 <HAL_RCC_OscConfig+0x4d0>)
 80036e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e6:	4a3c      	ldr	r2, [pc, #240]	; (80037d8 <HAL_RCC_OscConfig+0x4d0>)
 80036e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036ec:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	699b      	ldr	r3, [r3, #24]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	f000 80ae 	beq.w	8003854 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036f8:	4b37      	ldr	r3, [pc, #220]	; (80037d8 <HAL_RCC_OscConfig+0x4d0>)
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	f003 030c 	and.w	r3, r3, #12
 8003700:	2b08      	cmp	r3, #8
 8003702:	d06d      	beq.n	80037e0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	699b      	ldr	r3, [r3, #24]
 8003708:	2b02      	cmp	r3, #2
 800370a:	d14b      	bne.n	80037a4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800370c:	4b32      	ldr	r3, [pc, #200]	; (80037d8 <HAL_RCC_OscConfig+0x4d0>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a31      	ldr	r2, [pc, #196]	; (80037d8 <HAL_RCC_OscConfig+0x4d0>)
 8003712:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003716:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003718:	f7fd ff14 	bl	8001544 <HAL_GetTick>
 800371c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800371e:	e008      	b.n	8003732 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003720:	f7fd ff10 	bl	8001544 <HAL_GetTick>
 8003724:	4602      	mov	r2, r0
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	2b02      	cmp	r3, #2
 800372c:	d901      	bls.n	8003732 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	e091      	b.n	8003856 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003732:	4b29      	ldr	r3, [pc, #164]	; (80037d8 <HAL_RCC_OscConfig+0x4d0>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d1f0      	bne.n	8003720 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	69da      	ldr	r2, [r3, #28]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6a1b      	ldr	r3, [r3, #32]
 8003746:	431a      	orrs	r2, r3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374c:	019b      	lsls	r3, r3, #6
 800374e:	431a      	orrs	r2, r3
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003754:	085b      	lsrs	r3, r3, #1
 8003756:	3b01      	subs	r3, #1
 8003758:	041b      	lsls	r3, r3, #16
 800375a:	431a      	orrs	r2, r3
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003760:	061b      	lsls	r3, r3, #24
 8003762:	431a      	orrs	r2, r3
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003768:	071b      	lsls	r3, r3, #28
 800376a:	491b      	ldr	r1, [pc, #108]	; (80037d8 <HAL_RCC_OscConfig+0x4d0>)
 800376c:	4313      	orrs	r3, r2
 800376e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003770:	4b19      	ldr	r3, [pc, #100]	; (80037d8 <HAL_RCC_OscConfig+0x4d0>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a18      	ldr	r2, [pc, #96]	; (80037d8 <HAL_RCC_OscConfig+0x4d0>)
 8003776:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800377a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800377c:	f7fd fee2 	bl	8001544 <HAL_GetTick>
 8003780:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003782:	e008      	b.n	8003796 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003784:	f7fd fede 	bl	8001544 <HAL_GetTick>
 8003788:	4602      	mov	r2, r0
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	2b02      	cmp	r3, #2
 8003790:	d901      	bls.n	8003796 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003792:	2303      	movs	r3, #3
 8003794:	e05f      	b.n	8003856 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003796:	4b10      	ldr	r3, [pc, #64]	; (80037d8 <HAL_RCC_OscConfig+0x4d0>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d0f0      	beq.n	8003784 <HAL_RCC_OscConfig+0x47c>
 80037a2:	e057      	b.n	8003854 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037a4:	4b0c      	ldr	r3, [pc, #48]	; (80037d8 <HAL_RCC_OscConfig+0x4d0>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a0b      	ldr	r2, [pc, #44]	; (80037d8 <HAL_RCC_OscConfig+0x4d0>)
 80037aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037b0:	f7fd fec8 	bl	8001544 <HAL_GetTick>
 80037b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037b6:	e008      	b.n	80037ca <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037b8:	f7fd fec4 	bl	8001544 <HAL_GetTick>
 80037bc:	4602      	mov	r2, r0
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	2b02      	cmp	r3, #2
 80037c4:	d901      	bls.n	80037ca <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80037c6:	2303      	movs	r3, #3
 80037c8:	e045      	b.n	8003856 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037ca:	4b03      	ldr	r3, [pc, #12]	; (80037d8 <HAL_RCC_OscConfig+0x4d0>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d1f0      	bne.n	80037b8 <HAL_RCC_OscConfig+0x4b0>
 80037d6:	e03d      	b.n	8003854 <HAL_RCC_OscConfig+0x54c>
 80037d8:	40023800 	.word	0x40023800
 80037dc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80037e0:	4b1f      	ldr	r3, [pc, #124]	; (8003860 <HAL_RCC_OscConfig+0x558>)
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	699b      	ldr	r3, [r3, #24]
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d030      	beq.n	8003850 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d129      	bne.n	8003850 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003806:	429a      	cmp	r2, r3
 8003808:	d122      	bne.n	8003850 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800380a:	68fa      	ldr	r2, [r7, #12]
 800380c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003810:	4013      	ands	r3, r2
 8003812:	687a      	ldr	r2, [r7, #4]
 8003814:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003816:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003818:	4293      	cmp	r3, r2
 800381a:	d119      	bne.n	8003850 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003826:	085b      	lsrs	r3, r3, #1
 8003828:	3b01      	subs	r3, #1
 800382a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800382c:	429a      	cmp	r2, r3
 800382e:	d10f      	bne.n	8003850 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800383a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800383c:	429a      	cmp	r2, r3
 800383e:	d107      	bne.n	8003850 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800384a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800384c:	429a      	cmp	r2, r3
 800384e:	d001      	beq.n	8003854 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	e000      	b.n	8003856 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003854:	2300      	movs	r3, #0
}
 8003856:	4618      	mov	r0, r3
 8003858:	3718      	adds	r7, #24
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop
 8003860:	40023800 	.word	0x40023800

08003864 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b084      	sub	sp, #16
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
 800386c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800386e:	2300      	movs	r3, #0
 8003870:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d101      	bne.n	800387c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	e0d0      	b.n	8003a1e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800387c:	4b6a      	ldr	r3, [pc, #424]	; (8003a28 <HAL_RCC_ClockConfig+0x1c4>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 030f 	and.w	r3, r3, #15
 8003884:	683a      	ldr	r2, [r7, #0]
 8003886:	429a      	cmp	r2, r3
 8003888:	d910      	bls.n	80038ac <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800388a:	4b67      	ldr	r3, [pc, #412]	; (8003a28 <HAL_RCC_ClockConfig+0x1c4>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f023 020f 	bic.w	r2, r3, #15
 8003892:	4965      	ldr	r1, [pc, #404]	; (8003a28 <HAL_RCC_ClockConfig+0x1c4>)
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	4313      	orrs	r3, r2
 8003898:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800389a:	4b63      	ldr	r3, [pc, #396]	; (8003a28 <HAL_RCC_ClockConfig+0x1c4>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 030f 	and.w	r3, r3, #15
 80038a2:	683a      	ldr	r2, [r7, #0]
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d001      	beq.n	80038ac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	e0b8      	b.n	8003a1e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 0302 	and.w	r3, r3, #2
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d020      	beq.n	80038fa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0304 	and.w	r3, r3, #4
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d005      	beq.n	80038d0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038c4:	4b59      	ldr	r3, [pc, #356]	; (8003a2c <HAL_RCC_ClockConfig+0x1c8>)
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	4a58      	ldr	r2, [pc, #352]	; (8003a2c <HAL_RCC_ClockConfig+0x1c8>)
 80038ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80038ce:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 0308 	and.w	r3, r3, #8
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d005      	beq.n	80038e8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038dc:	4b53      	ldr	r3, [pc, #332]	; (8003a2c <HAL_RCC_ClockConfig+0x1c8>)
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	4a52      	ldr	r2, [pc, #328]	; (8003a2c <HAL_RCC_ClockConfig+0x1c8>)
 80038e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80038e6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038e8:	4b50      	ldr	r3, [pc, #320]	; (8003a2c <HAL_RCC_ClockConfig+0x1c8>)
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	494d      	ldr	r1, [pc, #308]	; (8003a2c <HAL_RCC_ClockConfig+0x1c8>)
 80038f6:	4313      	orrs	r3, r2
 80038f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 0301 	and.w	r3, r3, #1
 8003902:	2b00      	cmp	r3, #0
 8003904:	d040      	beq.n	8003988 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	2b01      	cmp	r3, #1
 800390c:	d107      	bne.n	800391e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800390e:	4b47      	ldr	r3, [pc, #284]	; (8003a2c <HAL_RCC_ClockConfig+0x1c8>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003916:	2b00      	cmp	r3, #0
 8003918:	d115      	bne.n	8003946 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e07f      	b.n	8003a1e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	2b02      	cmp	r3, #2
 8003924:	d107      	bne.n	8003936 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003926:	4b41      	ldr	r3, [pc, #260]	; (8003a2c <HAL_RCC_ClockConfig+0x1c8>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d109      	bne.n	8003946 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e073      	b.n	8003a1e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003936:	4b3d      	ldr	r3, [pc, #244]	; (8003a2c <HAL_RCC_ClockConfig+0x1c8>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0302 	and.w	r3, r3, #2
 800393e:	2b00      	cmp	r3, #0
 8003940:	d101      	bne.n	8003946 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e06b      	b.n	8003a1e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003946:	4b39      	ldr	r3, [pc, #228]	; (8003a2c <HAL_RCC_ClockConfig+0x1c8>)
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	f023 0203 	bic.w	r2, r3, #3
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	4936      	ldr	r1, [pc, #216]	; (8003a2c <HAL_RCC_ClockConfig+0x1c8>)
 8003954:	4313      	orrs	r3, r2
 8003956:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003958:	f7fd fdf4 	bl	8001544 <HAL_GetTick>
 800395c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800395e:	e00a      	b.n	8003976 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003960:	f7fd fdf0 	bl	8001544 <HAL_GetTick>
 8003964:	4602      	mov	r2, r0
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	f241 3288 	movw	r2, #5000	; 0x1388
 800396e:	4293      	cmp	r3, r2
 8003970:	d901      	bls.n	8003976 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003972:	2303      	movs	r3, #3
 8003974:	e053      	b.n	8003a1e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003976:	4b2d      	ldr	r3, [pc, #180]	; (8003a2c <HAL_RCC_ClockConfig+0x1c8>)
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	f003 020c 	and.w	r2, r3, #12
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	429a      	cmp	r2, r3
 8003986:	d1eb      	bne.n	8003960 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003988:	4b27      	ldr	r3, [pc, #156]	; (8003a28 <HAL_RCC_ClockConfig+0x1c4>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 030f 	and.w	r3, r3, #15
 8003990:	683a      	ldr	r2, [r7, #0]
 8003992:	429a      	cmp	r2, r3
 8003994:	d210      	bcs.n	80039b8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003996:	4b24      	ldr	r3, [pc, #144]	; (8003a28 <HAL_RCC_ClockConfig+0x1c4>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f023 020f 	bic.w	r2, r3, #15
 800399e:	4922      	ldr	r1, [pc, #136]	; (8003a28 <HAL_RCC_ClockConfig+0x1c4>)
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039a6:	4b20      	ldr	r3, [pc, #128]	; (8003a28 <HAL_RCC_ClockConfig+0x1c4>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 030f 	and.w	r3, r3, #15
 80039ae:	683a      	ldr	r2, [r7, #0]
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d001      	beq.n	80039b8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	e032      	b.n	8003a1e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 0304 	and.w	r3, r3, #4
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d008      	beq.n	80039d6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039c4:	4b19      	ldr	r3, [pc, #100]	; (8003a2c <HAL_RCC_ClockConfig+0x1c8>)
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	4916      	ldr	r1, [pc, #88]	; (8003a2c <HAL_RCC_ClockConfig+0x1c8>)
 80039d2:	4313      	orrs	r3, r2
 80039d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 0308 	and.w	r3, r3, #8
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d009      	beq.n	80039f6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80039e2:	4b12      	ldr	r3, [pc, #72]	; (8003a2c <HAL_RCC_ClockConfig+0x1c8>)
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	691b      	ldr	r3, [r3, #16]
 80039ee:	00db      	lsls	r3, r3, #3
 80039f0:	490e      	ldr	r1, [pc, #56]	; (8003a2c <HAL_RCC_ClockConfig+0x1c8>)
 80039f2:	4313      	orrs	r3, r2
 80039f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80039f6:	f000 f821 	bl	8003a3c <HAL_RCC_GetSysClockFreq>
 80039fa:	4601      	mov	r1, r0
 80039fc:	4b0b      	ldr	r3, [pc, #44]	; (8003a2c <HAL_RCC_ClockConfig+0x1c8>)
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	091b      	lsrs	r3, r3, #4
 8003a02:	f003 030f 	and.w	r3, r3, #15
 8003a06:	4a0a      	ldr	r2, [pc, #40]	; (8003a30 <HAL_RCC_ClockConfig+0x1cc>)
 8003a08:	5cd3      	ldrb	r3, [r2, r3]
 8003a0a:	fa21 f303 	lsr.w	r3, r1, r3
 8003a0e:	4a09      	ldr	r2, [pc, #36]	; (8003a34 <HAL_RCC_ClockConfig+0x1d0>)
 8003a10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003a12:	4b09      	ldr	r3, [pc, #36]	; (8003a38 <HAL_RCC_ClockConfig+0x1d4>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4618      	mov	r0, r3
 8003a18:	f7fd fc90 	bl	800133c <HAL_InitTick>

  return HAL_OK;
 8003a1c:	2300      	movs	r3, #0
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3710      	adds	r7, #16
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}
 8003a26:	bf00      	nop
 8003a28:	40023c00 	.word	0x40023c00
 8003a2c:	40023800 	.word	0x40023800
 8003a30:	0800f2d4 	.word	0x0800f2d4
 8003a34:	20000010 	.word	0x20000010
 8003a38:	20000014 	.word	0x20000014

08003a3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a3e:	b085      	sub	sp, #20
 8003a40:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003a42:	2300      	movs	r3, #0
 8003a44:	607b      	str	r3, [r7, #4]
 8003a46:	2300      	movs	r3, #0
 8003a48:	60fb      	str	r3, [r7, #12]
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a52:	4b63      	ldr	r3, [pc, #396]	; (8003be0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	f003 030c 	and.w	r3, r3, #12
 8003a5a:	2b04      	cmp	r3, #4
 8003a5c:	d007      	beq.n	8003a6e <HAL_RCC_GetSysClockFreq+0x32>
 8003a5e:	2b08      	cmp	r3, #8
 8003a60:	d008      	beq.n	8003a74 <HAL_RCC_GetSysClockFreq+0x38>
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	f040 80b4 	bne.w	8003bd0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a68:	4b5e      	ldr	r3, [pc, #376]	; (8003be4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003a6a:	60bb      	str	r3, [r7, #8]
      break;
 8003a6c:	e0b3      	b.n	8003bd6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a6e:	4b5e      	ldr	r3, [pc, #376]	; (8003be8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003a70:	60bb      	str	r3, [r7, #8]
      break;
 8003a72:	e0b0      	b.n	8003bd6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a74:	4b5a      	ldr	r3, [pc, #360]	; (8003be0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a7c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003a7e:	4b58      	ldr	r3, [pc, #352]	; (8003be0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d04a      	beq.n	8003b20 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a8a:	4b55      	ldr	r3, [pc, #340]	; (8003be0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	099b      	lsrs	r3, r3, #6
 8003a90:	f04f 0400 	mov.w	r4, #0
 8003a94:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003a98:	f04f 0200 	mov.w	r2, #0
 8003a9c:	ea03 0501 	and.w	r5, r3, r1
 8003aa0:	ea04 0602 	and.w	r6, r4, r2
 8003aa4:	4629      	mov	r1, r5
 8003aa6:	4632      	mov	r2, r6
 8003aa8:	f04f 0300 	mov.w	r3, #0
 8003aac:	f04f 0400 	mov.w	r4, #0
 8003ab0:	0154      	lsls	r4, r2, #5
 8003ab2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003ab6:	014b      	lsls	r3, r1, #5
 8003ab8:	4619      	mov	r1, r3
 8003aba:	4622      	mov	r2, r4
 8003abc:	1b49      	subs	r1, r1, r5
 8003abe:	eb62 0206 	sbc.w	r2, r2, r6
 8003ac2:	f04f 0300 	mov.w	r3, #0
 8003ac6:	f04f 0400 	mov.w	r4, #0
 8003aca:	0194      	lsls	r4, r2, #6
 8003acc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003ad0:	018b      	lsls	r3, r1, #6
 8003ad2:	1a5b      	subs	r3, r3, r1
 8003ad4:	eb64 0402 	sbc.w	r4, r4, r2
 8003ad8:	f04f 0100 	mov.w	r1, #0
 8003adc:	f04f 0200 	mov.w	r2, #0
 8003ae0:	00e2      	lsls	r2, r4, #3
 8003ae2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003ae6:	00d9      	lsls	r1, r3, #3
 8003ae8:	460b      	mov	r3, r1
 8003aea:	4614      	mov	r4, r2
 8003aec:	195b      	adds	r3, r3, r5
 8003aee:	eb44 0406 	adc.w	r4, r4, r6
 8003af2:	f04f 0100 	mov.w	r1, #0
 8003af6:	f04f 0200 	mov.w	r2, #0
 8003afa:	0262      	lsls	r2, r4, #9
 8003afc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003b00:	0259      	lsls	r1, r3, #9
 8003b02:	460b      	mov	r3, r1
 8003b04:	4614      	mov	r4, r2
 8003b06:	4618      	mov	r0, r3
 8003b08:	4621      	mov	r1, r4
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f04f 0400 	mov.w	r4, #0
 8003b10:	461a      	mov	r2, r3
 8003b12:	4623      	mov	r3, r4
 8003b14:	f7fc fb94 	bl	8000240 <__aeabi_uldivmod>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	460c      	mov	r4, r1
 8003b1c:	60fb      	str	r3, [r7, #12]
 8003b1e:	e049      	b.n	8003bb4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b20:	4b2f      	ldr	r3, [pc, #188]	; (8003be0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	099b      	lsrs	r3, r3, #6
 8003b26:	f04f 0400 	mov.w	r4, #0
 8003b2a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003b2e:	f04f 0200 	mov.w	r2, #0
 8003b32:	ea03 0501 	and.w	r5, r3, r1
 8003b36:	ea04 0602 	and.w	r6, r4, r2
 8003b3a:	4629      	mov	r1, r5
 8003b3c:	4632      	mov	r2, r6
 8003b3e:	f04f 0300 	mov.w	r3, #0
 8003b42:	f04f 0400 	mov.w	r4, #0
 8003b46:	0154      	lsls	r4, r2, #5
 8003b48:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003b4c:	014b      	lsls	r3, r1, #5
 8003b4e:	4619      	mov	r1, r3
 8003b50:	4622      	mov	r2, r4
 8003b52:	1b49      	subs	r1, r1, r5
 8003b54:	eb62 0206 	sbc.w	r2, r2, r6
 8003b58:	f04f 0300 	mov.w	r3, #0
 8003b5c:	f04f 0400 	mov.w	r4, #0
 8003b60:	0194      	lsls	r4, r2, #6
 8003b62:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003b66:	018b      	lsls	r3, r1, #6
 8003b68:	1a5b      	subs	r3, r3, r1
 8003b6a:	eb64 0402 	sbc.w	r4, r4, r2
 8003b6e:	f04f 0100 	mov.w	r1, #0
 8003b72:	f04f 0200 	mov.w	r2, #0
 8003b76:	00e2      	lsls	r2, r4, #3
 8003b78:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003b7c:	00d9      	lsls	r1, r3, #3
 8003b7e:	460b      	mov	r3, r1
 8003b80:	4614      	mov	r4, r2
 8003b82:	195b      	adds	r3, r3, r5
 8003b84:	eb44 0406 	adc.w	r4, r4, r6
 8003b88:	f04f 0100 	mov.w	r1, #0
 8003b8c:	f04f 0200 	mov.w	r2, #0
 8003b90:	02a2      	lsls	r2, r4, #10
 8003b92:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003b96:	0299      	lsls	r1, r3, #10
 8003b98:	460b      	mov	r3, r1
 8003b9a:	4614      	mov	r4, r2
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	4621      	mov	r1, r4
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	f04f 0400 	mov.w	r4, #0
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	4623      	mov	r3, r4
 8003baa:	f7fc fb49 	bl	8000240 <__aeabi_uldivmod>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	460c      	mov	r4, r1
 8003bb2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003bb4:	4b0a      	ldr	r3, [pc, #40]	; (8003be0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	0c1b      	lsrs	r3, r3, #16
 8003bba:	f003 0303 	and.w	r3, r3, #3
 8003bbe:	3301      	adds	r3, #1
 8003bc0:	005b      	lsls	r3, r3, #1
 8003bc2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003bc4:	68fa      	ldr	r2, [r7, #12]
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bcc:	60bb      	str	r3, [r7, #8]
      break;
 8003bce:	e002      	b.n	8003bd6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003bd0:	4b04      	ldr	r3, [pc, #16]	; (8003be4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003bd2:	60bb      	str	r3, [r7, #8]
      break;
 8003bd4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003bd6:	68bb      	ldr	r3, [r7, #8]
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	3714      	adds	r7, #20
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003be0:	40023800 	.word	0x40023800
 8003be4:	00f42400 	.word	0x00f42400
 8003be8:	007a1200 	.word	0x007a1200

08003bec <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bec:	b480      	push	{r7}
 8003bee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bf0:	4b03      	ldr	r3, [pc, #12]	; (8003c00 <HAL_RCC_GetHCLKFreq+0x14>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr
 8003bfe:	bf00      	nop
 8003c00:	20000010 	.word	0x20000010

08003c04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003c08:	f7ff fff0 	bl	8003bec <HAL_RCC_GetHCLKFreq>
 8003c0c:	4601      	mov	r1, r0
 8003c0e:	4b05      	ldr	r3, [pc, #20]	; (8003c24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	0a9b      	lsrs	r3, r3, #10
 8003c14:	f003 0307 	and.w	r3, r3, #7
 8003c18:	4a03      	ldr	r2, [pc, #12]	; (8003c28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c1a:	5cd3      	ldrb	r3, [r2, r3]
 8003c1c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	bd80      	pop	{r7, pc}
 8003c24:	40023800 	.word	0x40023800
 8003c28:	0800f2e4 	.word	0x0800f2e4

08003c2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003c30:	f7ff ffdc 	bl	8003bec <HAL_RCC_GetHCLKFreq>
 8003c34:	4601      	mov	r1, r0
 8003c36:	4b05      	ldr	r3, [pc, #20]	; (8003c4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	0b5b      	lsrs	r3, r3, #13
 8003c3c:	f003 0307 	and.w	r3, r3, #7
 8003c40:	4a03      	ldr	r2, [pc, #12]	; (8003c50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c42:	5cd3      	ldrb	r3, [r2, r3]
 8003c44:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	bd80      	pop	{r7, pc}
 8003c4c:	40023800 	.word	0x40023800
 8003c50:	0800f2e4 	.word	0x0800f2e4

08003c54 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b083      	sub	sp, #12
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	220f      	movs	r2, #15
 8003c62:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003c64:	4b12      	ldr	r3, [pc, #72]	; (8003cb0 <HAL_RCC_GetClockConfig+0x5c>)
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	f003 0203 	and.w	r2, r3, #3
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003c70:	4b0f      	ldr	r3, [pc, #60]	; (8003cb0 <HAL_RCC_GetClockConfig+0x5c>)
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003c7c:	4b0c      	ldr	r3, [pc, #48]	; (8003cb0 <HAL_RCC_GetClockConfig+0x5c>)
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003c88:	4b09      	ldr	r3, [pc, #36]	; (8003cb0 <HAL_RCC_GetClockConfig+0x5c>)
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	08db      	lsrs	r3, r3, #3
 8003c8e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003c96:	4b07      	ldr	r3, [pc, #28]	; (8003cb4 <HAL_RCC_GetClockConfig+0x60>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 020f 	and.w	r2, r3, #15
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	601a      	str	r2, [r3, #0]
}
 8003ca2:	bf00      	nop
 8003ca4:	370c      	adds	r7, #12
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr
 8003cae:	bf00      	nop
 8003cb0:	40023800 	.word	0x40023800
 8003cb4:	40023c00 	.word	0x40023c00

08003cb8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b088      	sub	sp, #32
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f003 0301 	and.w	r3, r3, #1
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d012      	beq.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003ce0:	4b69      	ldr	r3, [pc, #420]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	4a68      	ldr	r2, [pc, #416]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ce6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003cea:	6093      	str	r3, [r2, #8]
 8003cec:	4b66      	ldr	r3, [pc, #408]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cee:	689a      	ldr	r2, [r3, #8]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cf4:	4964      	ldr	r1, [pc, #400]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d101      	bne.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003d02:	2301      	movs	r3, #1
 8003d04:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d017      	beq.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d12:	4b5d      	ldr	r3, [pc, #372]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d18:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d20:	4959      	ldr	r1, [pc, #356]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d22:	4313      	orrs	r3, r2
 8003d24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d30:	d101      	bne.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003d32:	2301      	movs	r3, #1
 8003d34:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d101      	bne.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d017      	beq.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003d4e:	4b4e      	ldr	r3, [pc, #312]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d54:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5c:	494a      	ldr	r1, [pc, #296]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d68:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d6c:	d101      	bne.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d101      	bne.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d001      	beq.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 0320 	and.w	r3, r3, #32
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	f000 808b 	beq.w	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003d9c:	4b3a      	ldr	r3, [pc, #232]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da0:	4a39      	ldr	r2, [pc, #228]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003da2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003da6:	6413      	str	r3, [r2, #64]	; 0x40
 8003da8:	4b37      	ldr	r3, [pc, #220]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003db0:	60bb      	str	r3, [r7, #8]
 8003db2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003db4:	4b35      	ldr	r3, [pc, #212]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a34      	ldr	r2, [pc, #208]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003dba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dbe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dc0:	f7fd fbc0 	bl	8001544 <HAL_GetTick>
 8003dc4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003dc6:	e008      	b.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dc8:	f7fd fbbc 	bl	8001544 <HAL_GetTick>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	2b64      	cmp	r3, #100	; 0x64
 8003dd4:	d901      	bls.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	e38d      	b.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003dda:	4b2c      	ldr	r3, [pc, #176]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d0f0      	beq.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003de6:	4b28      	ldr	r3, [pc, #160]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003de8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dee:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d035      	beq.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dfe:	693a      	ldr	r2, [r7, #16]
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d02e      	beq.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e04:	4b20      	ldr	r3, [pc, #128]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e0c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003e0e:	4b1e      	ldr	r3, [pc, #120]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e12:	4a1d      	ldr	r2, [pc, #116]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e18:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003e1a:	4b1b      	ldr	r3, [pc, #108]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e1e:	4a1a      	ldr	r2, [pc, #104]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e24:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003e26:	4a18      	ldr	r2, [pc, #96]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003e2c:	4b16      	ldr	r3, [pc, #88]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e30:	f003 0301 	and.w	r3, r3, #1
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d114      	bne.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e38:	f7fd fb84 	bl	8001544 <HAL_GetTick>
 8003e3c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e3e:	e00a      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e40:	f7fd fb80 	bl	8001544 <HAL_GetTick>
 8003e44:	4602      	mov	r2, r0
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	1ad3      	subs	r3, r2, r3
 8003e4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d901      	bls.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003e52:	2303      	movs	r3, #3
 8003e54:	e34f      	b.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e56:	4b0c      	ldr	r3, [pc, #48]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e5a:	f003 0302 	and.w	r3, r3, #2
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d0ee      	beq.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e6a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e6e:	d111      	bne.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003e70:	4b05      	ldr	r3, [pc, #20]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003e7c:	4b04      	ldr	r3, [pc, #16]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003e7e:	400b      	ands	r3, r1
 8003e80:	4901      	ldr	r1, [pc, #4]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e82:	4313      	orrs	r3, r2
 8003e84:	608b      	str	r3, [r1, #8]
 8003e86:	e00b      	b.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003e88:	40023800 	.word	0x40023800
 8003e8c:	40007000 	.word	0x40007000
 8003e90:	0ffffcff 	.word	0x0ffffcff
 8003e94:	4bb3      	ldr	r3, [pc, #716]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	4ab2      	ldr	r2, [pc, #712]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e9a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003e9e:	6093      	str	r3, [r2, #8]
 8003ea0:	4bb0      	ldr	r3, [pc, #704]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ea2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003eac:	49ad      	ldr	r1, [pc, #692]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f003 0310 	and.w	r3, r3, #16
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d010      	beq.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003ebe:	4ba9      	ldr	r3, [pc, #676]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ec0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ec4:	4aa7      	ldr	r2, [pc, #668]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ec6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003eca:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003ece:	4ba5      	ldr	r3, [pc, #660]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ed0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ed8:	49a2      	ldr	r1, [pc, #648]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003eda:	4313      	orrs	r3, r2
 8003edc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d00a      	beq.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003eec:	4b9d      	ldr	r3, [pc, #628]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ef2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003efa:	499a      	ldr	r1, [pc, #616]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003efc:	4313      	orrs	r3, r2
 8003efe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d00a      	beq.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003f0e:	4b95      	ldr	r3, [pc, #596]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f14:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f1c:	4991      	ldr	r1, [pc, #580]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d00a      	beq.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f30:	4b8c      	ldr	r3, [pc, #560]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f36:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f3e:	4989      	ldr	r1, [pc, #548]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f40:	4313      	orrs	r3, r2
 8003f42:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d00a      	beq.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003f52:	4b84      	ldr	r3, [pc, #528]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f58:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f60:	4980      	ldr	r1, [pc, #512]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f62:	4313      	orrs	r3, r2
 8003f64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d00a      	beq.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f74:	4b7b      	ldr	r3, [pc, #492]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f7a:	f023 0203 	bic.w	r2, r3, #3
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f82:	4978      	ldr	r1, [pc, #480]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f84:	4313      	orrs	r3, r2
 8003f86:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d00a      	beq.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f96:	4b73      	ldr	r3, [pc, #460]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f9c:	f023 020c 	bic.w	r2, r3, #12
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fa4:	496f      	ldr	r1, [pc, #444]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d00a      	beq.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003fb8:	4b6a      	ldr	r3, [pc, #424]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003fba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fbe:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fc6:	4967      	ldr	r1, [pc, #412]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d00a      	beq.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003fda:	4b62      	ldr	r3, [pc, #392]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003fdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fe0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fe8:	495e      	ldr	r1, [pc, #376]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003fea:	4313      	orrs	r3, r2
 8003fec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d00a      	beq.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003ffc:	4b59      	ldr	r3, [pc, #356]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004002:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800400a:	4956      	ldr	r1, [pc, #344]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800400c:	4313      	orrs	r3, r2
 800400e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800401a:	2b00      	cmp	r3, #0
 800401c:	d00a      	beq.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800401e:	4b51      	ldr	r3, [pc, #324]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004020:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004024:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800402c:	494d      	ldr	r1, [pc, #308]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800402e:	4313      	orrs	r3, r2
 8004030:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800403c:	2b00      	cmp	r3, #0
 800403e:	d00a      	beq.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004040:	4b48      	ldr	r3, [pc, #288]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004042:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004046:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800404e:	4945      	ldr	r1, [pc, #276]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004050:	4313      	orrs	r3, r2
 8004052:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800405e:	2b00      	cmp	r3, #0
 8004060:	d00a      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004062:	4b40      	ldr	r3, [pc, #256]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004064:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004068:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004070:	493c      	ldr	r1, [pc, #240]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004072:	4313      	orrs	r3, r2
 8004074:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004080:	2b00      	cmp	r3, #0
 8004082:	d00a      	beq.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004084:	4b37      	ldr	r3, [pc, #220]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004086:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800408a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004092:	4934      	ldr	r1, [pc, #208]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004094:	4313      	orrs	r3, r2
 8004096:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d011      	beq.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80040a6:	4b2f      	ldr	r3, [pc, #188]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80040a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040ac:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040b4:	492b      	ldr	r1, [pc, #172]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80040b6:	4313      	orrs	r3, r2
 80040b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80040c4:	d101      	bne.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80040c6:	2301      	movs	r3, #1
 80040c8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f003 0308 	and.w	r3, r3, #8
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d001      	beq.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80040d6:	2301      	movs	r3, #1
 80040d8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d00a      	beq.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80040e6:	4b1f      	ldr	r3, [pc, #124]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80040e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040ec:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040f4:	491b      	ldr	r1, [pc, #108]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80040f6:	4313      	orrs	r3, r2
 80040f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004104:	2b00      	cmp	r3, #0
 8004106:	d00b      	beq.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004108:	4b16      	ldr	r3, [pc, #88]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800410a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800410e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004118:	4912      	ldr	r1, [pc, #72]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800411a:	4313      	orrs	r3, r2
 800411c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004128:	2b00      	cmp	r3, #0
 800412a:	d00b      	beq.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800412c:	4b0d      	ldr	r3, [pc, #52]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800412e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004132:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800413c:	4909      	ldr	r1, [pc, #36]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800413e:	4313      	orrs	r3, r2
 8004140:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800414c:	2b00      	cmp	r3, #0
 800414e:	d00f      	beq.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004150:	4b04      	ldr	r3, [pc, #16]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004152:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004156:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004160:	e002      	b.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8004162:	bf00      	nop
 8004164:	40023800 	.word	0x40023800
 8004168:	4985      	ldr	r1, [pc, #532]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800416a:	4313      	orrs	r3, r2
 800416c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004178:	2b00      	cmp	r3, #0
 800417a:	d00b      	beq.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800417c:	4b80      	ldr	r3, [pc, #512]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800417e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004182:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800418c:	497c      	ldr	r1, [pc, #496]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800418e:	4313      	orrs	r3, r2
 8004190:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8004194:	69fb      	ldr	r3, [r7, #28]
 8004196:	2b01      	cmp	r3, #1
 8004198:	d005      	beq.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80041a2:	f040 80d6 	bne.w	8004352 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80041a6:	4b76      	ldr	r3, [pc, #472]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a75      	ldr	r2, [pc, #468]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80041ac:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80041b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041b2:	f7fd f9c7 	bl	8001544 <HAL_GetTick>
 80041b6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80041b8:	e008      	b.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80041ba:	f7fd f9c3 	bl	8001544 <HAL_GetTick>
 80041be:	4602      	mov	r2, r0
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	1ad3      	subs	r3, r2, r3
 80041c4:	2b64      	cmp	r3, #100	; 0x64
 80041c6:	d901      	bls.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80041c8:	2303      	movs	r3, #3
 80041ca:	e194      	b.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80041cc:	4b6c      	ldr	r3, [pc, #432]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d1f0      	bne.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 0301 	and.w	r3, r3, #1
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d021      	beq.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x570>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d11d      	bne.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80041ec:	4b64      	ldr	r3, [pc, #400]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80041ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041f2:	0c1b      	lsrs	r3, r3, #16
 80041f4:	f003 0303 	and.w	r3, r3, #3
 80041f8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80041fa:	4b61      	ldr	r3, [pc, #388]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80041fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004200:	0e1b      	lsrs	r3, r3, #24
 8004202:	f003 030f 	and.w	r3, r3, #15
 8004206:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	019a      	lsls	r2, r3, #6
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	041b      	lsls	r3, r3, #16
 8004212:	431a      	orrs	r2, r3
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	061b      	lsls	r3, r3, #24
 8004218:	431a      	orrs	r2, r3
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	071b      	lsls	r3, r3, #28
 8004220:	4957      	ldr	r1, [pc, #348]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004222:	4313      	orrs	r3, r2
 8004224:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004230:	2b00      	cmp	r3, #0
 8004232:	d004      	beq.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x586>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004238:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800423c:	d00a      	beq.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004246:	2b00      	cmp	r3, #0
 8004248:	d02e      	beq.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800424e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004252:	d129      	bne.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004254:	4b4a      	ldr	r3, [pc, #296]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004256:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800425a:	0c1b      	lsrs	r3, r3, #16
 800425c:	f003 0303 	and.w	r3, r3, #3
 8004260:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004262:	4b47      	ldr	r3, [pc, #284]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004264:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004268:	0f1b      	lsrs	r3, r3, #28
 800426a:	f003 0307 	and.w	r3, r3, #7
 800426e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	019a      	lsls	r2, r3, #6
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	041b      	lsls	r3, r3, #16
 800427a:	431a      	orrs	r2, r3
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	68db      	ldr	r3, [r3, #12]
 8004280:	061b      	lsls	r3, r3, #24
 8004282:	431a      	orrs	r2, r3
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	071b      	lsls	r3, r3, #28
 8004288:	493d      	ldr	r1, [pc, #244]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800428a:	4313      	orrs	r3, r2
 800428c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004290:	4b3b      	ldr	r3, [pc, #236]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004292:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004296:	f023 021f 	bic.w	r2, r3, #31
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800429e:	3b01      	subs	r3, #1
 80042a0:	4937      	ldr	r1, [pc, #220]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80042a2:	4313      	orrs	r3, r2
 80042a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d01d      	beq.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80042b4:	4b32      	ldr	r3, [pc, #200]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80042b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042ba:	0e1b      	lsrs	r3, r3, #24
 80042bc:	f003 030f 	and.w	r3, r3, #15
 80042c0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80042c2:	4b2f      	ldr	r3, [pc, #188]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80042c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042c8:	0f1b      	lsrs	r3, r3, #28
 80042ca:	f003 0307 	and.w	r3, r3, #7
 80042ce:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	019a      	lsls	r2, r3, #6
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	691b      	ldr	r3, [r3, #16]
 80042da:	041b      	lsls	r3, r3, #16
 80042dc:	431a      	orrs	r2, r3
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	061b      	lsls	r3, r3, #24
 80042e2:	431a      	orrs	r2, r3
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	071b      	lsls	r3, r3, #28
 80042e8:	4925      	ldr	r1, [pc, #148]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80042ea:	4313      	orrs	r3, r2
 80042ec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d011      	beq.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	019a      	lsls	r2, r3, #6
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	691b      	ldr	r3, [r3, #16]
 8004306:	041b      	lsls	r3, r3, #16
 8004308:	431a      	orrs	r2, r3
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	68db      	ldr	r3, [r3, #12]
 800430e:	061b      	lsls	r3, r3, #24
 8004310:	431a      	orrs	r2, r3
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	071b      	lsls	r3, r3, #28
 8004318:	4919      	ldr	r1, [pc, #100]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800431a:	4313      	orrs	r3, r2
 800431c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004320:	4b17      	ldr	r3, [pc, #92]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a16      	ldr	r2, [pc, #88]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004326:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800432a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800432c:	f7fd f90a 	bl	8001544 <HAL_GetTick>
 8004330:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004332:	e008      	b.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004334:	f7fd f906 	bl	8001544 <HAL_GetTick>
 8004338:	4602      	mov	r2, r0
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	1ad3      	subs	r3, r2, r3
 800433e:	2b64      	cmp	r3, #100	; 0x64
 8004340:	d901      	bls.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004342:	2303      	movs	r3, #3
 8004344:	e0d7      	b.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004346:	4b0e      	ldr	r3, [pc, #56]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800434e:	2b00      	cmp	r3, #0
 8004350:	d0f0      	beq.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004352:	69bb      	ldr	r3, [r7, #24]
 8004354:	2b01      	cmp	r3, #1
 8004356:	f040 80cd 	bne.w	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800435a:	4b09      	ldr	r3, [pc, #36]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a08      	ldr	r2, [pc, #32]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004360:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004364:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004366:	f7fd f8ed 	bl	8001544 <HAL_GetTick>
 800436a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800436c:	e00a      	b.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800436e:	f7fd f8e9 	bl	8001544 <HAL_GetTick>
 8004372:	4602      	mov	r2, r0
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	1ad3      	subs	r3, r2, r3
 8004378:	2b64      	cmp	r3, #100	; 0x64
 800437a:	d903      	bls.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800437c:	2303      	movs	r3, #3
 800437e:	e0ba      	b.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8004380:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004384:	4b5e      	ldr	r3, [pc, #376]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800438c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004390:	d0ed      	beq.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800439a:	2b00      	cmp	r3, #0
 800439c:	d003      	beq.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d009      	beq.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d02e      	beq.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d12a      	bne.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80043ba:	4b51      	ldr	r3, [pc, #324]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80043bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043c0:	0c1b      	lsrs	r3, r3, #16
 80043c2:	f003 0303 	and.w	r3, r3, #3
 80043c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80043c8:	4b4d      	ldr	r3, [pc, #308]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80043ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ce:	0f1b      	lsrs	r3, r3, #28
 80043d0:	f003 0307 	and.w	r3, r3, #7
 80043d4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	695b      	ldr	r3, [r3, #20]
 80043da:	019a      	lsls	r2, r3, #6
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	041b      	lsls	r3, r3, #16
 80043e0:	431a      	orrs	r2, r3
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	699b      	ldr	r3, [r3, #24]
 80043e6:	061b      	lsls	r3, r3, #24
 80043e8:	431a      	orrs	r2, r3
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	071b      	lsls	r3, r3, #28
 80043ee:	4944      	ldr	r1, [pc, #272]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80043f0:	4313      	orrs	r3, r2
 80043f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80043f6:	4b42      	ldr	r3, [pc, #264]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80043f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043fc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004404:	3b01      	subs	r3, #1
 8004406:	021b      	lsls	r3, r3, #8
 8004408:	493d      	ldr	r1, [pc, #244]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800440a:	4313      	orrs	r3, r2
 800440c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004418:	2b00      	cmp	r3, #0
 800441a:	d022      	beq.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004420:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004424:	d11d      	bne.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004426:	4b36      	ldr	r3, [pc, #216]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004428:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800442c:	0e1b      	lsrs	r3, r3, #24
 800442e:	f003 030f 	and.w	r3, r3, #15
 8004432:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004434:	4b32      	ldr	r3, [pc, #200]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004436:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800443a:	0f1b      	lsrs	r3, r3, #28
 800443c:	f003 0307 	and.w	r3, r3, #7
 8004440:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	695b      	ldr	r3, [r3, #20]
 8004446:	019a      	lsls	r2, r3, #6
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6a1b      	ldr	r3, [r3, #32]
 800444c:	041b      	lsls	r3, r3, #16
 800444e:	431a      	orrs	r2, r3
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	061b      	lsls	r3, r3, #24
 8004454:	431a      	orrs	r2, r3
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	071b      	lsls	r3, r3, #28
 800445a:	4929      	ldr	r1, [pc, #164]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800445c:	4313      	orrs	r3, r2
 800445e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f003 0308 	and.w	r3, r3, #8
 800446a:	2b00      	cmp	r3, #0
 800446c:	d028      	beq.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800446e:	4b24      	ldr	r3, [pc, #144]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004470:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004474:	0e1b      	lsrs	r3, r3, #24
 8004476:	f003 030f 	and.w	r3, r3, #15
 800447a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800447c:	4b20      	ldr	r3, [pc, #128]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800447e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004482:	0c1b      	lsrs	r3, r3, #16
 8004484:	f003 0303 	and.w	r3, r3, #3
 8004488:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	695b      	ldr	r3, [r3, #20]
 800448e:	019a      	lsls	r2, r3, #6
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	041b      	lsls	r3, r3, #16
 8004494:	431a      	orrs	r2, r3
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	061b      	lsls	r3, r3, #24
 800449a:	431a      	orrs	r2, r3
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	69db      	ldr	r3, [r3, #28]
 80044a0:	071b      	lsls	r3, r3, #28
 80044a2:	4917      	ldr	r1, [pc, #92]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80044a4:	4313      	orrs	r3, r2
 80044a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80044aa:	4b15      	ldr	r3, [pc, #84]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80044ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b8:	4911      	ldr	r1, [pc, #68]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80044ba:	4313      	orrs	r3, r2
 80044bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80044c0:	4b0f      	ldr	r3, [pc, #60]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a0e      	ldr	r2, [pc, #56]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80044c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044cc:	f7fd f83a 	bl	8001544 <HAL_GetTick>
 80044d0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80044d2:	e008      	b.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80044d4:	f7fd f836 	bl	8001544 <HAL_GetTick>
 80044d8:	4602      	mov	r2, r0
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	2b64      	cmp	r3, #100	; 0x64
 80044e0:	d901      	bls.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80044e2:	2303      	movs	r3, #3
 80044e4:	e007      	b.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80044e6:	4b06      	ldr	r3, [pc, #24]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80044ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80044f2:	d1ef      	bne.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 80044f4:	2300      	movs	r3, #0
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3720      	adds	r7, #32
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}
 80044fe:	bf00      	nop
 8004500:	40023800 	.word	0x40023800

08004504 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b082      	sub	sp, #8
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d101      	bne.n	8004516 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	e022      	b.n	800455c <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800451c:	b2db      	uxtb	r3, r3
 800451e:	2b00      	cmp	r3, #0
 8004520:	d105      	bne.n	800452e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2200      	movs	r2, #0
 8004526:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	f7fc fd8b 	bl	8001044 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2203      	movs	r2, #3
 8004532:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f000 f814 	bl	8004564 <HAL_SD_InitCard>
 800453c:	4603      	mov	r3, r0
 800453e:	2b00      	cmp	r3, #0
 8004540:	d001      	beq.n	8004546 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	e00a      	b.n	800455c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2200      	movs	r2, #0
 800454a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2200      	movs	r2, #0
 8004550:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2201      	movs	r2, #1
 8004556:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800455a:	2300      	movs	r3, #0
}
 800455c:	4618      	mov	r0, r3
 800455e:	3708      	adds	r7, #8
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}

08004564 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004564:	b5b0      	push	{r4, r5, r7, lr}
 8004566:	b08e      	sub	sp, #56	; 0x38
 8004568:	af04      	add	r7, sp, #16
 800456a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800456c:	2300      	movs	r3, #0
 800456e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8004570:	2300      	movs	r3, #0
 8004572:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8004574:	2300      	movs	r3, #0
 8004576:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8004578:	2300      	movs	r3, #0
 800457a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800457c:	2300      	movs	r3, #0
 800457e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8004580:	2376      	movs	r3, #118	; 0x76
 8004582:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681d      	ldr	r5, [r3, #0]
 8004588:	466c      	mov	r4, sp
 800458a:	f107 0314 	add.w	r3, r7, #20
 800458e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004592:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004596:	f107 0308 	add.w	r3, r7, #8
 800459a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800459c:	4628      	mov	r0, r5
 800459e:	f002 f967 	bl	8006870 <SDMMC_Init>
 80045a2:	4603      	mov	r3, r0
 80045a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80045a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d001      	beq.n	80045b4 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	e03b      	b.n	800462c <HAL_SD_InitCard+0xc8>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	685a      	ldr	r2, [r3, #4]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80045c2:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4618      	mov	r0, r3
 80045ca:	f002 f99b 	bl	8006904 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	685a      	ldr	r2, [r3, #4]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045dc:	605a      	str	r2, [r3, #4]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f000 ffca 	bl	8005578 <SD_PowerON>
 80045e4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80045e6:	6a3b      	ldr	r3, [r7, #32]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d00b      	beq.n	8004604 <HAL_SD_InitCard+0xa0>
  {
    hsd->State = HAL_SD_STATE_READY;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2201      	movs	r2, #1
 80045f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045f8:	6a3b      	ldr	r3, [r7, #32]
 80045fa:	431a      	orrs	r2, r3
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	e013      	b.n	800462c <HAL_SD_InitCard+0xc8>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8004604:	6878      	ldr	r0, [r7, #4]
 8004606:	f000 fee9 	bl	80053dc <SD_InitCard>
 800460a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800460c:	6a3b      	ldr	r3, [r7, #32]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d00b      	beq.n	800462a <HAL_SD_InitCard+0xc6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2201      	movs	r2, #1
 8004616:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800461e:	6a3b      	ldr	r3, [r7, #32]
 8004620:	431a      	orrs	r2, r3
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	e000      	b.n	800462c <HAL_SD_InitCard+0xc8>
  }

  return HAL_OK;
 800462a:	2300      	movs	r3, #0
}
 800462c:	4618      	mov	r0, r3
 800462e:	3728      	adds	r7, #40	; 0x28
 8004630:	46bd      	mov	sp, r7
 8004632:	bdb0      	pop	{r4, r5, r7, pc}

08004634 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b08c      	sub	sp, #48	; 0x30
 8004638:	af00      	add	r7, sp, #0
 800463a:	60f8      	str	r0, [r7, #12]
 800463c:	60b9      	str	r1, [r7, #8]
 800463e:	607a      	str	r2, [r7, #4]
 8004640:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d107      	bne.n	800465c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004650:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	e0cc      	b.n	80047f6 <HAL_SD_ReadBlocks_DMA+0x1c2>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004662:	b2db      	uxtb	r3, r3
 8004664:	2b01      	cmp	r3, #1
 8004666:	f040 80c5 	bne.w	80047f4 <HAL_SD_ReadBlocks_DMA+0x1c0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2200      	movs	r2, #0
 800466e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004670:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	441a      	add	r2, r3
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800467a:	429a      	cmp	r2, r3
 800467c:	d907      	bls.n	800468e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004682:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	e0b3      	b.n	80047f6 <HAL_SD_ReadBlocks_DMA+0x1c2>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2203      	movs	r2, #3
 8004692:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	2200      	movs	r2, #0
 800469c:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 80046ac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b2:	4a53      	ldr	r2, [pc, #332]	; (8004800 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 80046b4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ba:	4a52      	ldr	r2, [pc, #328]	; (8004804 <HAL_SD_ReadBlocks_DMA+0x1d0>)
 80046bc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c2:	2200      	movs	r2, #0
 80046c4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	3380      	adds	r3, #128	; 0x80
 80046d0:	4619      	mov	r1, r3
 80046d2:	68ba      	ldr	r2, [r7, #8]
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	025b      	lsls	r3, r3, #9
 80046d8:	089b      	lsrs	r3, r3, #2
 80046da:	f7fd ff81 	bl	80025e0 <HAL_DMA_Start_IT>
 80046de:	4603      	mov	r3, r0
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d017      	beq.n	8004714 <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 80046f2:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a43      	ldr	r2, [pc, #268]	; (8004808 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 80046fa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004700:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2201      	movs	r2, #1
 800470c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	e070      	b.n	80047f6 <HAL_SD_ReadBlocks_DMA+0x1c2>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f042 0208 	orr.w	r2, r2, #8
 8004722:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004728:	2b01      	cmp	r3, #1
 800472a:	d002      	beq.n	8004732 <HAL_SD_ReadBlocks_DMA+0xfe>
      {
        add *= 512U;
 800472c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800472e:	025b      	lsls	r3, r3, #9
 8004730:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f44f 7100 	mov.w	r1, #512	; 0x200
 800473a:	4618      	mov	r0, r3
 800473c:	f002 f976 	bl	8006a2c <SDMMC_CmdBlockLength>
 8004740:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 8004742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004744:	2b00      	cmp	r3, #0
 8004746:	d00f      	beq.n	8004768 <HAL_SD_ReadBlocks_DMA+0x134>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a2e      	ldr	r2, [pc, #184]	; (8004808 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 800474e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004756:	431a      	orrs	r2, r3
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2201      	movs	r2, #1
 8004760:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	e046      	b.n	80047f6 <HAL_SD_ReadBlocks_DMA+0x1c2>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004768:	f04f 33ff 	mov.w	r3, #4294967295
 800476c:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	025b      	lsls	r3, r3, #9
 8004772:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8004774:	2390      	movs	r3, #144	; 0x90
 8004776:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8004778:	2302      	movs	r3, #2
 800477a:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800477c:	2300      	movs	r3, #0
 800477e:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8004780:	2301      	movs	r3, #1
 8004782:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f107 0210 	add.w	r2, r7, #16
 800478c:	4611      	mov	r1, r2
 800478e:	4618      	mov	r0, r3
 8004790:	f002 f920 	bl	80069d4 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	2b01      	cmp	r3, #1
 8004798:	d90a      	bls.n	80047b0 <HAL_SD_ReadBlocks_DMA+0x17c>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2282      	movs	r2, #130	; 0x82
 800479e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80047a6:	4618      	mov	r0, r3
 80047a8:	f002 f984 	bl	8006ab4 <SDMMC_CmdReadMultiBlock>
 80047ac:	62f8      	str	r0, [r7, #44]	; 0x2c
 80047ae:	e009      	b.n	80047c4 <HAL_SD_ReadBlocks_DMA+0x190>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2281      	movs	r2, #129	; 0x81
 80047b4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80047bc:	4618      	mov	r0, r3
 80047be:	f002 f957 	bl	8006a70 <SDMMC_CmdReadSingleBlock>
 80047c2:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 80047c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d012      	beq.n	80047f0 <HAL_SD_ReadBlocks_DMA+0x1bc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a0e      	ldr	r2, [pc, #56]	; (8004808 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 80047d0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047d8:	431a      	orrs	r2, r3
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2201      	movs	r2, #1
 80047e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2200      	movs	r2, #0
 80047ea:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80047ec:	2301      	movs	r3, #1
 80047ee:	e002      	b.n	80047f6 <HAL_SD_ReadBlocks_DMA+0x1c2>
      }

      return HAL_OK;
 80047f0:	2300      	movs	r3, #0
 80047f2:	e000      	b.n	80047f6 <HAL_SD_ReadBlocks_DMA+0x1c2>
    }
  }
  else
  {
    return HAL_BUSY;
 80047f4:	2302      	movs	r3, #2
  }
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3730      	adds	r7, #48	; 0x30
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}
 80047fe:	bf00      	nop
 8004800:	080051eb 	.word	0x080051eb
 8004804:	0800525d 	.word	0x0800525d
 8004808:	004005ff 	.word	0x004005ff

0800480c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b08c      	sub	sp, #48	; 0x30
 8004810:	af00      	add	r7, sp, #0
 8004812:	60f8      	str	r0, [r7, #12]
 8004814:	60b9      	str	r1, [r7, #8]
 8004816:	607a      	str	r2, [r7, #4]
 8004818:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d107      	bne.n	8004834 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004828:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	e0cf      	b.n	80049d4 <HAL_SD_WriteBlocks_DMA+0x1c8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800483a:	b2db      	uxtb	r3, r3
 800483c:	2b01      	cmp	r3, #1
 800483e:	f040 80c8 	bne.w	80049d2 <HAL_SD_WriteBlocks_DMA+0x1c6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2200      	movs	r2, #0
 8004846:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004848:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	441a      	add	r2, r3
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004852:	429a      	cmp	r2, r3
 8004854:	d907      	bls.n	8004866 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800485a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	e0b6      	b.n	80049d4 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2203      	movs	r2, #3
 800486a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	2200      	movs	r2, #0
 8004874:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f042 021a 	orr.w	r2, r2, #26
 8004884:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800488a:	4a54      	ldr	r2, [pc, #336]	; (80049dc <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800488c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004892:	4a53      	ldr	r2, [pc, #332]	; (80049e0 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 8004894:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800489a:	2200      	movs	r2, #0
 800489c:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d002      	beq.n	80048ac <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 80048a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048a8:	025b      	lsls	r3, r3, #9
 80048aa:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80048b4:	4618      	mov	r0, r3
 80048b6:	f002 f8b9 	bl	8006a2c <SDMMC_CmdBlockLength>
 80048ba:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 80048bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d00f      	beq.n	80048e2 <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a47      	ldr	r2, [pc, #284]	; (80049e4 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 80048c8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048d0:	431a      	orrs	r2, r3
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2201      	movs	r2, #1
 80048da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	e078      	b.n	80049d4 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d90a      	bls.n	80048fe <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	22a0      	movs	r2, #160	; 0xa0
 80048ec:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80048f4:	4618      	mov	r0, r3
 80048f6:	f002 f921 	bl	8006b3c <SDMMC_CmdWriteMultiBlock>
 80048fa:	62f8      	str	r0, [r7, #44]	; 0x2c
 80048fc:	e009      	b.n	8004912 <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2290      	movs	r2, #144	; 0x90
 8004902:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800490a:	4618      	mov	r0, r3
 800490c:	f002 f8f4 	bl	8006af8 <SDMMC_CmdWriteSingleBlock>
 8004910:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8004912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004914:	2b00      	cmp	r3, #0
 8004916:	d012      	beq.n	800493e <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a31      	ldr	r2, [pc, #196]	; (80049e4 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 800491e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004926:	431a      	orrs	r2, r3
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2201      	movs	r2, #1
 8004930:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2200      	movs	r2, #0
 8004938:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	e04a      	b.n	80049d4 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f042 0208 	orr.w	r2, r2, #8
 800494c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8004952:	68b9      	ldr	r1, [r7, #8]
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	3380      	adds	r3, #128	; 0x80
 800495a:	461a      	mov	r2, r3
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	025b      	lsls	r3, r3, #9
 8004960:	089b      	lsrs	r3, r3, #2
 8004962:	f7fd fe3d 	bl	80025e0 <HAL_DMA_Start_IT>
 8004966:	4603      	mov	r3, r0
 8004968:	2b00      	cmp	r3, #0
 800496a:	d01a      	beq.n	80049a2 <HAL_SD_WriteBlocks_DMA+0x196>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f022 021a 	bic.w	r2, r2, #26
 800497a:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a18      	ldr	r2, [pc, #96]	; (80049e4 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8004982:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004988:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2201      	movs	r2, #1
 8004994:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2200      	movs	r2, #0
 800499c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e018      	b.n	80049d4 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80049a2:	f04f 33ff 	mov.w	r3, #4294967295
 80049a6:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	025b      	lsls	r3, r3, #9
 80049ac:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80049ae:	2390      	movs	r3, #144	; 0x90
 80049b0:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80049b2:	2300      	movs	r3, #0
 80049b4:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80049b6:	2300      	movs	r3, #0
 80049b8:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 80049ba:	2301      	movs	r3, #1
 80049bc:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f107 0210 	add.w	r2, r7, #16
 80049c6:	4611      	mov	r1, r2
 80049c8:	4618      	mov	r0, r3
 80049ca:	f002 f803 	bl	80069d4 <SDMMC_ConfigData>

      return HAL_OK;
 80049ce:	2300      	movs	r3, #0
 80049d0:	e000      	b.n	80049d4 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }
  }
  else
  {
    return HAL_BUSY;
 80049d2:	2302      	movs	r3, #2
  }
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3730      	adds	r7, #48	; 0x30
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}
 80049dc:	080051c1 	.word	0x080051c1
 80049e0:	0800525d 	.word	0x0800525d
 80049e4:	004005ff 	.word	0x004005ff

080049e8 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b084      	sub	sp, #16
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049f4:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d008      	beq.n	8004a16 <HAL_SD_IRQHandler+0x2e>
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f003 0308 	and.w	r3, r3, #8
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d003      	beq.n	8004a16 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f000 ffc8 	bl	80059a4 <SD_Read_IT>
 8004a14:	e153      	b.n	8004cbe <HAL_SD_IRQHandler+0x2d6>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	f000 808d 	beq.w	8004b40 <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004a2e:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	4ba3      	ldr	r3, [pc, #652]	; (8004cc8 <HAL_SD_IRQHandler+0x2e0>)
 8004a3c:	400b      	ands	r3, r1
 8004a3e:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f022 0201 	bic.w	r2, r2, #1
 8004a4e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f003 0308 	and.w	r3, r3, #8
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d039      	beq.n	8004ace <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	f003 0302 	and.w	r3, r3, #2
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d104      	bne.n	8004a6e <HAL_SD_IRQHandler+0x86>
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f003 0320 	and.w	r3, r3, #32
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d011      	beq.n	8004a92 <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4618      	mov	r0, r3
 8004a74:	f002 f884 	bl	8006b80 <SDMMC_CmdStopTransfer>
 8004a78:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d008      	beq.n	8004a92 <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	431a      	orrs	r2, r3
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	f000 f921 	bl	8004cd4 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f240 523a 	movw	r2, #1338	; 0x53a
 8004a9a:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	f003 0301 	and.w	r3, r3, #1
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d104      	bne.n	8004abe <HAL_SD_IRQHandler+0xd6>
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	f003 0302 	and.w	r3, r3, #2
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d003      	beq.n	8004ac6 <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f002 ff94 	bl	80079ec <HAL_SD_RxCpltCallback>
 8004ac4:	e0fb      	b.n	8004cbe <HAL_SD_IRQHandler+0x2d6>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f002 ff86 	bl	80079d8 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004acc:	e0f7      	b.n	8004cbe <HAL_SD_IRQHandler+0x2d6>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	f000 80f2 	beq.w	8004cbe <HAL_SD_IRQHandler+0x2d6>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	f003 0320 	and.w	r3, r3, #32
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d011      	beq.n	8004b08 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f002 f849 	bl	8006b80 <SDMMC_CmdStopTransfer>
 8004aee:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d008      	beq.n	8004b08 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	431a      	orrs	r2, r3
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f000 f8e6 	bl	8004cd4 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f003 0301 	and.w	r3, r3, #1
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	f040 80d5 	bne.w	8004cbe <HAL_SD_IRQHandler+0x2d6>
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	f003 0302 	and.w	r3, r3, #2
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	f040 80cf 	bne.w	8004cbe <HAL_SD_IRQHandler+0x2d6>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f022 0208 	bic.w	r2, r2, #8
 8004b2e:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2201      	movs	r2, #1
 8004b34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8004b38:	6878      	ldr	r0, [r7, #4]
 8004b3a:	f002 ff4d 	bl	80079d8 <HAL_SD_TxCpltCallback>
}
 8004b3e:	e0be      	b.n	8004cbe <HAL_SD_IRQHandler+0x2d6>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d008      	beq.n	8004b60 <HAL_SD_IRQHandler+0x178>
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	f003 0308 	and.w	r3, r3, #8
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d003      	beq.n	8004b60 <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	f000 ff74 	bl	8005a46 <SD_Write_IT>
 8004b5e:	e0ae      	b.n	8004cbe <HAL_SD_IRQHandler+0x2d6>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b66:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	f000 80a7 	beq.w	8004cbe <HAL_SD_IRQHandler+0x2d6>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b76:	f003 0302 	and.w	r3, r3, #2
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d005      	beq.n	8004b8a <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b82:	f043 0202 	orr.w	r2, r3, #2
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b90:	f003 0308 	and.w	r3, r3, #8
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d005      	beq.n	8004ba4 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b9c:	f043 0208 	orr.w	r2, r3, #8
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004baa:	f003 0320 	and.w	r3, r3, #32
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d005      	beq.n	8004bbe <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bb6:	f043 0220 	orr.w	r2, r3, #32
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bc4:	f003 0310 	and.w	r3, r3, #16
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d005      	beq.n	8004bd8 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bd0:	f043 0210 	orr.w	r2, r3, #16
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f240 523a 	movw	r2, #1338	; 0x53a
 8004be0:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8004bf0:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f001 ffc2 	bl	8006b80 <SDMMC_CmdStopTransfer>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c02:	431a      	orrs	r2, r3
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f003 0308 	and.w	r3, r3, #8
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d00a      	beq.n	8004c28 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2201      	movs	r2, #1
 8004c16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	f000 f857 	bl	8004cd4 <HAL_SD_ErrorCallback>
}
 8004c26:	e04a      	b.n	8004cbe <HAL_SD_IRQHandler+0x2d6>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d045      	beq.n	8004cbe <HAL_SD_IRQHandler+0x2d6>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	f003 0310 	and.w	r3, r3, #16
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d104      	bne.n	8004c46 <HAL_SD_IRQHandler+0x25e>
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f003 0320 	and.w	r3, r3, #32
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d011      	beq.n	8004c6a <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c4a:	4a20      	ldr	r2, [pc, #128]	; (8004ccc <HAL_SD_IRQHandler+0x2e4>)
 8004c4c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c52:	4618      	mov	r0, r3
 8004c54:	f7fd fd24 	bl	80026a0 <HAL_DMA_Abort_IT>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d02f      	beq.n	8004cbe <HAL_SD_IRQHandler+0x2d6>
          SD_DMATxAbort(hsd->hdmatx);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c62:	4618      	mov	r0, r3
 8004c64:	f000 fb4c 	bl	8005300 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8004c68:	e029      	b.n	8004cbe <HAL_SD_IRQHandler+0x2d6>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	f003 0301 	and.w	r3, r3, #1
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d104      	bne.n	8004c7e <HAL_SD_IRQHandler+0x296>
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f003 0302 	and.w	r3, r3, #2
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d011      	beq.n	8004ca2 <HAL_SD_IRQHandler+0x2ba>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c82:	4a13      	ldr	r2, [pc, #76]	; (8004cd0 <HAL_SD_IRQHandler+0x2e8>)
 8004c84:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f7fd fd08 	bl	80026a0 <HAL_DMA_Abort_IT>
 8004c90:	4603      	mov	r3, r0
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d013      	beq.n	8004cbe <HAL_SD_IRQHandler+0x2d6>
          SD_DMARxAbort(hsd->hdmarx);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f000 fb67 	bl	800536e <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8004ca0:	e00d      	b.n	8004cbe <HAL_SD_IRQHandler+0x2d6>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2201      	movs	r2, #1
 8004cac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f002 fe84 	bl	80079c4 <HAL_SD_AbortCallback>
}
 8004cbc:	e7ff      	b.n	8004cbe <HAL_SD_IRQHandler+0x2d6>
 8004cbe:	bf00      	nop
 8004cc0:	3710      	adds	r7, #16
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}
 8004cc6:	bf00      	nop
 8004cc8:	ffff3ec5 	.word	0xffff3ec5
 8004ccc:	08005301 	.word	0x08005301
 8004cd0:	0800536f 	.word	0x0800536f

08004cd4 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b083      	sub	sp, #12
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8004cdc:	bf00      	nop
 8004cde:	370c      	adds	r7, #12
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr

08004ce8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b083      	sub	sp, #12
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
 8004cf0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004cf6:	0f9b      	lsrs	r3, r3, #30
 8004cf8:	b2da      	uxtb	r2, r3
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d02:	0e9b      	lsrs	r3, r3, #26
 8004d04:	b2db      	uxtb	r3, r3
 8004d06:	f003 030f 	and.w	r3, r3, #15
 8004d0a:	b2da      	uxtb	r2, r3
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d14:	0e1b      	lsrs	r3, r3, #24
 8004d16:	b2db      	uxtb	r3, r3
 8004d18:	f003 0303 	and.w	r3, r3, #3
 8004d1c:	b2da      	uxtb	r2, r3
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d26:	0c1b      	lsrs	r3, r3, #16
 8004d28:	b2da      	uxtb	r2, r3
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d32:	0a1b      	lsrs	r3, r3, #8
 8004d34:	b2da      	uxtb	r2, r3
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d3e:	b2da      	uxtb	r2, r3
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d48:	0d1b      	lsrs	r3, r3, #20
 8004d4a:	b29a      	uxth	r2, r3
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d54:	0c1b      	lsrs	r3, r3, #16
 8004d56:	b2db      	uxtb	r3, r3
 8004d58:	f003 030f 	and.w	r3, r3, #15
 8004d5c:	b2da      	uxtb	r2, r3
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d66:	0bdb      	lsrs	r3, r3, #15
 8004d68:	b2db      	uxtb	r3, r3
 8004d6a:	f003 0301 	and.w	r3, r3, #1
 8004d6e:	b2da      	uxtb	r2, r3
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d78:	0b9b      	lsrs	r3, r3, #14
 8004d7a:	b2db      	uxtb	r3, r3
 8004d7c:	f003 0301 	and.w	r3, r3, #1
 8004d80:	b2da      	uxtb	r2, r3
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d8a:	0b5b      	lsrs	r3, r3, #13
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	f003 0301 	and.w	r3, r3, #1
 8004d92:	b2da      	uxtb	r2, r3
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d9c:	0b1b      	lsrs	r3, r3, #12
 8004d9e:	b2db      	uxtb	r3, r3
 8004da0:	f003 0301 	and.w	r3, r3, #1
 8004da4:	b2da      	uxtb	r2, r3
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	2200      	movs	r2, #0
 8004dae:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d163      	bne.n	8004e80 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004dbc:	009a      	lsls	r2, r3, #2
 8004dbe:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004dc2:	4013      	ands	r3, r2
 8004dc4:	687a      	ldr	r2, [r7, #4]
 8004dc6:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8004dc8:	0f92      	lsrs	r2, r2, #30
 8004dca:	431a      	orrs	r2, r3
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004dd4:	0edb      	lsrs	r3, r3, #27
 8004dd6:	b2db      	uxtb	r3, r3
 8004dd8:	f003 0307 	and.w	r3, r3, #7
 8004ddc:	b2da      	uxtb	r2, r3
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004de6:	0e1b      	lsrs	r3, r3, #24
 8004de8:	b2db      	uxtb	r3, r3
 8004dea:	f003 0307 	and.w	r3, r3, #7
 8004dee:	b2da      	uxtb	r2, r3
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004df8:	0d5b      	lsrs	r3, r3, #21
 8004dfa:	b2db      	uxtb	r3, r3
 8004dfc:	f003 0307 	and.w	r3, r3, #7
 8004e00:	b2da      	uxtb	r2, r3
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e0a:	0c9b      	lsrs	r3, r3, #18
 8004e0c:	b2db      	uxtb	r3, r3
 8004e0e:	f003 0307 	and.w	r3, r3, #7
 8004e12:	b2da      	uxtb	r2, r3
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e1c:	0bdb      	lsrs	r3, r3, #15
 8004e1e:	b2db      	uxtb	r3, r3
 8004e20:	f003 0307 	and.w	r3, r3, #7
 8004e24:	b2da      	uxtb	r2, r3
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	691b      	ldr	r3, [r3, #16]
 8004e2e:	1c5a      	adds	r2, r3, #1
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	7e1b      	ldrb	r3, [r3, #24]
 8004e38:	b2db      	uxtb	r3, r3
 8004e3a:	f003 0307 	and.w	r3, r3, #7
 8004e3e:	3302      	adds	r3, #2
 8004e40:	2201      	movs	r2, #1
 8004e42:	fa02 f303 	lsl.w	r3, r2, r3
 8004e46:	687a      	ldr	r2, [r7, #4]
 8004e48:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004e4a:	fb02 f203 	mul.w	r2, r2, r3
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	7a1b      	ldrb	r3, [r3, #8]
 8004e56:	b2db      	uxtb	r3, r3
 8004e58:	f003 030f 	and.w	r3, r3, #15
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	409a      	lsls	r2, r3
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e68:	687a      	ldr	r2, [r7, #4]
 8004e6a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004e6c:	0a52      	lsrs	r2, r2, #9
 8004e6e:	fb02 f203 	mul.w	r2, r2, r3
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e7c:	661a      	str	r2, [r3, #96]	; 0x60
 8004e7e:	e031      	b.n	8004ee4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d11d      	bne.n	8004ec4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e8c:	041b      	lsls	r3, r3, #16
 8004e8e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e96:	0c1b      	lsrs	r3, r3, #16
 8004e98:	431a      	orrs	r2, r3
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	691b      	ldr	r3, [r3, #16]
 8004ea2:	3301      	adds	r3, #1
 8004ea4:	029a      	lsls	r2, r3, #10
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004eb8:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	661a      	str	r2, [r3, #96]	; 0x60
 8004ec2:	e00f      	b.n	8004ee4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a58      	ldr	r2, [pc, #352]	; (800502c <HAL_SD_GetCardCSD+0x344>)
 8004eca:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ed0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2201      	movs	r2, #1
 8004edc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	e09d      	b.n	8005020 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ee8:	0b9b      	lsrs	r3, r3, #14
 8004eea:	b2db      	uxtb	r3, r3
 8004eec:	f003 0301 	and.w	r3, r3, #1
 8004ef0:	b2da      	uxtb	r2, r3
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004efa:	09db      	lsrs	r3, r3, #7
 8004efc:	b2db      	uxtb	r3, r3
 8004efe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f02:	b2da      	uxtb	r2, r3
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f0c:	b2db      	uxtb	r3, r3
 8004f0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f12:	b2da      	uxtb	r2, r3
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f1c:	0fdb      	lsrs	r3, r3, #31
 8004f1e:	b2da      	uxtb	r2, r3
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f28:	0f5b      	lsrs	r3, r3, #29
 8004f2a:	b2db      	uxtb	r3, r3
 8004f2c:	f003 0303 	and.w	r3, r3, #3
 8004f30:	b2da      	uxtb	r2, r3
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f3a:	0e9b      	lsrs	r3, r3, #26
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	f003 0307 	and.w	r3, r3, #7
 8004f42:	b2da      	uxtb	r2, r3
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f4c:	0d9b      	lsrs	r3, r3, #22
 8004f4e:	b2db      	uxtb	r3, r3
 8004f50:	f003 030f 	and.w	r3, r3, #15
 8004f54:	b2da      	uxtb	r2, r3
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f5e:	0d5b      	lsrs	r3, r3, #21
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	f003 0301 	and.w	r3, r3, #1
 8004f66:	b2da      	uxtb	r2, r3
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	2200      	movs	r2, #0
 8004f72:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f7a:	0c1b      	lsrs	r3, r3, #16
 8004f7c:	b2db      	uxtb	r3, r3
 8004f7e:	f003 0301 	and.w	r3, r3, #1
 8004f82:	b2da      	uxtb	r2, r3
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f8e:	0bdb      	lsrs	r3, r3, #15
 8004f90:	b2db      	uxtb	r3, r3
 8004f92:	f003 0301 	and.w	r3, r3, #1
 8004f96:	b2da      	uxtb	r2, r3
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fa2:	0b9b      	lsrs	r3, r3, #14
 8004fa4:	b2db      	uxtb	r3, r3
 8004fa6:	f003 0301 	and.w	r3, r3, #1
 8004faa:	b2da      	uxtb	r2, r3
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fb6:	0b5b      	lsrs	r3, r3, #13
 8004fb8:	b2db      	uxtb	r3, r3
 8004fba:	f003 0301 	and.w	r3, r3, #1
 8004fbe:	b2da      	uxtb	r2, r3
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fca:	0b1b      	lsrs	r3, r3, #12
 8004fcc:	b2db      	uxtb	r3, r3
 8004fce:	f003 0301 	and.w	r3, r3, #1
 8004fd2:	b2da      	uxtb	r2, r3
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fde:	0a9b      	lsrs	r3, r3, #10
 8004fe0:	b2db      	uxtb	r3, r3
 8004fe2:	f003 0303 	and.w	r3, r3, #3
 8004fe6:	b2da      	uxtb	r2, r3
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ff2:	0a1b      	lsrs	r3, r3, #8
 8004ff4:	b2db      	uxtb	r3, r3
 8004ff6:	f003 0303 	and.w	r3, r3, #3
 8004ffa:	b2da      	uxtb	r2, r3
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005006:	085b      	lsrs	r3, r3, #1
 8005008:	b2db      	uxtb	r3, r3
 800500a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800500e:	b2da      	uxtb	r2, r3
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	2201      	movs	r2, #1
 800501a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800501e:	2300      	movs	r3, #0
}
 8005020:	4618      	mov	r0, r3
 8005022:	370c      	adds	r7, #12
 8005024:	46bd      	mov	sp, r7
 8005026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502a:	4770      	bx	lr
 800502c:	004005ff 	.word	0x004005ff

08005030 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8005030:	b480      	push	{r7}
 8005032:	b083      	sub	sp, #12
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
 8005038:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800507a:	2300      	movs	r3, #0
}
 800507c:	4618      	mov	r0, r3
 800507e:	370c      	adds	r7, #12
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr

08005088 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8005088:	b5b0      	push	{r4, r5, r7, lr}
 800508a:	b08e      	sub	sp, #56	; 0x38
 800508c:	af04      	add	r7, sp, #16
 800508e:	6078      	str	r0, [r7, #4]
 8005090:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2203      	movs	r2, #3
 8005096:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800509e:	2b03      	cmp	r3, #3
 80050a0:	d02e      	beq.n	8005100 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050a8:	d106      	bne.n	80050b8 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ae:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	639a      	str	r2, [r3, #56]	; 0x38
 80050b6:	e029      	b.n	800510c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050be:	d10a      	bne.n	80050d6 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	f000 fb0f 	bl	80056e4 <SD_WideBus_Enable>
 80050c6:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ce:	431a      	orrs	r2, r3
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	639a      	str	r2, [r3, #56]	; 0x38
 80050d4:	e01a      	b.n	800510c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d10a      	bne.n	80050f2 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80050dc:	6878      	ldr	r0, [r7, #4]
 80050de:	f000 fb4c 	bl	800577a <SD_WideBus_Disable>
 80050e2:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ea:	431a      	orrs	r2, r3
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	639a      	str	r2, [r3, #56]	; 0x38
 80050f0:	e00c      	b.n	800510c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050f6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	639a      	str	r2, [r3, #56]	; 0x38
 80050fe:	e005      	b.n	800510c <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005104:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005110:	2b00      	cmp	r3, #0
 8005112:	d009      	beq.n	8005128 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a18      	ldr	r2, [pc, #96]	; (800517c <HAL_SD_ConfigWideBusOperation+0xf4>)
 800511a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2201      	movs	r2, #1
 8005120:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005124:	2301      	movs	r3, #1
 8005126:	e024      	b.n	8005172 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	68db      	ldr	r3, [r3, #12]
 8005138:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	695b      	ldr	r3, [r3, #20]
 8005142:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	699b      	ldr	r3, [r3, #24]
 8005148:	623b      	str	r3, [r7, #32]
    (void)SDMMC_Init(hsd->Instance, Init);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681d      	ldr	r5, [r3, #0]
 800514e:	466c      	mov	r4, sp
 8005150:	f107 0318 	add.w	r3, r7, #24
 8005154:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005158:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800515c:	f107 030c 	add.w	r3, r7, #12
 8005160:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005162:	4628      	mov	r0, r5
 8005164:	f001 fb84 	bl	8006870 <SDMMC_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2201      	movs	r2, #1
 800516c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005170:	2300      	movs	r3, #0
}
 8005172:	4618      	mov	r0, r3
 8005174:	3728      	adds	r7, #40	; 0x28
 8005176:	46bd      	mov	sp, r7
 8005178:	bdb0      	pop	{r4, r5, r7, pc}
 800517a:	bf00      	nop
 800517c:	004005ff 	.word	0x004005ff

08005180 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b086      	sub	sp, #24
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8005188:	2300      	movs	r3, #0
 800518a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800518c:	f107 030c 	add.w	r3, r7, #12
 8005190:	4619      	mov	r1, r3
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f000 fa7e 	bl	8005694 <SD_SendStatus>
 8005198:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d005      	beq.n	80051ac <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	431a      	orrs	r2, r3
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	0a5b      	lsrs	r3, r3, #9
 80051b0:	f003 030f 	and.w	r3, r3, #15
 80051b4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80051b6:	693b      	ldr	r3, [r7, #16]
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	3718      	adds	r7, #24
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd80      	pop	{r7, pc}

080051c0 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b085      	sub	sp, #20
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051cc:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051dc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80051de:	bf00      	nop
 80051e0:	3714      	adds	r7, #20
 80051e2:	46bd      	mov	sp, r7
 80051e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e8:	4770      	bx	lr

080051ea <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80051ea:	b580      	push	{r7, lr}
 80051ec:	b084      	sub	sp, #16
 80051ee:	af00      	add	r7, sp, #0
 80051f0:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051f6:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051fc:	2b82      	cmp	r3, #130	; 0x82
 80051fe:	d111      	bne.n	8005224 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4618      	mov	r0, r3
 8005206:	f001 fcbb 	bl	8006b80 <SDMMC_CmdStopTransfer>
 800520a:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d008      	beq.n	8005224 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	431a      	orrs	r2, r3
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800521e:	68f8      	ldr	r0, [r7, #12]
 8005220:	f7ff fd58 	bl	8004cd4 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f022 0208 	bic.w	r2, r2, #8
 8005232:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f240 523a 	movw	r2, #1338	; 0x53a
 800523c:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2201      	movs	r2, #1
 8005242:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2200      	movs	r2, #0
 800524a:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800524c:	68f8      	ldr	r0, [r7, #12]
 800524e:	f002 fbcd 	bl	80079ec <HAL_SD_RxCpltCallback>
#endif
}
 8005252:	bf00      	nop
 8005254:	3710      	adds	r7, #16
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}
	...

0800525c <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b086      	sub	sp, #24
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005268:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f7fd fbc4 	bl	80029f8 <HAL_DMA_GetError>
 8005270:	4603      	mov	r3, r0
 8005272:	2b02      	cmp	r3, #2
 8005274:	d03e      	beq.n	80052f4 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800527a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800527c:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005282:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005284:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	2b01      	cmp	r3, #1
 800528a:	d002      	beq.n	8005292 <SD_DMAError+0x36>
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2b01      	cmp	r3, #1
 8005290:	d12d      	bne.n	80052ee <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a19      	ldr	r2, [pc, #100]	; (80052fc <SD_DMAError+0xa0>)
 8005298:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80052a8:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ae:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 80052b6:	6978      	ldr	r0, [r7, #20]
 80052b8:	f7ff ff62 	bl	8005180 <HAL_SD_GetCardState>
 80052bc:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	2b06      	cmp	r3, #6
 80052c2:	d002      	beq.n	80052ca <SD_DMAError+0x6e>
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	2b05      	cmp	r3, #5
 80052c8:	d10a      	bne.n	80052e0 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4618      	mov	r0, r3
 80052d0:	f001 fc56 	bl	8006b80 <SDMMC_CmdStopTransfer>
 80052d4:	4602      	mov	r2, r0
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052da:	431a      	orrs	r2, r3
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	2201      	movs	r2, #1
 80052e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	2200      	movs	r2, #0
 80052ec:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 80052ee:	6978      	ldr	r0, [r7, #20]
 80052f0:	f7ff fcf0 	bl	8004cd4 <HAL_SD_ErrorCallback>
#endif
  }
}
 80052f4:	bf00      	nop
 80052f6:	3718      	adds	r7, #24
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}
 80052fc:	004005ff 	.word	0x004005ff

08005300 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b084      	sub	sp, #16
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800530c:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f240 523a 	movw	r2, #1338	; 0x53a
 8005316:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8005318:	68f8      	ldr	r0, [r7, #12]
 800531a:	f7ff ff31 	bl	8005180 <HAL_SD_GetCardState>
 800531e:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2201      	movs	r2, #1
 8005324:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2200      	movs	r2, #0
 800532c:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	2b06      	cmp	r3, #6
 8005332:	d002      	beq.n	800533a <SD_DMATxAbort+0x3a>
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	2b05      	cmp	r3, #5
 8005338:	d10a      	bne.n	8005350 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4618      	mov	r0, r3
 8005340:	f001 fc1e 	bl	8006b80 <SDMMC_CmdStopTransfer>
 8005344:	4602      	mov	r2, r0
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800534a:	431a      	orrs	r2, r3
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005354:	2b00      	cmp	r3, #0
 8005356:	d103      	bne.n	8005360 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8005358:	68f8      	ldr	r0, [r7, #12]
 800535a:	f002 fb33 	bl	80079c4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800535e:	e002      	b.n	8005366 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8005360:	68f8      	ldr	r0, [r7, #12]
 8005362:	f7ff fcb7 	bl	8004cd4 <HAL_SD_ErrorCallback>
}
 8005366:	bf00      	nop
 8005368:	3710      	adds	r7, #16
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}

0800536e <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800536e:	b580      	push	{r7, lr}
 8005370:	b084      	sub	sp, #16
 8005372:	af00      	add	r7, sp, #0
 8005374:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800537a:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f240 523a 	movw	r2, #1338	; 0x53a
 8005384:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8005386:	68f8      	ldr	r0, [r7, #12]
 8005388:	f7ff fefa 	bl	8005180 <HAL_SD_GetCardState>
 800538c:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	2201      	movs	r2, #1
 8005392:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2200      	movs	r2, #0
 800539a:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	2b06      	cmp	r3, #6
 80053a0:	d002      	beq.n	80053a8 <SD_DMARxAbort+0x3a>
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	2b05      	cmp	r3, #5
 80053a6:	d10a      	bne.n	80053be <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4618      	mov	r0, r3
 80053ae:	f001 fbe7 	bl	8006b80 <SDMMC_CmdStopTransfer>
 80053b2:	4602      	mov	r2, r0
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053b8:	431a      	orrs	r2, r3
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d103      	bne.n	80053ce <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80053c6:	68f8      	ldr	r0, [r7, #12]
 80053c8:	f002 fafc 	bl	80079c4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80053cc:	e002      	b.n	80053d4 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80053ce:	68f8      	ldr	r0, [r7, #12]
 80053d0:	f7ff fc80 	bl	8004cd4 <HAL_SD_ErrorCallback>
}
 80053d4:	bf00      	nop
 80053d6:	3710      	adds	r7, #16
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}

080053dc <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80053dc:	b5b0      	push	{r4, r5, r7, lr}
 80053de:	b094      	sub	sp, #80	; 0x50
 80053e0:	af04      	add	r7, sp, #16
 80053e2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80053e4:	2301      	movs	r3, #1
 80053e6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4618      	mov	r0, r3
 80053ee:	f001 fa98 	bl	8006922 <SDMMC_GetPowerState>
 80053f2:	4603      	mov	r3, r0
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d102      	bne.n	80053fe <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80053f8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80053fc:	e0b7      	b.n	800556e <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005402:	2b03      	cmp	r3, #3
 8005404:	d02f      	beq.n	8005466 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4618      	mov	r0, r3
 800540c:	f001 fcc3 	bl	8006d96 <SDMMC_CmdSendCID>
 8005410:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005412:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005414:	2b00      	cmp	r3, #0
 8005416:	d001      	beq.n	800541c <SD_InitCard+0x40>
    {
      return errorstate;
 8005418:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800541a:	e0a8      	b.n	800556e <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	2100      	movs	r1, #0
 8005422:	4618      	mov	r0, r3
 8005424:	f001 fac3 	bl	80069ae <SDMMC_GetResponse>
 8005428:	4602      	mov	r2, r0
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	2104      	movs	r1, #4
 8005434:	4618      	mov	r0, r3
 8005436:	f001 faba 	bl	80069ae <SDMMC_GetResponse>
 800543a:	4602      	mov	r2, r0
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	2108      	movs	r1, #8
 8005446:	4618      	mov	r0, r3
 8005448:	f001 fab1 	bl	80069ae <SDMMC_GetResponse>
 800544c:	4602      	mov	r2, r0
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	210c      	movs	r1, #12
 8005458:	4618      	mov	r0, r3
 800545a:	f001 faa8 	bl	80069ae <SDMMC_GetResponse>
 800545e:	4602      	mov	r2, r0
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800546a:	2b03      	cmp	r3, #3
 800546c:	d00d      	beq.n	800548a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f107 020e 	add.w	r2, r7, #14
 8005476:	4611      	mov	r1, r2
 8005478:	4618      	mov	r0, r3
 800547a:	f001 fcc9 	bl	8006e10 <SDMMC_CmdSetRelAdd>
 800547e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005480:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005482:	2b00      	cmp	r3, #0
 8005484:	d001      	beq.n	800548a <SD_InitCard+0xae>
    {
      return errorstate;
 8005486:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005488:	e071      	b.n	800556e <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800548e:	2b03      	cmp	r3, #3
 8005490:	d036      	beq.n	8005500 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8005492:	89fb      	ldrh	r3, [r7, #14]
 8005494:	461a      	mov	r2, r3
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681a      	ldr	r2, [r3, #0]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054a2:	041b      	lsls	r3, r3, #16
 80054a4:	4619      	mov	r1, r3
 80054a6:	4610      	mov	r0, r2
 80054a8:	f001 fc93 	bl	8006dd2 <SDMMC_CmdSendCSD>
 80054ac:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80054ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d001      	beq.n	80054b8 <SD_InitCard+0xdc>
    {
      return errorstate;
 80054b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054b6:	e05a      	b.n	800556e <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	2100      	movs	r1, #0
 80054be:	4618      	mov	r0, r3
 80054c0:	f001 fa75 	bl	80069ae <SDMMC_GetResponse>
 80054c4:	4602      	mov	r2, r0
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	2104      	movs	r1, #4
 80054d0:	4618      	mov	r0, r3
 80054d2:	f001 fa6c 	bl	80069ae <SDMMC_GetResponse>
 80054d6:	4602      	mov	r2, r0
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	2108      	movs	r1, #8
 80054e2:	4618      	mov	r0, r3
 80054e4:	f001 fa63 	bl	80069ae <SDMMC_GetResponse>
 80054e8:	4602      	mov	r2, r0
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	210c      	movs	r1, #12
 80054f4:	4618      	mov	r0, r3
 80054f6:	f001 fa5a 	bl	80069ae <SDMMC_GetResponse>
 80054fa:	4602      	mov	r2, r0
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	2104      	movs	r1, #4
 8005506:	4618      	mov	r0, r3
 8005508:	f001 fa51 	bl	80069ae <SDMMC_GetResponse>
 800550c:	4603      	mov	r3, r0
 800550e:	0d1a      	lsrs	r2, r3, #20
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8005514:	f107 0310 	add.w	r3, r7, #16
 8005518:	4619      	mov	r1, r3
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f7ff fbe4 	bl	8004ce8 <HAL_SD_GetCardCSD>
 8005520:	4603      	mov	r3, r0
 8005522:	2b00      	cmp	r3, #0
 8005524:	d002      	beq.n	800552c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005526:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800552a:	e020      	b.n	800556e <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6819      	ldr	r1, [r3, #0]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005534:	041b      	lsls	r3, r3, #16
 8005536:	f04f 0400 	mov.w	r4, #0
 800553a:	461a      	mov	r2, r3
 800553c:	4623      	mov	r3, r4
 800553e:	4608      	mov	r0, r1
 8005540:	f001 fb40 	bl	8006bc4 <SDMMC_CmdSelDesel>
 8005544:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8005546:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005548:	2b00      	cmp	r3, #0
 800554a:	d001      	beq.n	8005550 <SD_InitCard+0x174>
  {
    return errorstate;
 800554c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800554e:	e00e      	b.n	800556e <SD_InitCard+0x192>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681d      	ldr	r5, [r3, #0]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	466c      	mov	r4, sp
 8005558:	f103 0210 	add.w	r2, r3, #16
 800555c:	ca07      	ldmia	r2, {r0, r1, r2}
 800555e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005562:	3304      	adds	r3, #4
 8005564:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005566:	4628      	mov	r0, r5
 8005568:	f001 f982 	bl	8006870 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800556c:	2300      	movs	r3, #0
}
 800556e:	4618      	mov	r0, r3
 8005570:	3740      	adds	r7, #64	; 0x40
 8005572:	46bd      	mov	sp, r7
 8005574:	bdb0      	pop	{r4, r5, r7, pc}
	...

08005578 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b086      	sub	sp, #24
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005580:	2300      	movs	r3, #0
 8005582:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8005584:	2300      	movs	r3, #0
 8005586:	617b      	str	r3, [r7, #20]
 8005588:	2300      	movs	r3, #0
 800558a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4618      	mov	r0, r3
 8005592:	f001 fb3a 	bl	8006c0a <SDMMC_CmdGoIdleState>
 8005596:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d001      	beq.n	80055a2 <SD_PowerON+0x2a>
  {
    return errorstate;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	e072      	b.n	8005688 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4618      	mov	r0, r3
 80055a8:	f001 fb4d 	bl	8006c46 <SDMMC_CmdOperCond>
 80055ac:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d00d      	beq.n	80055d0 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2200      	movs	r2, #0
 80055b8:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4618      	mov	r0, r3
 80055c0:	f001 fb23 	bl	8006c0a <SDMMC_CmdGoIdleState>
 80055c4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d004      	beq.n	80055d6 <SD_PowerON+0x5e>
    {
      return errorstate;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	e05b      	b.n	8005688 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2201      	movs	r2, #1
 80055d4:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055da:	2b01      	cmp	r3, #1
 80055dc:	d137      	bne.n	800564e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	2100      	movs	r1, #0
 80055e4:	4618      	mov	r0, r3
 80055e6:	f001 fb4d 	bl	8006c84 <SDMMC_CmdAppCommand>
 80055ea:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d02d      	beq.n	800564e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80055f2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80055f6:	e047      	b.n	8005688 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	2100      	movs	r1, #0
 80055fe:	4618      	mov	r0, r3
 8005600:	f001 fb40 	bl	8006c84 <SDMMC_CmdAppCommand>
 8005604:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d001      	beq.n	8005610 <SD_PowerON+0x98>
    {
      return errorstate;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	e03b      	b.n	8005688 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	491e      	ldr	r1, [pc, #120]	; (8005690 <SD_PowerON+0x118>)
 8005616:	4618      	mov	r0, r3
 8005618:	f001 fb56 	bl	8006cc8 <SDMMC_CmdAppOperCommand>
 800561c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d002      	beq.n	800562a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005624:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005628:	e02e      	b.n	8005688 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	2100      	movs	r1, #0
 8005630:	4618      	mov	r0, r3
 8005632:	f001 f9bc 	bl	80069ae <SDMMC_GetResponse>
 8005636:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	0fdb      	lsrs	r3, r3, #31
 800563c:	2b01      	cmp	r3, #1
 800563e:	d101      	bne.n	8005644 <SD_PowerON+0xcc>
 8005640:	2301      	movs	r3, #1
 8005642:	e000      	b.n	8005646 <SD_PowerON+0xce>
 8005644:	2300      	movs	r3, #0
 8005646:	613b      	str	r3, [r7, #16]

    count++;
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	3301      	adds	r3, #1
 800564c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005654:	4293      	cmp	r3, r2
 8005656:	d802      	bhi.n	800565e <SD_PowerON+0xe6>
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d0cc      	beq.n	80055f8 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005664:	4293      	cmp	r3, r2
 8005666:	d902      	bls.n	800566e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8005668:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800566c:	e00c      	b.n	8005688 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005674:	2b00      	cmp	r3, #0
 8005676:	d003      	beq.n	8005680 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2201      	movs	r2, #1
 800567c:	645a      	str	r2, [r3, #68]	; 0x44
 800567e:	e002      	b.n	8005686 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2200      	movs	r2, #0
 8005684:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8005686:	2300      	movs	r3, #0
}
 8005688:	4618      	mov	r0, r3
 800568a:	3718      	adds	r7, #24
 800568c:	46bd      	mov	sp, r7
 800568e:	bd80      	pop	{r7, pc}
 8005690:	c1100000 	.word	0xc1100000

08005694 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b084      	sub	sp, #16
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
 800569c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d102      	bne.n	80056aa <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80056a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80056a8:	e018      	b.n	80056dc <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681a      	ldr	r2, [r3, #0]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056b2:	041b      	lsls	r3, r3, #16
 80056b4:	4619      	mov	r1, r3
 80056b6:	4610      	mov	r0, r2
 80056b8:	f001 fbcb 	bl	8006e52 <SDMMC_CmdSendStatus>
 80056bc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d001      	beq.n	80056c8 <SD_SendStatus+0x34>
  {
    return errorstate;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	e009      	b.n	80056dc <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	2100      	movs	r1, #0
 80056ce:	4618      	mov	r0, r3
 80056d0:	f001 f96d 	bl	80069ae <SDMMC_GetResponse>
 80056d4:	4602      	mov	r2, r0
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80056da:	2300      	movs	r3, #0
}
 80056dc:	4618      	mov	r0, r3
 80056de:	3710      	adds	r7, #16
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}

080056e4 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b086      	sub	sp, #24
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80056ec:	2300      	movs	r3, #0
 80056ee:	60fb      	str	r3, [r7, #12]
 80056f0:	2300      	movs	r3, #0
 80056f2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	2100      	movs	r1, #0
 80056fa:	4618      	mov	r0, r3
 80056fc:	f001 f957 	bl	80069ae <SDMMC_GetResponse>
 8005700:	4603      	mov	r3, r0
 8005702:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005706:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800570a:	d102      	bne.n	8005712 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800570c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005710:	e02f      	b.n	8005772 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8005712:	f107 030c 	add.w	r3, r7, #12
 8005716:	4619      	mov	r1, r3
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f000 f879 	bl	8005810 <SD_FindSCR>
 800571e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d001      	beq.n	800572a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	e023      	b.n	8005772 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005730:	2b00      	cmp	r3, #0
 8005732:	d01c      	beq.n	800576e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681a      	ldr	r2, [r3, #0]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800573c:	041b      	lsls	r3, r3, #16
 800573e:	4619      	mov	r1, r3
 8005740:	4610      	mov	r0, r2
 8005742:	f001 fa9f 	bl	8006c84 <SDMMC_CmdAppCommand>
 8005746:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d001      	beq.n	8005752 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	e00f      	b.n	8005772 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	2102      	movs	r1, #2
 8005758:	4618      	mov	r0, r3
 800575a:	f001 fad9 	bl	8006d10 <SDMMC_CmdBusWidth>
 800575e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d001      	beq.n	800576a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	e003      	b.n	8005772 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800576a:	2300      	movs	r3, #0
 800576c:	e001      	b.n	8005772 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800576e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8005772:	4618      	mov	r0, r3
 8005774:	3718      	adds	r7, #24
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}

0800577a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800577a:	b580      	push	{r7, lr}
 800577c:	b086      	sub	sp, #24
 800577e:	af00      	add	r7, sp, #0
 8005780:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8005782:	2300      	movs	r3, #0
 8005784:	60fb      	str	r3, [r7, #12]
 8005786:	2300      	movs	r3, #0
 8005788:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	2100      	movs	r1, #0
 8005790:	4618      	mov	r0, r3
 8005792:	f001 f90c 	bl	80069ae <SDMMC_GetResponse>
 8005796:	4603      	mov	r3, r0
 8005798:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800579c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80057a0:	d102      	bne.n	80057a8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80057a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80057a6:	e02f      	b.n	8005808 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80057a8:	f107 030c 	add.w	r3, r7, #12
 80057ac:	4619      	mov	r1, r3
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f000 f82e 	bl	8005810 <SD_FindSCR>
 80057b4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d001      	beq.n	80057c0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	e023      	b.n	8005808 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d01c      	beq.n	8005804 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681a      	ldr	r2, [r3, #0]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057d2:	041b      	lsls	r3, r3, #16
 80057d4:	4619      	mov	r1, r3
 80057d6:	4610      	mov	r0, r2
 80057d8:	f001 fa54 	bl	8006c84 <SDMMC_CmdAppCommand>
 80057dc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d001      	beq.n	80057e8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	e00f      	b.n	8005808 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	2100      	movs	r1, #0
 80057ee:	4618      	mov	r0, r3
 80057f0:	f001 fa8e 	bl	8006d10 <SDMMC_CmdBusWidth>
 80057f4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d001      	beq.n	8005800 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	e003      	b.n	8005808 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8005800:	2300      	movs	r3, #0
 8005802:	e001      	b.n	8005808 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005804:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8005808:	4618      	mov	r0, r3
 800580a:	3718      	adds	r7, #24
 800580c:	46bd      	mov	sp, r7
 800580e:	bd80      	pop	{r7, pc}

08005810 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8005810:	b590      	push	{r4, r7, lr}
 8005812:	b08f      	sub	sp, #60	; 0x3c
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
 8005818:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800581a:	f7fb fe93 	bl	8001544 <HAL_GetTick>
 800581e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8005820:	2300      	movs	r3, #0
 8005822:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8005824:	2300      	movs	r3, #0
 8005826:	60bb      	str	r3, [r7, #8]
 8005828:	2300      	movs	r3, #0
 800582a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	2108      	movs	r1, #8
 8005836:	4618      	mov	r0, r3
 8005838:	f001 f8f8 	bl	8006a2c <SDMMC_CmdBlockLength>
 800583c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800583e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005840:	2b00      	cmp	r3, #0
 8005842:	d001      	beq.n	8005848 <SD_FindSCR+0x38>
  {
    return errorstate;
 8005844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005846:	e0a9      	b.n	800599c <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681a      	ldr	r2, [r3, #0]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005850:	041b      	lsls	r3, r3, #16
 8005852:	4619      	mov	r1, r3
 8005854:	4610      	mov	r0, r2
 8005856:	f001 fa15 	bl	8006c84 <SDMMC_CmdAppCommand>
 800585a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800585c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800585e:	2b00      	cmp	r3, #0
 8005860:	d001      	beq.n	8005866 <SD_FindSCR+0x56>
  {
    return errorstate;
 8005862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005864:	e09a      	b.n	800599c <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005866:	f04f 33ff 	mov.w	r3, #4294967295
 800586a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800586c:	2308      	movs	r3, #8
 800586e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8005870:	2330      	movs	r3, #48	; 0x30
 8005872:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005874:	2302      	movs	r3, #2
 8005876:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005878:	2300      	movs	r3, #0
 800587a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800587c:	2301      	movs	r3, #1
 800587e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f107 0210 	add.w	r2, r7, #16
 8005888:	4611      	mov	r1, r2
 800588a:	4618      	mov	r0, r3
 800588c:	f001 f8a2 	bl	80069d4 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4618      	mov	r0, r3
 8005896:	f001 fa5d 	bl	8006d54 <SDMMC_CmdSendSCR>
 800589a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800589c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d022      	beq.n	80058e8 <SD_FindSCR+0xd8>
  {
    return errorstate;
 80058a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058a4:	e07a      	b.n	800599c <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d00e      	beq.n	80058d2 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6819      	ldr	r1, [r3, #0]
 80058b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058ba:	009b      	lsls	r3, r3, #2
 80058bc:	f107 0208 	add.w	r2, r7, #8
 80058c0:	18d4      	adds	r4, r2, r3
 80058c2:	4608      	mov	r0, r1
 80058c4:	f001 f800 	bl	80068c8 <SDMMC_ReadFIFO>
 80058c8:	4603      	mov	r3, r0
 80058ca:	6023      	str	r3, [r4, #0]
      index++;
 80058cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058ce:	3301      	adds	r3, #1
 80058d0:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80058d2:	f7fb fe37 	bl	8001544 <HAL_GetTick>
 80058d6:	4602      	mov	r2, r0
 80058d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058da:	1ad3      	subs	r3, r2, r3
 80058dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058e0:	d102      	bne.n	80058e8 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80058e2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80058e6:	e059      	b.n	800599c <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058ee:	f240 432a 	movw	r3, #1066	; 0x42a
 80058f2:	4013      	ands	r3, r2
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d0d6      	beq.n	80058a6 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058fe:	f003 0308 	and.w	r3, r3, #8
 8005902:	2b00      	cmp	r3, #0
 8005904:	d005      	beq.n	8005912 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	2208      	movs	r2, #8
 800590c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800590e:	2308      	movs	r3, #8
 8005910:	e044      	b.n	800599c <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005918:	f003 0302 	and.w	r3, r3, #2
 800591c:	2b00      	cmp	r3, #0
 800591e:	d005      	beq.n	800592c <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	2202      	movs	r2, #2
 8005926:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8005928:	2302      	movs	r3, #2
 800592a:	e037      	b.n	800599c <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005932:	f003 0320 	and.w	r3, r3, #32
 8005936:	2b00      	cmp	r3, #0
 8005938:	d005      	beq.n	8005946 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	2220      	movs	r2, #32
 8005940:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8005942:	2320      	movs	r3, #32
 8005944:	e02a      	b.n	800599c <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f240 523a 	movw	r2, #1338	; 0x53a
 800594e:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	061a      	lsls	r2, r3, #24
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	021b      	lsls	r3, r3, #8
 8005958:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800595c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	0a1b      	lsrs	r3, r3, #8
 8005962:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005966:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	0e1b      	lsrs	r3, r3, #24
 800596c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800596e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005970:	601a      	str	r2, [r3, #0]
    scr++;
 8005972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005974:	3304      	adds	r3, #4
 8005976:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	061a      	lsls	r2, r3, #24
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	021b      	lsls	r3, r3, #8
 8005980:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005984:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	0a1b      	lsrs	r3, r3, #8
 800598a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800598e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	0e1b      	lsrs	r3, r3, #24
 8005994:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005998:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800599a:	2300      	movs	r3, #0
}
 800599c:	4618      	mov	r0, r3
 800599e:	373c      	adds	r7, #60	; 0x3c
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd90      	pop	{r4, r7, pc}

080059a4 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b086      	sub	sp, #24
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059b0:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059b6:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d03f      	beq.n	8005a3e <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80059be:	2300      	movs	r3, #0
 80059c0:	617b      	str	r3, [r7, #20]
 80059c2:	e033      	b.n	8005a2c <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4618      	mov	r0, r3
 80059ca:	f000 ff7d 	bl	80068c8 <SDMMC_ReadFIFO>
 80059ce:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	b2da      	uxtb	r2, r3
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	701a      	strb	r2, [r3, #0]
      tmp++;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	3301      	adds	r3, #1
 80059dc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	3b01      	subs	r3, #1
 80059e2:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	0a1b      	lsrs	r3, r3, #8
 80059e8:	b2da      	uxtb	r2, r3
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	701a      	strb	r2, [r3, #0]
      tmp++;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	3301      	adds	r3, #1
 80059f2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	3b01      	subs	r3, #1
 80059f8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	0c1b      	lsrs	r3, r3, #16
 80059fe:	b2da      	uxtb	r2, r3
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	3301      	adds	r3, #1
 8005a08:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	3b01      	subs	r3, #1
 8005a0e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	0e1b      	lsrs	r3, r3, #24
 8005a14:	b2da      	uxtb	r2, r3
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	3301      	adds	r3, #1
 8005a1e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	3b01      	subs	r3, #1
 8005a24:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	3301      	adds	r3, #1
 8005a2a:	617b      	str	r3, [r7, #20]
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	2b07      	cmp	r3, #7
 8005a30:	d9c8      	bls.n	80059c4 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	68fa      	ldr	r2, [r7, #12]
 8005a36:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	693a      	ldr	r2, [r7, #16]
 8005a3c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8005a3e:	bf00      	nop
 8005a40:	3718      	adds	r7, #24
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}

08005a46 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8005a46:	b580      	push	{r7, lr}
 8005a48:	b086      	sub	sp, #24
 8005a4a:	af00      	add	r7, sp, #0
 8005a4c:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6a1b      	ldr	r3, [r3, #32]
 8005a52:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a58:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d043      	beq.n	8005ae8 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8005a60:	2300      	movs	r3, #0
 8005a62:	617b      	str	r3, [r7, #20]
 8005a64:	e037      	b.n	8005ad6 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	781b      	ldrb	r3, [r3, #0]
 8005a6a:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	3301      	adds	r3, #1
 8005a70:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	3b01      	subs	r3, #1
 8005a76:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	781b      	ldrb	r3, [r3, #0]
 8005a7c:	021a      	lsls	r2, r3, #8
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	4313      	orrs	r3, r2
 8005a82:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	3301      	adds	r3, #1
 8005a88:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	3b01      	subs	r3, #1
 8005a8e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	781b      	ldrb	r3, [r3, #0]
 8005a94:	041a      	lsls	r2, r3, #16
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	3301      	adds	r3, #1
 8005aa0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	3b01      	subs	r3, #1
 8005aa6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	781b      	ldrb	r3, [r3, #0]
 8005aac:	061a      	lsls	r2, r3, #24
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	3301      	adds	r3, #1
 8005ab8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	3b01      	subs	r3, #1
 8005abe:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f107 0208 	add.w	r2, r7, #8
 8005ac8:	4611      	mov	r1, r2
 8005aca:	4618      	mov	r0, r3
 8005acc:	f000 ff09 	bl	80068e2 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	3301      	adds	r3, #1
 8005ad4:	617b      	str	r3, [r7, #20]
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	2b07      	cmp	r3, #7
 8005ada:	d9c4      	bls.n	8005a66 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	68fa      	ldr	r2, [r7, #12]
 8005ae0:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	693a      	ldr	r2, [r7, #16]
 8005ae6:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8005ae8:	bf00      	nop
 8005aea:	3718      	adds	r7, #24
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}

08005af0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b082      	sub	sp, #8
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d101      	bne.n	8005b02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005afe:	2301      	movs	r3, #1
 8005b00:	e01d      	b.n	8005b3e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b08:	b2db      	uxtb	r3, r3
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d106      	bne.n	8005b1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2200      	movs	r2, #0
 8005b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f000 f815 	bl	8005b46 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2202      	movs	r2, #2
 8005b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681a      	ldr	r2, [r3, #0]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	3304      	adds	r3, #4
 8005b2c:	4619      	mov	r1, r3
 8005b2e:	4610      	mov	r0, r2
 8005b30:	f000 f986 	bl	8005e40 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2201      	movs	r2, #1
 8005b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b3c:	2300      	movs	r3, #0
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	3708      	adds	r7, #8
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}

08005b46 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005b46:	b480      	push	{r7}
 8005b48:	b083      	sub	sp, #12
 8005b4a:	af00      	add	r7, sp, #0
 8005b4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005b4e:	bf00      	nop
 8005b50:	370c      	adds	r7, #12
 8005b52:	46bd      	mov	sp, r7
 8005b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b58:	4770      	bx	lr
	...

08005b5c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b085      	sub	sp, #20
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	68da      	ldr	r2, [r3, #12]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f042 0201 	orr.w	r2, r2, #1
 8005b72:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	689a      	ldr	r2, [r3, #8]
 8005b7a:	4b0c      	ldr	r3, [pc, #48]	; (8005bac <HAL_TIM_Base_Start_IT+0x50>)
 8005b7c:	4013      	ands	r3, r2
 8005b7e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2b06      	cmp	r3, #6
 8005b84:	d00b      	beq.n	8005b9e <HAL_TIM_Base_Start_IT+0x42>
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b8c:	d007      	beq.n	8005b9e <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	681a      	ldr	r2, [r3, #0]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f042 0201 	orr.w	r2, r2, #1
 8005b9c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005b9e:	2300      	movs	r3, #0
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	3714      	adds	r7, #20
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005baa:	4770      	bx	lr
 8005bac:	00010007 	.word	0x00010007

08005bb0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b082      	sub	sp, #8
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	691b      	ldr	r3, [r3, #16]
 8005bbe:	f003 0302 	and.w	r3, r3, #2
 8005bc2:	2b02      	cmp	r3, #2
 8005bc4:	d122      	bne.n	8005c0c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	68db      	ldr	r3, [r3, #12]
 8005bcc:	f003 0302 	and.w	r3, r3, #2
 8005bd0:	2b02      	cmp	r3, #2
 8005bd2:	d11b      	bne.n	8005c0c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f06f 0202 	mvn.w	r2, #2
 8005bdc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2201      	movs	r2, #1
 8005be2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	699b      	ldr	r3, [r3, #24]
 8005bea:	f003 0303 	and.w	r3, r3, #3
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d003      	beq.n	8005bfa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f000 f905 	bl	8005e02 <HAL_TIM_IC_CaptureCallback>
 8005bf8:	e005      	b.n	8005c06 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f000 f8f7 	bl	8005dee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	f000 f908 	bl	8005e16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	691b      	ldr	r3, [r3, #16]
 8005c12:	f003 0304 	and.w	r3, r3, #4
 8005c16:	2b04      	cmp	r3, #4
 8005c18:	d122      	bne.n	8005c60 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	68db      	ldr	r3, [r3, #12]
 8005c20:	f003 0304 	and.w	r3, r3, #4
 8005c24:	2b04      	cmp	r3, #4
 8005c26:	d11b      	bne.n	8005c60 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f06f 0204 	mvn.w	r2, #4
 8005c30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2202      	movs	r2, #2
 8005c36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	699b      	ldr	r3, [r3, #24]
 8005c3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d003      	beq.n	8005c4e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f000 f8db 	bl	8005e02 <HAL_TIM_IC_CaptureCallback>
 8005c4c:	e005      	b.n	8005c5a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f000 f8cd 	bl	8005dee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	f000 f8de 	bl	8005e16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	691b      	ldr	r3, [r3, #16]
 8005c66:	f003 0308 	and.w	r3, r3, #8
 8005c6a:	2b08      	cmp	r3, #8
 8005c6c:	d122      	bne.n	8005cb4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	68db      	ldr	r3, [r3, #12]
 8005c74:	f003 0308 	and.w	r3, r3, #8
 8005c78:	2b08      	cmp	r3, #8
 8005c7a:	d11b      	bne.n	8005cb4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f06f 0208 	mvn.w	r2, #8
 8005c84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2204      	movs	r2, #4
 8005c8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	69db      	ldr	r3, [r3, #28]
 8005c92:	f003 0303 	and.w	r3, r3, #3
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d003      	beq.n	8005ca2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f000 f8b1 	bl	8005e02 <HAL_TIM_IC_CaptureCallback>
 8005ca0:	e005      	b.n	8005cae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	f000 f8a3 	bl	8005dee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f000 f8b4 	bl	8005e16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	691b      	ldr	r3, [r3, #16]
 8005cba:	f003 0310 	and.w	r3, r3, #16
 8005cbe:	2b10      	cmp	r3, #16
 8005cc0:	d122      	bne.n	8005d08 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	68db      	ldr	r3, [r3, #12]
 8005cc8:	f003 0310 	and.w	r3, r3, #16
 8005ccc:	2b10      	cmp	r3, #16
 8005cce:	d11b      	bne.n	8005d08 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f06f 0210 	mvn.w	r2, #16
 8005cd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2208      	movs	r2, #8
 8005cde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	69db      	ldr	r3, [r3, #28]
 8005ce6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d003      	beq.n	8005cf6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f000 f887 	bl	8005e02 <HAL_TIM_IC_CaptureCallback>
 8005cf4:	e005      	b.n	8005d02 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f000 f879 	bl	8005dee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f000 f88a 	bl	8005e16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2200      	movs	r2, #0
 8005d06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	691b      	ldr	r3, [r3, #16]
 8005d0e:	f003 0301 	and.w	r3, r3, #1
 8005d12:	2b01      	cmp	r3, #1
 8005d14:	d10e      	bne.n	8005d34 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	68db      	ldr	r3, [r3, #12]
 8005d1c:	f003 0301 	and.w	r3, r3, #1
 8005d20:	2b01      	cmp	r3, #1
 8005d22:	d107      	bne.n	8005d34 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f06f 0201 	mvn.w	r2, #1
 8005d2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f7fb f8de 	bl	8000ef0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	691b      	ldr	r3, [r3, #16]
 8005d3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d3e:	2b80      	cmp	r3, #128	; 0x80
 8005d40:	d10e      	bne.n	8005d60 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	68db      	ldr	r3, [r3, #12]
 8005d48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d4c:	2b80      	cmp	r3, #128	; 0x80
 8005d4e:	d107      	bne.n	8005d60 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005d58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f000 f91a 	bl	8005f94 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	691b      	ldr	r3, [r3, #16]
 8005d66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d6e:	d10e      	bne.n	8005d8e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	68db      	ldr	r3, [r3, #12]
 8005d76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d7a:	2b80      	cmp	r3, #128	; 0x80
 8005d7c:	d107      	bne.n	8005d8e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005d86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	f000 f90d 	bl	8005fa8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	691b      	ldr	r3, [r3, #16]
 8005d94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d98:	2b40      	cmp	r3, #64	; 0x40
 8005d9a:	d10e      	bne.n	8005dba <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	68db      	ldr	r3, [r3, #12]
 8005da2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005da6:	2b40      	cmp	r3, #64	; 0x40
 8005da8:	d107      	bne.n	8005dba <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005db2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	f000 f838 	bl	8005e2a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	691b      	ldr	r3, [r3, #16]
 8005dc0:	f003 0320 	and.w	r3, r3, #32
 8005dc4:	2b20      	cmp	r3, #32
 8005dc6:	d10e      	bne.n	8005de6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	68db      	ldr	r3, [r3, #12]
 8005dce:	f003 0320 	and.w	r3, r3, #32
 8005dd2:	2b20      	cmp	r3, #32
 8005dd4:	d107      	bne.n	8005de6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f06f 0220 	mvn.w	r2, #32
 8005dde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	f000 f8cd 	bl	8005f80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005de6:	bf00      	nop
 8005de8:	3708      	adds	r7, #8
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}

08005dee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005dee:	b480      	push	{r7}
 8005df0:	b083      	sub	sp, #12
 8005df2:	af00      	add	r7, sp, #0
 8005df4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005df6:	bf00      	nop
 8005df8:	370c      	adds	r7, #12
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e00:	4770      	bx	lr

08005e02 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005e02:	b480      	push	{r7}
 8005e04:	b083      	sub	sp, #12
 8005e06:	af00      	add	r7, sp, #0
 8005e08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005e0a:	bf00      	nop
 8005e0c:	370c      	adds	r7, #12
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e14:	4770      	bx	lr

08005e16 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005e16:	b480      	push	{r7}
 8005e18:	b083      	sub	sp, #12
 8005e1a:	af00      	add	r7, sp, #0
 8005e1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005e1e:	bf00      	nop
 8005e20:	370c      	adds	r7, #12
 8005e22:	46bd      	mov	sp, r7
 8005e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e28:	4770      	bx	lr

08005e2a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005e2a:	b480      	push	{r7}
 8005e2c:	b083      	sub	sp, #12
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005e32:	bf00      	nop
 8005e34:	370c      	adds	r7, #12
 8005e36:	46bd      	mov	sp, r7
 8005e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3c:	4770      	bx	lr
	...

08005e40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b085      	sub	sp, #20
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
 8005e48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	4a40      	ldr	r2, [pc, #256]	; (8005f54 <TIM_Base_SetConfig+0x114>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d013      	beq.n	8005e80 <TIM_Base_SetConfig+0x40>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e5e:	d00f      	beq.n	8005e80 <TIM_Base_SetConfig+0x40>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	4a3d      	ldr	r2, [pc, #244]	; (8005f58 <TIM_Base_SetConfig+0x118>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d00b      	beq.n	8005e80 <TIM_Base_SetConfig+0x40>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	4a3c      	ldr	r2, [pc, #240]	; (8005f5c <TIM_Base_SetConfig+0x11c>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d007      	beq.n	8005e80 <TIM_Base_SetConfig+0x40>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	4a3b      	ldr	r2, [pc, #236]	; (8005f60 <TIM_Base_SetConfig+0x120>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d003      	beq.n	8005e80 <TIM_Base_SetConfig+0x40>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	4a3a      	ldr	r2, [pc, #232]	; (8005f64 <TIM_Base_SetConfig+0x124>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d108      	bne.n	8005e92 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	685b      	ldr	r3, [r3, #4]
 8005e8c:	68fa      	ldr	r2, [r7, #12]
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	4a2f      	ldr	r2, [pc, #188]	; (8005f54 <TIM_Base_SetConfig+0x114>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d02b      	beq.n	8005ef2 <TIM_Base_SetConfig+0xb2>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ea0:	d027      	beq.n	8005ef2 <TIM_Base_SetConfig+0xb2>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	4a2c      	ldr	r2, [pc, #176]	; (8005f58 <TIM_Base_SetConfig+0x118>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d023      	beq.n	8005ef2 <TIM_Base_SetConfig+0xb2>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	4a2b      	ldr	r2, [pc, #172]	; (8005f5c <TIM_Base_SetConfig+0x11c>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d01f      	beq.n	8005ef2 <TIM_Base_SetConfig+0xb2>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	4a2a      	ldr	r2, [pc, #168]	; (8005f60 <TIM_Base_SetConfig+0x120>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d01b      	beq.n	8005ef2 <TIM_Base_SetConfig+0xb2>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	4a29      	ldr	r2, [pc, #164]	; (8005f64 <TIM_Base_SetConfig+0x124>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d017      	beq.n	8005ef2 <TIM_Base_SetConfig+0xb2>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	4a28      	ldr	r2, [pc, #160]	; (8005f68 <TIM_Base_SetConfig+0x128>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d013      	beq.n	8005ef2 <TIM_Base_SetConfig+0xb2>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	4a27      	ldr	r2, [pc, #156]	; (8005f6c <TIM_Base_SetConfig+0x12c>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d00f      	beq.n	8005ef2 <TIM_Base_SetConfig+0xb2>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	4a26      	ldr	r2, [pc, #152]	; (8005f70 <TIM_Base_SetConfig+0x130>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d00b      	beq.n	8005ef2 <TIM_Base_SetConfig+0xb2>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	4a25      	ldr	r2, [pc, #148]	; (8005f74 <TIM_Base_SetConfig+0x134>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d007      	beq.n	8005ef2 <TIM_Base_SetConfig+0xb2>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	4a24      	ldr	r2, [pc, #144]	; (8005f78 <TIM_Base_SetConfig+0x138>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d003      	beq.n	8005ef2 <TIM_Base_SetConfig+0xb2>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	4a23      	ldr	r2, [pc, #140]	; (8005f7c <TIM_Base_SetConfig+0x13c>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d108      	bne.n	8005f04 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ef8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	68db      	ldr	r3, [r3, #12]
 8005efe:	68fa      	ldr	r2, [r7, #12]
 8005f00:	4313      	orrs	r3, r2
 8005f02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	695b      	ldr	r3, [r3, #20]
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	68fa      	ldr	r2, [r7, #12]
 8005f16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	689a      	ldr	r2, [r3, #8]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	681a      	ldr	r2, [r3, #0]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	4a0a      	ldr	r2, [pc, #40]	; (8005f54 <TIM_Base_SetConfig+0x114>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d003      	beq.n	8005f38 <TIM_Base_SetConfig+0xf8>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	4a0c      	ldr	r2, [pc, #48]	; (8005f64 <TIM_Base_SetConfig+0x124>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d103      	bne.n	8005f40 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	691a      	ldr	r2, [r3, #16]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2201      	movs	r2, #1
 8005f44:	615a      	str	r2, [r3, #20]
}
 8005f46:	bf00      	nop
 8005f48:	3714      	adds	r7, #20
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f50:	4770      	bx	lr
 8005f52:	bf00      	nop
 8005f54:	40010000 	.word	0x40010000
 8005f58:	40000400 	.word	0x40000400
 8005f5c:	40000800 	.word	0x40000800
 8005f60:	40000c00 	.word	0x40000c00
 8005f64:	40010400 	.word	0x40010400
 8005f68:	40014000 	.word	0x40014000
 8005f6c:	40014400 	.word	0x40014400
 8005f70:	40014800 	.word	0x40014800
 8005f74:	40001800 	.word	0x40001800
 8005f78:	40001c00 	.word	0x40001c00
 8005f7c:	40002000 	.word	0x40002000

08005f80 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b083      	sub	sp, #12
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005f88:	bf00      	nop
 8005f8a:	370c      	adds	r7, #12
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f92:	4770      	bx	lr

08005f94 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005f94:	b480      	push	{r7}
 8005f96:	b083      	sub	sp, #12
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005f9c:	bf00      	nop
 8005f9e:	370c      	adds	r7, #12
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa6:	4770      	bx	lr

08005fa8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b083      	sub	sp, #12
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005fb0:	bf00      	nop
 8005fb2:	370c      	adds	r7, #12
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fba:	4770      	bx	lr

08005fbc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b082      	sub	sp, #8
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d101      	bne.n	8005fce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	e040      	b.n	8006050 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d106      	bne.n	8005fe4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f7fb f91a 	bl	8001218 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2224      	movs	r2, #36	; 0x24
 8005fe8:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	681a      	ldr	r2, [r3, #0]
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f022 0201 	bic.w	r2, r2, #1
 8005ff8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f000 f82c 	bl	8006058 <UART_SetConfig>
 8006000:	4603      	mov	r3, r0
 8006002:	2b01      	cmp	r3, #1
 8006004:	d101      	bne.n	800600a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006006:	2301      	movs	r3, #1
 8006008:	e022      	b.n	8006050 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800600e:	2b00      	cmp	r3, #0
 8006010:	d002      	beq.n	8006018 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f000 faca 	bl	80065ac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	685a      	ldr	r2, [r3, #4]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006026:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	689a      	ldr	r2, [r3, #8]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006036:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	681a      	ldr	r2, [r3, #0]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f042 0201 	orr.w	r2, r2, #1
 8006046:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f000 fb51 	bl	80066f0 <UART_CheckIdleState>
 800604e:	4603      	mov	r3, r0
}
 8006050:	4618      	mov	r0, r3
 8006052:	3708      	adds	r7, #8
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}

08006058 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b088      	sub	sp, #32
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8006060:	2300      	movs	r3, #0
 8006062:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8006064:	2300      	movs	r3, #0
 8006066:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	689a      	ldr	r2, [r3, #8]
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	691b      	ldr	r3, [r3, #16]
 8006070:	431a      	orrs	r2, r3
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	695b      	ldr	r3, [r3, #20]
 8006076:	431a      	orrs	r2, r3
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	69db      	ldr	r3, [r3, #28]
 800607c:	4313      	orrs	r3, r2
 800607e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	681a      	ldr	r2, [r3, #0]
 8006086:	4bb1      	ldr	r3, [pc, #708]	; (800634c <UART_SetConfig+0x2f4>)
 8006088:	4013      	ands	r3, r2
 800608a:	687a      	ldr	r2, [r7, #4]
 800608c:	6812      	ldr	r2, [r2, #0]
 800608e:	6939      	ldr	r1, [r7, #16]
 8006090:	430b      	orrs	r3, r1
 8006092:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	68da      	ldr	r2, [r3, #12]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	430a      	orrs	r2, r1
 80060a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	699b      	ldr	r3, [r3, #24]
 80060ae:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6a1b      	ldr	r3, [r3, #32]
 80060b4:	693a      	ldr	r2, [r7, #16]
 80060b6:	4313      	orrs	r3, r2
 80060b8:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	689b      	ldr	r3, [r3, #8]
 80060c0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	693a      	ldr	r2, [r7, #16]
 80060ca:	430a      	orrs	r2, r1
 80060cc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4a9f      	ldr	r2, [pc, #636]	; (8006350 <UART_SetConfig+0x2f8>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d121      	bne.n	800611c <UART_SetConfig+0xc4>
 80060d8:	4b9e      	ldr	r3, [pc, #632]	; (8006354 <UART_SetConfig+0x2fc>)
 80060da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060de:	f003 0303 	and.w	r3, r3, #3
 80060e2:	2b03      	cmp	r3, #3
 80060e4:	d816      	bhi.n	8006114 <UART_SetConfig+0xbc>
 80060e6:	a201      	add	r2, pc, #4	; (adr r2, 80060ec <UART_SetConfig+0x94>)
 80060e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060ec:	080060fd 	.word	0x080060fd
 80060f0:	08006109 	.word	0x08006109
 80060f4:	08006103 	.word	0x08006103
 80060f8:	0800610f 	.word	0x0800610f
 80060fc:	2301      	movs	r3, #1
 80060fe:	77fb      	strb	r3, [r7, #31]
 8006100:	e151      	b.n	80063a6 <UART_SetConfig+0x34e>
 8006102:	2302      	movs	r3, #2
 8006104:	77fb      	strb	r3, [r7, #31]
 8006106:	e14e      	b.n	80063a6 <UART_SetConfig+0x34e>
 8006108:	2304      	movs	r3, #4
 800610a:	77fb      	strb	r3, [r7, #31]
 800610c:	e14b      	b.n	80063a6 <UART_SetConfig+0x34e>
 800610e:	2308      	movs	r3, #8
 8006110:	77fb      	strb	r3, [r7, #31]
 8006112:	e148      	b.n	80063a6 <UART_SetConfig+0x34e>
 8006114:	2310      	movs	r3, #16
 8006116:	77fb      	strb	r3, [r7, #31]
 8006118:	bf00      	nop
 800611a:	e144      	b.n	80063a6 <UART_SetConfig+0x34e>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a8d      	ldr	r2, [pc, #564]	; (8006358 <UART_SetConfig+0x300>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d134      	bne.n	8006190 <UART_SetConfig+0x138>
 8006126:	4b8b      	ldr	r3, [pc, #556]	; (8006354 <UART_SetConfig+0x2fc>)
 8006128:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800612c:	f003 030c 	and.w	r3, r3, #12
 8006130:	2b0c      	cmp	r3, #12
 8006132:	d829      	bhi.n	8006188 <UART_SetConfig+0x130>
 8006134:	a201      	add	r2, pc, #4	; (adr r2, 800613c <UART_SetConfig+0xe4>)
 8006136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800613a:	bf00      	nop
 800613c:	08006171 	.word	0x08006171
 8006140:	08006189 	.word	0x08006189
 8006144:	08006189 	.word	0x08006189
 8006148:	08006189 	.word	0x08006189
 800614c:	0800617d 	.word	0x0800617d
 8006150:	08006189 	.word	0x08006189
 8006154:	08006189 	.word	0x08006189
 8006158:	08006189 	.word	0x08006189
 800615c:	08006177 	.word	0x08006177
 8006160:	08006189 	.word	0x08006189
 8006164:	08006189 	.word	0x08006189
 8006168:	08006189 	.word	0x08006189
 800616c:	08006183 	.word	0x08006183
 8006170:	2300      	movs	r3, #0
 8006172:	77fb      	strb	r3, [r7, #31]
 8006174:	e117      	b.n	80063a6 <UART_SetConfig+0x34e>
 8006176:	2302      	movs	r3, #2
 8006178:	77fb      	strb	r3, [r7, #31]
 800617a:	e114      	b.n	80063a6 <UART_SetConfig+0x34e>
 800617c:	2304      	movs	r3, #4
 800617e:	77fb      	strb	r3, [r7, #31]
 8006180:	e111      	b.n	80063a6 <UART_SetConfig+0x34e>
 8006182:	2308      	movs	r3, #8
 8006184:	77fb      	strb	r3, [r7, #31]
 8006186:	e10e      	b.n	80063a6 <UART_SetConfig+0x34e>
 8006188:	2310      	movs	r3, #16
 800618a:	77fb      	strb	r3, [r7, #31]
 800618c:	bf00      	nop
 800618e:	e10a      	b.n	80063a6 <UART_SetConfig+0x34e>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4a71      	ldr	r2, [pc, #452]	; (800635c <UART_SetConfig+0x304>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d120      	bne.n	80061dc <UART_SetConfig+0x184>
 800619a:	4b6e      	ldr	r3, [pc, #440]	; (8006354 <UART_SetConfig+0x2fc>)
 800619c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061a0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80061a4:	2b10      	cmp	r3, #16
 80061a6:	d00f      	beq.n	80061c8 <UART_SetConfig+0x170>
 80061a8:	2b10      	cmp	r3, #16
 80061aa:	d802      	bhi.n	80061b2 <UART_SetConfig+0x15a>
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d005      	beq.n	80061bc <UART_SetConfig+0x164>
 80061b0:	e010      	b.n	80061d4 <UART_SetConfig+0x17c>
 80061b2:	2b20      	cmp	r3, #32
 80061b4:	d005      	beq.n	80061c2 <UART_SetConfig+0x16a>
 80061b6:	2b30      	cmp	r3, #48	; 0x30
 80061b8:	d009      	beq.n	80061ce <UART_SetConfig+0x176>
 80061ba:	e00b      	b.n	80061d4 <UART_SetConfig+0x17c>
 80061bc:	2300      	movs	r3, #0
 80061be:	77fb      	strb	r3, [r7, #31]
 80061c0:	e0f1      	b.n	80063a6 <UART_SetConfig+0x34e>
 80061c2:	2302      	movs	r3, #2
 80061c4:	77fb      	strb	r3, [r7, #31]
 80061c6:	e0ee      	b.n	80063a6 <UART_SetConfig+0x34e>
 80061c8:	2304      	movs	r3, #4
 80061ca:	77fb      	strb	r3, [r7, #31]
 80061cc:	e0eb      	b.n	80063a6 <UART_SetConfig+0x34e>
 80061ce:	2308      	movs	r3, #8
 80061d0:	77fb      	strb	r3, [r7, #31]
 80061d2:	e0e8      	b.n	80063a6 <UART_SetConfig+0x34e>
 80061d4:	2310      	movs	r3, #16
 80061d6:	77fb      	strb	r3, [r7, #31]
 80061d8:	bf00      	nop
 80061da:	e0e4      	b.n	80063a6 <UART_SetConfig+0x34e>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4a5f      	ldr	r2, [pc, #380]	; (8006360 <UART_SetConfig+0x308>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d120      	bne.n	8006228 <UART_SetConfig+0x1d0>
 80061e6:	4b5b      	ldr	r3, [pc, #364]	; (8006354 <UART_SetConfig+0x2fc>)
 80061e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061ec:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80061f0:	2b40      	cmp	r3, #64	; 0x40
 80061f2:	d00f      	beq.n	8006214 <UART_SetConfig+0x1bc>
 80061f4:	2b40      	cmp	r3, #64	; 0x40
 80061f6:	d802      	bhi.n	80061fe <UART_SetConfig+0x1a6>
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d005      	beq.n	8006208 <UART_SetConfig+0x1b0>
 80061fc:	e010      	b.n	8006220 <UART_SetConfig+0x1c8>
 80061fe:	2b80      	cmp	r3, #128	; 0x80
 8006200:	d005      	beq.n	800620e <UART_SetConfig+0x1b6>
 8006202:	2bc0      	cmp	r3, #192	; 0xc0
 8006204:	d009      	beq.n	800621a <UART_SetConfig+0x1c2>
 8006206:	e00b      	b.n	8006220 <UART_SetConfig+0x1c8>
 8006208:	2300      	movs	r3, #0
 800620a:	77fb      	strb	r3, [r7, #31]
 800620c:	e0cb      	b.n	80063a6 <UART_SetConfig+0x34e>
 800620e:	2302      	movs	r3, #2
 8006210:	77fb      	strb	r3, [r7, #31]
 8006212:	e0c8      	b.n	80063a6 <UART_SetConfig+0x34e>
 8006214:	2304      	movs	r3, #4
 8006216:	77fb      	strb	r3, [r7, #31]
 8006218:	e0c5      	b.n	80063a6 <UART_SetConfig+0x34e>
 800621a:	2308      	movs	r3, #8
 800621c:	77fb      	strb	r3, [r7, #31]
 800621e:	e0c2      	b.n	80063a6 <UART_SetConfig+0x34e>
 8006220:	2310      	movs	r3, #16
 8006222:	77fb      	strb	r3, [r7, #31]
 8006224:	bf00      	nop
 8006226:	e0be      	b.n	80063a6 <UART_SetConfig+0x34e>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a4d      	ldr	r2, [pc, #308]	; (8006364 <UART_SetConfig+0x30c>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d124      	bne.n	800627c <UART_SetConfig+0x224>
 8006232:	4b48      	ldr	r3, [pc, #288]	; (8006354 <UART_SetConfig+0x2fc>)
 8006234:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006238:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800623c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006240:	d012      	beq.n	8006268 <UART_SetConfig+0x210>
 8006242:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006246:	d802      	bhi.n	800624e <UART_SetConfig+0x1f6>
 8006248:	2b00      	cmp	r3, #0
 800624a:	d007      	beq.n	800625c <UART_SetConfig+0x204>
 800624c:	e012      	b.n	8006274 <UART_SetConfig+0x21c>
 800624e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006252:	d006      	beq.n	8006262 <UART_SetConfig+0x20a>
 8006254:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006258:	d009      	beq.n	800626e <UART_SetConfig+0x216>
 800625a:	e00b      	b.n	8006274 <UART_SetConfig+0x21c>
 800625c:	2300      	movs	r3, #0
 800625e:	77fb      	strb	r3, [r7, #31]
 8006260:	e0a1      	b.n	80063a6 <UART_SetConfig+0x34e>
 8006262:	2302      	movs	r3, #2
 8006264:	77fb      	strb	r3, [r7, #31]
 8006266:	e09e      	b.n	80063a6 <UART_SetConfig+0x34e>
 8006268:	2304      	movs	r3, #4
 800626a:	77fb      	strb	r3, [r7, #31]
 800626c:	e09b      	b.n	80063a6 <UART_SetConfig+0x34e>
 800626e:	2308      	movs	r3, #8
 8006270:	77fb      	strb	r3, [r7, #31]
 8006272:	e098      	b.n	80063a6 <UART_SetConfig+0x34e>
 8006274:	2310      	movs	r3, #16
 8006276:	77fb      	strb	r3, [r7, #31]
 8006278:	bf00      	nop
 800627a:	e094      	b.n	80063a6 <UART_SetConfig+0x34e>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a39      	ldr	r2, [pc, #228]	; (8006368 <UART_SetConfig+0x310>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d124      	bne.n	80062d0 <UART_SetConfig+0x278>
 8006286:	4b33      	ldr	r3, [pc, #204]	; (8006354 <UART_SetConfig+0x2fc>)
 8006288:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800628c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006290:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006294:	d012      	beq.n	80062bc <UART_SetConfig+0x264>
 8006296:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800629a:	d802      	bhi.n	80062a2 <UART_SetConfig+0x24a>
 800629c:	2b00      	cmp	r3, #0
 800629e:	d007      	beq.n	80062b0 <UART_SetConfig+0x258>
 80062a0:	e012      	b.n	80062c8 <UART_SetConfig+0x270>
 80062a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062a6:	d006      	beq.n	80062b6 <UART_SetConfig+0x25e>
 80062a8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80062ac:	d009      	beq.n	80062c2 <UART_SetConfig+0x26a>
 80062ae:	e00b      	b.n	80062c8 <UART_SetConfig+0x270>
 80062b0:	2301      	movs	r3, #1
 80062b2:	77fb      	strb	r3, [r7, #31]
 80062b4:	e077      	b.n	80063a6 <UART_SetConfig+0x34e>
 80062b6:	2302      	movs	r3, #2
 80062b8:	77fb      	strb	r3, [r7, #31]
 80062ba:	e074      	b.n	80063a6 <UART_SetConfig+0x34e>
 80062bc:	2304      	movs	r3, #4
 80062be:	77fb      	strb	r3, [r7, #31]
 80062c0:	e071      	b.n	80063a6 <UART_SetConfig+0x34e>
 80062c2:	2308      	movs	r3, #8
 80062c4:	77fb      	strb	r3, [r7, #31]
 80062c6:	e06e      	b.n	80063a6 <UART_SetConfig+0x34e>
 80062c8:	2310      	movs	r3, #16
 80062ca:	77fb      	strb	r3, [r7, #31]
 80062cc:	bf00      	nop
 80062ce:	e06a      	b.n	80063a6 <UART_SetConfig+0x34e>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a25      	ldr	r2, [pc, #148]	; (800636c <UART_SetConfig+0x314>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d124      	bne.n	8006324 <UART_SetConfig+0x2cc>
 80062da:	4b1e      	ldr	r3, [pc, #120]	; (8006354 <UART_SetConfig+0x2fc>)
 80062dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062e0:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80062e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062e8:	d012      	beq.n	8006310 <UART_SetConfig+0x2b8>
 80062ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062ee:	d802      	bhi.n	80062f6 <UART_SetConfig+0x29e>
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d007      	beq.n	8006304 <UART_SetConfig+0x2ac>
 80062f4:	e012      	b.n	800631c <UART_SetConfig+0x2c4>
 80062f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062fa:	d006      	beq.n	800630a <UART_SetConfig+0x2b2>
 80062fc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006300:	d009      	beq.n	8006316 <UART_SetConfig+0x2be>
 8006302:	e00b      	b.n	800631c <UART_SetConfig+0x2c4>
 8006304:	2300      	movs	r3, #0
 8006306:	77fb      	strb	r3, [r7, #31]
 8006308:	e04d      	b.n	80063a6 <UART_SetConfig+0x34e>
 800630a:	2302      	movs	r3, #2
 800630c:	77fb      	strb	r3, [r7, #31]
 800630e:	e04a      	b.n	80063a6 <UART_SetConfig+0x34e>
 8006310:	2304      	movs	r3, #4
 8006312:	77fb      	strb	r3, [r7, #31]
 8006314:	e047      	b.n	80063a6 <UART_SetConfig+0x34e>
 8006316:	2308      	movs	r3, #8
 8006318:	77fb      	strb	r3, [r7, #31]
 800631a:	e044      	b.n	80063a6 <UART_SetConfig+0x34e>
 800631c:	2310      	movs	r3, #16
 800631e:	77fb      	strb	r3, [r7, #31]
 8006320:	bf00      	nop
 8006322:	e040      	b.n	80063a6 <UART_SetConfig+0x34e>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a11      	ldr	r2, [pc, #68]	; (8006370 <UART_SetConfig+0x318>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d139      	bne.n	80063a2 <UART_SetConfig+0x34a>
 800632e:	4b09      	ldr	r3, [pc, #36]	; (8006354 <UART_SetConfig+0x2fc>)
 8006330:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006334:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006338:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800633c:	d027      	beq.n	800638e <UART_SetConfig+0x336>
 800633e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006342:	d817      	bhi.n	8006374 <UART_SetConfig+0x31c>
 8006344:	2b00      	cmp	r3, #0
 8006346:	d01c      	beq.n	8006382 <UART_SetConfig+0x32a>
 8006348:	e027      	b.n	800639a <UART_SetConfig+0x342>
 800634a:	bf00      	nop
 800634c:	efff69f3 	.word	0xefff69f3
 8006350:	40011000 	.word	0x40011000
 8006354:	40023800 	.word	0x40023800
 8006358:	40004400 	.word	0x40004400
 800635c:	40004800 	.word	0x40004800
 8006360:	40004c00 	.word	0x40004c00
 8006364:	40005000 	.word	0x40005000
 8006368:	40011400 	.word	0x40011400
 800636c:	40007800 	.word	0x40007800
 8006370:	40007c00 	.word	0x40007c00
 8006374:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006378:	d006      	beq.n	8006388 <UART_SetConfig+0x330>
 800637a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800637e:	d009      	beq.n	8006394 <UART_SetConfig+0x33c>
 8006380:	e00b      	b.n	800639a <UART_SetConfig+0x342>
 8006382:	2300      	movs	r3, #0
 8006384:	77fb      	strb	r3, [r7, #31]
 8006386:	e00e      	b.n	80063a6 <UART_SetConfig+0x34e>
 8006388:	2302      	movs	r3, #2
 800638a:	77fb      	strb	r3, [r7, #31]
 800638c:	e00b      	b.n	80063a6 <UART_SetConfig+0x34e>
 800638e:	2304      	movs	r3, #4
 8006390:	77fb      	strb	r3, [r7, #31]
 8006392:	e008      	b.n	80063a6 <UART_SetConfig+0x34e>
 8006394:	2308      	movs	r3, #8
 8006396:	77fb      	strb	r3, [r7, #31]
 8006398:	e005      	b.n	80063a6 <UART_SetConfig+0x34e>
 800639a:	2310      	movs	r3, #16
 800639c:	77fb      	strb	r3, [r7, #31]
 800639e:	bf00      	nop
 80063a0:	e001      	b.n	80063a6 <UART_SetConfig+0x34e>
 80063a2:	2310      	movs	r3, #16
 80063a4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	69db      	ldr	r3, [r3, #28]
 80063aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063ae:	d17f      	bne.n	80064b0 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 80063b0:	7ffb      	ldrb	r3, [r7, #31]
 80063b2:	2b08      	cmp	r3, #8
 80063b4:	d85c      	bhi.n	8006470 <UART_SetConfig+0x418>
 80063b6:	a201      	add	r2, pc, #4	; (adr r2, 80063bc <UART_SetConfig+0x364>)
 80063b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063bc:	080063e1 	.word	0x080063e1
 80063c0:	08006401 	.word	0x08006401
 80063c4:	08006421 	.word	0x08006421
 80063c8:	08006471 	.word	0x08006471
 80063cc:	08006439 	.word	0x08006439
 80063d0:	08006471 	.word	0x08006471
 80063d4:	08006471 	.word	0x08006471
 80063d8:	08006471 	.word	0x08006471
 80063dc:	08006459 	.word	0x08006459
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80063e0:	f7fd fc10 	bl	8003c04 <HAL_RCC_GetPCLK1Freq>
 80063e4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	005a      	lsls	r2, r3, #1
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	685b      	ldr	r3, [r3, #4]
 80063ee:	085b      	lsrs	r3, r3, #1
 80063f0:	441a      	add	r2, r3
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80063fa:	b29b      	uxth	r3, r3
 80063fc:	61bb      	str	r3, [r7, #24]
        break;
 80063fe:	e03a      	b.n	8006476 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006400:	f7fd fc14 	bl	8003c2c <HAL_RCC_GetPCLK2Freq>
 8006404:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	005a      	lsls	r2, r3, #1
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	085b      	lsrs	r3, r3, #1
 8006410:	441a      	add	r2, r3
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	fbb2 f3f3 	udiv	r3, r2, r3
 800641a:	b29b      	uxth	r3, r3
 800641c:	61bb      	str	r3, [r7, #24]
        break;
 800641e:	e02a      	b.n	8006476 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	085a      	lsrs	r2, r3, #1
 8006426:	4b5f      	ldr	r3, [pc, #380]	; (80065a4 <UART_SetConfig+0x54c>)
 8006428:	4413      	add	r3, r2
 800642a:	687a      	ldr	r2, [r7, #4]
 800642c:	6852      	ldr	r2, [r2, #4]
 800642e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006432:	b29b      	uxth	r3, r3
 8006434:	61bb      	str	r3, [r7, #24]
        break;
 8006436:	e01e      	b.n	8006476 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006438:	f7fd fb00 	bl	8003a3c <HAL_RCC_GetSysClockFreq>
 800643c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	005a      	lsls	r2, r3, #1
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	685b      	ldr	r3, [r3, #4]
 8006446:	085b      	lsrs	r3, r3, #1
 8006448:	441a      	add	r2, r3
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	685b      	ldr	r3, [r3, #4]
 800644e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006452:	b29b      	uxth	r3, r3
 8006454:	61bb      	str	r3, [r7, #24]
        break;
 8006456:	e00e      	b.n	8006476 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	685b      	ldr	r3, [r3, #4]
 800645c:	085b      	lsrs	r3, r3, #1
 800645e:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	685b      	ldr	r3, [r3, #4]
 8006466:	fbb2 f3f3 	udiv	r3, r2, r3
 800646a:	b29b      	uxth	r3, r3
 800646c:	61bb      	str	r3, [r7, #24]
        break;
 800646e:	e002      	b.n	8006476 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8006470:	2301      	movs	r3, #1
 8006472:	75fb      	strb	r3, [r7, #23]
        break;
 8006474:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006476:	69bb      	ldr	r3, [r7, #24]
 8006478:	2b0f      	cmp	r3, #15
 800647a:	d916      	bls.n	80064aa <UART_SetConfig+0x452>
 800647c:	69bb      	ldr	r3, [r7, #24]
 800647e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006482:	d212      	bcs.n	80064aa <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006484:	69bb      	ldr	r3, [r7, #24]
 8006486:	b29b      	uxth	r3, r3
 8006488:	f023 030f 	bic.w	r3, r3, #15
 800648c:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800648e:	69bb      	ldr	r3, [r7, #24]
 8006490:	085b      	lsrs	r3, r3, #1
 8006492:	b29b      	uxth	r3, r3
 8006494:	f003 0307 	and.w	r3, r3, #7
 8006498:	b29a      	uxth	r2, r3
 800649a:	897b      	ldrh	r3, [r7, #10]
 800649c:	4313      	orrs	r3, r2
 800649e:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	897a      	ldrh	r2, [r7, #10]
 80064a6:	60da      	str	r2, [r3, #12]
 80064a8:	e070      	b.n	800658c <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 80064aa:	2301      	movs	r3, #1
 80064ac:	75fb      	strb	r3, [r7, #23]
 80064ae:	e06d      	b.n	800658c <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 80064b0:	7ffb      	ldrb	r3, [r7, #31]
 80064b2:	2b08      	cmp	r3, #8
 80064b4:	d859      	bhi.n	800656a <UART_SetConfig+0x512>
 80064b6:	a201      	add	r2, pc, #4	; (adr r2, 80064bc <UART_SetConfig+0x464>)
 80064b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064bc:	080064e1 	.word	0x080064e1
 80064c0:	080064ff 	.word	0x080064ff
 80064c4:	0800651d 	.word	0x0800651d
 80064c8:	0800656b 	.word	0x0800656b
 80064cc:	08006535 	.word	0x08006535
 80064d0:	0800656b 	.word	0x0800656b
 80064d4:	0800656b 	.word	0x0800656b
 80064d8:	0800656b 	.word	0x0800656b
 80064dc:	08006553 	.word	0x08006553
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064e0:	f7fd fb90 	bl	8003c04 <HAL_RCC_GetPCLK1Freq>
 80064e4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	685b      	ldr	r3, [r3, #4]
 80064ea:	085a      	lsrs	r2, r3, #1
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	441a      	add	r2, r3
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80064f8:	b29b      	uxth	r3, r3
 80064fa:	61bb      	str	r3, [r7, #24]
        break;
 80064fc:	e038      	b.n	8006570 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80064fe:	f7fd fb95 	bl	8003c2c <HAL_RCC_GetPCLK2Freq>
 8006502:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	685b      	ldr	r3, [r3, #4]
 8006508:	085a      	lsrs	r2, r3, #1
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	441a      	add	r2, r3
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	685b      	ldr	r3, [r3, #4]
 8006512:	fbb2 f3f3 	udiv	r3, r2, r3
 8006516:	b29b      	uxth	r3, r3
 8006518:	61bb      	str	r3, [r7, #24]
        break;
 800651a:	e029      	b.n	8006570 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	685b      	ldr	r3, [r3, #4]
 8006520:	085a      	lsrs	r2, r3, #1
 8006522:	4b21      	ldr	r3, [pc, #132]	; (80065a8 <UART_SetConfig+0x550>)
 8006524:	4413      	add	r3, r2
 8006526:	687a      	ldr	r2, [r7, #4]
 8006528:	6852      	ldr	r2, [r2, #4]
 800652a:	fbb3 f3f2 	udiv	r3, r3, r2
 800652e:	b29b      	uxth	r3, r3
 8006530:	61bb      	str	r3, [r7, #24]
        break;
 8006532:	e01d      	b.n	8006570 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006534:	f7fd fa82 	bl	8003a3c <HAL_RCC_GetSysClockFreq>
 8006538:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	085a      	lsrs	r2, r3, #1
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	441a      	add	r2, r3
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	fbb2 f3f3 	udiv	r3, r2, r3
 800654c:	b29b      	uxth	r3, r3
 800654e:	61bb      	str	r3, [r7, #24]
        break;
 8006550:	e00e      	b.n	8006570 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	685b      	ldr	r3, [r3, #4]
 8006556:	085b      	lsrs	r3, r3, #1
 8006558:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	fbb2 f3f3 	udiv	r3, r2, r3
 8006564:	b29b      	uxth	r3, r3
 8006566:	61bb      	str	r3, [r7, #24]
        break;
 8006568:	e002      	b.n	8006570 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800656a:	2301      	movs	r3, #1
 800656c:	75fb      	strb	r3, [r7, #23]
        break;
 800656e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006570:	69bb      	ldr	r3, [r7, #24]
 8006572:	2b0f      	cmp	r3, #15
 8006574:	d908      	bls.n	8006588 <UART_SetConfig+0x530>
 8006576:	69bb      	ldr	r3, [r7, #24]
 8006578:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800657c:	d204      	bcs.n	8006588 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	69ba      	ldr	r2, [r7, #24]
 8006584:	60da      	str	r2, [r3, #12]
 8006586:	e001      	b.n	800658c <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8006588:	2301      	movs	r3, #1
 800658a:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2200      	movs	r2, #0
 8006590:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2200      	movs	r2, #0
 8006596:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8006598:	7dfb      	ldrb	r3, [r7, #23]
}
 800659a:	4618      	mov	r0, r3
 800659c:	3720      	adds	r7, #32
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}
 80065a2:	bf00      	nop
 80065a4:	01e84800 	.word	0x01e84800
 80065a8:	00f42400 	.word	0x00f42400

080065ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b083      	sub	sp, #12
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b8:	f003 0301 	and.w	r3, r3, #1
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d00a      	beq.n	80065d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	430a      	orrs	r2, r1
 80065d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065da:	f003 0302 	and.w	r3, r3, #2
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d00a      	beq.n	80065f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	685b      	ldr	r3, [r3, #4]
 80065e8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	430a      	orrs	r2, r1
 80065f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065fc:	f003 0304 	and.w	r3, r3, #4
 8006600:	2b00      	cmp	r3, #0
 8006602:	d00a      	beq.n	800661a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	685b      	ldr	r3, [r3, #4]
 800660a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	430a      	orrs	r2, r1
 8006618:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800661e:	f003 0308 	and.w	r3, r3, #8
 8006622:	2b00      	cmp	r3, #0
 8006624:	d00a      	beq.n	800663c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	685b      	ldr	r3, [r3, #4]
 800662c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	430a      	orrs	r2, r1
 800663a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006640:	f003 0310 	and.w	r3, r3, #16
 8006644:	2b00      	cmp	r3, #0
 8006646:	d00a      	beq.n	800665e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	689b      	ldr	r3, [r3, #8]
 800664e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	430a      	orrs	r2, r1
 800665c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006662:	f003 0320 	and.w	r3, r3, #32
 8006666:	2b00      	cmp	r3, #0
 8006668:	d00a      	beq.n	8006680 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	689b      	ldr	r3, [r3, #8]
 8006670:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	430a      	orrs	r2, r1
 800667e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006684:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006688:	2b00      	cmp	r3, #0
 800668a:	d01a      	beq.n	80066c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	685b      	ldr	r3, [r3, #4]
 8006692:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	430a      	orrs	r2, r1
 80066a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80066aa:	d10a      	bne.n	80066c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	685b      	ldr	r3, [r3, #4]
 80066b2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	430a      	orrs	r2, r1
 80066c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d00a      	beq.n	80066e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	430a      	orrs	r2, r1
 80066e2:	605a      	str	r2, [r3, #4]
  }
}
 80066e4:	bf00      	nop
 80066e6:	370c      	adds	r7, #12
 80066e8:	46bd      	mov	sp, r7
 80066ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ee:	4770      	bx	lr

080066f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b086      	sub	sp, #24
 80066f4:	af02      	add	r7, sp, #8
 80066f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2200      	movs	r2, #0
 80066fc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80066fe:	f7fa ff21 	bl	8001544 <HAL_GetTick>
 8006702:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f003 0308 	and.w	r3, r3, #8
 800670e:	2b08      	cmp	r3, #8
 8006710:	d10e      	bne.n	8006730 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006712:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006716:	9300      	str	r3, [sp, #0]
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	2200      	movs	r2, #0
 800671c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	f000 f82a 	bl	800677a <UART_WaitOnFlagUntilTimeout>
 8006726:	4603      	mov	r3, r0
 8006728:	2b00      	cmp	r3, #0
 800672a:	d001      	beq.n	8006730 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800672c:	2303      	movs	r3, #3
 800672e:	e020      	b.n	8006772 <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f003 0304 	and.w	r3, r3, #4
 800673a:	2b04      	cmp	r3, #4
 800673c:	d10e      	bne.n	800675c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800673e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006742:	9300      	str	r3, [sp, #0]
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	2200      	movs	r2, #0
 8006748:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f000 f814 	bl	800677a <UART_WaitOnFlagUntilTimeout>
 8006752:	4603      	mov	r3, r0
 8006754:	2b00      	cmp	r3, #0
 8006756:	d001      	beq.n	800675c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006758:	2303      	movs	r3, #3
 800675a:	e00a      	b.n	8006772 <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2220      	movs	r2, #32
 8006760:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2220      	movs	r2, #32
 8006766:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2200      	movs	r2, #0
 800676c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8006770:	2300      	movs	r3, #0
}
 8006772:	4618      	mov	r0, r3
 8006774:	3710      	adds	r7, #16
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}

0800677a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800677a:	b580      	push	{r7, lr}
 800677c:	b084      	sub	sp, #16
 800677e:	af00      	add	r7, sp, #0
 8006780:	60f8      	str	r0, [r7, #12]
 8006782:	60b9      	str	r1, [r7, #8]
 8006784:	603b      	str	r3, [r7, #0]
 8006786:	4613      	mov	r3, r2
 8006788:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800678a:	e05d      	b.n	8006848 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800678c:	69bb      	ldr	r3, [r7, #24]
 800678e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006792:	d059      	beq.n	8006848 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006794:	f7fa fed6 	bl	8001544 <HAL_GetTick>
 8006798:	4602      	mov	r2, r0
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	1ad3      	subs	r3, r2, r3
 800679e:	69ba      	ldr	r2, [r7, #24]
 80067a0:	429a      	cmp	r2, r3
 80067a2:	d302      	bcc.n	80067aa <UART_WaitOnFlagUntilTimeout+0x30>
 80067a4:	69bb      	ldr	r3, [r7, #24]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d11b      	bne.n	80067e2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	681a      	ldr	r2, [r3, #0]
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80067b8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	689a      	ldr	r2, [r3, #8]
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f022 0201 	bic.w	r2, r2, #1
 80067c8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	2220      	movs	r2, #32
 80067ce:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	2220      	movs	r2, #32
 80067d4:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	2200      	movs	r2, #0
 80067da:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80067de:	2303      	movs	r3, #3
 80067e0:	e042      	b.n	8006868 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f003 0304 	and.w	r3, r3, #4
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d02b      	beq.n	8006848 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	69db      	ldr	r3, [r3, #28]
 80067f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067fe:	d123      	bne.n	8006848 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006808:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	681a      	ldr	r2, [r3, #0]
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006818:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	689a      	ldr	r2, [r3, #8]
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f022 0201 	bic.w	r2, r2, #1
 8006828:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	2220      	movs	r2, #32
 800682e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	2220      	movs	r2, #32
 8006834:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	2220      	movs	r2, #32
 800683a:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	2200      	movs	r2, #0
 8006840:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8006844:	2303      	movs	r3, #3
 8006846:	e00f      	b.n	8006868 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	69da      	ldr	r2, [r3, #28]
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	4013      	ands	r3, r2
 8006852:	68ba      	ldr	r2, [r7, #8]
 8006854:	429a      	cmp	r2, r3
 8006856:	bf0c      	ite	eq
 8006858:	2301      	moveq	r3, #1
 800685a:	2300      	movne	r3, #0
 800685c:	b2db      	uxtb	r3, r3
 800685e:	461a      	mov	r2, r3
 8006860:	79fb      	ldrb	r3, [r7, #7]
 8006862:	429a      	cmp	r2, r3
 8006864:	d092      	beq.n	800678c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006866:	2300      	movs	r3, #0
}
 8006868:	4618      	mov	r0, r3
 800686a:	3710      	adds	r7, #16
 800686c:	46bd      	mov	sp, r7
 800686e:	bd80      	pop	{r7, pc}

08006870 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8006870:	b084      	sub	sp, #16
 8006872:	b480      	push	{r7}
 8006874:	b085      	sub	sp, #20
 8006876:	af00      	add	r7, sp, #0
 8006878:	6078      	str	r0, [r7, #4]
 800687a:	f107 001c 	add.w	r0, r7, #28
 800687e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8006882:	2300      	movs	r3, #0
 8006884:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8006886:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8006888:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800688a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800688c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800688e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8006890:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8006892:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8006894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8006896:	431a      	orrs	r2, r3
             Init.ClockDiv
 8006898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800689a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800689c:	68fa      	ldr	r2, [r7, #12]
 800689e:	4313      	orrs	r3, r2
 80068a0:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	685a      	ldr	r2, [r3, #4]
 80068a6:	4b07      	ldr	r3, [pc, #28]	; (80068c4 <SDMMC_Init+0x54>)
 80068a8:	4013      	ands	r3, r2
 80068aa:	68fa      	ldr	r2, [r7, #12]
 80068ac:	431a      	orrs	r2, r3
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80068b2:	2300      	movs	r3, #0
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	3714      	adds	r7, #20
 80068b8:	46bd      	mov	sp, r7
 80068ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068be:	b004      	add	sp, #16
 80068c0:	4770      	bx	lr
 80068c2:	bf00      	nop
 80068c4:	ffff8100 	.word	0xffff8100

080068c8 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80068c8:	b480      	push	{r7}
 80068ca:	b083      	sub	sp, #12
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80068d6:	4618      	mov	r0, r3
 80068d8:	370c      	adds	r7, #12
 80068da:	46bd      	mov	sp, r7
 80068dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e0:	4770      	bx	lr

080068e2 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 80068e2:	b480      	push	{r7}
 80068e4:	b083      	sub	sp, #12
 80068e6:	af00      	add	r7, sp, #0
 80068e8:	6078      	str	r0, [r7, #4]
 80068ea:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	681a      	ldr	r2, [r3, #0]
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80068f6:	2300      	movs	r3, #0
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	370c      	adds	r7, #12
 80068fc:	46bd      	mov	sp, r7
 80068fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006902:	4770      	bx	lr

08006904 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 8006904:	b580      	push	{r7, lr}
 8006906:	b082      	sub	sp, #8
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2203      	movs	r2, #3
 8006910:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8006912:	2002      	movs	r0, #2
 8006914:	f7fa fe22 	bl	800155c <HAL_Delay>
  
  return HAL_OK;
 8006918:	2300      	movs	r3, #0
}
 800691a:	4618      	mov	r0, r3
 800691c:	3708      	adds	r7, #8
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}

08006922 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8006922:	b480      	push	{r7}
 8006924:	b083      	sub	sp, #12
 8006926:	af00      	add	r7, sp, #0
 8006928:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f003 0303 	and.w	r3, r3, #3
}
 8006932:	4618      	mov	r0, r3
 8006934:	370c      	adds	r7, #12
 8006936:	46bd      	mov	sp, r7
 8006938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693c:	4770      	bx	lr
	...

08006940 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8006940:	b480      	push	{r7}
 8006942:	b085      	sub	sp, #20
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
 8006948:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800694a:	2300      	movs	r3, #0
 800694c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	681a      	ldr	r2, [r3, #0]
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800695e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8006964:	431a      	orrs	r2, r3
                       Command->CPSM);
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800696a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800696c:	68fa      	ldr	r2, [r7, #12]
 800696e:	4313      	orrs	r3, r2
 8006970:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	68da      	ldr	r2, [r3, #12]
 8006976:	4b06      	ldr	r3, [pc, #24]	; (8006990 <SDMMC_SendCommand+0x50>)
 8006978:	4013      	ands	r3, r2
 800697a:	68fa      	ldr	r2, [r7, #12]
 800697c:	431a      	orrs	r2, r3
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8006982:	2300      	movs	r3, #0
}
 8006984:	4618      	mov	r0, r3
 8006986:	3714      	adds	r7, #20
 8006988:	46bd      	mov	sp, r7
 800698a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698e:	4770      	bx	lr
 8006990:	fffff000 	.word	0xfffff000

08006994 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8006994:	b480      	push	{r7}
 8006996:	b083      	sub	sp, #12
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	691b      	ldr	r3, [r3, #16]
 80069a0:	b2db      	uxtb	r3, r3
}
 80069a2:	4618      	mov	r0, r3
 80069a4:	370c      	adds	r7, #12
 80069a6:	46bd      	mov	sp, r7
 80069a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ac:	4770      	bx	lr

080069ae <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80069ae:	b480      	push	{r7}
 80069b0:	b085      	sub	sp, #20
 80069b2:	af00      	add	r7, sp, #0
 80069b4:	6078      	str	r0, [r7, #4]
 80069b6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	3314      	adds	r3, #20
 80069bc:	461a      	mov	r2, r3
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	4413      	add	r3, r2
 80069c2:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
}  
 80069c8:	4618      	mov	r0, r3
 80069ca:	3714      	adds	r7, #20
 80069cc:	46bd      	mov	sp, r7
 80069ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d2:	4770      	bx	lr

080069d4 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b085      	sub	sp, #20
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
 80069dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80069de:	2300      	movs	r3, #0
 80069e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	681a      	ldr	r2, [r3, #0]
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	685a      	ldr	r2, [r3, #4]
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80069fa:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8006a00:	431a      	orrs	r2, r3
                       Data->DPSM);
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8006a06:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006a08:	68fa      	ldr	r2, [r7, #12]
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a12:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	431a      	orrs	r2, r3
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006a1e:	2300      	movs	r3, #0

}
 8006a20:	4618      	mov	r0, r3
 8006a22:	3714      	adds	r7, #20
 8006a24:	46bd      	mov	sp, r7
 8006a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2a:	4770      	bx	lr

08006a2c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b088      	sub	sp, #32
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
 8006a34:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8006a3a:	2310      	movs	r3, #16
 8006a3c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006a3e:	2340      	movs	r3, #64	; 0x40
 8006a40:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006a42:	2300      	movs	r3, #0
 8006a44:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006a46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a4a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006a4c:	f107 0308 	add.w	r3, r7, #8
 8006a50:	4619      	mov	r1, r3
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f7ff ff74 	bl	8006940 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8006a58:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a5c:	2110      	movs	r1, #16
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f000 fa42 	bl	8006ee8 <SDMMC_GetCmdResp1>
 8006a64:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006a66:	69fb      	ldr	r3, [r7, #28]
}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	3720      	adds	r7, #32
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bd80      	pop	{r7, pc}

08006a70 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b088      	sub	sp, #32
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
 8006a78:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8006a7e:	2311      	movs	r3, #17
 8006a80:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006a82:	2340      	movs	r3, #64	; 0x40
 8006a84:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006a86:	2300      	movs	r3, #0
 8006a88:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006a8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a8e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006a90:	f107 0308 	add.w	r3, r7, #8
 8006a94:	4619      	mov	r1, r3
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	f7ff ff52 	bl	8006940 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8006a9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006aa0:	2111      	movs	r1, #17
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f000 fa20 	bl	8006ee8 <SDMMC_GetCmdResp1>
 8006aa8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006aaa:	69fb      	ldr	r3, [r7, #28]
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	3720      	adds	r7, #32
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd80      	pop	{r7, pc}

08006ab4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b088      	sub	sp, #32
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
 8006abc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8006ac2:	2312      	movs	r3, #18
 8006ac4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006ac6:	2340      	movs	r3, #64	; 0x40
 8006ac8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006aca:	2300      	movs	r3, #0
 8006acc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006ace:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ad2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006ad4:	f107 0308 	add.w	r3, r7, #8
 8006ad8:	4619      	mov	r1, r3
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f7ff ff30 	bl	8006940 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8006ae0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ae4:	2112      	movs	r1, #18
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f000 f9fe 	bl	8006ee8 <SDMMC_GetCmdResp1>
 8006aec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006aee:	69fb      	ldr	r3, [r7, #28]
}
 8006af0:	4618      	mov	r0, r3
 8006af2:	3720      	adds	r7, #32
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bd80      	pop	{r7, pc}

08006af8 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b088      	sub	sp, #32
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
 8006b00:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8006b06:	2318      	movs	r3, #24
 8006b08:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006b0a:	2340      	movs	r3, #64	; 0x40
 8006b0c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006b12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b16:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006b18:	f107 0308 	add.w	r3, r7, #8
 8006b1c:	4619      	mov	r1, r3
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f7ff ff0e 	bl	8006940 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8006b24:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b28:	2118      	movs	r1, #24
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f000 f9dc 	bl	8006ee8 <SDMMC_GetCmdResp1>
 8006b30:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006b32:	69fb      	ldr	r3, [r7, #28]
}
 8006b34:	4618      	mov	r0, r3
 8006b36:	3720      	adds	r7, #32
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	bd80      	pop	{r7, pc}

08006b3c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b088      	sub	sp, #32
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
 8006b44:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8006b4a:	2319      	movs	r3, #25
 8006b4c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006b4e:	2340      	movs	r3, #64	; 0x40
 8006b50:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006b52:	2300      	movs	r3, #0
 8006b54:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006b56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b5a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006b5c:	f107 0308 	add.w	r3, r7, #8
 8006b60:	4619      	mov	r1, r3
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f7ff feec 	bl	8006940 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8006b68:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b6c:	2119      	movs	r1, #25
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f000 f9ba 	bl	8006ee8 <SDMMC_GetCmdResp1>
 8006b74:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006b76:	69fb      	ldr	r3, [r7, #28]
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	3720      	adds	r7, #32
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bd80      	pop	{r7, pc}

08006b80 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b088      	sub	sp, #32
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8006b88:	2300      	movs	r3, #0
 8006b8a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8006b8c:	230c      	movs	r3, #12
 8006b8e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006b90:	2340      	movs	r3, #64	; 0x40
 8006b92:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006b94:	2300      	movs	r3, #0
 8006b96:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006b98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b9c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006b9e:	f107 0308 	add.w	r3, r7, #8
 8006ba2:	4619      	mov	r1, r3
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f7ff fecb 	bl	8006940 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8006baa:	4a05      	ldr	r2, [pc, #20]	; (8006bc0 <SDMMC_CmdStopTransfer+0x40>)
 8006bac:	210c      	movs	r1, #12
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f000 f99a 	bl	8006ee8 <SDMMC_GetCmdResp1>
 8006bb4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006bb6:	69fb      	ldr	r3, [r7, #28]
}
 8006bb8:	4618      	mov	r0, r3
 8006bba:	3720      	adds	r7, #32
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	bd80      	pop	{r7, pc}
 8006bc0:	05f5e100 	.word	0x05f5e100

08006bc4 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b08a      	sub	sp, #40	; 0x28
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	60f8      	str	r0, [r7, #12]
 8006bcc:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8006bd4:	2307      	movs	r3, #7
 8006bd6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006bd8:	2340      	movs	r3, #64	; 0x40
 8006bda:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006bdc:	2300      	movs	r3, #0
 8006bde:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006be0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006be4:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006be6:	f107 0310 	add.w	r3, r7, #16
 8006bea:	4619      	mov	r1, r3
 8006bec:	68f8      	ldr	r0, [r7, #12]
 8006bee:	f7ff fea7 	bl	8006940 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8006bf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bf6:	2107      	movs	r1, #7
 8006bf8:	68f8      	ldr	r0, [r7, #12]
 8006bfa:	f000 f975 	bl	8006ee8 <SDMMC_GetCmdResp1>
 8006bfe:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8006c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	3728      	adds	r7, #40	; 0x28
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}

08006c0a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8006c0a:	b580      	push	{r7, lr}
 8006c0c:	b088      	sub	sp, #32
 8006c0e:	af00      	add	r7, sp, #0
 8006c10:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8006c12:	2300      	movs	r3, #0
 8006c14:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8006c16:	2300      	movs	r3, #0
 8006c18:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006c1e:	2300      	movs	r3, #0
 8006c20:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006c22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006c26:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006c28:	f107 0308 	add.w	r3, r7, #8
 8006c2c:	4619      	mov	r1, r3
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	f7ff fe86 	bl	8006940 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	f000 f92f 	bl	8006e98 <SDMMC_GetCmdError>
 8006c3a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006c3c:	69fb      	ldr	r3, [r7, #28]
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	3720      	adds	r7, #32
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd80      	pop	{r7, pc}

08006c46 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8006c46:	b580      	push	{r7, lr}
 8006c48:	b088      	sub	sp, #32
 8006c4a:	af00      	add	r7, sp, #0
 8006c4c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8006c4e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8006c52:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8006c54:	2308      	movs	r3, #8
 8006c56:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006c58:	2340      	movs	r3, #64	; 0x40
 8006c5a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006c60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006c64:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006c66:	f107 0308 	add.w	r3, r7, #8
 8006c6a:	4619      	mov	r1, r3
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f7ff fe67 	bl	8006940 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f000 fb18 	bl	80072a8 <SDMMC_GetCmdResp7>
 8006c78:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006c7a:	69fb      	ldr	r3, [r7, #28]
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	3720      	adds	r7, #32
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bd80      	pop	{r7, pc}

08006c84 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b088      	sub	sp, #32
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
 8006c8c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8006c92:	2337      	movs	r3, #55	; 0x37
 8006c94:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006c96:	2340      	movs	r3, #64	; 0x40
 8006c98:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006c9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ca2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006ca4:	f107 0308 	add.w	r3, r7, #8
 8006ca8:	4619      	mov	r1, r3
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f7ff fe48 	bl	8006940 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8006cb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cb4:	2137      	movs	r1, #55	; 0x37
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f000 f916 	bl	8006ee8 <SDMMC_GetCmdResp1>
 8006cbc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006cbe:	69fb      	ldr	r3, [r7, #28]
}
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	3720      	adds	r7, #32
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bd80      	pop	{r7, pc}

08006cc8 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b088      	sub	sp, #32
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
 8006cd0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8006cd2:	683a      	ldr	r2, [r7, #0]
 8006cd4:	4b0d      	ldr	r3, [pc, #52]	; (8006d0c <SDMMC_CmdAppOperCommand+0x44>)
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8006cda:	2329      	movs	r3, #41	; 0x29
 8006cdc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006cde:	2340      	movs	r3, #64	; 0x40
 8006ce0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006ce6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006cea:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006cec:	f107 0308 	add.w	r3, r7, #8
 8006cf0:	4619      	mov	r1, r3
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	f7ff fe24 	bl	8006940 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	f000 fa27 	bl	800714c <SDMMC_GetCmdResp3>
 8006cfe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006d00:	69fb      	ldr	r3, [r7, #28]
}
 8006d02:	4618      	mov	r0, r3
 8006d04:	3720      	adds	r7, #32
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bd80      	pop	{r7, pc}
 8006d0a:	bf00      	nop
 8006d0c:	80100000 	.word	0x80100000

08006d10 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b088      	sub	sp, #32
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
 8006d18:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8006d1e:	2306      	movs	r3, #6
 8006d20:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006d22:	2340      	movs	r3, #64	; 0x40
 8006d24:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006d26:	2300      	movs	r3, #0
 8006d28:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006d2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d2e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006d30:	f107 0308 	add.w	r3, r7, #8
 8006d34:	4619      	mov	r1, r3
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f7ff fe02 	bl	8006940 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8006d3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d40:	2106      	movs	r1, #6
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f000 f8d0 	bl	8006ee8 <SDMMC_GetCmdResp1>
 8006d48:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006d4a:	69fb      	ldr	r3, [r7, #28]
}
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	3720      	adds	r7, #32
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bd80      	pop	{r7, pc}

08006d54 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b088      	sub	sp, #32
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8006d60:	2333      	movs	r3, #51	; 0x33
 8006d62:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006d64:	2340      	movs	r3, #64	; 0x40
 8006d66:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006d6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d70:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006d72:	f107 0308 	add.w	r3, r7, #8
 8006d76:	4619      	mov	r1, r3
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	f7ff fde1 	bl	8006940 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8006d7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d82:	2133      	movs	r1, #51	; 0x33
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	f000 f8af 	bl	8006ee8 <SDMMC_GetCmdResp1>
 8006d8a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006d8c:	69fb      	ldr	r3, [r7, #28]
}
 8006d8e:	4618      	mov	r0, r3
 8006d90:	3720      	adds	r7, #32
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}

08006d96 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8006d96:	b580      	push	{r7, lr}
 8006d98:	b088      	sub	sp, #32
 8006d9a:	af00      	add	r7, sp, #0
 8006d9c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8006d9e:	2300      	movs	r3, #0
 8006da0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8006da2:	2302      	movs	r3, #2
 8006da4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8006da6:	23c0      	movs	r3, #192	; 0xc0
 8006da8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006daa:	2300      	movs	r3, #0
 8006dac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006dae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006db2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006db4:	f107 0308 	add.w	r3, r7, #8
 8006db8:	4619      	mov	r1, r3
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	f7ff fdc0 	bl	8006940 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f000 f97d 	bl	80070c0 <SDMMC_GetCmdResp2>
 8006dc6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006dc8:	69fb      	ldr	r3, [r7, #28]
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	3720      	adds	r7, #32
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}

08006dd2 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8006dd2:	b580      	push	{r7, lr}
 8006dd4:	b088      	sub	sp, #32
 8006dd6:	af00      	add	r7, sp, #0
 8006dd8:	6078      	str	r0, [r7, #4]
 8006dda:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8006de0:	2309      	movs	r3, #9
 8006de2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8006de4:	23c0      	movs	r3, #192	; 0xc0
 8006de6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006de8:	2300      	movs	r3, #0
 8006dea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006dec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006df0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006df2:	f107 0308 	add.w	r3, r7, #8
 8006df6:	4619      	mov	r1, r3
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	f7ff fda1 	bl	8006940 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f000 f95e 	bl	80070c0 <SDMMC_GetCmdResp2>
 8006e04:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006e06:	69fb      	ldr	r3, [r7, #28]
}
 8006e08:	4618      	mov	r0, r3
 8006e0a:	3720      	adds	r7, #32
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	bd80      	pop	{r7, pc}

08006e10 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b088      	sub	sp, #32
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
 8006e18:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8006e1e:	2303      	movs	r3, #3
 8006e20:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006e22:	2340      	movs	r3, #64	; 0x40
 8006e24:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006e26:	2300      	movs	r3, #0
 8006e28:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006e2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e2e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006e30:	f107 0308 	add.w	r3, r7, #8
 8006e34:	4619      	mov	r1, r3
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f7ff fd82 	bl	8006940 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8006e3c:	683a      	ldr	r2, [r7, #0]
 8006e3e:	2103      	movs	r1, #3
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	f000 f9bd 	bl	80071c0 <SDMMC_GetCmdResp6>
 8006e46:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006e48:	69fb      	ldr	r3, [r7, #28]
}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	3720      	adds	r7, #32
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}

08006e52 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8006e52:	b580      	push	{r7, lr}
 8006e54:	b088      	sub	sp, #32
 8006e56:	af00      	add	r7, sp, #0
 8006e58:	6078      	str	r0, [r7, #4]
 8006e5a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8006e60:	230d      	movs	r3, #13
 8006e62:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006e64:	2340      	movs	r3, #64	; 0x40
 8006e66:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006e68:	2300      	movs	r3, #0
 8006e6a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006e6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e70:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006e72:	f107 0308 	add.w	r3, r7, #8
 8006e76:	4619      	mov	r1, r3
 8006e78:	6878      	ldr	r0, [r7, #4]
 8006e7a:	f7ff fd61 	bl	8006940 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8006e7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e82:	210d      	movs	r1, #13
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	f000 f82f 	bl	8006ee8 <SDMMC_GetCmdResp1>
 8006e8a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006e8c:	69fb      	ldr	r3, [r7, #28]
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	3720      	adds	r7, #32
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}
	...

08006e98 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8006e98:	b490      	push	{r4, r7}
 8006e9a:	b082      	sub	sp, #8
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006ea0:	4b0f      	ldr	r3, [pc, #60]	; (8006ee0 <SDMMC_GetCmdError+0x48>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	4a0f      	ldr	r2, [pc, #60]	; (8006ee4 <SDMMC_GetCmdError+0x4c>)
 8006ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8006eaa:	0a5b      	lsrs	r3, r3, #9
 8006eac:	f241 3288 	movw	r2, #5000	; 0x1388
 8006eb0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8006eb4:	4623      	mov	r3, r4
 8006eb6:	1e5c      	subs	r4, r3, #1
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d102      	bne.n	8006ec2 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006ebc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006ec0:	e009      	b.n	8006ed6 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ec6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d0f2      	beq.n	8006eb4 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	22c5      	movs	r2, #197	; 0xc5
 8006ed2:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8006ed4:	2300      	movs	r3, #0
}
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	3708      	adds	r7, #8
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bc90      	pop	{r4, r7}
 8006ede:	4770      	bx	lr
 8006ee0:	20000010 	.word	0x20000010
 8006ee4:	10624dd3 	.word	0x10624dd3

08006ee8 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8006ee8:	b590      	push	{r4, r7, lr}
 8006eea:	b087      	sub	sp, #28
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	60f8      	str	r0, [r7, #12]
 8006ef0:	460b      	mov	r3, r1
 8006ef2:	607a      	str	r2, [r7, #4]
 8006ef4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006ef6:	4b6f      	ldr	r3, [pc, #444]	; (80070b4 <SDMMC_GetCmdResp1+0x1cc>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4a6f      	ldr	r2, [pc, #444]	; (80070b8 <SDMMC_GetCmdResp1+0x1d0>)
 8006efc:	fba2 2303 	umull	r2, r3, r2, r3
 8006f00:	0a5b      	lsrs	r3, r3, #9
 8006f02:	687a      	ldr	r2, [r7, #4]
 8006f04:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8006f08:	4623      	mov	r3, r4
 8006f0a:	1e5c      	subs	r4, r3, #1
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d102      	bne.n	8006f16 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006f10:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006f14:	e0c9      	b.n	80070aa <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDMMCx->STA;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f1a:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006f1c:	697b      	ldr	r3, [r7, #20]
 8006f1e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d0f0      	beq.n	8006f08 <SDMMC_GetCmdResp1+0x20>
 8006f26:	697b      	ldr	r3, [r7, #20]
 8006f28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d1eb      	bne.n	8006f08 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f34:	f003 0304 	and.w	r3, r3, #4
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d004      	beq.n	8006f46 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	2204      	movs	r2, #4
 8006f40:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006f42:	2304      	movs	r3, #4
 8006f44:	e0b1      	b.n	80070aa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f4a:	f003 0301 	and.w	r3, r3, #1
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d004      	beq.n	8006f5c <SDMMC_GetCmdResp1+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	2201      	movs	r2, #1
 8006f56:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006f58:	2301      	movs	r3, #1
 8006f5a:	e0a6      	b.n	80070aa <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	22c5      	movs	r2, #197	; 0xc5
 8006f60:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8006f62:	68f8      	ldr	r0, [r7, #12]
 8006f64:	f7ff fd16 	bl	8006994 <SDMMC_GetCommandResponse>
 8006f68:	4603      	mov	r3, r0
 8006f6a:	461a      	mov	r2, r3
 8006f6c:	7afb      	ldrb	r3, [r7, #11]
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d001      	beq.n	8006f76 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006f72:	2301      	movs	r3, #1
 8006f74:	e099      	b.n	80070aa <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8006f76:	2100      	movs	r1, #0
 8006f78:	68f8      	ldr	r0, [r7, #12]
 8006f7a:	f7ff fd18 	bl	80069ae <SDMMC_GetResponse>
 8006f7e:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8006f80:	693a      	ldr	r2, [r7, #16]
 8006f82:	4b4e      	ldr	r3, [pc, #312]	; (80070bc <SDMMC_GetCmdResp1+0x1d4>)
 8006f84:	4013      	ands	r3, r2
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d101      	bne.n	8006f8e <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	e08d      	b.n	80070aa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8006f8e:	693b      	ldr	r3, [r7, #16]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	da02      	bge.n	8006f9a <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8006f94:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006f98:	e087      	b.n	80070aa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8006f9a:	693b      	ldr	r3, [r7, #16]
 8006f9c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d001      	beq.n	8006fa8 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8006fa4:	2340      	movs	r3, #64	; 0x40
 8006fa6:	e080      	b.n	80070aa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8006fa8:	693b      	ldr	r3, [r7, #16]
 8006faa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d001      	beq.n	8006fb6 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8006fb2:	2380      	movs	r3, #128	; 0x80
 8006fb4:	e079      	b.n	80070aa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8006fb6:	693b      	ldr	r3, [r7, #16]
 8006fb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d002      	beq.n	8006fc6 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8006fc0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006fc4:	e071      	b.n	80070aa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8006fc6:	693b      	ldr	r3, [r7, #16]
 8006fc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d002      	beq.n	8006fd6 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8006fd0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006fd4:	e069      	b.n	80070aa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8006fd6:	693b      	ldr	r3, [r7, #16]
 8006fd8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d002      	beq.n	8006fe6 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8006fe0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006fe4:	e061      	b.n	80070aa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8006fe6:	693b      	ldr	r3, [r7, #16]
 8006fe8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d002      	beq.n	8006ff6 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8006ff0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006ff4:	e059      	b.n	80070aa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8006ff6:	693b      	ldr	r3, [r7, #16]
 8006ff8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d002      	beq.n	8007006 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007000:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007004:	e051      	b.n	80070aa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8007006:	693b      	ldr	r3, [r7, #16]
 8007008:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800700c:	2b00      	cmp	r3, #0
 800700e:	d002      	beq.n	8007016 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007010:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007014:	e049      	b.n	80070aa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8007016:	693b      	ldr	r3, [r7, #16]
 8007018:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800701c:	2b00      	cmp	r3, #0
 800701e:	d002      	beq.n	8007026 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8007020:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007024:	e041      	b.n	80070aa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8007026:	693b      	ldr	r3, [r7, #16]
 8007028:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800702c:	2b00      	cmp	r3, #0
 800702e:	d002      	beq.n	8007036 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8007030:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007034:	e039      	b.n	80070aa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8007036:	693b      	ldr	r3, [r7, #16]
 8007038:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800703c:	2b00      	cmp	r3, #0
 800703e:	d002      	beq.n	8007046 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8007040:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007044:	e031      	b.n	80070aa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8007046:	693b      	ldr	r3, [r7, #16]
 8007048:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800704c:	2b00      	cmp	r3, #0
 800704e:	d002      	beq.n	8007056 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8007050:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007054:	e029      	b.n	80070aa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8007056:	693b      	ldr	r3, [r7, #16]
 8007058:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800705c:	2b00      	cmp	r3, #0
 800705e:	d002      	beq.n	8007066 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8007060:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007064:	e021      	b.n	80070aa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8007066:	693b      	ldr	r3, [r7, #16]
 8007068:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800706c:	2b00      	cmp	r3, #0
 800706e:	d002      	beq.n	8007076 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8007070:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007074:	e019      	b.n	80070aa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8007076:	693b      	ldr	r3, [r7, #16]
 8007078:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800707c:	2b00      	cmp	r3, #0
 800707e:	d002      	beq.n	8007086 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8007080:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007084:	e011      	b.n	80070aa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8007086:	693b      	ldr	r3, [r7, #16]
 8007088:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800708c:	2b00      	cmp	r3, #0
 800708e:	d002      	beq.n	8007096 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8007090:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007094:	e009      	b.n	80070aa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	f003 0308 	and.w	r3, r3, #8
 800709c:	2b00      	cmp	r3, #0
 800709e:	d002      	beq.n	80070a6 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80070a0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80070a4:	e001      	b.n	80070aa <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80070a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80070aa:	4618      	mov	r0, r3
 80070ac:	371c      	adds	r7, #28
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd90      	pop	{r4, r7, pc}
 80070b2:	bf00      	nop
 80070b4:	20000010 	.word	0x20000010
 80070b8:	10624dd3 	.word	0x10624dd3
 80070bc:	fdffe008 	.word	0xfdffe008

080070c0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80070c0:	b490      	push	{r4, r7}
 80070c2:	b084      	sub	sp, #16
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80070c8:	4b1e      	ldr	r3, [pc, #120]	; (8007144 <SDMMC_GetCmdResp2+0x84>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4a1e      	ldr	r2, [pc, #120]	; (8007148 <SDMMC_GetCmdResp2+0x88>)
 80070ce:	fba2 2303 	umull	r2, r3, r2, r3
 80070d2:	0a5b      	lsrs	r3, r3, #9
 80070d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80070d8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80070dc:	4623      	mov	r3, r4
 80070de:	1e5c      	subs	r4, r3, #1
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d102      	bne.n	80070ea <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80070e4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80070e8:	e026      	b.n	8007138 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDMMCx->STA;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070ee:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d0f0      	beq.n	80070dc <SDMMC_GetCmdResp2+0x1c>
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007100:	2b00      	cmp	r3, #0
 8007102:	d1eb      	bne.n	80070dc <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007108:	f003 0304 	and.w	r3, r3, #4
 800710c:	2b00      	cmp	r3, #0
 800710e:	d004      	beq.n	800711a <SDMMC_GetCmdResp2+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2204      	movs	r2, #4
 8007114:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007116:	2304      	movs	r3, #4
 8007118:	e00e      	b.n	8007138 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800711e:	f003 0301 	and.w	r3, r3, #1
 8007122:	2b00      	cmp	r3, #0
 8007124:	d004      	beq.n	8007130 <SDMMC_GetCmdResp2+0x70>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2201      	movs	r2, #1
 800712a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800712c:	2301      	movs	r3, #1
 800712e:	e003      	b.n	8007138 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	22c5      	movs	r2, #197	; 0xc5
 8007134:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8007136:	2300      	movs	r3, #0
}
 8007138:	4618      	mov	r0, r3
 800713a:	3710      	adds	r7, #16
 800713c:	46bd      	mov	sp, r7
 800713e:	bc90      	pop	{r4, r7}
 8007140:	4770      	bx	lr
 8007142:	bf00      	nop
 8007144:	20000010 	.word	0x20000010
 8007148:	10624dd3 	.word	0x10624dd3

0800714c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800714c:	b490      	push	{r4, r7}
 800714e:	b084      	sub	sp, #16
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007154:	4b18      	ldr	r3, [pc, #96]	; (80071b8 <SDMMC_GetCmdResp3+0x6c>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	4a18      	ldr	r2, [pc, #96]	; (80071bc <SDMMC_GetCmdResp3+0x70>)
 800715a:	fba2 2303 	umull	r2, r3, r2, r3
 800715e:	0a5b      	lsrs	r3, r3, #9
 8007160:	f241 3288 	movw	r2, #5000	; 0x1388
 8007164:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8007168:	4623      	mov	r3, r4
 800716a:	1e5c      	subs	r4, r3, #1
 800716c:	2b00      	cmp	r3, #0
 800716e:	d102      	bne.n	8007176 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007170:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007174:	e01b      	b.n	80071ae <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDMMCx->STA;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800717a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007182:	2b00      	cmp	r3, #0
 8007184:	d0f0      	beq.n	8007168 <SDMMC_GetCmdResp3+0x1c>
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800718c:	2b00      	cmp	r3, #0
 800718e:	d1eb      	bne.n	8007168 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007194:	f003 0304 	and.w	r3, r3, #4
 8007198:	2b00      	cmp	r3, #0
 800719a:	d004      	beq.n	80071a6 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2204      	movs	r2, #4
 80071a0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80071a2:	2304      	movs	r3, #4
 80071a4:	e003      	b.n	80071ae <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	22c5      	movs	r2, #197	; 0xc5
 80071aa:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80071ac:	2300      	movs	r3, #0
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	3710      	adds	r7, #16
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bc90      	pop	{r4, r7}
 80071b6:	4770      	bx	lr
 80071b8:	20000010 	.word	0x20000010
 80071bc:	10624dd3 	.word	0x10624dd3

080071c0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80071c0:	b590      	push	{r4, r7, lr}
 80071c2:	b087      	sub	sp, #28
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	60f8      	str	r0, [r7, #12]
 80071c8:	460b      	mov	r3, r1
 80071ca:	607a      	str	r2, [r7, #4]
 80071cc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80071ce:	4b34      	ldr	r3, [pc, #208]	; (80072a0 <SDMMC_GetCmdResp6+0xe0>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	4a34      	ldr	r2, [pc, #208]	; (80072a4 <SDMMC_GetCmdResp6+0xe4>)
 80071d4:	fba2 2303 	umull	r2, r3, r2, r3
 80071d8:	0a5b      	lsrs	r3, r3, #9
 80071da:	f241 3288 	movw	r2, #5000	; 0x1388
 80071de:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80071e2:	4623      	mov	r3, r4
 80071e4:	1e5c      	subs	r4, r3, #1
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d102      	bne.n	80071f0 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 80071ea:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80071ee:	e052      	b.n	8007296 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDMMCx->STA;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071f4:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80071f6:	697b      	ldr	r3, [r7, #20]
 80071f8:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d0f0      	beq.n	80071e2 <SDMMC_GetCmdResp6+0x22>
 8007200:	697b      	ldr	r3, [r7, #20]
 8007202:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007206:	2b00      	cmp	r3, #0
 8007208:	d1eb      	bne.n	80071e2 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800720e:	f003 0304 	and.w	r3, r3, #4
 8007212:	2b00      	cmp	r3, #0
 8007214:	d004      	beq.n	8007220 <SDMMC_GetCmdResp6+0x60>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	2204      	movs	r2, #4
 800721a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800721c:	2304      	movs	r3, #4
 800721e:	e03a      	b.n	8007296 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007224:	f003 0301 	and.w	r3, r3, #1
 8007228:	2b00      	cmp	r3, #0
 800722a:	d004      	beq.n	8007236 <SDMMC_GetCmdResp6+0x76>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	2201      	movs	r2, #1
 8007230:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007232:	2301      	movs	r3, #1
 8007234:	e02f      	b.n	8007296 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8007236:	68f8      	ldr	r0, [r7, #12]
 8007238:	f7ff fbac 	bl	8006994 <SDMMC_GetCommandResponse>
 800723c:	4603      	mov	r3, r0
 800723e:	461a      	mov	r2, r3
 8007240:	7afb      	ldrb	r3, [r7, #11]
 8007242:	4293      	cmp	r3, r2
 8007244:	d001      	beq.n	800724a <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007246:	2301      	movs	r3, #1
 8007248:	e025      	b.n	8007296 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	22c5      	movs	r2, #197	; 0xc5
 800724e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8007250:	2100      	movs	r1, #0
 8007252:	68f8      	ldr	r0, [r7, #12]
 8007254:	f7ff fbab 	bl	80069ae <SDMMC_GetResponse>
 8007258:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800725a:	693b      	ldr	r3, [r7, #16]
 800725c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8007260:	2b00      	cmp	r3, #0
 8007262:	d106      	bne.n	8007272 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8007264:	693b      	ldr	r3, [r7, #16]
 8007266:	0c1b      	lsrs	r3, r3, #16
 8007268:	b29a      	uxth	r2, r3
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800726e:	2300      	movs	r3, #0
 8007270:	e011      	b.n	8007296 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8007272:	693b      	ldr	r3, [r7, #16]
 8007274:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007278:	2b00      	cmp	r3, #0
 800727a:	d002      	beq.n	8007282 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800727c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007280:	e009      	b.n	8007296 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8007282:	693b      	ldr	r3, [r7, #16]
 8007284:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007288:	2b00      	cmp	r3, #0
 800728a:	d002      	beq.n	8007292 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800728c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007290:	e001      	b.n	8007296 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007292:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007296:	4618      	mov	r0, r3
 8007298:	371c      	adds	r7, #28
 800729a:	46bd      	mov	sp, r7
 800729c:	bd90      	pop	{r4, r7, pc}
 800729e:	bf00      	nop
 80072a0:	20000010 	.word	0x20000010
 80072a4:	10624dd3 	.word	0x10624dd3

080072a8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 80072a8:	b490      	push	{r4, r7}
 80072aa:	b084      	sub	sp, #16
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80072b0:	4b21      	ldr	r3, [pc, #132]	; (8007338 <SDMMC_GetCmdResp7+0x90>)
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	4a21      	ldr	r2, [pc, #132]	; (800733c <SDMMC_GetCmdResp7+0x94>)
 80072b6:	fba2 2303 	umull	r2, r3, r2, r3
 80072ba:	0a5b      	lsrs	r3, r3, #9
 80072bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80072c0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80072c4:	4623      	mov	r3, r4
 80072c6:	1e5c      	subs	r4, r3, #1
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d102      	bne.n	80072d2 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80072cc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80072d0:	e02c      	b.n	800732c <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDMMCx->STA;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072d6:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d0f0      	beq.n	80072c4 <SDMMC_GetCmdResp7+0x1c>
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d1eb      	bne.n	80072c4 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072f0:	f003 0304 	and.w	r3, r3, #4
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d004      	beq.n	8007302 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2204      	movs	r2, #4
 80072fc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80072fe:	2304      	movs	r3, #4
 8007300:	e014      	b.n	800732c <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007306:	f003 0301 	and.w	r3, r3, #1
 800730a:	2b00      	cmp	r3, #0
 800730c:	d004      	beq.n	8007318 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2201      	movs	r2, #1
 8007312:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007314:	2301      	movs	r3, #1
 8007316:	e009      	b.n	800732c <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800731c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007320:	2b00      	cmp	r3, #0
 8007322:	d002      	beq.n	800732a <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2240      	movs	r2, #64	; 0x40
 8007328:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800732a:	2300      	movs	r3, #0
  
}
 800732c:	4618      	mov	r0, r3
 800732e:	3710      	adds	r7, #16
 8007330:	46bd      	mov	sp, r7
 8007332:	bc90      	pop	{r4, r7}
 8007334:	4770      	bx	lr
 8007336:	bf00      	nop
 8007338:	20000010 	.word	0x20000010
 800733c:	10624dd3 	.word	0x10624dd3

08007340 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007340:	b084      	sub	sp, #16
 8007342:	b580      	push	{r7, lr}
 8007344:	b084      	sub	sp, #16
 8007346:	af00      	add	r7, sp, #0
 8007348:	6078      	str	r0, [r7, #4]
 800734a:	f107 001c 	add.w	r0, r7, #28
 800734e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007354:	2b01      	cmp	r3, #1
 8007356:	d120      	bne.n	800739a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800735c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	68da      	ldr	r2, [r3, #12]
 8007368:	4b20      	ldr	r3, [pc, #128]	; (80073ec <USB_CoreInit+0xac>)
 800736a:	4013      	ands	r3, r2
 800736c:	687a      	ldr	r2, [r7, #4]
 800736e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	68db      	ldr	r3, [r3, #12]
 8007374:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800737c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800737e:	2b01      	cmp	r3, #1
 8007380:	d105      	bne.n	800738e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	68db      	ldr	r3, [r3, #12]
 8007386:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f000 fa52 	bl	8007838 <USB_CoreReset>
 8007394:	4603      	mov	r3, r0
 8007396:	73fb      	strb	r3, [r7, #15]
 8007398:	e010      	b.n	80073bc <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	68db      	ldr	r3, [r3, #12]
 800739e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f000 fa46 	bl	8007838 <USB_CoreReset>
 80073ac:	4603      	mov	r3, r0
 80073ae:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073b4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80073bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073be:	2b01      	cmp	r3, #1
 80073c0:	d10b      	bne.n	80073da <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	689b      	ldr	r3, [r3, #8]
 80073c6:	f043 0206 	orr.w	r2, r3, #6
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	689b      	ldr	r3, [r3, #8]
 80073d2:	f043 0220 	orr.w	r2, r3, #32
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80073da:	7bfb      	ldrb	r3, [r7, #15]
}
 80073dc:	4618      	mov	r0, r3
 80073de:	3710      	adds	r7, #16
 80073e0:	46bd      	mov	sp, r7
 80073e2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80073e6:	b004      	add	sp, #16
 80073e8:	4770      	bx	lr
 80073ea:	bf00      	nop
 80073ec:	ffbdffbf 	.word	0xffbdffbf

080073f0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80073f0:	b480      	push	{r7}
 80073f2:	b083      	sub	sp, #12
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	689b      	ldr	r3, [r3, #8]
 80073fc:	f023 0201 	bic.w	r2, r3, #1
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007404:	2300      	movs	r3, #0
}
 8007406:	4618      	mov	r0, r3
 8007408:	370c      	adds	r7, #12
 800740a:	46bd      	mov	sp, r7
 800740c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007410:	4770      	bx	lr

08007412 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007412:	b580      	push	{r7, lr}
 8007414:	b082      	sub	sp, #8
 8007416:	af00      	add	r7, sp, #0
 8007418:	6078      	str	r0, [r7, #4]
 800741a:	460b      	mov	r3, r1
 800741c:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	68db      	ldr	r3, [r3, #12]
 8007422:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800742a:	78fb      	ldrb	r3, [r7, #3]
 800742c:	2b01      	cmp	r3, #1
 800742e:	d106      	bne.n	800743e <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	68db      	ldr	r3, [r3, #12]
 8007434:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	60da      	str	r2, [r3, #12]
 800743c:	e00b      	b.n	8007456 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800743e:	78fb      	ldrb	r3, [r7, #3]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d106      	bne.n	8007452 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	68db      	ldr	r3, [r3, #12]
 8007448:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	60da      	str	r2, [r3, #12]
 8007450:	e001      	b.n	8007456 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8007452:	2301      	movs	r3, #1
 8007454:	e003      	b.n	800745e <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8007456:	2032      	movs	r0, #50	; 0x32
 8007458:	f7fa f880 	bl	800155c <HAL_Delay>

  return HAL_OK;
 800745c:	2300      	movs	r3, #0
}
 800745e:	4618      	mov	r0, r3
 8007460:	3708      	adds	r7, #8
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}
	...

08007468 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007468:	b084      	sub	sp, #16
 800746a:	b580      	push	{r7, lr}
 800746c:	b086      	sub	sp, #24
 800746e:	af00      	add	r7, sp, #0
 8007470:	6078      	str	r0, [r7, #4]
 8007472:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007476:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800747a:	2300      	movs	r3, #0
 800747c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007482:	2300      	movs	r3, #0
 8007484:	613b      	str	r3, [r7, #16]
 8007486:	e009      	b.n	800749c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007488:	687a      	ldr	r2, [r7, #4]
 800748a:	693b      	ldr	r3, [r7, #16]
 800748c:	3340      	adds	r3, #64	; 0x40
 800748e:	009b      	lsls	r3, r3, #2
 8007490:	4413      	add	r3, r2
 8007492:	2200      	movs	r2, #0
 8007494:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007496:	693b      	ldr	r3, [r7, #16]
 8007498:	3301      	adds	r3, #1
 800749a:	613b      	str	r3, [r7, #16]
 800749c:	693b      	ldr	r3, [r7, #16]
 800749e:	2b0e      	cmp	r3, #14
 80074a0:	d9f2      	bls.n	8007488 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80074a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d11c      	bne.n	80074e2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074ae:	685b      	ldr	r3, [r3, #4]
 80074b0:	68fa      	ldr	r2, [r7, #12]
 80074b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80074b6:	f043 0302 	orr.w	r3, r3, #2
 80074ba:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074c0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	601a      	str	r2, [r3, #0]
 80074e0:	e005      	b.n	80074ee <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074e6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80074f4:	461a      	mov	r2, r3
 80074f6:	2300      	movs	r3, #0
 80074f8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007500:	4619      	mov	r1, r3
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007508:	461a      	mov	r2, r3
 800750a:	680b      	ldr	r3, [r1, #0]
 800750c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800750e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007510:	2b01      	cmp	r3, #1
 8007512:	d10c      	bne.n	800752e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007516:	2b00      	cmp	r3, #0
 8007518:	d104      	bne.n	8007524 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800751a:	2100      	movs	r1, #0
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	f000 f959 	bl	80077d4 <USB_SetDevSpeed>
 8007522:	e018      	b.n	8007556 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007524:	2101      	movs	r1, #1
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f000 f954 	bl	80077d4 <USB_SetDevSpeed>
 800752c:	e013      	b.n	8007556 <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800752e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007530:	2b03      	cmp	r3, #3
 8007532:	d10c      	bne.n	800754e <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007536:	2b00      	cmp	r3, #0
 8007538:	d104      	bne.n	8007544 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800753a:	2100      	movs	r1, #0
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f000 f949 	bl	80077d4 <USB_SetDevSpeed>
 8007542:	e008      	b.n	8007556 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007544:	2101      	movs	r1, #1
 8007546:	6878      	ldr	r0, [r7, #4]
 8007548:	f000 f944 	bl	80077d4 <USB_SetDevSpeed>
 800754c:	e003      	b.n	8007556 <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800754e:	2103      	movs	r1, #3
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f000 f93f 	bl	80077d4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007556:	2110      	movs	r1, #16
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	f000 f8f3 	bl	8007744 <USB_FlushTxFifo>
 800755e:	4603      	mov	r3, r0
 8007560:	2b00      	cmp	r3, #0
 8007562:	d001      	beq.n	8007568 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 8007564:	2301      	movs	r3, #1
 8007566:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f000 f911 	bl	8007790 <USB_FlushRxFifo>
 800756e:	4603      	mov	r3, r0
 8007570:	2b00      	cmp	r3, #0
 8007572:	d001      	beq.n	8007578 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 8007574:	2301      	movs	r3, #1
 8007576:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800757e:	461a      	mov	r2, r3
 8007580:	2300      	movs	r3, #0
 8007582:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800758a:	461a      	mov	r2, r3
 800758c:	2300      	movs	r3, #0
 800758e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007596:	461a      	mov	r2, r3
 8007598:	2300      	movs	r3, #0
 800759a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800759c:	2300      	movs	r3, #0
 800759e:	613b      	str	r3, [r7, #16]
 80075a0:	e043      	b.n	800762a <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80075a2:	693b      	ldr	r3, [r7, #16]
 80075a4:	015a      	lsls	r2, r3, #5
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	4413      	add	r3, r2
 80075aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80075b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80075b8:	d118      	bne.n	80075ec <USB_DevInit+0x184>
    {
      if (i == 0U)
 80075ba:	693b      	ldr	r3, [r7, #16]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d10a      	bne.n	80075d6 <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80075c0:	693b      	ldr	r3, [r7, #16]
 80075c2:	015a      	lsls	r2, r3, #5
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	4413      	add	r3, r2
 80075c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075cc:	461a      	mov	r2, r3
 80075ce:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80075d2:	6013      	str	r3, [r2, #0]
 80075d4:	e013      	b.n	80075fe <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80075d6:	693b      	ldr	r3, [r7, #16]
 80075d8:	015a      	lsls	r2, r3, #5
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	4413      	add	r3, r2
 80075de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075e2:	461a      	mov	r2, r3
 80075e4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80075e8:	6013      	str	r3, [r2, #0]
 80075ea:	e008      	b.n	80075fe <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80075ec:	693b      	ldr	r3, [r7, #16]
 80075ee:	015a      	lsls	r2, r3, #5
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	4413      	add	r3, r2
 80075f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075f8:	461a      	mov	r2, r3
 80075fa:	2300      	movs	r3, #0
 80075fc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80075fe:	693b      	ldr	r3, [r7, #16]
 8007600:	015a      	lsls	r2, r3, #5
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	4413      	add	r3, r2
 8007606:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800760a:	461a      	mov	r2, r3
 800760c:	2300      	movs	r3, #0
 800760e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007610:	693b      	ldr	r3, [r7, #16]
 8007612:	015a      	lsls	r2, r3, #5
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	4413      	add	r3, r2
 8007618:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800761c:	461a      	mov	r2, r3
 800761e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007622:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007624:	693b      	ldr	r3, [r7, #16]
 8007626:	3301      	adds	r3, #1
 8007628:	613b      	str	r3, [r7, #16]
 800762a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800762c:	693a      	ldr	r2, [r7, #16]
 800762e:	429a      	cmp	r2, r3
 8007630:	d3b7      	bcc.n	80075a2 <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007632:	2300      	movs	r3, #0
 8007634:	613b      	str	r3, [r7, #16]
 8007636:	e043      	b.n	80076c0 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007638:	693b      	ldr	r3, [r7, #16]
 800763a:	015a      	lsls	r2, r3, #5
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	4413      	add	r3, r2
 8007640:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800764a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800764e:	d118      	bne.n	8007682 <USB_DevInit+0x21a>
    {
      if (i == 0U)
 8007650:	693b      	ldr	r3, [r7, #16]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d10a      	bne.n	800766c <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007656:	693b      	ldr	r3, [r7, #16]
 8007658:	015a      	lsls	r2, r3, #5
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	4413      	add	r3, r2
 800765e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007662:	461a      	mov	r2, r3
 8007664:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007668:	6013      	str	r3, [r2, #0]
 800766a:	e013      	b.n	8007694 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800766c:	693b      	ldr	r3, [r7, #16]
 800766e:	015a      	lsls	r2, r3, #5
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	4413      	add	r3, r2
 8007674:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007678:	461a      	mov	r2, r3
 800767a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800767e:	6013      	str	r3, [r2, #0]
 8007680:	e008      	b.n	8007694 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007682:	693b      	ldr	r3, [r7, #16]
 8007684:	015a      	lsls	r2, r3, #5
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	4413      	add	r3, r2
 800768a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800768e:	461a      	mov	r2, r3
 8007690:	2300      	movs	r3, #0
 8007692:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007694:	693b      	ldr	r3, [r7, #16]
 8007696:	015a      	lsls	r2, r3, #5
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	4413      	add	r3, r2
 800769c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076a0:	461a      	mov	r2, r3
 80076a2:	2300      	movs	r3, #0
 80076a4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80076a6:	693b      	ldr	r3, [r7, #16]
 80076a8:	015a      	lsls	r2, r3, #5
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	4413      	add	r3, r2
 80076ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076b2:	461a      	mov	r2, r3
 80076b4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80076b8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80076ba:	693b      	ldr	r3, [r7, #16]
 80076bc:	3301      	adds	r3, #1
 80076be:	613b      	str	r3, [r7, #16]
 80076c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c2:	693a      	ldr	r2, [r7, #16]
 80076c4:	429a      	cmp	r2, r3
 80076c6:	d3b7      	bcc.n	8007638 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076ce:	691b      	ldr	r3, [r3, #16]
 80076d0:	68fa      	ldr	r2, [r7, #12]
 80076d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80076d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80076da:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2200      	movs	r2, #0
 80076e0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80076e8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80076ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d105      	bne.n	80076fc <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	699b      	ldr	r3, [r3, #24]
 80076f4:	f043 0210 	orr.w	r2, r3, #16
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	699a      	ldr	r2, [r3, #24]
 8007700:	4b0e      	ldr	r3, [pc, #56]	; (800773c <USB_DevInit+0x2d4>)
 8007702:	4313      	orrs	r3, r2
 8007704:	687a      	ldr	r2, [r7, #4]
 8007706:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007708:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800770a:	2b00      	cmp	r3, #0
 800770c:	d005      	beq.n	800771a <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	699b      	ldr	r3, [r3, #24]
 8007712:	f043 0208 	orr.w	r2, r3, #8
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800771a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800771c:	2b01      	cmp	r3, #1
 800771e:	d105      	bne.n	800772c <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	699a      	ldr	r2, [r3, #24]
 8007724:	4b06      	ldr	r3, [pc, #24]	; (8007740 <USB_DevInit+0x2d8>)
 8007726:	4313      	orrs	r3, r2
 8007728:	687a      	ldr	r2, [r7, #4]
 800772a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800772c:	7dfb      	ldrb	r3, [r7, #23]
}
 800772e:	4618      	mov	r0, r3
 8007730:	3718      	adds	r7, #24
 8007732:	46bd      	mov	sp, r7
 8007734:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007738:	b004      	add	sp, #16
 800773a:	4770      	bx	lr
 800773c:	803c3800 	.word	0x803c3800
 8007740:	40000004 	.word	0x40000004

08007744 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007744:	b480      	push	{r7}
 8007746:	b085      	sub	sp, #20
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
 800774c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800774e:	2300      	movs	r3, #0
 8007750:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	019b      	lsls	r3, r3, #6
 8007756:	f043 0220 	orr.w	r2, r3, #32
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	3301      	adds	r3, #1
 8007762:	60fb      	str	r3, [r7, #12]
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	4a09      	ldr	r2, [pc, #36]	; (800778c <USB_FlushTxFifo+0x48>)
 8007768:	4293      	cmp	r3, r2
 800776a:	d901      	bls.n	8007770 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800776c:	2303      	movs	r3, #3
 800776e:	e006      	b.n	800777e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	691b      	ldr	r3, [r3, #16]
 8007774:	f003 0320 	and.w	r3, r3, #32
 8007778:	2b20      	cmp	r3, #32
 800777a:	d0f0      	beq.n	800775e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800777c:	2300      	movs	r3, #0
}
 800777e:	4618      	mov	r0, r3
 8007780:	3714      	adds	r7, #20
 8007782:	46bd      	mov	sp, r7
 8007784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007788:	4770      	bx	lr
 800778a:	bf00      	nop
 800778c:	00030d40 	.word	0x00030d40

08007790 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007790:	b480      	push	{r7}
 8007792:	b085      	sub	sp, #20
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8007798:	2300      	movs	r3, #0
 800779a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2210      	movs	r2, #16
 80077a0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	3301      	adds	r3, #1
 80077a6:	60fb      	str	r3, [r7, #12]
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	4a09      	ldr	r2, [pc, #36]	; (80077d0 <USB_FlushRxFifo+0x40>)
 80077ac:	4293      	cmp	r3, r2
 80077ae:	d901      	bls.n	80077b4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80077b0:	2303      	movs	r3, #3
 80077b2:	e006      	b.n	80077c2 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	691b      	ldr	r3, [r3, #16]
 80077b8:	f003 0310 	and.w	r3, r3, #16
 80077bc:	2b10      	cmp	r3, #16
 80077be:	d0f0      	beq.n	80077a2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80077c0:	2300      	movs	r3, #0
}
 80077c2:	4618      	mov	r0, r3
 80077c4:	3714      	adds	r7, #20
 80077c6:	46bd      	mov	sp, r7
 80077c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077cc:	4770      	bx	lr
 80077ce:	bf00      	nop
 80077d0:	00030d40 	.word	0x00030d40

080077d4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80077d4:	b480      	push	{r7}
 80077d6:	b085      	sub	sp, #20
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
 80077dc:	460b      	mov	r3, r1
 80077de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077ea:	681a      	ldr	r2, [r3, #0]
 80077ec:	78fb      	ldrb	r3, [r7, #3]
 80077ee:	68f9      	ldr	r1, [r7, #12]
 80077f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80077f4:	4313      	orrs	r3, r2
 80077f6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80077f8:	2300      	movs	r3, #0
}
 80077fa:	4618      	mov	r0, r3
 80077fc:	3714      	adds	r7, #20
 80077fe:	46bd      	mov	sp, r7
 8007800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007804:	4770      	bx	lr

08007806 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007806:	b580      	push	{r7, lr}
 8007808:	b084      	sub	sp, #16
 800780a:	af00      	add	r7, sp, #0
 800780c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007818:	685b      	ldr	r3, [r3, #4]
 800781a:	68fa      	ldr	r2, [r7, #12]
 800781c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007820:	f043 0302 	orr.w	r3, r3, #2
 8007824:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8007826:	2003      	movs	r0, #3
 8007828:	f7f9 fe98 	bl	800155c <HAL_Delay>

  return HAL_OK;
 800782c:	2300      	movs	r3, #0
}
 800782e:	4618      	mov	r0, r3
 8007830:	3710      	adds	r7, #16
 8007832:	46bd      	mov	sp, r7
 8007834:	bd80      	pop	{r7, pc}
	...

08007838 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007838:	b480      	push	{r7}
 800783a:	b085      	sub	sp, #20
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007840:	2300      	movs	r3, #0
 8007842:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	3301      	adds	r3, #1
 8007848:	60fb      	str	r3, [r7, #12]
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	4a13      	ldr	r2, [pc, #76]	; (800789c <USB_CoreReset+0x64>)
 800784e:	4293      	cmp	r3, r2
 8007850:	d901      	bls.n	8007856 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007852:	2303      	movs	r3, #3
 8007854:	e01b      	b.n	800788e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	691b      	ldr	r3, [r3, #16]
 800785a:	2b00      	cmp	r3, #0
 800785c:	daf2      	bge.n	8007844 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800785e:	2300      	movs	r3, #0
 8007860:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	691b      	ldr	r3, [r3, #16]
 8007866:	f043 0201 	orr.w	r2, r3, #1
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	3301      	adds	r3, #1
 8007872:	60fb      	str	r3, [r7, #12]
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	4a09      	ldr	r2, [pc, #36]	; (800789c <USB_CoreReset+0x64>)
 8007878:	4293      	cmp	r3, r2
 800787a:	d901      	bls.n	8007880 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800787c:	2303      	movs	r3, #3
 800787e:	e006      	b.n	800788e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	691b      	ldr	r3, [r3, #16]
 8007884:	f003 0301 	and.w	r3, r3, #1
 8007888:	2b01      	cmp	r3, #1
 800788a:	d0f0      	beq.n	800786e <USB_CoreReset+0x36>

  return HAL_OK;
 800788c:	2300      	movs	r3, #0
}
 800788e:	4618      	mov	r0, r3
 8007890:	3714      	adds	r7, #20
 8007892:	46bd      	mov	sp, r7
 8007894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007898:	4770      	bx	lr
 800789a:	bf00      	nop
 800789c:	00030d40 	.word	0x00030d40

080078a0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80078a4:	4904      	ldr	r1, [pc, #16]	; (80078b8 <MX_FATFS_Init+0x18>)
 80078a6:	4805      	ldr	r0, [pc, #20]	; (80078bc <MX_FATFS_Init+0x1c>)
 80078a8:	f004 fd04 	bl	800c2b4 <FATFS_LinkDriver>
 80078ac:	4603      	mov	r3, r0
 80078ae:	461a      	mov	r2, r3
 80078b0:	4b03      	ldr	r3, [pc, #12]	; (80078c0 <MX_FATFS_Init+0x20>)
 80078b2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 80078b4:	bf00      	nop
 80078b6:	bd80      	pop	{r7, pc}
 80078b8:	20006b4c 	.word	0x20006b4c
 80078bc:	0800f2f4 	.word	0x0800f2f4
 80078c0:	20006b48 	.word	0x20006b48

080078c4 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80078c4:	b480      	push	{r7}
 80078c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80078c8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 80078ca:	4618      	mov	r0, r3
 80078cc:	46bd      	mov	sp, r7
 80078ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d2:	4770      	bx	lr

080078d4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b082      	sub	sp, #8
 80078d8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80078da:	2300      	movs	r3, #0
 80078dc:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80078de:	f000 f896 	bl	8007a0e <BSP_SD_IsDetected>
 80078e2:	4603      	mov	r3, r0
 80078e4:	2b01      	cmp	r3, #1
 80078e6:	d001      	beq.n	80078ec <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 80078e8:	2302      	movs	r3, #2
 80078ea:	e012      	b.n	8007912 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 80078ec:	480b      	ldr	r0, [pc, #44]	; (800791c <BSP_SD_Init+0x48>)
 80078ee:	f7fc fe09 	bl	8004504 <HAL_SD_Init>
 80078f2:	4603      	mov	r3, r0
 80078f4:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80078f6:	79fb      	ldrb	r3, [r7, #7]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d109      	bne.n	8007910 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 80078fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007900:	4806      	ldr	r0, [pc, #24]	; (800791c <BSP_SD_Init+0x48>)
 8007902:	f7fd fbc1 	bl	8005088 <HAL_SD_ConfigWideBusOperation>
 8007906:	4603      	mov	r3, r0
 8007908:	2b00      	cmp	r3, #0
 800790a:	d001      	beq.n	8007910 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800790c:	2301      	movs	r3, #1
 800790e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8007910:	79fb      	ldrb	r3, [r7, #7]
}
 8007912:	4618      	mov	r0, r3
 8007914:	3708      	adds	r7, #8
 8007916:	46bd      	mov	sp, r7
 8007918:	bd80      	pop	{r7, pc}
 800791a:	bf00      	nop
 800791c:	200044c8 	.word	0x200044c8

08007920 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b086      	sub	sp, #24
 8007924:	af00      	add	r7, sp, #0
 8007926:	60f8      	str	r0, [r7, #12]
 8007928:	60b9      	str	r1, [r7, #8]
 800792a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800792c:	2300      	movs	r3, #0
 800792e:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	68ba      	ldr	r2, [r7, #8]
 8007934:	68f9      	ldr	r1, [r7, #12]
 8007936:	4806      	ldr	r0, [pc, #24]	; (8007950 <BSP_SD_ReadBlocks_DMA+0x30>)
 8007938:	f7fc fe7c 	bl	8004634 <HAL_SD_ReadBlocks_DMA>
 800793c:	4603      	mov	r3, r0
 800793e:	2b00      	cmp	r3, #0
 8007940:	d001      	beq.n	8007946 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8007942:	2301      	movs	r3, #1
 8007944:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 8007946:	7dfb      	ldrb	r3, [r7, #23]
}
 8007948:	4618      	mov	r0, r3
 800794a:	3718      	adds	r7, #24
 800794c:	46bd      	mov	sp, r7
 800794e:	bd80      	pop	{r7, pc}
 8007950:	200044c8 	.word	0x200044c8

08007954 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b086      	sub	sp, #24
 8007958:	af00      	add	r7, sp, #0
 800795a:	60f8      	str	r0, [r7, #12]
 800795c:	60b9      	str	r1, [r7, #8]
 800795e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8007960:	2300      	movs	r3, #0
 8007962:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	68ba      	ldr	r2, [r7, #8]
 8007968:	68f9      	ldr	r1, [r7, #12]
 800796a:	4806      	ldr	r0, [pc, #24]	; (8007984 <BSP_SD_WriteBlocks_DMA+0x30>)
 800796c:	f7fc ff4e 	bl	800480c <HAL_SD_WriteBlocks_DMA>
 8007970:	4603      	mov	r3, r0
 8007972:	2b00      	cmp	r3, #0
 8007974:	d001      	beq.n	800797a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8007976:	2301      	movs	r3, #1
 8007978:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800797a:	7dfb      	ldrb	r3, [r7, #23]
}
 800797c:	4618      	mov	r0, r3
 800797e:	3718      	adds	r7, #24
 8007980:	46bd      	mov	sp, r7
 8007982:	bd80      	pop	{r7, pc}
 8007984:	200044c8 	.word	0x200044c8

08007988 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800798c:	4805      	ldr	r0, [pc, #20]	; (80079a4 <BSP_SD_GetCardState+0x1c>)
 800798e:	f7fd fbf7 	bl	8005180 <HAL_SD_GetCardState>
 8007992:	4603      	mov	r3, r0
 8007994:	2b04      	cmp	r3, #4
 8007996:	bf14      	ite	ne
 8007998:	2301      	movne	r3, #1
 800799a:	2300      	moveq	r3, #0
 800799c:	b2db      	uxtb	r3, r3
}
 800799e:	4618      	mov	r0, r3
 80079a0:	bd80      	pop	{r7, pc}
 80079a2:	bf00      	nop
 80079a4:	200044c8 	.word	0x200044c8

080079a8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b082      	sub	sp, #8
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 80079b0:	6879      	ldr	r1, [r7, #4]
 80079b2:	4803      	ldr	r0, [pc, #12]	; (80079c0 <BSP_SD_GetCardInfo+0x18>)
 80079b4:	f7fd fb3c 	bl	8005030 <HAL_SD_GetCardInfo>
}
 80079b8:	bf00      	nop
 80079ba:	3708      	adds	r7, #8
 80079bc:	46bd      	mov	sp, r7
 80079be:	bd80      	pop	{r7, pc}
 80079c0:	200044c8 	.word	0x200044c8

080079c4 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b082      	sub	sp, #8
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 80079cc:	f000 f818 	bl	8007a00 <BSP_SD_AbortCallback>
}
 80079d0:	bf00      	nop
 80079d2:	3708      	adds	r7, #8
 80079d4:	46bd      	mov	sp, r7
 80079d6:	bd80      	pop	{r7, pc}

080079d8 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b082      	sub	sp, #8
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80079e0:	f000 f9c4 	bl	8007d6c <BSP_SD_WriteCpltCallback>
}
 80079e4:	bf00      	nop
 80079e6:	3708      	adds	r7, #8
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bd80      	pop	{r7, pc}

080079ec <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b082      	sub	sp, #8
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80079f4:	f000 f9c8 	bl	8007d88 <BSP_SD_ReadCpltCallback>
}
 80079f8:	bf00      	nop
 80079fa:	3708      	adds	r7, #8
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd80      	pop	{r7, pc}

08007a00 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8007a00:	b480      	push	{r7}
 8007a02:	af00      	add	r7, sp, #0

}
 8007a04:	bf00      	nop
 8007a06:	46bd      	mov	sp, r7
 8007a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0c:	4770      	bx	lr

08007a0e <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8007a0e:	b580      	push	{r7, lr}
 8007a10:	b082      	sub	sp, #8
 8007a12:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8007a14:	2301      	movs	r3, #1
 8007a16:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 8007a18:	f000 f80c 	bl	8007a34 <BSP_PlatformIsDetected>
 8007a1c:	4603      	mov	r3, r0
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d101      	bne.n	8007a26 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8007a22:	2300      	movs	r3, #0
 8007a24:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8007a26:	79fb      	ldrb	r3, [r7, #7]
 8007a28:	b2db      	uxtb	r3, r3
}
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	3708      	adds	r7, #8
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	bd80      	pop	{r7, pc}
	...

08007a34 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b082      	sub	sp, #8
 8007a38:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8007a3e:	2104      	movs	r1, #4
 8007a40:	4806      	ldr	r0, [pc, #24]	; (8007a5c <BSP_PlatformIsDetected+0x28>)
 8007a42:	f7fb fa6d 	bl	8002f20 <HAL_GPIO_ReadPin>
 8007a46:	4603      	mov	r3, r0
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d001      	beq.n	8007a50 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 8007a50:	79fb      	ldrb	r3, [r7, #7]
}  
 8007a52:	4618      	mov	r0, r3
 8007a54:	3708      	adds	r7, #8
 8007a56:	46bd      	mov	sp, r7
 8007a58:	bd80      	pop	{r7, pc}
 8007a5a:	bf00      	nop
 8007a5c:	40021800 	.word	0x40021800

08007a60 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b084      	sub	sp, #16
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripherial is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 8007a68:	f004 fd9a 	bl	800c5a0 <osKernelSysTick>
 8007a6c:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 8007a6e:	e006      	b.n	8007a7e <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8007a70:	f7ff ff8a 	bl	8007988 <BSP_SD_GetCardState>
 8007a74:	4603      	mov	r3, r0
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d101      	bne.n	8007a7e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	e009      	b.n	8007a92 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 8007a7e:	f004 fd8f 	bl	800c5a0 <osKernelSysTick>
 8007a82:	4602      	mov	r2, r0
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	1ad3      	subs	r3, r2, r3
 8007a88:	687a      	ldr	r2, [r7, #4]
 8007a8a:	429a      	cmp	r2, r3
 8007a8c:	d8f0      	bhi.n	8007a70 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8007a8e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007a92:	4618      	mov	r0, r3
 8007a94:	3710      	adds	r7, #16
 8007a96:	46bd      	mov	sp, r7
 8007a98:	bd80      	pop	{r7, pc}
	...

08007a9c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b082      	sub	sp, #8
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8007aa6:	4b0b      	ldr	r3, [pc, #44]	; (8007ad4 <SD_CheckStatus+0x38>)
 8007aa8:	2201      	movs	r2, #1
 8007aaa:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8007aac:	f7ff ff6c 	bl	8007988 <BSP_SD_GetCardState>
 8007ab0:	4603      	mov	r3, r0
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d107      	bne.n	8007ac6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8007ab6:	4b07      	ldr	r3, [pc, #28]	; (8007ad4 <SD_CheckStatus+0x38>)
 8007ab8:	781b      	ldrb	r3, [r3, #0]
 8007aba:	b2db      	uxtb	r3, r3
 8007abc:	f023 0301 	bic.w	r3, r3, #1
 8007ac0:	b2da      	uxtb	r2, r3
 8007ac2:	4b04      	ldr	r3, [pc, #16]	; (8007ad4 <SD_CheckStatus+0x38>)
 8007ac4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8007ac6:	4b03      	ldr	r3, [pc, #12]	; (8007ad4 <SD_CheckStatus+0x38>)
 8007ac8:	781b      	ldrb	r3, [r3, #0]
 8007aca:	b2db      	uxtb	r3, r3
}
 8007acc:	4618      	mov	r0, r3
 8007ace:	3708      	adds	r7, #8
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	bd80      	pop	{r7, pc}
 8007ad4:	20000019 	.word	0x20000019

08007ad8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8007ad8:	b590      	push	{r4, r7, lr}
 8007ada:	b087      	sub	sp, #28
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	4603      	mov	r3, r0
 8007ae0:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT; 
 8007ae2:	4b20      	ldr	r3, [pc, #128]	; (8007b64 <SD_initialize+0x8c>)
 8007ae4:	2201      	movs	r2, #1
 8007ae6:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 8007ae8:	f004 fd4e 	bl	800c588 <osKernelRunning>
 8007aec:	4603      	mov	r3, r0
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d030      	beq.n	8007b54 <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 8007af2:	f7ff feef 	bl	80078d4 <BSP_SD_Init>
 8007af6:	4603      	mov	r3, r0
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d107      	bne.n	8007b0c <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 8007afc:	79fb      	ldrb	r3, [r7, #7]
 8007afe:	4618      	mov	r0, r3
 8007b00:	f7ff ffcc 	bl	8007a9c <SD_CheckStatus>
 8007b04:	4603      	mov	r3, r0
 8007b06:	461a      	mov	r2, r3
 8007b08:	4b16      	ldr	r3, [pc, #88]	; (8007b64 <SD_initialize+0x8c>)
 8007b0a:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 8007b0c:	4b15      	ldr	r3, [pc, #84]	; (8007b64 <SD_initialize+0x8c>)
 8007b0e:	781b      	ldrb	r3, [r3, #0]
 8007b10:	b2db      	uxtb	r3, r3
 8007b12:	2b01      	cmp	r3, #1
 8007b14:	d01e      	beq.n	8007b54 <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 8007b16:	4b14      	ldr	r3, [pc, #80]	; (8007b68 <SD_initialize+0x90>)
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d10e      	bne.n	8007b3c <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 8007b1e:	4b13      	ldr	r3, [pc, #76]	; (8007b6c <SD_initialize+0x94>)
 8007b20:	f107 0408 	add.w	r4, r7, #8
 8007b24:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007b26:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 8007b2a:	f107 0308 	add.w	r3, r7, #8
 8007b2e:	2100      	movs	r1, #0
 8007b30:	4618      	mov	r0, r3
 8007b32:	f004 fe5c 	bl	800c7ee <osMessageCreate>
 8007b36:	4602      	mov	r2, r0
 8007b38:	4b0b      	ldr	r3, [pc, #44]	; (8007b68 <SD_initialize+0x90>)
 8007b3a:	601a      	str	r2, [r3, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 8007b3c:	4b0a      	ldr	r3, [pc, #40]	; (8007b68 <SD_initialize+0x90>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d107      	bne.n	8007b54 <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 8007b44:	4b07      	ldr	r3, [pc, #28]	; (8007b64 <SD_initialize+0x8c>)
 8007b46:	781b      	ldrb	r3, [r3, #0]
 8007b48:	b2db      	uxtb	r3, r3
 8007b4a:	f043 0301 	orr.w	r3, r3, #1
 8007b4e:	b2da      	uxtb	r2, r3
 8007b50:	4b04      	ldr	r3, [pc, #16]	; (8007b64 <SD_initialize+0x8c>)
 8007b52:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 8007b54:	4b03      	ldr	r3, [pc, #12]	; (8007b64 <SD_initialize+0x8c>)
 8007b56:	781b      	ldrb	r3, [r3, #0]
 8007b58:	b2db      	uxtb	r3, r3
}
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	371c      	adds	r7, #28
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bd90      	pop	{r4, r7, pc}
 8007b62:	bf00      	nop
 8007b64:	20000019 	.word	0x20000019
 8007b68:	20000294 	.word	0x20000294
 8007b6c:	0800f29c 	.word	0x0800f29c

08007b70 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b082      	sub	sp, #8
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	4603      	mov	r3, r0
 8007b78:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8007b7a:	79fb      	ldrb	r3, [r7, #7]
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	f7ff ff8d 	bl	8007a9c <SD_CheckStatus>
 8007b82:	4603      	mov	r3, r0
}
 8007b84:	4618      	mov	r0, r3
 8007b86:	3708      	adds	r7, #8
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bd80      	pop	{r7, pc}

08007b8c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
   
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b08a      	sub	sp, #40	; 0x28
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	60b9      	str	r1, [r7, #8]
 8007b94:	607a      	str	r2, [r7, #4]
 8007b96:	603b      	str	r3, [r7, #0]
 8007b98:	4603      	mov	r3, r0
 8007b9a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8007ba2:	f247 5030 	movw	r0, #30000	; 0x7530
 8007ba6:	f7ff ff5b 	bl	8007a60 <SD_CheckStatusWithTimeout>
 8007baa:	4603      	mov	r3, r0
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	da02      	bge.n	8007bb6 <SD_read+0x2a>
  {
    return res;
 8007bb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007bb4:	e032      	b.n	8007c1c <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 8007bb6:	683a      	ldr	r2, [r7, #0]
 8007bb8:	6879      	ldr	r1, [r7, #4]
 8007bba:	68b8      	ldr	r0, [r7, #8]
 8007bbc:	f7ff feb0 	bl	8007920 <BSP_SD_ReadBlocks_DMA>
 8007bc0:	4603      	mov	r3, r0
 8007bc2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (ret == MSD_OK) {
 8007bc6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d124      	bne.n	8007c18 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8007bce:	4b15      	ldr	r3, [pc, #84]	; (8007c24 <SD_read+0x98>)
 8007bd0:	6819      	ldr	r1, [r3, #0]
 8007bd2:	f107 0314 	add.w	r3, r7, #20
 8007bd6:	f247 5230 	movw	r2, #30000	; 0x7530
 8007bda:	4618      	mov	r0, r3
 8007bdc:	f004 fe70 	bl	800c8c0 <osMessageGet>

    if (event.status == osEventMessage)
 8007be0:	697b      	ldr	r3, [r7, #20]
 8007be2:	2b10      	cmp	r3, #16
 8007be4:	d118      	bne.n	8007c18 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 8007be6:	69bb      	ldr	r3, [r7, #24]
 8007be8:	2b01      	cmp	r3, #1
 8007bea:	d115      	bne.n	8007c18 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 8007bec:	f004 fcd8 	bl	800c5a0 <osKernelSysTick>
 8007bf0:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 8007bf2:	e008      	b.n	8007c06 <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8007bf4:	f7ff fec8 	bl	8007988 <BSP_SD_GetCardState>
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d103      	bne.n	8007c06 <SD_read+0x7a>
              {
                res = RES_OK;
 8007bfe:	2300      	movs	r3, #0
 8007c00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 8007c04:	e008      	b.n	8007c18 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 8007c06:	f004 fccb 	bl	800c5a0 <osKernelSysTick>
 8007c0a:	4602      	mov	r2, r0
 8007c0c:	6a3b      	ldr	r3, [r7, #32]
 8007c0e:	1ad3      	subs	r3, r2, r3
 8007c10:	f247 522f 	movw	r2, #29999	; 0x752f
 8007c14:	4293      	cmp	r3, r2
 8007c16:	d9ed      	bls.n	8007bf4 <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 8007c18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	3728      	adds	r7, #40	; 0x28
 8007c20:	46bd      	mov	sp, r7
 8007c22:	bd80      	pop	{r7, pc}
 8007c24:	20000294 	.word	0x20000294

08007c28 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
   
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b08a      	sub	sp, #40	; 0x28
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	60b9      	str	r1, [r7, #8]
 8007c30:	607a      	str	r2, [r7, #4]
 8007c32:	603b      	str	r3, [r7, #0]
 8007c34:	4603      	mov	r3, r0
 8007c36:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007c38:	2301      	movs	r3, #1
 8007c3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8007c3e:	f247 5030 	movw	r0, #30000	; 0x7530
 8007c42:	f7ff ff0d 	bl	8007a60 <SD_CheckStatusWithTimeout>
 8007c46:	4603      	mov	r3, r0
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	da02      	bge.n	8007c52 <SD_write+0x2a>
  {
    return res;
 8007c4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c50:	e02e      	b.n	8007cb0 <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8007c52:	683a      	ldr	r2, [r7, #0]
 8007c54:	6879      	ldr	r1, [r7, #4]
 8007c56:	68b8      	ldr	r0, [r7, #8]
 8007c58:	f7ff fe7c 	bl	8007954 <BSP_SD_WriteBlocks_DMA>
 8007c5c:	4603      	mov	r3, r0
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d124      	bne.n	8007cac <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8007c62:	4b15      	ldr	r3, [pc, #84]	; (8007cb8 <SD_write+0x90>)
 8007c64:	6819      	ldr	r1, [r3, #0]
 8007c66:	f107 0314 	add.w	r3, r7, #20
 8007c6a:	f247 5230 	movw	r2, #30000	; 0x7530
 8007c6e:	4618      	mov	r0, r3
 8007c70:	f004 fe26 	bl	800c8c0 <osMessageGet>

    if (event.status == osEventMessage)
 8007c74:	697b      	ldr	r3, [r7, #20]
 8007c76:	2b10      	cmp	r3, #16
 8007c78:	d118      	bne.n	8007cac <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 8007c7a:	69bb      	ldr	r3, [r7, #24]
 8007c7c:	2b02      	cmp	r3, #2
 8007c7e:	d115      	bne.n	8007cac <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 8007c80:	f004 fc8e 	bl	800c5a0 <osKernelSysTick>
 8007c84:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 8007c86:	e008      	b.n	8007c9a <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8007c88:	f7ff fe7e 	bl	8007988 <BSP_SD_GetCardState>
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d103      	bne.n	8007c9a <SD_write+0x72>
          {
            res = RES_OK;
 8007c92:	2300      	movs	r3, #0
 8007c94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8007c98:	e008      	b.n	8007cac <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 8007c9a:	f004 fc81 	bl	800c5a0 <osKernelSysTick>
 8007c9e:	4602      	mov	r2, r0
 8007ca0:	6a3b      	ldr	r3, [r7, #32]
 8007ca2:	1ad3      	subs	r3, r2, r3
 8007ca4:	f247 522f 	movw	r2, #29999	; 0x752f
 8007ca8:	4293      	cmp	r3, r2
 8007caa:	d9ed      	bls.n	8007c88 <SD_write+0x60>
    }

  }
#endif

  return res;
 8007cac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	3728      	adds	r7, #40	; 0x28
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	bd80      	pop	{r7, pc}
 8007cb8:	20000294 	.word	0x20000294

08007cbc <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b08c      	sub	sp, #48	; 0x30
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	603a      	str	r2, [r7, #0]
 8007cc6:	71fb      	strb	r3, [r7, #7]
 8007cc8:	460b      	mov	r3, r1
 8007cca:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8007ccc:	2301      	movs	r3, #1
 8007cce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8007cd2:	4b25      	ldr	r3, [pc, #148]	; (8007d68 <SD_ioctl+0xac>)
 8007cd4:	781b      	ldrb	r3, [r3, #0]
 8007cd6:	b2db      	uxtb	r3, r3
 8007cd8:	f003 0301 	and.w	r3, r3, #1
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d001      	beq.n	8007ce4 <SD_ioctl+0x28>
 8007ce0:	2303      	movs	r3, #3
 8007ce2:	e03c      	b.n	8007d5e <SD_ioctl+0xa2>

  switch (cmd)
 8007ce4:	79bb      	ldrb	r3, [r7, #6]
 8007ce6:	2b03      	cmp	r3, #3
 8007ce8:	d834      	bhi.n	8007d54 <SD_ioctl+0x98>
 8007cea:	a201      	add	r2, pc, #4	; (adr r2, 8007cf0 <SD_ioctl+0x34>)
 8007cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cf0:	08007d01 	.word	0x08007d01
 8007cf4:	08007d09 	.word	0x08007d09
 8007cf8:	08007d21 	.word	0x08007d21
 8007cfc:	08007d3b 	.word	0x08007d3b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8007d00:	2300      	movs	r3, #0
 8007d02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007d06:	e028      	b.n	8007d5a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8007d08:	f107 030c 	add.w	r3, r7, #12
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	f7ff fe4b 	bl	80079a8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8007d12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8007d18:	2300      	movs	r3, #0
 8007d1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007d1e:	e01c      	b.n	8007d5a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8007d20:	f107 030c 	add.w	r3, r7, #12
 8007d24:	4618      	mov	r0, r3
 8007d26:	f7ff fe3f 	bl	80079a8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8007d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d2c:	b29a      	uxth	r2, r3
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8007d32:	2300      	movs	r3, #0
 8007d34:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007d38:	e00f      	b.n	8007d5a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8007d3a:	f107 030c 	add.w	r3, r7, #12
 8007d3e:	4618      	mov	r0, r3
 8007d40:	f7ff fe32 	bl	80079a8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8007d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d46:	0a5a      	lsrs	r2, r3, #9
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007d52:	e002      	b.n	8007d5a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8007d54:	2304      	movs	r3, #4
 8007d56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8007d5a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007d5e:	4618      	mov	r0, r3
 8007d60:	3730      	adds	r7, #48	; 0x30
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bd80      	pop	{r7, pc}
 8007d66:	bf00      	nop
 8007d68:	20000019 	.word	0x20000019

08007d6c <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
 8007d70:	4b04      	ldr	r3, [pc, #16]	; (8007d84 <BSP_SD_WriteCpltCallback+0x18>)
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	2200      	movs	r2, #0
 8007d76:	2102      	movs	r1, #2
 8007d78:	4618      	mov	r0, r3
 8007d7a:	f004 fd61 	bl	800c840 <osMessagePut>
#else
   const uint16_t msg = WRITE_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 8007d7e:	bf00      	nop
 8007d80:	bd80      	pop	{r7, pc}
 8007d82:	bf00      	nop
 8007d84:	20000294 	.word	0x20000294

08007d88 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 8007d8c:	4b04      	ldr	r3, [pc, #16]	; (8007da0 <BSP_SD_ReadCpltCallback+0x18>)
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	2200      	movs	r2, #0
 8007d92:	2101      	movs	r1, #1
 8007d94:	4618      	mov	r0, r3
 8007d96:	f004 fd53 	bl	800c840 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 8007d9a:	bf00      	nop
 8007d9c:	bd80      	pop	{r7, pc}
 8007d9e:	bf00      	nop
 8007da0:	20000294 	.word	0x20000294

08007da4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b084      	sub	sp, #16
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	4603      	mov	r3, r0
 8007dac:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8007dae:	79fb      	ldrb	r3, [r7, #7]
 8007db0:	4a08      	ldr	r2, [pc, #32]	; (8007dd4 <disk_status+0x30>)
 8007db2:	009b      	lsls	r3, r3, #2
 8007db4:	4413      	add	r3, r2
 8007db6:	685b      	ldr	r3, [r3, #4]
 8007db8:	685b      	ldr	r3, [r3, #4]
 8007dba:	79fa      	ldrb	r2, [r7, #7]
 8007dbc:	4905      	ldr	r1, [pc, #20]	; (8007dd4 <disk_status+0x30>)
 8007dbe:	440a      	add	r2, r1
 8007dc0:	7a12      	ldrb	r2, [r2, #8]
 8007dc2:	4610      	mov	r0, r2
 8007dc4:	4798      	blx	r3
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	73fb      	strb	r3, [r7, #15]
  return stat;
 8007dca:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dcc:	4618      	mov	r0, r3
 8007dce:	3710      	adds	r7, #16
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	bd80      	pop	{r7, pc}
 8007dd4:	200002c0 	.word	0x200002c0

08007dd8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b084      	sub	sp, #16
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	4603      	mov	r3, r0
 8007de0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8007de2:	2300      	movs	r3, #0
 8007de4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8007de6:	79fb      	ldrb	r3, [r7, #7]
 8007de8:	4a0d      	ldr	r2, [pc, #52]	; (8007e20 <disk_initialize+0x48>)
 8007dea:	5cd3      	ldrb	r3, [r2, r3]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d111      	bne.n	8007e14 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8007df0:	79fb      	ldrb	r3, [r7, #7]
 8007df2:	4a0b      	ldr	r2, [pc, #44]	; (8007e20 <disk_initialize+0x48>)
 8007df4:	2101      	movs	r1, #1
 8007df6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8007df8:	79fb      	ldrb	r3, [r7, #7]
 8007dfa:	4a09      	ldr	r2, [pc, #36]	; (8007e20 <disk_initialize+0x48>)
 8007dfc:	009b      	lsls	r3, r3, #2
 8007dfe:	4413      	add	r3, r2
 8007e00:	685b      	ldr	r3, [r3, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	79fa      	ldrb	r2, [r7, #7]
 8007e06:	4906      	ldr	r1, [pc, #24]	; (8007e20 <disk_initialize+0x48>)
 8007e08:	440a      	add	r2, r1
 8007e0a:	7a12      	ldrb	r2, [r2, #8]
 8007e0c:	4610      	mov	r0, r2
 8007e0e:	4798      	blx	r3
 8007e10:	4603      	mov	r3, r0
 8007e12:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8007e14:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e16:	4618      	mov	r0, r3
 8007e18:	3710      	adds	r7, #16
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}
 8007e1e:	bf00      	nop
 8007e20:	200002c0 	.word	0x200002c0

08007e24 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007e24:	b590      	push	{r4, r7, lr}
 8007e26:	b087      	sub	sp, #28
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	60b9      	str	r1, [r7, #8]
 8007e2c:	607a      	str	r2, [r7, #4]
 8007e2e:	603b      	str	r3, [r7, #0]
 8007e30:	4603      	mov	r3, r0
 8007e32:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8007e34:	7bfb      	ldrb	r3, [r7, #15]
 8007e36:	4a0a      	ldr	r2, [pc, #40]	; (8007e60 <disk_read+0x3c>)
 8007e38:	009b      	lsls	r3, r3, #2
 8007e3a:	4413      	add	r3, r2
 8007e3c:	685b      	ldr	r3, [r3, #4]
 8007e3e:	689c      	ldr	r4, [r3, #8]
 8007e40:	7bfb      	ldrb	r3, [r7, #15]
 8007e42:	4a07      	ldr	r2, [pc, #28]	; (8007e60 <disk_read+0x3c>)
 8007e44:	4413      	add	r3, r2
 8007e46:	7a18      	ldrb	r0, [r3, #8]
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	687a      	ldr	r2, [r7, #4]
 8007e4c:	68b9      	ldr	r1, [r7, #8]
 8007e4e:	47a0      	blx	r4
 8007e50:	4603      	mov	r3, r0
 8007e52:	75fb      	strb	r3, [r7, #23]
  return res;
 8007e54:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e56:	4618      	mov	r0, r3
 8007e58:	371c      	adds	r7, #28
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	bd90      	pop	{r4, r7, pc}
 8007e5e:	bf00      	nop
 8007e60:	200002c0 	.word	0x200002c0

08007e64 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8007e64:	b590      	push	{r4, r7, lr}
 8007e66:	b087      	sub	sp, #28
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	60b9      	str	r1, [r7, #8]
 8007e6c:	607a      	str	r2, [r7, #4]
 8007e6e:	603b      	str	r3, [r7, #0]
 8007e70:	4603      	mov	r3, r0
 8007e72:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8007e74:	7bfb      	ldrb	r3, [r7, #15]
 8007e76:	4a0a      	ldr	r2, [pc, #40]	; (8007ea0 <disk_write+0x3c>)
 8007e78:	009b      	lsls	r3, r3, #2
 8007e7a:	4413      	add	r3, r2
 8007e7c:	685b      	ldr	r3, [r3, #4]
 8007e7e:	68dc      	ldr	r4, [r3, #12]
 8007e80:	7bfb      	ldrb	r3, [r7, #15]
 8007e82:	4a07      	ldr	r2, [pc, #28]	; (8007ea0 <disk_write+0x3c>)
 8007e84:	4413      	add	r3, r2
 8007e86:	7a18      	ldrb	r0, [r3, #8]
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	687a      	ldr	r2, [r7, #4]
 8007e8c:	68b9      	ldr	r1, [r7, #8]
 8007e8e:	47a0      	blx	r4
 8007e90:	4603      	mov	r3, r0
 8007e92:	75fb      	strb	r3, [r7, #23]
  return res;
 8007e94:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e96:	4618      	mov	r0, r3
 8007e98:	371c      	adds	r7, #28
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bd90      	pop	{r4, r7, pc}
 8007e9e:	bf00      	nop
 8007ea0:	200002c0 	.word	0x200002c0

08007ea4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b084      	sub	sp, #16
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	4603      	mov	r3, r0
 8007eac:	603a      	str	r2, [r7, #0]
 8007eae:	71fb      	strb	r3, [r7, #7]
 8007eb0:	460b      	mov	r3, r1
 8007eb2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8007eb4:	79fb      	ldrb	r3, [r7, #7]
 8007eb6:	4a09      	ldr	r2, [pc, #36]	; (8007edc <disk_ioctl+0x38>)
 8007eb8:	009b      	lsls	r3, r3, #2
 8007eba:	4413      	add	r3, r2
 8007ebc:	685b      	ldr	r3, [r3, #4]
 8007ebe:	691b      	ldr	r3, [r3, #16]
 8007ec0:	79fa      	ldrb	r2, [r7, #7]
 8007ec2:	4906      	ldr	r1, [pc, #24]	; (8007edc <disk_ioctl+0x38>)
 8007ec4:	440a      	add	r2, r1
 8007ec6:	7a10      	ldrb	r0, [r2, #8]
 8007ec8:	79b9      	ldrb	r1, [r7, #6]
 8007eca:	683a      	ldr	r2, [r7, #0]
 8007ecc:	4798      	blx	r3
 8007ece:	4603      	mov	r3, r0
 8007ed0:	73fb      	strb	r3, [r7, #15]
  return res;
 8007ed2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	3710      	adds	r7, #16
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bd80      	pop	{r7, pc}
 8007edc:	200002c0 	.word	0x200002c0

08007ee0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8007ee0:	b480      	push	{r7}
 8007ee2:	b085      	sub	sp, #20
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	3301      	adds	r3, #1
 8007eec:	781b      	ldrb	r3, [r3, #0]
 8007eee:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8007ef0:	89fb      	ldrh	r3, [r7, #14]
 8007ef2:	021b      	lsls	r3, r3, #8
 8007ef4:	b21a      	sxth	r2, r3
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	781b      	ldrb	r3, [r3, #0]
 8007efa:	b21b      	sxth	r3, r3
 8007efc:	4313      	orrs	r3, r2
 8007efe:	b21b      	sxth	r3, r3
 8007f00:	81fb      	strh	r3, [r7, #14]
	return rv;
 8007f02:	89fb      	ldrh	r3, [r7, #14]
}
 8007f04:	4618      	mov	r0, r3
 8007f06:	3714      	adds	r7, #20
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0e:	4770      	bx	lr

08007f10 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8007f10:	b480      	push	{r7}
 8007f12:	b085      	sub	sp, #20
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	3303      	adds	r3, #3
 8007f1c:	781b      	ldrb	r3, [r3, #0]
 8007f1e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	021b      	lsls	r3, r3, #8
 8007f24:	687a      	ldr	r2, [r7, #4]
 8007f26:	3202      	adds	r2, #2
 8007f28:	7812      	ldrb	r2, [r2, #0]
 8007f2a:	4313      	orrs	r3, r2
 8007f2c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	021b      	lsls	r3, r3, #8
 8007f32:	687a      	ldr	r2, [r7, #4]
 8007f34:	3201      	adds	r2, #1
 8007f36:	7812      	ldrb	r2, [r2, #0]
 8007f38:	4313      	orrs	r3, r2
 8007f3a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	021b      	lsls	r3, r3, #8
 8007f40:	687a      	ldr	r2, [r7, #4]
 8007f42:	7812      	ldrb	r2, [r2, #0]
 8007f44:	4313      	orrs	r3, r2
 8007f46:	60fb      	str	r3, [r7, #12]
	return rv;
 8007f48:	68fb      	ldr	r3, [r7, #12]
}
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	3714      	adds	r7, #20
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f54:	4770      	bx	lr

08007f56 <ld_qword>:

#if _FS_EXFAT
static
QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 8007f56:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 8007f5a:	b085      	sub	sp, #20
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
	QWORD rv;

	rv = ptr[7];
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	3307      	adds	r3, #7
 8007f64:	781b      	ldrb	r3, [r3, #0]
 8007f66:	b2db      	uxtb	r3, r3
 8007f68:	f04f 0400 	mov.w	r4, #0
 8007f6c:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[6];
 8007f70:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007f74:	f04f 0b00 	mov.w	fp, #0
 8007f78:	f04f 0c00 	mov.w	ip, #0
 8007f7c:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 8007f80:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 8007f84:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 8007f88:	687a      	ldr	r2, [r7, #4]
 8007f8a:	3206      	adds	r2, #6
 8007f8c:	7812      	ldrb	r2, [r2, #0]
 8007f8e:	b2d1      	uxtb	r1, r2
 8007f90:	f04f 0200 	mov.w	r2, #0
 8007f94:	ea4b 0301 	orr.w	r3, fp, r1
 8007f98:	ea4c 0402 	orr.w	r4, ip, r2
 8007f9c:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[5];
 8007fa0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007fa4:	f04f 0b00 	mov.w	fp, #0
 8007fa8:	f04f 0c00 	mov.w	ip, #0
 8007fac:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 8007fb0:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 8007fb4:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 8007fb8:	687a      	ldr	r2, [r7, #4]
 8007fba:	3205      	adds	r2, #5
 8007fbc:	7812      	ldrb	r2, [r2, #0]
 8007fbe:	b2d1      	uxtb	r1, r2
 8007fc0:	f04f 0200 	mov.w	r2, #0
 8007fc4:	ea4b 0301 	orr.w	r3, fp, r1
 8007fc8:	ea4c 0402 	orr.w	r4, ip, r2
 8007fcc:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[4];
 8007fd0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007fd4:	f04f 0b00 	mov.w	fp, #0
 8007fd8:	f04f 0c00 	mov.w	ip, #0
 8007fdc:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 8007fe0:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 8007fe4:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 8007fe8:	687a      	ldr	r2, [r7, #4]
 8007fea:	3204      	adds	r2, #4
 8007fec:	7812      	ldrb	r2, [r2, #0]
 8007fee:	b2d1      	uxtb	r1, r2
 8007ff0:	f04f 0200 	mov.w	r2, #0
 8007ff4:	ea4b 0301 	orr.w	r3, fp, r1
 8007ff8:	ea4c 0402 	orr.w	r4, ip, r2
 8007ffc:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[3];
 8008000:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008004:	f04f 0b00 	mov.w	fp, #0
 8008008:	f04f 0c00 	mov.w	ip, #0
 800800c:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 8008010:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 8008014:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 8008018:	687a      	ldr	r2, [r7, #4]
 800801a:	3203      	adds	r2, #3
 800801c:	7812      	ldrb	r2, [r2, #0]
 800801e:	b2d1      	uxtb	r1, r2
 8008020:	f04f 0200 	mov.w	r2, #0
 8008024:	ea4b 0301 	orr.w	r3, fp, r1
 8008028:	ea4c 0402 	orr.w	r4, ip, r2
 800802c:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[2];
 8008030:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008034:	f04f 0b00 	mov.w	fp, #0
 8008038:	f04f 0c00 	mov.w	ip, #0
 800803c:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 8008040:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 8008044:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 8008048:	687a      	ldr	r2, [r7, #4]
 800804a:	3202      	adds	r2, #2
 800804c:	7812      	ldrb	r2, [r2, #0]
 800804e:	b2d1      	uxtb	r1, r2
 8008050:	f04f 0200 	mov.w	r2, #0
 8008054:	ea4b 0301 	orr.w	r3, fp, r1
 8008058:	ea4c 0402 	orr.w	r4, ip, r2
 800805c:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[1];
 8008060:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008064:	f04f 0b00 	mov.w	fp, #0
 8008068:	f04f 0c00 	mov.w	ip, #0
 800806c:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 8008070:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 8008074:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 8008078:	687a      	ldr	r2, [r7, #4]
 800807a:	3201      	adds	r2, #1
 800807c:	7812      	ldrb	r2, [r2, #0]
 800807e:	b2d1      	uxtb	r1, r2
 8008080:	f04f 0200 	mov.w	r2, #0
 8008084:	ea4b 0301 	orr.w	r3, fp, r1
 8008088:	ea4c 0402 	orr.w	r4, ip, r2
 800808c:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[0];
 8008090:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008094:	f04f 0b00 	mov.w	fp, #0
 8008098:	f04f 0c00 	mov.w	ip, #0
 800809c:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 80080a0:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 80080a4:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 80080a8:	687a      	ldr	r2, [r7, #4]
 80080aa:	7812      	ldrb	r2, [r2, #0]
 80080ac:	b2d1      	uxtb	r1, r2
 80080ae:	f04f 0200 	mov.w	r2, #0
 80080b2:	ea4b 0301 	orr.w	r3, fp, r1
 80080b6:	ea4c 0402 	orr.w	r4, ip, r2
 80080ba:	e9c7 3402 	strd	r3, r4, [r7, #8]
	return rv;
 80080be:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
}
 80080c2:	4618      	mov	r0, r3
 80080c4:	4621      	mov	r1, r4
 80080c6:	3714      	adds	r7, #20
 80080c8:	46bd      	mov	sp, r7
 80080ca:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 80080ce:	4770      	bx	lr

080080d0 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80080d0:	b480      	push	{r7}
 80080d2:	b083      	sub	sp, #12
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
 80080d8:	460b      	mov	r3, r1
 80080da:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	1c5a      	adds	r2, r3, #1
 80080e0:	607a      	str	r2, [r7, #4]
 80080e2:	887a      	ldrh	r2, [r7, #2]
 80080e4:	b2d2      	uxtb	r2, r2
 80080e6:	701a      	strb	r2, [r3, #0]
 80080e8:	887b      	ldrh	r3, [r7, #2]
 80080ea:	0a1b      	lsrs	r3, r3, #8
 80080ec:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	1c5a      	adds	r2, r3, #1
 80080f2:	607a      	str	r2, [r7, #4]
 80080f4:	887a      	ldrh	r2, [r7, #2]
 80080f6:	b2d2      	uxtb	r2, r2
 80080f8:	701a      	strb	r2, [r3, #0]
}
 80080fa:	bf00      	nop
 80080fc:	370c      	adds	r7, #12
 80080fe:	46bd      	mov	sp, r7
 8008100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008104:	4770      	bx	lr

08008106 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8008106:	b480      	push	{r7}
 8008108:	b083      	sub	sp, #12
 800810a:	af00      	add	r7, sp, #0
 800810c:	6078      	str	r0, [r7, #4]
 800810e:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	1c5a      	adds	r2, r3, #1
 8008114:	607a      	str	r2, [r7, #4]
 8008116:	683a      	ldr	r2, [r7, #0]
 8008118:	b2d2      	uxtb	r2, r2
 800811a:	701a      	strb	r2, [r3, #0]
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	0a1b      	lsrs	r3, r3, #8
 8008120:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	1c5a      	adds	r2, r3, #1
 8008126:	607a      	str	r2, [r7, #4]
 8008128:	683a      	ldr	r2, [r7, #0]
 800812a:	b2d2      	uxtb	r2, r2
 800812c:	701a      	strb	r2, [r3, #0]
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	0a1b      	lsrs	r3, r3, #8
 8008132:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	1c5a      	adds	r2, r3, #1
 8008138:	607a      	str	r2, [r7, #4]
 800813a:	683a      	ldr	r2, [r7, #0]
 800813c:	b2d2      	uxtb	r2, r2
 800813e:	701a      	strb	r2, [r3, #0]
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	0a1b      	lsrs	r3, r3, #8
 8008144:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	1c5a      	adds	r2, r3, #1
 800814a:	607a      	str	r2, [r7, #4]
 800814c:	683a      	ldr	r2, [r7, #0]
 800814e:	b2d2      	uxtb	r2, r2
 8008150:	701a      	strb	r2, [r3, #0]
}
 8008152:	bf00      	nop
 8008154:	370c      	adds	r7, #12
 8008156:	46bd      	mov	sp, r7
 8008158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815c:	4770      	bx	lr

0800815e <st_qword>:

#if _FS_EXFAT
static
void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
 800815e:	b490      	push	{r4, r7}
 8008160:	b084      	sub	sp, #16
 8008162:	af00      	add	r7, sp, #0
 8008164:	60f8      	str	r0, [r7, #12]
 8008166:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	1c5a      	adds	r2, r3, #1
 800816e:	60fa      	str	r2, [r7, #12]
 8008170:	783a      	ldrb	r2, [r7, #0]
 8008172:	701a      	strb	r2, [r3, #0]
 8008174:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008178:	f04f 0300 	mov.w	r3, #0
 800817c:	f04f 0400 	mov.w	r4, #0
 8008180:	0a0b      	lsrs	r3, r1, #8
 8008182:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8008186:	0a14      	lsrs	r4, r2, #8
 8008188:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	1c5a      	adds	r2, r3, #1
 8008190:	60fa      	str	r2, [r7, #12]
 8008192:	783a      	ldrb	r2, [r7, #0]
 8008194:	701a      	strb	r2, [r3, #0]
 8008196:	e9d7 1200 	ldrd	r1, r2, [r7]
 800819a:	f04f 0300 	mov.w	r3, #0
 800819e:	f04f 0400 	mov.w	r4, #0
 80081a2:	0a0b      	lsrs	r3, r1, #8
 80081a4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80081a8:	0a14      	lsrs	r4, r2, #8
 80081aa:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	1c5a      	adds	r2, r3, #1
 80081b2:	60fa      	str	r2, [r7, #12]
 80081b4:	783a      	ldrb	r2, [r7, #0]
 80081b6:	701a      	strb	r2, [r3, #0]
 80081b8:	e9d7 1200 	ldrd	r1, r2, [r7]
 80081bc:	f04f 0300 	mov.w	r3, #0
 80081c0:	f04f 0400 	mov.w	r4, #0
 80081c4:	0a0b      	lsrs	r3, r1, #8
 80081c6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80081ca:	0a14      	lsrs	r4, r2, #8
 80081cc:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	1c5a      	adds	r2, r3, #1
 80081d4:	60fa      	str	r2, [r7, #12]
 80081d6:	783a      	ldrb	r2, [r7, #0]
 80081d8:	701a      	strb	r2, [r3, #0]
 80081da:	e9d7 1200 	ldrd	r1, r2, [r7]
 80081de:	f04f 0300 	mov.w	r3, #0
 80081e2:	f04f 0400 	mov.w	r4, #0
 80081e6:	0a0b      	lsrs	r3, r1, #8
 80081e8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80081ec:	0a14      	lsrs	r4, r2, #8
 80081ee:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	1c5a      	adds	r2, r3, #1
 80081f6:	60fa      	str	r2, [r7, #12]
 80081f8:	783a      	ldrb	r2, [r7, #0]
 80081fa:	701a      	strb	r2, [r3, #0]
 80081fc:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008200:	f04f 0300 	mov.w	r3, #0
 8008204:	f04f 0400 	mov.w	r4, #0
 8008208:	0a0b      	lsrs	r3, r1, #8
 800820a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800820e:	0a14      	lsrs	r4, r2, #8
 8008210:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	1c5a      	adds	r2, r3, #1
 8008218:	60fa      	str	r2, [r7, #12]
 800821a:	783a      	ldrb	r2, [r7, #0]
 800821c:	701a      	strb	r2, [r3, #0]
 800821e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008222:	f04f 0300 	mov.w	r3, #0
 8008226:	f04f 0400 	mov.w	r4, #0
 800822a:	0a0b      	lsrs	r3, r1, #8
 800822c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8008230:	0a14      	lsrs	r4, r2, #8
 8008232:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	1c5a      	adds	r2, r3, #1
 800823a:	60fa      	str	r2, [r7, #12]
 800823c:	783a      	ldrb	r2, [r7, #0]
 800823e:	701a      	strb	r2, [r3, #0]
 8008240:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008244:	f04f 0300 	mov.w	r3, #0
 8008248:	f04f 0400 	mov.w	r4, #0
 800824c:	0a0b      	lsrs	r3, r1, #8
 800824e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8008252:	0a14      	lsrs	r4, r2, #8
 8008254:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	1c5a      	adds	r2, r3, #1
 800825c:	60fa      	str	r2, [r7, #12]
 800825e:	783a      	ldrb	r2, [r7, #0]
 8008260:	701a      	strb	r2, [r3, #0]
}
 8008262:	bf00      	nop
 8008264:	3710      	adds	r7, #16
 8008266:	46bd      	mov	sp, r7
 8008268:	bc90      	pop	{r4, r7}
 800826a:	4770      	bx	lr

0800826c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800826c:	b480      	push	{r7}
 800826e:	b087      	sub	sp, #28
 8008270:	af00      	add	r7, sp, #0
 8008272:	60f8      	str	r0, [r7, #12]
 8008274:	60b9      	str	r1, [r7, #8]
 8008276:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800827c:	68bb      	ldr	r3, [r7, #8]
 800827e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d00d      	beq.n	80082a2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8008286:	693a      	ldr	r2, [r7, #16]
 8008288:	1c53      	adds	r3, r2, #1
 800828a:	613b      	str	r3, [r7, #16]
 800828c:	697b      	ldr	r3, [r7, #20]
 800828e:	1c59      	adds	r1, r3, #1
 8008290:	6179      	str	r1, [r7, #20]
 8008292:	7812      	ldrb	r2, [r2, #0]
 8008294:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	3b01      	subs	r3, #1
 800829a:	607b      	str	r3, [r7, #4]
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d1f1      	bne.n	8008286 <mem_cpy+0x1a>
	}
}
 80082a2:	bf00      	nop
 80082a4:	371c      	adds	r7, #28
 80082a6:	46bd      	mov	sp, r7
 80082a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ac:	4770      	bx	lr

080082ae <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80082ae:	b480      	push	{r7}
 80082b0:	b087      	sub	sp, #28
 80082b2:	af00      	add	r7, sp, #0
 80082b4:	60f8      	str	r0, [r7, #12]
 80082b6:	60b9      	str	r1, [r7, #8]
 80082b8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80082be:	697b      	ldr	r3, [r7, #20]
 80082c0:	1c5a      	adds	r2, r3, #1
 80082c2:	617a      	str	r2, [r7, #20]
 80082c4:	68ba      	ldr	r2, [r7, #8]
 80082c6:	b2d2      	uxtb	r2, r2
 80082c8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	3b01      	subs	r3, #1
 80082ce:	607b      	str	r3, [r7, #4]
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d1f3      	bne.n	80082be <mem_set+0x10>
}
 80082d6:	bf00      	nop
 80082d8:	371c      	adds	r7, #28
 80082da:	46bd      	mov	sp, r7
 80082dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e0:	4770      	bx	lr

080082e2 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80082e2:	b480      	push	{r7}
 80082e4:	b089      	sub	sp, #36	; 0x24
 80082e6:	af00      	add	r7, sp, #0
 80082e8:	60f8      	str	r0, [r7, #12]
 80082ea:	60b9      	str	r1, [r7, #8]
 80082ec:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	61fb      	str	r3, [r7, #28]
 80082f2:	68bb      	ldr	r3, [r7, #8]
 80082f4:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80082f6:	2300      	movs	r3, #0
 80082f8:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80082fa:	69fb      	ldr	r3, [r7, #28]
 80082fc:	1c5a      	adds	r2, r3, #1
 80082fe:	61fa      	str	r2, [r7, #28]
 8008300:	781b      	ldrb	r3, [r3, #0]
 8008302:	4619      	mov	r1, r3
 8008304:	69bb      	ldr	r3, [r7, #24]
 8008306:	1c5a      	adds	r2, r3, #1
 8008308:	61ba      	str	r2, [r7, #24]
 800830a:	781b      	ldrb	r3, [r3, #0]
 800830c:	1acb      	subs	r3, r1, r3
 800830e:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	3b01      	subs	r3, #1
 8008314:	607b      	str	r3, [r7, #4]
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d002      	beq.n	8008322 <mem_cmp+0x40>
 800831c:	697b      	ldr	r3, [r7, #20]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d0eb      	beq.n	80082fa <mem_cmp+0x18>

	return r;
 8008322:	697b      	ldr	r3, [r7, #20]
}
 8008324:	4618      	mov	r0, r3
 8008326:	3724      	adds	r7, #36	; 0x24
 8008328:	46bd      	mov	sp, r7
 800832a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832e:	4770      	bx	lr

08008330 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8008330:	b480      	push	{r7}
 8008332:	b083      	sub	sp, #12
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
 8008338:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800833a:	e002      	b.n	8008342 <chk_chr+0x12>
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	3301      	adds	r3, #1
 8008340:	607b      	str	r3, [r7, #4]
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	781b      	ldrb	r3, [r3, #0]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d005      	beq.n	8008356 <chk_chr+0x26>
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	781b      	ldrb	r3, [r3, #0]
 800834e:	461a      	mov	r2, r3
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	4293      	cmp	r3, r2
 8008354:	d1f2      	bne.n	800833c <chk_chr+0xc>
	return *str;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	781b      	ldrb	r3, [r3, #0]
}
 800835a:	4618      	mov	r0, r3
 800835c:	370c      	adds	r7, #12
 800835e:	46bd      	mov	sp, r7
 8008360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008364:	4770      	bx	lr

08008366 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8008366:	b580      	push	{r7, lr}
 8008368:	b082      	sub	sp, #8
 800836a:	af00      	add	r7, sp, #0
 800836c:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d009      	beq.n	8008388 <lock_fs+0x22>
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	699b      	ldr	r3, [r3, #24]
 8008378:	4618      	mov	r0, r3
 800837a:	f004 f89d 	bl	800c4b8 <ff_req_grant>
 800837e:	4603      	mov	r3, r0
 8008380:	2b00      	cmp	r3, #0
 8008382:	d001      	beq.n	8008388 <lock_fs+0x22>
 8008384:	2301      	movs	r3, #1
 8008386:	e000      	b.n	800838a <lock_fs+0x24>
 8008388:	2300      	movs	r3, #0
}
 800838a:	4618      	mov	r0, r3
 800838c:	3708      	adds	r7, #8
 800838e:	46bd      	mov	sp, r7
 8008390:	bd80      	pop	{r7, pc}

08008392 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8008392:	b580      	push	{r7, lr}
 8008394:	b082      	sub	sp, #8
 8008396:	af00      	add	r7, sp, #0
 8008398:	6078      	str	r0, [r7, #4]
 800839a:	460b      	mov	r3, r1
 800839c:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d00d      	beq.n	80083c0 <unlock_fs+0x2e>
 80083a4:	78fb      	ldrb	r3, [r7, #3]
 80083a6:	2b0c      	cmp	r3, #12
 80083a8:	d00a      	beq.n	80083c0 <unlock_fs+0x2e>
 80083aa:	78fb      	ldrb	r3, [r7, #3]
 80083ac:	2b0b      	cmp	r3, #11
 80083ae:	d007      	beq.n	80083c0 <unlock_fs+0x2e>
 80083b0:	78fb      	ldrb	r3, [r7, #3]
 80083b2:	2b0f      	cmp	r3, #15
 80083b4:	d004      	beq.n	80083c0 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	699b      	ldr	r3, [r3, #24]
 80083ba:	4618      	mov	r0, r3
 80083bc:	f004 f891 	bl	800c4e2 <ff_rel_grant>
	}
}
 80083c0:	bf00      	nop
 80083c2:	3708      	adds	r7, #8
 80083c4:	46bd      	mov	sp, r7
 80083c6:	bd80      	pop	{r7, pc}

080083c8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80083c8:	b480      	push	{r7}
 80083ca:	b085      	sub	sp, #20
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
 80083d0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80083d2:	2300      	movs	r3, #0
 80083d4:	60bb      	str	r3, [r7, #8]
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	60fb      	str	r3, [r7, #12]
 80083da:	e029      	b.n	8008430 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80083dc:	4a27      	ldr	r2, [pc, #156]	; (800847c <chk_lock+0xb4>)
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	011b      	lsls	r3, r3, #4
 80083e2:	4413      	add	r3, r2
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d01d      	beq.n	8008426 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80083ea:	4a24      	ldr	r2, [pc, #144]	; (800847c <chk_lock+0xb4>)
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	011b      	lsls	r3, r3, #4
 80083f0:	4413      	add	r3, r2
 80083f2:	681a      	ldr	r2, [r3, #0]
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	429a      	cmp	r2, r3
 80083fa:	d116      	bne.n	800842a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80083fc:	4a1f      	ldr	r2, [pc, #124]	; (800847c <chk_lock+0xb4>)
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	011b      	lsls	r3, r3, #4
 8008402:	4413      	add	r3, r2
 8008404:	3304      	adds	r3, #4
 8008406:	681a      	ldr	r2, [r3, #0]
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800840c:	429a      	cmp	r2, r3
 800840e:	d10c      	bne.n	800842a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008410:	4a1a      	ldr	r2, [pc, #104]	; (800847c <chk_lock+0xb4>)
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	011b      	lsls	r3, r3, #4
 8008416:	4413      	add	r3, r2
 8008418:	3308      	adds	r3, #8
 800841a:	681a      	ldr	r2, [r3, #0]
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
				Files[i].clu == dp->obj.sclust &&
 8008420:	429a      	cmp	r2, r3
 8008422:	d102      	bne.n	800842a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008424:	e007      	b.n	8008436 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8008426:	2301      	movs	r3, #1
 8008428:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	3301      	adds	r3, #1
 800842e:	60fb      	str	r3, [r7, #12]
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	2b01      	cmp	r3, #1
 8008434:	d9d2      	bls.n	80083dc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	2b02      	cmp	r3, #2
 800843a:	d109      	bne.n	8008450 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800843c:	68bb      	ldr	r3, [r7, #8]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d102      	bne.n	8008448 <chk_lock+0x80>
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	2b02      	cmp	r3, #2
 8008446:	d101      	bne.n	800844c <chk_lock+0x84>
 8008448:	2300      	movs	r3, #0
 800844a:	e010      	b.n	800846e <chk_lock+0xa6>
 800844c:	2312      	movs	r3, #18
 800844e:	e00e      	b.n	800846e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d108      	bne.n	8008468 <chk_lock+0xa0>
 8008456:	4a09      	ldr	r2, [pc, #36]	; (800847c <chk_lock+0xb4>)
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	011b      	lsls	r3, r3, #4
 800845c:	4413      	add	r3, r2
 800845e:	330c      	adds	r3, #12
 8008460:	881b      	ldrh	r3, [r3, #0]
 8008462:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008466:	d101      	bne.n	800846c <chk_lock+0xa4>
 8008468:	2310      	movs	r3, #16
 800846a:	e000      	b.n	800846e <chk_lock+0xa6>
 800846c:	2300      	movs	r3, #0
}
 800846e:	4618      	mov	r0, r3
 8008470:	3714      	adds	r7, #20
 8008472:	46bd      	mov	sp, r7
 8008474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008478:	4770      	bx	lr
 800847a:	bf00      	nop
 800847c:	200002a0 	.word	0x200002a0

08008480 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8008480:	b480      	push	{r7}
 8008482:	b083      	sub	sp, #12
 8008484:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008486:	2300      	movs	r3, #0
 8008488:	607b      	str	r3, [r7, #4]
 800848a:	e002      	b.n	8008492 <enq_lock+0x12>
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	3301      	adds	r3, #1
 8008490:	607b      	str	r3, [r7, #4]
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2b01      	cmp	r3, #1
 8008496:	d806      	bhi.n	80084a6 <enq_lock+0x26>
 8008498:	4a09      	ldr	r2, [pc, #36]	; (80084c0 <enq_lock+0x40>)
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	011b      	lsls	r3, r3, #4
 800849e:	4413      	add	r3, r2
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d1f2      	bne.n	800848c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	2b02      	cmp	r3, #2
 80084aa:	bf14      	ite	ne
 80084ac:	2301      	movne	r3, #1
 80084ae:	2300      	moveq	r3, #0
 80084b0:	b2db      	uxtb	r3, r3
}
 80084b2:	4618      	mov	r0, r3
 80084b4:	370c      	adds	r7, #12
 80084b6:	46bd      	mov	sp, r7
 80084b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084bc:	4770      	bx	lr
 80084be:	bf00      	nop
 80084c0:	200002a0 	.word	0x200002a0

080084c4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80084c4:	b480      	push	{r7}
 80084c6:	b085      	sub	sp, #20
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
 80084cc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80084ce:	2300      	movs	r3, #0
 80084d0:	60fb      	str	r3, [r7, #12]
 80084d2:	e01f      	b.n	8008514 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80084d4:	4a41      	ldr	r2, [pc, #260]	; (80085dc <inc_lock+0x118>)
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	011b      	lsls	r3, r3, #4
 80084da:	4413      	add	r3, r2
 80084dc:	681a      	ldr	r2, [r3, #0]
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	429a      	cmp	r2, r3
 80084e4:	d113      	bne.n	800850e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80084e6:	4a3d      	ldr	r2, [pc, #244]	; (80085dc <inc_lock+0x118>)
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	011b      	lsls	r3, r3, #4
 80084ec:	4413      	add	r3, r2
 80084ee:	3304      	adds	r3, #4
 80084f0:	681a      	ldr	r2, [r3, #0]
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80084f6:	429a      	cmp	r2, r3
 80084f8:	d109      	bne.n	800850e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80084fa:	4a38      	ldr	r2, [pc, #224]	; (80085dc <inc_lock+0x118>)
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	011b      	lsls	r3, r3, #4
 8008500:	4413      	add	r3, r2
 8008502:	3308      	adds	r3, #8
 8008504:	681a      	ldr	r2, [r3, #0]
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			Files[i].clu == dp->obj.sclust &&
 800850a:	429a      	cmp	r2, r3
 800850c:	d006      	beq.n	800851c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	3301      	adds	r3, #1
 8008512:	60fb      	str	r3, [r7, #12]
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	2b01      	cmp	r3, #1
 8008518:	d9dc      	bls.n	80084d4 <inc_lock+0x10>
 800851a:	e000      	b.n	800851e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800851c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	2b02      	cmp	r3, #2
 8008522:	d132      	bne.n	800858a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008524:	2300      	movs	r3, #0
 8008526:	60fb      	str	r3, [r7, #12]
 8008528:	e002      	b.n	8008530 <inc_lock+0x6c>
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	3301      	adds	r3, #1
 800852e:	60fb      	str	r3, [r7, #12]
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	2b01      	cmp	r3, #1
 8008534:	d806      	bhi.n	8008544 <inc_lock+0x80>
 8008536:	4a29      	ldr	r2, [pc, #164]	; (80085dc <inc_lock+0x118>)
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	011b      	lsls	r3, r3, #4
 800853c:	4413      	add	r3, r2
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d1f2      	bne.n	800852a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	2b02      	cmp	r3, #2
 8008548:	d101      	bne.n	800854e <inc_lock+0x8a>
 800854a:	2300      	movs	r3, #0
 800854c:	e040      	b.n	80085d0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681a      	ldr	r2, [r3, #0]
 8008552:	4922      	ldr	r1, [pc, #136]	; (80085dc <inc_lock+0x118>)
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	011b      	lsls	r3, r3, #4
 8008558:	440b      	add	r3, r1
 800855a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	689a      	ldr	r2, [r3, #8]
 8008560:	491e      	ldr	r1, [pc, #120]	; (80085dc <inc_lock+0x118>)
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	011b      	lsls	r3, r3, #4
 8008566:	440b      	add	r3, r1
 8008568:	3304      	adds	r3, #4
 800856a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008570:	491a      	ldr	r1, [pc, #104]	; (80085dc <inc_lock+0x118>)
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	011b      	lsls	r3, r3, #4
 8008576:	440b      	add	r3, r1
 8008578:	3308      	adds	r3, #8
 800857a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800857c:	4a17      	ldr	r2, [pc, #92]	; (80085dc <inc_lock+0x118>)
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	011b      	lsls	r3, r3, #4
 8008582:	4413      	add	r3, r2
 8008584:	330c      	adds	r3, #12
 8008586:	2200      	movs	r2, #0
 8008588:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d009      	beq.n	80085a4 <inc_lock+0xe0>
 8008590:	4a12      	ldr	r2, [pc, #72]	; (80085dc <inc_lock+0x118>)
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	011b      	lsls	r3, r3, #4
 8008596:	4413      	add	r3, r2
 8008598:	330c      	adds	r3, #12
 800859a:	881b      	ldrh	r3, [r3, #0]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d001      	beq.n	80085a4 <inc_lock+0xe0>
 80085a0:	2300      	movs	r3, #0
 80085a2:	e015      	b.n	80085d0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d108      	bne.n	80085bc <inc_lock+0xf8>
 80085aa:	4a0c      	ldr	r2, [pc, #48]	; (80085dc <inc_lock+0x118>)
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	011b      	lsls	r3, r3, #4
 80085b0:	4413      	add	r3, r2
 80085b2:	330c      	adds	r3, #12
 80085b4:	881b      	ldrh	r3, [r3, #0]
 80085b6:	3301      	adds	r3, #1
 80085b8:	b29a      	uxth	r2, r3
 80085ba:	e001      	b.n	80085c0 <inc_lock+0xfc>
 80085bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80085c0:	4906      	ldr	r1, [pc, #24]	; (80085dc <inc_lock+0x118>)
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	011b      	lsls	r3, r3, #4
 80085c6:	440b      	add	r3, r1
 80085c8:	330c      	adds	r3, #12
 80085ca:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	3301      	adds	r3, #1
}
 80085d0:	4618      	mov	r0, r3
 80085d2:	3714      	adds	r7, #20
 80085d4:	46bd      	mov	sp, r7
 80085d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085da:	4770      	bx	lr
 80085dc:	200002a0 	.word	0x200002a0

080085e0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80085e0:	b480      	push	{r7}
 80085e2:	b085      	sub	sp, #20
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	3b01      	subs	r3, #1
 80085ec:	607b      	str	r3, [r7, #4]
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2b01      	cmp	r3, #1
 80085f2:	d825      	bhi.n	8008640 <dec_lock+0x60>
		n = Files[i].ctr;
 80085f4:	4a17      	ldr	r2, [pc, #92]	; (8008654 <dec_lock+0x74>)
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	011b      	lsls	r3, r3, #4
 80085fa:	4413      	add	r3, r2
 80085fc:	330c      	adds	r3, #12
 80085fe:	881b      	ldrh	r3, [r3, #0]
 8008600:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8008602:	89fb      	ldrh	r3, [r7, #14]
 8008604:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008608:	d101      	bne.n	800860e <dec_lock+0x2e>
 800860a:	2300      	movs	r3, #0
 800860c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800860e:	89fb      	ldrh	r3, [r7, #14]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d002      	beq.n	800861a <dec_lock+0x3a>
 8008614:	89fb      	ldrh	r3, [r7, #14]
 8008616:	3b01      	subs	r3, #1
 8008618:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800861a:	4a0e      	ldr	r2, [pc, #56]	; (8008654 <dec_lock+0x74>)
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	011b      	lsls	r3, r3, #4
 8008620:	4413      	add	r3, r2
 8008622:	330c      	adds	r3, #12
 8008624:	89fa      	ldrh	r2, [r7, #14]
 8008626:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008628:	89fb      	ldrh	r3, [r7, #14]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d105      	bne.n	800863a <dec_lock+0x5a>
 800862e:	4a09      	ldr	r2, [pc, #36]	; (8008654 <dec_lock+0x74>)
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	011b      	lsls	r3, r3, #4
 8008634:	4413      	add	r3, r2
 8008636:	2200      	movs	r2, #0
 8008638:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800863a:	2300      	movs	r3, #0
 800863c:	737b      	strb	r3, [r7, #13]
 800863e:	e001      	b.n	8008644 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8008640:	2302      	movs	r3, #2
 8008642:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8008644:	7b7b      	ldrb	r3, [r7, #13]
}
 8008646:	4618      	mov	r0, r3
 8008648:	3714      	adds	r7, #20
 800864a:	46bd      	mov	sp, r7
 800864c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008650:	4770      	bx	lr
 8008652:	bf00      	nop
 8008654:	200002a0 	.word	0x200002a0

08008658 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8008658:	b480      	push	{r7}
 800865a:	b085      	sub	sp, #20
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8008660:	2300      	movs	r3, #0
 8008662:	60fb      	str	r3, [r7, #12]
 8008664:	e010      	b.n	8008688 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8008666:	4a0d      	ldr	r2, [pc, #52]	; (800869c <clear_lock+0x44>)
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	011b      	lsls	r3, r3, #4
 800866c:	4413      	add	r3, r2
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	687a      	ldr	r2, [r7, #4]
 8008672:	429a      	cmp	r2, r3
 8008674:	d105      	bne.n	8008682 <clear_lock+0x2a>
 8008676:	4a09      	ldr	r2, [pc, #36]	; (800869c <clear_lock+0x44>)
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	011b      	lsls	r3, r3, #4
 800867c:	4413      	add	r3, r2
 800867e:	2200      	movs	r2, #0
 8008680:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	3301      	adds	r3, #1
 8008686:	60fb      	str	r3, [r7, #12]
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	2b01      	cmp	r3, #1
 800868c:	d9eb      	bls.n	8008666 <clear_lock+0xe>
	}
}
 800868e:	bf00      	nop
 8008690:	3714      	adds	r7, #20
 8008692:	46bd      	mov	sp, r7
 8008694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008698:	4770      	bx	lr
 800869a:	bf00      	nop
 800869c:	200002a0 	.word	0x200002a0

080086a0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b086      	sub	sp, #24
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80086a8:	2300      	movs	r3, #0
 80086aa:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	78db      	ldrb	r3, [r3, #3]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d034      	beq.n	800871e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086b8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	7858      	ldrb	r0, [r3, #1]
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	f103 0140 	add.w	r1, r3, #64	; 0x40
 80086c4:	2301      	movs	r3, #1
 80086c6:	697a      	ldr	r2, [r7, #20]
 80086c8:	f7ff fbcc 	bl	8007e64 <disk_write>
 80086cc:	4603      	mov	r3, r0
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d002      	beq.n	80086d8 <sync_window+0x38>
			res = FR_DISK_ERR;
 80086d2:	2301      	movs	r3, #1
 80086d4:	73fb      	strb	r3, [r7, #15]
 80086d6:	e022      	b.n	800871e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2200      	movs	r2, #0
 80086dc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086e2:	697a      	ldr	r2, [r7, #20]
 80086e4:	1ad2      	subs	r2, r2, r3
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086ea:	429a      	cmp	r2, r3
 80086ec:	d217      	bcs.n	800871e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	789b      	ldrb	r3, [r3, #2]
 80086f2:	613b      	str	r3, [r7, #16]
 80086f4:	e010      	b.n	8008718 <sync_window+0x78>
					wsect += fs->fsize;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086fa:	697a      	ldr	r2, [r7, #20]
 80086fc:	4413      	add	r3, r2
 80086fe:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	7858      	ldrb	r0, [r3, #1]
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800870a:	2301      	movs	r3, #1
 800870c:	697a      	ldr	r2, [r7, #20]
 800870e:	f7ff fba9 	bl	8007e64 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008712:	693b      	ldr	r3, [r7, #16]
 8008714:	3b01      	subs	r3, #1
 8008716:	613b      	str	r3, [r7, #16]
 8008718:	693b      	ldr	r3, [r7, #16]
 800871a:	2b01      	cmp	r3, #1
 800871c:	d8eb      	bhi.n	80086f6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800871e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008720:	4618      	mov	r0, r3
 8008722:	3718      	adds	r7, #24
 8008724:	46bd      	mov	sp, r7
 8008726:	bd80      	pop	{r7, pc}

08008728 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b084      	sub	sp, #16
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
 8008730:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8008732:	2300      	movs	r3, #0
 8008734:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800873a:	683a      	ldr	r2, [r7, #0]
 800873c:	429a      	cmp	r2, r3
 800873e:	d01b      	beq.n	8008778 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8008740:	6878      	ldr	r0, [r7, #4]
 8008742:	f7ff ffad 	bl	80086a0 <sync_window>
 8008746:	4603      	mov	r3, r0
 8008748:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800874a:	7bfb      	ldrb	r3, [r7, #15]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d113      	bne.n	8008778 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	7858      	ldrb	r0, [r3, #1]
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800875a:	2301      	movs	r3, #1
 800875c:	683a      	ldr	r2, [r7, #0]
 800875e:	f7ff fb61 	bl	8007e24 <disk_read>
 8008762:	4603      	mov	r3, r0
 8008764:	2b00      	cmp	r3, #0
 8008766:	d004      	beq.n	8008772 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8008768:	f04f 33ff 	mov.w	r3, #4294967295
 800876c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800876e:	2301      	movs	r3, #1
 8008770:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	683a      	ldr	r2, [r7, #0]
 8008776:	63da      	str	r2, [r3, #60]	; 0x3c
		}
	}
	return res;
 8008778:	7bfb      	ldrb	r3, [r7, #15]
}
 800877a:	4618      	mov	r0, r3
 800877c:	3710      	adds	r7, #16
 800877e:	46bd      	mov	sp, r7
 8008780:	bd80      	pop	{r7, pc}
	...

08008784 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b084      	sub	sp, #16
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800878c:	6878      	ldr	r0, [r7, #4]
 800878e:	f7ff ff87 	bl	80086a0 <sync_window>
 8008792:	4603      	mov	r3, r0
 8008794:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8008796:	7bfb      	ldrb	r3, [r7, #15]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d159      	bne.n	8008850 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	781b      	ldrb	r3, [r3, #0]
 80087a0:	2b03      	cmp	r3, #3
 80087a2:	d149      	bne.n	8008838 <sync_fs+0xb4>
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	791b      	ldrb	r3, [r3, #4]
 80087a8:	2b01      	cmp	r3, #1
 80087aa:	d145      	bne.n	8008838 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	f103 0040 	add.w	r0, r3, #64	; 0x40
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	899b      	ldrh	r3, [r3, #12]
 80087b6:	461a      	mov	r2, r3
 80087b8:	2100      	movs	r1, #0
 80087ba:	f7ff fd78 	bl	80082ae <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	3340      	adds	r3, #64	; 0x40
 80087c2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80087c6:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80087ca:	4618      	mov	r0, r3
 80087cc:	f7ff fc80 	bl	80080d0 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	3340      	adds	r3, #64	; 0x40
 80087d4:	4921      	ldr	r1, [pc, #132]	; (800885c <sync_fs+0xd8>)
 80087d6:	4618      	mov	r0, r3
 80087d8:	f7ff fc95 	bl	8008106 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	3340      	adds	r3, #64	; 0x40
 80087e0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80087e4:	491e      	ldr	r1, [pc, #120]	; (8008860 <sync_fs+0xdc>)
 80087e6:	4618      	mov	r0, r3
 80087e8:	f7ff fc8d 	bl	8008106 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	3340      	adds	r3, #64	; 0x40
 80087f0:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	6a1b      	ldr	r3, [r3, #32]
 80087f8:	4619      	mov	r1, r3
 80087fa:	4610      	mov	r0, r2
 80087fc:	f7ff fc83 	bl	8008106 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	3340      	adds	r3, #64	; 0x40
 8008804:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	69db      	ldr	r3, [r3, #28]
 800880c:	4619      	mov	r1, r3
 800880e:	4610      	mov	r0, r2
 8008810:	f7ff fc79 	bl	8008106 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008818:	1c5a      	adds	r2, r3, #1
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	63da      	str	r2, [r3, #60]	; 0x3c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	7858      	ldrb	r0, [r3, #1]
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800882c:	2301      	movs	r3, #1
 800882e:	f7ff fb19 	bl	8007e64 <disk_write>
			fs->fsi_flag = 0;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2200      	movs	r2, #0
 8008836:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	785b      	ldrb	r3, [r3, #1]
 800883c:	2200      	movs	r2, #0
 800883e:	2100      	movs	r1, #0
 8008840:	4618      	mov	r0, r3
 8008842:	f7ff fb2f 	bl	8007ea4 <disk_ioctl>
 8008846:	4603      	mov	r3, r0
 8008848:	2b00      	cmp	r3, #0
 800884a:	d001      	beq.n	8008850 <sync_fs+0xcc>
 800884c:	2301      	movs	r3, #1
 800884e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8008850:	7bfb      	ldrb	r3, [r7, #15]
}
 8008852:	4618      	mov	r0, r3
 8008854:	3710      	adds	r7, #16
 8008856:	46bd      	mov	sp, r7
 8008858:	bd80      	pop	{r7, pc}
 800885a:	bf00      	nop
 800885c:	41615252 	.word	0x41615252
 8008860:	61417272 	.word	0x61417272

08008864 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8008864:	b480      	push	{r7}
 8008866:	b083      	sub	sp, #12
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
 800886c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	3b02      	subs	r3, #2
 8008872:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008878:	3b02      	subs	r3, #2
 800887a:	683a      	ldr	r2, [r7, #0]
 800887c:	429a      	cmp	r2, r3
 800887e:	d301      	bcc.n	8008884 <clust2sect+0x20>
 8008880:	2300      	movs	r3, #0
 8008882:	e008      	b.n	8008896 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	895b      	ldrh	r3, [r3, #10]
 8008888:	461a      	mov	r2, r3
 800888a:	683b      	ldr	r3, [r7, #0]
 800888c:	fb03 f202 	mul.w	r2, r3, r2
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008894:	4413      	add	r3, r2
}
 8008896:	4618      	mov	r0, r3
 8008898:	370c      	adds	r7, #12
 800889a:	46bd      	mov	sp, r7
 800889c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a0:	4770      	bx	lr
	...

080088a4 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80088a4:	b590      	push	{r4, r7, lr}
 80088a6:	b089      	sub	sp, #36	; 0x24
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
 80088ac:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	61bb      	str	r3, [r7, #24]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	2b01      	cmp	r3, #1
 80088b8:	d904      	bls.n	80088c4 <get_fat+0x20>
 80088ba:	69bb      	ldr	r3, [r7, #24]
 80088bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088be:	683a      	ldr	r2, [r7, #0]
 80088c0:	429a      	cmp	r2, r3
 80088c2:	d302      	bcc.n	80088ca <get_fat+0x26>
		val = 1;	/* Internal error */
 80088c4:	2301      	movs	r3, #1
 80088c6:	61fb      	str	r3, [r7, #28]
 80088c8:	e13a      	b.n	8008b40 <get_fat+0x29c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80088ca:	f04f 33ff 	mov.w	r3, #4294967295
 80088ce:	61fb      	str	r3, [r7, #28]

		switch (fs->fs_type) {
 80088d0:	69bb      	ldr	r3, [r7, #24]
 80088d2:	781b      	ldrb	r3, [r3, #0]
 80088d4:	3b01      	subs	r3, #1
 80088d6:	2b03      	cmp	r3, #3
 80088d8:	f200 8126 	bhi.w	8008b28 <get_fat+0x284>
 80088dc:	a201      	add	r2, pc, #4	; (adr r2, 80088e4 <get_fat+0x40>)
 80088de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088e2:	bf00      	nop
 80088e4:	080088f5 	.word	0x080088f5
 80088e8:	080089a3 	.word	0x080089a3
 80088ec:	080089ef 	.word	0x080089ef
 80088f0:	08008a3f 	.word	0x08008a3f
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	60fb      	str	r3, [r7, #12]
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	085b      	lsrs	r3, r3, #1
 80088fc:	68fa      	ldr	r2, [r7, #12]
 80088fe:	4413      	add	r3, r2
 8008900:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008902:	69bb      	ldr	r3, [r7, #24]
 8008904:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008906:	69bb      	ldr	r3, [r7, #24]
 8008908:	899b      	ldrh	r3, [r3, #12]
 800890a:	4619      	mov	r1, r3
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008912:	4413      	add	r3, r2
 8008914:	4619      	mov	r1, r3
 8008916:	69b8      	ldr	r0, [r7, #24]
 8008918:	f7ff ff06 	bl	8008728 <move_window>
 800891c:	4603      	mov	r3, r0
 800891e:	2b00      	cmp	r3, #0
 8008920:	f040 8105 	bne.w	8008b2e <get_fat+0x28a>
			wc = fs->win[bc++ % SS(fs)];
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	1c5a      	adds	r2, r3, #1
 8008928:	60fa      	str	r2, [r7, #12]
 800892a:	69ba      	ldr	r2, [r7, #24]
 800892c:	8992      	ldrh	r2, [r2, #12]
 800892e:	fbb3 f1f2 	udiv	r1, r3, r2
 8008932:	fb02 f201 	mul.w	r2, r2, r1
 8008936:	1a9b      	subs	r3, r3, r2
 8008938:	69ba      	ldr	r2, [r7, #24]
 800893a:	4413      	add	r3, r2
 800893c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008940:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008942:	69bb      	ldr	r3, [r7, #24]
 8008944:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008946:	69bb      	ldr	r3, [r7, #24]
 8008948:	899b      	ldrh	r3, [r3, #12]
 800894a:	4619      	mov	r1, r3
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008952:	4413      	add	r3, r2
 8008954:	4619      	mov	r1, r3
 8008956:	69b8      	ldr	r0, [r7, #24]
 8008958:	f7ff fee6 	bl	8008728 <move_window>
 800895c:	4603      	mov	r3, r0
 800895e:	2b00      	cmp	r3, #0
 8008960:	f040 80e7 	bne.w	8008b32 <get_fat+0x28e>
			wc |= fs->win[bc % SS(fs)] << 8;
 8008964:	69bb      	ldr	r3, [r7, #24]
 8008966:	899b      	ldrh	r3, [r3, #12]
 8008968:	461a      	mov	r2, r3
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	fbb3 f1f2 	udiv	r1, r3, r2
 8008970:	fb02 f201 	mul.w	r2, r2, r1
 8008974:	1a9b      	subs	r3, r3, r2
 8008976:	69ba      	ldr	r2, [r7, #24]
 8008978:	4413      	add	r3, r2
 800897a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800897e:	021b      	lsls	r3, r3, #8
 8008980:	461a      	mov	r2, r3
 8008982:	68bb      	ldr	r3, [r7, #8]
 8008984:	4313      	orrs	r3, r2
 8008986:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	f003 0301 	and.w	r3, r3, #1
 800898e:	2b00      	cmp	r3, #0
 8008990:	d002      	beq.n	8008998 <get_fat+0xf4>
 8008992:	68bb      	ldr	r3, [r7, #8]
 8008994:	091b      	lsrs	r3, r3, #4
 8008996:	e002      	b.n	800899e <get_fat+0xfa>
 8008998:	68bb      	ldr	r3, [r7, #8]
 800899a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800899e:	61fb      	str	r3, [r7, #28]
			break;
 80089a0:	e0ce      	b.n	8008b40 <get_fat+0x29c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80089a2:	69bb      	ldr	r3, [r7, #24]
 80089a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80089a6:	69bb      	ldr	r3, [r7, #24]
 80089a8:	899b      	ldrh	r3, [r3, #12]
 80089aa:	085b      	lsrs	r3, r3, #1
 80089ac:	b29b      	uxth	r3, r3
 80089ae:	4619      	mov	r1, r3
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80089b6:	4413      	add	r3, r2
 80089b8:	4619      	mov	r1, r3
 80089ba:	69b8      	ldr	r0, [r7, #24]
 80089bc:	f7ff feb4 	bl	8008728 <move_window>
 80089c0:	4603      	mov	r3, r0
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	f040 80b7 	bne.w	8008b36 <get_fat+0x292>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80089c8:	69bb      	ldr	r3, [r7, #24]
 80089ca:	f103 0140 	add.w	r1, r3, #64	; 0x40
 80089ce:	683b      	ldr	r3, [r7, #0]
 80089d0:	005b      	lsls	r3, r3, #1
 80089d2:	69ba      	ldr	r2, [r7, #24]
 80089d4:	8992      	ldrh	r2, [r2, #12]
 80089d6:	fbb3 f0f2 	udiv	r0, r3, r2
 80089da:	fb02 f200 	mul.w	r2, r2, r0
 80089de:	1a9b      	subs	r3, r3, r2
 80089e0:	440b      	add	r3, r1
 80089e2:	4618      	mov	r0, r3
 80089e4:	f7ff fa7c 	bl	8007ee0 <ld_word>
 80089e8:	4603      	mov	r3, r0
 80089ea:	61fb      	str	r3, [r7, #28]
			break;
 80089ec:	e0a8      	b.n	8008b40 <get_fat+0x29c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80089ee:	69bb      	ldr	r3, [r7, #24]
 80089f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80089f2:	69bb      	ldr	r3, [r7, #24]
 80089f4:	899b      	ldrh	r3, [r3, #12]
 80089f6:	089b      	lsrs	r3, r3, #2
 80089f8:	b29b      	uxth	r3, r3
 80089fa:	4619      	mov	r1, r3
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8008a02:	4413      	add	r3, r2
 8008a04:	4619      	mov	r1, r3
 8008a06:	69b8      	ldr	r0, [r7, #24]
 8008a08:	f7ff fe8e 	bl	8008728 <move_window>
 8008a0c:	4603      	mov	r3, r0
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	f040 8093 	bne.w	8008b3a <get_fat+0x296>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8008a14:	69bb      	ldr	r3, [r7, #24]
 8008a16:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	009b      	lsls	r3, r3, #2
 8008a1e:	69ba      	ldr	r2, [r7, #24]
 8008a20:	8992      	ldrh	r2, [r2, #12]
 8008a22:	fbb3 f0f2 	udiv	r0, r3, r2
 8008a26:	fb02 f200 	mul.w	r2, r2, r0
 8008a2a:	1a9b      	subs	r3, r3, r2
 8008a2c:	440b      	add	r3, r1
 8008a2e:	4618      	mov	r0, r3
 8008a30:	f7ff fa6e 	bl	8007f10 <ld_dword>
 8008a34:	4603      	mov	r3, r0
 8008a36:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008a3a:	61fb      	str	r3, [r7, #28]
			break;
 8008a3c:	e080      	b.n	8008b40 <get_fat+0x29c>
#if _FS_EXFAT
		case FS_EXFAT :
			if (obj->objsize) {
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8008a44:	4323      	orrs	r3, r4
 8008a46:	d06f      	beq.n	8008b28 <get_fat+0x284>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	689b      	ldr	r3, [r3, #8]
 8008a4c:	683a      	ldr	r2, [r7, #0]
 8008a4e:	1ad3      	subs	r3, r2, r3
 8008a50:	617b      	str	r3, [r7, #20]
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8008a58:	f113 30ff 	adds.w	r0, r3, #4294967295
 8008a5c:	f144 31ff 	adc.w	r1, r4, #4294967295
 8008a60:	69bb      	ldr	r3, [r7, #24]
 8008a62:	899b      	ldrh	r3, [r3, #12]
 8008a64:	b29b      	uxth	r3, r3
 8008a66:	f04f 0400 	mov.w	r4, #0
 8008a6a:	461a      	mov	r2, r3
 8008a6c:	4623      	mov	r3, r4
 8008a6e:	f7f7 fbe7 	bl	8000240 <__aeabi_uldivmod>
 8008a72:	4603      	mov	r3, r0
 8008a74:	460c      	mov	r4, r1
 8008a76:	461a      	mov	r2, r3
 8008a78:	69bb      	ldr	r3, [r7, #24]
 8008a7a:	895b      	ldrh	r3, [r3, #10]
 8008a7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a80:	613b      	str	r3, [r7, #16]

				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	79db      	ldrb	r3, [r3, #7]
 8008a86:	2b02      	cmp	r3, #2
 8008a88:	d10e      	bne.n	8008aa8 <get_fat+0x204>
					if (cofs <= clen) {
 8008a8a:	697a      	ldr	r2, [r7, #20]
 8008a8c:	693b      	ldr	r3, [r7, #16]
 8008a8e:	429a      	cmp	r2, r3
 8008a90:	d80a      	bhi.n	8008aa8 <get_fat+0x204>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 8008a92:	697a      	ldr	r2, [r7, #20]
 8008a94:	693b      	ldr	r3, [r7, #16]
 8008a96:	429a      	cmp	r2, r3
 8008a98:	d002      	beq.n	8008aa0 <get_fat+0x1fc>
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	3301      	adds	r3, #1
 8008a9e:	e001      	b.n	8008aa4 <get_fat+0x200>
 8008aa0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8008aa4:	61fb      	str	r3, [r7, #28]
						break;
 8008aa6:	e04b      	b.n	8008b40 <get_fat+0x29c>
					}
				}
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	79db      	ldrb	r3, [r3, #7]
 8008aac:	2b03      	cmp	r3, #3
 8008aae:	d108      	bne.n	8008ac2 <get_fat+0x21e>
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	699b      	ldr	r3, [r3, #24]
 8008ab4:	697a      	ldr	r2, [r7, #20]
 8008ab6:	429a      	cmp	r2, r3
 8008ab8:	d203      	bcs.n	8008ac2 <get_fat+0x21e>
					val = clst + 1; 	/* Generate the value */
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	3301      	adds	r3, #1
 8008abe:	61fb      	str	r3, [r7, #28]
					break;
 8008ac0:	e03e      	b.n	8008b40 <get_fat+0x29c>
				}
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	79db      	ldrb	r3, [r3, #7]
 8008ac6:	2b02      	cmp	r3, #2
 8008ac8:	d02e      	beq.n	8008b28 <get_fat+0x284>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	69db      	ldr	r3, [r3, #28]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d003      	beq.n	8008ada <get_fat+0x236>
						val = 0x7FFFFFFF;	/* Generate EOC */
 8008ad2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8008ad6:	61fb      	str	r3, [r7, #28]
					} else {
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
					}
					break;
 8008ad8:	e032      	b.n	8008b40 <get_fat+0x29c>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008ada:	69bb      	ldr	r3, [r7, #24]
 8008adc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008ade:	69bb      	ldr	r3, [r7, #24]
 8008ae0:	899b      	ldrh	r3, [r3, #12]
 8008ae2:	089b      	lsrs	r3, r3, #2
 8008ae4:	b29b      	uxth	r3, r3
 8008ae6:	4619      	mov	r1, r3
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	fbb3 f3f1 	udiv	r3, r3, r1
 8008aee:	4413      	add	r3, r2
 8008af0:	4619      	mov	r1, r3
 8008af2:	69b8      	ldr	r0, [r7, #24]
 8008af4:	f7ff fe18 	bl	8008728 <move_window>
 8008af8:	4603      	mov	r3, r0
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d11f      	bne.n	8008b3e <get_fat+0x29a>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 8008afe:	69bb      	ldr	r3, [r7, #24]
 8008b00:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	009b      	lsls	r3, r3, #2
 8008b08:	69ba      	ldr	r2, [r7, #24]
 8008b0a:	8992      	ldrh	r2, [r2, #12]
 8008b0c:	fbb3 f0f2 	udiv	r0, r3, r2
 8008b10:	fb02 f200 	mul.w	r2, r2, r0
 8008b14:	1a9b      	subs	r3, r3, r2
 8008b16:	440b      	add	r3, r1
 8008b18:	4618      	mov	r0, r3
 8008b1a:	f7ff f9f9 	bl	8007f10 <ld_dword>
 8008b1e:	4603      	mov	r3, r0
 8008b20:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008b24:	61fb      	str	r3, [r7, #28]
					break;
 8008b26:	e00b      	b.n	8008b40 <get_fat+0x29c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8008b28:	2301      	movs	r3, #1
 8008b2a:	61fb      	str	r3, [r7, #28]
 8008b2c:	e008      	b.n	8008b40 <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008b2e:	bf00      	nop
 8008b30:	e006      	b.n	8008b40 <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008b32:	bf00      	nop
 8008b34:	e004      	b.n	8008b40 <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008b36:	bf00      	nop
 8008b38:	e002      	b.n	8008b40 <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008b3a:	bf00      	nop
 8008b3c:	e000      	b.n	8008b40 <get_fat+0x29c>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008b3e:	bf00      	nop
		}
	}

	return val;
 8008b40:	69fb      	ldr	r3, [r7, #28]
}
 8008b42:	4618      	mov	r0, r3
 8008b44:	3724      	adds	r7, #36	; 0x24
 8008b46:	46bd      	mov	sp, r7
 8008b48:	bd90      	pop	{r4, r7, pc}
 8008b4a:	bf00      	nop

08008b4c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8008b4c:	b590      	push	{r4, r7, lr}
 8008b4e:	b089      	sub	sp, #36	; 0x24
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	60f8      	str	r0, [r7, #12]
 8008b54:	60b9      	str	r1, [r7, #8]
 8008b56:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8008b58:	2302      	movs	r3, #2
 8008b5a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	2b01      	cmp	r3, #1
 8008b60:	f240 8111 	bls.w	8008d86 <put_fat+0x23a>
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b68:	68ba      	ldr	r2, [r7, #8]
 8008b6a:	429a      	cmp	r2, r3
 8008b6c:	f080 810b 	bcs.w	8008d86 <put_fat+0x23a>
		switch (fs->fs_type) {
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	781b      	ldrb	r3, [r3, #0]
 8008b74:	3b01      	subs	r3, #1
 8008b76:	2b03      	cmp	r3, #3
 8008b78:	f200 8105 	bhi.w	8008d86 <put_fat+0x23a>
 8008b7c:	a201      	add	r2, pc, #4	; (adr r2, 8008b84 <put_fat+0x38>)
 8008b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b82:	bf00      	nop
 8008b84:	08008b95 	.word	0x08008b95
 8008b88:	08008c99 	.word	0x08008c99
 8008b8c:	08008cef 	.word	0x08008cef
 8008b90:	08008cef 	.word	0x08008cef
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8008b94:	68bb      	ldr	r3, [r7, #8]
 8008b96:	61bb      	str	r3, [r7, #24]
 8008b98:	69bb      	ldr	r3, [r7, #24]
 8008b9a:	085b      	lsrs	r3, r3, #1
 8008b9c:	69ba      	ldr	r2, [r7, #24]
 8008b9e:	4413      	add	r3, r2
 8008ba0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	899b      	ldrh	r3, [r3, #12]
 8008baa:	4619      	mov	r1, r3
 8008bac:	69bb      	ldr	r3, [r7, #24]
 8008bae:	fbb3 f3f1 	udiv	r3, r3, r1
 8008bb2:	4413      	add	r3, r2
 8008bb4:	4619      	mov	r1, r3
 8008bb6:	68f8      	ldr	r0, [r7, #12]
 8008bb8:	f7ff fdb6 	bl	8008728 <move_window>
 8008bbc:	4603      	mov	r3, r0
 8008bbe:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008bc0:	7ffb      	ldrb	r3, [r7, #31]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	f040 80d8 	bne.w	8008d78 <put_fat+0x22c>
			p = fs->win + bc++ % SS(fs);
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8008bce:	69bb      	ldr	r3, [r7, #24]
 8008bd0:	1c5a      	adds	r2, r3, #1
 8008bd2:	61ba      	str	r2, [r7, #24]
 8008bd4:	68fa      	ldr	r2, [r7, #12]
 8008bd6:	8992      	ldrh	r2, [r2, #12]
 8008bd8:	fbb3 f0f2 	udiv	r0, r3, r2
 8008bdc:	fb02 f200 	mul.w	r2, r2, r0
 8008be0:	1a9b      	subs	r3, r3, r2
 8008be2:	440b      	add	r3, r1
 8008be4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8008be6:	68bb      	ldr	r3, [r7, #8]
 8008be8:	f003 0301 	and.w	r3, r3, #1
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d00d      	beq.n	8008c0c <put_fat+0xc0>
 8008bf0:	697b      	ldr	r3, [r7, #20]
 8008bf2:	781b      	ldrb	r3, [r3, #0]
 8008bf4:	b25b      	sxtb	r3, r3
 8008bf6:	f003 030f 	and.w	r3, r3, #15
 8008bfa:	b25a      	sxtb	r2, r3
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	b2db      	uxtb	r3, r3
 8008c00:	011b      	lsls	r3, r3, #4
 8008c02:	b25b      	sxtb	r3, r3
 8008c04:	4313      	orrs	r3, r2
 8008c06:	b25b      	sxtb	r3, r3
 8008c08:	b2db      	uxtb	r3, r3
 8008c0a:	e001      	b.n	8008c10 <put_fat+0xc4>
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	b2db      	uxtb	r3, r3
 8008c10:	697a      	ldr	r2, [r7, #20]
 8008c12:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	2201      	movs	r2, #1
 8008c18:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	899b      	ldrh	r3, [r3, #12]
 8008c22:	4619      	mov	r1, r3
 8008c24:	69bb      	ldr	r3, [r7, #24]
 8008c26:	fbb3 f3f1 	udiv	r3, r3, r1
 8008c2a:	4413      	add	r3, r2
 8008c2c:	4619      	mov	r1, r3
 8008c2e:	68f8      	ldr	r0, [r7, #12]
 8008c30:	f7ff fd7a 	bl	8008728 <move_window>
 8008c34:	4603      	mov	r3, r0
 8008c36:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008c38:	7ffb      	ldrb	r3, [r7, #31]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	f040 809e 	bne.w	8008d7c <put_fat+0x230>
			p = fs->win + bc % SS(fs);
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	899b      	ldrh	r3, [r3, #12]
 8008c4a:	461a      	mov	r2, r3
 8008c4c:	69bb      	ldr	r3, [r7, #24]
 8008c4e:	fbb3 f0f2 	udiv	r0, r3, r2
 8008c52:	fb02 f200 	mul.w	r2, r2, r0
 8008c56:	1a9b      	subs	r3, r3, r2
 8008c58:	440b      	add	r3, r1
 8008c5a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8008c5c:	68bb      	ldr	r3, [r7, #8]
 8008c5e:	f003 0301 	and.w	r3, r3, #1
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d003      	beq.n	8008c6e <put_fat+0x122>
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	091b      	lsrs	r3, r3, #4
 8008c6a:	b2db      	uxtb	r3, r3
 8008c6c:	e00e      	b.n	8008c8c <put_fat+0x140>
 8008c6e:	697b      	ldr	r3, [r7, #20]
 8008c70:	781b      	ldrb	r3, [r3, #0]
 8008c72:	b25b      	sxtb	r3, r3
 8008c74:	f023 030f 	bic.w	r3, r3, #15
 8008c78:	b25a      	sxtb	r2, r3
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	0a1b      	lsrs	r3, r3, #8
 8008c7e:	b25b      	sxtb	r3, r3
 8008c80:	f003 030f 	and.w	r3, r3, #15
 8008c84:	b25b      	sxtb	r3, r3
 8008c86:	4313      	orrs	r3, r2
 8008c88:	b25b      	sxtb	r3, r3
 8008c8a:	b2db      	uxtb	r3, r3
 8008c8c:	697a      	ldr	r2, [r7, #20]
 8008c8e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	2201      	movs	r2, #1
 8008c94:	70da      	strb	r2, [r3, #3]
			break;
 8008c96:	e076      	b.n	8008d86 <put_fat+0x23a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	899b      	ldrh	r3, [r3, #12]
 8008ca0:	085b      	lsrs	r3, r3, #1
 8008ca2:	b29b      	uxth	r3, r3
 8008ca4:	4619      	mov	r1, r3
 8008ca6:	68bb      	ldr	r3, [r7, #8]
 8008ca8:	fbb3 f3f1 	udiv	r3, r3, r1
 8008cac:	4413      	add	r3, r2
 8008cae:	4619      	mov	r1, r3
 8008cb0:	68f8      	ldr	r0, [r7, #12]
 8008cb2:	f7ff fd39 	bl	8008728 <move_window>
 8008cb6:	4603      	mov	r3, r0
 8008cb8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008cba:	7ffb      	ldrb	r3, [r7, #31]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d15f      	bne.n	8008d80 <put_fat+0x234>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8008cc6:	68bb      	ldr	r3, [r7, #8]
 8008cc8:	005b      	lsls	r3, r3, #1
 8008cca:	68fa      	ldr	r2, [r7, #12]
 8008ccc:	8992      	ldrh	r2, [r2, #12]
 8008cce:	fbb3 f0f2 	udiv	r0, r3, r2
 8008cd2:	fb02 f200 	mul.w	r2, r2, r0
 8008cd6:	1a9b      	subs	r3, r3, r2
 8008cd8:	440b      	add	r3, r1
 8008cda:	687a      	ldr	r2, [r7, #4]
 8008cdc:	b292      	uxth	r2, r2
 8008cde:	4611      	mov	r1, r2
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	f7ff f9f5 	bl	80080d0 <st_word>
			fs->wflag = 1;
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	2201      	movs	r2, #1
 8008cea:	70da      	strb	r2, [r3, #3]
			break;
 8008cec:	e04b      	b.n	8008d86 <put_fat+0x23a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	899b      	ldrh	r3, [r3, #12]
 8008cf6:	089b      	lsrs	r3, r3, #2
 8008cf8:	b29b      	uxth	r3, r3
 8008cfa:	4619      	mov	r1, r3
 8008cfc:	68bb      	ldr	r3, [r7, #8]
 8008cfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8008d02:	4413      	add	r3, r2
 8008d04:	4619      	mov	r1, r3
 8008d06:	68f8      	ldr	r0, [r7, #12]
 8008d08:	f7ff fd0e 	bl	8008728 <move_window>
 8008d0c:	4603      	mov	r3, r0
 8008d0e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008d10:	7ffb      	ldrb	r3, [r7, #31]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d136      	bne.n	8008d84 <put_fat+0x238>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	781b      	ldrb	r3, [r3, #0]
 8008d1a:	2b04      	cmp	r3, #4
 8008d1c:	d017      	beq.n	8008d4e <put_fat+0x202>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8008d2a:	68bb      	ldr	r3, [r7, #8]
 8008d2c:	009b      	lsls	r3, r3, #2
 8008d2e:	68fa      	ldr	r2, [r7, #12]
 8008d30:	8992      	ldrh	r2, [r2, #12]
 8008d32:	fbb3 f0f2 	udiv	r0, r3, r2
 8008d36:	fb02 f200 	mul.w	r2, r2, r0
 8008d3a:	1a9b      	subs	r3, r3, r2
 8008d3c:	440b      	add	r3, r1
 8008d3e:	4618      	mov	r0, r3
 8008d40:	f7ff f8e6 	bl	8007f10 <ld_dword>
 8008d44:	4603      	mov	r3, r0
 8008d46:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008d4a:	4323      	orrs	r3, r4
 8008d4c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8008d54:	68bb      	ldr	r3, [r7, #8]
 8008d56:	009b      	lsls	r3, r3, #2
 8008d58:	68fa      	ldr	r2, [r7, #12]
 8008d5a:	8992      	ldrh	r2, [r2, #12]
 8008d5c:	fbb3 f0f2 	udiv	r0, r3, r2
 8008d60:	fb02 f200 	mul.w	r2, r2, r0
 8008d64:	1a9b      	subs	r3, r3, r2
 8008d66:	440b      	add	r3, r1
 8008d68:	6879      	ldr	r1, [r7, #4]
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	f7ff f9cb 	bl	8008106 <st_dword>
			fs->wflag = 1;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	2201      	movs	r2, #1
 8008d74:	70da      	strb	r2, [r3, #3]
			break;
 8008d76:	e006      	b.n	8008d86 <put_fat+0x23a>
			if (res != FR_OK) break;
 8008d78:	bf00      	nop
 8008d7a:	e004      	b.n	8008d86 <put_fat+0x23a>
			if (res != FR_OK) break;
 8008d7c:	bf00      	nop
 8008d7e:	e002      	b.n	8008d86 <put_fat+0x23a>
			if (res != FR_OK) break;
 8008d80:	bf00      	nop
 8008d82:	e000      	b.n	8008d86 <put_fat+0x23a>
			if (res != FR_OK) break;
 8008d84:	bf00      	nop
		}
	}
	return res;
 8008d86:	7ffb      	ldrb	r3, [r7, #31]
}
 8008d88:	4618      	mov	r0, r3
 8008d8a:	3724      	adds	r7, #36	; 0x24
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	bd90      	pop	{r4, r7, pc}

08008d90 <find_bitmap>:
DWORD find_bitmap (	/* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to scan from */
	DWORD ncl	/* Number of contiguous clusters to find (1..) */
)
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b08a      	sub	sp, #40	; 0x28
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	60f8      	str	r0, [r7, #12]
 8008d98:	60b9      	str	r1, [r7, #8]
 8008d9a:	607a      	str	r2, [r7, #4]
	BYTE bm, bv;
	UINT i;
	DWORD val, scl, ctr;


	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 8008d9c:	68bb      	ldr	r3, [r7, #8]
 8008d9e:	3b02      	subs	r3, #2
 8008da0:	60bb      	str	r3, [r7, #8]
	if (clst >= fs->n_fatent - 2) clst = 0;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008da6:	3b02      	subs	r3, #2
 8008da8:	68ba      	ldr	r2, [r7, #8]
 8008daa:	429a      	cmp	r2, r3
 8008dac:	d301      	bcc.n	8008db2 <find_bitmap+0x22>
 8008dae:	2300      	movs	r3, #0
 8008db0:	60bb      	str	r3, [r7, #8]
	scl = val = clst; ctr = 0;
 8008db2:	68bb      	ldr	r3, [r7, #8]
 8008db4:	61fb      	str	r3, [r7, #28]
 8008db6:	69fb      	ldr	r3, [r7, #28]
 8008db8:	61bb      	str	r3, [r7, #24]
 8008dba:	2300      	movs	r3, #0
 8008dbc:	617b      	str	r3, [r7, #20]
	for (;;) {
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008dc2:	69fb      	ldr	r3, [r7, #28]
 8008dc4:	08db      	lsrs	r3, r3, #3
 8008dc6:	68f9      	ldr	r1, [r7, #12]
 8008dc8:	8989      	ldrh	r1, [r1, #12]
 8008dca:	fbb3 f3f1 	udiv	r3, r3, r1
 8008dce:	4413      	add	r3, r2
 8008dd0:	4619      	mov	r1, r3
 8008dd2:	68f8      	ldr	r0, [r7, #12]
 8008dd4:	f7ff fca8 	bl	8008728 <move_window>
 8008dd8:	4603      	mov	r3, r0
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d002      	beq.n	8008de4 <find_bitmap+0x54>
 8008dde:	f04f 33ff 	mov.w	r3, #4294967295
 8008de2:	e058      	b.n	8008e96 <find_bitmap+0x106>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 8008de4:	69fb      	ldr	r3, [r7, #28]
 8008de6:	08db      	lsrs	r3, r3, #3
 8008de8:	68fa      	ldr	r2, [r7, #12]
 8008dea:	8992      	ldrh	r2, [r2, #12]
 8008dec:	fbb3 f1f2 	udiv	r1, r3, r2
 8008df0:	fb02 f201 	mul.w	r2, r2, r1
 8008df4:	1a9b      	subs	r3, r3, r2
 8008df6:	623b      	str	r3, [r7, #32]
 8008df8:	69fb      	ldr	r3, [r7, #28]
 8008dfa:	f003 0307 	and.w	r3, r3, #7
 8008dfe:	2201      	movs	r2, #1
 8008e00:	fa02 f303 	lsl.w	r3, r2, r3
 8008e04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		do {
			do {
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 8008e08:	68fa      	ldr	r2, [r7, #12]
 8008e0a:	6a3b      	ldr	r3, [r7, #32]
 8008e0c:	4413      	add	r3, r2
 8008e0e:	3340      	adds	r3, #64	; 0x40
 8008e10:	781a      	ldrb	r2, [r3, #0]
 8008e12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008e16:	4013      	ands	r3, r2
 8008e18:	74fb      	strb	r3, [r7, #19]
 8008e1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008e1e:	005b      	lsls	r3, r3, #1
 8008e20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 8008e24:	69fb      	ldr	r3, [r7, #28]
 8008e26:	3301      	adds	r3, #1
 8008e28:	61fb      	str	r3, [r7, #28]
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e2e:	3b02      	subs	r3, #2
 8008e30:	69fa      	ldr	r2, [r7, #28]
 8008e32:	429a      	cmp	r2, r3
 8008e34:	d307      	bcc.n	8008e46 <find_bitmap+0xb6>
					val = 0; bm = 0; i = SS(fs);
 8008e36:	2300      	movs	r3, #0
 8008e38:	61fb      	str	r3, [r7, #28]
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	899b      	ldrh	r3, [r3, #12]
 8008e44:	623b      	str	r3, [r7, #32]
				}
				if (!bv) {	/* Is it a free cluster? */
 8008e46:	7cfb      	ldrb	r3, [r7, #19]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d109      	bne.n	8008e60 <find_bitmap+0xd0>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 8008e4c:	697b      	ldr	r3, [r7, #20]
 8008e4e:	3301      	adds	r3, #1
 8008e50:	617b      	str	r3, [r7, #20]
 8008e52:	697a      	ldr	r2, [r7, #20]
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	429a      	cmp	r2, r3
 8008e58:	d106      	bne.n	8008e68 <find_bitmap+0xd8>
 8008e5a:	69bb      	ldr	r3, [r7, #24]
 8008e5c:	3302      	adds	r3, #2
 8008e5e:	e01a      	b.n	8008e96 <find_bitmap+0x106>
				} else {
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
 8008e60:	69fb      	ldr	r3, [r7, #28]
 8008e62:	61bb      	str	r3, [r7, #24]
 8008e64:	2300      	movs	r3, #0
 8008e66:	617b      	str	r3, [r7, #20]
				}
				if (val == clst) return 0;	/* All cluster scanned? */
 8008e68:	69fa      	ldr	r2, [r7, #28]
 8008e6a:	68bb      	ldr	r3, [r7, #8]
 8008e6c:	429a      	cmp	r2, r3
 8008e6e:	d101      	bne.n	8008e74 <find_bitmap+0xe4>
 8008e70:	2300      	movs	r3, #0
 8008e72:	e010      	b.n	8008e96 <find_bitmap+0x106>
			} while (bm);
 8008e74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d1c5      	bne.n	8008e08 <find_bitmap+0x78>
			bm = 1;
 8008e7c:	2301      	movs	r3, #1
 8008e7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		} while (++i < SS(fs));
 8008e82:	6a3b      	ldr	r3, [r7, #32]
 8008e84:	3301      	adds	r3, #1
 8008e86:	623b      	str	r3, [r7, #32]
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	899b      	ldrh	r3, [r3, #12]
 8008e8c:	461a      	mov	r2, r3
 8008e8e:	6a3b      	ldr	r3, [r7, #32]
 8008e90:	4293      	cmp	r3, r2
 8008e92:	d3b9      	bcc.n	8008e08 <find_bitmap+0x78>
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 8008e94:	e793      	b.n	8008dbe <find_bitmap+0x2e>
	}
}
 8008e96:	4618      	mov	r0, r3
 8008e98:	3728      	adds	r7, #40	; 0x28
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	bd80      	pop	{r7, pc}

08008e9e <change_bitmap>:
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to change from */
	DWORD ncl,	/* Number of clusters to be changed */
	int bv		/* bit value to be set (0 or 1) */
)
{
 8008e9e:	b580      	push	{r7, lr}
 8008ea0:	b088      	sub	sp, #32
 8008ea2:	af00      	add	r7, sp, #0
 8008ea4:	60f8      	str	r0, [r7, #12]
 8008ea6:	60b9      	str	r1, [r7, #8]
 8008ea8:	607a      	str	r2, [r7, #4]
 8008eaa:	603b      	str	r3, [r7, #0]
	BYTE bm;
	UINT i;
	DWORD sect;

	clst -= 2;	/* The first bit corresponds to cluster #2 */
 8008eac:	68bb      	ldr	r3, [r7, #8]
 8008eae:	3b02      	subs	r3, #2
 8008eb0:	60bb      	str	r3, [r7, #8]
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008eb6:	68bb      	ldr	r3, [r7, #8]
 8008eb8:	08db      	lsrs	r3, r3, #3
 8008eba:	68f9      	ldr	r1, [r7, #12]
 8008ebc:	8989      	ldrh	r1, [r1, #12]
 8008ebe:	fbb3 f3f1 	udiv	r3, r3, r1
 8008ec2:	4413      	add	r3, r2
 8008ec4:	617b      	str	r3, [r7, #20]
	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
 8008ec6:	68bb      	ldr	r3, [r7, #8]
 8008ec8:	08db      	lsrs	r3, r3, #3
 8008eca:	68fa      	ldr	r2, [r7, #12]
 8008ecc:	8992      	ldrh	r2, [r2, #12]
 8008ece:	fbb3 f1f2 	udiv	r1, r3, r2
 8008ed2:	fb02 f201 	mul.w	r2, r2, r1
 8008ed6:	1a9b      	subs	r3, r3, r2
 8008ed8:	61bb      	str	r3, [r7, #24]
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
 8008eda:	68bb      	ldr	r3, [r7, #8]
 8008edc:	f003 0307 	and.w	r3, r3, #7
 8008ee0:	2201      	movs	r2, #1
 8008ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8008ee6:	77fb      	strb	r3, [r7, #31]
	for (;;) {
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 8008ee8:	697b      	ldr	r3, [r7, #20]
 8008eea:	1c5a      	adds	r2, r3, #1
 8008eec:	617a      	str	r2, [r7, #20]
 8008eee:	4619      	mov	r1, r3
 8008ef0:	68f8      	ldr	r0, [r7, #12]
 8008ef2:	f7ff fc19 	bl	8008728 <move_window>
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d001      	beq.n	8008f00 <change_bitmap+0x62>
 8008efc:	2301      	movs	r3, #1
 8008efe:	e03f      	b.n	8008f80 <change_bitmap+0xe2>
		do {
			do {
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 8008f00:	68fa      	ldr	r2, [r7, #12]
 8008f02:	69bb      	ldr	r3, [r7, #24]
 8008f04:	4413      	add	r3, r2
 8008f06:	3340      	adds	r3, #64	; 0x40
 8008f08:	781a      	ldrb	r2, [r3, #0]
 8008f0a:	7ffb      	ldrb	r3, [r7, #31]
 8008f0c:	4013      	ands	r3, r2
 8008f0e:	b2db      	uxtb	r3, r3
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	bf14      	ite	ne
 8008f14:	2301      	movne	r3, #1
 8008f16:	2300      	moveq	r3, #0
 8008f18:	b2db      	uxtb	r3, r3
 8008f1a:	461a      	mov	r2, r3
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	4293      	cmp	r3, r2
 8008f20:	d101      	bne.n	8008f26 <change_bitmap+0x88>
 8008f22:	2302      	movs	r3, #2
 8008f24:	e02c      	b.n	8008f80 <change_bitmap+0xe2>
				fs->win[i] ^= bm;	/* Flip the bit */
 8008f26:	68fa      	ldr	r2, [r7, #12]
 8008f28:	69bb      	ldr	r3, [r7, #24]
 8008f2a:	4413      	add	r3, r2
 8008f2c:	3340      	adds	r3, #64	; 0x40
 8008f2e:	781a      	ldrb	r2, [r3, #0]
 8008f30:	7ffb      	ldrb	r3, [r7, #31]
 8008f32:	4053      	eors	r3, r2
 8008f34:	b2d9      	uxtb	r1, r3
 8008f36:	68fa      	ldr	r2, [r7, #12]
 8008f38:	69bb      	ldr	r3, [r7, #24]
 8008f3a:	4413      	add	r3, r2
 8008f3c:	3340      	adds	r3, #64	; 0x40
 8008f3e:	460a      	mov	r2, r1
 8008f40:	701a      	strb	r2, [r3, #0]
				fs->wflag = 1;
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	2201      	movs	r2, #1
 8008f46:	70da      	strb	r2, [r3, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	3b01      	subs	r3, #1
 8008f4c:	607b      	str	r3, [r7, #4]
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d101      	bne.n	8008f58 <change_bitmap+0xba>
 8008f54:	2300      	movs	r3, #0
 8008f56:	e013      	b.n	8008f80 <change_bitmap+0xe2>
			} while (bm <<= 1);		/* Next bit */
 8008f58:	7ffb      	ldrb	r3, [r7, #31]
 8008f5a:	005b      	lsls	r3, r3, #1
 8008f5c:	77fb      	strb	r3, [r7, #31]
 8008f5e:	7ffb      	ldrb	r3, [r7, #31]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d1cd      	bne.n	8008f00 <change_bitmap+0x62>
			bm = 1;
 8008f64:	2301      	movs	r3, #1
 8008f66:	77fb      	strb	r3, [r7, #31]
		} while (++i < SS(fs));		/* Next byte */
 8008f68:	69bb      	ldr	r3, [r7, #24]
 8008f6a:	3301      	adds	r3, #1
 8008f6c:	61bb      	str	r3, [r7, #24]
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	899b      	ldrh	r3, [r3, #12]
 8008f72:	461a      	mov	r2, r3
 8008f74:	69bb      	ldr	r3, [r7, #24]
 8008f76:	4293      	cmp	r3, r2
 8008f78:	d3c2      	bcc.n	8008f00 <change_bitmap+0x62>
		i = 0;
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	61bb      	str	r3, [r7, #24]
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 8008f7e:	e7b3      	b.n	8008ee8 <change_bitmap+0x4a>
	}
}
 8008f80:	4618      	mov	r0, r3
 8008f82:	3720      	adds	r7, #32
 8008f84:	46bd      	mov	sp, r7
 8008f86:	bd80      	pop	{r7, pc}

08008f88 <fill_first_frag>:

static
FRESULT fill_first_frag (
	_FDID* obj	/* Pointer to the corresponding object */
)
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b086      	sub	sp, #24
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD cl, n;

	if (obj->stat == 3) {	/* Has the object been changed 'fragmented'? */
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	79db      	ldrb	r3, [r3, #7]
 8008f94:	2b03      	cmp	r3, #3
 8008f96:	d121      	bne.n	8008fdc <fill_first_frag+0x54>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	689b      	ldr	r3, [r3, #8]
 8008f9c:	617b      	str	r3, [r7, #20]
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	699b      	ldr	r3, [r3, #24]
 8008fa2:	613b      	str	r3, [r7, #16]
 8008fa4:	e014      	b.n	8008fd0 <fill_first_frag+0x48>
			res = put_fat(obj->fs, cl, cl + 1);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	6818      	ldr	r0, [r3, #0]
 8008faa:	697b      	ldr	r3, [r7, #20]
 8008fac:	3301      	adds	r3, #1
 8008fae:	461a      	mov	r2, r3
 8008fb0:	6979      	ldr	r1, [r7, #20]
 8008fb2:	f7ff fdcb 	bl	8008b4c <put_fat>
 8008fb6:	4603      	mov	r3, r0
 8008fb8:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) return res;
 8008fba:	7bfb      	ldrb	r3, [r7, #15]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d001      	beq.n	8008fc4 <fill_first_frag+0x3c>
 8008fc0:	7bfb      	ldrb	r3, [r7, #15]
 8008fc2:	e00c      	b.n	8008fde <fill_first_frag+0x56>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 8008fc4:	697b      	ldr	r3, [r7, #20]
 8008fc6:	3301      	adds	r3, #1
 8008fc8:	617b      	str	r3, [r7, #20]
 8008fca:	693b      	ldr	r3, [r7, #16]
 8008fcc:	3b01      	subs	r3, #1
 8008fce:	613b      	str	r3, [r7, #16]
 8008fd0:	693b      	ldr	r3, [r7, #16]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d1e7      	bne.n	8008fa6 <fill_first_frag+0x1e>
		}
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	2200      	movs	r2, #0
 8008fda:	71da      	strb	r2, [r3, #7]
	}
	return FR_OK;
 8008fdc:	2300      	movs	r3, #0
}
 8008fde:	4618      	mov	r0, r3
 8008fe0:	3718      	adds	r7, #24
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	bd80      	pop	{r7, pc}

08008fe6 <fill_last_frag>:
FRESULT fill_last_frag (
	_FDID* obj,	/* Pointer to the corresponding object */
	DWORD lcl,	/* Last cluster of the fragment */
	DWORD term	/* Value to set the last FAT entry */
)
{
 8008fe6:	b580      	push	{r7, lr}
 8008fe8:	b086      	sub	sp, #24
 8008fea:	af00      	add	r7, sp, #0
 8008fec:	60f8      	str	r0, [r7, #12]
 8008fee:	60b9      	str	r1, [r7, #8]
 8008ff0:	607a      	str	r2, [r7, #4]
	FRESULT res;

	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 8008ff2:	e020      	b.n	8009036 <fill_last_frag+0x50>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	6818      	ldr	r0, [r3, #0]
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	69db      	ldr	r3, [r3, #28]
 8008ffc:	68ba      	ldr	r2, [r7, #8]
 8008ffe:	1ad3      	subs	r3, r2, r3
 8009000:	1c59      	adds	r1, r3, #1
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	69db      	ldr	r3, [r3, #28]
 8009006:	2b01      	cmp	r3, #1
 8009008:	d905      	bls.n	8009016 <fill_last_frag+0x30>
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	69db      	ldr	r3, [r3, #28]
 800900e:	68ba      	ldr	r2, [r7, #8]
 8009010:	1ad3      	subs	r3, r2, r3
 8009012:	3302      	adds	r3, #2
 8009014:	e000      	b.n	8009018 <fill_last_frag+0x32>
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	461a      	mov	r2, r3
 800901a:	f7ff fd97 	bl	8008b4c <put_fat>
 800901e:	4603      	mov	r3, r0
 8009020:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 8009022:	7dfb      	ldrb	r3, [r7, #23]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d001      	beq.n	800902c <fill_last_frag+0x46>
 8009028:	7dfb      	ldrb	r3, [r7, #23]
 800902a:	e009      	b.n	8009040 <fill_last_frag+0x5a>
		obj->n_frag--;
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	69db      	ldr	r3, [r3, #28]
 8009030:	1e5a      	subs	r2, r3, #1
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	61da      	str	r2, [r3, #28]
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	69db      	ldr	r3, [r3, #28]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d1da      	bne.n	8008ff4 <fill_last_frag+0xe>
	}
	return FR_OK;
 800903e:	2300      	movs	r3, #0
}
 8009040:	4618      	mov	r0, r3
 8009042:	3718      	adds	r7, #24
 8009044:	46bd      	mov	sp, r7
 8009046:	bd80      	pop	{r7, pc}

08009048 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b08a      	sub	sp, #40	; 0x28
 800904c:	af00      	add	r7, sp, #0
 800904e:	60f8      	str	r0, [r7, #12]
 8009050:	60b9      	str	r1, [r7, #8]
 8009052:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8009054:	2300      	movs	r3, #0
 8009056:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	61bb      	str	r3, [r7, #24]
#if _FS_EXFAT || _USE_TRIM
	DWORD scl = clst, ecl = clst;
 800905e:	68bb      	ldr	r3, [r7, #8]
 8009060:	627b      	str	r3, [r7, #36]	; 0x24
 8009062:	68bb      	ldr	r3, [r7, #8]
 8009064:	623b      	str	r3, [r7, #32]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8009066:	68bb      	ldr	r3, [r7, #8]
 8009068:	2b01      	cmp	r3, #1
 800906a:	d904      	bls.n	8009076 <remove_chain+0x2e>
 800906c:	69bb      	ldr	r3, [r7, #24]
 800906e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009070:	68ba      	ldr	r2, [r7, #8]
 8009072:	429a      	cmp	r2, r3
 8009074:	d301      	bcc.n	800907a <remove_chain+0x32>
 8009076:	2302      	movs	r3, #2
 8009078:	e096      	b.n	80091a8 <remove_chain+0x160>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d014      	beq.n	80090aa <remove_chain+0x62>
 8009080:	69bb      	ldr	r3, [r7, #24]
 8009082:	781b      	ldrb	r3, [r3, #0]
 8009084:	2b04      	cmp	r3, #4
 8009086:	d103      	bne.n	8009090 <remove_chain+0x48>
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	79db      	ldrb	r3, [r3, #7]
 800908c:	2b02      	cmp	r3, #2
 800908e:	d00c      	beq.n	80090aa <remove_chain+0x62>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8009090:	f04f 32ff 	mov.w	r2, #4294967295
 8009094:	6879      	ldr	r1, [r7, #4]
 8009096:	69b8      	ldr	r0, [r7, #24]
 8009098:	f7ff fd58 	bl	8008b4c <put_fat>
 800909c:	4603      	mov	r3, r0
 800909e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80090a0:	7ffb      	ldrb	r3, [r7, #31]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d001      	beq.n	80090aa <remove_chain+0x62>
 80090a6:	7ffb      	ldrb	r3, [r7, #31]
 80090a8:	e07e      	b.n	80091a8 <remove_chain+0x160>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80090aa:	68b9      	ldr	r1, [r7, #8]
 80090ac:	68f8      	ldr	r0, [r7, #12]
 80090ae:	f7ff fbf9 	bl	80088a4 <get_fat>
 80090b2:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80090b4:	697b      	ldr	r3, [r7, #20]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d055      	beq.n	8009166 <remove_chain+0x11e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80090ba:	697b      	ldr	r3, [r7, #20]
 80090bc:	2b01      	cmp	r3, #1
 80090be:	d101      	bne.n	80090c4 <remove_chain+0x7c>
 80090c0:	2302      	movs	r3, #2
 80090c2:	e071      	b.n	80091a8 <remove_chain+0x160>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80090c4:	697b      	ldr	r3, [r7, #20]
 80090c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090ca:	d101      	bne.n	80090d0 <remove_chain+0x88>
 80090cc:	2301      	movs	r3, #1
 80090ce:	e06b      	b.n	80091a8 <remove_chain+0x160>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 80090d0:	69bb      	ldr	r3, [r7, #24]
 80090d2:	781b      	ldrb	r3, [r3, #0]
 80090d4:	2b04      	cmp	r3, #4
 80090d6:	d00b      	beq.n	80090f0 <remove_chain+0xa8>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80090d8:	2200      	movs	r2, #0
 80090da:	68b9      	ldr	r1, [r7, #8]
 80090dc:	69b8      	ldr	r0, [r7, #24]
 80090de:	f7ff fd35 	bl	8008b4c <put_fat>
 80090e2:	4603      	mov	r3, r0
 80090e4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80090e6:	7ffb      	ldrb	r3, [r7, #31]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d001      	beq.n	80090f0 <remove_chain+0xa8>
 80090ec:	7ffb      	ldrb	r3, [r7, #31]
 80090ee:	e05b      	b.n	80091a8 <remove_chain+0x160>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80090f0:	69bb      	ldr	r3, [r7, #24]
 80090f2:	6a1a      	ldr	r2, [r3, #32]
 80090f4:	69bb      	ldr	r3, [r7, #24]
 80090f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090f8:	3b02      	subs	r3, #2
 80090fa:	429a      	cmp	r2, r3
 80090fc:	d20b      	bcs.n	8009116 <remove_chain+0xce>
			fs->free_clst++;
 80090fe:	69bb      	ldr	r3, [r7, #24]
 8009100:	6a1b      	ldr	r3, [r3, #32]
 8009102:	1c5a      	adds	r2, r3, #1
 8009104:	69bb      	ldr	r3, [r7, #24]
 8009106:	621a      	str	r2, [r3, #32]
			fs->fsi_flag |= 1;
 8009108:	69bb      	ldr	r3, [r7, #24]
 800910a:	791b      	ldrb	r3, [r3, #4]
 800910c:	f043 0301 	orr.w	r3, r3, #1
 8009110:	b2da      	uxtb	r2, r3
 8009112:	69bb      	ldr	r3, [r7, #24]
 8009114:	711a      	strb	r2, [r3, #4]
		}
#if _FS_EXFAT || _USE_TRIM
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 8009116:	6a3b      	ldr	r3, [r7, #32]
 8009118:	3301      	adds	r3, #1
 800911a:	697a      	ldr	r2, [r7, #20]
 800911c:	429a      	cmp	r2, r3
 800911e:	d102      	bne.n	8009126 <remove_chain+0xde>
			ecl = nxt;
 8009120:	697b      	ldr	r3, [r7, #20]
 8009122:	623b      	str	r3, [r7, #32]
 8009124:	e017      	b.n	8009156 <remove_chain+0x10e>
		} else {				/* End of contiguous cluster block */
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 8009126:	69bb      	ldr	r3, [r7, #24]
 8009128:	781b      	ldrb	r3, [r3, #0]
 800912a:	2b04      	cmp	r3, #4
 800912c:	d10f      	bne.n	800914e <remove_chain+0x106>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 800912e:	6a3a      	ldr	r2, [r7, #32]
 8009130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009132:	1ad3      	subs	r3, r2, r3
 8009134:	1c5a      	adds	r2, r3, #1
 8009136:	2300      	movs	r3, #0
 8009138:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800913a:	69b8      	ldr	r0, [r7, #24]
 800913c:	f7ff feaf 	bl	8008e9e <change_bitmap>
 8009140:	4603      	mov	r3, r0
 8009142:	77fb      	strb	r3, [r7, #31]
				if (res != FR_OK) return res;
 8009144:	7ffb      	ldrb	r3, [r7, #31]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d001      	beq.n	800914e <remove_chain+0x106>
 800914a:	7ffb      	ldrb	r3, [r7, #31]
 800914c:	e02c      	b.n	80091a8 <remove_chain+0x160>
#if _USE_TRIM
			rt[0] = clust2sect(fs, scl);					/* Start sector */
			rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
 800914e:	697b      	ldr	r3, [r7, #20]
 8009150:	623b      	str	r3, [r7, #32]
 8009152:	6a3b      	ldr	r3, [r7, #32]
 8009154:	627b      	str	r3, [r7, #36]	; 0x24
		}
#endif
		clst = nxt;					/* Next cluster */
 8009156:	697b      	ldr	r3, [r7, #20]
 8009158:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800915a:	69bb      	ldr	r3, [r7, #24]
 800915c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800915e:	68ba      	ldr	r2, [r7, #8]
 8009160:	429a      	cmp	r2, r3
 8009162:	d3a2      	bcc.n	80090aa <remove_chain+0x62>
 8009164:	e000      	b.n	8009168 <remove_chain+0x120>
		if (nxt == 0) break;				/* Empty cluster? */
 8009166:	bf00      	nop

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {
 8009168:	69bb      	ldr	r3, [r7, #24]
 800916a:	781b      	ldrb	r3, [r3, #0]
 800916c:	2b04      	cmp	r3, #4
 800916e:	d11a      	bne.n	80091a6 <remove_chain+0x15e>
		if (pclst == 0) {	/* Does the object have no chain? */
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d103      	bne.n	800917e <remove_chain+0x136>
			obj->stat = 0;		/* Change the object status 'initial' */
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	2200      	movs	r2, #0
 800917a:	71da      	strb	r2, [r3, #7]
 800917c:	e013      	b.n	80091a6 <remove_chain+0x15e>
		} else {
			if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Did the chain get contiguous? */
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	79db      	ldrb	r3, [r3, #7]
 8009182:	2b03      	cmp	r3, #3
 8009184:	d10f      	bne.n	80091a6 <remove_chain+0x15e>
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	689b      	ldr	r3, [r3, #8]
 800918a:	687a      	ldr	r2, [r7, #4]
 800918c:	429a      	cmp	r2, r3
 800918e:	d30a      	bcc.n	80091a6 <remove_chain+0x15e>
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	689a      	ldr	r2, [r3, #8]
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	699b      	ldr	r3, [r3, #24]
 8009198:	4413      	add	r3, r2
 800919a:	687a      	ldr	r2, [r7, #4]
 800919c:	429a      	cmp	r2, r3
 800919e:	d802      	bhi.n	80091a6 <remove_chain+0x15e>
				obj->stat = 2;	/* Change the object status 'contiguous' */
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	2202      	movs	r2, #2
 80091a4:	71da      	strb	r2, [r3, #7]
			}
		}
	}
#endif
	return FR_OK;
 80091a6:	2300      	movs	r3, #0
}
 80091a8:	4618      	mov	r0, r3
 80091aa:	3728      	adds	r7, #40	; 0x28
 80091ac:	46bd      	mov	sp, r7
 80091ae:	bd80      	pop	{r7, pc}

080091b0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b088      	sub	sp, #32
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
 80091b8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80091c0:	683b      	ldr	r3, [r7, #0]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d10d      	bne.n	80091e2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80091c6:	693b      	ldr	r3, [r7, #16]
 80091c8:	69db      	ldr	r3, [r3, #28]
 80091ca:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80091cc:	69bb      	ldr	r3, [r7, #24]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d004      	beq.n	80091dc <create_chain+0x2c>
 80091d2:	693b      	ldr	r3, [r7, #16]
 80091d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091d6:	69ba      	ldr	r2, [r7, #24]
 80091d8:	429a      	cmp	r2, r3
 80091da:	d31b      	bcc.n	8009214 <create_chain+0x64>
 80091dc:	2301      	movs	r3, #1
 80091de:	61bb      	str	r3, [r7, #24]
 80091e0:	e018      	b.n	8009214 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80091e2:	6839      	ldr	r1, [r7, #0]
 80091e4:	6878      	ldr	r0, [r7, #4]
 80091e6:	f7ff fb5d 	bl	80088a4 <get_fat>
 80091ea:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	2b01      	cmp	r3, #1
 80091f0:	d801      	bhi.n	80091f6 <create_chain+0x46>
 80091f2:	2301      	movs	r3, #1
 80091f4:	e0d9      	b.n	80093aa <create_chain+0x1fa>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091fc:	d101      	bne.n	8009202 <create_chain+0x52>
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	e0d3      	b.n	80093aa <create_chain+0x1fa>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8009202:	693b      	ldr	r3, [r7, #16]
 8009204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009206:	68fa      	ldr	r2, [r7, #12]
 8009208:	429a      	cmp	r2, r3
 800920a:	d201      	bcs.n	8009210 <create_chain+0x60>
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	e0cc      	b.n	80093aa <create_chain+0x1fa>
		scl = clst;
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	61bb      	str	r3, [r7, #24]
	}

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8009214:	693b      	ldr	r3, [r7, #16]
 8009216:	781b      	ldrb	r3, [r3, #0]
 8009218:	2b04      	cmp	r3, #4
 800921a:	d164      	bne.n	80092e6 <create_chain+0x136>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 800921c:	2201      	movs	r2, #1
 800921e:	69b9      	ldr	r1, [r7, #24]
 8009220:	6938      	ldr	r0, [r7, #16]
 8009222:	f7ff fdb5 	bl	8008d90 <find_bitmap>
 8009226:	61f8      	str	r0, [r7, #28]
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 8009228:	69fb      	ldr	r3, [r7, #28]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d003      	beq.n	8009236 <create_chain+0x86>
 800922e:	69fb      	ldr	r3, [r7, #28]
 8009230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009234:	d101      	bne.n	800923a <create_chain+0x8a>
 8009236:	69fb      	ldr	r3, [r7, #28]
 8009238:	e0b7      	b.n	80093aa <create_chain+0x1fa>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 800923a:	2301      	movs	r3, #1
 800923c:	2201      	movs	r2, #1
 800923e:	69f9      	ldr	r1, [r7, #28]
 8009240:	6938      	ldr	r0, [r7, #16]
 8009242:	f7ff fe2c 	bl	8008e9e <change_bitmap>
 8009246:	4603      	mov	r3, r0
 8009248:	75fb      	strb	r3, [r7, #23]
		if (res == FR_INT_ERR) return 1;
 800924a:	7dfb      	ldrb	r3, [r7, #23]
 800924c:	2b02      	cmp	r3, #2
 800924e:	d101      	bne.n	8009254 <create_chain+0xa4>
 8009250:	2301      	movs	r3, #1
 8009252:	e0aa      	b.n	80093aa <create_chain+0x1fa>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 8009254:	7dfb      	ldrb	r3, [r7, #23]
 8009256:	2b01      	cmp	r3, #1
 8009258:	d102      	bne.n	8009260 <create_chain+0xb0>
 800925a:	f04f 33ff 	mov.w	r3, #4294967295
 800925e:	e0a4      	b.n	80093aa <create_chain+0x1fa>
		if (clst == 0) {							/* Is it a new chain? */
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d103      	bne.n	800926e <create_chain+0xbe>
			obj->stat = 2;							/* Set status 'contiguous' */
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	2202      	movs	r2, #2
 800926a:	71da      	strb	r2, [r3, #7]
 800926c:	e011      	b.n	8009292 <create_chain+0xe2>
		} else {									/* It is a stretched chain */
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	79db      	ldrb	r3, [r3, #7]
 8009272:	2b02      	cmp	r3, #2
 8009274:	d10d      	bne.n	8009292 <create_chain+0xe2>
 8009276:	69bb      	ldr	r3, [r7, #24]
 8009278:	3301      	adds	r3, #1
 800927a:	69fa      	ldr	r2, [r7, #28]
 800927c:	429a      	cmp	r2, r3
 800927e:	d008      	beq.n	8009292 <create_chain+0xe2>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	689b      	ldr	r3, [r3, #8]
 8009284:	69ba      	ldr	r2, [r7, #24]
 8009286:	1ad2      	subs	r2, r2, r3
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	619a      	str	r2, [r3, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	2203      	movs	r2, #3
 8009290:	71da      	strb	r2, [r3, #7]
			}
		}
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	79db      	ldrb	r3, [r3, #7]
 8009296:	2b02      	cmp	r3, #2
 8009298:	d064      	beq.n	8009364 <create_chain+0x1b4>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 800929a:	683b      	ldr	r3, [r7, #0]
 800929c:	3301      	adds	r3, #1
 800929e:	69fa      	ldr	r2, [r7, #28]
 80092a0:	429a      	cmp	r2, r3
 80092a2:	d10b      	bne.n	80092bc <create_chain+0x10c>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	69db      	ldr	r3, [r3, #28]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d003      	beq.n	80092b4 <create_chain+0x104>
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	69db      	ldr	r3, [r3, #28]
 80092b0:	3301      	adds	r3, #1
 80092b2:	e000      	b.n	80092b6 <create_chain+0x106>
 80092b4:	2302      	movs	r3, #2
 80092b6:	687a      	ldr	r2, [r7, #4]
 80092b8:	61d3      	str	r3, [r2, #28]
 80092ba:	e053      	b.n	8009364 <create_chain+0x1b4>
			} else {				/* New fragment */
				if (obj->n_frag == 0) obj->n_frag = 1;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	69db      	ldr	r3, [r3, #28]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d102      	bne.n	80092ca <create_chain+0x11a>
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2201      	movs	r2, #1
 80092c8:	61da      	str	r2, [r3, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 80092ca:	69fa      	ldr	r2, [r7, #28]
 80092cc:	6839      	ldr	r1, [r7, #0]
 80092ce:	6878      	ldr	r0, [r7, #4]
 80092d0:	f7ff fe89 	bl	8008fe6 <fill_last_frag>
 80092d4:	4603      	mov	r3, r0
 80092d6:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) obj->n_frag = 1;
 80092d8:	7dfb      	ldrb	r3, [r7, #23]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d142      	bne.n	8009364 <create_chain+0x1b4>
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	2201      	movs	r2, #1
 80092e2:	61da      	str	r2, [r3, #28]
 80092e4:	e03e      	b.n	8009364 <create_chain+0x1b4>
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80092e6:	69bb      	ldr	r3, [r7, #24]
 80092e8:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80092ea:	69fb      	ldr	r3, [r7, #28]
 80092ec:	3301      	adds	r3, #1
 80092ee:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80092f0:	693b      	ldr	r3, [r7, #16]
 80092f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092f4:	69fa      	ldr	r2, [r7, #28]
 80092f6:	429a      	cmp	r2, r3
 80092f8:	d307      	bcc.n	800930a <create_chain+0x15a>
				ncl = 2;
 80092fa:	2302      	movs	r3, #2
 80092fc:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80092fe:	69fa      	ldr	r2, [r7, #28]
 8009300:	69bb      	ldr	r3, [r7, #24]
 8009302:	429a      	cmp	r2, r3
 8009304:	d901      	bls.n	800930a <create_chain+0x15a>
 8009306:	2300      	movs	r3, #0
 8009308:	e04f      	b.n	80093aa <create_chain+0x1fa>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800930a:	69f9      	ldr	r1, [r7, #28]
 800930c:	6878      	ldr	r0, [r7, #4]
 800930e:	f7ff fac9 	bl	80088a4 <get_fat>
 8009312:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d00e      	beq.n	8009338 <create_chain+0x188>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	2b01      	cmp	r3, #1
 800931e:	d003      	beq.n	8009328 <create_chain+0x178>
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009326:	d101      	bne.n	800932c <create_chain+0x17c>
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	e03e      	b.n	80093aa <create_chain+0x1fa>
			if (ncl == scl) return 0;		/* No free cluster */
 800932c:	69fa      	ldr	r2, [r7, #28]
 800932e:	69bb      	ldr	r3, [r7, #24]
 8009330:	429a      	cmp	r2, r3
 8009332:	d1da      	bne.n	80092ea <create_chain+0x13a>
 8009334:	2300      	movs	r3, #0
 8009336:	e038      	b.n	80093aa <create_chain+0x1fa>
			if (cs == 0) break;				/* Found a free cluster */
 8009338:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800933a:	f04f 32ff 	mov.w	r2, #4294967295
 800933e:	69f9      	ldr	r1, [r7, #28]
 8009340:	6938      	ldr	r0, [r7, #16]
 8009342:	f7ff fc03 	bl	8008b4c <put_fat>
 8009346:	4603      	mov	r3, r0
 8009348:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800934a:	7dfb      	ldrb	r3, [r7, #23]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d109      	bne.n	8009364 <create_chain+0x1b4>
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d006      	beq.n	8009364 <create_chain+0x1b4>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8009356:	69fa      	ldr	r2, [r7, #28]
 8009358:	6839      	ldr	r1, [r7, #0]
 800935a:	6938      	ldr	r0, [r7, #16]
 800935c:	f7ff fbf6 	bl	8008b4c <put_fat>
 8009360:	4603      	mov	r3, r0
 8009362:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8009364:	7dfb      	ldrb	r3, [r7, #23]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d116      	bne.n	8009398 <create_chain+0x1e8>
		fs->last_clst = ncl;
 800936a:	693b      	ldr	r3, [r7, #16]
 800936c:	69fa      	ldr	r2, [r7, #28]
 800936e:	61da      	str	r2, [r3, #28]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8009370:	693b      	ldr	r3, [r7, #16]
 8009372:	6a1a      	ldr	r2, [r3, #32]
 8009374:	693b      	ldr	r3, [r7, #16]
 8009376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009378:	3b02      	subs	r3, #2
 800937a:	429a      	cmp	r2, r3
 800937c:	d804      	bhi.n	8009388 <create_chain+0x1d8>
 800937e:	693b      	ldr	r3, [r7, #16]
 8009380:	6a1b      	ldr	r3, [r3, #32]
 8009382:	1e5a      	subs	r2, r3, #1
 8009384:	693b      	ldr	r3, [r7, #16]
 8009386:	621a      	str	r2, [r3, #32]
		fs->fsi_flag |= 1;
 8009388:	693b      	ldr	r3, [r7, #16]
 800938a:	791b      	ldrb	r3, [r3, #4]
 800938c:	f043 0301 	orr.w	r3, r3, #1
 8009390:	b2da      	uxtb	r2, r3
 8009392:	693b      	ldr	r3, [r7, #16]
 8009394:	711a      	strb	r2, [r3, #4]
 8009396:	e007      	b.n	80093a8 <create_chain+0x1f8>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8009398:	7dfb      	ldrb	r3, [r7, #23]
 800939a:	2b01      	cmp	r3, #1
 800939c:	d102      	bne.n	80093a4 <create_chain+0x1f4>
 800939e:	f04f 33ff 	mov.w	r3, #4294967295
 80093a2:	e000      	b.n	80093a6 <create_chain+0x1f6>
 80093a4:	2301      	movs	r3, #1
 80093a6:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80093a8:	69fb      	ldr	r3, [r7, #28]
}
 80093aa:	4618      	mov	r0, r3
 80093ac:	3720      	adds	r7, #32
 80093ae:	46bd      	mov	sp, r7
 80093b0:	bd80      	pop	{r7, pc}

080093b2 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80093b2:	b580      	push	{r7, lr}
 80093b4:	b086      	sub	sp, #24
 80093b6:	af00      	add	r7, sp, #0
 80093b8:	6078      	str	r0, [r7, #4]
 80093ba:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80093c2:	693b      	ldr	r3, [r7, #16]
 80093c4:	781b      	ldrb	r3, [r3, #0]
 80093c6:	2b04      	cmp	r3, #4
 80093c8:	d102      	bne.n	80093d0 <dir_sdi+0x1e>
 80093ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093ce:	e001      	b.n	80093d4 <dir_sdi+0x22>
 80093d0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80093d4:	683b      	ldr	r3, [r7, #0]
 80093d6:	429a      	cmp	r2, r3
 80093d8:	d904      	bls.n	80093e4 <dir_sdi+0x32>
 80093da:	683b      	ldr	r3, [r7, #0]
 80093dc:	f003 031f 	and.w	r3, r3, #31
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d001      	beq.n	80093e8 <dir_sdi+0x36>
		return FR_INT_ERR;
 80093e4:	2302      	movs	r3, #2
 80093e6:	e074      	b.n	80094d2 <dir_sdi+0x120>
	}
	dp->dptr = ofs;				/* Set current offset */
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	683a      	ldr	r2, [r7, #0]
 80093ec:	631a      	str	r2, [r3, #48]	; 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	689b      	ldr	r3, [r3, #8]
 80093f2:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80093f4:	697b      	ldr	r3, [r7, #20]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d109      	bne.n	800940e <dir_sdi+0x5c>
 80093fa:	693b      	ldr	r3, [r7, #16]
 80093fc:	781b      	ldrb	r3, [r3, #0]
 80093fe:	2b02      	cmp	r3, #2
 8009400:	d905      	bls.n	800940e <dir_sdi+0x5c>
		clst = fs->dirbase;
 8009402:	693b      	ldr	r3, [r7, #16]
 8009404:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009406:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2200      	movs	r2, #0
 800940c:	71da      	strb	r2, [r3, #7]
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800940e:	697b      	ldr	r3, [r7, #20]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d10c      	bne.n	800942e <dir_sdi+0x7c>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8009414:	683b      	ldr	r3, [r7, #0]
 8009416:	095b      	lsrs	r3, r3, #5
 8009418:	693a      	ldr	r2, [r7, #16]
 800941a:	8912      	ldrh	r2, [r2, #8]
 800941c:	4293      	cmp	r3, r2
 800941e:	d301      	bcc.n	8009424 <dir_sdi+0x72>
 8009420:	2302      	movs	r3, #2
 8009422:	e056      	b.n	80094d2 <dir_sdi+0x120>
		dp->sect = fs->dirbase;
 8009424:	693b      	ldr	r3, [r7, #16]
 8009426:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	639a      	str	r2, [r3, #56]	; 0x38
 800942c:	e02d      	b.n	800948a <dir_sdi+0xd8>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800942e:	693b      	ldr	r3, [r7, #16]
 8009430:	895b      	ldrh	r3, [r3, #10]
 8009432:	461a      	mov	r2, r3
 8009434:	693b      	ldr	r3, [r7, #16]
 8009436:	899b      	ldrh	r3, [r3, #12]
 8009438:	fb03 f302 	mul.w	r3, r3, r2
 800943c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800943e:	e019      	b.n	8009474 <dir_sdi+0xc2>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	6979      	ldr	r1, [r7, #20]
 8009444:	4618      	mov	r0, r3
 8009446:	f7ff fa2d 	bl	80088a4 <get_fat>
 800944a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800944c:	697b      	ldr	r3, [r7, #20]
 800944e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009452:	d101      	bne.n	8009458 <dir_sdi+0xa6>
 8009454:	2301      	movs	r3, #1
 8009456:	e03c      	b.n	80094d2 <dir_sdi+0x120>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8009458:	697b      	ldr	r3, [r7, #20]
 800945a:	2b01      	cmp	r3, #1
 800945c:	d904      	bls.n	8009468 <dir_sdi+0xb6>
 800945e:	693b      	ldr	r3, [r7, #16]
 8009460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009462:	697a      	ldr	r2, [r7, #20]
 8009464:	429a      	cmp	r2, r3
 8009466:	d301      	bcc.n	800946c <dir_sdi+0xba>
 8009468:	2302      	movs	r3, #2
 800946a:	e032      	b.n	80094d2 <dir_sdi+0x120>
			ofs -= csz;
 800946c:	683a      	ldr	r2, [r7, #0]
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	1ad3      	subs	r3, r2, r3
 8009472:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009474:	683a      	ldr	r2, [r7, #0]
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	429a      	cmp	r2, r3
 800947a:	d2e1      	bcs.n	8009440 <dir_sdi+0x8e>
		}
		dp->sect = clust2sect(fs, clst);
 800947c:	6979      	ldr	r1, [r7, #20]
 800947e:	6938      	ldr	r0, [r7, #16]
 8009480:	f7ff f9f0 	bl	8008864 <clust2sect>
 8009484:	4602      	mov	r2, r0
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	639a      	str	r2, [r3, #56]	; 0x38
	}
	dp->clust = clst;					/* Current cluster# */
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	697a      	ldr	r2, [r7, #20]
 800948e:	635a      	str	r2, [r3, #52]	; 0x34
	if (!dp->sect) return FR_INT_ERR;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009494:	2b00      	cmp	r3, #0
 8009496:	d101      	bne.n	800949c <dir_sdi+0xea>
 8009498:	2302      	movs	r3, #2
 800949a:	e01a      	b.n	80094d2 <dir_sdi+0x120>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80094a0:	693b      	ldr	r3, [r7, #16]
 80094a2:	899b      	ldrh	r3, [r3, #12]
 80094a4:	4619      	mov	r1, r3
 80094a6:	683b      	ldr	r3, [r7, #0]
 80094a8:	fbb3 f3f1 	udiv	r3, r3, r1
 80094ac:	441a      	add	r2, r3
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	639a      	str	r2, [r3, #56]	; 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80094b2:	693b      	ldr	r3, [r7, #16]
 80094b4:	f103 0140 	add.w	r1, r3, #64	; 0x40
 80094b8:	693b      	ldr	r3, [r7, #16]
 80094ba:	899b      	ldrh	r3, [r3, #12]
 80094bc:	461a      	mov	r2, r3
 80094be:	683b      	ldr	r3, [r7, #0]
 80094c0:	fbb3 f0f2 	udiv	r0, r3, r2
 80094c4:	fb02 f200 	mul.w	r2, r2, r0
 80094c8:	1a9b      	subs	r3, r3, r2
 80094ca:	18ca      	adds	r2, r1, r3
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 80094d0:	2300      	movs	r3, #0
}
 80094d2:	4618      	mov	r0, r3
 80094d4:	3718      	adds	r7, #24
 80094d6:	46bd      	mov	sp, r7
 80094d8:	bd80      	pop	{r7, pc}

080094da <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80094da:	b580      	push	{r7, lr}
 80094dc:	b086      	sub	sp, #24
 80094de:	af00      	add	r7, sp, #0
 80094e0:	6078      	str	r0, [r7, #4]
 80094e2:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094ee:	3320      	adds	r3, #32
 80094f0:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d00b      	beq.n	8009512 <dir_next+0x38>
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	781b      	ldrb	r3, [r3, #0]
 80094fe:	2b04      	cmp	r3, #4
 8009500:	d102      	bne.n	8009508 <dir_next+0x2e>
 8009502:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009506:	e001      	b.n	800950c <dir_next+0x32>
 8009508:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800950c:	68bb      	ldr	r3, [r7, #8]
 800950e:	429a      	cmp	r2, r3
 8009510:	d801      	bhi.n	8009516 <dir_next+0x3c>
 8009512:	2304      	movs	r3, #4
 8009514:	e0c3      	b.n	800969e <dir_next+0x1c4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	899b      	ldrh	r3, [r3, #12]
 800951a:	461a      	mov	r2, r3
 800951c:	68bb      	ldr	r3, [r7, #8]
 800951e:	fbb3 f1f2 	udiv	r1, r3, r2
 8009522:	fb02 f201 	mul.w	r2, r2, r1
 8009526:	1a9b      	subs	r3, r3, r2
 8009528:	2b00      	cmp	r3, #0
 800952a:	f040 80a5 	bne.w	8009678 <dir_next+0x19e>
		dp->sect++;				/* Next sector */
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009532:	1c5a      	adds	r2, r3, #1
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	639a      	str	r2, [r3, #56]	; 0x38

		if (!dp->clust) {		/* Static table */
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800953c:	2b00      	cmp	r3, #0
 800953e:	d10b      	bne.n	8009558 <dir_next+0x7e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8009540:	68bb      	ldr	r3, [r7, #8]
 8009542:	095b      	lsrs	r3, r3, #5
 8009544:	68fa      	ldr	r2, [r7, #12]
 8009546:	8912      	ldrh	r2, [r2, #8]
 8009548:	4293      	cmp	r3, r2
 800954a:	f0c0 8095 	bcc.w	8009678 <dir_next+0x19e>
				dp->sect = 0; return FR_NO_FILE;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	2200      	movs	r2, #0
 8009552:	639a      	str	r2, [r3, #56]	; 0x38
 8009554:	2304      	movs	r3, #4
 8009556:	e0a2      	b.n	800969e <dir_next+0x1c4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	899b      	ldrh	r3, [r3, #12]
 800955c:	461a      	mov	r2, r3
 800955e:	68bb      	ldr	r3, [r7, #8]
 8009560:	fbb3 f3f2 	udiv	r3, r3, r2
 8009564:	68fa      	ldr	r2, [r7, #12]
 8009566:	8952      	ldrh	r2, [r2, #10]
 8009568:	3a01      	subs	r2, #1
 800956a:	4013      	ands	r3, r2
 800956c:	2b00      	cmp	r3, #0
 800956e:	f040 8083 	bne.w	8009678 <dir_next+0x19e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8009572:	687a      	ldr	r2, [r7, #4]
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009578:	4619      	mov	r1, r3
 800957a:	4610      	mov	r0, r2
 800957c:	f7ff f992 	bl	80088a4 <get_fat>
 8009580:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8009582:	697b      	ldr	r3, [r7, #20]
 8009584:	2b01      	cmp	r3, #1
 8009586:	d801      	bhi.n	800958c <dir_next+0xb2>
 8009588:	2302      	movs	r3, #2
 800958a:	e088      	b.n	800969e <dir_next+0x1c4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800958c:	697b      	ldr	r3, [r7, #20]
 800958e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009592:	d101      	bne.n	8009598 <dir_next+0xbe>
 8009594:	2301      	movs	r3, #1
 8009596:	e082      	b.n	800969e <dir_next+0x1c4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800959c:	697a      	ldr	r2, [r7, #20]
 800959e:	429a      	cmp	r2, r3
 80095a0:	d360      	bcc.n	8009664 <dir_next+0x18a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80095a2:	683b      	ldr	r3, [r7, #0]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d104      	bne.n	80095b2 <dir_next+0xd8>
						dp->sect = 0; return FR_NO_FILE;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2200      	movs	r2, #0
 80095ac:	639a      	str	r2, [r3, #56]	; 0x38
 80095ae:	2304      	movs	r3, #4
 80095b0:	e075      	b.n	800969e <dir_next+0x1c4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80095b2:	687a      	ldr	r2, [r7, #4]
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095b8:	4619      	mov	r1, r3
 80095ba:	4610      	mov	r0, r2
 80095bc:	f7ff fdf8 	bl	80091b0 <create_chain>
 80095c0:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80095c2:	697b      	ldr	r3, [r7, #20]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d101      	bne.n	80095cc <dir_next+0xf2>
 80095c8:	2307      	movs	r3, #7
 80095ca:	e068      	b.n	800969e <dir_next+0x1c4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80095cc:	697b      	ldr	r3, [r7, #20]
 80095ce:	2b01      	cmp	r3, #1
 80095d0:	d101      	bne.n	80095d6 <dir_next+0xfc>
 80095d2:	2302      	movs	r3, #2
 80095d4:	e063      	b.n	800969e <dir_next+0x1c4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80095d6:	697b      	ldr	r3, [r7, #20]
 80095d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095dc:	d101      	bne.n	80095e2 <dir_next+0x108>
 80095de:	2301      	movs	r3, #1
 80095e0:	e05d      	b.n	800969e <dir_next+0x1c4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	79db      	ldrb	r3, [r3, #7]
 80095e6:	f043 0304 	orr.w	r3, r3, #4
 80095ea:	b2da      	uxtb	r2, r3
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	71da      	strb	r2, [r3, #7]
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80095f0:	68f8      	ldr	r0, [r7, #12]
 80095f2:	f7ff f855 	bl	80086a0 <sync_window>
 80095f6:	4603      	mov	r3, r0
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d001      	beq.n	8009600 <dir_next+0x126>
 80095fc:	2301      	movs	r3, #1
 80095fe:	e04e      	b.n	800969e <dir_next+0x1c4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	899b      	ldrh	r3, [r3, #12]
 800960a:	461a      	mov	r2, r3
 800960c:	2100      	movs	r1, #0
 800960e:	f7fe fe4e 	bl	80082ae <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009612:	2300      	movs	r3, #0
 8009614:	613b      	str	r3, [r7, #16]
 8009616:	6979      	ldr	r1, [r7, #20]
 8009618:	68f8      	ldr	r0, [r7, #12]
 800961a:	f7ff f923 	bl	8008864 <clust2sect>
 800961e:	4602      	mov	r2, r0
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	63da      	str	r2, [r3, #60]	; 0x3c
 8009624:	e012      	b.n	800964c <dir_next+0x172>
						fs->wflag = 1;
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	2201      	movs	r2, #1
 800962a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800962c:	68f8      	ldr	r0, [r7, #12]
 800962e:	f7ff f837 	bl	80086a0 <sync_window>
 8009632:	4603      	mov	r3, r0
 8009634:	2b00      	cmp	r3, #0
 8009636:	d001      	beq.n	800963c <dir_next+0x162>
 8009638:	2301      	movs	r3, #1
 800963a:	e030      	b.n	800969e <dir_next+0x1c4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800963c:	693b      	ldr	r3, [r7, #16]
 800963e:	3301      	adds	r3, #1
 8009640:	613b      	str	r3, [r7, #16]
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009646:	1c5a      	adds	r2, r3, #1
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	63da      	str	r2, [r3, #60]	; 0x3c
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	895b      	ldrh	r3, [r3, #10]
 8009650:	461a      	mov	r2, r3
 8009652:	693b      	ldr	r3, [r7, #16]
 8009654:	4293      	cmp	r3, r2
 8009656:	d3e6      	bcc.n	8009626 <dir_next+0x14c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800965c:	693b      	ldr	r3, [r7, #16]
 800965e:	1ad2      	subs	r2, r2, r3
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	63da      	str	r2, [r3, #60]	; 0x3c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	697a      	ldr	r2, [r7, #20]
 8009668:	635a      	str	r2, [r3, #52]	; 0x34
				dp->sect = clust2sect(fs, clst);
 800966a:	6979      	ldr	r1, [r7, #20]
 800966c:	68f8      	ldr	r0, [r7, #12]
 800966e:	f7ff f8f9 	bl	8008864 <clust2sect>
 8009672:	4602      	mov	r2, r0
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	639a      	str	r2, [r3, #56]	; 0x38
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	68ba      	ldr	r2, [r7, #8]
 800967c:	631a      	str	r2, [r3, #48]	; 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	899b      	ldrh	r3, [r3, #12]
 8009688:	461a      	mov	r2, r3
 800968a:	68bb      	ldr	r3, [r7, #8]
 800968c:	fbb3 f0f2 	udiv	r0, r3, r2
 8009690:	fb02 f200 	mul.w	r2, r2, r0
 8009694:	1a9b      	subs	r3, r3, r2
 8009696:	18ca      	adds	r2, r1, r3
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 800969c:	2300      	movs	r3, #0
}
 800969e:	4618      	mov	r0, r3
 80096a0:	3718      	adds	r7, #24
 80096a2:	46bd      	mov	sp, r7
 80096a4:	bd80      	pop	{r7, pc}

080096a6 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80096a6:	b580      	push	{r7, lr}
 80096a8:	b086      	sub	sp, #24
 80096aa:	af00      	add	r7, sp, #0
 80096ac:	6078      	str	r0, [r7, #4]
 80096ae:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80096b6:	2100      	movs	r1, #0
 80096b8:	6878      	ldr	r0, [r7, #4]
 80096ba:	f7ff fe7a 	bl	80093b2 <dir_sdi>
 80096be:	4603      	mov	r3, r0
 80096c0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80096c2:	7dfb      	ldrb	r3, [r7, #23]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d140      	bne.n	800974a <dir_alloc+0xa4>
		n = 0;
 80096c8:	2300      	movs	r3, #0
 80096ca:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096d0:	4619      	mov	r1, r3
 80096d2:	68f8      	ldr	r0, [r7, #12]
 80096d4:	f7ff f828 	bl	8008728 <move_window>
 80096d8:	4603      	mov	r3, r0
 80096da:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80096dc:	7dfb      	ldrb	r3, [r7, #23]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d132      	bne.n	8009748 <dir_alloc+0xa2>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	781b      	ldrb	r3, [r3, #0]
 80096e6:	2b04      	cmp	r3, #4
 80096e8:	d108      	bne.n	80096fc <dir_alloc+0x56>
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096ee:	781b      	ldrb	r3, [r3, #0]
 80096f0:	b25b      	sxtb	r3, r3
 80096f2:	43db      	mvns	r3, r3
 80096f4:	b2db      	uxtb	r3, r3
 80096f6:	09db      	lsrs	r3, r3, #7
 80096f8:	b2db      	uxtb	r3, r3
 80096fa:	e00f      	b.n	800971c <dir_alloc+0x76>
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009700:	781b      	ldrb	r3, [r3, #0]
 8009702:	2be5      	cmp	r3, #229	; 0xe5
 8009704:	d004      	beq.n	8009710 <dir_alloc+0x6a>
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800970a:	781b      	ldrb	r3, [r3, #0]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d101      	bne.n	8009714 <dir_alloc+0x6e>
 8009710:	2301      	movs	r3, #1
 8009712:	e000      	b.n	8009716 <dir_alloc+0x70>
 8009714:	2300      	movs	r3, #0
 8009716:	f003 0301 	and.w	r3, r3, #1
 800971a:	b2db      	uxtb	r3, r3
 800971c:	2b00      	cmp	r3, #0
 800971e:	d007      	beq.n	8009730 <dir_alloc+0x8a>
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8009720:	693b      	ldr	r3, [r7, #16]
 8009722:	3301      	adds	r3, #1
 8009724:	613b      	str	r3, [r7, #16]
 8009726:	693a      	ldr	r2, [r7, #16]
 8009728:	683b      	ldr	r3, [r7, #0]
 800972a:	429a      	cmp	r2, r3
 800972c:	d102      	bne.n	8009734 <dir_alloc+0x8e>
 800972e:	e00c      	b.n	800974a <dir_alloc+0xa4>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8009730:	2300      	movs	r3, #0
 8009732:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8009734:	2101      	movs	r1, #1
 8009736:	6878      	ldr	r0, [r7, #4]
 8009738:	f7ff fecf 	bl	80094da <dir_next>
 800973c:	4603      	mov	r3, r0
 800973e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8009740:	7dfb      	ldrb	r3, [r7, #23]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d0c2      	beq.n	80096cc <dir_alloc+0x26>
 8009746:	e000      	b.n	800974a <dir_alloc+0xa4>
			if (res != FR_OK) break;
 8009748:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800974a:	7dfb      	ldrb	r3, [r7, #23]
 800974c:	2b04      	cmp	r3, #4
 800974e:	d101      	bne.n	8009754 <dir_alloc+0xae>
 8009750:	2307      	movs	r3, #7
 8009752:	75fb      	strb	r3, [r7, #23]
	return res;
 8009754:	7dfb      	ldrb	r3, [r7, #23]
}
 8009756:	4618      	mov	r0, r3
 8009758:	3718      	adds	r7, #24
 800975a:	46bd      	mov	sp, r7
 800975c:	bd80      	pop	{r7, pc}

0800975e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800975e:	b580      	push	{r7, lr}
 8009760:	b084      	sub	sp, #16
 8009762:	af00      	add	r7, sp, #0
 8009764:	6078      	str	r0, [r7, #4]
 8009766:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8009768:	683b      	ldr	r3, [r7, #0]
 800976a:	331a      	adds	r3, #26
 800976c:	4618      	mov	r0, r3
 800976e:	f7fe fbb7 	bl	8007ee0 <ld_word>
 8009772:	4603      	mov	r3, r0
 8009774:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	781b      	ldrb	r3, [r3, #0]
 800977a:	2b03      	cmp	r3, #3
 800977c:	d109      	bne.n	8009792 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	3314      	adds	r3, #20
 8009782:	4618      	mov	r0, r3
 8009784:	f7fe fbac 	bl	8007ee0 <ld_word>
 8009788:	4603      	mov	r3, r0
 800978a:	041b      	lsls	r3, r3, #16
 800978c:	68fa      	ldr	r2, [r7, #12]
 800978e:	4313      	orrs	r3, r2
 8009790:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8009792:	68fb      	ldr	r3, [r7, #12]
}
 8009794:	4618      	mov	r0, r3
 8009796:	3710      	adds	r7, #16
 8009798:	46bd      	mov	sp, r7
 800979a:	bd80      	pop	{r7, pc}

0800979c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800979c:	b580      	push	{r7, lr}
 800979e:	b084      	sub	sp, #16
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	60f8      	str	r0, [r7, #12]
 80097a4:	60b9      	str	r1, [r7, #8]
 80097a6:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80097a8:	68bb      	ldr	r3, [r7, #8]
 80097aa:	331a      	adds	r3, #26
 80097ac:	687a      	ldr	r2, [r7, #4]
 80097ae:	b292      	uxth	r2, r2
 80097b0:	4611      	mov	r1, r2
 80097b2:	4618      	mov	r0, r3
 80097b4:	f7fe fc8c 	bl	80080d0 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	781b      	ldrb	r3, [r3, #0]
 80097bc:	2b03      	cmp	r3, #3
 80097be:	d109      	bne.n	80097d4 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80097c0:	68bb      	ldr	r3, [r7, #8]
 80097c2:	f103 0214 	add.w	r2, r3, #20
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	0c1b      	lsrs	r3, r3, #16
 80097ca:	b29b      	uxth	r3, r3
 80097cc:	4619      	mov	r1, r3
 80097ce:	4610      	mov	r0, r2
 80097d0:	f7fe fc7e 	bl	80080d0 <st_word>
	}
}
 80097d4:	bf00      	nop
 80097d6:	3710      	adds	r7, #16
 80097d8:	46bd      	mov	sp, r7
 80097da:	bd80      	pop	{r7, pc}

080097dc <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 80097dc:	b590      	push	{r4, r7, lr}
 80097de:	b087      	sub	sp, #28
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
 80097e4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80097e6:	683b      	ldr	r3, [r7, #0]
 80097e8:	331a      	adds	r3, #26
 80097ea:	4618      	mov	r0, r3
 80097ec:	f7fe fb78 	bl	8007ee0 <ld_word>
 80097f0:	4603      	mov	r3, r0
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d001      	beq.n	80097fa <cmp_lfn+0x1e>
 80097f6:	2300      	movs	r3, #0
 80097f8:	e059      	b.n	80098ae <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80097fa:	683b      	ldr	r3, [r7, #0]
 80097fc:	781b      	ldrb	r3, [r3, #0]
 80097fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009802:	1e5a      	subs	r2, r3, #1
 8009804:	4613      	mov	r3, r2
 8009806:	005b      	lsls	r3, r3, #1
 8009808:	4413      	add	r3, r2
 800980a:	009b      	lsls	r3, r3, #2
 800980c:	4413      	add	r3, r2
 800980e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8009810:	2301      	movs	r3, #1
 8009812:	81fb      	strh	r3, [r7, #14]
 8009814:	2300      	movs	r3, #0
 8009816:	613b      	str	r3, [r7, #16]
 8009818:	e033      	b.n	8009882 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800981a:	4a27      	ldr	r2, [pc, #156]	; (80098b8 <cmp_lfn+0xdc>)
 800981c:	693b      	ldr	r3, [r7, #16]
 800981e:	4413      	add	r3, r2
 8009820:	781b      	ldrb	r3, [r3, #0]
 8009822:	461a      	mov	r2, r3
 8009824:	683b      	ldr	r3, [r7, #0]
 8009826:	4413      	add	r3, r2
 8009828:	4618      	mov	r0, r3
 800982a:	f7fe fb59 	bl	8007ee0 <ld_word>
 800982e:	4603      	mov	r3, r0
 8009830:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8009832:	89fb      	ldrh	r3, [r7, #14]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d01a      	beq.n	800986e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8009838:	697b      	ldr	r3, [r7, #20]
 800983a:	2bfe      	cmp	r3, #254	; 0xfe
 800983c:	d812      	bhi.n	8009864 <cmp_lfn+0x88>
 800983e:	89bb      	ldrh	r3, [r7, #12]
 8009840:	4618      	mov	r0, r3
 8009842:	f002 fd83 	bl	800c34c <ff_wtoupper>
 8009846:	4603      	mov	r3, r0
 8009848:	461c      	mov	r4, r3
 800984a:	697b      	ldr	r3, [r7, #20]
 800984c:	1c5a      	adds	r2, r3, #1
 800984e:	617a      	str	r2, [r7, #20]
 8009850:	005b      	lsls	r3, r3, #1
 8009852:	687a      	ldr	r2, [r7, #4]
 8009854:	4413      	add	r3, r2
 8009856:	881b      	ldrh	r3, [r3, #0]
 8009858:	4618      	mov	r0, r3
 800985a:	f002 fd77 	bl	800c34c <ff_wtoupper>
 800985e:	4603      	mov	r3, r0
 8009860:	429c      	cmp	r4, r3
 8009862:	d001      	beq.n	8009868 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8009864:	2300      	movs	r3, #0
 8009866:	e022      	b.n	80098ae <cmp_lfn+0xd2>
			}
			wc = uc;
 8009868:	89bb      	ldrh	r3, [r7, #12]
 800986a:	81fb      	strh	r3, [r7, #14]
 800986c:	e006      	b.n	800987c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800986e:	89bb      	ldrh	r3, [r7, #12]
 8009870:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009874:	4293      	cmp	r3, r2
 8009876:	d001      	beq.n	800987c <cmp_lfn+0xa0>
 8009878:	2300      	movs	r3, #0
 800987a:	e018      	b.n	80098ae <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800987c:	693b      	ldr	r3, [r7, #16]
 800987e:	3301      	adds	r3, #1
 8009880:	613b      	str	r3, [r7, #16]
 8009882:	693b      	ldr	r3, [r7, #16]
 8009884:	2b0c      	cmp	r3, #12
 8009886:	d9c8      	bls.n	800981a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8009888:	683b      	ldr	r3, [r7, #0]
 800988a:	781b      	ldrb	r3, [r3, #0]
 800988c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009890:	2b00      	cmp	r3, #0
 8009892:	d00b      	beq.n	80098ac <cmp_lfn+0xd0>
 8009894:	89fb      	ldrh	r3, [r7, #14]
 8009896:	2b00      	cmp	r3, #0
 8009898:	d008      	beq.n	80098ac <cmp_lfn+0xd0>
 800989a:	697b      	ldr	r3, [r7, #20]
 800989c:	005b      	lsls	r3, r3, #1
 800989e:	687a      	ldr	r2, [r7, #4]
 80098a0:	4413      	add	r3, r2
 80098a2:	881b      	ldrh	r3, [r3, #0]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d001      	beq.n	80098ac <cmp_lfn+0xd0>
 80098a8:	2300      	movs	r3, #0
 80098aa:	e000      	b.n	80098ae <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80098ac:	2301      	movs	r3, #1
}
 80098ae:	4618      	mov	r0, r3
 80098b0:	371c      	adds	r7, #28
 80098b2:	46bd      	mov	sp, r7
 80098b4:	bd90      	pop	{r4, r7, pc}
 80098b6:	bf00      	nop
 80098b8:	0800f388 	.word	0x0800f388

080098bc <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b086      	sub	sp, #24
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
 80098c4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 80098c6:	683b      	ldr	r3, [r7, #0]
 80098c8:	331a      	adds	r3, #26
 80098ca:	4618      	mov	r0, r3
 80098cc:	f7fe fb08 	bl	8007ee0 <ld_word>
 80098d0:	4603      	mov	r3, r0
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d001      	beq.n	80098da <pick_lfn+0x1e>
 80098d6:	2300      	movs	r3, #0
 80098d8:	e04d      	b.n	8009976 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 80098da:	683b      	ldr	r3, [r7, #0]
 80098dc:	781b      	ldrb	r3, [r3, #0]
 80098de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80098e2:	1e5a      	subs	r2, r3, #1
 80098e4:	4613      	mov	r3, r2
 80098e6:	005b      	lsls	r3, r3, #1
 80098e8:	4413      	add	r3, r2
 80098ea:	009b      	lsls	r3, r3, #2
 80098ec:	4413      	add	r3, r2
 80098ee:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80098f0:	2301      	movs	r3, #1
 80098f2:	81fb      	strh	r3, [r7, #14]
 80098f4:	2300      	movs	r3, #0
 80098f6:	613b      	str	r3, [r7, #16]
 80098f8:	e028      	b.n	800994c <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80098fa:	4a21      	ldr	r2, [pc, #132]	; (8009980 <pick_lfn+0xc4>)
 80098fc:	693b      	ldr	r3, [r7, #16]
 80098fe:	4413      	add	r3, r2
 8009900:	781b      	ldrb	r3, [r3, #0]
 8009902:	461a      	mov	r2, r3
 8009904:	683b      	ldr	r3, [r7, #0]
 8009906:	4413      	add	r3, r2
 8009908:	4618      	mov	r0, r3
 800990a:	f7fe fae9 	bl	8007ee0 <ld_word>
 800990e:	4603      	mov	r3, r0
 8009910:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8009912:	89fb      	ldrh	r3, [r7, #14]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d00f      	beq.n	8009938 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8009918:	697b      	ldr	r3, [r7, #20]
 800991a:	2bfe      	cmp	r3, #254	; 0xfe
 800991c:	d901      	bls.n	8009922 <pick_lfn+0x66>
 800991e:	2300      	movs	r3, #0
 8009920:	e029      	b.n	8009976 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8009922:	89bb      	ldrh	r3, [r7, #12]
 8009924:	81fb      	strh	r3, [r7, #14]
 8009926:	697b      	ldr	r3, [r7, #20]
 8009928:	1c5a      	adds	r2, r3, #1
 800992a:	617a      	str	r2, [r7, #20]
 800992c:	005b      	lsls	r3, r3, #1
 800992e:	687a      	ldr	r2, [r7, #4]
 8009930:	4413      	add	r3, r2
 8009932:	89fa      	ldrh	r2, [r7, #14]
 8009934:	801a      	strh	r2, [r3, #0]
 8009936:	e006      	b.n	8009946 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8009938:	89bb      	ldrh	r3, [r7, #12]
 800993a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800993e:	4293      	cmp	r3, r2
 8009940:	d001      	beq.n	8009946 <pick_lfn+0x8a>
 8009942:	2300      	movs	r3, #0
 8009944:	e017      	b.n	8009976 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8009946:	693b      	ldr	r3, [r7, #16]
 8009948:	3301      	adds	r3, #1
 800994a:	613b      	str	r3, [r7, #16]
 800994c:	693b      	ldr	r3, [r7, #16]
 800994e:	2b0c      	cmp	r3, #12
 8009950:	d9d3      	bls.n	80098fa <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 8009952:	683b      	ldr	r3, [r7, #0]
 8009954:	781b      	ldrb	r3, [r3, #0]
 8009956:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800995a:	2b00      	cmp	r3, #0
 800995c:	d00a      	beq.n	8009974 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800995e:	697b      	ldr	r3, [r7, #20]
 8009960:	2bfe      	cmp	r3, #254	; 0xfe
 8009962:	d901      	bls.n	8009968 <pick_lfn+0xac>
 8009964:	2300      	movs	r3, #0
 8009966:	e006      	b.n	8009976 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 8009968:	697b      	ldr	r3, [r7, #20]
 800996a:	005b      	lsls	r3, r3, #1
 800996c:	687a      	ldr	r2, [r7, #4]
 800996e:	4413      	add	r3, r2
 8009970:	2200      	movs	r2, #0
 8009972:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 8009974:	2301      	movs	r3, #1
}
 8009976:	4618      	mov	r0, r3
 8009978:	3718      	adds	r7, #24
 800997a:	46bd      	mov	sp, r7
 800997c:	bd80      	pop	{r7, pc}
 800997e:	bf00      	nop
 8009980:	0800f388 	.word	0x0800f388

08009984 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8009984:	b580      	push	{r7, lr}
 8009986:	b088      	sub	sp, #32
 8009988:	af00      	add	r7, sp, #0
 800998a:	60f8      	str	r0, [r7, #12]
 800998c:	60b9      	str	r1, [r7, #8]
 800998e:	4611      	mov	r1, r2
 8009990:	461a      	mov	r2, r3
 8009992:	460b      	mov	r3, r1
 8009994:	71fb      	strb	r3, [r7, #7]
 8009996:	4613      	mov	r3, r2
 8009998:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800999a:	68bb      	ldr	r3, [r7, #8]
 800999c:	330d      	adds	r3, #13
 800999e:	79ba      	ldrb	r2, [r7, #6]
 80099a0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80099a2:	68bb      	ldr	r3, [r7, #8]
 80099a4:	330b      	adds	r3, #11
 80099a6:	220f      	movs	r2, #15
 80099a8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80099aa:	68bb      	ldr	r3, [r7, #8]
 80099ac:	330c      	adds	r3, #12
 80099ae:	2200      	movs	r2, #0
 80099b0:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80099b2:	68bb      	ldr	r3, [r7, #8]
 80099b4:	331a      	adds	r3, #26
 80099b6:	2100      	movs	r1, #0
 80099b8:	4618      	mov	r0, r3
 80099ba:	f7fe fb89 	bl	80080d0 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80099be:	79fb      	ldrb	r3, [r7, #7]
 80099c0:	1e5a      	subs	r2, r3, #1
 80099c2:	4613      	mov	r3, r2
 80099c4:	005b      	lsls	r3, r3, #1
 80099c6:	4413      	add	r3, r2
 80099c8:	009b      	lsls	r3, r3, #2
 80099ca:	4413      	add	r3, r2
 80099cc:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80099ce:	2300      	movs	r3, #0
 80099d0:	82fb      	strh	r3, [r7, #22]
 80099d2:	2300      	movs	r3, #0
 80099d4:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80099d6:	8afb      	ldrh	r3, [r7, #22]
 80099d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80099dc:	4293      	cmp	r3, r2
 80099de:	d007      	beq.n	80099f0 <put_lfn+0x6c>
 80099e0:	69fb      	ldr	r3, [r7, #28]
 80099e2:	1c5a      	adds	r2, r3, #1
 80099e4:	61fa      	str	r2, [r7, #28]
 80099e6:	005b      	lsls	r3, r3, #1
 80099e8:	68fa      	ldr	r2, [r7, #12]
 80099ea:	4413      	add	r3, r2
 80099ec:	881b      	ldrh	r3, [r3, #0]
 80099ee:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80099f0:	4a17      	ldr	r2, [pc, #92]	; (8009a50 <put_lfn+0xcc>)
 80099f2:	69bb      	ldr	r3, [r7, #24]
 80099f4:	4413      	add	r3, r2
 80099f6:	781b      	ldrb	r3, [r3, #0]
 80099f8:	461a      	mov	r2, r3
 80099fa:	68bb      	ldr	r3, [r7, #8]
 80099fc:	4413      	add	r3, r2
 80099fe:	8afa      	ldrh	r2, [r7, #22]
 8009a00:	4611      	mov	r1, r2
 8009a02:	4618      	mov	r0, r3
 8009a04:	f7fe fb64 	bl	80080d0 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8009a08:	8afb      	ldrh	r3, [r7, #22]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d102      	bne.n	8009a14 <put_lfn+0x90>
 8009a0e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009a12:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8009a14:	69bb      	ldr	r3, [r7, #24]
 8009a16:	3301      	adds	r3, #1
 8009a18:	61bb      	str	r3, [r7, #24]
 8009a1a:	69bb      	ldr	r3, [r7, #24]
 8009a1c:	2b0c      	cmp	r3, #12
 8009a1e:	d9da      	bls.n	80099d6 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8009a20:	8afb      	ldrh	r3, [r7, #22]
 8009a22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009a26:	4293      	cmp	r3, r2
 8009a28:	d006      	beq.n	8009a38 <put_lfn+0xb4>
 8009a2a:	69fb      	ldr	r3, [r7, #28]
 8009a2c:	005b      	lsls	r3, r3, #1
 8009a2e:	68fa      	ldr	r2, [r7, #12]
 8009a30:	4413      	add	r3, r2
 8009a32:	881b      	ldrh	r3, [r3, #0]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d103      	bne.n	8009a40 <put_lfn+0xbc>
 8009a38:	79fb      	ldrb	r3, [r7, #7]
 8009a3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a3e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8009a40:	68bb      	ldr	r3, [r7, #8]
 8009a42:	79fa      	ldrb	r2, [r7, #7]
 8009a44:	701a      	strb	r2, [r3, #0]
}
 8009a46:	bf00      	nop
 8009a48:	3720      	adds	r7, #32
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	bd80      	pop	{r7, pc}
 8009a4e:	bf00      	nop
 8009a50:	0800f388 	.word	0x0800f388

08009a54 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8009a54:	b580      	push	{r7, lr}
 8009a56:	b08c      	sub	sp, #48	; 0x30
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	60f8      	str	r0, [r7, #12]
 8009a5c:	60b9      	str	r1, [r7, #8]
 8009a5e:	607a      	str	r2, [r7, #4]
 8009a60:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8009a62:	220b      	movs	r2, #11
 8009a64:	68b9      	ldr	r1, [r7, #8]
 8009a66:	68f8      	ldr	r0, [r7, #12]
 8009a68:	f7fe fc00 	bl	800826c <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8009a6c:	683b      	ldr	r3, [r7, #0]
 8009a6e:	2b05      	cmp	r3, #5
 8009a70:	d929      	bls.n	8009ac6 <gen_numname+0x72>
		sr = seq;
 8009a72:	683b      	ldr	r3, [r7, #0]
 8009a74:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8009a76:	e020      	b.n	8009aba <gen_numname+0x66>
			wc = *lfn++;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	1c9a      	adds	r2, r3, #2
 8009a7c:	607a      	str	r2, [r7, #4]
 8009a7e:	881b      	ldrh	r3, [r3, #0]
 8009a80:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8009a82:	2300      	movs	r3, #0
 8009a84:	62bb      	str	r3, [r7, #40]	; 0x28
 8009a86:	e015      	b.n	8009ab4 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 8009a88:	69fb      	ldr	r3, [r7, #28]
 8009a8a:	005a      	lsls	r2, r3, #1
 8009a8c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009a8e:	f003 0301 	and.w	r3, r3, #1
 8009a92:	4413      	add	r3, r2
 8009a94:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8009a96:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009a98:	085b      	lsrs	r3, r3, #1
 8009a9a:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8009a9c:	69fb      	ldr	r3, [r7, #28]
 8009a9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d003      	beq.n	8009aae <gen_numname+0x5a>
 8009aa6:	69fa      	ldr	r2, [r7, #28]
 8009aa8:	4b31      	ldr	r3, [pc, #196]	; (8009b70 <gen_numname+0x11c>)
 8009aaa:	4053      	eors	r3, r2
 8009aac:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8009aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ab0:	3301      	adds	r3, #1
 8009ab2:	62bb      	str	r3, [r7, #40]	; 0x28
 8009ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ab6:	2b0f      	cmp	r3, #15
 8009ab8:	d9e6      	bls.n	8009a88 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	881b      	ldrh	r3, [r3, #0]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d1da      	bne.n	8009a78 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8009ac2:	69fb      	ldr	r3, [r7, #28]
 8009ac4:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8009ac6:	2307      	movs	r3, #7
 8009ac8:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	b2db      	uxtb	r3, r3
 8009ace:	f003 030f 	and.w	r3, r3, #15
 8009ad2:	b2db      	uxtb	r3, r3
 8009ad4:	3330      	adds	r3, #48	; 0x30
 8009ad6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8009ada:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009ade:	2b39      	cmp	r3, #57	; 0x39
 8009ae0:	d904      	bls.n	8009aec <gen_numname+0x98>
 8009ae2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009ae6:	3307      	adds	r3, #7
 8009ae8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8009aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aee:	1e5a      	subs	r2, r3, #1
 8009af0:	62ba      	str	r2, [r7, #40]	; 0x28
 8009af2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8009af6:	4413      	add	r3, r2
 8009af8:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8009afc:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8009b00:	683b      	ldr	r3, [r7, #0]
 8009b02:	091b      	lsrs	r3, r3, #4
 8009b04:	603b      	str	r3, [r7, #0]
	} while (seq);
 8009b06:	683b      	ldr	r3, [r7, #0]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d1de      	bne.n	8009aca <gen_numname+0x76>
	ns[i] = '~';
 8009b0c:	f107 0214 	add.w	r2, r7, #20
 8009b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b12:	4413      	add	r3, r2
 8009b14:	227e      	movs	r2, #126	; 0x7e
 8009b16:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8009b18:	2300      	movs	r3, #0
 8009b1a:	627b      	str	r3, [r7, #36]	; 0x24
 8009b1c:	e002      	b.n	8009b24 <gen_numname+0xd0>
 8009b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b20:	3301      	adds	r3, #1
 8009b22:	627b      	str	r3, [r7, #36]	; 0x24
 8009b24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b28:	429a      	cmp	r2, r3
 8009b2a:	d205      	bcs.n	8009b38 <gen_numname+0xe4>
 8009b2c:	68fa      	ldr	r2, [r7, #12]
 8009b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b30:	4413      	add	r3, r2
 8009b32:	781b      	ldrb	r3, [r3, #0]
 8009b34:	2b20      	cmp	r3, #32
 8009b36:	d1f2      	bne.n	8009b1e <gen_numname+0xca>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8009b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b3a:	2b07      	cmp	r3, #7
 8009b3c:	d808      	bhi.n	8009b50 <gen_numname+0xfc>
 8009b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b40:	1c5a      	adds	r2, r3, #1
 8009b42:	62ba      	str	r2, [r7, #40]	; 0x28
 8009b44:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8009b48:	4413      	add	r3, r2
 8009b4a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8009b4e:	e000      	b.n	8009b52 <gen_numname+0xfe>
 8009b50:	2120      	movs	r1, #32
 8009b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b54:	1c5a      	adds	r2, r3, #1
 8009b56:	627a      	str	r2, [r7, #36]	; 0x24
 8009b58:	68fa      	ldr	r2, [r7, #12]
 8009b5a:	4413      	add	r3, r2
 8009b5c:	460a      	mov	r2, r1
 8009b5e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8009b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b62:	2b07      	cmp	r3, #7
 8009b64:	d9e8      	bls.n	8009b38 <gen_numname+0xe4>
}
 8009b66:	bf00      	nop
 8009b68:	3730      	adds	r7, #48	; 0x30
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	bd80      	pop	{r7, pc}
 8009b6e:	bf00      	nop
 8009b70:	00011021 	.word	0x00011021

08009b74 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8009b74:	b480      	push	{r7}
 8009b76:	b085      	sub	sp, #20
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8009b7c:	2300      	movs	r3, #0
 8009b7e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8009b80:	230b      	movs	r3, #11
 8009b82:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8009b84:	7bfb      	ldrb	r3, [r7, #15]
 8009b86:	b2da      	uxtb	r2, r3
 8009b88:	0852      	lsrs	r2, r2, #1
 8009b8a:	01db      	lsls	r3, r3, #7
 8009b8c:	4313      	orrs	r3, r2
 8009b8e:	b2da      	uxtb	r2, r3
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	1c59      	adds	r1, r3, #1
 8009b94:	6079      	str	r1, [r7, #4]
 8009b96:	781b      	ldrb	r3, [r3, #0]
 8009b98:	4413      	add	r3, r2
 8009b9a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8009b9c:	68bb      	ldr	r3, [r7, #8]
 8009b9e:	3b01      	subs	r3, #1
 8009ba0:	60bb      	str	r3, [r7, #8]
 8009ba2:	68bb      	ldr	r3, [r7, #8]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d1ed      	bne.n	8009b84 <sum_sfn+0x10>
	return sum;
 8009ba8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009baa:	4618      	mov	r0, r3
 8009bac:	3714      	adds	r7, #20
 8009bae:	46bd      	mov	sp, r7
 8009bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb4:	4770      	bx	lr

08009bb6 <xdir_sum>:

static
WORD xdir_sum (			/* Get checksum of the directoly block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 8009bb6:	b480      	push	{r7}
 8009bb8:	b087      	sub	sp, #28
 8009bba:	af00      	add	r7, sp, #0
 8009bbc:	6078      	str	r0, [r7, #4]
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	3301      	adds	r3, #1
 8009bc2:	781b      	ldrb	r3, [r3, #0]
 8009bc4:	3301      	adds	r3, #1
 8009bc6:	015b      	lsls	r3, r3, #5
 8009bc8:	60fb      	str	r3, [r7, #12]
	for (i = sum = 0; i < szblk; i++) {
 8009bca:	2300      	movs	r3, #0
 8009bcc:	827b      	strh	r3, [r7, #18]
 8009bce:	2300      	movs	r3, #0
 8009bd0:	617b      	str	r3, [r7, #20]
 8009bd2:	e018      	b.n	8009c06 <xdir_sum+0x50>
		if (i == XDIR_SetSum) {	/* Skip sum field */
 8009bd4:	697b      	ldr	r3, [r7, #20]
 8009bd6:	2b02      	cmp	r3, #2
 8009bd8:	d103      	bne.n	8009be2 <xdir_sum+0x2c>
			i++;
 8009bda:	697b      	ldr	r3, [r7, #20]
 8009bdc:	3301      	adds	r3, #1
 8009bde:	617b      	str	r3, [r7, #20]
 8009be0:	e00e      	b.n	8009c00 <xdir_sum+0x4a>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 8009be2:	8a7b      	ldrh	r3, [r7, #18]
 8009be4:	03db      	lsls	r3, r3, #15
 8009be6:	b29a      	uxth	r2, r3
 8009be8:	8a7b      	ldrh	r3, [r7, #18]
 8009bea:	085b      	lsrs	r3, r3, #1
 8009bec:	b29b      	uxth	r3, r3
 8009bee:	4413      	add	r3, r2
 8009bf0:	b29a      	uxth	r2, r3
 8009bf2:	6879      	ldr	r1, [r7, #4]
 8009bf4:	697b      	ldr	r3, [r7, #20]
 8009bf6:	440b      	add	r3, r1
 8009bf8:	781b      	ldrb	r3, [r3, #0]
 8009bfa:	b29b      	uxth	r3, r3
 8009bfc:	4413      	add	r3, r2
 8009bfe:	827b      	strh	r3, [r7, #18]
	for (i = sum = 0; i < szblk; i++) {
 8009c00:	697b      	ldr	r3, [r7, #20]
 8009c02:	3301      	adds	r3, #1
 8009c04:	617b      	str	r3, [r7, #20]
 8009c06:	697a      	ldr	r2, [r7, #20]
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	429a      	cmp	r2, r3
 8009c0c:	d3e2      	bcc.n	8009bd4 <xdir_sum+0x1e>
		}
	}
	return sum;
 8009c0e:	8a7b      	ldrh	r3, [r7, #18]
}
 8009c10:	4618      	mov	r0, r3
 8009c12:	371c      	adds	r7, #28
 8009c14:	46bd      	mov	sp, r7
 8009c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1a:	4770      	bx	lr

08009c1c <xname_sum>:

static
WORD xname_sum (		/* Get check sum (to be used as hash) of the name */
	const WCHAR* name	/* File name to be calculated */
)
{
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b084      	sub	sp, #16
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
	WCHAR chr;
	WORD sum = 0;
 8009c24:	2300      	movs	r3, #0
 8009c26:	81fb      	strh	r3, [r7, #14]


	while ((chr = *name++) != 0) {
 8009c28:	e01f      	b.n	8009c6a <xname_sum+0x4e>
		chr = ff_wtoupper(chr);		/* File name needs to be ignored case */
 8009c2a:	89bb      	ldrh	r3, [r7, #12]
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	f002 fb8d 	bl	800c34c <ff_wtoupper>
 8009c32:	4603      	mov	r3, r0
 8009c34:	81bb      	strh	r3, [r7, #12]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 8009c36:	89fb      	ldrh	r3, [r7, #14]
 8009c38:	03db      	lsls	r3, r3, #15
 8009c3a:	b29a      	uxth	r2, r3
 8009c3c:	89fb      	ldrh	r3, [r7, #14]
 8009c3e:	085b      	lsrs	r3, r3, #1
 8009c40:	b29b      	uxth	r3, r3
 8009c42:	4413      	add	r3, r2
 8009c44:	b29a      	uxth	r2, r3
 8009c46:	89bb      	ldrh	r3, [r7, #12]
 8009c48:	b2db      	uxtb	r3, r3
 8009c4a:	b29b      	uxth	r3, r3
 8009c4c:	4413      	add	r3, r2
 8009c4e:	81fb      	strh	r3, [r7, #14]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 8009c50:	89fb      	ldrh	r3, [r7, #14]
 8009c52:	03db      	lsls	r3, r3, #15
 8009c54:	b29a      	uxth	r2, r3
 8009c56:	89fb      	ldrh	r3, [r7, #14]
 8009c58:	085b      	lsrs	r3, r3, #1
 8009c5a:	b29b      	uxth	r3, r3
 8009c5c:	4413      	add	r3, r2
 8009c5e:	b29a      	uxth	r2, r3
 8009c60:	89bb      	ldrh	r3, [r7, #12]
 8009c62:	0a1b      	lsrs	r3, r3, #8
 8009c64:	b29b      	uxth	r3, r3
 8009c66:	4413      	add	r3, r2
 8009c68:	81fb      	strh	r3, [r7, #14]
	while ((chr = *name++) != 0) {
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	1c9a      	adds	r2, r3, #2
 8009c6e:	607a      	str	r2, [r7, #4]
 8009c70:	881b      	ldrh	r3, [r3, #0]
 8009c72:	81bb      	strh	r3, [r7, #12]
 8009c74:	89bb      	ldrh	r3, [r7, #12]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d1d7      	bne.n	8009c2a <xname_sum+0xe>
	}
	return sum;
 8009c7a:	89fb      	ldrh	r3, [r7, #14]
}
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	3710      	adds	r7, #16
 8009c80:	46bd      	mov	sp, r7
 8009c82:	bd80      	pop	{r7, pc}

08009c84 <load_xdir>:

static
FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
	DIR* dp			/* Pointer to the reading direcotry object pointing the 85 entry */
)
{
 8009c84:	b590      	push	{r4, r7, lr}
 8009c86:	b087      	sub	sp, #28
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT i, sz_ent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	695b      	ldr	r3, [r3, #20]
 8009c92:	613b      	str	r3, [r7, #16]


	/* Load 85 entry */
	res = move_window(dp->obj.fs, dp->sect);
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681a      	ldr	r2, [r3, #0]
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c9c:	4619      	mov	r1, r3
 8009c9e:	4610      	mov	r0, r2
 8009ca0:	f7fe fd42 	bl	8008728 <move_window>
 8009ca4:	4603      	mov	r3, r0
 8009ca6:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 8009ca8:	7bfb      	ldrb	r3, [r7, #15]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d001      	beq.n	8009cb2 <load_xdir+0x2e>
 8009cae:	7bfb      	ldrb	r3, [r7, #15]
 8009cb0:	e09f      	b.n	8009df2 <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009cb6:	781b      	ldrb	r3, [r3, #0]
 8009cb8:	2b85      	cmp	r3, #133	; 0x85
 8009cba:	d001      	beq.n	8009cc0 <load_xdir+0x3c>
 8009cbc:	2302      	movs	r3, #2
 8009cbe:	e098      	b.n	8009df2 <load_xdir+0x16e>
	mem_cpy(dirb + 0, dp->dir, SZDIRE);
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009cc4:	2220      	movs	r2, #32
 8009cc6:	4619      	mov	r1, r3
 8009cc8:	6938      	ldr	r0, [r7, #16]
 8009cca:	f7fe facf 	bl	800826c <mem_cpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 8009cce:	693b      	ldr	r3, [r7, #16]
 8009cd0:	3301      	adds	r3, #1
 8009cd2:	781b      	ldrb	r3, [r3, #0]
 8009cd4:	3301      	adds	r3, #1
 8009cd6:	015b      	lsls	r3, r3, #5
 8009cd8:	60bb      	str	r3, [r7, #8]
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 8009cda:	68bb      	ldr	r3, [r7, #8]
 8009cdc:	2b5f      	cmp	r3, #95	; 0x5f
 8009cde:	d903      	bls.n	8009ce8 <load_xdir+0x64>
 8009ce0:	68bb      	ldr	r3, [r7, #8]
 8009ce2:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 8009ce6:	d901      	bls.n	8009cec <load_xdir+0x68>
 8009ce8:	2302      	movs	r3, #2
 8009cea:	e082      	b.n	8009df2 <load_xdir+0x16e>

	/* Load C0 entry */
	res = dir_next(dp, 0);
 8009cec:	2100      	movs	r1, #0
 8009cee:	6878      	ldr	r0, [r7, #4]
 8009cf0:	f7ff fbf3 	bl	80094da <dir_next>
 8009cf4:	4603      	mov	r3, r0
 8009cf6:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 8009cf8:	7bfb      	ldrb	r3, [r7, #15]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d001      	beq.n	8009d02 <load_xdir+0x7e>
 8009cfe:	7bfb      	ldrb	r3, [r7, #15]
 8009d00:	e077      	b.n	8009df2 <load_xdir+0x16e>
	res = move_window(dp->obj.fs, dp->sect);
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681a      	ldr	r2, [r3, #0]
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d0a:	4619      	mov	r1, r3
 8009d0c:	4610      	mov	r0, r2
 8009d0e:	f7fe fd0b 	bl	8008728 <move_window>
 8009d12:	4603      	mov	r3, r0
 8009d14:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 8009d16:	7bfb      	ldrb	r3, [r7, #15]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d001      	beq.n	8009d20 <load_xdir+0x9c>
 8009d1c:	7bfb      	ldrb	r3, [r7, #15]
 8009d1e:	e068      	b.n	8009df2 <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d24:	781b      	ldrb	r3, [r3, #0]
 8009d26:	2bc0      	cmp	r3, #192	; 0xc0
 8009d28:	d001      	beq.n	8009d2e <load_xdir+0xaa>
 8009d2a:	2302      	movs	r3, #2
 8009d2c:	e061      	b.n	8009df2 <load_xdir+0x16e>
	mem_cpy(dirb + SZDIRE, dp->dir, SZDIRE);
 8009d2e:	693b      	ldr	r3, [r7, #16]
 8009d30:	f103 0020 	add.w	r0, r3, #32
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d38:	2220      	movs	r2, #32
 8009d3a:	4619      	mov	r1, r3
 8009d3c:	f7fe fa96 	bl	800826c <mem_cpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 8009d40:	693b      	ldr	r3, [r7, #16]
 8009d42:	3323      	adds	r3, #35	; 0x23
 8009d44:	781b      	ldrb	r3, [r3, #0]
 8009d46:	332c      	adds	r3, #44	; 0x2c
 8009d48:	4a2c      	ldr	r2, [pc, #176]	; (8009dfc <load_xdir+0x178>)
 8009d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8009d4e:	08db      	lsrs	r3, r3, #3
 8009d50:	015b      	lsls	r3, r3, #5
 8009d52:	68ba      	ldr	r2, [r7, #8]
 8009d54:	429a      	cmp	r2, r3
 8009d56:	d201      	bcs.n	8009d5c <load_xdir+0xd8>
 8009d58:	2302      	movs	r3, #2
 8009d5a:	e04a      	b.n	8009df2 <load_xdir+0x16e>

	/* Load C1 entries */
	i = SZDIRE * 2;	/* C1 offset */
 8009d5c:	2340      	movs	r3, #64	; 0x40
 8009d5e:	617b      	str	r3, [r7, #20]
	do {
		res = dir_next(dp, 0);
 8009d60:	2100      	movs	r1, #0
 8009d62:	6878      	ldr	r0, [r7, #4]
 8009d64:	f7ff fbb9 	bl	80094da <dir_next>
 8009d68:	4603      	mov	r3, r0
 8009d6a:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 8009d6c:	7bfb      	ldrb	r3, [r7, #15]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d001      	beq.n	8009d76 <load_xdir+0xf2>
 8009d72:	7bfb      	ldrb	r3, [r7, #15]
 8009d74:	e03d      	b.n	8009df2 <load_xdir+0x16e>
		res = move_window(dp->obj.fs, dp->sect);
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681a      	ldr	r2, [r3, #0]
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d7e:	4619      	mov	r1, r3
 8009d80:	4610      	mov	r0, r2
 8009d82:	f7fe fcd1 	bl	8008728 <move_window>
 8009d86:	4603      	mov	r3, r0
 8009d88:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 8009d8a:	7bfb      	ldrb	r3, [r7, #15]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d001      	beq.n	8009d94 <load_xdir+0x110>
 8009d90:	7bfb      	ldrb	r3, [r7, #15]
 8009d92:	e02e      	b.n	8009df2 <load_xdir+0x16e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d98:	781b      	ldrb	r3, [r3, #0]
 8009d9a:	2bc1      	cmp	r3, #193	; 0xc1
 8009d9c:	d001      	beq.n	8009da2 <load_xdir+0x11e>
 8009d9e:	2302      	movs	r3, #2
 8009da0:	e027      	b.n	8009df2 <load_xdir+0x16e>
		if (i < MAXDIRB(_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
 8009da2:	697b      	ldr	r3, [r7, #20]
 8009da4:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 8009da8:	d208      	bcs.n	8009dbc <load_xdir+0x138>
 8009daa:	693a      	ldr	r2, [r7, #16]
 8009dac:	697b      	ldr	r3, [r7, #20]
 8009dae:	18d0      	adds	r0, r2, r3
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009db4:	2220      	movs	r2, #32
 8009db6:	4619      	mov	r1, r3
 8009db8:	f7fe fa58 	bl	800826c <mem_cpy>
	} while ((i += SZDIRE) < sz_ent);
 8009dbc:	697b      	ldr	r3, [r7, #20]
 8009dbe:	3320      	adds	r3, #32
 8009dc0:	617b      	str	r3, [r7, #20]
 8009dc2:	697a      	ldr	r2, [r7, #20]
 8009dc4:	68bb      	ldr	r3, [r7, #8]
 8009dc6:	429a      	cmp	r2, r3
 8009dc8:	d3ca      	bcc.n	8009d60 <load_xdir+0xdc>

	/* Sanity check (do it when accessible object name) */
	if (i <= MAXDIRB(_MAX_LFN)) {
 8009dca:	697b      	ldr	r3, [r7, #20]
 8009dcc:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 8009dd0:	d80e      	bhi.n	8009df0 <load_xdir+0x16c>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 8009dd2:	6938      	ldr	r0, [r7, #16]
 8009dd4:	f7ff feef 	bl	8009bb6 <xdir_sum>
 8009dd8:	4603      	mov	r3, r0
 8009dda:	461c      	mov	r4, r3
 8009ddc:	693b      	ldr	r3, [r7, #16]
 8009dde:	3302      	adds	r3, #2
 8009de0:	4618      	mov	r0, r3
 8009de2:	f7fe f87d 	bl	8007ee0 <ld_word>
 8009de6:	4603      	mov	r3, r0
 8009de8:	429c      	cmp	r4, r3
 8009dea:	d001      	beq.n	8009df0 <load_xdir+0x16c>
 8009dec:	2302      	movs	r3, #2
 8009dee:	e000      	b.n	8009df2 <load_xdir+0x16e>
	}
	return FR_OK;
 8009df0:	2300      	movs	r3, #0
}
 8009df2:	4618      	mov	r0, r3
 8009df4:	371c      	adds	r7, #28
 8009df6:	46bd      	mov	sp, r7
 8009df8:	bd90      	pop	{r4, r7, pc}
 8009dfa:	bf00      	nop
 8009dfc:	88888889 	.word	0x88888889

08009e00 <load_obj_dir>:
static
FRESULT load_obj_dir (
	DIR* dp,			/* Blank directory object to be used to access containing direcotry */
	const _FDID* obj	/* Object with its containing directory information */
)
{
 8009e00:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8009e04:	b084      	sub	sp, #16
 8009e06:	af00      	add	r7, sp, #0
 8009e08:	6078      	str	r0, [r7, #4]
 8009e0a:	6039      	str	r1, [r7, #0]
	FRESULT res;

	/* Open object containing directory */
	dp->obj.fs = obj->fs;
 8009e0c:	683b      	ldr	r3, [r7, #0]
 8009e0e:	681a      	ldr	r2, [r3, #0]
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	601a      	str	r2, [r3, #0]
	dp->obj.sclust = obj->c_scl;
 8009e14:	683b      	ldr	r3, [r7, #0]
 8009e16:	6a1a      	ldr	r2, [r3, #32]
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	609a      	str	r2, [r3, #8]
	dp->obj.stat = (BYTE)obj->c_size;
 8009e1c:	683b      	ldr	r3, [r7, #0]
 8009e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e20:	b2da      	uxtb	r2, r3
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	71da      	strb	r2, [r3, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 8009e26:	683b      	ldr	r3, [r7, #0]
 8009e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e2a:	469b      	mov	fp, r3
 8009e2c:	f04f 0c00 	mov.w	ip, #0
 8009e30:	f06f 01ff 	mvn.w	r1, #255	; 0xff
 8009e34:	f04f 0200 	mov.w	r2, #0
 8009e38:	ea0b 0301 	and.w	r3, fp, r1
 8009e3c:	ea0c 0402 	and.w	r4, ip, r2
 8009e40:	687a      	ldr	r2, [r7, #4]
 8009e42:	e9c2 3404 	strd	r3, r4, [r2, #16]
	dp->blk_ofs = obj->c_ofs;
 8009e46:	683b      	ldr	r3, [r7, #0]
 8009e48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	64da      	str	r2, [r3, #76]	; 0x4c

	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e52:	4619      	mov	r1, r3
 8009e54:	6878      	ldr	r0, [r7, #4]
 8009e56:	f7ff faac 	bl	80093b2 <dir_sdi>
 8009e5a:	4603      	mov	r3, r0
 8009e5c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8009e5e:	7bfb      	ldrb	r3, [r7, #15]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d104      	bne.n	8009e6e <load_obj_dir+0x6e>
		res = load_xdir(dp);		/* Load the object's entry block */
 8009e64:	6878      	ldr	r0, [r7, #4]
 8009e66:	f7ff ff0d 	bl	8009c84 <load_xdir>
 8009e6a:	4603      	mov	r3, r0
 8009e6c:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 8009e6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e70:	4618      	mov	r0, r3
 8009e72:	3710      	adds	r7, #16
 8009e74:	46bd      	mov	sp, r7
 8009e76:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08009e7a <store_xdir>:
/*-----------------------------------------------*/
static
FRESULT store_xdir (
	DIR* dp				/* Pointer to the direcotry object */
)
{
 8009e7a:	b590      	push	{r4, r7, lr}
 8009e7c:	b087      	sub	sp, #28
 8009e7e:	af00      	add	r7, sp, #0
 8009e80:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT nent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	695b      	ldr	r3, [r3, #20]
 8009e88:	60fb      	str	r3, [r7, #12]

	/* Create set sum */
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	1c9c      	adds	r4, r3, #2
 8009e8e:	68f8      	ldr	r0, [r7, #12]
 8009e90:	f7ff fe91 	bl	8009bb6 <xdir_sum>
 8009e94:	4603      	mov	r3, r0
 8009e96:	4619      	mov	r1, r3
 8009e98:	4620      	mov	r0, r4
 8009e9a:	f7fe f919 	bl	80080d0 <st_word>
	nent = dirb[XDIR_NumSec] + 1;
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	3301      	adds	r3, #1
 8009ea2:	781b      	ldrb	r3, [r3, #0]
 8009ea4:	3301      	adds	r3, #1
 8009ea6:	613b      	str	r3, [r7, #16]

	/* Store the set of directory to the volume */
	res = dir_sdi(dp, dp->blk_ofs);
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009eac:	4619      	mov	r1, r3
 8009eae:	6878      	ldr	r0, [r7, #4]
 8009eb0:	f7ff fa7f 	bl	80093b2 <dir_sdi>
 8009eb4:	4603      	mov	r3, r0
 8009eb6:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 8009eb8:	e026      	b.n	8009f08 <store_xdir+0x8e>
		res = move_window(dp->obj.fs, dp->sect);
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681a      	ldr	r2, [r3, #0]
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ec2:	4619      	mov	r1, r3
 8009ec4:	4610      	mov	r0, r2
 8009ec6:	f7fe fc2f 	bl	8008728 <move_window>
 8009eca:	4603      	mov	r3, r0
 8009ecc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009ece:	7dfb      	ldrb	r3, [r7, #23]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d11d      	bne.n	8009f10 <store_xdir+0x96>
		mem_cpy(dp->dir, dirb, SZDIRE);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ed8:	2220      	movs	r2, #32
 8009eda:	68f9      	ldr	r1, [r7, #12]
 8009edc:	4618      	mov	r0, r3
 8009ede:	f7fe f9c5 	bl	800826c <mem_cpy>
		dp->obj.fs->wflag = 1;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	2201      	movs	r2, #1
 8009ee8:	70da      	strb	r2, [r3, #3]
		if (--nent == 0) break;
 8009eea:	693b      	ldr	r3, [r7, #16]
 8009eec:	3b01      	subs	r3, #1
 8009eee:	613b      	str	r3, [r7, #16]
 8009ef0:	693b      	ldr	r3, [r7, #16]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d00e      	beq.n	8009f14 <store_xdir+0x9a>
		dirb += SZDIRE;
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	3320      	adds	r3, #32
 8009efa:	60fb      	str	r3, [r7, #12]
		res = dir_next(dp, 0);
 8009efc:	2100      	movs	r1, #0
 8009efe:	6878      	ldr	r0, [r7, #4]
 8009f00:	f7ff faeb 	bl	80094da <dir_next>
 8009f04:	4603      	mov	r3, r0
 8009f06:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 8009f08:	7dfb      	ldrb	r3, [r7, #23]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d0d5      	beq.n	8009eba <store_xdir+0x40>
 8009f0e:	e002      	b.n	8009f16 <store_xdir+0x9c>
		if (res != FR_OK) break;
 8009f10:	bf00      	nop
 8009f12:	e000      	b.n	8009f16 <store_xdir+0x9c>
		if (--nent == 0) break;
 8009f14:	bf00      	nop
	}
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 8009f16:	7dfb      	ldrb	r3, [r7, #23]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d002      	beq.n	8009f22 <store_xdir+0xa8>
 8009f1c:	7dfb      	ldrb	r3, [r7, #23]
 8009f1e:	2b01      	cmp	r3, #1
 8009f20:	d101      	bne.n	8009f26 <store_xdir+0xac>
 8009f22:	7dfb      	ldrb	r3, [r7, #23]
 8009f24:	e000      	b.n	8009f28 <store_xdir+0xae>
 8009f26:	2302      	movs	r3, #2
}
 8009f28:	4618      	mov	r0, r3
 8009f2a:	371c      	adds	r7, #28
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	bd90      	pop	{r4, r7, pc}

08009f30 <create_xdir>:
static
void create_xdir (
	BYTE* dirb,			/* Pointer to the direcotry entry block buffer */
	const WCHAR* lfn	/* Pointer to the nul terminated file name */
)
{
 8009f30:	b590      	push	{r4, r7, lr}
 8009f32:	b085      	sub	sp, #20
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
 8009f38:	6039      	str	r1, [r7, #0]
	BYTE nb, nc;
	WCHAR chr;


	/* Create 85+C0 entry */
	mem_set(dirb, 0, 2 * SZDIRE);
 8009f3a:	2240      	movs	r2, #64	; 0x40
 8009f3c:	2100      	movs	r1, #0
 8009f3e:	6878      	ldr	r0, [r7, #4]
 8009f40:	f7fe f9b5 	bl	80082ae <mem_set>
	dirb[XDIR_Type] = 0x85;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	2285      	movs	r2, #133	; 0x85
 8009f48:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_Type + SZDIRE] = 0xC0;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	3320      	adds	r3, #32
 8009f4e:	22c0      	movs	r2, #192	; 0xc0
 8009f50:	701a      	strb	r2, [r3, #0]

	/* Create C1 entries */
	nc = 0; nb = 1; chr = 1; i = SZDIRE * 2;
 8009f52:	2300      	movs	r3, #0
 8009f54:	72bb      	strb	r3, [r7, #10]
 8009f56:	2301      	movs	r3, #1
 8009f58:	72fb      	strb	r3, [r7, #11]
 8009f5a:	2301      	movs	r3, #1
 8009f5c:	813b      	strh	r3, [r7, #8]
 8009f5e:	2340      	movs	r3, #64	; 0x40
 8009f60:	60fb      	str	r3, [r7, #12]
	do {
		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	1c5a      	adds	r2, r3, #1
 8009f66:	60fa      	str	r2, [r7, #12]
 8009f68:	687a      	ldr	r2, [r7, #4]
 8009f6a:	4413      	add	r3, r2
 8009f6c:	22c1      	movs	r2, #193	; 0xc1
 8009f6e:	701a      	strb	r2, [r3, #0]
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	1c5a      	adds	r2, r3, #1
 8009f74:	60fa      	str	r2, [r7, #12]
 8009f76:	687a      	ldr	r2, [r7, #4]
 8009f78:	4413      	add	r3, r2
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	701a      	strb	r2, [r3, #0]
		do {	/* Fill name field */
			if (chr && (chr = lfn[nc]) != 0) nc++;	/* Get a character if exist */
 8009f7e:	893b      	ldrh	r3, [r7, #8]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d00b      	beq.n	8009f9c <create_xdir+0x6c>
 8009f84:	7abb      	ldrb	r3, [r7, #10]
 8009f86:	005b      	lsls	r3, r3, #1
 8009f88:	683a      	ldr	r2, [r7, #0]
 8009f8a:	4413      	add	r3, r2
 8009f8c:	881b      	ldrh	r3, [r3, #0]
 8009f8e:	813b      	strh	r3, [r7, #8]
 8009f90:	893b      	ldrh	r3, [r7, #8]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d002      	beq.n	8009f9c <create_xdir+0x6c>
 8009f96:	7abb      	ldrb	r3, [r7, #10]
 8009f98:	3301      	adds	r3, #1
 8009f9a:	72bb      	strb	r3, [r7, #10]
			st_word(dirb + i, chr); 		/* Store it */
 8009f9c:	687a      	ldr	r2, [r7, #4]
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	4413      	add	r3, r2
 8009fa2:	893a      	ldrh	r2, [r7, #8]
 8009fa4:	4611      	mov	r1, r2
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	f7fe f892 	bl	80080d0 <st_word>
		} while ((i += 2) % SZDIRE != 0);
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	3302      	adds	r3, #2
 8009fb0:	60fb      	str	r3, [r7, #12]
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	f003 031f 	and.w	r3, r3, #31
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d1e0      	bne.n	8009f7e <create_xdir+0x4e>
		nb++;
 8009fbc:	7afb      	ldrb	r3, [r7, #11]
 8009fbe:	3301      	adds	r3, #1
 8009fc0:	72fb      	strb	r3, [r7, #11]
	} while (lfn[nc]);	/* Fill next entry if any char follows */
 8009fc2:	7abb      	ldrb	r3, [r7, #10]
 8009fc4:	005b      	lsls	r3, r3, #1
 8009fc6:	683a      	ldr	r2, [r7, #0]
 8009fc8:	4413      	add	r3, r2
 8009fca:	881b      	ldrh	r3, [r3, #0]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d1c8      	bne.n	8009f62 <create_xdir+0x32>

	dirb[XDIR_NumName] = nc;	/* Set name length */
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	3323      	adds	r3, #35	; 0x23
 8009fd4:	7aba      	ldrb	r2, [r7, #10]
 8009fd6:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_NumSec] = nb;		/* Set block length */
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	3301      	adds	r3, #1
 8009fdc:	7afa      	ldrb	r2, [r7, #11]
 8009fde:	701a      	strb	r2, [r3, #0]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	f103 0424 	add.w	r4, r3, #36	; 0x24
 8009fe6:	6838      	ldr	r0, [r7, #0]
 8009fe8:	f7ff fe18 	bl	8009c1c <xname_sum>
 8009fec:	4603      	mov	r3, r0
 8009fee:	4619      	mov	r1, r3
 8009ff0:	4620      	mov	r0, r4
 8009ff2:	f7fe f86d 	bl	80080d0 <st_word>
}
 8009ff6:	bf00      	nop
 8009ff8:	3714      	adds	r7, #20
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	bd90      	pop	{r4, r7, pc}

08009ffe <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8009ffe:	b580      	push	{r7, lr}
 800a000:	b086      	sub	sp, #24
 800a002:	af00      	add	r7, sp, #0
 800a004:	6078      	str	r0, [r7, #4]
 800a006:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800a008:	2304      	movs	r3, #4
 800a00a:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800a012:	23ff      	movs	r3, #255	; 0xff
 800a014:	757b      	strb	r3, [r7, #21]
 800a016:	23ff      	movs	r3, #255	; 0xff
 800a018:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800a01a:	e09f      	b.n	800a15c <dir_read+0x15e>
		res = move_window(fs, dp->sect);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a020:	4619      	mov	r1, r3
 800a022:	6938      	ldr	r0, [r7, #16]
 800a024:	f7fe fb80 	bl	8008728 <move_window>
 800a028:	4603      	mov	r3, r0
 800a02a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800a02c:	7dfb      	ldrb	r3, [r7, #23]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	f040 809a 	bne.w	800a168 <dir_read+0x16a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a038:	781b      	ldrb	r3, [r3, #0]
 800a03a:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800a03c:	7dbb      	ldrb	r3, [r7, #22]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d102      	bne.n	800a048 <dir_read+0x4a>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800a042:	2304      	movs	r3, #4
 800a044:	75fb      	strb	r3, [r7, #23]
 800a046:	e096      	b.n	800a176 <dir_read+0x178>
		}
#if _FS_EXFAT
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800a048:	693b      	ldr	r3, [r7, #16]
 800a04a:	781b      	ldrb	r3, [r3, #0]
 800a04c:	2b04      	cmp	r3, #4
 800a04e:	d118      	bne.n	800a082 <dir_read+0x84>
			if (_USE_LABEL && vol) {
				if (c == 0x83) break;	/* Volume label entry? */
			} else {
				if (c == 0x85) {		/* Start of the file entry block? */
 800a050:	7dbb      	ldrb	r3, [r7, #22]
 800a052:	2b85      	cmp	r3, #133	; 0x85
 800a054:	d179      	bne.n	800a14a <dir_read+0x14c>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	64da      	str	r2, [r3, #76]	; 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 800a05e:	6878      	ldr	r0, [r7, #4]
 800a060:	f7ff fe10 	bl	8009c84 <load_xdir>
 800a064:	4603      	mov	r3, r0
 800a066:	75fb      	strb	r3, [r7, #23]
					if (res == FR_OK) {
 800a068:	7dfb      	ldrb	r3, [r7, #23]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d17e      	bne.n	800a16c <dir_read+0x16e>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 800a06e:	693b      	ldr	r3, [r7, #16]
 800a070:	695b      	ldr	r3, [r3, #20]
 800a072:	3304      	adds	r3, #4
 800a074:	781b      	ldrb	r3, [r3, #0]
 800a076:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a07a:	b2da      	uxtb	r2, r3
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	719a      	strb	r2, [r3, #6]
					}
					break;
 800a080:	e074      	b.n	800a16c <dir_read+0x16e>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a086:	330b      	adds	r3, #11
 800a088:	781b      	ldrb	r3, [r3, #0]
 800a08a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a08e:	73fb      	strb	r3, [r7, #15]
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	7bfa      	ldrb	r2, [r7, #15]
 800a094:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800a096:	7dbb      	ldrb	r3, [r7, #22]
 800a098:	2be5      	cmp	r3, #229	; 0xe5
 800a09a:	d00e      	beq.n	800a0ba <dir_read+0xbc>
 800a09c:	7dbb      	ldrb	r3, [r7, #22]
 800a09e:	2b2e      	cmp	r3, #46	; 0x2e
 800a0a0:	d00b      	beq.n	800a0ba <dir_read+0xbc>
 800a0a2:	7bfb      	ldrb	r3, [r7, #15]
 800a0a4:	f023 0320 	bic.w	r3, r3, #32
 800a0a8:	2b08      	cmp	r3, #8
 800a0aa:	bf0c      	ite	eq
 800a0ac:	2301      	moveq	r3, #1
 800a0ae:	2300      	movne	r3, #0
 800a0b0:	b2db      	uxtb	r3, r3
 800a0b2:	461a      	mov	r2, r3
 800a0b4:	683b      	ldr	r3, [r7, #0]
 800a0b6:	4293      	cmp	r3, r2
 800a0b8:	d002      	beq.n	800a0c0 <dir_read+0xc2>
				ord = 0xFF;
 800a0ba:	23ff      	movs	r3, #255	; 0xff
 800a0bc:	757b      	strb	r3, [r7, #21]
 800a0be:	e044      	b.n	800a14a <dir_read+0x14c>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800a0c0:	7bfb      	ldrb	r3, [r7, #15]
 800a0c2:	2b0f      	cmp	r3, #15
 800a0c4:	d12f      	bne.n	800a126 <dir_read+0x128>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800a0c6:	7dbb      	ldrb	r3, [r7, #22]
 800a0c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d00d      	beq.n	800a0ec <dir_read+0xee>
						sum = dp->dir[LDIR_Chksum];
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0d4:	7b5b      	ldrb	r3, [r3, #13]
 800a0d6:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800a0d8:	7dbb      	ldrb	r3, [r7, #22]
 800a0da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a0de:	75bb      	strb	r3, [r7, #22]
 800a0e0:	7dbb      	ldrb	r3, [r7, #22]
 800a0e2:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800a0ec:	7dba      	ldrb	r2, [r7, #22]
 800a0ee:	7d7b      	ldrb	r3, [r7, #21]
 800a0f0:	429a      	cmp	r2, r3
 800a0f2:	d115      	bne.n	800a120 <dir_read+0x122>
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0f8:	330d      	adds	r3, #13
 800a0fa:	781b      	ldrb	r3, [r3, #0]
 800a0fc:	7d3a      	ldrb	r2, [r7, #20]
 800a0fe:	429a      	cmp	r2, r3
 800a100:	d10e      	bne.n	800a120 <dir_read+0x122>
 800a102:	693b      	ldr	r3, [r7, #16]
 800a104:	691a      	ldr	r2, [r3, #16]
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a10a:	4619      	mov	r1, r3
 800a10c:	4610      	mov	r0, r2
 800a10e:	f7ff fbd5 	bl	80098bc <pick_lfn>
 800a112:	4603      	mov	r3, r0
 800a114:	2b00      	cmp	r3, #0
 800a116:	d003      	beq.n	800a120 <dir_read+0x122>
 800a118:	7d7b      	ldrb	r3, [r7, #21]
 800a11a:	3b01      	subs	r3, #1
 800a11c:	b2db      	uxtb	r3, r3
 800a11e:	e000      	b.n	800a122 <dir_read+0x124>
 800a120:	23ff      	movs	r3, #255	; 0xff
 800a122:	757b      	strb	r3, [r7, #21]
 800a124:	e011      	b.n	800a14a <dir_read+0x14c>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800a126:	7d7b      	ldrb	r3, [r7, #21]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d109      	bne.n	800a140 <dir_read+0x142>
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a130:	4618      	mov	r0, r3
 800a132:	f7ff fd1f 	bl	8009b74 <sum_sfn>
 800a136:	4603      	mov	r3, r0
 800a138:	461a      	mov	r2, r3
 800a13a:	7d3b      	ldrb	r3, [r7, #20]
 800a13c:	4293      	cmp	r3, r2
 800a13e:	d017      	beq.n	800a170 <dir_read+0x172>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	f04f 32ff 	mov.w	r2, #4294967295
 800a146:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					break;
 800a148:	e012      	b.n	800a170 <dir_read+0x172>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800a14a:	2100      	movs	r1, #0
 800a14c:	6878      	ldr	r0, [r7, #4]
 800a14e:	f7ff f9c4 	bl	80094da <dir_next>
 800a152:	4603      	mov	r3, r0
 800a154:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800a156:	7dfb      	ldrb	r3, [r7, #23]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d10b      	bne.n	800a174 <dir_read+0x176>
	while (dp->sect) {
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a160:	2b00      	cmp	r3, #0
 800a162:	f47f af5b 	bne.w	800a01c <dir_read+0x1e>
 800a166:	e006      	b.n	800a176 <dir_read+0x178>
		if (res != FR_OK) break;
 800a168:	bf00      	nop
 800a16a:	e004      	b.n	800a176 <dir_read+0x178>
					break;
 800a16c:	bf00      	nop
 800a16e:	e002      	b.n	800a176 <dir_read+0x178>
					break;
 800a170:	bf00      	nop
 800a172:	e000      	b.n	800a176 <dir_read+0x178>
		if (res != FR_OK) break;
 800a174:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800a176:	7dfb      	ldrb	r3, [r7, #23]
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d002      	beq.n	800a182 <dir_read+0x184>
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	2200      	movs	r2, #0
 800a180:	639a      	str	r2, [r3, #56]	; 0x38
	return res;
 800a182:	7dfb      	ldrb	r3, [r7, #23]
}
 800a184:	4618      	mov	r0, r3
 800a186:	3718      	adds	r7, #24
 800a188:	46bd      	mov	sp, r7
 800a18a:	bd80      	pop	{r7, pc}

0800a18c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800a18c:	b590      	push	{r4, r7, lr}
 800a18e:	b089      	sub	sp, #36	; 0x24
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	60fb      	str	r3, [r7, #12]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800a19a:	2100      	movs	r1, #0
 800a19c:	6878      	ldr	r0, [r7, #4]
 800a19e:	f7ff f908 	bl	80093b2 <dir_sdi>
 800a1a2:	4603      	mov	r3, r0
 800a1a4:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) return res;
 800a1a6:	7ffb      	ldrb	r3, [r7, #31]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d001      	beq.n	800a1b0 <dir_find+0x24>
 800a1ac:	7ffb      	ldrb	r3, [r7, #31]
 800a1ae:	e112      	b.n	800a3d6 <dir_find+0x24a>
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	781b      	ldrb	r3, [r3, #0]
 800a1b4:	2b04      	cmp	r3, #4
 800a1b6:	d164      	bne.n	800a282 <dir_find+0xf6>
		BYTE nc;
		UINT di, ni;
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	691b      	ldr	r3, [r3, #16]
 800a1bc:	4618      	mov	r0, r3
 800a1be:	f7ff fd2d 	bl	8009c1c <xname_sum>
 800a1c2:	4603      	mov	r3, r0
 800a1c4:	813b      	strh	r3, [r7, #8]

		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800a1c6:	e04f      	b.n	800a268 <dir_find+0xdc>
#if _MAX_LFN < 255
			if (fs->dirbuf[XDIR_NumName] > _MAX_LFN) continue;			/* Skip comparison if inaccessible object name */
#endif
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	695b      	ldr	r3, [r3, #20]
 800a1cc:	3324      	adds	r3, #36	; 0x24
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	f7fd fe86 	bl	8007ee0 <ld_word>
 800a1d4:	4603      	mov	r3, r0
 800a1d6:	461a      	mov	r2, r3
 800a1d8:	893b      	ldrh	r3, [r7, #8]
 800a1da:	4293      	cmp	r3, r2
 800a1dc:	d000      	beq.n	800a1e0 <dir_find+0x54>
 800a1de:	e043      	b.n	800a268 <dir_find+0xdc>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	695b      	ldr	r3, [r3, #20]
 800a1e4:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800a1e8:	76fb      	strb	r3, [r7, #27]
 800a1ea:	2340      	movs	r3, #64	; 0x40
 800a1ec:	617b      	str	r3, [r7, #20]
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	613b      	str	r3, [r7, #16]
 800a1f2:	e029      	b.n	800a248 <dir_find+0xbc>
				if ((di % SZDIRE) == 0) di += 2;
 800a1f4:	697b      	ldr	r3, [r7, #20]
 800a1f6:	f003 031f 	and.w	r3, r3, #31
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d102      	bne.n	800a204 <dir_find+0x78>
 800a1fe:	697b      	ldr	r3, [r7, #20]
 800a200:	3302      	adds	r3, #2
 800a202:	617b      	str	r3, [r7, #20]
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	695a      	ldr	r2, [r3, #20]
 800a208:	697b      	ldr	r3, [r7, #20]
 800a20a:	4413      	add	r3, r2
 800a20c:	4618      	mov	r0, r3
 800a20e:	f7fd fe67 	bl	8007ee0 <ld_word>
 800a212:	4603      	mov	r3, r0
 800a214:	4618      	mov	r0, r3
 800a216:	f002 f899 	bl	800c34c <ff_wtoupper>
 800a21a:	4603      	mov	r3, r0
 800a21c:	461c      	mov	r4, r3
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	691a      	ldr	r2, [r3, #16]
 800a222:	693b      	ldr	r3, [r7, #16]
 800a224:	005b      	lsls	r3, r3, #1
 800a226:	4413      	add	r3, r2
 800a228:	881b      	ldrh	r3, [r3, #0]
 800a22a:	4618      	mov	r0, r3
 800a22c:	f002 f88e 	bl	800c34c <ff_wtoupper>
 800a230:	4603      	mov	r3, r0
 800a232:	429c      	cmp	r4, r3
 800a234:	d10c      	bne.n	800a250 <dir_find+0xc4>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800a236:	7efb      	ldrb	r3, [r7, #27]
 800a238:	3b01      	subs	r3, #1
 800a23a:	76fb      	strb	r3, [r7, #27]
 800a23c:	697b      	ldr	r3, [r7, #20]
 800a23e:	3302      	adds	r3, #2
 800a240:	617b      	str	r3, [r7, #20]
 800a242:	693b      	ldr	r3, [r7, #16]
 800a244:	3301      	adds	r3, #1
 800a246:	613b      	str	r3, [r7, #16]
 800a248:	7efb      	ldrb	r3, [r7, #27]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d1d2      	bne.n	800a1f4 <dir_find+0x68>
 800a24e:	e000      	b.n	800a252 <dir_find+0xc6>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800a250:	bf00      	nop
			}
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800a252:	7efb      	ldrb	r3, [r7, #27]
 800a254:	2b00      	cmp	r3, #0
 800a256:	d107      	bne.n	800a268 <dir_find+0xdc>
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	691a      	ldr	r2, [r3, #16]
 800a25c:	693b      	ldr	r3, [r7, #16]
 800a25e:	005b      	lsls	r3, r3, #1
 800a260:	4413      	add	r3, r2
 800a262:	881b      	ldrh	r3, [r3, #0]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d009      	beq.n	800a27c <dir_find+0xf0>
		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800a268:	2100      	movs	r1, #0
 800a26a:	6878      	ldr	r0, [r7, #4]
 800a26c:	f7ff fec7 	bl	8009ffe <dir_read>
 800a270:	4603      	mov	r3, r0
 800a272:	77fb      	strb	r3, [r7, #31]
 800a274:	7ffb      	ldrb	r3, [r7, #31]
 800a276:	2b00      	cmp	r3, #0
 800a278:	d0a6      	beq.n	800a1c8 <dir_find+0x3c>
 800a27a:	e000      	b.n	800a27e <dir_find+0xf2>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800a27c:	bf00      	nop
		}
		return res;
 800a27e:	7ffb      	ldrb	r3, [r7, #31]
 800a280:	e0a9      	b.n	800a3d6 <dir_find+0x24a>
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800a282:	23ff      	movs	r3, #255	; 0xff
 800a284:	773b      	strb	r3, [r7, #28]
 800a286:	7f3b      	ldrb	r3, [r7, #28]
 800a288:	777b      	strb	r3, [r7, #29]
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	f04f 32ff 	mov.w	r2, #4294967295
 800a290:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
	do {
		res = move_window(fs, dp->sect);
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a296:	4619      	mov	r1, r3
 800a298:	68f8      	ldr	r0, [r7, #12]
 800a29a:	f7fe fa45 	bl	8008728 <move_window>
 800a29e:	4603      	mov	r3, r0
 800a2a0:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) break;
 800a2a2:	7ffb      	ldrb	r3, [r7, #31]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	f040 8090 	bne.w	800a3ca <dir_find+0x23e>
		c = dp->dir[DIR_Name];
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2ae:	781b      	ldrb	r3, [r3, #0]
 800a2b0:	77bb      	strb	r3, [r7, #30]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800a2b2:	7fbb      	ldrb	r3, [r7, #30]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d102      	bne.n	800a2be <dir_find+0x132>
 800a2b8:	2304      	movs	r3, #4
 800a2ba:	77fb      	strb	r3, [r7, #31]
 800a2bc:	e08a      	b.n	800a3d4 <dir_find+0x248>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2c2:	330b      	adds	r3, #11
 800a2c4:	781b      	ldrb	r3, [r3, #0]
 800a2c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a2ca:	72fb      	strb	r3, [r7, #11]
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	7afa      	ldrb	r2, [r7, #11]
 800a2d0:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800a2d2:	7fbb      	ldrb	r3, [r7, #30]
 800a2d4:	2be5      	cmp	r3, #229	; 0xe5
 800a2d6:	d007      	beq.n	800a2e8 <dir_find+0x15c>
 800a2d8:	7afb      	ldrb	r3, [r7, #11]
 800a2da:	f003 0308 	and.w	r3, r3, #8
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d009      	beq.n	800a2f6 <dir_find+0x16a>
 800a2e2:	7afb      	ldrb	r3, [r7, #11]
 800a2e4:	2b0f      	cmp	r3, #15
 800a2e6:	d006      	beq.n	800a2f6 <dir_find+0x16a>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800a2e8:	23ff      	movs	r3, #255	; 0xff
 800a2ea:	777b      	strb	r3, [r7, #29]
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	f04f 32ff 	mov.w	r2, #4294967295
 800a2f2:	64da      	str	r2, [r3, #76]	; 0x4c
 800a2f4:	e05e      	b.n	800a3b4 <dir_find+0x228>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800a2f6:	7afb      	ldrb	r3, [r7, #11]
 800a2f8:	2b0f      	cmp	r3, #15
 800a2fa:	d136      	bne.n	800a36a <dir_find+0x1de>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800a302:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a306:	2b00      	cmp	r3, #0
 800a308:	d154      	bne.n	800a3b4 <dir_find+0x228>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800a30a:	7fbb      	ldrb	r3, [r7, #30]
 800a30c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a310:	2b00      	cmp	r3, #0
 800a312:	d00d      	beq.n	800a330 <dir_find+0x1a4>
						sum = dp->dir[LDIR_Chksum];
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a318:	7b5b      	ldrb	r3, [r3, #13]
 800a31a:	773b      	strb	r3, [r7, #28]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800a31c:	7fbb      	ldrb	r3, [r7, #30]
 800a31e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a322:	77bb      	strb	r3, [r7, #30]
 800a324:	7fbb      	ldrb	r3, [r7, #30]
 800a326:	777b      	strb	r3, [r7, #29]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800a330:	7fba      	ldrb	r2, [r7, #30]
 800a332:	7f7b      	ldrb	r3, [r7, #29]
 800a334:	429a      	cmp	r2, r3
 800a336:	d115      	bne.n	800a364 <dir_find+0x1d8>
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a33c:	330d      	adds	r3, #13
 800a33e:	781b      	ldrb	r3, [r3, #0]
 800a340:	7f3a      	ldrb	r2, [r7, #28]
 800a342:	429a      	cmp	r2, r3
 800a344:	d10e      	bne.n	800a364 <dir_find+0x1d8>
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	691a      	ldr	r2, [r3, #16]
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a34e:	4619      	mov	r1, r3
 800a350:	4610      	mov	r0, r2
 800a352:	f7ff fa43 	bl	80097dc <cmp_lfn>
 800a356:	4603      	mov	r3, r0
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d003      	beq.n	800a364 <dir_find+0x1d8>
 800a35c:	7f7b      	ldrb	r3, [r7, #29]
 800a35e:	3b01      	subs	r3, #1
 800a360:	b2db      	uxtb	r3, r3
 800a362:	e000      	b.n	800a366 <dir_find+0x1da>
 800a364:	23ff      	movs	r3, #255	; 0xff
 800a366:	777b      	strb	r3, [r7, #29]
 800a368:	e024      	b.n	800a3b4 <dir_find+0x228>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800a36a:	7f7b      	ldrb	r3, [r7, #29]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d109      	bne.n	800a384 <dir_find+0x1f8>
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a374:	4618      	mov	r0, r3
 800a376:	f7ff fbfd 	bl	8009b74 <sum_sfn>
 800a37a:	4603      	mov	r3, r0
 800a37c:	461a      	mov	r2, r3
 800a37e:	7f3b      	ldrb	r3, [r7, #28]
 800a380:	4293      	cmp	r3, r2
 800a382:	d024      	beq.n	800a3ce <dir_find+0x242>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800a38a:	f003 0301 	and.w	r3, r3, #1
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d10a      	bne.n	800a3a8 <dir_find+0x21c>
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	3340      	adds	r3, #64	; 0x40
 800a39a:	220b      	movs	r2, #11
 800a39c:	4619      	mov	r1, r3
 800a39e:	f7fd ffa0 	bl	80082e2 <mem_cmp>
 800a3a2:	4603      	mov	r3, r0
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d014      	beq.n	800a3d2 <dir_find+0x246>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800a3a8:	23ff      	movs	r3, #255	; 0xff
 800a3aa:	777b      	strb	r3, [r7, #29]
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	f04f 32ff 	mov.w	r2, #4294967295
 800a3b2:	64da      	str	r2, [r3, #76]	; 0x4c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800a3b4:	2100      	movs	r1, #0
 800a3b6:	6878      	ldr	r0, [r7, #4]
 800a3b8:	f7ff f88f 	bl	80094da <dir_next>
 800a3bc:	4603      	mov	r3, r0
 800a3be:	77fb      	strb	r3, [r7, #31]
	} while (res == FR_OK);
 800a3c0:	7ffb      	ldrb	r3, [r7, #31]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	f43f af65 	beq.w	800a292 <dir_find+0x106>
 800a3c8:	e004      	b.n	800a3d4 <dir_find+0x248>
		if (res != FR_OK) break;
 800a3ca:	bf00      	nop
 800a3cc:	e002      	b.n	800a3d4 <dir_find+0x248>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800a3ce:	bf00      	nop
 800a3d0:	e000      	b.n	800a3d4 <dir_find+0x248>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800a3d2:	bf00      	nop

	return res;
 800a3d4:	7ffb      	ldrb	r3, [r7, #31]
}
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	3724      	adds	r7, #36	; 0x24
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	bd90      	pop	{r4, r7, pc}
	...

0800a3e0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800a3e0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800a3e4:	b0a0      	sub	sp, #128	; 0x80
 800a3e6:	af00      	add	r7, sp, #0
 800a3e8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	66fb      	str	r3, [r7, #108]	; 0x6c
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800a3f6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d001      	beq.n	800a402 <dir_register+0x22>
 800a3fe:	2306      	movs	r3, #6
 800a400:	e198      	b.n	800a734 <dir_register+0x354>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800a402:	2300      	movs	r3, #0
 800a404:	677b      	str	r3, [r7, #116]	; 0x74
 800a406:	e002      	b.n	800a40e <dir_register+0x2e>
 800a408:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a40a:	3301      	adds	r3, #1
 800a40c:	677b      	str	r3, [r7, #116]	; 0x74
 800a40e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a410:	691a      	ldr	r2, [r3, #16]
 800a412:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a414:	005b      	lsls	r3, r3, #1
 800a416:	4413      	add	r3, r2
 800a418:	881b      	ldrh	r3, [r3, #0]
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d1f4      	bne.n	800a408 <dir_register+0x28>

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800a41e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a420:	781b      	ldrb	r3, [r3, #0]
 800a422:	2b04      	cmp	r3, #4
 800a424:	f040 80a9 	bne.w	800a57a <dir_register+0x19a>
		DIR dj;

		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 800a428:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a42a:	330e      	adds	r3, #14
 800a42c:	4aa7      	ldr	r2, [pc, #668]	; (800a6cc <dir_register+0x2ec>)
 800a42e:	fba2 2303 	umull	r2, r3, r2, r3
 800a432:	08db      	lsrs	r3, r3, #3
 800a434:	3302      	adds	r3, #2
 800a436:	673b      	str	r3, [r7, #112]	; 0x70
		res = dir_alloc(dp, nent);		/* Allocate entries */
 800a438:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800a43a:	6878      	ldr	r0, [r7, #4]
 800a43c:	f7ff f933 	bl	80096a6 <dir_alloc>
 800a440:	4603      	mov	r3, r0
 800a442:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res != FR_OK) return res;
 800a446:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d002      	beq.n	800a454 <dir_register+0x74>
 800a44e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800a452:	e16f      	b.n	800a734 <dir_register+0x354>
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a458:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800a45a:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
 800a45e:	440b      	add	r3, r1
 800a460:	015b      	lsls	r3, r3, #5
 800a462:	1ad2      	subs	r2, r2, r3
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	64da      	str	r2, [r3, #76]	; 0x4c

		if (dp->obj.sclust != 0 && (dp->obj.stat & 4)) {	/* Has the sub-directory been stretched? */
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	689b      	ldr	r3, [r3, #8]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d07a      	beq.n	800a566 <dir_register+0x186>
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	79db      	ldrb	r3, [r3, #7]
 800a474:	f003 0304 	and.w	r3, r3, #4
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d074      	beq.n	800a566 <dir_register+0x186>
			dp->obj.objsize += (DWORD)fs->csize * SS(fs);	/* Increase the directory size by cluster size */
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
 800a482:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a484:	895b      	ldrh	r3, [r3, #10]
 800a486:	4618      	mov	r0, r3
 800a488:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a48a:	899b      	ldrh	r3, [r3, #12]
 800a48c:	fb03 f300 	mul.w	r3, r3, r0
 800a490:	469b      	mov	fp, r3
 800a492:	f04f 0c00 	mov.w	ip, #0
 800a496:	eb1b 0301 	adds.w	r3, fp, r1
 800a49a:	eb4c 0402 	adc.w	r4, ip, r2
 800a49e:	687a      	ldr	r2, [r7, #4]
 800a4a0:	e9c2 3404 	strd	r3, r4, [r2, #16]
			res = fill_first_frag(&dp->obj);				/* Fill first fragment on the FAT if needed */
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	f7fe fd6e 	bl	8008f88 <fill_first_frag>
 800a4ac:	4603      	mov	r3, r0
 800a4ae:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800a4b2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d002      	beq.n	800a4c0 <dir_register+0xe0>
 800a4ba:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800a4be:	e139      	b.n	800a734 <dir_register+0x354>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800a4c0:	6878      	ldr	r0, [r7, #4]
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4c6:	f04f 32ff 	mov.w	r2, #4294967295
 800a4ca:	4619      	mov	r1, r3
 800a4cc:	f7fe fd8b 	bl	8008fe6 <fill_last_frag>
 800a4d0:	4603      	mov	r3, r0
 800a4d2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800a4d6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d002      	beq.n	800a4e4 <dir_register+0x104>
 800a4de:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800a4e2:	e127      	b.n	800a734 <dir_register+0x354>
			res = load_obj_dir(&dj, &dp->obj);				/* Load the object status */
 800a4e4:	687a      	ldr	r2, [r7, #4]
 800a4e6:	f107 0308 	add.w	r3, r7, #8
 800a4ea:	4611      	mov	r1, r2
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	f7ff fc87 	bl	8009e00 <load_obj_dir>
 800a4f2:	4603      	mov	r3, r0
 800a4f4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800a4f8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d002      	beq.n	800a506 <dir_register+0x126>
 800a500:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800a504:	e116      	b.n	800a734 <dir_register+0x354>
			st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);		/* Update the allocation status */
 800a506:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a508:	695b      	ldr	r3, [r3, #20]
 800a50a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800a514:	461a      	mov	r2, r3
 800a516:	4623      	mov	r3, r4
 800a518:	4608      	mov	r0, r1
 800a51a:	f7fd fe20 	bl	800815e <st_qword>
			st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 800a51e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a520:	695b      	ldr	r3, [r3, #20]
 800a522:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800a52c:	461a      	mov	r2, r3
 800a52e:	4623      	mov	r3, r4
 800a530:	4608      	mov	r0, r1
 800a532:	f7fd fe14 	bl	800815e <st_qword>
			fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	79da      	ldrb	r2, [r3, #7]
 800a53a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a53c:	695b      	ldr	r3, [r3, #20]
 800a53e:	3321      	adds	r3, #33	; 0x21
 800a540:	f042 0201 	orr.w	r2, r2, #1
 800a544:	b2d2      	uxtb	r2, r2
 800a546:	701a      	strb	r2, [r3, #0]
			res = store_xdir(&dj);							/* Store the object status */
 800a548:	f107 0308 	add.w	r3, r7, #8
 800a54c:	4618      	mov	r0, r3
 800a54e:	f7ff fc94 	bl	8009e7a <store_xdir>
 800a552:	4603      	mov	r3, r0
 800a554:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800a558:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d002      	beq.n	800a566 <dir_register+0x186>
 800a560:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800a564:	e0e6      	b.n	800a734 <dir_register+0x354>
		}

		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 800a566:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a568:	695a      	ldr	r2, [r3, #20]
 800a56a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a56c:	691b      	ldr	r3, [r3, #16]
 800a56e:	4619      	mov	r1, r3
 800a570:	4610      	mov	r0, r2
 800a572:	f7ff fcdd 	bl	8009f30 <create_xdir>
		return FR_OK;
 800a576:	2300      	movs	r3, #0
 800a578:	e0dc      	b.n	800a734 <dir_register+0x354>
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800a580:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800a584:	220c      	movs	r2, #12
 800a586:	4618      	mov	r0, r3
 800a588:	f7fd fe70 	bl	800826c <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800a58c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a590:	f003 0301 	and.w	r3, r3, #1
 800a594:	2b00      	cmp	r3, #0
 800a596:	d033      	beq.n	800a600 <dir_register+0x220>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	2240      	movs	r2, #64	; 0x40
 800a59c:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		for (n = 1; n < 100; n++) {
 800a5a0:	2301      	movs	r3, #1
 800a5a2:	67bb      	str	r3, [r7, #120]	; 0x78
 800a5a4:	e016      	b.n	800a5d4 <dir_register+0x1f4>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800a5ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a5ae:	691a      	ldr	r2, [r3, #16]
 800a5b0:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 800a5b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a5b6:	f7ff fa4d 	bl	8009a54 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800a5ba:	6878      	ldr	r0, [r7, #4]
 800a5bc:	f7ff fde6 	bl	800a18c <dir_find>
 800a5c0:	4603      	mov	r3, r0
 800a5c2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) break;
 800a5c6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d106      	bne.n	800a5dc <dir_register+0x1fc>
		for (n = 1; n < 100; n++) {
 800a5ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a5d0:	3301      	adds	r3, #1
 800a5d2:	67bb      	str	r3, [r7, #120]	; 0x78
 800a5d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a5d6:	2b63      	cmp	r3, #99	; 0x63
 800a5d8:	d9e5      	bls.n	800a5a6 <dir_register+0x1c6>
 800a5da:	e000      	b.n	800a5de <dir_register+0x1fe>
			if (res != FR_OK) break;
 800a5dc:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800a5de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a5e0:	2b64      	cmp	r3, #100	; 0x64
 800a5e2:	d101      	bne.n	800a5e8 <dir_register+0x208>
 800a5e4:	2307      	movs	r3, #7
 800a5e6:	e0a5      	b.n	800a734 <dir_register+0x354>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800a5e8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800a5ec:	2b04      	cmp	r3, #4
 800a5ee:	d002      	beq.n	800a5f6 <dir_register+0x216>
 800a5f0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800a5f4:	e09e      	b.n	800a734 <dir_register+0x354>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800a5f6:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800a600:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a604:	f003 0302 	and.w	r3, r3, #2
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d007      	beq.n	800a61c <dir_register+0x23c>
 800a60c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a60e:	330c      	adds	r3, #12
 800a610:	4a2f      	ldr	r2, [pc, #188]	; (800a6d0 <dir_register+0x2f0>)
 800a612:	fba2 2303 	umull	r2, r3, r2, r3
 800a616:	089b      	lsrs	r3, r3, #2
 800a618:	3301      	adds	r3, #1
 800a61a:	e000      	b.n	800a61e <dir_register+0x23e>
 800a61c:	2301      	movs	r3, #1
 800a61e:	673b      	str	r3, [r7, #112]	; 0x70
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800a620:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800a622:	6878      	ldr	r0, [r7, #4]
 800a624:	f7ff f83f 	bl	80096a6 <dir_alloc>
 800a628:	4603      	mov	r3, r0
 800a62a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800a62e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800a632:	2b00      	cmp	r3, #0
 800a634:	d14f      	bne.n	800a6d6 <dir_register+0x2f6>
 800a636:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a638:	3b01      	subs	r3, #1
 800a63a:	673b      	str	r3, [r7, #112]	; 0x70
 800a63c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d049      	beq.n	800a6d6 <dir_register+0x2f6>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a646:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a648:	015b      	lsls	r3, r3, #5
 800a64a:	1ad3      	subs	r3, r2, r3
 800a64c:	4619      	mov	r1, r3
 800a64e:	6878      	ldr	r0, [r7, #4]
 800a650:	f7fe feaf 	bl	80093b2 <dir_sdi>
 800a654:	4603      	mov	r3, r0
 800a656:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 800a65a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d139      	bne.n	800a6d6 <dir_register+0x2f6>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	3340      	adds	r3, #64	; 0x40
 800a666:	4618      	mov	r0, r3
 800a668:	f7ff fa84 	bl	8009b74 <sum_sfn>
 800a66c:	4603      	mov	r3, r0
 800a66e:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a676:	4619      	mov	r1, r3
 800a678:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a67a:	f7fe f855 	bl	8008728 <move_window>
 800a67e:	4603      	mov	r3, r0
 800a680:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (res != FR_OK) break;
 800a684:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d123      	bne.n	800a6d4 <dir_register+0x2f4>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800a68c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a68e:	6918      	ldr	r0, [r3, #16]
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800a694:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a696:	b2da      	uxtb	r2, r3
 800a698:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800a69c:	f7ff f972 	bl	8009984 <put_lfn>
				fs->wflag = 1;
 800a6a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a6a2:	2201      	movs	r2, #1
 800a6a4:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800a6a6:	2100      	movs	r1, #0
 800a6a8:	6878      	ldr	r0, [r7, #4]
 800a6aa:	f7fe ff16 	bl	80094da <dir_next>
 800a6ae:	4603      	mov	r3, r0
 800a6b0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			} while (res == FR_OK && --nent);
 800a6b4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d10c      	bne.n	800a6d6 <dir_register+0x2f6>
 800a6bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a6be:	3b01      	subs	r3, #1
 800a6c0:	673b      	str	r3, [r7, #112]	; 0x70
 800a6c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d1d4      	bne.n	800a672 <dir_register+0x292>
 800a6c8:	e005      	b.n	800a6d6 <dir_register+0x2f6>
 800a6ca:	bf00      	nop
 800a6cc:	88888889 	.word	0x88888889
 800a6d0:	4ec4ec4f 	.word	0x4ec4ec4f
				if (res != FR_OK) break;
 800a6d4:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800a6d6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d128      	bne.n	800a730 <dir_register+0x350>
		res = move_window(fs, dp->sect);
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6e2:	4619      	mov	r1, r3
 800a6e4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a6e6:	f7fe f81f 	bl	8008728 <move_window>
 800a6ea:	4603      	mov	r3, r0
 800a6ec:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 800a6f0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d11b      	bne.n	800a730 <dir_register+0x350>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6fc:	2220      	movs	r2, #32
 800a6fe:	2100      	movs	r1, #0
 800a700:	4618      	mov	r0, r3
 800a702:	f7fd fdd4 	bl	80082ae <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	3340      	adds	r3, #64	; 0x40
 800a70e:	220b      	movs	r2, #11
 800a710:	4619      	mov	r1, r3
 800a712:	f7fd fdab 	bl	800826c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a720:	330c      	adds	r3, #12
 800a722:	f002 0218 	and.w	r2, r2, #24
 800a726:	b2d2      	uxtb	r2, r2
 800a728:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800a72a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a72c:	2201      	movs	r2, #1
 800a72e:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800a730:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800a734:	4618      	mov	r0, r3
 800a736:	3780      	adds	r7, #128	; 0x80
 800a738:	46bd      	mov	sp, r7
 800a73a:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800a73e:	bf00      	nop

0800a740 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800a740:	b580      	push	{r7, lr}
 800a742:	b08a      	sub	sp, #40	; 0x28
 800a744:	af00      	add	r7, sp, #0
 800a746:	6078      	str	r0, [r7, #4]
 800a748:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800a74a:	683b      	ldr	r3, [r7, #0]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	613b      	str	r3, [r7, #16]
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	691b      	ldr	r3, [r3, #16]
 800a756:	60fb      	str	r3, [r7, #12]
 800a758:	2300      	movs	r3, #0
 800a75a:	617b      	str	r3, [r7, #20]
 800a75c:	697b      	ldr	r3, [r7, #20]
 800a75e:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800a760:	69bb      	ldr	r3, [r7, #24]
 800a762:	1c5a      	adds	r2, r3, #1
 800a764:	61ba      	str	r2, [r7, #24]
 800a766:	693a      	ldr	r2, [r7, #16]
 800a768:	4413      	add	r3, r2
 800a76a:	781b      	ldrb	r3, [r3, #0]
 800a76c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800a76e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a770:	2b1f      	cmp	r3, #31
 800a772:	d940      	bls.n	800a7f6 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800a774:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a776:	2b2f      	cmp	r3, #47	; 0x2f
 800a778:	d006      	beq.n	800a788 <create_name+0x48>
 800a77a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a77c:	2b5c      	cmp	r3, #92	; 0x5c
 800a77e:	d110      	bne.n	800a7a2 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800a780:	e002      	b.n	800a788 <create_name+0x48>
 800a782:	69bb      	ldr	r3, [r7, #24]
 800a784:	3301      	adds	r3, #1
 800a786:	61bb      	str	r3, [r7, #24]
 800a788:	693a      	ldr	r2, [r7, #16]
 800a78a:	69bb      	ldr	r3, [r7, #24]
 800a78c:	4413      	add	r3, r2
 800a78e:	781b      	ldrb	r3, [r3, #0]
 800a790:	2b2f      	cmp	r3, #47	; 0x2f
 800a792:	d0f6      	beq.n	800a782 <create_name+0x42>
 800a794:	693a      	ldr	r2, [r7, #16]
 800a796:	69bb      	ldr	r3, [r7, #24]
 800a798:	4413      	add	r3, r2
 800a79a:	781b      	ldrb	r3, [r3, #0]
 800a79c:	2b5c      	cmp	r3, #92	; 0x5c
 800a79e:	d0f0      	beq.n	800a782 <create_name+0x42>
			break;
 800a7a0:	e02a      	b.n	800a7f8 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800a7a2:	697b      	ldr	r3, [r7, #20]
 800a7a4:	2bfe      	cmp	r3, #254	; 0xfe
 800a7a6:	d901      	bls.n	800a7ac <create_name+0x6c>
 800a7a8:	2306      	movs	r3, #6
 800a7aa:	e177      	b.n	800aa9c <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 800a7ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a7ae:	b2db      	uxtb	r3, r3
 800a7b0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800a7b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a7b4:	2101      	movs	r1, #1
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	f001 fd8c 	bl	800c2d4 <ff_convert>
 800a7bc:	4603      	mov	r3, r0
 800a7be:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800a7c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d101      	bne.n	800a7ca <create_name+0x8a>
 800a7c6:	2306      	movs	r3, #6
 800a7c8:	e168      	b.n	800aa9c <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800a7ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a7cc:	2b7f      	cmp	r3, #127	; 0x7f
 800a7ce:	d809      	bhi.n	800a7e4 <create_name+0xa4>
 800a7d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a7d2:	4619      	mov	r1, r3
 800a7d4:	48b3      	ldr	r0, [pc, #716]	; (800aaa4 <create_name+0x364>)
 800a7d6:	f7fd fdab 	bl	8008330 <chk_chr>
 800a7da:	4603      	mov	r3, r0
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d001      	beq.n	800a7e4 <create_name+0xa4>
 800a7e0:	2306      	movs	r3, #6
 800a7e2:	e15b      	b.n	800aa9c <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 800a7e4:	697b      	ldr	r3, [r7, #20]
 800a7e6:	1c5a      	adds	r2, r3, #1
 800a7e8:	617a      	str	r2, [r7, #20]
 800a7ea:	005b      	lsls	r3, r3, #1
 800a7ec:	68fa      	ldr	r2, [r7, #12]
 800a7ee:	4413      	add	r3, r2
 800a7f0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a7f2:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800a7f4:	e7b4      	b.n	800a760 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800a7f6:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800a7f8:	693a      	ldr	r2, [r7, #16]
 800a7fa:	69bb      	ldr	r3, [r7, #24]
 800a7fc:	441a      	add	r2, r3
 800a7fe:	683b      	ldr	r3, [r7, #0]
 800a800:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800a802:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a804:	2b1f      	cmp	r3, #31
 800a806:	d801      	bhi.n	800a80c <create_name+0xcc>
 800a808:	2304      	movs	r3, #4
 800a80a:	e000      	b.n	800a80e <create_name+0xce>
 800a80c:	2300      	movs	r3, #0
 800a80e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800a812:	e011      	b.n	800a838 <create_name+0xf8>
		w = lfn[di - 1];
 800a814:	697a      	ldr	r2, [r7, #20]
 800a816:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800a81a:	4413      	add	r3, r2
 800a81c:	005b      	lsls	r3, r3, #1
 800a81e:	68fa      	ldr	r2, [r7, #12]
 800a820:	4413      	add	r3, r2
 800a822:	881b      	ldrh	r3, [r3, #0]
 800a824:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800a826:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a828:	2b20      	cmp	r3, #32
 800a82a:	d002      	beq.n	800a832 <create_name+0xf2>
 800a82c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a82e:	2b2e      	cmp	r3, #46	; 0x2e
 800a830:	d106      	bne.n	800a840 <create_name+0x100>
		di--;
 800a832:	697b      	ldr	r3, [r7, #20]
 800a834:	3b01      	subs	r3, #1
 800a836:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800a838:	697b      	ldr	r3, [r7, #20]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d1ea      	bne.n	800a814 <create_name+0xd4>
 800a83e:	e000      	b.n	800a842 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800a840:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800a842:	697b      	ldr	r3, [r7, #20]
 800a844:	005b      	lsls	r3, r3, #1
 800a846:	68fa      	ldr	r2, [r7, #12]
 800a848:	4413      	add	r3, r2
 800a84a:	2200      	movs	r2, #0
 800a84c:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800a84e:	697b      	ldr	r3, [r7, #20]
 800a850:	2b00      	cmp	r3, #0
 800a852:	d101      	bne.n	800a858 <create_name+0x118>
 800a854:	2306      	movs	r3, #6
 800a856:	e121      	b.n	800aa9c <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	3340      	adds	r3, #64	; 0x40
 800a85c:	220b      	movs	r2, #11
 800a85e:	2120      	movs	r1, #32
 800a860:	4618      	mov	r0, r3
 800a862:	f7fd fd24 	bl	80082ae <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800a866:	2300      	movs	r3, #0
 800a868:	61bb      	str	r3, [r7, #24]
 800a86a:	e002      	b.n	800a872 <create_name+0x132>
 800a86c:	69bb      	ldr	r3, [r7, #24]
 800a86e:	3301      	adds	r3, #1
 800a870:	61bb      	str	r3, [r7, #24]
 800a872:	69bb      	ldr	r3, [r7, #24]
 800a874:	005b      	lsls	r3, r3, #1
 800a876:	68fa      	ldr	r2, [r7, #12]
 800a878:	4413      	add	r3, r2
 800a87a:	881b      	ldrh	r3, [r3, #0]
 800a87c:	2b20      	cmp	r3, #32
 800a87e:	d0f5      	beq.n	800a86c <create_name+0x12c>
 800a880:	69bb      	ldr	r3, [r7, #24]
 800a882:	005b      	lsls	r3, r3, #1
 800a884:	68fa      	ldr	r2, [r7, #12]
 800a886:	4413      	add	r3, r2
 800a888:	881b      	ldrh	r3, [r3, #0]
 800a88a:	2b2e      	cmp	r3, #46	; 0x2e
 800a88c:	d0ee      	beq.n	800a86c <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800a88e:	69bb      	ldr	r3, [r7, #24]
 800a890:	2b00      	cmp	r3, #0
 800a892:	d009      	beq.n	800a8a8 <create_name+0x168>
 800a894:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a898:	f043 0303 	orr.w	r3, r3, #3
 800a89c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800a8a0:	e002      	b.n	800a8a8 <create_name+0x168>
 800a8a2:	697b      	ldr	r3, [r7, #20]
 800a8a4:	3b01      	subs	r3, #1
 800a8a6:	617b      	str	r3, [r7, #20]
 800a8a8:	697b      	ldr	r3, [r7, #20]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d009      	beq.n	800a8c2 <create_name+0x182>
 800a8ae:	697a      	ldr	r2, [r7, #20]
 800a8b0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800a8b4:	4413      	add	r3, r2
 800a8b6:	005b      	lsls	r3, r3, #1
 800a8b8:	68fa      	ldr	r2, [r7, #12]
 800a8ba:	4413      	add	r3, r2
 800a8bc:	881b      	ldrh	r3, [r3, #0]
 800a8be:	2b2e      	cmp	r3, #46	; 0x2e
 800a8c0:	d1ef      	bne.n	800a8a2 <create_name+0x162>

	i = b = 0; ni = 8;
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	623b      	str	r3, [r7, #32]
 800a8cc:	2308      	movs	r3, #8
 800a8ce:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800a8d0:	69bb      	ldr	r3, [r7, #24]
 800a8d2:	1c5a      	adds	r2, r3, #1
 800a8d4:	61ba      	str	r2, [r7, #24]
 800a8d6:	005b      	lsls	r3, r3, #1
 800a8d8:	68fa      	ldr	r2, [r7, #12]
 800a8da:	4413      	add	r3, r2
 800a8dc:	881b      	ldrh	r3, [r3, #0]
 800a8de:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800a8e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	f000 8090 	beq.w	800aa08 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800a8e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a8ea:	2b20      	cmp	r3, #32
 800a8ec:	d006      	beq.n	800a8fc <create_name+0x1bc>
 800a8ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a8f0:	2b2e      	cmp	r3, #46	; 0x2e
 800a8f2:	d10a      	bne.n	800a90a <create_name+0x1ca>
 800a8f4:	69ba      	ldr	r2, [r7, #24]
 800a8f6:	697b      	ldr	r3, [r7, #20]
 800a8f8:	429a      	cmp	r2, r3
 800a8fa:	d006      	beq.n	800a90a <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800a8fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a900:	f043 0303 	orr.w	r3, r3, #3
 800a904:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a908:	e07d      	b.n	800aa06 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800a90a:	6a3a      	ldr	r2, [r7, #32]
 800a90c:	69fb      	ldr	r3, [r7, #28]
 800a90e:	429a      	cmp	r2, r3
 800a910:	d203      	bcs.n	800a91a <create_name+0x1da>
 800a912:	69ba      	ldr	r2, [r7, #24]
 800a914:	697b      	ldr	r3, [r7, #20]
 800a916:	429a      	cmp	r2, r3
 800a918:	d123      	bne.n	800a962 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800a91a:	69fb      	ldr	r3, [r7, #28]
 800a91c:	2b0b      	cmp	r3, #11
 800a91e:	d106      	bne.n	800a92e <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800a920:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a924:	f043 0303 	orr.w	r3, r3, #3
 800a928:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a92c:	e06f      	b.n	800aa0e <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800a92e:	69ba      	ldr	r2, [r7, #24]
 800a930:	697b      	ldr	r3, [r7, #20]
 800a932:	429a      	cmp	r2, r3
 800a934:	d005      	beq.n	800a942 <create_name+0x202>
 800a936:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a93a:	f043 0303 	orr.w	r3, r3, #3
 800a93e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800a942:	69ba      	ldr	r2, [r7, #24]
 800a944:	697b      	ldr	r3, [r7, #20]
 800a946:	429a      	cmp	r2, r3
 800a948:	d860      	bhi.n	800aa0c <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800a94a:	697b      	ldr	r3, [r7, #20]
 800a94c:	61bb      	str	r3, [r7, #24]
 800a94e:	2308      	movs	r3, #8
 800a950:	623b      	str	r3, [r7, #32]
 800a952:	230b      	movs	r3, #11
 800a954:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800a956:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a95a:	009b      	lsls	r3, r3, #2
 800a95c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a960:	e051      	b.n	800aa06 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800a962:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a964:	2b7f      	cmp	r3, #127	; 0x7f
 800a966:	d914      	bls.n	800a992 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800a968:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a96a:	2100      	movs	r1, #0
 800a96c:	4618      	mov	r0, r3
 800a96e:	f001 fcb1 	bl	800c2d4 <ff_convert>
 800a972:	4603      	mov	r3, r0
 800a974:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800a976:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d004      	beq.n	800a986 <create_name+0x246>
 800a97c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a97e:	3b80      	subs	r3, #128	; 0x80
 800a980:	4a49      	ldr	r2, [pc, #292]	; (800aaa8 <create_name+0x368>)
 800a982:	5cd3      	ldrb	r3, [r2, r3]
 800a984:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800a986:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a98a:	f043 0302 	orr.w	r3, r3, #2
 800a98e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800a992:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a994:	2b00      	cmp	r3, #0
 800a996:	d007      	beq.n	800a9a8 <create_name+0x268>
 800a998:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a99a:	4619      	mov	r1, r3
 800a99c:	4843      	ldr	r0, [pc, #268]	; (800aaac <create_name+0x36c>)
 800a99e:	f7fd fcc7 	bl	8008330 <chk_chr>
 800a9a2:	4603      	mov	r3, r0
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d008      	beq.n	800a9ba <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800a9a8:	235f      	movs	r3, #95	; 0x5f
 800a9aa:	84bb      	strh	r3, [r7, #36]	; 0x24
 800a9ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a9b0:	f043 0303 	orr.w	r3, r3, #3
 800a9b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a9b8:	e01b      	b.n	800a9f2 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800a9ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a9bc:	2b40      	cmp	r3, #64	; 0x40
 800a9be:	d909      	bls.n	800a9d4 <create_name+0x294>
 800a9c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a9c2:	2b5a      	cmp	r3, #90	; 0x5a
 800a9c4:	d806      	bhi.n	800a9d4 <create_name+0x294>
					b |= 2;
 800a9c6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a9ca:	f043 0302 	orr.w	r3, r3, #2
 800a9ce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a9d2:	e00e      	b.n	800a9f2 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800a9d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a9d6:	2b60      	cmp	r3, #96	; 0x60
 800a9d8:	d90b      	bls.n	800a9f2 <create_name+0x2b2>
 800a9da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a9dc:	2b7a      	cmp	r3, #122	; 0x7a
 800a9de:	d808      	bhi.n	800a9f2 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800a9e0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a9e4:	f043 0301 	orr.w	r3, r3, #1
 800a9e8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a9ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a9ee:	3b20      	subs	r3, #32
 800a9f0:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800a9f2:	6a3b      	ldr	r3, [r7, #32]
 800a9f4:	1c5a      	adds	r2, r3, #1
 800a9f6:	623a      	str	r2, [r7, #32]
 800a9f8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a9fa:	b2d1      	uxtb	r1, r2
 800a9fc:	687a      	ldr	r2, [r7, #4]
 800a9fe:	4413      	add	r3, r2
 800aa00:	460a      	mov	r2, r1
 800aa02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		w = lfn[si++];					/* Get an LFN character */
 800aa06:	e763      	b.n	800a8d0 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800aa08:	bf00      	nop
 800aa0a:	e000      	b.n	800aa0e <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 800aa0c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800aa14:	2be5      	cmp	r3, #229	; 0xe5
 800aa16:	d103      	bne.n	800aa20 <create_name+0x2e0>
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	2205      	movs	r2, #5
 800aa1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	if (ni == 8) b <<= 2;
 800aa20:	69fb      	ldr	r3, [r7, #28]
 800aa22:	2b08      	cmp	r3, #8
 800aa24:	d104      	bne.n	800aa30 <create_name+0x2f0>
 800aa26:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800aa2a:	009b      	lsls	r3, r3, #2
 800aa2c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800aa30:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800aa34:	f003 030c 	and.w	r3, r3, #12
 800aa38:	2b0c      	cmp	r3, #12
 800aa3a:	d005      	beq.n	800aa48 <create_name+0x308>
 800aa3c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800aa40:	f003 0303 	and.w	r3, r3, #3
 800aa44:	2b03      	cmp	r3, #3
 800aa46:	d105      	bne.n	800aa54 <create_name+0x314>
 800aa48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aa4c:	f043 0302 	orr.w	r3, r3, #2
 800aa50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800aa54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aa58:	f003 0302 	and.w	r3, r3, #2
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d117      	bne.n	800aa90 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800aa60:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800aa64:	f003 0303 	and.w	r3, r3, #3
 800aa68:	2b01      	cmp	r3, #1
 800aa6a:	d105      	bne.n	800aa78 <create_name+0x338>
 800aa6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aa70:	f043 0310 	orr.w	r3, r3, #16
 800aa74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800aa78:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800aa7c:	f003 030c 	and.w	r3, r3, #12
 800aa80:	2b04      	cmp	r3, #4
 800aa82:	d105      	bne.n	800aa90 <create_name+0x350>
 800aa84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aa88:	f043 0308 	orr.w	r3, r3, #8
 800aa8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800aa96:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b

	return FR_OK;
 800aa9a:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	3728      	adds	r7, #40	; 0x28
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	bd80      	pop	{r7, pc}
 800aaa4:	0800f2ac 	.word	0x0800f2ac
 800aaa8:	0800f308 	.word	0x0800f308
 800aaac:	0800f2b8 	.word	0x0800f2b8

0800aab0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800aab0:	b590      	push	{r4, r7, lr}
 800aab2:	b087      	sub	sp, #28
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	6078      	str	r0, [r7, #4]
 800aab8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800aabe:	693b      	ldr	r3, [r7, #16]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800aac4:	e002      	b.n	800aacc <follow_path+0x1c>
 800aac6:	683b      	ldr	r3, [r7, #0]
 800aac8:	3301      	adds	r3, #1
 800aaca:	603b      	str	r3, [r7, #0]
 800aacc:	683b      	ldr	r3, [r7, #0]
 800aace:	781b      	ldrb	r3, [r3, #0]
 800aad0:	2b2f      	cmp	r3, #47	; 0x2f
 800aad2:	d0f8      	beq.n	800aac6 <follow_path+0x16>
 800aad4:	683b      	ldr	r3, [r7, #0]
 800aad6:	781b      	ldrb	r3, [r3, #0]
 800aad8:	2b5c      	cmp	r3, #92	; 0x5c
 800aada:	d0f4      	beq.n	800aac6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800aadc:	693b      	ldr	r3, [r7, #16]
 800aade:	2200      	movs	r2, #0
 800aae0:	609a      	str	r2, [r3, #8]
	}
#if _FS_EXFAT
	obj->n_frag = 0;	/* Invalidate last fragment counter of the object */
 800aae2:	693b      	ldr	r3, [r7, #16]
 800aae4:	2200      	movs	r2, #0
 800aae6:	61da      	str	r2, [r3, #28]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800aae8:	683b      	ldr	r3, [r7, #0]
 800aaea:	781b      	ldrb	r3, [r3, #0]
 800aaec:	2b1f      	cmp	r3, #31
 800aaee:	d80a      	bhi.n	800ab06 <follow_path+0x56>
		dp->fn[NSFLAG] = NS_NONAME;
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	2280      	movs	r2, #128	; 0x80
 800aaf4:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		res = dir_sdi(dp, 0);
 800aaf8:	2100      	movs	r1, #0
 800aafa:	6878      	ldr	r0, [r7, #4]
 800aafc:	f7fe fc59 	bl	80093b2 <dir_sdi>
 800ab00:	4603      	mov	r3, r0
 800ab02:	75fb      	strb	r3, [r7, #23]
 800ab04:	e07c      	b.n	800ac00 <follow_path+0x150>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ab06:	463b      	mov	r3, r7
 800ab08:	4619      	mov	r1, r3
 800ab0a:	6878      	ldr	r0, [r7, #4]
 800ab0c:	f7ff fe18 	bl	800a740 <create_name>
 800ab10:	4603      	mov	r3, r0
 800ab12:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ab14:	7dfb      	ldrb	r3, [r7, #23]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d16d      	bne.n	800abf6 <follow_path+0x146>
			res = dir_find(dp);				/* Find an object with the segment name */
 800ab1a:	6878      	ldr	r0, [r7, #4]
 800ab1c:	f7ff fb36 	bl	800a18c <dir_find>
 800ab20:	4603      	mov	r3, r0
 800ab22:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800ab2a:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800ab2c:	7dfb      	ldrb	r3, [r7, #23]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d00a      	beq.n	800ab48 <follow_path+0x98>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800ab32:	7dfb      	ldrb	r3, [r7, #23]
 800ab34:	2b04      	cmp	r3, #4
 800ab36:	d160      	bne.n	800abfa <follow_path+0x14a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800ab38:	7afb      	ldrb	r3, [r7, #11]
 800ab3a:	f003 0304 	and.w	r3, r3, #4
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d15b      	bne.n	800abfa <follow_path+0x14a>
 800ab42:	2305      	movs	r3, #5
 800ab44:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800ab46:	e058      	b.n	800abfa <follow_path+0x14a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ab48:	7afb      	ldrb	r3, [r7, #11]
 800ab4a:	f003 0304 	and.w	r3, r3, #4
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d155      	bne.n	800abfe <follow_path+0x14e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800ab52:	693b      	ldr	r3, [r7, #16]
 800ab54:	799b      	ldrb	r3, [r3, #6]
 800ab56:	f003 0310 	and.w	r3, r3, #16
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d102      	bne.n	800ab64 <follow_path+0xb4>
				res = FR_NO_PATH; break;
 800ab5e:	2305      	movs	r3, #5
 800ab60:	75fb      	strb	r3, [r7, #23]
 800ab62:	e04d      	b.n	800ac00 <follow_path+0x150>
			}
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	781b      	ldrb	r3, [r3, #0]
 800ab68:	2b04      	cmp	r3, #4
 800ab6a:	d12f      	bne.n	800abcc <follow_path+0x11c>
				obj->c_scl = obj->sclust;
 800ab6c:	693b      	ldr	r3, [r7, #16]
 800ab6e:	689a      	ldr	r2, [r3, #8]
 800ab70:	693b      	ldr	r3, [r7, #16]
 800ab72:	621a      	str	r2, [r3, #32]
				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 800ab74:	693b      	ldr	r3, [r7, #16]
 800ab76:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800ab7a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ab7e:	693a      	ldr	r2, [r7, #16]
 800ab80:	79d2      	ldrb	r2, [r2, #7]
 800ab82:	431a      	orrs	r2, r3
 800ab84:	693b      	ldr	r3, [r7, #16]
 800ab86:	625a      	str	r2, [r3, #36]	; 0x24
				obj->c_ofs = dp->blk_ofs;
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ab8c:	693b      	ldr	r3, [r7, #16]
 800ab8e:	629a      	str	r2, [r3, #40]	; 0x28
				obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	695b      	ldr	r3, [r3, #20]
 800ab94:	3334      	adds	r3, #52	; 0x34
 800ab96:	4618      	mov	r0, r3
 800ab98:	f7fd f9ba 	bl	8007f10 <ld_dword>
 800ab9c:	4602      	mov	r2, r0
 800ab9e:	693b      	ldr	r3, [r7, #16]
 800aba0:	609a      	str	r2, [r3, #8]
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	695b      	ldr	r3, [r3, #20]
 800aba6:	3321      	adds	r3, #33	; 0x21
 800aba8:	781b      	ldrb	r3, [r3, #0]
 800abaa:	f003 0302 	and.w	r3, r3, #2
 800abae:	b2da      	uxtb	r2, r3
 800abb0:	693b      	ldr	r3, [r7, #16]
 800abb2:	71da      	strb	r2, [r3, #7]
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	695b      	ldr	r3, [r3, #20]
 800abb8:	3338      	adds	r3, #56	; 0x38
 800abba:	4618      	mov	r0, r3
 800abbc:	f7fd f9cb 	bl	8007f56 <ld_qword>
 800abc0:	4603      	mov	r3, r0
 800abc2:	460c      	mov	r4, r1
 800abc4:	693a      	ldr	r2, [r7, #16]
 800abc6:	e9c2 3404 	strd	r3, r4, [r2, #16]
 800abca:	e79c      	b.n	800ab06 <follow_path+0x56>
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abd6:	68fa      	ldr	r2, [r7, #12]
 800abd8:	8992      	ldrh	r2, [r2, #12]
 800abda:	fbb3 f0f2 	udiv	r0, r3, r2
 800abde:	fb02 f200 	mul.w	r2, r2, r0
 800abe2:	1a9b      	subs	r3, r3, r2
 800abe4:	440b      	add	r3, r1
 800abe6:	4619      	mov	r1, r3
 800abe8:	68f8      	ldr	r0, [r7, #12]
 800abea:	f7fe fdb8 	bl	800975e <ld_clust>
 800abee:	4602      	mov	r2, r0
 800abf0:	693b      	ldr	r3, [r7, #16]
 800abf2:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800abf4:	e787      	b.n	800ab06 <follow_path+0x56>
			if (res != FR_OK) break;
 800abf6:	bf00      	nop
 800abf8:	e002      	b.n	800ac00 <follow_path+0x150>
				break;
 800abfa:	bf00      	nop
 800abfc:	e000      	b.n	800ac00 <follow_path+0x150>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800abfe:	bf00      	nop
			}
		}
	}

	return res;
 800ac00:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac02:	4618      	mov	r0, r3
 800ac04:	371c      	adds	r7, #28
 800ac06:	46bd      	mov	sp, r7
 800ac08:	bd90      	pop	{r4, r7, pc}

0800ac0a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800ac0a:	b480      	push	{r7}
 800ac0c:	b087      	sub	sp, #28
 800ac0e:	af00      	add	r7, sp, #0
 800ac10:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800ac12:	f04f 33ff 	mov.w	r3, #4294967295
 800ac16:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d031      	beq.n	800ac84 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	617b      	str	r3, [r7, #20]
 800ac26:	e002      	b.n	800ac2e <get_ldnumber+0x24>
 800ac28:	697b      	ldr	r3, [r7, #20]
 800ac2a:	3301      	adds	r3, #1
 800ac2c:	617b      	str	r3, [r7, #20]
 800ac2e:	697b      	ldr	r3, [r7, #20]
 800ac30:	781b      	ldrb	r3, [r3, #0]
 800ac32:	2b1f      	cmp	r3, #31
 800ac34:	d903      	bls.n	800ac3e <get_ldnumber+0x34>
 800ac36:	697b      	ldr	r3, [r7, #20]
 800ac38:	781b      	ldrb	r3, [r3, #0]
 800ac3a:	2b3a      	cmp	r3, #58	; 0x3a
 800ac3c:	d1f4      	bne.n	800ac28 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800ac3e:	697b      	ldr	r3, [r7, #20]
 800ac40:	781b      	ldrb	r3, [r3, #0]
 800ac42:	2b3a      	cmp	r3, #58	; 0x3a
 800ac44:	d11c      	bne.n	800ac80 <get_ldnumber+0x76>
			tp = *path;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	1c5a      	adds	r2, r3, #1
 800ac50:	60fa      	str	r2, [r7, #12]
 800ac52:	781b      	ldrb	r3, [r3, #0]
 800ac54:	3b30      	subs	r3, #48	; 0x30
 800ac56:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800ac58:	68bb      	ldr	r3, [r7, #8]
 800ac5a:	2b09      	cmp	r3, #9
 800ac5c:	d80e      	bhi.n	800ac7c <get_ldnumber+0x72>
 800ac5e:	68fa      	ldr	r2, [r7, #12]
 800ac60:	697b      	ldr	r3, [r7, #20]
 800ac62:	429a      	cmp	r2, r3
 800ac64:	d10a      	bne.n	800ac7c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800ac66:	68bb      	ldr	r3, [r7, #8]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d107      	bne.n	800ac7c <get_ldnumber+0x72>
					vol = (int)i;
 800ac6c:	68bb      	ldr	r3, [r7, #8]
 800ac6e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800ac70:	697b      	ldr	r3, [r7, #20]
 800ac72:	3301      	adds	r3, #1
 800ac74:	617b      	str	r3, [r7, #20]
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	697a      	ldr	r2, [r7, #20]
 800ac7a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800ac7c:	693b      	ldr	r3, [r7, #16]
 800ac7e:	e002      	b.n	800ac86 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800ac80:	2300      	movs	r3, #0
 800ac82:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800ac84:	693b      	ldr	r3, [r7, #16]
}
 800ac86:	4618      	mov	r0, r3
 800ac88:	371c      	adds	r7, #28
 800ac8a:	46bd      	mov	sp, r7
 800ac8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac90:	4770      	bx	lr
	...

0800ac94 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800ac94:	b580      	push	{r7, lr}
 800ac96:	b082      	sub	sp, #8
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	6078      	str	r0, [r7, #4]
 800ac9c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	2200      	movs	r2, #0
 800aca2:	70da      	strb	r2, [r3, #3]
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	f04f 32ff 	mov.w	r2, #4294967295
 800acaa:	63da      	str	r2, [r3, #60]	; 0x3c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800acac:	6839      	ldr	r1, [r7, #0]
 800acae:	6878      	ldr	r0, [r7, #4]
 800acb0:	f7fd fd3a 	bl	8008728 <move_window>
 800acb4:	4603      	mov	r3, r0
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d001      	beq.n	800acbe <check_fs+0x2a>
 800acba:	2304      	movs	r3, #4
 800acbc:	e044      	b.n	800ad48 <check_fs+0xb4>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	3340      	adds	r3, #64	; 0x40
 800acc2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800acc6:	4618      	mov	r0, r3
 800acc8:	f7fd f90a 	bl	8007ee0 <ld_word>
 800accc:	4603      	mov	r3, r0
 800acce:	461a      	mov	r2, r3
 800acd0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800acd4:	429a      	cmp	r2, r3
 800acd6:	d001      	beq.n	800acdc <check_fs+0x48>
 800acd8:	2303      	movs	r3, #3
 800acda:	e035      	b.n	800ad48 <check_fs+0xb4>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ace2:	2be9      	cmp	r3, #233	; 0xe9
 800ace4:	d009      	beq.n	800acfa <check_fs+0x66>
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800acec:	2beb      	cmp	r3, #235	; 0xeb
 800acee:	d11e      	bne.n	800ad2e <check_fs+0x9a>
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800acf6:	2b90      	cmp	r3, #144	; 0x90
 800acf8:	d119      	bne.n	800ad2e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	3340      	adds	r3, #64	; 0x40
 800acfe:	3336      	adds	r3, #54	; 0x36
 800ad00:	4618      	mov	r0, r3
 800ad02:	f7fd f905 	bl	8007f10 <ld_dword>
 800ad06:	4603      	mov	r3, r0
 800ad08:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800ad0c:	4a10      	ldr	r2, [pc, #64]	; (800ad50 <check_fs+0xbc>)
 800ad0e:	4293      	cmp	r3, r2
 800ad10:	d101      	bne.n	800ad16 <check_fs+0x82>
 800ad12:	2300      	movs	r3, #0
 800ad14:	e018      	b.n	800ad48 <check_fs+0xb4>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	3340      	adds	r3, #64	; 0x40
 800ad1a:	3352      	adds	r3, #82	; 0x52
 800ad1c:	4618      	mov	r0, r3
 800ad1e:	f7fd f8f7 	bl	8007f10 <ld_dword>
 800ad22:	4602      	mov	r2, r0
 800ad24:	4b0b      	ldr	r3, [pc, #44]	; (800ad54 <check_fs+0xc0>)
 800ad26:	429a      	cmp	r2, r3
 800ad28:	d101      	bne.n	800ad2e <check_fs+0x9a>
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	e00c      	b.n	800ad48 <check_fs+0xb4>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	3340      	adds	r3, #64	; 0x40
 800ad32:	220b      	movs	r2, #11
 800ad34:	4908      	ldr	r1, [pc, #32]	; (800ad58 <check_fs+0xc4>)
 800ad36:	4618      	mov	r0, r3
 800ad38:	f7fd fad3 	bl	80082e2 <mem_cmp>
 800ad3c:	4603      	mov	r3, r0
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d101      	bne.n	800ad46 <check_fs+0xb2>
 800ad42:	2301      	movs	r3, #1
 800ad44:	e000      	b.n	800ad48 <check_fs+0xb4>
#endif
	return 2;
 800ad46:	2302      	movs	r3, #2
}
 800ad48:	4618      	mov	r0, r3
 800ad4a:	3708      	adds	r7, #8
 800ad4c:	46bd      	mov	sp, r7
 800ad4e:	bd80      	pop	{r7, pc}
 800ad50:	00544146 	.word	0x00544146
 800ad54:	33544146 	.word	0x33544146
 800ad58:	0800f2c0 	.word	0x0800f2c0

0800ad5c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800ad5c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800ad60:	b098      	sub	sp, #96	; 0x60
 800ad62:	af00      	add	r7, sp, #0
 800ad64:	60f8      	str	r0, [r7, #12]
 800ad66:	60b9      	str	r1, [r7, #8]
 800ad68:	4613      	mov	r3, r2
 800ad6a:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800ad6c:	68bb      	ldr	r3, [r7, #8]
 800ad6e:	2200      	movs	r2, #0
 800ad70:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800ad72:	68f8      	ldr	r0, [r7, #12]
 800ad74:	f7ff ff49 	bl	800ac0a <get_ldnumber>
 800ad78:	6478      	str	r0, [r7, #68]	; 0x44
	if (vol < 0) return FR_INVALID_DRIVE;
 800ad7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	da01      	bge.n	800ad84 <find_volume+0x28>
 800ad80:	230b      	movs	r3, #11
 800ad82:	e370      	b.n	800b466 <find_volume+0x70a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800ad84:	4aae      	ldr	r2, [pc, #696]	; (800b040 <find_volume+0x2e4>)
 800ad86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ad88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ad8c:	643b      	str	r3, [r7, #64]	; 0x40
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800ad8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d101      	bne.n	800ad98 <find_volume+0x3c>
 800ad94:	230c      	movs	r3, #12
 800ad96:	e366      	b.n	800b466 <find_volume+0x70a>

	ENTER_FF(fs);						/* Lock the volume */
 800ad98:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800ad9a:	f7fd fae4 	bl	8008366 <lock_fs>
 800ad9e:	4603      	mov	r3, r0
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d101      	bne.n	800ada8 <find_volume+0x4c>
 800ada4:	230f      	movs	r3, #15
 800ada6:	e35e      	b.n	800b466 <find_volume+0x70a>
	*rfs = fs;							/* Return pointer to the file system object */
 800ada8:	68bb      	ldr	r3, [r7, #8]
 800adaa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800adac:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800adae:	79fb      	ldrb	r3, [r7, #7]
 800adb0:	f023 0301 	bic.w	r3, r3, #1
 800adb4:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800adb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800adb8:	781b      	ldrb	r3, [r3, #0]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d01a      	beq.n	800adf4 <find_volume+0x98>
		stat = disk_status(fs->drv);
 800adbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800adc0:	785b      	ldrb	r3, [r3, #1]
 800adc2:	4618      	mov	r0, r3
 800adc4:	f7fc ffee 	bl	8007da4 <disk_status>
 800adc8:	4603      	mov	r3, r0
 800adca:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800adce:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800add2:	f003 0301 	and.w	r3, r3, #1
 800add6:	2b00      	cmp	r3, #0
 800add8:	d10c      	bne.n	800adf4 <find_volume+0x98>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800adda:	79fb      	ldrb	r3, [r7, #7]
 800addc:	2b00      	cmp	r3, #0
 800adde:	d007      	beq.n	800adf0 <find_volume+0x94>
 800ade0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ade4:	f003 0304 	and.w	r3, r3, #4
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d001      	beq.n	800adf0 <find_volume+0x94>
				return FR_WRITE_PROTECTED;
 800adec:	230a      	movs	r3, #10
 800adee:	e33a      	b.n	800b466 <find_volume+0x70a>
			}
			return FR_OK;				/* The file system object is valid */
 800adf0:	2300      	movs	r3, #0
 800adf2:	e338      	b.n	800b466 <find_volume+0x70a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800adf4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800adf6:	2200      	movs	r2, #0
 800adf8:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800adfa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800adfc:	b2da      	uxtb	r2, r3
 800adfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae00:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800ae02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae04:	785b      	ldrb	r3, [r3, #1]
 800ae06:	4618      	mov	r0, r3
 800ae08:	f7fc ffe6 	bl	8007dd8 <disk_initialize>
 800ae0c:	4603      	mov	r3, r0
 800ae0e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800ae12:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ae16:	f003 0301 	and.w	r3, r3, #1
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d001      	beq.n	800ae22 <find_volume+0xc6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800ae1e:	2303      	movs	r3, #3
 800ae20:	e321      	b.n	800b466 <find_volume+0x70a>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800ae22:	79fb      	ldrb	r3, [r7, #7]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d007      	beq.n	800ae38 <find_volume+0xdc>
 800ae28:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ae2c:	f003 0304 	and.w	r3, r3, #4
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d001      	beq.n	800ae38 <find_volume+0xdc>
		return FR_WRITE_PROTECTED;
 800ae34:	230a      	movs	r3, #10
 800ae36:	e316      	b.n	800b466 <find_volume+0x70a>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800ae38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae3a:	7858      	ldrb	r0, [r3, #1]
 800ae3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae3e:	330c      	adds	r3, #12
 800ae40:	461a      	mov	r2, r3
 800ae42:	2102      	movs	r1, #2
 800ae44:	f7fd f82e 	bl	8007ea4 <disk_ioctl>
 800ae48:	4603      	mov	r3, r0
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d001      	beq.n	800ae52 <find_volume+0xf6>
 800ae4e:	2301      	movs	r3, #1
 800ae50:	e309      	b.n	800b466 <find_volume+0x70a>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800ae52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae54:	899b      	ldrh	r3, [r3, #12]
 800ae56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae5a:	d80d      	bhi.n	800ae78 <find_volume+0x11c>
 800ae5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae5e:	899b      	ldrh	r3, [r3, #12]
 800ae60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ae64:	d308      	bcc.n	800ae78 <find_volume+0x11c>
 800ae66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae68:	899b      	ldrh	r3, [r3, #12]
 800ae6a:	461a      	mov	r2, r3
 800ae6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae6e:	899b      	ldrh	r3, [r3, #12]
 800ae70:	3b01      	subs	r3, #1
 800ae72:	4013      	ands	r3, r2
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d001      	beq.n	800ae7c <find_volume+0x120>
 800ae78:	2301      	movs	r3, #1
 800ae7a:	e2f4      	b.n	800b466 <find_volume+0x70a>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	65bb      	str	r3, [r7, #88]	; 0x58
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800ae80:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ae82:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800ae84:	f7ff ff06 	bl	800ac94 <check_fs>
 800ae88:	4603      	mov	r3, r0
 800ae8a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800ae8e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ae92:	2b02      	cmp	r3, #2
 800ae94:	d14b      	bne.n	800af2e <find_volume+0x1d2>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ae96:	2300      	movs	r3, #0
 800ae98:	64bb      	str	r3, [r7, #72]	; 0x48
 800ae9a:	e01f      	b.n	800aedc <find_volume+0x180>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800ae9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae9e:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800aea2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aea4:	011b      	lsls	r3, r3, #4
 800aea6:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800aeaa:	4413      	add	r3, r2
 800aeac:	63bb      	str	r3, [r7, #56]	; 0x38
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800aeae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aeb0:	3304      	adds	r3, #4
 800aeb2:	781b      	ldrb	r3, [r3, #0]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d006      	beq.n	800aec6 <find_volume+0x16a>
 800aeb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aeba:	3308      	adds	r3, #8
 800aebc:	4618      	mov	r0, r3
 800aebe:	f7fd f827 	bl	8007f10 <ld_dword>
 800aec2:	4602      	mov	r2, r0
 800aec4:	e000      	b.n	800aec8 <find_volume+0x16c>
 800aec6:	2200      	movs	r2, #0
 800aec8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aeca:	009b      	lsls	r3, r3, #2
 800aecc:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800aed0:	440b      	add	r3, r1
 800aed2:	f843 2c50 	str.w	r2, [r3, #-80]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800aed6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aed8:	3301      	adds	r3, #1
 800aeda:	64bb      	str	r3, [r7, #72]	; 0x48
 800aedc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aede:	2b03      	cmp	r3, #3
 800aee0:	d9dc      	bls.n	800ae9c <find_volume+0x140>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800aee2:	2300      	movs	r3, #0
 800aee4:	64bb      	str	r3, [r7, #72]	; 0x48
		if (i) i--;
 800aee6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d002      	beq.n	800aef2 <find_volume+0x196>
 800aeec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aeee:	3b01      	subs	r3, #1
 800aef0:	64bb      	str	r3, [r7, #72]	; 0x48
		do {							/* Find an FAT volume */
			bsect = br[i];
 800aef2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aef4:	009b      	lsls	r3, r3, #2
 800aef6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800aefa:	4413      	add	r3, r2
 800aefc:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800af00:	65bb      	str	r3, [r7, #88]	; 0x58
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800af02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800af04:	2b00      	cmp	r3, #0
 800af06:	d005      	beq.n	800af14 <find_volume+0x1b8>
 800af08:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800af0a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800af0c:	f7ff fec2 	bl	800ac94 <check_fs>
 800af10:	4603      	mov	r3, r0
 800af12:	e000      	b.n	800af16 <find_volume+0x1ba>
 800af14:	2303      	movs	r3, #3
 800af16:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800af1a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800af1e:	2b01      	cmp	r3, #1
 800af20:	d905      	bls.n	800af2e <find_volume+0x1d2>
 800af22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800af24:	3301      	adds	r3, #1
 800af26:	64bb      	str	r3, [r7, #72]	; 0x48
 800af28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800af2a:	2b03      	cmp	r3, #3
 800af2c:	d9e1      	bls.n	800aef2 <find_volume+0x196>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800af2e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800af32:	2b04      	cmp	r3, #4
 800af34:	d101      	bne.n	800af3a <find_volume+0x1de>
 800af36:	2301      	movs	r3, #1
 800af38:	e295      	b.n	800b466 <find_volume+0x70a>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800af3a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800af3e:	2b01      	cmp	r3, #1
 800af40:	d901      	bls.n	800af46 <find_volume+0x1ea>
 800af42:	230d      	movs	r3, #13
 800af44:	e28f      	b.n	800b466 <find_volume+0x70a>

	/* An FAT volume is found (bsect). Following code initializes the file system object */

#if _FS_EXFAT
	if (fmt == 1) {
 800af46:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800af4a:	2b01      	cmp	r3, #1
 800af4c:	f040 8101 	bne.w	800b152 <find_volume+0x3f6>
		QWORD maxlba;

		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 800af50:	230b      	movs	r3, #11
 800af52:	64bb      	str	r3, [r7, #72]	; 0x48
 800af54:	e002      	b.n	800af5c <find_volume+0x200>
 800af56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800af58:	3301      	adds	r3, #1
 800af5a:	64bb      	str	r3, [r7, #72]	; 0x48
 800af5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800af5e:	2b3f      	cmp	r3, #63	; 0x3f
 800af60:	d806      	bhi.n	800af70 <find_volume+0x214>
 800af62:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800af64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800af66:	4413      	add	r3, r2
 800af68:	3340      	adds	r3, #64	; 0x40
 800af6a:	781b      	ldrb	r3, [r3, #0]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d0f2      	beq.n	800af56 <find_volume+0x1fa>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 800af70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800af72:	2b3f      	cmp	r3, #63	; 0x3f
 800af74:	d801      	bhi.n	800af7a <find_volume+0x21e>
 800af76:	230d      	movs	r3, #13
 800af78:	e275      	b.n	800b466 <find_volume+0x70a>

		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Must be 1.0) */
 800af7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af7c:	3340      	adds	r3, #64	; 0x40
 800af7e:	3368      	adds	r3, #104	; 0x68
 800af80:	4618      	mov	r0, r3
 800af82:	f7fc ffad 	bl	8007ee0 <ld_word>
 800af86:	4603      	mov	r3, r0
 800af88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af8c:	d001      	beq.n	800af92 <find_volume+0x236>
 800af8e:	230d      	movs	r3, #13
 800af90:	e269      	b.n	800b466 <find_volume+0x70a>

		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 800af92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af94:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 800af98:	461a      	mov	r2, r3
 800af9a:	2301      	movs	r3, #1
 800af9c:	4093      	lsls	r3, r2
 800af9e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800afa0:	8992      	ldrh	r2, [r2, #12]
 800afa2:	4293      	cmp	r3, r2
 800afa4:	d001      	beq.n	800afaa <find_volume+0x24e>
			return FR_NO_FILESYSTEM;
 800afa6:	230d      	movs	r3, #13
 800afa8:	e25d      	b.n	800b466 <find_volume+0x70a>
		}

		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 800afaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800afac:	3340      	adds	r3, #64	; 0x40
 800afae:	3348      	adds	r3, #72	; 0x48
 800afb0:	4618      	mov	r0, r3
 800afb2:	f7fc ffd0 	bl	8007f56 <ld_qword>
 800afb6:	460a      	mov	r2, r1
 800afb8:	4601      	mov	r1, r0
 800afba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800afbc:	469b      	mov	fp, r3
 800afbe:	f04f 0c00 	mov.w	ip, #0
 800afc2:	eb1b 0301 	adds.w	r3, fp, r1
 800afc6:	eb4c 0402 	adc.w	r4, ip, r2
 800afca:	e9c7 3408 	strd	r3, r4, [r7, #32]
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 800afce:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800afd2:	2c01      	cmp	r4, #1
 800afd4:	bf08      	it	eq
 800afd6:	2b00      	cmpeq	r3, #0
 800afd8:	d301      	bcc.n	800afde <find_volume+0x282>
 800afda:	230d      	movs	r3, #13
 800afdc:	e243      	b.n	800b466 <find_volume+0x70a>

		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 800afde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800afe0:	3340      	adds	r3, #64	; 0x40
 800afe2:	3354      	adds	r3, #84	; 0x54
 800afe4:	4618      	mov	r0, r3
 800afe6:	f7fc ff93 	bl	8007f10 <ld_dword>
 800afea:	4602      	mov	r2, r0
 800afec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800afee:	629a      	str	r2, [r3, #40]	; 0x28

		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 800aff0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aff2:	f893 20ae 	ldrb.w	r2, [r3, #174]	; 0xae
 800aff6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aff8:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 800affa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800affc:	789b      	ldrb	r3, [r3, #2]
 800affe:	2b01      	cmp	r3, #1
 800b000:	d001      	beq.n	800b006 <find_volume+0x2aa>
 800b002:	230d      	movs	r3, #13
 800b004:	e22f      	b.n	800b466 <find_volume+0x70a>

		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 800b006:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b008:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 800b00c:	461a      	mov	r2, r3
 800b00e:	2301      	movs	r3, #1
 800b010:	4093      	lsls	r3, r2
 800b012:	b29a      	uxth	r2, r3
 800b014:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b016:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 800b018:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b01a:	895b      	ldrh	r3, [r3, #10]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d101      	bne.n	800b024 <find_volume+0x2c8>
 800b020:	230d      	movs	r3, #13
 800b022:	e220      	b.n	800b466 <find_volume+0x70a>

		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 800b024:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b026:	3340      	adds	r3, #64	; 0x40
 800b028:	335c      	adds	r3, #92	; 0x5c
 800b02a:	4618      	mov	r0, r3
 800b02c:	f7fc ff70 	bl	8007f10 <ld_dword>
 800b030:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 800b032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b034:	4a03      	ldr	r2, [pc, #12]	; (800b044 <find_volume+0x2e8>)
 800b036:	4293      	cmp	r3, r2
 800b038:	d906      	bls.n	800b048 <find_volume+0x2ec>
 800b03a:	230d      	movs	r3, #13
 800b03c:	e213      	b.n	800b466 <find_volume+0x70a>
 800b03e:	bf00      	nop
 800b040:	20000298 	.word	0x20000298
 800b044:	7ffffffd 	.word	0x7ffffffd
		fs->n_fatent = nclst + 2;
 800b048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b04a:	1c9a      	adds	r2, r3, #2
 800b04c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b04e:	625a      	str	r2, [r3, #36]	; 0x24

		/* Boundaries and Limits */
		fs->volbase = bsect;
 800b050:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b052:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b054:	62da      	str	r2, [r3, #44]	; 0x2c
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 800b056:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b058:	3340      	adds	r3, #64	; 0x40
 800b05a:	3358      	adds	r3, #88	; 0x58
 800b05c:	4618      	mov	r0, r3
 800b05e:	f7fc ff57 	bl	8007f10 <ld_dword>
 800b062:	4602      	mov	r2, r0
 800b064:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b066:	441a      	add	r2, r3
 800b068:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b06a:	639a      	str	r2, [r3, #56]	; 0x38
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 800b06c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b06e:	3340      	adds	r3, #64	; 0x40
 800b070:	3350      	adds	r3, #80	; 0x50
 800b072:	4618      	mov	r0, r3
 800b074:	f7fc ff4c 	bl	8007f10 <ld_dword>
 800b078:	4602      	mov	r2, r0
 800b07a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b07c:	441a      	add	r2, r3
 800b07e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b080:	631a      	str	r2, [r3, #48]	; 0x30
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 800b082:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b086:	4619      	mov	r1, r3
 800b088:	f04f 0200 	mov.w	r2, #0
 800b08c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b08e:	895b      	ldrh	r3, [r3, #10]
 800b090:	4618      	mov	r0, r3
 800b092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b094:	fb03 f300 	mul.w	r3, r3, r0
 800b098:	469b      	mov	fp, r3
 800b09a:	f04f 0c00 	mov.w	ip, #0
 800b09e:	eb1b 0301 	adds.w	r3, fp, r1
 800b0a2:	eb4c 0402 	adc.w	r4, ip, r2
 800b0a6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800b0aa:	42a2      	cmp	r2, r4
 800b0ac:	bf08      	it	eq
 800b0ae:	4299      	cmpeq	r1, r3
 800b0b0:	d201      	bcs.n	800b0b6 <find_volume+0x35a>
 800b0b2:	230d      	movs	r3, #13
 800b0b4:	e1d7      	b.n	800b466 <find_volume+0x70a>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 800b0b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b0b8:	3340      	adds	r3, #64	; 0x40
 800b0ba:	3360      	adds	r3, #96	; 0x60
 800b0bc:	4618      	mov	r0, r3
 800b0be:	f7fc ff27 	bl	8007f10 <ld_dword>
 800b0c2:	4602      	mov	r2, r0
 800b0c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b0c6:	635a      	str	r2, [r3, #52]	; 0x34

		/* Check if bitmap location is in assumption (at the first cluster) */
		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 800b0c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b0ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0cc:	4619      	mov	r1, r3
 800b0ce:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800b0d0:	f7fd fbc8 	bl	8008864 <clust2sect>
 800b0d4:	4603      	mov	r3, r0
 800b0d6:	4619      	mov	r1, r3
 800b0d8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800b0da:	f7fd fb25 	bl	8008728 <move_window>
 800b0de:	4603      	mov	r3, r0
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d001      	beq.n	800b0e8 <find_volume+0x38c>
 800b0e4:	2301      	movs	r3, #1
 800b0e6:	e1be      	b.n	800b466 <find_volume+0x70a>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800b0e8:	2300      	movs	r3, #0
 800b0ea:	64bb      	str	r3, [r7, #72]	; 0x48
 800b0ec:	e015      	b.n	800b11a <find_volume+0x3be>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800b0ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b0f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b0f2:	4413      	add	r3, r2
 800b0f4:	3340      	adds	r3, #64	; 0x40
 800b0f6:	781b      	ldrb	r3, [r3, #0]
 800b0f8:	2b81      	cmp	r3, #129	; 0x81
 800b0fa:	d10b      	bne.n	800b114 <find_volume+0x3b8>
 800b0fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b0fe:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800b102:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b104:	3314      	adds	r3, #20
 800b106:	4413      	add	r3, r2
 800b108:	4618      	mov	r0, r3
 800b10a:	f7fc ff01 	bl	8007f10 <ld_dword>
 800b10e:	4603      	mov	r3, r0
 800b110:	2b02      	cmp	r3, #2
 800b112:	d009      	beq.n	800b128 <find_volume+0x3cc>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800b114:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b116:	3320      	adds	r3, #32
 800b118:	64bb      	str	r3, [r7, #72]	; 0x48
 800b11a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b11c:	899b      	ldrh	r3, [r3, #12]
 800b11e:	461a      	mov	r2, r3
 800b120:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b122:	4293      	cmp	r3, r2
 800b124:	d3e3      	bcc.n	800b0ee <find_volume+0x392>
 800b126:	e000      	b.n	800b12a <find_volume+0x3ce>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800b128:	bf00      	nop
		}
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
 800b12a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b12c:	899b      	ldrh	r3, [r3, #12]
 800b12e:	461a      	mov	r2, r3
 800b130:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b132:	4293      	cmp	r3, r2
 800b134:	d101      	bne.n	800b13a <find_volume+0x3de>
 800b136:	230d      	movs	r3, #13
 800b138:	e195      	b.n	800b466 <find_volume+0x70a>
#if !_FS_READONLY
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b13a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b13c:	f04f 32ff 	mov.w	r2, #4294967295
 800b140:	621a      	str	r2, [r3, #32]
 800b142:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b144:	6a1a      	ldr	r2, [r3, #32]
 800b146:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b148:	61da      	str	r2, [r3, #28]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
 800b14a:	2304      	movs	r3, #4
 800b14c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b150:	e177      	b.n	800b442 <find_volume+0x6e6>
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800b152:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b154:	3340      	adds	r3, #64	; 0x40
 800b156:	330b      	adds	r3, #11
 800b158:	4618      	mov	r0, r3
 800b15a:	f7fc fec1 	bl	8007ee0 <ld_word>
 800b15e:	4603      	mov	r3, r0
 800b160:	461a      	mov	r2, r3
 800b162:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b164:	899b      	ldrh	r3, [r3, #12]
 800b166:	429a      	cmp	r2, r3
 800b168:	d001      	beq.n	800b16e <find_volume+0x412>
 800b16a:	230d      	movs	r3, #13
 800b16c:	e17b      	b.n	800b466 <find_volume+0x70a>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800b16e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b170:	3340      	adds	r3, #64	; 0x40
 800b172:	3316      	adds	r3, #22
 800b174:	4618      	mov	r0, r3
 800b176:	f7fc feb3 	bl	8007ee0 <ld_word>
 800b17a:	4603      	mov	r3, r0
 800b17c:	657b      	str	r3, [r7, #84]	; 0x54
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800b17e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b180:	2b00      	cmp	r3, #0
 800b182:	d106      	bne.n	800b192 <find_volume+0x436>
 800b184:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b186:	3340      	adds	r3, #64	; 0x40
 800b188:	3324      	adds	r3, #36	; 0x24
 800b18a:	4618      	mov	r0, r3
 800b18c:	f7fc fec0 	bl	8007f10 <ld_dword>
 800b190:	6578      	str	r0, [r7, #84]	; 0x54
		fs->fsize = fasize;
 800b192:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b194:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b196:	629a      	str	r2, [r3, #40]	; 0x28

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800b198:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b19a:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 800b19e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b1a0:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800b1a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b1a4:	789b      	ldrb	r3, [r3, #2]
 800b1a6:	2b01      	cmp	r3, #1
 800b1a8:	d005      	beq.n	800b1b6 <find_volume+0x45a>
 800b1aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b1ac:	789b      	ldrb	r3, [r3, #2]
 800b1ae:	2b02      	cmp	r3, #2
 800b1b0:	d001      	beq.n	800b1b6 <find_volume+0x45a>
 800b1b2:	230d      	movs	r3, #13
 800b1b4:	e157      	b.n	800b466 <find_volume+0x70a>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800b1b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b1b8:	789b      	ldrb	r3, [r3, #2]
 800b1ba:	461a      	mov	r2, r3
 800b1bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b1be:	fb02 f303 	mul.w	r3, r2, r3
 800b1c2:	657b      	str	r3, [r7, #84]	; 0x54

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800b1c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b1c6:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800b1ca:	b29a      	uxth	r2, r3
 800b1cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b1ce:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800b1d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b1d2:	895b      	ldrh	r3, [r3, #10]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d008      	beq.n	800b1ea <find_volume+0x48e>
 800b1d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b1da:	895b      	ldrh	r3, [r3, #10]
 800b1dc:	461a      	mov	r2, r3
 800b1de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b1e0:	895b      	ldrh	r3, [r3, #10]
 800b1e2:	3b01      	subs	r3, #1
 800b1e4:	4013      	ands	r3, r2
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d001      	beq.n	800b1ee <find_volume+0x492>
 800b1ea:	230d      	movs	r3, #13
 800b1ec:	e13b      	b.n	800b466 <find_volume+0x70a>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800b1ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b1f0:	3340      	adds	r3, #64	; 0x40
 800b1f2:	3311      	adds	r3, #17
 800b1f4:	4618      	mov	r0, r3
 800b1f6:	f7fc fe73 	bl	8007ee0 <ld_word>
 800b1fa:	4603      	mov	r3, r0
 800b1fc:	461a      	mov	r2, r3
 800b1fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b200:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800b202:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b204:	891b      	ldrh	r3, [r3, #8]
 800b206:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b208:	8992      	ldrh	r2, [r2, #12]
 800b20a:	0952      	lsrs	r2, r2, #5
 800b20c:	b292      	uxth	r2, r2
 800b20e:	fbb3 f1f2 	udiv	r1, r3, r2
 800b212:	fb02 f201 	mul.w	r2, r2, r1
 800b216:	1a9b      	subs	r3, r3, r2
 800b218:	b29b      	uxth	r3, r3
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d001      	beq.n	800b222 <find_volume+0x4c6>
 800b21e:	230d      	movs	r3, #13
 800b220:	e121      	b.n	800b466 <find_volume+0x70a>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800b222:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b224:	3340      	adds	r3, #64	; 0x40
 800b226:	3313      	adds	r3, #19
 800b228:	4618      	mov	r0, r3
 800b22a:	f7fc fe59 	bl	8007ee0 <ld_word>
 800b22e:	4603      	mov	r3, r0
 800b230:	653b      	str	r3, [r7, #80]	; 0x50
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800b232:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b234:	2b00      	cmp	r3, #0
 800b236:	d106      	bne.n	800b246 <find_volume+0x4ea>
 800b238:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b23a:	3340      	adds	r3, #64	; 0x40
 800b23c:	3320      	adds	r3, #32
 800b23e:	4618      	mov	r0, r3
 800b240:	f7fc fe66 	bl	8007f10 <ld_dword>
 800b244:	6538      	str	r0, [r7, #80]	; 0x50

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800b246:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b248:	3340      	adds	r3, #64	; 0x40
 800b24a:	330e      	adds	r3, #14
 800b24c:	4618      	mov	r0, r3
 800b24e:	f7fc fe47 	bl	8007ee0 <ld_word>
 800b252:	4603      	mov	r3, r0
 800b254:	86fb      	strh	r3, [r7, #54]	; 0x36
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800b256:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d101      	bne.n	800b260 <find_volume+0x504>
 800b25c:	230d      	movs	r3, #13
 800b25e:	e102      	b.n	800b466 <find_volume+0x70a>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800b260:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800b262:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b264:	4413      	add	r3, r2
 800b266:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b268:	8911      	ldrh	r1, [r2, #8]
 800b26a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b26c:	8992      	ldrh	r2, [r2, #12]
 800b26e:	0952      	lsrs	r2, r2, #5
 800b270:	b292      	uxth	r2, r2
 800b272:	fbb1 f2f2 	udiv	r2, r1, r2
 800b276:	b292      	uxth	r2, r2
 800b278:	4413      	add	r3, r2
 800b27a:	633b      	str	r3, [r7, #48]	; 0x30
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800b27c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b27e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b280:	429a      	cmp	r2, r3
 800b282:	d201      	bcs.n	800b288 <find_volume+0x52c>
 800b284:	230d      	movs	r3, #13
 800b286:	e0ee      	b.n	800b466 <find_volume+0x70a>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800b288:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b28a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b28c:	1ad3      	subs	r3, r2, r3
 800b28e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b290:	8952      	ldrh	r2, [r2, #10]
 800b292:	fbb3 f3f2 	udiv	r3, r3, r2
 800b296:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800b298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d101      	bne.n	800b2a2 <find_volume+0x546>
 800b29e:	230d      	movs	r3, #13
 800b2a0:	e0e1      	b.n	800b466 <find_volume+0x70a>
		fmt = FS_FAT32;
 800b2a2:	2303      	movs	r3, #3
 800b2a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800b2a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2aa:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800b2ae:	4293      	cmp	r3, r2
 800b2b0:	d802      	bhi.n	800b2b8 <find_volume+0x55c>
 800b2b2:	2302      	movs	r3, #2
 800b2b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800b2b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2ba:	f640 72f5 	movw	r2, #4085	; 0xff5
 800b2be:	4293      	cmp	r3, r2
 800b2c0:	d802      	bhi.n	800b2c8 <find_volume+0x56c>
 800b2c2:	2301      	movs	r3, #1
 800b2c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800b2c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2ca:	1c9a      	adds	r2, r3, #2
 800b2cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b2ce:	625a      	str	r2, [r3, #36]	; 0x24
		fs->volbase = bsect;							/* Volume start sector */
 800b2d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b2d2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b2d4:	62da      	str	r2, [r3, #44]	; 0x2c
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800b2d6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800b2d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b2da:	441a      	add	r2, r3
 800b2dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b2de:	631a      	str	r2, [r3, #48]	; 0x30
		fs->database = bsect + sysect;					/* Data start sector */
 800b2e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b2e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2e4:	441a      	add	r2, r3
 800b2e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b2e8:	639a      	str	r2, [r3, #56]	; 0x38
		if (fmt == FS_FAT32) {
 800b2ea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b2ee:	2b03      	cmp	r3, #3
 800b2f0:	d11e      	bne.n	800b330 <find_volume+0x5d4>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800b2f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b2f4:	3340      	adds	r3, #64	; 0x40
 800b2f6:	332a      	adds	r3, #42	; 0x2a
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	f7fc fdf1 	bl	8007ee0 <ld_word>
 800b2fe:	4603      	mov	r3, r0
 800b300:	2b00      	cmp	r3, #0
 800b302:	d001      	beq.n	800b308 <find_volume+0x5ac>
 800b304:	230d      	movs	r3, #13
 800b306:	e0ae      	b.n	800b466 <find_volume+0x70a>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800b308:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b30a:	891b      	ldrh	r3, [r3, #8]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d001      	beq.n	800b314 <find_volume+0x5b8>
 800b310:	230d      	movs	r3, #13
 800b312:	e0a8      	b.n	800b466 <find_volume+0x70a>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800b314:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b316:	3340      	adds	r3, #64	; 0x40
 800b318:	332c      	adds	r3, #44	; 0x2c
 800b31a:	4618      	mov	r0, r3
 800b31c:	f7fc fdf8 	bl	8007f10 <ld_dword>
 800b320:	4602      	mov	r2, r0
 800b322:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b324:	635a      	str	r2, [r3, #52]	; 0x34
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800b326:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b32a:	009b      	lsls	r3, r3, #2
 800b32c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b32e:	e01f      	b.n	800b370 <find_volume+0x614>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800b330:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b332:	891b      	ldrh	r3, [r3, #8]
 800b334:	2b00      	cmp	r3, #0
 800b336:	d101      	bne.n	800b33c <find_volume+0x5e0>
 800b338:	230d      	movs	r3, #13
 800b33a:	e094      	b.n	800b466 <find_volume+0x70a>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800b33c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b33e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b340:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b342:	441a      	add	r2, r3
 800b344:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b346:	635a      	str	r2, [r3, #52]	; 0x34
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b348:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b34c:	2b02      	cmp	r3, #2
 800b34e:	d103      	bne.n	800b358 <find_volume+0x5fc>
 800b350:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b354:	005b      	lsls	r3, r3, #1
 800b356:	e00a      	b.n	800b36e <find_volume+0x612>
 800b358:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b35a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b35c:	4613      	mov	r3, r2
 800b35e:	005b      	lsls	r3, r3, #1
 800b360:	4413      	add	r3, r2
 800b362:	085a      	lsrs	r2, r3, #1
 800b364:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b368:	f003 0301 	and.w	r3, r3, #1
 800b36c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800b36e:	64fb      	str	r3, [r7, #76]	; 0x4c
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b370:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b372:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b374:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b376:	899b      	ldrh	r3, [r3, #12]
 800b378:	4619      	mov	r1, r3
 800b37a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b37c:	440b      	add	r3, r1
 800b37e:	3b01      	subs	r3, #1
 800b380:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b382:	8989      	ldrh	r1, [r1, #12]
 800b384:	fbb3 f3f1 	udiv	r3, r3, r1
 800b388:	429a      	cmp	r2, r3
 800b38a:	d201      	bcs.n	800b390 <find_volume+0x634>
 800b38c:	230d      	movs	r3, #13
 800b38e:	e06a      	b.n	800b466 <find_volume+0x70a>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b390:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b392:	f04f 32ff 	mov.w	r2, #4294967295
 800b396:	621a      	str	r2, [r3, #32]
 800b398:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b39a:	6a1a      	ldr	r2, [r3, #32]
 800b39c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b39e:	61da      	str	r2, [r3, #28]
		fs->fsi_flag = 0x80;
 800b3a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b3a2:	2280      	movs	r2, #128	; 0x80
 800b3a4:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800b3a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b3aa:	2b03      	cmp	r3, #3
 800b3ac:	d149      	bne.n	800b442 <find_volume+0x6e6>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800b3ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b3b0:	3340      	adds	r3, #64	; 0x40
 800b3b2:	3330      	adds	r3, #48	; 0x30
 800b3b4:	4618      	mov	r0, r3
 800b3b6:	f7fc fd93 	bl	8007ee0 <ld_word>
 800b3ba:	4603      	mov	r3, r0
 800b3bc:	2b01      	cmp	r3, #1
 800b3be:	d140      	bne.n	800b442 <find_volume+0x6e6>
			&& move_window(fs, bsect + 1) == FR_OK)
 800b3c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b3c2:	3301      	adds	r3, #1
 800b3c4:	4619      	mov	r1, r3
 800b3c6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800b3c8:	f7fd f9ae 	bl	8008728 <move_window>
 800b3cc:	4603      	mov	r3, r0
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d137      	bne.n	800b442 <find_volume+0x6e6>
		{
			fs->fsi_flag = 0;
 800b3d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b3d4:	2200      	movs	r2, #0
 800b3d6:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800b3d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b3da:	3340      	adds	r3, #64	; 0x40
 800b3dc:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	f7fc fd7d 	bl	8007ee0 <ld_word>
 800b3e6:	4603      	mov	r3, r0
 800b3e8:	461a      	mov	r2, r3
 800b3ea:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b3ee:	429a      	cmp	r2, r3
 800b3f0:	d127      	bne.n	800b442 <find_volume+0x6e6>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800b3f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b3f4:	3340      	adds	r3, #64	; 0x40
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	f7fc fd8a 	bl	8007f10 <ld_dword>
 800b3fc:	4602      	mov	r2, r0
 800b3fe:	4b1c      	ldr	r3, [pc, #112]	; (800b470 <find_volume+0x714>)
 800b400:	429a      	cmp	r2, r3
 800b402:	d11e      	bne.n	800b442 <find_volume+0x6e6>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800b404:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b406:	3340      	adds	r3, #64	; 0x40
 800b408:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800b40c:	4618      	mov	r0, r3
 800b40e:	f7fc fd7f 	bl	8007f10 <ld_dword>
 800b412:	4602      	mov	r2, r0
 800b414:	4b17      	ldr	r3, [pc, #92]	; (800b474 <find_volume+0x718>)
 800b416:	429a      	cmp	r2, r3
 800b418:	d113      	bne.n	800b442 <find_volume+0x6e6>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800b41a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b41c:	3340      	adds	r3, #64	; 0x40
 800b41e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800b422:	4618      	mov	r0, r3
 800b424:	f7fc fd74 	bl	8007f10 <ld_dword>
 800b428:	4602      	mov	r2, r0
 800b42a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b42c:	621a      	str	r2, [r3, #32]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800b42e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b430:	3340      	adds	r3, #64	; 0x40
 800b432:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800b436:	4618      	mov	r0, r3
 800b438:	f7fc fd6a 	bl	8007f10 <ld_dword>
 800b43c:	4602      	mov	r2, r0
 800b43e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b440:	61da      	str	r2, [r3, #28]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800b442:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b444:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800b448:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800b44a:	4b0b      	ldr	r3, [pc, #44]	; (800b478 <find_volume+0x71c>)
 800b44c:	881b      	ldrh	r3, [r3, #0]
 800b44e:	3301      	adds	r3, #1
 800b450:	b29a      	uxth	r2, r3
 800b452:	4b09      	ldr	r3, [pc, #36]	; (800b478 <find_volume+0x71c>)
 800b454:	801a      	strh	r2, [r3, #0]
 800b456:	4b08      	ldr	r3, [pc, #32]	; (800b478 <find_volume+0x71c>)
 800b458:	881a      	ldrh	r2, [r3, #0]
 800b45a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b45c:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800b45e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800b460:	f7fd f8fa 	bl	8008658 <clear_lock>
#endif
	return FR_OK;
 800b464:	2300      	movs	r3, #0
}
 800b466:	4618      	mov	r0, r3
 800b468:	3760      	adds	r7, #96	; 0x60
 800b46a:	46bd      	mov	sp, r7
 800b46c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800b470:	41615252 	.word	0x41615252
 800b474:	61417272 	.word	0x61417272
 800b478:	2000029c 	.word	0x2000029c

0800b47c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800b47c:	b580      	push	{r7, lr}
 800b47e:	b084      	sub	sp, #16
 800b480:	af00      	add	r7, sp, #0
 800b482:	6078      	str	r0, [r7, #4]
 800b484:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800b486:	2309      	movs	r3, #9
 800b488:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d02e      	beq.n	800b4ee <validate+0x72>
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	2b00      	cmp	r3, #0
 800b496:	d02a      	beq.n	800b4ee <validate+0x72>
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	781b      	ldrb	r3, [r3, #0]
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d025      	beq.n	800b4ee <validate+0x72>
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	889a      	ldrh	r2, [r3, #4]
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	88db      	ldrh	r3, [r3, #6]
 800b4ac:	429a      	cmp	r2, r3
 800b4ae:	d11e      	bne.n	800b4ee <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	4618      	mov	r0, r3
 800b4b6:	f7fc ff56 	bl	8008366 <lock_fs>
 800b4ba:	4603      	mov	r3, r0
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d014      	beq.n	800b4ea <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	785b      	ldrb	r3, [r3, #1]
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	f7fc fc6c 	bl	8007da4 <disk_status>
 800b4cc:	4603      	mov	r3, r0
 800b4ce:	f003 0301 	and.w	r3, r3, #1
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d102      	bne.n	800b4dc <validate+0x60>
				res = FR_OK;
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	73fb      	strb	r3, [r7, #15]
 800b4da:	e008      	b.n	800b4ee <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	2100      	movs	r1, #0
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	f7fc ff55 	bl	8008392 <unlock_fs>
 800b4e8:	e001      	b.n	800b4ee <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800b4ea:	230f      	movs	r3, #15
 800b4ec:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800b4ee:	7bfb      	ldrb	r3, [r7, #15]
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d102      	bne.n	800b4fa <validate+0x7e>
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	e000      	b.n	800b4fc <validate+0x80>
 800b4fa:	2300      	movs	r3, #0
 800b4fc:	683a      	ldr	r2, [r7, #0]
 800b4fe:	6013      	str	r3, [r2, #0]
	return res;
 800b500:	7bfb      	ldrb	r3, [r7, #15]
}
 800b502:	4618      	mov	r0, r3
 800b504:	3710      	adds	r7, #16
 800b506:	46bd      	mov	sp, r7
 800b508:	bd80      	pop	{r7, pc}
	...

0800b50c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800b50c:	b580      	push	{r7, lr}
 800b50e:	b088      	sub	sp, #32
 800b510:	af00      	add	r7, sp, #0
 800b512:	60f8      	str	r0, [r7, #12]
 800b514:	60b9      	str	r1, [r7, #8]
 800b516:	4613      	mov	r3, r2
 800b518:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800b51a:	68bb      	ldr	r3, [r7, #8]
 800b51c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800b51e:	f107 0310 	add.w	r3, r7, #16
 800b522:	4618      	mov	r0, r3
 800b524:	f7ff fb71 	bl	800ac0a <get_ldnumber>
 800b528:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800b52a:	69fb      	ldr	r3, [r7, #28]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	da01      	bge.n	800b534 <f_mount+0x28>
 800b530:	230b      	movs	r3, #11
 800b532:	e048      	b.n	800b5c6 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800b534:	4a26      	ldr	r2, [pc, #152]	; (800b5d0 <f_mount+0xc4>)
 800b536:	69fb      	ldr	r3, [r7, #28]
 800b538:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b53c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800b53e:	69bb      	ldr	r3, [r7, #24]
 800b540:	2b00      	cmp	r3, #0
 800b542:	d00f      	beq.n	800b564 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800b544:	69b8      	ldr	r0, [r7, #24]
 800b546:	f7fd f887 	bl	8008658 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800b54a:	69bb      	ldr	r3, [r7, #24]
 800b54c:	699b      	ldr	r3, [r3, #24]
 800b54e:	4618      	mov	r0, r3
 800b550:	f000 ffa6 	bl	800c4a0 <ff_del_syncobj>
 800b554:	4603      	mov	r3, r0
 800b556:	2b00      	cmp	r3, #0
 800b558:	d101      	bne.n	800b55e <f_mount+0x52>
 800b55a:	2302      	movs	r3, #2
 800b55c:	e033      	b.n	800b5c6 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800b55e:	69bb      	ldr	r3, [r7, #24]
 800b560:	2200      	movs	r2, #0
 800b562:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	2b00      	cmp	r3, #0
 800b568:	d00f      	beq.n	800b58a <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	2200      	movs	r2, #0
 800b56e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800b570:	69fb      	ldr	r3, [r7, #28]
 800b572:	b2da      	uxtb	r2, r3
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	3318      	adds	r3, #24
 800b578:	4619      	mov	r1, r3
 800b57a:	4610      	mov	r0, r2
 800b57c:	f000 ff70 	bl	800c460 <ff_cre_syncobj>
 800b580:	4603      	mov	r3, r0
 800b582:	2b00      	cmp	r3, #0
 800b584:	d101      	bne.n	800b58a <f_mount+0x7e>
 800b586:	2302      	movs	r3, #2
 800b588:	e01d      	b.n	800b5c6 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800b58a:	68fa      	ldr	r2, [r7, #12]
 800b58c:	4910      	ldr	r1, [pc, #64]	; (800b5d0 <f_mount+0xc4>)
 800b58e:	69fb      	ldr	r3, [r7, #28]
 800b590:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	2b00      	cmp	r3, #0
 800b598:	d002      	beq.n	800b5a0 <f_mount+0x94>
 800b59a:	79fb      	ldrb	r3, [r7, #7]
 800b59c:	2b01      	cmp	r3, #1
 800b59e:	d001      	beq.n	800b5a4 <f_mount+0x98>
 800b5a0:	2300      	movs	r3, #0
 800b5a2:	e010      	b.n	800b5c6 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800b5a4:	f107 010c 	add.w	r1, r7, #12
 800b5a8:	f107 0308 	add.w	r3, r7, #8
 800b5ac:	2200      	movs	r2, #0
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	f7ff fbd4 	bl	800ad5c <find_volume>
 800b5b4:	4603      	mov	r3, r0
 800b5b6:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	7dfa      	ldrb	r2, [r7, #23]
 800b5bc:	4611      	mov	r1, r2
 800b5be:	4618      	mov	r0, r3
 800b5c0:	f7fc fee7 	bl	8008392 <unlock_fs>
 800b5c4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	3720      	adds	r7, #32
 800b5ca:	46bd      	mov	sp, r7
 800b5cc:	bd80      	pop	{r7, pc}
 800b5ce:	bf00      	nop
 800b5d0:	20000298 	.word	0x20000298

0800b5d4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800b5d4:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800b5d8:	b0a4      	sub	sp, #144	; 0x90
 800b5da:	af00      	add	r7, sp, #0
 800b5dc:	60f8      	str	r0, [r7, #12]
 800b5de:	60b9      	str	r1, [r7, #8]
 800b5e0:	4613      	mov	r3, r2
 800b5e2:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d101      	bne.n	800b5ee <f_open+0x1a>
 800b5ea:	2309      	movs	r3, #9
 800b5ec:	e2c6      	b.n	800bb7c <f_open+0x5a8>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800b5ee:	79fb      	ldrb	r3, [r7, #7]
 800b5f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b5f4:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800b5f6:	79fa      	ldrb	r2, [r7, #7]
 800b5f8:	f107 0114 	add.w	r1, r7, #20
 800b5fc:	f107 0308 	add.w	r3, r7, #8
 800b600:	4618      	mov	r0, r3
 800b602:	f7ff fbab 	bl	800ad5c <find_volume>
 800b606:	4603      	mov	r3, r0
 800b608:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	if (res == FR_OK) {
 800b60c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800b610:	2b00      	cmp	r3, #0
 800b612:	f040 82a3 	bne.w	800bb5c <f_open+0x588>
		dj.obj.fs = fs;
 800b616:	697b      	ldr	r3, [r7, #20]
 800b618:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
 800b61a:	f44f 608c 	mov.w	r0, #1120	; 0x460
 800b61e:	f000 ff6b 	bl	800c4f8 <ff_memalloc>
 800b622:	67f8      	str	r0, [r7, #124]	; 0x7c
 800b624:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b626:	2b00      	cmp	r3, #0
 800b628:	d106      	bne.n	800b638 <f_open+0x64>
 800b62a:	697b      	ldr	r3, [r7, #20]
 800b62c:	2111      	movs	r1, #17
 800b62e:	4618      	mov	r0, r3
 800b630:	f7fc feaf 	bl	8008392 <unlock_fs>
 800b634:	2311      	movs	r3, #17
 800b636:	e2a1      	b.n	800bb7c <f_open+0x5a8>
 800b638:	697b      	ldr	r3, [r7, #20]
 800b63a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800b63c:	611a      	str	r2, [r3, #16]
 800b63e:	697b      	ldr	r3, [r7, #20]
 800b640:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800b642:	f502 7200 	add.w	r2, r2, #512	; 0x200
 800b646:	615a      	str	r2, [r3, #20]
		res = follow_path(&dj, path);	/* Follow the file path */
 800b648:	68ba      	ldr	r2, [r7, #8]
 800b64a:	f107 0318 	add.w	r3, r7, #24
 800b64e:	4611      	mov	r1, r2
 800b650:	4618      	mov	r0, r3
 800b652:	f7ff fa2d 	bl	800aab0 <follow_path>
 800b656:	4603      	mov	r3, r0
 800b658:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800b65c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800b660:	2b00      	cmp	r3, #0
 800b662:	d11a      	bne.n	800b69a <f_open+0xc6>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800b664:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800b668:	b25b      	sxtb	r3, r3
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	da03      	bge.n	800b676 <f_open+0xa2>
				res = FR_INVALID_NAME;
 800b66e:	2306      	movs	r3, #6
 800b670:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 800b674:	e011      	b.n	800b69a <f_open+0xc6>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b676:	79fb      	ldrb	r3, [r7, #7]
 800b678:	f023 0301 	bic.w	r3, r3, #1
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	bf14      	ite	ne
 800b680:	2301      	movne	r3, #1
 800b682:	2300      	moveq	r3, #0
 800b684:	b2db      	uxtb	r3, r3
 800b686:	461a      	mov	r2, r3
 800b688:	f107 0318 	add.w	r3, r7, #24
 800b68c:	4611      	mov	r1, r2
 800b68e:	4618      	mov	r0, r3
 800b690:	f7fc fe9a 	bl	80083c8 <chk_lock>
 800b694:	4603      	mov	r3, r0
 800b696:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800b69a:	79fb      	ldrb	r3, [r7, #7]
 800b69c:	f003 031c 	and.w	r3, r3, #28
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	f000 8109 	beq.w	800b8b8 <f_open+0x2e4>
			if (res != FR_OK) {					/* No file, create new */
 800b6a6:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d017      	beq.n	800b6de <f_open+0x10a>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800b6ae:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800b6b2:	2b04      	cmp	r3, #4
 800b6b4:	d10e      	bne.n	800b6d4 <f_open+0x100>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800b6b6:	f7fc fee3 	bl	8008480 <enq_lock>
 800b6ba:	4603      	mov	r3, r0
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d006      	beq.n	800b6ce <f_open+0xfa>
 800b6c0:	f107 0318 	add.w	r3, r7, #24
 800b6c4:	4618      	mov	r0, r3
 800b6c6:	f7fe fe8b 	bl	800a3e0 <dir_register>
 800b6ca:	4603      	mov	r3, r0
 800b6cc:	e000      	b.n	800b6d0 <f_open+0xfc>
 800b6ce:	2312      	movs	r3, #18
 800b6d0:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800b6d4:	79fb      	ldrb	r3, [r7, #7]
 800b6d6:	f043 0308 	orr.w	r3, r3, #8
 800b6da:	71fb      	strb	r3, [r7, #7]
 800b6dc:	e010      	b.n	800b700 <f_open+0x12c>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800b6de:	7fbb      	ldrb	r3, [r7, #30]
 800b6e0:	f003 0311 	and.w	r3, r3, #17
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d003      	beq.n	800b6f0 <f_open+0x11c>
					res = FR_DENIED;
 800b6e8:	2307      	movs	r3, #7
 800b6ea:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 800b6ee:	e007      	b.n	800b700 <f_open+0x12c>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800b6f0:	79fb      	ldrb	r3, [r7, #7]
 800b6f2:	f003 0304 	and.w	r3, r3, #4
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d002      	beq.n	800b700 <f_open+0x12c>
 800b6fa:	2308      	movs	r3, #8
 800b6fc:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800b700:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800b704:	2b00      	cmp	r3, #0
 800b706:	f040 80f1 	bne.w	800b8ec <f_open+0x318>
 800b70a:	79fb      	ldrb	r3, [r7, #7]
 800b70c:	f003 0308 	and.w	r3, r3, #8
 800b710:	2b00      	cmp	r3, #0
 800b712:	f000 80eb 	beq.w	800b8ec <f_open+0x318>
				dw = GET_FATTIME();
 800b716:	f7fc f8d5 	bl	80078c4 <get_fattime>
 800b71a:	67b8      	str	r0, [r7, #120]	; 0x78
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
 800b71c:	697b      	ldr	r3, [r7, #20]
 800b71e:	781b      	ldrb	r3, [r3, #0]
 800b720:	2b04      	cmp	r3, #4
 800b722:	f040 8082 	bne.w	800b82a <f_open+0x256>
					/* Get current allocation info */
					fp->obj.fs = fs;
 800b726:	697a      	ldr	r2, [r7, #20]
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	601a      	str	r2, [r3, #0]
					fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);
 800b72c:	697b      	ldr	r3, [r7, #20]
 800b72e:	695b      	ldr	r3, [r3, #20]
 800b730:	3334      	adds	r3, #52	; 0x34
 800b732:	4618      	mov	r0, r3
 800b734:	f7fc fbec 	bl	8007f10 <ld_dword>
 800b738:	4602      	mov	r2, r0
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	609a      	str	r2, [r3, #8]
					fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800b73e:	697b      	ldr	r3, [r7, #20]
 800b740:	695b      	ldr	r3, [r3, #20]
 800b742:	3338      	adds	r3, #56	; 0x38
 800b744:	4618      	mov	r0, r3
 800b746:	f7fc fc06 	bl	8007f56 <ld_qword>
 800b74a:	4603      	mov	r3, r0
 800b74c:	460c      	mov	r4, r1
 800b74e:	68fa      	ldr	r2, [r7, #12]
 800b750:	e9c2 3404 	strd	r3, r4, [r2, #16]
					fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800b754:	697b      	ldr	r3, [r7, #20]
 800b756:	695b      	ldr	r3, [r3, #20]
 800b758:	3321      	adds	r3, #33	; 0x21
 800b75a:	781b      	ldrb	r3, [r3, #0]
 800b75c:	f003 0302 	and.w	r3, r3, #2
 800b760:	b2da      	uxtb	r2, r3
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	71da      	strb	r2, [r3, #7]
					fp->obj.n_frag = 0;
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	2200      	movs	r2, #0
 800b76a:	61da      	str	r2, [r3, #28]
					/* Initialize directory entry block */
					st_dword(fs->dirbuf + XDIR_CrtTime, dw);	/* Set created time */
 800b76c:	697b      	ldr	r3, [r7, #20]
 800b76e:	695b      	ldr	r3, [r3, #20]
 800b770:	3308      	adds	r3, #8
 800b772:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800b774:	4618      	mov	r0, r3
 800b776:	f7fc fcc6 	bl	8008106 <st_dword>
					fs->dirbuf[XDIR_CrtTime10] = 0;
 800b77a:	697b      	ldr	r3, [r7, #20]
 800b77c:	695b      	ldr	r3, [r3, #20]
 800b77e:	3314      	adds	r3, #20
 800b780:	2200      	movs	r2, #0
 800b782:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_ModTime, dw);	/* Set modified time */
 800b784:	697b      	ldr	r3, [r7, #20]
 800b786:	695b      	ldr	r3, [r3, #20]
 800b788:	330c      	adds	r3, #12
 800b78a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800b78c:	4618      	mov	r0, r3
 800b78e:	f7fc fcba 	bl	8008106 <st_dword>
					fs->dirbuf[XDIR_ModTime10] = 0;
 800b792:	697b      	ldr	r3, [r7, #20]
 800b794:	695b      	ldr	r3, [r3, #20]
 800b796:	3315      	adds	r3, #21
 800b798:	2200      	movs	r2, #0
 800b79a:	701a      	strb	r2, [r3, #0]
					fs->dirbuf[XDIR_Attr] = AM_ARC;				/* Reset attribute */
 800b79c:	697b      	ldr	r3, [r7, #20]
 800b79e:	695b      	ldr	r3, [r3, #20]
 800b7a0:	3304      	adds	r3, #4
 800b7a2:	2220      	movs	r2, #32
 800b7a4:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_FstClus, 0);		/* Reset file allocation info */
 800b7a6:	697b      	ldr	r3, [r7, #20]
 800b7a8:	695b      	ldr	r3, [r3, #20]
 800b7aa:	3334      	adds	r3, #52	; 0x34
 800b7ac:	2100      	movs	r1, #0
 800b7ae:	4618      	mov	r0, r3
 800b7b0:	f7fc fca9 	bl	8008106 <st_dword>
					st_qword(fs->dirbuf + XDIR_FileSize, 0);
 800b7b4:	697b      	ldr	r3, [r7, #20]
 800b7b6:	695b      	ldr	r3, [r3, #20]
 800b7b8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b7bc:	f04f 0200 	mov.w	r2, #0
 800b7c0:	f04f 0300 	mov.w	r3, #0
 800b7c4:	4608      	mov	r0, r1
 800b7c6:	f7fc fcca 	bl	800815e <st_qword>
					st_qword(fs->dirbuf + XDIR_ValidFileSize, 0);
 800b7ca:	697b      	ldr	r3, [r7, #20]
 800b7cc:	695b      	ldr	r3, [r3, #20]
 800b7ce:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800b7d2:	f04f 0200 	mov.w	r2, #0
 800b7d6:	f04f 0300 	mov.w	r3, #0
 800b7da:	4608      	mov	r0, r1
 800b7dc:	f7fc fcbf 	bl	800815e <st_qword>
					fs->dirbuf[XDIR_GenFlags] = 1;
 800b7e0:	697b      	ldr	r3, [r7, #20]
 800b7e2:	695b      	ldr	r3, [r3, #20]
 800b7e4:	3321      	adds	r3, #33	; 0x21
 800b7e6:	2201      	movs	r2, #1
 800b7e8:	701a      	strb	r2, [r3, #0]
					res = store_xdir(&dj);
 800b7ea:	f107 0318 	add.w	r3, r7, #24
 800b7ee:	4618      	mov	r0, r3
 800b7f0:	f7fe fb43 	bl	8009e7a <store_xdir>
 800b7f4:	4603      	mov	r3, r0
 800b7f6:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
					if (res == FR_OK && fp->obj.sclust) {		/* Remove the cluster chain if exist */
 800b7fa:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d174      	bne.n	800b8ec <f_open+0x318>
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	689b      	ldr	r3, [r3, #8]
 800b806:	2b00      	cmp	r3, #0
 800b808:	d070      	beq.n	800b8ec <f_open+0x318>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 800b80a:	68f8      	ldr	r0, [r7, #12]
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	689b      	ldr	r3, [r3, #8]
 800b810:	2200      	movs	r2, #0
 800b812:	4619      	mov	r1, r3
 800b814:	f7fd fc18 	bl	8009048 <remove_chain>
 800b818:	4603      	mov	r3, r0
 800b81a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	689a      	ldr	r2, [r3, #8]
 800b822:	697b      	ldr	r3, [r7, #20]
 800b824:	3a01      	subs	r2, #1
 800b826:	61da      	str	r2, [r3, #28]
 800b828:	e060      	b.n	800b8ec <f_open+0x318>
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800b82a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b82c:	330e      	adds	r3, #14
 800b82e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800b830:	4618      	mov	r0, r3
 800b832:	f7fc fc68 	bl	8008106 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800b836:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b838:	3316      	adds	r3, #22
 800b83a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800b83c:	4618      	mov	r0, r3
 800b83e:	f7fc fc62 	bl	8008106 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800b842:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b844:	330b      	adds	r3, #11
 800b846:	2220      	movs	r2, #32
 800b848:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800b84a:	697b      	ldr	r3, [r7, #20]
 800b84c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b84e:	4611      	mov	r1, r2
 800b850:	4618      	mov	r0, r3
 800b852:	f7fd ff84 	bl	800975e <ld_clust>
 800b856:	6778      	str	r0, [r7, #116]	; 0x74
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800b858:	697b      	ldr	r3, [r7, #20]
 800b85a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b85c:	2200      	movs	r2, #0
 800b85e:	4618      	mov	r0, r3
 800b860:	f7fd ff9c 	bl	800979c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800b864:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b866:	331c      	adds	r3, #28
 800b868:	2100      	movs	r1, #0
 800b86a:	4618      	mov	r0, r3
 800b86c:	f7fc fc4b 	bl	8008106 <st_dword>
					fs->wflag = 1;
 800b870:	697b      	ldr	r3, [r7, #20]
 800b872:	2201      	movs	r2, #1
 800b874:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800b876:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d037      	beq.n	800b8ec <f_open+0x318>
						dw = fs->winsect;
 800b87c:	697b      	ldr	r3, [r7, #20]
 800b87e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b880:	67bb      	str	r3, [r7, #120]	; 0x78
						res = remove_chain(&dj.obj, cl, 0);
 800b882:	f107 0318 	add.w	r3, r7, #24
 800b886:	2200      	movs	r2, #0
 800b888:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800b88a:	4618      	mov	r0, r3
 800b88c:	f7fd fbdc 	bl	8009048 <remove_chain>
 800b890:	4603      	mov	r3, r0
 800b892:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
						if (res == FR_OK) {
 800b896:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d126      	bne.n	800b8ec <f_open+0x318>
							res = move_window(fs, dw);
 800b89e:	697b      	ldr	r3, [r7, #20]
 800b8a0:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800b8a2:	4618      	mov	r0, r3
 800b8a4:	f7fc ff40 	bl	8008728 <move_window>
 800b8a8:	4603      	mov	r3, r0
 800b8aa:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800b8ae:	697b      	ldr	r3, [r7, #20]
 800b8b0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800b8b2:	3a01      	subs	r2, #1
 800b8b4:	61da      	str	r2, [r3, #28]
 800b8b6:	e019      	b.n	800b8ec <f_open+0x318>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800b8b8:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d115      	bne.n	800b8ec <f_open+0x318>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800b8c0:	7fbb      	ldrb	r3, [r7, #30]
 800b8c2:	f003 0310 	and.w	r3, r3, #16
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d003      	beq.n	800b8d2 <f_open+0x2fe>
					res = FR_NO_FILE;
 800b8ca:	2304      	movs	r3, #4
 800b8cc:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 800b8d0:	e00c      	b.n	800b8ec <f_open+0x318>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800b8d2:	79fb      	ldrb	r3, [r7, #7]
 800b8d4:	f003 0302 	and.w	r3, r3, #2
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d007      	beq.n	800b8ec <f_open+0x318>
 800b8dc:	7fbb      	ldrb	r3, [r7, #30]
 800b8de:	f003 0301 	and.w	r3, r3, #1
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d002      	beq.n	800b8ec <f_open+0x318>
						res = FR_DENIED;
 800b8e6:	2307      	movs	r3, #7
 800b8e8:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
					}
				}
			}
		}
		if (res == FR_OK) {
 800b8ec:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d128      	bne.n	800b946 <f_open+0x372>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800b8f4:	79fb      	ldrb	r3, [r7, #7]
 800b8f6:	f003 0308 	and.w	r3, r3, #8
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d003      	beq.n	800b906 <f_open+0x332>
				mode |= FA_MODIFIED;
 800b8fe:	79fb      	ldrb	r3, [r7, #7]
 800b900:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b904:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800b906:	697b      	ldr	r3, [r7, #20]
 800b908:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	649a      	str	r2, [r3, #72]	; 0x48
			fp->dir_ptr = dj.dir;
 800b90e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	64da      	str	r2, [r3, #76]	; 0x4c
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b914:	79fb      	ldrb	r3, [r7, #7]
 800b916:	f023 0301 	bic.w	r3, r3, #1
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	bf14      	ite	ne
 800b91e:	2301      	movne	r3, #1
 800b920:	2300      	moveq	r3, #0
 800b922:	b2db      	uxtb	r3, r3
 800b924:	461a      	mov	r2, r3
 800b926:	f107 0318 	add.w	r3, r7, #24
 800b92a:	4611      	mov	r1, r2
 800b92c:	4618      	mov	r0, r3
 800b92e:	f7fc fdc9 	bl	80084c4 <inc_lock>
 800b932:	4602      	mov	r2, r0
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	62da      	str	r2, [r3, #44]	; 0x2c
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d102      	bne.n	800b946 <f_open+0x372>
 800b940:	2302      	movs	r3, #2
 800b942:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800b946:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	f040 8103 	bne.w	800bb56 <f_open+0x582>
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800b950:	697b      	ldr	r3, [r7, #20]
 800b952:	781b      	ldrb	r3, [r3, #0]
 800b954:	2b04      	cmp	r3, #4
 800b956:	d12b      	bne.n	800b9b0 <f_open+0x3dc>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 800b958:	6a3a      	ldr	r2, [r7, #32]
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	621a      	str	r2, [r3, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 800b95e:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800b962:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b966:	7ffa      	ldrb	r2, [r7, #31]
 800b968:	431a      	orrs	r2, r3
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	625a      	str	r2, [r3, #36]	; 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 800b96e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	629a      	str	r2, [r3, #40]	; 0x28
				fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 800b974:	697b      	ldr	r3, [r7, #20]
 800b976:	695b      	ldr	r3, [r3, #20]
 800b978:	3334      	adds	r3, #52	; 0x34
 800b97a:	4618      	mov	r0, r3
 800b97c:	f7fc fac8 	bl	8007f10 <ld_dword>
 800b980:	4602      	mov	r2, r0
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800b986:	697b      	ldr	r3, [r7, #20]
 800b988:	695b      	ldr	r3, [r3, #20]
 800b98a:	3338      	adds	r3, #56	; 0x38
 800b98c:	4618      	mov	r0, r3
 800b98e:	f7fc fae2 	bl	8007f56 <ld_qword>
 800b992:	4603      	mov	r3, r0
 800b994:	460c      	mov	r4, r1
 800b996:	68fa      	ldr	r2, [r7, #12]
 800b998:	e9c2 3404 	strd	r3, r4, [r2, #16]
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800b99c:	697b      	ldr	r3, [r7, #20]
 800b99e:	695b      	ldr	r3, [r3, #20]
 800b9a0:	3321      	adds	r3, #33	; 0x21
 800b9a2:	781b      	ldrb	r3, [r3, #0]
 800b9a4:	f003 0302 	and.w	r3, r3, #2
 800b9a8:	b2da      	uxtb	r2, r3
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	71da      	strb	r2, [r3, #7]
 800b9ae:	e013      	b.n	800b9d8 <f_open+0x404>
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800b9b0:	697b      	ldr	r3, [r7, #20]
 800b9b2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b9b4:	4611      	mov	r1, r2
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	f7fd fed1 	bl	800975e <ld_clust>
 800b9bc:	4602      	mov	r2, r0
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800b9c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b9c4:	331c      	adds	r3, #28
 800b9c6:	4618      	mov	r0, r3
 800b9c8:	f7fc faa2 	bl	8007f10 <ld_dword>
 800b9cc:	4603      	mov	r3, r0
 800b9ce:	f04f 0400 	mov.w	r4, #0
 800b9d2:	68fa      	ldr	r2, [r7, #12]
 800b9d4:	e9c2 3404 	strd	r3, r4, [r2, #16]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800b9d8:	697a      	ldr	r2, [r7, #20]
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800b9de:	697b      	ldr	r3, [r7, #20]
 800b9e0:	88da      	ldrh	r2, [r3, #6]
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	79fa      	ldrb	r2, [r7, #7]
 800b9ea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			fp->err = 0;			/* Clear error flag */
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	2200      	movs	r2, #0
 800b9f2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			fp->sect = 0;			/* Invalidate current data sector */
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	2200      	movs	r2, #0
 800b9fa:	645a      	str	r2, [r3, #68]	; 0x44
			fp->fptr = 0;			/* Set file pointer top of the file */
 800b9fc:	68fa      	ldr	r2, [r7, #12]
 800b9fe:	f04f 0300 	mov.w	r3, #0
 800ba02:	f04f 0400 	mov.w	r4, #0
 800ba06:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	3350      	adds	r3, #80	; 0x50
 800ba0e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ba12:	2100      	movs	r1, #0
 800ba14:	4618      	mov	r0, r3
 800ba16:	f7fc fc4a 	bl	80082ae <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800ba1a:	79fb      	ldrb	r3, [r7, #7]
 800ba1c:	f003 0320 	and.w	r3, r3, #32
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	f000 8098 	beq.w	800bb56 <f_open+0x582>
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800ba2c:	4323      	orrs	r3, r4
 800ba2e:	f000 8092 	beq.w	800bb56 <f_open+0x582>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800ba38:	68fa      	ldr	r2, [r7, #12]
 800ba3a:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800ba3e:	697b      	ldr	r3, [r7, #20]
 800ba40:	895b      	ldrh	r3, [r3, #10]
 800ba42:	461a      	mov	r2, r3
 800ba44:	697b      	ldr	r3, [r7, #20]
 800ba46:	899b      	ldrh	r3, [r3, #12]
 800ba48:	fb03 f302 	mul.w	r3, r3, r2
 800ba4c:	673b      	str	r3, [r7, #112]	; 0x70
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	689b      	ldr	r3, [r3, #8]
 800ba52:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800ba5c:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
 800ba60:	e024      	b.n	800baac <f_open+0x4d8>
					clst = get_fat(&fp->obj, clst);
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800ba68:	4618      	mov	r0, r3
 800ba6a:	f7fc ff1b 	bl	80088a4 <get_fat>
 800ba6e:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
					if (clst <= 1) res = FR_INT_ERR;
 800ba72:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ba76:	2b01      	cmp	r3, #1
 800ba78:	d802      	bhi.n	800ba80 <f_open+0x4ac>
 800ba7a:	2302      	movs	r3, #2
 800ba7c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800ba80:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ba84:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba88:	d102      	bne.n	800ba90 <f_open+0x4bc>
 800ba8a:	2301      	movs	r3, #1
 800ba8c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ba90:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ba92:	469b      	mov	fp, r3
 800ba94:	f04f 0c00 	mov.w	ip, #0
 800ba98:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800ba9c:	460b      	mov	r3, r1
 800ba9e:	4614      	mov	r4, r2
 800baa0:	ebb3 030b 	subs.w	r3, r3, fp
 800baa4:	eb64 040c 	sbc.w	r4, r4, ip
 800baa8:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
 800baac:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d109      	bne.n	800bac8 <f_open+0x4f4>
 800bab4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bab6:	4619      	mov	r1, r3
 800bab8:	f04f 0200 	mov.w	r2, #0
 800babc:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 800bac0:	42a2      	cmp	r2, r4
 800bac2:	bf08      	it	eq
 800bac4:	4299      	cmpeq	r1, r3
 800bac6:	d3cc      	bcc.n	800ba62 <f_open+0x48e>
				}
				fp->clust = clst;
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800bace:	641a      	str	r2, [r3, #64]	; 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800bad0:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d13e      	bne.n	800bb56 <f_open+0x582>
 800bad8:	697b      	ldr	r3, [r7, #20]
 800bada:	899b      	ldrh	r3, [r3, #12]
 800badc:	b29b      	uxth	r3, r3
 800bade:	f04f 0400 	mov.w	r4, #0
 800bae2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800bae6:	461a      	mov	r2, r3
 800bae8:	4623      	mov	r3, r4
 800baea:	f7f4 fba9 	bl	8000240 <__aeabi_uldivmod>
 800baee:	461c      	mov	r4, r3
 800baf0:	4613      	mov	r3, r2
 800baf2:	4323      	orrs	r3, r4
 800baf4:	d02f      	beq.n	800bb56 <f_open+0x582>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800baf6:	697b      	ldr	r3, [r7, #20]
 800baf8:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800bafc:	4618      	mov	r0, r3
 800bafe:	f7fc feb1 	bl	8008864 <clust2sect>
 800bb02:	66f8      	str	r0, [r7, #108]	; 0x6c
 800bb04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d103      	bne.n	800bb12 <f_open+0x53e>
						res = FR_INT_ERR;
 800bb0a:	2302      	movs	r3, #2
 800bb0c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 800bb10:	e021      	b.n	800bb56 <f_open+0x582>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800bb12:	697b      	ldr	r3, [r7, #20]
 800bb14:	899b      	ldrh	r3, [r3, #12]
 800bb16:	b29b      	uxth	r3, r3
 800bb18:	f04f 0400 	mov.w	r4, #0
 800bb1c:	461a      	mov	r2, r3
 800bb1e:	4623      	mov	r3, r4
 800bb20:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800bb24:	f7f4 fb8c 	bl	8000240 <__aeabi_uldivmod>
 800bb28:	4603      	mov	r3, r0
 800bb2a:	460c      	mov	r4, r1
 800bb2c:	461a      	mov	r2, r3
 800bb2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bb30:	441a      	add	r2, r3
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	645a      	str	r2, [r3, #68]	; 0x44
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800bb36:	697b      	ldr	r3, [r7, #20]
 800bb38:	7858      	ldrb	r0, [r3, #1]
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	f103 0150 	add.w	r1, r3, #80	; 0x50
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bb44:	2301      	movs	r3, #1
 800bb46:	f7fc f96d 	bl	8007e24 <disk_read>
 800bb4a:	4603      	mov	r3, r0
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d002      	beq.n	800bb56 <f_open+0x582>
 800bb50:	2301      	movs	r3, #1
 800bb52:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
				}
			}
#endif
		}

		FREE_NAMBUF();
 800bb56:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800bb58:	f000 fcda 	bl	800c510 <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800bb5c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d002      	beq.n	800bb6a <f_open+0x596>
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	2200      	movs	r2, #0
 800bb68:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800bb6a:	697b      	ldr	r3, [r7, #20]
 800bb6c:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 800bb70:	4611      	mov	r1, r2
 800bb72:	4618      	mov	r0, r3
 800bb74:	f7fc fc0d 	bl	8008392 <unlock_fs>
 800bb78:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	3790      	adds	r7, #144	; 0x90
 800bb80:	46bd      	mov	sp, r7
 800bb82:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800bb86 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800bb86:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb88:	b08d      	sub	sp, #52	; 0x34
 800bb8a:	af00      	add	r7, sp, #0
 800bb8c:	60f8      	str	r0, [r7, #12]
 800bb8e:	60b9      	str	r1, [r7, #8]
 800bb90:	607a      	str	r2, [r7, #4]
 800bb92:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800bb94:	68bb      	ldr	r3, [r7, #8]
 800bb96:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800bb98:	683b      	ldr	r3, [r7, #0]
 800bb9a:	2200      	movs	r2, #0
 800bb9c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	f107 0210 	add.w	r2, r7, #16
 800bba4:	4611      	mov	r1, r2
 800bba6:	4618      	mov	r0, r3
 800bba8:	f7ff fc68 	bl	800b47c <validate>
 800bbac:	4603      	mov	r3, r0
 800bbae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800bbb2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d108      	bne.n	800bbcc <f_write+0x46>
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800bbc0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800bbc4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d009      	beq.n	800bbe0 <f_write+0x5a>
 800bbcc:	693b      	ldr	r3, [r7, #16]
 800bbce:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800bbd2:	4611      	mov	r1, r2
 800bbd4:	4618      	mov	r0, r3
 800bbd6:	f7fc fbdc 	bl	8008392 <unlock_fs>
 800bbda:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bbde:	e1a3      	b.n	800bf28 <f_write+0x3a2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bbe6:	f003 0302 	and.w	r3, r3, #2
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d106      	bne.n	800bbfc <f_write+0x76>
 800bbee:	693b      	ldr	r3, [r7, #16]
 800bbf0:	2107      	movs	r1, #7
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	f7fc fbcd 	bl	8008392 <unlock_fs>
 800bbf8:	2307      	movs	r3, #7
 800bbfa:	e195      	b.n	800bf28 <f_write+0x3a2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800bbfc:	693b      	ldr	r3, [r7, #16]
 800bbfe:	781b      	ldrb	r3, [r3, #0]
 800bc00:	2b04      	cmp	r3, #4
 800bc02:	f000 817c 	beq.w	800befe <f_write+0x378>
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 800bc0c:	461a      	mov	r2, r3
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	441a      	add	r2, r3
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 800bc18:	429a      	cmp	r2, r3
 800bc1a:	f080 8170 	bcs.w	800befe <f_write+0x378>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 800bc24:	43db      	mvns	r3, r3
 800bc26:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800bc28:	e169      	b.n	800befe <f_write+0x378>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800bc30:	693b      	ldr	r3, [r7, #16]
 800bc32:	899b      	ldrh	r3, [r3, #12]
 800bc34:	b29b      	uxth	r3, r3
 800bc36:	f04f 0400 	mov.w	r4, #0
 800bc3a:	461a      	mov	r2, r3
 800bc3c:	4623      	mov	r3, r4
 800bc3e:	f7f4 faff 	bl	8000240 <__aeabi_uldivmod>
 800bc42:	461c      	mov	r4, r3
 800bc44:	4613      	mov	r3, r2
 800bc46:	4323      	orrs	r3, r4
 800bc48:	f040 80fa 	bne.w	800be40 <f_write+0x2ba>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800bc52:	693b      	ldr	r3, [r7, #16]
 800bc54:	899b      	ldrh	r3, [r3, #12]
 800bc56:	b29b      	uxth	r3, r3
 800bc58:	f04f 0400 	mov.w	r4, #0
 800bc5c:	461a      	mov	r2, r3
 800bc5e:	4623      	mov	r3, r4
 800bc60:	f7f4 faee 	bl	8000240 <__aeabi_uldivmod>
 800bc64:	4603      	mov	r3, r0
 800bc66:	460c      	mov	r4, r1
 800bc68:	461a      	mov	r2, r3
 800bc6a:	693b      	ldr	r3, [r7, #16]
 800bc6c:	895b      	ldrh	r3, [r3, #10]
 800bc6e:	3b01      	subs	r3, #1
 800bc70:	4013      	ands	r3, r2
 800bc72:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800bc74:	69bb      	ldr	r3, [r7, #24]
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d144      	bne.n	800bd04 <f_write+0x17e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 800bc80:	4323      	orrs	r3, r4
 800bc82:	d10c      	bne.n	800bc9e <f_write+0x118>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	689b      	ldr	r3, [r3, #8]
 800bc88:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800bc8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d10e      	bne.n	800bcae <f_write+0x128>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	2100      	movs	r1, #0
 800bc94:	4618      	mov	r0, r3
 800bc96:	f7fd fa8b 	bl	80091b0 <create_chain>
 800bc9a:	62b8      	str	r0, [r7, #40]	; 0x28
 800bc9c:	e007      	b.n	800bcae <f_write+0x128>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800bc9e:	68fa      	ldr	r2, [r7, #12]
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bca4:	4619      	mov	r1, r3
 800bca6:	4610      	mov	r0, r2
 800bca8:	f7fd fa82 	bl	80091b0 <create_chain>
 800bcac:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800bcae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	f000 8129 	beq.w	800bf08 <f_write+0x382>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800bcb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcb8:	2b01      	cmp	r3, #1
 800bcba:	d10a      	bne.n	800bcd2 <f_write+0x14c>
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	2202      	movs	r2, #2
 800bcc0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800bcc4:	693b      	ldr	r3, [r7, #16]
 800bcc6:	2102      	movs	r1, #2
 800bcc8:	4618      	mov	r0, r3
 800bcca:	f7fc fb62 	bl	8008392 <unlock_fs>
 800bcce:	2302      	movs	r3, #2
 800bcd0:	e12a      	b.n	800bf28 <f_write+0x3a2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800bcd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcd8:	d10a      	bne.n	800bcf0 <f_write+0x16a>
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	2201      	movs	r2, #1
 800bcde:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800bce2:	693b      	ldr	r3, [r7, #16]
 800bce4:	2101      	movs	r1, #1
 800bce6:	4618      	mov	r0, r3
 800bce8:	f7fc fb53 	bl	8008392 <unlock_fs>
 800bcec:	2301      	movs	r3, #1
 800bcee:	e11b      	b.n	800bf28 <f_write+0x3a2>
				fp->clust = clst;			/* Update current cluster */
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bcf4:	641a      	str	r2, [r3, #64]	; 0x40
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	689b      	ldr	r3, [r3, #8]
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d102      	bne.n	800bd04 <f_write+0x17e>
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bd02:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bd0a:	b25b      	sxtb	r3, r3
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	da20      	bge.n	800bd52 <f_write+0x1cc>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800bd10:	693b      	ldr	r3, [r7, #16]
 800bd12:	7858      	ldrb	r0, [r3, #1]
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	f103 0150 	add.w	r1, r3, #80	; 0x50
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bd1e:	2301      	movs	r3, #1
 800bd20:	f7fc f8a0 	bl	8007e64 <disk_write>
 800bd24:	4603      	mov	r3, r0
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d00a      	beq.n	800bd40 <f_write+0x1ba>
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	2201      	movs	r2, #1
 800bd2e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800bd32:	693b      	ldr	r3, [r7, #16]
 800bd34:	2101      	movs	r1, #1
 800bd36:	4618      	mov	r0, r3
 800bd38:	f7fc fb2b 	bl	8008392 <unlock_fs>
 800bd3c:	2301      	movs	r3, #1
 800bd3e:	e0f3      	b.n	800bf28 <f_write+0x3a2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bd46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd4a:	b2da      	uxtb	r2, r3
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800bd52:	693a      	ldr	r2, [r7, #16]
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd58:	4619      	mov	r1, r3
 800bd5a:	4610      	mov	r0, r2
 800bd5c:	f7fc fd82 	bl	8008864 <clust2sect>
 800bd60:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800bd62:	697b      	ldr	r3, [r7, #20]
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d10a      	bne.n	800bd7e <f_write+0x1f8>
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	2202      	movs	r2, #2
 800bd6c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800bd70:	693b      	ldr	r3, [r7, #16]
 800bd72:	2102      	movs	r1, #2
 800bd74:	4618      	mov	r0, r3
 800bd76:	f7fc fb0c 	bl	8008392 <unlock_fs>
 800bd7a:	2302      	movs	r3, #2
 800bd7c:	e0d4      	b.n	800bf28 <f_write+0x3a2>
			sect += csect;
 800bd7e:	697a      	ldr	r2, [r7, #20]
 800bd80:	69bb      	ldr	r3, [r7, #24]
 800bd82:	4413      	add	r3, r2
 800bd84:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800bd86:	693b      	ldr	r3, [r7, #16]
 800bd88:	899b      	ldrh	r3, [r3, #12]
 800bd8a:	461a      	mov	r2, r3
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	fbb3 f3f2 	udiv	r3, r3, r2
 800bd92:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800bd94:	6a3b      	ldr	r3, [r7, #32]
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d029      	beq.n	800bdee <f_write+0x268>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800bd9a:	69ba      	ldr	r2, [r7, #24]
 800bd9c:	6a3b      	ldr	r3, [r7, #32]
 800bd9e:	4413      	add	r3, r2
 800bda0:	693a      	ldr	r2, [r7, #16]
 800bda2:	8952      	ldrh	r2, [r2, #10]
 800bda4:	4293      	cmp	r3, r2
 800bda6:	d905      	bls.n	800bdb4 <f_write+0x22e>
					cc = fs->csize - csect;
 800bda8:	693b      	ldr	r3, [r7, #16]
 800bdaa:	895b      	ldrh	r3, [r3, #10]
 800bdac:	461a      	mov	r2, r3
 800bdae:	69bb      	ldr	r3, [r7, #24]
 800bdb0:	1ad3      	subs	r3, r2, r3
 800bdb2:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800bdb4:	693b      	ldr	r3, [r7, #16]
 800bdb6:	7858      	ldrb	r0, [r3, #1]
 800bdb8:	6a3b      	ldr	r3, [r7, #32]
 800bdba:	697a      	ldr	r2, [r7, #20]
 800bdbc:	69f9      	ldr	r1, [r7, #28]
 800bdbe:	f7fc f851 	bl	8007e64 <disk_write>
 800bdc2:	4603      	mov	r3, r0
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d00a      	beq.n	800bdde <f_write+0x258>
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	2201      	movs	r2, #1
 800bdcc:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800bdd0:	693b      	ldr	r3, [r7, #16]
 800bdd2:	2101      	movs	r1, #1
 800bdd4:	4618      	mov	r0, r3
 800bdd6:	f7fc fadc 	bl	8008392 <unlock_fs>
 800bdda:	2301      	movs	r3, #1
 800bddc:	e0a4      	b.n	800bf28 <f_write+0x3a2>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
					fp->flag &= (BYTE)~FA_DIRTY;
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800bdde:	693b      	ldr	r3, [r7, #16]
 800bde0:	899b      	ldrh	r3, [r3, #12]
 800bde2:	461a      	mov	r2, r3
 800bde4:	6a3b      	ldr	r3, [r7, #32]
 800bde6:	fb02 f303 	mul.w	r3, r2, r3
 800bdea:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800bdec:	e05d      	b.n	800beaa <f_write+0x324>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bdf2:	697a      	ldr	r2, [r7, #20]
 800bdf4:	429a      	cmp	r2, r3
 800bdf6:	d020      	beq.n	800be3a <f_write+0x2b4>
				fp->fptr < fp->obj.objsize &&
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	e9d3 120e 	ldrd	r1, r2, [r3, #56]	; 0x38
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800be04:	42a2      	cmp	r2, r4
 800be06:	bf08      	it	eq
 800be08:	4299      	cmpeq	r1, r3
 800be0a:	d216      	bcs.n	800be3a <f_write+0x2b4>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800be0c:	693b      	ldr	r3, [r7, #16]
 800be0e:	7858      	ldrb	r0, [r3, #1]
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	f103 0150 	add.w	r1, r3, #80	; 0x50
 800be16:	2301      	movs	r3, #1
 800be18:	697a      	ldr	r2, [r7, #20]
 800be1a:	f7fc f803 	bl	8007e24 <disk_read>
 800be1e:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800be20:	2b00      	cmp	r3, #0
 800be22:	d00a      	beq.n	800be3a <f_write+0x2b4>
					ABORT(fs, FR_DISK_ERR);
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	2201      	movs	r2, #1
 800be28:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800be2c:	693b      	ldr	r3, [r7, #16]
 800be2e:	2101      	movs	r1, #1
 800be30:	4618      	mov	r0, r3
 800be32:	f7fc faae 	bl	8008392 <unlock_fs>
 800be36:	2301      	movs	r3, #1
 800be38:	e076      	b.n	800bf28 <f_write+0x3a2>
			}
#endif
			fp->sect = sect;
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	697a      	ldr	r2, [r7, #20]
 800be3e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800be40:	693b      	ldr	r3, [r7, #16]
 800be42:	899b      	ldrh	r3, [r3, #12]
 800be44:	4618      	mov	r0, r3
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 800be4c:	693a      	ldr	r2, [r7, #16]
 800be4e:	8992      	ldrh	r2, [r2, #12]
 800be50:	fbb3 f1f2 	udiv	r1, r3, r2
 800be54:	fb02 f201 	mul.w	r2, r2, r1
 800be58:	1a9b      	subs	r3, r3, r2
 800be5a:	1ac3      	subs	r3, r0, r3
 800be5c:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800be5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	429a      	cmp	r2, r3
 800be64:	d901      	bls.n	800be6a <f_write+0x2e4>
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	f103 0550 	add.w	r5, r3, #80	; 0x50
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800be76:	693b      	ldr	r3, [r7, #16]
 800be78:	899b      	ldrh	r3, [r3, #12]
 800be7a:	b29b      	uxth	r3, r3
 800be7c:	f04f 0400 	mov.w	r4, #0
 800be80:	461a      	mov	r2, r3
 800be82:	4623      	mov	r3, r4
 800be84:	f7f4 f9dc 	bl	8000240 <__aeabi_uldivmod>
 800be88:	461c      	mov	r4, r3
 800be8a:	4613      	mov	r3, r2
 800be8c:	442b      	add	r3, r5
 800be8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be90:	69f9      	ldr	r1, [r7, #28]
 800be92:	4618      	mov	r0, r3
 800be94:	f7fc f9ea 	bl	800826c <mem_cpy>
		fp->flag |= FA_DIRTY;
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800be9e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800bea2:	b2da      	uxtb	r2, r3
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800beaa:	69fa      	ldr	r2, [r7, #28]
 800beac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beae:	4413      	add	r3, r2
 800beb0:	61fb      	str	r3, [r7, #28]
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	e9d3 120e 	ldrd	r1, r2, [r3, #56]	; 0x38
 800beb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beba:	461d      	mov	r5, r3
 800bebc:	f04f 0600 	mov.w	r6, #0
 800bec0:	186b      	adds	r3, r5, r1
 800bec2:	eb46 0402 	adc.w	r4, r6, r2
 800bec6:	68fa      	ldr	r2, [r7, #12]
 800bec8:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800bed2:	68fa      	ldr	r2, [r7, #12]
 800bed4:	e9d2 120e 	ldrd	r1, r2, [r2, #56]	; 0x38
 800bed8:	4294      	cmp	r4, r2
 800beda:	bf08      	it	eq
 800bedc:	428b      	cmpeq	r3, r1
 800bede:	d201      	bcs.n	800bee4 <f_write+0x35e>
 800bee0:	460b      	mov	r3, r1
 800bee2:	4614      	mov	r4, r2
 800bee4:	68fa      	ldr	r2, [r7, #12]
 800bee6:	e9c2 3404 	strd	r3, r4, [r2, #16]
 800beea:	683b      	ldr	r3, [r7, #0]
 800beec:	681a      	ldr	r2, [r3, #0]
 800beee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bef0:	441a      	add	r2, r3
 800bef2:	683b      	ldr	r3, [r7, #0]
 800bef4:	601a      	str	r2, [r3, #0]
 800bef6:	687a      	ldr	r2, [r7, #4]
 800bef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800befa:	1ad3      	subs	r3, r2, r3
 800befc:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	f47f ae92 	bne.w	800bc2a <f_write+0xa4>
 800bf06:	e000      	b.n	800bf0a <f_write+0x384>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800bf08:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bf10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bf14:	b2da      	uxtb	r2, r3
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	LEAVE_FF(fs, FR_OK);
 800bf1c:	693b      	ldr	r3, [r7, #16]
 800bf1e:	2100      	movs	r1, #0
 800bf20:	4618      	mov	r0, r3
 800bf22:	f7fc fa36 	bl	8008392 <unlock_fs>
 800bf26:	2300      	movs	r3, #0
}
 800bf28:	4618      	mov	r0, r3
 800bf2a:	3734      	adds	r7, #52	; 0x34
 800bf2c:	46bd      	mov	sp, r7
 800bf2e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bf30 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800bf30:	b590      	push	{r4, r7, lr}
 800bf32:	b09d      	sub	sp, #116	; 0x74
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800bf3e:	4611      	mov	r1, r2
 800bf40:	4618      	mov	r0, r3
 800bf42:	f7ff fa9b 	bl	800b47c <validate>
 800bf46:	4603      	mov	r3, r0
 800bf48:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if (res == FR_OK) {
 800bf4c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	f040 8127 	bne.w	800c1a4 <f_sync+0x274>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bf5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	f000 811f 	beq.w	800c1a4 <f_sync+0x274>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bf6c:	b25b      	sxtb	r3, r3
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	da1c      	bge.n	800bfac <f_sync+0x7c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800bf72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bf74:	7858      	ldrb	r0, [r3, #1]
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	f103 0150 	add.w	r1, r3, #80	; 0x50
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bf80:	2301      	movs	r3, #1
 800bf82:	f7fb ff6f 	bl	8007e64 <disk_write>
 800bf86:	4603      	mov	r3, r0
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d006      	beq.n	800bf9a <f_sync+0x6a>
 800bf8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bf8e:	2101      	movs	r1, #1
 800bf90:	4618      	mov	r0, r3
 800bf92:	f7fc f9fe 	bl	8008392 <unlock_fs>
 800bf96:	2301      	movs	r3, #1
 800bf98:	e10d      	b.n	800c1b6 <f_sync+0x286>
				fp->flag &= (BYTE)~FA_DIRTY;
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bfa0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bfa4:	b2da      	uxtb	r2, r3
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800bfac:	f7fb fc8a 	bl	80078c4 <get_fattime>
 800bfb0:	66b8      	str	r0, [r7, #104]	; 0x68
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800bfb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bfb4:	781b      	ldrb	r3, [r3, #0]
 800bfb6:	2b04      	cmp	r3, #4
 800bfb8:	f040 80a9 	bne.w	800c10e <f_sync+0x1de>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	4618      	mov	r0, r3
 800bfc0:	f7fc ffe2 	bl	8008f88 <fill_first_frag>
 800bfc4:	4603      	mov	r3, r0
 800bfc6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
				if (res == FR_OK) {
 800bfca:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d10a      	bne.n	800bfe8 <f_sync+0xb8>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800bfd2:	6878      	ldr	r0, [r7, #4]
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfd8:	f04f 32ff 	mov.w	r2, #4294967295
 800bfdc:	4619      	mov	r1, r3
 800bfde:	f7fd f802 	bl	8008fe6 <fill_last_frag>
 800bfe2:	4603      	mov	r3, r0
 800bfe4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
				}
				if (res == FR_OK) {
 800bfe8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	f040 80d9 	bne.w	800c1a4 <f_sync+0x274>
					INIT_NAMBUF(fs);
 800bff2:	f44f 608c 	mov.w	r0, #1120	; 0x460
 800bff6:	f000 fa7f 	bl	800c4f8 <ff_memalloc>
 800bffa:	6638      	str	r0, [r7, #96]	; 0x60
 800bffc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d106      	bne.n	800c010 <f_sync+0xe0>
 800c002:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c004:	2111      	movs	r1, #17
 800c006:	4618      	mov	r0, r3
 800c008:	f7fc f9c3 	bl	8008392 <unlock_fs>
 800c00c:	2311      	movs	r3, #17
 800c00e:	e0d2      	b.n	800c1b6 <f_sync+0x286>
 800c010:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c012:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c014:	611a      	str	r2, [r3, #16]
 800c016:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c018:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c01a:	f502 7200 	add.w	r2, r2, #512	; 0x200
 800c01e:	615a      	str	r2, [r3, #20]
					res = load_obj_dir(&dj, &fp->obj);	/* Load directory entry block */
 800c020:	687a      	ldr	r2, [r7, #4]
 800c022:	f107 0308 	add.w	r3, r7, #8
 800c026:	4611      	mov	r1, r2
 800c028:	4618      	mov	r0, r3
 800c02a:	f7fd fee9 	bl	8009e00 <load_obj_dir>
 800c02e:	4603      	mov	r3, r0
 800c030:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					if (res == FR_OK) {
 800c034:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d164      	bne.n	800c106 <f_sync+0x1d6>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive bit */
 800c03c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c03e:	695b      	ldr	r3, [r3, #20]
 800c040:	3304      	adds	r3, #4
 800c042:	781a      	ldrb	r2, [r3, #0]
 800c044:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c046:	695b      	ldr	r3, [r3, #20]
 800c048:	3304      	adds	r3, #4
 800c04a:	f042 0220 	orr.w	r2, r2, #32
 800c04e:	b2d2      	uxtb	r2, r2
 800c050:	701a      	strb	r2, [r3, #0]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation info */
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	79da      	ldrb	r2, [r3, #7]
 800c056:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c058:	695b      	ldr	r3, [r3, #20]
 800c05a:	3321      	adds	r3, #33	; 0x21
 800c05c:	f042 0201 	orr.w	r2, r2, #1
 800c060:	b2d2      	uxtb	r2, r2
 800c062:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);
 800c064:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c066:	695b      	ldr	r3, [r3, #20]
 800c068:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	689b      	ldr	r3, [r3, #8]
 800c070:	4619      	mov	r1, r3
 800c072:	4610      	mov	r0, r2
 800c074:	f7fc f847 	bl	8008106 <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
 800c078:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c07a:	695b      	ldr	r3, [r3, #20]
 800c07c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800c086:	461a      	mov	r2, r3
 800c088:	4623      	mov	r3, r4
 800c08a:	4608      	mov	r0, r1
 800c08c:	f7fc f867 	bl	800815e <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
 800c090:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c092:	695b      	ldr	r3, [r3, #20]
 800c094:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800c09e:	461a      	mov	r2, r3
 800c0a0:	4623      	mov	r3, r4
 800c0a2:	4608      	mov	r0, r1
 800c0a4:	f7fc f85b 	bl	800815e <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 800c0a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c0aa:	695b      	ldr	r3, [r3, #20]
 800c0ac:	330c      	adds	r3, #12
 800c0ae:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c0b0:	4618      	mov	r0, r3
 800c0b2:	f7fc f828 	bl	8008106 <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
 800c0b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c0b8:	695b      	ldr	r3, [r3, #20]
 800c0ba:	3315      	adds	r3, #21
 800c0bc:	2200      	movs	r2, #0
 800c0be:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 800c0c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c0c2:	695b      	ldr	r3, [r3, #20]
 800c0c4:	3310      	adds	r3, #16
 800c0c6:	2100      	movs	r1, #0
 800c0c8:	4618      	mov	r0, r3
 800c0ca:	f7fc f81c 	bl	8008106 <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
 800c0ce:	f107 0308 	add.w	r3, r7, #8
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	f7fd fed1 	bl	8009e7a <store_xdir>
 800c0d8:	4603      	mov	r3, r0
 800c0da:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
						if (res == FR_OK) {
 800c0de:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d10f      	bne.n	800c106 <f_sync+0x1d6>
							res = sync_fs(fs);
 800c0e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	f7fc fb4b 	bl	8008784 <sync_fs>
 800c0ee:	4603      	mov	r3, r0
 800c0f0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
							fp->flag &= (BYTE)~FA_MODIFIED;
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c0fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c0fe:	b2da      	uxtb	r2, r3
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
						}
					}
					FREE_NAMBUF();
 800c106:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800c108:	f000 fa02 	bl	800c510 <ff_memfree>
 800c10c:	e04a      	b.n	800c1a4 <f_sync+0x274>
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800c10e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c114:	4619      	mov	r1, r3
 800c116:	4610      	mov	r0, r2
 800c118:	f7fc fb06 	bl	8008728 <move_window>
 800c11c:	4603      	mov	r3, r0
 800c11e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
				if (res == FR_OK) {
 800c122:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800c126:	2b00      	cmp	r3, #0
 800c128:	d13c      	bne.n	800c1a4 <f_sync+0x274>
					dir = fp->dir_ptr;
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c12e:	667b      	str	r3, [r7, #100]	; 0x64
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800c130:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c132:	330b      	adds	r3, #11
 800c134:	781a      	ldrb	r2, [r3, #0]
 800c136:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c138:	330b      	adds	r3, #11
 800c13a:	f042 0220 	orr.w	r2, r2, #32
 800c13e:	b2d2      	uxtb	r2, r2
 800c140:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	6818      	ldr	r0, [r3, #0]
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	689b      	ldr	r3, [r3, #8]
 800c14a:	461a      	mov	r2, r3
 800c14c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800c14e:	f7fd fb25 	bl	800979c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800c152:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c154:	f103 021c 	add.w	r2, r3, #28
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800c15e:	4619      	mov	r1, r3
 800c160:	4610      	mov	r0, r2
 800c162:	f7fb ffd0 	bl	8008106 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800c166:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c168:	3316      	adds	r3, #22
 800c16a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c16c:	4618      	mov	r0, r3
 800c16e:	f7fb ffca 	bl	8008106 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800c172:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c174:	3312      	adds	r3, #18
 800c176:	2100      	movs	r1, #0
 800c178:	4618      	mov	r0, r3
 800c17a:	f7fb ffa9 	bl	80080d0 <st_word>
					fs->wflag = 1;
 800c17e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c180:	2201      	movs	r2, #1
 800c182:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800c184:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c186:	4618      	mov	r0, r3
 800c188:	f7fc fafc 	bl	8008784 <sync_fs>
 800c18c:	4603      	mov	r3, r0
 800c18e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					fp->flag &= (BYTE)~FA_MODIFIED;
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c198:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c19c:	b2da      	uxtb	r2, r3
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800c1a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c1a6:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 800c1aa:	4611      	mov	r1, r2
 800c1ac:	4618      	mov	r0, r3
 800c1ae:	f7fc f8f0 	bl	8008392 <unlock_fs>
 800c1b2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800c1b6:	4618      	mov	r0, r3
 800c1b8:	3774      	adds	r7, #116	; 0x74
 800c1ba:	46bd      	mov	sp, r7
 800c1bc:	bd90      	pop	{r4, r7, pc}

0800c1be <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800c1be:	b580      	push	{r7, lr}
 800c1c0:	b084      	sub	sp, #16
 800c1c2:	af00      	add	r7, sp, #0
 800c1c4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800c1c6:	6878      	ldr	r0, [r7, #4]
 800c1c8:	f7ff feb2 	bl	800bf30 <f_sync>
 800c1cc:	4603      	mov	r3, r0
 800c1ce:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800c1d0:	7bfb      	ldrb	r3, [r7, #15]
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d11d      	bne.n	800c212 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	f107 0208 	add.w	r2, r7, #8
 800c1dc:	4611      	mov	r1, r2
 800c1de:	4618      	mov	r0, r3
 800c1e0:	f7ff f94c 	bl	800b47c <validate>
 800c1e4:	4603      	mov	r3, r0
 800c1e6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c1e8:	7bfb      	ldrb	r3, [r7, #15]
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d111      	bne.n	800c212 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1f2:	4618      	mov	r0, r3
 800c1f4:	f7fc f9f4 	bl	80085e0 <dec_lock>
 800c1f8:	4603      	mov	r3, r0
 800c1fa:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800c1fc:	7bfb      	ldrb	r3, [r7, #15]
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d102      	bne.n	800c208 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	2200      	movs	r2, #0
 800c206:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800c208:	68bb      	ldr	r3, [r7, #8]
 800c20a:	2100      	movs	r1, #0
 800c20c:	4618      	mov	r0, r3
 800c20e:	f7fc f8c0 	bl	8008392 <unlock_fs>
#endif
		}
	}
	return res;
 800c212:	7bfb      	ldrb	r3, [r7, #15]
}
 800c214:	4618      	mov	r0, r3
 800c216:	3710      	adds	r7, #16
 800c218:	46bd      	mov	sp, r7
 800c21a:	bd80      	pop	{r7, pc}

0800c21c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c21c:	b480      	push	{r7}
 800c21e:	b087      	sub	sp, #28
 800c220:	af00      	add	r7, sp, #0
 800c222:	60f8      	str	r0, [r7, #12]
 800c224:	60b9      	str	r1, [r7, #8]
 800c226:	4613      	mov	r3, r2
 800c228:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c22a:	2301      	movs	r3, #1
 800c22c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c22e:	2300      	movs	r3, #0
 800c230:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800c232:	4b1f      	ldr	r3, [pc, #124]	; (800c2b0 <FATFS_LinkDriverEx+0x94>)
 800c234:	7a5b      	ldrb	r3, [r3, #9]
 800c236:	b2db      	uxtb	r3, r3
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d131      	bne.n	800c2a0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c23c:	4b1c      	ldr	r3, [pc, #112]	; (800c2b0 <FATFS_LinkDriverEx+0x94>)
 800c23e:	7a5b      	ldrb	r3, [r3, #9]
 800c240:	b2db      	uxtb	r3, r3
 800c242:	461a      	mov	r2, r3
 800c244:	4b1a      	ldr	r3, [pc, #104]	; (800c2b0 <FATFS_LinkDriverEx+0x94>)
 800c246:	2100      	movs	r1, #0
 800c248:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800c24a:	4b19      	ldr	r3, [pc, #100]	; (800c2b0 <FATFS_LinkDriverEx+0x94>)
 800c24c:	7a5b      	ldrb	r3, [r3, #9]
 800c24e:	b2db      	uxtb	r3, r3
 800c250:	4a17      	ldr	r2, [pc, #92]	; (800c2b0 <FATFS_LinkDriverEx+0x94>)
 800c252:	009b      	lsls	r3, r3, #2
 800c254:	4413      	add	r3, r2
 800c256:	68fa      	ldr	r2, [r7, #12]
 800c258:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800c25a:	4b15      	ldr	r3, [pc, #84]	; (800c2b0 <FATFS_LinkDriverEx+0x94>)
 800c25c:	7a5b      	ldrb	r3, [r3, #9]
 800c25e:	b2db      	uxtb	r3, r3
 800c260:	461a      	mov	r2, r3
 800c262:	4b13      	ldr	r3, [pc, #76]	; (800c2b0 <FATFS_LinkDriverEx+0x94>)
 800c264:	4413      	add	r3, r2
 800c266:	79fa      	ldrb	r2, [r7, #7]
 800c268:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c26a:	4b11      	ldr	r3, [pc, #68]	; (800c2b0 <FATFS_LinkDriverEx+0x94>)
 800c26c:	7a5b      	ldrb	r3, [r3, #9]
 800c26e:	b2db      	uxtb	r3, r3
 800c270:	1c5a      	adds	r2, r3, #1
 800c272:	b2d1      	uxtb	r1, r2
 800c274:	4a0e      	ldr	r2, [pc, #56]	; (800c2b0 <FATFS_LinkDriverEx+0x94>)
 800c276:	7251      	strb	r1, [r2, #9]
 800c278:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c27a:	7dbb      	ldrb	r3, [r7, #22]
 800c27c:	3330      	adds	r3, #48	; 0x30
 800c27e:	b2da      	uxtb	r2, r3
 800c280:	68bb      	ldr	r3, [r7, #8]
 800c282:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c284:	68bb      	ldr	r3, [r7, #8]
 800c286:	3301      	adds	r3, #1
 800c288:	223a      	movs	r2, #58	; 0x3a
 800c28a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c28c:	68bb      	ldr	r3, [r7, #8]
 800c28e:	3302      	adds	r3, #2
 800c290:	222f      	movs	r2, #47	; 0x2f
 800c292:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c294:	68bb      	ldr	r3, [r7, #8]
 800c296:	3303      	adds	r3, #3
 800c298:	2200      	movs	r2, #0
 800c29a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c29c:	2300      	movs	r3, #0
 800c29e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800c2a0:	7dfb      	ldrb	r3, [r7, #23]
}
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	371c      	adds	r7, #28
 800c2a6:	46bd      	mov	sp, r7
 800c2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ac:	4770      	bx	lr
 800c2ae:	bf00      	nop
 800c2b0:	200002c0 	.word	0x200002c0

0800c2b4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800c2b4:	b580      	push	{r7, lr}
 800c2b6:	b082      	sub	sp, #8
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	6078      	str	r0, [r7, #4]
 800c2bc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c2be:	2200      	movs	r2, #0
 800c2c0:	6839      	ldr	r1, [r7, #0]
 800c2c2:	6878      	ldr	r0, [r7, #4]
 800c2c4:	f7ff ffaa 	bl	800c21c <FATFS_LinkDriverEx>
 800c2c8:	4603      	mov	r3, r0
}
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	3708      	adds	r7, #8
 800c2ce:	46bd      	mov	sp, r7
 800c2d0:	bd80      	pop	{r7, pc}
	...

0800c2d4 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800c2d4:	b480      	push	{r7}
 800c2d6:	b085      	sub	sp, #20
 800c2d8:	af00      	add	r7, sp, #0
 800c2da:	4603      	mov	r3, r0
 800c2dc:	6039      	str	r1, [r7, #0]
 800c2de:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800c2e0:	88fb      	ldrh	r3, [r7, #6]
 800c2e2:	2b7f      	cmp	r3, #127	; 0x7f
 800c2e4:	d802      	bhi.n	800c2ec <ff_convert+0x18>
		c = chr;
 800c2e6:	88fb      	ldrh	r3, [r7, #6]
 800c2e8:	81fb      	strh	r3, [r7, #14]
 800c2ea:	e025      	b.n	800c338 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800c2ec:	683b      	ldr	r3, [r7, #0]
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d00b      	beq.n	800c30a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800c2f2:	88fb      	ldrh	r3, [r7, #6]
 800c2f4:	2bff      	cmp	r3, #255	; 0xff
 800c2f6:	d805      	bhi.n	800c304 <ff_convert+0x30>
 800c2f8:	88fb      	ldrh	r3, [r7, #6]
 800c2fa:	3b80      	subs	r3, #128	; 0x80
 800c2fc:	4a12      	ldr	r2, [pc, #72]	; (800c348 <ff_convert+0x74>)
 800c2fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c302:	e000      	b.n	800c306 <ff_convert+0x32>
 800c304:	2300      	movs	r3, #0
 800c306:	81fb      	strh	r3, [r7, #14]
 800c308:	e016      	b.n	800c338 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800c30a:	2300      	movs	r3, #0
 800c30c:	81fb      	strh	r3, [r7, #14]
 800c30e:	e009      	b.n	800c324 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800c310:	89fb      	ldrh	r3, [r7, #14]
 800c312:	4a0d      	ldr	r2, [pc, #52]	; (800c348 <ff_convert+0x74>)
 800c314:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c318:	88fa      	ldrh	r2, [r7, #6]
 800c31a:	429a      	cmp	r2, r3
 800c31c:	d006      	beq.n	800c32c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800c31e:	89fb      	ldrh	r3, [r7, #14]
 800c320:	3301      	adds	r3, #1
 800c322:	81fb      	strh	r3, [r7, #14]
 800c324:	89fb      	ldrh	r3, [r7, #14]
 800c326:	2b7f      	cmp	r3, #127	; 0x7f
 800c328:	d9f2      	bls.n	800c310 <ff_convert+0x3c>
 800c32a:	e000      	b.n	800c32e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800c32c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800c32e:	89fb      	ldrh	r3, [r7, #14]
 800c330:	3380      	adds	r3, #128	; 0x80
 800c332:	b29b      	uxth	r3, r3
 800c334:	b2db      	uxtb	r3, r3
 800c336:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800c338:	89fb      	ldrh	r3, [r7, #14]
}
 800c33a:	4618      	mov	r0, r3
 800c33c:	3714      	adds	r7, #20
 800c33e:	46bd      	mov	sp, r7
 800c340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c344:	4770      	bx	lr
 800c346:	bf00      	nop
 800c348:	0800f398 	.word	0x0800f398

0800c34c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800c34c:	b480      	push	{r7}
 800c34e:	b087      	sub	sp, #28
 800c350:	af00      	add	r7, sp, #0
 800c352:	4603      	mov	r3, r0
 800c354:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800c356:	88fb      	ldrh	r3, [r7, #6]
 800c358:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c35c:	d201      	bcs.n	800c362 <ff_wtoupper+0x16>
 800c35e:	4b3e      	ldr	r3, [pc, #248]	; (800c458 <ff_wtoupper+0x10c>)
 800c360:	e000      	b.n	800c364 <ff_wtoupper+0x18>
 800c362:	4b3e      	ldr	r3, [pc, #248]	; (800c45c <ff_wtoupper+0x110>)
 800c364:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800c366:	697b      	ldr	r3, [r7, #20]
 800c368:	1c9a      	adds	r2, r3, #2
 800c36a:	617a      	str	r2, [r7, #20]
 800c36c:	881b      	ldrh	r3, [r3, #0]
 800c36e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800c370:	8a7b      	ldrh	r3, [r7, #18]
 800c372:	2b00      	cmp	r3, #0
 800c374:	d068      	beq.n	800c448 <ff_wtoupper+0xfc>
 800c376:	88fa      	ldrh	r2, [r7, #6]
 800c378:	8a7b      	ldrh	r3, [r7, #18]
 800c37a:	429a      	cmp	r2, r3
 800c37c:	d364      	bcc.n	800c448 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800c37e:	697b      	ldr	r3, [r7, #20]
 800c380:	1c9a      	adds	r2, r3, #2
 800c382:	617a      	str	r2, [r7, #20]
 800c384:	881b      	ldrh	r3, [r3, #0]
 800c386:	823b      	strh	r3, [r7, #16]
 800c388:	8a3b      	ldrh	r3, [r7, #16]
 800c38a:	0a1b      	lsrs	r3, r3, #8
 800c38c:	81fb      	strh	r3, [r7, #14]
 800c38e:	8a3b      	ldrh	r3, [r7, #16]
 800c390:	b2db      	uxtb	r3, r3
 800c392:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800c394:	88fa      	ldrh	r2, [r7, #6]
 800c396:	8a79      	ldrh	r1, [r7, #18]
 800c398:	8a3b      	ldrh	r3, [r7, #16]
 800c39a:	440b      	add	r3, r1
 800c39c:	429a      	cmp	r2, r3
 800c39e:	da49      	bge.n	800c434 <ff_wtoupper+0xe8>
			switch (cmd) {
 800c3a0:	89fb      	ldrh	r3, [r7, #14]
 800c3a2:	2b08      	cmp	r3, #8
 800c3a4:	d84f      	bhi.n	800c446 <ff_wtoupper+0xfa>
 800c3a6:	a201      	add	r2, pc, #4	; (adr r2, 800c3ac <ff_wtoupper+0x60>)
 800c3a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3ac:	0800c3d1 	.word	0x0800c3d1
 800c3b0:	0800c3e3 	.word	0x0800c3e3
 800c3b4:	0800c3f9 	.word	0x0800c3f9
 800c3b8:	0800c401 	.word	0x0800c401
 800c3bc:	0800c409 	.word	0x0800c409
 800c3c0:	0800c411 	.word	0x0800c411
 800c3c4:	0800c419 	.word	0x0800c419
 800c3c8:	0800c421 	.word	0x0800c421
 800c3cc:	0800c429 	.word	0x0800c429
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800c3d0:	88fa      	ldrh	r2, [r7, #6]
 800c3d2:	8a7b      	ldrh	r3, [r7, #18]
 800c3d4:	1ad3      	subs	r3, r2, r3
 800c3d6:	005b      	lsls	r3, r3, #1
 800c3d8:	697a      	ldr	r2, [r7, #20]
 800c3da:	4413      	add	r3, r2
 800c3dc:	881b      	ldrh	r3, [r3, #0]
 800c3de:	80fb      	strh	r3, [r7, #6]
 800c3e0:	e027      	b.n	800c432 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800c3e2:	88fa      	ldrh	r2, [r7, #6]
 800c3e4:	8a7b      	ldrh	r3, [r7, #18]
 800c3e6:	1ad3      	subs	r3, r2, r3
 800c3e8:	b29b      	uxth	r3, r3
 800c3ea:	f003 0301 	and.w	r3, r3, #1
 800c3ee:	b29b      	uxth	r3, r3
 800c3f0:	88fa      	ldrh	r2, [r7, #6]
 800c3f2:	1ad3      	subs	r3, r2, r3
 800c3f4:	80fb      	strh	r3, [r7, #6]
 800c3f6:	e01c      	b.n	800c432 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800c3f8:	88fb      	ldrh	r3, [r7, #6]
 800c3fa:	3b10      	subs	r3, #16
 800c3fc:	80fb      	strh	r3, [r7, #6]
 800c3fe:	e018      	b.n	800c432 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800c400:	88fb      	ldrh	r3, [r7, #6]
 800c402:	3b20      	subs	r3, #32
 800c404:	80fb      	strh	r3, [r7, #6]
 800c406:	e014      	b.n	800c432 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800c408:	88fb      	ldrh	r3, [r7, #6]
 800c40a:	3b30      	subs	r3, #48	; 0x30
 800c40c:	80fb      	strh	r3, [r7, #6]
 800c40e:	e010      	b.n	800c432 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800c410:	88fb      	ldrh	r3, [r7, #6]
 800c412:	3b1a      	subs	r3, #26
 800c414:	80fb      	strh	r3, [r7, #6]
 800c416:	e00c      	b.n	800c432 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800c418:	88fb      	ldrh	r3, [r7, #6]
 800c41a:	3308      	adds	r3, #8
 800c41c:	80fb      	strh	r3, [r7, #6]
 800c41e:	e008      	b.n	800c432 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800c420:	88fb      	ldrh	r3, [r7, #6]
 800c422:	3b50      	subs	r3, #80	; 0x50
 800c424:	80fb      	strh	r3, [r7, #6]
 800c426:	e004      	b.n	800c432 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800c428:	88fb      	ldrh	r3, [r7, #6]
 800c42a:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800c42e:	80fb      	strh	r3, [r7, #6]
 800c430:	bf00      	nop
			}
			break;
 800c432:	e008      	b.n	800c446 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800c434:	89fb      	ldrh	r3, [r7, #14]
 800c436:	2b00      	cmp	r3, #0
 800c438:	d195      	bne.n	800c366 <ff_wtoupper+0x1a>
 800c43a:	8a3b      	ldrh	r3, [r7, #16]
 800c43c:	005b      	lsls	r3, r3, #1
 800c43e:	697a      	ldr	r2, [r7, #20]
 800c440:	4413      	add	r3, r2
 800c442:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800c444:	e78f      	b.n	800c366 <ff_wtoupper+0x1a>
			break;
 800c446:	bf00      	nop
	}

	return chr;
 800c448:	88fb      	ldrh	r3, [r7, #6]
}
 800c44a:	4618      	mov	r0, r3
 800c44c:	371c      	adds	r7, #28
 800c44e:	46bd      	mov	sp, r7
 800c450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c454:	4770      	bx	lr
 800c456:	bf00      	nop
 800c458:	0800f498 	.word	0x0800f498
 800c45c:	0800f68c 	.word	0x0800f68c

0800c460 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800c460:	b580      	push	{r7, lr}
 800c462:	b086      	sub	sp, #24
 800c464:	af00      	add	r7, sp, #0
 800c466:	4603      	mov	r3, r0
 800c468:	6039      	str	r1, [r7, #0]
 800c46a:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 800c46c:	2300      	movs	r3, #0
 800c46e:	60fb      	str	r3, [r7, #12]
 800c470:	2300      	movs	r3, #0
 800c472:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 800c474:	f107 030c 	add.w	r3, r7, #12
 800c478:	2101      	movs	r1, #1
 800c47a:	4618      	mov	r0, r3
 800c47c:	f000 f8ec 	bl	800c658 <osSemaphoreCreate>
 800c480:	4602      	mov	r2, r0
 800c482:	683b      	ldr	r3, [r7, #0]
 800c484:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 800c486:	683b      	ldr	r3, [r7, #0]
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	bf14      	ite	ne
 800c48e:	2301      	movne	r3, #1
 800c490:	2300      	moveq	r3, #0
 800c492:	b2db      	uxtb	r3, r3
 800c494:	617b      	str	r3, [r7, #20]

    return ret;
 800c496:	697b      	ldr	r3, [r7, #20]
}
 800c498:	4618      	mov	r0, r3
 800c49a:	3718      	adds	r7, #24
 800c49c:	46bd      	mov	sp, r7
 800c49e:	bd80      	pop	{r7, pc}

0800c4a0 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800c4a0:	b580      	push	{r7, lr}
 800c4a2:	b082      	sub	sp, #8
 800c4a4:	af00      	add	r7, sp, #0
 800c4a6:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800c4a8:	6878      	ldr	r0, [r7, #4]
 800c4aa:	f000 f98d 	bl	800c7c8 <osSemaphoreDelete>
#endif
    return 1;
 800c4ae:	2301      	movs	r3, #1
}
 800c4b0:	4618      	mov	r0, r3
 800c4b2:	3708      	adds	r7, #8
 800c4b4:	46bd      	mov	sp, r7
 800c4b6:	bd80      	pop	{r7, pc}

0800c4b8 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800c4b8:	b580      	push	{r7, lr}
 800c4ba:	b084      	sub	sp, #16
 800c4bc:	af00      	add	r7, sp, #0
 800c4be:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800c4c0:	2300      	movs	r3, #0
 800c4c2:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 800c4c4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800c4c8:	6878      	ldr	r0, [r7, #4]
 800c4ca:	f000 f8f9 	bl	800c6c0 <osSemaphoreWait>
 800c4ce:	4603      	mov	r3, r0
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d101      	bne.n	800c4d8 <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 800c4d4:	2301      	movs	r3, #1
 800c4d6:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800c4d8:	68fb      	ldr	r3, [r7, #12]
}
 800c4da:	4618      	mov	r0, r3
 800c4dc:	3710      	adds	r7, #16
 800c4de:	46bd      	mov	sp, r7
 800c4e0:	bd80      	pop	{r7, pc}

0800c4e2 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800c4e2:	b580      	push	{r7, lr}
 800c4e4:	b082      	sub	sp, #8
 800c4e6:	af00      	add	r7, sp, #0
 800c4e8:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800c4ea:	6878      	ldr	r0, [r7, #4]
 800c4ec:	f000 f936 	bl	800c75c <osSemaphoreRelease>
#endif
}
 800c4f0:	bf00      	nop
 800c4f2:	3708      	adds	r7, #8
 800c4f4:	46bd      	mov	sp, r7
 800c4f6:	bd80      	pop	{r7, pc}

0800c4f8 <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 800c4f8:	b580      	push	{r7, lr}
 800c4fa:	b082      	sub	sp, #8
 800c4fc:	af00      	add	r7, sp, #0
 800c4fe:	6078      	str	r0, [r7, #4]
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 800c500:	6878      	ldr	r0, [r7, #4]
 800c502:	f002 fc93 	bl	800ee2c <pvPortMalloc>
 800c506:	4603      	mov	r3, r0
}
 800c508:	4618      	mov	r0, r3
 800c50a:	3708      	adds	r7, #8
 800c50c:	46bd      	mov	sp, r7
 800c50e:	bd80      	pop	{r7, pc}

0800c510 <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 800c510:	b580      	push	{r7, lr}
 800c512:	b082      	sub	sp, #8
 800c514:	af00      	add	r7, sp, #0
 800c516:	6078      	str	r0, [r7, #4]
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 800c518:	6878      	ldr	r0, [r7, #4]
 800c51a:	f002 fd4f 	bl	800efbc <vPortFree>
}
 800c51e:	bf00      	nop
 800c520:	3708      	adds	r7, #8
 800c522:	46bd      	mov	sp, r7
 800c524:	bd80      	pop	{r7, pc}

0800c526 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800c526:	b480      	push	{r7}
 800c528:	b085      	sub	sp, #20
 800c52a:	af00      	add	r7, sp, #0
 800c52c:	4603      	mov	r3, r0
 800c52e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800c530:	2300      	movs	r3, #0
 800c532:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800c534:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c538:	2b84      	cmp	r3, #132	; 0x84
 800c53a:	d005      	beq.n	800c548 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800c53c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	4413      	add	r3, r2
 800c544:	3303      	adds	r3, #3
 800c546:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800c548:	68fb      	ldr	r3, [r7, #12]
}
 800c54a:	4618      	mov	r0, r3
 800c54c:	3714      	adds	r7, #20
 800c54e:	46bd      	mov	sp, r7
 800c550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c554:	4770      	bx	lr

0800c556 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800c556:	b480      	push	{r7}
 800c558:	b083      	sub	sp, #12
 800c55a:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c55c:	f3ef 8305 	mrs	r3, IPSR
 800c560:	607b      	str	r3, [r7, #4]
  return(result);
 800c562:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800c564:	2b00      	cmp	r3, #0
 800c566:	bf14      	ite	ne
 800c568:	2301      	movne	r3, #1
 800c56a:	2300      	moveq	r3, #0
 800c56c:	b2db      	uxtb	r3, r3
}
 800c56e:	4618      	mov	r0, r3
 800c570:	370c      	adds	r7, #12
 800c572:	46bd      	mov	sp, r7
 800c574:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c578:	4770      	bx	lr

0800c57a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800c57a:	b580      	push	{r7, lr}
 800c57c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800c57e:	f001 fbc3 	bl	800dd08 <vTaskStartScheduler>
  
  return osOK;
 800c582:	2300      	movs	r3, #0
}
 800c584:	4618      	mov	r0, r3
 800c586:	bd80      	pop	{r7, pc}

0800c588 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 800c588:	b580      	push	{r7, lr}
 800c58a:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 800c58c:	f001 ffe6 	bl	800e55c <xTaskGetSchedulerState>
 800c590:	4603      	mov	r3, r0
 800c592:	2b01      	cmp	r3, #1
 800c594:	d101      	bne.n	800c59a <osKernelRunning+0x12>
    return 0;
 800c596:	2300      	movs	r3, #0
 800c598:	e000      	b.n	800c59c <osKernelRunning+0x14>
  else
    return 1;
 800c59a:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 800c59c:	4618      	mov	r0, r3
 800c59e:	bd80      	pop	{r7, pc}

0800c5a0 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800c5a0:	b580      	push	{r7, lr}
 800c5a2:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800c5a4:	f7ff ffd7 	bl	800c556 <inHandlerMode>
 800c5a8:	4603      	mov	r3, r0
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d003      	beq.n	800c5b6 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800c5ae:	f001 fcc9 	bl	800df44 <xTaskGetTickCountFromISR>
 800c5b2:	4603      	mov	r3, r0
 800c5b4:	e002      	b.n	800c5bc <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800c5b6:	f001 fcb5 	bl	800df24 <xTaskGetTickCount>
 800c5ba:	4603      	mov	r3, r0
  }
}
 800c5bc:	4618      	mov	r0, r3
 800c5be:	bd80      	pop	{r7, pc}

0800c5c0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800c5c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c5c2:	b089      	sub	sp, #36	; 0x24
 800c5c4:	af04      	add	r7, sp, #16
 800c5c6:	6078      	str	r0, [r7, #4]
 800c5c8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	695b      	ldr	r3, [r3, #20]
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d020      	beq.n	800c614 <osThreadCreate+0x54>
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	699b      	ldr	r3, [r3, #24]
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d01c      	beq.n	800c614 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	685c      	ldr	r4, [r3, #4]
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	681d      	ldr	r5, [r3, #0]
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	691e      	ldr	r6, [r3, #16]
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c5ec:	4618      	mov	r0, r3
 800c5ee:	f7ff ff9a 	bl	800c526 <makeFreeRtosPriority>
 800c5f2:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	695b      	ldr	r3, [r3, #20]
 800c5f8:	687a      	ldr	r2, [r7, #4]
 800c5fa:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c5fc:	9202      	str	r2, [sp, #8]
 800c5fe:	9301      	str	r3, [sp, #4]
 800c600:	9100      	str	r1, [sp, #0]
 800c602:	683b      	ldr	r3, [r7, #0]
 800c604:	4632      	mov	r2, r6
 800c606:	4629      	mov	r1, r5
 800c608:	4620      	mov	r0, r4
 800c60a:	f001 f9e5 	bl	800d9d8 <xTaskCreateStatic>
 800c60e:	4603      	mov	r3, r0
 800c610:	60fb      	str	r3, [r7, #12]
 800c612:	e01c      	b.n	800c64e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	685c      	ldr	r4, [r3, #4]
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c620:	b29e      	uxth	r6, r3
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c628:	4618      	mov	r0, r3
 800c62a:	f7ff ff7c 	bl	800c526 <makeFreeRtosPriority>
 800c62e:	4602      	mov	r2, r0
 800c630:	f107 030c 	add.w	r3, r7, #12
 800c634:	9301      	str	r3, [sp, #4]
 800c636:	9200      	str	r2, [sp, #0]
 800c638:	683b      	ldr	r3, [r7, #0]
 800c63a:	4632      	mov	r2, r6
 800c63c:	4629      	mov	r1, r5
 800c63e:	4620      	mov	r0, r4
 800c640:	f001 fa2a 	bl	800da98 <xTaskCreate>
 800c644:	4603      	mov	r3, r0
 800c646:	2b01      	cmp	r3, #1
 800c648:	d001      	beq.n	800c64e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800c64a:	2300      	movs	r3, #0
 800c64c:	e000      	b.n	800c650 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800c64e:	68fb      	ldr	r3, [r7, #12]
}
 800c650:	4618      	mov	r0, r3
 800c652:	3714      	adds	r7, #20
 800c654:	46bd      	mov	sp, r7
 800c656:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c658 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800c658:	b580      	push	{r7, lr}
 800c65a:	b086      	sub	sp, #24
 800c65c:	af02      	add	r7, sp, #8
 800c65e:	6078      	str	r0, [r7, #4]
 800c660:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	685b      	ldr	r3, [r3, #4]
 800c666:	2b00      	cmp	r3, #0
 800c668:	d010      	beq.n	800c68c <osSemaphoreCreate+0x34>
    if (count == 1) {
 800c66a:	683b      	ldr	r3, [r7, #0]
 800c66c:	2b01      	cmp	r3, #1
 800c66e:	d10b      	bne.n	800c688 <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	685a      	ldr	r2, [r3, #4]
 800c674:	2303      	movs	r3, #3
 800c676:	9300      	str	r3, [sp, #0]
 800c678:	4613      	mov	r3, r2
 800c67a:	2200      	movs	r2, #0
 800c67c:	2100      	movs	r1, #0
 800c67e:	2001      	movs	r0, #1
 800c680:	f000 fab0 	bl	800cbe4 <xQueueGenericCreateStatic>
 800c684:	4603      	mov	r3, r0
 800c686:	e016      	b.n	800c6b6 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800c688:	2300      	movs	r3, #0
 800c68a:	e014      	b.n	800c6b6 <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 800c68c:	683b      	ldr	r3, [r7, #0]
 800c68e:	2b01      	cmp	r3, #1
 800c690:	d110      	bne.n	800c6b4 <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 800c692:	2203      	movs	r2, #3
 800c694:	2100      	movs	r1, #0
 800c696:	2001      	movs	r0, #1
 800c698:	f000 fb21 	bl	800ccde <xQueueGenericCreate>
 800c69c:	60f8      	str	r0, [r7, #12]
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d005      	beq.n	800c6b0 <osSemaphoreCreate+0x58>
 800c6a4:	2300      	movs	r3, #0
 800c6a6:	2200      	movs	r2, #0
 800c6a8:	2100      	movs	r1, #0
 800c6aa:	68f8      	ldr	r0, [r7, #12]
 800c6ac:	f000 fb78 	bl	800cda0 <xQueueGenericSend>
      return sema;
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	e000      	b.n	800c6b6 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800c6b4:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800c6b6:	4618      	mov	r0, r3
 800c6b8:	3710      	adds	r7, #16
 800c6ba:	46bd      	mov	sp, r7
 800c6bc:	bd80      	pop	{r7, pc}
	...

0800c6c0 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800c6c0:	b580      	push	{r7, lr}
 800c6c2:	b084      	sub	sp, #16
 800c6c4:	af00      	add	r7, sp, #0
 800c6c6:	6078      	str	r0, [r7, #4]
 800c6c8:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800c6ca:	2300      	movs	r3, #0
 800c6cc:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d101      	bne.n	800c6d8 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800c6d4:	2380      	movs	r3, #128	; 0x80
 800c6d6:	e03a      	b.n	800c74e <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800c6d8:	2300      	movs	r3, #0
 800c6da:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800c6dc:	683b      	ldr	r3, [r7, #0]
 800c6de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6e2:	d103      	bne.n	800c6ec <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800c6e4:	f04f 33ff 	mov.w	r3, #4294967295
 800c6e8:	60fb      	str	r3, [r7, #12]
 800c6ea:	e009      	b.n	800c700 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800c6ec:	683b      	ldr	r3, [r7, #0]
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d006      	beq.n	800c700 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800c6f2:	683b      	ldr	r3, [r7, #0]
 800c6f4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d101      	bne.n	800c700 <osSemaphoreWait+0x40>
      ticks = 1;
 800c6fc:	2301      	movs	r3, #1
 800c6fe:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800c700:	f7ff ff29 	bl	800c556 <inHandlerMode>
 800c704:	4603      	mov	r3, r0
 800c706:	2b00      	cmp	r3, #0
 800c708:	d017      	beq.n	800c73a <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800c70a:	f107 0308 	add.w	r3, r7, #8
 800c70e:	461a      	mov	r2, r3
 800c710:	2100      	movs	r1, #0
 800c712:	6878      	ldr	r0, [r7, #4]
 800c714:	f000 ff66 	bl	800d5e4 <xQueueReceiveFromISR>
 800c718:	4603      	mov	r3, r0
 800c71a:	2b01      	cmp	r3, #1
 800c71c:	d001      	beq.n	800c722 <osSemaphoreWait+0x62>
      return osErrorOS;
 800c71e:	23ff      	movs	r3, #255	; 0xff
 800c720:	e015      	b.n	800c74e <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800c722:	68bb      	ldr	r3, [r7, #8]
 800c724:	2b00      	cmp	r3, #0
 800c726:	d011      	beq.n	800c74c <osSemaphoreWait+0x8c>
 800c728:	4b0b      	ldr	r3, [pc, #44]	; (800c758 <osSemaphoreWait+0x98>)
 800c72a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c72e:	601a      	str	r2, [r3, #0]
 800c730:	f3bf 8f4f 	dsb	sy
 800c734:	f3bf 8f6f 	isb	sy
 800c738:	e008      	b.n	800c74c <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800c73a:	68f9      	ldr	r1, [r7, #12]
 800c73c:	6878      	ldr	r0, [r7, #4]
 800c73e:	f000 fe41 	bl	800d3c4 <xQueueSemaphoreTake>
 800c742:	4603      	mov	r3, r0
 800c744:	2b01      	cmp	r3, #1
 800c746:	d001      	beq.n	800c74c <osSemaphoreWait+0x8c>
    return osErrorOS;
 800c748:	23ff      	movs	r3, #255	; 0xff
 800c74a:	e000      	b.n	800c74e <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800c74c:	2300      	movs	r3, #0
}
 800c74e:	4618      	mov	r0, r3
 800c750:	3710      	adds	r7, #16
 800c752:	46bd      	mov	sp, r7
 800c754:	bd80      	pop	{r7, pc}
 800c756:	bf00      	nop
 800c758:	e000ed04 	.word	0xe000ed04

0800c75c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800c75c:	b580      	push	{r7, lr}
 800c75e:	b084      	sub	sp, #16
 800c760:	af00      	add	r7, sp, #0
 800c762:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800c764:	2300      	movs	r3, #0
 800c766:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800c768:	2300      	movs	r3, #0
 800c76a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800c76c:	f7ff fef3 	bl	800c556 <inHandlerMode>
 800c770:	4603      	mov	r3, r0
 800c772:	2b00      	cmp	r3, #0
 800c774:	d016      	beq.n	800c7a4 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800c776:	f107 0308 	add.w	r3, r7, #8
 800c77a:	4619      	mov	r1, r3
 800c77c:	6878      	ldr	r0, [r7, #4]
 800c77e:	f000 fcad 	bl	800d0dc <xQueueGiveFromISR>
 800c782:	4603      	mov	r3, r0
 800c784:	2b01      	cmp	r3, #1
 800c786:	d001      	beq.n	800c78c <osSemaphoreRelease+0x30>
      return osErrorOS;
 800c788:	23ff      	movs	r3, #255	; 0xff
 800c78a:	e017      	b.n	800c7bc <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800c78c:	68bb      	ldr	r3, [r7, #8]
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d013      	beq.n	800c7ba <osSemaphoreRelease+0x5e>
 800c792:	4b0c      	ldr	r3, [pc, #48]	; (800c7c4 <osSemaphoreRelease+0x68>)
 800c794:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c798:	601a      	str	r2, [r3, #0]
 800c79a:	f3bf 8f4f 	dsb	sy
 800c79e:	f3bf 8f6f 	isb	sy
 800c7a2:	e00a      	b.n	800c7ba <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800c7a4:	2300      	movs	r3, #0
 800c7a6:	2200      	movs	r2, #0
 800c7a8:	2100      	movs	r1, #0
 800c7aa:	6878      	ldr	r0, [r7, #4]
 800c7ac:	f000 faf8 	bl	800cda0 <xQueueGenericSend>
 800c7b0:	4603      	mov	r3, r0
 800c7b2:	2b01      	cmp	r3, #1
 800c7b4:	d001      	beq.n	800c7ba <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800c7b6:	23ff      	movs	r3, #255	; 0xff
 800c7b8:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800c7ba:	68fb      	ldr	r3, [r7, #12]
}
 800c7bc:	4618      	mov	r0, r3
 800c7be:	3710      	adds	r7, #16
 800c7c0:	46bd      	mov	sp, r7
 800c7c2:	bd80      	pop	{r7, pc}
 800c7c4:	e000ed04 	.word	0xe000ed04

0800c7c8 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800c7c8:	b580      	push	{r7, lr}
 800c7ca:	b082      	sub	sp, #8
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800c7d0:	f7ff fec1 	bl	800c556 <inHandlerMode>
 800c7d4:	4603      	mov	r3, r0
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d001      	beq.n	800c7de <osSemaphoreDelete+0x16>
    return osErrorISR;
 800c7da:	2382      	movs	r3, #130	; 0x82
 800c7dc:	e003      	b.n	800c7e6 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800c7de:	6878      	ldr	r0, [r7, #4]
 800c7e0:	f000 ff83 	bl	800d6ea <vQueueDelete>

  return osOK; 
 800c7e4:	2300      	movs	r3, #0
}
 800c7e6:	4618      	mov	r0, r3
 800c7e8:	3708      	adds	r7, #8
 800c7ea:	46bd      	mov	sp, r7
 800c7ec:	bd80      	pop	{r7, pc}

0800c7ee <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800c7ee:	b590      	push	{r4, r7, lr}
 800c7f0:	b085      	sub	sp, #20
 800c7f2:	af02      	add	r7, sp, #8
 800c7f4:	6078      	str	r0, [r7, #4]
 800c7f6:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	689b      	ldr	r3, [r3, #8]
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d012      	beq.n	800c826 <osMessageCreate+0x38>
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	68db      	ldr	r3, [r3, #12]
 800c804:	2b00      	cmp	r3, #0
 800c806:	d00e      	beq.n	800c826 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	6818      	ldr	r0, [r3, #0]
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	6859      	ldr	r1, [r3, #4]
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	689a      	ldr	r2, [r3, #8]
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	68dc      	ldr	r4, [r3, #12]
 800c818:	2300      	movs	r3, #0
 800c81a:	9300      	str	r3, [sp, #0]
 800c81c:	4623      	mov	r3, r4
 800c81e:	f000 f9e1 	bl	800cbe4 <xQueueGenericCreateStatic>
 800c822:	4603      	mov	r3, r0
 800c824:	e008      	b.n	800c838 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	6818      	ldr	r0, [r3, #0]
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	685b      	ldr	r3, [r3, #4]
 800c82e:	2200      	movs	r2, #0
 800c830:	4619      	mov	r1, r3
 800c832:	f000 fa54 	bl	800ccde <xQueueGenericCreate>
 800c836:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800c838:	4618      	mov	r0, r3
 800c83a:	370c      	adds	r7, #12
 800c83c:	46bd      	mov	sp, r7
 800c83e:	bd90      	pop	{r4, r7, pc}

0800c840 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800c840:	b580      	push	{r7, lr}
 800c842:	b086      	sub	sp, #24
 800c844:	af00      	add	r7, sp, #0
 800c846:	60f8      	str	r0, [r7, #12]
 800c848:	60b9      	str	r1, [r7, #8]
 800c84a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800c84c:	2300      	movs	r3, #0
 800c84e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800c854:	697b      	ldr	r3, [r7, #20]
 800c856:	2b00      	cmp	r3, #0
 800c858:	d101      	bne.n	800c85e <osMessagePut+0x1e>
    ticks = 1;
 800c85a:	2301      	movs	r3, #1
 800c85c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800c85e:	f7ff fe7a 	bl	800c556 <inHandlerMode>
 800c862:	4603      	mov	r3, r0
 800c864:	2b00      	cmp	r3, #0
 800c866:	d018      	beq.n	800c89a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800c868:	f107 0210 	add.w	r2, r7, #16
 800c86c:	f107 0108 	add.w	r1, r7, #8
 800c870:	2300      	movs	r3, #0
 800c872:	68f8      	ldr	r0, [r7, #12]
 800c874:	f000 fb96 	bl	800cfa4 <xQueueGenericSendFromISR>
 800c878:	4603      	mov	r3, r0
 800c87a:	2b01      	cmp	r3, #1
 800c87c:	d001      	beq.n	800c882 <osMessagePut+0x42>
      return osErrorOS;
 800c87e:	23ff      	movs	r3, #255	; 0xff
 800c880:	e018      	b.n	800c8b4 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800c882:	693b      	ldr	r3, [r7, #16]
 800c884:	2b00      	cmp	r3, #0
 800c886:	d014      	beq.n	800c8b2 <osMessagePut+0x72>
 800c888:	4b0c      	ldr	r3, [pc, #48]	; (800c8bc <osMessagePut+0x7c>)
 800c88a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c88e:	601a      	str	r2, [r3, #0]
 800c890:	f3bf 8f4f 	dsb	sy
 800c894:	f3bf 8f6f 	isb	sy
 800c898:	e00b      	b.n	800c8b2 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800c89a:	f107 0108 	add.w	r1, r7, #8
 800c89e:	2300      	movs	r3, #0
 800c8a0:	697a      	ldr	r2, [r7, #20]
 800c8a2:	68f8      	ldr	r0, [r7, #12]
 800c8a4:	f000 fa7c 	bl	800cda0 <xQueueGenericSend>
 800c8a8:	4603      	mov	r3, r0
 800c8aa:	2b01      	cmp	r3, #1
 800c8ac:	d001      	beq.n	800c8b2 <osMessagePut+0x72>
      return osErrorOS;
 800c8ae:	23ff      	movs	r3, #255	; 0xff
 800c8b0:	e000      	b.n	800c8b4 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800c8b2:	2300      	movs	r3, #0
}
 800c8b4:	4618      	mov	r0, r3
 800c8b6:	3718      	adds	r7, #24
 800c8b8:	46bd      	mov	sp, r7
 800c8ba:	bd80      	pop	{r7, pc}
 800c8bc:	e000ed04 	.word	0xe000ed04

0800c8c0 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800c8c0:	b590      	push	{r4, r7, lr}
 800c8c2:	b08b      	sub	sp, #44	; 0x2c
 800c8c4:	af00      	add	r7, sp, #0
 800c8c6:	60f8      	str	r0, [r7, #12]
 800c8c8:	60b9      	str	r1, [r7, #8]
 800c8ca:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800c8cc:	68bb      	ldr	r3, [r7, #8]
 800c8ce:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800c8d0:	2300      	movs	r3, #0
 800c8d2:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800c8d4:	68bb      	ldr	r3, [r7, #8]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d10a      	bne.n	800c8f0 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800c8da:	2380      	movs	r3, #128	; 0x80
 800c8dc:	617b      	str	r3, [r7, #20]
    return event;
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	461c      	mov	r4, r3
 800c8e2:	f107 0314 	add.w	r3, r7, #20
 800c8e6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c8ea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c8ee:	e054      	b.n	800c99a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800c8f0:	2300      	movs	r3, #0
 800c8f2:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800c8f4:	2300      	movs	r3, #0
 800c8f6:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8fe:	d103      	bne.n	800c908 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800c900:	f04f 33ff 	mov.w	r3, #4294967295
 800c904:	627b      	str	r3, [r7, #36]	; 0x24
 800c906:	e009      	b.n	800c91c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d006      	beq.n	800c91c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800c912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c914:	2b00      	cmp	r3, #0
 800c916:	d101      	bne.n	800c91c <osMessageGet+0x5c>
      ticks = 1;
 800c918:	2301      	movs	r3, #1
 800c91a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800c91c:	f7ff fe1b 	bl	800c556 <inHandlerMode>
 800c920:	4603      	mov	r3, r0
 800c922:	2b00      	cmp	r3, #0
 800c924:	d01c      	beq.n	800c960 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800c926:	f107 0220 	add.w	r2, r7, #32
 800c92a:	f107 0314 	add.w	r3, r7, #20
 800c92e:	3304      	adds	r3, #4
 800c930:	4619      	mov	r1, r3
 800c932:	68b8      	ldr	r0, [r7, #8]
 800c934:	f000 fe56 	bl	800d5e4 <xQueueReceiveFromISR>
 800c938:	4603      	mov	r3, r0
 800c93a:	2b01      	cmp	r3, #1
 800c93c:	d102      	bne.n	800c944 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800c93e:	2310      	movs	r3, #16
 800c940:	617b      	str	r3, [r7, #20]
 800c942:	e001      	b.n	800c948 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800c944:	2300      	movs	r3, #0
 800c946:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800c948:	6a3b      	ldr	r3, [r7, #32]
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d01d      	beq.n	800c98a <osMessageGet+0xca>
 800c94e:	4b15      	ldr	r3, [pc, #84]	; (800c9a4 <osMessageGet+0xe4>)
 800c950:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c954:	601a      	str	r2, [r3, #0]
 800c956:	f3bf 8f4f 	dsb	sy
 800c95a:	f3bf 8f6f 	isb	sy
 800c95e:	e014      	b.n	800c98a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800c960:	f107 0314 	add.w	r3, r7, #20
 800c964:	3304      	adds	r3, #4
 800c966:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c968:	4619      	mov	r1, r3
 800c96a:	68b8      	ldr	r0, [r7, #8]
 800c96c:	f000 fc48 	bl	800d200 <xQueueReceive>
 800c970:	4603      	mov	r3, r0
 800c972:	2b01      	cmp	r3, #1
 800c974:	d102      	bne.n	800c97c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800c976:	2310      	movs	r3, #16
 800c978:	617b      	str	r3, [r7, #20]
 800c97a:	e006      	b.n	800c98a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800c97c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d101      	bne.n	800c986 <osMessageGet+0xc6>
 800c982:	2300      	movs	r3, #0
 800c984:	e000      	b.n	800c988 <osMessageGet+0xc8>
 800c986:	2340      	movs	r3, #64	; 0x40
 800c988:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	461c      	mov	r4, r3
 800c98e:	f107 0314 	add.w	r3, r7, #20
 800c992:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c996:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800c99a:	68f8      	ldr	r0, [r7, #12]
 800c99c:	372c      	adds	r7, #44	; 0x2c
 800c99e:	46bd      	mov	sp, r7
 800c9a0:	bd90      	pop	{r4, r7, pc}
 800c9a2:	bf00      	nop
 800c9a4:	e000ed04 	.word	0xe000ed04

0800c9a8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c9a8:	b480      	push	{r7}
 800c9aa:	b083      	sub	sp, #12
 800c9ac:	af00      	add	r7, sp, #0
 800c9ae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	f103 0208 	add.w	r2, r3, #8
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	f04f 32ff 	mov.w	r2, #4294967295
 800c9c0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	f103 0208 	add.w	r2, r3, #8
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	f103 0208 	add.w	r2, r3, #8
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	2200      	movs	r2, #0
 800c9da:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c9dc:	bf00      	nop
 800c9de:	370c      	adds	r7, #12
 800c9e0:	46bd      	mov	sp, r7
 800c9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e6:	4770      	bx	lr

0800c9e8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c9e8:	b480      	push	{r7}
 800c9ea:	b083      	sub	sp, #12
 800c9ec:	af00      	add	r7, sp, #0
 800c9ee:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	2200      	movs	r2, #0
 800c9f4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c9f6:	bf00      	nop
 800c9f8:	370c      	adds	r7, #12
 800c9fa:	46bd      	mov	sp, r7
 800c9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca00:	4770      	bx	lr

0800ca02 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ca02:	b480      	push	{r7}
 800ca04:	b085      	sub	sp, #20
 800ca06:	af00      	add	r7, sp, #0
 800ca08:	6078      	str	r0, [r7, #4]
 800ca0a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	685b      	ldr	r3, [r3, #4]
 800ca10:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ca12:	683b      	ldr	r3, [r7, #0]
 800ca14:	68fa      	ldr	r2, [r7, #12]
 800ca16:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	689a      	ldr	r2, [r3, #8]
 800ca1c:	683b      	ldr	r3, [r7, #0]
 800ca1e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	689b      	ldr	r3, [r3, #8]
 800ca24:	683a      	ldr	r2, [r7, #0]
 800ca26:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	683a      	ldr	r2, [r7, #0]
 800ca2c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ca2e:	683b      	ldr	r3, [r7, #0]
 800ca30:	687a      	ldr	r2, [r7, #4]
 800ca32:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	1c5a      	adds	r2, r3, #1
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	601a      	str	r2, [r3, #0]
}
 800ca3e:	bf00      	nop
 800ca40:	3714      	adds	r7, #20
 800ca42:	46bd      	mov	sp, r7
 800ca44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca48:	4770      	bx	lr

0800ca4a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ca4a:	b480      	push	{r7}
 800ca4c:	b085      	sub	sp, #20
 800ca4e:	af00      	add	r7, sp, #0
 800ca50:	6078      	str	r0, [r7, #4]
 800ca52:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ca54:	683b      	ldr	r3, [r7, #0]
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ca5a:	68bb      	ldr	r3, [r7, #8]
 800ca5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca60:	d103      	bne.n	800ca6a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	691b      	ldr	r3, [r3, #16]
 800ca66:	60fb      	str	r3, [r7, #12]
 800ca68:	e00c      	b.n	800ca84 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	3308      	adds	r3, #8
 800ca6e:	60fb      	str	r3, [r7, #12]
 800ca70:	e002      	b.n	800ca78 <vListInsert+0x2e>
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	685b      	ldr	r3, [r3, #4]
 800ca76:	60fb      	str	r3, [r7, #12]
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	685b      	ldr	r3, [r3, #4]
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	68ba      	ldr	r2, [r7, #8]
 800ca80:	429a      	cmp	r2, r3
 800ca82:	d2f6      	bcs.n	800ca72 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	685a      	ldr	r2, [r3, #4]
 800ca88:	683b      	ldr	r3, [r7, #0]
 800ca8a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ca8c:	683b      	ldr	r3, [r7, #0]
 800ca8e:	685b      	ldr	r3, [r3, #4]
 800ca90:	683a      	ldr	r2, [r7, #0]
 800ca92:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ca94:	683b      	ldr	r3, [r7, #0]
 800ca96:	68fa      	ldr	r2, [r7, #12]
 800ca98:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	683a      	ldr	r2, [r7, #0]
 800ca9e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800caa0:	683b      	ldr	r3, [r7, #0]
 800caa2:	687a      	ldr	r2, [r7, #4]
 800caa4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	1c5a      	adds	r2, r3, #1
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	601a      	str	r2, [r3, #0]
}
 800cab0:	bf00      	nop
 800cab2:	3714      	adds	r7, #20
 800cab4:	46bd      	mov	sp, r7
 800cab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caba:	4770      	bx	lr

0800cabc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800cabc:	b480      	push	{r7}
 800cabe:	b085      	sub	sp, #20
 800cac0:	af00      	add	r7, sp, #0
 800cac2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	691b      	ldr	r3, [r3, #16]
 800cac8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	685b      	ldr	r3, [r3, #4]
 800cace:	687a      	ldr	r2, [r7, #4]
 800cad0:	6892      	ldr	r2, [r2, #8]
 800cad2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	689b      	ldr	r3, [r3, #8]
 800cad8:	687a      	ldr	r2, [r7, #4]
 800cada:	6852      	ldr	r2, [r2, #4]
 800cadc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	685b      	ldr	r3, [r3, #4]
 800cae2:	687a      	ldr	r2, [r7, #4]
 800cae4:	429a      	cmp	r2, r3
 800cae6:	d103      	bne.n	800caf0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	689a      	ldr	r2, [r3, #8]
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	2200      	movs	r2, #0
 800caf4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	1e5a      	subs	r2, r3, #1
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	681b      	ldr	r3, [r3, #0]
}
 800cb04:	4618      	mov	r0, r3
 800cb06:	3714      	adds	r7, #20
 800cb08:	46bd      	mov	sp, r7
 800cb0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb0e:	4770      	bx	lr

0800cb10 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800cb10:	b580      	push	{r7, lr}
 800cb12:	b084      	sub	sp, #16
 800cb14:	af00      	add	r7, sp, #0
 800cb16:	6078      	str	r0, [r7, #4]
 800cb18:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d10b      	bne.n	800cb3c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800cb24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb28:	b672      	cpsid	i
 800cb2a:	f383 8811 	msr	BASEPRI, r3
 800cb2e:	f3bf 8f6f 	isb	sy
 800cb32:	f3bf 8f4f 	dsb	sy
 800cb36:	b662      	cpsie	i
 800cb38:	60bb      	str	r3, [r7, #8]
 800cb3a:	e7fe      	b.n	800cb3a <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 800cb3c:	f002 f854 	bl	800ebe8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	681a      	ldr	r2, [r3, #0]
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb48:	68f9      	ldr	r1, [r7, #12]
 800cb4a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800cb4c:	fb01 f303 	mul.w	r3, r1, r3
 800cb50:	441a      	add	r2, r3
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	2200      	movs	r2, #0
 800cb5a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	681a      	ldr	r2, [r3, #0]
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	681a      	ldr	r2, [r3, #0]
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb6c:	3b01      	subs	r3, #1
 800cb6e:	68f9      	ldr	r1, [r7, #12]
 800cb70:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800cb72:	fb01 f303 	mul.w	r3, r1, r3
 800cb76:	441a      	add	r2, r3
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	22ff      	movs	r2, #255	; 0xff
 800cb80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	22ff      	movs	r2, #255	; 0xff
 800cb88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800cb8c:	683b      	ldr	r3, [r7, #0]
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d114      	bne.n	800cbbc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	691b      	ldr	r3, [r3, #16]
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d01a      	beq.n	800cbd0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	3310      	adds	r3, #16
 800cb9e:	4618      	mov	r0, r3
 800cba0:	f001 fb1e 	bl	800e1e0 <xTaskRemoveFromEventList>
 800cba4:	4603      	mov	r3, r0
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d012      	beq.n	800cbd0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800cbaa:	4b0d      	ldr	r3, [pc, #52]	; (800cbe0 <xQueueGenericReset+0xd0>)
 800cbac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cbb0:	601a      	str	r2, [r3, #0]
 800cbb2:	f3bf 8f4f 	dsb	sy
 800cbb6:	f3bf 8f6f 	isb	sy
 800cbba:	e009      	b.n	800cbd0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	3310      	adds	r3, #16
 800cbc0:	4618      	mov	r0, r3
 800cbc2:	f7ff fef1 	bl	800c9a8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	3324      	adds	r3, #36	; 0x24
 800cbca:	4618      	mov	r0, r3
 800cbcc:	f7ff feec 	bl	800c9a8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800cbd0:	f002 f83c 	bl	800ec4c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800cbd4:	2301      	movs	r3, #1
}
 800cbd6:	4618      	mov	r0, r3
 800cbd8:	3710      	adds	r7, #16
 800cbda:	46bd      	mov	sp, r7
 800cbdc:	bd80      	pop	{r7, pc}
 800cbde:	bf00      	nop
 800cbe0:	e000ed04 	.word	0xe000ed04

0800cbe4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800cbe4:	b580      	push	{r7, lr}
 800cbe6:	b08e      	sub	sp, #56	; 0x38
 800cbe8:	af02      	add	r7, sp, #8
 800cbea:	60f8      	str	r0, [r7, #12]
 800cbec:	60b9      	str	r1, [r7, #8]
 800cbee:	607a      	str	r2, [r7, #4]
 800cbf0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d10b      	bne.n	800cc10 <xQueueGenericCreateStatic+0x2c>
 800cbf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbfc:	b672      	cpsid	i
 800cbfe:	f383 8811 	msr	BASEPRI, r3
 800cc02:	f3bf 8f6f 	isb	sy
 800cc06:	f3bf 8f4f 	dsb	sy
 800cc0a:	b662      	cpsie	i
 800cc0c:	62bb      	str	r3, [r7, #40]	; 0x28
 800cc0e:	e7fe      	b.n	800cc0e <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800cc10:	683b      	ldr	r3, [r7, #0]
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d10b      	bne.n	800cc2e <xQueueGenericCreateStatic+0x4a>
 800cc16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc1a:	b672      	cpsid	i
 800cc1c:	f383 8811 	msr	BASEPRI, r3
 800cc20:	f3bf 8f6f 	isb	sy
 800cc24:	f3bf 8f4f 	dsb	sy
 800cc28:	b662      	cpsie	i
 800cc2a:	627b      	str	r3, [r7, #36]	; 0x24
 800cc2c:	e7fe      	b.n	800cc2c <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d002      	beq.n	800cc3a <xQueueGenericCreateStatic+0x56>
 800cc34:	68bb      	ldr	r3, [r7, #8]
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d001      	beq.n	800cc3e <xQueueGenericCreateStatic+0x5a>
 800cc3a:	2301      	movs	r3, #1
 800cc3c:	e000      	b.n	800cc40 <xQueueGenericCreateStatic+0x5c>
 800cc3e:	2300      	movs	r3, #0
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d10b      	bne.n	800cc5c <xQueueGenericCreateStatic+0x78>
 800cc44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc48:	b672      	cpsid	i
 800cc4a:	f383 8811 	msr	BASEPRI, r3
 800cc4e:	f3bf 8f6f 	isb	sy
 800cc52:	f3bf 8f4f 	dsb	sy
 800cc56:	b662      	cpsie	i
 800cc58:	623b      	str	r3, [r7, #32]
 800cc5a:	e7fe      	b.n	800cc5a <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d102      	bne.n	800cc68 <xQueueGenericCreateStatic+0x84>
 800cc62:	68bb      	ldr	r3, [r7, #8]
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d101      	bne.n	800cc6c <xQueueGenericCreateStatic+0x88>
 800cc68:	2301      	movs	r3, #1
 800cc6a:	e000      	b.n	800cc6e <xQueueGenericCreateStatic+0x8a>
 800cc6c:	2300      	movs	r3, #0
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d10b      	bne.n	800cc8a <xQueueGenericCreateStatic+0xa6>
 800cc72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc76:	b672      	cpsid	i
 800cc78:	f383 8811 	msr	BASEPRI, r3
 800cc7c:	f3bf 8f6f 	isb	sy
 800cc80:	f3bf 8f4f 	dsb	sy
 800cc84:	b662      	cpsie	i
 800cc86:	61fb      	str	r3, [r7, #28]
 800cc88:	e7fe      	b.n	800cc88 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800cc8a:	2348      	movs	r3, #72	; 0x48
 800cc8c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800cc8e:	697b      	ldr	r3, [r7, #20]
 800cc90:	2b48      	cmp	r3, #72	; 0x48
 800cc92:	d00b      	beq.n	800ccac <xQueueGenericCreateStatic+0xc8>
 800cc94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc98:	b672      	cpsid	i
 800cc9a:	f383 8811 	msr	BASEPRI, r3
 800cc9e:	f3bf 8f6f 	isb	sy
 800cca2:	f3bf 8f4f 	dsb	sy
 800cca6:	b662      	cpsie	i
 800cca8:	61bb      	str	r3, [r7, #24]
 800ccaa:	e7fe      	b.n	800ccaa <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ccac:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ccae:	683b      	ldr	r3, [r7, #0]
 800ccb0:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800ccb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d00d      	beq.n	800ccd4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ccb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccba:	2201      	movs	r2, #1
 800ccbc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ccc0:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ccc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccc6:	9300      	str	r3, [sp, #0]
 800ccc8:	4613      	mov	r3, r2
 800ccca:	687a      	ldr	r2, [r7, #4]
 800cccc:	68b9      	ldr	r1, [r7, #8]
 800ccce:	68f8      	ldr	r0, [r7, #12]
 800ccd0:	f000 f846 	bl	800cd60 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ccd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ccd6:	4618      	mov	r0, r3
 800ccd8:	3730      	adds	r7, #48	; 0x30
 800ccda:	46bd      	mov	sp, r7
 800ccdc:	bd80      	pop	{r7, pc}

0800ccde <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ccde:	b580      	push	{r7, lr}
 800cce0:	b08a      	sub	sp, #40	; 0x28
 800cce2:	af02      	add	r7, sp, #8
 800cce4:	60f8      	str	r0, [r7, #12]
 800cce6:	60b9      	str	r1, [r7, #8]
 800cce8:	4613      	mov	r3, r2
 800ccea:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d10b      	bne.n	800cd0a <xQueueGenericCreate+0x2c>
 800ccf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccf6:	b672      	cpsid	i
 800ccf8:	f383 8811 	msr	BASEPRI, r3
 800ccfc:	f3bf 8f6f 	isb	sy
 800cd00:	f3bf 8f4f 	dsb	sy
 800cd04:	b662      	cpsie	i
 800cd06:	613b      	str	r3, [r7, #16]
 800cd08:	e7fe      	b.n	800cd08 <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800cd0a:	68bb      	ldr	r3, [r7, #8]
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d102      	bne.n	800cd16 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800cd10:	2300      	movs	r3, #0
 800cd12:	61fb      	str	r3, [r7, #28]
 800cd14:	e004      	b.n	800cd20 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	68ba      	ldr	r2, [r7, #8]
 800cd1a:	fb02 f303 	mul.w	r3, r2, r3
 800cd1e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800cd20:	69fb      	ldr	r3, [r7, #28]
 800cd22:	3348      	adds	r3, #72	; 0x48
 800cd24:	4618      	mov	r0, r3
 800cd26:	f002 f881 	bl	800ee2c <pvPortMalloc>
 800cd2a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800cd2c:	69bb      	ldr	r3, [r7, #24]
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d011      	beq.n	800cd56 <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800cd32:	69bb      	ldr	r3, [r7, #24]
 800cd34:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cd36:	697b      	ldr	r3, [r7, #20]
 800cd38:	3348      	adds	r3, #72	; 0x48
 800cd3a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800cd3c:	69bb      	ldr	r3, [r7, #24]
 800cd3e:	2200      	movs	r2, #0
 800cd40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cd44:	79fa      	ldrb	r2, [r7, #7]
 800cd46:	69bb      	ldr	r3, [r7, #24]
 800cd48:	9300      	str	r3, [sp, #0]
 800cd4a:	4613      	mov	r3, r2
 800cd4c:	697a      	ldr	r2, [r7, #20]
 800cd4e:	68b9      	ldr	r1, [r7, #8]
 800cd50:	68f8      	ldr	r0, [r7, #12]
 800cd52:	f000 f805 	bl	800cd60 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cd56:	69bb      	ldr	r3, [r7, #24]
	}
 800cd58:	4618      	mov	r0, r3
 800cd5a:	3720      	adds	r7, #32
 800cd5c:	46bd      	mov	sp, r7
 800cd5e:	bd80      	pop	{r7, pc}

0800cd60 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800cd60:	b580      	push	{r7, lr}
 800cd62:	b084      	sub	sp, #16
 800cd64:	af00      	add	r7, sp, #0
 800cd66:	60f8      	str	r0, [r7, #12]
 800cd68:	60b9      	str	r1, [r7, #8]
 800cd6a:	607a      	str	r2, [r7, #4]
 800cd6c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800cd6e:	68bb      	ldr	r3, [r7, #8]
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d103      	bne.n	800cd7c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800cd74:	69bb      	ldr	r3, [r7, #24]
 800cd76:	69ba      	ldr	r2, [r7, #24]
 800cd78:	601a      	str	r2, [r3, #0]
 800cd7a:	e002      	b.n	800cd82 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800cd7c:	69bb      	ldr	r3, [r7, #24]
 800cd7e:	687a      	ldr	r2, [r7, #4]
 800cd80:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800cd82:	69bb      	ldr	r3, [r7, #24]
 800cd84:	68fa      	ldr	r2, [r7, #12]
 800cd86:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800cd88:	69bb      	ldr	r3, [r7, #24]
 800cd8a:	68ba      	ldr	r2, [r7, #8]
 800cd8c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800cd8e:	2101      	movs	r1, #1
 800cd90:	69b8      	ldr	r0, [r7, #24]
 800cd92:	f7ff febd 	bl	800cb10 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800cd96:	bf00      	nop
 800cd98:	3710      	adds	r7, #16
 800cd9a:	46bd      	mov	sp, r7
 800cd9c:	bd80      	pop	{r7, pc}
	...

0800cda0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800cda0:	b580      	push	{r7, lr}
 800cda2:	b08e      	sub	sp, #56	; 0x38
 800cda4:	af00      	add	r7, sp, #0
 800cda6:	60f8      	str	r0, [r7, #12]
 800cda8:	60b9      	str	r1, [r7, #8]
 800cdaa:	607a      	str	r2, [r7, #4]
 800cdac:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800cdae:	2300      	movs	r3, #0
 800cdb0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800cdb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d10b      	bne.n	800cdd4 <xQueueGenericSend+0x34>
 800cdbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdc0:	b672      	cpsid	i
 800cdc2:	f383 8811 	msr	BASEPRI, r3
 800cdc6:	f3bf 8f6f 	isb	sy
 800cdca:	f3bf 8f4f 	dsb	sy
 800cdce:	b662      	cpsie	i
 800cdd0:	62bb      	str	r3, [r7, #40]	; 0x28
 800cdd2:	e7fe      	b.n	800cdd2 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cdd4:	68bb      	ldr	r3, [r7, #8]
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d103      	bne.n	800cde2 <xQueueGenericSend+0x42>
 800cdda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d101      	bne.n	800cde6 <xQueueGenericSend+0x46>
 800cde2:	2301      	movs	r3, #1
 800cde4:	e000      	b.n	800cde8 <xQueueGenericSend+0x48>
 800cde6:	2300      	movs	r3, #0
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d10b      	bne.n	800ce04 <xQueueGenericSend+0x64>
 800cdec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdf0:	b672      	cpsid	i
 800cdf2:	f383 8811 	msr	BASEPRI, r3
 800cdf6:	f3bf 8f6f 	isb	sy
 800cdfa:	f3bf 8f4f 	dsb	sy
 800cdfe:	b662      	cpsie	i
 800ce00:	627b      	str	r3, [r7, #36]	; 0x24
 800ce02:	e7fe      	b.n	800ce02 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ce04:	683b      	ldr	r3, [r7, #0]
 800ce06:	2b02      	cmp	r3, #2
 800ce08:	d103      	bne.n	800ce12 <xQueueGenericSend+0x72>
 800ce0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce0e:	2b01      	cmp	r3, #1
 800ce10:	d101      	bne.n	800ce16 <xQueueGenericSend+0x76>
 800ce12:	2301      	movs	r3, #1
 800ce14:	e000      	b.n	800ce18 <xQueueGenericSend+0x78>
 800ce16:	2300      	movs	r3, #0
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d10b      	bne.n	800ce34 <xQueueGenericSend+0x94>
 800ce1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce20:	b672      	cpsid	i
 800ce22:	f383 8811 	msr	BASEPRI, r3
 800ce26:	f3bf 8f6f 	isb	sy
 800ce2a:	f3bf 8f4f 	dsb	sy
 800ce2e:	b662      	cpsie	i
 800ce30:	623b      	str	r3, [r7, #32]
 800ce32:	e7fe      	b.n	800ce32 <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ce34:	f001 fb92 	bl	800e55c <xTaskGetSchedulerState>
 800ce38:	4603      	mov	r3, r0
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d102      	bne.n	800ce44 <xQueueGenericSend+0xa4>
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d101      	bne.n	800ce48 <xQueueGenericSend+0xa8>
 800ce44:	2301      	movs	r3, #1
 800ce46:	e000      	b.n	800ce4a <xQueueGenericSend+0xaa>
 800ce48:	2300      	movs	r3, #0
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d10b      	bne.n	800ce66 <xQueueGenericSend+0xc6>
 800ce4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce52:	b672      	cpsid	i
 800ce54:	f383 8811 	msr	BASEPRI, r3
 800ce58:	f3bf 8f6f 	isb	sy
 800ce5c:	f3bf 8f4f 	dsb	sy
 800ce60:	b662      	cpsie	i
 800ce62:	61fb      	str	r3, [r7, #28]
 800ce64:	e7fe      	b.n	800ce64 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ce66:	f001 febf 	bl	800ebe8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ce6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ce6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce72:	429a      	cmp	r2, r3
 800ce74:	d302      	bcc.n	800ce7c <xQueueGenericSend+0xdc>
 800ce76:	683b      	ldr	r3, [r7, #0]
 800ce78:	2b02      	cmp	r3, #2
 800ce7a:	d129      	bne.n	800ced0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ce7c:	683a      	ldr	r2, [r7, #0]
 800ce7e:	68b9      	ldr	r1, [r7, #8]
 800ce80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ce82:	f000 fc6e 	bl	800d762 <prvCopyDataToQueue>
 800ce86:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ce88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d010      	beq.n	800ceb2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ce90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce92:	3324      	adds	r3, #36	; 0x24
 800ce94:	4618      	mov	r0, r3
 800ce96:	f001 f9a3 	bl	800e1e0 <xTaskRemoveFromEventList>
 800ce9a:	4603      	mov	r3, r0
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d013      	beq.n	800cec8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800cea0:	4b3f      	ldr	r3, [pc, #252]	; (800cfa0 <xQueueGenericSend+0x200>)
 800cea2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cea6:	601a      	str	r2, [r3, #0]
 800cea8:	f3bf 8f4f 	dsb	sy
 800ceac:	f3bf 8f6f 	isb	sy
 800ceb0:	e00a      	b.n	800cec8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ceb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d007      	beq.n	800cec8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ceb8:	4b39      	ldr	r3, [pc, #228]	; (800cfa0 <xQueueGenericSend+0x200>)
 800ceba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cebe:	601a      	str	r2, [r3, #0]
 800cec0:	f3bf 8f4f 	dsb	sy
 800cec4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800cec8:	f001 fec0 	bl	800ec4c <vPortExitCritical>
				return pdPASS;
 800cecc:	2301      	movs	r3, #1
 800cece:	e063      	b.n	800cf98 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d103      	bne.n	800cede <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ced6:	f001 feb9 	bl	800ec4c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ceda:	2300      	movs	r3, #0
 800cedc:	e05c      	b.n	800cf98 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cede:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d106      	bne.n	800cef2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cee4:	f107 0314 	add.w	r3, r7, #20
 800cee8:	4618      	mov	r0, r3
 800ceea:	f001 f9dd 	bl	800e2a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ceee:	2301      	movs	r3, #1
 800cef0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cef2:	f001 feab 	bl	800ec4c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cef6:	f000 ff69 	bl	800ddcc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cefa:	f001 fe75 	bl	800ebe8 <vPortEnterCritical>
 800cefe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf00:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cf04:	b25b      	sxtb	r3, r3
 800cf06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf0a:	d103      	bne.n	800cf14 <xQueueGenericSend+0x174>
 800cf0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf0e:	2200      	movs	r2, #0
 800cf10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cf14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf16:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cf1a:	b25b      	sxtb	r3, r3
 800cf1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf20:	d103      	bne.n	800cf2a <xQueueGenericSend+0x18a>
 800cf22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf24:	2200      	movs	r2, #0
 800cf26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cf2a:	f001 fe8f 	bl	800ec4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cf2e:	1d3a      	adds	r2, r7, #4
 800cf30:	f107 0314 	add.w	r3, r7, #20
 800cf34:	4611      	mov	r1, r2
 800cf36:	4618      	mov	r0, r3
 800cf38:	f001 f9cc 	bl	800e2d4 <xTaskCheckForTimeOut>
 800cf3c:	4603      	mov	r3, r0
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d124      	bne.n	800cf8c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800cf42:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cf44:	f000 fd05 	bl	800d952 <prvIsQueueFull>
 800cf48:	4603      	mov	r3, r0
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d018      	beq.n	800cf80 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800cf4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf50:	3310      	adds	r3, #16
 800cf52:	687a      	ldr	r2, [r7, #4]
 800cf54:	4611      	mov	r1, r2
 800cf56:	4618      	mov	r0, r3
 800cf58:	f001 f91c 	bl	800e194 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800cf5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cf5e:	f000 fc90 	bl	800d882 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800cf62:	f000 ff41 	bl	800dde8 <xTaskResumeAll>
 800cf66:	4603      	mov	r3, r0
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	f47f af7c 	bne.w	800ce66 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800cf6e:	4b0c      	ldr	r3, [pc, #48]	; (800cfa0 <xQueueGenericSend+0x200>)
 800cf70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf74:	601a      	str	r2, [r3, #0]
 800cf76:	f3bf 8f4f 	dsb	sy
 800cf7a:	f3bf 8f6f 	isb	sy
 800cf7e:	e772      	b.n	800ce66 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800cf80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cf82:	f000 fc7e 	bl	800d882 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cf86:	f000 ff2f 	bl	800dde8 <xTaskResumeAll>
 800cf8a:	e76c      	b.n	800ce66 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800cf8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cf8e:	f000 fc78 	bl	800d882 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cf92:	f000 ff29 	bl	800dde8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800cf96:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800cf98:	4618      	mov	r0, r3
 800cf9a:	3738      	adds	r7, #56	; 0x38
 800cf9c:	46bd      	mov	sp, r7
 800cf9e:	bd80      	pop	{r7, pc}
 800cfa0:	e000ed04 	.word	0xe000ed04

0800cfa4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800cfa4:	b580      	push	{r7, lr}
 800cfa6:	b08e      	sub	sp, #56	; 0x38
 800cfa8:	af00      	add	r7, sp, #0
 800cfaa:	60f8      	str	r0, [r7, #12]
 800cfac:	60b9      	str	r1, [r7, #8]
 800cfae:	607a      	str	r2, [r7, #4]
 800cfb0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800cfb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d10b      	bne.n	800cfd4 <xQueueGenericSendFromISR+0x30>
 800cfbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfc0:	b672      	cpsid	i
 800cfc2:	f383 8811 	msr	BASEPRI, r3
 800cfc6:	f3bf 8f6f 	isb	sy
 800cfca:	f3bf 8f4f 	dsb	sy
 800cfce:	b662      	cpsie	i
 800cfd0:	627b      	str	r3, [r7, #36]	; 0x24
 800cfd2:	e7fe      	b.n	800cfd2 <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cfd4:	68bb      	ldr	r3, [r7, #8]
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d103      	bne.n	800cfe2 <xQueueGenericSendFromISR+0x3e>
 800cfda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d101      	bne.n	800cfe6 <xQueueGenericSendFromISR+0x42>
 800cfe2:	2301      	movs	r3, #1
 800cfe4:	e000      	b.n	800cfe8 <xQueueGenericSendFromISR+0x44>
 800cfe6:	2300      	movs	r3, #0
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d10b      	bne.n	800d004 <xQueueGenericSendFromISR+0x60>
 800cfec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cff0:	b672      	cpsid	i
 800cff2:	f383 8811 	msr	BASEPRI, r3
 800cff6:	f3bf 8f6f 	isb	sy
 800cffa:	f3bf 8f4f 	dsb	sy
 800cffe:	b662      	cpsie	i
 800d000:	623b      	str	r3, [r7, #32]
 800d002:	e7fe      	b.n	800d002 <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d004:	683b      	ldr	r3, [r7, #0]
 800d006:	2b02      	cmp	r3, #2
 800d008:	d103      	bne.n	800d012 <xQueueGenericSendFromISR+0x6e>
 800d00a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d00c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d00e:	2b01      	cmp	r3, #1
 800d010:	d101      	bne.n	800d016 <xQueueGenericSendFromISR+0x72>
 800d012:	2301      	movs	r3, #1
 800d014:	e000      	b.n	800d018 <xQueueGenericSendFromISR+0x74>
 800d016:	2300      	movs	r3, #0
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d10b      	bne.n	800d034 <xQueueGenericSendFromISR+0x90>
 800d01c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d020:	b672      	cpsid	i
 800d022:	f383 8811 	msr	BASEPRI, r3
 800d026:	f3bf 8f6f 	isb	sy
 800d02a:	f3bf 8f4f 	dsb	sy
 800d02e:	b662      	cpsie	i
 800d030:	61fb      	str	r3, [r7, #28]
 800d032:	e7fe      	b.n	800d032 <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d034:	f001 feb8 	bl	800eda8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d038:	f3ef 8211 	mrs	r2, BASEPRI
 800d03c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d040:	b672      	cpsid	i
 800d042:	f383 8811 	msr	BASEPRI, r3
 800d046:	f3bf 8f6f 	isb	sy
 800d04a:	f3bf 8f4f 	dsb	sy
 800d04e:	b662      	cpsie	i
 800d050:	61ba      	str	r2, [r7, #24]
 800d052:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d054:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d056:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d05a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d05c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d05e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d060:	429a      	cmp	r2, r3
 800d062:	d302      	bcc.n	800d06a <xQueueGenericSendFromISR+0xc6>
 800d064:	683b      	ldr	r3, [r7, #0]
 800d066:	2b02      	cmp	r3, #2
 800d068:	d12c      	bne.n	800d0c4 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d06a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d06c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d070:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d074:	683a      	ldr	r2, [r7, #0]
 800d076:	68b9      	ldr	r1, [r7, #8]
 800d078:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d07a:	f000 fb72 	bl	800d762 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d07e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800d082:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d086:	d112      	bne.n	800d0ae <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d08a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d016      	beq.n	800d0be <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d092:	3324      	adds	r3, #36	; 0x24
 800d094:	4618      	mov	r0, r3
 800d096:	f001 f8a3 	bl	800e1e0 <xTaskRemoveFromEventList>
 800d09a:	4603      	mov	r3, r0
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d00e      	beq.n	800d0be <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d00b      	beq.n	800d0be <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	2201      	movs	r2, #1
 800d0aa:	601a      	str	r2, [r3, #0]
 800d0ac:	e007      	b.n	800d0be <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d0ae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d0b2:	3301      	adds	r3, #1
 800d0b4:	b2db      	uxtb	r3, r3
 800d0b6:	b25a      	sxtb	r2, r3
 800d0b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d0be:	2301      	movs	r3, #1
 800d0c0:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800d0c2:	e001      	b.n	800d0c8 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d0c4:	2300      	movs	r3, #0
 800d0c6:	637b      	str	r3, [r7, #52]	; 0x34
 800d0c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0ca:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d0cc:	693b      	ldr	r3, [r7, #16]
 800d0ce:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d0d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d0d4:	4618      	mov	r0, r3
 800d0d6:	3738      	adds	r7, #56	; 0x38
 800d0d8:	46bd      	mov	sp, r7
 800d0da:	bd80      	pop	{r7, pc}

0800d0dc <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d0dc:	b580      	push	{r7, lr}
 800d0de:	b08e      	sub	sp, #56	; 0x38
 800d0e0:	af00      	add	r7, sp, #0
 800d0e2:	6078      	str	r0, [r7, #4]
 800d0e4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800d0ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d10b      	bne.n	800d108 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800d0f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0f4:	b672      	cpsid	i
 800d0f6:	f383 8811 	msr	BASEPRI, r3
 800d0fa:	f3bf 8f6f 	isb	sy
 800d0fe:	f3bf 8f4f 	dsb	sy
 800d102:	b662      	cpsie	i
 800d104:	623b      	str	r3, [r7, #32]
 800d106:	e7fe      	b.n	800d106 <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d10a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d00b      	beq.n	800d128 <xQueueGiveFromISR+0x4c>
 800d110:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d114:	b672      	cpsid	i
 800d116:	f383 8811 	msr	BASEPRI, r3
 800d11a:	f3bf 8f6f 	isb	sy
 800d11e:	f3bf 8f4f 	dsb	sy
 800d122:	b662      	cpsie	i
 800d124:	61fb      	str	r3, [r7, #28]
 800d126:	e7fe      	b.n	800d126 <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800d128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d103      	bne.n	800d138 <xQueueGiveFromISR+0x5c>
 800d130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d132:	689b      	ldr	r3, [r3, #8]
 800d134:	2b00      	cmp	r3, #0
 800d136:	d101      	bne.n	800d13c <xQueueGiveFromISR+0x60>
 800d138:	2301      	movs	r3, #1
 800d13a:	e000      	b.n	800d13e <xQueueGiveFromISR+0x62>
 800d13c:	2300      	movs	r3, #0
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d10b      	bne.n	800d15a <xQueueGiveFromISR+0x7e>
 800d142:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d146:	b672      	cpsid	i
 800d148:	f383 8811 	msr	BASEPRI, r3
 800d14c:	f3bf 8f6f 	isb	sy
 800d150:	f3bf 8f4f 	dsb	sy
 800d154:	b662      	cpsie	i
 800d156:	61bb      	str	r3, [r7, #24]
 800d158:	e7fe      	b.n	800d158 <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d15a:	f001 fe25 	bl	800eda8 <vPortValidateInterruptPriority>
	__asm volatile
 800d15e:	f3ef 8211 	mrs	r2, BASEPRI
 800d162:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d166:	b672      	cpsid	i
 800d168:	f383 8811 	msr	BASEPRI, r3
 800d16c:	f3bf 8f6f 	isb	sy
 800d170:	f3bf 8f4f 	dsb	sy
 800d174:	b662      	cpsie	i
 800d176:	617a      	str	r2, [r7, #20]
 800d178:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800d17a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d17c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d17e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d182:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800d184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d186:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d188:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d18a:	429a      	cmp	r2, r3
 800d18c:	d22b      	bcs.n	800d1e6 <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d18e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d190:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d194:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d19a:	1c5a      	adds	r2, r3, #1
 800d19c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d19e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d1a0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d1a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1a8:	d112      	bne.n	800d1d0 <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d1aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d016      	beq.n	800d1e0 <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d1b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1b4:	3324      	adds	r3, #36	; 0x24
 800d1b6:	4618      	mov	r0, r3
 800d1b8:	f001 f812 	bl	800e1e0 <xTaskRemoveFromEventList>
 800d1bc:	4603      	mov	r3, r0
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d00e      	beq.n	800d1e0 <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d1c2:	683b      	ldr	r3, [r7, #0]
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d00b      	beq.n	800d1e0 <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d1c8:	683b      	ldr	r3, [r7, #0]
 800d1ca:	2201      	movs	r2, #1
 800d1cc:	601a      	str	r2, [r3, #0]
 800d1ce:	e007      	b.n	800d1e0 <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d1d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d1d4:	3301      	adds	r3, #1
 800d1d6:	b2db      	uxtb	r3, r3
 800d1d8:	b25a      	sxtb	r2, r3
 800d1da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d1e0:	2301      	movs	r3, #1
 800d1e2:	637b      	str	r3, [r7, #52]	; 0x34
 800d1e4:	e001      	b.n	800d1ea <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d1e6:	2300      	movs	r3, #0
 800d1e8:	637b      	str	r3, [r7, #52]	; 0x34
 800d1ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1ec:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d1f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d1f6:	4618      	mov	r0, r3
 800d1f8:	3738      	adds	r7, #56	; 0x38
 800d1fa:	46bd      	mov	sp, r7
 800d1fc:	bd80      	pop	{r7, pc}
	...

0800d200 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d200:	b580      	push	{r7, lr}
 800d202:	b08c      	sub	sp, #48	; 0x30
 800d204:	af00      	add	r7, sp, #0
 800d206:	60f8      	str	r0, [r7, #12]
 800d208:	60b9      	str	r1, [r7, #8]
 800d20a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d20c:	2300      	movs	r3, #0
 800d20e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d216:	2b00      	cmp	r3, #0
 800d218:	d10b      	bne.n	800d232 <xQueueReceive+0x32>
	__asm volatile
 800d21a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d21e:	b672      	cpsid	i
 800d220:	f383 8811 	msr	BASEPRI, r3
 800d224:	f3bf 8f6f 	isb	sy
 800d228:	f3bf 8f4f 	dsb	sy
 800d22c:	b662      	cpsie	i
 800d22e:	623b      	str	r3, [r7, #32]
 800d230:	e7fe      	b.n	800d230 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d232:	68bb      	ldr	r3, [r7, #8]
 800d234:	2b00      	cmp	r3, #0
 800d236:	d103      	bne.n	800d240 <xQueueReceive+0x40>
 800d238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d23a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d101      	bne.n	800d244 <xQueueReceive+0x44>
 800d240:	2301      	movs	r3, #1
 800d242:	e000      	b.n	800d246 <xQueueReceive+0x46>
 800d244:	2300      	movs	r3, #0
 800d246:	2b00      	cmp	r3, #0
 800d248:	d10b      	bne.n	800d262 <xQueueReceive+0x62>
 800d24a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d24e:	b672      	cpsid	i
 800d250:	f383 8811 	msr	BASEPRI, r3
 800d254:	f3bf 8f6f 	isb	sy
 800d258:	f3bf 8f4f 	dsb	sy
 800d25c:	b662      	cpsie	i
 800d25e:	61fb      	str	r3, [r7, #28]
 800d260:	e7fe      	b.n	800d260 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d262:	f001 f97b 	bl	800e55c <xTaskGetSchedulerState>
 800d266:	4603      	mov	r3, r0
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d102      	bne.n	800d272 <xQueueReceive+0x72>
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d101      	bne.n	800d276 <xQueueReceive+0x76>
 800d272:	2301      	movs	r3, #1
 800d274:	e000      	b.n	800d278 <xQueueReceive+0x78>
 800d276:	2300      	movs	r3, #0
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d10b      	bne.n	800d294 <xQueueReceive+0x94>
 800d27c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d280:	b672      	cpsid	i
 800d282:	f383 8811 	msr	BASEPRI, r3
 800d286:	f3bf 8f6f 	isb	sy
 800d28a:	f3bf 8f4f 	dsb	sy
 800d28e:	b662      	cpsie	i
 800d290:	61bb      	str	r3, [r7, #24]
 800d292:	e7fe      	b.n	800d292 <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d294:	f001 fca8 	bl	800ebe8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d29a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d29c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d29e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d01f      	beq.n	800d2e4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d2a4:	68b9      	ldr	r1, [r7, #8]
 800d2a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d2a8:	f000 fac5 	bl	800d836 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d2ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2ae:	1e5a      	subs	r2, r3, #1
 800d2b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2b2:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d2b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2b6:	691b      	ldr	r3, [r3, #16]
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d00f      	beq.n	800d2dc <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d2bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2be:	3310      	adds	r3, #16
 800d2c0:	4618      	mov	r0, r3
 800d2c2:	f000 ff8d 	bl	800e1e0 <xTaskRemoveFromEventList>
 800d2c6:	4603      	mov	r3, r0
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d007      	beq.n	800d2dc <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d2cc:	4b3c      	ldr	r3, [pc, #240]	; (800d3c0 <xQueueReceive+0x1c0>)
 800d2ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d2d2:	601a      	str	r2, [r3, #0]
 800d2d4:	f3bf 8f4f 	dsb	sy
 800d2d8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d2dc:	f001 fcb6 	bl	800ec4c <vPortExitCritical>
				return pdPASS;
 800d2e0:	2301      	movs	r3, #1
 800d2e2:	e069      	b.n	800d3b8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d103      	bne.n	800d2f2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d2ea:	f001 fcaf 	bl	800ec4c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d2ee:	2300      	movs	r3, #0
 800d2f0:	e062      	b.n	800d3b8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d2f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d106      	bne.n	800d306 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d2f8:	f107 0310 	add.w	r3, r7, #16
 800d2fc:	4618      	mov	r0, r3
 800d2fe:	f000 ffd3 	bl	800e2a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d302:	2301      	movs	r3, #1
 800d304:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d306:	f001 fca1 	bl	800ec4c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d30a:	f000 fd5f 	bl	800ddcc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d30e:	f001 fc6b 	bl	800ebe8 <vPortEnterCritical>
 800d312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d314:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d318:	b25b      	sxtb	r3, r3
 800d31a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d31e:	d103      	bne.n	800d328 <xQueueReceive+0x128>
 800d320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d322:	2200      	movs	r2, #0
 800d324:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d32a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d32e:	b25b      	sxtb	r3, r3
 800d330:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d334:	d103      	bne.n	800d33e <xQueueReceive+0x13e>
 800d336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d338:	2200      	movs	r2, #0
 800d33a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d33e:	f001 fc85 	bl	800ec4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d342:	1d3a      	adds	r2, r7, #4
 800d344:	f107 0310 	add.w	r3, r7, #16
 800d348:	4611      	mov	r1, r2
 800d34a:	4618      	mov	r0, r3
 800d34c:	f000 ffc2 	bl	800e2d4 <xTaskCheckForTimeOut>
 800d350:	4603      	mov	r3, r0
 800d352:	2b00      	cmp	r3, #0
 800d354:	d123      	bne.n	800d39e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d356:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d358:	f000 fae5 	bl	800d926 <prvIsQueueEmpty>
 800d35c:	4603      	mov	r3, r0
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d017      	beq.n	800d392 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d364:	3324      	adds	r3, #36	; 0x24
 800d366:	687a      	ldr	r2, [r7, #4]
 800d368:	4611      	mov	r1, r2
 800d36a:	4618      	mov	r0, r3
 800d36c:	f000 ff12 	bl	800e194 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d370:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d372:	f000 fa86 	bl	800d882 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d376:	f000 fd37 	bl	800dde8 <xTaskResumeAll>
 800d37a:	4603      	mov	r3, r0
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d189      	bne.n	800d294 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800d380:	4b0f      	ldr	r3, [pc, #60]	; (800d3c0 <xQueueReceive+0x1c0>)
 800d382:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d386:	601a      	str	r2, [r3, #0]
 800d388:	f3bf 8f4f 	dsb	sy
 800d38c:	f3bf 8f6f 	isb	sy
 800d390:	e780      	b.n	800d294 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d392:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d394:	f000 fa75 	bl	800d882 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d398:	f000 fd26 	bl	800dde8 <xTaskResumeAll>
 800d39c:	e77a      	b.n	800d294 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d39e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d3a0:	f000 fa6f 	bl	800d882 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d3a4:	f000 fd20 	bl	800dde8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d3a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d3aa:	f000 fabc 	bl	800d926 <prvIsQueueEmpty>
 800d3ae:	4603      	mov	r3, r0
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	f43f af6f 	beq.w	800d294 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d3b6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d3b8:	4618      	mov	r0, r3
 800d3ba:	3730      	adds	r7, #48	; 0x30
 800d3bc:	46bd      	mov	sp, r7
 800d3be:	bd80      	pop	{r7, pc}
 800d3c0:	e000ed04 	.word	0xe000ed04

0800d3c4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800d3c4:	b580      	push	{r7, lr}
 800d3c6:	b08e      	sub	sp, #56	; 0x38
 800d3c8:	af00      	add	r7, sp, #0
 800d3ca:	6078      	str	r0, [r7, #4]
 800d3cc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800d3ce:	2300      	movs	r3, #0
 800d3d0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800d3d6:	2300      	movs	r3, #0
 800d3d8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d3da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d10b      	bne.n	800d3f8 <xQueueSemaphoreTake+0x34>
 800d3e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3e4:	b672      	cpsid	i
 800d3e6:	f383 8811 	msr	BASEPRI, r3
 800d3ea:	f3bf 8f6f 	isb	sy
 800d3ee:	f3bf 8f4f 	dsb	sy
 800d3f2:	b662      	cpsie	i
 800d3f4:	623b      	str	r3, [r7, #32]
 800d3f6:	e7fe      	b.n	800d3f6 <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d3f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d00b      	beq.n	800d418 <xQueueSemaphoreTake+0x54>
 800d400:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d404:	b672      	cpsid	i
 800d406:	f383 8811 	msr	BASEPRI, r3
 800d40a:	f3bf 8f6f 	isb	sy
 800d40e:	f3bf 8f4f 	dsb	sy
 800d412:	b662      	cpsie	i
 800d414:	61fb      	str	r3, [r7, #28]
 800d416:	e7fe      	b.n	800d416 <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d418:	f001 f8a0 	bl	800e55c <xTaskGetSchedulerState>
 800d41c:	4603      	mov	r3, r0
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d102      	bne.n	800d428 <xQueueSemaphoreTake+0x64>
 800d422:	683b      	ldr	r3, [r7, #0]
 800d424:	2b00      	cmp	r3, #0
 800d426:	d101      	bne.n	800d42c <xQueueSemaphoreTake+0x68>
 800d428:	2301      	movs	r3, #1
 800d42a:	e000      	b.n	800d42e <xQueueSemaphoreTake+0x6a>
 800d42c:	2300      	movs	r3, #0
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d10b      	bne.n	800d44a <xQueueSemaphoreTake+0x86>
 800d432:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d436:	b672      	cpsid	i
 800d438:	f383 8811 	msr	BASEPRI, r3
 800d43c:	f3bf 8f6f 	isb	sy
 800d440:	f3bf 8f4f 	dsb	sy
 800d444:	b662      	cpsie	i
 800d446:	61bb      	str	r3, [r7, #24]
 800d448:	e7fe      	b.n	800d448 <xQueueSemaphoreTake+0x84>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d44a:	f001 fbcd 	bl	800ebe8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d44e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d452:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d456:	2b00      	cmp	r3, #0
 800d458:	d024      	beq.n	800d4a4 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d45a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d45c:	1e5a      	subs	r2, r3, #1
 800d45e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d460:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	2b00      	cmp	r3, #0
 800d468:	d104      	bne.n	800d474 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800d46a:	f001 fa39 	bl	800e8e0 <pvTaskIncrementMutexHeldCount>
 800d46e:	4602      	mov	r2, r0
 800d470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d472:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d476:	691b      	ldr	r3, [r3, #16]
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d00f      	beq.n	800d49c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d47c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d47e:	3310      	adds	r3, #16
 800d480:	4618      	mov	r0, r3
 800d482:	f000 fead 	bl	800e1e0 <xTaskRemoveFromEventList>
 800d486:	4603      	mov	r3, r0
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d007      	beq.n	800d49c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d48c:	4b54      	ldr	r3, [pc, #336]	; (800d5e0 <xQueueSemaphoreTake+0x21c>)
 800d48e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d492:	601a      	str	r2, [r3, #0]
 800d494:	f3bf 8f4f 	dsb	sy
 800d498:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d49c:	f001 fbd6 	bl	800ec4c <vPortExitCritical>
				return pdPASS;
 800d4a0:	2301      	movs	r3, #1
 800d4a2:	e098      	b.n	800d5d6 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d4a4:	683b      	ldr	r3, [r7, #0]
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d112      	bne.n	800d4d0 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800d4aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d00b      	beq.n	800d4c8 <xQueueSemaphoreTake+0x104>
 800d4b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4b4:	b672      	cpsid	i
 800d4b6:	f383 8811 	msr	BASEPRI, r3
 800d4ba:	f3bf 8f6f 	isb	sy
 800d4be:	f3bf 8f4f 	dsb	sy
 800d4c2:	b662      	cpsie	i
 800d4c4:	617b      	str	r3, [r7, #20]
 800d4c6:	e7fe      	b.n	800d4c6 <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800d4c8:	f001 fbc0 	bl	800ec4c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d4cc:	2300      	movs	r3, #0
 800d4ce:	e082      	b.n	800d5d6 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d4d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d106      	bne.n	800d4e4 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d4d6:	f107 030c 	add.w	r3, r7, #12
 800d4da:	4618      	mov	r0, r3
 800d4dc:	f000 fee4 	bl	800e2a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d4e0:	2301      	movs	r3, #1
 800d4e2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d4e4:	f001 fbb2 	bl	800ec4c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d4e8:	f000 fc70 	bl	800ddcc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d4ec:	f001 fb7c 	bl	800ebe8 <vPortEnterCritical>
 800d4f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d4f6:	b25b      	sxtb	r3, r3
 800d4f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4fc:	d103      	bne.n	800d506 <xQueueSemaphoreTake+0x142>
 800d4fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d500:	2200      	movs	r2, #0
 800d502:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d508:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d50c:	b25b      	sxtb	r3, r3
 800d50e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d512:	d103      	bne.n	800d51c <xQueueSemaphoreTake+0x158>
 800d514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d516:	2200      	movs	r2, #0
 800d518:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d51c:	f001 fb96 	bl	800ec4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d520:	463a      	mov	r2, r7
 800d522:	f107 030c 	add.w	r3, r7, #12
 800d526:	4611      	mov	r1, r2
 800d528:	4618      	mov	r0, r3
 800d52a:	f000 fed3 	bl	800e2d4 <xTaskCheckForTimeOut>
 800d52e:	4603      	mov	r3, r0
 800d530:	2b00      	cmp	r3, #0
 800d532:	d132      	bne.n	800d59a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d534:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d536:	f000 f9f6 	bl	800d926 <prvIsQueueEmpty>
 800d53a:	4603      	mov	r3, r0
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d026      	beq.n	800d58e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	2b00      	cmp	r3, #0
 800d546:	d109      	bne.n	800d55c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800d548:	f001 fb4e 	bl	800ebe8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d54c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d54e:	689b      	ldr	r3, [r3, #8]
 800d550:	4618      	mov	r0, r3
 800d552:	f001 f821 	bl	800e598 <xTaskPriorityInherit>
 800d556:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800d558:	f001 fb78 	bl	800ec4c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d55c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d55e:	3324      	adds	r3, #36	; 0x24
 800d560:	683a      	ldr	r2, [r7, #0]
 800d562:	4611      	mov	r1, r2
 800d564:	4618      	mov	r0, r3
 800d566:	f000 fe15 	bl	800e194 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d56a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d56c:	f000 f989 	bl	800d882 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d570:	f000 fc3a 	bl	800dde8 <xTaskResumeAll>
 800d574:	4603      	mov	r3, r0
 800d576:	2b00      	cmp	r3, #0
 800d578:	f47f af67 	bne.w	800d44a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800d57c:	4b18      	ldr	r3, [pc, #96]	; (800d5e0 <xQueueSemaphoreTake+0x21c>)
 800d57e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d582:	601a      	str	r2, [r3, #0]
 800d584:	f3bf 8f4f 	dsb	sy
 800d588:	f3bf 8f6f 	isb	sy
 800d58c:	e75d      	b.n	800d44a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800d58e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d590:	f000 f977 	bl	800d882 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d594:	f000 fc28 	bl	800dde8 <xTaskResumeAll>
 800d598:	e757      	b.n	800d44a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800d59a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d59c:	f000 f971 	bl	800d882 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d5a0:	f000 fc22 	bl	800dde8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d5a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d5a6:	f000 f9be 	bl	800d926 <prvIsQueueEmpty>
 800d5aa:	4603      	mov	r3, r0
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	f43f af4c 	beq.w	800d44a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800d5b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d00d      	beq.n	800d5d4 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800d5b8:	f001 fb16 	bl	800ebe8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800d5bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d5be:	f000 f8b8 	bl	800d732 <prvGetDisinheritPriorityAfterTimeout>
 800d5c2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800d5c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5c6:	689b      	ldr	r3, [r3, #8]
 800d5c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d5ca:	4618      	mov	r0, r3
 800d5cc:	f001 f8ec 	bl	800e7a8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800d5d0:	f001 fb3c 	bl	800ec4c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d5d4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d5d6:	4618      	mov	r0, r3
 800d5d8:	3738      	adds	r7, #56	; 0x38
 800d5da:	46bd      	mov	sp, r7
 800d5dc:	bd80      	pop	{r7, pc}
 800d5de:	bf00      	nop
 800d5e0:	e000ed04 	.word	0xe000ed04

0800d5e4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d5e4:	b580      	push	{r7, lr}
 800d5e6:	b08e      	sub	sp, #56	; 0x38
 800d5e8:	af00      	add	r7, sp, #0
 800d5ea:	60f8      	str	r0, [r7, #12]
 800d5ec:	60b9      	str	r1, [r7, #8]
 800d5ee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d5f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d10b      	bne.n	800d612 <xQueueReceiveFromISR+0x2e>
 800d5fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5fe:	b672      	cpsid	i
 800d600:	f383 8811 	msr	BASEPRI, r3
 800d604:	f3bf 8f6f 	isb	sy
 800d608:	f3bf 8f4f 	dsb	sy
 800d60c:	b662      	cpsie	i
 800d60e:	623b      	str	r3, [r7, #32]
 800d610:	e7fe      	b.n	800d610 <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d612:	68bb      	ldr	r3, [r7, #8]
 800d614:	2b00      	cmp	r3, #0
 800d616:	d103      	bne.n	800d620 <xQueueReceiveFromISR+0x3c>
 800d618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d61a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d101      	bne.n	800d624 <xQueueReceiveFromISR+0x40>
 800d620:	2301      	movs	r3, #1
 800d622:	e000      	b.n	800d626 <xQueueReceiveFromISR+0x42>
 800d624:	2300      	movs	r3, #0
 800d626:	2b00      	cmp	r3, #0
 800d628:	d10b      	bne.n	800d642 <xQueueReceiveFromISR+0x5e>
 800d62a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d62e:	b672      	cpsid	i
 800d630:	f383 8811 	msr	BASEPRI, r3
 800d634:	f3bf 8f6f 	isb	sy
 800d638:	f3bf 8f4f 	dsb	sy
 800d63c:	b662      	cpsie	i
 800d63e:	61fb      	str	r3, [r7, #28]
 800d640:	e7fe      	b.n	800d640 <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d642:	f001 fbb1 	bl	800eda8 <vPortValidateInterruptPriority>
	__asm volatile
 800d646:	f3ef 8211 	mrs	r2, BASEPRI
 800d64a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d64e:	b672      	cpsid	i
 800d650:	f383 8811 	msr	BASEPRI, r3
 800d654:	f3bf 8f6f 	isb	sy
 800d658:	f3bf 8f4f 	dsb	sy
 800d65c:	b662      	cpsie	i
 800d65e:	61ba      	str	r2, [r7, #24]
 800d660:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800d662:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d664:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d66a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d66c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d02f      	beq.n	800d6d2 <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800d672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d674:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d678:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d67c:	68b9      	ldr	r1, [r7, #8]
 800d67e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d680:	f000 f8d9 	bl	800d836 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d686:	1e5a      	subs	r2, r3, #1
 800d688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d68a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800d68c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d690:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d694:	d112      	bne.n	800d6bc <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d698:	691b      	ldr	r3, [r3, #16]
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d016      	beq.n	800d6cc <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d69e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6a0:	3310      	adds	r3, #16
 800d6a2:	4618      	mov	r0, r3
 800d6a4:	f000 fd9c 	bl	800e1e0 <xTaskRemoveFromEventList>
 800d6a8:	4603      	mov	r3, r0
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d00e      	beq.n	800d6cc <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d00b      	beq.n	800d6cc <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	2201      	movs	r2, #1
 800d6b8:	601a      	str	r2, [r3, #0]
 800d6ba:	e007      	b.n	800d6cc <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800d6bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d6c0:	3301      	adds	r3, #1
 800d6c2:	b2db      	uxtb	r3, r3
 800d6c4:	b25a      	sxtb	r2, r3
 800d6c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800d6cc:	2301      	movs	r3, #1
 800d6ce:	637b      	str	r3, [r7, #52]	; 0x34
 800d6d0:	e001      	b.n	800d6d6 <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 800d6d2:	2300      	movs	r3, #0
 800d6d4:	637b      	str	r3, [r7, #52]	; 0x34
 800d6d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6d8:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d6da:	693b      	ldr	r3, [r7, #16]
 800d6dc:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d6e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d6e2:	4618      	mov	r0, r3
 800d6e4:	3738      	adds	r7, #56	; 0x38
 800d6e6:	46bd      	mov	sp, r7
 800d6e8:	bd80      	pop	{r7, pc}

0800d6ea <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800d6ea:	b580      	push	{r7, lr}
 800d6ec:	b084      	sub	sp, #16
 800d6ee:	af00      	add	r7, sp, #0
 800d6f0:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d10b      	bne.n	800d714 <vQueueDelete+0x2a>
	__asm volatile
 800d6fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d700:	b672      	cpsid	i
 800d702:	f383 8811 	msr	BASEPRI, r3
 800d706:	f3bf 8f6f 	isb	sy
 800d70a:	f3bf 8f4f 	dsb	sy
 800d70e:	b662      	cpsie	i
 800d710:	60bb      	str	r3, [r7, #8]
 800d712:	e7fe      	b.n	800d712 <vQueueDelete+0x28>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800d714:	68f8      	ldr	r0, [r7, #12]
 800d716:	f000 f935 	bl	800d984 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800d720:	2b00      	cmp	r3, #0
 800d722:	d102      	bne.n	800d72a <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800d724:	68f8      	ldr	r0, [r7, #12]
 800d726:	f001 fc49 	bl	800efbc <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800d72a:	bf00      	nop
 800d72c:	3710      	adds	r7, #16
 800d72e:	46bd      	mov	sp, r7
 800d730:	bd80      	pop	{r7, pc}

0800d732 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800d732:	b480      	push	{r7}
 800d734:	b085      	sub	sp, #20
 800d736:	af00      	add	r7, sp, #0
 800d738:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d006      	beq.n	800d750 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	f1c3 0307 	rsb	r3, r3, #7
 800d74c:	60fb      	str	r3, [r7, #12]
 800d74e:	e001      	b.n	800d754 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800d750:	2300      	movs	r3, #0
 800d752:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800d754:	68fb      	ldr	r3, [r7, #12]
	}
 800d756:	4618      	mov	r0, r3
 800d758:	3714      	adds	r7, #20
 800d75a:	46bd      	mov	sp, r7
 800d75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d760:	4770      	bx	lr

0800d762 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d762:	b580      	push	{r7, lr}
 800d764:	b086      	sub	sp, #24
 800d766:	af00      	add	r7, sp, #0
 800d768:	60f8      	str	r0, [r7, #12]
 800d76a:	60b9      	str	r1, [r7, #8]
 800d76c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d76e:	2300      	movs	r3, #0
 800d770:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d776:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d10d      	bne.n	800d79c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	2b00      	cmp	r3, #0
 800d786:	d14d      	bne.n	800d824 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	689b      	ldr	r3, [r3, #8]
 800d78c:	4618      	mov	r0, r3
 800d78e:	f000 ff83 	bl	800e698 <xTaskPriorityDisinherit>
 800d792:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	2200      	movs	r2, #0
 800d798:	609a      	str	r2, [r3, #8]
 800d79a:	e043      	b.n	800d824 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d119      	bne.n	800d7d6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	6858      	ldr	r0, [r3, #4]
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7aa:	461a      	mov	r2, r3
 800d7ac:	68b9      	ldr	r1, [r7, #8]
 800d7ae:	f001 fd41 	bl	800f234 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	685a      	ldr	r2, [r3, #4]
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7ba:	441a      	add	r2, r3
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	685a      	ldr	r2, [r3, #4]
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	689b      	ldr	r3, [r3, #8]
 800d7c8:	429a      	cmp	r2, r3
 800d7ca:	d32b      	bcc.n	800d824 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	681a      	ldr	r2, [r3, #0]
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	605a      	str	r2, [r3, #4]
 800d7d4:	e026      	b.n	800d824 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	68d8      	ldr	r0, [r3, #12]
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7de:	461a      	mov	r2, r3
 800d7e0:	68b9      	ldr	r1, [r7, #8]
 800d7e2:	f001 fd27 	bl	800f234 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	68da      	ldr	r2, [r3, #12]
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7ee:	425b      	negs	r3, r3
 800d7f0:	441a      	add	r2, r3
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	68da      	ldr	r2, [r3, #12]
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	429a      	cmp	r2, r3
 800d800:	d207      	bcs.n	800d812 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	689a      	ldr	r2, [r3, #8]
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d80a:	425b      	negs	r3, r3
 800d80c:	441a      	add	r2, r3
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	2b02      	cmp	r3, #2
 800d816:	d105      	bne.n	800d824 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d818:	693b      	ldr	r3, [r7, #16]
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d002      	beq.n	800d824 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d81e:	693b      	ldr	r3, [r7, #16]
 800d820:	3b01      	subs	r3, #1
 800d822:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d824:	693b      	ldr	r3, [r7, #16]
 800d826:	1c5a      	adds	r2, r3, #1
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d82c:	697b      	ldr	r3, [r7, #20]
}
 800d82e:	4618      	mov	r0, r3
 800d830:	3718      	adds	r7, #24
 800d832:	46bd      	mov	sp, r7
 800d834:	bd80      	pop	{r7, pc}

0800d836 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d836:	b580      	push	{r7, lr}
 800d838:	b082      	sub	sp, #8
 800d83a:	af00      	add	r7, sp, #0
 800d83c:	6078      	str	r0, [r7, #4]
 800d83e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d844:	2b00      	cmp	r3, #0
 800d846:	d018      	beq.n	800d87a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	68da      	ldr	r2, [r3, #12]
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d850:	441a      	add	r2, r3
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	68da      	ldr	r2, [r3, #12]
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	689b      	ldr	r3, [r3, #8]
 800d85e:	429a      	cmp	r2, r3
 800d860:	d303      	bcc.n	800d86a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	681a      	ldr	r2, [r3, #0]
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	68d9      	ldr	r1, [r3, #12]
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d872:	461a      	mov	r2, r3
 800d874:	6838      	ldr	r0, [r7, #0]
 800d876:	f001 fcdd 	bl	800f234 <memcpy>
	}
}
 800d87a:	bf00      	nop
 800d87c:	3708      	adds	r7, #8
 800d87e:	46bd      	mov	sp, r7
 800d880:	bd80      	pop	{r7, pc}

0800d882 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d882:	b580      	push	{r7, lr}
 800d884:	b084      	sub	sp, #16
 800d886:	af00      	add	r7, sp, #0
 800d888:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d88a:	f001 f9ad 	bl	800ebe8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d894:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d896:	e011      	b.n	800d8bc <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d012      	beq.n	800d8c6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	3324      	adds	r3, #36	; 0x24
 800d8a4:	4618      	mov	r0, r3
 800d8a6:	f000 fc9b 	bl	800e1e0 <xTaskRemoveFromEventList>
 800d8aa:	4603      	mov	r3, r0
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d001      	beq.n	800d8b4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d8b0:	f000 fd74 	bl	800e39c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d8b4:	7bfb      	ldrb	r3, [r7, #15]
 800d8b6:	3b01      	subs	r3, #1
 800d8b8:	b2db      	uxtb	r3, r3
 800d8ba:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d8bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	dce9      	bgt.n	800d898 <prvUnlockQueue+0x16>
 800d8c4:	e000      	b.n	800d8c8 <prvUnlockQueue+0x46>
					break;
 800d8c6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	22ff      	movs	r2, #255	; 0xff
 800d8cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d8d0:	f001 f9bc 	bl	800ec4c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d8d4:	f001 f988 	bl	800ebe8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d8de:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d8e0:	e011      	b.n	800d906 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	691b      	ldr	r3, [r3, #16]
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d012      	beq.n	800d910 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	3310      	adds	r3, #16
 800d8ee:	4618      	mov	r0, r3
 800d8f0:	f000 fc76 	bl	800e1e0 <xTaskRemoveFromEventList>
 800d8f4:	4603      	mov	r3, r0
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d001      	beq.n	800d8fe <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d8fa:	f000 fd4f 	bl	800e39c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d8fe:	7bbb      	ldrb	r3, [r7, #14]
 800d900:	3b01      	subs	r3, #1
 800d902:	b2db      	uxtb	r3, r3
 800d904:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d906:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	dce9      	bgt.n	800d8e2 <prvUnlockQueue+0x60>
 800d90e:	e000      	b.n	800d912 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d910:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	22ff      	movs	r2, #255	; 0xff
 800d916:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d91a:	f001 f997 	bl	800ec4c <vPortExitCritical>
}
 800d91e:	bf00      	nop
 800d920:	3710      	adds	r7, #16
 800d922:	46bd      	mov	sp, r7
 800d924:	bd80      	pop	{r7, pc}

0800d926 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d926:	b580      	push	{r7, lr}
 800d928:	b084      	sub	sp, #16
 800d92a:	af00      	add	r7, sp, #0
 800d92c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d92e:	f001 f95b 	bl	800ebe8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d936:	2b00      	cmp	r3, #0
 800d938:	d102      	bne.n	800d940 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d93a:	2301      	movs	r3, #1
 800d93c:	60fb      	str	r3, [r7, #12]
 800d93e:	e001      	b.n	800d944 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d940:	2300      	movs	r3, #0
 800d942:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d944:	f001 f982 	bl	800ec4c <vPortExitCritical>

	return xReturn;
 800d948:	68fb      	ldr	r3, [r7, #12]
}
 800d94a:	4618      	mov	r0, r3
 800d94c:	3710      	adds	r7, #16
 800d94e:	46bd      	mov	sp, r7
 800d950:	bd80      	pop	{r7, pc}

0800d952 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d952:	b580      	push	{r7, lr}
 800d954:	b084      	sub	sp, #16
 800d956:	af00      	add	r7, sp, #0
 800d958:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d95a:	f001 f945 	bl	800ebe8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d966:	429a      	cmp	r2, r3
 800d968:	d102      	bne.n	800d970 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d96a:	2301      	movs	r3, #1
 800d96c:	60fb      	str	r3, [r7, #12]
 800d96e:	e001      	b.n	800d974 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d970:	2300      	movs	r3, #0
 800d972:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d974:	f001 f96a 	bl	800ec4c <vPortExitCritical>

	return xReturn;
 800d978:	68fb      	ldr	r3, [r7, #12]
}
 800d97a:	4618      	mov	r0, r3
 800d97c:	3710      	adds	r7, #16
 800d97e:	46bd      	mov	sp, r7
 800d980:	bd80      	pop	{r7, pc}
	...

0800d984 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800d984:	b480      	push	{r7}
 800d986:	b085      	sub	sp, #20
 800d988:	af00      	add	r7, sp, #0
 800d98a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d98c:	2300      	movs	r3, #0
 800d98e:	60fb      	str	r3, [r7, #12]
 800d990:	e016      	b.n	800d9c0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800d992:	4a10      	ldr	r2, [pc, #64]	; (800d9d4 <vQueueUnregisterQueue+0x50>)
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	00db      	lsls	r3, r3, #3
 800d998:	4413      	add	r3, r2
 800d99a:	685b      	ldr	r3, [r3, #4]
 800d99c:	687a      	ldr	r2, [r7, #4]
 800d99e:	429a      	cmp	r2, r3
 800d9a0:	d10b      	bne.n	800d9ba <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800d9a2:	4a0c      	ldr	r2, [pc, #48]	; (800d9d4 <vQueueUnregisterQueue+0x50>)
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	2100      	movs	r1, #0
 800d9a8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800d9ac:	4a09      	ldr	r2, [pc, #36]	; (800d9d4 <vQueueUnregisterQueue+0x50>)
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	00db      	lsls	r3, r3, #3
 800d9b2:	4413      	add	r3, r2
 800d9b4:	2200      	movs	r2, #0
 800d9b6:	605a      	str	r2, [r3, #4]
				break;
 800d9b8:	e005      	b.n	800d9c6 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	3301      	adds	r3, #1
 800d9be:	60fb      	str	r3, [r7, #12]
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	2b07      	cmp	r3, #7
 800d9c4:	d9e5      	bls.n	800d992 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800d9c6:	bf00      	nop
 800d9c8:	3714      	adds	r7, #20
 800d9ca:	46bd      	mov	sp, r7
 800d9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9d0:	4770      	bx	lr
 800d9d2:	bf00      	nop
 800d9d4:	20008be0 	.word	0x20008be0

0800d9d8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d9d8:	b580      	push	{r7, lr}
 800d9da:	b08e      	sub	sp, #56	; 0x38
 800d9dc:	af04      	add	r7, sp, #16
 800d9de:	60f8      	str	r0, [r7, #12]
 800d9e0:	60b9      	str	r1, [r7, #8]
 800d9e2:	607a      	str	r2, [r7, #4]
 800d9e4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d9e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d10b      	bne.n	800da04 <xTaskCreateStatic+0x2c>
 800d9ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9f0:	b672      	cpsid	i
 800d9f2:	f383 8811 	msr	BASEPRI, r3
 800d9f6:	f3bf 8f6f 	isb	sy
 800d9fa:	f3bf 8f4f 	dsb	sy
 800d9fe:	b662      	cpsie	i
 800da00:	623b      	str	r3, [r7, #32]
 800da02:	e7fe      	b.n	800da02 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 800da04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da06:	2b00      	cmp	r3, #0
 800da08:	d10b      	bne.n	800da22 <xTaskCreateStatic+0x4a>
 800da0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da0e:	b672      	cpsid	i
 800da10:	f383 8811 	msr	BASEPRI, r3
 800da14:	f3bf 8f6f 	isb	sy
 800da18:	f3bf 8f4f 	dsb	sy
 800da1c:	b662      	cpsie	i
 800da1e:	61fb      	str	r3, [r7, #28]
 800da20:	e7fe      	b.n	800da20 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800da22:	2354      	movs	r3, #84	; 0x54
 800da24:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800da26:	693b      	ldr	r3, [r7, #16]
 800da28:	2b54      	cmp	r3, #84	; 0x54
 800da2a:	d00b      	beq.n	800da44 <xTaskCreateStatic+0x6c>
 800da2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da30:	b672      	cpsid	i
 800da32:	f383 8811 	msr	BASEPRI, r3
 800da36:	f3bf 8f6f 	isb	sy
 800da3a:	f3bf 8f4f 	dsb	sy
 800da3e:	b662      	cpsie	i
 800da40:	61bb      	str	r3, [r7, #24]
 800da42:	e7fe      	b.n	800da42 <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800da44:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800da46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d01e      	beq.n	800da8a <xTaskCreateStatic+0xb2>
 800da4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d01b      	beq.n	800da8a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800da52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da54:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800da56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da58:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800da5a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800da5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da5e:	2202      	movs	r2, #2
 800da60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800da64:	2300      	movs	r3, #0
 800da66:	9303      	str	r3, [sp, #12]
 800da68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da6a:	9302      	str	r3, [sp, #8]
 800da6c:	f107 0314 	add.w	r3, r7, #20
 800da70:	9301      	str	r3, [sp, #4]
 800da72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da74:	9300      	str	r3, [sp, #0]
 800da76:	683b      	ldr	r3, [r7, #0]
 800da78:	687a      	ldr	r2, [r7, #4]
 800da7a:	68b9      	ldr	r1, [r7, #8]
 800da7c:	68f8      	ldr	r0, [r7, #12]
 800da7e:	f000 f850 	bl	800db22 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800da82:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800da84:	f000 f8d6 	bl	800dc34 <prvAddNewTaskToReadyList>
 800da88:	e001      	b.n	800da8e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800da8a:	2300      	movs	r3, #0
 800da8c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800da8e:	697b      	ldr	r3, [r7, #20]
	}
 800da90:	4618      	mov	r0, r3
 800da92:	3728      	adds	r7, #40	; 0x28
 800da94:	46bd      	mov	sp, r7
 800da96:	bd80      	pop	{r7, pc}

0800da98 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800da98:	b580      	push	{r7, lr}
 800da9a:	b08c      	sub	sp, #48	; 0x30
 800da9c:	af04      	add	r7, sp, #16
 800da9e:	60f8      	str	r0, [r7, #12]
 800daa0:	60b9      	str	r1, [r7, #8]
 800daa2:	603b      	str	r3, [r7, #0]
 800daa4:	4613      	mov	r3, r2
 800daa6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800daa8:	88fb      	ldrh	r3, [r7, #6]
 800daaa:	009b      	lsls	r3, r3, #2
 800daac:	4618      	mov	r0, r3
 800daae:	f001 f9bd 	bl	800ee2c <pvPortMalloc>
 800dab2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800dab4:	697b      	ldr	r3, [r7, #20]
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d00e      	beq.n	800dad8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800daba:	2054      	movs	r0, #84	; 0x54
 800dabc:	f001 f9b6 	bl	800ee2c <pvPortMalloc>
 800dac0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800dac2:	69fb      	ldr	r3, [r7, #28]
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d003      	beq.n	800dad0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800dac8:	69fb      	ldr	r3, [r7, #28]
 800daca:	697a      	ldr	r2, [r7, #20]
 800dacc:	631a      	str	r2, [r3, #48]	; 0x30
 800dace:	e005      	b.n	800dadc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800dad0:	6978      	ldr	r0, [r7, #20]
 800dad2:	f001 fa73 	bl	800efbc <vPortFree>
 800dad6:	e001      	b.n	800dadc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800dad8:	2300      	movs	r3, #0
 800dada:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800dadc:	69fb      	ldr	r3, [r7, #28]
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d017      	beq.n	800db12 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800dae2:	69fb      	ldr	r3, [r7, #28]
 800dae4:	2200      	movs	r2, #0
 800dae6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800daea:	88fa      	ldrh	r2, [r7, #6]
 800daec:	2300      	movs	r3, #0
 800daee:	9303      	str	r3, [sp, #12]
 800daf0:	69fb      	ldr	r3, [r7, #28]
 800daf2:	9302      	str	r3, [sp, #8]
 800daf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800daf6:	9301      	str	r3, [sp, #4]
 800daf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dafa:	9300      	str	r3, [sp, #0]
 800dafc:	683b      	ldr	r3, [r7, #0]
 800dafe:	68b9      	ldr	r1, [r7, #8]
 800db00:	68f8      	ldr	r0, [r7, #12]
 800db02:	f000 f80e 	bl	800db22 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800db06:	69f8      	ldr	r0, [r7, #28]
 800db08:	f000 f894 	bl	800dc34 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800db0c:	2301      	movs	r3, #1
 800db0e:	61bb      	str	r3, [r7, #24]
 800db10:	e002      	b.n	800db18 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800db12:	f04f 33ff 	mov.w	r3, #4294967295
 800db16:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800db18:	69bb      	ldr	r3, [r7, #24]
	}
 800db1a:	4618      	mov	r0, r3
 800db1c:	3720      	adds	r7, #32
 800db1e:	46bd      	mov	sp, r7
 800db20:	bd80      	pop	{r7, pc}

0800db22 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800db22:	b580      	push	{r7, lr}
 800db24:	b088      	sub	sp, #32
 800db26:	af00      	add	r7, sp, #0
 800db28:	60f8      	str	r0, [r7, #12]
 800db2a:	60b9      	str	r1, [r7, #8]
 800db2c:	607a      	str	r2, [r7, #4]
 800db2e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800db30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800db34:	6879      	ldr	r1, [r7, #4]
 800db36:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800db3a:	440b      	add	r3, r1
 800db3c:	009b      	lsls	r3, r3, #2
 800db3e:	4413      	add	r3, r2
 800db40:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800db42:	69bb      	ldr	r3, [r7, #24]
 800db44:	f023 0307 	bic.w	r3, r3, #7
 800db48:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800db4a:	69bb      	ldr	r3, [r7, #24]
 800db4c:	f003 0307 	and.w	r3, r3, #7
 800db50:	2b00      	cmp	r3, #0
 800db52:	d00b      	beq.n	800db6c <prvInitialiseNewTask+0x4a>
 800db54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db58:	b672      	cpsid	i
 800db5a:	f383 8811 	msr	BASEPRI, r3
 800db5e:	f3bf 8f6f 	isb	sy
 800db62:	f3bf 8f4f 	dsb	sy
 800db66:	b662      	cpsie	i
 800db68:	617b      	str	r3, [r7, #20]
 800db6a:	e7fe      	b.n	800db6a <prvInitialiseNewTask+0x48>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800db6c:	68bb      	ldr	r3, [r7, #8]
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d01f      	beq.n	800dbb2 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800db72:	2300      	movs	r3, #0
 800db74:	61fb      	str	r3, [r7, #28]
 800db76:	e012      	b.n	800db9e <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800db78:	68ba      	ldr	r2, [r7, #8]
 800db7a:	69fb      	ldr	r3, [r7, #28]
 800db7c:	4413      	add	r3, r2
 800db7e:	7819      	ldrb	r1, [r3, #0]
 800db80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800db82:	69fb      	ldr	r3, [r7, #28]
 800db84:	4413      	add	r3, r2
 800db86:	3334      	adds	r3, #52	; 0x34
 800db88:	460a      	mov	r2, r1
 800db8a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800db8c:	68ba      	ldr	r2, [r7, #8]
 800db8e:	69fb      	ldr	r3, [r7, #28]
 800db90:	4413      	add	r3, r2
 800db92:	781b      	ldrb	r3, [r3, #0]
 800db94:	2b00      	cmp	r3, #0
 800db96:	d006      	beq.n	800dba6 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800db98:	69fb      	ldr	r3, [r7, #28]
 800db9a:	3301      	adds	r3, #1
 800db9c:	61fb      	str	r3, [r7, #28]
 800db9e:	69fb      	ldr	r3, [r7, #28]
 800dba0:	2b0f      	cmp	r3, #15
 800dba2:	d9e9      	bls.n	800db78 <prvInitialiseNewTask+0x56>
 800dba4:	e000      	b.n	800dba8 <prvInitialiseNewTask+0x86>
			{
				break;
 800dba6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800dba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbaa:	2200      	movs	r2, #0
 800dbac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800dbb0:	e003      	b.n	800dbba <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800dbb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbb4:	2200      	movs	r2, #0
 800dbb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800dbba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbbc:	2b06      	cmp	r3, #6
 800dbbe:	d901      	bls.n	800dbc4 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800dbc0:	2306      	movs	r3, #6
 800dbc2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800dbc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dbc8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800dbca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbcc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dbce:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800dbd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbd2:	2200      	movs	r2, #0
 800dbd4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800dbd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbd8:	3304      	adds	r3, #4
 800dbda:	4618      	mov	r0, r3
 800dbdc:	f7fe ff04 	bl	800c9e8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800dbe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbe2:	3318      	adds	r3, #24
 800dbe4:	4618      	mov	r0, r3
 800dbe6:	f7fe feff 	bl	800c9e8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800dbea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dbee:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dbf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbf2:	f1c3 0207 	rsb	r2, r3, #7
 800dbf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbf8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800dbfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dbfe:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800dc00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc02:	2200      	movs	r2, #0
 800dc04:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800dc06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc08:	2200      	movs	r2, #0
 800dc0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800dc0e:	683a      	ldr	r2, [r7, #0]
 800dc10:	68f9      	ldr	r1, [r7, #12]
 800dc12:	69b8      	ldr	r0, [r7, #24]
 800dc14:	f000 fede 	bl	800e9d4 <pxPortInitialiseStack>
 800dc18:	4602      	mov	r2, r0
 800dc1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc1c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800dc1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d002      	beq.n	800dc2a <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800dc24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dc28:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dc2a:	bf00      	nop
 800dc2c:	3720      	adds	r7, #32
 800dc2e:	46bd      	mov	sp, r7
 800dc30:	bd80      	pop	{r7, pc}
	...

0800dc34 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800dc34:	b580      	push	{r7, lr}
 800dc36:	b082      	sub	sp, #8
 800dc38:	af00      	add	r7, sp, #0
 800dc3a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800dc3c:	f000 ffd4 	bl	800ebe8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800dc40:	4b2a      	ldr	r3, [pc, #168]	; (800dcec <prvAddNewTaskToReadyList+0xb8>)
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	3301      	adds	r3, #1
 800dc46:	4a29      	ldr	r2, [pc, #164]	; (800dcec <prvAddNewTaskToReadyList+0xb8>)
 800dc48:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800dc4a:	4b29      	ldr	r3, [pc, #164]	; (800dcf0 <prvAddNewTaskToReadyList+0xbc>)
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d109      	bne.n	800dc66 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800dc52:	4a27      	ldr	r2, [pc, #156]	; (800dcf0 <prvAddNewTaskToReadyList+0xbc>)
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800dc58:	4b24      	ldr	r3, [pc, #144]	; (800dcec <prvAddNewTaskToReadyList+0xb8>)
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	2b01      	cmp	r3, #1
 800dc5e:	d110      	bne.n	800dc82 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800dc60:	f000 fbc0 	bl	800e3e4 <prvInitialiseTaskLists>
 800dc64:	e00d      	b.n	800dc82 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800dc66:	4b23      	ldr	r3, [pc, #140]	; (800dcf4 <prvAddNewTaskToReadyList+0xc0>)
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d109      	bne.n	800dc82 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800dc6e:	4b20      	ldr	r3, [pc, #128]	; (800dcf0 <prvAddNewTaskToReadyList+0xbc>)
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc78:	429a      	cmp	r2, r3
 800dc7a:	d802      	bhi.n	800dc82 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800dc7c:	4a1c      	ldr	r2, [pc, #112]	; (800dcf0 <prvAddNewTaskToReadyList+0xbc>)
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800dc82:	4b1d      	ldr	r3, [pc, #116]	; (800dcf8 <prvAddNewTaskToReadyList+0xc4>)
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	3301      	adds	r3, #1
 800dc88:	4a1b      	ldr	r2, [pc, #108]	; (800dcf8 <prvAddNewTaskToReadyList+0xc4>)
 800dc8a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc90:	2201      	movs	r2, #1
 800dc92:	409a      	lsls	r2, r3
 800dc94:	4b19      	ldr	r3, [pc, #100]	; (800dcfc <prvAddNewTaskToReadyList+0xc8>)
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	4313      	orrs	r3, r2
 800dc9a:	4a18      	ldr	r2, [pc, #96]	; (800dcfc <prvAddNewTaskToReadyList+0xc8>)
 800dc9c:	6013      	str	r3, [r2, #0]
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dca2:	4613      	mov	r3, r2
 800dca4:	009b      	lsls	r3, r3, #2
 800dca6:	4413      	add	r3, r2
 800dca8:	009b      	lsls	r3, r3, #2
 800dcaa:	4a15      	ldr	r2, [pc, #84]	; (800dd00 <prvAddNewTaskToReadyList+0xcc>)
 800dcac:	441a      	add	r2, r3
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	3304      	adds	r3, #4
 800dcb2:	4619      	mov	r1, r3
 800dcb4:	4610      	mov	r0, r2
 800dcb6:	f7fe fea4 	bl	800ca02 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800dcba:	f000 ffc7 	bl	800ec4c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800dcbe:	4b0d      	ldr	r3, [pc, #52]	; (800dcf4 <prvAddNewTaskToReadyList+0xc0>)
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d00e      	beq.n	800dce4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800dcc6:	4b0a      	ldr	r3, [pc, #40]	; (800dcf0 <prvAddNewTaskToReadyList+0xbc>)
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcd0:	429a      	cmp	r2, r3
 800dcd2:	d207      	bcs.n	800dce4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800dcd4:	4b0b      	ldr	r3, [pc, #44]	; (800dd04 <prvAddNewTaskToReadyList+0xd0>)
 800dcd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dcda:	601a      	str	r2, [r3, #0]
 800dcdc:	f3bf 8f4f 	dsb	sy
 800dce0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dce4:	bf00      	nop
 800dce6:	3708      	adds	r7, #8
 800dce8:	46bd      	mov	sp, r7
 800dcea:	bd80      	pop	{r7, pc}
 800dcec:	200003cc 	.word	0x200003cc
 800dcf0:	200002cc 	.word	0x200002cc
 800dcf4:	200003d8 	.word	0x200003d8
 800dcf8:	200003e8 	.word	0x200003e8
 800dcfc:	200003d4 	.word	0x200003d4
 800dd00:	200002d0 	.word	0x200002d0
 800dd04:	e000ed04 	.word	0xe000ed04

0800dd08 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800dd08:	b580      	push	{r7, lr}
 800dd0a:	b08a      	sub	sp, #40	; 0x28
 800dd0c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800dd0e:	2300      	movs	r3, #0
 800dd10:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800dd12:	2300      	movs	r3, #0
 800dd14:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800dd16:	463a      	mov	r2, r7
 800dd18:	1d39      	adds	r1, r7, #4
 800dd1a:	f107 0308 	add.w	r3, r7, #8
 800dd1e:	4618      	mov	r0, r3
 800dd20:	f7f2 fc0e 	bl	8000540 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800dd24:	6839      	ldr	r1, [r7, #0]
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	68ba      	ldr	r2, [r7, #8]
 800dd2a:	9202      	str	r2, [sp, #8]
 800dd2c:	9301      	str	r3, [sp, #4]
 800dd2e:	2300      	movs	r3, #0
 800dd30:	9300      	str	r3, [sp, #0]
 800dd32:	2300      	movs	r3, #0
 800dd34:	460a      	mov	r2, r1
 800dd36:	491f      	ldr	r1, [pc, #124]	; (800ddb4 <vTaskStartScheduler+0xac>)
 800dd38:	481f      	ldr	r0, [pc, #124]	; (800ddb8 <vTaskStartScheduler+0xb0>)
 800dd3a:	f7ff fe4d 	bl	800d9d8 <xTaskCreateStatic>
 800dd3e:	4602      	mov	r2, r0
 800dd40:	4b1e      	ldr	r3, [pc, #120]	; (800ddbc <vTaskStartScheduler+0xb4>)
 800dd42:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800dd44:	4b1d      	ldr	r3, [pc, #116]	; (800ddbc <vTaskStartScheduler+0xb4>)
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d002      	beq.n	800dd52 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800dd4c:	2301      	movs	r3, #1
 800dd4e:	617b      	str	r3, [r7, #20]
 800dd50:	e001      	b.n	800dd56 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800dd52:	2300      	movs	r3, #0
 800dd54:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800dd56:	697b      	ldr	r3, [r7, #20]
 800dd58:	2b01      	cmp	r3, #1
 800dd5a:	d117      	bne.n	800dd8c <vTaskStartScheduler+0x84>
 800dd5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd60:	b672      	cpsid	i
 800dd62:	f383 8811 	msr	BASEPRI, r3
 800dd66:	f3bf 8f6f 	isb	sy
 800dd6a:	f3bf 8f4f 	dsb	sy
 800dd6e:	b662      	cpsie	i
 800dd70:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800dd72:	4b13      	ldr	r3, [pc, #76]	; (800ddc0 <vTaskStartScheduler+0xb8>)
 800dd74:	f04f 32ff 	mov.w	r2, #4294967295
 800dd78:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800dd7a:	4b12      	ldr	r3, [pc, #72]	; (800ddc4 <vTaskStartScheduler+0xbc>)
 800dd7c:	2201      	movs	r2, #1
 800dd7e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800dd80:	4b11      	ldr	r3, [pc, #68]	; (800ddc8 <vTaskStartScheduler+0xc0>)
 800dd82:	2200      	movs	r2, #0
 800dd84:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800dd86:	f000 feb3 	bl	800eaf0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800dd8a:	e00f      	b.n	800ddac <vTaskStartScheduler+0xa4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800dd8c:	697b      	ldr	r3, [r7, #20]
 800dd8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd92:	d10b      	bne.n	800ddac <vTaskStartScheduler+0xa4>
 800dd94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd98:	b672      	cpsid	i
 800dd9a:	f383 8811 	msr	BASEPRI, r3
 800dd9e:	f3bf 8f6f 	isb	sy
 800dda2:	f3bf 8f4f 	dsb	sy
 800dda6:	b662      	cpsie	i
 800dda8:	60fb      	str	r3, [r7, #12]
 800ddaa:	e7fe      	b.n	800ddaa <vTaskStartScheduler+0xa2>
}
 800ddac:	bf00      	nop
 800ddae:	3718      	adds	r7, #24
 800ddb0:	46bd      	mov	sp, r7
 800ddb2:	bd80      	pop	{r7, pc}
 800ddb4:	0800f2cc 	.word	0x0800f2cc
 800ddb8:	0800e3b5 	.word	0x0800e3b5
 800ddbc:	200003f0 	.word	0x200003f0
 800ddc0:	200003ec 	.word	0x200003ec
 800ddc4:	200003d8 	.word	0x200003d8
 800ddc8:	200003d0 	.word	0x200003d0

0800ddcc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ddcc:	b480      	push	{r7}
 800ddce:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800ddd0:	4b04      	ldr	r3, [pc, #16]	; (800dde4 <vTaskSuspendAll+0x18>)
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	3301      	adds	r3, #1
 800ddd6:	4a03      	ldr	r2, [pc, #12]	; (800dde4 <vTaskSuspendAll+0x18>)
 800ddd8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800ddda:	bf00      	nop
 800dddc:	46bd      	mov	sp, r7
 800ddde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dde2:	4770      	bx	lr
 800dde4:	200003f4 	.word	0x200003f4

0800dde8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800dde8:	b580      	push	{r7, lr}
 800ddea:	b084      	sub	sp, #16
 800ddec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ddee:	2300      	movs	r3, #0
 800ddf0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ddf2:	2300      	movs	r3, #0
 800ddf4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ddf6:	4b42      	ldr	r3, [pc, #264]	; (800df00 <xTaskResumeAll+0x118>)
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d10b      	bne.n	800de16 <xTaskResumeAll+0x2e>
 800ddfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de02:	b672      	cpsid	i
 800de04:	f383 8811 	msr	BASEPRI, r3
 800de08:	f3bf 8f6f 	isb	sy
 800de0c:	f3bf 8f4f 	dsb	sy
 800de10:	b662      	cpsie	i
 800de12:	603b      	str	r3, [r7, #0]
 800de14:	e7fe      	b.n	800de14 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800de16:	f000 fee7 	bl	800ebe8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800de1a:	4b39      	ldr	r3, [pc, #228]	; (800df00 <xTaskResumeAll+0x118>)
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	3b01      	subs	r3, #1
 800de20:	4a37      	ldr	r2, [pc, #220]	; (800df00 <xTaskResumeAll+0x118>)
 800de22:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800de24:	4b36      	ldr	r3, [pc, #216]	; (800df00 <xTaskResumeAll+0x118>)
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d161      	bne.n	800def0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800de2c:	4b35      	ldr	r3, [pc, #212]	; (800df04 <xTaskResumeAll+0x11c>)
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	2b00      	cmp	r3, #0
 800de32:	d05d      	beq.n	800def0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800de34:	e02e      	b.n	800de94 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800de36:	4b34      	ldr	r3, [pc, #208]	; (800df08 <xTaskResumeAll+0x120>)
 800de38:	68db      	ldr	r3, [r3, #12]
 800de3a:	68db      	ldr	r3, [r3, #12]
 800de3c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800de3e:	68fb      	ldr	r3, [r7, #12]
 800de40:	3318      	adds	r3, #24
 800de42:	4618      	mov	r0, r3
 800de44:	f7fe fe3a 	bl	800cabc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	3304      	adds	r3, #4
 800de4c:	4618      	mov	r0, r3
 800de4e:	f7fe fe35 	bl	800cabc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de56:	2201      	movs	r2, #1
 800de58:	409a      	lsls	r2, r3
 800de5a:	4b2c      	ldr	r3, [pc, #176]	; (800df0c <xTaskResumeAll+0x124>)
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	4313      	orrs	r3, r2
 800de60:	4a2a      	ldr	r2, [pc, #168]	; (800df0c <xTaskResumeAll+0x124>)
 800de62:	6013      	str	r3, [r2, #0]
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de68:	4613      	mov	r3, r2
 800de6a:	009b      	lsls	r3, r3, #2
 800de6c:	4413      	add	r3, r2
 800de6e:	009b      	lsls	r3, r3, #2
 800de70:	4a27      	ldr	r2, [pc, #156]	; (800df10 <xTaskResumeAll+0x128>)
 800de72:	441a      	add	r2, r3
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	3304      	adds	r3, #4
 800de78:	4619      	mov	r1, r3
 800de7a:	4610      	mov	r0, r2
 800de7c:	f7fe fdc1 	bl	800ca02 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de84:	4b23      	ldr	r3, [pc, #140]	; (800df14 <xTaskResumeAll+0x12c>)
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de8a:	429a      	cmp	r2, r3
 800de8c:	d302      	bcc.n	800de94 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800de8e:	4b22      	ldr	r3, [pc, #136]	; (800df18 <xTaskResumeAll+0x130>)
 800de90:	2201      	movs	r2, #1
 800de92:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800de94:	4b1c      	ldr	r3, [pc, #112]	; (800df08 <xTaskResumeAll+0x120>)
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d1cc      	bne.n	800de36 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d001      	beq.n	800dea6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800dea2:	f000 fb3b 	bl	800e51c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800dea6:	4b1d      	ldr	r3, [pc, #116]	; (800df1c <xTaskResumeAll+0x134>)
 800dea8:	681b      	ldr	r3, [r3, #0]
 800deaa:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d010      	beq.n	800ded4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800deb2:	f000 f859 	bl	800df68 <xTaskIncrementTick>
 800deb6:	4603      	mov	r3, r0
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d002      	beq.n	800dec2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800debc:	4b16      	ldr	r3, [pc, #88]	; (800df18 <xTaskResumeAll+0x130>)
 800debe:	2201      	movs	r2, #1
 800dec0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	3b01      	subs	r3, #1
 800dec6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	2b00      	cmp	r3, #0
 800decc:	d1f1      	bne.n	800deb2 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800dece:	4b13      	ldr	r3, [pc, #76]	; (800df1c <xTaskResumeAll+0x134>)
 800ded0:	2200      	movs	r2, #0
 800ded2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ded4:	4b10      	ldr	r3, [pc, #64]	; (800df18 <xTaskResumeAll+0x130>)
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d009      	beq.n	800def0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800dedc:	2301      	movs	r3, #1
 800dede:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800dee0:	4b0f      	ldr	r3, [pc, #60]	; (800df20 <xTaskResumeAll+0x138>)
 800dee2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dee6:	601a      	str	r2, [r3, #0]
 800dee8:	f3bf 8f4f 	dsb	sy
 800deec:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800def0:	f000 feac 	bl	800ec4c <vPortExitCritical>

	return xAlreadyYielded;
 800def4:	68bb      	ldr	r3, [r7, #8]
}
 800def6:	4618      	mov	r0, r3
 800def8:	3710      	adds	r7, #16
 800defa:	46bd      	mov	sp, r7
 800defc:	bd80      	pop	{r7, pc}
 800defe:	bf00      	nop
 800df00:	200003f4 	.word	0x200003f4
 800df04:	200003cc 	.word	0x200003cc
 800df08:	2000038c 	.word	0x2000038c
 800df0c:	200003d4 	.word	0x200003d4
 800df10:	200002d0 	.word	0x200002d0
 800df14:	200002cc 	.word	0x200002cc
 800df18:	200003e0 	.word	0x200003e0
 800df1c:	200003dc 	.word	0x200003dc
 800df20:	e000ed04 	.word	0xe000ed04

0800df24 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800df24:	b480      	push	{r7}
 800df26:	b083      	sub	sp, #12
 800df28:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800df2a:	4b05      	ldr	r3, [pc, #20]	; (800df40 <xTaskGetTickCount+0x1c>)
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800df30:	687b      	ldr	r3, [r7, #4]
}
 800df32:	4618      	mov	r0, r3
 800df34:	370c      	adds	r7, #12
 800df36:	46bd      	mov	sp, r7
 800df38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df3c:	4770      	bx	lr
 800df3e:	bf00      	nop
 800df40:	200003d0 	.word	0x200003d0

0800df44 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800df44:	b580      	push	{r7, lr}
 800df46:	b082      	sub	sp, #8
 800df48:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800df4a:	f000 ff2d 	bl	800eda8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800df4e:	2300      	movs	r3, #0
 800df50:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800df52:	4b04      	ldr	r3, [pc, #16]	; (800df64 <xTaskGetTickCountFromISR+0x20>)
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800df58:	683b      	ldr	r3, [r7, #0]
}
 800df5a:	4618      	mov	r0, r3
 800df5c:	3708      	adds	r7, #8
 800df5e:	46bd      	mov	sp, r7
 800df60:	bd80      	pop	{r7, pc}
 800df62:	bf00      	nop
 800df64:	200003d0 	.word	0x200003d0

0800df68 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800df68:	b580      	push	{r7, lr}
 800df6a:	b086      	sub	sp, #24
 800df6c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800df6e:	2300      	movs	r3, #0
 800df70:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800df72:	4b4f      	ldr	r3, [pc, #316]	; (800e0b0 <xTaskIncrementTick+0x148>)
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	2b00      	cmp	r3, #0
 800df78:	f040 8089 	bne.w	800e08e <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800df7c:	4b4d      	ldr	r3, [pc, #308]	; (800e0b4 <xTaskIncrementTick+0x14c>)
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	3301      	adds	r3, #1
 800df82:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800df84:	4a4b      	ldr	r2, [pc, #300]	; (800e0b4 <xTaskIncrementTick+0x14c>)
 800df86:	693b      	ldr	r3, [r7, #16]
 800df88:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800df8a:	693b      	ldr	r3, [r7, #16]
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d121      	bne.n	800dfd4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800df90:	4b49      	ldr	r3, [pc, #292]	; (800e0b8 <xTaskIncrementTick+0x150>)
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	2b00      	cmp	r3, #0
 800df98:	d00b      	beq.n	800dfb2 <xTaskIncrementTick+0x4a>
 800df9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df9e:	b672      	cpsid	i
 800dfa0:	f383 8811 	msr	BASEPRI, r3
 800dfa4:	f3bf 8f6f 	isb	sy
 800dfa8:	f3bf 8f4f 	dsb	sy
 800dfac:	b662      	cpsie	i
 800dfae:	603b      	str	r3, [r7, #0]
 800dfb0:	e7fe      	b.n	800dfb0 <xTaskIncrementTick+0x48>
 800dfb2:	4b41      	ldr	r3, [pc, #260]	; (800e0b8 <xTaskIncrementTick+0x150>)
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	60fb      	str	r3, [r7, #12]
 800dfb8:	4b40      	ldr	r3, [pc, #256]	; (800e0bc <xTaskIncrementTick+0x154>)
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	4a3e      	ldr	r2, [pc, #248]	; (800e0b8 <xTaskIncrementTick+0x150>)
 800dfbe:	6013      	str	r3, [r2, #0]
 800dfc0:	4a3e      	ldr	r2, [pc, #248]	; (800e0bc <xTaskIncrementTick+0x154>)
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	6013      	str	r3, [r2, #0]
 800dfc6:	4b3e      	ldr	r3, [pc, #248]	; (800e0c0 <xTaskIncrementTick+0x158>)
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	3301      	adds	r3, #1
 800dfcc:	4a3c      	ldr	r2, [pc, #240]	; (800e0c0 <xTaskIncrementTick+0x158>)
 800dfce:	6013      	str	r3, [r2, #0]
 800dfd0:	f000 faa4 	bl	800e51c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800dfd4:	4b3b      	ldr	r3, [pc, #236]	; (800e0c4 <xTaskIncrementTick+0x15c>)
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	693a      	ldr	r2, [r7, #16]
 800dfda:	429a      	cmp	r2, r3
 800dfdc:	d348      	bcc.n	800e070 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dfde:	4b36      	ldr	r3, [pc, #216]	; (800e0b8 <xTaskIncrementTick+0x150>)
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d104      	bne.n	800dff2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dfe8:	4b36      	ldr	r3, [pc, #216]	; (800e0c4 <xTaskIncrementTick+0x15c>)
 800dfea:	f04f 32ff 	mov.w	r2, #4294967295
 800dfee:	601a      	str	r2, [r3, #0]
					break;
 800dff0:	e03e      	b.n	800e070 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dff2:	4b31      	ldr	r3, [pc, #196]	; (800e0b8 <xTaskIncrementTick+0x150>)
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	68db      	ldr	r3, [r3, #12]
 800dff8:	68db      	ldr	r3, [r3, #12]
 800dffa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800dffc:	68bb      	ldr	r3, [r7, #8]
 800dffe:	685b      	ldr	r3, [r3, #4]
 800e000:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e002:	693a      	ldr	r2, [r7, #16]
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	429a      	cmp	r2, r3
 800e008:	d203      	bcs.n	800e012 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e00a:	4a2e      	ldr	r2, [pc, #184]	; (800e0c4 <xTaskIncrementTick+0x15c>)
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e010:	e02e      	b.n	800e070 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e012:	68bb      	ldr	r3, [r7, #8]
 800e014:	3304      	adds	r3, #4
 800e016:	4618      	mov	r0, r3
 800e018:	f7fe fd50 	bl	800cabc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e01c:	68bb      	ldr	r3, [r7, #8]
 800e01e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e020:	2b00      	cmp	r3, #0
 800e022:	d004      	beq.n	800e02e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e024:	68bb      	ldr	r3, [r7, #8]
 800e026:	3318      	adds	r3, #24
 800e028:	4618      	mov	r0, r3
 800e02a:	f7fe fd47 	bl	800cabc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e02e:	68bb      	ldr	r3, [r7, #8]
 800e030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e032:	2201      	movs	r2, #1
 800e034:	409a      	lsls	r2, r3
 800e036:	4b24      	ldr	r3, [pc, #144]	; (800e0c8 <xTaskIncrementTick+0x160>)
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	4313      	orrs	r3, r2
 800e03c:	4a22      	ldr	r2, [pc, #136]	; (800e0c8 <xTaskIncrementTick+0x160>)
 800e03e:	6013      	str	r3, [r2, #0]
 800e040:	68bb      	ldr	r3, [r7, #8]
 800e042:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e044:	4613      	mov	r3, r2
 800e046:	009b      	lsls	r3, r3, #2
 800e048:	4413      	add	r3, r2
 800e04a:	009b      	lsls	r3, r3, #2
 800e04c:	4a1f      	ldr	r2, [pc, #124]	; (800e0cc <xTaskIncrementTick+0x164>)
 800e04e:	441a      	add	r2, r3
 800e050:	68bb      	ldr	r3, [r7, #8]
 800e052:	3304      	adds	r3, #4
 800e054:	4619      	mov	r1, r3
 800e056:	4610      	mov	r0, r2
 800e058:	f7fe fcd3 	bl	800ca02 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e05c:	68bb      	ldr	r3, [r7, #8]
 800e05e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e060:	4b1b      	ldr	r3, [pc, #108]	; (800e0d0 <xTaskIncrementTick+0x168>)
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e066:	429a      	cmp	r2, r3
 800e068:	d3b9      	bcc.n	800dfde <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800e06a:	2301      	movs	r3, #1
 800e06c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e06e:	e7b6      	b.n	800dfde <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e070:	4b17      	ldr	r3, [pc, #92]	; (800e0d0 <xTaskIncrementTick+0x168>)
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e076:	4915      	ldr	r1, [pc, #84]	; (800e0cc <xTaskIncrementTick+0x164>)
 800e078:	4613      	mov	r3, r2
 800e07a:	009b      	lsls	r3, r3, #2
 800e07c:	4413      	add	r3, r2
 800e07e:	009b      	lsls	r3, r3, #2
 800e080:	440b      	add	r3, r1
 800e082:	681b      	ldr	r3, [r3, #0]
 800e084:	2b01      	cmp	r3, #1
 800e086:	d907      	bls.n	800e098 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 800e088:	2301      	movs	r3, #1
 800e08a:	617b      	str	r3, [r7, #20]
 800e08c:	e004      	b.n	800e098 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800e08e:	4b11      	ldr	r3, [pc, #68]	; (800e0d4 <xTaskIncrementTick+0x16c>)
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	3301      	adds	r3, #1
 800e094:	4a0f      	ldr	r2, [pc, #60]	; (800e0d4 <xTaskIncrementTick+0x16c>)
 800e096:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800e098:	4b0f      	ldr	r3, [pc, #60]	; (800e0d8 <xTaskIncrementTick+0x170>)
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d001      	beq.n	800e0a4 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 800e0a0:	2301      	movs	r3, #1
 800e0a2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800e0a4:	697b      	ldr	r3, [r7, #20]
}
 800e0a6:	4618      	mov	r0, r3
 800e0a8:	3718      	adds	r7, #24
 800e0aa:	46bd      	mov	sp, r7
 800e0ac:	bd80      	pop	{r7, pc}
 800e0ae:	bf00      	nop
 800e0b0:	200003f4 	.word	0x200003f4
 800e0b4:	200003d0 	.word	0x200003d0
 800e0b8:	20000384 	.word	0x20000384
 800e0bc:	20000388 	.word	0x20000388
 800e0c0:	200003e4 	.word	0x200003e4
 800e0c4:	200003ec 	.word	0x200003ec
 800e0c8:	200003d4 	.word	0x200003d4
 800e0cc:	200002d0 	.word	0x200002d0
 800e0d0:	200002cc 	.word	0x200002cc
 800e0d4:	200003dc 	.word	0x200003dc
 800e0d8:	200003e0 	.word	0x200003e0

0800e0dc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e0dc:	b480      	push	{r7}
 800e0de:	b087      	sub	sp, #28
 800e0e0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e0e2:	4b27      	ldr	r3, [pc, #156]	; (800e180 <vTaskSwitchContext+0xa4>)
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d003      	beq.n	800e0f2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e0ea:	4b26      	ldr	r3, [pc, #152]	; (800e184 <vTaskSwitchContext+0xa8>)
 800e0ec:	2201      	movs	r2, #1
 800e0ee:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e0f0:	e040      	b.n	800e174 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800e0f2:	4b24      	ldr	r3, [pc, #144]	; (800e184 <vTaskSwitchContext+0xa8>)
 800e0f4:	2200      	movs	r2, #0
 800e0f6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e0f8:	4b23      	ldr	r3, [pc, #140]	; (800e188 <vTaskSwitchContext+0xac>)
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	fab3 f383 	clz	r3, r3
 800e104:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800e106:	7afb      	ldrb	r3, [r7, #11]
 800e108:	f1c3 031f 	rsb	r3, r3, #31
 800e10c:	617b      	str	r3, [r7, #20]
 800e10e:	491f      	ldr	r1, [pc, #124]	; (800e18c <vTaskSwitchContext+0xb0>)
 800e110:	697a      	ldr	r2, [r7, #20]
 800e112:	4613      	mov	r3, r2
 800e114:	009b      	lsls	r3, r3, #2
 800e116:	4413      	add	r3, r2
 800e118:	009b      	lsls	r3, r3, #2
 800e11a:	440b      	add	r3, r1
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d10b      	bne.n	800e13a <vTaskSwitchContext+0x5e>
	__asm volatile
 800e122:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e126:	b672      	cpsid	i
 800e128:	f383 8811 	msr	BASEPRI, r3
 800e12c:	f3bf 8f6f 	isb	sy
 800e130:	f3bf 8f4f 	dsb	sy
 800e134:	b662      	cpsie	i
 800e136:	607b      	str	r3, [r7, #4]
 800e138:	e7fe      	b.n	800e138 <vTaskSwitchContext+0x5c>
 800e13a:	697a      	ldr	r2, [r7, #20]
 800e13c:	4613      	mov	r3, r2
 800e13e:	009b      	lsls	r3, r3, #2
 800e140:	4413      	add	r3, r2
 800e142:	009b      	lsls	r3, r3, #2
 800e144:	4a11      	ldr	r2, [pc, #68]	; (800e18c <vTaskSwitchContext+0xb0>)
 800e146:	4413      	add	r3, r2
 800e148:	613b      	str	r3, [r7, #16]
 800e14a:	693b      	ldr	r3, [r7, #16]
 800e14c:	685b      	ldr	r3, [r3, #4]
 800e14e:	685a      	ldr	r2, [r3, #4]
 800e150:	693b      	ldr	r3, [r7, #16]
 800e152:	605a      	str	r2, [r3, #4]
 800e154:	693b      	ldr	r3, [r7, #16]
 800e156:	685a      	ldr	r2, [r3, #4]
 800e158:	693b      	ldr	r3, [r7, #16]
 800e15a:	3308      	adds	r3, #8
 800e15c:	429a      	cmp	r2, r3
 800e15e:	d104      	bne.n	800e16a <vTaskSwitchContext+0x8e>
 800e160:	693b      	ldr	r3, [r7, #16]
 800e162:	685b      	ldr	r3, [r3, #4]
 800e164:	685a      	ldr	r2, [r3, #4]
 800e166:	693b      	ldr	r3, [r7, #16]
 800e168:	605a      	str	r2, [r3, #4]
 800e16a:	693b      	ldr	r3, [r7, #16]
 800e16c:	685b      	ldr	r3, [r3, #4]
 800e16e:	68db      	ldr	r3, [r3, #12]
 800e170:	4a07      	ldr	r2, [pc, #28]	; (800e190 <vTaskSwitchContext+0xb4>)
 800e172:	6013      	str	r3, [r2, #0]
}
 800e174:	bf00      	nop
 800e176:	371c      	adds	r7, #28
 800e178:	46bd      	mov	sp, r7
 800e17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e17e:	4770      	bx	lr
 800e180:	200003f4 	.word	0x200003f4
 800e184:	200003e0 	.word	0x200003e0
 800e188:	200003d4 	.word	0x200003d4
 800e18c:	200002d0 	.word	0x200002d0
 800e190:	200002cc 	.word	0x200002cc

0800e194 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e194:	b580      	push	{r7, lr}
 800e196:	b084      	sub	sp, #16
 800e198:	af00      	add	r7, sp, #0
 800e19a:	6078      	str	r0, [r7, #4]
 800e19c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d10b      	bne.n	800e1bc <vTaskPlaceOnEventList+0x28>
 800e1a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1a8:	b672      	cpsid	i
 800e1aa:	f383 8811 	msr	BASEPRI, r3
 800e1ae:	f3bf 8f6f 	isb	sy
 800e1b2:	f3bf 8f4f 	dsb	sy
 800e1b6:	b662      	cpsie	i
 800e1b8:	60fb      	str	r3, [r7, #12]
 800e1ba:	e7fe      	b.n	800e1ba <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e1bc:	4b07      	ldr	r3, [pc, #28]	; (800e1dc <vTaskPlaceOnEventList+0x48>)
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	3318      	adds	r3, #24
 800e1c2:	4619      	mov	r1, r3
 800e1c4:	6878      	ldr	r0, [r7, #4]
 800e1c6:	f7fe fc40 	bl	800ca4a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e1ca:	2101      	movs	r1, #1
 800e1cc:	6838      	ldr	r0, [r7, #0]
 800e1ce:	f000 fb9b 	bl	800e908 <prvAddCurrentTaskToDelayedList>
}
 800e1d2:	bf00      	nop
 800e1d4:	3710      	adds	r7, #16
 800e1d6:	46bd      	mov	sp, r7
 800e1d8:	bd80      	pop	{r7, pc}
 800e1da:	bf00      	nop
 800e1dc:	200002cc 	.word	0x200002cc

0800e1e0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e1e0:	b580      	push	{r7, lr}
 800e1e2:	b086      	sub	sp, #24
 800e1e4:	af00      	add	r7, sp, #0
 800e1e6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	68db      	ldr	r3, [r3, #12]
 800e1ec:	68db      	ldr	r3, [r3, #12]
 800e1ee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e1f0:	693b      	ldr	r3, [r7, #16]
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d10b      	bne.n	800e20e <xTaskRemoveFromEventList+0x2e>
 800e1f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1fa:	b672      	cpsid	i
 800e1fc:	f383 8811 	msr	BASEPRI, r3
 800e200:	f3bf 8f6f 	isb	sy
 800e204:	f3bf 8f4f 	dsb	sy
 800e208:	b662      	cpsie	i
 800e20a:	60fb      	str	r3, [r7, #12]
 800e20c:	e7fe      	b.n	800e20c <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e20e:	693b      	ldr	r3, [r7, #16]
 800e210:	3318      	adds	r3, #24
 800e212:	4618      	mov	r0, r3
 800e214:	f7fe fc52 	bl	800cabc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e218:	4b1d      	ldr	r3, [pc, #116]	; (800e290 <xTaskRemoveFromEventList+0xb0>)
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d11c      	bne.n	800e25a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e220:	693b      	ldr	r3, [r7, #16]
 800e222:	3304      	adds	r3, #4
 800e224:	4618      	mov	r0, r3
 800e226:	f7fe fc49 	bl	800cabc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e22a:	693b      	ldr	r3, [r7, #16]
 800e22c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e22e:	2201      	movs	r2, #1
 800e230:	409a      	lsls	r2, r3
 800e232:	4b18      	ldr	r3, [pc, #96]	; (800e294 <xTaskRemoveFromEventList+0xb4>)
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	4313      	orrs	r3, r2
 800e238:	4a16      	ldr	r2, [pc, #88]	; (800e294 <xTaskRemoveFromEventList+0xb4>)
 800e23a:	6013      	str	r3, [r2, #0]
 800e23c:	693b      	ldr	r3, [r7, #16]
 800e23e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e240:	4613      	mov	r3, r2
 800e242:	009b      	lsls	r3, r3, #2
 800e244:	4413      	add	r3, r2
 800e246:	009b      	lsls	r3, r3, #2
 800e248:	4a13      	ldr	r2, [pc, #76]	; (800e298 <xTaskRemoveFromEventList+0xb8>)
 800e24a:	441a      	add	r2, r3
 800e24c:	693b      	ldr	r3, [r7, #16]
 800e24e:	3304      	adds	r3, #4
 800e250:	4619      	mov	r1, r3
 800e252:	4610      	mov	r0, r2
 800e254:	f7fe fbd5 	bl	800ca02 <vListInsertEnd>
 800e258:	e005      	b.n	800e266 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e25a:	693b      	ldr	r3, [r7, #16]
 800e25c:	3318      	adds	r3, #24
 800e25e:	4619      	mov	r1, r3
 800e260:	480e      	ldr	r0, [pc, #56]	; (800e29c <xTaskRemoveFromEventList+0xbc>)
 800e262:	f7fe fbce 	bl	800ca02 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e266:	693b      	ldr	r3, [r7, #16]
 800e268:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e26a:	4b0d      	ldr	r3, [pc, #52]	; (800e2a0 <xTaskRemoveFromEventList+0xc0>)
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e270:	429a      	cmp	r2, r3
 800e272:	d905      	bls.n	800e280 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e274:	2301      	movs	r3, #1
 800e276:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e278:	4b0a      	ldr	r3, [pc, #40]	; (800e2a4 <xTaskRemoveFromEventList+0xc4>)
 800e27a:	2201      	movs	r2, #1
 800e27c:	601a      	str	r2, [r3, #0]
 800e27e:	e001      	b.n	800e284 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800e280:	2300      	movs	r3, #0
 800e282:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e284:	697b      	ldr	r3, [r7, #20]
}
 800e286:	4618      	mov	r0, r3
 800e288:	3718      	adds	r7, #24
 800e28a:	46bd      	mov	sp, r7
 800e28c:	bd80      	pop	{r7, pc}
 800e28e:	bf00      	nop
 800e290:	200003f4 	.word	0x200003f4
 800e294:	200003d4 	.word	0x200003d4
 800e298:	200002d0 	.word	0x200002d0
 800e29c:	2000038c 	.word	0x2000038c
 800e2a0:	200002cc 	.word	0x200002cc
 800e2a4:	200003e0 	.word	0x200003e0

0800e2a8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e2a8:	b480      	push	{r7}
 800e2aa:	b083      	sub	sp, #12
 800e2ac:	af00      	add	r7, sp, #0
 800e2ae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e2b0:	4b06      	ldr	r3, [pc, #24]	; (800e2cc <vTaskInternalSetTimeOutState+0x24>)
 800e2b2:	681a      	ldr	r2, [r3, #0]
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e2b8:	4b05      	ldr	r3, [pc, #20]	; (800e2d0 <vTaskInternalSetTimeOutState+0x28>)
 800e2ba:	681a      	ldr	r2, [r3, #0]
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	605a      	str	r2, [r3, #4]
}
 800e2c0:	bf00      	nop
 800e2c2:	370c      	adds	r7, #12
 800e2c4:	46bd      	mov	sp, r7
 800e2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ca:	4770      	bx	lr
 800e2cc:	200003e4 	.word	0x200003e4
 800e2d0:	200003d0 	.word	0x200003d0

0800e2d4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e2d4:	b580      	push	{r7, lr}
 800e2d6:	b088      	sub	sp, #32
 800e2d8:	af00      	add	r7, sp, #0
 800e2da:	6078      	str	r0, [r7, #4]
 800e2dc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d10b      	bne.n	800e2fc <xTaskCheckForTimeOut+0x28>
 800e2e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2e8:	b672      	cpsid	i
 800e2ea:	f383 8811 	msr	BASEPRI, r3
 800e2ee:	f3bf 8f6f 	isb	sy
 800e2f2:	f3bf 8f4f 	dsb	sy
 800e2f6:	b662      	cpsie	i
 800e2f8:	613b      	str	r3, [r7, #16]
 800e2fa:	e7fe      	b.n	800e2fa <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 800e2fc:	683b      	ldr	r3, [r7, #0]
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d10b      	bne.n	800e31a <xTaskCheckForTimeOut+0x46>
 800e302:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e306:	b672      	cpsid	i
 800e308:	f383 8811 	msr	BASEPRI, r3
 800e30c:	f3bf 8f6f 	isb	sy
 800e310:	f3bf 8f4f 	dsb	sy
 800e314:	b662      	cpsie	i
 800e316:	60fb      	str	r3, [r7, #12]
 800e318:	e7fe      	b.n	800e318 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 800e31a:	f000 fc65 	bl	800ebe8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e31e:	4b1d      	ldr	r3, [pc, #116]	; (800e394 <xTaskCheckForTimeOut+0xc0>)
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	685b      	ldr	r3, [r3, #4]
 800e328:	69ba      	ldr	r2, [r7, #24]
 800e32a:	1ad3      	subs	r3, r2, r3
 800e32c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e32e:	683b      	ldr	r3, [r7, #0]
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e336:	d102      	bne.n	800e33e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e338:	2300      	movs	r3, #0
 800e33a:	61fb      	str	r3, [r7, #28]
 800e33c:	e023      	b.n	800e386 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	681a      	ldr	r2, [r3, #0]
 800e342:	4b15      	ldr	r3, [pc, #84]	; (800e398 <xTaskCheckForTimeOut+0xc4>)
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	429a      	cmp	r2, r3
 800e348:	d007      	beq.n	800e35a <xTaskCheckForTimeOut+0x86>
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	685b      	ldr	r3, [r3, #4]
 800e34e:	69ba      	ldr	r2, [r7, #24]
 800e350:	429a      	cmp	r2, r3
 800e352:	d302      	bcc.n	800e35a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e354:	2301      	movs	r3, #1
 800e356:	61fb      	str	r3, [r7, #28]
 800e358:	e015      	b.n	800e386 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e35a:	683b      	ldr	r3, [r7, #0]
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	697a      	ldr	r2, [r7, #20]
 800e360:	429a      	cmp	r2, r3
 800e362:	d20b      	bcs.n	800e37c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e364:	683b      	ldr	r3, [r7, #0]
 800e366:	681a      	ldr	r2, [r3, #0]
 800e368:	697b      	ldr	r3, [r7, #20]
 800e36a:	1ad2      	subs	r2, r2, r3
 800e36c:	683b      	ldr	r3, [r7, #0]
 800e36e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e370:	6878      	ldr	r0, [r7, #4]
 800e372:	f7ff ff99 	bl	800e2a8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e376:	2300      	movs	r3, #0
 800e378:	61fb      	str	r3, [r7, #28]
 800e37a:	e004      	b.n	800e386 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800e37c:	683b      	ldr	r3, [r7, #0]
 800e37e:	2200      	movs	r2, #0
 800e380:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e382:	2301      	movs	r3, #1
 800e384:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e386:	f000 fc61 	bl	800ec4c <vPortExitCritical>

	return xReturn;
 800e38a:	69fb      	ldr	r3, [r7, #28]
}
 800e38c:	4618      	mov	r0, r3
 800e38e:	3720      	adds	r7, #32
 800e390:	46bd      	mov	sp, r7
 800e392:	bd80      	pop	{r7, pc}
 800e394:	200003d0 	.word	0x200003d0
 800e398:	200003e4 	.word	0x200003e4

0800e39c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e39c:	b480      	push	{r7}
 800e39e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e3a0:	4b03      	ldr	r3, [pc, #12]	; (800e3b0 <vTaskMissedYield+0x14>)
 800e3a2:	2201      	movs	r2, #1
 800e3a4:	601a      	str	r2, [r3, #0]
}
 800e3a6:	bf00      	nop
 800e3a8:	46bd      	mov	sp, r7
 800e3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ae:	4770      	bx	lr
 800e3b0:	200003e0 	.word	0x200003e0

0800e3b4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e3b4:	b580      	push	{r7, lr}
 800e3b6:	b082      	sub	sp, #8
 800e3b8:	af00      	add	r7, sp, #0
 800e3ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e3bc:	f000 f852 	bl	800e464 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e3c0:	4b06      	ldr	r3, [pc, #24]	; (800e3dc <prvIdleTask+0x28>)
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	2b01      	cmp	r3, #1
 800e3c6:	d9f9      	bls.n	800e3bc <prvIdleTask+0x8>
			{
				taskYIELD();
 800e3c8:	4b05      	ldr	r3, [pc, #20]	; (800e3e0 <prvIdleTask+0x2c>)
 800e3ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e3ce:	601a      	str	r2, [r3, #0]
 800e3d0:	f3bf 8f4f 	dsb	sy
 800e3d4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e3d8:	e7f0      	b.n	800e3bc <prvIdleTask+0x8>
 800e3da:	bf00      	nop
 800e3dc:	200002d0 	.word	0x200002d0
 800e3e0:	e000ed04 	.word	0xe000ed04

0800e3e4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e3e4:	b580      	push	{r7, lr}
 800e3e6:	b082      	sub	sp, #8
 800e3e8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e3ea:	2300      	movs	r3, #0
 800e3ec:	607b      	str	r3, [r7, #4]
 800e3ee:	e00c      	b.n	800e40a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e3f0:	687a      	ldr	r2, [r7, #4]
 800e3f2:	4613      	mov	r3, r2
 800e3f4:	009b      	lsls	r3, r3, #2
 800e3f6:	4413      	add	r3, r2
 800e3f8:	009b      	lsls	r3, r3, #2
 800e3fa:	4a12      	ldr	r2, [pc, #72]	; (800e444 <prvInitialiseTaskLists+0x60>)
 800e3fc:	4413      	add	r3, r2
 800e3fe:	4618      	mov	r0, r3
 800e400:	f7fe fad2 	bl	800c9a8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	3301      	adds	r3, #1
 800e408:	607b      	str	r3, [r7, #4]
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	2b06      	cmp	r3, #6
 800e40e:	d9ef      	bls.n	800e3f0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e410:	480d      	ldr	r0, [pc, #52]	; (800e448 <prvInitialiseTaskLists+0x64>)
 800e412:	f7fe fac9 	bl	800c9a8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e416:	480d      	ldr	r0, [pc, #52]	; (800e44c <prvInitialiseTaskLists+0x68>)
 800e418:	f7fe fac6 	bl	800c9a8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e41c:	480c      	ldr	r0, [pc, #48]	; (800e450 <prvInitialiseTaskLists+0x6c>)
 800e41e:	f7fe fac3 	bl	800c9a8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e422:	480c      	ldr	r0, [pc, #48]	; (800e454 <prvInitialiseTaskLists+0x70>)
 800e424:	f7fe fac0 	bl	800c9a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e428:	480b      	ldr	r0, [pc, #44]	; (800e458 <prvInitialiseTaskLists+0x74>)
 800e42a:	f7fe fabd 	bl	800c9a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e42e:	4b0b      	ldr	r3, [pc, #44]	; (800e45c <prvInitialiseTaskLists+0x78>)
 800e430:	4a05      	ldr	r2, [pc, #20]	; (800e448 <prvInitialiseTaskLists+0x64>)
 800e432:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e434:	4b0a      	ldr	r3, [pc, #40]	; (800e460 <prvInitialiseTaskLists+0x7c>)
 800e436:	4a05      	ldr	r2, [pc, #20]	; (800e44c <prvInitialiseTaskLists+0x68>)
 800e438:	601a      	str	r2, [r3, #0]
}
 800e43a:	bf00      	nop
 800e43c:	3708      	adds	r7, #8
 800e43e:	46bd      	mov	sp, r7
 800e440:	bd80      	pop	{r7, pc}
 800e442:	bf00      	nop
 800e444:	200002d0 	.word	0x200002d0
 800e448:	2000035c 	.word	0x2000035c
 800e44c:	20000370 	.word	0x20000370
 800e450:	2000038c 	.word	0x2000038c
 800e454:	200003a0 	.word	0x200003a0
 800e458:	200003b8 	.word	0x200003b8
 800e45c:	20000384 	.word	0x20000384
 800e460:	20000388 	.word	0x20000388

0800e464 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e464:	b580      	push	{r7, lr}
 800e466:	b082      	sub	sp, #8
 800e468:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e46a:	e019      	b.n	800e4a0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e46c:	f000 fbbc 	bl	800ebe8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e470:	4b0f      	ldr	r3, [pc, #60]	; (800e4b0 <prvCheckTasksWaitingTermination+0x4c>)
 800e472:	68db      	ldr	r3, [r3, #12]
 800e474:	68db      	ldr	r3, [r3, #12]
 800e476:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	3304      	adds	r3, #4
 800e47c:	4618      	mov	r0, r3
 800e47e:	f7fe fb1d 	bl	800cabc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e482:	4b0c      	ldr	r3, [pc, #48]	; (800e4b4 <prvCheckTasksWaitingTermination+0x50>)
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	3b01      	subs	r3, #1
 800e488:	4a0a      	ldr	r2, [pc, #40]	; (800e4b4 <prvCheckTasksWaitingTermination+0x50>)
 800e48a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e48c:	4b0a      	ldr	r3, [pc, #40]	; (800e4b8 <prvCheckTasksWaitingTermination+0x54>)
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	3b01      	subs	r3, #1
 800e492:	4a09      	ldr	r2, [pc, #36]	; (800e4b8 <prvCheckTasksWaitingTermination+0x54>)
 800e494:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e496:	f000 fbd9 	bl	800ec4c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e49a:	6878      	ldr	r0, [r7, #4]
 800e49c:	f000 f80e 	bl	800e4bc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e4a0:	4b05      	ldr	r3, [pc, #20]	; (800e4b8 <prvCheckTasksWaitingTermination+0x54>)
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d1e1      	bne.n	800e46c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e4a8:	bf00      	nop
 800e4aa:	3708      	adds	r7, #8
 800e4ac:	46bd      	mov	sp, r7
 800e4ae:	bd80      	pop	{r7, pc}
 800e4b0:	200003a0 	.word	0x200003a0
 800e4b4:	200003cc 	.word	0x200003cc
 800e4b8:	200003b4 	.word	0x200003b4

0800e4bc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e4bc:	b580      	push	{r7, lr}
 800e4be:	b084      	sub	sp, #16
 800e4c0:	af00      	add	r7, sp, #0
 800e4c2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d108      	bne.n	800e4e0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e4d2:	4618      	mov	r0, r3
 800e4d4:	f000 fd72 	bl	800efbc <vPortFree>
				vPortFree( pxTCB );
 800e4d8:	6878      	ldr	r0, [r7, #4]
 800e4da:	f000 fd6f 	bl	800efbc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e4de:	e019      	b.n	800e514 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e4e6:	2b01      	cmp	r3, #1
 800e4e8:	d103      	bne.n	800e4f2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800e4ea:	6878      	ldr	r0, [r7, #4]
 800e4ec:	f000 fd66 	bl	800efbc <vPortFree>
	}
 800e4f0:	e010      	b.n	800e514 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e4f8:	2b02      	cmp	r3, #2
 800e4fa:	d00b      	beq.n	800e514 <prvDeleteTCB+0x58>
 800e4fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e500:	b672      	cpsid	i
 800e502:	f383 8811 	msr	BASEPRI, r3
 800e506:	f3bf 8f6f 	isb	sy
 800e50a:	f3bf 8f4f 	dsb	sy
 800e50e:	b662      	cpsie	i
 800e510:	60fb      	str	r3, [r7, #12]
 800e512:	e7fe      	b.n	800e512 <prvDeleteTCB+0x56>
	}
 800e514:	bf00      	nop
 800e516:	3710      	adds	r7, #16
 800e518:	46bd      	mov	sp, r7
 800e51a:	bd80      	pop	{r7, pc}

0800e51c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e51c:	b480      	push	{r7}
 800e51e:	b083      	sub	sp, #12
 800e520:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e522:	4b0c      	ldr	r3, [pc, #48]	; (800e554 <prvResetNextTaskUnblockTime+0x38>)
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d104      	bne.n	800e536 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e52c:	4b0a      	ldr	r3, [pc, #40]	; (800e558 <prvResetNextTaskUnblockTime+0x3c>)
 800e52e:	f04f 32ff 	mov.w	r2, #4294967295
 800e532:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e534:	e008      	b.n	800e548 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e536:	4b07      	ldr	r3, [pc, #28]	; (800e554 <prvResetNextTaskUnblockTime+0x38>)
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	68db      	ldr	r3, [r3, #12]
 800e53c:	68db      	ldr	r3, [r3, #12]
 800e53e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	685b      	ldr	r3, [r3, #4]
 800e544:	4a04      	ldr	r2, [pc, #16]	; (800e558 <prvResetNextTaskUnblockTime+0x3c>)
 800e546:	6013      	str	r3, [r2, #0]
}
 800e548:	bf00      	nop
 800e54a:	370c      	adds	r7, #12
 800e54c:	46bd      	mov	sp, r7
 800e54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e552:	4770      	bx	lr
 800e554:	20000384 	.word	0x20000384
 800e558:	200003ec 	.word	0x200003ec

0800e55c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e55c:	b480      	push	{r7}
 800e55e:	b083      	sub	sp, #12
 800e560:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e562:	4b0b      	ldr	r3, [pc, #44]	; (800e590 <xTaskGetSchedulerState+0x34>)
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	2b00      	cmp	r3, #0
 800e568:	d102      	bne.n	800e570 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e56a:	2301      	movs	r3, #1
 800e56c:	607b      	str	r3, [r7, #4]
 800e56e:	e008      	b.n	800e582 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e570:	4b08      	ldr	r3, [pc, #32]	; (800e594 <xTaskGetSchedulerState+0x38>)
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	2b00      	cmp	r3, #0
 800e576:	d102      	bne.n	800e57e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e578:	2302      	movs	r3, #2
 800e57a:	607b      	str	r3, [r7, #4]
 800e57c:	e001      	b.n	800e582 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e57e:	2300      	movs	r3, #0
 800e580:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e582:	687b      	ldr	r3, [r7, #4]
	}
 800e584:	4618      	mov	r0, r3
 800e586:	370c      	adds	r7, #12
 800e588:	46bd      	mov	sp, r7
 800e58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e58e:	4770      	bx	lr
 800e590:	200003d8 	.word	0x200003d8
 800e594:	200003f4 	.word	0x200003f4

0800e598 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800e598:	b580      	push	{r7, lr}
 800e59a:	b084      	sub	sp, #16
 800e59c:	af00      	add	r7, sp, #0
 800e59e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800e5a4:	2300      	movs	r3, #0
 800e5a6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d069      	beq.n	800e682 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800e5ae:	68bb      	ldr	r3, [r7, #8]
 800e5b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e5b2:	4b36      	ldr	r3, [pc, #216]	; (800e68c <xTaskPriorityInherit+0xf4>)
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5b8:	429a      	cmp	r2, r3
 800e5ba:	d259      	bcs.n	800e670 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e5bc:	68bb      	ldr	r3, [r7, #8]
 800e5be:	699b      	ldr	r3, [r3, #24]
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	db06      	blt.n	800e5d2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e5c4:	4b31      	ldr	r3, [pc, #196]	; (800e68c <xTaskPriorityInherit+0xf4>)
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5ca:	f1c3 0207 	rsb	r2, r3, #7
 800e5ce:	68bb      	ldr	r3, [r7, #8]
 800e5d0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800e5d2:	68bb      	ldr	r3, [r7, #8]
 800e5d4:	6959      	ldr	r1, [r3, #20]
 800e5d6:	68bb      	ldr	r3, [r7, #8]
 800e5d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e5da:	4613      	mov	r3, r2
 800e5dc:	009b      	lsls	r3, r3, #2
 800e5de:	4413      	add	r3, r2
 800e5e0:	009b      	lsls	r3, r3, #2
 800e5e2:	4a2b      	ldr	r2, [pc, #172]	; (800e690 <xTaskPriorityInherit+0xf8>)
 800e5e4:	4413      	add	r3, r2
 800e5e6:	4299      	cmp	r1, r3
 800e5e8:	d13a      	bne.n	800e660 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e5ea:	68bb      	ldr	r3, [r7, #8]
 800e5ec:	3304      	adds	r3, #4
 800e5ee:	4618      	mov	r0, r3
 800e5f0:	f7fe fa64 	bl	800cabc <uxListRemove>
 800e5f4:	4603      	mov	r3, r0
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d115      	bne.n	800e626 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800e5fa:	68bb      	ldr	r3, [r7, #8]
 800e5fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e5fe:	4924      	ldr	r1, [pc, #144]	; (800e690 <xTaskPriorityInherit+0xf8>)
 800e600:	4613      	mov	r3, r2
 800e602:	009b      	lsls	r3, r3, #2
 800e604:	4413      	add	r3, r2
 800e606:	009b      	lsls	r3, r3, #2
 800e608:	440b      	add	r3, r1
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d10a      	bne.n	800e626 <xTaskPriorityInherit+0x8e>
 800e610:	68bb      	ldr	r3, [r7, #8]
 800e612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e614:	2201      	movs	r2, #1
 800e616:	fa02 f303 	lsl.w	r3, r2, r3
 800e61a:	43da      	mvns	r2, r3
 800e61c:	4b1d      	ldr	r3, [pc, #116]	; (800e694 <xTaskPriorityInherit+0xfc>)
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	4013      	ands	r3, r2
 800e622:	4a1c      	ldr	r2, [pc, #112]	; (800e694 <xTaskPriorityInherit+0xfc>)
 800e624:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e626:	4b19      	ldr	r3, [pc, #100]	; (800e68c <xTaskPriorityInherit+0xf4>)
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e62c:	68bb      	ldr	r3, [r7, #8]
 800e62e:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e630:	68bb      	ldr	r3, [r7, #8]
 800e632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e634:	2201      	movs	r2, #1
 800e636:	409a      	lsls	r2, r3
 800e638:	4b16      	ldr	r3, [pc, #88]	; (800e694 <xTaskPriorityInherit+0xfc>)
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	4313      	orrs	r3, r2
 800e63e:	4a15      	ldr	r2, [pc, #84]	; (800e694 <xTaskPriorityInherit+0xfc>)
 800e640:	6013      	str	r3, [r2, #0]
 800e642:	68bb      	ldr	r3, [r7, #8]
 800e644:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e646:	4613      	mov	r3, r2
 800e648:	009b      	lsls	r3, r3, #2
 800e64a:	4413      	add	r3, r2
 800e64c:	009b      	lsls	r3, r3, #2
 800e64e:	4a10      	ldr	r2, [pc, #64]	; (800e690 <xTaskPriorityInherit+0xf8>)
 800e650:	441a      	add	r2, r3
 800e652:	68bb      	ldr	r3, [r7, #8]
 800e654:	3304      	adds	r3, #4
 800e656:	4619      	mov	r1, r3
 800e658:	4610      	mov	r0, r2
 800e65a:	f7fe f9d2 	bl	800ca02 <vListInsertEnd>
 800e65e:	e004      	b.n	800e66a <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e660:	4b0a      	ldr	r3, [pc, #40]	; (800e68c <xTaskPriorityInherit+0xf4>)
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e666:	68bb      	ldr	r3, [r7, #8]
 800e668:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800e66a:	2301      	movs	r3, #1
 800e66c:	60fb      	str	r3, [r7, #12]
 800e66e:	e008      	b.n	800e682 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800e670:	68bb      	ldr	r3, [r7, #8]
 800e672:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e674:	4b05      	ldr	r3, [pc, #20]	; (800e68c <xTaskPriorityInherit+0xf4>)
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e67a:	429a      	cmp	r2, r3
 800e67c:	d201      	bcs.n	800e682 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800e67e:	2301      	movs	r3, #1
 800e680:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e682:	68fb      	ldr	r3, [r7, #12]
	}
 800e684:	4618      	mov	r0, r3
 800e686:	3710      	adds	r7, #16
 800e688:	46bd      	mov	sp, r7
 800e68a:	bd80      	pop	{r7, pc}
 800e68c:	200002cc 	.word	0x200002cc
 800e690:	200002d0 	.word	0x200002d0
 800e694:	200003d4 	.word	0x200003d4

0800e698 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e698:	b580      	push	{r7, lr}
 800e69a:	b086      	sub	sp, #24
 800e69c:	af00      	add	r7, sp, #0
 800e69e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e6a4:	2300      	movs	r3, #0
 800e6a6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d070      	beq.n	800e790 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e6ae:	4b3b      	ldr	r3, [pc, #236]	; (800e79c <xTaskPriorityDisinherit+0x104>)
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	693a      	ldr	r2, [r7, #16]
 800e6b4:	429a      	cmp	r2, r3
 800e6b6:	d00b      	beq.n	800e6d0 <xTaskPriorityDisinherit+0x38>
 800e6b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6bc:	b672      	cpsid	i
 800e6be:	f383 8811 	msr	BASEPRI, r3
 800e6c2:	f3bf 8f6f 	isb	sy
 800e6c6:	f3bf 8f4f 	dsb	sy
 800e6ca:	b662      	cpsie	i
 800e6cc:	60fb      	str	r3, [r7, #12]
 800e6ce:	e7fe      	b.n	800e6ce <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 800e6d0:	693b      	ldr	r3, [r7, #16]
 800e6d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d10b      	bne.n	800e6f0 <xTaskPriorityDisinherit+0x58>
 800e6d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6dc:	b672      	cpsid	i
 800e6de:	f383 8811 	msr	BASEPRI, r3
 800e6e2:	f3bf 8f6f 	isb	sy
 800e6e6:	f3bf 8f4f 	dsb	sy
 800e6ea:	b662      	cpsie	i
 800e6ec:	60bb      	str	r3, [r7, #8]
 800e6ee:	e7fe      	b.n	800e6ee <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 800e6f0:	693b      	ldr	r3, [r7, #16]
 800e6f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e6f4:	1e5a      	subs	r2, r3, #1
 800e6f6:	693b      	ldr	r3, [r7, #16]
 800e6f8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e6fa:	693b      	ldr	r3, [r7, #16]
 800e6fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6fe:	693b      	ldr	r3, [r7, #16]
 800e700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e702:	429a      	cmp	r2, r3
 800e704:	d044      	beq.n	800e790 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e706:	693b      	ldr	r3, [r7, #16]
 800e708:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d140      	bne.n	800e790 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e70e:	693b      	ldr	r3, [r7, #16]
 800e710:	3304      	adds	r3, #4
 800e712:	4618      	mov	r0, r3
 800e714:	f7fe f9d2 	bl	800cabc <uxListRemove>
 800e718:	4603      	mov	r3, r0
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	d115      	bne.n	800e74a <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e71e:	693b      	ldr	r3, [r7, #16]
 800e720:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e722:	491f      	ldr	r1, [pc, #124]	; (800e7a0 <xTaskPriorityDisinherit+0x108>)
 800e724:	4613      	mov	r3, r2
 800e726:	009b      	lsls	r3, r3, #2
 800e728:	4413      	add	r3, r2
 800e72a:	009b      	lsls	r3, r3, #2
 800e72c:	440b      	add	r3, r1
 800e72e:	681b      	ldr	r3, [r3, #0]
 800e730:	2b00      	cmp	r3, #0
 800e732:	d10a      	bne.n	800e74a <xTaskPriorityDisinherit+0xb2>
 800e734:	693b      	ldr	r3, [r7, #16]
 800e736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e738:	2201      	movs	r2, #1
 800e73a:	fa02 f303 	lsl.w	r3, r2, r3
 800e73e:	43da      	mvns	r2, r3
 800e740:	4b18      	ldr	r3, [pc, #96]	; (800e7a4 <xTaskPriorityDisinherit+0x10c>)
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	4013      	ands	r3, r2
 800e746:	4a17      	ldr	r2, [pc, #92]	; (800e7a4 <xTaskPriorityDisinherit+0x10c>)
 800e748:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e74a:	693b      	ldr	r3, [r7, #16]
 800e74c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e74e:	693b      	ldr	r3, [r7, #16]
 800e750:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e752:	693b      	ldr	r3, [r7, #16]
 800e754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e756:	f1c3 0207 	rsb	r2, r3, #7
 800e75a:	693b      	ldr	r3, [r7, #16]
 800e75c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e75e:	693b      	ldr	r3, [r7, #16]
 800e760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e762:	2201      	movs	r2, #1
 800e764:	409a      	lsls	r2, r3
 800e766:	4b0f      	ldr	r3, [pc, #60]	; (800e7a4 <xTaskPriorityDisinherit+0x10c>)
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	4313      	orrs	r3, r2
 800e76c:	4a0d      	ldr	r2, [pc, #52]	; (800e7a4 <xTaskPriorityDisinherit+0x10c>)
 800e76e:	6013      	str	r3, [r2, #0]
 800e770:	693b      	ldr	r3, [r7, #16]
 800e772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e774:	4613      	mov	r3, r2
 800e776:	009b      	lsls	r3, r3, #2
 800e778:	4413      	add	r3, r2
 800e77a:	009b      	lsls	r3, r3, #2
 800e77c:	4a08      	ldr	r2, [pc, #32]	; (800e7a0 <xTaskPriorityDisinherit+0x108>)
 800e77e:	441a      	add	r2, r3
 800e780:	693b      	ldr	r3, [r7, #16]
 800e782:	3304      	adds	r3, #4
 800e784:	4619      	mov	r1, r3
 800e786:	4610      	mov	r0, r2
 800e788:	f7fe f93b 	bl	800ca02 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e78c:	2301      	movs	r3, #1
 800e78e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e790:	697b      	ldr	r3, [r7, #20]
	}
 800e792:	4618      	mov	r0, r3
 800e794:	3718      	adds	r7, #24
 800e796:	46bd      	mov	sp, r7
 800e798:	bd80      	pop	{r7, pc}
 800e79a:	bf00      	nop
 800e79c:	200002cc 	.word	0x200002cc
 800e7a0:	200002d0 	.word	0x200002d0
 800e7a4:	200003d4 	.word	0x200003d4

0800e7a8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800e7a8:	b580      	push	{r7, lr}
 800e7aa:	b088      	sub	sp, #32
 800e7ac:	af00      	add	r7, sp, #0
 800e7ae:	6078      	str	r0, [r7, #4]
 800e7b0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800e7b6:	2301      	movs	r3, #1
 800e7b8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	f000 8085 	beq.w	800e8cc <vTaskPriorityDisinheritAfterTimeout+0x124>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800e7c2:	69bb      	ldr	r3, [r7, #24]
 800e7c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d10b      	bne.n	800e7e2 <vTaskPriorityDisinheritAfterTimeout+0x3a>
 800e7ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7ce:	b672      	cpsid	i
 800e7d0:	f383 8811 	msr	BASEPRI, r3
 800e7d4:	f3bf 8f6f 	isb	sy
 800e7d8:	f3bf 8f4f 	dsb	sy
 800e7dc:	b662      	cpsie	i
 800e7de:	60fb      	str	r3, [r7, #12]
 800e7e0:	e7fe      	b.n	800e7e0 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800e7e2:	69bb      	ldr	r3, [r7, #24]
 800e7e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e7e6:	683a      	ldr	r2, [r7, #0]
 800e7e8:	429a      	cmp	r2, r3
 800e7ea:	d902      	bls.n	800e7f2 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800e7ec:	683b      	ldr	r3, [r7, #0]
 800e7ee:	61fb      	str	r3, [r7, #28]
 800e7f0:	e002      	b.n	800e7f8 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800e7f2:	69bb      	ldr	r3, [r7, #24]
 800e7f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e7f6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800e7f8:	69bb      	ldr	r3, [r7, #24]
 800e7fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7fc:	69fa      	ldr	r2, [r7, #28]
 800e7fe:	429a      	cmp	r2, r3
 800e800:	d064      	beq.n	800e8cc <vTaskPriorityDisinheritAfterTimeout+0x124>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800e802:	69bb      	ldr	r3, [r7, #24]
 800e804:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e806:	697a      	ldr	r2, [r7, #20]
 800e808:	429a      	cmp	r2, r3
 800e80a:	d15f      	bne.n	800e8cc <vTaskPriorityDisinheritAfterTimeout+0x124>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800e80c:	4b31      	ldr	r3, [pc, #196]	; (800e8d4 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	69ba      	ldr	r2, [r7, #24]
 800e812:	429a      	cmp	r2, r3
 800e814:	d10b      	bne.n	800e82e <vTaskPriorityDisinheritAfterTimeout+0x86>
 800e816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e81a:	b672      	cpsid	i
 800e81c:	f383 8811 	msr	BASEPRI, r3
 800e820:	f3bf 8f6f 	isb	sy
 800e824:	f3bf 8f4f 	dsb	sy
 800e828:	b662      	cpsie	i
 800e82a:	60bb      	str	r3, [r7, #8]
 800e82c:	e7fe      	b.n	800e82c <vTaskPriorityDisinheritAfterTimeout+0x84>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e82e:	69bb      	ldr	r3, [r7, #24]
 800e830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e832:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800e834:	69bb      	ldr	r3, [r7, #24]
 800e836:	69fa      	ldr	r2, [r7, #28]
 800e838:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e83a:	69bb      	ldr	r3, [r7, #24]
 800e83c:	699b      	ldr	r3, [r3, #24]
 800e83e:	2b00      	cmp	r3, #0
 800e840:	db04      	blt.n	800e84c <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e842:	69fb      	ldr	r3, [r7, #28]
 800e844:	f1c3 0207 	rsb	r2, r3, #7
 800e848:	69bb      	ldr	r3, [r7, #24]
 800e84a:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e84c:	69bb      	ldr	r3, [r7, #24]
 800e84e:	6959      	ldr	r1, [r3, #20]
 800e850:	693a      	ldr	r2, [r7, #16]
 800e852:	4613      	mov	r3, r2
 800e854:	009b      	lsls	r3, r3, #2
 800e856:	4413      	add	r3, r2
 800e858:	009b      	lsls	r3, r3, #2
 800e85a:	4a1f      	ldr	r2, [pc, #124]	; (800e8d8 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800e85c:	4413      	add	r3, r2
 800e85e:	4299      	cmp	r1, r3
 800e860:	d134      	bne.n	800e8cc <vTaskPriorityDisinheritAfterTimeout+0x124>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e862:	69bb      	ldr	r3, [r7, #24]
 800e864:	3304      	adds	r3, #4
 800e866:	4618      	mov	r0, r3
 800e868:	f7fe f928 	bl	800cabc <uxListRemove>
 800e86c:	4603      	mov	r3, r0
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d115      	bne.n	800e89e <vTaskPriorityDisinheritAfterTimeout+0xf6>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e872:	69bb      	ldr	r3, [r7, #24]
 800e874:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e876:	4918      	ldr	r1, [pc, #96]	; (800e8d8 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800e878:	4613      	mov	r3, r2
 800e87a:	009b      	lsls	r3, r3, #2
 800e87c:	4413      	add	r3, r2
 800e87e:	009b      	lsls	r3, r3, #2
 800e880:	440b      	add	r3, r1
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	2b00      	cmp	r3, #0
 800e886:	d10a      	bne.n	800e89e <vTaskPriorityDisinheritAfterTimeout+0xf6>
 800e888:	69bb      	ldr	r3, [r7, #24]
 800e88a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e88c:	2201      	movs	r2, #1
 800e88e:	fa02 f303 	lsl.w	r3, r2, r3
 800e892:	43da      	mvns	r2, r3
 800e894:	4b11      	ldr	r3, [pc, #68]	; (800e8dc <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	4013      	ands	r3, r2
 800e89a:	4a10      	ldr	r2, [pc, #64]	; (800e8dc <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800e89c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800e89e:	69bb      	ldr	r3, [r7, #24]
 800e8a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8a2:	2201      	movs	r2, #1
 800e8a4:	409a      	lsls	r2, r3
 800e8a6:	4b0d      	ldr	r3, [pc, #52]	; (800e8dc <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	4313      	orrs	r3, r2
 800e8ac:	4a0b      	ldr	r2, [pc, #44]	; (800e8dc <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800e8ae:	6013      	str	r3, [r2, #0]
 800e8b0:	69bb      	ldr	r3, [r7, #24]
 800e8b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e8b4:	4613      	mov	r3, r2
 800e8b6:	009b      	lsls	r3, r3, #2
 800e8b8:	4413      	add	r3, r2
 800e8ba:	009b      	lsls	r3, r3, #2
 800e8bc:	4a06      	ldr	r2, [pc, #24]	; (800e8d8 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800e8be:	441a      	add	r2, r3
 800e8c0:	69bb      	ldr	r3, [r7, #24]
 800e8c2:	3304      	adds	r3, #4
 800e8c4:	4619      	mov	r1, r3
 800e8c6:	4610      	mov	r0, r2
 800e8c8:	f7fe f89b 	bl	800ca02 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e8cc:	bf00      	nop
 800e8ce:	3720      	adds	r7, #32
 800e8d0:	46bd      	mov	sp, r7
 800e8d2:	bd80      	pop	{r7, pc}
 800e8d4:	200002cc 	.word	0x200002cc
 800e8d8:	200002d0 	.word	0x200002d0
 800e8dc:	200003d4 	.word	0x200003d4

0800e8e0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800e8e0:	b480      	push	{r7}
 800e8e2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800e8e4:	4b07      	ldr	r3, [pc, #28]	; (800e904 <pvTaskIncrementMutexHeldCount+0x24>)
 800e8e6:	681b      	ldr	r3, [r3, #0]
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d004      	beq.n	800e8f6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800e8ec:	4b05      	ldr	r3, [pc, #20]	; (800e904 <pvTaskIncrementMutexHeldCount+0x24>)
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e8f2:	3201      	adds	r2, #1
 800e8f4:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800e8f6:	4b03      	ldr	r3, [pc, #12]	; (800e904 <pvTaskIncrementMutexHeldCount+0x24>)
 800e8f8:	681b      	ldr	r3, [r3, #0]
	}
 800e8fa:	4618      	mov	r0, r3
 800e8fc:	46bd      	mov	sp, r7
 800e8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e902:	4770      	bx	lr
 800e904:	200002cc 	.word	0x200002cc

0800e908 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e908:	b580      	push	{r7, lr}
 800e90a:	b084      	sub	sp, #16
 800e90c:	af00      	add	r7, sp, #0
 800e90e:	6078      	str	r0, [r7, #4]
 800e910:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e912:	4b29      	ldr	r3, [pc, #164]	; (800e9b8 <prvAddCurrentTaskToDelayedList+0xb0>)
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e918:	4b28      	ldr	r3, [pc, #160]	; (800e9bc <prvAddCurrentTaskToDelayedList+0xb4>)
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	3304      	adds	r3, #4
 800e91e:	4618      	mov	r0, r3
 800e920:	f7fe f8cc 	bl	800cabc <uxListRemove>
 800e924:	4603      	mov	r3, r0
 800e926:	2b00      	cmp	r3, #0
 800e928:	d10b      	bne.n	800e942 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800e92a:	4b24      	ldr	r3, [pc, #144]	; (800e9bc <prvAddCurrentTaskToDelayedList+0xb4>)
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e930:	2201      	movs	r2, #1
 800e932:	fa02 f303 	lsl.w	r3, r2, r3
 800e936:	43da      	mvns	r2, r3
 800e938:	4b21      	ldr	r3, [pc, #132]	; (800e9c0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800e93a:	681b      	ldr	r3, [r3, #0]
 800e93c:	4013      	ands	r3, r2
 800e93e:	4a20      	ldr	r2, [pc, #128]	; (800e9c0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800e940:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e948:	d10a      	bne.n	800e960 <prvAddCurrentTaskToDelayedList+0x58>
 800e94a:	683b      	ldr	r3, [r7, #0]
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d007      	beq.n	800e960 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e950:	4b1a      	ldr	r3, [pc, #104]	; (800e9bc <prvAddCurrentTaskToDelayedList+0xb4>)
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	3304      	adds	r3, #4
 800e956:	4619      	mov	r1, r3
 800e958:	481a      	ldr	r0, [pc, #104]	; (800e9c4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800e95a:	f7fe f852 	bl	800ca02 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e95e:	e026      	b.n	800e9ae <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e960:	68fa      	ldr	r2, [r7, #12]
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	4413      	add	r3, r2
 800e966:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e968:	4b14      	ldr	r3, [pc, #80]	; (800e9bc <prvAddCurrentTaskToDelayedList+0xb4>)
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	68ba      	ldr	r2, [r7, #8]
 800e96e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e970:	68ba      	ldr	r2, [r7, #8]
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	429a      	cmp	r2, r3
 800e976:	d209      	bcs.n	800e98c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e978:	4b13      	ldr	r3, [pc, #76]	; (800e9c8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800e97a:	681a      	ldr	r2, [r3, #0]
 800e97c:	4b0f      	ldr	r3, [pc, #60]	; (800e9bc <prvAddCurrentTaskToDelayedList+0xb4>)
 800e97e:	681b      	ldr	r3, [r3, #0]
 800e980:	3304      	adds	r3, #4
 800e982:	4619      	mov	r1, r3
 800e984:	4610      	mov	r0, r2
 800e986:	f7fe f860 	bl	800ca4a <vListInsert>
}
 800e98a:	e010      	b.n	800e9ae <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e98c:	4b0f      	ldr	r3, [pc, #60]	; (800e9cc <prvAddCurrentTaskToDelayedList+0xc4>)
 800e98e:	681a      	ldr	r2, [r3, #0]
 800e990:	4b0a      	ldr	r3, [pc, #40]	; (800e9bc <prvAddCurrentTaskToDelayedList+0xb4>)
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	3304      	adds	r3, #4
 800e996:	4619      	mov	r1, r3
 800e998:	4610      	mov	r0, r2
 800e99a:	f7fe f856 	bl	800ca4a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e99e:	4b0c      	ldr	r3, [pc, #48]	; (800e9d0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e9a0:	681b      	ldr	r3, [r3, #0]
 800e9a2:	68ba      	ldr	r2, [r7, #8]
 800e9a4:	429a      	cmp	r2, r3
 800e9a6:	d202      	bcs.n	800e9ae <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800e9a8:	4a09      	ldr	r2, [pc, #36]	; (800e9d0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e9aa:	68bb      	ldr	r3, [r7, #8]
 800e9ac:	6013      	str	r3, [r2, #0]
}
 800e9ae:	bf00      	nop
 800e9b0:	3710      	adds	r7, #16
 800e9b2:	46bd      	mov	sp, r7
 800e9b4:	bd80      	pop	{r7, pc}
 800e9b6:	bf00      	nop
 800e9b8:	200003d0 	.word	0x200003d0
 800e9bc:	200002cc 	.word	0x200002cc
 800e9c0:	200003d4 	.word	0x200003d4
 800e9c4:	200003b8 	.word	0x200003b8
 800e9c8:	20000388 	.word	0x20000388
 800e9cc:	20000384 	.word	0x20000384
 800e9d0:	200003ec 	.word	0x200003ec

0800e9d4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e9d4:	b480      	push	{r7}
 800e9d6:	b085      	sub	sp, #20
 800e9d8:	af00      	add	r7, sp, #0
 800e9da:	60f8      	str	r0, [r7, #12]
 800e9dc:	60b9      	str	r1, [r7, #8]
 800e9de:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e9e0:	68fb      	ldr	r3, [r7, #12]
 800e9e2:	3b04      	subs	r3, #4
 800e9e4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e9e6:	68fb      	ldr	r3, [r7, #12]
 800e9e8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e9ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	3b04      	subs	r3, #4
 800e9f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e9f4:	68bb      	ldr	r3, [r7, #8]
 800e9f6:	f023 0201 	bic.w	r2, r3, #1
 800e9fa:	68fb      	ldr	r3, [r7, #12]
 800e9fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e9fe:	68fb      	ldr	r3, [r7, #12]
 800ea00:	3b04      	subs	r3, #4
 800ea02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ea04:	4a0c      	ldr	r2, [pc, #48]	; (800ea38 <pxPortInitialiseStack+0x64>)
 800ea06:	68fb      	ldr	r3, [r7, #12]
 800ea08:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ea0a:	68fb      	ldr	r3, [r7, #12]
 800ea0c:	3b14      	subs	r3, #20
 800ea0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ea10:	687a      	ldr	r2, [r7, #4]
 800ea12:	68fb      	ldr	r3, [r7, #12]
 800ea14:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ea16:	68fb      	ldr	r3, [r7, #12]
 800ea18:	3b04      	subs	r3, #4
 800ea1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ea1c:	68fb      	ldr	r3, [r7, #12]
 800ea1e:	f06f 0202 	mvn.w	r2, #2
 800ea22:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ea24:	68fb      	ldr	r3, [r7, #12]
 800ea26:	3b20      	subs	r3, #32
 800ea28:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ea2a:	68fb      	ldr	r3, [r7, #12]
}
 800ea2c:	4618      	mov	r0, r3
 800ea2e:	3714      	adds	r7, #20
 800ea30:	46bd      	mov	sp, r7
 800ea32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea36:	4770      	bx	lr
 800ea38:	0800ea3d 	.word	0x0800ea3d

0800ea3c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ea3c:	b480      	push	{r7}
 800ea3e:	b085      	sub	sp, #20
 800ea40:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ea42:	2300      	movs	r3, #0
 800ea44:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ea46:	4b13      	ldr	r3, [pc, #76]	; (800ea94 <prvTaskExitError+0x58>)
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea4e:	d00b      	beq.n	800ea68 <prvTaskExitError+0x2c>
 800ea50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea54:	b672      	cpsid	i
 800ea56:	f383 8811 	msr	BASEPRI, r3
 800ea5a:	f3bf 8f6f 	isb	sy
 800ea5e:	f3bf 8f4f 	dsb	sy
 800ea62:	b662      	cpsie	i
 800ea64:	60fb      	str	r3, [r7, #12]
 800ea66:	e7fe      	b.n	800ea66 <prvTaskExitError+0x2a>
 800ea68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea6c:	b672      	cpsid	i
 800ea6e:	f383 8811 	msr	BASEPRI, r3
 800ea72:	f3bf 8f6f 	isb	sy
 800ea76:	f3bf 8f4f 	dsb	sy
 800ea7a:	b662      	cpsie	i
 800ea7c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ea7e:	bf00      	nop
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	d0fc      	beq.n	800ea80 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ea86:	bf00      	nop
 800ea88:	3714      	adds	r7, #20
 800ea8a:	46bd      	mov	sp, r7
 800ea8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea90:	4770      	bx	lr
 800ea92:	bf00      	nop
 800ea94:	2000001c 	.word	0x2000001c
	...

0800eaa0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800eaa0:	4b07      	ldr	r3, [pc, #28]	; (800eac0 <pxCurrentTCBConst2>)
 800eaa2:	6819      	ldr	r1, [r3, #0]
 800eaa4:	6808      	ldr	r0, [r1, #0]
 800eaa6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eaaa:	f380 8809 	msr	PSP, r0
 800eaae:	f3bf 8f6f 	isb	sy
 800eab2:	f04f 0000 	mov.w	r0, #0
 800eab6:	f380 8811 	msr	BASEPRI, r0
 800eaba:	4770      	bx	lr
 800eabc:	f3af 8000 	nop.w

0800eac0 <pxCurrentTCBConst2>:
 800eac0:	200002cc 	.word	0x200002cc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800eac4:	bf00      	nop
 800eac6:	bf00      	nop

0800eac8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800eac8:	4808      	ldr	r0, [pc, #32]	; (800eaec <prvPortStartFirstTask+0x24>)
 800eaca:	6800      	ldr	r0, [r0, #0]
 800eacc:	6800      	ldr	r0, [r0, #0]
 800eace:	f380 8808 	msr	MSP, r0
 800ead2:	f04f 0000 	mov.w	r0, #0
 800ead6:	f380 8814 	msr	CONTROL, r0
 800eada:	b662      	cpsie	i
 800eadc:	b661      	cpsie	f
 800eade:	f3bf 8f4f 	dsb	sy
 800eae2:	f3bf 8f6f 	isb	sy
 800eae6:	df00      	svc	0
 800eae8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800eaea:	bf00      	nop
 800eaec:	e000ed08 	.word	0xe000ed08

0800eaf0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800eaf0:	b580      	push	{r7, lr}
 800eaf2:	b084      	sub	sp, #16
 800eaf4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800eaf6:	4b36      	ldr	r3, [pc, #216]	; (800ebd0 <xPortStartScheduler+0xe0>)
 800eaf8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800eafa:	68fb      	ldr	r3, [r7, #12]
 800eafc:	781b      	ldrb	r3, [r3, #0]
 800eafe:	b2db      	uxtb	r3, r3
 800eb00:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800eb02:	68fb      	ldr	r3, [r7, #12]
 800eb04:	22ff      	movs	r2, #255	; 0xff
 800eb06:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800eb08:	68fb      	ldr	r3, [r7, #12]
 800eb0a:	781b      	ldrb	r3, [r3, #0]
 800eb0c:	b2db      	uxtb	r3, r3
 800eb0e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800eb10:	78fb      	ldrb	r3, [r7, #3]
 800eb12:	b2db      	uxtb	r3, r3
 800eb14:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800eb18:	b2da      	uxtb	r2, r3
 800eb1a:	4b2e      	ldr	r3, [pc, #184]	; (800ebd4 <xPortStartScheduler+0xe4>)
 800eb1c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800eb1e:	4b2e      	ldr	r3, [pc, #184]	; (800ebd8 <xPortStartScheduler+0xe8>)
 800eb20:	2207      	movs	r2, #7
 800eb22:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800eb24:	e009      	b.n	800eb3a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800eb26:	4b2c      	ldr	r3, [pc, #176]	; (800ebd8 <xPortStartScheduler+0xe8>)
 800eb28:	681b      	ldr	r3, [r3, #0]
 800eb2a:	3b01      	subs	r3, #1
 800eb2c:	4a2a      	ldr	r2, [pc, #168]	; (800ebd8 <xPortStartScheduler+0xe8>)
 800eb2e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800eb30:	78fb      	ldrb	r3, [r7, #3]
 800eb32:	b2db      	uxtb	r3, r3
 800eb34:	005b      	lsls	r3, r3, #1
 800eb36:	b2db      	uxtb	r3, r3
 800eb38:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800eb3a:	78fb      	ldrb	r3, [r7, #3]
 800eb3c:	b2db      	uxtb	r3, r3
 800eb3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eb42:	2b80      	cmp	r3, #128	; 0x80
 800eb44:	d0ef      	beq.n	800eb26 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800eb46:	4b24      	ldr	r3, [pc, #144]	; (800ebd8 <xPortStartScheduler+0xe8>)
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	f1c3 0307 	rsb	r3, r3, #7
 800eb4e:	2b04      	cmp	r3, #4
 800eb50:	d00b      	beq.n	800eb6a <xPortStartScheduler+0x7a>
 800eb52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb56:	b672      	cpsid	i
 800eb58:	f383 8811 	msr	BASEPRI, r3
 800eb5c:	f3bf 8f6f 	isb	sy
 800eb60:	f3bf 8f4f 	dsb	sy
 800eb64:	b662      	cpsie	i
 800eb66:	60bb      	str	r3, [r7, #8]
 800eb68:	e7fe      	b.n	800eb68 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800eb6a:	4b1b      	ldr	r3, [pc, #108]	; (800ebd8 <xPortStartScheduler+0xe8>)
 800eb6c:	681b      	ldr	r3, [r3, #0]
 800eb6e:	021b      	lsls	r3, r3, #8
 800eb70:	4a19      	ldr	r2, [pc, #100]	; (800ebd8 <xPortStartScheduler+0xe8>)
 800eb72:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800eb74:	4b18      	ldr	r3, [pc, #96]	; (800ebd8 <xPortStartScheduler+0xe8>)
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800eb7c:	4a16      	ldr	r2, [pc, #88]	; (800ebd8 <xPortStartScheduler+0xe8>)
 800eb7e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	b2da      	uxtb	r2, r3
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800eb88:	4b14      	ldr	r3, [pc, #80]	; (800ebdc <xPortStartScheduler+0xec>)
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	4a13      	ldr	r2, [pc, #76]	; (800ebdc <xPortStartScheduler+0xec>)
 800eb8e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800eb92:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800eb94:	4b11      	ldr	r3, [pc, #68]	; (800ebdc <xPortStartScheduler+0xec>)
 800eb96:	681b      	ldr	r3, [r3, #0]
 800eb98:	4a10      	ldr	r2, [pc, #64]	; (800ebdc <xPortStartScheduler+0xec>)
 800eb9a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800eb9e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800eba0:	f000 f8d4 	bl	800ed4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800eba4:	4b0e      	ldr	r3, [pc, #56]	; (800ebe0 <xPortStartScheduler+0xf0>)
 800eba6:	2200      	movs	r2, #0
 800eba8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ebaa:	f000 f8f3 	bl	800ed94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ebae:	4b0d      	ldr	r3, [pc, #52]	; (800ebe4 <xPortStartScheduler+0xf4>)
 800ebb0:	681b      	ldr	r3, [r3, #0]
 800ebb2:	4a0c      	ldr	r2, [pc, #48]	; (800ebe4 <xPortStartScheduler+0xf4>)
 800ebb4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ebb8:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ebba:	f7ff ff85 	bl	800eac8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ebbe:	f7ff fa8d 	bl	800e0dc <vTaskSwitchContext>
	prvTaskExitError();
 800ebc2:	f7ff ff3b 	bl	800ea3c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ebc6:	2300      	movs	r3, #0
}
 800ebc8:	4618      	mov	r0, r3
 800ebca:	3710      	adds	r7, #16
 800ebcc:	46bd      	mov	sp, r7
 800ebce:	bd80      	pop	{r7, pc}
 800ebd0:	e000e400 	.word	0xe000e400
 800ebd4:	200003f8 	.word	0x200003f8
 800ebd8:	200003fc 	.word	0x200003fc
 800ebdc:	e000ed20 	.word	0xe000ed20
 800ebe0:	2000001c 	.word	0x2000001c
 800ebe4:	e000ef34 	.word	0xe000ef34

0800ebe8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ebe8:	b480      	push	{r7}
 800ebea:	b083      	sub	sp, #12
 800ebec:	af00      	add	r7, sp, #0
 800ebee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebf2:	b672      	cpsid	i
 800ebf4:	f383 8811 	msr	BASEPRI, r3
 800ebf8:	f3bf 8f6f 	isb	sy
 800ebfc:	f3bf 8f4f 	dsb	sy
 800ec00:	b662      	cpsie	i
 800ec02:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ec04:	4b0f      	ldr	r3, [pc, #60]	; (800ec44 <vPortEnterCritical+0x5c>)
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	3301      	adds	r3, #1
 800ec0a:	4a0e      	ldr	r2, [pc, #56]	; (800ec44 <vPortEnterCritical+0x5c>)
 800ec0c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ec0e:	4b0d      	ldr	r3, [pc, #52]	; (800ec44 <vPortEnterCritical+0x5c>)
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	2b01      	cmp	r3, #1
 800ec14:	d110      	bne.n	800ec38 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ec16:	4b0c      	ldr	r3, [pc, #48]	; (800ec48 <vPortEnterCritical+0x60>)
 800ec18:	681b      	ldr	r3, [r3, #0]
 800ec1a:	b2db      	uxtb	r3, r3
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d00b      	beq.n	800ec38 <vPortEnterCritical+0x50>
 800ec20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec24:	b672      	cpsid	i
 800ec26:	f383 8811 	msr	BASEPRI, r3
 800ec2a:	f3bf 8f6f 	isb	sy
 800ec2e:	f3bf 8f4f 	dsb	sy
 800ec32:	b662      	cpsie	i
 800ec34:	603b      	str	r3, [r7, #0]
 800ec36:	e7fe      	b.n	800ec36 <vPortEnterCritical+0x4e>
	}
}
 800ec38:	bf00      	nop
 800ec3a:	370c      	adds	r7, #12
 800ec3c:	46bd      	mov	sp, r7
 800ec3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec42:	4770      	bx	lr
 800ec44:	2000001c 	.word	0x2000001c
 800ec48:	e000ed04 	.word	0xe000ed04

0800ec4c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ec4c:	b480      	push	{r7}
 800ec4e:	b083      	sub	sp, #12
 800ec50:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ec52:	4b12      	ldr	r3, [pc, #72]	; (800ec9c <vPortExitCritical+0x50>)
 800ec54:	681b      	ldr	r3, [r3, #0]
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	d10b      	bne.n	800ec72 <vPortExitCritical+0x26>
 800ec5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec5e:	b672      	cpsid	i
 800ec60:	f383 8811 	msr	BASEPRI, r3
 800ec64:	f3bf 8f6f 	isb	sy
 800ec68:	f3bf 8f4f 	dsb	sy
 800ec6c:	b662      	cpsie	i
 800ec6e:	607b      	str	r3, [r7, #4]
 800ec70:	e7fe      	b.n	800ec70 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 800ec72:	4b0a      	ldr	r3, [pc, #40]	; (800ec9c <vPortExitCritical+0x50>)
 800ec74:	681b      	ldr	r3, [r3, #0]
 800ec76:	3b01      	subs	r3, #1
 800ec78:	4a08      	ldr	r2, [pc, #32]	; (800ec9c <vPortExitCritical+0x50>)
 800ec7a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ec7c:	4b07      	ldr	r3, [pc, #28]	; (800ec9c <vPortExitCritical+0x50>)
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d104      	bne.n	800ec8e <vPortExitCritical+0x42>
 800ec84:	2300      	movs	r3, #0
 800ec86:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ec88:	683b      	ldr	r3, [r7, #0]
 800ec8a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800ec8e:	bf00      	nop
 800ec90:	370c      	adds	r7, #12
 800ec92:	46bd      	mov	sp, r7
 800ec94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec98:	4770      	bx	lr
 800ec9a:	bf00      	nop
 800ec9c:	2000001c 	.word	0x2000001c

0800eca0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800eca0:	f3ef 8009 	mrs	r0, PSP
 800eca4:	f3bf 8f6f 	isb	sy
 800eca8:	4b15      	ldr	r3, [pc, #84]	; (800ed00 <pxCurrentTCBConst>)
 800ecaa:	681a      	ldr	r2, [r3, #0]
 800ecac:	f01e 0f10 	tst.w	lr, #16
 800ecb0:	bf08      	it	eq
 800ecb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ecb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecba:	6010      	str	r0, [r2, #0]
 800ecbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ecc0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ecc4:	b672      	cpsid	i
 800ecc6:	f380 8811 	msr	BASEPRI, r0
 800ecca:	f3bf 8f4f 	dsb	sy
 800ecce:	f3bf 8f6f 	isb	sy
 800ecd2:	b662      	cpsie	i
 800ecd4:	f7ff fa02 	bl	800e0dc <vTaskSwitchContext>
 800ecd8:	f04f 0000 	mov.w	r0, #0
 800ecdc:	f380 8811 	msr	BASEPRI, r0
 800ece0:	bc09      	pop	{r0, r3}
 800ece2:	6819      	ldr	r1, [r3, #0]
 800ece4:	6808      	ldr	r0, [r1, #0]
 800ece6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecea:	f01e 0f10 	tst.w	lr, #16
 800ecee:	bf08      	it	eq
 800ecf0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ecf4:	f380 8809 	msr	PSP, r0
 800ecf8:	f3bf 8f6f 	isb	sy
 800ecfc:	4770      	bx	lr
 800ecfe:	bf00      	nop

0800ed00 <pxCurrentTCBConst>:
 800ed00:	200002cc 	.word	0x200002cc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ed04:	bf00      	nop
 800ed06:	bf00      	nop

0800ed08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ed08:	b580      	push	{r7, lr}
 800ed0a:	b082      	sub	sp, #8
 800ed0c:	af00      	add	r7, sp, #0
	__asm volatile
 800ed0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed12:	b672      	cpsid	i
 800ed14:	f383 8811 	msr	BASEPRI, r3
 800ed18:	f3bf 8f6f 	isb	sy
 800ed1c:	f3bf 8f4f 	dsb	sy
 800ed20:	b662      	cpsie	i
 800ed22:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ed24:	f7ff f920 	bl	800df68 <xTaskIncrementTick>
 800ed28:	4603      	mov	r3, r0
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d003      	beq.n	800ed36 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ed2e:	4b06      	ldr	r3, [pc, #24]	; (800ed48 <SysTick_Handler+0x40>)
 800ed30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ed34:	601a      	str	r2, [r3, #0]
 800ed36:	2300      	movs	r3, #0
 800ed38:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ed3a:	683b      	ldr	r3, [r7, #0]
 800ed3c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800ed40:	bf00      	nop
 800ed42:	3708      	adds	r7, #8
 800ed44:	46bd      	mov	sp, r7
 800ed46:	bd80      	pop	{r7, pc}
 800ed48:	e000ed04 	.word	0xe000ed04

0800ed4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ed4c:	b480      	push	{r7}
 800ed4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ed50:	4b0b      	ldr	r3, [pc, #44]	; (800ed80 <vPortSetupTimerInterrupt+0x34>)
 800ed52:	2200      	movs	r2, #0
 800ed54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ed56:	4b0b      	ldr	r3, [pc, #44]	; (800ed84 <vPortSetupTimerInterrupt+0x38>)
 800ed58:	2200      	movs	r2, #0
 800ed5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ed5c:	4b0a      	ldr	r3, [pc, #40]	; (800ed88 <vPortSetupTimerInterrupt+0x3c>)
 800ed5e:	681b      	ldr	r3, [r3, #0]
 800ed60:	4a0a      	ldr	r2, [pc, #40]	; (800ed8c <vPortSetupTimerInterrupt+0x40>)
 800ed62:	fba2 2303 	umull	r2, r3, r2, r3
 800ed66:	099b      	lsrs	r3, r3, #6
 800ed68:	4a09      	ldr	r2, [pc, #36]	; (800ed90 <vPortSetupTimerInterrupt+0x44>)
 800ed6a:	3b01      	subs	r3, #1
 800ed6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ed6e:	4b04      	ldr	r3, [pc, #16]	; (800ed80 <vPortSetupTimerInterrupt+0x34>)
 800ed70:	2207      	movs	r2, #7
 800ed72:	601a      	str	r2, [r3, #0]
}
 800ed74:	bf00      	nop
 800ed76:	46bd      	mov	sp, r7
 800ed78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed7c:	4770      	bx	lr
 800ed7e:	bf00      	nop
 800ed80:	e000e010 	.word	0xe000e010
 800ed84:	e000e018 	.word	0xe000e018
 800ed88:	20000010 	.word	0x20000010
 800ed8c:	10624dd3 	.word	0x10624dd3
 800ed90:	e000e014 	.word	0xe000e014

0800ed94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ed94:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800eda4 <vPortEnableVFP+0x10>
 800ed98:	6801      	ldr	r1, [r0, #0]
 800ed9a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ed9e:	6001      	str	r1, [r0, #0]
 800eda0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800eda2:	bf00      	nop
 800eda4:	e000ed88 	.word	0xe000ed88

0800eda8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800eda8:	b480      	push	{r7}
 800edaa:	b085      	sub	sp, #20
 800edac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800edae:	f3ef 8305 	mrs	r3, IPSR
 800edb2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800edb4:	68fb      	ldr	r3, [r7, #12]
 800edb6:	2b0f      	cmp	r3, #15
 800edb8:	d915      	bls.n	800ede6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800edba:	4a18      	ldr	r2, [pc, #96]	; (800ee1c <vPortValidateInterruptPriority+0x74>)
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	4413      	add	r3, r2
 800edc0:	781b      	ldrb	r3, [r3, #0]
 800edc2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800edc4:	4b16      	ldr	r3, [pc, #88]	; (800ee20 <vPortValidateInterruptPriority+0x78>)
 800edc6:	781b      	ldrb	r3, [r3, #0]
 800edc8:	7afa      	ldrb	r2, [r7, #11]
 800edca:	429a      	cmp	r2, r3
 800edcc:	d20b      	bcs.n	800ede6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800edce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edd2:	b672      	cpsid	i
 800edd4:	f383 8811 	msr	BASEPRI, r3
 800edd8:	f3bf 8f6f 	isb	sy
 800eddc:	f3bf 8f4f 	dsb	sy
 800ede0:	b662      	cpsie	i
 800ede2:	607b      	str	r3, [r7, #4]
 800ede4:	e7fe      	b.n	800ede4 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ede6:	4b0f      	ldr	r3, [pc, #60]	; (800ee24 <vPortValidateInterruptPriority+0x7c>)
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800edee:	4b0e      	ldr	r3, [pc, #56]	; (800ee28 <vPortValidateInterruptPriority+0x80>)
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	429a      	cmp	r2, r3
 800edf4:	d90b      	bls.n	800ee0e <vPortValidateInterruptPriority+0x66>
 800edf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edfa:	b672      	cpsid	i
 800edfc:	f383 8811 	msr	BASEPRI, r3
 800ee00:	f3bf 8f6f 	isb	sy
 800ee04:	f3bf 8f4f 	dsb	sy
 800ee08:	b662      	cpsie	i
 800ee0a:	603b      	str	r3, [r7, #0]
 800ee0c:	e7fe      	b.n	800ee0c <vPortValidateInterruptPriority+0x64>
	}
 800ee0e:	bf00      	nop
 800ee10:	3714      	adds	r7, #20
 800ee12:	46bd      	mov	sp, r7
 800ee14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee18:	4770      	bx	lr
 800ee1a:	bf00      	nop
 800ee1c:	e000e3f0 	.word	0xe000e3f0
 800ee20:	200003f8 	.word	0x200003f8
 800ee24:	e000ed0c 	.word	0xe000ed0c
 800ee28:	200003fc 	.word	0x200003fc

0800ee2c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ee2c:	b580      	push	{r7, lr}
 800ee2e:	b08a      	sub	sp, #40	; 0x28
 800ee30:	af00      	add	r7, sp, #0
 800ee32:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ee34:	2300      	movs	r3, #0
 800ee36:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ee38:	f7fe ffc8 	bl	800ddcc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ee3c:	4b5a      	ldr	r3, [pc, #360]	; (800efa8 <pvPortMalloc+0x17c>)
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d101      	bne.n	800ee48 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ee44:	f000 f916 	bl	800f074 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ee48:	4b58      	ldr	r3, [pc, #352]	; (800efac <pvPortMalloc+0x180>)
 800ee4a:	681a      	ldr	r2, [r3, #0]
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	4013      	ands	r3, r2
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	f040 8090 	bne.w	800ef76 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d01e      	beq.n	800ee9a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800ee5c:	2208      	movs	r2, #8
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	4413      	add	r3, r2
 800ee62:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	f003 0307 	and.w	r3, r3, #7
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d015      	beq.n	800ee9a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	f023 0307 	bic.w	r3, r3, #7
 800ee74:	3308      	adds	r3, #8
 800ee76:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	f003 0307 	and.w	r3, r3, #7
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	d00b      	beq.n	800ee9a <pvPortMalloc+0x6e>
 800ee82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee86:	b672      	cpsid	i
 800ee88:	f383 8811 	msr	BASEPRI, r3
 800ee8c:	f3bf 8f6f 	isb	sy
 800ee90:	f3bf 8f4f 	dsb	sy
 800ee94:	b662      	cpsie	i
 800ee96:	617b      	str	r3, [r7, #20]
 800ee98:	e7fe      	b.n	800ee98 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d06a      	beq.n	800ef76 <pvPortMalloc+0x14a>
 800eea0:	4b43      	ldr	r3, [pc, #268]	; (800efb0 <pvPortMalloc+0x184>)
 800eea2:	681b      	ldr	r3, [r3, #0]
 800eea4:	687a      	ldr	r2, [r7, #4]
 800eea6:	429a      	cmp	r2, r3
 800eea8:	d865      	bhi.n	800ef76 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800eeaa:	4b42      	ldr	r3, [pc, #264]	; (800efb4 <pvPortMalloc+0x188>)
 800eeac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800eeae:	4b41      	ldr	r3, [pc, #260]	; (800efb4 <pvPortMalloc+0x188>)
 800eeb0:	681b      	ldr	r3, [r3, #0]
 800eeb2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800eeb4:	e004      	b.n	800eec0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800eeb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eeb8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800eeba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eebc:	681b      	ldr	r3, [r3, #0]
 800eebe:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800eec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eec2:	685b      	ldr	r3, [r3, #4]
 800eec4:	687a      	ldr	r2, [r7, #4]
 800eec6:	429a      	cmp	r2, r3
 800eec8:	d903      	bls.n	800eed2 <pvPortMalloc+0xa6>
 800eeca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	2b00      	cmp	r3, #0
 800eed0:	d1f1      	bne.n	800eeb6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800eed2:	4b35      	ldr	r3, [pc, #212]	; (800efa8 <pvPortMalloc+0x17c>)
 800eed4:	681b      	ldr	r3, [r3, #0]
 800eed6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eed8:	429a      	cmp	r2, r3
 800eeda:	d04c      	beq.n	800ef76 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800eedc:	6a3b      	ldr	r3, [r7, #32]
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	2208      	movs	r2, #8
 800eee2:	4413      	add	r3, r2
 800eee4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800eee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eee8:	681a      	ldr	r2, [r3, #0]
 800eeea:	6a3b      	ldr	r3, [r7, #32]
 800eeec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800eeee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eef0:	685a      	ldr	r2, [r3, #4]
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	1ad2      	subs	r2, r2, r3
 800eef6:	2308      	movs	r3, #8
 800eef8:	005b      	lsls	r3, r3, #1
 800eefa:	429a      	cmp	r2, r3
 800eefc:	d920      	bls.n	800ef40 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800eefe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	4413      	add	r3, r2
 800ef04:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ef06:	69bb      	ldr	r3, [r7, #24]
 800ef08:	f003 0307 	and.w	r3, r3, #7
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d00b      	beq.n	800ef28 <pvPortMalloc+0xfc>
 800ef10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef14:	b672      	cpsid	i
 800ef16:	f383 8811 	msr	BASEPRI, r3
 800ef1a:	f3bf 8f6f 	isb	sy
 800ef1e:	f3bf 8f4f 	dsb	sy
 800ef22:	b662      	cpsie	i
 800ef24:	613b      	str	r3, [r7, #16]
 800ef26:	e7fe      	b.n	800ef26 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ef28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef2a:	685a      	ldr	r2, [r3, #4]
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	1ad2      	subs	r2, r2, r3
 800ef30:	69bb      	ldr	r3, [r7, #24]
 800ef32:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ef34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef36:	687a      	ldr	r2, [r7, #4]
 800ef38:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ef3a:	69b8      	ldr	r0, [r7, #24]
 800ef3c:	f000 f8fc 	bl	800f138 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ef40:	4b1b      	ldr	r3, [pc, #108]	; (800efb0 <pvPortMalloc+0x184>)
 800ef42:	681a      	ldr	r2, [r3, #0]
 800ef44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef46:	685b      	ldr	r3, [r3, #4]
 800ef48:	1ad3      	subs	r3, r2, r3
 800ef4a:	4a19      	ldr	r2, [pc, #100]	; (800efb0 <pvPortMalloc+0x184>)
 800ef4c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ef4e:	4b18      	ldr	r3, [pc, #96]	; (800efb0 <pvPortMalloc+0x184>)
 800ef50:	681a      	ldr	r2, [r3, #0]
 800ef52:	4b19      	ldr	r3, [pc, #100]	; (800efb8 <pvPortMalloc+0x18c>)
 800ef54:	681b      	ldr	r3, [r3, #0]
 800ef56:	429a      	cmp	r2, r3
 800ef58:	d203      	bcs.n	800ef62 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ef5a:	4b15      	ldr	r3, [pc, #84]	; (800efb0 <pvPortMalloc+0x184>)
 800ef5c:	681b      	ldr	r3, [r3, #0]
 800ef5e:	4a16      	ldr	r2, [pc, #88]	; (800efb8 <pvPortMalloc+0x18c>)
 800ef60:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ef62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef64:	685a      	ldr	r2, [r3, #4]
 800ef66:	4b11      	ldr	r3, [pc, #68]	; (800efac <pvPortMalloc+0x180>)
 800ef68:	681b      	ldr	r3, [r3, #0]
 800ef6a:	431a      	orrs	r2, r3
 800ef6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef6e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ef70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef72:	2200      	movs	r2, #0
 800ef74:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ef76:	f7fe ff37 	bl	800dde8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ef7a:	69fb      	ldr	r3, [r7, #28]
 800ef7c:	f003 0307 	and.w	r3, r3, #7
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d00b      	beq.n	800ef9c <pvPortMalloc+0x170>
 800ef84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef88:	b672      	cpsid	i
 800ef8a:	f383 8811 	msr	BASEPRI, r3
 800ef8e:	f3bf 8f6f 	isb	sy
 800ef92:	f3bf 8f4f 	dsb	sy
 800ef96:	b662      	cpsie	i
 800ef98:	60fb      	str	r3, [r7, #12]
 800ef9a:	e7fe      	b.n	800ef9a <pvPortMalloc+0x16e>
	return pvReturn;
 800ef9c:	69fb      	ldr	r3, [r7, #28]
}
 800ef9e:	4618      	mov	r0, r3
 800efa0:	3728      	adds	r7, #40	; 0x28
 800efa2:	46bd      	mov	sp, r7
 800efa4:	bd80      	pop	{r7, pc}
 800efa6:	bf00      	nop
 800efa8:	20004008 	.word	0x20004008
 800efac:	20004014 	.word	0x20004014
 800efb0:	2000400c 	.word	0x2000400c
 800efb4:	20004000 	.word	0x20004000
 800efb8:	20004010 	.word	0x20004010

0800efbc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800efbc:	b580      	push	{r7, lr}
 800efbe:	b086      	sub	sp, #24
 800efc0:	af00      	add	r7, sp, #0
 800efc2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d04a      	beq.n	800f064 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800efce:	2308      	movs	r3, #8
 800efd0:	425b      	negs	r3, r3
 800efd2:	697a      	ldr	r2, [r7, #20]
 800efd4:	4413      	add	r3, r2
 800efd6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800efd8:	697b      	ldr	r3, [r7, #20]
 800efda:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800efdc:	693b      	ldr	r3, [r7, #16]
 800efde:	685a      	ldr	r2, [r3, #4]
 800efe0:	4b22      	ldr	r3, [pc, #136]	; (800f06c <vPortFree+0xb0>)
 800efe2:	681b      	ldr	r3, [r3, #0]
 800efe4:	4013      	ands	r3, r2
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	d10b      	bne.n	800f002 <vPortFree+0x46>
 800efea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efee:	b672      	cpsid	i
 800eff0:	f383 8811 	msr	BASEPRI, r3
 800eff4:	f3bf 8f6f 	isb	sy
 800eff8:	f3bf 8f4f 	dsb	sy
 800effc:	b662      	cpsie	i
 800effe:	60fb      	str	r3, [r7, #12]
 800f000:	e7fe      	b.n	800f000 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f002:	693b      	ldr	r3, [r7, #16]
 800f004:	681b      	ldr	r3, [r3, #0]
 800f006:	2b00      	cmp	r3, #0
 800f008:	d00b      	beq.n	800f022 <vPortFree+0x66>
 800f00a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f00e:	b672      	cpsid	i
 800f010:	f383 8811 	msr	BASEPRI, r3
 800f014:	f3bf 8f6f 	isb	sy
 800f018:	f3bf 8f4f 	dsb	sy
 800f01c:	b662      	cpsie	i
 800f01e:	60bb      	str	r3, [r7, #8]
 800f020:	e7fe      	b.n	800f020 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f022:	693b      	ldr	r3, [r7, #16]
 800f024:	685a      	ldr	r2, [r3, #4]
 800f026:	4b11      	ldr	r3, [pc, #68]	; (800f06c <vPortFree+0xb0>)
 800f028:	681b      	ldr	r3, [r3, #0]
 800f02a:	4013      	ands	r3, r2
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	d019      	beq.n	800f064 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f030:	693b      	ldr	r3, [r7, #16]
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	2b00      	cmp	r3, #0
 800f036:	d115      	bne.n	800f064 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f038:	693b      	ldr	r3, [r7, #16]
 800f03a:	685a      	ldr	r2, [r3, #4]
 800f03c:	4b0b      	ldr	r3, [pc, #44]	; (800f06c <vPortFree+0xb0>)
 800f03e:	681b      	ldr	r3, [r3, #0]
 800f040:	43db      	mvns	r3, r3
 800f042:	401a      	ands	r2, r3
 800f044:	693b      	ldr	r3, [r7, #16]
 800f046:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f048:	f7fe fec0 	bl	800ddcc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f04c:	693b      	ldr	r3, [r7, #16]
 800f04e:	685a      	ldr	r2, [r3, #4]
 800f050:	4b07      	ldr	r3, [pc, #28]	; (800f070 <vPortFree+0xb4>)
 800f052:	681b      	ldr	r3, [r3, #0]
 800f054:	4413      	add	r3, r2
 800f056:	4a06      	ldr	r2, [pc, #24]	; (800f070 <vPortFree+0xb4>)
 800f058:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f05a:	6938      	ldr	r0, [r7, #16]
 800f05c:	f000 f86c 	bl	800f138 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800f060:	f7fe fec2 	bl	800dde8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f064:	bf00      	nop
 800f066:	3718      	adds	r7, #24
 800f068:	46bd      	mov	sp, r7
 800f06a:	bd80      	pop	{r7, pc}
 800f06c:	20004014 	.word	0x20004014
 800f070:	2000400c 	.word	0x2000400c

0800f074 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f074:	b480      	push	{r7}
 800f076:	b085      	sub	sp, #20
 800f078:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f07a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800f07e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f080:	4b27      	ldr	r3, [pc, #156]	; (800f120 <prvHeapInit+0xac>)
 800f082:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f084:	68fb      	ldr	r3, [r7, #12]
 800f086:	f003 0307 	and.w	r3, r3, #7
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d00c      	beq.n	800f0a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f08e:	68fb      	ldr	r3, [r7, #12]
 800f090:	3307      	adds	r3, #7
 800f092:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f094:	68fb      	ldr	r3, [r7, #12]
 800f096:	f023 0307 	bic.w	r3, r3, #7
 800f09a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f09c:	68ba      	ldr	r2, [r7, #8]
 800f09e:	68fb      	ldr	r3, [r7, #12]
 800f0a0:	1ad3      	subs	r3, r2, r3
 800f0a2:	4a1f      	ldr	r2, [pc, #124]	; (800f120 <prvHeapInit+0xac>)
 800f0a4:	4413      	add	r3, r2
 800f0a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f0a8:	68fb      	ldr	r3, [r7, #12]
 800f0aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f0ac:	4a1d      	ldr	r2, [pc, #116]	; (800f124 <prvHeapInit+0xb0>)
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f0b2:	4b1c      	ldr	r3, [pc, #112]	; (800f124 <prvHeapInit+0xb0>)
 800f0b4:	2200      	movs	r2, #0
 800f0b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	68ba      	ldr	r2, [r7, #8]
 800f0bc:	4413      	add	r3, r2
 800f0be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f0c0:	2208      	movs	r2, #8
 800f0c2:	68fb      	ldr	r3, [r7, #12]
 800f0c4:	1a9b      	subs	r3, r3, r2
 800f0c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f0c8:	68fb      	ldr	r3, [r7, #12]
 800f0ca:	f023 0307 	bic.w	r3, r3, #7
 800f0ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f0d0:	68fb      	ldr	r3, [r7, #12]
 800f0d2:	4a15      	ldr	r2, [pc, #84]	; (800f128 <prvHeapInit+0xb4>)
 800f0d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f0d6:	4b14      	ldr	r3, [pc, #80]	; (800f128 <prvHeapInit+0xb4>)
 800f0d8:	681b      	ldr	r3, [r3, #0]
 800f0da:	2200      	movs	r2, #0
 800f0dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f0de:	4b12      	ldr	r3, [pc, #72]	; (800f128 <prvHeapInit+0xb4>)
 800f0e0:	681b      	ldr	r3, [r3, #0]
 800f0e2:	2200      	movs	r2, #0
 800f0e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f0ea:	683b      	ldr	r3, [r7, #0]
 800f0ec:	68fa      	ldr	r2, [r7, #12]
 800f0ee:	1ad2      	subs	r2, r2, r3
 800f0f0:	683b      	ldr	r3, [r7, #0]
 800f0f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f0f4:	4b0c      	ldr	r3, [pc, #48]	; (800f128 <prvHeapInit+0xb4>)
 800f0f6:	681a      	ldr	r2, [r3, #0]
 800f0f8:	683b      	ldr	r3, [r7, #0]
 800f0fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f0fc:	683b      	ldr	r3, [r7, #0]
 800f0fe:	685b      	ldr	r3, [r3, #4]
 800f100:	4a0a      	ldr	r2, [pc, #40]	; (800f12c <prvHeapInit+0xb8>)
 800f102:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f104:	683b      	ldr	r3, [r7, #0]
 800f106:	685b      	ldr	r3, [r3, #4]
 800f108:	4a09      	ldr	r2, [pc, #36]	; (800f130 <prvHeapInit+0xbc>)
 800f10a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f10c:	4b09      	ldr	r3, [pc, #36]	; (800f134 <prvHeapInit+0xc0>)
 800f10e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f112:	601a      	str	r2, [r3, #0]
}
 800f114:	bf00      	nop
 800f116:	3714      	adds	r7, #20
 800f118:	46bd      	mov	sp, r7
 800f11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f11e:	4770      	bx	lr
 800f120:	20000400 	.word	0x20000400
 800f124:	20004000 	.word	0x20004000
 800f128:	20004008 	.word	0x20004008
 800f12c:	20004010 	.word	0x20004010
 800f130:	2000400c 	.word	0x2000400c
 800f134:	20004014 	.word	0x20004014

0800f138 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f138:	b480      	push	{r7}
 800f13a:	b085      	sub	sp, #20
 800f13c:	af00      	add	r7, sp, #0
 800f13e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f140:	4b28      	ldr	r3, [pc, #160]	; (800f1e4 <prvInsertBlockIntoFreeList+0xac>)
 800f142:	60fb      	str	r3, [r7, #12]
 800f144:	e002      	b.n	800f14c <prvInsertBlockIntoFreeList+0x14>
 800f146:	68fb      	ldr	r3, [r7, #12]
 800f148:	681b      	ldr	r3, [r3, #0]
 800f14a:	60fb      	str	r3, [r7, #12]
 800f14c:	68fb      	ldr	r3, [r7, #12]
 800f14e:	681b      	ldr	r3, [r3, #0]
 800f150:	687a      	ldr	r2, [r7, #4]
 800f152:	429a      	cmp	r2, r3
 800f154:	d8f7      	bhi.n	800f146 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f156:	68fb      	ldr	r3, [r7, #12]
 800f158:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f15a:	68fb      	ldr	r3, [r7, #12]
 800f15c:	685b      	ldr	r3, [r3, #4]
 800f15e:	68ba      	ldr	r2, [r7, #8]
 800f160:	4413      	add	r3, r2
 800f162:	687a      	ldr	r2, [r7, #4]
 800f164:	429a      	cmp	r2, r3
 800f166:	d108      	bne.n	800f17a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f168:	68fb      	ldr	r3, [r7, #12]
 800f16a:	685a      	ldr	r2, [r3, #4]
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	685b      	ldr	r3, [r3, #4]
 800f170:	441a      	add	r2, r3
 800f172:	68fb      	ldr	r3, [r7, #12]
 800f174:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f176:	68fb      	ldr	r3, [r7, #12]
 800f178:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	685b      	ldr	r3, [r3, #4]
 800f182:	68ba      	ldr	r2, [r7, #8]
 800f184:	441a      	add	r2, r3
 800f186:	68fb      	ldr	r3, [r7, #12]
 800f188:	681b      	ldr	r3, [r3, #0]
 800f18a:	429a      	cmp	r2, r3
 800f18c:	d118      	bne.n	800f1c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f18e:	68fb      	ldr	r3, [r7, #12]
 800f190:	681a      	ldr	r2, [r3, #0]
 800f192:	4b15      	ldr	r3, [pc, #84]	; (800f1e8 <prvInsertBlockIntoFreeList+0xb0>)
 800f194:	681b      	ldr	r3, [r3, #0]
 800f196:	429a      	cmp	r2, r3
 800f198:	d00d      	beq.n	800f1b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	685a      	ldr	r2, [r3, #4]
 800f19e:	68fb      	ldr	r3, [r7, #12]
 800f1a0:	681b      	ldr	r3, [r3, #0]
 800f1a2:	685b      	ldr	r3, [r3, #4]
 800f1a4:	441a      	add	r2, r3
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f1aa:	68fb      	ldr	r3, [r7, #12]
 800f1ac:	681b      	ldr	r3, [r3, #0]
 800f1ae:	681a      	ldr	r2, [r3, #0]
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	601a      	str	r2, [r3, #0]
 800f1b4:	e008      	b.n	800f1c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f1b6:	4b0c      	ldr	r3, [pc, #48]	; (800f1e8 <prvInsertBlockIntoFreeList+0xb0>)
 800f1b8:	681a      	ldr	r2, [r3, #0]
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	601a      	str	r2, [r3, #0]
 800f1be:	e003      	b.n	800f1c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f1c0:	68fb      	ldr	r3, [r7, #12]
 800f1c2:	681a      	ldr	r2, [r3, #0]
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f1c8:	68fa      	ldr	r2, [r7, #12]
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	429a      	cmp	r2, r3
 800f1ce:	d002      	beq.n	800f1d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f1d0:	68fb      	ldr	r3, [r7, #12]
 800f1d2:	687a      	ldr	r2, [r7, #4]
 800f1d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f1d6:	bf00      	nop
 800f1d8:	3714      	adds	r7, #20
 800f1da:	46bd      	mov	sp, r7
 800f1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1e0:	4770      	bx	lr
 800f1e2:	bf00      	nop
 800f1e4:	20004000 	.word	0x20004000
 800f1e8:	20004008 	.word	0x20004008

0800f1ec <__libc_init_array>:
 800f1ec:	b570      	push	{r4, r5, r6, lr}
 800f1ee:	4e0d      	ldr	r6, [pc, #52]	; (800f224 <__libc_init_array+0x38>)
 800f1f0:	4c0d      	ldr	r4, [pc, #52]	; (800f228 <__libc_init_array+0x3c>)
 800f1f2:	1ba4      	subs	r4, r4, r6
 800f1f4:	10a4      	asrs	r4, r4, #2
 800f1f6:	2500      	movs	r5, #0
 800f1f8:	42a5      	cmp	r5, r4
 800f1fa:	d109      	bne.n	800f210 <__libc_init_array+0x24>
 800f1fc:	4e0b      	ldr	r6, [pc, #44]	; (800f22c <__libc_init_array+0x40>)
 800f1fe:	4c0c      	ldr	r4, [pc, #48]	; (800f230 <__libc_init_array+0x44>)
 800f200:	f000 f82c 	bl	800f25c <_init>
 800f204:	1ba4      	subs	r4, r4, r6
 800f206:	10a4      	asrs	r4, r4, #2
 800f208:	2500      	movs	r5, #0
 800f20a:	42a5      	cmp	r5, r4
 800f20c:	d105      	bne.n	800f21a <__libc_init_array+0x2e>
 800f20e:	bd70      	pop	{r4, r5, r6, pc}
 800f210:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f214:	4798      	blx	r3
 800f216:	3501      	adds	r5, #1
 800f218:	e7ee      	b.n	800f1f8 <__libc_init_array+0xc>
 800f21a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f21e:	4798      	blx	r3
 800f220:	3501      	adds	r5, #1
 800f222:	e7f2      	b.n	800f20a <__libc_init_array+0x1e>
 800f224:	0800f750 	.word	0x0800f750
 800f228:	0800f750 	.word	0x0800f750
 800f22c:	0800f750 	.word	0x0800f750
 800f230:	0800f754 	.word	0x0800f754

0800f234 <memcpy>:
 800f234:	b510      	push	{r4, lr}
 800f236:	1e43      	subs	r3, r0, #1
 800f238:	440a      	add	r2, r1
 800f23a:	4291      	cmp	r1, r2
 800f23c:	d100      	bne.n	800f240 <memcpy+0xc>
 800f23e:	bd10      	pop	{r4, pc}
 800f240:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f244:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f248:	e7f7      	b.n	800f23a <memcpy+0x6>

0800f24a <memset>:
 800f24a:	4402      	add	r2, r0
 800f24c:	4603      	mov	r3, r0
 800f24e:	4293      	cmp	r3, r2
 800f250:	d100      	bne.n	800f254 <memset+0xa>
 800f252:	4770      	bx	lr
 800f254:	f803 1b01 	strb.w	r1, [r3], #1
 800f258:	e7f9      	b.n	800f24e <memset+0x4>
	...

0800f25c <_init>:
 800f25c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f25e:	bf00      	nop
 800f260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f262:	bc08      	pop	{r3}
 800f264:	469e      	mov	lr, r3
 800f266:	4770      	bx	lr

0800f268 <_fini>:
 800f268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f26a:	bf00      	nop
 800f26c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f26e:	bc08      	pop	{r3}
 800f270:	469e      	mov	lr, r3
 800f272:	4770      	bx	lr
