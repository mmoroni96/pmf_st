
MainBoard-F767ZI_SD-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015e3c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000578  0801603c  0801603c  0002603c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080165b4  080165b4  000301ec  2**0
                  CONTENTS
  4 .ARM          00000008  080165b4  080165b4  000265b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080165bc  080165bc  000301ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080165bc  080165bc  000265bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080165c0  080165c0  000265c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  080165c4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009b30  200001f0  080167b0  000301f0  2**3
                  ALLOC
 10 ._user_heap_stack 00006000  20009d20  080167b0  00039d20  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000301ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   000382d9  00000000  00000000  0003021a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00006b68  00000000  00000000  000684f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002700  00000000  00000000  0006f060  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002400  00000000  00000000  00071760  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000b660  00000000  00000000  00073b60  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00027146  00000000  00000000  0007f1c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00112830  00000000  00000000  000a6306  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001b8b36  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a3a0  00000000  00000000  001b8bb4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001f0 	.word	0x200001f0
 800021c:	00000000 	.word	0x00000000
 8000220:	08016024 	.word	0x08016024

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001f4 	.word	0x200001f4
 800023c:	08016024 	.word	0x08016024

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b972 	b.w	800053c <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9e08      	ldr	r6, [sp, #32]
 8000276:	4604      	mov	r4, r0
 8000278:	4688      	mov	r8, r1
 800027a:	2b00      	cmp	r3, #0
 800027c:	d14b      	bne.n	8000316 <__udivmoddi4+0xa6>
 800027e:	428a      	cmp	r2, r1
 8000280:	4615      	mov	r5, r2
 8000282:	d967      	bls.n	8000354 <__udivmoddi4+0xe4>
 8000284:	fab2 f282 	clz	r2, r2
 8000288:	b14a      	cbz	r2, 800029e <__udivmoddi4+0x2e>
 800028a:	f1c2 0720 	rsb	r7, r2, #32
 800028e:	fa01 f302 	lsl.w	r3, r1, r2
 8000292:	fa20 f707 	lsr.w	r7, r0, r7
 8000296:	4095      	lsls	r5, r2
 8000298:	ea47 0803 	orr.w	r8, r7, r3
 800029c:	4094      	lsls	r4, r2
 800029e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002a2:	0c23      	lsrs	r3, r4, #16
 80002a4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002a8:	fa1f fc85 	uxth.w	ip, r5
 80002ac:	fb0e 8817 	mls	r8, lr, r7, r8
 80002b0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002b4:	fb07 f10c 	mul.w	r1, r7, ip
 80002b8:	4299      	cmp	r1, r3
 80002ba:	d909      	bls.n	80002d0 <__udivmoddi4+0x60>
 80002bc:	18eb      	adds	r3, r5, r3
 80002be:	f107 30ff 	add.w	r0, r7, #4294967295
 80002c2:	f080 811b 	bcs.w	80004fc <__udivmoddi4+0x28c>
 80002c6:	4299      	cmp	r1, r3
 80002c8:	f240 8118 	bls.w	80004fc <__udivmoddi4+0x28c>
 80002cc:	3f02      	subs	r7, #2
 80002ce:	442b      	add	r3, r5
 80002d0:	1a5b      	subs	r3, r3, r1
 80002d2:	b2a4      	uxth	r4, r4
 80002d4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002d8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002dc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002e4:	45a4      	cmp	ip, r4
 80002e6:	d909      	bls.n	80002fc <__udivmoddi4+0x8c>
 80002e8:	192c      	adds	r4, r5, r4
 80002ea:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ee:	f080 8107 	bcs.w	8000500 <__udivmoddi4+0x290>
 80002f2:	45a4      	cmp	ip, r4
 80002f4:	f240 8104 	bls.w	8000500 <__udivmoddi4+0x290>
 80002f8:	3802      	subs	r0, #2
 80002fa:	442c      	add	r4, r5
 80002fc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000300:	eba4 040c 	sub.w	r4, r4, ip
 8000304:	2700      	movs	r7, #0
 8000306:	b11e      	cbz	r6, 8000310 <__udivmoddi4+0xa0>
 8000308:	40d4      	lsrs	r4, r2
 800030a:	2300      	movs	r3, #0
 800030c:	e9c6 4300 	strd	r4, r3, [r6]
 8000310:	4639      	mov	r1, r7
 8000312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000316:	428b      	cmp	r3, r1
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0xbe>
 800031a:	2e00      	cmp	r6, #0
 800031c:	f000 80eb 	beq.w	80004f6 <__udivmoddi4+0x286>
 8000320:	2700      	movs	r7, #0
 8000322:	e9c6 0100 	strd	r0, r1, [r6]
 8000326:	4638      	mov	r0, r7
 8000328:	4639      	mov	r1, r7
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	fab3 f783 	clz	r7, r3
 8000332:	2f00      	cmp	r7, #0
 8000334:	d147      	bne.n	80003c6 <__udivmoddi4+0x156>
 8000336:	428b      	cmp	r3, r1
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0xd0>
 800033a:	4282      	cmp	r2, r0
 800033c:	f200 80fa 	bhi.w	8000534 <__udivmoddi4+0x2c4>
 8000340:	1a84      	subs	r4, r0, r2
 8000342:	eb61 0303 	sbc.w	r3, r1, r3
 8000346:	2001      	movs	r0, #1
 8000348:	4698      	mov	r8, r3
 800034a:	2e00      	cmp	r6, #0
 800034c:	d0e0      	beq.n	8000310 <__udivmoddi4+0xa0>
 800034e:	e9c6 4800 	strd	r4, r8, [r6]
 8000352:	e7dd      	b.n	8000310 <__udivmoddi4+0xa0>
 8000354:	b902      	cbnz	r2, 8000358 <__udivmoddi4+0xe8>
 8000356:	deff      	udf	#255	; 0xff
 8000358:	fab2 f282 	clz	r2, r2
 800035c:	2a00      	cmp	r2, #0
 800035e:	f040 808f 	bne.w	8000480 <__udivmoddi4+0x210>
 8000362:	1b49      	subs	r1, r1, r5
 8000364:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000368:	fa1f f885 	uxth.w	r8, r5
 800036c:	2701      	movs	r7, #1
 800036e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000372:	0c23      	lsrs	r3, r4, #16
 8000374:	fb0e 111c 	mls	r1, lr, ip, r1
 8000378:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037c:	fb08 f10c 	mul.w	r1, r8, ip
 8000380:	4299      	cmp	r1, r3
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x124>
 8000384:	18eb      	adds	r3, r5, r3
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x122>
 800038c:	4299      	cmp	r1, r3
 800038e:	f200 80cd 	bhi.w	800052c <__udivmoddi4+0x2bc>
 8000392:	4684      	mov	ip, r0
 8000394:	1a59      	subs	r1, r3, r1
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1410 	mls	r4, lr, r0, r1
 80003a0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x14c>
 80003ac:	192c      	adds	r4, r5, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x14a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80b6 	bhi.w	8000526 <__udivmoddi4+0x2b6>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e79f      	b.n	8000306 <__udivmoddi4+0x96>
 80003c6:	f1c7 0c20 	rsb	ip, r7, #32
 80003ca:	40bb      	lsls	r3, r7
 80003cc:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003d0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003d4:	fa01 f407 	lsl.w	r4, r1, r7
 80003d8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003dc:	fa21 f30c 	lsr.w	r3, r1, ip
 80003e0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003e4:	4325      	orrs	r5, r4
 80003e6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ea:	0c2c      	lsrs	r4, r5, #16
 80003ec:	fb08 3319 	mls	r3, r8, r9, r3
 80003f0:	fa1f fa8e 	uxth.w	sl, lr
 80003f4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003f8:	fb09 f40a 	mul.w	r4, r9, sl
 80003fc:	429c      	cmp	r4, r3
 80003fe:	fa02 f207 	lsl.w	r2, r2, r7
 8000402:	fa00 f107 	lsl.w	r1, r0, r7
 8000406:	d90b      	bls.n	8000420 <__udivmoddi4+0x1b0>
 8000408:	eb1e 0303 	adds.w	r3, lr, r3
 800040c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000410:	f080 8087 	bcs.w	8000522 <__udivmoddi4+0x2b2>
 8000414:	429c      	cmp	r4, r3
 8000416:	f240 8084 	bls.w	8000522 <__udivmoddi4+0x2b2>
 800041a:	f1a9 0902 	sub.w	r9, r9, #2
 800041e:	4473      	add	r3, lr
 8000420:	1b1b      	subs	r3, r3, r4
 8000422:	b2ad      	uxth	r5, r5
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000430:	fb00 fa0a 	mul.w	sl, r0, sl
 8000434:	45a2      	cmp	sl, r4
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x1da>
 8000438:	eb1e 0404 	adds.w	r4, lr, r4
 800043c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000440:	d26b      	bcs.n	800051a <__udivmoddi4+0x2aa>
 8000442:	45a2      	cmp	sl, r4
 8000444:	d969      	bls.n	800051a <__udivmoddi4+0x2aa>
 8000446:	3802      	subs	r0, #2
 8000448:	4474      	add	r4, lr
 800044a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044e:	fba0 8902 	umull	r8, r9, r0, r2
 8000452:	eba4 040a 	sub.w	r4, r4, sl
 8000456:	454c      	cmp	r4, r9
 8000458:	46c2      	mov	sl, r8
 800045a:	464b      	mov	r3, r9
 800045c:	d354      	bcc.n	8000508 <__udivmoddi4+0x298>
 800045e:	d051      	beq.n	8000504 <__udivmoddi4+0x294>
 8000460:	2e00      	cmp	r6, #0
 8000462:	d069      	beq.n	8000538 <__udivmoddi4+0x2c8>
 8000464:	ebb1 050a 	subs.w	r5, r1, sl
 8000468:	eb64 0403 	sbc.w	r4, r4, r3
 800046c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000470:	40fd      	lsrs	r5, r7
 8000472:	40fc      	lsrs	r4, r7
 8000474:	ea4c 0505 	orr.w	r5, ip, r5
 8000478:	e9c6 5400 	strd	r5, r4, [r6]
 800047c:	2700      	movs	r7, #0
 800047e:	e747      	b.n	8000310 <__udivmoddi4+0xa0>
 8000480:	f1c2 0320 	rsb	r3, r2, #32
 8000484:	fa20 f703 	lsr.w	r7, r0, r3
 8000488:	4095      	lsls	r5, r2
 800048a:	fa01 f002 	lsl.w	r0, r1, r2
 800048e:	fa21 f303 	lsr.w	r3, r1, r3
 8000492:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000496:	4338      	orrs	r0, r7
 8000498:	0c01      	lsrs	r1, r0, #16
 800049a:	fbb3 f7fe 	udiv	r7, r3, lr
 800049e:	fa1f f885 	uxth.w	r8, r5
 80004a2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004a6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004aa:	fb07 f308 	mul.w	r3, r7, r8
 80004ae:	428b      	cmp	r3, r1
 80004b0:	fa04 f402 	lsl.w	r4, r4, r2
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x256>
 80004b6:	1869      	adds	r1, r5, r1
 80004b8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004bc:	d22f      	bcs.n	800051e <__udivmoddi4+0x2ae>
 80004be:	428b      	cmp	r3, r1
 80004c0:	d92d      	bls.n	800051e <__udivmoddi4+0x2ae>
 80004c2:	3f02      	subs	r7, #2
 80004c4:	4429      	add	r1, r5
 80004c6:	1acb      	subs	r3, r1, r3
 80004c8:	b281      	uxth	r1, r0
 80004ca:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ce:	fb0e 3310 	mls	r3, lr, r0, r3
 80004d2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d6:	fb00 f308 	mul.w	r3, r0, r8
 80004da:	428b      	cmp	r3, r1
 80004dc:	d907      	bls.n	80004ee <__udivmoddi4+0x27e>
 80004de:	1869      	adds	r1, r5, r1
 80004e0:	f100 3cff 	add.w	ip, r0, #4294967295
 80004e4:	d217      	bcs.n	8000516 <__udivmoddi4+0x2a6>
 80004e6:	428b      	cmp	r3, r1
 80004e8:	d915      	bls.n	8000516 <__udivmoddi4+0x2a6>
 80004ea:	3802      	subs	r0, #2
 80004ec:	4429      	add	r1, r5
 80004ee:	1ac9      	subs	r1, r1, r3
 80004f0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004f4:	e73b      	b.n	800036e <__udivmoddi4+0xfe>
 80004f6:	4637      	mov	r7, r6
 80004f8:	4630      	mov	r0, r6
 80004fa:	e709      	b.n	8000310 <__udivmoddi4+0xa0>
 80004fc:	4607      	mov	r7, r0
 80004fe:	e6e7      	b.n	80002d0 <__udivmoddi4+0x60>
 8000500:	4618      	mov	r0, r3
 8000502:	e6fb      	b.n	80002fc <__udivmoddi4+0x8c>
 8000504:	4541      	cmp	r1, r8
 8000506:	d2ab      	bcs.n	8000460 <__udivmoddi4+0x1f0>
 8000508:	ebb8 0a02 	subs.w	sl, r8, r2
 800050c:	eb69 020e 	sbc.w	r2, r9, lr
 8000510:	3801      	subs	r0, #1
 8000512:	4613      	mov	r3, r2
 8000514:	e7a4      	b.n	8000460 <__udivmoddi4+0x1f0>
 8000516:	4660      	mov	r0, ip
 8000518:	e7e9      	b.n	80004ee <__udivmoddi4+0x27e>
 800051a:	4618      	mov	r0, r3
 800051c:	e795      	b.n	800044a <__udivmoddi4+0x1da>
 800051e:	4667      	mov	r7, ip
 8000520:	e7d1      	b.n	80004c6 <__udivmoddi4+0x256>
 8000522:	4681      	mov	r9, r0
 8000524:	e77c      	b.n	8000420 <__udivmoddi4+0x1b0>
 8000526:	3802      	subs	r0, #2
 8000528:	442c      	add	r4, r5
 800052a:	e747      	b.n	80003bc <__udivmoddi4+0x14c>
 800052c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000530:	442b      	add	r3, r5
 8000532:	e72f      	b.n	8000394 <__udivmoddi4+0x124>
 8000534:	4638      	mov	r0, r7
 8000536:	e708      	b.n	800034a <__udivmoddi4+0xda>
 8000538:	4637      	mov	r7, r6
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0xa0>

0800053c <__aeabi_idiv0>:
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop

08000540 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000540:	b480      	push	{r7}
 8000542:	b083      	sub	sp, #12
 8000544:	af00      	add	r7, sp, #0
 8000546:	4603      	mov	r3, r0
 8000548:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800054a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800054e:	2b00      	cmp	r3, #0
 8000550:	db0b      	blt.n	800056a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000552:	79fb      	ldrb	r3, [r7, #7]
 8000554:	f003 021f 	and.w	r2, r3, #31
 8000558:	4907      	ldr	r1, [pc, #28]	; (8000578 <__NVIC_EnableIRQ+0x38>)
 800055a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800055e:	095b      	lsrs	r3, r3, #5
 8000560:	2001      	movs	r0, #1
 8000562:	fa00 f202 	lsl.w	r2, r0, r2
 8000566:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800056a:	bf00      	nop
 800056c:	370c      	adds	r7, #12
 800056e:	46bd      	mov	sp, r7
 8000570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop
 8000578:	e000e100 	.word	0xe000e100

0800057c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000580:	f000 fffb 	bl	800157a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000584:	f000 f830 	bl	80005e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000588:	f000 f9a8 	bl	80008dc <MX_GPIO_Init>
  MX_DMA_Init();
 800058c:	f000 f980 	bl	8000890 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000590:	f000 f94e 	bl	8000830 <MX_USART3_UART_Init>
  MX_CAN1_Init();
 8000594:	f000 f8cc 	bl	8000730 <MX_CAN1_Init>
  MX_SDMMC1_SD_Init();
 8000598:	f000 f900 	bl	800079c <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 800059c:	f009 fd82 	bl	800a0a4 <MX_FATFS_Init>
  MX_TIM14_Init();
 80005a0:	f000 f922 	bl	80007e8 <MX_TIM14_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80005a4:	f000 f8b8 	bl	8000718 <MX_NVIC_Init>
  res = f_close(&SDFile);
  res = f_open(&SDFile, &path[0], FA_OPEN_APPEND | FA_WRITE);*/
  //USB start
  //MX_USB_DEVICE_Init();
  // CAN Initialization
  CAN_Config();
 80005a8:	f000 fbf0 	bl	8000d8c <CAN_Config>
  HAL_CAN_Start(&hcan1);
 80005ac:	4809      	ldr	r0, [pc, #36]	; (80005d4 <main+0x58>)
 80005ae:	f001 fa1b 	bl	80019e8 <HAL_CAN_Start>
  //HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);

  // TIMER Initialization
  //HAL_TIM_Base_Start_IT(&htim13);
  HAL_TIM_Base_Start_IT(&htim14);
 80005b2:	4809      	ldr	r0, [pc, #36]	; (80005d8 <main+0x5c>)
 80005b4:	f006 fe62 	bl	800727c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005b8:	f011 f9c6 	bl	8011948 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005bc:	4a07      	ldr	r2, [pc, #28]	; (80005dc <main+0x60>)
 80005be:	2100      	movs	r1, #0
 80005c0:	4807      	ldr	r0, [pc, #28]	; (80005e0 <main+0x64>)
 80005c2:	f011 fa75 	bl	8011ab0 <osThreadNew>
 80005c6:	4602      	mov	r2, r0
 80005c8:	4b06      	ldr	r3, [pc, #24]	; (80005e4 <main+0x68>)
 80005ca:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005cc:	f011 fa12 	bl	80119f4 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005d0:	e7fe      	b.n	80005d0 <main+0x54>
 80005d2:	bf00      	nop
 80005d4:	20007020 	.word	0x20007020
 80005d8:	20007048 	.word	0x20007048
 80005dc:	080160f8 	.word	0x080160f8
 80005e0:	08000df9 	.word	0x08000df9
 80005e4:	20004c08 	.word	0x20004c08

080005e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b0b8      	sub	sp, #224	; 0xe0
 80005ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ee:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80005f2:	2234      	movs	r2, #52	; 0x34
 80005f4:	2100      	movs	r1, #0
 80005f6:	4618      	mov	r0, r3
 80005f8:	f015 fc51 	bl	8015e9e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005fc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	605a      	str	r2, [r3, #4]
 8000606:	609a      	str	r2, [r3, #8]
 8000608:	60da      	str	r2, [r3, #12]
 800060a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800060c:	f107 0308 	add.w	r3, r7, #8
 8000610:	2290      	movs	r2, #144	; 0x90
 8000612:	2100      	movs	r1, #0
 8000614:	4618      	mov	r0, r3
 8000616:	f015 fc42 	bl	8015e9e <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 800061a:	f003 fe17 	bl	800424c <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800061e:	4b3b      	ldr	r3, [pc, #236]	; (800070c <SystemClock_Config+0x124>)
 8000620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000622:	4a3a      	ldr	r2, [pc, #232]	; (800070c <SystemClock_Config+0x124>)
 8000624:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000628:	6413      	str	r3, [r2, #64]	; 0x40
 800062a:	4b38      	ldr	r3, [pc, #224]	; (800070c <SystemClock_Config+0x124>)
 800062c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800062e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000636:	4b36      	ldr	r3, [pc, #216]	; (8000710 <SystemClock_Config+0x128>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	4a35      	ldr	r2, [pc, #212]	; (8000710 <SystemClock_Config+0x128>)
 800063c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000640:	6013      	str	r3, [r2, #0]
 8000642:	4b33      	ldr	r3, [pc, #204]	; (8000710 <SystemClock_Config+0x128>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800064a:	603b      	str	r3, [r7, #0]
 800064c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800064e:	2301      	movs	r3, #1
 8000650:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000654:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000658:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800065c:	2302      	movs	r3, #2
 800065e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000662:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000666:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 800066a:	2304      	movs	r3, #4
 800066c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000670:	23c0      	movs	r3, #192	; 0xc0
 8000672:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000676:	2302      	movs	r3, #2
 8000678:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800067c:	2308      	movs	r3, #8
 800067e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000682:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000686:	4618      	mov	r0, r3
 8000688:	f003 fe40 	bl	800430c <HAL_RCC_OscConfig>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000692:	f000 fc81 	bl	8000f98 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000696:	f003 fde9 	bl	800426c <HAL_PWREx_EnableOverDrive>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80006a0:	f000 fc7a 	bl	8000f98 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a4:	230f      	movs	r3, #15
 80006a6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006aa:	2302      	movs	r3, #2
 80006ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b0:	2300      	movs	r3, #0
 80006b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006b6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006c2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80006c6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80006ca:	2106      	movs	r1, #6
 80006cc:	4618      	mov	r0, r3
 80006ce:	f004 f8cb 	bl	8004868 <HAL_RCC_ClockConfig>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <SystemClock_Config+0xf4>
  {
    Error_Handler();
 80006d8:	f000 fc5e 	bl	8000f98 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_SDMMC1
 80006dc:	4b0d      	ldr	r3, [pc, #52]	; (8000714 <SystemClock_Config+0x12c>)
 80006de:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80006e0:	2300      	movs	r3, #0
 80006e2:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80006e4:	2300      	movs	r3, #0
 80006e6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 80006ea:	2300      	movs	r3, #0
 80006ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006f0:	f107 0308 	add.w	r3, r7, #8
 80006f4:	4618      	mov	r0, r3
 80006f6:	f004 fae1 	bl	8004cbc <HAL_RCCEx_PeriphCLKConfig>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <SystemClock_Config+0x11c>
  {
    Error_Handler();
 8000700:	f000 fc4a 	bl	8000f98 <Error_Handler>
  }
}
 8000704:	bf00      	nop
 8000706:	37e0      	adds	r7, #224	; 0xe0
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	40023800 	.word	0x40023800
 8000710:	40007000 	.word	0x40007000
 8000714:	00a00100 	.word	0x00a00100

08000718 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  /* CAN1_RX0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 6, 0);
 800071c:	2200      	movs	r2, #0
 800071e:	2106      	movs	r1, #6
 8000720:	2014      	movs	r0, #20
 8000722:	f001 fde5 	bl	80022f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000726:	2014      	movs	r0, #20
 8000728:	f001 fdfe 	bl	8002328 <HAL_NVIC_EnableIRQ>
}
 800072c:	bf00      	nop
 800072e:	bd80      	pop	{r7, pc}

08000730 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000734:	4b17      	ldr	r3, [pc, #92]	; (8000794 <MX_CAN1_Init+0x64>)
 8000736:	4a18      	ldr	r2, [pc, #96]	; (8000798 <MX_CAN1_Init+0x68>)
 8000738:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 800073a:	4b16      	ldr	r3, [pc, #88]	; (8000794 <MX_CAN1_Init+0x64>)
 800073c:	2203      	movs	r2, #3
 800073e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000740:	4b14      	ldr	r3, [pc, #80]	; (8000794 <MX_CAN1_Init+0x64>)
 8000742:	2200      	movs	r2, #0
 8000744:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000746:	4b13      	ldr	r3, [pc, #76]	; (8000794 <MX_CAN1_Init+0x64>)
 8000748:	2200      	movs	r2, #0
 800074a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 800074c:	4b11      	ldr	r3, [pc, #68]	; (8000794 <MX_CAN1_Init+0x64>)
 800074e:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000752:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000754:	4b0f      	ldr	r3, [pc, #60]	; (8000794 <MX_CAN1_Init+0x64>)
 8000756:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800075a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800075c:	4b0d      	ldr	r3, [pc, #52]	; (8000794 <MX_CAN1_Init+0x64>)
 800075e:	2200      	movs	r2, #0
 8000760:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000762:	4b0c      	ldr	r3, [pc, #48]	; (8000794 <MX_CAN1_Init+0x64>)
 8000764:	2200      	movs	r2, #0
 8000766:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000768:	4b0a      	ldr	r3, [pc, #40]	; (8000794 <MX_CAN1_Init+0x64>)
 800076a:	2200      	movs	r2, #0
 800076c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800076e:	4b09      	ldr	r3, [pc, #36]	; (8000794 <MX_CAN1_Init+0x64>)
 8000770:	2200      	movs	r2, #0
 8000772:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = ENABLE;
 8000774:	4b07      	ldr	r3, [pc, #28]	; (8000794 <MX_CAN1_Init+0x64>)
 8000776:	2201      	movs	r2, #1
 8000778:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800077a:	4b06      	ldr	r3, [pc, #24]	; (8000794 <MX_CAN1_Init+0x64>)
 800077c:	2200      	movs	r2, #0
 800077e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000780:	4804      	ldr	r0, [pc, #16]	; (8000794 <MX_CAN1_Init+0x64>)
 8000782:	f000 ff49 	bl	8001618 <HAL_CAN_Init>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 800078c:	f000 fc04 	bl	8000f98 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000790:	bf00      	nop
 8000792:	bd80      	pop	{r7, pc}
 8000794:	20007020 	.word	0x20007020
 8000798:	40006400 	.word	0x40006400

0800079c <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80007a0:	4b0f      	ldr	r3, [pc, #60]	; (80007e0 <MX_SDMMC1_SD_Init+0x44>)
 80007a2:	4a10      	ldr	r2, [pc, #64]	; (80007e4 <MX_SDMMC1_SD_Init+0x48>)
 80007a4:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80007a6:	4b0e      	ldr	r3, [pc, #56]	; (80007e0 <MX_SDMMC1_SD_Init+0x44>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 80007ac:	4b0c      	ldr	r3, [pc, #48]	; (80007e0 <MX_SDMMC1_SD_Init+0x44>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80007b2:	4b0b      	ldr	r3, [pc, #44]	; (80007e0 <MX_SDMMC1_SD_Init+0x44>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 80007b8:	4b09      	ldr	r3, [pc, #36]	; (80007e0 <MX_SDMMC1_SD_Init+0x44>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80007be:	4b08      	ldr	r3, [pc, #32]	; (80007e0 <MX_SDMMC1_SD_Init+0x44>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 4;
 80007c4:	4b06      	ldr	r3, [pc, #24]	; (80007e0 <MX_SDMMC1_SD_Init+0x44>)
 80007c6:	2204      	movs	r2, #4
 80007c8:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */
  // Is Redundant
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 80007ca:	4805      	ldr	r0, [pc, #20]	; (80007e0 <MX_SDMMC1_SD_Init+0x44>)
 80007cc:	f004 fe9c 	bl	8005508 <HAL_SD_Init>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_SDMMC1_SD_Init+0x3e>
  {
	  Error_Handler();
 80007d6:	f000 fbdf 	bl	8000f98 <Error_Handler>
  }
  /* USER CODE END SDMMC1_Init 2 */

}
 80007da:	bf00      	nop
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	20004c8c 	.word	0x20004c8c
 80007e4:	40012c00 	.word	0x40012c00

080007e8 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80007ec:	4b0e      	ldr	r3, [pc, #56]	; (8000828 <MX_TIM14_Init+0x40>)
 80007ee:	4a0f      	ldr	r2, [pc, #60]	; (800082c <MX_TIM14_Init+0x44>)
 80007f0:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 19199;
 80007f2:	4b0d      	ldr	r3, [pc, #52]	; (8000828 <MX_TIM14_Init+0x40>)
 80007f4:	f644 22ff 	movw	r2, #19199	; 0x4aff
 80007f8:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007fa:	4b0b      	ldr	r3, [pc, #44]	; (8000828 <MX_TIM14_Init+0x40>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 50;
 8000800:	4b09      	ldr	r3, [pc, #36]	; (8000828 <MX_TIM14_Init+0x40>)
 8000802:	2232      	movs	r2, #50	; 0x32
 8000804:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000806:	4b08      	ldr	r3, [pc, #32]	; (8000828 <MX_TIM14_Init+0x40>)
 8000808:	2200      	movs	r2, #0
 800080a:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800080c:	4b06      	ldr	r3, [pc, #24]	; (8000828 <MX_TIM14_Init+0x40>)
 800080e:	2280      	movs	r2, #128	; 0x80
 8000810:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000812:	4805      	ldr	r0, [pc, #20]	; (8000828 <MX_TIM14_Init+0x40>)
 8000814:	f006 fd06 	bl	8007224 <HAL_TIM_Base_Init>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 800081e:	f000 fbbb 	bl	8000f98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	20007048 	.word	0x20007048
 800082c:	40002000 	.word	0x40002000

08000830 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000834:	4b14      	ldr	r3, [pc, #80]	; (8000888 <MX_USART3_UART_Init+0x58>)
 8000836:	4a15      	ldr	r2, [pc, #84]	; (800088c <MX_USART3_UART_Init+0x5c>)
 8000838:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800083a:	4b13      	ldr	r3, [pc, #76]	; (8000888 <MX_USART3_UART_Init+0x58>)
 800083c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000840:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000842:	4b11      	ldr	r3, [pc, #68]	; (8000888 <MX_USART3_UART_Init+0x58>)
 8000844:	2200      	movs	r2, #0
 8000846:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000848:	4b0f      	ldr	r3, [pc, #60]	; (8000888 <MX_USART3_UART_Init+0x58>)
 800084a:	2200      	movs	r2, #0
 800084c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800084e:	4b0e      	ldr	r3, [pc, #56]	; (8000888 <MX_USART3_UART_Init+0x58>)
 8000850:	2200      	movs	r2, #0
 8000852:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000854:	4b0c      	ldr	r3, [pc, #48]	; (8000888 <MX_USART3_UART_Init+0x58>)
 8000856:	220c      	movs	r2, #12
 8000858:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800085a:	4b0b      	ldr	r3, [pc, #44]	; (8000888 <MX_USART3_UART_Init+0x58>)
 800085c:	2200      	movs	r2, #0
 800085e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000860:	4b09      	ldr	r3, [pc, #36]	; (8000888 <MX_USART3_UART_Init+0x58>)
 8000862:	2200      	movs	r2, #0
 8000864:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000866:	4b08      	ldr	r3, [pc, #32]	; (8000888 <MX_USART3_UART_Init+0x58>)
 8000868:	2200      	movs	r2, #0
 800086a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800086c:	4b06      	ldr	r3, [pc, #24]	; (8000888 <MX_USART3_UART_Init+0x58>)
 800086e:	2200      	movs	r2, #0
 8000870:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000872:	4805      	ldr	r0, [pc, #20]	; (8000888 <MX_USART3_UART_Init+0x58>)
 8000874:	f006 ff32 	bl	80076dc <HAL_UART_Init>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800087e:	f000 fb8b 	bl	8000f98 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000882:	bf00      	nop
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	20004c0c 	.word	0x20004c0c
 800088c:	40004800 	.word	0x40004800

08000890 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000896:	4b10      	ldr	r3, [pc, #64]	; (80008d8 <MX_DMA_Init+0x48>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	4a0f      	ldr	r2, [pc, #60]	; (80008d8 <MX_DMA_Init+0x48>)
 800089c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80008a0:	6313      	str	r3, [r2, #48]	; 0x30
 80008a2:	4b0d      	ldr	r3, [pc, #52]	; (80008d8 <MX_DMA_Init+0x48>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80008aa:	607b      	str	r3, [r7, #4]
 80008ac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 7, 0);
 80008ae:	2200      	movs	r2, #0
 80008b0:	2107      	movs	r1, #7
 80008b2:	203b      	movs	r0, #59	; 0x3b
 80008b4:	f001 fd1c 	bl	80022f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80008b8:	203b      	movs	r0, #59	; 0x3b
 80008ba:	f001 fd35 	bl	8002328 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 11, 0);
 80008be:	2200      	movs	r2, #0
 80008c0:	210b      	movs	r1, #11
 80008c2:	2045      	movs	r0, #69	; 0x45
 80008c4:	f001 fd14 	bl	80022f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80008c8:	2045      	movs	r0, #69	; 0x45
 80008ca:	f001 fd2d 	bl	8002328 <HAL_NVIC_EnableIRQ>

}
 80008ce:	bf00      	nop
 80008d0:	3708      	adds	r7, #8
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	40023800 	.word	0x40023800

080008dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b08c      	sub	sp, #48	; 0x30
 80008e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e2:	f107 031c 	add.w	r3, r7, #28
 80008e6:	2200      	movs	r2, #0
 80008e8:	601a      	str	r2, [r3, #0]
 80008ea:	605a      	str	r2, [r3, #4]
 80008ec:	609a      	str	r2, [r3, #8]
 80008ee:	60da      	str	r2, [r3, #12]
 80008f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008f2:	4b78      	ldr	r3, [pc, #480]	; (8000ad4 <MX_GPIO_Init+0x1f8>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	4a77      	ldr	r2, [pc, #476]	; (8000ad4 <MX_GPIO_Init+0x1f8>)
 80008f8:	f043 0304 	orr.w	r3, r3, #4
 80008fc:	6313      	str	r3, [r2, #48]	; 0x30
 80008fe:	4b75      	ldr	r3, [pc, #468]	; (8000ad4 <MX_GPIO_Init+0x1f8>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	f003 0304 	and.w	r3, r3, #4
 8000906:	61bb      	str	r3, [r7, #24]
 8000908:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800090a:	4b72      	ldr	r3, [pc, #456]	; (8000ad4 <MX_GPIO_Init+0x1f8>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	4a71      	ldr	r2, [pc, #452]	; (8000ad4 <MX_GPIO_Init+0x1f8>)
 8000910:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000914:	6313      	str	r3, [r2, #48]	; 0x30
 8000916:	4b6f      	ldr	r3, [pc, #444]	; (8000ad4 <MX_GPIO_Init+0x1f8>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800091e:	617b      	str	r3, [r7, #20]
 8000920:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000922:	4b6c      	ldr	r3, [pc, #432]	; (8000ad4 <MX_GPIO_Init+0x1f8>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	4a6b      	ldr	r2, [pc, #428]	; (8000ad4 <MX_GPIO_Init+0x1f8>)
 8000928:	f043 0301 	orr.w	r3, r3, #1
 800092c:	6313      	str	r3, [r2, #48]	; 0x30
 800092e:	4b69      	ldr	r3, [pc, #420]	; (8000ad4 <MX_GPIO_Init+0x1f8>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	f003 0301 	and.w	r3, r3, #1
 8000936:	613b      	str	r3, [r7, #16]
 8000938:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800093a:	4b66      	ldr	r3, [pc, #408]	; (8000ad4 <MX_GPIO_Init+0x1f8>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	4a65      	ldr	r2, [pc, #404]	; (8000ad4 <MX_GPIO_Init+0x1f8>)
 8000940:	f043 0302 	orr.w	r3, r3, #2
 8000944:	6313      	str	r3, [r2, #48]	; 0x30
 8000946:	4b63      	ldr	r3, [pc, #396]	; (8000ad4 <MX_GPIO_Init+0x1f8>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	f003 0302 	and.w	r3, r3, #2
 800094e:	60fb      	str	r3, [r7, #12]
 8000950:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000952:	4b60      	ldr	r3, [pc, #384]	; (8000ad4 <MX_GPIO_Init+0x1f8>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	4a5f      	ldr	r2, [pc, #380]	; (8000ad4 <MX_GPIO_Init+0x1f8>)
 8000958:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800095c:	6313      	str	r3, [r2, #48]	; 0x30
 800095e:	4b5d      	ldr	r3, [pc, #372]	; (8000ad4 <MX_GPIO_Init+0x1f8>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000966:	60bb      	str	r3, [r7, #8]
 8000968:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800096a:	4b5a      	ldr	r3, [pc, #360]	; (8000ad4 <MX_GPIO_Init+0x1f8>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	4a59      	ldr	r2, [pc, #356]	; (8000ad4 <MX_GPIO_Init+0x1f8>)
 8000970:	f043 0308 	orr.w	r3, r3, #8
 8000974:	6313      	str	r3, [r2, #48]	; 0x30
 8000976:	4b57      	ldr	r3, [pc, #348]	; (8000ad4 <MX_GPIO_Init+0x1f8>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	f003 0308 	and.w	r3, r3, #8
 800097e:	607b      	str	r3, [r7, #4]
 8000980:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin|GPIO_PIN_8 
 8000982:	2200      	movs	r2, #0
 8000984:	f244 3181 	movw	r1, #17281	; 0x4381
 8000988:	4853      	ldr	r0, [pc, #332]	; (8000ad8 <MX_GPIO_Init+0x1fc>)
 800098a:	f002 fa41 	bl	8002e10 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, SYNC_Pin|USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800098e:	2200      	movs	r2, #0
 8000990:	2141      	movs	r1, #65	; 0x41
 8000992:	4852      	ldr	r0, [pc, #328]	; (8000adc <MX_GPIO_Init+0x200>)
 8000994:	f002 fa3c 	bl	8002e10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000998:	2200      	movs	r2, #0
 800099a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800099e:	4850      	ldr	r0, [pc, #320]	; (8000ae0 <MX_GPIO_Init+0x204>)
 80009a0:	f002 fa36 	bl	8002e10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80009a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009aa:	4b4e      	ldr	r3, [pc, #312]	; (8000ae4 <MX_GPIO_Init+0x208>)
 80009ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ae:	2300      	movs	r3, #0
 80009b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80009b2:	f107 031c 	add.w	r3, r7, #28
 80009b6:	4619      	mov	r1, r3
 80009b8:	484b      	ldr	r0, [pc, #300]	; (8000ae8 <MX_GPIO_Init+0x20c>)
 80009ba:	f002 f867 	bl	8002a8c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80009be:	2332      	movs	r3, #50	; 0x32
 80009c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c2:	2302      	movs	r3, #2
 80009c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	2300      	movs	r3, #0
 80009c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ca:	2303      	movs	r3, #3
 80009cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009ce:	230b      	movs	r3, #11
 80009d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009d2:	f107 031c 	add.w	r3, r7, #28
 80009d6:	4619      	mov	r1, r3
 80009d8:	4843      	ldr	r0, [pc, #268]	; (8000ae8 <MX_GPIO_Init+0x20c>)
 80009da:	f002 f857 	bl	8002a8c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80009de:	2386      	movs	r3, #134	; 0x86
 80009e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e2:	2302      	movs	r3, #2
 80009e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e6:	2300      	movs	r3, #0
 80009e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ea:	2303      	movs	r3, #3
 80009ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009ee:	230b      	movs	r3, #11
 80009f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f2:	f107 031c 	add.w	r3, r7, #28
 80009f6:	4619      	mov	r1, r3
 80009f8:	4839      	ldr	r0, [pc, #228]	; (8000ae0 <MX_GPIO_Init+0x204>)
 80009fa:	f002 f847 	bl	8002a8c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin PB8 
                           PB9 */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin|GPIO_PIN_8 
 80009fe:	f244 3381 	movw	r3, #17281	; 0x4381
 8000a02:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a04:	2301      	movs	r3, #1
 8000a06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a10:	f107 031c 	add.w	r3, r7, #28
 8000a14:	4619      	mov	r1, r3
 8000a16:	4830      	ldr	r0, [pc, #192]	; (8000ad8 <MX_GPIO_Init+0x1fc>)
 8000a18:	f002 f838 	bl	8002a8c <HAL_GPIO_Init>

  /*Configure GPIO pins : SYNC_Pin USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = SYNC_Pin|USB_PowerSwitchOn_Pin;
 8000a1c:	2341      	movs	r3, #65	; 0x41
 8000a1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a20:	2301      	movs	r3, #1
 8000a22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	2300      	movs	r3, #0
 8000a26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a2c:	f107 031c 	add.w	r3, r7, #28
 8000a30:	4619      	mov	r1, r3
 8000a32:	482a      	ldr	r0, [pc, #168]	; (8000adc <MX_GPIO_Init+0x200>)
 8000a34:	f002 f82a 	bl	8002a8c <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000a38:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a46:	2303      	movs	r3, #3
 8000a48:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a4a:	230b      	movs	r3, #11
 8000a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000a4e:	f107 031c 	add.w	r3, r7, #28
 8000a52:	4619      	mov	r1, r3
 8000a54:	4820      	ldr	r0, [pc, #128]	; (8000ad8 <MX_GPIO_Init+0x1fc>)
 8000a56:	f002 f819 	bl	8002a8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PG2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a5a:	2304      	movs	r3, #4
 8000a5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a62:	2302      	movs	r3, #2
 8000a64:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a66:	f107 031c 	add.w	r3, r7, #28
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	481b      	ldr	r0, [pc, #108]	; (8000adc <MX_GPIO_Init+0x200>)
 8000a6e:	f002 f80d 	bl	8002a8c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a72:	2380      	movs	r3, #128	; 0x80
 8000a74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a76:	2300      	movs	r3, #0
 8000a78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a7e:	f107 031c 	add.w	r3, r7, #28
 8000a82:	4619      	mov	r1, r3
 8000a84:	4815      	ldr	r0, [pc, #84]	; (8000adc <MX_GPIO_Init+0x200>)
 8000a86:	f002 f801 	bl	8002a8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000a8a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a90:	2301      	movs	r3, #1
 8000a92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a94:	2302      	movs	r3, #2
 8000a96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a9c:	f107 031c 	add.w	r3, r7, #28
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	480f      	ldr	r0, [pc, #60]	; (8000ae0 <MX_GPIO_Init+0x204>)
 8000aa4:	f001 fff2 	bl	8002a8c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000aa8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000aac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aae:	2302      	movs	r3, #2
 8000ab0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab6:	2303      	movs	r3, #3
 8000ab8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000aba:	230b      	movs	r3, #11
 8000abc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000abe:	f107 031c 	add.w	r3, r7, #28
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	4805      	ldr	r0, [pc, #20]	; (8000adc <MX_GPIO_Init+0x200>)
 8000ac6:	f001 ffe1 	bl	8002a8c <HAL_GPIO_Init>

}
 8000aca:	bf00      	nop
 8000acc:	3730      	adds	r7, #48	; 0x30
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	40023800 	.word	0x40023800
 8000ad8:	40020400 	.word	0x40020400
 8000adc:	40021800 	.word	0x40021800
 8000ae0:	40020000 	.word	0x40020000
 8000ae4:	10110000 	.word	0x10110000
 8000ae8:	40020800 	.word	0x40020800

08000aec <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8000aec:	b590      	push	{r4, r7, lr}
 8000aee:	b085      	sub	sp, #20
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8000af4:	2201      	movs	r2, #1
 8000af6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000afa:	4823      	ldr	r0, [pc, #140]	; (8000b88 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 8000afc:	f002 f988 	bl	8002e10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_SET);
 8000b00:	2201      	movs	r2, #1
 8000b02:	2180      	movs	r1, #128	; 0x80
 8000b04:	4820      	ldr	r0, [pc, #128]	; (8000b88 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 8000b06:	f002 f983 	bl	8002e10 <HAL_GPIO_WritePin>
	if(HAL_CAN_GetRxMessage(&hcan1,CAN_RX_FIFO0,&RxHeader,RxData) == HAL_OK){
 8000b0a:	4b20      	ldr	r3, [pc, #128]	; (8000b8c <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 8000b0c:	4a20      	ldr	r2, [pc, #128]	; (8000b90 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 8000b0e:	2100      	movs	r1, #0
 8000b10:	4820      	ldr	r0, [pc, #128]	; (8000b94 <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
 8000b12:	f000 ffad 	bl	8001a70 <HAL_CAN_GetRxMessage>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d101      	bne.n	8000b20 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>
		Get_Data();
 8000b1c:	f000 f844 	bl	8000ba8 <Get_Data>
	}
	// Test if the buffer is full
	if(ind >= 32){
 8000b20:	4b1d      	ldr	r3, [pc, #116]	; (8000b98 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	2b1f      	cmp	r3, #31
 8000b26:	d91f      	bls.n	8000b68 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>
		// Move the acquired data to the writing buffer
		for(uint8_t i=0;i<32;i++){
 8000b28:	2300      	movs	r3, #0
 8000b2a:	73fb      	strb	r3, [r7, #15]
 8000b2c:	e016      	b.n	8000b5c <HAL_CAN_RxFifo0MsgPendingCallback+0x70>
			SD_buffer[i] = buffer[i];
 8000b2e:	7bfb      	ldrb	r3, [r7, #15]
 8000b30:	7bfa      	ldrb	r2, [r7, #15]
 8000b32:	491a      	ldr	r1, [pc, #104]	; (8000b9c <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 8000b34:	0112      	lsls	r2, r2, #4
 8000b36:	4411      	add	r1, r2
 8000b38:	4a19      	ldr	r2, [pc, #100]	; (8000ba0 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>)
 8000b3a:	011b      	lsls	r3, r3, #4
 8000b3c:	441a      	add	r2, r3
 8000b3e:	460b      	mov	r3, r1
 8000b40:	6814      	ldr	r4, [r2, #0]
 8000b42:	6850      	ldr	r0, [r2, #4]
 8000b44:	6891      	ldr	r1, [r2, #8]
 8000b46:	68d2      	ldr	r2, [r2, #12]
 8000b48:	601c      	str	r4, [r3, #0]
 8000b4a:	6058      	str	r0, [r3, #4]
 8000b4c:	6099      	str	r1, [r3, #8]
 8000b4e:	60da      	str	r2, [r3, #12]
			wf = 1;
 8000b50:	4b14      	ldr	r3, [pc, #80]	; (8000ba4 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 8000b52:	2201      	movs	r2, #1
 8000b54:	701a      	strb	r2, [r3, #0]
		for(uint8_t i=0;i<32;i++){
 8000b56:	7bfb      	ldrb	r3, [r7, #15]
 8000b58:	3301      	adds	r3, #1
 8000b5a:	73fb      	strb	r3, [r7, #15]
 8000b5c:	7bfb      	ldrb	r3, [r7, #15]
 8000b5e:	2b1f      	cmp	r3, #31
 8000b60:	d9e5      	bls.n	8000b2e <HAL_CAN_RxFifo0MsgPendingCallback+0x42>
		}
		ind = 0;
 8000b62:	4b0d      	ldr	r3, [pc, #52]	; (8000b98 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	701a      	strb	r2, [r3, #0]
		// Stop the data request to write the buffer to the memory
		//HAL_TIM_Base_Stop_IT(&htim14);
		//HAL_CAN_DeactivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8000b68:	2200      	movs	r2, #0
 8000b6a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b6e:	4806      	ldr	r0, [pc, #24]	; (8000b88 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 8000b70:	f002 f94e 	bl	8002e10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_RESET);
 8000b74:	2200      	movs	r2, #0
 8000b76:	2180      	movs	r1, #128	; 0x80
 8000b78:	4803      	ldr	r0, [pc, #12]	; (8000b88 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 8000b7a:	f002 f949 	bl	8002e10 <HAL_GPIO_WritePin>
}
 8000b7e:	bf00      	nop
 8000b80:	3714      	adds	r7, #20
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd90      	pop	{r4, r7, pc}
 8000b86:	bf00      	nop
 8000b88:	40020400 	.word	0x40020400
 8000b8c:	20007018 	.word	0x20007018
 8000b90:	20007304 	.word	0x20007304
 8000b94:	20007020 	.word	0x20007020
 8000b98:	2000020c 	.word	0x2000020c
 8000b9c:	20007104 	.word	0x20007104
 8000ba0:	20005d30 	.word	0x20005d30
 8000ba4:	2000020e 	.word	0x2000020e

08000ba8 <Get_Data>:

void Get_Data(){
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
	 *   | |       ID
	 *   | | _______________
	 * -|-|-|x|x|x|x|x|x|x|x|
	 *   9 8 7 6 5 4 3 2 1 0
	 */
	if((RxHeader.StdId>>8) == 0x00){
 8000bac:	4b73      	ldr	r3, [pc, #460]	; (8000d7c <Get_Data+0x1d4>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	0a1b      	lsrs	r3, r3, #8
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d169      	bne.n	8000c8a <Get_Data+0xe2>
		buffer[ind].Header_H = ((uint8_t)RxHeader.StdId & 0x1F)<<1;
 8000bb6:	4b71      	ldr	r3, [pc, #452]	; (8000d7c <Get_Data+0x1d4>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	b2db      	uxtb	r3, r3
 8000bbc:	005b      	lsls	r3, r3, #1
 8000bbe:	b2db      	uxtb	r3, r3
 8000bc0:	4a6f      	ldr	r2, [pc, #444]	; (8000d80 <Get_Data+0x1d8>)
 8000bc2:	7812      	ldrb	r2, [r2, #0]
 8000bc4:	4610      	mov	r0, r2
 8000bc6:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8000bca:	b2d9      	uxtb	r1, r3
 8000bcc:	4a6d      	ldr	r2, [pc, #436]	; (8000d84 <Get_Data+0x1dc>)
 8000bce:	0103      	lsls	r3, r0, #4
 8000bd0:	4413      	add	r3, r2
 8000bd2:	460a      	mov	r2, r1
 8000bd4:	701a      	strb	r2, [r3, #0]
		buffer[ind].Header_L = RxData[0];
 8000bd6:	4b6a      	ldr	r3, [pc, #424]	; (8000d80 <Get_Data+0x1d8>)
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	4618      	mov	r0, r3
 8000bdc:	4b6a      	ldr	r3, [pc, #424]	; (8000d88 <Get_Data+0x1e0>)
 8000bde:	7819      	ldrb	r1, [r3, #0]
 8000be0:	4a68      	ldr	r2, [pc, #416]	; (8000d84 <Get_Data+0x1dc>)
 8000be2:	0103      	lsls	r3, r0, #4
 8000be4:	4413      	add	r3, r2
 8000be6:	3302      	adds	r3, #2
 8000be8:	460a      	mov	r2, r1
 8000bea:	701a      	strb	r2, [r3, #0]
		buffer[ind].Header_M = RxData[1];
 8000bec:	4b64      	ldr	r3, [pc, #400]	; (8000d80 <Get_Data+0x1d8>)
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	4b65      	ldr	r3, [pc, #404]	; (8000d88 <Get_Data+0x1e0>)
 8000bf4:	7859      	ldrb	r1, [r3, #1]
 8000bf6:	4a63      	ldr	r2, [pc, #396]	; (8000d84 <Get_Data+0x1dc>)
 8000bf8:	0103      	lsls	r3, r0, #4
 8000bfa:	4413      	add	r3, r2
 8000bfc:	3301      	adds	r3, #1
 8000bfe:	460a      	mov	r2, r1
 8000c00:	701a      	strb	r2, [r3, #0]
		buffer[ind].Header_H |= (RxData[2] & 0x01);
 8000c02:	4b5f      	ldr	r3, [pc, #380]	; (8000d80 <Get_Data+0x1d8>)
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	4a5f      	ldr	r2, [pc, #380]	; (8000d84 <Get_Data+0x1dc>)
 8000c08:	011b      	lsls	r3, r3, #4
 8000c0a:	4413      	add	r3, r2
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	b25a      	sxtb	r2, r3
 8000c10:	4b5d      	ldr	r3, [pc, #372]	; (8000d88 <Get_Data+0x1e0>)
 8000c12:	789b      	ldrb	r3, [r3, #2]
 8000c14:	b25b      	sxtb	r3, r3
 8000c16:	f003 0301 	and.w	r3, r3, #1
 8000c1a:	b25b      	sxtb	r3, r3
 8000c1c:	4313      	orrs	r3, r2
 8000c1e:	b25a      	sxtb	r2, r3
 8000c20:	4b57      	ldr	r3, [pc, #348]	; (8000d80 <Get_Data+0x1d8>)
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	b2d1      	uxtb	r1, r2
 8000c26:	4a57      	ldr	r2, [pc, #348]	; (8000d84 <Get_Data+0x1dc>)
 8000c28:	011b      	lsls	r3, r3, #4
 8000c2a:	4413      	add	r3, r2
 8000c2c:	460a      	mov	r2, r1
 8000c2e:	701a      	strb	r2, [r3, #0]
		buffer[ind].GyrX_L = RxData[3];
 8000c30:	4b53      	ldr	r3, [pc, #332]	; (8000d80 <Get_Data+0x1d8>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	4618      	mov	r0, r3
 8000c36:	4b54      	ldr	r3, [pc, #336]	; (8000d88 <Get_Data+0x1e0>)
 8000c38:	78d9      	ldrb	r1, [r3, #3]
 8000c3a:	4a52      	ldr	r2, [pc, #328]	; (8000d84 <Get_Data+0x1dc>)
 8000c3c:	0103      	lsls	r3, r0, #4
 8000c3e:	4413      	add	r3, r2
 8000c40:	330a      	adds	r3, #10
 8000c42:	460a      	mov	r2, r1
 8000c44:	701a      	strb	r2, [r3, #0]
		buffer[ind].GyrX_H = RxData[4];
 8000c46:	4b4e      	ldr	r3, [pc, #312]	; (8000d80 <Get_Data+0x1d8>)
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	4b4e      	ldr	r3, [pc, #312]	; (8000d88 <Get_Data+0x1e0>)
 8000c4e:	7919      	ldrb	r1, [r3, #4]
 8000c50:	4a4c      	ldr	r2, [pc, #304]	; (8000d84 <Get_Data+0x1dc>)
 8000c52:	0103      	lsls	r3, r0, #4
 8000c54:	4413      	add	r3, r2
 8000c56:	3309      	adds	r3, #9
 8000c58:	460a      	mov	r2, r1
 8000c5a:	701a      	strb	r2, [r3, #0]
		buffer[ind].GyrX_L = RxData[5];
 8000c5c:	4b48      	ldr	r3, [pc, #288]	; (8000d80 <Get_Data+0x1d8>)
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	4618      	mov	r0, r3
 8000c62:	4b49      	ldr	r3, [pc, #292]	; (8000d88 <Get_Data+0x1e0>)
 8000c64:	7959      	ldrb	r1, [r3, #5]
 8000c66:	4a47      	ldr	r2, [pc, #284]	; (8000d84 <Get_Data+0x1dc>)
 8000c68:	0103      	lsls	r3, r0, #4
 8000c6a:	4413      	add	r3, r2
 8000c6c:	330a      	adds	r3, #10
 8000c6e:	460a      	mov	r2, r1
 8000c70:	701a      	strb	r2, [r3, #0]
		buffer[ind].GyrY_H = RxData[6];
 8000c72:	4b43      	ldr	r3, [pc, #268]	; (8000d80 <Get_Data+0x1d8>)
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	4618      	mov	r0, r3
 8000c78:	4b43      	ldr	r3, [pc, #268]	; (8000d88 <Get_Data+0x1e0>)
 8000c7a:	7999      	ldrb	r1, [r3, #6]
 8000c7c:	4a41      	ldr	r2, [pc, #260]	; (8000d84 <Get_Data+0x1dc>)
 8000c7e:	0103      	lsls	r3, r0, #4
 8000c80:	4413      	add	r3, r2
 8000c82:	330b      	adds	r3, #11
 8000c84:	460a      	mov	r2, r1
 8000c86:	701a      	strb	r2, [r3, #0]
		buffer[ind].AccZ_H = RxData[5];
		buffer[ind].Temp_L = RxData[6];
		buffer[ind].Temp_H = RxData[7];
		ind++;
	}
}
 8000c88:	e072      	b.n	8000d70 <Get_Data+0x1c8>
	else if((RxHeader.StdId>>8) == 0x01){
 8000c8a:	4b3c      	ldr	r3, [pc, #240]	; (8000d7c <Get_Data+0x1d4>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	0a1b      	lsrs	r3, r3, #8
 8000c90:	2b01      	cmp	r3, #1
 8000c92:	d16d      	bne.n	8000d70 <Get_Data+0x1c8>
		buffer[ind].Header_H = ((uint8_t)RxHeader.StdId & 0x1F)<<1;
 8000c94:	4b39      	ldr	r3, [pc, #228]	; (8000d7c <Get_Data+0x1d4>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	b2db      	uxtb	r3, r3
 8000c9a:	005b      	lsls	r3, r3, #1
 8000c9c:	b2db      	uxtb	r3, r3
 8000c9e:	4a38      	ldr	r2, [pc, #224]	; (8000d80 <Get_Data+0x1d8>)
 8000ca0:	7812      	ldrb	r2, [r2, #0]
 8000ca2:	4610      	mov	r0, r2
 8000ca4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8000ca8:	b2d9      	uxtb	r1, r3
 8000caa:	4a36      	ldr	r2, [pc, #216]	; (8000d84 <Get_Data+0x1dc>)
 8000cac:	0103      	lsls	r3, r0, #4
 8000cae:	4413      	add	r3, r2
 8000cb0:	460a      	mov	r2, r1
 8000cb2:	701a      	strb	r2, [r3, #0]
		buffer[ind].AccX_L = RxData[0];
 8000cb4:	4b32      	ldr	r3, [pc, #200]	; (8000d80 <Get_Data+0x1d8>)
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	4618      	mov	r0, r3
 8000cba:	4b33      	ldr	r3, [pc, #204]	; (8000d88 <Get_Data+0x1e0>)
 8000cbc:	7819      	ldrb	r1, [r3, #0]
 8000cbe:	4a31      	ldr	r2, [pc, #196]	; (8000d84 <Get_Data+0x1dc>)
 8000cc0:	0103      	lsls	r3, r0, #4
 8000cc2:	4413      	add	r3, r2
 8000cc4:	3304      	adds	r3, #4
 8000cc6:	460a      	mov	r2, r1
 8000cc8:	701a      	strb	r2, [r3, #0]
		buffer[ind].AccX_H = RxData[1];
 8000cca:	4b2d      	ldr	r3, [pc, #180]	; (8000d80 <Get_Data+0x1d8>)
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	4618      	mov	r0, r3
 8000cd0:	4b2d      	ldr	r3, [pc, #180]	; (8000d88 <Get_Data+0x1e0>)
 8000cd2:	7859      	ldrb	r1, [r3, #1]
 8000cd4:	4a2b      	ldr	r2, [pc, #172]	; (8000d84 <Get_Data+0x1dc>)
 8000cd6:	0103      	lsls	r3, r0, #4
 8000cd8:	4413      	add	r3, r2
 8000cda:	3303      	adds	r3, #3
 8000cdc:	460a      	mov	r2, r1
 8000cde:	701a      	strb	r2, [r3, #0]
		buffer[ind].AccY_L = RxData[2];
 8000ce0:	4b27      	ldr	r3, [pc, #156]	; (8000d80 <Get_Data+0x1d8>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	4b28      	ldr	r3, [pc, #160]	; (8000d88 <Get_Data+0x1e0>)
 8000ce8:	7899      	ldrb	r1, [r3, #2]
 8000cea:	4a26      	ldr	r2, [pc, #152]	; (8000d84 <Get_Data+0x1dc>)
 8000cec:	0103      	lsls	r3, r0, #4
 8000cee:	4413      	add	r3, r2
 8000cf0:	3306      	adds	r3, #6
 8000cf2:	460a      	mov	r2, r1
 8000cf4:	701a      	strb	r2, [r3, #0]
		buffer[ind].AccY_H = RxData[3];
 8000cf6:	4b22      	ldr	r3, [pc, #136]	; (8000d80 <Get_Data+0x1d8>)
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	4b22      	ldr	r3, [pc, #136]	; (8000d88 <Get_Data+0x1e0>)
 8000cfe:	78d9      	ldrb	r1, [r3, #3]
 8000d00:	4a20      	ldr	r2, [pc, #128]	; (8000d84 <Get_Data+0x1dc>)
 8000d02:	0103      	lsls	r3, r0, #4
 8000d04:	4413      	add	r3, r2
 8000d06:	3305      	adds	r3, #5
 8000d08:	460a      	mov	r2, r1
 8000d0a:	701a      	strb	r2, [r3, #0]
		buffer[ind].AccZ_L = RxData[4];
 8000d0c:	4b1c      	ldr	r3, [pc, #112]	; (8000d80 <Get_Data+0x1d8>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	4618      	mov	r0, r3
 8000d12:	4b1d      	ldr	r3, [pc, #116]	; (8000d88 <Get_Data+0x1e0>)
 8000d14:	7919      	ldrb	r1, [r3, #4]
 8000d16:	4a1b      	ldr	r2, [pc, #108]	; (8000d84 <Get_Data+0x1dc>)
 8000d18:	0103      	lsls	r3, r0, #4
 8000d1a:	4413      	add	r3, r2
 8000d1c:	3308      	adds	r3, #8
 8000d1e:	460a      	mov	r2, r1
 8000d20:	701a      	strb	r2, [r3, #0]
		buffer[ind].AccZ_H = RxData[5];
 8000d22:	4b17      	ldr	r3, [pc, #92]	; (8000d80 <Get_Data+0x1d8>)
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	4618      	mov	r0, r3
 8000d28:	4b17      	ldr	r3, [pc, #92]	; (8000d88 <Get_Data+0x1e0>)
 8000d2a:	7959      	ldrb	r1, [r3, #5]
 8000d2c:	4a15      	ldr	r2, [pc, #84]	; (8000d84 <Get_Data+0x1dc>)
 8000d2e:	0103      	lsls	r3, r0, #4
 8000d30:	4413      	add	r3, r2
 8000d32:	3307      	adds	r3, #7
 8000d34:	460a      	mov	r2, r1
 8000d36:	701a      	strb	r2, [r3, #0]
		buffer[ind].Temp_L = RxData[6];
 8000d38:	4b11      	ldr	r3, [pc, #68]	; (8000d80 <Get_Data+0x1d8>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	4b12      	ldr	r3, [pc, #72]	; (8000d88 <Get_Data+0x1e0>)
 8000d40:	7999      	ldrb	r1, [r3, #6]
 8000d42:	4a10      	ldr	r2, [pc, #64]	; (8000d84 <Get_Data+0x1dc>)
 8000d44:	0103      	lsls	r3, r0, #4
 8000d46:	4413      	add	r3, r2
 8000d48:	330e      	adds	r3, #14
 8000d4a:	460a      	mov	r2, r1
 8000d4c:	701a      	strb	r2, [r3, #0]
		buffer[ind].Temp_H = RxData[7];
 8000d4e:	4b0c      	ldr	r3, [pc, #48]	; (8000d80 <Get_Data+0x1d8>)
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	4618      	mov	r0, r3
 8000d54:	4b0c      	ldr	r3, [pc, #48]	; (8000d88 <Get_Data+0x1e0>)
 8000d56:	79d9      	ldrb	r1, [r3, #7]
 8000d58:	4a0a      	ldr	r2, [pc, #40]	; (8000d84 <Get_Data+0x1dc>)
 8000d5a:	0103      	lsls	r3, r0, #4
 8000d5c:	4413      	add	r3, r2
 8000d5e:	330d      	adds	r3, #13
 8000d60:	460a      	mov	r2, r1
 8000d62:	701a      	strb	r2, [r3, #0]
		ind++;
 8000d64:	4b06      	ldr	r3, [pc, #24]	; (8000d80 <Get_Data+0x1d8>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	3301      	adds	r3, #1
 8000d6a:	b2da      	uxtb	r2, r3
 8000d6c:	4b04      	ldr	r3, [pc, #16]	; (8000d80 <Get_Data+0x1d8>)
 8000d6e:	701a      	strb	r2, [r3, #0]
}
 8000d70:	bf00      	nop
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	20007304 	.word	0x20007304
 8000d80:	2000020c 	.word	0x2000020c
 8000d84:	20005d30 	.word	0x20005d30
 8000d88:	20007018 	.word	0x20007018

08000d8c <CAN_Config>:

void CAN_Config(void){
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
	TxHeader.StdId = 0x01;
 8000d90:	4b16      	ldr	r3, [pc, #88]	; (8000dec <CAN_Config+0x60>)
 8000d92:	2201      	movs	r2, #1
 8000d94:	601a      	str	r2, [r3, #0]
	TxHeader.ExtId = 0x01;
 8000d96:	4b15      	ldr	r3, [pc, #84]	; (8000dec <CAN_Config+0x60>)
 8000d98:	2201      	movs	r2, #1
 8000d9a:	605a      	str	r2, [r3, #4]
	TxHeader.RTR = CAN_RTR_DATA;
 8000d9c:	4b13      	ldr	r3, [pc, #76]	; (8000dec <CAN_Config+0x60>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	60da      	str	r2, [r3, #12]
	TxHeader.IDE = CAN_ID_EXT;
 8000da2:	4b12      	ldr	r3, [pc, #72]	; (8000dec <CAN_Config+0x60>)
 8000da4:	2204      	movs	r2, #4
 8000da6:	609a      	str	r2, [r3, #8]
	TxHeader.DLC = 8;
 8000da8:	4b10      	ldr	r3, [pc, #64]	; (8000dec <CAN_Config+0x60>)
 8000daa:	2208      	movs	r2, #8
 8000dac:	611a      	str	r2, [r3, #16]
	TxHeader.TransmitGlobalTime = DISABLE;
 8000dae:	4b0f      	ldr	r3, [pc, #60]	; (8000dec <CAN_Config+0x60>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	751a      	strb	r2, [r3, #20]
	sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000db4:	4b0e      	ldr	r3, [pc, #56]	; (8000df0 <CAN_Config+0x64>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterIdHigh = 0x0;
 8000dba:	4b0d      	ldr	r3, [pc, #52]	; (8000df0 <CAN_Config+0x64>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIdLow = 0;
 8000dc0:	4b0b      	ldr	r3, [pc, #44]	; (8000df0 <CAN_Config+0x64>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterMaskIdHigh = 0x0;
 8000dc6:	4b0a      	ldr	r3, [pc, #40]	; (8000df0 <CAN_Config+0x64>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow = 0;
 8000dcc:	4b08      	ldr	r3, [pc, #32]	; (8000df0 <CAN_Config+0x64>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000dd2:	4b07      	ldr	r3, [pc, #28]	; (8000df0 <CAN_Config+0x64>)
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	61da      	str	r2, [r3, #28]
	sFilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 8000dd8:	4b05      	ldr	r3, [pc, #20]	; (8000df0 <CAN_Config+0x64>)
 8000dda:	2201      	movs	r2, #1
 8000ddc:	621a      	str	r2, [r3, #32]
	HAL_CAN_ConfigFilter(&hcan1,&sFilterConfig);
 8000dde:	4904      	ldr	r1, [pc, #16]	; (8000df0 <CAN_Config+0x64>)
 8000de0:	4804      	ldr	r0, [pc, #16]	; (8000df4 <CAN_Config+0x68>)
 8000de2:	f000 fd15 	bl	8001810 <HAL_CAN_ConfigFilter>
}
 8000de6:	bf00      	nop
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	2000708c 	.word	0x2000708c
 8000df0:	20004be0 	.word	0x20004be0
 8000df4:	20007020 	.word	0x20007020

08000df8 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000e00:	f014 fabc 	bl	801537c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
	// Mount filesystem only one time
	if(flag == 0){
 8000e04:	4b3f      	ldr	r3, [pc, #252]	; (8000f04 <StartDefaultTask+0x10c>)
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d128      	bne.n	8000e5e <StartDefaultTask+0x66>


		res = f_mount(&SDFatFs, SDPath, 1);
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	493e      	ldr	r1, [pc, #248]	; (8000f08 <StartDefaultTask+0x110>)
 8000e10:	483e      	ldr	r0, [pc, #248]	; (8000f0c <StartDefaultTask+0x114>)
 8000e12:	f00f fd55 	bl	80108c0 <f_mount>
 8000e16:	4603      	mov	r3, r0
 8000e18:	461a      	mov	r2, r3
 8000e1a:	4b3d      	ldr	r3, [pc, #244]	; (8000f10 <StartDefaultTask+0x118>)
 8000e1c:	701a      	strb	r2, [r3, #0]
		res = f_open(&SDFile, &path[0], FA_CREATE_ALWAYS);
 8000e1e:	2208      	movs	r2, #8
 8000e20:	493c      	ldr	r1, [pc, #240]	; (8000f14 <StartDefaultTask+0x11c>)
 8000e22:	483d      	ldr	r0, [pc, #244]	; (8000f18 <StartDefaultTask+0x120>)
 8000e24:	f00f fdb0 	bl	8010988 <f_open>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	461a      	mov	r2, r3
 8000e2c:	4b38      	ldr	r3, [pc, #224]	; (8000f10 <StartDefaultTask+0x118>)
 8000e2e:	701a      	strb	r2, [r3, #0]
		res = f_close(&SDFile);
 8000e30:	4839      	ldr	r0, [pc, #228]	; (8000f18 <StartDefaultTask+0x120>)
 8000e32:	f010 fbd1 	bl	80115d8 <f_close>
 8000e36:	4603      	mov	r3, r0
 8000e38:	461a      	mov	r2, r3
 8000e3a:	4b35      	ldr	r3, [pc, #212]	; (8000f10 <StartDefaultTask+0x118>)
 8000e3c:	701a      	strb	r2, [r3, #0]
		res = f_open(&SDFile, &path[0], FA_OPEN_APPEND | FA_WRITE);
 8000e3e:	2232      	movs	r2, #50	; 0x32
 8000e40:	4934      	ldr	r1, [pc, #208]	; (8000f14 <StartDefaultTask+0x11c>)
 8000e42:	4835      	ldr	r0, [pc, #212]	; (8000f18 <StartDefaultTask+0x120>)
 8000e44:	f00f fda0 	bl	8010988 <f_open>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	461a      	mov	r2, r3
 8000e4c:	4b30      	ldr	r3, [pc, #192]	; (8000f10 <StartDefaultTask+0x118>)
 8000e4e:	701a      	strb	r2, [r3, #0]
		flag = 1;
 8000e50:	4b2c      	ldr	r3, [pc, #176]	; (8000f04 <StartDefaultTask+0x10c>)
 8000e52:	2201      	movs	r2, #1
 8000e54:	701a      	strb	r2, [r3, #0]


		// Start 5mS timer to trigger the data request
		HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000e56:	2102      	movs	r1, #2
 8000e58:	4830      	ldr	r0, [pc, #192]	; (8000f1c <StartDefaultTask+0x124>)
 8000e5a:	f000 ff1b 	bl	8001c94 <HAL_CAN_ActivateNotification>
		//HAL_TIM_Base_Start_IT(&htim14);
	}
  /* Infinite loop */
  for(;;)
  {
	if(HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin) == GPIO_PIN_SET){
 8000e5e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e62:	482f      	ldr	r0, [pc, #188]	; (8000f20 <StartDefaultTask+0x128>)
 8000e64:	f001 ffbc 	bl	8002de0 <HAL_GPIO_ReadPin>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b01      	cmp	r3, #1
 8000e6c:	d121      	bne.n	8000eb2 <StartDefaultTask+0xba>
		HAL_CAN_DeactivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000e6e:	2102      	movs	r1, #2
 8000e70:	482a      	ldr	r0, [pc, #168]	; (8000f1c <StartDefaultTask+0x124>)
 8000e72:	f000 ff35 	bl	8001ce0 <HAL_CAN_DeactivateNotification>
		//HAL_TIM_Base_Stop_IT(&htim14);
		res = f_close(&SDFile);
 8000e76:	4828      	ldr	r0, [pc, #160]	; (8000f18 <StartDefaultTask+0x120>)
 8000e78:	f010 fbae 	bl	80115d8 <f_close>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	461a      	mov	r2, r3
 8000e80:	4b23      	ldr	r3, [pc, #140]	; (8000f10 <StartDefaultTask+0x118>)
 8000e82:	701a      	strb	r2, [r3, #0]
		res = f_mount(NULL, SDPath, 1);
 8000e84:	2201      	movs	r2, #1
 8000e86:	4920      	ldr	r1, [pc, #128]	; (8000f08 <StartDefaultTask+0x110>)
 8000e88:	2000      	movs	r0, #0
 8000e8a:	f00f fd19 	bl	80108c0 <f_mount>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	461a      	mov	r2, r3
 8000e92:	4b1f      	ldr	r3, [pc, #124]	; (8000f10 <StartDefaultTask+0x118>)
 8000e94:	701a      	strb	r2, [r3, #0]
		//NVIC_DisableIRQ(OTG_FS_IRQn);


		osDelay(10);
 8000e96:	200a      	movs	r0, #10
 8000e98:	f010 feb0 	bl	8011bfc <osDelay>
		MX_USB_DEVICE_Init();
 8000e9c:	f014 fa6e 	bl	801537c <MX_USB_DEVICE_Init>
		NVIC_EnableIRQ(OTG_FS_IRQn);
 8000ea0:	2043      	movs	r0, #67	; 0x43
 8000ea2:	f7ff fb4d 	bl	8000540 <__NVIC_EnableIRQ>

		//vPortEndScheduler();
		//NVIC_EnableIRQ(OTG_FS_IRQn);
		HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_SET);
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	2180      	movs	r1, #128	; 0x80
 8000eaa:	481e      	ldr	r0, [pc, #120]	; (8000f24 <StartDefaultTask+0x12c>)
 8000eac:	f001 ffb0 	bl	8002e10 <HAL_GPIO_WritePin>
 8000eb0:	e7d5      	b.n	8000e5e <StartDefaultTask+0x66>
	}
	else{
		// Test if the data is ready to be written
		if(wf != 0){
 8000eb2:	4b1d      	ldr	r3, [pc, #116]	; (8000f28 <StartDefaultTask+0x130>)
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d0d1      	beq.n	8000e5e <StartDefaultTask+0x66>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8000eba:	2201      	movs	r2, #1
 8000ebc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ec0:	4818      	ldr	r0, [pc, #96]	; (8000f24 <StartDefaultTask+0x12c>)
 8000ec2:	f001 ffa5 	bl	8002e10 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	2101      	movs	r1, #1
 8000eca:	4816      	ldr	r0, [pc, #88]	; (8000f24 <StartDefaultTask+0x12c>)
 8000ecc:	f001 ffa0 	bl	8002e10 <HAL_GPIO_WritePin>
			// Write the buffer to the memory
			res = f_write(&SDFile, SD_buffer, sizeof(SD_buffer), &writeBuff);
 8000ed0:	4b16      	ldr	r3, [pc, #88]	; (8000f2c <StartDefaultTask+0x134>)
 8000ed2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ed6:	4916      	ldr	r1, [pc, #88]	; (8000f30 <StartDefaultTask+0x138>)
 8000ed8:	480f      	ldr	r0, [pc, #60]	; (8000f18 <StartDefaultTask+0x120>)
 8000eda:	f010 f831 	bl	8010f40 <f_write>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	461a      	mov	r2, r3
 8000ee2:	4b0b      	ldr	r3, [pc, #44]	; (8000f10 <StartDefaultTask+0x118>)
 8000ee4:	701a      	strb	r2, [r3, #0]
			wf = 0;
 8000ee6:	4b10      	ldr	r3, [pc, #64]	; (8000f28 <StartDefaultTask+0x130>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8000eec:	2200      	movs	r2, #0
 8000eee:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ef2:	480c      	ldr	r0, [pc, #48]	; (8000f24 <StartDefaultTask+0x12c>)
 8000ef4:	f001 ff8c 	bl	8002e10 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET);
 8000ef8:	2200      	movs	r2, #0
 8000efa:	2101      	movs	r1, #1
 8000efc:	4809      	ldr	r0, [pc, #36]	; (8000f24 <StartDefaultTask+0x12c>)
 8000efe:	f001 ff87 	bl	8002e10 <HAL_GPIO_WritePin>
	if(HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin) == GPIO_PIN_SET){
 8000f02:	e7ac      	b.n	8000e5e <StartDefaultTask+0x66>
 8000f04:	2000020d 	.word	0x2000020d
 8000f08:	2000736c 	.word	0x2000736c
 8000f0c:	20005f30 	.word	0x20005f30
 8000f10:	20007088 	.word	0x20007088
 8000f14:	20000000 	.word	0x20000000
 8000f18:	20007370 	.word	0x20007370
 8000f1c:	20007020 	.word	0x20007020
 8000f20:	40020800 	.word	0x40020800
 8000f24:	40020400 	.word	0x40020400
 8000f28:	2000020e 	.word	0x2000020e
 8000f2c:	20007320 	.word	0x20007320
 8000f30:	20007104 	.word	0x20007104

08000f34 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a10      	ldr	r2, [pc, #64]	; (8000f84 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d101      	bne.n	8000f4a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000f46:	f000 fb25 	bl	8001594 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM14) {
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4a0e      	ldr	r2, [pc, #56]	; (8000f88 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000f50:	4293      	cmp	r3, r2
 8000f52:	d113      	bne.n	8000f7c <HAL_TIM_PeriodElapsedCallback+0x48>
	  // Send a Data request
	  TxData[0] = 0x01;
 8000f54:	4b0d      	ldr	r3, [pc, #52]	; (8000f8c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000f56:	2201      	movs	r2, #1
 8000f58:	701a      	strb	r2, [r3, #0]

	  	  HAL_GPIO_WritePin(GPIOG,SYNC_Pin,GPIO_PIN_SET);
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	2101      	movs	r1, #1
 8000f5e:	480c      	ldr	r0, [pc, #48]	; (8000f90 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000f60:	f001 ff56 	bl	8002e10 <HAL_GPIO_WritePin>
	  	  HAL_Delay(1);
 8000f64:	2001      	movs	r0, #1
 8000f66:	f000 fb35 	bl	80015d4 <HAL_Delay>
	  	  HAL_GPIO_WritePin(GPIOG,SYNC_Pin,GPIO_PIN_RESET);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	2101      	movs	r1, #1
 8000f6e:	4808      	ldr	r0, [pc, #32]	; (8000f90 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000f70:	f001 ff4e 	bl	8002e10 <HAL_GPIO_WritePin>
		  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000f74:	2102      	movs	r1, #2
 8000f76:	4807      	ldr	r0, [pc, #28]	; (8000f94 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000f78:	f000 fe8c 	bl	8001c94 <HAL_CAN_ActivateNotification>
	  }

  /* USER CODE END Callback 1 */
}
 8000f7c:	bf00      	nop
 8000f7e:	3708      	adds	r7, #8
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	40001000 	.word	0x40001000
 8000f88:	40002000 	.word	0x40002000
 8000f8c:	20006f70 	.word	0x20006f70
 8000f90:	40021800 	.word	0x40021800
 8000f94:	20007020 	.word	0x20007020

08000f98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	while(1){
		HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
 8000f9c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fa0:	4803      	ldr	r0, [pc, #12]	; (8000fb0 <Error_Handler+0x18>)
 8000fa2:	f001 ff4e 	bl	8002e42 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8000fa6:	2064      	movs	r0, #100	; 0x64
 8000fa8:	f000 fb14 	bl	80015d4 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
 8000fac:	e7f6      	b.n	8000f9c <Error_Handler+0x4>
 8000fae:	bf00      	nop
 8000fb0:	40020400 	.word	0x40020400

08000fb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000fba:	4b11      	ldr	r3, [pc, #68]	; (8001000 <HAL_MspInit+0x4c>)
 8000fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fbe:	4a10      	ldr	r2, [pc, #64]	; (8001000 <HAL_MspInit+0x4c>)
 8000fc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fc4:	6413      	str	r3, [r2, #64]	; 0x40
 8000fc6:	4b0e      	ldr	r3, [pc, #56]	; (8001000 <HAL_MspInit+0x4c>)
 8000fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fce:	607b      	str	r3, [r7, #4]
 8000fd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fd2:	4b0b      	ldr	r3, [pc, #44]	; (8001000 <HAL_MspInit+0x4c>)
 8000fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd6:	4a0a      	ldr	r2, [pc, #40]	; (8001000 <HAL_MspInit+0x4c>)
 8000fd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fdc:	6453      	str	r3, [r2, #68]	; 0x44
 8000fde:	4b08      	ldr	r3, [pc, #32]	; (8001000 <HAL_MspInit+0x4c>)
 8000fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fe2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fe6:	603b      	str	r3, [r7, #0]
 8000fe8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000fea:	2200      	movs	r2, #0
 8000fec:	210f      	movs	r1, #15
 8000fee:	f06f 0001 	mvn.w	r0, #1
 8000ff2:	f001 f97d 	bl	80022f0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ff6:	bf00      	nop
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	40023800 	.word	0x40023800

08001004 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b08a      	sub	sp, #40	; 0x28
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800100c:	f107 0314 	add.w	r3, r7, #20
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]
 8001014:	605a      	str	r2, [r3, #4]
 8001016:	609a      	str	r2, [r3, #8]
 8001018:	60da      	str	r2, [r3, #12]
 800101a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a17      	ldr	r2, [pc, #92]	; (8001080 <HAL_CAN_MspInit+0x7c>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d127      	bne.n	8001076 <HAL_CAN_MspInit+0x72>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001026:	4b17      	ldr	r3, [pc, #92]	; (8001084 <HAL_CAN_MspInit+0x80>)
 8001028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102a:	4a16      	ldr	r2, [pc, #88]	; (8001084 <HAL_CAN_MspInit+0x80>)
 800102c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001030:	6413      	str	r3, [r2, #64]	; 0x40
 8001032:	4b14      	ldr	r3, [pc, #80]	; (8001084 <HAL_CAN_MspInit+0x80>)
 8001034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001036:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800103a:	613b      	str	r3, [r7, #16]
 800103c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800103e:	4b11      	ldr	r3, [pc, #68]	; (8001084 <HAL_CAN_MspInit+0x80>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001042:	4a10      	ldr	r2, [pc, #64]	; (8001084 <HAL_CAN_MspInit+0x80>)
 8001044:	f043 0308 	orr.w	r3, r3, #8
 8001048:	6313      	str	r3, [r2, #48]	; 0x30
 800104a:	4b0e      	ldr	r3, [pc, #56]	; (8001084 <HAL_CAN_MspInit+0x80>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	f003 0308 	and.w	r3, r3, #8
 8001052:	60fb      	str	r3, [r7, #12]
 8001054:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001056:	2303      	movs	r3, #3
 8001058:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105a:	2302      	movs	r3, #2
 800105c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105e:	2300      	movs	r3, #0
 8001060:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001062:	2303      	movs	r3, #3
 8001064:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001066:	2309      	movs	r3, #9
 8001068:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800106a:	f107 0314 	add.w	r3, r7, #20
 800106e:	4619      	mov	r1, r3
 8001070:	4805      	ldr	r0, [pc, #20]	; (8001088 <HAL_CAN_MspInit+0x84>)
 8001072:	f001 fd0b 	bl	8002a8c <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001076:	bf00      	nop
 8001078:	3728      	adds	r7, #40	; 0x28
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	40006400 	.word	0x40006400
 8001084:	40023800 	.word	0x40023800
 8001088:	40020c00 	.word	0x40020c00

0800108c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b08a      	sub	sp, #40	; 0x28
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001094:	f107 0314 	add.w	r3, r7, #20
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	605a      	str	r2, [r3, #4]
 800109e:	609a      	str	r2, [r3, #8]
 80010a0:	60da      	str	r2, [r3, #12]
 80010a2:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a65      	ldr	r2, [pc, #404]	; (8001240 <HAL_SD_MspInit+0x1b4>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	f040 80c3 	bne.w	8001236 <HAL_SD_MspInit+0x1aa>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80010b0:	4b64      	ldr	r3, [pc, #400]	; (8001244 <HAL_SD_MspInit+0x1b8>)
 80010b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010b4:	4a63      	ldr	r2, [pc, #396]	; (8001244 <HAL_SD_MspInit+0x1b8>)
 80010b6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80010ba:	6453      	str	r3, [r2, #68]	; 0x44
 80010bc:	4b61      	ldr	r3, [pc, #388]	; (8001244 <HAL_SD_MspInit+0x1b8>)
 80010be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80010c4:	613b      	str	r3, [r7, #16]
 80010c6:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010c8:	4b5e      	ldr	r3, [pc, #376]	; (8001244 <HAL_SD_MspInit+0x1b8>)
 80010ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010cc:	4a5d      	ldr	r2, [pc, #372]	; (8001244 <HAL_SD_MspInit+0x1b8>)
 80010ce:	f043 0304 	orr.w	r3, r3, #4
 80010d2:	6313      	str	r3, [r2, #48]	; 0x30
 80010d4:	4b5b      	ldr	r3, [pc, #364]	; (8001244 <HAL_SD_MspInit+0x1b8>)
 80010d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d8:	f003 0304 	and.w	r3, r3, #4
 80010dc:	60fb      	str	r3, [r7, #12]
 80010de:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010e0:	4b58      	ldr	r3, [pc, #352]	; (8001244 <HAL_SD_MspInit+0x1b8>)
 80010e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e4:	4a57      	ldr	r2, [pc, #348]	; (8001244 <HAL_SD_MspInit+0x1b8>)
 80010e6:	f043 0308 	orr.w	r3, r3, #8
 80010ea:	6313      	str	r3, [r2, #48]	; 0x30
 80010ec:	4b55      	ldr	r3, [pc, #340]	; (8001244 <HAL_SD_MspInit+0x1b8>)
 80010ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f0:	f003 0308 	and.w	r3, r3, #8
 80010f4:	60bb      	str	r3, [r7, #8]
 80010f6:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 80010f8:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80010fc:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fe:	2302      	movs	r3, #2
 8001100:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001102:	2300      	movs	r3, #0
 8001104:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001106:	2303      	movs	r3, #3
 8001108:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800110a:	230c      	movs	r3, #12
 800110c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800110e:	f107 0314 	add.w	r3, r7, #20
 8001112:	4619      	mov	r1, r3
 8001114:	484c      	ldr	r0, [pc, #304]	; (8001248 <HAL_SD_MspInit+0x1bc>)
 8001116:	f001 fcb9 	bl	8002a8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800111a:	2304      	movs	r3, #4
 800111c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111e:	2302      	movs	r3, #2
 8001120:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001122:	2300      	movs	r3, #0
 8001124:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001126:	2303      	movs	r3, #3
 8001128:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800112a:	230c      	movs	r3, #12
 800112c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800112e:	f107 0314 	add.w	r3, r7, #20
 8001132:	4619      	mov	r1, r3
 8001134:	4845      	ldr	r0, [pc, #276]	; (800124c <HAL_SD_MspInit+0x1c0>)
 8001136:	f001 fca9 	bl	8002a8c <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream3;
 800113a:	4b45      	ldr	r3, [pc, #276]	; (8001250 <HAL_SD_MspInit+0x1c4>)
 800113c:	4a45      	ldr	r2, [pc, #276]	; (8001254 <HAL_SD_MspInit+0x1c8>)
 800113e:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 8001140:	4b43      	ldr	r3, [pc, #268]	; (8001250 <HAL_SD_MspInit+0x1c4>)
 8001142:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001146:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001148:	4b41      	ldr	r3, [pc, #260]	; (8001250 <HAL_SD_MspInit+0x1c4>)
 800114a:	2240      	movs	r2, #64	; 0x40
 800114c:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800114e:	4b40      	ldr	r3, [pc, #256]	; (8001250 <HAL_SD_MspInit+0x1c4>)
 8001150:	2200      	movs	r2, #0
 8001152:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001154:	4b3e      	ldr	r3, [pc, #248]	; (8001250 <HAL_SD_MspInit+0x1c4>)
 8001156:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800115a:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800115c:	4b3c      	ldr	r3, [pc, #240]	; (8001250 <HAL_SD_MspInit+0x1c4>)
 800115e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001162:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001164:	4b3a      	ldr	r3, [pc, #232]	; (8001250 <HAL_SD_MspInit+0x1c4>)
 8001166:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800116a:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 800116c:	4b38      	ldr	r3, [pc, #224]	; (8001250 <HAL_SD_MspInit+0x1c4>)
 800116e:	2220      	movs	r2, #32
 8001170:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001172:	4b37      	ldr	r3, [pc, #220]	; (8001250 <HAL_SD_MspInit+0x1c4>)
 8001174:	2200      	movs	r2, #0
 8001176:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001178:	4b35      	ldr	r3, [pc, #212]	; (8001250 <HAL_SD_MspInit+0x1c4>)
 800117a:	2204      	movs	r2, #4
 800117c:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800117e:	4b34      	ldr	r3, [pc, #208]	; (8001250 <HAL_SD_MspInit+0x1c4>)
 8001180:	2203      	movs	r2, #3
 8001182:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 8001184:	4b32      	ldr	r3, [pc, #200]	; (8001250 <HAL_SD_MspInit+0x1c4>)
 8001186:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800118a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 800118c:	4b30      	ldr	r3, [pc, #192]	; (8001250 <HAL_SD_MspInit+0x1c4>)
 800118e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001192:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 8001194:	482e      	ldr	r0, [pc, #184]	; (8001250 <HAL_SD_MspInit+0x1c4>)
 8001196:	f001 f8d5 	bl	8002344 <HAL_DMA_Init>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <HAL_SD_MspInit+0x118>
    {
      Error_Handler();
 80011a0:	f7ff fefa 	bl	8000f98 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1_tx);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	4a2a      	ldr	r2, [pc, #168]	; (8001250 <HAL_SD_MspInit+0x1c4>)
 80011a8:	63da      	str	r2, [r3, #60]	; 0x3c
 80011aa:	4a29      	ldr	r2, [pc, #164]	; (8001250 <HAL_SD_MspInit+0x1c4>)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream6;
 80011b0:	4b29      	ldr	r3, [pc, #164]	; (8001258 <HAL_SD_MspInit+0x1cc>)
 80011b2:	4a2a      	ldr	r2, [pc, #168]	; (800125c <HAL_SD_MspInit+0x1d0>)
 80011b4:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 80011b6:	4b28      	ldr	r3, [pc, #160]	; (8001258 <HAL_SD_MspInit+0x1cc>)
 80011b8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011bc:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011be:	4b26      	ldr	r3, [pc, #152]	; (8001258 <HAL_SD_MspInit+0x1cc>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011c4:	4b24      	ldr	r3, [pc, #144]	; (8001258 <HAL_SD_MspInit+0x1cc>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80011ca:	4b23      	ldr	r3, [pc, #140]	; (8001258 <HAL_SD_MspInit+0x1cc>)
 80011cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011d0:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80011d2:	4b21      	ldr	r3, [pc, #132]	; (8001258 <HAL_SD_MspInit+0x1cc>)
 80011d4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011d8:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80011da:	4b1f      	ldr	r3, [pc, #124]	; (8001258 <HAL_SD_MspInit+0x1cc>)
 80011dc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011e0:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 80011e2:	4b1d      	ldr	r3, [pc, #116]	; (8001258 <HAL_SD_MspInit+0x1cc>)
 80011e4:	2220      	movs	r2, #32
 80011e6:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80011e8:	4b1b      	ldr	r3, [pc, #108]	; (8001258 <HAL_SD_MspInit+0x1cc>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80011ee:	4b1a      	ldr	r3, [pc, #104]	; (8001258 <HAL_SD_MspInit+0x1cc>)
 80011f0:	2204      	movs	r2, #4
 80011f2:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80011f4:	4b18      	ldr	r3, [pc, #96]	; (8001258 <HAL_SD_MspInit+0x1cc>)
 80011f6:	2203      	movs	r2, #3
 80011f8:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 80011fa:	4b17      	ldr	r3, [pc, #92]	; (8001258 <HAL_SD_MspInit+0x1cc>)
 80011fc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001200:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001202:	4b15      	ldr	r3, [pc, #84]	; (8001258 <HAL_SD_MspInit+0x1cc>)
 8001204:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001208:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 800120a:	4813      	ldr	r0, [pc, #76]	; (8001258 <HAL_SD_MspInit+0x1cc>)
 800120c:	f001 f89a 	bl	8002344 <HAL_DMA_Init>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <HAL_SD_MspInit+0x18e>
    {
      Error_Handler();
 8001216:	f7ff febf 	bl	8000f98 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1_rx);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4a0e      	ldr	r2, [pc, #56]	; (8001258 <HAL_SD_MspInit+0x1cc>)
 800121e:	641a      	str	r2, [r3, #64]	; 0x40
 8001220:	4a0d      	ldr	r2, [pc, #52]	; (8001258 <HAL_SD_MspInit+0x1cc>)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 8, 0);
 8001226:	2200      	movs	r2, #0
 8001228:	2108      	movs	r1, #8
 800122a:	2031      	movs	r0, #49	; 0x31
 800122c:	f001 f860 	bl	80022f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8001230:	2031      	movs	r0, #49	; 0x31
 8001232:	f001 f879 	bl	8002328 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8001236:	bf00      	nop
 8001238:	3728      	adds	r7, #40	; 0x28
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	40012c00 	.word	0x40012c00
 8001244:	40023800 	.word	0x40023800
 8001248:	40020800 	.word	0x40020800
 800124c:	40020c00 	.word	0x40020c00
 8001250:	200070a4 	.word	0x200070a4
 8001254:	40026458 	.word	0x40026458
 8001258:	20006f98 	.word	0x20006f98
 800125c:	400264a0 	.word	0x400264a0

08001260 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a0d      	ldr	r2, [pc, #52]	; (80012a4 <HAL_TIM_Base_MspInit+0x44>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d113      	bne.n	800129a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001272:	4b0d      	ldr	r3, [pc, #52]	; (80012a8 <HAL_TIM_Base_MspInit+0x48>)
 8001274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001276:	4a0c      	ldr	r2, [pc, #48]	; (80012a8 <HAL_TIM_Base_MspInit+0x48>)
 8001278:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800127c:	6413      	str	r3, [r2, #64]	; 0x40
 800127e:	4b0a      	ldr	r3, [pc, #40]	; (80012a8 <HAL_TIM_Base_MspInit+0x48>)
 8001280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001282:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001286:	60fb      	str	r3, [r7, #12]
 8001288:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 5, 0);
 800128a:	2200      	movs	r2, #0
 800128c:	2105      	movs	r1, #5
 800128e:	202d      	movs	r0, #45	; 0x2d
 8001290:	f001 f82e 	bl	80022f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001294:	202d      	movs	r0, #45	; 0x2d
 8001296:	f001 f847 	bl	8002328 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 800129a:	bf00      	nop
 800129c:	3710      	adds	r7, #16
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	40002000 	.word	0x40002000
 80012a8:	40023800 	.word	0x40023800

080012ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b08a      	sub	sp, #40	; 0x28
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b4:	f107 0314 	add.w	r3, r7, #20
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
 80012bc:	605a      	str	r2, [r3, #4]
 80012be:	609a      	str	r2, [r3, #8]
 80012c0:	60da      	str	r2, [r3, #12]
 80012c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a17      	ldr	r2, [pc, #92]	; (8001328 <HAL_UART_MspInit+0x7c>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d128      	bne.n	8001320 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80012ce:	4b17      	ldr	r3, [pc, #92]	; (800132c <HAL_UART_MspInit+0x80>)
 80012d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d2:	4a16      	ldr	r2, [pc, #88]	; (800132c <HAL_UART_MspInit+0x80>)
 80012d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012d8:	6413      	str	r3, [r2, #64]	; 0x40
 80012da:	4b14      	ldr	r3, [pc, #80]	; (800132c <HAL_UART_MspInit+0x80>)
 80012dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012e2:	613b      	str	r3, [r7, #16]
 80012e4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012e6:	4b11      	ldr	r3, [pc, #68]	; (800132c <HAL_UART_MspInit+0x80>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ea:	4a10      	ldr	r2, [pc, #64]	; (800132c <HAL_UART_MspInit+0x80>)
 80012ec:	f043 0308 	orr.w	r3, r3, #8
 80012f0:	6313      	str	r3, [r2, #48]	; 0x30
 80012f2:	4b0e      	ldr	r3, [pc, #56]	; (800132c <HAL_UART_MspInit+0x80>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	f003 0308 	and.w	r3, r3, #8
 80012fa:	60fb      	str	r3, [r7, #12]
 80012fc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80012fe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001302:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001304:	2302      	movs	r3, #2
 8001306:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001308:	2300      	movs	r3, #0
 800130a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800130c:	2303      	movs	r3, #3
 800130e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001310:	2307      	movs	r3, #7
 8001312:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001314:	f107 0314 	add.w	r3, r7, #20
 8001318:	4619      	mov	r1, r3
 800131a:	4805      	ldr	r0, [pc, #20]	; (8001330 <HAL_UART_MspInit+0x84>)
 800131c:	f001 fbb6 	bl	8002a8c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001320:	bf00      	nop
 8001322:	3728      	adds	r7, #40	; 0x28
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	40004800 	.word	0x40004800
 800132c:	40023800 	.word	0x40023800
 8001330:	40020c00 	.word	0x40020c00

08001334 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b08c      	sub	sp, #48	; 0x30
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800133c:	2300      	movs	r3, #0
 800133e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001340:	2300      	movs	r3, #0
 8001342:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8001344:	2200      	movs	r2, #0
 8001346:	6879      	ldr	r1, [r7, #4]
 8001348:	2036      	movs	r0, #54	; 0x36
 800134a:	f000 ffd1 	bl	80022f0 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 800134e:	2036      	movs	r0, #54	; 0x36
 8001350:	f000 ffea 	bl	8002328 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001354:	4b1f      	ldr	r3, [pc, #124]	; (80013d4 <HAL_InitTick+0xa0>)
 8001356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001358:	4a1e      	ldr	r2, [pc, #120]	; (80013d4 <HAL_InitTick+0xa0>)
 800135a:	f043 0310 	orr.w	r3, r3, #16
 800135e:	6413      	str	r3, [r2, #64]	; 0x40
 8001360:	4b1c      	ldr	r3, [pc, #112]	; (80013d4 <HAL_InitTick+0xa0>)
 8001362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001364:	f003 0310 	and.w	r3, r3, #16
 8001368:	60fb      	str	r3, [r7, #12]
 800136a:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800136c:	f107 0210 	add.w	r2, r7, #16
 8001370:	f107 0314 	add.w	r3, r7, #20
 8001374:	4611      	mov	r1, r2
 8001376:	4618      	mov	r0, r3
 8001378:	f003 fc6e 	bl	8004c58 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800137c:	f003 fc44 	bl	8004c08 <HAL_RCC_GetPCLK1Freq>
 8001380:	4603      	mov	r3, r0
 8001382:	005b      	lsls	r3, r3, #1
 8001384:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001388:	4a13      	ldr	r2, [pc, #76]	; (80013d8 <HAL_InitTick+0xa4>)
 800138a:	fba2 2303 	umull	r2, r3, r2, r3
 800138e:	0c9b      	lsrs	r3, r3, #18
 8001390:	3b01      	subs	r3, #1
 8001392:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001394:	4b11      	ldr	r3, [pc, #68]	; (80013dc <HAL_InitTick+0xa8>)
 8001396:	4a12      	ldr	r2, [pc, #72]	; (80013e0 <HAL_InitTick+0xac>)
 8001398:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 800139a:	4b10      	ldr	r3, [pc, #64]	; (80013dc <HAL_InitTick+0xa8>)
 800139c:	f240 32e7 	movw	r2, #999	; 0x3e7
 80013a0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80013a2:	4a0e      	ldr	r2, [pc, #56]	; (80013dc <HAL_InitTick+0xa8>)
 80013a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013a6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80013a8:	4b0c      	ldr	r3, [pc, #48]	; (80013dc <HAL_InitTick+0xa8>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ae:	4b0b      	ldr	r3, [pc, #44]	; (80013dc <HAL_InitTick+0xa8>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80013b4:	4809      	ldr	r0, [pc, #36]	; (80013dc <HAL_InitTick+0xa8>)
 80013b6:	f005 ff35 	bl	8007224 <HAL_TIM_Base_Init>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d104      	bne.n	80013ca <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80013c0:	4806      	ldr	r0, [pc, #24]	; (80013dc <HAL_InitTick+0xa8>)
 80013c2:	f005 ff5b 	bl	800727c <HAL_TIM_Base_Start_IT>
 80013c6:	4603      	mov	r3, r0
 80013c8:	e000      	b.n	80013cc <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	3730      	adds	r7, #48	; 0x30
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	40023800 	.word	0x40023800
 80013d8:	431bde83 	.word	0x431bde83
 80013dc:	20007324 	.word	0x20007324
 80013e0:	40001000 	.word	0x40001000

080013e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80013e8:	bf00      	nop
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr

080013f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013f2:	b480      	push	{r7}
 80013f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013f6:	e7fe      	b.n	80013f6 <HardFault_Handler+0x4>

080013f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013fc:	e7fe      	b.n	80013fc <MemManage_Handler+0x4>

080013fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013fe:	b480      	push	{r7}
 8001400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001402:	e7fe      	b.n	8001402 <BusFault_Handler+0x4>

08001404 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001408:	e7fe      	b.n	8001408 <UsageFault_Handler+0x4>

0800140a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800140a:	b480      	push	{r7}
 800140c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800140e:	bf00      	nop
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr

08001418 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800141c:	4802      	ldr	r0, [pc, #8]	; (8001428 <CAN1_RX0_IRQHandler+0x10>)
 800141e:	f000 fc86 	bl	8001d2e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001422:	bf00      	nop
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	20007020 	.word	0x20007020

0800142c <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001430:	4802      	ldr	r0, [pc, #8]	; (800143c <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8001432:	f005 ff4d 	bl	80072d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8001436:	bf00      	nop
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	20007048 	.word	0x20007048

08001440 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8001444:	4802      	ldr	r0, [pc, #8]	; (8001450 <SDMMC1_IRQHandler+0x10>)
 8001446:	f004 fe69 	bl	800611c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 800144a:	bf00      	nop
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	20004c8c 	.word	0x20004c8c

08001454 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001458:	4802      	ldr	r0, [pc, #8]	; (8001464 <TIM6_DAC_IRQHandler+0x10>)
 800145a:	f005 ff39 	bl	80072d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800145e:	bf00      	nop
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	20007324 	.word	0x20007324

08001468 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 800146c:	4802      	ldr	r0, [pc, #8]	; (8001478 <DMA2_Stream3_IRQHandler+0x10>)
 800146e:	f001 f899 	bl	80025a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001472:	bf00      	nop
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	200070a4 	.word	0x200070a4

0800147c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001480:	4802      	ldr	r0, [pc, #8]	; (800148c <OTG_FS_IRQHandler+0x10>)
 8001482:	f001 fe3e 	bl	8003102 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001486:	bf00      	nop
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	20009918 	.word	0x20009918

08001490 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 8001494:	4802      	ldr	r0, [pc, #8]	; (80014a0 <DMA2_Stream6_IRQHandler+0x10>)
 8001496:	f001 f885 	bl	80025a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800149a:	bf00      	nop
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	20006f98 	.word	0x20006f98

080014a4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b084      	sub	sp, #16
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80014ac:	4b11      	ldr	r3, [pc, #68]	; (80014f4 <_sbrk+0x50>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d102      	bne.n	80014ba <_sbrk+0x16>
		heap_end = &end;
 80014b4:	4b0f      	ldr	r3, [pc, #60]	; (80014f4 <_sbrk+0x50>)
 80014b6:	4a10      	ldr	r2, [pc, #64]	; (80014f8 <_sbrk+0x54>)
 80014b8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80014ba:	4b0e      	ldr	r3, [pc, #56]	; (80014f4 <_sbrk+0x50>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80014c0:	4b0c      	ldr	r3, [pc, #48]	; (80014f4 <_sbrk+0x50>)
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	4413      	add	r3, r2
 80014c8:	466a      	mov	r2, sp
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d907      	bls.n	80014de <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80014ce:	f014 fca1 	bl	8015e14 <__errno>
 80014d2:	4602      	mov	r2, r0
 80014d4:	230c      	movs	r3, #12
 80014d6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80014d8:	f04f 33ff 	mov.w	r3, #4294967295
 80014dc:	e006      	b.n	80014ec <_sbrk+0x48>
	}

	heap_end += incr;
 80014de:	4b05      	ldr	r3, [pc, #20]	; (80014f4 <_sbrk+0x50>)
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4413      	add	r3, r2
 80014e6:	4a03      	ldr	r2, [pc, #12]	; (80014f4 <_sbrk+0x50>)
 80014e8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80014ea:	68fb      	ldr	r3, [r7, #12]
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	3710      	adds	r7, #16
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	20000210 	.word	0x20000210
 80014f8:	20009d20 	.word	0x20009d20

080014fc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001500:	4b08      	ldr	r3, [pc, #32]	; (8001524 <SystemInit+0x28>)
 8001502:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001506:	4a07      	ldr	r2, [pc, #28]	; (8001524 <SystemInit+0x28>)
 8001508:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800150c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001510:	4b04      	ldr	r3, [pc, #16]	; (8001524 <SystemInit+0x28>)
 8001512:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001516:	609a      	str	r2, [r3, #8]
#endif
}
 8001518:	bf00      	nop
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	e000ed00 	.word	0xe000ed00

08001528 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001528:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001560 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800152c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800152e:	e003      	b.n	8001538 <LoopCopyDataInit>

08001530 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001530:	4b0c      	ldr	r3, [pc, #48]	; (8001564 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001532:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001534:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001536:	3104      	adds	r1, #4

08001538 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001538:	480b      	ldr	r0, [pc, #44]	; (8001568 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800153a:	4b0c      	ldr	r3, [pc, #48]	; (800156c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800153c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800153e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001540:	d3f6      	bcc.n	8001530 <CopyDataInit>
  ldr  r2, =_sbss
 8001542:	4a0b      	ldr	r2, [pc, #44]	; (8001570 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001544:	e002      	b.n	800154c <LoopFillZerobss>

08001546 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001546:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001548:	f842 3b04 	str.w	r3, [r2], #4

0800154c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800154c:	4b09      	ldr	r3, [pc, #36]	; (8001574 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800154e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001550:	d3f9      	bcc.n	8001546 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001552:	f7ff ffd3 	bl	80014fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001556:	f014 fc63 	bl	8015e20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800155a:	f7ff f80f 	bl	800057c <main>
  bx  lr    
 800155e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001560:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8001564:	080165c4 	.word	0x080165c4
  ldr  r0, =_sdata
 8001568:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800156c:	200001ec 	.word	0x200001ec
  ldr  r2, =_sbss
 8001570:	200001f0 	.word	0x200001f0
  ldr  r3, = _ebss
 8001574:	20009d20 	.word	0x20009d20

08001578 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001578:	e7fe      	b.n	8001578 <ADC_IRQHandler>

0800157a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800157a:	b580      	push	{r7, lr}
 800157c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800157e:	2003      	movs	r0, #3
 8001580:	f000 feab 	bl	80022da <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001584:	2000      	movs	r0, #0
 8001586:	f7ff fed5 	bl	8001334 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800158a:	f7ff fd13 	bl	8000fb4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800158e:	2300      	movs	r3, #0
}
 8001590:	4618      	mov	r0, r3
 8001592:	bd80      	pop	{r7, pc}

08001594 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001598:	4b06      	ldr	r3, [pc, #24]	; (80015b4 <HAL_IncTick+0x20>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	461a      	mov	r2, r3
 800159e:	4b06      	ldr	r3, [pc, #24]	; (80015b8 <HAL_IncTick+0x24>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4413      	add	r3, r2
 80015a4:	4a04      	ldr	r2, [pc, #16]	; (80015b8 <HAL_IncTick+0x24>)
 80015a6:	6013      	str	r3, [r2, #0]
}
 80015a8:	bf00      	nop
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	20000018 	.word	0x20000018
 80015b8:	20007364 	.word	0x20007364

080015bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  return uwTick;
 80015c0:	4b03      	ldr	r3, [pc, #12]	; (80015d0 <HAL_GetTick+0x14>)
 80015c2:	681b      	ldr	r3, [r3, #0]
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	20007364 	.word	0x20007364

080015d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b084      	sub	sp, #16
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015dc:	f7ff ffee 	bl	80015bc <HAL_GetTick>
 80015e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015ec:	d005      	beq.n	80015fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015ee:	4b09      	ldr	r3, [pc, #36]	; (8001614 <HAL_Delay+0x40>)
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	461a      	mov	r2, r3
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	4413      	add	r3, r2
 80015f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015fa:	bf00      	nop
 80015fc:	f7ff ffde 	bl	80015bc <HAL_GetTick>
 8001600:	4602      	mov	r2, r0
 8001602:	68bb      	ldr	r3, [r7, #8]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	68fa      	ldr	r2, [r7, #12]
 8001608:	429a      	cmp	r2, r3
 800160a:	d8f7      	bhi.n	80015fc <HAL_Delay+0x28>
  {
  }
}
 800160c:	bf00      	nop
 800160e:	3710      	adds	r7, #16
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	20000018 	.word	0x20000018

08001618 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d101      	bne.n	800162a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	e0ed      	b.n	8001806 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001630:	b2db      	uxtb	r3, r3
 8001632:	2b00      	cmp	r3, #0
 8001634:	d102      	bne.n	800163c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	f7ff fce4 	bl	8001004 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f022 0202 	bic.w	r2, r2, #2
 800164a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800164c:	f7ff ffb6 	bl	80015bc <HAL_GetTick>
 8001650:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001652:	e012      	b.n	800167a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001654:	f7ff ffb2 	bl	80015bc <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	2b0a      	cmp	r3, #10
 8001660:	d90b      	bls.n	800167a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001666:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2205      	movs	r2, #5
 8001672:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	e0c5      	b.n	8001806 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f003 0302 	and.w	r3, r3, #2
 8001684:	2b00      	cmp	r3, #0
 8001686:	d1e5      	bne.n	8001654 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f042 0201 	orr.w	r2, r2, #1
 8001696:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001698:	f7ff ff90 	bl	80015bc <HAL_GetTick>
 800169c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800169e:	e012      	b.n	80016c6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80016a0:	f7ff ff8c 	bl	80015bc <HAL_GetTick>
 80016a4:	4602      	mov	r2, r0
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	2b0a      	cmp	r3, #10
 80016ac:	d90b      	bls.n	80016c6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2205      	movs	r2, #5
 80016be:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e09f      	b.n	8001806 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f003 0301 	and.w	r3, r3, #1
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d0e5      	beq.n	80016a0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	7e1b      	ldrb	r3, [r3, #24]
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d108      	bne.n	80016ee <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80016ea:	601a      	str	r2, [r3, #0]
 80016ec:	e007      	b.n	80016fe <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80016fc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	7e5b      	ldrb	r3, [r3, #25]
 8001702:	2b01      	cmp	r3, #1
 8001704:	d108      	bne.n	8001718 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001714:	601a      	str	r2, [r3, #0]
 8001716:	e007      	b.n	8001728 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001726:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	7e9b      	ldrb	r3, [r3, #26]
 800172c:	2b01      	cmp	r3, #1
 800172e:	d108      	bne.n	8001742 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f042 0220 	orr.w	r2, r2, #32
 800173e:	601a      	str	r2, [r3, #0]
 8001740:	e007      	b.n	8001752 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f022 0220 	bic.w	r2, r2, #32
 8001750:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	7edb      	ldrb	r3, [r3, #27]
 8001756:	2b01      	cmp	r3, #1
 8001758:	d108      	bne.n	800176c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f022 0210 	bic.w	r2, r2, #16
 8001768:	601a      	str	r2, [r3, #0]
 800176a:	e007      	b.n	800177c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f042 0210 	orr.w	r2, r2, #16
 800177a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	7f1b      	ldrb	r3, [r3, #28]
 8001780:	2b01      	cmp	r3, #1
 8001782:	d108      	bne.n	8001796 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f042 0208 	orr.w	r2, r2, #8
 8001792:	601a      	str	r2, [r3, #0]
 8001794:	e007      	b.n	80017a6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f022 0208 	bic.w	r2, r2, #8
 80017a4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	7f5b      	ldrb	r3, [r3, #29]
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d108      	bne.n	80017c0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f042 0204 	orr.w	r2, r2, #4
 80017bc:	601a      	str	r2, [r3, #0]
 80017be:	e007      	b.n	80017d0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f022 0204 	bic.w	r2, r2, #4
 80017ce:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	689a      	ldr	r2, [r3, #8]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	431a      	orrs	r2, r3
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	691b      	ldr	r3, [r3, #16]
 80017de:	431a      	orrs	r2, r3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	695b      	ldr	r3, [r3, #20]
 80017e4:	ea42 0103 	orr.w	r1, r2, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	1e5a      	subs	r2, r3, #1
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	430a      	orrs	r2, r1
 80017f4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2200      	movs	r2, #0
 80017fa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2201      	movs	r2, #1
 8001800:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001804:	2300      	movs	r3, #0
}
 8001806:	4618      	mov	r0, r3
 8001808:	3710      	adds	r7, #16
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
	...

08001810 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001810:	b480      	push	{r7}
 8001812:	b087      	sub	sp, #28
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001826:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001828:	7cfb      	ldrb	r3, [r7, #19]
 800182a:	2b01      	cmp	r3, #1
 800182c:	d003      	beq.n	8001836 <HAL_CAN_ConfigFilter+0x26>
 800182e:	7cfb      	ldrb	r3, [r7, #19]
 8001830:	2b02      	cmp	r3, #2
 8001832:	f040 80c7 	bne.w	80019c4 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a69      	ldr	r2, [pc, #420]	; (80019e0 <HAL_CAN_ConfigFilter+0x1d0>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d001      	beq.n	8001844 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8001840:	4b68      	ldr	r3, [pc, #416]	; (80019e4 <HAL_CAN_ConfigFilter+0x1d4>)
 8001842:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800184a:	f043 0201 	orr.w	r2, r3, #1
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	4a63      	ldr	r2, [pc, #396]	; (80019e4 <HAL_CAN_ConfigFilter+0x1d4>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d111      	bne.n	8001880 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001862:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001876:	021b      	lsls	r3, r3, #8
 8001878:	431a      	orrs	r2, r3
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	695b      	ldr	r3, [r3, #20]
 8001884:	f003 031f 	and.w	r3, r3, #31
 8001888:	2201      	movs	r2, #1
 800188a:	fa02 f303 	lsl.w	r3, r2, r3
 800188e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	43db      	mvns	r3, r3
 800189a:	401a      	ands	r2, r3
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	69db      	ldr	r3, [r3, #28]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d123      	bne.n	80018f2 <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	43db      	mvns	r3, r3
 80018b4:	401a      	ands	r2, r3
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80018c8:	683a      	ldr	r2, [r7, #0]
 80018ca:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80018cc:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	3248      	adds	r2, #72	; 0x48
 80018d2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80018e6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80018e8:	6979      	ldr	r1, [r7, #20]
 80018ea:	3348      	adds	r3, #72	; 0x48
 80018ec:	00db      	lsls	r3, r3, #3
 80018ee:	440b      	add	r3, r1
 80018f0:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	69db      	ldr	r3, [r3, #28]
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d122      	bne.n	8001940 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	431a      	orrs	r2, r3
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001916:	683a      	ldr	r2, [r7, #0]
 8001918:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800191a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	3248      	adds	r2, #72	; 0x48
 8001920:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	68db      	ldr	r3, [r3, #12]
 800192e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001934:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001936:	6979      	ldr	r1, [r7, #20]
 8001938:	3348      	adds	r3, #72	; 0x48
 800193a:	00db      	lsls	r3, r3, #3
 800193c:	440b      	add	r3, r1
 800193e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	699b      	ldr	r3, [r3, #24]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d109      	bne.n	800195c <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	43db      	mvns	r3, r3
 8001952:	401a      	ands	r2, r3
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800195a:	e007      	b.n	800196c <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	431a      	orrs	r2, r3
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	691b      	ldr	r3, [r3, #16]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d109      	bne.n	8001988 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	43db      	mvns	r3, r3
 800197e:	401a      	ands	r2, r3
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001986:	e007      	b.n	8001998 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	431a      	orrs	r2, r3
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	6a1b      	ldr	r3, [r3, #32]
 800199c:	2b01      	cmp	r3, #1
 800199e:	d107      	bne.n	80019b0 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	431a      	orrs	r2, r3
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80019b6:	f023 0201 	bic.w	r2, r3, #1
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80019c0:	2300      	movs	r3, #0
 80019c2:	e006      	b.n	80019d2 <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
  }
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	371c      	adds	r7, #28
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	40003400 	.word	0x40003400
 80019e4:	40006400 	.word	0x40006400

080019e8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d12e      	bne.n	8001a5a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2202      	movs	r2, #2
 8001a00:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f022 0201 	bic.w	r2, r2, #1
 8001a12:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001a14:	f7ff fdd2 	bl	80015bc <HAL_GetTick>
 8001a18:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001a1a:	e012      	b.n	8001a42 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a1c:	f7ff fdce 	bl	80015bc <HAL_GetTick>
 8001a20:	4602      	mov	r2, r0
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	2b0a      	cmp	r3, #10
 8001a28:	d90b      	bls.n	8001a42 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a2e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2205      	movs	r2, #5
 8001a3a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e012      	b.n	8001a68 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f003 0301 	and.w	r3, r3, #1
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d1e5      	bne.n	8001a1c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2200      	movs	r2, #0
 8001a54:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001a56:	2300      	movs	r3, #0
 8001a58:	e006      	b.n	8001a68 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a5e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
  }
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3710      	adds	r7, #16
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}

08001a70 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001a70:	b480      	push	{r7}
 8001a72:	b087      	sub	sp, #28
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	60f8      	str	r0, [r7, #12]
 8001a78:	60b9      	str	r1, [r7, #8]
 8001a7a:	607a      	str	r2, [r7, #4]
 8001a7c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a84:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001a86:	7dfb      	ldrb	r3, [r7, #23]
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d003      	beq.n	8001a94 <HAL_CAN_GetRxMessage+0x24>
 8001a8c:	7dfb      	ldrb	r3, [r7, #23]
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	f040 80f3 	bne.w	8001c7a <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d10e      	bne.n	8001ab8 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	f003 0303 	and.w	r3, r3, #3
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d116      	bne.n	8001ad6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aac:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	e0e7      	b.n	8001c88 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	691b      	ldr	r3, [r3, #16]
 8001abe:	f003 0303 	and.w	r3, r3, #3
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d107      	bne.n	8001ad6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aca:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e0d8      	b.n	8001c88 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	331b      	adds	r3, #27
 8001ade:	011b      	lsls	r3, r3, #4
 8001ae0:	4413      	add	r3, r2
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 0204 	and.w	r2, r3, #4
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d10c      	bne.n	8001b0e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	331b      	adds	r3, #27
 8001afc:	011b      	lsls	r3, r3, #4
 8001afe:	4413      	add	r3, r2
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	0d5b      	lsrs	r3, r3, #21
 8001b04:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	601a      	str	r2, [r3, #0]
 8001b0c:	e00b      	b.n	8001b26 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	331b      	adds	r3, #27
 8001b16:	011b      	lsls	r3, r3, #4
 8001b18:	4413      	add	r3, r2
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	08db      	lsrs	r3, r3, #3
 8001b1e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	331b      	adds	r3, #27
 8001b2e:	011b      	lsls	r3, r3, #4
 8001b30:	4413      	add	r3, r2
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 0202 	and.w	r2, r3, #2
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	331b      	adds	r3, #27
 8001b44:	011b      	lsls	r3, r3, #4
 8001b46:	4413      	add	r3, r2
 8001b48:	3304      	adds	r3, #4
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 020f 	and.w	r2, r3, #15
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	331b      	adds	r3, #27
 8001b5c:	011b      	lsls	r3, r3, #4
 8001b5e:	4413      	add	r3, r2
 8001b60:	3304      	adds	r3, #4
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	0a1b      	lsrs	r3, r3, #8
 8001b66:	b2da      	uxtb	r2, r3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	331b      	adds	r3, #27
 8001b74:	011b      	lsls	r3, r3, #4
 8001b76:	4413      	add	r3, r2
 8001b78:	3304      	adds	r3, #4
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	0c1b      	lsrs	r3, r3, #16
 8001b7e:	b29a      	uxth	r2, r3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	011b      	lsls	r3, r3, #4
 8001b8c:	4413      	add	r3, r2
 8001b8e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	b2da      	uxtb	r2, r3
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	011b      	lsls	r3, r3, #4
 8001ba2:	4413      	add	r3, r2
 8001ba4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	0a1a      	lsrs	r2, r3, #8
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	3301      	adds	r3, #1
 8001bb0:	b2d2      	uxtb	r2, r2
 8001bb2:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	011b      	lsls	r3, r3, #4
 8001bbc:	4413      	add	r3, r2
 8001bbe:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	0c1a      	lsrs	r2, r3, #16
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	3302      	adds	r3, #2
 8001bca:	b2d2      	uxtb	r2, r2
 8001bcc:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	011b      	lsls	r3, r3, #4
 8001bd6:	4413      	add	r3, r2
 8001bd8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	0e1a      	lsrs	r2, r3, #24
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	3303      	adds	r3, #3
 8001be4:	b2d2      	uxtb	r2, r2
 8001be6:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	011b      	lsls	r3, r3, #4
 8001bf0:	4413      	add	r3, r2
 8001bf2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	3304      	adds	r3, #4
 8001bfc:	b2d2      	uxtb	r2, r2
 8001bfe:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	011b      	lsls	r3, r3, #4
 8001c08:	4413      	add	r3, r2
 8001c0a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	0a1a      	lsrs	r2, r3, #8
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	3305      	adds	r3, #5
 8001c16:	b2d2      	uxtb	r2, r2
 8001c18:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	011b      	lsls	r3, r3, #4
 8001c22:	4413      	add	r3, r2
 8001c24:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	0c1a      	lsrs	r2, r3, #16
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	3306      	adds	r3, #6
 8001c30:	b2d2      	uxtb	r2, r2
 8001c32:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	011b      	lsls	r3, r3, #4
 8001c3c:	4413      	add	r3, r2
 8001c3e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	0e1a      	lsrs	r2, r3, #24
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	3307      	adds	r3, #7
 8001c4a:	b2d2      	uxtb	r2, r2
 8001c4c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d108      	bne.n	8001c66 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	68da      	ldr	r2, [r3, #12]
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f042 0220 	orr.w	r2, r2, #32
 8001c62:	60da      	str	r2, [r3, #12]
 8001c64:	e007      	b.n	8001c76 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	691a      	ldr	r2, [r3, #16]
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f042 0220 	orr.w	r2, r2, #32
 8001c74:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001c76:	2300      	movs	r3, #0
 8001c78:	e006      	b.n	8001c88 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c7e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
  }
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	371c      	adds	r7, #28
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr

08001c94 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b085      	sub	sp, #20
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ca4:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001ca6:	7bfb      	ldrb	r3, [r7, #15]
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d002      	beq.n	8001cb2 <HAL_CAN_ActivateNotification+0x1e>
 8001cac:	7bfb      	ldrb	r3, [r7, #15]
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	d109      	bne.n	8001cc6 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	6959      	ldr	r1, [r3, #20]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	683a      	ldr	r2, [r7, #0]
 8001cbe:	430a      	orrs	r2, r1
 8001cc0:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	e006      	b.n	8001cd4 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cca:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
  }
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3714      	adds	r7, #20
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr

08001ce0 <HAL_CAN_DeactivateNotification>:
  * @param  InactiveITs indicates which interrupts will be disabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeactivateNotification(CAN_HandleTypeDef *hcan, uint32_t InactiveITs)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b085      	sub	sp, #20
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cf0:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(InactiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001cf2:	7bfb      	ldrb	r3, [r7, #15]
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d002      	beq.n	8001cfe <HAL_CAN_DeactivateNotification+0x1e>
 8001cf8:	7bfb      	ldrb	r3, [r7, #15]
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d10a      	bne.n	8001d14 <HAL_CAN_DeactivateNotification+0x34>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Disable the selected interrupts */
    __HAL_CAN_DISABLE_IT(hcan, InactiveITs);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	6959      	ldr	r1, [r3, #20]
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	43da      	mvns	r2, r3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	400a      	ands	r2, r1
 8001d0e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001d10:	2300      	movs	r3, #0
 8001d12:	e006      	b.n	8001d22 <HAL_CAN_DeactivateNotification+0x42>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d18:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
  }
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3714      	adds	r7, #20
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr

08001d2e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	b08a      	sub	sp, #40	; 0x28
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001d36:	2300      	movs	r3, #0
 8001d38:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	695b      	ldr	r3, [r3, #20]
 8001d40:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	691b      	ldr	r3, [r3, #16]
 8001d60:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	699b      	ldr	r3, [r3, #24]
 8001d68:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001d6a:	6a3b      	ldr	r3, [r7, #32]
 8001d6c:	f003 0301 	and.w	r3, r3, #1
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d07c      	beq.n	8001e6e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001d74:	69bb      	ldr	r3, [r7, #24]
 8001d76:	f003 0301 	and.w	r3, r3, #1
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d023      	beq.n	8001dc6 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	2201      	movs	r2, #1
 8001d84:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001d86:	69bb      	ldr	r3, [r7, #24]
 8001d88:	f003 0302 	and.w	r3, r3, #2
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d003      	beq.n	8001d98 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f000 f97d 	bl	8002090 <HAL_CAN_TxMailbox0CompleteCallback>
 8001d96:	e016      	b.n	8001dc6 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001d98:	69bb      	ldr	r3, [r7, #24]
 8001d9a:	f003 0304 	and.w	r3, r3, #4
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d004      	beq.n	8001dac <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001da8:	627b      	str	r3, [r7, #36]	; 0x24
 8001daa:	e00c      	b.n	8001dc6 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001dac:	69bb      	ldr	r3, [r7, #24]
 8001dae:	f003 0308 	and.w	r3, r3, #8
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d004      	beq.n	8001dc0 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001dbc:	627b      	str	r3, [r7, #36]	; 0x24
 8001dbe:	e002      	b.n	8001dc6 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f000 f983 	bl	80020cc <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001dc6:	69bb      	ldr	r3, [r7, #24]
 8001dc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d024      	beq.n	8001e1a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001dd8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001dda:	69bb      	ldr	r3, [r7, #24]
 8001ddc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d003      	beq.n	8001dec <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f000 f95d 	bl	80020a4 <HAL_CAN_TxMailbox1CompleteCallback>
 8001dea:	e016      	b.n	8001e1a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001dec:	69bb      	ldr	r3, [r7, #24]
 8001dee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d004      	beq.n	8001e00 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001dfc:	627b      	str	r3, [r7, #36]	; 0x24
 8001dfe:	e00c      	b.n	8001e1a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001e00:	69bb      	ldr	r3, [r7, #24]
 8001e02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d004      	beq.n	8001e14 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e10:	627b      	str	r3, [r7, #36]	; 0x24
 8001e12:	e002      	b.n	8001e1a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f000 f963 	bl	80020e0 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001e1a:	69bb      	ldr	r3, [r7, #24]
 8001e1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d024      	beq.n	8001e6e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001e2c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001e2e:	69bb      	ldr	r3, [r7, #24]
 8001e30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d003      	beq.n	8001e40 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	f000 f93d 	bl	80020b8 <HAL_CAN_TxMailbox2CompleteCallback>
 8001e3e:	e016      	b.n	8001e6e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001e40:	69bb      	ldr	r3, [r7, #24]
 8001e42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d004      	beq.n	8001e54 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e50:	627b      	str	r3, [r7, #36]	; 0x24
 8001e52:	e00c      	b.n	8001e6e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001e54:	69bb      	ldr	r3, [r7, #24]
 8001e56:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d004      	beq.n	8001e68 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e64:	627b      	str	r3, [r7, #36]	; 0x24
 8001e66:	e002      	b.n	8001e6e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f000 f943 	bl	80020f4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001e6e:	6a3b      	ldr	r3, [r7, #32]
 8001e70:	f003 0308 	and.w	r3, r3, #8
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d00c      	beq.n	8001e92 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	f003 0310 	and.w	r3, r3, #16
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d007      	beq.n	8001e92 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e84:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e88:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	2210      	movs	r2, #16
 8001e90:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001e92:	6a3b      	ldr	r3, [r7, #32]
 8001e94:	f003 0304 	and.w	r3, r3, #4
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d00b      	beq.n	8001eb4 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	f003 0308 	and.w	r3, r3, #8
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d006      	beq.n	8001eb4 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	2208      	movs	r2, #8
 8001eac:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f000 f92a 	bl	8002108 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001eb4:	6a3b      	ldr	r3, [r7, #32]
 8001eb6:	f003 0302 	and.w	r3, r3, #2
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d009      	beq.n	8001ed2 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	f003 0303 	and.w	r3, r3, #3
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d002      	beq.n	8001ed2 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	f7fe fe0d 	bl	8000aec <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001ed2:	6a3b      	ldr	r3, [r7, #32]
 8001ed4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d00c      	beq.n	8001ef6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	f003 0310 	and.w	r3, r3, #16
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d007      	beq.n	8001ef6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001eec:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	2210      	movs	r2, #16
 8001ef4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001ef6:	6a3b      	ldr	r3, [r7, #32]
 8001ef8:	f003 0320 	and.w	r3, r3, #32
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d00b      	beq.n	8001f18 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	f003 0308 	and.w	r3, r3, #8
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d006      	beq.n	8001f18 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	2208      	movs	r2, #8
 8001f10:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f000 f90c 	bl	8002130 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001f18:	6a3b      	ldr	r3, [r7, #32]
 8001f1a:	f003 0310 	and.w	r3, r3, #16
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d009      	beq.n	8001f36 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	691b      	ldr	r3, [r3, #16]
 8001f28:	f003 0303 	and.w	r3, r3, #3
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d002      	beq.n	8001f36 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	f000 f8f3 	bl	800211c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001f36:	6a3b      	ldr	r3, [r7, #32]
 8001f38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d00b      	beq.n	8001f58 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	f003 0310 	and.w	r3, r3, #16
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d006      	beq.n	8001f58 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	2210      	movs	r2, #16
 8001f50:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f000 f8f6 	bl	8002144 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001f58:	6a3b      	ldr	r3, [r7, #32]
 8001f5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d00b      	beq.n	8001f7a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	f003 0308 	and.w	r3, r3, #8
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d006      	beq.n	8001f7a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2208      	movs	r2, #8
 8001f72:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f000 f8ef 	bl	8002158 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001f7a:	6a3b      	ldr	r3, [r7, #32]
 8001f7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d075      	beq.n	8002070 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	f003 0304 	and.w	r3, r3, #4
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d06c      	beq.n	8002068 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001f8e:	6a3b      	ldr	r3, [r7, #32]
 8001f90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d008      	beq.n	8001faa <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d003      	beq.n	8001faa <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa4:	f043 0301 	orr.w	r3, r3, #1
 8001fa8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001faa:	6a3b      	ldr	r3, [r7, #32]
 8001fac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d008      	beq.n	8001fc6 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d003      	beq.n	8001fc6 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc0:	f043 0302 	orr.w	r3, r3, #2
 8001fc4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001fc6:	6a3b      	ldr	r3, [r7, #32]
 8001fc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d008      	beq.n	8001fe2 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d003      	beq.n	8001fe2 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fdc:	f043 0304 	orr.w	r3, r3, #4
 8001fe0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001fe2:	6a3b      	ldr	r3, [r7, #32]
 8001fe4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d03d      	beq.n	8002068 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d038      	beq.n	8002068 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001ffc:	2b30      	cmp	r3, #48	; 0x30
 8001ffe:	d017      	beq.n	8002030 <HAL_CAN_IRQHandler+0x302>
 8002000:	2b30      	cmp	r3, #48	; 0x30
 8002002:	d804      	bhi.n	800200e <HAL_CAN_IRQHandler+0x2e0>
 8002004:	2b10      	cmp	r3, #16
 8002006:	d009      	beq.n	800201c <HAL_CAN_IRQHandler+0x2ee>
 8002008:	2b20      	cmp	r3, #32
 800200a:	d00c      	beq.n	8002026 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800200c:	e024      	b.n	8002058 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 800200e:	2b50      	cmp	r3, #80	; 0x50
 8002010:	d018      	beq.n	8002044 <HAL_CAN_IRQHandler+0x316>
 8002012:	2b60      	cmp	r3, #96	; 0x60
 8002014:	d01b      	beq.n	800204e <HAL_CAN_IRQHandler+0x320>
 8002016:	2b40      	cmp	r3, #64	; 0x40
 8002018:	d00f      	beq.n	800203a <HAL_CAN_IRQHandler+0x30c>
            break;
 800201a:	e01d      	b.n	8002058 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 800201c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201e:	f043 0308 	orr.w	r3, r3, #8
 8002022:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002024:	e018      	b.n	8002058 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002028:	f043 0310 	orr.w	r3, r3, #16
 800202c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800202e:	e013      	b.n	8002058 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002032:	f043 0320 	orr.w	r3, r3, #32
 8002036:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002038:	e00e      	b.n	8002058 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 800203a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002040:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002042:	e009      	b.n	8002058 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8002044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002046:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800204a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800204c:	e004      	b.n	8002058 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 800204e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002050:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002054:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002056:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	699a      	ldr	r2, [r3, #24]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002066:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	2204      	movs	r2, #4
 800206e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002072:	2b00      	cmp	r3, #0
 8002074:	d008      	beq.n	8002088 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800207a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207c:	431a      	orrs	r2, r3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f000 f872 	bl	800216c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002088:	bf00      	nop
 800208a:	3728      	adds	r7, #40	; 0x28
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}

08002090 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002098:	bf00      	nop
 800209a:	370c      	adds	r7, #12
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr

080020a4 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80020ac:	bf00      	nop
 80020ae:	370c      	adds	r7, #12
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr

080020b8 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80020c0:	bf00      	nop
 80020c2:	370c      	adds	r7, #12
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr

080020cc <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80020d4:	bf00      	nop
 80020d6:	370c      	adds	r7, #12
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr

080020e0 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80020e8:	bf00      	nop
 80020ea:	370c      	adds	r7, #12
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr

080020f4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80020fc:	bf00      	nop
 80020fe:	370c      	adds	r7, #12
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002110:	bf00      	nop
 8002112:	370c      	adds	r7, #12
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002124:	bf00      	nop
 8002126:	370c      	adds	r7, #12
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr

08002130 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002138:	bf00      	nop
 800213a:	370c      	adds	r7, #12
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr

08002144 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800214c:	bf00      	nop
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr

08002158 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002160:	bf00      	nop
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002174:	bf00      	nop
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <__NVIC_SetPriorityGrouping>:
{
 8002180:	b480      	push	{r7}
 8002182:	b085      	sub	sp, #20
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f003 0307 	and.w	r3, r3, #7
 800218e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002190:	4b0b      	ldr	r3, [pc, #44]	; (80021c0 <__NVIC_SetPriorityGrouping+0x40>)
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002196:	68ba      	ldr	r2, [r7, #8]
 8002198:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800219c:	4013      	ands	r3, r2
 800219e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80021a8:	4b06      	ldr	r3, [pc, #24]	; (80021c4 <__NVIC_SetPriorityGrouping+0x44>)
 80021aa:	4313      	orrs	r3, r2
 80021ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021ae:	4a04      	ldr	r2, [pc, #16]	; (80021c0 <__NVIC_SetPriorityGrouping+0x40>)
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	60d3      	str	r3, [r2, #12]
}
 80021b4:	bf00      	nop
 80021b6:	3714      	adds	r7, #20
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr
 80021c0:	e000ed00 	.word	0xe000ed00
 80021c4:	05fa0000 	.word	0x05fa0000

080021c8 <__NVIC_GetPriorityGrouping>:
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021cc:	4b04      	ldr	r3, [pc, #16]	; (80021e0 <__NVIC_GetPriorityGrouping+0x18>)
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	0a1b      	lsrs	r3, r3, #8
 80021d2:	f003 0307 	and.w	r3, r3, #7
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr
 80021e0:	e000ed00 	.word	0xe000ed00

080021e4 <__NVIC_EnableIRQ>:
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	4603      	mov	r3, r0
 80021ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	db0b      	blt.n	800220e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021f6:	79fb      	ldrb	r3, [r7, #7]
 80021f8:	f003 021f 	and.w	r2, r3, #31
 80021fc:	4907      	ldr	r1, [pc, #28]	; (800221c <__NVIC_EnableIRQ+0x38>)
 80021fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002202:	095b      	lsrs	r3, r3, #5
 8002204:	2001      	movs	r0, #1
 8002206:	fa00 f202 	lsl.w	r2, r0, r2
 800220a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800220e:	bf00      	nop
 8002210:	370c      	adds	r7, #12
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	e000e100 	.word	0xe000e100

08002220 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	4603      	mov	r3, r0
 8002228:	6039      	str	r1, [r7, #0]
 800222a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800222c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002230:	2b00      	cmp	r3, #0
 8002232:	db0a      	blt.n	800224a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	b2da      	uxtb	r2, r3
 8002238:	490c      	ldr	r1, [pc, #48]	; (800226c <__NVIC_SetPriority+0x4c>)
 800223a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800223e:	0112      	lsls	r2, r2, #4
 8002240:	b2d2      	uxtb	r2, r2
 8002242:	440b      	add	r3, r1
 8002244:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002248:	e00a      	b.n	8002260 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	b2da      	uxtb	r2, r3
 800224e:	4908      	ldr	r1, [pc, #32]	; (8002270 <__NVIC_SetPriority+0x50>)
 8002250:	79fb      	ldrb	r3, [r7, #7]
 8002252:	f003 030f 	and.w	r3, r3, #15
 8002256:	3b04      	subs	r3, #4
 8002258:	0112      	lsls	r2, r2, #4
 800225a:	b2d2      	uxtb	r2, r2
 800225c:	440b      	add	r3, r1
 800225e:	761a      	strb	r2, [r3, #24]
}
 8002260:	bf00      	nop
 8002262:	370c      	adds	r7, #12
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr
 800226c:	e000e100 	.word	0xe000e100
 8002270:	e000ed00 	.word	0xe000ed00

08002274 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002274:	b480      	push	{r7}
 8002276:	b089      	sub	sp, #36	; 0x24
 8002278:	af00      	add	r7, sp, #0
 800227a:	60f8      	str	r0, [r7, #12]
 800227c:	60b9      	str	r1, [r7, #8]
 800227e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	f003 0307 	and.w	r3, r3, #7
 8002286:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	f1c3 0307 	rsb	r3, r3, #7
 800228e:	2b04      	cmp	r3, #4
 8002290:	bf28      	it	cs
 8002292:	2304      	movcs	r3, #4
 8002294:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	3304      	adds	r3, #4
 800229a:	2b06      	cmp	r3, #6
 800229c:	d902      	bls.n	80022a4 <NVIC_EncodePriority+0x30>
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	3b03      	subs	r3, #3
 80022a2:	e000      	b.n	80022a6 <NVIC_EncodePriority+0x32>
 80022a4:	2300      	movs	r3, #0
 80022a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022a8:	f04f 32ff 	mov.w	r2, #4294967295
 80022ac:	69bb      	ldr	r3, [r7, #24]
 80022ae:	fa02 f303 	lsl.w	r3, r2, r3
 80022b2:	43da      	mvns	r2, r3
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	401a      	ands	r2, r3
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022bc:	f04f 31ff 	mov.w	r1, #4294967295
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	fa01 f303 	lsl.w	r3, r1, r3
 80022c6:	43d9      	mvns	r1, r3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022cc:	4313      	orrs	r3, r2
         );
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3724      	adds	r7, #36	; 0x24
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr

080022da <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022da:	b580      	push	{r7, lr}
 80022dc:	b082      	sub	sp, #8
 80022de:	af00      	add	r7, sp, #0
 80022e0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f7ff ff4c 	bl	8002180 <__NVIC_SetPriorityGrouping>
}
 80022e8:	bf00      	nop
 80022ea:	3708      	adds	r7, #8
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}

080022f0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b086      	sub	sp, #24
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	4603      	mov	r3, r0
 80022f8:	60b9      	str	r1, [r7, #8]
 80022fa:	607a      	str	r2, [r7, #4]
 80022fc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80022fe:	2300      	movs	r3, #0
 8002300:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002302:	f7ff ff61 	bl	80021c8 <__NVIC_GetPriorityGrouping>
 8002306:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002308:	687a      	ldr	r2, [r7, #4]
 800230a:	68b9      	ldr	r1, [r7, #8]
 800230c:	6978      	ldr	r0, [r7, #20]
 800230e:	f7ff ffb1 	bl	8002274 <NVIC_EncodePriority>
 8002312:	4602      	mov	r2, r0
 8002314:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002318:	4611      	mov	r1, r2
 800231a:	4618      	mov	r0, r3
 800231c:	f7ff ff80 	bl	8002220 <__NVIC_SetPriority>
}
 8002320:	bf00      	nop
 8002322:	3718      	adds	r7, #24
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}

08002328 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
 800232e:	4603      	mov	r3, r0
 8002330:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002336:	4618      	mov	r0, r3
 8002338:	f7ff ff54 	bl	80021e4 <__NVIC_EnableIRQ>
}
 800233c:	bf00      	nop
 800233e:	3708      	adds	r7, #8
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}

08002344 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b086      	sub	sp, #24
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800234c:	2300      	movs	r3, #0
 800234e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002350:	f7ff f934 	bl	80015bc <HAL_GetTick>
 8002354:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d101      	bne.n	8002360 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e099      	b.n	8002494 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2200      	movs	r2, #0
 8002364:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2202      	movs	r2, #2
 800236c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f022 0201 	bic.w	r2, r2, #1
 800237e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002380:	e00f      	b.n	80023a2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002382:	f7ff f91b 	bl	80015bc <HAL_GetTick>
 8002386:	4602      	mov	r2, r0
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	2b05      	cmp	r3, #5
 800238e:	d908      	bls.n	80023a2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2220      	movs	r2, #32
 8002394:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2203      	movs	r2, #3
 800239a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800239e:	2303      	movs	r3, #3
 80023a0:	e078      	b.n	8002494 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 0301 	and.w	r3, r3, #1
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d1e8      	bne.n	8002382 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80023b8:	697a      	ldr	r2, [r7, #20]
 80023ba:	4b38      	ldr	r3, [pc, #224]	; (800249c <HAL_DMA_Init+0x158>)
 80023bc:	4013      	ands	r3, r2
 80023be:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	685a      	ldr	r2, [r3, #4]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	691b      	ldr	r3, [r3, #16]
 80023d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	699b      	ldr	r3, [r3, #24]
 80023e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6a1b      	ldr	r3, [r3, #32]
 80023ec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023ee:	697a      	ldr	r2, [r7, #20]
 80023f0:	4313      	orrs	r3, r2
 80023f2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f8:	2b04      	cmp	r3, #4
 80023fa:	d107      	bne.n	800240c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002404:	4313      	orrs	r3, r2
 8002406:	697a      	ldr	r2, [r7, #20]
 8002408:	4313      	orrs	r3, r2
 800240a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	697a      	ldr	r2, [r7, #20]
 8002412:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	695b      	ldr	r3, [r3, #20]
 800241a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	f023 0307 	bic.w	r3, r3, #7
 8002422:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002428:	697a      	ldr	r2, [r7, #20]
 800242a:	4313      	orrs	r3, r2
 800242c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002432:	2b04      	cmp	r3, #4
 8002434:	d117      	bne.n	8002466 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800243a:	697a      	ldr	r2, [r7, #20]
 800243c:	4313      	orrs	r3, r2
 800243e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002444:	2b00      	cmp	r3, #0
 8002446:	d00e      	beq.n	8002466 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002448:	6878      	ldr	r0, [r7, #4]
 800244a:	f000 faa5 	bl	8002998 <DMA_CheckFifoParam>
 800244e:	4603      	mov	r3, r0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d008      	beq.n	8002466 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2240      	movs	r2, #64	; 0x40
 8002458:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2201      	movs	r2, #1
 800245e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002462:	2301      	movs	r3, #1
 8002464:	e016      	b.n	8002494 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	697a      	ldr	r2, [r7, #20]
 800246c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f000 fa5c 	bl	800292c <DMA_CalcBaseAndBitshift>
 8002474:	4603      	mov	r3, r0
 8002476:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800247c:	223f      	movs	r2, #63	; 0x3f
 800247e:	409a      	lsls	r2, r3
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2200      	movs	r2, #0
 8002488:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2201      	movs	r2, #1
 800248e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002492:	2300      	movs	r3, #0
}
 8002494:	4618      	mov	r0, r3
 8002496:	3718      	adds	r7, #24
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	e010803f 	.word	0xe010803f

080024a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b086      	sub	sp, #24
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	60f8      	str	r0, [r7, #12]
 80024a8:	60b9      	str	r1, [r7, #8]
 80024aa:	607a      	str	r2, [r7, #4]
 80024ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024ae:	2300      	movs	r3, #0
 80024b0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024b6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d101      	bne.n	80024c6 <HAL_DMA_Start_IT+0x26>
 80024c2:	2302      	movs	r3, #2
 80024c4:	e048      	b.n	8002558 <HAL_DMA_Start_IT+0xb8>
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2201      	movs	r2, #1
 80024ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d137      	bne.n	800254a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2202      	movs	r2, #2
 80024de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2200      	movs	r2, #0
 80024e6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	68b9      	ldr	r1, [r7, #8]
 80024ee:	68f8      	ldr	r0, [r7, #12]
 80024f0:	f000 f9ee 	bl	80028d0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024f8:	223f      	movs	r2, #63	; 0x3f
 80024fa:	409a      	lsls	r2, r3
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f042 0216 	orr.w	r2, r2, #22
 800250e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	695a      	ldr	r2, [r3, #20]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800251e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002524:	2b00      	cmp	r3, #0
 8002526:	d007      	beq.n	8002538 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f042 0208 	orr.w	r2, r2, #8
 8002536:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f042 0201 	orr.w	r2, r2, #1
 8002546:	601a      	str	r2, [r3, #0]
 8002548:	e005      	b.n	8002556 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2200      	movs	r2, #0
 800254e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002552:	2302      	movs	r3, #2
 8002554:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002556:	7dfb      	ldrb	r3, [r7, #23]
}
 8002558:	4618      	mov	r0, r3
 800255a:	3718      	adds	r7, #24
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}

08002560 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800256e:	b2db      	uxtb	r3, r3
 8002570:	2b02      	cmp	r3, #2
 8002572:	d004      	beq.n	800257e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2280      	movs	r2, #128	; 0x80
 8002578:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e00c      	b.n	8002598 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2205      	movs	r2, #5
 8002582:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f022 0201 	bic.w	r2, r2, #1
 8002594:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002596:	2300      	movs	r3, #0
}
 8002598:	4618      	mov	r0, r3
 800259a:	370c      	adds	r7, #12
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr

080025a4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b086      	sub	sp, #24
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80025ac:	2300      	movs	r3, #0
 80025ae:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80025b0:	4b92      	ldr	r3, [pc, #584]	; (80027fc <HAL_DMA_IRQHandler+0x258>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a92      	ldr	r2, [pc, #584]	; (8002800 <HAL_DMA_IRQHandler+0x25c>)
 80025b6:	fba2 2303 	umull	r2, r3, r2, r3
 80025ba:	0a9b      	lsrs	r3, r3, #10
 80025bc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025c2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025ce:	2208      	movs	r2, #8
 80025d0:	409a      	lsls	r2, r3
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	4013      	ands	r3, r2
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d01a      	beq.n	8002610 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 0304 	and.w	r3, r3, #4
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d013      	beq.n	8002610 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f022 0204 	bic.w	r2, r2, #4
 80025f6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025fc:	2208      	movs	r2, #8
 80025fe:	409a      	lsls	r2, r3
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002608:	f043 0201 	orr.w	r2, r3, #1
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002614:	2201      	movs	r2, #1
 8002616:	409a      	lsls	r2, r3
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	4013      	ands	r3, r2
 800261c:	2b00      	cmp	r3, #0
 800261e:	d012      	beq.n	8002646 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	695b      	ldr	r3, [r3, #20]
 8002626:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800262a:	2b00      	cmp	r3, #0
 800262c:	d00b      	beq.n	8002646 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002632:	2201      	movs	r2, #1
 8002634:	409a      	lsls	r2, r3
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800263e:	f043 0202 	orr.w	r2, r3, #2
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800264a:	2204      	movs	r2, #4
 800264c:	409a      	lsls	r2, r3
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	4013      	ands	r3, r2
 8002652:	2b00      	cmp	r3, #0
 8002654:	d012      	beq.n	800267c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0302 	and.w	r3, r3, #2
 8002660:	2b00      	cmp	r3, #0
 8002662:	d00b      	beq.n	800267c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002668:	2204      	movs	r2, #4
 800266a:	409a      	lsls	r2, r3
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002674:	f043 0204 	orr.w	r2, r3, #4
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002680:	2210      	movs	r2, #16
 8002682:	409a      	lsls	r2, r3
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	4013      	ands	r3, r2
 8002688:	2b00      	cmp	r3, #0
 800268a:	d043      	beq.n	8002714 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0308 	and.w	r3, r3, #8
 8002696:	2b00      	cmp	r3, #0
 8002698:	d03c      	beq.n	8002714 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800269e:	2210      	movs	r2, #16
 80026a0:	409a      	lsls	r2, r3
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d018      	beq.n	80026e6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d108      	bne.n	80026d4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d024      	beq.n	8002714 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	4798      	blx	r3
 80026d2:	e01f      	b.n	8002714 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d01b      	beq.n	8002714 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	4798      	blx	r3
 80026e4:	e016      	b.n	8002714 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d107      	bne.n	8002704 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f022 0208 	bic.w	r2, r2, #8
 8002702:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002708:	2b00      	cmp	r3, #0
 800270a:	d003      	beq.n	8002714 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002718:	2220      	movs	r2, #32
 800271a:	409a      	lsls	r2, r3
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	4013      	ands	r3, r2
 8002720:	2b00      	cmp	r3, #0
 8002722:	f000 808e 	beq.w	8002842 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0310 	and.w	r3, r3, #16
 8002730:	2b00      	cmp	r3, #0
 8002732:	f000 8086 	beq.w	8002842 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800273a:	2220      	movs	r2, #32
 800273c:	409a      	lsls	r2, r3
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002748:	b2db      	uxtb	r3, r3
 800274a:	2b05      	cmp	r3, #5
 800274c:	d136      	bne.n	80027bc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f022 0216 	bic.w	r2, r2, #22
 800275c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	695a      	ldr	r2, [r3, #20]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800276c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002772:	2b00      	cmp	r3, #0
 8002774:	d103      	bne.n	800277e <HAL_DMA_IRQHandler+0x1da>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800277a:	2b00      	cmp	r3, #0
 800277c:	d007      	beq.n	800278e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f022 0208 	bic.w	r2, r2, #8
 800278c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002792:	223f      	movs	r2, #63	; 0x3f
 8002794:	409a      	lsls	r2, r3
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2200      	movs	r2, #0
 800279e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2201      	movs	r2, #1
 80027a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d07d      	beq.n	80028ae <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	4798      	blx	r3
        }
        return;
 80027ba:	e078      	b.n	80028ae <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d01c      	beq.n	8002804 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d108      	bne.n	80027ea <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d030      	beq.n	8002842 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	4798      	blx	r3
 80027e8:	e02b      	b.n	8002842 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d027      	beq.n	8002842 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	4798      	blx	r3
 80027fa:	e022      	b.n	8002842 <HAL_DMA_IRQHandler+0x29e>
 80027fc:	20000010 	.word	0x20000010
 8002800:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800280e:	2b00      	cmp	r3, #0
 8002810:	d10f      	bne.n	8002832 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f022 0210 	bic.w	r2, r2, #16
 8002820:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2200      	movs	r2, #0
 8002826:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2201      	movs	r2, #1
 800282e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002836:	2b00      	cmp	r3, #0
 8002838:	d003      	beq.n	8002842 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002846:	2b00      	cmp	r3, #0
 8002848:	d032      	beq.n	80028b0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800284e:	f003 0301 	and.w	r3, r3, #1
 8002852:	2b00      	cmp	r3, #0
 8002854:	d022      	beq.n	800289c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2205      	movs	r2, #5
 800285a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f022 0201 	bic.w	r2, r2, #1
 800286c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	3301      	adds	r3, #1
 8002872:	60bb      	str	r3, [r7, #8]
 8002874:	697a      	ldr	r2, [r7, #20]
 8002876:	429a      	cmp	r2, r3
 8002878:	d307      	bcc.n	800288a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0301 	and.w	r3, r3, #1
 8002884:	2b00      	cmp	r3, #0
 8002886:	d1f2      	bne.n	800286e <HAL_DMA_IRQHandler+0x2ca>
 8002888:	e000      	b.n	800288c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800288a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2200      	movs	r2, #0
 8002890:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2201      	movs	r2, #1
 8002898:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d005      	beq.n	80028b0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	4798      	blx	r3
 80028ac:	e000      	b.n	80028b0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80028ae:	bf00      	nop
    }
  }
}
 80028b0:	3718      	adds	r7, #24
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop

080028b8 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	370c      	adds	r7, #12
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr

080028d0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b085      	sub	sp, #20
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	60f8      	str	r0, [r7, #12]
 80028d8:	60b9      	str	r1, [r7, #8]
 80028da:	607a      	str	r2, [r7, #4]
 80028dc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80028ec:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	683a      	ldr	r2, [r7, #0]
 80028f4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	2b40      	cmp	r3, #64	; 0x40
 80028fc:	d108      	bne.n	8002910 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	68ba      	ldr	r2, [r7, #8]
 800290c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800290e:	e007      	b.n	8002920 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	68ba      	ldr	r2, [r7, #8]
 8002916:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	60da      	str	r2, [r3, #12]
}
 8002920:	bf00      	nop
 8002922:	3714      	adds	r7, #20
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr

0800292c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800292c:	b480      	push	{r7}
 800292e:	b085      	sub	sp, #20
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	b2db      	uxtb	r3, r3
 800293a:	3b10      	subs	r3, #16
 800293c:	4a13      	ldr	r2, [pc, #76]	; (800298c <DMA_CalcBaseAndBitshift+0x60>)
 800293e:	fba2 2303 	umull	r2, r3, r2, r3
 8002942:	091b      	lsrs	r3, r3, #4
 8002944:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002946:	4a12      	ldr	r2, [pc, #72]	; (8002990 <DMA_CalcBaseAndBitshift+0x64>)
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	4413      	add	r3, r2
 800294c:	781b      	ldrb	r3, [r3, #0]
 800294e:	461a      	mov	r2, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2b03      	cmp	r3, #3
 8002958:	d908      	bls.n	800296c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	461a      	mov	r2, r3
 8002960:	4b0c      	ldr	r3, [pc, #48]	; (8002994 <DMA_CalcBaseAndBitshift+0x68>)
 8002962:	4013      	ands	r3, r2
 8002964:	1d1a      	adds	r2, r3, #4
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	659a      	str	r2, [r3, #88]	; 0x58
 800296a:	e006      	b.n	800297a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	461a      	mov	r2, r3
 8002972:	4b08      	ldr	r3, [pc, #32]	; (8002994 <DMA_CalcBaseAndBitshift+0x68>)
 8002974:	4013      	ands	r3, r2
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800297e:	4618      	mov	r0, r3
 8002980:	3714      	adds	r7, #20
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr
 800298a:	bf00      	nop
 800298c:	aaaaaaab 	.word	0xaaaaaaab
 8002990:	08016134 	.word	0x08016134
 8002994:	fffffc00 	.word	0xfffffc00

08002998 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002998:	b480      	push	{r7}
 800299a:	b085      	sub	sp, #20
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029a0:	2300      	movs	r3, #0
 80029a2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029a8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	699b      	ldr	r3, [r3, #24]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d11f      	bne.n	80029f2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	2b03      	cmp	r3, #3
 80029b6:	d855      	bhi.n	8002a64 <DMA_CheckFifoParam+0xcc>
 80029b8:	a201      	add	r2, pc, #4	; (adr r2, 80029c0 <DMA_CheckFifoParam+0x28>)
 80029ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029be:	bf00      	nop
 80029c0:	080029d1 	.word	0x080029d1
 80029c4:	080029e3 	.word	0x080029e3
 80029c8:	080029d1 	.word	0x080029d1
 80029cc:	08002a65 	.word	0x08002a65
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d045      	beq.n	8002a68 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029e0:	e042      	b.n	8002a68 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80029ea:	d13f      	bne.n	8002a6c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029f0:	e03c      	b.n	8002a6c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	699b      	ldr	r3, [r3, #24]
 80029f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029fa:	d121      	bne.n	8002a40 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	2b03      	cmp	r3, #3
 8002a00:	d836      	bhi.n	8002a70 <DMA_CheckFifoParam+0xd8>
 8002a02:	a201      	add	r2, pc, #4	; (adr r2, 8002a08 <DMA_CheckFifoParam+0x70>)
 8002a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a08:	08002a19 	.word	0x08002a19
 8002a0c:	08002a1f 	.word	0x08002a1f
 8002a10:	08002a19 	.word	0x08002a19
 8002a14:	08002a31 	.word	0x08002a31
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	73fb      	strb	r3, [r7, #15]
      break;
 8002a1c:	e02f      	b.n	8002a7e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a22:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d024      	beq.n	8002a74 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a2e:	e021      	b.n	8002a74 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a34:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002a38:	d11e      	bne.n	8002a78 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002a3e:	e01b      	b.n	8002a78 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d902      	bls.n	8002a4c <DMA_CheckFifoParam+0xb4>
 8002a46:	2b03      	cmp	r3, #3
 8002a48:	d003      	beq.n	8002a52 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002a4a:	e018      	b.n	8002a7e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	73fb      	strb	r3, [r7, #15]
      break;
 8002a50:	e015      	b.n	8002a7e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a56:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d00e      	beq.n	8002a7c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	73fb      	strb	r3, [r7, #15]
      break;
 8002a62:	e00b      	b.n	8002a7c <DMA_CheckFifoParam+0xe4>
      break;
 8002a64:	bf00      	nop
 8002a66:	e00a      	b.n	8002a7e <DMA_CheckFifoParam+0xe6>
      break;
 8002a68:	bf00      	nop
 8002a6a:	e008      	b.n	8002a7e <DMA_CheckFifoParam+0xe6>
      break;
 8002a6c:	bf00      	nop
 8002a6e:	e006      	b.n	8002a7e <DMA_CheckFifoParam+0xe6>
      break;
 8002a70:	bf00      	nop
 8002a72:	e004      	b.n	8002a7e <DMA_CheckFifoParam+0xe6>
      break;
 8002a74:	bf00      	nop
 8002a76:	e002      	b.n	8002a7e <DMA_CheckFifoParam+0xe6>
      break;   
 8002a78:	bf00      	nop
 8002a7a:	e000      	b.n	8002a7e <DMA_CheckFifoParam+0xe6>
      break;
 8002a7c:	bf00      	nop
    }
  } 
  
  return status; 
 8002a7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	3714      	adds	r7, #20
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr

08002a8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b089      	sub	sp, #36	; 0x24
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002a96:	2300      	movs	r3, #0
 8002a98:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	61fb      	str	r3, [r7, #28]
 8002aaa:	e175      	b.n	8002d98 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002aac:	2201      	movs	r2, #1
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	697a      	ldr	r2, [r7, #20]
 8002abc:	4013      	ands	r3, r2
 8002abe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ac0:	693a      	ldr	r2, [r7, #16]
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	f040 8164 	bne.w	8002d92 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d00b      	beq.n	8002aea <HAL_GPIO_Init+0x5e>
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	d007      	beq.n	8002aea <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ade:	2b11      	cmp	r3, #17
 8002ae0:	d003      	beq.n	8002aea <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	2b12      	cmp	r3, #18
 8002ae8:	d130      	bne.n	8002b4c <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	005b      	lsls	r3, r3, #1
 8002af4:	2203      	movs	r2, #3
 8002af6:	fa02 f303 	lsl.w	r3, r2, r3
 8002afa:	43db      	mvns	r3, r3
 8002afc:	69ba      	ldr	r2, [r7, #24]
 8002afe:	4013      	ands	r3, r2
 8002b00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	68da      	ldr	r2, [r3, #12]
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	005b      	lsls	r3, r3, #1
 8002b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0e:	69ba      	ldr	r2, [r7, #24]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	69ba      	ldr	r2, [r7, #24]
 8002b18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b20:	2201      	movs	r2, #1
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	fa02 f303 	lsl.w	r3, r2, r3
 8002b28:	43db      	mvns	r3, r3
 8002b2a:	69ba      	ldr	r2, [r7, #24]
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	091b      	lsrs	r3, r3, #4
 8002b36:	f003 0201 	and.w	r2, r3, #1
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b40:	69ba      	ldr	r2, [r7, #24]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	69ba      	ldr	r2, [r7, #24]
 8002b4a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	005b      	lsls	r3, r3, #1
 8002b56:	2203      	movs	r2, #3
 8002b58:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5c:	43db      	mvns	r3, r3
 8002b5e:	69ba      	ldr	r2, [r7, #24]
 8002b60:	4013      	ands	r3, r2
 8002b62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	689a      	ldr	r2, [r3, #8]
 8002b68:	69fb      	ldr	r3, [r7, #28]
 8002b6a:	005b      	lsls	r3, r3, #1
 8002b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b70:	69ba      	ldr	r2, [r7, #24]
 8002b72:	4313      	orrs	r3, r2
 8002b74:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	69ba      	ldr	r2, [r7, #24]
 8002b7a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	2b02      	cmp	r3, #2
 8002b82:	d003      	beq.n	8002b8c <HAL_GPIO_Init+0x100>
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	2b12      	cmp	r3, #18
 8002b8a:	d123      	bne.n	8002bd4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	08da      	lsrs	r2, r3, #3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	3208      	adds	r2, #8
 8002b94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	f003 0307 	and.w	r3, r3, #7
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	220f      	movs	r2, #15
 8002ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba8:	43db      	mvns	r3, r3
 8002baa:	69ba      	ldr	r2, [r7, #24]
 8002bac:	4013      	ands	r3, r2
 8002bae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	691a      	ldr	r2, [r3, #16]
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	f003 0307 	and.w	r3, r3, #7
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc0:	69ba      	ldr	r2, [r7, #24]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	08da      	lsrs	r2, r3, #3
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	3208      	adds	r2, #8
 8002bce:	69b9      	ldr	r1, [r7, #24]
 8002bd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	005b      	lsls	r3, r3, #1
 8002bde:	2203      	movs	r2, #3
 8002be0:	fa02 f303 	lsl.w	r3, r2, r3
 8002be4:	43db      	mvns	r3, r3
 8002be6:	69ba      	ldr	r2, [r7, #24]
 8002be8:	4013      	ands	r3, r2
 8002bea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f003 0203 	and.w	r2, r3, #3
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	005b      	lsls	r3, r3, #1
 8002bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfc:	69ba      	ldr	r2, [r7, #24]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	69ba      	ldr	r2, [r7, #24]
 8002c06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	f000 80be 	beq.w	8002d92 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c16:	4b65      	ldr	r3, [pc, #404]	; (8002dac <HAL_GPIO_Init+0x320>)
 8002c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c1a:	4a64      	ldr	r2, [pc, #400]	; (8002dac <HAL_GPIO_Init+0x320>)
 8002c1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c20:	6453      	str	r3, [r2, #68]	; 0x44
 8002c22:	4b62      	ldr	r3, [pc, #392]	; (8002dac <HAL_GPIO_Init+0x320>)
 8002c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c2a:	60fb      	str	r3, [r7, #12]
 8002c2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002c2e:	4a60      	ldr	r2, [pc, #384]	; (8002db0 <HAL_GPIO_Init+0x324>)
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	089b      	lsrs	r3, r3, #2
 8002c34:	3302      	adds	r3, #2
 8002c36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	f003 0303 	and.w	r3, r3, #3
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	220f      	movs	r2, #15
 8002c46:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4a:	43db      	mvns	r3, r3
 8002c4c:	69ba      	ldr	r2, [r7, #24]
 8002c4e:	4013      	ands	r3, r2
 8002c50:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4a57      	ldr	r2, [pc, #348]	; (8002db4 <HAL_GPIO_Init+0x328>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d037      	beq.n	8002cca <HAL_GPIO_Init+0x23e>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	4a56      	ldr	r2, [pc, #344]	; (8002db8 <HAL_GPIO_Init+0x32c>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d031      	beq.n	8002cc6 <HAL_GPIO_Init+0x23a>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4a55      	ldr	r2, [pc, #340]	; (8002dbc <HAL_GPIO_Init+0x330>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d02b      	beq.n	8002cc2 <HAL_GPIO_Init+0x236>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4a54      	ldr	r2, [pc, #336]	; (8002dc0 <HAL_GPIO_Init+0x334>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d025      	beq.n	8002cbe <HAL_GPIO_Init+0x232>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4a53      	ldr	r2, [pc, #332]	; (8002dc4 <HAL_GPIO_Init+0x338>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d01f      	beq.n	8002cba <HAL_GPIO_Init+0x22e>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	4a52      	ldr	r2, [pc, #328]	; (8002dc8 <HAL_GPIO_Init+0x33c>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d019      	beq.n	8002cb6 <HAL_GPIO_Init+0x22a>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4a51      	ldr	r2, [pc, #324]	; (8002dcc <HAL_GPIO_Init+0x340>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d013      	beq.n	8002cb2 <HAL_GPIO_Init+0x226>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4a50      	ldr	r2, [pc, #320]	; (8002dd0 <HAL_GPIO_Init+0x344>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d00d      	beq.n	8002cae <HAL_GPIO_Init+0x222>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4a4f      	ldr	r2, [pc, #316]	; (8002dd4 <HAL_GPIO_Init+0x348>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d007      	beq.n	8002caa <HAL_GPIO_Init+0x21e>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4a4e      	ldr	r2, [pc, #312]	; (8002dd8 <HAL_GPIO_Init+0x34c>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d101      	bne.n	8002ca6 <HAL_GPIO_Init+0x21a>
 8002ca2:	2309      	movs	r3, #9
 8002ca4:	e012      	b.n	8002ccc <HAL_GPIO_Init+0x240>
 8002ca6:	230a      	movs	r3, #10
 8002ca8:	e010      	b.n	8002ccc <HAL_GPIO_Init+0x240>
 8002caa:	2308      	movs	r3, #8
 8002cac:	e00e      	b.n	8002ccc <HAL_GPIO_Init+0x240>
 8002cae:	2307      	movs	r3, #7
 8002cb0:	e00c      	b.n	8002ccc <HAL_GPIO_Init+0x240>
 8002cb2:	2306      	movs	r3, #6
 8002cb4:	e00a      	b.n	8002ccc <HAL_GPIO_Init+0x240>
 8002cb6:	2305      	movs	r3, #5
 8002cb8:	e008      	b.n	8002ccc <HAL_GPIO_Init+0x240>
 8002cba:	2304      	movs	r3, #4
 8002cbc:	e006      	b.n	8002ccc <HAL_GPIO_Init+0x240>
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e004      	b.n	8002ccc <HAL_GPIO_Init+0x240>
 8002cc2:	2302      	movs	r3, #2
 8002cc4:	e002      	b.n	8002ccc <HAL_GPIO_Init+0x240>
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e000      	b.n	8002ccc <HAL_GPIO_Init+0x240>
 8002cca:	2300      	movs	r3, #0
 8002ccc:	69fa      	ldr	r2, [r7, #28]
 8002cce:	f002 0203 	and.w	r2, r2, #3
 8002cd2:	0092      	lsls	r2, r2, #2
 8002cd4:	4093      	lsls	r3, r2
 8002cd6:	69ba      	ldr	r2, [r7, #24]
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002cdc:	4934      	ldr	r1, [pc, #208]	; (8002db0 <HAL_GPIO_Init+0x324>)
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	089b      	lsrs	r3, r3, #2
 8002ce2:	3302      	adds	r3, #2
 8002ce4:	69ba      	ldr	r2, [r7, #24]
 8002ce6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cea:	4b3c      	ldr	r3, [pc, #240]	; (8002ddc <HAL_GPIO_Init+0x350>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	43db      	mvns	r3, r3
 8002cf4:	69ba      	ldr	r2, [r7, #24]
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d003      	beq.n	8002d0e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002d06:	69ba      	ldr	r2, [r7, #24]
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d0e:	4a33      	ldr	r2, [pc, #204]	; (8002ddc <HAL_GPIO_Init+0x350>)
 8002d10:	69bb      	ldr	r3, [r7, #24]
 8002d12:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002d14:	4b31      	ldr	r3, [pc, #196]	; (8002ddc <HAL_GPIO_Init+0x350>)
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	43db      	mvns	r3, r3
 8002d1e:	69ba      	ldr	r2, [r7, #24]
 8002d20:	4013      	ands	r3, r2
 8002d22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d003      	beq.n	8002d38 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002d30:	69ba      	ldr	r2, [r7, #24]
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d38:	4a28      	ldr	r2, [pc, #160]	; (8002ddc <HAL_GPIO_Init+0x350>)
 8002d3a:	69bb      	ldr	r3, [r7, #24]
 8002d3c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d3e:	4b27      	ldr	r3, [pc, #156]	; (8002ddc <HAL_GPIO_Init+0x350>)
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	43db      	mvns	r3, r3
 8002d48:	69ba      	ldr	r2, [r7, #24]
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d003      	beq.n	8002d62 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002d5a:	69ba      	ldr	r2, [r7, #24]
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d62:	4a1e      	ldr	r2, [pc, #120]	; (8002ddc <HAL_GPIO_Init+0x350>)
 8002d64:	69bb      	ldr	r3, [r7, #24]
 8002d66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d68:	4b1c      	ldr	r3, [pc, #112]	; (8002ddc <HAL_GPIO_Init+0x350>)
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	43db      	mvns	r3, r3
 8002d72:	69ba      	ldr	r2, [r7, #24]
 8002d74:	4013      	ands	r3, r2
 8002d76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d003      	beq.n	8002d8c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002d84:	69ba      	ldr	r2, [r7, #24]
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d8c:	4a13      	ldr	r2, [pc, #76]	; (8002ddc <HAL_GPIO_Init+0x350>)
 8002d8e:	69bb      	ldr	r3, [r7, #24]
 8002d90:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	3301      	adds	r3, #1
 8002d96:	61fb      	str	r3, [r7, #28]
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	2b0f      	cmp	r3, #15
 8002d9c:	f67f ae86 	bls.w	8002aac <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002da0:	bf00      	nop
 8002da2:	3724      	adds	r7, #36	; 0x24
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr
 8002dac:	40023800 	.word	0x40023800
 8002db0:	40013800 	.word	0x40013800
 8002db4:	40020000 	.word	0x40020000
 8002db8:	40020400 	.word	0x40020400
 8002dbc:	40020800 	.word	0x40020800
 8002dc0:	40020c00 	.word	0x40020c00
 8002dc4:	40021000 	.word	0x40021000
 8002dc8:	40021400 	.word	0x40021400
 8002dcc:	40021800 	.word	0x40021800
 8002dd0:	40021c00 	.word	0x40021c00
 8002dd4:	40022000 	.word	0x40022000
 8002dd8:	40022400 	.word	0x40022400
 8002ddc:	40013c00 	.word	0x40013c00

08002de0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b085      	sub	sp, #20
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
 8002de8:	460b      	mov	r3, r1
 8002dea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	691a      	ldr	r2, [r3, #16]
 8002df0:	887b      	ldrh	r3, [r7, #2]
 8002df2:	4013      	ands	r3, r2
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d002      	beq.n	8002dfe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	73fb      	strb	r3, [r7, #15]
 8002dfc:	e001      	b.n	8002e02 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e02:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3714      	adds	r7, #20
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr

08002e10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
 8002e18:	460b      	mov	r3, r1
 8002e1a:	807b      	strh	r3, [r7, #2]
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e20:	787b      	ldrb	r3, [r7, #1]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d003      	beq.n	8002e2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e26:	887a      	ldrh	r2, [r7, #2]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002e2c:	e003      	b.n	8002e36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002e2e:	887b      	ldrh	r3, [r7, #2]
 8002e30:	041a      	lsls	r2, r3, #16
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	619a      	str	r2, [r3, #24]
}
 8002e36:	bf00      	nop
 8002e38:	370c      	adds	r7, #12
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr

08002e42 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e42:	b480      	push	{r7}
 8002e44:	b083      	sub	sp, #12
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	6078      	str	r0, [r7, #4]
 8002e4a:	460b      	mov	r3, r1
 8002e4c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	695a      	ldr	r2, [r3, #20]
 8002e52:	887b      	ldrh	r3, [r7, #2]
 8002e54:	4013      	ands	r3, r2
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d004      	beq.n	8002e64 <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002e5a:	887b      	ldrh	r3, [r7, #2]
 8002e5c:	041a      	lsls	r2, r3, #16
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8002e62:	e002      	b.n	8002e6a <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002e64:	887a      	ldrh	r2, [r7, #2]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	619a      	str	r2, [r3, #24]
}
 8002e6a:	bf00      	nop
 8002e6c:	370c      	adds	r7, #12
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr

08002e76 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002e76:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e78:	b08f      	sub	sp, #60	; 0x3c
 8002e7a:	af0a      	add	r7, sp, #40	; 0x28
 8002e7c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d101      	bne.n	8002e88 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e116      	b.n	80030b6 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d106      	bne.n	8002ea8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f012 fc44 	bl	8015730 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2203      	movs	r2, #3
 8002eac:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d102      	bne.n	8002ec2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f005 fed5 	bl	8008c76 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	603b      	str	r3, [r7, #0]
 8002ed2:	687e      	ldr	r6, [r7, #4]
 8002ed4:	466d      	mov	r5, sp
 8002ed6:	f106 0410 	add.w	r4, r6, #16
 8002eda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002edc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ede:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ee0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ee2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002ee6:	e885 0003 	stmia.w	r5, {r0, r1}
 8002eea:	1d33      	adds	r3, r6, #4
 8002eec:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002eee:	6838      	ldr	r0, [r7, #0]
 8002ef0:	f005 fdb6 	bl	8008a60 <USB_CoreInit>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d005      	beq.n	8002f06 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2202      	movs	r2, #2
 8002efe:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e0d7      	b.n	80030b6 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	2100      	movs	r1, #0
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f005 fec3 	bl	8008c98 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f12:	2300      	movs	r3, #0
 8002f14:	73fb      	strb	r3, [r7, #15]
 8002f16:	e04a      	b.n	8002fae <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002f18:	7bfa      	ldrb	r2, [r7, #15]
 8002f1a:	6879      	ldr	r1, [r7, #4]
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	00db      	lsls	r3, r3, #3
 8002f20:	1a9b      	subs	r3, r3, r2
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	440b      	add	r3, r1
 8002f26:	333d      	adds	r3, #61	; 0x3d
 8002f28:	2201      	movs	r2, #1
 8002f2a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002f2c:	7bfa      	ldrb	r2, [r7, #15]
 8002f2e:	6879      	ldr	r1, [r7, #4]
 8002f30:	4613      	mov	r3, r2
 8002f32:	00db      	lsls	r3, r3, #3
 8002f34:	1a9b      	subs	r3, r3, r2
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	440b      	add	r3, r1
 8002f3a:	333c      	adds	r3, #60	; 0x3c
 8002f3c:	7bfa      	ldrb	r2, [r7, #15]
 8002f3e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002f40:	7bfa      	ldrb	r2, [r7, #15]
 8002f42:	7bfb      	ldrb	r3, [r7, #15]
 8002f44:	b298      	uxth	r0, r3
 8002f46:	6879      	ldr	r1, [r7, #4]
 8002f48:	4613      	mov	r3, r2
 8002f4a:	00db      	lsls	r3, r3, #3
 8002f4c:	1a9b      	subs	r3, r3, r2
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	440b      	add	r3, r1
 8002f52:	3342      	adds	r3, #66	; 0x42
 8002f54:	4602      	mov	r2, r0
 8002f56:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002f58:	7bfa      	ldrb	r2, [r7, #15]
 8002f5a:	6879      	ldr	r1, [r7, #4]
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	00db      	lsls	r3, r3, #3
 8002f60:	1a9b      	subs	r3, r3, r2
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	440b      	add	r3, r1
 8002f66:	333f      	adds	r3, #63	; 0x3f
 8002f68:	2200      	movs	r2, #0
 8002f6a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002f6c:	7bfa      	ldrb	r2, [r7, #15]
 8002f6e:	6879      	ldr	r1, [r7, #4]
 8002f70:	4613      	mov	r3, r2
 8002f72:	00db      	lsls	r3, r3, #3
 8002f74:	1a9b      	subs	r3, r3, r2
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	440b      	add	r3, r1
 8002f7a:	3344      	adds	r3, #68	; 0x44
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002f80:	7bfa      	ldrb	r2, [r7, #15]
 8002f82:	6879      	ldr	r1, [r7, #4]
 8002f84:	4613      	mov	r3, r2
 8002f86:	00db      	lsls	r3, r3, #3
 8002f88:	1a9b      	subs	r3, r3, r2
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	440b      	add	r3, r1
 8002f8e:	3348      	adds	r3, #72	; 0x48
 8002f90:	2200      	movs	r2, #0
 8002f92:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002f94:	7bfa      	ldrb	r2, [r7, #15]
 8002f96:	6879      	ldr	r1, [r7, #4]
 8002f98:	4613      	mov	r3, r2
 8002f9a:	00db      	lsls	r3, r3, #3
 8002f9c:	1a9b      	subs	r3, r3, r2
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	440b      	add	r3, r1
 8002fa2:	3350      	adds	r3, #80	; 0x50
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fa8:	7bfb      	ldrb	r3, [r7, #15]
 8002faa:	3301      	adds	r3, #1
 8002fac:	73fb      	strb	r3, [r7, #15]
 8002fae:	7bfa      	ldrb	r2, [r7, #15]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d3af      	bcc.n	8002f18 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fb8:	2300      	movs	r3, #0
 8002fba:	73fb      	strb	r3, [r7, #15]
 8002fbc:	e044      	b.n	8003048 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002fbe:	7bfa      	ldrb	r2, [r7, #15]
 8002fc0:	6879      	ldr	r1, [r7, #4]
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	00db      	lsls	r3, r3, #3
 8002fc6:	1a9b      	subs	r3, r3, r2
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	440b      	add	r3, r1
 8002fcc:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002fd4:	7bfa      	ldrb	r2, [r7, #15]
 8002fd6:	6879      	ldr	r1, [r7, #4]
 8002fd8:	4613      	mov	r3, r2
 8002fda:	00db      	lsls	r3, r3, #3
 8002fdc:	1a9b      	subs	r3, r3, r2
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	440b      	add	r3, r1
 8002fe2:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002fe6:	7bfa      	ldrb	r2, [r7, #15]
 8002fe8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002fea:	7bfa      	ldrb	r2, [r7, #15]
 8002fec:	6879      	ldr	r1, [r7, #4]
 8002fee:	4613      	mov	r3, r2
 8002ff0:	00db      	lsls	r3, r3, #3
 8002ff2:	1a9b      	subs	r3, r3, r2
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	440b      	add	r3, r1
 8002ff8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003000:	7bfa      	ldrb	r2, [r7, #15]
 8003002:	6879      	ldr	r1, [r7, #4]
 8003004:	4613      	mov	r3, r2
 8003006:	00db      	lsls	r3, r3, #3
 8003008:	1a9b      	subs	r3, r3, r2
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	440b      	add	r3, r1
 800300e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003012:	2200      	movs	r2, #0
 8003014:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003016:	7bfa      	ldrb	r2, [r7, #15]
 8003018:	6879      	ldr	r1, [r7, #4]
 800301a:	4613      	mov	r3, r2
 800301c:	00db      	lsls	r3, r3, #3
 800301e:	1a9b      	subs	r3, r3, r2
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	440b      	add	r3, r1
 8003024:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003028:	2200      	movs	r2, #0
 800302a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800302c:	7bfa      	ldrb	r2, [r7, #15]
 800302e:	6879      	ldr	r1, [r7, #4]
 8003030:	4613      	mov	r3, r2
 8003032:	00db      	lsls	r3, r3, #3
 8003034:	1a9b      	subs	r3, r3, r2
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	440b      	add	r3, r1
 800303a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800303e:	2200      	movs	r2, #0
 8003040:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003042:	7bfb      	ldrb	r3, [r7, #15]
 8003044:	3301      	adds	r3, #1
 8003046:	73fb      	strb	r3, [r7, #15]
 8003048:	7bfa      	ldrb	r2, [r7, #15]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	429a      	cmp	r2, r3
 8003050:	d3b5      	bcc.n	8002fbe <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	603b      	str	r3, [r7, #0]
 8003058:	687e      	ldr	r6, [r7, #4]
 800305a:	466d      	mov	r5, sp
 800305c:	f106 0410 	add.w	r4, r6, #16
 8003060:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003062:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003064:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003066:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003068:	e894 0003 	ldmia.w	r4, {r0, r1}
 800306c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003070:	1d33      	adds	r3, r6, #4
 8003072:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003074:	6838      	ldr	r0, [r7, #0]
 8003076:	f005 fe39 	bl	8008cec <USB_DevInit>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d005      	beq.n	800308c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2202      	movs	r2, #2
 8003084:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	e014      	b.n	80030b6 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2200      	movs	r2, #0
 8003090:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2201      	movs	r2, #1
 8003098:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d102      	bne.n	80030aa <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	f001 f8ad 	bl	8004204 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4618      	mov	r0, r3
 80030b0:	f006 fe88 	bl	8009dc4 <USB_DevDisconnect>

  return HAL_OK;
 80030b4:	2300      	movs	r3, #0
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3714      	adds	r7, #20
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080030be <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80030be:	b580      	push	{r7, lr}
 80030c0:	b082      	sub	sp, #8
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d101      	bne.n	80030d4 <HAL_PCD_Start+0x16>
 80030d0:	2302      	movs	r3, #2
 80030d2:	e012      	b.n	80030fa <HAL_PCD_Start+0x3c>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2201      	movs	r2, #1
 80030d8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DevConnect(hpcd->Instance);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4618      	mov	r0, r3
 80030e2:	f006 fe57 	bl	8009d94 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4618      	mov	r0, r3
 80030ec:	f005 fdb2 	bl	8008c54 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2200      	movs	r2, #0
 80030f4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80030f8:	2300      	movs	r3, #0
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3708      	adds	r7, #8
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}

08003102 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003102:	b590      	push	{r4, r7, lr}
 8003104:	b08d      	sub	sp, #52	; 0x34
 8003106:	af00      	add	r7, sp, #0
 8003108:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003110:	6a3b      	ldr	r3, [r7, #32]
 8003112:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4618      	mov	r0, r3
 800311a:	f006 fefe 	bl	8009f1a <USB_GetMode>
 800311e:	4603      	mov	r3, r0
 8003120:	2b00      	cmp	r3, #0
 8003122:	f040 83ca 	bne.w	80038ba <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4618      	mov	r0, r3
 800312c:	f006 fe62 	bl	8009df4 <USB_ReadInterrupts>
 8003130:	4603      	mov	r3, r0
 8003132:	2b00      	cmp	r3, #0
 8003134:	f000 83c0 	beq.w	80038b8 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4618      	mov	r0, r3
 800313e:	f006 fe59 	bl	8009df4 <USB_ReadInterrupts>
 8003142:	4603      	mov	r3, r0
 8003144:	f003 0302 	and.w	r3, r3, #2
 8003148:	2b02      	cmp	r3, #2
 800314a:	d107      	bne.n	800315c <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	695a      	ldr	r2, [r3, #20]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f002 0202 	and.w	r2, r2, #2
 800315a:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4618      	mov	r0, r3
 8003162:	f006 fe47 	bl	8009df4 <USB_ReadInterrupts>
 8003166:	4603      	mov	r3, r0
 8003168:	f003 0310 	and.w	r3, r3, #16
 800316c:	2b10      	cmp	r3, #16
 800316e:	d161      	bne.n	8003234 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	699a      	ldr	r2, [r3, #24]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f022 0210 	bic.w	r2, r2, #16
 800317e:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8003180:	6a3b      	ldr	r3, [r7, #32]
 8003182:	6a1b      	ldr	r3, [r3, #32]
 8003184:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8003186:	69bb      	ldr	r3, [r7, #24]
 8003188:	f003 020f 	and.w	r2, r3, #15
 800318c:	4613      	mov	r3, r2
 800318e:	00db      	lsls	r3, r3, #3
 8003190:	1a9b      	subs	r3, r3, r2
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003198:	687a      	ldr	r2, [r7, #4]
 800319a:	4413      	add	r3, r2
 800319c:	3304      	adds	r3, #4
 800319e:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80031a0:	69bb      	ldr	r3, [r7, #24]
 80031a2:	0c5b      	lsrs	r3, r3, #17
 80031a4:	f003 030f 	and.w	r3, r3, #15
 80031a8:	2b02      	cmp	r3, #2
 80031aa:	d124      	bne.n	80031f6 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80031ac:	69ba      	ldr	r2, [r7, #24]
 80031ae:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80031b2:	4013      	ands	r3, r2
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d035      	beq.n	8003224 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80031bc:	69bb      	ldr	r3, [r7, #24]
 80031be:	091b      	lsrs	r3, r3, #4
 80031c0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80031c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	461a      	mov	r2, r3
 80031ca:	6a38      	ldr	r0, [r7, #32]
 80031cc:	f006 fcbf 	bl	8009b4e <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	68da      	ldr	r2, [r3, #12]
 80031d4:	69bb      	ldr	r3, [r7, #24]
 80031d6:	091b      	lsrs	r3, r3, #4
 80031d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80031dc:	441a      	add	r2, r3
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	699a      	ldr	r2, [r3, #24]
 80031e6:	69bb      	ldr	r3, [r7, #24]
 80031e8:	091b      	lsrs	r3, r3, #4
 80031ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80031ee:	441a      	add	r2, r3
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	619a      	str	r2, [r3, #24]
 80031f4:	e016      	b.n	8003224 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80031f6:	69bb      	ldr	r3, [r7, #24]
 80031f8:	0c5b      	lsrs	r3, r3, #17
 80031fa:	f003 030f 	and.w	r3, r3, #15
 80031fe:	2b06      	cmp	r3, #6
 8003200:	d110      	bne.n	8003224 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003208:	2208      	movs	r2, #8
 800320a:	4619      	mov	r1, r3
 800320c:	6a38      	ldr	r0, [r7, #32]
 800320e:	f006 fc9e 	bl	8009b4e <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	699a      	ldr	r2, [r3, #24]
 8003216:	69bb      	ldr	r3, [r7, #24]
 8003218:	091b      	lsrs	r3, r3, #4
 800321a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800321e:	441a      	add	r2, r3
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	699a      	ldr	r2, [r3, #24]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f042 0210 	orr.w	r2, r2, #16
 8003232:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4618      	mov	r0, r3
 800323a:	f006 fddb 	bl	8009df4 <USB_ReadInterrupts>
 800323e:	4603      	mov	r3, r0
 8003240:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003244:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003248:	d16e      	bne.n	8003328 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800324a:	2300      	movs	r3, #0
 800324c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4618      	mov	r0, r3
 8003254:	f006 fde1 	bl	8009e1a <USB_ReadDevAllOutEpInterrupt>
 8003258:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800325a:	e062      	b.n	8003322 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800325c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800325e:	f003 0301 	and.w	r3, r3, #1
 8003262:	2b00      	cmp	r3, #0
 8003264:	d057      	beq.n	8003316 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800326c:	b2d2      	uxtb	r2, r2
 800326e:	4611      	mov	r1, r2
 8003270:	4618      	mov	r0, r3
 8003272:	f006 fe06 	bl	8009e82 <USB_ReadDevOutEPInterrupt>
 8003276:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	f003 0301 	and.w	r3, r3, #1
 800327e:	2b00      	cmp	r3, #0
 8003280:	d00c      	beq.n	800329c <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003284:	015a      	lsls	r2, r3, #5
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	4413      	add	r3, r2
 800328a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800328e:	461a      	mov	r2, r3
 8003290:	2301      	movs	r3, #1
 8003292:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003294:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f000 fe0a 	bl	8003eb0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	f003 0308 	and.w	r3, r3, #8
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d00c      	beq.n	80032c0 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80032a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a8:	015a      	lsls	r2, r3, #5
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	4413      	add	r3, r2
 80032ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032b2:	461a      	mov	r2, r3
 80032b4:	2308      	movs	r3, #8
 80032b6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80032b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f000 ff04 	bl	80040c8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	f003 0310 	and.w	r3, r3, #16
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d008      	beq.n	80032dc <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80032ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032cc:	015a      	lsls	r2, r3, #5
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	4413      	add	r3, r2
 80032d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032d6:	461a      	mov	r2, r3
 80032d8:	2310      	movs	r3, #16
 80032da:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	f003 0320 	and.w	r3, r3, #32
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d008      	beq.n	80032f8 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80032e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e8:	015a      	lsls	r2, r3, #5
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	4413      	add	r3, r2
 80032ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032f2:	461a      	mov	r2, r3
 80032f4:	2320      	movs	r3, #32
 80032f6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d009      	beq.n	8003316 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003304:	015a      	lsls	r2, r3, #5
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	4413      	add	r3, r2
 800330a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800330e:	461a      	mov	r2, r3
 8003310:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003314:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003318:	3301      	adds	r3, #1
 800331a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800331c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800331e:	085b      	lsrs	r3, r3, #1
 8003320:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003324:	2b00      	cmp	r3, #0
 8003326:	d199      	bne.n	800325c <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4618      	mov	r0, r3
 800332e:	f006 fd61 	bl	8009df4 <USB_ReadInterrupts>
 8003332:	4603      	mov	r3, r0
 8003334:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003338:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800333c:	f040 80c0 	bne.w	80034c0 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4618      	mov	r0, r3
 8003346:	f006 fd82 	bl	8009e4e <USB_ReadDevAllInEpInterrupt>
 800334a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800334c:	2300      	movs	r3, #0
 800334e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003350:	e0b2      	b.n	80034b8 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003354:	f003 0301 	and.w	r3, r3, #1
 8003358:	2b00      	cmp	r3, #0
 800335a:	f000 80a7 	beq.w	80034ac <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003364:	b2d2      	uxtb	r2, r2
 8003366:	4611      	mov	r1, r2
 8003368:	4618      	mov	r0, r3
 800336a:	f006 fda8 	bl	8009ebe <USB_ReadDevInEPInterrupt>
 800336e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	f003 0301 	and.w	r3, r3, #1
 8003376:	2b00      	cmp	r3, #0
 8003378:	d057      	beq.n	800342a <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800337a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337c:	f003 030f 	and.w	r3, r3, #15
 8003380:	2201      	movs	r2, #1
 8003382:	fa02 f303 	lsl.w	r3, r2, r3
 8003386:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003388:	69fb      	ldr	r3, [r7, #28]
 800338a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800338e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	43db      	mvns	r3, r3
 8003394:	69f9      	ldr	r1, [r7, #28]
 8003396:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800339a:	4013      	ands	r3, r2
 800339c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800339e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a0:	015a      	lsls	r2, r3, #5
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	4413      	add	r3, r2
 80033a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033aa:	461a      	mov	r2, r3
 80033ac:	2301      	movs	r3, #1
 80033ae:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	691b      	ldr	r3, [r3, #16]
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d132      	bne.n	800341e <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80033b8:	6879      	ldr	r1, [r7, #4]
 80033ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033bc:	4613      	mov	r3, r2
 80033be:	00db      	lsls	r3, r3, #3
 80033c0:	1a9b      	subs	r3, r3, r2
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	440b      	add	r3, r1
 80033c6:	3348      	adds	r3, #72	; 0x48
 80033c8:	6819      	ldr	r1, [r3, #0]
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033ce:	4613      	mov	r3, r2
 80033d0:	00db      	lsls	r3, r3, #3
 80033d2:	1a9b      	subs	r3, r3, r2
 80033d4:	009b      	lsls	r3, r3, #2
 80033d6:	4403      	add	r3, r0
 80033d8:	3344      	adds	r3, #68	; 0x44
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4419      	add	r1, r3
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033e2:	4613      	mov	r3, r2
 80033e4:	00db      	lsls	r3, r3, #3
 80033e6:	1a9b      	subs	r3, r3, r2
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	4403      	add	r3, r0
 80033ec:	3348      	adds	r3, #72	; 0x48
 80033ee:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80033f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d113      	bne.n	800341e <HAL_PCD_IRQHandler+0x31c>
 80033f6:	6879      	ldr	r1, [r7, #4]
 80033f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033fa:	4613      	mov	r3, r2
 80033fc:	00db      	lsls	r3, r3, #3
 80033fe:	1a9b      	subs	r3, r3, r2
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	440b      	add	r3, r1
 8003404:	3350      	adds	r3, #80	; 0x50
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d108      	bne.n	800341e <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6818      	ldr	r0, [r3, #0]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003416:	461a      	mov	r2, r3
 8003418:	2101      	movs	r1, #1
 800341a:	f006 fdb1 	bl	8009f80 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800341e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003420:	b2db      	uxtb	r3, r3
 8003422:	4619      	mov	r1, r3
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	f012 fa06 	bl	8015836 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	f003 0308 	and.w	r3, r3, #8
 8003430:	2b00      	cmp	r3, #0
 8003432:	d008      	beq.n	8003446 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003436:	015a      	lsls	r2, r3, #5
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	4413      	add	r3, r2
 800343c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003440:	461a      	mov	r2, r3
 8003442:	2308      	movs	r3, #8
 8003444:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	f003 0310 	and.w	r3, r3, #16
 800344c:	2b00      	cmp	r3, #0
 800344e:	d008      	beq.n	8003462 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003452:	015a      	lsls	r2, r3, #5
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	4413      	add	r3, r2
 8003458:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800345c:	461a      	mov	r2, r3
 800345e:	2310      	movs	r3, #16
 8003460:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003468:	2b00      	cmp	r3, #0
 800346a:	d008      	beq.n	800347e <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800346c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346e:	015a      	lsls	r2, r3, #5
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	4413      	add	r3, r2
 8003474:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003478:	461a      	mov	r2, r3
 800347a:	2340      	movs	r3, #64	; 0x40
 800347c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	f003 0302 	and.w	r3, r3, #2
 8003484:	2b00      	cmp	r3, #0
 8003486:	d008      	beq.n	800349a <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348a:	015a      	lsls	r2, r3, #5
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	4413      	add	r3, r2
 8003490:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003494:	461a      	mov	r2, r3
 8003496:	2302      	movs	r3, #2
 8003498:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d003      	beq.n	80034ac <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80034a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f000 fc75 	bl	8003d96 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80034ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ae:	3301      	adds	r3, #1
 80034b0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80034b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034b4:	085b      	lsrs	r3, r3, #1
 80034b6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80034b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	f47f af49 	bne.w	8003352 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4618      	mov	r0, r3
 80034c6:	f006 fc95 	bl	8009df4 <USB_ReadInterrupts>
 80034ca:	4603      	mov	r3, r0
 80034cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80034d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80034d4:	d122      	bne.n	800351c <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80034d6:	69fb      	ldr	r3, [r7, #28]
 80034d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	69fa      	ldr	r2, [r7, #28]
 80034e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034e4:	f023 0301 	bic.w	r3, r3, #1
 80034e8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d108      	bne.n	8003506 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2200      	movs	r2, #0
 80034f8:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80034fc:	2100      	movs	r1, #0
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f012 fc08 	bl	8015d14 <HAL_PCDEx_LPM_Callback>
 8003504:	e002      	b.n	800350c <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f012 fa0c 	bl	8015924 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	695a      	ldr	r2, [r3, #20]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800351a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4618      	mov	r0, r3
 8003522:	f006 fc67 	bl	8009df4 <USB_ReadInterrupts>
 8003526:	4603      	mov	r3, r0
 8003528:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800352c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003530:	d112      	bne.n	8003558 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	f003 0301 	and.w	r3, r3, #1
 800353e:	2b01      	cmp	r3, #1
 8003540:	d102      	bne.n	8003548 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f012 f9c8 	bl	80158d8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	695a      	ldr	r2, [r3, #20]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003556:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4618      	mov	r0, r3
 800355e:	f006 fc49 	bl	8009df4 <USB_ReadInterrupts>
 8003562:	4603      	mov	r3, r0
 8003564:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003568:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800356c:	d121      	bne.n	80035b2 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	695a      	ldr	r2, [r3, #20]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800357c:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003584:	2b00      	cmp	r3, #0
 8003586:	d111      	bne.n	80035ac <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003596:	089b      	lsrs	r3, r3, #2
 8003598:	f003 020f 	and.w	r2, r3, #15
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80035a2:	2101      	movs	r1, #1
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f012 fbb5 	bl	8015d14 <HAL_PCDEx_LPM_Callback>
 80035aa:	e002      	b.n	80035b2 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	f012 f993 	bl	80158d8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4618      	mov	r0, r3
 80035b8:	f006 fc1c 	bl	8009df4 <USB_ReadInterrupts>
 80035bc:	4603      	mov	r3, r0
 80035be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035c6:	f040 80c7 	bne.w	8003758 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	69fa      	ldr	r2, [r7, #28]
 80035d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80035d8:	f023 0301 	bic.w	r3, r3, #1
 80035dc:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	2110      	movs	r1, #16
 80035e4:	4618      	mov	r0, r3
 80035e6:	f005 fcef 	bl	8008fc8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035ea:	2300      	movs	r3, #0
 80035ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035ee:	e056      	b.n	800369e <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80035f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035f2:	015a      	lsls	r2, r3, #5
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	4413      	add	r3, r2
 80035f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035fc:	461a      	mov	r2, r3
 80035fe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003602:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003606:	015a      	lsls	r2, r3, #5
 8003608:	69fb      	ldr	r3, [r7, #28]
 800360a:	4413      	add	r3, r2
 800360c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003614:	0151      	lsls	r1, r2, #5
 8003616:	69fa      	ldr	r2, [r7, #28]
 8003618:	440a      	add	r2, r1
 800361a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800361e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003622:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003626:	015a      	lsls	r2, r3, #5
 8003628:	69fb      	ldr	r3, [r7, #28]
 800362a:	4413      	add	r3, r2
 800362c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003634:	0151      	lsls	r1, r2, #5
 8003636:	69fa      	ldr	r2, [r7, #28]
 8003638:	440a      	add	r2, r1
 800363a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800363e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003642:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003646:	015a      	lsls	r2, r3, #5
 8003648:	69fb      	ldr	r3, [r7, #28]
 800364a:	4413      	add	r3, r2
 800364c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003650:	461a      	mov	r2, r3
 8003652:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003656:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800365a:	015a      	lsls	r2, r3, #5
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	4413      	add	r3, r2
 8003660:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003668:	0151      	lsls	r1, r2, #5
 800366a:	69fa      	ldr	r2, [r7, #28]
 800366c:	440a      	add	r2, r1
 800366e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003672:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003676:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800367a:	015a      	lsls	r2, r3, #5
 800367c:	69fb      	ldr	r3, [r7, #28]
 800367e:	4413      	add	r3, r2
 8003680:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003688:	0151      	lsls	r1, r2, #5
 800368a:	69fa      	ldr	r2, [r7, #28]
 800368c:	440a      	add	r2, r1
 800368e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003692:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003696:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800369a:	3301      	adds	r3, #1
 800369c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d3a3      	bcc.n	80035f0 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036ae:	69db      	ldr	r3, [r3, #28]
 80036b0:	69fa      	ldr	r2, [r7, #28]
 80036b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036b6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80036ba:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d016      	beq.n	80036f2 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80036c4:	69fb      	ldr	r3, [r7, #28]
 80036c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036ce:	69fa      	ldr	r2, [r7, #28]
 80036d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036d4:	f043 030b 	orr.w	r3, r3, #11
 80036d8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036e4:	69fa      	ldr	r2, [r7, #28]
 80036e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036ea:	f043 030b 	orr.w	r3, r3, #11
 80036ee:	6453      	str	r3, [r2, #68]	; 0x44
 80036f0:	e015      	b.n	800371e <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036f8:	695a      	ldr	r2, [r3, #20]
 80036fa:	69fb      	ldr	r3, [r7, #28]
 80036fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003700:	4619      	mov	r1, r3
 8003702:	f242 032b 	movw	r3, #8235	; 0x202b
 8003706:	4313      	orrs	r3, r2
 8003708:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800370a:	69fb      	ldr	r3, [r7, #28]
 800370c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003710:	691b      	ldr	r3, [r3, #16]
 8003712:	69fa      	ldr	r2, [r7, #28]
 8003714:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003718:	f043 030b 	orr.w	r3, r3, #11
 800371c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800371e:	69fb      	ldr	r3, [r7, #28]
 8003720:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	69fa      	ldr	r2, [r7, #28]
 8003728:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800372c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003730:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6818      	ldr	r0, [r3, #0]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	691b      	ldr	r3, [r3, #16]
 800373a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003742:	461a      	mov	r2, r3
 8003744:	f006 fc1c 	bl	8009f80 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	695a      	ldr	r2, [r3, #20]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003756:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4618      	mov	r0, r3
 800375e:	f006 fb49 	bl	8009df4 <USB_ReadInterrupts>
 8003762:	4603      	mov	r3, r0
 8003764:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003768:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800376c:	d124      	bne.n	80037b8 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4618      	mov	r0, r3
 8003774:	f006 fbe0 	bl	8009f38 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4618      	mov	r0, r3
 800377e:	f005 fc84 	bl	800908a <USB_GetDevSpeed>
 8003782:	4603      	mov	r3, r0
 8003784:	461a      	mov	r2, r3
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681c      	ldr	r4, [r3, #0]
 800378e:	f001 fa2f 	bl	8004bf0 <HAL_RCC_GetHCLKFreq>
 8003792:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003798:	b2db      	uxtb	r3, r3
 800379a:	461a      	mov	r2, r3
 800379c:	4620      	mov	r0, r4
 800379e:	f005 f9b7 	bl	8008b10 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f012 f86f 	bl	8015886 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	695a      	ldr	r2, [r3, #20]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80037b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4618      	mov	r0, r3
 80037be:	f006 fb19 	bl	8009df4 <USB_ReadInterrupts>
 80037c2:	4603      	mov	r3, r0
 80037c4:	f003 0308 	and.w	r3, r3, #8
 80037c8:	2b08      	cmp	r3, #8
 80037ca:	d10a      	bne.n	80037e2 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	f012 f84c 	bl	801586a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	695a      	ldr	r2, [r3, #20]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f002 0208 	and.w	r2, r2, #8
 80037e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4618      	mov	r0, r3
 80037e8:	f006 fb04 	bl	8009df4 <USB_ReadInterrupts>
 80037ec:	4603      	mov	r3, r0
 80037ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037f6:	d10f      	bne.n	8003818 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80037f8:	2300      	movs	r3, #0
 80037fa:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80037fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fe:	b2db      	uxtb	r3, r3
 8003800:	4619      	mov	r1, r3
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f012 f8ae 	bl	8015964 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	695a      	ldr	r2, [r3, #20]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003816:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4618      	mov	r0, r3
 800381e:	f006 fae9 	bl	8009df4 <USB_ReadInterrupts>
 8003822:	4603      	mov	r3, r0
 8003824:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003828:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800382c:	d10f      	bne.n	800384e <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800382e:	2300      	movs	r3, #0
 8003830:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003834:	b2db      	uxtb	r3, r3
 8003836:	4619      	mov	r1, r3
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	f012 f881 	bl	8015940 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	695a      	ldr	r2, [r3, #20]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800384c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4618      	mov	r0, r3
 8003854:	f006 face 	bl	8009df4 <USB_ReadInterrupts>
 8003858:	4603      	mov	r3, r0
 800385a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800385e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003862:	d10a      	bne.n	800387a <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	f012 f88f 	bl	8015988 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	695a      	ldr	r2, [r3, #20]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003878:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4618      	mov	r0, r3
 8003880:	f006 fab8 	bl	8009df4 <USB_ReadInterrupts>
 8003884:	4603      	mov	r3, r0
 8003886:	f003 0304 	and.w	r3, r3, #4
 800388a:	2b04      	cmp	r3, #4
 800388c:	d115      	bne.n	80038ba <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003896:	69bb      	ldr	r3, [r7, #24]
 8003898:	f003 0304 	and.w	r3, r3, #4
 800389c:	2b00      	cmp	r3, #0
 800389e:	d002      	beq.n	80038a6 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f012 f87f 	bl	80159a4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	6859      	ldr	r1, [r3, #4]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	69ba      	ldr	r2, [r7, #24]
 80038b2:	430a      	orrs	r2, r1
 80038b4:	605a      	str	r2, [r3, #4]
 80038b6:	e000      	b.n	80038ba <HAL_PCD_IRQHandler+0x7b8>
      return;
 80038b8:	bf00      	nop
    }
  }
}
 80038ba:	3734      	adds	r7, #52	; 0x34
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd90      	pop	{r4, r7, pc}

080038c0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b082      	sub	sp, #8
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
 80038c8:	460b      	mov	r3, r1
 80038ca:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80038d2:	2b01      	cmp	r3, #1
 80038d4:	d101      	bne.n	80038da <HAL_PCD_SetAddress+0x1a>
 80038d6:	2302      	movs	r3, #2
 80038d8:	e013      	b.n	8003902 <HAL_PCD_SetAddress+0x42>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2201      	movs	r2, #1
 80038de:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	78fa      	ldrb	r2, [r7, #3]
 80038e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	78fa      	ldrb	r2, [r7, #3]
 80038f0:	4611      	mov	r1, r2
 80038f2:	4618      	mov	r0, r3
 80038f4:	f006 fa28 	bl	8009d48 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2200      	movs	r2, #0
 80038fc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003900:	2300      	movs	r3, #0
}
 8003902:	4618      	mov	r0, r3
 8003904:	3708      	adds	r7, #8
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}

0800390a <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800390a:	b580      	push	{r7, lr}
 800390c:	b084      	sub	sp, #16
 800390e:	af00      	add	r7, sp, #0
 8003910:	6078      	str	r0, [r7, #4]
 8003912:	4608      	mov	r0, r1
 8003914:	4611      	mov	r1, r2
 8003916:	461a      	mov	r2, r3
 8003918:	4603      	mov	r3, r0
 800391a:	70fb      	strb	r3, [r7, #3]
 800391c:	460b      	mov	r3, r1
 800391e:	803b      	strh	r3, [r7, #0]
 8003920:	4613      	mov	r3, r2
 8003922:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003924:	2300      	movs	r3, #0
 8003926:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003928:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800392c:	2b00      	cmp	r3, #0
 800392e:	da0f      	bge.n	8003950 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003930:	78fb      	ldrb	r3, [r7, #3]
 8003932:	f003 020f 	and.w	r2, r3, #15
 8003936:	4613      	mov	r3, r2
 8003938:	00db      	lsls	r3, r3, #3
 800393a:	1a9b      	subs	r3, r3, r2
 800393c:	009b      	lsls	r3, r3, #2
 800393e:	3338      	adds	r3, #56	; 0x38
 8003940:	687a      	ldr	r2, [r7, #4]
 8003942:	4413      	add	r3, r2
 8003944:	3304      	adds	r3, #4
 8003946:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2201      	movs	r2, #1
 800394c:	705a      	strb	r2, [r3, #1]
 800394e:	e00f      	b.n	8003970 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003950:	78fb      	ldrb	r3, [r7, #3]
 8003952:	f003 020f 	and.w	r2, r3, #15
 8003956:	4613      	mov	r3, r2
 8003958:	00db      	lsls	r3, r3, #3
 800395a:	1a9b      	subs	r3, r3, r2
 800395c:	009b      	lsls	r3, r3, #2
 800395e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	4413      	add	r3, r2
 8003966:	3304      	adds	r3, #4
 8003968:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2200      	movs	r2, #0
 800396e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003970:	78fb      	ldrb	r3, [r7, #3]
 8003972:	f003 030f 	and.w	r3, r3, #15
 8003976:	b2da      	uxtb	r2, r3
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800397c:	883a      	ldrh	r2, [r7, #0]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	78ba      	ldrb	r2, [r7, #2]
 8003986:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	785b      	ldrb	r3, [r3, #1]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d004      	beq.n	800399a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	781b      	ldrb	r3, [r3, #0]
 8003994:	b29a      	uxth	r2, r3
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800399a:	78bb      	ldrb	r3, [r7, #2]
 800399c:	2b02      	cmp	r3, #2
 800399e:	d102      	bne.n	80039a6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2200      	movs	r2, #0
 80039a4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d101      	bne.n	80039b4 <HAL_PCD_EP_Open+0xaa>
 80039b0:	2302      	movs	r3, #2
 80039b2:	e00e      	b.n	80039d2 <HAL_PCD_EP_Open+0xc8>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2201      	movs	r2, #1
 80039b8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	68f9      	ldr	r1, [r7, #12]
 80039c2:	4618      	mov	r0, r3
 80039c4:	f005 fb86 	bl	80090d4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2200      	movs	r2, #0
 80039cc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80039d0:	7afb      	ldrb	r3, [r7, #11]
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3710      	adds	r7, #16
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}

080039da <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80039da:	b580      	push	{r7, lr}
 80039dc:	b084      	sub	sp, #16
 80039de:	af00      	add	r7, sp, #0
 80039e0:	6078      	str	r0, [r7, #4]
 80039e2:	460b      	mov	r3, r1
 80039e4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80039e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	da0f      	bge.n	8003a0e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039ee:	78fb      	ldrb	r3, [r7, #3]
 80039f0:	f003 020f 	and.w	r2, r3, #15
 80039f4:	4613      	mov	r3, r2
 80039f6:	00db      	lsls	r3, r3, #3
 80039f8:	1a9b      	subs	r3, r3, r2
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	3338      	adds	r3, #56	; 0x38
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	4413      	add	r3, r2
 8003a02:	3304      	adds	r3, #4
 8003a04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2201      	movs	r2, #1
 8003a0a:	705a      	strb	r2, [r3, #1]
 8003a0c:	e00f      	b.n	8003a2e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a0e:	78fb      	ldrb	r3, [r7, #3]
 8003a10:	f003 020f 	and.w	r2, r3, #15
 8003a14:	4613      	mov	r3, r2
 8003a16:	00db      	lsls	r3, r3, #3
 8003a18:	1a9b      	subs	r3, r3, r2
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003a20:	687a      	ldr	r2, [r7, #4]
 8003a22:	4413      	add	r3, r2
 8003a24:	3304      	adds	r3, #4
 8003a26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003a2e:	78fb      	ldrb	r3, [r7, #3]
 8003a30:	f003 030f 	and.w	r3, r3, #15
 8003a34:	b2da      	uxtb	r2, r3
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d101      	bne.n	8003a48 <HAL_PCD_EP_Close+0x6e>
 8003a44:	2302      	movs	r3, #2
 8003a46:	e00e      	b.n	8003a66 <HAL_PCD_EP_Close+0x8c>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	68f9      	ldr	r1, [r7, #12]
 8003a56:	4618      	mov	r0, r3
 8003a58:	f005 fbc4 	bl	80091e4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003a64:	2300      	movs	r3, #0
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3710      	adds	r7, #16
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}

08003a6e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003a6e:	b580      	push	{r7, lr}
 8003a70:	b086      	sub	sp, #24
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	60f8      	str	r0, [r7, #12]
 8003a76:	607a      	str	r2, [r7, #4]
 8003a78:	603b      	str	r3, [r7, #0]
 8003a7a:	460b      	mov	r3, r1
 8003a7c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a7e:	7afb      	ldrb	r3, [r7, #11]
 8003a80:	f003 020f 	and.w	r2, r3, #15
 8003a84:	4613      	mov	r3, r2
 8003a86:	00db      	lsls	r3, r3, #3
 8003a88:	1a9b      	subs	r3, r3, r2
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003a90:	68fa      	ldr	r2, [r7, #12]
 8003a92:	4413      	add	r3, r2
 8003a94:	3304      	adds	r3, #4
 8003a96:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	683a      	ldr	r2, [r7, #0]
 8003aa2:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	2200      	movs	r2, #0
 8003aae:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ab0:	7afb      	ldrb	r3, [r7, #11]
 8003ab2:	f003 030f 	and.w	r3, r3, #15
 8003ab6:	b2da      	uxtb	r2, r3
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	691b      	ldr	r3, [r3, #16]
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d102      	bne.n	8003aca <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003ac4:	687a      	ldr	r2, [r7, #4]
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003aca:	7afb      	ldrb	r3, [r7, #11]
 8003acc:	f003 030f 	and.w	r3, r3, #15
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d109      	bne.n	8003ae8 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	6818      	ldr	r0, [r3, #0]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	691b      	ldr	r3, [r3, #16]
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	461a      	mov	r2, r3
 8003ae0:	6979      	ldr	r1, [r7, #20]
 8003ae2:	f005 fea7 	bl	8009834 <USB_EP0StartXfer>
 8003ae6:	e008      	b.n	8003afa <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	6818      	ldr	r0, [r3, #0]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	691b      	ldr	r3, [r3, #16]
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	461a      	mov	r2, r3
 8003af4:	6979      	ldr	r1, [r7, #20]
 8003af6:	f005 fc51 	bl	800939c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003afa:	2300      	movs	r3, #0
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	3718      	adds	r7, #24
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}

08003b04 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b083      	sub	sp, #12
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	460b      	mov	r3, r1
 8003b0e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003b10:	78fb      	ldrb	r3, [r7, #3]
 8003b12:	f003 020f 	and.w	r2, r3, #15
 8003b16:	6879      	ldr	r1, [r7, #4]
 8003b18:	4613      	mov	r3, r2
 8003b1a:	00db      	lsls	r3, r3, #3
 8003b1c:	1a9b      	subs	r3, r3, r2
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	440b      	add	r3, r1
 8003b22:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003b26:	681b      	ldr	r3, [r3, #0]
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	370c      	adds	r7, #12
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr

08003b34 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b086      	sub	sp, #24
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	60f8      	str	r0, [r7, #12]
 8003b3c:	607a      	str	r2, [r7, #4]
 8003b3e:	603b      	str	r3, [r7, #0]
 8003b40:	460b      	mov	r3, r1
 8003b42:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b44:	7afb      	ldrb	r3, [r7, #11]
 8003b46:	f003 020f 	and.w	r2, r3, #15
 8003b4a:	4613      	mov	r3, r2
 8003b4c:	00db      	lsls	r3, r3, #3
 8003b4e:	1a9b      	subs	r3, r3, r2
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	3338      	adds	r3, #56	; 0x38
 8003b54:	68fa      	ldr	r2, [r7, #12]
 8003b56:	4413      	add	r3, r2
 8003b58:	3304      	adds	r3, #4
 8003b5a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	683a      	ldr	r2, [r7, #0]
 8003b66:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	2201      	movs	r2, #1
 8003b72:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b74:	7afb      	ldrb	r3, [r7, #11]
 8003b76:	f003 030f 	and.w	r3, r3, #15
 8003b7a:	b2da      	uxtb	r2, r3
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	691b      	ldr	r3, [r3, #16]
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d102      	bne.n	8003b8e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003b8e:	7afb      	ldrb	r3, [r7, #11]
 8003b90:	f003 030f 	and.w	r3, r3, #15
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d109      	bne.n	8003bac <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	6818      	ldr	r0, [r3, #0]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	691b      	ldr	r3, [r3, #16]
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	461a      	mov	r2, r3
 8003ba4:	6979      	ldr	r1, [r7, #20]
 8003ba6:	f005 fe45 	bl	8009834 <USB_EP0StartXfer>
 8003baa:	e008      	b.n	8003bbe <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	6818      	ldr	r0, [r3, #0]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	691b      	ldr	r3, [r3, #16]
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	6979      	ldr	r1, [r7, #20]
 8003bba:	f005 fbef 	bl	800939c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003bbe:	2300      	movs	r3, #0
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	3718      	adds	r7, #24
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}

08003bc8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b084      	sub	sp, #16
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	460b      	mov	r3, r1
 8003bd2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003bd4:	78fb      	ldrb	r3, [r7, #3]
 8003bd6:	f003 020f 	and.w	r2, r3, #15
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d901      	bls.n	8003be6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e050      	b.n	8003c88 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003be6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	da0f      	bge.n	8003c0e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bee:	78fb      	ldrb	r3, [r7, #3]
 8003bf0:	f003 020f 	and.w	r2, r3, #15
 8003bf4:	4613      	mov	r3, r2
 8003bf6:	00db      	lsls	r3, r3, #3
 8003bf8:	1a9b      	subs	r3, r3, r2
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	3338      	adds	r3, #56	; 0x38
 8003bfe:	687a      	ldr	r2, [r7, #4]
 8003c00:	4413      	add	r3, r2
 8003c02:	3304      	adds	r3, #4
 8003c04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2201      	movs	r2, #1
 8003c0a:	705a      	strb	r2, [r3, #1]
 8003c0c:	e00d      	b.n	8003c2a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003c0e:	78fa      	ldrb	r2, [r7, #3]
 8003c10:	4613      	mov	r3, r2
 8003c12:	00db      	lsls	r3, r3, #3
 8003c14:	1a9b      	subs	r3, r3, r2
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003c1c:	687a      	ldr	r2, [r7, #4]
 8003c1e:	4413      	add	r3, r2
 8003c20:	3304      	adds	r3, #4
 8003c22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2200      	movs	r2, #0
 8003c28:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c30:	78fb      	ldrb	r3, [r7, #3]
 8003c32:	f003 030f 	and.w	r3, r3, #15
 8003c36:	b2da      	uxtb	r2, r3
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d101      	bne.n	8003c4a <HAL_PCD_EP_SetStall+0x82>
 8003c46:	2302      	movs	r3, #2
 8003c48:	e01e      	b.n	8003c88 <HAL_PCD_EP_SetStall+0xc0>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	68f9      	ldr	r1, [r7, #12]
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f005 ffa1 	bl	8009ba0 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003c5e:	78fb      	ldrb	r3, [r7, #3]
 8003c60:	f003 030f 	and.w	r3, r3, #15
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d10a      	bne.n	8003c7e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6818      	ldr	r0, [r3, #0]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	691b      	ldr	r3, [r3, #16]
 8003c70:	b2d9      	uxtb	r1, r3
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003c78:	461a      	mov	r2, r3
 8003c7a:	f006 f981 	bl	8009f80 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2200      	movs	r2, #0
 8003c82:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003c86:	2300      	movs	r3, #0
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	3710      	adds	r7, #16
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}

08003c90 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b084      	sub	sp, #16
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	460b      	mov	r3, r1
 8003c9a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003c9c:	78fb      	ldrb	r3, [r7, #3]
 8003c9e:	f003 020f 	and.w	r2, r3, #15
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	429a      	cmp	r2, r3
 8003ca8:	d901      	bls.n	8003cae <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e042      	b.n	8003d34 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003cae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	da0f      	bge.n	8003cd6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003cb6:	78fb      	ldrb	r3, [r7, #3]
 8003cb8:	f003 020f 	and.w	r2, r3, #15
 8003cbc:	4613      	mov	r3, r2
 8003cbe:	00db      	lsls	r3, r3, #3
 8003cc0:	1a9b      	subs	r3, r3, r2
 8003cc2:	009b      	lsls	r3, r3, #2
 8003cc4:	3338      	adds	r3, #56	; 0x38
 8003cc6:	687a      	ldr	r2, [r7, #4]
 8003cc8:	4413      	add	r3, r2
 8003cca:	3304      	adds	r3, #4
 8003ccc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	705a      	strb	r2, [r3, #1]
 8003cd4:	e00f      	b.n	8003cf6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003cd6:	78fb      	ldrb	r3, [r7, #3]
 8003cd8:	f003 020f 	and.w	r2, r3, #15
 8003cdc:	4613      	mov	r3, r2
 8003cde:	00db      	lsls	r3, r3, #3
 8003ce0:	1a9b      	subs	r3, r3, r2
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003ce8:	687a      	ldr	r2, [r7, #4]
 8003cea:	4413      	add	r3, r2
 8003cec:	3304      	adds	r3, #4
 8003cee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003cfc:	78fb      	ldrb	r3, [r7, #3]
 8003cfe:	f003 030f 	and.w	r3, r3, #15
 8003d02:	b2da      	uxtb	r2, r3
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d101      	bne.n	8003d16 <HAL_PCD_EP_ClrStall+0x86>
 8003d12:	2302      	movs	r3, #2
 8003d14:	e00e      	b.n	8003d34 <HAL_PCD_EP_ClrStall+0xa4>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2201      	movs	r2, #1
 8003d1a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	68f9      	ldr	r1, [r7, #12]
 8003d24:	4618      	mov	r0, r3
 8003d26:	f005 ffa9 	bl	8009c7c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003d32:	2300      	movs	r3, #0
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3710      	adds	r7, #16
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}

08003d3c <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b082      	sub	sp, #8
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	460b      	mov	r3, r1
 8003d46:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	d101      	bne.n	8003d56 <HAL_PCD_EP_Flush+0x1a>
 8003d52:	2302      	movs	r3, #2
 8003d54:	e01b      	b.n	8003d8e <HAL_PCD_EP_Flush+0x52>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2201      	movs	r2, #1
 8003d5a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((ep_addr & 0x80U) == 0x80U)
 8003d5e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	da09      	bge.n	8003d7a <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	78fb      	ldrb	r3, [r7, #3]
 8003d6c:	f003 030f 	and.w	r3, r3, #15
 8003d70:	4619      	mov	r1, r3
 8003d72:	4610      	mov	r0, r2
 8003d74:	f005 f928 	bl	8008fc8 <USB_FlushTxFifo>
 8003d78:	e004      	b.n	8003d84 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f005 f948 	bl	8009014 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2200      	movs	r2, #0
 8003d88:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003d8c:	2300      	movs	r3, #0
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3708      	adds	r7, #8
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}

08003d96 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003d96:	b580      	push	{r7, lr}
 8003d98:	b08a      	sub	sp, #40	; 0x28
 8003d9a:	af02      	add	r7, sp, #8
 8003d9c:	6078      	str	r0, [r7, #4]
 8003d9e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003daa:	683a      	ldr	r2, [r7, #0]
 8003dac:	4613      	mov	r3, r2
 8003dae:	00db      	lsls	r3, r3, #3
 8003db0:	1a9b      	subs	r3, r3, r2
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	3338      	adds	r3, #56	; 0x38
 8003db6:	687a      	ldr	r2, [r7, #4]
 8003db8:	4413      	add	r3, r2
 8003dba:	3304      	adds	r3, #4
 8003dbc:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	699a      	ldr	r2, [r3, #24]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	695b      	ldr	r3, [r3, #20]
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d901      	bls.n	8003dce <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e06c      	b.n	8003ea8 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	695a      	ldr	r2, [r3, #20]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	699b      	ldr	r3, [r3, #24]
 8003dd6:	1ad3      	subs	r3, r2, r3
 8003dd8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	69fa      	ldr	r2, [r7, #28]
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d902      	bls.n	8003dea <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003dea:	69fb      	ldr	r3, [r7, #28]
 8003dec:	3303      	adds	r3, #3
 8003dee:	089b      	lsrs	r3, r3, #2
 8003df0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003df2:	e02b      	b.n	8003e4c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	695a      	ldr	r2, [r3, #20]
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	699b      	ldr	r3, [r3, #24]
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	69fa      	ldr	r2, [r7, #28]
 8003e06:	429a      	cmp	r2, r3
 8003e08:	d902      	bls.n	8003e10 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003e10:	69fb      	ldr	r3, [r7, #28]
 8003e12:	3303      	adds	r3, #3
 8003e14:	089b      	lsrs	r3, r3, #2
 8003e16:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	68d9      	ldr	r1, [r3, #12]
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	b2da      	uxtb	r2, r3
 8003e20:	69fb      	ldr	r3, [r7, #28]
 8003e22:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	9300      	str	r3, [sp, #0]
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	6978      	ldr	r0, [r7, #20]
 8003e30:	f005 fe58 	bl	8009ae4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	68da      	ldr	r2, [r3, #12]
 8003e38:	69fb      	ldr	r3, [r7, #28]
 8003e3a:	441a      	add	r2, r3
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	699a      	ldr	r2, [r3, #24]
 8003e44:	69fb      	ldr	r3, [r7, #28]
 8003e46:	441a      	add	r2, r3
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	015a      	lsls	r2, r3, #5
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	4413      	add	r3, r2
 8003e54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e58:	699b      	ldr	r3, [r3, #24]
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	69ba      	ldr	r2, [r7, #24]
 8003e5e:	429a      	cmp	r2, r3
 8003e60:	d809      	bhi.n	8003e76 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	699a      	ldr	r2, [r3, #24]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	d203      	bcs.n	8003e76 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	695b      	ldr	r3, [r3, #20]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d1be      	bne.n	8003df4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	695a      	ldr	r2, [r3, #20]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	699b      	ldr	r3, [r3, #24]
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	d811      	bhi.n	8003ea6 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	f003 030f 	and.w	r3, r3, #15
 8003e88:	2201      	movs	r2, #1
 8003e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e8e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	43db      	mvns	r3, r3
 8003e9c:	6939      	ldr	r1, [r7, #16]
 8003e9e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ea2:	4013      	ands	r3, r2
 8003ea4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003ea6:	2300      	movs	r3, #0
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3720      	adds	r7, #32
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}

08003eb0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b086      	sub	sp, #24
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	333c      	adds	r3, #60	; 0x3c
 8003ec8:	3304      	adds	r3, #4
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	015a      	lsls	r2, r3, #5
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	4413      	add	r3, r2
 8003ed6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	691b      	ldr	r3, [r3, #16]
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	f040 80a0 	bne.w	8004028 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	f003 0308 	and.w	r3, r3, #8
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d015      	beq.n	8003f1e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	4a72      	ldr	r2, [pc, #456]	; (80040c0 <PCD_EP_OutXfrComplete_int+0x210>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	f240 80dd 	bls.w	80040b6 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	f000 80d7 	beq.w	80040b6 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	015a      	lsls	r2, r3, #5
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	4413      	add	r3, r2
 8003f10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f14:	461a      	mov	r2, r3
 8003f16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f1a:	6093      	str	r3, [r2, #8]
 8003f1c:	e0cb      	b.n	80040b6 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	f003 0320 	and.w	r3, r3, #32
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d009      	beq.n	8003f3c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	015a      	lsls	r2, r3, #5
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	4413      	add	r3, r2
 8003f30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f34:	461a      	mov	r2, r3
 8003f36:	2320      	movs	r3, #32
 8003f38:	6093      	str	r3, [r2, #8]
 8003f3a:	e0bc      	b.n	80040b6 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	f040 80b7 	bne.w	80040b6 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	4a5d      	ldr	r2, [pc, #372]	; (80040c0 <PCD_EP_OutXfrComplete_int+0x210>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d90f      	bls.n	8003f70 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d00a      	beq.n	8003f70 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	015a      	lsls	r2, r3, #5
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	4413      	add	r3, r2
 8003f62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f66:	461a      	mov	r2, r3
 8003f68:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f6c:	6093      	str	r3, [r2, #8]
 8003f6e:	e0a2      	b.n	80040b6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003f70:	6879      	ldr	r1, [r7, #4]
 8003f72:	683a      	ldr	r2, [r7, #0]
 8003f74:	4613      	mov	r3, r2
 8003f76:	00db      	lsls	r3, r3, #3
 8003f78:	1a9b      	subs	r3, r3, r2
 8003f7a:	009b      	lsls	r3, r3, #2
 8003f7c:	440b      	add	r3, r1
 8003f7e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003f82:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	0159      	lsls	r1, r3, #5
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	440b      	add	r3, r1
 8003f8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f90:	691b      	ldr	r3, [r3, #16]
 8003f92:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003f96:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	683a      	ldr	r2, [r7, #0]
 8003f9c:	4613      	mov	r3, r2
 8003f9e:	00db      	lsls	r3, r3, #3
 8003fa0:	1a9b      	subs	r3, r3, r2
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	4403      	add	r3, r0
 8003fa6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003faa:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003fac:	6879      	ldr	r1, [r7, #4]
 8003fae:	683a      	ldr	r2, [r7, #0]
 8003fb0:	4613      	mov	r3, r2
 8003fb2:	00db      	lsls	r3, r3, #3
 8003fb4:	1a9b      	subs	r3, r3, r2
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	440b      	add	r3, r1
 8003fba:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003fbe:	6819      	ldr	r1, [r3, #0]
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	683a      	ldr	r2, [r7, #0]
 8003fc4:	4613      	mov	r3, r2
 8003fc6:	00db      	lsls	r3, r3, #3
 8003fc8:	1a9b      	subs	r3, r3, r2
 8003fca:	009b      	lsls	r3, r3, #2
 8003fcc:	4403      	add	r3, r0
 8003fce:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4419      	add	r1, r3
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	683a      	ldr	r2, [r7, #0]
 8003fda:	4613      	mov	r3, r2
 8003fdc:	00db      	lsls	r3, r3, #3
 8003fde:	1a9b      	subs	r3, r3, r2
 8003fe0:	009b      	lsls	r3, r3, #2
 8003fe2:	4403      	add	r3, r0
 8003fe4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003fe8:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d114      	bne.n	800401a <PCD_EP_OutXfrComplete_int+0x16a>
 8003ff0:	6879      	ldr	r1, [r7, #4]
 8003ff2:	683a      	ldr	r2, [r7, #0]
 8003ff4:	4613      	mov	r3, r2
 8003ff6:	00db      	lsls	r3, r3, #3
 8003ff8:	1a9b      	subs	r3, r3, r2
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	440b      	add	r3, r1
 8003ffe:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d108      	bne.n	800401a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6818      	ldr	r0, [r3, #0]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004012:	461a      	mov	r2, r3
 8004014:	2101      	movs	r1, #1
 8004016:	f005 ffb3 	bl	8009f80 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	b2db      	uxtb	r3, r3
 800401e:	4619      	mov	r1, r3
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f011 fbed 	bl	8015800 <HAL_PCD_DataOutStageCallback>
 8004026:	e046      	b.n	80040b6 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	4a26      	ldr	r2, [pc, #152]	; (80040c4 <PCD_EP_OutXfrComplete_int+0x214>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d124      	bne.n	800407a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004036:	2b00      	cmp	r3, #0
 8004038:	d00a      	beq.n	8004050 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	015a      	lsls	r2, r3, #5
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	4413      	add	r3, r2
 8004042:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004046:	461a      	mov	r2, r3
 8004048:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800404c:	6093      	str	r3, [r2, #8]
 800404e:	e032      	b.n	80040b6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	f003 0320 	and.w	r3, r3, #32
 8004056:	2b00      	cmp	r3, #0
 8004058:	d008      	beq.n	800406c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	015a      	lsls	r2, r3, #5
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	4413      	add	r3, r2
 8004062:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004066:	461a      	mov	r2, r3
 8004068:	2320      	movs	r3, #32
 800406a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	b2db      	uxtb	r3, r3
 8004070:	4619      	mov	r1, r3
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f011 fbc4 	bl	8015800 <HAL_PCD_DataOutStageCallback>
 8004078:	e01d      	b.n	80040b6 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d114      	bne.n	80040aa <PCD_EP_OutXfrComplete_int+0x1fa>
 8004080:	6879      	ldr	r1, [r7, #4]
 8004082:	683a      	ldr	r2, [r7, #0]
 8004084:	4613      	mov	r3, r2
 8004086:	00db      	lsls	r3, r3, #3
 8004088:	1a9b      	subs	r3, r3, r2
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	440b      	add	r3, r1
 800408e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d108      	bne.n	80040aa <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6818      	ldr	r0, [r3, #0]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80040a2:	461a      	mov	r2, r3
 80040a4:	2100      	movs	r1, #0
 80040a6:	f005 ff6b 	bl	8009f80 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	4619      	mov	r1, r3
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	f011 fba5 	bl	8015800 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80040b6:	2300      	movs	r3, #0
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	3718      	adds	r7, #24
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}
 80040c0:	4f54300a 	.word	0x4f54300a
 80040c4:	4f54310a 	.word	0x4f54310a

080040c8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b086      	sub	sp, #24
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
 80040d0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	333c      	adds	r3, #60	; 0x3c
 80040e0:	3304      	adds	r3, #4
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	015a      	lsls	r2, r3, #5
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	4413      	add	r3, r2
 80040ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	4a15      	ldr	r2, [pc, #84]	; (8004150 <PCD_EP_OutSetupPacket_int+0x88>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d90e      	bls.n	800411c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004104:	2b00      	cmp	r3, #0
 8004106:	d009      	beq.n	800411c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	015a      	lsls	r2, r3, #5
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	4413      	add	r3, r2
 8004110:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004114:	461a      	mov	r2, r3
 8004116:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800411a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	f011 fb5d 	bl	80157dc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	4a0a      	ldr	r2, [pc, #40]	; (8004150 <PCD_EP_OutSetupPacket_int+0x88>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d90c      	bls.n	8004144 <PCD_EP_OutSetupPacket_int+0x7c>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	691b      	ldr	r3, [r3, #16]
 800412e:	2b01      	cmp	r3, #1
 8004130:	d108      	bne.n	8004144 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6818      	ldr	r0, [r3, #0]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800413c:	461a      	mov	r2, r3
 800413e:	2101      	movs	r1, #1
 8004140:	f005 ff1e 	bl	8009f80 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004144:	2300      	movs	r3, #0
}
 8004146:	4618      	mov	r0, r3
 8004148:	3718      	adds	r7, #24
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}
 800414e:	bf00      	nop
 8004150:	4f54300a 	.word	0x4f54300a

08004154 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004154:	b480      	push	{r7}
 8004156:	b085      	sub	sp, #20
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
 800415c:	460b      	mov	r3, r1
 800415e:	70fb      	strb	r3, [r7, #3]
 8004160:	4613      	mov	r3, r2
 8004162:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800416c:	78fb      	ldrb	r3, [r7, #3]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d107      	bne.n	8004182 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004172:	883b      	ldrh	r3, [r7, #0]
 8004174:	0419      	lsls	r1, r3, #16
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	68ba      	ldr	r2, [r7, #8]
 800417c:	430a      	orrs	r2, r1
 800417e:	629a      	str	r2, [r3, #40]	; 0x28
 8004180:	e028      	b.n	80041d4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004188:	0c1b      	lsrs	r3, r3, #16
 800418a:	68ba      	ldr	r2, [r7, #8]
 800418c:	4413      	add	r3, r2
 800418e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004190:	2300      	movs	r3, #0
 8004192:	73fb      	strb	r3, [r7, #15]
 8004194:	e00d      	b.n	80041b2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	7bfb      	ldrb	r3, [r7, #15]
 800419c:	3340      	adds	r3, #64	; 0x40
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	4413      	add	r3, r2
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	0c1b      	lsrs	r3, r3, #16
 80041a6:	68ba      	ldr	r2, [r7, #8]
 80041a8:	4413      	add	r3, r2
 80041aa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80041ac:	7bfb      	ldrb	r3, [r7, #15]
 80041ae:	3301      	adds	r3, #1
 80041b0:	73fb      	strb	r3, [r7, #15]
 80041b2:	7bfa      	ldrb	r2, [r7, #15]
 80041b4:	78fb      	ldrb	r3, [r7, #3]
 80041b6:	3b01      	subs	r3, #1
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d3ec      	bcc.n	8004196 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80041bc:	883b      	ldrh	r3, [r7, #0]
 80041be:	0418      	lsls	r0, r3, #16
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6819      	ldr	r1, [r3, #0]
 80041c4:	78fb      	ldrb	r3, [r7, #3]
 80041c6:	3b01      	subs	r3, #1
 80041c8:	68ba      	ldr	r2, [r7, #8]
 80041ca:	4302      	orrs	r2, r0
 80041cc:	3340      	adds	r3, #64	; 0x40
 80041ce:	009b      	lsls	r3, r3, #2
 80041d0:	440b      	add	r3, r1
 80041d2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80041d4:	2300      	movs	r3, #0
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3714      	adds	r7, #20
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr

080041e2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80041e2:	b480      	push	{r7}
 80041e4:	b083      	sub	sp, #12
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	6078      	str	r0, [r7, #4]
 80041ea:	460b      	mov	r3, r1
 80041ec:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	887a      	ldrh	r2, [r7, #2]
 80041f4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80041f6:	2300      	movs	r3, #0
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	370c      	adds	r7, #12
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr

08004204 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004204:	b480      	push	{r7}
 8004206:	b085      	sub	sp, #20
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2201      	movs	r2, #1
 8004216:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2200      	movs	r2, #0
 800421e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	699b      	ldr	r3, [r3, #24]
 8004226:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004232:	4b05      	ldr	r3, [pc, #20]	; (8004248 <HAL_PCDEx_ActivateLPM+0x44>)
 8004234:	4313      	orrs	r3, r2
 8004236:	68fa      	ldr	r2, [r7, #12]
 8004238:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800423a:	2300      	movs	r3, #0
}
 800423c:	4618      	mov	r0, r3
 800423e:	3714      	adds	r7, #20
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr
 8004248:	10000003 	.word	0x10000003

0800424c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800424c:	b480      	push	{r7}
 800424e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004250:	4b05      	ldr	r3, [pc, #20]	; (8004268 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a04      	ldr	r2, [pc, #16]	; (8004268 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004256:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800425a:	6013      	str	r3, [r2, #0]
}
 800425c:	bf00      	nop
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr
 8004266:	bf00      	nop
 8004268:	40007000 	.word	0x40007000

0800426c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b082      	sub	sp, #8
 8004270:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004272:	2300      	movs	r3, #0
 8004274:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004276:	4b23      	ldr	r3, [pc, #140]	; (8004304 <HAL_PWREx_EnableOverDrive+0x98>)
 8004278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427a:	4a22      	ldr	r2, [pc, #136]	; (8004304 <HAL_PWREx_EnableOverDrive+0x98>)
 800427c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004280:	6413      	str	r3, [r2, #64]	; 0x40
 8004282:	4b20      	ldr	r3, [pc, #128]	; (8004304 <HAL_PWREx_EnableOverDrive+0x98>)
 8004284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004286:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800428a:	603b      	str	r3, [r7, #0]
 800428c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800428e:	4b1e      	ldr	r3, [pc, #120]	; (8004308 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a1d      	ldr	r2, [pc, #116]	; (8004308 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004294:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004298:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800429a:	f7fd f98f 	bl	80015bc <HAL_GetTick>
 800429e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80042a0:	e009      	b.n	80042b6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80042a2:	f7fd f98b 	bl	80015bc <HAL_GetTick>
 80042a6:	4602      	mov	r2, r0
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	1ad3      	subs	r3, r2, r3
 80042ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80042b0:	d901      	bls.n	80042b6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80042b2:	2303      	movs	r3, #3
 80042b4:	e022      	b.n	80042fc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80042b6:	4b14      	ldr	r3, [pc, #80]	; (8004308 <HAL_PWREx_EnableOverDrive+0x9c>)
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042c2:	d1ee      	bne.n	80042a2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80042c4:	4b10      	ldr	r3, [pc, #64]	; (8004308 <HAL_PWREx_EnableOverDrive+0x9c>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a0f      	ldr	r2, [pc, #60]	; (8004308 <HAL_PWREx_EnableOverDrive+0x9c>)
 80042ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042ce:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80042d0:	f7fd f974 	bl	80015bc <HAL_GetTick>
 80042d4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80042d6:	e009      	b.n	80042ec <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80042d8:	f7fd f970 	bl	80015bc <HAL_GetTick>
 80042dc:	4602      	mov	r2, r0
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	1ad3      	subs	r3, r2, r3
 80042e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80042e6:	d901      	bls.n	80042ec <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80042e8:	2303      	movs	r3, #3
 80042ea:	e007      	b.n	80042fc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80042ec:	4b06      	ldr	r3, [pc, #24]	; (8004308 <HAL_PWREx_EnableOverDrive+0x9c>)
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80042f8:	d1ee      	bne.n	80042d8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80042fa:	2300      	movs	r3, #0
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	3708      	adds	r7, #8
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}
 8004304:	40023800 	.word	0x40023800
 8004308:	40007000 	.word	0x40007000

0800430c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b086      	sub	sp, #24
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004314:	2300      	movs	r3, #0
 8004316:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d101      	bne.n	8004322 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	e29b      	b.n	800485a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 0301 	and.w	r3, r3, #1
 800432a:	2b00      	cmp	r3, #0
 800432c:	f000 8087 	beq.w	800443e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004330:	4b96      	ldr	r3, [pc, #600]	; (800458c <HAL_RCC_OscConfig+0x280>)
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	f003 030c 	and.w	r3, r3, #12
 8004338:	2b04      	cmp	r3, #4
 800433a:	d00c      	beq.n	8004356 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800433c:	4b93      	ldr	r3, [pc, #588]	; (800458c <HAL_RCC_OscConfig+0x280>)
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	f003 030c 	and.w	r3, r3, #12
 8004344:	2b08      	cmp	r3, #8
 8004346:	d112      	bne.n	800436e <HAL_RCC_OscConfig+0x62>
 8004348:	4b90      	ldr	r3, [pc, #576]	; (800458c <HAL_RCC_OscConfig+0x280>)
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004350:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004354:	d10b      	bne.n	800436e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004356:	4b8d      	ldr	r3, [pc, #564]	; (800458c <HAL_RCC_OscConfig+0x280>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800435e:	2b00      	cmp	r3, #0
 8004360:	d06c      	beq.n	800443c <HAL_RCC_OscConfig+0x130>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d168      	bne.n	800443c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e275      	b.n	800485a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004376:	d106      	bne.n	8004386 <HAL_RCC_OscConfig+0x7a>
 8004378:	4b84      	ldr	r3, [pc, #528]	; (800458c <HAL_RCC_OscConfig+0x280>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a83      	ldr	r2, [pc, #524]	; (800458c <HAL_RCC_OscConfig+0x280>)
 800437e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004382:	6013      	str	r3, [r2, #0]
 8004384:	e02e      	b.n	80043e4 <HAL_RCC_OscConfig+0xd8>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d10c      	bne.n	80043a8 <HAL_RCC_OscConfig+0x9c>
 800438e:	4b7f      	ldr	r3, [pc, #508]	; (800458c <HAL_RCC_OscConfig+0x280>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a7e      	ldr	r2, [pc, #504]	; (800458c <HAL_RCC_OscConfig+0x280>)
 8004394:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004398:	6013      	str	r3, [r2, #0]
 800439a:	4b7c      	ldr	r3, [pc, #496]	; (800458c <HAL_RCC_OscConfig+0x280>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a7b      	ldr	r2, [pc, #492]	; (800458c <HAL_RCC_OscConfig+0x280>)
 80043a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043a4:	6013      	str	r3, [r2, #0]
 80043a6:	e01d      	b.n	80043e4 <HAL_RCC_OscConfig+0xd8>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043b0:	d10c      	bne.n	80043cc <HAL_RCC_OscConfig+0xc0>
 80043b2:	4b76      	ldr	r3, [pc, #472]	; (800458c <HAL_RCC_OscConfig+0x280>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a75      	ldr	r2, [pc, #468]	; (800458c <HAL_RCC_OscConfig+0x280>)
 80043b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043bc:	6013      	str	r3, [r2, #0]
 80043be:	4b73      	ldr	r3, [pc, #460]	; (800458c <HAL_RCC_OscConfig+0x280>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a72      	ldr	r2, [pc, #456]	; (800458c <HAL_RCC_OscConfig+0x280>)
 80043c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043c8:	6013      	str	r3, [r2, #0]
 80043ca:	e00b      	b.n	80043e4 <HAL_RCC_OscConfig+0xd8>
 80043cc:	4b6f      	ldr	r3, [pc, #444]	; (800458c <HAL_RCC_OscConfig+0x280>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a6e      	ldr	r2, [pc, #440]	; (800458c <HAL_RCC_OscConfig+0x280>)
 80043d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043d6:	6013      	str	r3, [r2, #0]
 80043d8:	4b6c      	ldr	r3, [pc, #432]	; (800458c <HAL_RCC_OscConfig+0x280>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a6b      	ldr	r2, [pc, #428]	; (800458c <HAL_RCC_OscConfig+0x280>)
 80043de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d013      	beq.n	8004414 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043ec:	f7fd f8e6 	bl	80015bc <HAL_GetTick>
 80043f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043f2:	e008      	b.n	8004406 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043f4:	f7fd f8e2 	bl	80015bc <HAL_GetTick>
 80043f8:	4602      	mov	r2, r0
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	1ad3      	subs	r3, r2, r3
 80043fe:	2b64      	cmp	r3, #100	; 0x64
 8004400:	d901      	bls.n	8004406 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004402:	2303      	movs	r3, #3
 8004404:	e229      	b.n	800485a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004406:	4b61      	ldr	r3, [pc, #388]	; (800458c <HAL_RCC_OscConfig+0x280>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800440e:	2b00      	cmp	r3, #0
 8004410:	d0f0      	beq.n	80043f4 <HAL_RCC_OscConfig+0xe8>
 8004412:	e014      	b.n	800443e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004414:	f7fd f8d2 	bl	80015bc <HAL_GetTick>
 8004418:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800441a:	e008      	b.n	800442e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800441c:	f7fd f8ce 	bl	80015bc <HAL_GetTick>
 8004420:	4602      	mov	r2, r0
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	2b64      	cmp	r3, #100	; 0x64
 8004428:	d901      	bls.n	800442e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800442a:	2303      	movs	r3, #3
 800442c:	e215      	b.n	800485a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800442e:	4b57      	ldr	r3, [pc, #348]	; (800458c <HAL_RCC_OscConfig+0x280>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004436:	2b00      	cmp	r3, #0
 8004438:	d1f0      	bne.n	800441c <HAL_RCC_OscConfig+0x110>
 800443a:	e000      	b.n	800443e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800443c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f003 0302 	and.w	r3, r3, #2
 8004446:	2b00      	cmp	r3, #0
 8004448:	d069      	beq.n	800451e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800444a:	4b50      	ldr	r3, [pc, #320]	; (800458c <HAL_RCC_OscConfig+0x280>)
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	f003 030c 	and.w	r3, r3, #12
 8004452:	2b00      	cmp	r3, #0
 8004454:	d00b      	beq.n	800446e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004456:	4b4d      	ldr	r3, [pc, #308]	; (800458c <HAL_RCC_OscConfig+0x280>)
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	f003 030c 	and.w	r3, r3, #12
 800445e:	2b08      	cmp	r3, #8
 8004460:	d11c      	bne.n	800449c <HAL_RCC_OscConfig+0x190>
 8004462:	4b4a      	ldr	r3, [pc, #296]	; (800458c <HAL_RCC_OscConfig+0x280>)
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800446a:	2b00      	cmp	r3, #0
 800446c:	d116      	bne.n	800449c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800446e:	4b47      	ldr	r3, [pc, #284]	; (800458c <HAL_RCC_OscConfig+0x280>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f003 0302 	and.w	r3, r3, #2
 8004476:	2b00      	cmp	r3, #0
 8004478:	d005      	beq.n	8004486 <HAL_RCC_OscConfig+0x17a>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	68db      	ldr	r3, [r3, #12]
 800447e:	2b01      	cmp	r3, #1
 8004480:	d001      	beq.n	8004486 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e1e9      	b.n	800485a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004486:	4b41      	ldr	r3, [pc, #260]	; (800458c <HAL_RCC_OscConfig+0x280>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	691b      	ldr	r3, [r3, #16]
 8004492:	00db      	lsls	r3, r3, #3
 8004494:	493d      	ldr	r1, [pc, #244]	; (800458c <HAL_RCC_OscConfig+0x280>)
 8004496:	4313      	orrs	r3, r2
 8004498:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800449a:	e040      	b.n	800451e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	68db      	ldr	r3, [r3, #12]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d023      	beq.n	80044ec <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044a4:	4b39      	ldr	r3, [pc, #228]	; (800458c <HAL_RCC_OscConfig+0x280>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a38      	ldr	r2, [pc, #224]	; (800458c <HAL_RCC_OscConfig+0x280>)
 80044aa:	f043 0301 	orr.w	r3, r3, #1
 80044ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044b0:	f7fd f884 	bl	80015bc <HAL_GetTick>
 80044b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044b6:	e008      	b.n	80044ca <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044b8:	f7fd f880 	bl	80015bc <HAL_GetTick>
 80044bc:	4602      	mov	r2, r0
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	1ad3      	subs	r3, r2, r3
 80044c2:	2b02      	cmp	r3, #2
 80044c4:	d901      	bls.n	80044ca <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80044c6:	2303      	movs	r3, #3
 80044c8:	e1c7      	b.n	800485a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044ca:	4b30      	ldr	r3, [pc, #192]	; (800458c <HAL_RCC_OscConfig+0x280>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f003 0302 	and.w	r3, r3, #2
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d0f0      	beq.n	80044b8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044d6:	4b2d      	ldr	r3, [pc, #180]	; (800458c <HAL_RCC_OscConfig+0x280>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	691b      	ldr	r3, [r3, #16]
 80044e2:	00db      	lsls	r3, r3, #3
 80044e4:	4929      	ldr	r1, [pc, #164]	; (800458c <HAL_RCC_OscConfig+0x280>)
 80044e6:	4313      	orrs	r3, r2
 80044e8:	600b      	str	r3, [r1, #0]
 80044ea:	e018      	b.n	800451e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044ec:	4b27      	ldr	r3, [pc, #156]	; (800458c <HAL_RCC_OscConfig+0x280>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a26      	ldr	r2, [pc, #152]	; (800458c <HAL_RCC_OscConfig+0x280>)
 80044f2:	f023 0301 	bic.w	r3, r3, #1
 80044f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044f8:	f7fd f860 	bl	80015bc <HAL_GetTick>
 80044fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044fe:	e008      	b.n	8004512 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004500:	f7fd f85c 	bl	80015bc <HAL_GetTick>
 8004504:	4602      	mov	r2, r0
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	2b02      	cmp	r3, #2
 800450c:	d901      	bls.n	8004512 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800450e:	2303      	movs	r3, #3
 8004510:	e1a3      	b.n	800485a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004512:	4b1e      	ldr	r3, [pc, #120]	; (800458c <HAL_RCC_OscConfig+0x280>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 0302 	and.w	r3, r3, #2
 800451a:	2b00      	cmp	r3, #0
 800451c:	d1f0      	bne.n	8004500 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f003 0308 	and.w	r3, r3, #8
 8004526:	2b00      	cmp	r3, #0
 8004528:	d038      	beq.n	800459c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	695b      	ldr	r3, [r3, #20]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d019      	beq.n	8004566 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004532:	4b16      	ldr	r3, [pc, #88]	; (800458c <HAL_RCC_OscConfig+0x280>)
 8004534:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004536:	4a15      	ldr	r2, [pc, #84]	; (800458c <HAL_RCC_OscConfig+0x280>)
 8004538:	f043 0301 	orr.w	r3, r3, #1
 800453c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800453e:	f7fd f83d 	bl	80015bc <HAL_GetTick>
 8004542:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004544:	e008      	b.n	8004558 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004546:	f7fd f839 	bl	80015bc <HAL_GetTick>
 800454a:	4602      	mov	r2, r0
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	1ad3      	subs	r3, r2, r3
 8004550:	2b02      	cmp	r3, #2
 8004552:	d901      	bls.n	8004558 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004554:	2303      	movs	r3, #3
 8004556:	e180      	b.n	800485a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004558:	4b0c      	ldr	r3, [pc, #48]	; (800458c <HAL_RCC_OscConfig+0x280>)
 800455a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800455c:	f003 0302 	and.w	r3, r3, #2
 8004560:	2b00      	cmp	r3, #0
 8004562:	d0f0      	beq.n	8004546 <HAL_RCC_OscConfig+0x23a>
 8004564:	e01a      	b.n	800459c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004566:	4b09      	ldr	r3, [pc, #36]	; (800458c <HAL_RCC_OscConfig+0x280>)
 8004568:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800456a:	4a08      	ldr	r2, [pc, #32]	; (800458c <HAL_RCC_OscConfig+0x280>)
 800456c:	f023 0301 	bic.w	r3, r3, #1
 8004570:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004572:	f7fd f823 	bl	80015bc <HAL_GetTick>
 8004576:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004578:	e00a      	b.n	8004590 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800457a:	f7fd f81f 	bl	80015bc <HAL_GetTick>
 800457e:	4602      	mov	r2, r0
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	1ad3      	subs	r3, r2, r3
 8004584:	2b02      	cmp	r3, #2
 8004586:	d903      	bls.n	8004590 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004588:	2303      	movs	r3, #3
 800458a:	e166      	b.n	800485a <HAL_RCC_OscConfig+0x54e>
 800458c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004590:	4b92      	ldr	r3, [pc, #584]	; (80047dc <HAL_RCC_OscConfig+0x4d0>)
 8004592:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004594:	f003 0302 	and.w	r3, r3, #2
 8004598:	2b00      	cmp	r3, #0
 800459a:	d1ee      	bne.n	800457a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f003 0304 	and.w	r3, r3, #4
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	f000 80a4 	beq.w	80046f2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045aa:	4b8c      	ldr	r3, [pc, #560]	; (80047dc <HAL_RCC_OscConfig+0x4d0>)
 80045ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d10d      	bne.n	80045d2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80045b6:	4b89      	ldr	r3, [pc, #548]	; (80047dc <HAL_RCC_OscConfig+0x4d0>)
 80045b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ba:	4a88      	ldr	r2, [pc, #544]	; (80047dc <HAL_RCC_OscConfig+0x4d0>)
 80045bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045c0:	6413      	str	r3, [r2, #64]	; 0x40
 80045c2:	4b86      	ldr	r3, [pc, #536]	; (80047dc <HAL_RCC_OscConfig+0x4d0>)
 80045c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045ca:	60bb      	str	r3, [r7, #8]
 80045cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045ce:	2301      	movs	r3, #1
 80045d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045d2:	4b83      	ldr	r3, [pc, #524]	; (80047e0 <HAL_RCC_OscConfig+0x4d4>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d118      	bne.n	8004610 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80045de:	4b80      	ldr	r3, [pc, #512]	; (80047e0 <HAL_RCC_OscConfig+0x4d4>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a7f      	ldr	r2, [pc, #508]	; (80047e0 <HAL_RCC_OscConfig+0x4d4>)
 80045e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045ea:	f7fc ffe7 	bl	80015bc <HAL_GetTick>
 80045ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045f0:	e008      	b.n	8004604 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045f2:	f7fc ffe3 	bl	80015bc <HAL_GetTick>
 80045f6:	4602      	mov	r2, r0
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	1ad3      	subs	r3, r2, r3
 80045fc:	2b64      	cmp	r3, #100	; 0x64
 80045fe:	d901      	bls.n	8004604 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004600:	2303      	movs	r3, #3
 8004602:	e12a      	b.n	800485a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004604:	4b76      	ldr	r3, [pc, #472]	; (80047e0 <HAL_RCC_OscConfig+0x4d4>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800460c:	2b00      	cmp	r3, #0
 800460e:	d0f0      	beq.n	80045f2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	2b01      	cmp	r3, #1
 8004616:	d106      	bne.n	8004626 <HAL_RCC_OscConfig+0x31a>
 8004618:	4b70      	ldr	r3, [pc, #448]	; (80047dc <HAL_RCC_OscConfig+0x4d0>)
 800461a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800461c:	4a6f      	ldr	r2, [pc, #444]	; (80047dc <HAL_RCC_OscConfig+0x4d0>)
 800461e:	f043 0301 	orr.w	r3, r3, #1
 8004622:	6713      	str	r3, [r2, #112]	; 0x70
 8004624:	e02d      	b.n	8004682 <HAL_RCC_OscConfig+0x376>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d10c      	bne.n	8004648 <HAL_RCC_OscConfig+0x33c>
 800462e:	4b6b      	ldr	r3, [pc, #428]	; (80047dc <HAL_RCC_OscConfig+0x4d0>)
 8004630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004632:	4a6a      	ldr	r2, [pc, #424]	; (80047dc <HAL_RCC_OscConfig+0x4d0>)
 8004634:	f023 0301 	bic.w	r3, r3, #1
 8004638:	6713      	str	r3, [r2, #112]	; 0x70
 800463a:	4b68      	ldr	r3, [pc, #416]	; (80047dc <HAL_RCC_OscConfig+0x4d0>)
 800463c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800463e:	4a67      	ldr	r2, [pc, #412]	; (80047dc <HAL_RCC_OscConfig+0x4d0>)
 8004640:	f023 0304 	bic.w	r3, r3, #4
 8004644:	6713      	str	r3, [r2, #112]	; 0x70
 8004646:	e01c      	b.n	8004682 <HAL_RCC_OscConfig+0x376>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	2b05      	cmp	r3, #5
 800464e:	d10c      	bne.n	800466a <HAL_RCC_OscConfig+0x35e>
 8004650:	4b62      	ldr	r3, [pc, #392]	; (80047dc <HAL_RCC_OscConfig+0x4d0>)
 8004652:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004654:	4a61      	ldr	r2, [pc, #388]	; (80047dc <HAL_RCC_OscConfig+0x4d0>)
 8004656:	f043 0304 	orr.w	r3, r3, #4
 800465a:	6713      	str	r3, [r2, #112]	; 0x70
 800465c:	4b5f      	ldr	r3, [pc, #380]	; (80047dc <HAL_RCC_OscConfig+0x4d0>)
 800465e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004660:	4a5e      	ldr	r2, [pc, #376]	; (80047dc <HAL_RCC_OscConfig+0x4d0>)
 8004662:	f043 0301 	orr.w	r3, r3, #1
 8004666:	6713      	str	r3, [r2, #112]	; 0x70
 8004668:	e00b      	b.n	8004682 <HAL_RCC_OscConfig+0x376>
 800466a:	4b5c      	ldr	r3, [pc, #368]	; (80047dc <HAL_RCC_OscConfig+0x4d0>)
 800466c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800466e:	4a5b      	ldr	r2, [pc, #364]	; (80047dc <HAL_RCC_OscConfig+0x4d0>)
 8004670:	f023 0301 	bic.w	r3, r3, #1
 8004674:	6713      	str	r3, [r2, #112]	; 0x70
 8004676:	4b59      	ldr	r3, [pc, #356]	; (80047dc <HAL_RCC_OscConfig+0x4d0>)
 8004678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800467a:	4a58      	ldr	r2, [pc, #352]	; (80047dc <HAL_RCC_OscConfig+0x4d0>)
 800467c:	f023 0304 	bic.w	r3, r3, #4
 8004680:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d015      	beq.n	80046b6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800468a:	f7fc ff97 	bl	80015bc <HAL_GetTick>
 800468e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004690:	e00a      	b.n	80046a8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004692:	f7fc ff93 	bl	80015bc <HAL_GetTick>
 8004696:	4602      	mov	r2, r0
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	1ad3      	subs	r3, r2, r3
 800469c:	f241 3288 	movw	r2, #5000	; 0x1388
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d901      	bls.n	80046a8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80046a4:	2303      	movs	r3, #3
 80046a6:	e0d8      	b.n	800485a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046a8:	4b4c      	ldr	r3, [pc, #304]	; (80047dc <HAL_RCC_OscConfig+0x4d0>)
 80046aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ac:	f003 0302 	and.w	r3, r3, #2
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d0ee      	beq.n	8004692 <HAL_RCC_OscConfig+0x386>
 80046b4:	e014      	b.n	80046e0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046b6:	f7fc ff81 	bl	80015bc <HAL_GetTick>
 80046ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046bc:	e00a      	b.n	80046d4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046be:	f7fc ff7d 	bl	80015bc <HAL_GetTick>
 80046c2:	4602      	mov	r2, r0
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	1ad3      	subs	r3, r2, r3
 80046c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d901      	bls.n	80046d4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80046d0:	2303      	movs	r3, #3
 80046d2:	e0c2      	b.n	800485a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046d4:	4b41      	ldr	r3, [pc, #260]	; (80047dc <HAL_RCC_OscConfig+0x4d0>)
 80046d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046d8:	f003 0302 	and.w	r3, r3, #2
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d1ee      	bne.n	80046be <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80046e0:	7dfb      	ldrb	r3, [r7, #23]
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d105      	bne.n	80046f2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046e6:	4b3d      	ldr	r3, [pc, #244]	; (80047dc <HAL_RCC_OscConfig+0x4d0>)
 80046e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ea:	4a3c      	ldr	r2, [pc, #240]	; (80047dc <HAL_RCC_OscConfig+0x4d0>)
 80046ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046f0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	699b      	ldr	r3, [r3, #24]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	f000 80ae 	beq.w	8004858 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80046fc:	4b37      	ldr	r3, [pc, #220]	; (80047dc <HAL_RCC_OscConfig+0x4d0>)
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	f003 030c 	and.w	r3, r3, #12
 8004704:	2b08      	cmp	r3, #8
 8004706:	d06d      	beq.n	80047e4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	699b      	ldr	r3, [r3, #24]
 800470c:	2b02      	cmp	r3, #2
 800470e:	d14b      	bne.n	80047a8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004710:	4b32      	ldr	r3, [pc, #200]	; (80047dc <HAL_RCC_OscConfig+0x4d0>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a31      	ldr	r2, [pc, #196]	; (80047dc <HAL_RCC_OscConfig+0x4d0>)
 8004716:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800471a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800471c:	f7fc ff4e 	bl	80015bc <HAL_GetTick>
 8004720:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004722:	e008      	b.n	8004736 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004724:	f7fc ff4a 	bl	80015bc <HAL_GetTick>
 8004728:	4602      	mov	r2, r0
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	2b02      	cmp	r3, #2
 8004730:	d901      	bls.n	8004736 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004732:	2303      	movs	r3, #3
 8004734:	e091      	b.n	800485a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004736:	4b29      	ldr	r3, [pc, #164]	; (80047dc <HAL_RCC_OscConfig+0x4d0>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800473e:	2b00      	cmp	r3, #0
 8004740:	d1f0      	bne.n	8004724 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	69da      	ldr	r2, [r3, #28]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6a1b      	ldr	r3, [r3, #32]
 800474a:	431a      	orrs	r2, r3
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004750:	019b      	lsls	r3, r3, #6
 8004752:	431a      	orrs	r2, r3
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004758:	085b      	lsrs	r3, r3, #1
 800475a:	3b01      	subs	r3, #1
 800475c:	041b      	lsls	r3, r3, #16
 800475e:	431a      	orrs	r2, r3
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004764:	061b      	lsls	r3, r3, #24
 8004766:	431a      	orrs	r2, r3
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800476c:	071b      	lsls	r3, r3, #28
 800476e:	491b      	ldr	r1, [pc, #108]	; (80047dc <HAL_RCC_OscConfig+0x4d0>)
 8004770:	4313      	orrs	r3, r2
 8004772:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004774:	4b19      	ldr	r3, [pc, #100]	; (80047dc <HAL_RCC_OscConfig+0x4d0>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a18      	ldr	r2, [pc, #96]	; (80047dc <HAL_RCC_OscConfig+0x4d0>)
 800477a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800477e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004780:	f7fc ff1c 	bl	80015bc <HAL_GetTick>
 8004784:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004786:	e008      	b.n	800479a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004788:	f7fc ff18 	bl	80015bc <HAL_GetTick>
 800478c:	4602      	mov	r2, r0
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	1ad3      	subs	r3, r2, r3
 8004792:	2b02      	cmp	r3, #2
 8004794:	d901      	bls.n	800479a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004796:	2303      	movs	r3, #3
 8004798:	e05f      	b.n	800485a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800479a:	4b10      	ldr	r3, [pc, #64]	; (80047dc <HAL_RCC_OscConfig+0x4d0>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d0f0      	beq.n	8004788 <HAL_RCC_OscConfig+0x47c>
 80047a6:	e057      	b.n	8004858 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047a8:	4b0c      	ldr	r3, [pc, #48]	; (80047dc <HAL_RCC_OscConfig+0x4d0>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a0b      	ldr	r2, [pc, #44]	; (80047dc <HAL_RCC_OscConfig+0x4d0>)
 80047ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80047b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047b4:	f7fc ff02 	bl	80015bc <HAL_GetTick>
 80047b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047ba:	e008      	b.n	80047ce <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047bc:	f7fc fefe 	bl	80015bc <HAL_GetTick>
 80047c0:	4602      	mov	r2, r0
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	1ad3      	subs	r3, r2, r3
 80047c6:	2b02      	cmp	r3, #2
 80047c8:	d901      	bls.n	80047ce <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80047ca:	2303      	movs	r3, #3
 80047cc:	e045      	b.n	800485a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047ce:	4b03      	ldr	r3, [pc, #12]	; (80047dc <HAL_RCC_OscConfig+0x4d0>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d1f0      	bne.n	80047bc <HAL_RCC_OscConfig+0x4b0>
 80047da:	e03d      	b.n	8004858 <HAL_RCC_OscConfig+0x54c>
 80047dc:	40023800 	.word	0x40023800
 80047e0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80047e4:	4b1f      	ldr	r3, [pc, #124]	; (8004864 <HAL_RCC_OscConfig+0x558>)
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	699b      	ldr	r3, [r3, #24]
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	d030      	beq.n	8004854 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d129      	bne.n	8004854 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800480a:	429a      	cmp	r2, r3
 800480c:	d122      	bne.n	8004854 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800480e:	68fa      	ldr	r2, [r7, #12]
 8004810:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004814:	4013      	ands	r3, r2
 8004816:	687a      	ldr	r2, [r7, #4]
 8004818:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800481a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800481c:	4293      	cmp	r3, r2
 800481e:	d119      	bne.n	8004854 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800482a:	085b      	lsrs	r3, r3, #1
 800482c:	3b01      	subs	r3, #1
 800482e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004830:	429a      	cmp	r2, r3
 8004832:	d10f      	bne.n	8004854 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800483e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004840:	429a      	cmp	r2, r3
 8004842:	d107      	bne.n	8004854 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800484e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004850:	429a      	cmp	r2, r3
 8004852:	d001      	beq.n	8004858 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004854:	2301      	movs	r3, #1
 8004856:	e000      	b.n	800485a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004858:	2300      	movs	r3, #0
}
 800485a:	4618      	mov	r0, r3
 800485c:	3718      	adds	r7, #24
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}
 8004862:	bf00      	nop
 8004864:	40023800 	.word	0x40023800

08004868 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b084      	sub	sp, #16
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
 8004870:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004872:	2300      	movs	r3, #0
 8004874:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d101      	bne.n	8004880 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	e0d0      	b.n	8004a22 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004880:	4b6a      	ldr	r3, [pc, #424]	; (8004a2c <HAL_RCC_ClockConfig+0x1c4>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f003 030f 	and.w	r3, r3, #15
 8004888:	683a      	ldr	r2, [r7, #0]
 800488a:	429a      	cmp	r2, r3
 800488c:	d910      	bls.n	80048b0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800488e:	4b67      	ldr	r3, [pc, #412]	; (8004a2c <HAL_RCC_ClockConfig+0x1c4>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f023 020f 	bic.w	r2, r3, #15
 8004896:	4965      	ldr	r1, [pc, #404]	; (8004a2c <HAL_RCC_ClockConfig+0x1c4>)
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	4313      	orrs	r3, r2
 800489c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800489e:	4b63      	ldr	r3, [pc, #396]	; (8004a2c <HAL_RCC_ClockConfig+0x1c4>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f003 030f 	and.w	r3, r3, #15
 80048a6:	683a      	ldr	r2, [r7, #0]
 80048a8:	429a      	cmp	r2, r3
 80048aa:	d001      	beq.n	80048b0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	e0b8      	b.n	8004a22 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f003 0302 	and.w	r3, r3, #2
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d020      	beq.n	80048fe <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 0304 	and.w	r3, r3, #4
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d005      	beq.n	80048d4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048c8:	4b59      	ldr	r3, [pc, #356]	; (8004a30 <HAL_RCC_ClockConfig+0x1c8>)
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	4a58      	ldr	r2, [pc, #352]	; (8004a30 <HAL_RCC_ClockConfig+0x1c8>)
 80048ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80048d2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f003 0308 	and.w	r3, r3, #8
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d005      	beq.n	80048ec <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80048e0:	4b53      	ldr	r3, [pc, #332]	; (8004a30 <HAL_RCC_ClockConfig+0x1c8>)
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	4a52      	ldr	r2, [pc, #328]	; (8004a30 <HAL_RCC_ClockConfig+0x1c8>)
 80048e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80048ea:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048ec:	4b50      	ldr	r3, [pc, #320]	; (8004a30 <HAL_RCC_ClockConfig+0x1c8>)
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	494d      	ldr	r1, [pc, #308]	; (8004a30 <HAL_RCC_ClockConfig+0x1c8>)
 80048fa:	4313      	orrs	r3, r2
 80048fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 0301 	and.w	r3, r3, #1
 8004906:	2b00      	cmp	r3, #0
 8004908:	d040      	beq.n	800498c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	2b01      	cmp	r3, #1
 8004910:	d107      	bne.n	8004922 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004912:	4b47      	ldr	r3, [pc, #284]	; (8004a30 <HAL_RCC_ClockConfig+0x1c8>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800491a:	2b00      	cmp	r3, #0
 800491c:	d115      	bne.n	800494a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	e07f      	b.n	8004a22 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	2b02      	cmp	r3, #2
 8004928:	d107      	bne.n	800493a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800492a:	4b41      	ldr	r3, [pc, #260]	; (8004a30 <HAL_RCC_ClockConfig+0x1c8>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004932:	2b00      	cmp	r3, #0
 8004934:	d109      	bne.n	800494a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	e073      	b.n	8004a22 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800493a:	4b3d      	ldr	r3, [pc, #244]	; (8004a30 <HAL_RCC_ClockConfig+0x1c8>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f003 0302 	and.w	r3, r3, #2
 8004942:	2b00      	cmp	r3, #0
 8004944:	d101      	bne.n	800494a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	e06b      	b.n	8004a22 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800494a:	4b39      	ldr	r3, [pc, #228]	; (8004a30 <HAL_RCC_ClockConfig+0x1c8>)
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	f023 0203 	bic.w	r2, r3, #3
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	4936      	ldr	r1, [pc, #216]	; (8004a30 <HAL_RCC_ClockConfig+0x1c8>)
 8004958:	4313      	orrs	r3, r2
 800495a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800495c:	f7fc fe2e 	bl	80015bc <HAL_GetTick>
 8004960:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004962:	e00a      	b.n	800497a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004964:	f7fc fe2a 	bl	80015bc <HAL_GetTick>
 8004968:	4602      	mov	r2, r0
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	1ad3      	subs	r3, r2, r3
 800496e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004972:	4293      	cmp	r3, r2
 8004974:	d901      	bls.n	800497a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004976:	2303      	movs	r3, #3
 8004978:	e053      	b.n	8004a22 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800497a:	4b2d      	ldr	r3, [pc, #180]	; (8004a30 <HAL_RCC_ClockConfig+0x1c8>)
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	f003 020c 	and.w	r2, r3, #12
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	009b      	lsls	r3, r3, #2
 8004988:	429a      	cmp	r2, r3
 800498a:	d1eb      	bne.n	8004964 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800498c:	4b27      	ldr	r3, [pc, #156]	; (8004a2c <HAL_RCC_ClockConfig+0x1c4>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f003 030f 	and.w	r3, r3, #15
 8004994:	683a      	ldr	r2, [r7, #0]
 8004996:	429a      	cmp	r2, r3
 8004998:	d210      	bcs.n	80049bc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800499a:	4b24      	ldr	r3, [pc, #144]	; (8004a2c <HAL_RCC_ClockConfig+0x1c4>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f023 020f 	bic.w	r2, r3, #15
 80049a2:	4922      	ldr	r1, [pc, #136]	; (8004a2c <HAL_RCC_ClockConfig+0x1c4>)
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	4313      	orrs	r3, r2
 80049a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049aa:	4b20      	ldr	r3, [pc, #128]	; (8004a2c <HAL_RCC_ClockConfig+0x1c4>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f003 030f 	and.w	r3, r3, #15
 80049b2:	683a      	ldr	r2, [r7, #0]
 80049b4:	429a      	cmp	r2, r3
 80049b6:	d001      	beq.n	80049bc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80049b8:	2301      	movs	r3, #1
 80049ba:	e032      	b.n	8004a22 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f003 0304 	and.w	r3, r3, #4
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d008      	beq.n	80049da <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049c8:	4b19      	ldr	r3, [pc, #100]	; (8004a30 <HAL_RCC_ClockConfig+0x1c8>)
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	4916      	ldr	r1, [pc, #88]	; (8004a30 <HAL_RCC_ClockConfig+0x1c8>)
 80049d6:	4313      	orrs	r3, r2
 80049d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f003 0308 	and.w	r3, r3, #8
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d009      	beq.n	80049fa <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80049e6:	4b12      	ldr	r3, [pc, #72]	; (8004a30 <HAL_RCC_ClockConfig+0x1c8>)
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	691b      	ldr	r3, [r3, #16]
 80049f2:	00db      	lsls	r3, r3, #3
 80049f4:	490e      	ldr	r1, [pc, #56]	; (8004a30 <HAL_RCC_ClockConfig+0x1c8>)
 80049f6:	4313      	orrs	r3, r2
 80049f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80049fa:	f000 f821 	bl	8004a40 <HAL_RCC_GetSysClockFreq>
 80049fe:	4601      	mov	r1, r0
 8004a00:	4b0b      	ldr	r3, [pc, #44]	; (8004a30 <HAL_RCC_ClockConfig+0x1c8>)
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	091b      	lsrs	r3, r3, #4
 8004a06:	f003 030f 	and.w	r3, r3, #15
 8004a0a:	4a0a      	ldr	r2, [pc, #40]	; (8004a34 <HAL_RCC_ClockConfig+0x1cc>)
 8004a0c:	5cd3      	ldrb	r3, [r2, r3]
 8004a0e:	fa21 f303 	lsr.w	r3, r1, r3
 8004a12:	4a09      	ldr	r2, [pc, #36]	; (8004a38 <HAL_RCC_ClockConfig+0x1d0>)
 8004a14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004a16:	4b09      	ldr	r3, [pc, #36]	; (8004a3c <HAL_RCC_ClockConfig+0x1d4>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f7fc fc8a 	bl	8001334 <HAL_InitTick>

  return HAL_OK;
 8004a20:	2300      	movs	r3, #0
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3710      	adds	r7, #16
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}
 8004a2a:	bf00      	nop
 8004a2c:	40023c00 	.word	0x40023c00
 8004a30:	40023800 	.word	0x40023800
 8004a34:	0801611c 	.word	0x0801611c
 8004a38:	20000010 	.word	0x20000010
 8004a3c:	20000014 	.word	0x20000014

08004a40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a42:	b085      	sub	sp, #20
 8004a44:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004a46:	2300      	movs	r3, #0
 8004a48:	607b      	str	r3, [r7, #4]
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	60fb      	str	r3, [r7, #12]
 8004a4e:	2300      	movs	r3, #0
 8004a50:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8004a52:	2300      	movs	r3, #0
 8004a54:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a56:	4b63      	ldr	r3, [pc, #396]	; (8004be4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	f003 030c 	and.w	r3, r3, #12
 8004a5e:	2b04      	cmp	r3, #4
 8004a60:	d007      	beq.n	8004a72 <HAL_RCC_GetSysClockFreq+0x32>
 8004a62:	2b08      	cmp	r3, #8
 8004a64:	d008      	beq.n	8004a78 <HAL_RCC_GetSysClockFreq+0x38>
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	f040 80b4 	bne.w	8004bd4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a6c:	4b5e      	ldr	r3, [pc, #376]	; (8004be8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004a6e:	60bb      	str	r3, [r7, #8]
      break;
 8004a70:	e0b3      	b.n	8004bda <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a72:	4b5e      	ldr	r3, [pc, #376]	; (8004bec <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004a74:	60bb      	str	r3, [r7, #8]
      break;
 8004a76:	e0b0      	b.n	8004bda <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a78:	4b5a      	ldr	r3, [pc, #360]	; (8004be4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a80:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004a82:	4b58      	ldr	r3, [pc, #352]	; (8004be4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d04a      	beq.n	8004b24 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a8e:	4b55      	ldr	r3, [pc, #340]	; (8004be4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	099b      	lsrs	r3, r3, #6
 8004a94:	f04f 0400 	mov.w	r4, #0
 8004a98:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004a9c:	f04f 0200 	mov.w	r2, #0
 8004aa0:	ea03 0501 	and.w	r5, r3, r1
 8004aa4:	ea04 0602 	and.w	r6, r4, r2
 8004aa8:	4629      	mov	r1, r5
 8004aaa:	4632      	mov	r2, r6
 8004aac:	f04f 0300 	mov.w	r3, #0
 8004ab0:	f04f 0400 	mov.w	r4, #0
 8004ab4:	0154      	lsls	r4, r2, #5
 8004ab6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004aba:	014b      	lsls	r3, r1, #5
 8004abc:	4619      	mov	r1, r3
 8004abe:	4622      	mov	r2, r4
 8004ac0:	1b49      	subs	r1, r1, r5
 8004ac2:	eb62 0206 	sbc.w	r2, r2, r6
 8004ac6:	f04f 0300 	mov.w	r3, #0
 8004aca:	f04f 0400 	mov.w	r4, #0
 8004ace:	0194      	lsls	r4, r2, #6
 8004ad0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004ad4:	018b      	lsls	r3, r1, #6
 8004ad6:	1a5b      	subs	r3, r3, r1
 8004ad8:	eb64 0402 	sbc.w	r4, r4, r2
 8004adc:	f04f 0100 	mov.w	r1, #0
 8004ae0:	f04f 0200 	mov.w	r2, #0
 8004ae4:	00e2      	lsls	r2, r4, #3
 8004ae6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004aea:	00d9      	lsls	r1, r3, #3
 8004aec:	460b      	mov	r3, r1
 8004aee:	4614      	mov	r4, r2
 8004af0:	195b      	adds	r3, r3, r5
 8004af2:	eb44 0406 	adc.w	r4, r4, r6
 8004af6:	f04f 0100 	mov.w	r1, #0
 8004afa:	f04f 0200 	mov.w	r2, #0
 8004afe:	0262      	lsls	r2, r4, #9
 8004b00:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004b04:	0259      	lsls	r1, r3, #9
 8004b06:	460b      	mov	r3, r1
 8004b08:	4614      	mov	r4, r2
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	4621      	mov	r1, r4
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	f04f 0400 	mov.w	r4, #0
 8004b14:	461a      	mov	r2, r3
 8004b16:	4623      	mov	r3, r4
 8004b18:	f7fb fb92 	bl	8000240 <__aeabi_uldivmod>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	460c      	mov	r4, r1
 8004b20:	60fb      	str	r3, [r7, #12]
 8004b22:	e049      	b.n	8004bb8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b24:	4b2f      	ldr	r3, [pc, #188]	; (8004be4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	099b      	lsrs	r3, r3, #6
 8004b2a:	f04f 0400 	mov.w	r4, #0
 8004b2e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004b32:	f04f 0200 	mov.w	r2, #0
 8004b36:	ea03 0501 	and.w	r5, r3, r1
 8004b3a:	ea04 0602 	and.w	r6, r4, r2
 8004b3e:	4629      	mov	r1, r5
 8004b40:	4632      	mov	r2, r6
 8004b42:	f04f 0300 	mov.w	r3, #0
 8004b46:	f04f 0400 	mov.w	r4, #0
 8004b4a:	0154      	lsls	r4, r2, #5
 8004b4c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004b50:	014b      	lsls	r3, r1, #5
 8004b52:	4619      	mov	r1, r3
 8004b54:	4622      	mov	r2, r4
 8004b56:	1b49      	subs	r1, r1, r5
 8004b58:	eb62 0206 	sbc.w	r2, r2, r6
 8004b5c:	f04f 0300 	mov.w	r3, #0
 8004b60:	f04f 0400 	mov.w	r4, #0
 8004b64:	0194      	lsls	r4, r2, #6
 8004b66:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004b6a:	018b      	lsls	r3, r1, #6
 8004b6c:	1a5b      	subs	r3, r3, r1
 8004b6e:	eb64 0402 	sbc.w	r4, r4, r2
 8004b72:	f04f 0100 	mov.w	r1, #0
 8004b76:	f04f 0200 	mov.w	r2, #0
 8004b7a:	00e2      	lsls	r2, r4, #3
 8004b7c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004b80:	00d9      	lsls	r1, r3, #3
 8004b82:	460b      	mov	r3, r1
 8004b84:	4614      	mov	r4, r2
 8004b86:	195b      	adds	r3, r3, r5
 8004b88:	eb44 0406 	adc.w	r4, r4, r6
 8004b8c:	f04f 0100 	mov.w	r1, #0
 8004b90:	f04f 0200 	mov.w	r2, #0
 8004b94:	02a2      	lsls	r2, r4, #10
 8004b96:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004b9a:	0299      	lsls	r1, r3, #10
 8004b9c:	460b      	mov	r3, r1
 8004b9e:	4614      	mov	r4, r2
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	4621      	mov	r1, r4
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	f04f 0400 	mov.w	r4, #0
 8004baa:	461a      	mov	r2, r3
 8004bac:	4623      	mov	r3, r4
 8004bae:	f7fb fb47 	bl	8000240 <__aeabi_uldivmod>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	460c      	mov	r4, r1
 8004bb6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004bb8:	4b0a      	ldr	r3, [pc, #40]	; (8004be4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	0c1b      	lsrs	r3, r3, #16
 8004bbe:	f003 0303 	and.w	r3, r3, #3
 8004bc2:	3301      	adds	r3, #1
 8004bc4:	005b      	lsls	r3, r3, #1
 8004bc6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8004bc8:	68fa      	ldr	r2, [r7, #12]
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bd0:	60bb      	str	r3, [r7, #8]
      break;
 8004bd2:	e002      	b.n	8004bda <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004bd4:	4b04      	ldr	r3, [pc, #16]	; (8004be8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004bd6:	60bb      	str	r3, [r7, #8]
      break;
 8004bd8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004bda:	68bb      	ldr	r3, [r7, #8]
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3714      	adds	r7, #20
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004be4:	40023800 	.word	0x40023800
 8004be8:	00f42400 	.word	0x00f42400
 8004bec:	007a1200 	.word	0x007a1200

08004bf0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004bf4:	4b03      	ldr	r3, [pc, #12]	; (8004c04 <HAL_RCC_GetHCLKFreq+0x14>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c00:	4770      	bx	lr
 8004c02:	bf00      	nop
 8004c04:	20000010 	.word	0x20000010

08004c08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004c0c:	f7ff fff0 	bl	8004bf0 <HAL_RCC_GetHCLKFreq>
 8004c10:	4601      	mov	r1, r0
 8004c12:	4b05      	ldr	r3, [pc, #20]	; (8004c28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	0a9b      	lsrs	r3, r3, #10
 8004c18:	f003 0307 	and.w	r3, r3, #7
 8004c1c:	4a03      	ldr	r2, [pc, #12]	; (8004c2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c1e:	5cd3      	ldrb	r3, [r2, r3]
 8004c20:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	bd80      	pop	{r7, pc}
 8004c28:	40023800 	.word	0x40023800
 8004c2c:	0801612c 	.word	0x0801612c

08004c30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004c34:	f7ff ffdc 	bl	8004bf0 <HAL_RCC_GetHCLKFreq>
 8004c38:	4601      	mov	r1, r0
 8004c3a:	4b05      	ldr	r3, [pc, #20]	; (8004c50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	0b5b      	lsrs	r3, r3, #13
 8004c40:	f003 0307 	and.w	r3, r3, #7
 8004c44:	4a03      	ldr	r2, [pc, #12]	; (8004c54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c46:	5cd3      	ldrb	r3, [r2, r3]
 8004c48:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	bd80      	pop	{r7, pc}
 8004c50:	40023800 	.word	0x40023800
 8004c54:	0801612c 	.word	0x0801612c

08004c58 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b083      	sub	sp, #12
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
 8004c60:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	220f      	movs	r2, #15
 8004c66:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004c68:	4b12      	ldr	r3, [pc, #72]	; (8004cb4 <HAL_RCC_GetClockConfig+0x5c>)
 8004c6a:	689b      	ldr	r3, [r3, #8]
 8004c6c:	f003 0203 	and.w	r2, r3, #3
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004c74:	4b0f      	ldr	r3, [pc, #60]	; (8004cb4 <HAL_RCC_GetClockConfig+0x5c>)
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004c80:	4b0c      	ldr	r3, [pc, #48]	; (8004cb4 <HAL_RCC_GetClockConfig+0x5c>)
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004c8c:	4b09      	ldr	r3, [pc, #36]	; (8004cb4 <HAL_RCC_GetClockConfig+0x5c>)
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	08db      	lsrs	r3, r3, #3
 8004c92:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004c9a:	4b07      	ldr	r3, [pc, #28]	; (8004cb8 <HAL_RCC_GetClockConfig+0x60>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 020f 	and.w	r2, r3, #15
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	601a      	str	r2, [r3, #0]
}
 8004ca6:	bf00      	nop
 8004ca8:	370c      	adds	r7, #12
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr
 8004cb2:	bf00      	nop
 8004cb4:	40023800 	.word	0x40023800
 8004cb8:	40023c00 	.word	0x40023c00

08004cbc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b088      	sub	sp, #32
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004ccc:	2300      	movs	r3, #0
 8004cce:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f003 0301 	and.w	r3, r3, #1
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d012      	beq.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004ce4:	4b69      	ldr	r3, [pc, #420]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	4a68      	ldr	r2, [pc, #416]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cea:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004cee:	6093      	str	r3, [r2, #8]
 8004cf0:	4b66      	ldr	r3, [pc, #408]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cf2:	689a      	ldr	r2, [r3, #8]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cf8:	4964      	ldr	r1, [pc, #400]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d101      	bne.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004d06:	2301      	movs	r3, #1
 8004d08:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d017      	beq.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004d16:	4b5d      	ldr	r3, [pc, #372]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d1c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d24:	4959      	ldr	r1, [pc, #356]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d26:	4313      	orrs	r3, r2
 8004d28:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d30:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d34:	d101      	bne.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004d36:	2301      	movs	r3, #1
 8004d38:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d101      	bne.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004d42:	2301      	movs	r3, #1
 8004d44:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d017      	beq.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004d52:	4b4e      	ldr	r3, [pc, #312]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d58:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d60:	494a      	ldr	r1, [pc, #296]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d62:	4313      	orrs	r3, r2
 8004d64:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d6c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d70:	d101      	bne.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004d72:	2301      	movs	r3, #1
 8004d74:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d101      	bne.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d001      	beq.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f003 0320 	and.w	r3, r3, #32
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	f000 808b 	beq.w	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004da0:	4b3a      	ldr	r3, [pc, #232]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da4:	4a39      	ldr	r2, [pc, #228]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004da6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004daa:	6413      	str	r3, [r2, #64]	; 0x40
 8004dac:	4b37      	ldr	r3, [pc, #220]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004db4:	60bb      	str	r3, [r7, #8]
 8004db6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004db8:	4b35      	ldr	r3, [pc, #212]	; (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a34      	ldr	r2, [pc, #208]	; (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004dbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dc2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004dc4:	f7fc fbfa 	bl	80015bc <HAL_GetTick>
 8004dc8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004dca:	e008      	b.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dcc:	f7fc fbf6 	bl	80015bc <HAL_GetTick>
 8004dd0:	4602      	mov	r2, r0
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	1ad3      	subs	r3, r2, r3
 8004dd6:	2b64      	cmp	r3, #100	; 0x64
 8004dd8:	d901      	bls.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004dda:	2303      	movs	r3, #3
 8004ddc:	e38d      	b.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004dde:	4b2c      	ldr	r3, [pc, #176]	; (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d0f0      	beq.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004dea:	4b28      	ldr	r3, [pc, #160]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004df2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d035      	beq.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e02:	693a      	ldr	r2, [r7, #16]
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d02e      	beq.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004e08:	4b20      	ldr	r3, [pc, #128]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e10:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004e12:	4b1e      	ldr	r3, [pc, #120]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e16:	4a1d      	ldr	r2, [pc, #116]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e1c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004e1e:	4b1b      	ldr	r3, [pc, #108]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e22:	4a1a      	ldr	r2, [pc, #104]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e28:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004e2a:	4a18      	ldr	r2, [pc, #96]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004e30:	4b16      	ldr	r3, [pc, #88]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e34:	f003 0301 	and.w	r3, r3, #1
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	d114      	bne.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e3c:	f7fc fbbe 	bl	80015bc <HAL_GetTick>
 8004e40:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e42:	e00a      	b.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e44:	f7fc fbba 	bl	80015bc <HAL_GetTick>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	1ad3      	subs	r3, r2, r3
 8004e4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d901      	bls.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004e56:	2303      	movs	r3, #3
 8004e58:	e34f      	b.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e5a:	4b0c      	ldr	r3, [pc, #48]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e5e:	f003 0302 	and.w	r3, r3, #2
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d0ee      	beq.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e72:	d111      	bne.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004e74:	4b05      	ldr	r3, [pc, #20]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004e80:	4b04      	ldr	r3, [pc, #16]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004e82:	400b      	ands	r3, r1
 8004e84:	4901      	ldr	r1, [pc, #4]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e86:	4313      	orrs	r3, r2
 8004e88:	608b      	str	r3, [r1, #8]
 8004e8a:	e00b      	b.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004e8c:	40023800 	.word	0x40023800
 8004e90:	40007000 	.word	0x40007000
 8004e94:	0ffffcff 	.word	0x0ffffcff
 8004e98:	4bb3      	ldr	r3, [pc, #716]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e9a:	689b      	ldr	r3, [r3, #8]
 8004e9c:	4ab2      	ldr	r2, [pc, #712]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e9e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004ea2:	6093      	str	r3, [r2, #8]
 8004ea4:	4bb0      	ldr	r3, [pc, #704]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ea6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004eb0:	49ad      	ldr	r1, [pc, #692]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f003 0310 	and.w	r3, r3, #16
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d010      	beq.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004ec2:	4ba9      	ldr	r3, [pc, #676]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ec4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ec8:	4aa7      	ldr	r2, [pc, #668]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004eca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ece:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004ed2:	4ba5      	ldr	r3, [pc, #660]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ed4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004edc:	49a2      	ldr	r1, [pc, #648]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d00a      	beq.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004ef0:	4b9d      	ldr	r3, [pc, #628]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ef6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004efe:	499a      	ldr	r1, [pc, #616]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f00:	4313      	orrs	r3, r2
 8004f02:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d00a      	beq.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004f12:	4b95      	ldr	r3, [pc, #596]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f18:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f20:	4991      	ldr	r1, [pc, #580]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f22:	4313      	orrs	r3, r2
 8004f24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d00a      	beq.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004f34:	4b8c      	ldr	r3, [pc, #560]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f3a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f42:	4989      	ldr	r1, [pc, #548]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f44:	4313      	orrs	r3, r2
 8004f46:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d00a      	beq.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004f56:	4b84      	ldr	r3, [pc, #528]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f5c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f64:	4980      	ldr	r1, [pc, #512]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f66:	4313      	orrs	r3, r2
 8004f68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d00a      	beq.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004f78:	4b7b      	ldr	r3, [pc, #492]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f7e:	f023 0203 	bic.w	r2, r3, #3
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f86:	4978      	ldr	r1, [pc, #480]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d00a      	beq.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004f9a:	4b73      	ldr	r3, [pc, #460]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fa0:	f023 020c 	bic.w	r2, r3, #12
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fa8:	496f      	ldr	r1, [pc, #444]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004faa:	4313      	orrs	r3, r2
 8004fac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d00a      	beq.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004fbc:	4b6a      	ldr	r3, [pc, #424]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004fbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fc2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fca:	4967      	ldr	r1, [pc, #412]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d00a      	beq.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004fde:	4b62      	ldr	r3, [pc, #392]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004fe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fe4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fec:	495e      	ldr	r1, [pc, #376]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d00a      	beq.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005000:	4b59      	ldr	r3, [pc, #356]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005002:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005006:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800500e:	4956      	ldr	r1, [pc, #344]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005010:	4313      	orrs	r3, r2
 8005012:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800501e:	2b00      	cmp	r3, #0
 8005020:	d00a      	beq.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005022:	4b51      	ldr	r3, [pc, #324]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005024:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005028:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005030:	494d      	ldr	r1, [pc, #308]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005032:	4313      	orrs	r3, r2
 8005034:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005040:	2b00      	cmp	r3, #0
 8005042:	d00a      	beq.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005044:	4b48      	ldr	r3, [pc, #288]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005046:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800504a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005052:	4945      	ldr	r1, [pc, #276]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005054:	4313      	orrs	r3, r2
 8005056:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005062:	2b00      	cmp	r3, #0
 8005064:	d00a      	beq.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005066:	4b40      	ldr	r3, [pc, #256]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005068:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800506c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005074:	493c      	ldr	r1, [pc, #240]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005076:	4313      	orrs	r3, r2
 8005078:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005084:	2b00      	cmp	r3, #0
 8005086:	d00a      	beq.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005088:	4b37      	ldr	r3, [pc, #220]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800508a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800508e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005096:	4934      	ldr	r1, [pc, #208]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005098:	4313      	orrs	r3, r2
 800509a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d011      	beq.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80050aa:	4b2f      	ldr	r3, [pc, #188]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80050ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050b0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80050b8:	492b      	ldr	r1, [pc, #172]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80050ba:	4313      	orrs	r3, r2
 80050bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80050c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80050c8:	d101      	bne.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80050ca:	2301      	movs	r3, #1
 80050cc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f003 0308 	and.w	r3, r3, #8
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d001      	beq.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80050da:	2301      	movs	r3, #1
 80050dc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d00a      	beq.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80050ea:	4b1f      	ldr	r3, [pc, #124]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80050ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050f0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050f8:	491b      	ldr	r1, [pc, #108]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80050fa:	4313      	orrs	r3, r2
 80050fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005108:	2b00      	cmp	r3, #0
 800510a:	d00b      	beq.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800510c:	4b16      	ldr	r3, [pc, #88]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800510e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005112:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800511c:	4912      	ldr	r1, [pc, #72]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800511e:	4313      	orrs	r3, r2
 8005120:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800512c:	2b00      	cmp	r3, #0
 800512e:	d00b      	beq.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005130:	4b0d      	ldr	r3, [pc, #52]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005132:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005136:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005140:	4909      	ldr	r1, [pc, #36]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005142:	4313      	orrs	r3, r2
 8005144:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005150:	2b00      	cmp	r3, #0
 8005152:	d00f      	beq.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005154:	4b04      	ldr	r3, [pc, #16]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005156:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800515a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005164:	e002      	b.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8005166:	bf00      	nop
 8005168:	40023800 	.word	0x40023800
 800516c:	4985      	ldr	r1, [pc, #532]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800516e:	4313      	orrs	r3, r2
 8005170:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800517c:	2b00      	cmp	r3, #0
 800517e:	d00b      	beq.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005180:	4b80      	ldr	r3, [pc, #512]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005182:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005186:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005190:	497c      	ldr	r1, [pc, #496]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005192:	4313      	orrs	r3, r2
 8005194:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8005198:	69fb      	ldr	r3, [r7, #28]
 800519a:	2b01      	cmp	r3, #1
 800519c:	d005      	beq.n	80051aa <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80051a6:	f040 80d6 	bne.w	8005356 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80051aa:	4b76      	ldr	r3, [pc, #472]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a75      	ldr	r2, [pc, #468]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80051b0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80051b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051b6:	f7fc fa01 	bl	80015bc <HAL_GetTick>
 80051ba:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80051bc:	e008      	b.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80051be:	f7fc f9fd 	bl	80015bc <HAL_GetTick>
 80051c2:	4602      	mov	r2, r0
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	1ad3      	subs	r3, r2, r3
 80051c8:	2b64      	cmp	r3, #100	; 0x64
 80051ca:	d901      	bls.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80051cc:	2303      	movs	r3, #3
 80051ce:	e194      	b.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80051d0:	4b6c      	ldr	r3, [pc, #432]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d1f0      	bne.n	80051be <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f003 0301 	and.w	r3, r3, #1
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d021      	beq.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x570>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d11d      	bne.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80051f0:	4b64      	ldr	r3, [pc, #400]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80051f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051f6:	0c1b      	lsrs	r3, r3, #16
 80051f8:	f003 0303 	and.w	r3, r3, #3
 80051fc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80051fe:	4b61      	ldr	r3, [pc, #388]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005200:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005204:	0e1b      	lsrs	r3, r3, #24
 8005206:	f003 030f 	and.w	r3, r3, #15
 800520a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	019a      	lsls	r2, r3, #6
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	041b      	lsls	r3, r3, #16
 8005216:	431a      	orrs	r2, r3
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	061b      	lsls	r3, r3, #24
 800521c:	431a      	orrs	r2, r3
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	071b      	lsls	r3, r3, #28
 8005224:	4957      	ldr	r1, [pc, #348]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005226:	4313      	orrs	r3, r2
 8005228:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005234:	2b00      	cmp	r3, #0
 8005236:	d004      	beq.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800523c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005240:	d00a      	beq.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800524a:	2b00      	cmp	r3, #0
 800524c:	d02e      	beq.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005252:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005256:	d129      	bne.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005258:	4b4a      	ldr	r3, [pc, #296]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800525a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800525e:	0c1b      	lsrs	r3, r3, #16
 8005260:	f003 0303 	and.w	r3, r3, #3
 8005264:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005266:	4b47      	ldr	r3, [pc, #284]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005268:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800526c:	0f1b      	lsrs	r3, r3, #28
 800526e:	f003 0307 	and.w	r3, r3, #7
 8005272:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	019a      	lsls	r2, r3, #6
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	041b      	lsls	r3, r3, #16
 800527e:	431a      	orrs	r2, r3
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	68db      	ldr	r3, [r3, #12]
 8005284:	061b      	lsls	r3, r3, #24
 8005286:	431a      	orrs	r2, r3
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	071b      	lsls	r3, r3, #28
 800528c:	493d      	ldr	r1, [pc, #244]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800528e:	4313      	orrs	r3, r2
 8005290:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005294:	4b3b      	ldr	r3, [pc, #236]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005296:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800529a:	f023 021f 	bic.w	r2, r3, #31
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a2:	3b01      	subs	r3, #1
 80052a4:	4937      	ldr	r1, [pc, #220]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80052a6:	4313      	orrs	r3, r2
 80052a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d01d      	beq.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80052b8:	4b32      	ldr	r3, [pc, #200]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80052ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052be:	0e1b      	lsrs	r3, r3, #24
 80052c0:	f003 030f 	and.w	r3, r3, #15
 80052c4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80052c6:	4b2f      	ldr	r3, [pc, #188]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80052c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052cc:	0f1b      	lsrs	r3, r3, #28
 80052ce:	f003 0307 	and.w	r3, r3, #7
 80052d2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	019a      	lsls	r2, r3, #6
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	691b      	ldr	r3, [r3, #16]
 80052de:	041b      	lsls	r3, r3, #16
 80052e0:	431a      	orrs	r2, r3
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	061b      	lsls	r3, r3, #24
 80052e6:	431a      	orrs	r2, r3
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	071b      	lsls	r3, r3, #28
 80052ec:	4925      	ldr	r1, [pc, #148]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80052ee:	4313      	orrs	r3, r2
 80052f0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d011      	beq.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	019a      	lsls	r2, r3, #6
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	691b      	ldr	r3, [r3, #16]
 800530a:	041b      	lsls	r3, r3, #16
 800530c:	431a      	orrs	r2, r3
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	68db      	ldr	r3, [r3, #12]
 8005312:	061b      	lsls	r3, r3, #24
 8005314:	431a      	orrs	r2, r3
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	689b      	ldr	r3, [r3, #8]
 800531a:	071b      	lsls	r3, r3, #28
 800531c:	4919      	ldr	r1, [pc, #100]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800531e:	4313      	orrs	r3, r2
 8005320:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005324:	4b17      	ldr	r3, [pc, #92]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a16      	ldr	r2, [pc, #88]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800532a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800532e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005330:	f7fc f944 	bl	80015bc <HAL_GetTick>
 8005334:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005336:	e008      	b.n	800534a <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005338:	f7fc f940 	bl	80015bc <HAL_GetTick>
 800533c:	4602      	mov	r2, r0
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	1ad3      	subs	r3, r2, r3
 8005342:	2b64      	cmp	r3, #100	; 0x64
 8005344:	d901      	bls.n	800534a <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005346:	2303      	movs	r3, #3
 8005348:	e0d7      	b.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800534a:	4b0e      	ldr	r3, [pc, #56]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005352:	2b00      	cmp	r3, #0
 8005354:	d0f0      	beq.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005356:	69bb      	ldr	r3, [r7, #24]
 8005358:	2b01      	cmp	r3, #1
 800535a:	f040 80cd 	bne.w	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800535e:	4b09      	ldr	r3, [pc, #36]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a08      	ldr	r2, [pc, #32]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005364:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005368:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800536a:	f7fc f927 	bl	80015bc <HAL_GetTick>
 800536e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005370:	e00a      	b.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005372:	f7fc f923 	bl	80015bc <HAL_GetTick>
 8005376:	4602      	mov	r2, r0
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	1ad3      	subs	r3, r2, r3
 800537c:	2b64      	cmp	r3, #100	; 0x64
 800537e:	d903      	bls.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005380:	2303      	movs	r3, #3
 8005382:	e0ba      	b.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8005384:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005388:	4b5e      	ldr	r3, [pc, #376]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005390:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005394:	d0ed      	beq.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d003      	beq.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d009      	beq.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d02e      	beq.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d12a      	bne.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80053be:	4b51      	ldr	r3, [pc, #324]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80053c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053c4:	0c1b      	lsrs	r3, r3, #16
 80053c6:	f003 0303 	and.w	r3, r3, #3
 80053ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80053cc:	4b4d      	ldr	r3, [pc, #308]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80053ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053d2:	0f1b      	lsrs	r3, r3, #28
 80053d4:	f003 0307 	and.w	r3, r3, #7
 80053d8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	695b      	ldr	r3, [r3, #20]
 80053de:	019a      	lsls	r2, r3, #6
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	041b      	lsls	r3, r3, #16
 80053e4:	431a      	orrs	r2, r3
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	699b      	ldr	r3, [r3, #24]
 80053ea:	061b      	lsls	r3, r3, #24
 80053ec:	431a      	orrs	r2, r3
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	071b      	lsls	r3, r3, #28
 80053f2:	4944      	ldr	r1, [pc, #272]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80053f4:	4313      	orrs	r3, r2
 80053f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80053fa:	4b42      	ldr	r3, [pc, #264]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80053fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005400:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005408:	3b01      	subs	r3, #1
 800540a:	021b      	lsls	r3, r3, #8
 800540c:	493d      	ldr	r1, [pc, #244]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800540e:	4313      	orrs	r3, r2
 8005410:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800541c:	2b00      	cmp	r3, #0
 800541e:	d022      	beq.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005424:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005428:	d11d      	bne.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800542a:	4b36      	ldr	r3, [pc, #216]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800542c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005430:	0e1b      	lsrs	r3, r3, #24
 8005432:	f003 030f 	and.w	r3, r3, #15
 8005436:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005438:	4b32      	ldr	r3, [pc, #200]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800543a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800543e:	0f1b      	lsrs	r3, r3, #28
 8005440:	f003 0307 	and.w	r3, r3, #7
 8005444:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	695b      	ldr	r3, [r3, #20]
 800544a:	019a      	lsls	r2, r3, #6
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6a1b      	ldr	r3, [r3, #32]
 8005450:	041b      	lsls	r3, r3, #16
 8005452:	431a      	orrs	r2, r3
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	061b      	lsls	r3, r3, #24
 8005458:	431a      	orrs	r2, r3
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	071b      	lsls	r3, r3, #28
 800545e:	4929      	ldr	r1, [pc, #164]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005460:	4313      	orrs	r3, r2
 8005462:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f003 0308 	and.w	r3, r3, #8
 800546e:	2b00      	cmp	r3, #0
 8005470:	d028      	beq.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005472:	4b24      	ldr	r3, [pc, #144]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005474:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005478:	0e1b      	lsrs	r3, r3, #24
 800547a:	f003 030f 	and.w	r3, r3, #15
 800547e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005480:	4b20      	ldr	r3, [pc, #128]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005482:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005486:	0c1b      	lsrs	r3, r3, #16
 8005488:	f003 0303 	and.w	r3, r3, #3
 800548c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	695b      	ldr	r3, [r3, #20]
 8005492:	019a      	lsls	r2, r3, #6
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	041b      	lsls	r3, r3, #16
 8005498:	431a      	orrs	r2, r3
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	061b      	lsls	r3, r3, #24
 800549e:	431a      	orrs	r2, r3
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	69db      	ldr	r3, [r3, #28]
 80054a4:	071b      	lsls	r3, r3, #28
 80054a6:	4917      	ldr	r1, [pc, #92]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80054a8:	4313      	orrs	r3, r2
 80054aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80054ae:	4b15      	ldr	r3, [pc, #84]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80054b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054b4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054bc:	4911      	ldr	r1, [pc, #68]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80054be:	4313      	orrs	r3, r2
 80054c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80054c4:	4b0f      	ldr	r3, [pc, #60]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a0e      	ldr	r2, [pc, #56]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80054ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054d0:	f7fc f874 	bl	80015bc <HAL_GetTick>
 80054d4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80054d6:	e008      	b.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80054d8:	f7fc f870 	bl	80015bc <HAL_GetTick>
 80054dc:	4602      	mov	r2, r0
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	1ad3      	subs	r3, r2, r3
 80054e2:	2b64      	cmp	r3, #100	; 0x64
 80054e4:	d901      	bls.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80054e6:	2303      	movs	r3, #3
 80054e8:	e007      	b.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80054ea:	4b06      	ldr	r3, [pc, #24]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80054f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054f6:	d1ef      	bne.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 80054f8:	2300      	movs	r3, #0
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3720      	adds	r7, #32
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}
 8005502:	bf00      	nop
 8005504:	40023800 	.word	0x40023800

08005508 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b082      	sub	sp, #8
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d101      	bne.n	800551a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8005516:	2301      	movs	r3, #1
 8005518:	e022      	b.n	8005560 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005520:	b2db      	uxtb	r3, r3
 8005522:	2b00      	cmp	r3, #0
 8005524:	d105      	bne.n	8005532 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2200      	movs	r2, #0
 800552a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	f7fb fdad 	bl	800108c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2203      	movs	r2, #3
 8005536:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f000 f814 	bl	8005568 <HAL_SD_InitCard>
 8005540:	4603      	mov	r3, r0
 8005542:	2b00      	cmp	r3, #0
 8005544:	d001      	beq.n	800554a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8005546:	2301      	movs	r3, #1
 8005548:	e00a      	b.n	8005560 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2200      	movs	r2, #0
 800554e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2200      	movs	r2, #0
 8005554:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2201      	movs	r2, #1
 800555a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800555e:	2300      	movs	r3, #0
}
 8005560:	4618      	mov	r0, r3
 8005562:	3708      	adds	r7, #8
 8005564:	46bd      	mov	sp, r7
 8005566:	bd80      	pop	{r7, pc}

08005568 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005568:	b5b0      	push	{r4, r5, r7, lr}
 800556a:	b08e      	sub	sp, #56	; 0x38
 800556c:	af04      	add	r7, sp, #16
 800556e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8005570:	2300      	movs	r3, #0
 8005572:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8005574:	2300      	movs	r3, #0
 8005576:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8005578:	2300      	movs	r3, #0
 800557a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800557c:	2300      	movs	r3, #0
 800557e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8005580:	2300      	movs	r3, #0
 8005582:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8005584:	2376      	movs	r3, #118	; 0x76
 8005586:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681d      	ldr	r5, [r3, #0]
 800558c:	466c      	mov	r4, sp
 800558e:	f107 0314 	add.w	r3, r7, #20
 8005592:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005596:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800559a:	f107 0308 	add.w	r3, r7, #8
 800559e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80055a0:	4628      	mov	r0, r5
 80055a2:	f002 fcf5 	bl	8007f90 <SDMMC_Init>
 80055a6:	4603      	mov	r3, r0
 80055a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80055ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d001      	beq.n	80055b8 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80055b4:	2301      	movs	r3, #1
 80055b6:	e03b      	b.n	8005630 <HAL_SD_InitCard+0xc8>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	685a      	ldr	r2, [r3, #4]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80055c6:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4618      	mov	r0, r3
 80055ce:	f002 fd29 	bl	8008024 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	685a      	ldr	r2, [r3, #4]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80055e0:	605a      	str	r2, [r3, #4]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f001 fb62 	bl	8006cac <SD_PowerON>
 80055e8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80055ea:	6a3b      	ldr	r3, [r7, #32]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d00b      	beq.n	8005608 <HAL_SD_InitCard+0xa0>
  {
    hsd->State = HAL_SD_STATE_READY;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2201      	movs	r2, #1
 80055f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055fc:	6a3b      	ldr	r3, [r7, #32]
 80055fe:	431a      	orrs	r2, r3
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005604:	2301      	movs	r3, #1
 8005606:	e013      	b.n	8005630 <HAL_SD_InitCard+0xc8>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8005608:	6878      	ldr	r0, [r7, #4]
 800560a:	f001 fa81 	bl	8006b10 <SD_InitCard>
 800560e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005610:	6a3b      	ldr	r3, [r7, #32]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d00b      	beq.n	800562e <HAL_SD_InitCard+0xc6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2201      	movs	r2, #1
 800561a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005622:	6a3b      	ldr	r3, [r7, #32]
 8005624:	431a      	orrs	r2, r3
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800562a:	2301      	movs	r3, #1
 800562c:	e000      	b.n	8005630 <HAL_SD_InitCard+0xc8>
  }

  return HAL_OK;
 800562e:	2300      	movs	r3, #0
}
 8005630:	4618      	mov	r0, r3
 8005632:	3728      	adds	r7, #40	; 0x28
 8005634:	46bd      	mov	sp, r7
 8005636:	bdb0      	pop	{r4, r5, r7, pc}

08005638 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b092      	sub	sp, #72	; 0x48
 800563c:	af00      	add	r7, sp, #0
 800563e:	60f8      	str	r0, [r7, #12]
 8005640:	60b9      	str	r1, [r7, #8]
 8005642:	607a      	str	r2, [r7, #4]
 8005644:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005646:	f7fb ffb9 	bl	80015bc <HAL_GetTick>
 800564a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d107      	bne.n	800566a <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800565e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005666:	2301      	movs	r3, #1
 8005668:	e1d7      	b.n	8005a1a <HAL_SD_ReadBlocks+0x3e2>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005670:	b2db      	uxtb	r3, r3
 8005672:	2b01      	cmp	r3, #1
 8005674:	f040 81ca 	bne.w	8005a0c <HAL_SD_ReadBlocks+0x3d4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2200      	movs	r2, #0
 800567c:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800567e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	441a      	add	r2, r3
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005688:	429a      	cmp	r2, r3
 800568a:	d907      	bls.n	800569c <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005690:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005698:	2301      	movs	r3, #1
 800569a:	e1be      	b.n	8005a1a <HAL_SD_ReadBlocks+0x3e2>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2203      	movs	r2, #3
 80056a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	2200      	movs	r2, #0
 80056aa:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	d002      	beq.n	80056ba <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 80056b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056b6:	025b      	lsls	r3, r3, #9
 80056b8:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80056c2:	4618      	mov	r0, r3
 80056c4:	f002 fd42 	bl	800814c <SDMMC_CmdBlockLength>
 80056c8:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 80056ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d00f      	beq.n	80056f0 <HAL_SD_ReadBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a9a      	ldr	r2, [pc, #616]	; (8005940 <HAL_SD_ReadBlocks+0x308>)
 80056d6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056de:	431a      	orrs	r2, r3
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2201      	movs	r2, #1
 80056e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80056ec:	2301      	movs	r3, #1
 80056ee:	e194      	b.n	8005a1a <HAL_SD_ReadBlocks+0x3e2>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80056f0:	f04f 33ff 	mov.w	r3, #4294967295
 80056f4:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	025b      	lsls	r3, r3, #9
 80056fa:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80056fc:	2390      	movs	r3, #144	; 0x90
 80056fe:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005700:	2302      	movs	r3, #2
 8005702:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005704:	2300      	movs	r3, #0
 8005706:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8005708:	2301      	movs	r3, #1
 800570a:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f107 0214 	add.w	r2, r7, #20
 8005714:	4611      	mov	r1, r2
 8005716:	4618      	mov	r0, r3
 8005718:	f002 fcec 	bl	80080f4 <SDMMC_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	2b01      	cmp	r3, #1
 8005720:	d90a      	bls.n	8005738 <HAL_SD_ReadBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2202      	movs	r2, #2
 8005726:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800572e:	4618      	mov	r0, r3
 8005730:	f002 fd50 	bl	80081d4 <SDMMC_CmdReadMultiBlock>
 8005734:	6478      	str	r0, [r7, #68]	; 0x44
 8005736:	e009      	b.n	800574c <HAL_SD_ReadBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2201      	movs	r2, #1
 800573c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005744:	4618      	mov	r0, r3
 8005746:	f002 fd23 	bl	8008190 <SDMMC_CmdReadSingleBlock>
 800574a:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800574c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800574e:	2b00      	cmp	r3, #0
 8005750:	d012      	beq.n	8005778 <HAL_SD_ReadBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a7a      	ldr	r2, [pc, #488]	; (8005940 <HAL_SD_ReadBlocks+0x308>)
 8005758:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800575e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005760:	431a      	orrs	r2, r3
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2201      	movs	r2, #1
 800576a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2200      	movs	r2, #0
 8005772:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005774:	2301      	movs	r3, #1
 8005776:	e150      	b.n	8005a1a <HAL_SD_ReadBlocks+0x3e2>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8005778:	69bb      	ldr	r3, [r7, #24]
 800577a:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800577c:	e061      	b.n	8005842 <HAL_SD_ReadBlocks+0x20a>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005784:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005788:	2b00      	cmp	r3, #0
 800578a:	d03c      	beq.n	8005806 <HAL_SD_ReadBlocks+0x1ce>
 800578c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800578e:	2b00      	cmp	r3, #0
 8005790:	d039      	beq.n	8005806 <HAL_SD_ReadBlocks+0x1ce>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8005792:	2300      	movs	r3, #0
 8005794:	643b      	str	r3, [r7, #64]	; 0x40
 8005796:	e033      	b.n	8005800 <HAL_SD_ReadBlocks+0x1c8>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4618      	mov	r0, r3
 800579e:	f002 fc23 	bl	8007fe8 <SDMMC_ReadFIFO>
 80057a2:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 80057a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057a6:	b2da      	uxtb	r2, r3
 80057a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057aa:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80057ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057ae:	3301      	adds	r3, #1
 80057b0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80057b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057b4:	3b01      	subs	r3, #1
 80057b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80057b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057ba:	0a1b      	lsrs	r3, r3, #8
 80057bc:	b2da      	uxtb	r2, r3
 80057be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057c0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80057c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057c4:	3301      	adds	r3, #1
 80057c6:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80057c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057ca:	3b01      	subs	r3, #1
 80057cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80057ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057d0:	0c1b      	lsrs	r3, r3, #16
 80057d2:	b2da      	uxtb	r2, r3
 80057d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057d6:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80057d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057da:	3301      	adds	r3, #1
 80057dc:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80057de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057e0:	3b01      	subs	r3, #1
 80057e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80057e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057e6:	0e1b      	lsrs	r3, r3, #24
 80057e8:	b2da      	uxtb	r2, r3
 80057ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057ec:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80057ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057f0:	3301      	adds	r3, #1
 80057f2:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80057f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057f6:	3b01      	subs	r3, #1
 80057f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 80057fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057fc:	3301      	adds	r3, #1
 80057fe:	643b      	str	r3, [r7, #64]	; 0x40
 8005800:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005802:	2b07      	cmp	r3, #7
 8005804:	d9c8      	bls.n	8005798 <HAL_SD_ReadBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8005806:	f7fb fed9 	bl	80015bc <HAL_GetTick>
 800580a:	4602      	mov	r2, r0
 800580c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800580e:	1ad3      	subs	r3, r2, r3
 8005810:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005812:	429a      	cmp	r2, r3
 8005814:	d902      	bls.n	800581c <HAL_SD_ReadBlocks+0x1e4>
 8005816:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005818:	2b00      	cmp	r3, #0
 800581a:	d112      	bne.n	8005842 <HAL_SD_ReadBlocks+0x20a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a47      	ldr	r2, [pc, #284]	; (8005940 <HAL_SD_ReadBlocks+0x308>)
 8005822:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005828:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2201      	movs	r2, #1
 8005834:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2200      	movs	r2, #0
 800583c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800583e:	2303      	movs	r3, #3
 8005840:	e0eb      	b.n	8005a1a <HAL_SD_ReadBlocks+0x3e2>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005848:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800584c:	2b00      	cmp	r3, #0
 800584e:	d096      	beq.n	800577e <HAL_SD_ReadBlocks+0x146>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005856:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800585a:	2b00      	cmp	r3, #0
 800585c:	d022      	beq.n	80058a4 <HAL_SD_ReadBlocks+0x26c>
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	2b01      	cmp	r3, #1
 8005862:	d91f      	bls.n	80058a4 <HAL_SD_ReadBlocks+0x26c>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005868:	2b03      	cmp	r3, #3
 800586a:	d01b      	beq.n	80058a4 <HAL_SD_ReadBlocks+0x26c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4618      	mov	r0, r3
 8005872:	f002 fd15 	bl	80082a0 <SDMMC_CmdStopTransfer>
 8005876:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8005878:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800587a:	2b00      	cmp	r3, #0
 800587c:	d012      	beq.n	80058a4 <HAL_SD_ReadBlocks+0x26c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a2f      	ldr	r2, [pc, #188]	; (8005940 <HAL_SD_ReadBlocks+0x308>)
 8005884:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800588a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800588c:	431a      	orrs	r2, r3
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2201      	movs	r2, #1
 8005896:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2200      	movs	r2, #0
 800589e:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80058a0:	2301      	movs	r3, #1
 80058a2:	e0ba      	b.n	8005a1a <HAL_SD_ReadBlocks+0x3e2>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058aa:	f003 0308 	and.w	r3, r3, #8
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d012      	beq.n	80058d8 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a22      	ldr	r2, [pc, #136]	; (8005940 <HAL_SD_ReadBlocks+0x308>)
 80058b8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058be:	f043 0208 	orr.w	r2, r3, #8
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2201      	movs	r2, #1
 80058ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2200      	movs	r2, #0
 80058d2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80058d4:	2301      	movs	r3, #1
 80058d6:	e0a0      	b.n	8005a1a <HAL_SD_ReadBlocks+0x3e2>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058de:	f003 0302 	and.w	r3, r3, #2
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d012      	beq.n	800590c <HAL_SD_ReadBlocks+0x2d4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a15      	ldr	r2, [pc, #84]	; (8005940 <HAL_SD_ReadBlocks+0x308>)
 80058ec:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058f2:	f043 0202 	orr.w	r2, r3, #2
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	2201      	movs	r2, #1
 80058fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	2200      	movs	r2, #0
 8005906:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005908:	2301      	movs	r3, #1
 800590a:	e086      	b.n	8005a1a <HAL_SD_ReadBlocks+0x3e2>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005912:	f003 0320 	and.w	r3, r3, #32
 8005916:	2b00      	cmp	r3, #0
 8005918:	d063      	beq.n	80059e2 <HAL_SD_ReadBlocks+0x3aa>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a08      	ldr	r2, [pc, #32]	; (8005940 <HAL_SD_ReadBlocks+0x308>)
 8005920:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005926:	f043 0220 	orr.w	r2, r3, #32
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	2201      	movs	r2, #1
 8005932:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	2200      	movs	r2, #0
 800593a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800593c:	2301      	movs	r3, #1
 800593e:	e06c      	b.n	8005a1a <HAL_SD_ReadBlocks+0x3e2>
 8005940:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4618      	mov	r0, r3
 800594a:	f002 fb4d 	bl	8007fe8 <SDMMC_ReadFIFO>
 800594e:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8005950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005952:	b2da      	uxtb	r2, r3
 8005954:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005956:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800595a:	3301      	adds	r3, #1
 800595c:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800595e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005960:	3b01      	subs	r3, #1
 8005962:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8005964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005966:	0a1b      	lsrs	r3, r3, #8
 8005968:	b2da      	uxtb	r2, r3
 800596a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800596c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800596e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005970:	3301      	adds	r3, #1
 8005972:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8005974:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005976:	3b01      	subs	r3, #1
 8005978:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800597a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800597c:	0c1b      	lsrs	r3, r3, #16
 800597e:	b2da      	uxtb	r2, r3
 8005980:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005982:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005984:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005986:	3301      	adds	r3, #1
 8005988:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800598a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800598c:	3b01      	subs	r3, #1
 800598e:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8005990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005992:	0e1b      	lsrs	r3, r3, #24
 8005994:	b2da      	uxtb	r2, r3
 8005996:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005998:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800599a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800599c:	3301      	adds	r3, #1
 800599e:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80059a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059a2:	3b01      	subs	r3, #1
 80059a4:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80059a6:	f7fb fe09 	bl	80015bc <HAL_GetTick>
 80059aa:	4602      	mov	r2, r0
 80059ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ae:	1ad3      	subs	r3, r2, r3
 80059b0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80059b2:	429a      	cmp	r2, r3
 80059b4:	d902      	bls.n	80059bc <HAL_SD_ReadBlocks+0x384>
 80059b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d112      	bne.n	80059e2 <HAL_SD_ReadBlocks+0x3aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a18      	ldr	r2, [pc, #96]	; (8005a24 <HAL_SD_ReadBlocks+0x3ec>)
 80059c2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059c8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2201      	movs	r2, #1
 80059d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	2200      	movs	r2, #0
 80059dc:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80059de:	2301      	movs	r3, #1
 80059e0:	e01b      	b.n	8005a1a <HAL_SD_ReadBlocks+0x3e2>
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d002      	beq.n	80059f6 <HAL_SD_ReadBlocks+0x3be>
 80059f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d1a6      	bne.n	8005944 <HAL_SD_ReadBlocks+0x30c>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f240 523a 	movw	r2, #1338	; 0x53a
 80059fe:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2201      	movs	r2, #1
 8005a04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8005a08:	2300      	movs	r3, #0
 8005a0a:	e006      	b.n	8005a1a <HAL_SD_ReadBlocks+0x3e2>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a10:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005a18:	2301      	movs	r3, #1
  }
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	3748      	adds	r7, #72	; 0x48
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}
 8005a22:	bf00      	nop
 8005a24:	004005ff 	.word	0x004005ff

08005a28 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b092      	sub	sp, #72	; 0x48
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	60f8      	str	r0, [r7, #12]
 8005a30:	60b9      	str	r1, [r7, #8]
 8005a32:	607a      	str	r2, [r7, #4]
 8005a34:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005a36:	f7fb fdc1 	bl	80015bc <HAL_GetTick>
 8005a3a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d107      	bne.n	8005a5a <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a4e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005a56:	2301      	movs	r3, #1
 8005a58:	e182      	b.n	8005d60 <HAL_SD_WriteBlocks+0x338>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005a60:	b2db      	uxtb	r3, r3
 8005a62:	2b01      	cmp	r3, #1
 8005a64:	f040 8175 	bne.w	8005d52 <HAL_SD_WriteBlocks+0x32a>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005a6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	441a      	add	r2, r3
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a78:	429a      	cmp	r2, r3
 8005a7a:	d907      	bls.n	8005a8c <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a80:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005a88:	2301      	movs	r3, #1
 8005a8a:	e169      	b.n	8005d60 <HAL_SD_WriteBlocks+0x338>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2203      	movs	r2, #3
 8005a90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	d002      	beq.n	8005aaa <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8005aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aa6:	025b      	lsls	r3, r3, #9
 8005aa8:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	f002 fb4a 	bl	800814c <SDMMC_CmdBlockLength>
 8005ab8:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 8005aba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d00f      	beq.n	8005ae0 <HAL_SD_WriteBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a9c      	ldr	r2, [pc, #624]	; (8005d38 <HAL_SD_WriteBlocks+0x310>)
 8005ac6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005acc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ace:	431a      	orrs	r2, r3
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8005adc:	2301      	movs	r3, #1
 8005ade:	e13f      	b.n	8005d60 <HAL_SD_WriteBlocks+0x338>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005ae0:	f04f 33ff 	mov.w	r3, #4294967295
 8005ae4:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	025b      	lsls	r3, r3, #9
 8005aea:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8005aec:	2390      	movs	r3, #144	; 0x90
 8005aee:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8005af0:	2300      	movs	r3, #0
 8005af2:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005af4:	2300      	movs	r3, #0
 8005af6:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8005af8:	2301      	movs	r3, #1
 8005afa:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f107 0218 	add.w	r2, r7, #24
 8005b04:	4611      	mov	r1, r2
 8005b06:	4618      	mov	r0, r3
 8005b08:	f002 faf4 	bl	80080f4 <SDMMC_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	2b01      	cmp	r3, #1
 8005b10:	d90a      	bls.n	8005b28 <HAL_SD_WriteBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2220      	movs	r2, #32
 8005b16:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f002 fb9c 	bl	800825c <SDMMC_CmdWriteMultiBlock>
 8005b24:	6478      	str	r0, [r7, #68]	; 0x44
 8005b26:	e009      	b.n	8005b3c <HAL_SD_WriteBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	2210      	movs	r2, #16
 8005b2c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005b34:	4618      	mov	r0, r3
 8005b36:	f002 fb6f 	bl	8008218 <SDMMC_CmdWriteSingleBlock>
 8005b3a:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8005b3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d012      	beq.n	8005b68 <HAL_SD_WriteBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a7c      	ldr	r2, [pc, #496]	; (8005d38 <HAL_SD_WriteBlocks+0x310>)
 8005b48:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b50:	431a      	orrs	r2, r3
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	2201      	movs	r2, #1
 8005b5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	2200      	movs	r2, #0
 8005b62:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005b64:	2301      	movs	r3, #1
 8005b66:	e0fb      	b.n	8005d60 <HAL_SD_WriteBlocks+0x338>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8005b68:	69fb      	ldr	r3, [r7, #28]
 8005b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005b6c:	e065      	b.n	8005c3a <HAL_SD_WriteBlocks+0x212>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d040      	beq.n	8005bfe <HAL_SD_WriteBlocks+0x1d6>
 8005b7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d03d      	beq.n	8005bfe <HAL_SD_WriteBlocks+0x1d6>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8005b82:	2300      	movs	r3, #0
 8005b84:	643b      	str	r3, [r7, #64]	; 0x40
 8005b86:	e037      	b.n	8005bf8 <HAL_SD_WriteBlocks+0x1d0>
        {
          data = (uint32_t)(*tempbuff);
 8005b88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b8a:	781b      	ldrb	r3, [r3, #0]
 8005b8c:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005b8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b90:	3301      	adds	r3, #1
 8005b92:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005b94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b96:	3b01      	subs	r3, #1
 8005b98:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8005b9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b9c:	781b      	ldrb	r3, [r3, #0]
 8005b9e:	021a      	lsls	r2, r3, #8
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005ba6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ba8:	3301      	adds	r3, #1
 8005baa:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005bac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bae:	3b01      	subs	r3, #1
 8005bb0:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8005bb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bb4:	781b      	ldrb	r3, [r3, #0]
 8005bb6:	041a      	lsls	r2, r3, #16
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005bbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bc0:	3301      	adds	r3, #1
 8005bc2:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005bc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bc6:	3b01      	subs	r3, #1
 8005bc8:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8005bca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bcc:	781b      	ldrb	r3, [r3, #0]
 8005bce:	061a      	lsls	r2, r3, #24
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005bd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bd8:	3301      	adds	r3, #1
 8005bda:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005bdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bde:	3b01      	subs	r3, #1
 8005be0:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f107 0214 	add.w	r2, r7, #20
 8005bea:	4611      	mov	r1, r2
 8005bec:	4618      	mov	r0, r3
 8005bee:	f002 fa08 	bl	8008002 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8005bf2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bf4:	3301      	adds	r3, #1
 8005bf6:	643b      	str	r3, [r7, #64]	; 0x40
 8005bf8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bfa:	2b07      	cmp	r3, #7
 8005bfc:	d9c4      	bls.n	8005b88 <HAL_SD_WriteBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8005bfe:	f7fb fcdd 	bl	80015bc <HAL_GetTick>
 8005c02:	4602      	mov	r2, r0
 8005c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c06:	1ad3      	subs	r3, r2, r3
 8005c08:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005c0a:	429a      	cmp	r2, r3
 8005c0c:	d902      	bls.n	8005c14 <HAL_SD_WriteBlocks+0x1ec>
 8005c0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d112      	bne.n	8005c3a <HAL_SD_WriteBlocks+0x212>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a47      	ldr	r2, [pc, #284]	; (8005d38 <HAL_SD_WriteBlocks+0x310>)
 8005c1a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c22:	431a      	orrs	r2, r3
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2200      	movs	r2, #0
 8005c34:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8005c36:	2303      	movs	r3, #3
 8005c38:	e092      	b.n	8005d60 <HAL_SD_WriteBlocks+0x338>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c40:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d092      	beq.n	8005b6e <HAL_SD_WriteBlocks+0x146>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d022      	beq.n	8005c9c <HAL_SD_WriteBlocks+0x274>
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	d91f      	bls.n	8005c9c <HAL_SD_WriteBlocks+0x274>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c60:	2b03      	cmp	r3, #3
 8005c62:	d01b      	beq.n	8005c9c <HAL_SD_WriteBlocks+0x274>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4618      	mov	r0, r3
 8005c6a:	f002 fb19 	bl	80082a0 <SDMMC_CmdStopTransfer>
 8005c6e:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8005c70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d012      	beq.n	8005c9c <HAL_SD_WriteBlocks+0x274>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a2f      	ldr	r2, [pc, #188]	; (8005d38 <HAL_SD_WriteBlocks+0x310>)
 8005c7c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c84:	431a      	orrs	r2, r3
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2201      	movs	r2, #1
 8005c8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2200      	movs	r2, #0
 8005c96:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8005c98:	2301      	movs	r3, #1
 8005c9a:	e061      	b.n	8005d60 <HAL_SD_WriteBlocks+0x338>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ca2:	f003 0308 	and.w	r3, r3, #8
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d012      	beq.n	8005cd0 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a22      	ldr	r2, [pc, #136]	; (8005d38 <HAL_SD_WriteBlocks+0x310>)
 8005cb0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cb6:	f043 0208 	orr.w	r2, r3, #8
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	e047      	b.n	8005d60 <HAL_SD_WriteBlocks+0x338>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cd6:	f003 0302 	and.w	r3, r3, #2
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d012      	beq.n	8005d04 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a15      	ldr	r2, [pc, #84]	; (8005d38 <HAL_SD_WriteBlocks+0x310>)
 8005ce4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cea:	f043 0202 	orr.w	r2, r3, #2
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2201      	movs	r2, #1
 8005cf6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005d00:	2301      	movs	r3, #1
 8005d02:	e02d      	b.n	8005d60 <HAL_SD_WriteBlocks+0x338>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d0a:	f003 0310 	and.w	r3, r3, #16
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d014      	beq.n	8005d3c <HAL_SD_WriteBlocks+0x314>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a08      	ldr	r2, [pc, #32]	; (8005d38 <HAL_SD_WriteBlocks+0x310>)
 8005d18:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d1e:	f043 0210 	orr.w	r2, r3, #16
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	2201      	movs	r2, #1
 8005d2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	2200      	movs	r2, #0
 8005d32:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005d34:	2301      	movs	r3, #1
 8005d36:	e013      	b.n	8005d60 <HAL_SD_WriteBlocks+0x338>
 8005d38:	004005ff 	.word	0x004005ff
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f240 523a 	movw	r2, #1338	; 0x53a
 8005d44:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	2201      	movs	r2, #1
 8005d4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	e006      	b.n	8005d60 <HAL_SD_WriteBlocks+0x338>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d56:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005d5e:	2301      	movs	r3, #1
  }
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	3748      	adds	r7, #72	; 0x48
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}

08005d68 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b08c      	sub	sp, #48	; 0x30
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	60f8      	str	r0, [r7, #12]
 8005d70:	60b9      	str	r1, [r7, #8]
 8005d72:	607a      	str	r2, [r7, #4]
 8005d74:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d107      	bne.n	8005d90 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d84:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	e0cc      	b.n	8005f2a <HAL_SD_ReadBlocks_DMA+0x1c2>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005d96:	b2db      	uxtb	r3, r3
 8005d98:	2b01      	cmp	r3, #1
 8005d9a:	f040 80c5 	bne.w	8005f28 <HAL_SD_ReadBlocks_DMA+0x1c0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	2200      	movs	r2, #0
 8005da2:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005da4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	441a      	add	r2, r3
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dae:	429a      	cmp	r2, r3
 8005db0:	d907      	bls.n	8005dc2 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005db6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	e0b3      	b.n	8005f2a <HAL_SD_ReadBlocks_DMA+0x1c2>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	2203      	movs	r2, #3
 8005dc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8005de0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005de6:	4a53      	ldr	r2, [pc, #332]	; (8005f34 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8005de8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dee:	4a52      	ldr	r2, [pc, #328]	; (8005f38 <HAL_SD_ReadBlocks_DMA+0x1d0>)
 8005df0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005df6:	2200      	movs	r2, #0
 8005df8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	3380      	adds	r3, #128	; 0x80
 8005e04:	4619      	mov	r1, r3
 8005e06:	68ba      	ldr	r2, [r7, #8]
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	025b      	lsls	r3, r3, #9
 8005e0c:	089b      	lsrs	r3, r3, #2
 8005e0e:	f7fc fb47 	bl	80024a0 <HAL_DMA_Start_IT>
 8005e12:	4603      	mov	r3, r0
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d017      	beq.n	8005e48 <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8005e26:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a43      	ldr	r2, [pc, #268]	; (8005f3c <HAL_SD_ReadBlocks_DMA+0x1d4>)
 8005e2e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e34:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2201      	movs	r2, #1
 8005e40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8005e44:	2301      	movs	r3, #1
 8005e46:	e070      	b.n	8005f2a <HAL_SD_ReadBlocks_DMA+0x1c2>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f042 0208 	orr.w	r2, r2, #8
 8005e56:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e5c:	2b01      	cmp	r3, #1
 8005e5e:	d002      	beq.n	8005e66 <HAL_SD_ReadBlocks_DMA+0xfe>
      {
        add *= 512U;
 8005e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e62:	025b      	lsls	r3, r3, #9
 8005e64:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005e6e:	4618      	mov	r0, r3
 8005e70:	f002 f96c 	bl	800814c <SDMMC_CmdBlockLength>
 8005e74:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 8005e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d00f      	beq.n	8005e9c <HAL_SD_ReadBlocks_DMA+0x134>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a2e      	ldr	r2, [pc, #184]	; (8005f3c <HAL_SD_ReadBlocks_DMA+0x1d4>)
 8005e82:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e8a:	431a      	orrs	r2, r3
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	2201      	movs	r2, #1
 8005e94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 8005e98:	2301      	movs	r3, #1
 8005e9a:	e046      	b.n	8005f2a <HAL_SD_ReadBlocks_DMA+0x1c2>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005e9c:	f04f 33ff 	mov.w	r3, #4294967295
 8005ea0:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	025b      	lsls	r3, r3, #9
 8005ea6:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8005ea8:	2390      	movs	r3, #144	; 0x90
 8005eaa:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005eac:	2302      	movs	r3, #2
 8005eae:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f107 0210 	add.w	r2, r7, #16
 8005ec0:	4611      	mov	r1, r2
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f002 f916 	bl	80080f4 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	2b01      	cmp	r3, #1
 8005ecc:	d90a      	bls.n	8005ee4 <HAL_SD_ReadBlocks_DMA+0x17c>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2282      	movs	r2, #130	; 0x82
 8005ed2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005eda:	4618      	mov	r0, r3
 8005edc:	f002 f97a 	bl	80081d4 <SDMMC_CmdReadMultiBlock>
 8005ee0:	62f8      	str	r0, [r7, #44]	; 0x2c
 8005ee2:	e009      	b.n	8005ef8 <HAL_SD_ReadBlocks_DMA+0x190>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	2281      	movs	r2, #129	; 0x81
 8005ee8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	f002 f94d 	bl	8008190 <SDMMC_CmdReadSingleBlock>
 8005ef6:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8005ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d012      	beq.n	8005f24 <HAL_SD_ReadBlocks_DMA+0x1bc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a0e      	ldr	r2, [pc, #56]	; (8005f3c <HAL_SD_ReadBlocks_DMA+0x1d4>)
 8005f04:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f0c:	431a      	orrs	r2, r3
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	2201      	movs	r2, #1
 8005f16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8005f20:	2301      	movs	r3, #1
 8005f22:	e002      	b.n	8005f2a <HAL_SD_ReadBlocks_DMA+0x1c2>
      }

      return HAL_OK;
 8005f24:	2300      	movs	r3, #0
 8005f26:	e000      	b.n	8005f2a <HAL_SD_ReadBlocks_DMA+0x1c2>
    }
  }
  else
  {
    return HAL_BUSY;
 8005f28:	2302      	movs	r3, #2
  }
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3730      	adds	r7, #48	; 0x30
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}
 8005f32:	bf00      	nop
 8005f34:	0800691f 	.word	0x0800691f
 8005f38:	08006991 	.word	0x08006991
 8005f3c:	004005ff 	.word	0x004005ff

08005f40 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b08c      	sub	sp, #48	; 0x30
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	60f8      	str	r0, [r7, #12]
 8005f48:	60b9      	str	r1, [r7, #8]
 8005f4a:	607a      	str	r2, [r7, #4]
 8005f4c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d107      	bne.n	8005f68 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f5c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005f64:	2301      	movs	r3, #1
 8005f66:	e0cf      	b.n	8006108 <HAL_SD_WriteBlocks_DMA+0x1c8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005f6e:	b2db      	uxtb	r3, r3
 8005f70:	2b01      	cmp	r3, #1
 8005f72:	f040 80c8 	bne.w	8006106 <HAL_SD_WriteBlocks_DMA+0x1c6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005f7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	441a      	add	r2, r3
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f86:	429a      	cmp	r2, r3
 8005f88:	d907      	bls.n	8005f9a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f8e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005f96:	2301      	movs	r3, #1
 8005f98:	e0b6      	b.n	8006108 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2203      	movs	r2, #3
 8005f9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f042 021a 	orr.w	r2, r2, #26
 8005fb8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fbe:	4a54      	ldr	r2, [pc, #336]	; (8006110 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 8005fc0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fc6:	4a53      	ldr	r2, [pc, #332]	; (8006114 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 8005fc8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fce:	2200      	movs	r2, #0
 8005fd0:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fd6:	2b01      	cmp	r3, #1
 8005fd8:	d002      	beq.n	8005fe0 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8005fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fdc:	025b      	lsls	r3, r3, #9
 8005fde:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005fe8:	4618      	mov	r0, r3
 8005fea:	f002 f8af 	bl	800814c <SDMMC_CmdBlockLength>
 8005fee:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d00f      	beq.n	8006016 <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a47      	ldr	r2, [pc, #284]	; (8006118 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8005ffc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006004:	431a      	orrs	r2, r3
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2201      	movs	r2, #1
 800600e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8006012:	2301      	movs	r3, #1
 8006014:	e078      	b.n	8006108 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	2b01      	cmp	r3, #1
 800601a:	d90a      	bls.n	8006032 <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	22a0      	movs	r2, #160	; 0xa0
 8006020:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006028:	4618      	mov	r0, r3
 800602a:	f002 f917 	bl	800825c <SDMMC_CmdWriteMultiBlock>
 800602e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006030:	e009      	b.n	8006046 <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	2290      	movs	r2, #144	; 0x90
 8006036:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800603e:	4618      	mov	r0, r3
 8006040:	f002 f8ea 	bl	8008218 <SDMMC_CmdWriteSingleBlock>
 8006044:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8006046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006048:	2b00      	cmp	r3, #0
 800604a:	d012      	beq.n	8006072 <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a31      	ldr	r2, [pc, #196]	; (8006118 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8006052:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800605a:	431a      	orrs	r2, r3
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	2201      	movs	r2, #1
 8006064:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	2200      	movs	r2, #0
 800606c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800606e:	2301      	movs	r3, #1
 8006070:	e04a      	b.n	8006108 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f042 0208 	orr.w	r2, r2, #8
 8006080:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006086:	68b9      	ldr	r1, [r7, #8]
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	3380      	adds	r3, #128	; 0x80
 800608e:	461a      	mov	r2, r3
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	025b      	lsls	r3, r3, #9
 8006094:	089b      	lsrs	r3, r3, #2
 8006096:	f7fc fa03 	bl	80024a0 <HAL_DMA_Start_IT>
 800609a:	4603      	mov	r3, r0
 800609c:	2b00      	cmp	r3, #0
 800609e:	d01a      	beq.n	80060d6 <HAL_SD_WriteBlocks_DMA+0x196>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f022 021a 	bic.w	r2, r2, #26
 80060ae:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a18      	ldr	r2, [pc, #96]	; (8006118 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 80060b6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060bc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	2201      	movs	r2, #1
 80060c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	2200      	movs	r2, #0
 80060d0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80060d2:	2301      	movs	r3, #1
 80060d4:	e018      	b.n	8006108 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80060d6:	f04f 33ff 	mov.w	r3, #4294967295
 80060da:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	025b      	lsls	r3, r3, #9
 80060e0:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80060e2:	2390      	movs	r3, #144	; 0x90
 80060e4:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80060e6:	2300      	movs	r3, #0
 80060e8:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80060ea:	2300      	movs	r3, #0
 80060ec:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 80060ee:	2301      	movs	r3, #1
 80060f0:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f107 0210 	add.w	r2, r7, #16
 80060fa:	4611      	mov	r1, r2
 80060fc:	4618      	mov	r0, r3
 80060fe:	f001 fff9 	bl	80080f4 <SDMMC_ConfigData>

      return HAL_OK;
 8006102:	2300      	movs	r3, #0
 8006104:	e000      	b.n	8006108 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }
  }
  else
  {
    return HAL_BUSY;
 8006106:	2302      	movs	r3, #2
  }
}
 8006108:	4618      	mov	r0, r3
 800610a:	3730      	adds	r7, #48	; 0x30
 800610c:	46bd      	mov	sp, r7
 800610e:	bd80      	pop	{r7, pc}
 8006110:	080068f5 	.word	0x080068f5
 8006114:	08006991 	.word	0x08006991
 8006118:	004005ff 	.word	0x004005ff

0800611c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b084      	sub	sp, #16
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006128:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006130:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006134:	2b00      	cmp	r3, #0
 8006136:	d008      	beq.n	800614a <HAL_SD_IRQHandler+0x2e>
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	f003 0308 	and.w	r3, r3, #8
 800613e:	2b00      	cmp	r3, #0
 8006140:	d003      	beq.n	800614a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f000 ffc8 	bl	80070d8 <SD_Read_IT>
 8006148:	e153      	b.n	80063f2 <HAL_SD_IRQHandler+0x2d6>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006150:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006154:	2b00      	cmp	r3, #0
 8006156:	f000 808d 	beq.w	8006274 <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006162:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681a      	ldr	r2, [r3, #0]
 800616e:	4ba3      	ldr	r3, [pc, #652]	; (80063fc <HAL_SD_IRQHandler+0x2e0>)
 8006170:	400b      	ands	r3, r1
 8006172:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f022 0201 	bic.w	r2, r2, #1
 8006182:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f003 0308 	and.w	r3, r3, #8
 800618a:	2b00      	cmp	r3, #0
 800618c:	d039      	beq.n	8006202 <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	f003 0302 	and.w	r3, r3, #2
 8006194:	2b00      	cmp	r3, #0
 8006196:	d104      	bne.n	80061a2 <HAL_SD_IRQHandler+0x86>
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	f003 0320 	and.w	r3, r3, #32
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d011      	beq.n	80061c6 <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4618      	mov	r0, r3
 80061a8:	f002 f87a 	bl	80082a0 <SDMMC_CmdStopTransfer>
 80061ac:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d008      	beq.n	80061c6 <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	431a      	orrs	r2, r3
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	f000 f921 	bl	8006408 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f240 523a 	movw	r2, #1338	; 0x53a
 80061ce:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2201      	movs	r2, #1
 80061d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2200      	movs	r2, #0
 80061dc:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	f003 0301 	and.w	r3, r3, #1
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d104      	bne.n	80061f2 <HAL_SD_IRQHandler+0xd6>
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f003 0302 	and.w	r3, r3, #2
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d003      	beq.n	80061fa <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f003 fffc 	bl	800a1f0 <HAL_SD_RxCpltCallback>
 80061f8:	e0fb      	b.n	80063f2 <HAL_SD_IRQHandler+0x2d6>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	f003 ffee 	bl	800a1dc <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006200:	e0f7      	b.n	80063f2 <HAL_SD_IRQHandler+0x2d6>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006208:	2b00      	cmp	r3, #0
 800620a:	f000 80f2 	beq.w	80063f2 <HAL_SD_IRQHandler+0x2d6>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	f003 0320 	and.w	r3, r3, #32
 8006214:	2b00      	cmp	r3, #0
 8006216:	d011      	beq.n	800623c <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4618      	mov	r0, r3
 800621e:	f002 f83f 	bl	80082a0 <SDMMC_CmdStopTransfer>
 8006222:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d008      	beq.n	800623c <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	431a      	orrs	r2, r3
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f000 f8e6 	bl	8006408 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	f003 0301 	and.w	r3, r3, #1
 8006242:	2b00      	cmp	r3, #0
 8006244:	f040 80d5 	bne.w	80063f2 <HAL_SD_IRQHandler+0x2d6>
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	f003 0302 	and.w	r3, r3, #2
 800624e:	2b00      	cmp	r3, #0
 8006250:	f040 80cf 	bne.w	80063f2 <HAL_SD_IRQHandler+0x2d6>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f022 0208 	bic.w	r2, r2, #8
 8006262:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2201      	movs	r2, #1
 8006268:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800626c:	6878      	ldr	r0, [r7, #4]
 800626e:	f003 ffb5 	bl	800a1dc <HAL_SD_TxCpltCallback>
}
 8006272:	e0be      	b.n	80063f2 <HAL_SD_IRQHandler+0x2d6>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800627a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800627e:	2b00      	cmp	r3, #0
 8006280:	d008      	beq.n	8006294 <HAL_SD_IRQHandler+0x178>
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	f003 0308 	and.w	r3, r3, #8
 8006288:	2b00      	cmp	r3, #0
 800628a:	d003      	beq.n	8006294 <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f000 ff74 	bl	800717a <SD_Write_IT>
 8006292:	e0ae      	b.n	80063f2 <HAL_SD_IRQHandler+0x2d6>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800629a:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800629e:	2b00      	cmp	r3, #0
 80062a0:	f000 80a7 	beq.w	80063f2 <HAL_SD_IRQHandler+0x2d6>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062aa:	f003 0302 	and.w	r3, r3, #2
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d005      	beq.n	80062be <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062b6:	f043 0202 	orr.w	r2, r3, #2
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062c4:	f003 0308 	and.w	r3, r3, #8
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d005      	beq.n	80062d8 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062d0:	f043 0208 	orr.w	r2, r3, #8
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062de:	f003 0320 	and.w	r3, r3, #32
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d005      	beq.n	80062f2 <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ea:	f043 0220 	orr.w	r2, r3, #32
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062f8:	f003 0310 	and.w	r3, r3, #16
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d005      	beq.n	800630c <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006304:	f043 0210 	orr.w	r2, r3, #16
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f240 523a 	movw	r2, #1338	; 0x53a
 8006314:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8006324:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4618      	mov	r0, r3
 800632c:	f001 ffb8 	bl	80082a0 <SDMMC_CmdStopTransfer>
 8006330:	4602      	mov	r2, r0
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006336:	431a      	orrs	r2, r3
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	f003 0308 	and.w	r3, r3, #8
 8006342:	2b00      	cmp	r3, #0
 8006344:	d00a      	beq.n	800635c <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2201      	movs	r2, #1
 800634a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2200      	movs	r2, #0
 8006352:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f000 f857 	bl	8006408 <HAL_SD_ErrorCallback>
}
 800635a:	e04a      	b.n	80063f2 <HAL_SD_IRQHandler+0x2d6>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006362:	2b00      	cmp	r3, #0
 8006364:	d045      	beq.n	80063f2 <HAL_SD_IRQHandler+0x2d6>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	f003 0310 	and.w	r3, r3, #16
 800636c:	2b00      	cmp	r3, #0
 800636e:	d104      	bne.n	800637a <HAL_SD_IRQHandler+0x25e>
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	f003 0320 	and.w	r3, r3, #32
 8006376:	2b00      	cmp	r3, #0
 8006378:	d011      	beq.n	800639e <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800637e:	4a20      	ldr	r2, [pc, #128]	; (8006400 <HAL_SD_IRQHandler+0x2e4>)
 8006380:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006386:	4618      	mov	r0, r3
 8006388:	f7fc f8ea 	bl	8002560 <HAL_DMA_Abort_IT>
 800638c:	4603      	mov	r3, r0
 800638e:	2b00      	cmp	r3, #0
 8006390:	d02f      	beq.n	80063f2 <HAL_SD_IRQHandler+0x2d6>
          SD_DMATxAbort(hsd->hdmatx);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006396:	4618      	mov	r0, r3
 8006398:	f000 fb4c 	bl	8006a34 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800639c:	e029      	b.n	80063f2 <HAL_SD_IRQHandler+0x2d6>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	f003 0301 	and.w	r3, r3, #1
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d104      	bne.n	80063b2 <HAL_SD_IRQHandler+0x296>
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	f003 0302 	and.w	r3, r3, #2
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d011      	beq.n	80063d6 <HAL_SD_IRQHandler+0x2ba>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063b6:	4a13      	ldr	r2, [pc, #76]	; (8006404 <HAL_SD_IRQHandler+0x2e8>)
 80063b8:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063be:	4618      	mov	r0, r3
 80063c0:	f7fc f8ce 	bl	8002560 <HAL_DMA_Abort_IT>
 80063c4:	4603      	mov	r3, r0
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d013      	beq.n	80063f2 <HAL_SD_IRQHandler+0x2d6>
          SD_DMARxAbort(hsd->hdmarx);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ce:	4618      	mov	r0, r3
 80063d0:	f000 fb67 	bl	8006aa2 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80063d4:	e00d      	b.n	80063f2 <HAL_SD_IRQHandler+0x2d6>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2200      	movs	r2, #0
 80063da:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2201      	movs	r2, #1
 80063e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2200      	movs	r2, #0
 80063e8:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f003 feec 	bl	800a1c8 <HAL_SD_AbortCallback>
}
 80063f0:	e7ff      	b.n	80063f2 <HAL_SD_IRQHandler+0x2d6>
 80063f2:	bf00      	nop
 80063f4:	3710      	adds	r7, #16
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}
 80063fa:	bf00      	nop
 80063fc:	ffff3ec5 	.word	0xffff3ec5
 8006400:	08006a35 	.word	0x08006a35
 8006404:	08006aa3 	.word	0x08006aa3

08006408 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8006408:	b480      	push	{r7}
 800640a:	b083      	sub	sp, #12
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8006410:	bf00      	nop
 8006412:	370c      	adds	r7, #12
 8006414:	46bd      	mov	sp, r7
 8006416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641a:	4770      	bx	lr

0800641c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800641c:	b480      	push	{r7}
 800641e:	b083      	sub	sp, #12
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
 8006424:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800642a:	0f9b      	lsrs	r3, r3, #30
 800642c:	b2da      	uxtb	r2, r3
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006436:	0e9b      	lsrs	r3, r3, #26
 8006438:	b2db      	uxtb	r3, r3
 800643a:	f003 030f 	and.w	r3, r3, #15
 800643e:	b2da      	uxtb	r2, r3
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006448:	0e1b      	lsrs	r3, r3, #24
 800644a:	b2db      	uxtb	r3, r3
 800644c:	f003 0303 	and.w	r3, r3, #3
 8006450:	b2da      	uxtb	r2, r3
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800645a:	0c1b      	lsrs	r3, r3, #16
 800645c:	b2da      	uxtb	r2, r3
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006466:	0a1b      	lsrs	r3, r3, #8
 8006468:	b2da      	uxtb	r2, r3
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006472:	b2da      	uxtb	r2, r3
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800647c:	0d1b      	lsrs	r3, r3, #20
 800647e:	b29a      	uxth	r2, r3
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006488:	0c1b      	lsrs	r3, r3, #16
 800648a:	b2db      	uxtb	r3, r3
 800648c:	f003 030f 	and.w	r3, r3, #15
 8006490:	b2da      	uxtb	r2, r3
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800649a:	0bdb      	lsrs	r3, r3, #15
 800649c:	b2db      	uxtb	r3, r3
 800649e:	f003 0301 	and.w	r3, r3, #1
 80064a2:	b2da      	uxtb	r2, r3
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80064ac:	0b9b      	lsrs	r3, r3, #14
 80064ae:	b2db      	uxtb	r3, r3
 80064b0:	f003 0301 	and.w	r3, r3, #1
 80064b4:	b2da      	uxtb	r2, r3
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80064be:	0b5b      	lsrs	r3, r3, #13
 80064c0:	b2db      	uxtb	r3, r3
 80064c2:	f003 0301 	and.w	r3, r3, #1
 80064c6:	b2da      	uxtb	r2, r3
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80064d0:	0b1b      	lsrs	r3, r3, #12
 80064d2:	b2db      	uxtb	r3, r3
 80064d4:	f003 0301 	and.w	r3, r3, #1
 80064d8:	b2da      	uxtb	r2, r3
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	2200      	movs	r2, #0
 80064e2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d163      	bne.n	80065b4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80064f0:	009a      	lsls	r2, r3, #2
 80064f2:	f640 73fc 	movw	r3, #4092	; 0xffc
 80064f6:	4013      	ands	r3, r2
 80064f8:	687a      	ldr	r2, [r7, #4]
 80064fa:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80064fc:	0f92      	lsrs	r2, r2, #30
 80064fe:	431a      	orrs	r2, r3
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006508:	0edb      	lsrs	r3, r3, #27
 800650a:	b2db      	uxtb	r3, r3
 800650c:	f003 0307 	and.w	r3, r3, #7
 8006510:	b2da      	uxtb	r2, r3
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800651a:	0e1b      	lsrs	r3, r3, #24
 800651c:	b2db      	uxtb	r3, r3
 800651e:	f003 0307 	and.w	r3, r3, #7
 8006522:	b2da      	uxtb	r2, r3
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800652c:	0d5b      	lsrs	r3, r3, #21
 800652e:	b2db      	uxtb	r3, r3
 8006530:	f003 0307 	and.w	r3, r3, #7
 8006534:	b2da      	uxtb	r2, r3
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800653e:	0c9b      	lsrs	r3, r3, #18
 8006540:	b2db      	uxtb	r3, r3
 8006542:	f003 0307 	and.w	r3, r3, #7
 8006546:	b2da      	uxtb	r2, r3
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006550:	0bdb      	lsrs	r3, r3, #15
 8006552:	b2db      	uxtb	r3, r3
 8006554:	f003 0307 	and.w	r3, r3, #7
 8006558:	b2da      	uxtb	r2, r3
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	691b      	ldr	r3, [r3, #16]
 8006562:	1c5a      	adds	r2, r3, #1
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	7e1b      	ldrb	r3, [r3, #24]
 800656c:	b2db      	uxtb	r3, r3
 800656e:	f003 0307 	and.w	r3, r3, #7
 8006572:	3302      	adds	r3, #2
 8006574:	2201      	movs	r2, #1
 8006576:	fa02 f303 	lsl.w	r3, r2, r3
 800657a:	687a      	ldr	r2, [r7, #4]
 800657c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800657e:	fb02 f203 	mul.w	r2, r2, r3
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	7a1b      	ldrb	r3, [r3, #8]
 800658a:	b2db      	uxtb	r3, r3
 800658c:	f003 030f 	and.w	r3, r3, #15
 8006590:	2201      	movs	r2, #1
 8006592:	409a      	lsls	r2, r3
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800659c:	687a      	ldr	r2, [r7, #4]
 800659e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80065a0:	0a52      	lsrs	r2, r2, #9
 80065a2:	fb02 f203 	mul.w	r2, r2, r3
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80065b0:	661a      	str	r2, [r3, #96]	; 0x60
 80065b2:	e031      	b.n	8006618 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065b8:	2b01      	cmp	r3, #1
 80065ba:	d11d      	bne.n	80065f8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80065c0:	041b      	lsls	r3, r3, #16
 80065c2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065ca:	0c1b      	lsrs	r3, r3, #16
 80065cc:	431a      	orrs	r2, r3
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	691b      	ldr	r3, [r3, #16]
 80065d6:	3301      	adds	r3, #1
 80065d8:	029a      	lsls	r2, r3, #10
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80065ec:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	661a      	str	r2, [r3, #96]	; 0x60
 80065f6:	e00f      	b.n	8006618 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4a58      	ldr	r2, [pc, #352]	; (8006760 <HAL_SD_GetCardCSD+0x344>)
 80065fe:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006604:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2201      	movs	r2, #1
 8006610:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006614:	2301      	movs	r3, #1
 8006616:	e09d      	b.n	8006754 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800661c:	0b9b      	lsrs	r3, r3, #14
 800661e:	b2db      	uxtb	r3, r3
 8006620:	f003 0301 	and.w	r3, r3, #1
 8006624:	b2da      	uxtb	r2, r3
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800662e:	09db      	lsrs	r3, r3, #7
 8006630:	b2db      	uxtb	r3, r3
 8006632:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006636:	b2da      	uxtb	r2, r3
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006640:	b2db      	uxtb	r3, r3
 8006642:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006646:	b2da      	uxtb	r2, r3
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006650:	0fdb      	lsrs	r3, r3, #31
 8006652:	b2da      	uxtb	r2, r3
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800665c:	0f5b      	lsrs	r3, r3, #29
 800665e:	b2db      	uxtb	r3, r3
 8006660:	f003 0303 	and.w	r3, r3, #3
 8006664:	b2da      	uxtb	r2, r3
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800666e:	0e9b      	lsrs	r3, r3, #26
 8006670:	b2db      	uxtb	r3, r3
 8006672:	f003 0307 	and.w	r3, r3, #7
 8006676:	b2da      	uxtb	r2, r3
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006680:	0d9b      	lsrs	r3, r3, #22
 8006682:	b2db      	uxtb	r3, r3
 8006684:	f003 030f 	and.w	r3, r3, #15
 8006688:	b2da      	uxtb	r2, r3
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006692:	0d5b      	lsrs	r3, r3, #21
 8006694:	b2db      	uxtb	r3, r3
 8006696:	f003 0301 	and.w	r3, r3, #1
 800669a:	b2da      	uxtb	r2, r3
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	2200      	movs	r2, #0
 80066a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066ae:	0c1b      	lsrs	r3, r3, #16
 80066b0:	b2db      	uxtb	r3, r3
 80066b2:	f003 0301 	and.w	r3, r3, #1
 80066b6:	b2da      	uxtb	r2, r3
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066c2:	0bdb      	lsrs	r3, r3, #15
 80066c4:	b2db      	uxtb	r3, r3
 80066c6:	f003 0301 	and.w	r3, r3, #1
 80066ca:	b2da      	uxtb	r2, r3
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066d6:	0b9b      	lsrs	r3, r3, #14
 80066d8:	b2db      	uxtb	r3, r3
 80066da:	f003 0301 	and.w	r3, r3, #1
 80066de:	b2da      	uxtb	r2, r3
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066ea:	0b5b      	lsrs	r3, r3, #13
 80066ec:	b2db      	uxtb	r3, r3
 80066ee:	f003 0301 	and.w	r3, r3, #1
 80066f2:	b2da      	uxtb	r2, r3
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066fe:	0b1b      	lsrs	r3, r3, #12
 8006700:	b2db      	uxtb	r3, r3
 8006702:	f003 0301 	and.w	r3, r3, #1
 8006706:	b2da      	uxtb	r2, r3
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006712:	0a9b      	lsrs	r3, r3, #10
 8006714:	b2db      	uxtb	r3, r3
 8006716:	f003 0303 	and.w	r3, r3, #3
 800671a:	b2da      	uxtb	r2, r3
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006726:	0a1b      	lsrs	r3, r3, #8
 8006728:	b2db      	uxtb	r3, r3
 800672a:	f003 0303 	and.w	r3, r3, #3
 800672e:	b2da      	uxtb	r2, r3
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800673a:	085b      	lsrs	r3, r3, #1
 800673c:	b2db      	uxtb	r3, r3
 800673e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006742:	b2da      	uxtb	r2, r3
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	2201      	movs	r2, #1
 800674e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8006752:	2300      	movs	r3, #0
}
 8006754:	4618      	mov	r0, r3
 8006756:	370c      	adds	r7, #12
 8006758:	46bd      	mov	sp, r7
 800675a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675e:	4770      	bx	lr
 8006760:	004005ff 	.word	0x004005ff

08006764 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8006764:	b480      	push	{r7}
 8006766:	b083      	sub	sp, #12
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
 800676c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80067ae:	2300      	movs	r3, #0
}
 80067b0:	4618      	mov	r0, r3
 80067b2:	370c      	adds	r7, #12
 80067b4:	46bd      	mov	sp, r7
 80067b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ba:	4770      	bx	lr

080067bc <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80067bc:	b5b0      	push	{r4, r5, r7, lr}
 80067be:	b08e      	sub	sp, #56	; 0x38
 80067c0:	af04      	add	r7, sp, #16
 80067c2:	6078      	str	r0, [r7, #4]
 80067c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2203      	movs	r2, #3
 80067ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067d2:	2b03      	cmp	r3, #3
 80067d4:	d02e      	beq.n	8006834 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067dc:	d106      	bne.n	80067ec <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067e2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	639a      	str	r2, [r3, #56]	; 0x38
 80067ea:	e029      	b.n	8006840 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067f2:	d10a      	bne.n	800680a <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f000 fb0f 	bl	8006e18 <SD_WideBus_Enable>
 80067fa:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006802:	431a      	orrs	r2, r3
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	639a      	str	r2, [r3, #56]	; 0x38
 8006808:	e01a      	b.n	8006840 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d10a      	bne.n	8006826 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f000 fb4c 	bl	8006eae <SD_WideBus_Disable>
 8006816:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800681c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800681e:	431a      	orrs	r2, r3
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	639a      	str	r2, [r3, #56]	; 0x38
 8006824:	e00c      	b.n	8006840 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800682a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	639a      	str	r2, [r3, #56]	; 0x38
 8006832:	e005      	b.n	8006840 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006838:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006844:	2b00      	cmp	r3, #0
 8006846:	d009      	beq.n	800685c <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a18      	ldr	r2, [pc, #96]	; (80068b0 <HAL_SD_ConfigWideBusOperation+0xf4>)
 800684e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2201      	movs	r2, #1
 8006854:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006858:	2301      	movs	r3, #1
 800685a:	e024      	b.n	80068a6 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	689b      	ldr	r3, [r3, #8]
 8006866:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	68db      	ldr	r3, [r3, #12]
 800686c:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	695b      	ldr	r3, [r3, #20]
 8006876:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	699b      	ldr	r3, [r3, #24]
 800687c:	623b      	str	r3, [r7, #32]
    (void)SDMMC_Init(hsd->Instance, Init);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681d      	ldr	r5, [r3, #0]
 8006882:	466c      	mov	r4, sp
 8006884:	f107 0318 	add.w	r3, r7, #24
 8006888:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800688c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006890:	f107 030c 	add.w	r3, r7, #12
 8006894:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006896:	4628      	mov	r0, r5
 8006898:	f001 fb7a 	bl	8007f90 <SDMMC_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2201      	movs	r2, #1
 80068a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80068a4:	2300      	movs	r3, #0
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	3728      	adds	r7, #40	; 0x28
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bdb0      	pop	{r4, r5, r7, pc}
 80068ae:	bf00      	nop
 80068b0:	004005ff 	.word	0x004005ff

080068b4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b086      	sub	sp, #24
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80068bc:	2300      	movs	r3, #0
 80068be:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80068c0:	f107 030c 	add.w	r3, r7, #12
 80068c4:	4619      	mov	r1, r3
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f000 fa7e 	bl	8006dc8 <SD_SendStatus>
 80068cc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d005      	beq.n	80068e0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	431a      	orrs	r2, r3
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	0a5b      	lsrs	r3, r3, #9
 80068e4:	f003 030f 	and.w	r3, r3, #15
 80068e8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80068ea:	693b      	ldr	r3, [r7, #16]
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	3718      	adds	r7, #24
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}

080068f4 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80068f4:	b480      	push	{r7}
 80068f6:	b085      	sub	sp, #20
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006900:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006910:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8006912:	bf00      	nop
 8006914:	3714      	adds	r7, #20
 8006916:	46bd      	mov	sp, r7
 8006918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691c:	4770      	bx	lr

0800691e <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800691e:	b580      	push	{r7, lr}
 8006920:	b084      	sub	sp, #16
 8006922:	af00      	add	r7, sp, #0
 8006924:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800692a:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006930:	2b82      	cmp	r3, #130	; 0x82
 8006932:	d111      	bne.n	8006958 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4618      	mov	r0, r3
 800693a:	f001 fcb1 	bl	80082a0 <SDMMC_CmdStopTransfer>
 800693e:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d008      	beq.n	8006958 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	431a      	orrs	r2, r3
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8006952:	68f8      	ldr	r0, [r7, #12]
 8006954:	f7ff fd58 	bl	8006408 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f022 0208 	bic.w	r2, r2, #8
 8006966:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f240 523a 	movw	r2, #1338	; 0x53a
 8006970:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	2201      	movs	r2, #1
 8006976:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	2200      	movs	r2, #0
 800697e:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8006980:	68f8      	ldr	r0, [r7, #12]
 8006982:	f003 fc35 	bl	800a1f0 <HAL_SD_RxCpltCallback>
#endif
}
 8006986:	bf00      	nop
 8006988:	3710      	adds	r7, #16
 800698a:	46bd      	mov	sp, r7
 800698c:	bd80      	pop	{r7, pc}
	...

08006990 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b086      	sub	sp, #24
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800699c:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f7fb ff8a 	bl	80028b8 <HAL_DMA_GetError>
 80069a4:	4603      	mov	r3, r0
 80069a6:	2b02      	cmp	r3, #2
 80069a8:	d03e      	beq.n	8006a28 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069b0:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069b8:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 80069ba:	693b      	ldr	r3, [r7, #16]
 80069bc:	2b01      	cmp	r3, #1
 80069be:	d002      	beq.n	80069c6 <SD_DMAError+0x36>
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	2b01      	cmp	r3, #1
 80069c4:	d12d      	bne.n	8006a22 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4a19      	ldr	r2, [pc, #100]	; (8006a30 <SD_DMAError+0xa0>)
 80069cc:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80069dc:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80069de:	697b      	ldr	r3, [r7, #20]
 80069e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069e2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 80069ea:	6978      	ldr	r0, [r7, #20]
 80069ec:	f7ff ff62 	bl	80068b4 <HAL_SD_GetCardState>
 80069f0:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	2b06      	cmp	r3, #6
 80069f6:	d002      	beq.n	80069fe <SD_DMAError+0x6e>
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	2b05      	cmp	r3, #5
 80069fc:	d10a      	bne.n	8006a14 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80069fe:	697b      	ldr	r3, [r7, #20]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4618      	mov	r0, r3
 8006a04:	f001 fc4c 	bl	80082a0 <SDMMC_CmdStopTransfer>
 8006a08:	4602      	mov	r2, r0
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a0e:	431a      	orrs	r2, r3
 8006a10:	697b      	ldr	r3, [r7, #20]
 8006a12:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	2201      	movs	r2, #1
 8006a18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8006a22:	6978      	ldr	r0, [r7, #20]
 8006a24:	f7ff fcf0 	bl	8006408 <HAL_SD_ErrorCallback>
#endif
  }
}
 8006a28:	bf00      	nop
 8006a2a:	3718      	adds	r7, #24
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bd80      	pop	{r7, pc}
 8006a30:	004005ff 	.word	0x004005ff

08006a34 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b084      	sub	sp, #16
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a40:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f240 523a 	movw	r2, #1338	; 0x53a
 8006a4a:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8006a4c:	68f8      	ldr	r0, [r7, #12]
 8006a4e:	f7ff ff31 	bl	80068b4 <HAL_SD_GetCardState>
 8006a52:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	2201      	movs	r2, #1
 8006a58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	2b06      	cmp	r3, #6
 8006a66:	d002      	beq.n	8006a6e <SD_DMATxAbort+0x3a>
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	2b05      	cmp	r3, #5
 8006a6c:	d10a      	bne.n	8006a84 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4618      	mov	r0, r3
 8006a74:	f001 fc14 	bl	80082a0 <SDMMC_CmdStopTransfer>
 8006a78:	4602      	mov	r2, r0
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a7e:	431a      	orrs	r2, r3
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d103      	bne.n	8006a94 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8006a8c:	68f8      	ldr	r0, [r7, #12]
 8006a8e:	f003 fb9b 	bl	800a1c8 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8006a92:	e002      	b.n	8006a9a <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8006a94:	68f8      	ldr	r0, [r7, #12]
 8006a96:	f7ff fcb7 	bl	8006408 <HAL_SD_ErrorCallback>
}
 8006a9a:	bf00      	nop
 8006a9c:	3710      	adds	r7, #16
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd80      	pop	{r7, pc}

08006aa2 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8006aa2:	b580      	push	{r7, lr}
 8006aa4:	b084      	sub	sp, #16
 8006aa6:	af00      	add	r7, sp, #0
 8006aa8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aae:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f240 523a 	movw	r2, #1338	; 0x53a
 8006ab8:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8006aba:	68f8      	ldr	r0, [r7, #12]
 8006abc:	f7ff fefa 	bl	80068b4 <HAL_SD_GetCardState>
 8006ac0:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	2201      	movs	r2, #1
 8006ac6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	2200      	movs	r2, #0
 8006ace:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	2b06      	cmp	r3, #6
 8006ad4:	d002      	beq.n	8006adc <SD_DMARxAbort+0x3a>
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	2b05      	cmp	r3, #5
 8006ada:	d10a      	bne.n	8006af2 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	f001 fbdd 	bl	80082a0 <SDMMC_CmdStopTransfer>
 8006ae6:	4602      	mov	r2, r0
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aec:	431a      	orrs	r2, r3
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d103      	bne.n	8006b02 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8006afa:	68f8      	ldr	r0, [r7, #12]
 8006afc:	f003 fb64 	bl	800a1c8 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8006b00:	e002      	b.n	8006b08 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8006b02:	68f8      	ldr	r0, [r7, #12]
 8006b04:	f7ff fc80 	bl	8006408 <HAL_SD_ErrorCallback>
}
 8006b08:	bf00      	nop
 8006b0a:	3710      	adds	r7, #16
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	bd80      	pop	{r7, pc}

08006b10 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006b10:	b5b0      	push	{r4, r5, r7, lr}
 8006b12:	b094      	sub	sp, #80	; 0x50
 8006b14:	af04      	add	r7, sp, #16
 8006b16:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8006b18:	2301      	movs	r3, #1
 8006b1a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4618      	mov	r0, r3
 8006b22:	f001 fa8e 	bl	8008042 <SDMMC_GetPowerState>
 8006b26:	4603      	mov	r3, r0
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d102      	bne.n	8006b32 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006b2c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006b30:	e0b7      	b.n	8006ca2 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b36:	2b03      	cmp	r3, #3
 8006b38:	d02f      	beq.n	8006b9a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4618      	mov	r0, r3
 8006b40:	f001 fcb9 	bl	80084b6 <SDMMC_CmdSendCID>
 8006b44:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006b46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d001      	beq.n	8006b50 <SD_InitCard+0x40>
    {
      return errorstate;
 8006b4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b4e:	e0a8      	b.n	8006ca2 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	2100      	movs	r1, #0
 8006b56:	4618      	mov	r0, r3
 8006b58:	f001 fab9 	bl	80080ce <SDMMC_GetResponse>
 8006b5c:	4602      	mov	r2, r0
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	2104      	movs	r1, #4
 8006b68:	4618      	mov	r0, r3
 8006b6a:	f001 fab0 	bl	80080ce <SDMMC_GetResponse>
 8006b6e:	4602      	mov	r2, r0
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	2108      	movs	r1, #8
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	f001 faa7 	bl	80080ce <SDMMC_GetResponse>
 8006b80:	4602      	mov	r2, r0
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	210c      	movs	r1, #12
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	f001 fa9e 	bl	80080ce <SDMMC_GetResponse>
 8006b92:	4602      	mov	r2, r0
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b9e:	2b03      	cmp	r3, #3
 8006ba0:	d00d      	beq.n	8006bbe <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f107 020e 	add.w	r2, r7, #14
 8006baa:	4611      	mov	r1, r2
 8006bac:	4618      	mov	r0, r3
 8006bae:	f001 fcbf 	bl	8008530 <SDMMC_CmdSetRelAdd>
 8006bb2:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006bb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d001      	beq.n	8006bbe <SD_InitCard+0xae>
    {
      return errorstate;
 8006bba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bbc:	e071      	b.n	8006ca2 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bc2:	2b03      	cmp	r3, #3
 8006bc4:	d036      	beq.n	8006c34 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8006bc6:	89fb      	ldrh	r3, [r7, #14]
 8006bc8:	461a      	mov	r2, r3
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681a      	ldr	r2, [r3, #0]
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bd6:	041b      	lsls	r3, r3, #16
 8006bd8:	4619      	mov	r1, r3
 8006bda:	4610      	mov	r0, r2
 8006bdc:	f001 fc89 	bl	80084f2 <SDMMC_CmdSendCSD>
 8006be0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006be2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d001      	beq.n	8006bec <SD_InitCard+0xdc>
    {
      return errorstate;
 8006be8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bea:	e05a      	b.n	8006ca2 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	2100      	movs	r1, #0
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	f001 fa6b 	bl	80080ce <SDMMC_GetResponse>
 8006bf8:	4602      	mov	r2, r0
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	2104      	movs	r1, #4
 8006c04:	4618      	mov	r0, r3
 8006c06:	f001 fa62 	bl	80080ce <SDMMC_GetResponse>
 8006c0a:	4602      	mov	r2, r0
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	2108      	movs	r1, #8
 8006c16:	4618      	mov	r0, r3
 8006c18:	f001 fa59 	bl	80080ce <SDMMC_GetResponse>
 8006c1c:	4602      	mov	r2, r0
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	210c      	movs	r1, #12
 8006c28:	4618      	mov	r0, r3
 8006c2a:	f001 fa50 	bl	80080ce <SDMMC_GetResponse>
 8006c2e:	4602      	mov	r2, r0
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	2104      	movs	r1, #4
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	f001 fa47 	bl	80080ce <SDMMC_GetResponse>
 8006c40:	4603      	mov	r3, r0
 8006c42:	0d1a      	lsrs	r2, r3, #20
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006c48:	f107 0310 	add.w	r3, r7, #16
 8006c4c:	4619      	mov	r1, r3
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	f7ff fbe4 	bl	800641c <HAL_SD_GetCardCSD>
 8006c54:	4603      	mov	r3, r0
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d002      	beq.n	8006c60 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006c5a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006c5e:	e020      	b.n	8006ca2 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6819      	ldr	r1, [r3, #0]
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c68:	041b      	lsls	r3, r3, #16
 8006c6a:	f04f 0400 	mov.w	r4, #0
 8006c6e:	461a      	mov	r2, r3
 8006c70:	4623      	mov	r3, r4
 8006c72:	4608      	mov	r0, r1
 8006c74:	f001 fb36 	bl	80082e4 <SDMMC_CmdSelDesel>
 8006c78:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8006c7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d001      	beq.n	8006c84 <SD_InitCard+0x174>
  {
    return errorstate;
 8006c80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c82:	e00e      	b.n	8006ca2 <SD_InitCard+0x192>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681d      	ldr	r5, [r3, #0]
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	466c      	mov	r4, sp
 8006c8c:	f103 0210 	add.w	r2, r3, #16
 8006c90:	ca07      	ldmia	r2, {r0, r1, r2}
 8006c92:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006c96:	3304      	adds	r3, #4
 8006c98:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006c9a:	4628      	mov	r0, r5
 8006c9c:	f001 f978 	bl	8007f90 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8006ca0:	2300      	movs	r3, #0
}
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	3740      	adds	r7, #64	; 0x40
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bdb0      	pop	{r4, r5, r7, pc}
	...

08006cac <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b086      	sub	sp, #24
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8006cb8:	2300      	movs	r3, #0
 8006cba:	617b      	str	r3, [r7, #20]
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	f001 fb30 	bl	800832a <SDMMC_CmdGoIdleState>
 8006cca:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d001      	beq.n	8006cd6 <SD_PowerON+0x2a>
  {
    return errorstate;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	e072      	b.n	8006dbc <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4618      	mov	r0, r3
 8006cdc:	f001 fb43 	bl	8008366 <SDMMC_CmdOperCond>
 8006ce0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d00d      	beq.n	8006d04 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2200      	movs	r2, #0
 8006cec:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	f001 fb19 	bl	800832a <SDMMC_CmdGoIdleState>
 8006cf8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d004      	beq.n	8006d0a <SD_PowerON+0x5e>
    {
      return errorstate;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	e05b      	b.n	8006dbc <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2201      	movs	r2, #1
 8006d08:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d0e:	2b01      	cmp	r3, #1
 8006d10:	d137      	bne.n	8006d82 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	2100      	movs	r1, #0
 8006d18:	4618      	mov	r0, r3
 8006d1a:	f001 fb43 	bl	80083a4 <SDMMC_CmdAppCommand>
 8006d1e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d02d      	beq.n	8006d82 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006d26:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006d2a:	e047      	b.n	8006dbc <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	2100      	movs	r1, #0
 8006d32:	4618      	mov	r0, r3
 8006d34:	f001 fb36 	bl	80083a4 <SDMMC_CmdAppCommand>
 8006d38:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d001      	beq.n	8006d44 <SD_PowerON+0x98>
    {
      return errorstate;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	e03b      	b.n	8006dbc <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	491e      	ldr	r1, [pc, #120]	; (8006dc4 <SD_PowerON+0x118>)
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	f001 fb4c 	bl	80083e8 <SDMMC_CmdAppOperCommand>
 8006d50:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d002      	beq.n	8006d5e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006d58:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006d5c:	e02e      	b.n	8006dbc <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	2100      	movs	r1, #0
 8006d64:	4618      	mov	r0, r3
 8006d66:	f001 f9b2 	bl	80080ce <SDMMC_GetResponse>
 8006d6a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006d6c:	697b      	ldr	r3, [r7, #20]
 8006d6e:	0fdb      	lsrs	r3, r3, #31
 8006d70:	2b01      	cmp	r3, #1
 8006d72:	d101      	bne.n	8006d78 <SD_PowerON+0xcc>
 8006d74:	2301      	movs	r3, #1
 8006d76:	e000      	b.n	8006d7a <SD_PowerON+0xce>
 8006d78:	2300      	movs	r3, #0
 8006d7a:	613b      	str	r3, [r7, #16]

    count++;
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	3301      	adds	r3, #1
 8006d80:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d802      	bhi.n	8006d92 <SD_PowerON+0xe6>
 8006d8c:	693b      	ldr	r3, [r7, #16]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d0cc      	beq.n	8006d2c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d902      	bls.n	8006da2 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006d9c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006da0:	e00c      	b.n	8006dbc <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d003      	beq.n	8006db4 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2201      	movs	r2, #1
 8006db0:	645a      	str	r2, [r3, #68]	; 0x44
 8006db2:	e002      	b.n	8006dba <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2200      	movs	r2, #0
 8006db8:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8006dba:	2300      	movs	r3, #0
}
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	3718      	adds	r7, #24
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bd80      	pop	{r7, pc}
 8006dc4:	c1100000 	.word	0xc1100000

08006dc8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b084      	sub	sp, #16
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
 8006dd0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d102      	bne.n	8006dde <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8006dd8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006ddc:	e018      	b.n	8006e10 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681a      	ldr	r2, [r3, #0]
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006de6:	041b      	lsls	r3, r3, #16
 8006de8:	4619      	mov	r1, r3
 8006dea:	4610      	mov	r0, r2
 8006dec:	f001 fbc1 	bl	8008572 <SDMMC_CmdSendStatus>
 8006df0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d001      	beq.n	8006dfc <SD_SendStatus+0x34>
  {
    return errorstate;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	e009      	b.n	8006e10 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	2100      	movs	r1, #0
 8006e02:	4618      	mov	r0, r3
 8006e04:	f001 f963 	bl	80080ce <SDMMC_GetResponse>
 8006e08:	4602      	mov	r2, r0
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8006e0e:	2300      	movs	r3, #0
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	3710      	adds	r7, #16
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bd80      	pop	{r7, pc}

08006e18 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b086      	sub	sp, #24
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8006e20:	2300      	movs	r3, #0
 8006e22:	60fb      	str	r3, [r7, #12]
 8006e24:	2300      	movs	r3, #0
 8006e26:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	2100      	movs	r1, #0
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f001 f94d 	bl	80080ce <SDMMC_GetResponse>
 8006e34:	4603      	mov	r3, r0
 8006e36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e3a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006e3e:	d102      	bne.n	8006e46 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006e40:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006e44:	e02f      	b.n	8006ea6 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006e46:	f107 030c 	add.w	r3, r7, #12
 8006e4a:	4619      	mov	r1, r3
 8006e4c:	6878      	ldr	r0, [r7, #4]
 8006e4e:	f000 f879 	bl	8006f44 <SD_FindSCR>
 8006e52:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006e54:	697b      	ldr	r3, [r7, #20]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d001      	beq.n	8006e5e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8006e5a:	697b      	ldr	r3, [r7, #20]
 8006e5c:	e023      	b.n	8006ea6 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006e5e:	693b      	ldr	r3, [r7, #16]
 8006e60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d01c      	beq.n	8006ea2 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681a      	ldr	r2, [r3, #0]
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e70:	041b      	lsls	r3, r3, #16
 8006e72:	4619      	mov	r1, r3
 8006e74:	4610      	mov	r0, r2
 8006e76:	f001 fa95 	bl	80083a4 <SDMMC_CmdAppCommand>
 8006e7a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d001      	beq.n	8006e86 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8006e82:	697b      	ldr	r3, [r7, #20]
 8006e84:	e00f      	b.n	8006ea6 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	2102      	movs	r1, #2
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	f001 facf 	bl	8008430 <SDMMC_CmdBusWidth>
 8006e92:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d001      	beq.n	8006e9e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8006e9a:	697b      	ldr	r3, [r7, #20]
 8006e9c:	e003      	b.n	8006ea6 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	e001      	b.n	8006ea6 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006ea2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	3718      	adds	r7, #24
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	bd80      	pop	{r7, pc}

08006eae <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8006eae:	b580      	push	{r7, lr}
 8006eb0:	b086      	sub	sp, #24
 8006eb2:	af00      	add	r7, sp, #0
 8006eb4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	60fb      	str	r3, [r7, #12]
 8006eba:	2300      	movs	r3, #0
 8006ebc:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	2100      	movs	r1, #0
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	f001 f902 	bl	80080ce <SDMMC_GetResponse>
 8006eca:	4603      	mov	r3, r0
 8006ecc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ed0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006ed4:	d102      	bne.n	8006edc <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006ed6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006eda:	e02f      	b.n	8006f3c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006edc:	f107 030c 	add.w	r3, r7, #12
 8006ee0:	4619      	mov	r1, r3
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f000 f82e 	bl	8006f44 <SD_FindSCR>
 8006ee8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006eea:	697b      	ldr	r3, [r7, #20]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d001      	beq.n	8006ef4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8006ef0:	697b      	ldr	r3, [r7, #20]
 8006ef2:	e023      	b.n	8006f3c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006ef4:	693b      	ldr	r3, [r7, #16]
 8006ef6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d01c      	beq.n	8006f38 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681a      	ldr	r2, [r3, #0]
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f06:	041b      	lsls	r3, r3, #16
 8006f08:	4619      	mov	r1, r3
 8006f0a:	4610      	mov	r0, r2
 8006f0c:	f001 fa4a 	bl	80083a4 <SDMMC_CmdAppCommand>
 8006f10:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006f12:	697b      	ldr	r3, [r7, #20]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d001      	beq.n	8006f1c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8006f18:	697b      	ldr	r3, [r7, #20]
 8006f1a:	e00f      	b.n	8006f3c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	2100      	movs	r1, #0
 8006f22:	4618      	mov	r0, r3
 8006f24:	f001 fa84 	bl	8008430 <SDMMC_CmdBusWidth>
 8006f28:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d001      	beq.n	8006f34 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8006f30:	697b      	ldr	r3, [r7, #20]
 8006f32:	e003      	b.n	8006f3c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006f34:	2300      	movs	r3, #0
 8006f36:	e001      	b.n	8006f3c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006f38:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	3718      	adds	r7, #24
 8006f40:	46bd      	mov	sp, r7
 8006f42:	bd80      	pop	{r7, pc}

08006f44 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8006f44:	b590      	push	{r4, r7, lr}
 8006f46:	b08f      	sub	sp, #60	; 0x3c
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
 8006f4c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006f4e:	f7fa fb35 	bl	80015bc <HAL_GetTick>
 8006f52:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8006f54:	2300      	movs	r3, #0
 8006f56:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8006f58:	2300      	movs	r3, #0
 8006f5a:	60bb      	str	r3, [r7, #8]
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	2108      	movs	r1, #8
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f001 f8ee 	bl	800814c <SDMMC_CmdBlockLength>
 8006f70:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d001      	beq.n	8006f7c <SD_FindSCR+0x38>
  {
    return errorstate;
 8006f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f7a:	e0a9      	b.n	80070d0 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681a      	ldr	r2, [r3, #0]
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f84:	041b      	lsls	r3, r3, #16
 8006f86:	4619      	mov	r1, r3
 8006f88:	4610      	mov	r0, r2
 8006f8a:	f001 fa0b 	bl	80083a4 <SDMMC_CmdAppCommand>
 8006f8e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d001      	beq.n	8006f9a <SD_FindSCR+0x56>
  {
    return errorstate;
 8006f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f98:	e09a      	b.n	80070d0 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006f9a:	f04f 33ff 	mov.w	r3, #4294967295
 8006f9e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8006fa0:	2308      	movs	r3, #8
 8006fa2:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8006fa4:	2330      	movs	r3, #48	; 0x30
 8006fa6:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006fa8:	2302      	movs	r3, #2
 8006faa:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006fac:	2300      	movs	r3, #0
 8006fae:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f107 0210 	add.w	r2, r7, #16
 8006fbc:	4611      	mov	r1, r2
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	f001 f898 	bl	80080f4 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4618      	mov	r0, r3
 8006fca:	f001 fa53 	bl	8008474 <SDMMC_CmdSendSCR>
 8006fce:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d022      	beq.n	800701c <SD_FindSCR+0xd8>
  {
    return errorstate;
 8006fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fd8:	e07a      	b.n	80070d0 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fe0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d00e      	beq.n	8007006 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6819      	ldr	r1, [r3, #0]
 8006fec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fee:	009b      	lsls	r3, r3, #2
 8006ff0:	f107 0208 	add.w	r2, r7, #8
 8006ff4:	18d4      	adds	r4, r2, r3
 8006ff6:	4608      	mov	r0, r1
 8006ff8:	f000 fff6 	bl	8007fe8 <SDMMC_ReadFIFO>
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	6023      	str	r3, [r4, #0]
      index++;
 8007000:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007002:	3301      	adds	r3, #1
 8007004:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007006:	f7fa fad9 	bl	80015bc <HAL_GetTick>
 800700a:	4602      	mov	r2, r0
 800700c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800700e:	1ad3      	subs	r3, r2, r3
 8007010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007014:	d102      	bne.n	800701c <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007016:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800701a:	e059      	b.n	80070d0 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007022:	f240 432a 	movw	r3, #1066	; 0x42a
 8007026:	4013      	ands	r3, r2
 8007028:	2b00      	cmp	r3, #0
 800702a:	d0d6      	beq.n	8006fda <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007032:	f003 0308 	and.w	r3, r3, #8
 8007036:	2b00      	cmp	r3, #0
 8007038:	d005      	beq.n	8007046 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	2208      	movs	r2, #8
 8007040:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007042:	2308      	movs	r3, #8
 8007044:	e044      	b.n	80070d0 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800704c:	f003 0302 	and.w	r3, r3, #2
 8007050:	2b00      	cmp	r3, #0
 8007052:	d005      	beq.n	8007060 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	2202      	movs	r2, #2
 800705a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800705c:	2302      	movs	r3, #2
 800705e:	e037      	b.n	80070d0 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007066:	f003 0320 	and.w	r3, r3, #32
 800706a:	2b00      	cmp	r3, #0
 800706c:	d005      	beq.n	800707a <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	2220      	movs	r2, #32
 8007074:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8007076:	2320      	movs	r3, #32
 8007078:	e02a      	b.n	80070d0 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f240 523a 	movw	r2, #1338	; 0x53a
 8007082:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	061a      	lsls	r2, r3, #24
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	021b      	lsls	r3, r3, #8
 800708c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007090:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	0a1b      	lsrs	r3, r3, #8
 8007096:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800709a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	0e1b      	lsrs	r3, r3, #24
 80070a0:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80070a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070a4:	601a      	str	r2, [r3, #0]
    scr++;
 80070a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070a8:	3304      	adds	r3, #4
 80070aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	061a      	lsls	r2, r3, #24
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	021b      	lsls	r3, r3, #8
 80070b4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80070b8:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80070ba:	68bb      	ldr	r3, [r7, #8]
 80070bc:	0a1b      	lsrs	r3, r3, #8
 80070be:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80070c2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	0e1b      	lsrs	r3, r3, #24
 80070c8:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80070ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070cc:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80070ce:	2300      	movs	r3, #0
}
 80070d0:	4618      	mov	r0, r3
 80070d2:	373c      	adds	r7, #60	; 0x3c
 80070d4:	46bd      	mov	sp, r7
 80070d6:	bd90      	pop	{r4, r7, pc}

080070d8 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b086      	sub	sp, #24
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070e4:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070ea:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80070ec:	693b      	ldr	r3, [r7, #16]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d03f      	beq.n	8007172 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80070f2:	2300      	movs	r3, #0
 80070f4:	617b      	str	r3, [r7, #20]
 80070f6:	e033      	b.n	8007160 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4618      	mov	r0, r3
 80070fe:	f000 ff73 	bl	8007fe8 <SDMMC_ReadFIFO>
 8007102:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	b2da      	uxtb	r2, r3
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	3301      	adds	r3, #1
 8007110:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007112:	693b      	ldr	r3, [r7, #16]
 8007114:	3b01      	subs	r3, #1
 8007116:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	0a1b      	lsrs	r3, r3, #8
 800711c:	b2da      	uxtb	r2, r3
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	3301      	adds	r3, #1
 8007126:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007128:	693b      	ldr	r3, [r7, #16]
 800712a:	3b01      	subs	r3, #1
 800712c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	0c1b      	lsrs	r3, r3, #16
 8007132:	b2da      	uxtb	r2, r3
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	3301      	adds	r3, #1
 800713c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800713e:	693b      	ldr	r3, [r7, #16]
 8007140:	3b01      	subs	r3, #1
 8007142:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	0e1b      	lsrs	r3, r3, #24
 8007148:	b2da      	uxtb	r2, r3
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	3301      	adds	r3, #1
 8007152:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	3b01      	subs	r3, #1
 8007158:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800715a:	697b      	ldr	r3, [r7, #20]
 800715c:	3301      	adds	r3, #1
 800715e:	617b      	str	r3, [r7, #20]
 8007160:	697b      	ldr	r3, [r7, #20]
 8007162:	2b07      	cmp	r3, #7
 8007164:	d9c8      	bls.n	80070f8 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	68fa      	ldr	r2, [r7, #12]
 800716a:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	693a      	ldr	r2, [r7, #16]
 8007170:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8007172:	bf00      	nop
 8007174:	3718      	adds	r7, #24
 8007176:	46bd      	mov	sp, r7
 8007178:	bd80      	pop	{r7, pc}

0800717a <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800717a:	b580      	push	{r7, lr}
 800717c:	b086      	sub	sp, #24
 800717e:	af00      	add	r7, sp, #0
 8007180:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6a1b      	ldr	r3, [r3, #32]
 8007186:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800718c:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800718e:	693b      	ldr	r3, [r7, #16]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d043      	beq.n	800721c <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8007194:	2300      	movs	r3, #0
 8007196:	617b      	str	r3, [r7, #20]
 8007198:	e037      	b.n	800720a <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	781b      	ldrb	r3, [r3, #0]
 800719e:	60bb      	str	r3, [r7, #8]
      tmp++;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	3301      	adds	r3, #1
 80071a4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80071a6:	693b      	ldr	r3, [r7, #16]
 80071a8:	3b01      	subs	r3, #1
 80071aa:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	781b      	ldrb	r3, [r3, #0]
 80071b0:	021a      	lsls	r2, r3, #8
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	4313      	orrs	r3, r2
 80071b6:	60bb      	str	r3, [r7, #8]
      tmp++;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	3301      	adds	r3, #1
 80071bc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80071be:	693b      	ldr	r3, [r7, #16]
 80071c0:	3b01      	subs	r3, #1
 80071c2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	781b      	ldrb	r3, [r3, #0]
 80071c8:	041a      	lsls	r2, r3, #16
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	4313      	orrs	r3, r2
 80071ce:	60bb      	str	r3, [r7, #8]
      tmp++;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	3301      	adds	r3, #1
 80071d4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	3b01      	subs	r3, #1
 80071da:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	781b      	ldrb	r3, [r3, #0]
 80071e0:	061a      	lsls	r2, r3, #24
 80071e2:	68bb      	ldr	r3, [r7, #8]
 80071e4:	4313      	orrs	r3, r2
 80071e6:	60bb      	str	r3, [r7, #8]
      tmp++;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	3301      	adds	r3, #1
 80071ec:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80071ee:	693b      	ldr	r3, [r7, #16]
 80071f0:	3b01      	subs	r3, #1
 80071f2:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f107 0208 	add.w	r2, r7, #8
 80071fc:	4611      	mov	r1, r2
 80071fe:	4618      	mov	r0, r3
 8007200:	f000 feff 	bl	8008002 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8007204:	697b      	ldr	r3, [r7, #20]
 8007206:	3301      	adds	r3, #1
 8007208:	617b      	str	r3, [r7, #20]
 800720a:	697b      	ldr	r3, [r7, #20]
 800720c:	2b07      	cmp	r3, #7
 800720e:	d9c4      	bls.n	800719a <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	68fa      	ldr	r2, [r7, #12]
 8007214:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	693a      	ldr	r2, [r7, #16]
 800721a:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800721c:	bf00      	nop
 800721e:	3718      	adds	r7, #24
 8007220:	46bd      	mov	sp, r7
 8007222:	bd80      	pop	{r7, pc}

08007224 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b082      	sub	sp, #8
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d101      	bne.n	8007236 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007232:	2301      	movs	r3, #1
 8007234:	e01d      	b.n	8007272 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800723c:	b2db      	uxtb	r3, r3
 800723e:	2b00      	cmp	r3, #0
 8007240:	d106      	bne.n	8007250 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2200      	movs	r2, #0
 8007246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f7fa f808 	bl	8001260 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2202      	movs	r2, #2
 8007254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681a      	ldr	r2, [r3, #0]
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	3304      	adds	r3, #4
 8007260:	4619      	mov	r1, r3
 8007262:	4610      	mov	r0, r2
 8007264:	f000 f97c 	bl	8007560 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2201      	movs	r2, #1
 800726c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007270:	2300      	movs	r3, #0
}
 8007272:	4618      	mov	r0, r3
 8007274:	3708      	adds	r7, #8
 8007276:	46bd      	mov	sp, r7
 8007278:	bd80      	pop	{r7, pc}
	...

0800727c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800727c:	b480      	push	{r7}
 800727e:	b085      	sub	sp, #20
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	68da      	ldr	r2, [r3, #12]
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f042 0201 	orr.w	r2, r2, #1
 8007292:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	689a      	ldr	r2, [r3, #8]
 800729a:	4b0c      	ldr	r3, [pc, #48]	; (80072cc <HAL_TIM_Base_Start_IT+0x50>)
 800729c:	4013      	ands	r3, r2
 800729e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	2b06      	cmp	r3, #6
 80072a4:	d00b      	beq.n	80072be <HAL_TIM_Base_Start_IT+0x42>
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072ac:	d007      	beq.n	80072be <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	681a      	ldr	r2, [r3, #0]
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f042 0201 	orr.w	r2, r2, #1
 80072bc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80072be:	2300      	movs	r3, #0
}
 80072c0:	4618      	mov	r0, r3
 80072c2:	3714      	adds	r7, #20
 80072c4:	46bd      	mov	sp, r7
 80072c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ca:	4770      	bx	lr
 80072cc:	00010007 	.word	0x00010007

080072d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b082      	sub	sp, #8
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	691b      	ldr	r3, [r3, #16]
 80072de:	f003 0302 	and.w	r3, r3, #2
 80072e2:	2b02      	cmp	r3, #2
 80072e4:	d122      	bne.n	800732c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	68db      	ldr	r3, [r3, #12]
 80072ec:	f003 0302 	and.w	r3, r3, #2
 80072f0:	2b02      	cmp	r3, #2
 80072f2:	d11b      	bne.n	800732c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f06f 0202 	mvn.w	r2, #2
 80072fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2201      	movs	r2, #1
 8007302:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	699b      	ldr	r3, [r3, #24]
 800730a:	f003 0303 	and.w	r3, r3, #3
 800730e:	2b00      	cmp	r3, #0
 8007310:	d003      	beq.n	800731a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f000 f905 	bl	8007522 <HAL_TIM_IC_CaptureCallback>
 8007318:	e005      	b.n	8007326 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f000 f8f7 	bl	800750e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	f000 f908 	bl	8007536 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2200      	movs	r2, #0
 800732a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	691b      	ldr	r3, [r3, #16]
 8007332:	f003 0304 	and.w	r3, r3, #4
 8007336:	2b04      	cmp	r3, #4
 8007338:	d122      	bne.n	8007380 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	68db      	ldr	r3, [r3, #12]
 8007340:	f003 0304 	and.w	r3, r3, #4
 8007344:	2b04      	cmp	r3, #4
 8007346:	d11b      	bne.n	8007380 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f06f 0204 	mvn.w	r2, #4
 8007350:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2202      	movs	r2, #2
 8007356:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	699b      	ldr	r3, [r3, #24]
 800735e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007362:	2b00      	cmp	r3, #0
 8007364:	d003      	beq.n	800736e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f000 f8db 	bl	8007522 <HAL_TIM_IC_CaptureCallback>
 800736c:	e005      	b.n	800737a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f000 f8cd 	bl	800750e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	f000 f8de 	bl	8007536 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2200      	movs	r2, #0
 800737e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	691b      	ldr	r3, [r3, #16]
 8007386:	f003 0308 	and.w	r3, r3, #8
 800738a:	2b08      	cmp	r3, #8
 800738c:	d122      	bne.n	80073d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	68db      	ldr	r3, [r3, #12]
 8007394:	f003 0308 	and.w	r3, r3, #8
 8007398:	2b08      	cmp	r3, #8
 800739a:	d11b      	bne.n	80073d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f06f 0208 	mvn.w	r2, #8
 80073a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2204      	movs	r2, #4
 80073aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	69db      	ldr	r3, [r3, #28]
 80073b2:	f003 0303 	and.w	r3, r3, #3
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d003      	beq.n	80073c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f000 f8b1 	bl	8007522 <HAL_TIM_IC_CaptureCallback>
 80073c0:	e005      	b.n	80073ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	f000 f8a3 	bl	800750e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f000 f8b4 	bl	8007536 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2200      	movs	r2, #0
 80073d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	691b      	ldr	r3, [r3, #16]
 80073da:	f003 0310 	and.w	r3, r3, #16
 80073de:	2b10      	cmp	r3, #16
 80073e0:	d122      	bne.n	8007428 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	68db      	ldr	r3, [r3, #12]
 80073e8:	f003 0310 	and.w	r3, r3, #16
 80073ec:	2b10      	cmp	r3, #16
 80073ee:	d11b      	bne.n	8007428 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f06f 0210 	mvn.w	r2, #16
 80073f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2208      	movs	r2, #8
 80073fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	69db      	ldr	r3, [r3, #28]
 8007406:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800740a:	2b00      	cmp	r3, #0
 800740c:	d003      	beq.n	8007416 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f000 f887 	bl	8007522 <HAL_TIM_IC_CaptureCallback>
 8007414:	e005      	b.n	8007422 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f000 f879 	bl	800750e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f000 f88a 	bl	8007536 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2200      	movs	r2, #0
 8007426:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	691b      	ldr	r3, [r3, #16]
 800742e:	f003 0301 	and.w	r3, r3, #1
 8007432:	2b01      	cmp	r3, #1
 8007434:	d10e      	bne.n	8007454 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	68db      	ldr	r3, [r3, #12]
 800743c:	f003 0301 	and.w	r3, r3, #1
 8007440:	2b01      	cmp	r3, #1
 8007442:	d107      	bne.n	8007454 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f06f 0201 	mvn.w	r2, #1
 800744c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f7f9 fd70 	bl	8000f34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	691b      	ldr	r3, [r3, #16]
 800745a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800745e:	2b80      	cmp	r3, #128	; 0x80
 8007460:	d10e      	bne.n	8007480 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	68db      	ldr	r3, [r3, #12]
 8007468:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800746c:	2b80      	cmp	r3, #128	; 0x80
 800746e:	d107      	bne.n	8007480 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007478:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	f000 f91a 	bl	80076b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	691b      	ldr	r3, [r3, #16]
 8007486:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800748a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800748e:	d10e      	bne.n	80074ae <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	68db      	ldr	r3, [r3, #12]
 8007496:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800749a:	2b80      	cmp	r3, #128	; 0x80
 800749c:	d107      	bne.n	80074ae <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80074a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80074a8:	6878      	ldr	r0, [r7, #4]
 80074aa:	f000 f90d 	bl	80076c8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	691b      	ldr	r3, [r3, #16]
 80074b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074b8:	2b40      	cmp	r3, #64	; 0x40
 80074ba:	d10e      	bne.n	80074da <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	68db      	ldr	r3, [r3, #12]
 80074c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074c6:	2b40      	cmp	r3, #64	; 0x40
 80074c8:	d107      	bne.n	80074da <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80074d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	f000 f838 	bl	800754a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	691b      	ldr	r3, [r3, #16]
 80074e0:	f003 0320 	and.w	r3, r3, #32
 80074e4:	2b20      	cmp	r3, #32
 80074e6:	d10e      	bne.n	8007506 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	68db      	ldr	r3, [r3, #12]
 80074ee:	f003 0320 	and.w	r3, r3, #32
 80074f2:	2b20      	cmp	r3, #32
 80074f4:	d107      	bne.n	8007506 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f06f 0220 	mvn.w	r2, #32
 80074fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007500:	6878      	ldr	r0, [r7, #4]
 8007502:	f000 f8cd 	bl	80076a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007506:	bf00      	nop
 8007508:	3708      	adds	r7, #8
 800750a:	46bd      	mov	sp, r7
 800750c:	bd80      	pop	{r7, pc}

0800750e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800750e:	b480      	push	{r7}
 8007510:	b083      	sub	sp, #12
 8007512:	af00      	add	r7, sp, #0
 8007514:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007516:	bf00      	nop
 8007518:	370c      	adds	r7, #12
 800751a:	46bd      	mov	sp, r7
 800751c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007520:	4770      	bx	lr

08007522 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007522:	b480      	push	{r7}
 8007524:	b083      	sub	sp, #12
 8007526:	af00      	add	r7, sp, #0
 8007528:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800752a:	bf00      	nop
 800752c:	370c      	adds	r7, #12
 800752e:	46bd      	mov	sp, r7
 8007530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007534:	4770      	bx	lr

08007536 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007536:	b480      	push	{r7}
 8007538:	b083      	sub	sp, #12
 800753a:	af00      	add	r7, sp, #0
 800753c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800753e:	bf00      	nop
 8007540:	370c      	adds	r7, #12
 8007542:	46bd      	mov	sp, r7
 8007544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007548:	4770      	bx	lr

0800754a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800754a:	b480      	push	{r7}
 800754c:	b083      	sub	sp, #12
 800754e:	af00      	add	r7, sp, #0
 8007550:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007552:	bf00      	nop
 8007554:	370c      	adds	r7, #12
 8007556:	46bd      	mov	sp, r7
 8007558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755c:	4770      	bx	lr
	...

08007560 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007560:	b480      	push	{r7}
 8007562:	b085      	sub	sp, #20
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
 8007568:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	4a40      	ldr	r2, [pc, #256]	; (8007674 <TIM_Base_SetConfig+0x114>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d013      	beq.n	80075a0 <TIM_Base_SetConfig+0x40>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800757e:	d00f      	beq.n	80075a0 <TIM_Base_SetConfig+0x40>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	4a3d      	ldr	r2, [pc, #244]	; (8007678 <TIM_Base_SetConfig+0x118>)
 8007584:	4293      	cmp	r3, r2
 8007586:	d00b      	beq.n	80075a0 <TIM_Base_SetConfig+0x40>
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	4a3c      	ldr	r2, [pc, #240]	; (800767c <TIM_Base_SetConfig+0x11c>)
 800758c:	4293      	cmp	r3, r2
 800758e:	d007      	beq.n	80075a0 <TIM_Base_SetConfig+0x40>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	4a3b      	ldr	r2, [pc, #236]	; (8007680 <TIM_Base_SetConfig+0x120>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d003      	beq.n	80075a0 <TIM_Base_SetConfig+0x40>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	4a3a      	ldr	r2, [pc, #232]	; (8007684 <TIM_Base_SetConfig+0x124>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d108      	bne.n	80075b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	685b      	ldr	r3, [r3, #4]
 80075ac:	68fa      	ldr	r2, [r7, #12]
 80075ae:	4313      	orrs	r3, r2
 80075b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	4a2f      	ldr	r2, [pc, #188]	; (8007674 <TIM_Base_SetConfig+0x114>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d02b      	beq.n	8007612 <TIM_Base_SetConfig+0xb2>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075c0:	d027      	beq.n	8007612 <TIM_Base_SetConfig+0xb2>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	4a2c      	ldr	r2, [pc, #176]	; (8007678 <TIM_Base_SetConfig+0x118>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d023      	beq.n	8007612 <TIM_Base_SetConfig+0xb2>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	4a2b      	ldr	r2, [pc, #172]	; (800767c <TIM_Base_SetConfig+0x11c>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d01f      	beq.n	8007612 <TIM_Base_SetConfig+0xb2>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	4a2a      	ldr	r2, [pc, #168]	; (8007680 <TIM_Base_SetConfig+0x120>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d01b      	beq.n	8007612 <TIM_Base_SetConfig+0xb2>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	4a29      	ldr	r2, [pc, #164]	; (8007684 <TIM_Base_SetConfig+0x124>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d017      	beq.n	8007612 <TIM_Base_SetConfig+0xb2>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	4a28      	ldr	r2, [pc, #160]	; (8007688 <TIM_Base_SetConfig+0x128>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d013      	beq.n	8007612 <TIM_Base_SetConfig+0xb2>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	4a27      	ldr	r2, [pc, #156]	; (800768c <TIM_Base_SetConfig+0x12c>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d00f      	beq.n	8007612 <TIM_Base_SetConfig+0xb2>
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	4a26      	ldr	r2, [pc, #152]	; (8007690 <TIM_Base_SetConfig+0x130>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d00b      	beq.n	8007612 <TIM_Base_SetConfig+0xb2>
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	4a25      	ldr	r2, [pc, #148]	; (8007694 <TIM_Base_SetConfig+0x134>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d007      	beq.n	8007612 <TIM_Base_SetConfig+0xb2>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	4a24      	ldr	r2, [pc, #144]	; (8007698 <TIM_Base_SetConfig+0x138>)
 8007606:	4293      	cmp	r3, r2
 8007608:	d003      	beq.n	8007612 <TIM_Base_SetConfig+0xb2>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	4a23      	ldr	r2, [pc, #140]	; (800769c <TIM_Base_SetConfig+0x13c>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d108      	bne.n	8007624 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007618:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	68db      	ldr	r3, [r3, #12]
 800761e:	68fa      	ldr	r2, [r7, #12]
 8007620:	4313      	orrs	r3, r2
 8007622:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	695b      	ldr	r3, [r3, #20]
 800762e:	4313      	orrs	r3, r2
 8007630:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	68fa      	ldr	r2, [r7, #12]
 8007636:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	689a      	ldr	r2, [r3, #8]
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	681a      	ldr	r2, [r3, #0]
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	4a0a      	ldr	r2, [pc, #40]	; (8007674 <TIM_Base_SetConfig+0x114>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d003      	beq.n	8007658 <TIM_Base_SetConfig+0xf8>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	4a0c      	ldr	r2, [pc, #48]	; (8007684 <TIM_Base_SetConfig+0x124>)
 8007654:	4293      	cmp	r3, r2
 8007656:	d103      	bne.n	8007660 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	691a      	ldr	r2, [r3, #16]
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2201      	movs	r2, #1
 8007664:	615a      	str	r2, [r3, #20]
}
 8007666:	bf00      	nop
 8007668:	3714      	adds	r7, #20
 800766a:	46bd      	mov	sp, r7
 800766c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007670:	4770      	bx	lr
 8007672:	bf00      	nop
 8007674:	40010000 	.word	0x40010000
 8007678:	40000400 	.word	0x40000400
 800767c:	40000800 	.word	0x40000800
 8007680:	40000c00 	.word	0x40000c00
 8007684:	40010400 	.word	0x40010400
 8007688:	40014000 	.word	0x40014000
 800768c:	40014400 	.word	0x40014400
 8007690:	40014800 	.word	0x40014800
 8007694:	40001800 	.word	0x40001800
 8007698:	40001c00 	.word	0x40001c00
 800769c:	40002000 	.word	0x40002000

080076a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80076a0:	b480      	push	{r7}
 80076a2:	b083      	sub	sp, #12
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80076a8:	bf00      	nop
 80076aa:	370c      	adds	r7, #12
 80076ac:	46bd      	mov	sp, r7
 80076ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b2:	4770      	bx	lr

080076b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80076b4:	b480      	push	{r7}
 80076b6:	b083      	sub	sp, #12
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80076bc:	bf00      	nop
 80076be:	370c      	adds	r7, #12
 80076c0:	46bd      	mov	sp, r7
 80076c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c6:	4770      	bx	lr

080076c8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80076c8:	b480      	push	{r7}
 80076ca:	b083      	sub	sp, #12
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80076d0:	bf00      	nop
 80076d2:	370c      	adds	r7, #12
 80076d4:	46bd      	mov	sp, r7
 80076d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076da:	4770      	bx	lr

080076dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b082      	sub	sp, #8
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d101      	bne.n	80076ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80076ea:	2301      	movs	r3, #1
 80076ec:	e040      	b.n	8007770 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d106      	bne.n	8007704 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2200      	movs	r2, #0
 80076fa:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f7f9 fdd4 	bl	80012ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2224      	movs	r2, #36	; 0x24
 8007708:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	681a      	ldr	r2, [r3, #0]
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f022 0201 	bic.w	r2, r2, #1
 8007718:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f000 f82c 	bl	8007778 <UART_SetConfig>
 8007720:	4603      	mov	r3, r0
 8007722:	2b01      	cmp	r3, #1
 8007724:	d101      	bne.n	800772a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007726:	2301      	movs	r3, #1
 8007728:	e022      	b.n	8007770 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800772e:	2b00      	cmp	r3, #0
 8007730:	d002      	beq.n	8007738 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f000 faca 	bl	8007ccc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	685a      	ldr	r2, [r3, #4]
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007746:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	689a      	ldr	r2, [r3, #8]
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007756:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	681a      	ldr	r2, [r3, #0]
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f042 0201 	orr.w	r2, r2, #1
 8007766:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	f000 fb51 	bl	8007e10 <UART_CheckIdleState>
 800776e:	4603      	mov	r3, r0
}
 8007770:	4618      	mov	r0, r3
 8007772:	3708      	adds	r7, #8
 8007774:	46bd      	mov	sp, r7
 8007776:	bd80      	pop	{r7, pc}

08007778 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b088      	sub	sp, #32
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8007780:	2300      	movs	r3, #0
 8007782:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8007784:	2300      	movs	r3, #0
 8007786:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	689a      	ldr	r2, [r3, #8]
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	691b      	ldr	r3, [r3, #16]
 8007790:	431a      	orrs	r2, r3
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	695b      	ldr	r3, [r3, #20]
 8007796:	431a      	orrs	r2, r3
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	69db      	ldr	r3, [r3, #28]
 800779c:	4313      	orrs	r3, r2
 800779e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	681a      	ldr	r2, [r3, #0]
 80077a6:	4bb1      	ldr	r3, [pc, #708]	; (8007a6c <UART_SetConfig+0x2f4>)
 80077a8:	4013      	ands	r3, r2
 80077aa:	687a      	ldr	r2, [r7, #4]
 80077ac:	6812      	ldr	r2, [r2, #0]
 80077ae:	6939      	ldr	r1, [r7, #16]
 80077b0:	430b      	orrs	r3, r1
 80077b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	685b      	ldr	r3, [r3, #4]
 80077ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	68da      	ldr	r2, [r3, #12]
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	430a      	orrs	r2, r1
 80077c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	699b      	ldr	r3, [r3, #24]
 80077ce:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6a1b      	ldr	r3, [r3, #32]
 80077d4:	693a      	ldr	r2, [r7, #16]
 80077d6:	4313      	orrs	r3, r2
 80077d8:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	689b      	ldr	r3, [r3, #8]
 80077e0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	693a      	ldr	r2, [r7, #16]
 80077ea:	430a      	orrs	r2, r1
 80077ec:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	4a9f      	ldr	r2, [pc, #636]	; (8007a70 <UART_SetConfig+0x2f8>)
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d121      	bne.n	800783c <UART_SetConfig+0xc4>
 80077f8:	4b9e      	ldr	r3, [pc, #632]	; (8007a74 <UART_SetConfig+0x2fc>)
 80077fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077fe:	f003 0303 	and.w	r3, r3, #3
 8007802:	2b03      	cmp	r3, #3
 8007804:	d816      	bhi.n	8007834 <UART_SetConfig+0xbc>
 8007806:	a201      	add	r2, pc, #4	; (adr r2, 800780c <UART_SetConfig+0x94>)
 8007808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800780c:	0800781d 	.word	0x0800781d
 8007810:	08007829 	.word	0x08007829
 8007814:	08007823 	.word	0x08007823
 8007818:	0800782f 	.word	0x0800782f
 800781c:	2301      	movs	r3, #1
 800781e:	77fb      	strb	r3, [r7, #31]
 8007820:	e151      	b.n	8007ac6 <UART_SetConfig+0x34e>
 8007822:	2302      	movs	r3, #2
 8007824:	77fb      	strb	r3, [r7, #31]
 8007826:	e14e      	b.n	8007ac6 <UART_SetConfig+0x34e>
 8007828:	2304      	movs	r3, #4
 800782a:	77fb      	strb	r3, [r7, #31]
 800782c:	e14b      	b.n	8007ac6 <UART_SetConfig+0x34e>
 800782e:	2308      	movs	r3, #8
 8007830:	77fb      	strb	r3, [r7, #31]
 8007832:	e148      	b.n	8007ac6 <UART_SetConfig+0x34e>
 8007834:	2310      	movs	r3, #16
 8007836:	77fb      	strb	r3, [r7, #31]
 8007838:	bf00      	nop
 800783a:	e144      	b.n	8007ac6 <UART_SetConfig+0x34e>
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	4a8d      	ldr	r2, [pc, #564]	; (8007a78 <UART_SetConfig+0x300>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d134      	bne.n	80078b0 <UART_SetConfig+0x138>
 8007846:	4b8b      	ldr	r3, [pc, #556]	; (8007a74 <UART_SetConfig+0x2fc>)
 8007848:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800784c:	f003 030c 	and.w	r3, r3, #12
 8007850:	2b0c      	cmp	r3, #12
 8007852:	d829      	bhi.n	80078a8 <UART_SetConfig+0x130>
 8007854:	a201      	add	r2, pc, #4	; (adr r2, 800785c <UART_SetConfig+0xe4>)
 8007856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800785a:	bf00      	nop
 800785c:	08007891 	.word	0x08007891
 8007860:	080078a9 	.word	0x080078a9
 8007864:	080078a9 	.word	0x080078a9
 8007868:	080078a9 	.word	0x080078a9
 800786c:	0800789d 	.word	0x0800789d
 8007870:	080078a9 	.word	0x080078a9
 8007874:	080078a9 	.word	0x080078a9
 8007878:	080078a9 	.word	0x080078a9
 800787c:	08007897 	.word	0x08007897
 8007880:	080078a9 	.word	0x080078a9
 8007884:	080078a9 	.word	0x080078a9
 8007888:	080078a9 	.word	0x080078a9
 800788c:	080078a3 	.word	0x080078a3
 8007890:	2300      	movs	r3, #0
 8007892:	77fb      	strb	r3, [r7, #31]
 8007894:	e117      	b.n	8007ac6 <UART_SetConfig+0x34e>
 8007896:	2302      	movs	r3, #2
 8007898:	77fb      	strb	r3, [r7, #31]
 800789a:	e114      	b.n	8007ac6 <UART_SetConfig+0x34e>
 800789c:	2304      	movs	r3, #4
 800789e:	77fb      	strb	r3, [r7, #31]
 80078a0:	e111      	b.n	8007ac6 <UART_SetConfig+0x34e>
 80078a2:	2308      	movs	r3, #8
 80078a4:	77fb      	strb	r3, [r7, #31]
 80078a6:	e10e      	b.n	8007ac6 <UART_SetConfig+0x34e>
 80078a8:	2310      	movs	r3, #16
 80078aa:	77fb      	strb	r3, [r7, #31]
 80078ac:	bf00      	nop
 80078ae:	e10a      	b.n	8007ac6 <UART_SetConfig+0x34e>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4a71      	ldr	r2, [pc, #452]	; (8007a7c <UART_SetConfig+0x304>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d120      	bne.n	80078fc <UART_SetConfig+0x184>
 80078ba:	4b6e      	ldr	r3, [pc, #440]	; (8007a74 <UART_SetConfig+0x2fc>)
 80078bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078c0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80078c4:	2b10      	cmp	r3, #16
 80078c6:	d00f      	beq.n	80078e8 <UART_SetConfig+0x170>
 80078c8:	2b10      	cmp	r3, #16
 80078ca:	d802      	bhi.n	80078d2 <UART_SetConfig+0x15a>
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d005      	beq.n	80078dc <UART_SetConfig+0x164>
 80078d0:	e010      	b.n	80078f4 <UART_SetConfig+0x17c>
 80078d2:	2b20      	cmp	r3, #32
 80078d4:	d005      	beq.n	80078e2 <UART_SetConfig+0x16a>
 80078d6:	2b30      	cmp	r3, #48	; 0x30
 80078d8:	d009      	beq.n	80078ee <UART_SetConfig+0x176>
 80078da:	e00b      	b.n	80078f4 <UART_SetConfig+0x17c>
 80078dc:	2300      	movs	r3, #0
 80078de:	77fb      	strb	r3, [r7, #31]
 80078e0:	e0f1      	b.n	8007ac6 <UART_SetConfig+0x34e>
 80078e2:	2302      	movs	r3, #2
 80078e4:	77fb      	strb	r3, [r7, #31]
 80078e6:	e0ee      	b.n	8007ac6 <UART_SetConfig+0x34e>
 80078e8:	2304      	movs	r3, #4
 80078ea:	77fb      	strb	r3, [r7, #31]
 80078ec:	e0eb      	b.n	8007ac6 <UART_SetConfig+0x34e>
 80078ee:	2308      	movs	r3, #8
 80078f0:	77fb      	strb	r3, [r7, #31]
 80078f2:	e0e8      	b.n	8007ac6 <UART_SetConfig+0x34e>
 80078f4:	2310      	movs	r3, #16
 80078f6:	77fb      	strb	r3, [r7, #31]
 80078f8:	bf00      	nop
 80078fa:	e0e4      	b.n	8007ac6 <UART_SetConfig+0x34e>
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4a5f      	ldr	r2, [pc, #380]	; (8007a80 <UART_SetConfig+0x308>)
 8007902:	4293      	cmp	r3, r2
 8007904:	d120      	bne.n	8007948 <UART_SetConfig+0x1d0>
 8007906:	4b5b      	ldr	r3, [pc, #364]	; (8007a74 <UART_SetConfig+0x2fc>)
 8007908:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800790c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007910:	2b40      	cmp	r3, #64	; 0x40
 8007912:	d00f      	beq.n	8007934 <UART_SetConfig+0x1bc>
 8007914:	2b40      	cmp	r3, #64	; 0x40
 8007916:	d802      	bhi.n	800791e <UART_SetConfig+0x1a6>
 8007918:	2b00      	cmp	r3, #0
 800791a:	d005      	beq.n	8007928 <UART_SetConfig+0x1b0>
 800791c:	e010      	b.n	8007940 <UART_SetConfig+0x1c8>
 800791e:	2b80      	cmp	r3, #128	; 0x80
 8007920:	d005      	beq.n	800792e <UART_SetConfig+0x1b6>
 8007922:	2bc0      	cmp	r3, #192	; 0xc0
 8007924:	d009      	beq.n	800793a <UART_SetConfig+0x1c2>
 8007926:	e00b      	b.n	8007940 <UART_SetConfig+0x1c8>
 8007928:	2300      	movs	r3, #0
 800792a:	77fb      	strb	r3, [r7, #31]
 800792c:	e0cb      	b.n	8007ac6 <UART_SetConfig+0x34e>
 800792e:	2302      	movs	r3, #2
 8007930:	77fb      	strb	r3, [r7, #31]
 8007932:	e0c8      	b.n	8007ac6 <UART_SetConfig+0x34e>
 8007934:	2304      	movs	r3, #4
 8007936:	77fb      	strb	r3, [r7, #31]
 8007938:	e0c5      	b.n	8007ac6 <UART_SetConfig+0x34e>
 800793a:	2308      	movs	r3, #8
 800793c:	77fb      	strb	r3, [r7, #31]
 800793e:	e0c2      	b.n	8007ac6 <UART_SetConfig+0x34e>
 8007940:	2310      	movs	r3, #16
 8007942:	77fb      	strb	r3, [r7, #31]
 8007944:	bf00      	nop
 8007946:	e0be      	b.n	8007ac6 <UART_SetConfig+0x34e>
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	4a4d      	ldr	r2, [pc, #308]	; (8007a84 <UART_SetConfig+0x30c>)
 800794e:	4293      	cmp	r3, r2
 8007950:	d124      	bne.n	800799c <UART_SetConfig+0x224>
 8007952:	4b48      	ldr	r3, [pc, #288]	; (8007a74 <UART_SetConfig+0x2fc>)
 8007954:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007958:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800795c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007960:	d012      	beq.n	8007988 <UART_SetConfig+0x210>
 8007962:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007966:	d802      	bhi.n	800796e <UART_SetConfig+0x1f6>
 8007968:	2b00      	cmp	r3, #0
 800796a:	d007      	beq.n	800797c <UART_SetConfig+0x204>
 800796c:	e012      	b.n	8007994 <UART_SetConfig+0x21c>
 800796e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007972:	d006      	beq.n	8007982 <UART_SetConfig+0x20a>
 8007974:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007978:	d009      	beq.n	800798e <UART_SetConfig+0x216>
 800797a:	e00b      	b.n	8007994 <UART_SetConfig+0x21c>
 800797c:	2300      	movs	r3, #0
 800797e:	77fb      	strb	r3, [r7, #31]
 8007980:	e0a1      	b.n	8007ac6 <UART_SetConfig+0x34e>
 8007982:	2302      	movs	r3, #2
 8007984:	77fb      	strb	r3, [r7, #31]
 8007986:	e09e      	b.n	8007ac6 <UART_SetConfig+0x34e>
 8007988:	2304      	movs	r3, #4
 800798a:	77fb      	strb	r3, [r7, #31]
 800798c:	e09b      	b.n	8007ac6 <UART_SetConfig+0x34e>
 800798e:	2308      	movs	r3, #8
 8007990:	77fb      	strb	r3, [r7, #31]
 8007992:	e098      	b.n	8007ac6 <UART_SetConfig+0x34e>
 8007994:	2310      	movs	r3, #16
 8007996:	77fb      	strb	r3, [r7, #31]
 8007998:	bf00      	nop
 800799a:	e094      	b.n	8007ac6 <UART_SetConfig+0x34e>
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	4a39      	ldr	r2, [pc, #228]	; (8007a88 <UART_SetConfig+0x310>)
 80079a2:	4293      	cmp	r3, r2
 80079a4:	d124      	bne.n	80079f0 <UART_SetConfig+0x278>
 80079a6:	4b33      	ldr	r3, [pc, #204]	; (8007a74 <UART_SetConfig+0x2fc>)
 80079a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079ac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80079b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80079b4:	d012      	beq.n	80079dc <UART_SetConfig+0x264>
 80079b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80079ba:	d802      	bhi.n	80079c2 <UART_SetConfig+0x24a>
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d007      	beq.n	80079d0 <UART_SetConfig+0x258>
 80079c0:	e012      	b.n	80079e8 <UART_SetConfig+0x270>
 80079c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80079c6:	d006      	beq.n	80079d6 <UART_SetConfig+0x25e>
 80079c8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80079cc:	d009      	beq.n	80079e2 <UART_SetConfig+0x26a>
 80079ce:	e00b      	b.n	80079e8 <UART_SetConfig+0x270>
 80079d0:	2301      	movs	r3, #1
 80079d2:	77fb      	strb	r3, [r7, #31]
 80079d4:	e077      	b.n	8007ac6 <UART_SetConfig+0x34e>
 80079d6:	2302      	movs	r3, #2
 80079d8:	77fb      	strb	r3, [r7, #31]
 80079da:	e074      	b.n	8007ac6 <UART_SetConfig+0x34e>
 80079dc:	2304      	movs	r3, #4
 80079de:	77fb      	strb	r3, [r7, #31]
 80079e0:	e071      	b.n	8007ac6 <UART_SetConfig+0x34e>
 80079e2:	2308      	movs	r3, #8
 80079e4:	77fb      	strb	r3, [r7, #31]
 80079e6:	e06e      	b.n	8007ac6 <UART_SetConfig+0x34e>
 80079e8:	2310      	movs	r3, #16
 80079ea:	77fb      	strb	r3, [r7, #31]
 80079ec:	bf00      	nop
 80079ee:	e06a      	b.n	8007ac6 <UART_SetConfig+0x34e>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4a25      	ldr	r2, [pc, #148]	; (8007a8c <UART_SetConfig+0x314>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d124      	bne.n	8007a44 <UART_SetConfig+0x2cc>
 80079fa:	4b1e      	ldr	r3, [pc, #120]	; (8007a74 <UART_SetConfig+0x2fc>)
 80079fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a00:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007a04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a08:	d012      	beq.n	8007a30 <UART_SetConfig+0x2b8>
 8007a0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a0e:	d802      	bhi.n	8007a16 <UART_SetConfig+0x29e>
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d007      	beq.n	8007a24 <UART_SetConfig+0x2ac>
 8007a14:	e012      	b.n	8007a3c <UART_SetConfig+0x2c4>
 8007a16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a1a:	d006      	beq.n	8007a2a <UART_SetConfig+0x2b2>
 8007a1c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007a20:	d009      	beq.n	8007a36 <UART_SetConfig+0x2be>
 8007a22:	e00b      	b.n	8007a3c <UART_SetConfig+0x2c4>
 8007a24:	2300      	movs	r3, #0
 8007a26:	77fb      	strb	r3, [r7, #31]
 8007a28:	e04d      	b.n	8007ac6 <UART_SetConfig+0x34e>
 8007a2a:	2302      	movs	r3, #2
 8007a2c:	77fb      	strb	r3, [r7, #31]
 8007a2e:	e04a      	b.n	8007ac6 <UART_SetConfig+0x34e>
 8007a30:	2304      	movs	r3, #4
 8007a32:	77fb      	strb	r3, [r7, #31]
 8007a34:	e047      	b.n	8007ac6 <UART_SetConfig+0x34e>
 8007a36:	2308      	movs	r3, #8
 8007a38:	77fb      	strb	r3, [r7, #31]
 8007a3a:	e044      	b.n	8007ac6 <UART_SetConfig+0x34e>
 8007a3c:	2310      	movs	r3, #16
 8007a3e:	77fb      	strb	r3, [r7, #31]
 8007a40:	bf00      	nop
 8007a42:	e040      	b.n	8007ac6 <UART_SetConfig+0x34e>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	4a11      	ldr	r2, [pc, #68]	; (8007a90 <UART_SetConfig+0x318>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d139      	bne.n	8007ac2 <UART_SetConfig+0x34a>
 8007a4e:	4b09      	ldr	r3, [pc, #36]	; (8007a74 <UART_SetConfig+0x2fc>)
 8007a50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a54:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007a58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007a5c:	d027      	beq.n	8007aae <UART_SetConfig+0x336>
 8007a5e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007a62:	d817      	bhi.n	8007a94 <UART_SetConfig+0x31c>
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d01c      	beq.n	8007aa2 <UART_SetConfig+0x32a>
 8007a68:	e027      	b.n	8007aba <UART_SetConfig+0x342>
 8007a6a:	bf00      	nop
 8007a6c:	efff69f3 	.word	0xefff69f3
 8007a70:	40011000 	.word	0x40011000
 8007a74:	40023800 	.word	0x40023800
 8007a78:	40004400 	.word	0x40004400
 8007a7c:	40004800 	.word	0x40004800
 8007a80:	40004c00 	.word	0x40004c00
 8007a84:	40005000 	.word	0x40005000
 8007a88:	40011400 	.word	0x40011400
 8007a8c:	40007800 	.word	0x40007800
 8007a90:	40007c00 	.word	0x40007c00
 8007a94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a98:	d006      	beq.n	8007aa8 <UART_SetConfig+0x330>
 8007a9a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007a9e:	d009      	beq.n	8007ab4 <UART_SetConfig+0x33c>
 8007aa0:	e00b      	b.n	8007aba <UART_SetConfig+0x342>
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	77fb      	strb	r3, [r7, #31]
 8007aa6:	e00e      	b.n	8007ac6 <UART_SetConfig+0x34e>
 8007aa8:	2302      	movs	r3, #2
 8007aaa:	77fb      	strb	r3, [r7, #31]
 8007aac:	e00b      	b.n	8007ac6 <UART_SetConfig+0x34e>
 8007aae:	2304      	movs	r3, #4
 8007ab0:	77fb      	strb	r3, [r7, #31]
 8007ab2:	e008      	b.n	8007ac6 <UART_SetConfig+0x34e>
 8007ab4:	2308      	movs	r3, #8
 8007ab6:	77fb      	strb	r3, [r7, #31]
 8007ab8:	e005      	b.n	8007ac6 <UART_SetConfig+0x34e>
 8007aba:	2310      	movs	r3, #16
 8007abc:	77fb      	strb	r3, [r7, #31]
 8007abe:	bf00      	nop
 8007ac0:	e001      	b.n	8007ac6 <UART_SetConfig+0x34e>
 8007ac2:	2310      	movs	r3, #16
 8007ac4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	69db      	ldr	r3, [r3, #28]
 8007aca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ace:	d17f      	bne.n	8007bd0 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8007ad0:	7ffb      	ldrb	r3, [r7, #31]
 8007ad2:	2b08      	cmp	r3, #8
 8007ad4:	d85c      	bhi.n	8007b90 <UART_SetConfig+0x418>
 8007ad6:	a201      	add	r2, pc, #4	; (adr r2, 8007adc <UART_SetConfig+0x364>)
 8007ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007adc:	08007b01 	.word	0x08007b01
 8007ae0:	08007b21 	.word	0x08007b21
 8007ae4:	08007b41 	.word	0x08007b41
 8007ae8:	08007b91 	.word	0x08007b91
 8007aec:	08007b59 	.word	0x08007b59
 8007af0:	08007b91 	.word	0x08007b91
 8007af4:	08007b91 	.word	0x08007b91
 8007af8:	08007b91 	.word	0x08007b91
 8007afc:	08007b79 	.word	0x08007b79
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b00:	f7fd f882 	bl	8004c08 <HAL_RCC_GetPCLK1Freq>
 8007b04:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	005a      	lsls	r2, r3, #1
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	685b      	ldr	r3, [r3, #4]
 8007b0e:	085b      	lsrs	r3, r3, #1
 8007b10:	441a      	add	r2, r3
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	685b      	ldr	r3, [r3, #4]
 8007b16:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b1a:	b29b      	uxth	r3, r3
 8007b1c:	61bb      	str	r3, [r7, #24]
        break;
 8007b1e:	e03a      	b.n	8007b96 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007b20:	f7fd f886 	bl	8004c30 <HAL_RCC_GetPCLK2Freq>
 8007b24:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	005a      	lsls	r2, r3, #1
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	685b      	ldr	r3, [r3, #4]
 8007b2e:	085b      	lsrs	r3, r3, #1
 8007b30:	441a      	add	r2, r3
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	685b      	ldr	r3, [r3, #4]
 8007b36:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b3a:	b29b      	uxth	r3, r3
 8007b3c:	61bb      	str	r3, [r7, #24]
        break;
 8007b3e:	e02a      	b.n	8007b96 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	685b      	ldr	r3, [r3, #4]
 8007b44:	085a      	lsrs	r2, r3, #1
 8007b46:	4b5f      	ldr	r3, [pc, #380]	; (8007cc4 <UART_SetConfig+0x54c>)
 8007b48:	4413      	add	r3, r2
 8007b4a:	687a      	ldr	r2, [r7, #4]
 8007b4c:	6852      	ldr	r2, [r2, #4]
 8007b4e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007b52:	b29b      	uxth	r3, r3
 8007b54:	61bb      	str	r3, [r7, #24]
        break;
 8007b56:	e01e      	b.n	8007b96 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007b58:	f7fc ff72 	bl	8004a40 <HAL_RCC_GetSysClockFreq>
 8007b5c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	005a      	lsls	r2, r3, #1
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	685b      	ldr	r3, [r3, #4]
 8007b66:	085b      	lsrs	r3, r3, #1
 8007b68:	441a      	add	r2, r3
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	685b      	ldr	r3, [r3, #4]
 8007b6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b72:	b29b      	uxth	r3, r3
 8007b74:	61bb      	str	r3, [r7, #24]
        break;
 8007b76:	e00e      	b.n	8007b96 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	685b      	ldr	r3, [r3, #4]
 8007b7c:	085b      	lsrs	r3, r3, #1
 8007b7e:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	685b      	ldr	r3, [r3, #4]
 8007b86:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b8a:	b29b      	uxth	r3, r3
 8007b8c:	61bb      	str	r3, [r7, #24]
        break;
 8007b8e:	e002      	b.n	8007b96 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8007b90:	2301      	movs	r3, #1
 8007b92:	75fb      	strb	r3, [r7, #23]
        break;
 8007b94:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b96:	69bb      	ldr	r3, [r7, #24]
 8007b98:	2b0f      	cmp	r3, #15
 8007b9a:	d916      	bls.n	8007bca <UART_SetConfig+0x452>
 8007b9c:	69bb      	ldr	r3, [r7, #24]
 8007b9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ba2:	d212      	bcs.n	8007bca <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007ba4:	69bb      	ldr	r3, [r7, #24]
 8007ba6:	b29b      	uxth	r3, r3
 8007ba8:	f023 030f 	bic.w	r3, r3, #15
 8007bac:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007bae:	69bb      	ldr	r3, [r7, #24]
 8007bb0:	085b      	lsrs	r3, r3, #1
 8007bb2:	b29b      	uxth	r3, r3
 8007bb4:	f003 0307 	and.w	r3, r3, #7
 8007bb8:	b29a      	uxth	r2, r3
 8007bba:	897b      	ldrh	r3, [r7, #10]
 8007bbc:	4313      	orrs	r3, r2
 8007bbe:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	897a      	ldrh	r2, [r7, #10]
 8007bc6:	60da      	str	r2, [r3, #12]
 8007bc8:	e070      	b.n	8007cac <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8007bca:	2301      	movs	r3, #1
 8007bcc:	75fb      	strb	r3, [r7, #23]
 8007bce:	e06d      	b.n	8007cac <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8007bd0:	7ffb      	ldrb	r3, [r7, #31]
 8007bd2:	2b08      	cmp	r3, #8
 8007bd4:	d859      	bhi.n	8007c8a <UART_SetConfig+0x512>
 8007bd6:	a201      	add	r2, pc, #4	; (adr r2, 8007bdc <UART_SetConfig+0x464>)
 8007bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bdc:	08007c01 	.word	0x08007c01
 8007be0:	08007c1f 	.word	0x08007c1f
 8007be4:	08007c3d 	.word	0x08007c3d
 8007be8:	08007c8b 	.word	0x08007c8b
 8007bec:	08007c55 	.word	0x08007c55
 8007bf0:	08007c8b 	.word	0x08007c8b
 8007bf4:	08007c8b 	.word	0x08007c8b
 8007bf8:	08007c8b 	.word	0x08007c8b
 8007bfc:	08007c73 	.word	0x08007c73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c00:	f7fd f802 	bl	8004c08 <HAL_RCC_GetPCLK1Freq>
 8007c04:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	685b      	ldr	r3, [r3, #4]
 8007c0a:	085a      	lsrs	r2, r3, #1
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	441a      	add	r2, r3
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	685b      	ldr	r3, [r3, #4]
 8007c14:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c18:	b29b      	uxth	r3, r3
 8007c1a:	61bb      	str	r3, [r7, #24]
        break;
 8007c1c:	e038      	b.n	8007c90 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c1e:	f7fd f807 	bl	8004c30 <HAL_RCC_GetPCLK2Freq>
 8007c22:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	685b      	ldr	r3, [r3, #4]
 8007c28:	085a      	lsrs	r2, r3, #1
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	441a      	add	r2, r3
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	685b      	ldr	r3, [r3, #4]
 8007c32:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c36:	b29b      	uxth	r3, r3
 8007c38:	61bb      	str	r3, [r7, #24]
        break;
 8007c3a:	e029      	b.n	8007c90 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	685b      	ldr	r3, [r3, #4]
 8007c40:	085a      	lsrs	r2, r3, #1
 8007c42:	4b21      	ldr	r3, [pc, #132]	; (8007cc8 <UART_SetConfig+0x550>)
 8007c44:	4413      	add	r3, r2
 8007c46:	687a      	ldr	r2, [r7, #4]
 8007c48:	6852      	ldr	r2, [r2, #4]
 8007c4a:	fbb3 f3f2 	udiv	r3, r3, r2
 8007c4e:	b29b      	uxth	r3, r3
 8007c50:	61bb      	str	r3, [r7, #24]
        break;
 8007c52:	e01d      	b.n	8007c90 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c54:	f7fc fef4 	bl	8004a40 <HAL_RCC_GetSysClockFreq>
 8007c58:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	685b      	ldr	r3, [r3, #4]
 8007c5e:	085a      	lsrs	r2, r3, #1
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	441a      	add	r2, r3
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	685b      	ldr	r3, [r3, #4]
 8007c68:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c6c:	b29b      	uxth	r3, r3
 8007c6e:	61bb      	str	r3, [r7, #24]
        break;
 8007c70:	e00e      	b.n	8007c90 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	685b      	ldr	r3, [r3, #4]
 8007c76:	085b      	lsrs	r3, r3, #1
 8007c78:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	685b      	ldr	r3, [r3, #4]
 8007c80:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c84:	b29b      	uxth	r3, r3
 8007c86:	61bb      	str	r3, [r7, #24]
        break;
 8007c88:	e002      	b.n	8007c90 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	75fb      	strb	r3, [r7, #23]
        break;
 8007c8e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007c90:	69bb      	ldr	r3, [r7, #24]
 8007c92:	2b0f      	cmp	r3, #15
 8007c94:	d908      	bls.n	8007ca8 <UART_SetConfig+0x530>
 8007c96:	69bb      	ldr	r3, [r7, #24]
 8007c98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c9c:	d204      	bcs.n	8007ca8 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	69ba      	ldr	r2, [r7, #24]
 8007ca4:	60da      	str	r2, [r3, #12]
 8007ca6:	e001      	b.n	8007cac <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8007ca8:	2301      	movs	r3, #1
 8007caa:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8007cb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cba:	4618      	mov	r0, r3
 8007cbc:	3720      	adds	r7, #32
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	bd80      	pop	{r7, pc}
 8007cc2:	bf00      	nop
 8007cc4:	01e84800 	.word	0x01e84800
 8007cc8:	00f42400 	.word	0x00f42400

08007ccc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007ccc:	b480      	push	{r7}
 8007cce:	b083      	sub	sp, #12
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cd8:	f003 0301 	and.w	r3, r3, #1
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d00a      	beq.n	8007cf6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	685b      	ldr	r3, [r3, #4]
 8007ce6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	430a      	orrs	r2, r1
 8007cf4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cfa:	f003 0302 	and.w	r3, r3, #2
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d00a      	beq.n	8007d18 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	685b      	ldr	r3, [r3, #4]
 8007d08:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	430a      	orrs	r2, r1
 8007d16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d1c:	f003 0304 	and.w	r3, r3, #4
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d00a      	beq.n	8007d3a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	685b      	ldr	r3, [r3, #4]
 8007d2a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	430a      	orrs	r2, r1
 8007d38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d3e:	f003 0308 	and.w	r3, r3, #8
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d00a      	beq.n	8007d5c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	685b      	ldr	r3, [r3, #4]
 8007d4c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	430a      	orrs	r2, r1
 8007d5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d60:	f003 0310 	and.w	r3, r3, #16
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d00a      	beq.n	8007d7e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	689b      	ldr	r3, [r3, #8]
 8007d6e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	430a      	orrs	r2, r1
 8007d7c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d82:	f003 0320 	and.w	r3, r3, #32
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d00a      	beq.n	8007da0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	689b      	ldr	r3, [r3, #8]
 8007d90:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	430a      	orrs	r2, r1
 8007d9e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007da4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d01a      	beq.n	8007de2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	685b      	ldr	r3, [r3, #4]
 8007db2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	430a      	orrs	r2, r1
 8007dc0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dc6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007dca:	d10a      	bne.n	8007de2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	685b      	ldr	r3, [r3, #4]
 8007dd2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	430a      	orrs	r2, r1
 8007de0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007de6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d00a      	beq.n	8007e04 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	685b      	ldr	r3, [r3, #4]
 8007df4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	430a      	orrs	r2, r1
 8007e02:	605a      	str	r2, [r3, #4]
  }
}
 8007e04:	bf00      	nop
 8007e06:	370c      	adds	r7, #12
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0e:	4770      	bx	lr

08007e10 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b086      	sub	sp, #24
 8007e14:	af02      	add	r7, sp, #8
 8007e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8007e1e:	f7f9 fbcd 	bl	80015bc <HAL_GetTick>
 8007e22:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f003 0308 	and.w	r3, r3, #8
 8007e2e:	2b08      	cmp	r3, #8
 8007e30:	d10e      	bne.n	8007e50 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e32:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007e36:	9300      	str	r3, [sp, #0]
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007e40:	6878      	ldr	r0, [r7, #4]
 8007e42:	f000 f82a 	bl	8007e9a <UART_WaitOnFlagUntilTimeout>
 8007e46:	4603      	mov	r3, r0
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d001      	beq.n	8007e50 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e4c:	2303      	movs	r3, #3
 8007e4e:	e020      	b.n	8007e92 <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f003 0304 	and.w	r3, r3, #4
 8007e5a:	2b04      	cmp	r3, #4
 8007e5c:	d10e      	bne.n	8007e7c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e5e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007e62:	9300      	str	r3, [sp, #0]
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	2200      	movs	r2, #0
 8007e68:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007e6c:	6878      	ldr	r0, [r7, #4]
 8007e6e:	f000 f814 	bl	8007e9a <UART_WaitOnFlagUntilTimeout>
 8007e72:	4603      	mov	r3, r0
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d001      	beq.n	8007e7c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e78:	2303      	movs	r3, #3
 8007e7a:	e00a      	b.n	8007e92 <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2220      	movs	r2, #32
 8007e80:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2220      	movs	r2, #32
 8007e86:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8007e90:	2300      	movs	r3, #0
}
 8007e92:	4618      	mov	r0, r3
 8007e94:	3710      	adds	r7, #16
 8007e96:	46bd      	mov	sp, r7
 8007e98:	bd80      	pop	{r7, pc}

08007e9a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007e9a:	b580      	push	{r7, lr}
 8007e9c:	b084      	sub	sp, #16
 8007e9e:	af00      	add	r7, sp, #0
 8007ea0:	60f8      	str	r0, [r7, #12]
 8007ea2:	60b9      	str	r1, [r7, #8]
 8007ea4:	603b      	str	r3, [r7, #0]
 8007ea6:	4613      	mov	r3, r2
 8007ea8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007eaa:	e05d      	b.n	8007f68 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007eac:	69bb      	ldr	r3, [r7, #24]
 8007eae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007eb2:	d059      	beq.n	8007f68 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007eb4:	f7f9 fb82 	bl	80015bc <HAL_GetTick>
 8007eb8:	4602      	mov	r2, r0
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	1ad3      	subs	r3, r2, r3
 8007ebe:	69ba      	ldr	r2, [r7, #24]
 8007ec0:	429a      	cmp	r2, r3
 8007ec2:	d302      	bcc.n	8007eca <UART_WaitOnFlagUntilTimeout+0x30>
 8007ec4:	69bb      	ldr	r3, [r7, #24]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d11b      	bne.n	8007f02 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	681a      	ldr	r2, [r3, #0]
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007ed8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	689a      	ldr	r2, [r3, #8]
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f022 0201 	bic.w	r2, r2, #1
 8007ee8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	2220      	movs	r2, #32
 8007eee:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	2220      	movs	r2, #32
 8007ef4:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	2200      	movs	r2, #0
 8007efa:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8007efe:	2303      	movs	r3, #3
 8007f00:	e042      	b.n	8007f88 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f003 0304 	and.w	r3, r3, #4
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d02b      	beq.n	8007f68 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	69db      	ldr	r3, [r3, #28]
 8007f16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f1e:	d123      	bne.n	8007f68 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007f28:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	681a      	ldr	r2, [r3, #0]
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007f38:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	689a      	ldr	r2, [r3, #8]
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f022 0201 	bic.w	r2, r2, #1
 8007f48:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	2220      	movs	r2, #32
 8007f4e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	2220      	movs	r2, #32
 8007f54:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	2220      	movs	r2, #32
 8007f5a:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	2200      	movs	r2, #0
 8007f60:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8007f64:	2303      	movs	r3, #3
 8007f66:	e00f      	b.n	8007f88 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	69da      	ldr	r2, [r3, #28]
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	4013      	ands	r3, r2
 8007f72:	68ba      	ldr	r2, [r7, #8]
 8007f74:	429a      	cmp	r2, r3
 8007f76:	bf0c      	ite	eq
 8007f78:	2301      	moveq	r3, #1
 8007f7a:	2300      	movne	r3, #0
 8007f7c:	b2db      	uxtb	r3, r3
 8007f7e:	461a      	mov	r2, r3
 8007f80:	79fb      	ldrb	r3, [r7, #7]
 8007f82:	429a      	cmp	r2, r3
 8007f84:	d092      	beq.n	8007eac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007f86:	2300      	movs	r3, #0
}
 8007f88:	4618      	mov	r0, r3
 8007f8a:	3710      	adds	r7, #16
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd80      	pop	{r7, pc}

08007f90 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8007f90:	b084      	sub	sp, #16
 8007f92:	b480      	push	{r7}
 8007f94:	b085      	sub	sp, #20
 8007f96:	af00      	add	r7, sp, #0
 8007f98:	6078      	str	r0, [r7, #4]
 8007f9a:	f107 001c 	add.w	r0, r7, #28
 8007f9e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8007fa6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8007fa8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8007faa:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8007fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8007fae:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8007fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8007fb2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8007fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8007fb6:	431a      	orrs	r2, r3
             Init.ClockDiv
 8007fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8007fba:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8007fbc:	68fa      	ldr	r2, [r7, #12]
 8007fbe:	4313      	orrs	r3, r2
 8007fc0:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	685a      	ldr	r2, [r3, #4]
 8007fc6:	4b07      	ldr	r3, [pc, #28]	; (8007fe4 <SDMMC_Init+0x54>)
 8007fc8:	4013      	ands	r3, r2
 8007fca:	68fa      	ldr	r2, [r7, #12]
 8007fcc:	431a      	orrs	r2, r3
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8007fd2:	2300      	movs	r3, #0
}
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	3714      	adds	r7, #20
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fde:	b004      	add	sp, #16
 8007fe0:	4770      	bx	lr
 8007fe2:	bf00      	nop
 8007fe4:	ffff8100 	.word	0xffff8100

08007fe8 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8007fe8:	b480      	push	{r7}
 8007fea:	b083      	sub	sp, #12
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	370c      	adds	r7, #12
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008000:	4770      	bx	lr

08008002 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 8008002:	b480      	push	{r7}
 8008004:	b083      	sub	sp, #12
 8008006:	af00      	add	r7, sp, #0
 8008008:	6078      	str	r0, [r7, #4]
 800800a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	681a      	ldr	r2, [r3, #0]
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008016:	2300      	movs	r3, #0
}
 8008018:	4618      	mov	r0, r3
 800801a:	370c      	adds	r7, #12
 800801c:	46bd      	mov	sp, r7
 800801e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008022:	4770      	bx	lr

08008024 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 8008024:	b580      	push	{r7, lr}
 8008026:	b082      	sub	sp, #8
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2203      	movs	r2, #3
 8008030:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8008032:	2002      	movs	r0, #2
 8008034:	f7f9 face 	bl	80015d4 <HAL_Delay>
  
  return HAL_OK;
 8008038:	2300      	movs	r3, #0
}
 800803a:	4618      	mov	r0, r3
 800803c:	3708      	adds	r7, #8
 800803e:	46bd      	mov	sp, r7
 8008040:	bd80      	pop	{r7, pc}

08008042 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8008042:	b480      	push	{r7}
 8008044:	b083      	sub	sp, #12
 8008046:	af00      	add	r7, sp, #0
 8008048:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f003 0303 	and.w	r3, r3, #3
}
 8008052:	4618      	mov	r0, r3
 8008054:	370c      	adds	r7, #12
 8008056:	46bd      	mov	sp, r7
 8008058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805c:	4770      	bx	lr
	...

08008060 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8008060:	b480      	push	{r7}
 8008062:	b085      	sub	sp, #20
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
 8008068:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800806a:	2300      	movs	r3, #0
 800806c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	681a      	ldr	r2, [r3, #0]
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800807e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8008084:	431a      	orrs	r2, r3
                       Command->CPSM);
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800808a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800808c:	68fa      	ldr	r2, [r7, #12]
 800808e:	4313      	orrs	r3, r2
 8008090:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	68da      	ldr	r2, [r3, #12]
 8008096:	4b06      	ldr	r3, [pc, #24]	; (80080b0 <SDMMC_SendCommand+0x50>)
 8008098:	4013      	ands	r3, r2
 800809a:	68fa      	ldr	r2, [r7, #12]
 800809c:	431a      	orrs	r2, r3
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80080a2:	2300      	movs	r3, #0
}
 80080a4:	4618      	mov	r0, r3
 80080a6:	3714      	adds	r7, #20
 80080a8:	46bd      	mov	sp, r7
 80080aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ae:	4770      	bx	lr
 80080b0:	fffff000 	.word	0xfffff000

080080b4 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 80080b4:	b480      	push	{r7}
 80080b6:	b083      	sub	sp, #12
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	691b      	ldr	r3, [r3, #16]
 80080c0:	b2db      	uxtb	r3, r3
}
 80080c2:	4618      	mov	r0, r3
 80080c4:	370c      	adds	r7, #12
 80080c6:	46bd      	mov	sp, r7
 80080c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080cc:	4770      	bx	lr

080080ce <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80080ce:	b480      	push	{r7}
 80080d0:	b085      	sub	sp, #20
 80080d2:	af00      	add	r7, sp, #0
 80080d4:	6078      	str	r0, [r7, #4]
 80080d6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	3314      	adds	r3, #20
 80080dc:	461a      	mov	r2, r3
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	4413      	add	r3, r2
 80080e2:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	681b      	ldr	r3, [r3, #0]
}  
 80080e8:	4618      	mov	r0, r3
 80080ea:	3714      	adds	r7, #20
 80080ec:	46bd      	mov	sp, r7
 80080ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f2:	4770      	bx	lr

080080f4 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 80080f4:	b480      	push	{r7}
 80080f6:	b085      	sub	sp, #20
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
 80080fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80080fe:	2300      	movs	r3, #0
 8008100:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	681a      	ldr	r2, [r3, #0]
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	685a      	ldr	r2, [r3, #4]
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800811a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8008120:	431a      	orrs	r2, r3
                       Data->DPSM);
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8008126:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008128:	68fa      	ldr	r2, [r7, #12]
 800812a:	4313      	orrs	r3, r2
 800812c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008132:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	431a      	orrs	r2, r3
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800813e:	2300      	movs	r3, #0

}
 8008140:	4618      	mov	r0, r3
 8008142:	3714      	adds	r7, #20
 8008144:	46bd      	mov	sp, r7
 8008146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814a:	4770      	bx	lr

0800814c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b088      	sub	sp, #32
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
 8008154:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800815a:	2310      	movs	r3, #16
 800815c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800815e:	2340      	movs	r3, #64	; 0x40
 8008160:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008162:	2300      	movs	r3, #0
 8008164:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008166:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800816a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800816c:	f107 0308 	add.w	r3, r7, #8
 8008170:	4619      	mov	r1, r3
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f7ff ff74 	bl	8008060 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8008178:	f241 3288 	movw	r2, #5000	; 0x1388
 800817c:	2110      	movs	r1, #16
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f000 fa42 	bl	8008608 <SDMMC_GetCmdResp1>
 8008184:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008186:	69fb      	ldr	r3, [r7, #28]
}
 8008188:	4618      	mov	r0, r3
 800818a:	3720      	adds	r7, #32
 800818c:	46bd      	mov	sp, r7
 800818e:	bd80      	pop	{r7, pc}

08008190 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b088      	sub	sp, #32
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
 8008198:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800819e:	2311      	movs	r3, #17
 80081a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80081a2:	2340      	movs	r3, #64	; 0x40
 80081a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80081a6:	2300      	movs	r3, #0
 80081a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80081aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80081ae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80081b0:	f107 0308 	add.w	r3, r7, #8
 80081b4:	4619      	mov	r1, r3
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f7ff ff52 	bl	8008060 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80081bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80081c0:	2111      	movs	r1, #17
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	f000 fa20 	bl	8008608 <SDMMC_GetCmdResp1>
 80081c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80081ca:	69fb      	ldr	r3, [r7, #28]
}
 80081cc:	4618      	mov	r0, r3
 80081ce:	3720      	adds	r7, #32
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bd80      	pop	{r7, pc}

080081d4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b088      	sub	sp, #32
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
 80081dc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80081e2:	2312      	movs	r3, #18
 80081e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80081e6:	2340      	movs	r3, #64	; 0x40
 80081e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80081ea:	2300      	movs	r3, #0
 80081ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80081ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80081f2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80081f4:	f107 0308 	add.w	r3, r7, #8
 80081f8:	4619      	mov	r1, r3
 80081fa:	6878      	ldr	r0, [r7, #4]
 80081fc:	f7ff ff30 	bl	8008060 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8008200:	f241 3288 	movw	r2, #5000	; 0x1388
 8008204:	2112      	movs	r1, #18
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	f000 f9fe 	bl	8008608 <SDMMC_GetCmdResp1>
 800820c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800820e:	69fb      	ldr	r3, [r7, #28]
}
 8008210:	4618      	mov	r0, r3
 8008212:	3720      	adds	r7, #32
 8008214:	46bd      	mov	sp, r7
 8008216:	bd80      	pop	{r7, pc}

08008218 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b088      	sub	sp, #32
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
 8008220:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8008226:	2318      	movs	r3, #24
 8008228:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800822a:	2340      	movs	r3, #64	; 0x40
 800822c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800822e:	2300      	movs	r3, #0
 8008230:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008232:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008236:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008238:	f107 0308 	add.w	r3, r7, #8
 800823c:	4619      	mov	r1, r3
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f7ff ff0e 	bl	8008060 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008244:	f241 3288 	movw	r2, #5000	; 0x1388
 8008248:	2118      	movs	r1, #24
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	f000 f9dc 	bl	8008608 <SDMMC_GetCmdResp1>
 8008250:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008252:	69fb      	ldr	r3, [r7, #28]
}
 8008254:	4618      	mov	r0, r3
 8008256:	3720      	adds	r7, #32
 8008258:	46bd      	mov	sp, r7
 800825a:	bd80      	pop	{r7, pc}

0800825c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b088      	sub	sp, #32
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
 8008264:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800826a:	2319      	movs	r3, #25
 800826c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800826e:	2340      	movs	r3, #64	; 0x40
 8008270:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008272:	2300      	movs	r3, #0
 8008274:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008276:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800827a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800827c:	f107 0308 	add.w	r3, r7, #8
 8008280:	4619      	mov	r1, r3
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f7ff feec 	bl	8008060 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8008288:	f241 3288 	movw	r2, #5000	; 0x1388
 800828c:	2119      	movs	r1, #25
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f000 f9ba 	bl	8008608 <SDMMC_GetCmdResp1>
 8008294:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008296:	69fb      	ldr	r3, [r7, #28]
}
 8008298:	4618      	mov	r0, r3
 800829a:	3720      	adds	r7, #32
 800829c:	46bd      	mov	sp, r7
 800829e:	bd80      	pop	{r7, pc}

080082a0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b088      	sub	sp, #32
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80082a8:	2300      	movs	r3, #0
 80082aa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80082ac:	230c      	movs	r3, #12
 80082ae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80082b0:	2340      	movs	r3, #64	; 0x40
 80082b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80082b4:	2300      	movs	r3, #0
 80082b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80082b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80082bc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80082be:	f107 0308 	add.w	r3, r7, #8
 80082c2:	4619      	mov	r1, r3
 80082c4:	6878      	ldr	r0, [r7, #4]
 80082c6:	f7ff fecb 	bl	8008060 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 80082ca:	4a05      	ldr	r2, [pc, #20]	; (80082e0 <SDMMC_CmdStopTransfer+0x40>)
 80082cc:	210c      	movs	r1, #12
 80082ce:	6878      	ldr	r0, [r7, #4]
 80082d0:	f000 f99a 	bl	8008608 <SDMMC_GetCmdResp1>
 80082d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80082d6:	69fb      	ldr	r3, [r7, #28]
}
 80082d8:	4618      	mov	r0, r3
 80082da:	3720      	adds	r7, #32
 80082dc:	46bd      	mov	sp, r7
 80082de:	bd80      	pop	{r7, pc}
 80082e0:	05f5e100 	.word	0x05f5e100

080082e4 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b08a      	sub	sp, #40	; 0x28
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	60f8      	str	r0, [r7, #12]
 80082ec:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80082f4:	2307      	movs	r3, #7
 80082f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80082f8:	2340      	movs	r3, #64	; 0x40
 80082fa:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80082fc:	2300      	movs	r3, #0
 80082fe:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008300:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008304:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008306:	f107 0310 	add.w	r3, r7, #16
 800830a:	4619      	mov	r1, r3
 800830c:	68f8      	ldr	r0, [r7, #12]
 800830e:	f7ff fea7 	bl	8008060 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8008312:	f241 3288 	movw	r2, #5000	; 0x1388
 8008316:	2107      	movs	r1, #7
 8008318:	68f8      	ldr	r0, [r7, #12]
 800831a:	f000 f975 	bl	8008608 <SDMMC_GetCmdResp1>
 800831e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8008320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008322:	4618      	mov	r0, r3
 8008324:	3728      	adds	r7, #40	; 0x28
 8008326:	46bd      	mov	sp, r7
 8008328:	bd80      	pop	{r7, pc}

0800832a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800832a:	b580      	push	{r7, lr}
 800832c:	b088      	sub	sp, #32
 800832e:	af00      	add	r7, sp, #0
 8008330:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8008332:	2300      	movs	r3, #0
 8008334:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8008336:	2300      	movs	r3, #0
 8008338:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800833a:	2300      	movs	r3, #0
 800833c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800833e:	2300      	movs	r3, #0
 8008340:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008342:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008346:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008348:	f107 0308 	add.w	r3, r7, #8
 800834c:	4619      	mov	r1, r3
 800834e:	6878      	ldr	r0, [r7, #4]
 8008350:	f7ff fe86 	bl	8008060 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8008354:	6878      	ldr	r0, [r7, #4]
 8008356:	f000 f92f 	bl	80085b8 <SDMMC_GetCmdError>
 800835a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800835c:	69fb      	ldr	r3, [r7, #28]
}
 800835e:	4618      	mov	r0, r3
 8008360:	3720      	adds	r7, #32
 8008362:	46bd      	mov	sp, r7
 8008364:	bd80      	pop	{r7, pc}

08008366 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8008366:	b580      	push	{r7, lr}
 8008368:	b088      	sub	sp, #32
 800836a:	af00      	add	r7, sp, #0
 800836c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800836e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8008372:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8008374:	2308      	movs	r3, #8
 8008376:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008378:	2340      	movs	r3, #64	; 0x40
 800837a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800837c:	2300      	movs	r3, #0
 800837e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008380:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008384:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008386:	f107 0308 	add.w	r3, r7, #8
 800838a:	4619      	mov	r1, r3
 800838c:	6878      	ldr	r0, [r7, #4]
 800838e:	f7ff fe67 	bl	8008060 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	f000 fb18 	bl	80089c8 <SDMMC_GetCmdResp7>
 8008398:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800839a:	69fb      	ldr	r3, [r7, #28]
}
 800839c:	4618      	mov	r0, r3
 800839e:	3720      	adds	r7, #32
 80083a0:	46bd      	mov	sp, r7
 80083a2:	bd80      	pop	{r7, pc}

080083a4 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b088      	sub	sp, #32
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
 80083ac:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80083b2:	2337      	movs	r3, #55	; 0x37
 80083b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80083b6:	2340      	movs	r3, #64	; 0x40
 80083b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80083ba:	2300      	movs	r3, #0
 80083bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80083be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80083c2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80083c4:	f107 0308 	add.w	r3, r7, #8
 80083c8:	4619      	mov	r1, r3
 80083ca:	6878      	ldr	r0, [r7, #4]
 80083cc:	f7ff fe48 	bl	8008060 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80083d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80083d4:	2137      	movs	r1, #55	; 0x37
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	f000 f916 	bl	8008608 <SDMMC_GetCmdResp1>
 80083dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80083de:	69fb      	ldr	r3, [r7, #28]
}
 80083e0:	4618      	mov	r0, r3
 80083e2:	3720      	adds	r7, #32
 80083e4:	46bd      	mov	sp, r7
 80083e6:	bd80      	pop	{r7, pc}

080083e8 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b088      	sub	sp, #32
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
 80083f0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80083f2:	683a      	ldr	r2, [r7, #0]
 80083f4:	4b0d      	ldr	r3, [pc, #52]	; (800842c <SDMMC_CmdAppOperCommand+0x44>)
 80083f6:	4313      	orrs	r3, r2
 80083f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80083fa:	2329      	movs	r3, #41	; 0x29
 80083fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80083fe:	2340      	movs	r3, #64	; 0x40
 8008400:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008402:	2300      	movs	r3, #0
 8008404:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008406:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800840a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800840c:	f107 0308 	add.w	r3, r7, #8
 8008410:	4619      	mov	r1, r3
 8008412:	6878      	ldr	r0, [r7, #4]
 8008414:	f7ff fe24 	bl	8008060 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	f000 fa27 	bl	800886c <SDMMC_GetCmdResp3>
 800841e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008420:	69fb      	ldr	r3, [r7, #28]
}
 8008422:	4618      	mov	r0, r3
 8008424:	3720      	adds	r7, #32
 8008426:	46bd      	mov	sp, r7
 8008428:	bd80      	pop	{r7, pc}
 800842a:	bf00      	nop
 800842c:	80100000 	.word	0x80100000

08008430 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b088      	sub	sp, #32
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
 8008438:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800843e:	2306      	movs	r3, #6
 8008440:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008442:	2340      	movs	r3, #64	; 0x40
 8008444:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008446:	2300      	movs	r3, #0
 8008448:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800844a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800844e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008450:	f107 0308 	add.w	r3, r7, #8
 8008454:	4619      	mov	r1, r3
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	f7ff fe02 	bl	8008060 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800845c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008460:	2106      	movs	r1, #6
 8008462:	6878      	ldr	r0, [r7, #4]
 8008464:	f000 f8d0 	bl	8008608 <SDMMC_GetCmdResp1>
 8008468:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800846a:	69fb      	ldr	r3, [r7, #28]
}
 800846c:	4618      	mov	r0, r3
 800846e:	3720      	adds	r7, #32
 8008470:	46bd      	mov	sp, r7
 8008472:	bd80      	pop	{r7, pc}

08008474 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b088      	sub	sp, #32
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800847c:	2300      	movs	r3, #0
 800847e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8008480:	2333      	movs	r3, #51	; 0x33
 8008482:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008484:	2340      	movs	r3, #64	; 0x40
 8008486:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008488:	2300      	movs	r3, #0
 800848a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800848c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008490:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008492:	f107 0308 	add.w	r3, r7, #8
 8008496:	4619      	mov	r1, r3
 8008498:	6878      	ldr	r0, [r7, #4]
 800849a:	f7ff fde1 	bl	8008060 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800849e:	f241 3288 	movw	r2, #5000	; 0x1388
 80084a2:	2133      	movs	r1, #51	; 0x33
 80084a4:	6878      	ldr	r0, [r7, #4]
 80084a6:	f000 f8af 	bl	8008608 <SDMMC_GetCmdResp1>
 80084aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80084ac:	69fb      	ldr	r3, [r7, #28]
}
 80084ae:	4618      	mov	r0, r3
 80084b0:	3720      	adds	r7, #32
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bd80      	pop	{r7, pc}

080084b6 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80084b6:	b580      	push	{r7, lr}
 80084b8:	b088      	sub	sp, #32
 80084ba:	af00      	add	r7, sp, #0
 80084bc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80084be:	2300      	movs	r3, #0
 80084c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80084c2:	2302      	movs	r3, #2
 80084c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80084c6:	23c0      	movs	r3, #192	; 0xc0
 80084c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80084ca:	2300      	movs	r3, #0
 80084cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80084ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80084d2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80084d4:	f107 0308 	add.w	r3, r7, #8
 80084d8:	4619      	mov	r1, r3
 80084da:	6878      	ldr	r0, [r7, #4]
 80084dc:	f7ff fdc0 	bl	8008060 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80084e0:	6878      	ldr	r0, [r7, #4]
 80084e2:	f000 f97d 	bl	80087e0 <SDMMC_GetCmdResp2>
 80084e6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80084e8:	69fb      	ldr	r3, [r7, #28]
}
 80084ea:	4618      	mov	r0, r3
 80084ec:	3720      	adds	r7, #32
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bd80      	pop	{r7, pc}

080084f2 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80084f2:	b580      	push	{r7, lr}
 80084f4:	b088      	sub	sp, #32
 80084f6:	af00      	add	r7, sp, #0
 80084f8:	6078      	str	r0, [r7, #4]
 80084fa:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8008500:	2309      	movs	r3, #9
 8008502:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8008504:	23c0      	movs	r3, #192	; 0xc0
 8008506:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008508:	2300      	movs	r3, #0
 800850a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800850c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008510:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008512:	f107 0308 	add.w	r3, r7, #8
 8008516:	4619      	mov	r1, r3
 8008518:	6878      	ldr	r0, [r7, #4]
 800851a:	f7ff fda1 	bl	8008060 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	f000 f95e 	bl	80087e0 <SDMMC_GetCmdResp2>
 8008524:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008526:	69fb      	ldr	r3, [r7, #28]
}
 8008528:	4618      	mov	r0, r3
 800852a:	3720      	adds	r7, #32
 800852c:	46bd      	mov	sp, r7
 800852e:	bd80      	pop	{r7, pc}

08008530 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b088      	sub	sp, #32
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
 8008538:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800853a:	2300      	movs	r3, #0
 800853c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800853e:	2303      	movs	r3, #3
 8008540:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008542:	2340      	movs	r3, #64	; 0x40
 8008544:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008546:	2300      	movs	r3, #0
 8008548:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800854a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800854e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008550:	f107 0308 	add.w	r3, r7, #8
 8008554:	4619      	mov	r1, r3
 8008556:	6878      	ldr	r0, [r7, #4]
 8008558:	f7ff fd82 	bl	8008060 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800855c:	683a      	ldr	r2, [r7, #0]
 800855e:	2103      	movs	r1, #3
 8008560:	6878      	ldr	r0, [r7, #4]
 8008562:	f000 f9bd 	bl	80088e0 <SDMMC_GetCmdResp6>
 8008566:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008568:	69fb      	ldr	r3, [r7, #28]
}
 800856a:	4618      	mov	r0, r3
 800856c:	3720      	adds	r7, #32
 800856e:	46bd      	mov	sp, r7
 8008570:	bd80      	pop	{r7, pc}

08008572 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008572:	b580      	push	{r7, lr}
 8008574:	b088      	sub	sp, #32
 8008576:	af00      	add	r7, sp, #0
 8008578:	6078      	str	r0, [r7, #4]
 800857a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8008580:	230d      	movs	r3, #13
 8008582:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008584:	2340      	movs	r3, #64	; 0x40
 8008586:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008588:	2300      	movs	r3, #0
 800858a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800858c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008590:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008592:	f107 0308 	add.w	r3, r7, #8
 8008596:	4619      	mov	r1, r3
 8008598:	6878      	ldr	r0, [r7, #4]
 800859a:	f7ff fd61 	bl	8008060 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800859e:	f241 3288 	movw	r2, #5000	; 0x1388
 80085a2:	210d      	movs	r1, #13
 80085a4:	6878      	ldr	r0, [r7, #4]
 80085a6:	f000 f82f 	bl	8008608 <SDMMC_GetCmdResp1>
 80085aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80085ac:	69fb      	ldr	r3, [r7, #28]
}
 80085ae:	4618      	mov	r0, r3
 80085b0:	3720      	adds	r7, #32
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bd80      	pop	{r7, pc}
	...

080085b8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 80085b8:	b490      	push	{r4, r7}
 80085ba:	b082      	sub	sp, #8
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80085c0:	4b0f      	ldr	r3, [pc, #60]	; (8008600 <SDMMC_GetCmdError+0x48>)
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	4a0f      	ldr	r2, [pc, #60]	; (8008604 <SDMMC_GetCmdError+0x4c>)
 80085c6:	fba2 2303 	umull	r2, r3, r2, r3
 80085ca:	0a5b      	lsrs	r3, r3, #9
 80085cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80085d0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80085d4:	4623      	mov	r3, r4
 80085d6:	1e5c      	subs	r4, r3, #1
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d102      	bne.n	80085e2 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80085dc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80085e0:	e009      	b.n	80085f6 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d0f2      	beq.n	80085d4 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	22c5      	movs	r2, #197	; 0xc5
 80085f2:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80085f4:	2300      	movs	r3, #0
}
 80085f6:	4618      	mov	r0, r3
 80085f8:	3708      	adds	r7, #8
 80085fa:	46bd      	mov	sp, r7
 80085fc:	bc90      	pop	{r4, r7}
 80085fe:	4770      	bx	lr
 8008600:	20000010 	.word	0x20000010
 8008604:	10624dd3 	.word	0x10624dd3

08008608 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8008608:	b590      	push	{r4, r7, lr}
 800860a:	b087      	sub	sp, #28
 800860c:	af00      	add	r7, sp, #0
 800860e:	60f8      	str	r0, [r7, #12]
 8008610:	460b      	mov	r3, r1
 8008612:	607a      	str	r2, [r7, #4]
 8008614:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8008616:	4b6f      	ldr	r3, [pc, #444]	; (80087d4 <SDMMC_GetCmdResp1+0x1cc>)
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	4a6f      	ldr	r2, [pc, #444]	; (80087d8 <SDMMC_GetCmdResp1+0x1d0>)
 800861c:	fba2 2303 	umull	r2, r3, r2, r3
 8008620:	0a5b      	lsrs	r3, r3, #9
 8008622:	687a      	ldr	r2, [r7, #4]
 8008624:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8008628:	4623      	mov	r3, r4
 800862a:	1e5c      	subs	r4, r3, #1
 800862c:	2b00      	cmp	r3, #0
 800862e:	d102      	bne.n	8008636 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008630:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008634:	e0c9      	b.n	80087ca <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDMMCx->STA;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800863a:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800863c:	697b      	ldr	r3, [r7, #20]
 800863e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008642:	2b00      	cmp	r3, #0
 8008644:	d0f0      	beq.n	8008628 <SDMMC_GetCmdResp1+0x20>
 8008646:	697b      	ldr	r3, [r7, #20]
 8008648:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800864c:	2b00      	cmp	r3, #0
 800864e:	d1eb      	bne.n	8008628 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008654:	f003 0304 	and.w	r3, r3, #4
 8008658:	2b00      	cmp	r3, #0
 800865a:	d004      	beq.n	8008666 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	2204      	movs	r2, #4
 8008660:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008662:	2304      	movs	r3, #4
 8008664:	e0b1      	b.n	80087ca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800866a:	f003 0301 	and.w	r3, r3, #1
 800866e:	2b00      	cmp	r3, #0
 8008670:	d004      	beq.n	800867c <SDMMC_GetCmdResp1+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	2201      	movs	r2, #1
 8008676:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008678:	2301      	movs	r3, #1
 800867a:	e0a6      	b.n	80087ca <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	22c5      	movs	r2, #197	; 0xc5
 8008680:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8008682:	68f8      	ldr	r0, [r7, #12]
 8008684:	f7ff fd16 	bl	80080b4 <SDMMC_GetCommandResponse>
 8008688:	4603      	mov	r3, r0
 800868a:	461a      	mov	r2, r3
 800868c:	7afb      	ldrb	r3, [r7, #11]
 800868e:	4293      	cmp	r3, r2
 8008690:	d001      	beq.n	8008696 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008692:	2301      	movs	r3, #1
 8008694:	e099      	b.n	80087ca <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8008696:	2100      	movs	r1, #0
 8008698:	68f8      	ldr	r0, [r7, #12]
 800869a:	f7ff fd18 	bl	80080ce <SDMMC_GetResponse>
 800869e:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80086a0:	693a      	ldr	r2, [r7, #16]
 80086a2:	4b4e      	ldr	r3, [pc, #312]	; (80087dc <SDMMC_GetCmdResp1+0x1d4>)
 80086a4:	4013      	ands	r3, r2
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d101      	bne.n	80086ae <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 80086aa:	2300      	movs	r3, #0
 80086ac:	e08d      	b.n	80087ca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80086ae:	693b      	ldr	r3, [r7, #16]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	da02      	bge.n	80086ba <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80086b4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80086b8:	e087      	b.n	80087ca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80086ba:	693b      	ldr	r3, [r7, #16]
 80086bc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d001      	beq.n	80086c8 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80086c4:	2340      	movs	r3, #64	; 0x40
 80086c6:	e080      	b.n	80087ca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80086c8:	693b      	ldr	r3, [r7, #16]
 80086ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d001      	beq.n	80086d6 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80086d2:	2380      	movs	r3, #128	; 0x80
 80086d4:	e079      	b.n	80087ca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80086d6:	693b      	ldr	r3, [r7, #16]
 80086d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d002      	beq.n	80086e6 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80086e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80086e4:	e071      	b.n	80087ca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80086e6:	693b      	ldr	r3, [r7, #16]
 80086e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d002      	beq.n	80086f6 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80086f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80086f4:	e069      	b.n	80087ca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80086f6:	693b      	ldr	r3, [r7, #16]
 80086f8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d002      	beq.n	8008706 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8008700:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008704:	e061      	b.n	80087ca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8008706:	693b      	ldr	r3, [r7, #16]
 8008708:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800870c:	2b00      	cmp	r3, #0
 800870e:	d002      	beq.n	8008716 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8008710:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008714:	e059      	b.n	80087ca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8008716:	693b      	ldr	r3, [r7, #16]
 8008718:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800871c:	2b00      	cmp	r3, #0
 800871e:	d002      	beq.n	8008726 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008720:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008724:	e051      	b.n	80087ca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8008726:	693b      	ldr	r3, [r7, #16]
 8008728:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800872c:	2b00      	cmp	r3, #0
 800872e:	d002      	beq.n	8008736 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008730:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008734:	e049      	b.n	80087ca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8008736:	693b      	ldr	r3, [r7, #16]
 8008738:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800873c:	2b00      	cmp	r3, #0
 800873e:	d002      	beq.n	8008746 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8008740:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008744:	e041      	b.n	80087ca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8008746:	693b      	ldr	r3, [r7, #16]
 8008748:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800874c:	2b00      	cmp	r3, #0
 800874e:	d002      	beq.n	8008756 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8008750:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008754:	e039      	b.n	80087ca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8008756:	693b      	ldr	r3, [r7, #16]
 8008758:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800875c:	2b00      	cmp	r3, #0
 800875e:	d002      	beq.n	8008766 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8008760:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008764:	e031      	b.n	80087ca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8008766:	693b      	ldr	r3, [r7, #16]
 8008768:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800876c:	2b00      	cmp	r3, #0
 800876e:	d002      	beq.n	8008776 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8008770:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008774:	e029      	b.n	80087ca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8008776:	693b      	ldr	r3, [r7, #16]
 8008778:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800877c:	2b00      	cmp	r3, #0
 800877e:	d002      	beq.n	8008786 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8008780:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008784:	e021      	b.n	80087ca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8008786:	693b      	ldr	r3, [r7, #16]
 8008788:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800878c:	2b00      	cmp	r3, #0
 800878e:	d002      	beq.n	8008796 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8008790:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008794:	e019      	b.n	80087ca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8008796:	693b      	ldr	r3, [r7, #16]
 8008798:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800879c:	2b00      	cmp	r3, #0
 800879e:	d002      	beq.n	80087a6 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80087a0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80087a4:	e011      	b.n	80087ca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80087a6:	693b      	ldr	r3, [r7, #16]
 80087a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d002      	beq.n	80087b6 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80087b0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80087b4:	e009      	b.n	80087ca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80087b6:	693b      	ldr	r3, [r7, #16]
 80087b8:	f003 0308 	and.w	r3, r3, #8
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d002      	beq.n	80087c6 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80087c0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80087c4:	e001      	b.n	80087ca <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80087c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80087ca:	4618      	mov	r0, r3
 80087cc:	371c      	adds	r7, #28
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bd90      	pop	{r4, r7, pc}
 80087d2:	bf00      	nop
 80087d4:	20000010 	.word	0x20000010
 80087d8:	10624dd3 	.word	0x10624dd3
 80087dc:	fdffe008 	.word	0xfdffe008

080087e0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80087e0:	b490      	push	{r4, r7}
 80087e2:	b084      	sub	sp, #16
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80087e8:	4b1e      	ldr	r3, [pc, #120]	; (8008864 <SDMMC_GetCmdResp2+0x84>)
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	4a1e      	ldr	r2, [pc, #120]	; (8008868 <SDMMC_GetCmdResp2+0x88>)
 80087ee:	fba2 2303 	umull	r2, r3, r2, r3
 80087f2:	0a5b      	lsrs	r3, r3, #9
 80087f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80087f8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80087fc:	4623      	mov	r3, r4
 80087fe:	1e5c      	subs	r4, r3, #1
 8008800:	2b00      	cmp	r3, #0
 8008802:	d102      	bne.n	800880a <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008804:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008808:	e026      	b.n	8008858 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDMMCx->STA;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800880e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008816:	2b00      	cmp	r3, #0
 8008818:	d0f0      	beq.n	80087fc <SDMMC_GetCmdResp2+0x1c>
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008820:	2b00      	cmp	r3, #0
 8008822:	d1eb      	bne.n	80087fc <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008828:	f003 0304 	and.w	r3, r3, #4
 800882c:	2b00      	cmp	r3, #0
 800882e:	d004      	beq.n	800883a <SDMMC_GetCmdResp2+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2204      	movs	r2, #4
 8008834:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008836:	2304      	movs	r3, #4
 8008838:	e00e      	b.n	8008858 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800883e:	f003 0301 	and.w	r3, r3, #1
 8008842:	2b00      	cmp	r3, #0
 8008844:	d004      	beq.n	8008850 <SDMMC_GetCmdResp2+0x70>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	2201      	movs	r2, #1
 800884a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800884c:	2301      	movs	r3, #1
 800884e:	e003      	b.n	8008858 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	22c5      	movs	r2, #197	; 0xc5
 8008854:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8008856:	2300      	movs	r3, #0
}
 8008858:	4618      	mov	r0, r3
 800885a:	3710      	adds	r7, #16
 800885c:	46bd      	mov	sp, r7
 800885e:	bc90      	pop	{r4, r7}
 8008860:	4770      	bx	lr
 8008862:	bf00      	nop
 8008864:	20000010 	.word	0x20000010
 8008868:	10624dd3 	.word	0x10624dd3

0800886c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800886c:	b490      	push	{r4, r7}
 800886e:	b084      	sub	sp, #16
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008874:	4b18      	ldr	r3, [pc, #96]	; (80088d8 <SDMMC_GetCmdResp3+0x6c>)
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	4a18      	ldr	r2, [pc, #96]	; (80088dc <SDMMC_GetCmdResp3+0x70>)
 800887a:	fba2 2303 	umull	r2, r3, r2, r3
 800887e:	0a5b      	lsrs	r3, r3, #9
 8008880:	f241 3288 	movw	r2, #5000	; 0x1388
 8008884:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8008888:	4623      	mov	r3, r4
 800888a:	1e5c      	subs	r4, r3, #1
 800888c:	2b00      	cmp	r3, #0
 800888e:	d102      	bne.n	8008896 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008890:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008894:	e01b      	b.n	80088ce <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDMMCx->STA;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800889a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d0f0      	beq.n	8008888 <SDMMC_GetCmdResp3+0x1c>
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d1eb      	bne.n	8008888 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088b4:	f003 0304 	and.w	r3, r3, #4
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d004      	beq.n	80088c6 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2204      	movs	r2, #4
 80088c0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80088c2:	2304      	movs	r3, #4
 80088c4:	e003      	b.n	80088ce <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	22c5      	movs	r2, #197	; 0xc5
 80088ca:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80088cc:	2300      	movs	r3, #0
}
 80088ce:	4618      	mov	r0, r3
 80088d0:	3710      	adds	r7, #16
 80088d2:	46bd      	mov	sp, r7
 80088d4:	bc90      	pop	{r4, r7}
 80088d6:	4770      	bx	lr
 80088d8:	20000010 	.word	0x20000010
 80088dc:	10624dd3 	.word	0x10624dd3

080088e0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80088e0:	b590      	push	{r4, r7, lr}
 80088e2:	b087      	sub	sp, #28
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	60f8      	str	r0, [r7, #12]
 80088e8:	460b      	mov	r3, r1
 80088ea:	607a      	str	r2, [r7, #4]
 80088ec:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80088ee:	4b34      	ldr	r3, [pc, #208]	; (80089c0 <SDMMC_GetCmdResp6+0xe0>)
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	4a34      	ldr	r2, [pc, #208]	; (80089c4 <SDMMC_GetCmdResp6+0xe4>)
 80088f4:	fba2 2303 	umull	r2, r3, r2, r3
 80088f8:	0a5b      	lsrs	r3, r3, #9
 80088fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80088fe:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8008902:	4623      	mov	r3, r4
 8008904:	1e5c      	subs	r4, r3, #1
 8008906:	2b00      	cmp	r3, #0
 8008908:	d102      	bne.n	8008910 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800890a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800890e:	e052      	b.n	80089b6 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDMMCx->STA;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008914:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008916:	697b      	ldr	r3, [r7, #20]
 8008918:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800891c:	2b00      	cmp	r3, #0
 800891e:	d0f0      	beq.n	8008902 <SDMMC_GetCmdResp6+0x22>
 8008920:	697b      	ldr	r3, [r7, #20]
 8008922:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008926:	2b00      	cmp	r3, #0
 8008928:	d1eb      	bne.n	8008902 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800892e:	f003 0304 	and.w	r3, r3, #4
 8008932:	2b00      	cmp	r3, #0
 8008934:	d004      	beq.n	8008940 <SDMMC_GetCmdResp6+0x60>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	2204      	movs	r2, #4
 800893a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800893c:	2304      	movs	r3, #4
 800893e:	e03a      	b.n	80089b6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008944:	f003 0301 	and.w	r3, r3, #1
 8008948:	2b00      	cmp	r3, #0
 800894a:	d004      	beq.n	8008956 <SDMMC_GetCmdResp6+0x76>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	2201      	movs	r2, #1
 8008950:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008952:	2301      	movs	r3, #1
 8008954:	e02f      	b.n	80089b6 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8008956:	68f8      	ldr	r0, [r7, #12]
 8008958:	f7ff fbac 	bl	80080b4 <SDMMC_GetCommandResponse>
 800895c:	4603      	mov	r3, r0
 800895e:	461a      	mov	r2, r3
 8008960:	7afb      	ldrb	r3, [r7, #11]
 8008962:	4293      	cmp	r3, r2
 8008964:	d001      	beq.n	800896a <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008966:	2301      	movs	r3, #1
 8008968:	e025      	b.n	80089b6 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	22c5      	movs	r2, #197	; 0xc5
 800896e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8008970:	2100      	movs	r1, #0
 8008972:	68f8      	ldr	r0, [r7, #12]
 8008974:	f7ff fbab 	bl	80080ce <SDMMC_GetResponse>
 8008978:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800897a:	693b      	ldr	r3, [r7, #16]
 800897c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008980:	2b00      	cmp	r3, #0
 8008982:	d106      	bne.n	8008992 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8008984:	693b      	ldr	r3, [r7, #16]
 8008986:	0c1b      	lsrs	r3, r3, #16
 8008988:	b29a      	uxth	r2, r3
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800898e:	2300      	movs	r3, #0
 8008990:	e011      	b.n	80089b6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8008992:	693b      	ldr	r3, [r7, #16]
 8008994:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008998:	2b00      	cmp	r3, #0
 800899a:	d002      	beq.n	80089a2 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800899c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80089a0:	e009      	b.n	80089b6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80089a2:	693b      	ldr	r3, [r7, #16]
 80089a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d002      	beq.n	80089b2 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80089ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80089b0:	e001      	b.n	80089b6 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80089b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80089b6:	4618      	mov	r0, r3
 80089b8:	371c      	adds	r7, #28
 80089ba:	46bd      	mov	sp, r7
 80089bc:	bd90      	pop	{r4, r7, pc}
 80089be:	bf00      	nop
 80089c0:	20000010 	.word	0x20000010
 80089c4:	10624dd3 	.word	0x10624dd3

080089c8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 80089c8:	b490      	push	{r4, r7}
 80089ca:	b084      	sub	sp, #16
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80089d0:	4b21      	ldr	r3, [pc, #132]	; (8008a58 <SDMMC_GetCmdResp7+0x90>)
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	4a21      	ldr	r2, [pc, #132]	; (8008a5c <SDMMC_GetCmdResp7+0x94>)
 80089d6:	fba2 2303 	umull	r2, r3, r2, r3
 80089da:	0a5b      	lsrs	r3, r3, #9
 80089dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80089e0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80089e4:	4623      	mov	r3, r4
 80089e6:	1e5c      	subs	r4, r3, #1
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d102      	bne.n	80089f2 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80089ec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80089f0:	e02c      	b.n	8008a4c <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDMMCx->STA;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089f6:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d0f0      	beq.n	80089e4 <SDMMC_GetCmdResp7+0x1c>
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d1eb      	bne.n	80089e4 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a10:	f003 0304 	and.w	r3, r3, #4
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d004      	beq.n	8008a22 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2204      	movs	r2, #4
 8008a1c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008a1e:	2304      	movs	r3, #4
 8008a20:	e014      	b.n	8008a4c <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a26:	f003 0301 	and.w	r3, r3, #1
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d004      	beq.n	8008a38 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2201      	movs	r2, #1
 8008a32:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008a34:	2301      	movs	r3, #1
 8008a36:	e009      	b.n	8008a4c <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d002      	beq.n	8008a4a <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2240      	movs	r2, #64	; 0x40
 8008a48:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8008a4a:	2300      	movs	r3, #0
  
}
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	3710      	adds	r7, #16
 8008a50:	46bd      	mov	sp, r7
 8008a52:	bc90      	pop	{r4, r7}
 8008a54:	4770      	bx	lr
 8008a56:	bf00      	nop
 8008a58:	20000010 	.word	0x20000010
 8008a5c:	10624dd3 	.word	0x10624dd3

08008a60 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008a60:	b084      	sub	sp, #16
 8008a62:	b580      	push	{r7, lr}
 8008a64:	b084      	sub	sp, #16
 8008a66:	af00      	add	r7, sp, #0
 8008a68:	6078      	str	r0, [r7, #4]
 8008a6a:	f107 001c 	add.w	r0, r7, #28
 8008a6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a74:	2b01      	cmp	r3, #1
 8008a76:	d120      	bne.n	8008aba <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a7c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	68da      	ldr	r2, [r3, #12]
 8008a88:	4b20      	ldr	r3, [pc, #128]	; (8008b0c <USB_CoreInit+0xac>)
 8008a8a:	4013      	ands	r3, r2
 8008a8c:	687a      	ldr	r2, [r7, #4]
 8008a8e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	68db      	ldr	r3, [r3, #12]
 8008a94:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008a9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a9e:	2b01      	cmp	r3, #1
 8008aa0:	d105      	bne.n	8008aae <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	68db      	ldr	r3, [r3, #12]
 8008aa6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8008aae:	6878      	ldr	r0, [r7, #4]
 8008ab0:	f001 fac4 	bl	800a03c <USB_CoreReset>
 8008ab4:	4603      	mov	r3, r0
 8008ab6:	73fb      	strb	r3, [r7, #15]
 8008ab8:	e010      	b.n	8008adc <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	68db      	ldr	r3, [r3, #12]
 8008abe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8008ac6:	6878      	ldr	r0, [r7, #4]
 8008ac8:	f001 fab8 	bl	800a03c <USB_CoreReset>
 8008acc:	4603      	mov	r3, r0
 8008ace:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ad4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8008adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ade:	2b01      	cmp	r3, #1
 8008ae0:	d10b      	bne.n	8008afa <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	689b      	ldr	r3, [r3, #8]
 8008ae6:	f043 0206 	orr.w	r2, r3, #6
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	689b      	ldr	r3, [r3, #8]
 8008af2:	f043 0220 	orr.w	r2, r3, #32
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008afa:	7bfb      	ldrb	r3, [r7, #15]
}
 8008afc:	4618      	mov	r0, r3
 8008afe:	3710      	adds	r7, #16
 8008b00:	46bd      	mov	sp, r7
 8008b02:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008b06:	b004      	add	sp, #16
 8008b08:	4770      	bx	lr
 8008b0a:	bf00      	nop
 8008b0c:	ffbdffbf 	.word	0xffbdffbf

08008b10 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008b10:	b480      	push	{r7}
 8008b12:	b087      	sub	sp, #28
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	60f8      	str	r0, [r7, #12]
 8008b18:	60b9      	str	r1, [r7, #8]
 8008b1a:	4613      	mov	r3, r2
 8008b1c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008b1e:	79fb      	ldrb	r3, [r7, #7]
 8008b20:	2b02      	cmp	r3, #2
 8008b22:	d165      	bne.n	8008bf0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008b24:	68bb      	ldr	r3, [r7, #8]
 8008b26:	4a41      	ldr	r2, [pc, #260]	; (8008c2c <USB_SetTurnaroundTime+0x11c>)
 8008b28:	4293      	cmp	r3, r2
 8008b2a:	d906      	bls.n	8008b3a <USB_SetTurnaroundTime+0x2a>
 8008b2c:	68bb      	ldr	r3, [r7, #8]
 8008b2e:	4a40      	ldr	r2, [pc, #256]	; (8008c30 <USB_SetTurnaroundTime+0x120>)
 8008b30:	4293      	cmp	r3, r2
 8008b32:	d802      	bhi.n	8008b3a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008b34:	230f      	movs	r3, #15
 8008b36:	617b      	str	r3, [r7, #20]
 8008b38:	e062      	b.n	8008c00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008b3a:	68bb      	ldr	r3, [r7, #8]
 8008b3c:	4a3c      	ldr	r2, [pc, #240]	; (8008c30 <USB_SetTurnaroundTime+0x120>)
 8008b3e:	4293      	cmp	r3, r2
 8008b40:	d906      	bls.n	8008b50 <USB_SetTurnaroundTime+0x40>
 8008b42:	68bb      	ldr	r3, [r7, #8]
 8008b44:	4a3b      	ldr	r2, [pc, #236]	; (8008c34 <USB_SetTurnaroundTime+0x124>)
 8008b46:	4293      	cmp	r3, r2
 8008b48:	d802      	bhi.n	8008b50 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008b4a:	230e      	movs	r3, #14
 8008b4c:	617b      	str	r3, [r7, #20]
 8008b4e:	e057      	b.n	8008c00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008b50:	68bb      	ldr	r3, [r7, #8]
 8008b52:	4a38      	ldr	r2, [pc, #224]	; (8008c34 <USB_SetTurnaroundTime+0x124>)
 8008b54:	4293      	cmp	r3, r2
 8008b56:	d906      	bls.n	8008b66 <USB_SetTurnaroundTime+0x56>
 8008b58:	68bb      	ldr	r3, [r7, #8]
 8008b5a:	4a37      	ldr	r2, [pc, #220]	; (8008c38 <USB_SetTurnaroundTime+0x128>)
 8008b5c:	4293      	cmp	r3, r2
 8008b5e:	d802      	bhi.n	8008b66 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008b60:	230d      	movs	r3, #13
 8008b62:	617b      	str	r3, [r7, #20]
 8008b64:	e04c      	b.n	8008c00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008b66:	68bb      	ldr	r3, [r7, #8]
 8008b68:	4a33      	ldr	r2, [pc, #204]	; (8008c38 <USB_SetTurnaroundTime+0x128>)
 8008b6a:	4293      	cmp	r3, r2
 8008b6c:	d906      	bls.n	8008b7c <USB_SetTurnaroundTime+0x6c>
 8008b6e:	68bb      	ldr	r3, [r7, #8]
 8008b70:	4a32      	ldr	r2, [pc, #200]	; (8008c3c <USB_SetTurnaroundTime+0x12c>)
 8008b72:	4293      	cmp	r3, r2
 8008b74:	d802      	bhi.n	8008b7c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008b76:	230c      	movs	r3, #12
 8008b78:	617b      	str	r3, [r7, #20]
 8008b7a:	e041      	b.n	8008c00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008b7c:	68bb      	ldr	r3, [r7, #8]
 8008b7e:	4a2f      	ldr	r2, [pc, #188]	; (8008c3c <USB_SetTurnaroundTime+0x12c>)
 8008b80:	4293      	cmp	r3, r2
 8008b82:	d906      	bls.n	8008b92 <USB_SetTurnaroundTime+0x82>
 8008b84:	68bb      	ldr	r3, [r7, #8]
 8008b86:	4a2e      	ldr	r2, [pc, #184]	; (8008c40 <USB_SetTurnaroundTime+0x130>)
 8008b88:	4293      	cmp	r3, r2
 8008b8a:	d802      	bhi.n	8008b92 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008b8c:	230b      	movs	r3, #11
 8008b8e:	617b      	str	r3, [r7, #20]
 8008b90:	e036      	b.n	8008c00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008b92:	68bb      	ldr	r3, [r7, #8]
 8008b94:	4a2a      	ldr	r2, [pc, #168]	; (8008c40 <USB_SetTurnaroundTime+0x130>)
 8008b96:	4293      	cmp	r3, r2
 8008b98:	d906      	bls.n	8008ba8 <USB_SetTurnaroundTime+0x98>
 8008b9a:	68bb      	ldr	r3, [r7, #8]
 8008b9c:	4a29      	ldr	r2, [pc, #164]	; (8008c44 <USB_SetTurnaroundTime+0x134>)
 8008b9e:	4293      	cmp	r3, r2
 8008ba0:	d802      	bhi.n	8008ba8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008ba2:	230a      	movs	r3, #10
 8008ba4:	617b      	str	r3, [r7, #20]
 8008ba6:	e02b      	b.n	8008c00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008ba8:	68bb      	ldr	r3, [r7, #8]
 8008baa:	4a26      	ldr	r2, [pc, #152]	; (8008c44 <USB_SetTurnaroundTime+0x134>)
 8008bac:	4293      	cmp	r3, r2
 8008bae:	d906      	bls.n	8008bbe <USB_SetTurnaroundTime+0xae>
 8008bb0:	68bb      	ldr	r3, [r7, #8]
 8008bb2:	4a25      	ldr	r2, [pc, #148]	; (8008c48 <USB_SetTurnaroundTime+0x138>)
 8008bb4:	4293      	cmp	r3, r2
 8008bb6:	d802      	bhi.n	8008bbe <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008bb8:	2309      	movs	r3, #9
 8008bba:	617b      	str	r3, [r7, #20]
 8008bbc:	e020      	b.n	8008c00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008bbe:	68bb      	ldr	r3, [r7, #8]
 8008bc0:	4a21      	ldr	r2, [pc, #132]	; (8008c48 <USB_SetTurnaroundTime+0x138>)
 8008bc2:	4293      	cmp	r3, r2
 8008bc4:	d906      	bls.n	8008bd4 <USB_SetTurnaroundTime+0xc4>
 8008bc6:	68bb      	ldr	r3, [r7, #8]
 8008bc8:	4a20      	ldr	r2, [pc, #128]	; (8008c4c <USB_SetTurnaroundTime+0x13c>)
 8008bca:	4293      	cmp	r3, r2
 8008bcc:	d802      	bhi.n	8008bd4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008bce:	2308      	movs	r3, #8
 8008bd0:	617b      	str	r3, [r7, #20]
 8008bd2:	e015      	b.n	8008c00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008bd4:	68bb      	ldr	r3, [r7, #8]
 8008bd6:	4a1d      	ldr	r2, [pc, #116]	; (8008c4c <USB_SetTurnaroundTime+0x13c>)
 8008bd8:	4293      	cmp	r3, r2
 8008bda:	d906      	bls.n	8008bea <USB_SetTurnaroundTime+0xda>
 8008bdc:	68bb      	ldr	r3, [r7, #8]
 8008bde:	4a1c      	ldr	r2, [pc, #112]	; (8008c50 <USB_SetTurnaroundTime+0x140>)
 8008be0:	4293      	cmp	r3, r2
 8008be2:	d802      	bhi.n	8008bea <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008be4:	2307      	movs	r3, #7
 8008be6:	617b      	str	r3, [r7, #20]
 8008be8:	e00a      	b.n	8008c00 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008bea:	2306      	movs	r3, #6
 8008bec:	617b      	str	r3, [r7, #20]
 8008bee:	e007      	b.n	8008c00 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008bf0:	79fb      	ldrb	r3, [r7, #7]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d102      	bne.n	8008bfc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008bf6:	2309      	movs	r3, #9
 8008bf8:	617b      	str	r3, [r7, #20]
 8008bfa:	e001      	b.n	8008c00 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008bfc:	2309      	movs	r3, #9
 8008bfe:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	68db      	ldr	r3, [r3, #12]
 8008c04:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	68da      	ldr	r2, [r3, #12]
 8008c10:	697b      	ldr	r3, [r7, #20]
 8008c12:	029b      	lsls	r3, r3, #10
 8008c14:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008c18:	431a      	orrs	r2, r3
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008c1e:	2300      	movs	r3, #0
}
 8008c20:	4618      	mov	r0, r3
 8008c22:	371c      	adds	r7, #28
 8008c24:	46bd      	mov	sp, r7
 8008c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2a:	4770      	bx	lr
 8008c2c:	00d8acbf 	.word	0x00d8acbf
 8008c30:	00e4e1bf 	.word	0x00e4e1bf
 8008c34:	00f423ff 	.word	0x00f423ff
 8008c38:	0106737f 	.word	0x0106737f
 8008c3c:	011a499f 	.word	0x011a499f
 8008c40:	01312cff 	.word	0x01312cff
 8008c44:	014ca43f 	.word	0x014ca43f
 8008c48:	016e35ff 	.word	0x016e35ff
 8008c4c:	01a6ab1f 	.word	0x01a6ab1f
 8008c50:	01e847ff 	.word	0x01e847ff

08008c54 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008c54:	b480      	push	{r7}
 8008c56:	b083      	sub	sp, #12
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	689b      	ldr	r3, [r3, #8]
 8008c60:	f043 0201 	orr.w	r2, r3, #1
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008c68:	2300      	movs	r3, #0
}
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	370c      	adds	r7, #12
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c74:	4770      	bx	lr

08008c76 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008c76:	b480      	push	{r7}
 8008c78:	b083      	sub	sp, #12
 8008c7a:	af00      	add	r7, sp, #0
 8008c7c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	689b      	ldr	r3, [r3, #8]
 8008c82:	f023 0201 	bic.w	r2, r3, #1
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008c8a:	2300      	movs	r3, #0
}
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	370c      	adds	r7, #12
 8008c90:	46bd      	mov	sp, r7
 8008c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c96:	4770      	bx	lr

08008c98 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b082      	sub	sp, #8
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
 8008ca0:	460b      	mov	r3, r1
 8008ca2:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	68db      	ldr	r3, [r3, #12]
 8008ca8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008cb0:	78fb      	ldrb	r3, [r7, #3]
 8008cb2:	2b01      	cmp	r3, #1
 8008cb4:	d106      	bne.n	8008cc4 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	68db      	ldr	r3, [r3, #12]
 8008cba:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	60da      	str	r2, [r3, #12]
 8008cc2:	e00b      	b.n	8008cdc <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8008cc4:	78fb      	ldrb	r3, [r7, #3]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d106      	bne.n	8008cd8 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	68db      	ldr	r3, [r3, #12]
 8008cce:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	60da      	str	r2, [r3, #12]
 8008cd6:	e001      	b.n	8008cdc <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8008cd8:	2301      	movs	r3, #1
 8008cda:	e003      	b.n	8008ce4 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8008cdc:	2032      	movs	r0, #50	; 0x32
 8008cde:	f7f8 fc79 	bl	80015d4 <HAL_Delay>

  return HAL_OK;
 8008ce2:	2300      	movs	r3, #0
}
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	3708      	adds	r7, #8
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	bd80      	pop	{r7, pc}

08008cec <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008cec:	b084      	sub	sp, #16
 8008cee:	b580      	push	{r7, lr}
 8008cf0:	b086      	sub	sp, #24
 8008cf2:	af00      	add	r7, sp, #0
 8008cf4:	6078      	str	r0, [r7, #4]
 8008cf6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008cfa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008cfe:	2300      	movs	r3, #0
 8008d00:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008d06:	2300      	movs	r3, #0
 8008d08:	613b      	str	r3, [r7, #16]
 8008d0a:	e009      	b.n	8008d20 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008d0c:	687a      	ldr	r2, [r7, #4]
 8008d0e:	693b      	ldr	r3, [r7, #16]
 8008d10:	3340      	adds	r3, #64	; 0x40
 8008d12:	009b      	lsls	r3, r3, #2
 8008d14:	4413      	add	r3, r2
 8008d16:	2200      	movs	r2, #0
 8008d18:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008d1a:	693b      	ldr	r3, [r7, #16]
 8008d1c:	3301      	adds	r3, #1
 8008d1e:	613b      	str	r3, [r7, #16]
 8008d20:	693b      	ldr	r3, [r7, #16]
 8008d22:	2b0e      	cmp	r3, #14
 8008d24:	d9f2      	bls.n	8008d0c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008d26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d11c      	bne.n	8008d66 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d32:	685b      	ldr	r3, [r3, #4]
 8008d34:	68fa      	ldr	r2, [r7, #12]
 8008d36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008d3a:	f043 0302 	orr.w	r3, r3, #2
 8008d3e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d44:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	601a      	str	r2, [r3, #0]
 8008d64:	e005      	b.n	8008d72 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d6a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008d78:	461a      	mov	r2, r3
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d84:	4619      	mov	r1, r3
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d8c:	461a      	mov	r2, r3
 8008d8e:	680b      	ldr	r3, [r1, #0]
 8008d90:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d94:	2b01      	cmp	r3, #1
 8008d96:	d10c      	bne.n	8008db2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d104      	bne.n	8008da8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008d9e:	2100      	movs	r1, #0
 8008da0:	6878      	ldr	r0, [r7, #4]
 8008da2:	f000 f959 	bl	8009058 <USB_SetDevSpeed>
 8008da6:	e018      	b.n	8008dda <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008da8:	2101      	movs	r1, #1
 8008daa:	6878      	ldr	r0, [r7, #4]
 8008dac:	f000 f954 	bl	8009058 <USB_SetDevSpeed>
 8008db0:	e013      	b.n	8008dda <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8008db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008db4:	2b03      	cmp	r3, #3
 8008db6:	d10c      	bne.n	8008dd2 <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d104      	bne.n	8008dc8 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008dbe:	2100      	movs	r1, #0
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	f000 f949 	bl	8009058 <USB_SetDevSpeed>
 8008dc6:	e008      	b.n	8008dda <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008dc8:	2101      	movs	r1, #1
 8008dca:	6878      	ldr	r0, [r7, #4]
 8008dcc:	f000 f944 	bl	8009058 <USB_SetDevSpeed>
 8008dd0:	e003      	b.n	8008dda <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008dd2:	2103      	movs	r1, #3
 8008dd4:	6878      	ldr	r0, [r7, #4]
 8008dd6:	f000 f93f 	bl	8009058 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008dda:	2110      	movs	r1, #16
 8008ddc:	6878      	ldr	r0, [r7, #4]
 8008dde:	f000 f8f3 	bl	8008fc8 <USB_FlushTxFifo>
 8008de2:	4603      	mov	r3, r0
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d001      	beq.n	8008dec <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 8008de8:	2301      	movs	r3, #1
 8008dea:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008dec:	6878      	ldr	r0, [r7, #4]
 8008dee:	f000 f911 	bl	8009014 <USB_FlushRxFifo>
 8008df2:	4603      	mov	r3, r0
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d001      	beq.n	8008dfc <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 8008df8:	2301      	movs	r3, #1
 8008dfa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e02:	461a      	mov	r2, r3
 8008e04:	2300      	movs	r3, #0
 8008e06:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e0e:	461a      	mov	r2, r3
 8008e10:	2300      	movs	r3, #0
 8008e12:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e1a:	461a      	mov	r2, r3
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008e20:	2300      	movs	r3, #0
 8008e22:	613b      	str	r3, [r7, #16]
 8008e24:	e043      	b.n	8008eae <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008e26:	693b      	ldr	r3, [r7, #16]
 8008e28:	015a      	lsls	r2, r3, #5
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	4413      	add	r3, r2
 8008e2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008e38:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008e3c:	d118      	bne.n	8008e70 <USB_DevInit+0x184>
    {
      if (i == 0U)
 8008e3e:	693b      	ldr	r3, [r7, #16]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d10a      	bne.n	8008e5a <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008e44:	693b      	ldr	r3, [r7, #16]
 8008e46:	015a      	lsls	r2, r3, #5
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	4413      	add	r3, r2
 8008e4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e50:	461a      	mov	r2, r3
 8008e52:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008e56:	6013      	str	r3, [r2, #0]
 8008e58:	e013      	b.n	8008e82 <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008e5a:	693b      	ldr	r3, [r7, #16]
 8008e5c:	015a      	lsls	r2, r3, #5
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	4413      	add	r3, r2
 8008e62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e66:	461a      	mov	r2, r3
 8008e68:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008e6c:	6013      	str	r3, [r2, #0]
 8008e6e:	e008      	b.n	8008e82 <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008e70:	693b      	ldr	r3, [r7, #16]
 8008e72:	015a      	lsls	r2, r3, #5
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	4413      	add	r3, r2
 8008e78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e7c:	461a      	mov	r2, r3
 8008e7e:	2300      	movs	r3, #0
 8008e80:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008e82:	693b      	ldr	r3, [r7, #16]
 8008e84:	015a      	lsls	r2, r3, #5
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	4413      	add	r3, r2
 8008e8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e8e:	461a      	mov	r2, r3
 8008e90:	2300      	movs	r3, #0
 8008e92:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008e94:	693b      	ldr	r3, [r7, #16]
 8008e96:	015a      	lsls	r2, r3, #5
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	4413      	add	r3, r2
 8008e9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ea0:	461a      	mov	r2, r3
 8008ea2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008ea6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008ea8:	693b      	ldr	r3, [r7, #16]
 8008eaa:	3301      	adds	r3, #1
 8008eac:	613b      	str	r3, [r7, #16]
 8008eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eb0:	693a      	ldr	r2, [r7, #16]
 8008eb2:	429a      	cmp	r2, r3
 8008eb4:	d3b7      	bcc.n	8008e26 <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	613b      	str	r3, [r7, #16]
 8008eba:	e043      	b.n	8008f44 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008ebc:	693b      	ldr	r3, [r7, #16]
 8008ebe:	015a      	lsls	r2, r3, #5
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	4413      	add	r3, r2
 8008ec4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008ece:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008ed2:	d118      	bne.n	8008f06 <USB_DevInit+0x21a>
    {
      if (i == 0U)
 8008ed4:	693b      	ldr	r3, [r7, #16]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d10a      	bne.n	8008ef0 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008eda:	693b      	ldr	r3, [r7, #16]
 8008edc:	015a      	lsls	r2, r3, #5
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	4413      	add	r3, r2
 8008ee2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ee6:	461a      	mov	r2, r3
 8008ee8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008eec:	6013      	str	r3, [r2, #0]
 8008eee:	e013      	b.n	8008f18 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008ef0:	693b      	ldr	r3, [r7, #16]
 8008ef2:	015a      	lsls	r2, r3, #5
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	4413      	add	r3, r2
 8008ef8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008efc:	461a      	mov	r2, r3
 8008efe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008f02:	6013      	str	r3, [r2, #0]
 8008f04:	e008      	b.n	8008f18 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008f06:	693b      	ldr	r3, [r7, #16]
 8008f08:	015a      	lsls	r2, r3, #5
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	4413      	add	r3, r2
 8008f0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f12:	461a      	mov	r2, r3
 8008f14:	2300      	movs	r3, #0
 8008f16:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008f18:	693b      	ldr	r3, [r7, #16]
 8008f1a:	015a      	lsls	r2, r3, #5
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	4413      	add	r3, r2
 8008f20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f24:	461a      	mov	r2, r3
 8008f26:	2300      	movs	r3, #0
 8008f28:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008f2a:	693b      	ldr	r3, [r7, #16]
 8008f2c:	015a      	lsls	r2, r3, #5
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	4413      	add	r3, r2
 8008f32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f36:	461a      	mov	r2, r3
 8008f38:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008f3c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008f3e:	693b      	ldr	r3, [r7, #16]
 8008f40:	3301      	adds	r3, #1
 8008f42:	613b      	str	r3, [r7, #16]
 8008f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f46:	693a      	ldr	r2, [r7, #16]
 8008f48:	429a      	cmp	r2, r3
 8008f4a:	d3b7      	bcc.n	8008ebc <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f52:	691b      	ldr	r3, [r3, #16]
 8008f54:	68fa      	ldr	r2, [r7, #12]
 8008f56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008f5a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008f5e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	2200      	movs	r2, #0
 8008f64:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008f6c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d105      	bne.n	8008f80 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	699b      	ldr	r3, [r3, #24]
 8008f78:	f043 0210 	orr.w	r2, r3, #16
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	699a      	ldr	r2, [r3, #24]
 8008f84:	4b0e      	ldr	r3, [pc, #56]	; (8008fc0 <USB_DevInit+0x2d4>)
 8008f86:	4313      	orrs	r3, r2
 8008f88:	687a      	ldr	r2, [r7, #4]
 8008f8a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008f8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d005      	beq.n	8008f9e <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	699b      	ldr	r3, [r3, #24]
 8008f96:	f043 0208 	orr.w	r2, r3, #8
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008f9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008fa0:	2b01      	cmp	r3, #1
 8008fa2:	d105      	bne.n	8008fb0 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	699a      	ldr	r2, [r3, #24]
 8008fa8:	4b06      	ldr	r3, [pc, #24]	; (8008fc4 <USB_DevInit+0x2d8>)
 8008faa:	4313      	orrs	r3, r2
 8008fac:	687a      	ldr	r2, [r7, #4]
 8008fae:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008fb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	3718      	adds	r7, #24
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008fbc:	b004      	add	sp, #16
 8008fbe:	4770      	bx	lr
 8008fc0:	803c3800 	.word	0x803c3800
 8008fc4:	40000004 	.word	0x40000004

08008fc8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008fc8:	b480      	push	{r7}
 8008fca:	b085      	sub	sp, #20
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
 8008fd0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	019b      	lsls	r3, r3, #6
 8008fda:	f043 0220 	orr.w	r2, r3, #32
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	3301      	adds	r3, #1
 8008fe6:	60fb      	str	r3, [r7, #12]
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	4a09      	ldr	r2, [pc, #36]	; (8009010 <USB_FlushTxFifo+0x48>)
 8008fec:	4293      	cmp	r3, r2
 8008fee:	d901      	bls.n	8008ff4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8008ff0:	2303      	movs	r3, #3
 8008ff2:	e006      	b.n	8009002 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	691b      	ldr	r3, [r3, #16]
 8008ff8:	f003 0320 	and.w	r3, r3, #32
 8008ffc:	2b20      	cmp	r3, #32
 8008ffe:	d0f0      	beq.n	8008fe2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8009000:	2300      	movs	r3, #0
}
 8009002:	4618      	mov	r0, r3
 8009004:	3714      	adds	r7, #20
 8009006:	46bd      	mov	sp, r7
 8009008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900c:	4770      	bx	lr
 800900e:	bf00      	nop
 8009010:	00030d40 	.word	0x00030d40

08009014 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009014:	b480      	push	{r7}
 8009016:	b085      	sub	sp, #20
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800901c:	2300      	movs	r3, #0
 800901e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2210      	movs	r2, #16
 8009024:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	3301      	adds	r3, #1
 800902a:	60fb      	str	r3, [r7, #12]
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	4a09      	ldr	r2, [pc, #36]	; (8009054 <USB_FlushRxFifo+0x40>)
 8009030:	4293      	cmp	r3, r2
 8009032:	d901      	bls.n	8009038 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8009034:	2303      	movs	r3, #3
 8009036:	e006      	b.n	8009046 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	691b      	ldr	r3, [r3, #16]
 800903c:	f003 0310 	and.w	r3, r3, #16
 8009040:	2b10      	cmp	r3, #16
 8009042:	d0f0      	beq.n	8009026 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8009044:	2300      	movs	r3, #0
}
 8009046:	4618      	mov	r0, r3
 8009048:	3714      	adds	r7, #20
 800904a:	46bd      	mov	sp, r7
 800904c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009050:	4770      	bx	lr
 8009052:	bf00      	nop
 8009054:	00030d40 	.word	0x00030d40

08009058 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009058:	b480      	push	{r7}
 800905a:	b085      	sub	sp, #20
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
 8009060:	460b      	mov	r3, r1
 8009062:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800906e:	681a      	ldr	r2, [r3, #0]
 8009070:	78fb      	ldrb	r3, [r7, #3]
 8009072:	68f9      	ldr	r1, [r7, #12]
 8009074:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009078:	4313      	orrs	r3, r2
 800907a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800907c:	2300      	movs	r3, #0
}
 800907e:	4618      	mov	r0, r3
 8009080:	3714      	adds	r7, #20
 8009082:	46bd      	mov	sp, r7
 8009084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009088:	4770      	bx	lr

0800908a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800908a:	b480      	push	{r7}
 800908c:	b087      	sub	sp, #28
 800908e:	af00      	add	r7, sp, #0
 8009090:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009096:	693b      	ldr	r3, [r7, #16]
 8009098:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800909c:	689b      	ldr	r3, [r3, #8]
 800909e:	f003 0306 	and.w	r3, r3, #6
 80090a2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d102      	bne.n	80090b0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80090aa:	2300      	movs	r3, #0
 80090ac:	75fb      	strb	r3, [r7, #23]
 80090ae:	e00a      	b.n	80090c6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	2b02      	cmp	r3, #2
 80090b4:	d002      	beq.n	80090bc <USB_GetDevSpeed+0x32>
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	2b06      	cmp	r3, #6
 80090ba:	d102      	bne.n	80090c2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80090bc:	2302      	movs	r3, #2
 80090be:	75fb      	strb	r3, [r7, #23]
 80090c0:	e001      	b.n	80090c6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80090c2:	230f      	movs	r3, #15
 80090c4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80090c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80090c8:	4618      	mov	r0, r3
 80090ca:	371c      	adds	r7, #28
 80090cc:	46bd      	mov	sp, r7
 80090ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d2:	4770      	bx	lr

080090d4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80090d4:	b480      	push	{r7}
 80090d6:	b085      	sub	sp, #20
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
 80090dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	781b      	ldrb	r3, [r3, #0]
 80090e6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	785b      	ldrb	r3, [r3, #1]
 80090ec:	2b01      	cmp	r3, #1
 80090ee:	d139      	bne.n	8009164 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090f6:	69da      	ldr	r2, [r3, #28]
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	781b      	ldrb	r3, [r3, #0]
 80090fc:	f003 030f 	and.w	r3, r3, #15
 8009100:	2101      	movs	r1, #1
 8009102:	fa01 f303 	lsl.w	r3, r1, r3
 8009106:	b29b      	uxth	r3, r3
 8009108:	68f9      	ldr	r1, [r7, #12]
 800910a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800910e:	4313      	orrs	r3, r2
 8009110:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009112:	68bb      	ldr	r3, [r7, #8]
 8009114:	015a      	lsls	r2, r3, #5
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	4413      	add	r3, r2
 800911a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009124:	2b00      	cmp	r3, #0
 8009126:	d153      	bne.n	80091d0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009128:	68bb      	ldr	r3, [r7, #8]
 800912a:	015a      	lsls	r2, r3, #5
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	4413      	add	r3, r2
 8009130:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009134:	681a      	ldr	r2, [r3, #0]
 8009136:	683b      	ldr	r3, [r7, #0]
 8009138:	689b      	ldr	r3, [r3, #8]
 800913a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	78db      	ldrb	r3, [r3, #3]
 8009142:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009144:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009146:	68bb      	ldr	r3, [r7, #8]
 8009148:	059b      	lsls	r3, r3, #22
 800914a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800914c:	431a      	orrs	r2, r3
 800914e:	68bb      	ldr	r3, [r7, #8]
 8009150:	0159      	lsls	r1, r3, #5
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	440b      	add	r3, r1
 8009156:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800915a:	4619      	mov	r1, r3
 800915c:	4b20      	ldr	r3, [pc, #128]	; (80091e0 <USB_ActivateEndpoint+0x10c>)
 800915e:	4313      	orrs	r3, r2
 8009160:	600b      	str	r3, [r1, #0]
 8009162:	e035      	b.n	80091d0 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800916a:	69da      	ldr	r2, [r3, #28]
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	781b      	ldrb	r3, [r3, #0]
 8009170:	f003 030f 	and.w	r3, r3, #15
 8009174:	2101      	movs	r1, #1
 8009176:	fa01 f303 	lsl.w	r3, r1, r3
 800917a:	041b      	lsls	r3, r3, #16
 800917c:	68f9      	ldr	r1, [r7, #12]
 800917e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009182:	4313      	orrs	r3, r2
 8009184:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009186:	68bb      	ldr	r3, [r7, #8]
 8009188:	015a      	lsls	r2, r3, #5
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	4413      	add	r3, r2
 800918e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009198:	2b00      	cmp	r3, #0
 800919a:	d119      	bne.n	80091d0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800919c:	68bb      	ldr	r3, [r7, #8]
 800919e:	015a      	lsls	r2, r3, #5
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	4413      	add	r3, r2
 80091a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091a8:	681a      	ldr	r2, [r3, #0]
 80091aa:	683b      	ldr	r3, [r7, #0]
 80091ac:	689b      	ldr	r3, [r3, #8]
 80091ae:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	78db      	ldrb	r3, [r3, #3]
 80091b6:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80091b8:	430b      	orrs	r3, r1
 80091ba:	431a      	orrs	r2, r3
 80091bc:	68bb      	ldr	r3, [r7, #8]
 80091be:	0159      	lsls	r1, r3, #5
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	440b      	add	r3, r1
 80091c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091c8:	4619      	mov	r1, r3
 80091ca:	4b05      	ldr	r3, [pc, #20]	; (80091e0 <USB_ActivateEndpoint+0x10c>)
 80091cc:	4313      	orrs	r3, r2
 80091ce:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80091d0:	2300      	movs	r3, #0
}
 80091d2:	4618      	mov	r0, r3
 80091d4:	3714      	adds	r7, #20
 80091d6:	46bd      	mov	sp, r7
 80091d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091dc:	4770      	bx	lr
 80091de:	bf00      	nop
 80091e0:	10008000 	.word	0x10008000

080091e4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80091e4:	b480      	push	{r7}
 80091e6:	b085      	sub	sp, #20
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
 80091ec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	781b      	ldrb	r3, [r3, #0]
 80091f6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	785b      	ldrb	r3, [r3, #1]
 80091fc:	2b01      	cmp	r3, #1
 80091fe:	d161      	bne.n	80092c4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009200:	68bb      	ldr	r3, [r7, #8]
 8009202:	015a      	lsls	r2, r3, #5
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	4413      	add	r3, r2
 8009208:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009212:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009216:	d11f      	bne.n	8009258 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009218:	68bb      	ldr	r3, [r7, #8]
 800921a:	015a      	lsls	r2, r3, #5
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	4413      	add	r3, r2
 8009220:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	68ba      	ldr	r2, [r7, #8]
 8009228:	0151      	lsls	r1, r2, #5
 800922a:	68fa      	ldr	r2, [r7, #12]
 800922c:	440a      	add	r2, r1
 800922e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009232:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009236:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009238:	68bb      	ldr	r3, [r7, #8]
 800923a:	015a      	lsls	r2, r3, #5
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	4413      	add	r3, r2
 8009240:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	68ba      	ldr	r2, [r7, #8]
 8009248:	0151      	lsls	r1, r2, #5
 800924a:	68fa      	ldr	r2, [r7, #12]
 800924c:	440a      	add	r2, r1
 800924e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009252:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009256:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800925e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	781b      	ldrb	r3, [r3, #0]
 8009264:	f003 030f 	and.w	r3, r3, #15
 8009268:	2101      	movs	r1, #1
 800926a:	fa01 f303 	lsl.w	r3, r1, r3
 800926e:	b29b      	uxth	r3, r3
 8009270:	43db      	mvns	r3, r3
 8009272:	68f9      	ldr	r1, [r7, #12]
 8009274:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009278:	4013      	ands	r3, r2
 800927a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009282:	69da      	ldr	r2, [r3, #28]
 8009284:	683b      	ldr	r3, [r7, #0]
 8009286:	781b      	ldrb	r3, [r3, #0]
 8009288:	f003 030f 	and.w	r3, r3, #15
 800928c:	2101      	movs	r1, #1
 800928e:	fa01 f303 	lsl.w	r3, r1, r3
 8009292:	b29b      	uxth	r3, r3
 8009294:	43db      	mvns	r3, r3
 8009296:	68f9      	ldr	r1, [r7, #12]
 8009298:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800929c:	4013      	ands	r3, r2
 800929e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80092a0:	68bb      	ldr	r3, [r7, #8]
 80092a2:	015a      	lsls	r2, r3, #5
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	4413      	add	r3, r2
 80092a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092ac:	681a      	ldr	r2, [r3, #0]
 80092ae:	68bb      	ldr	r3, [r7, #8]
 80092b0:	0159      	lsls	r1, r3, #5
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	440b      	add	r3, r1
 80092b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092ba:	4619      	mov	r1, r3
 80092bc:	4b35      	ldr	r3, [pc, #212]	; (8009394 <USB_DeactivateEndpoint+0x1b0>)
 80092be:	4013      	ands	r3, r2
 80092c0:	600b      	str	r3, [r1, #0]
 80092c2:	e060      	b.n	8009386 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80092c4:	68bb      	ldr	r3, [r7, #8]
 80092c6:	015a      	lsls	r2, r3, #5
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	4413      	add	r3, r2
 80092cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80092d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80092da:	d11f      	bne.n	800931c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80092dc:	68bb      	ldr	r3, [r7, #8]
 80092de:	015a      	lsls	r2, r3, #5
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	4413      	add	r3, r2
 80092e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	68ba      	ldr	r2, [r7, #8]
 80092ec:	0151      	lsls	r1, r2, #5
 80092ee:	68fa      	ldr	r2, [r7, #12]
 80092f0:	440a      	add	r2, r1
 80092f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80092f6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80092fa:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80092fc:	68bb      	ldr	r3, [r7, #8]
 80092fe:	015a      	lsls	r2, r3, #5
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	4413      	add	r3, r2
 8009304:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	68ba      	ldr	r2, [r7, #8]
 800930c:	0151      	lsls	r1, r2, #5
 800930e:	68fa      	ldr	r2, [r7, #12]
 8009310:	440a      	add	r2, r1
 8009312:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009316:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800931a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009322:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009324:	683b      	ldr	r3, [r7, #0]
 8009326:	781b      	ldrb	r3, [r3, #0]
 8009328:	f003 030f 	and.w	r3, r3, #15
 800932c:	2101      	movs	r1, #1
 800932e:	fa01 f303 	lsl.w	r3, r1, r3
 8009332:	041b      	lsls	r3, r3, #16
 8009334:	43db      	mvns	r3, r3
 8009336:	68f9      	ldr	r1, [r7, #12]
 8009338:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800933c:	4013      	ands	r3, r2
 800933e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009346:	69da      	ldr	r2, [r3, #28]
 8009348:	683b      	ldr	r3, [r7, #0]
 800934a:	781b      	ldrb	r3, [r3, #0]
 800934c:	f003 030f 	and.w	r3, r3, #15
 8009350:	2101      	movs	r1, #1
 8009352:	fa01 f303 	lsl.w	r3, r1, r3
 8009356:	041b      	lsls	r3, r3, #16
 8009358:	43db      	mvns	r3, r3
 800935a:	68f9      	ldr	r1, [r7, #12]
 800935c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009360:	4013      	ands	r3, r2
 8009362:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009364:	68bb      	ldr	r3, [r7, #8]
 8009366:	015a      	lsls	r2, r3, #5
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	4413      	add	r3, r2
 800936c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009370:	681a      	ldr	r2, [r3, #0]
 8009372:	68bb      	ldr	r3, [r7, #8]
 8009374:	0159      	lsls	r1, r3, #5
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	440b      	add	r3, r1
 800937a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800937e:	4619      	mov	r1, r3
 8009380:	4b05      	ldr	r3, [pc, #20]	; (8009398 <USB_DeactivateEndpoint+0x1b4>)
 8009382:	4013      	ands	r3, r2
 8009384:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009386:	2300      	movs	r3, #0
}
 8009388:	4618      	mov	r0, r3
 800938a:	3714      	adds	r7, #20
 800938c:	46bd      	mov	sp, r7
 800938e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009392:	4770      	bx	lr
 8009394:	ec337800 	.word	0xec337800
 8009398:	eff37800 	.word	0xeff37800

0800939c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b08a      	sub	sp, #40	; 0x28
 80093a0:	af02      	add	r7, sp, #8
 80093a2:	60f8      	str	r0, [r7, #12]
 80093a4:	60b9      	str	r1, [r7, #8]
 80093a6:	4613      	mov	r3, r2
 80093a8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80093ae:	68bb      	ldr	r3, [r7, #8]
 80093b0:	781b      	ldrb	r3, [r3, #0]
 80093b2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80093b4:	68bb      	ldr	r3, [r7, #8]
 80093b6:	785b      	ldrb	r3, [r3, #1]
 80093b8:	2b01      	cmp	r3, #1
 80093ba:	f040 8163 	bne.w	8009684 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80093be:	68bb      	ldr	r3, [r7, #8]
 80093c0:	695b      	ldr	r3, [r3, #20]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d132      	bne.n	800942c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80093c6:	69bb      	ldr	r3, [r7, #24]
 80093c8:	015a      	lsls	r2, r3, #5
 80093ca:	69fb      	ldr	r3, [r7, #28]
 80093cc:	4413      	add	r3, r2
 80093ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093d2:	691a      	ldr	r2, [r3, #16]
 80093d4:	69bb      	ldr	r3, [r7, #24]
 80093d6:	0159      	lsls	r1, r3, #5
 80093d8:	69fb      	ldr	r3, [r7, #28]
 80093da:	440b      	add	r3, r1
 80093dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093e0:	4619      	mov	r1, r3
 80093e2:	4ba5      	ldr	r3, [pc, #660]	; (8009678 <USB_EPStartXfer+0x2dc>)
 80093e4:	4013      	ands	r3, r2
 80093e6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80093e8:	69bb      	ldr	r3, [r7, #24]
 80093ea:	015a      	lsls	r2, r3, #5
 80093ec:	69fb      	ldr	r3, [r7, #28]
 80093ee:	4413      	add	r3, r2
 80093f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093f4:	691b      	ldr	r3, [r3, #16]
 80093f6:	69ba      	ldr	r2, [r7, #24]
 80093f8:	0151      	lsls	r1, r2, #5
 80093fa:	69fa      	ldr	r2, [r7, #28]
 80093fc:	440a      	add	r2, r1
 80093fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009402:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009406:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009408:	69bb      	ldr	r3, [r7, #24]
 800940a:	015a      	lsls	r2, r3, #5
 800940c:	69fb      	ldr	r3, [r7, #28]
 800940e:	4413      	add	r3, r2
 8009410:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009414:	691a      	ldr	r2, [r3, #16]
 8009416:	69bb      	ldr	r3, [r7, #24]
 8009418:	0159      	lsls	r1, r3, #5
 800941a:	69fb      	ldr	r3, [r7, #28]
 800941c:	440b      	add	r3, r1
 800941e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009422:	4619      	mov	r1, r3
 8009424:	4b95      	ldr	r3, [pc, #596]	; (800967c <USB_EPStartXfer+0x2e0>)
 8009426:	4013      	ands	r3, r2
 8009428:	610b      	str	r3, [r1, #16]
 800942a:	e074      	b.n	8009516 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800942c:	69bb      	ldr	r3, [r7, #24]
 800942e:	015a      	lsls	r2, r3, #5
 8009430:	69fb      	ldr	r3, [r7, #28]
 8009432:	4413      	add	r3, r2
 8009434:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009438:	691a      	ldr	r2, [r3, #16]
 800943a:	69bb      	ldr	r3, [r7, #24]
 800943c:	0159      	lsls	r1, r3, #5
 800943e:	69fb      	ldr	r3, [r7, #28]
 8009440:	440b      	add	r3, r1
 8009442:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009446:	4619      	mov	r1, r3
 8009448:	4b8c      	ldr	r3, [pc, #560]	; (800967c <USB_EPStartXfer+0x2e0>)
 800944a:	4013      	ands	r3, r2
 800944c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800944e:	69bb      	ldr	r3, [r7, #24]
 8009450:	015a      	lsls	r2, r3, #5
 8009452:	69fb      	ldr	r3, [r7, #28]
 8009454:	4413      	add	r3, r2
 8009456:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800945a:	691a      	ldr	r2, [r3, #16]
 800945c:	69bb      	ldr	r3, [r7, #24]
 800945e:	0159      	lsls	r1, r3, #5
 8009460:	69fb      	ldr	r3, [r7, #28]
 8009462:	440b      	add	r3, r1
 8009464:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009468:	4619      	mov	r1, r3
 800946a:	4b83      	ldr	r3, [pc, #524]	; (8009678 <USB_EPStartXfer+0x2dc>)
 800946c:	4013      	ands	r3, r2
 800946e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8009470:	69bb      	ldr	r3, [r7, #24]
 8009472:	015a      	lsls	r2, r3, #5
 8009474:	69fb      	ldr	r3, [r7, #28]
 8009476:	4413      	add	r3, r2
 8009478:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800947c:	691a      	ldr	r2, [r3, #16]
 800947e:	68bb      	ldr	r3, [r7, #8]
 8009480:	6959      	ldr	r1, [r3, #20]
 8009482:	68bb      	ldr	r3, [r7, #8]
 8009484:	689b      	ldr	r3, [r3, #8]
 8009486:	440b      	add	r3, r1
 8009488:	1e59      	subs	r1, r3, #1
 800948a:	68bb      	ldr	r3, [r7, #8]
 800948c:	689b      	ldr	r3, [r3, #8]
 800948e:	fbb1 f3f3 	udiv	r3, r1, r3
 8009492:	04d9      	lsls	r1, r3, #19
 8009494:	4b7a      	ldr	r3, [pc, #488]	; (8009680 <USB_EPStartXfer+0x2e4>)
 8009496:	400b      	ands	r3, r1
 8009498:	69b9      	ldr	r1, [r7, #24]
 800949a:	0148      	lsls	r0, r1, #5
 800949c:	69f9      	ldr	r1, [r7, #28]
 800949e:	4401      	add	r1, r0
 80094a0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80094a4:	4313      	orrs	r3, r2
 80094a6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80094a8:	69bb      	ldr	r3, [r7, #24]
 80094aa:	015a      	lsls	r2, r3, #5
 80094ac:	69fb      	ldr	r3, [r7, #28]
 80094ae:	4413      	add	r3, r2
 80094b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094b4:	691a      	ldr	r2, [r3, #16]
 80094b6:	68bb      	ldr	r3, [r7, #8]
 80094b8:	695b      	ldr	r3, [r3, #20]
 80094ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80094be:	69b9      	ldr	r1, [r7, #24]
 80094c0:	0148      	lsls	r0, r1, #5
 80094c2:	69f9      	ldr	r1, [r7, #28]
 80094c4:	4401      	add	r1, r0
 80094c6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80094ca:	4313      	orrs	r3, r2
 80094cc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80094ce:	68bb      	ldr	r3, [r7, #8]
 80094d0:	78db      	ldrb	r3, [r3, #3]
 80094d2:	2b01      	cmp	r3, #1
 80094d4:	d11f      	bne.n	8009516 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80094d6:	69bb      	ldr	r3, [r7, #24]
 80094d8:	015a      	lsls	r2, r3, #5
 80094da:	69fb      	ldr	r3, [r7, #28]
 80094dc:	4413      	add	r3, r2
 80094de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094e2:	691b      	ldr	r3, [r3, #16]
 80094e4:	69ba      	ldr	r2, [r7, #24]
 80094e6:	0151      	lsls	r1, r2, #5
 80094e8:	69fa      	ldr	r2, [r7, #28]
 80094ea:	440a      	add	r2, r1
 80094ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80094f0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80094f4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80094f6:	69bb      	ldr	r3, [r7, #24]
 80094f8:	015a      	lsls	r2, r3, #5
 80094fa:	69fb      	ldr	r3, [r7, #28]
 80094fc:	4413      	add	r3, r2
 80094fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009502:	691b      	ldr	r3, [r3, #16]
 8009504:	69ba      	ldr	r2, [r7, #24]
 8009506:	0151      	lsls	r1, r2, #5
 8009508:	69fa      	ldr	r2, [r7, #28]
 800950a:	440a      	add	r2, r1
 800950c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009510:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009514:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8009516:	79fb      	ldrb	r3, [r7, #7]
 8009518:	2b01      	cmp	r3, #1
 800951a:	d14b      	bne.n	80095b4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800951c:	68bb      	ldr	r3, [r7, #8]
 800951e:	691b      	ldr	r3, [r3, #16]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d009      	beq.n	8009538 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009524:	69bb      	ldr	r3, [r7, #24]
 8009526:	015a      	lsls	r2, r3, #5
 8009528:	69fb      	ldr	r3, [r7, #28]
 800952a:	4413      	add	r3, r2
 800952c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009530:	461a      	mov	r2, r3
 8009532:	68bb      	ldr	r3, [r7, #8]
 8009534:	691b      	ldr	r3, [r3, #16]
 8009536:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009538:	68bb      	ldr	r3, [r7, #8]
 800953a:	78db      	ldrb	r3, [r3, #3]
 800953c:	2b01      	cmp	r3, #1
 800953e:	d128      	bne.n	8009592 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009540:	69fb      	ldr	r3, [r7, #28]
 8009542:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009546:	689b      	ldr	r3, [r3, #8]
 8009548:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800954c:	2b00      	cmp	r3, #0
 800954e:	d110      	bne.n	8009572 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009550:	69bb      	ldr	r3, [r7, #24]
 8009552:	015a      	lsls	r2, r3, #5
 8009554:	69fb      	ldr	r3, [r7, #28]
 8009556:	4413      	add	r3, r2
 8009558:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	69ba      	ldr	r2, [r7, #24]
 8009560:	0151      	lsls	r1, r2, #5
 8009562:	69fa      	ldr	r2, [r7, #28]
 8009564:	440a      	add	r2, r1
 8009566:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800956a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800956e:	6013      	str	r3, [r2, #0]
 8009570:	e00f      	b.n	8009592 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009572:	69bb      	ldr	r3, [r7, #24]
 8009574:	015a      	lsls	r2, r3, #5
 8009576:	69fb      	ldr	r3, [r7, #28]
 8009578:	4413      	add	r3, r2
 800957a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	69ba      	ldr	r2, [r7, #24]
 8009582:	0151      	lsls	r1, r2, #5
 8009584:	69fa      	ldr	r2, [r7, #28]
 8009586:	440a      	add	r2, r1
 8009588:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800958c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009590:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009592:	69bb      	ldr	r3, [r7, #24]
 8009594:	015a      	lsls	r2, r3, #5
 8009596:	69fb      	ldr	r3, [r7, #28]
 8009598:	4413      	add	r3, r2
 800959a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	69ba      	ldr	r2, [r7, #24]
 80095a2:	0151      	lsls	r1, r2, #5
 80095a4:	69fa      	ldr	r2, [r7, #28]
 80095a6:	440a      	add	r2, r1
 80095a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095ac:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80095b0:	6013      	str	r3, [r2, #0]
 80095b2:	e133      	b.n	800981c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80095b4:	69bb      	ldr	r3, [r7, #24]
 80095b6:	015a      	lsls	r2, r3, #5
 80095b8:	69fb      	ldr	r3, [r7, #28]
 80095ba:	4413      	add	r3, r2
 80095bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	69ba      	ldr	r2, [r7, #24]
 80095c4:	0151      	lsls	r1, r2, #5
 80095c6:	69fa      	ldr	r2, [r7, #28]
 80095c8:	440a      	add	r2, r1
 80095ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095ce:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80095d2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80095d4:	68bb      	ldr	r3, [r7, #8]
 80095d6:	78db      	ldrb	r3, [r3, #3]
 80095d8:	2b01      	cmp	r3, #1
 80095da:	d015      	beq.n	8009608 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80095dc:	68bb      	ldr	r3, [r7, #8]
 80095de:	695b      	ldr	r3, [r3, #20]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	f000 811b 	beq.w	800981c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80095e6:	69fb      	ldr	r3, [r7, #28]
 80095e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80095ee:	68bb      	ldr	r3, [r7, #8]
 80095f0:	781b      	ldrb	r3, [r3, #0]
 80095f2:	f003 030f 	and.w	r3, r3, #15
 80095f6:	2101      	movs	r1, #1
 80095f8:	fa01 f303 	lsl.w	r3, r1, r3
 80095fc:	69f9      	ldr	r1, [r7, #28]
 80095fe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009602:	4313      	orrs	r3, r2
 8009604:	634b      	str	r3, [r1, #52]	; 0x34
 8009606:	e109      	b.n	800981c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009608:	69fb      	ldr	r3, [r7, #28]
 800960a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800960e:	689b      	ldr	r3, [r3, #8]
 8009610:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009614:	2b00      	cmp	r3, #0
 8009616:	d110      	bne.n	800963a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009618:	69bb      	ldr	r3, [r7, #24]
 800961a:	015a      	lsls	r2, r3, #5
 800961c:	69fb      	ldr	r3, [r7, #28]
 800961e:	4413      	add	r3, r2
 8009620:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	69ba      	ldr	r2, [r7, #24]
 8009628:	0151      	lsls	r1, r2, #5
 800962a:	69fa      	ldr	r2, [r7, #28]
 800962c:	440a      	add	r2, r1
 800962e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009632:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009636:	6013      	str	r3, [r2, #0]
 8009638:	e00f      	b.n	800965a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800963a:	69bb      	ldr	r3, [r7, #24]
 800963c:	015a      	lsls	r2, r3, #5
 800963e:	69fb      	ldr	r3, [r7, #28]
 8009640:	4413      	add	r3, r2
 8009642:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	69ba      	ldr	r2, [r7, #24]
 800964a:	0151      	lsls	r1, r2, #5
 800964c:	69fa      	ldr	r2, [r7, #28]
 800964e:	440a      	add	r2, r1
 8009650:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009654:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009658:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800965a:	68bb      	ldr	r3, [r7, #8]
 800965c:	68d9      	ldr	r1, [r3, #12]
 800965e:	68bb      	ldr	r3, [r7, #8]
 8009660:	781a      	ldrb	r2, [r3, #0]
 8009662:	68bb      	ldr	r3, [r7, #8]
 8009664:	695b      	ldr	r3, [r3, #20]
 8009666:	b298      	uxth	r0, r3
 8009668:	79fb      	ldrb	r3, [r7, #7]
 800966a:	9300      	str	r3, [sp, #0]
 800966c:	4603      	mov	r3, r0
 800966e:	68f8      	ldr	r0, [r7, #12]
 8009670:	f000 fa38 	bl	8009ae4 <USB_WritePacket>
 8009674:	e0d2      	b.n	800981c <USB_EPStartXfer+0x480>
 8009676:	bf00      	nop
 8009678:	e007ffff 	.word	0xe007ffff
 800967c:	fff80000 	.word	0xfff80000
 8009680:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009684:	69bb      	ldr	r3, [r7, #24]
 8009686:	015a      	lsls	r2, r3, #5
 8009688:	69fb      	ldr	r3, [r7, #28]
 800968a:	4413      	add	r3, r2
 800968c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009690:	691a      	ldr	r2, [r3, #16]
 8009692:	69bb      	ldr	r3, [r7, #24]
 8009694:	0159      	lsls	r1, r3, #5
 8009696:	69fb      	ldr	r3, [r7, #28]
 8009698:	440b      	add	r3, r1
 800969a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800969e:	4619      	mov	r1, r3
 80096a0:	4b61      	ldr	r3, [pc, #388]	; (8009828 <USB_EPStartXfer+0x48c>)
 80096a2:	4013      	ands	r3, r2
 80096a4:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80096a6:	69bb      	ldr	r3, [r7, #24]
 80096a8:	015a      	lsls	r2, r3, #5
 80096aa:	69fb      	ldr	r3, [r7, #28]
 80096ac:	4413      	add	r3, r2
 80096ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096b2:	691a      	ldr	r2, [r3, #16]
 80096b4:	69bb      	ldr	r3, [r7, #24]
 80096b6:	0159      	lsls	r1, r3, #5
 80096b8:	69fb      	ldr	r3, [r7, #28]
 80096ba:	440b      	add	r3, r1
 80096bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096c0:	4619      	mov	r1, r3
 80096c2:	4b5a      	ldr	r3, [pc, #360]	; (800982c <USB_EPStartXfer+0x490>)
 80096c4:	4013      	ands	r3, r2
 80096c6:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 80096c8:	68bb      	ldr	r3, [r7, #8]
 80096ca:	695b      	ldr	r3, [r3, #20]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d123      	bne.n	8009718 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80096d0:	69bb      	ldr	r3, [r7, #24]
 80096d2:	015a      	lsls	r2, r3, #5
 80096d4:	69fb      	ldr	r3, [r7, #28]
 80096d6:	4413      	add	r3, r2
 80096d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096dc:	691a      	ldr	r2, [r3, #16]
 80096de:	68bb      	ldr	r3, [r7, #8]
 80096e0:	689b      	ldr	r3, [r3, #8]
 80096e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80096e6:	69b9      	ldr	r1, [r7, #24]
 80096e8:	0148      	lsls	r0, r1, #5
 80096ea:	69f9      	ldr	r1, [r7, #28]
 80096ec:	4401      	add	r1, r0
 80096ee:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80096f2:	4313      	orrs	r3, r2
 80096f4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80096f6:	69bb      	ldr	r3, [r7, #24]
 80096f8:	015a      	lsls	r2, r3, #5
 80096fa:	69fb      	ldr	r3, [r7, #28]
 80096fc:	4413      	add	r3, r2
 80096fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009702:	691b      	ldr	r3, [r3, #16]
 8009704:	69ba      	ldr	r2, [r7, #24]
 8009706:	0151      	lsls	r1, r2, #5
 8009708:	69fa      	ldr	r2, [r7, #28]
 800970a:	440a      	add	r2, r1
 800970c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009710:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009714:	6113      	str	r3, [r2, #16]
 8009716:	e033      	b.n	8009780 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009718:	68bb      	ldr	r3, [r7, #8]
 800971a:	695a      	ldr	r2, [r3, #20]
 800971c:	68bb      	ldr	r3, [r7, #8]
 800971e:	689b      	ldr	r3, [r3, #8]
 8009720:	4413      	add	r3, r2
 8009722:	1e5a      	subs	r2, r3, #1
 8009724:	68bb      	ldr	r3, [r7, #8]
 8009726:	689b      	ldr	r3, [r3, #8]
 8009728:	fbb2 f3f3 	udiv	r3, r2, r3
 800972c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800972e:	69bb      	ldr	r3, [r7, #24]
 8009730:	015a      	lsls	r2, r3, #5
 8009732:	69fb      	ldr	r3, [r7, #28]
 8009734:	4413      	add	r3, r2
 8009736:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800973a:	691a      	ldr	r2, [r3, #16]
 800973c:	8afb      	ldrh	r3, [r7, #22]
 800973e:	04d9      	lsls	r1, r3, #19
 8009740:	4b3b      	ldr	r3, [pc, #236]	; (8009830 <USB_EPStartXfer+0x494>)
 8009742:	400b      	ands	r3, r1
 8009744:	69b9      	ldr	r1, [r7, #24]
 8009746:	0148      	lsls	r0, r1, #5
 8009748:	69f9      	ldr	r1, [r7, #28]
 800974a:	4401      	add	r1, r0
 800974c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009750:	4313      	orrs	r3, r2
 8009752:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8009754:	69bb      	ldr	r3, [r7, #24]
 8009756:	015a      	lsls	r2, r3, #5
 8009758:	69fb      	ldr	r3, [r7, #28]
 800975a:	4413      	add	r3, r2
 800975c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009760:	691a      	ldr	r2, [r3, #16]
 8009762:	68bb      	ldr	r3, [r7, #8]
 8009764:	689b      	ldr	r3, [r3, #8]
 8009766:	8af9      	ldrh	r1, [r7, #22]
 8009768:	fb01 f303 	mul.w	r3, r1, r3
 800976c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009770:	69b9      	ldr	r1, [r7, #24]
 8009772:	0148      	lsls	r0, r1, #5
 8009774:	69f9      	ldr	r1, [r7, #28]
 8009776:	4401      	add	r1, r0
 8009778:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800977c:	4313      	orrs	r3, r2
 800977e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009780:	79fb      	ldrb	r3, [r7, #7]
 8009782:	2b01      	cmp	r3, #1
 8009784:	d10d      	bne.n	80097a2 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009786:	68bb      	ldr	r3, [r7, #8]
 8009788:	68db      	ldr	r3, [r3, #12]
 800978a:	2b00      	cmp	r3, #0
 800978c:	d009      	beq.n	80097a2 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800978e:	68bb      	ldr	r3, [r7, #8]
 8009790:	68d9      	ldr	r1, [r3, #12]
 8009792:	69bb      	ldr	r3, [r7, #24]
 8009794:	015a      	lsls	r2, r3, #5
 8009796:	69fb      	ldr	r3, [r7, #28]
 8009798:	4413      	add	r3, r2
 800979a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800979e:	460a      	mov	r2, r1
 80097a0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80097a2:	68bb      	ldr	r3, [r7, #8]
 80097a4:	78db      	ldrb	r3, [r3, #3]
 80097a6:	2b01      	cmp	r3, #1
 80097a8:	d128      	bne.n	80097fc <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80097aa:	69fb      	ldr	r3, [r7, #28]
 80097ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097b0:	689b      	ldr	r3, [r3, #8]
 80097b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d110      	bne.n	80097dc <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80097ba:	69bb      	ldr	r3, [r7, #24]
 80097bc:	015a      	lsls	r2, r3, #5
 80097be:	69fb      	ldr	r3, [r7, #28]
 80097c0:	4413      	add	r3, r2
 80097c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	69ba      	ldr	r2, [r7, #24]
 80097ca:	0151      	lsls	r1, r2, #5
 80097cc:	69fa      	ldr	r2, [r7, #28]
 80097ce:	440a      	add	r2, r1
 80097d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80097d4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80097d8:	6013      	str	r3, [r2, #0]
 80097da:	e00f      	b.n	80097fc <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80097dc:	69bb      	ldr	r3, [r7, #24]
 80097de:	015a      	lsls	r2, r3, #5
 80097e0:	69fb      	ldr	r3, [r7, #28]
 80097e2:	4413      	add	r3, r2
 80097e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	69ba      	ldr	r2, [r7, #24]
 80097ec:	0151      	lsls	r1, r2, #5
 80097ee:	69fa      	ldr	r2, [r7, #28]
 80097f0:	440a      	add	r2, r1
 80097f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80097f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80097fa:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80097fc:	69bb      	ldr	r3, [r7, #24]
 80097fe:	015a      	lsls	r2, r3, #5
 8009800:	69fb      	ldr	r3, [r7, #28]
 8009802:	4413      	add	r3, r2
 8009804:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	69ba      	ldr	r2, [r7, #24]
 800980c:	0151      	lsls	r1, r2, #5
 800980e:	69fa      	ldr	r2, [r7, #28]
 8009810:	440a      	add	r2, r1
 8009812:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009816:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800981a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800981c:	2300      	movs	r3, #0
}
 800981e:	4618      	mov	r0, r3
 8009820:	3720      	adds	r7, #32
 8009822:	46bd      	mov	sp, r7
 8009824:	bd80      	pop	{r7, pc}
 8009826:	bf00      	nop
 8009828:	fff80000 	.word	0xfff80000
 800982c:	e007ffff 	.word	0xe007ffff
 8009830:	1ff80000 	.word	0x1ff80000

08009834 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009834:	b480      	push	{r7}
 8009836:	b087      	sub	sp, #28
 8009838:	af00      	add	r7, sp, #0
 800983a:	60f8      	str	r0, [r7, #12]
 800983c:	60b9      	str	r1, [r7, #8]
 800983e:	4613      	mov	r3, r2
 8009840:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8009846:	68bb      	ldr	r3, [r7, #8]
 8009848:	781b      	ldrb	r3, [r3, #0]
 800984a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800984c:	68bb      	ldr	r3, [r7, #8]
 800984e:	785b      	ldrb	r3, [r3, #1]
 8009850:	2b01      	cmp	r3, #1
 8009852:	f040 80cd 	bne.w	80099f0 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009856:	68bb      	ldr	r3, [r7, #8]
 8009858:	695b      	ldr	r3, [r3, #20]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d132      	bne.n	80098c4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800985e:	693b      	ldr	r3, [r7, #16]
 8009860:	015a      	lsls	r2, r3, #5
 8009862:	697b      	ldr	r3, [r7, #20]
 8009864:	4413      	add	r3, r2
 8009866:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800986a:	691a      	ldr	r2, [r3, #16]
 800986c:	693b      	ldr	r3, [r7, #16]
 800986e:	0159      	lsls	r1, r3, #5
 8009870:	697b      	ldr	r3, [r7, #20]
 8009872:	440b      	add	r3, r1
 8009874:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009878:	4619      	mov	r1, r3
 800987a:	4b98      	ldr	r3, [pc, #608]	; (8009adc <USB_EP0StartXfer+0x2a8>)
 800987c:	4013      	ands	r3, r2
 800987e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009880:	693b      	ldr	r3, [r7, #16]
 8009882:	015a      	lsls	r2, r3, #5
 8009884:	697b      	ldr	r3, [r7, #20]
 8009886:	4413      	add	r3, r2
 8009888:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800988c:	691b      	ldr	r3, [r3, #16]
 800988e:	693a      	ldr	r2, [r7, #16]
 8009890:	0151      	lsls	r1, r2, #5
 8009892:	697a      	ldr	r2, [r7, #20]
 8009894:	440a      	add	r2, r1
 8009896:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800989a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800989e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80098a0:	693b      	ldr	r3, [r7, #16]
 80098a2:	015a      	lsls	r2, r3, #5
 80098a4:	697b      	ldr	r3, [r7, #20]
 80098a6:	4413      	add	r3, r2
 80098a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098ac:	691a      	ldr	r2, [r3, #16]
 80098ae:	693b      	ldr	r3, [r7, #16]
 80098b0:	0159      	lsls	r1, r3, #5
 80098b2:	697b      	ldr	r3, [r7, #20]
 80098b4:	440b      	add	r3, r1
 80098b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098ba:	4619      	mov	r1, r3
 80098bc:	4b88      	ldr	r3, [pc, #544]	; (8009ae0 <USB_EP0StartXfer+0x2ac>)
 80098be:	4013      	ands	r3, r2
 80098c0:	610b      	str	r3, [r1, #16]
 80098c2:	e04e      	b.n	8009962 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80098c4:	693b      	ldr	r3, [r7, #16]
 80098c6:	015a      	lsls	r2, r3, #5
 80098c8:	697b      	ldr	r3, [r7, #20]
 80098ca:	4413      	add	r3, r2
 80098cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098d0:	691a      	ldr	r2, [r3, #16]
 80098d2:	693b      	ldr	r3, [r7, #16]
 80098d4:	0159      	lsls	r1, r3, #5
 80098d6:	697b      	ldr	r3, [r7, #20]
 80098d8:	440b      	add	r3, r1
 80098da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098de:	4619      	mov	r1, r3
 80098e0:	4b7f      	ldr	r3, [pc, #508]	; (8009ae0 <USB_EP0StartXfer+0x2ac>)
 80098e2:	4013      	ands	r3, r2
 80098e4:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80098e6:	693b      	ldr	r3, [r7, #16]
 80098e8:	015a      	lsls	r2, r3, #5
 80098ea:	697b      	ldr	r3, [r7, #20]
 80098ec:	4413      	add	r3, r2
 80098ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098f2:	691a      	ldr	r2, [r3, #16]
 80098f4:	693b      	ldr	r3, [r7, #16]
 80098f6:	0159      	lsls	r1, r3, #5
 80098f8:	697b      	ldr	r3, [r7, #20]
 80098fa:	440b      	add	r3, r1
 80098fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009900:	4619      	mov	r1, r3
 8009902:	4b76      	ldr	r3, [pc, #472]	; (8009adc <USB_EP0StartXfer+0x2a8>)
 8009904:	4013      	ands	r3, r2
 8009906:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8009908:	68bb      	ldr	r3, [r7, #8]
 800990a:	695a      	ldr	r2, [r3, #20]
 800990c:	68bb      	ldr	r3, [r7, #8]
 800990e:	689b      	ldr	r3, [r3, #8]
 8009910:	429a      	cmp	r2, r3
 8009912:	d903      	bls.n	800991c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8009914:	68bb      	ldr	r3, [r7, #8]
 8009916:	689a      	ldr	r2, [r3, #8]
 8009918:	68bb      	ldr	r3, [r7, #8]
 800991a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800991c:	693b      	ldr	r3, [r7, #16]
 800991e:	015a      	lsls	r2, r3, #5
 8009920:	697b      	ldr	r3, [r7, #20]
 8009922:	4413      	add	r3, r2
 8009924:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009928:	691b      	ldr	r3, [r3, #16]
 800992a:	693a      	ldr	r2, [r7, #16]
 800992c:	0151      	lsls	r1, r2, #5
 800992e:	697a      	ldr	r2, [r7, #20]
 8009930:	440a      	add	r2, r1
 8009932:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009936:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800993a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800993c:	693b      	ldr	r3, [r7, #16]
 800993e:	015a      	lsls	r2, r3, #5
 8009940:	697b      	ldr	r3, [r7, #20]
 8009942:	4413      	add	r3, r2
 8009944:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009948:	691a      	ldr	r2, [r3, #16]
 800994a:	68bb      	ldr	r3, [r7, #8]
 800994c:	695b      	ldr	r3, [r3, #20]
 800994e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009952:	6939      	ldr	r1, [r7, #16]
 8009954:	0148      	lsls	r0, r1, #5
 8009956:	6979      	ldr	r1, [r7, #20]
 8009958:	4401      	add	r1, r0
 800995a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800995e:	4313      	orrs	r3, r2
 8009960:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009962:	79fb      	ldrb	r3, [r7, #7]
 8009964:	2b01      	cmp	r3, #1
 8009966:	d11e      	bne.n	80099a6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009968:	68bb      	ldr	r3, [r7, #8]
 800996a:	691b      	ldr	r3, [r3, #16]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d009      	beq.n	8009984 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009970:	693b      	ldr	r3, [r7, #16]
 8009972:	015a      	lsls	r2, r3, #5
 8009974:	697b      	ldr	r3, [r7, #20]
 8009976:	4413      	add	r3, r2
 8009978:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800997c:	461a      	mov	r2, r3
 800997e:	68bb      	ldr	r3, [r7, #8]
 8009980:	691b      	ldr	r3, [r3, #16]
 8009982:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009984:	693b      	ldr	r3, [r7, #16]
 8009986:	015a      	lsls	r2, r3, #5
 8009988:	697b      	ldr	r3, [r7, #20]
 800998a:	4413      	add	r3, r2
 800998c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	693a      	ldr	r2, [r7, #16]
 8009994:	0151      	lsls	r1, r2, #5
 8009996:	697a      	ldr	r2, [r7, #20]
 8009998:	440a      	add	r2, r1
 800999a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800999e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80099a2:	6013      	str	r3, [r2, #0]
 80099a4:	e092      	b.n	8009acc <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80099a6:	693b      	ldr	r3, [r7, #16]
 80099a8:	015a      	lsls	r2, r3, #5
 80099aa:	697b      	ldr	r3, [r7, #20]
 80099ac:	4413      	add	r3, r2
 80099ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	693a      	ldr	r2, [r7, #16]
 80099b6:	0151      	lsls	r1, r2, #5
 80099b8:	697a      	ldr	r2, [r7, #20]
 80099ba:	440a      	add	r2, r1
 80099bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80099c0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80099c4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80099c6:	68bb      	ldr	r3, [r7, #8]
 80099c8:	695b      	ldr	r3, [r3, #20]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d07e      	beq.n	8009acc <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80099ce:	697b      	ldr	r3, [r7, #20]
 80099d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80099d6:	68bb      	ldr	r3, [r7, #8]
 80099d8:	781b      	ldrb	r3, [r3, #0]
 80099da:	f003 030f 	and.w	r3, r3, #15
 80099de:	2101      	movs	r1, #1
 80099e0:	fa01 f303 	lsl.w	r3, r1, r3
 80099e4:	6979      	ldr	r1, [r7, #20]
 80099e6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80099ea:	4313      	orrs	r3, r2
 80099ec:	634b      	str	r3, [r1, #52]	; 0x34
 80099ee:	e06d      	b.n	8009acc <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80099f0:	693b      	ldr	r3, [r7, #16]
 80099f2:	015a      	lsls	r2, r3, #5
 80099f4:	697b      	ldr	r3, [r7, #20]
 80099f6:	4413      	add	r3, r2
 80099f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099fc:	691a      	ldr	r2, [r3, #16]
 80099fe:	693b      	ldr	r3, [r7, #16]
 8009a00:	0159      	lsls	r1, r3, #5
 8009a02:	697b      	ldr	r3, [r7, #20]
 8009a04:	440b      	add	r3, r1
 8009a06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a0a:	4619      	mov	r1, r3
 8009a0c:	4b34      	ldr	r3, [pc, #208]	; (8009ae0 <USB_EP0StartXfer+0x2ac>)
 8009a0e:	4013      	ands	r3, r2
 8009a10:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009a12:	693b      	ldr	r3, [r7, #16]
 8009a14:	015a      	lsls	r2, r3, #5
 8009a16:	697b      	ldr	r3, [r7, #20]
 8009a18:	4413      	add	r3, r2
 8009a1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a1e:	691a      	ldr	r2, [r3, #16]
 8009a20:	693b      	ldr	r3, [r7, #16]
 8009a22:	0159      	lsls	r1, r3, #5
 8009a24:	697b      	ldr	r3, [r7, #20]
 8009a26:	440b      	add	r3, r1
 8009a28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a2c:	4619      	mov	r1, r3
 8009a2e:	4b2b      	ldr	r3, [pc, #172]	; (8009adc <USB_EP0StartXfer+0x2a8>)
 8009a30:	4013      	ands	r3, r2
 8009a32:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8009a34:	68bb      	ldr	r3, [r7, #8]
 8009a36:	695b      	ldr	r3, [r3, #20]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d003      	beq.n	8009a44 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8009a3c:	68bb      	ldr	r3, [r7, #8]
 8009a3e:	689a      	ldr	r2, [r3, #8]
 8009a40:	68bb      	ldr	r3, [r7, #8]
 8009a42:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009a44:	693b      	ldr	r3, [r7, #16]
 8009a46:	015a      	lsls	r2, r3, #5
 8009a48:	697b      	ldr	r3, [r7, #20]
 8009a4a:	4413      	add	r3, r2
 8009a4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a50:	691b      	ldr	r3, [r3, #16]
 8009a52:	693a      	ldr	r2, [r7, #16]
 8009a54:	0151      	lsls	r1, r2, #5
 8009a56:	697a      	ldr	r2, [r7, #20]
 8009a58:	440a      	add	r2, r1
 8009a5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a5e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009a62:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8009a64:	693b      	ldr	r3, [r7, #16]
 8009a66:	015a      	lsls	r2, r3, #5
 8009a68:	697b      	ldr	r3, [r7, #20]
 8009a6a:	4413      	add	r3, r2
 8009a6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a70:	691a      	ldr	r2, [r3, #16]
 8009a72:	68bb      	ldr	r3, [r7, #8]
 8009a74:	689b      	ldr	r3, [r3, #8]
 8009a76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009a7a:	6939      	ldr	r1, [r7, #16]
 8009a7c:	0148      	lsls	r0, r1, #5
 8009a7e:	6979      	ldr	r1, [r7, #20]
 8009a80:	4401      	add	r1, r0
 8009a82:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009a86:	4313      	orrs	r3, r2
 8009a88:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8009a8a:	79fb      	ldrb	r3, [r7, #7]
 8009a8c:	2b01      	cmp	r3, #1
 8009a8e:	d10d      	bne.n	8009aac <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009a90:	68bb      	ldr	r3, [r7, #8]
 8009a92:	68db      	ldr	r3, [r3, #12]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d009      	beq.n	8009aac <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009a98:	68bb      	ldr	r3, [r7, #8]
 8009a9a:	68d9      	ldr	r1, [r3, #12]
 8009a9c:	693b      	ldr	r3, [r7, #16]
 8009a9e:	015a      	lsls	r2, r3, #5
 8009aa0:	697b      	ldr	r3, [r7, #20]
 8009aa2:	4413      	add	r3, r2
 8009aa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009aa8:	460a      	mov	r2, r1
 8009aaa:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009aac:	693b      	ldr	r3, [r7, #16]
 8009aae:	015a      	lsls	r2, r3, #5
 8009ab0:	697b      	ldr	r3, [r7, #20]
 8009ab2:	4413      	add	r3, r2
 8009ab4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	693a      	ldr	r2, [r7, #16]
 8009abc:	0151      	lsls	r1, r2, #5
 8009abe:	697a      	ldr	r2, [r7, #20]
 8009ac0:	440a      	add	r2, r1
 8009ac2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ac6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009aca:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009acc:	2300      	movs	r3, #0
}
 8009ace:	4618      	mov	r0, r3
 8009ad0:	371c      	adds	r7, #28
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad8:	4770      	bx	lr
 8009ada:	bf00      	nop
 8009adc:	e007ffff 	.word	0xe007ffff
 8009ae0:	fff80000 	.word	0xfff80000

08009ae4 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009ae4:	b480      	push	{r7}
 8009ae6:	b089      	sub	sp, #36	; 0x24
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	60f8      	str	r0, [r7, #12]
 8009aec:	60b9      	str	r1, [r7, #8]
 8009aee:	4611      	mov	r1, r2
 8009af0:	461a      	mov	r2, r3
 8009af2:	460b      	mov	r3, r1
 8009af4:	71fb      	strb	r3, [r7, #7]
 8009af6:	4613      	mov	r3, r2
 8009af8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8009afe:	68bb      	ldr	r3, [r7, #8]
 8009b00:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8009b02:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d11a      	bne.n	8009b40 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009b0a:	88bb      	ldrh	r3, [r7, #4]
 8009b0c:	3303      	adds	r3, #3
 8009b0e:	089b      	lsrs	r3, r3, #2
 8009b10:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009b12:	2300      	movs	r3, #0
 8009b14:	61bb      	str	r3, [r7, #24]
 8009b16:	e00f      	b.n	8009b38 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009b18:	79fb      	ldrb	r3, [r7, #7]
 8009b1a:	031a      	lsls	r2, r3, #12
 8009b1c:	697b      	ldr	r3, [r7, #20]
 8009b1e:	4413      	add	r3, r2
 8009b20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b24:	461a      	mov	r2, r3
 8009b26:	69fb      	ldr	r3, [r7, #28]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009b2c:	69fb      	ldr	r3, [r7, #28]
 8009b2e:	3304      	adds	r3, #4
 8009b30:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009b32:	69bb      	ldr	r3, [r7, #24]
 8009b34:	3301      	adds	r3, #1
 8009b36:	61bb      	str	r3, [r7, #24]
 8009b38:	69ba      	ldr	r2, [r7, #24]
 8009b3a:	693b      	ldr	r3, [r7, #16]
 8009b3c:	429a      	cmp	r2, r3
 8009b3e:	d3eb      	bcc.n	8009b18 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009b40:	2300      	movs	r3, #0
}
 8009b42:	4618      	mov	r0, r3
 8009b44:	3724      	adds	r7, #36	; 0x24
 8009b46:	46bd      	mov	sp, r7
 8009b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4c:	4770      	bx	lr

08009b4e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009b4e:	b480      	push	{r7}
 8009b50:	b089      	sub	sp, #36	; 0x24
 8009b52:	af00      	add	r7, sp, #0
 8009b54:	60f8      	str	r0, [r7, #12]
 8009b56:	60b9      	str	r1, [r7, #8]
 8009b58:	4613      	mov	r3, r2
 8009b5a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8009b60:	68bb      	ldr	r3, [r7, #8]
 8009b62:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8009b64:	88fb      	ldrh	r3, [r7, #6]
 8009b66:	3303      	adds	r3, #3
 8009b68:	089b      	lsrs	r3, r3, #2
 8009b6a:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	61bb      	str	r3, [r7, #24]
 8009b70:	e00b      	b.n	8009b8a <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009b72:	697b      	ldr	r3, [r7, #20]
 8009b74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b78:	681a      	ldr	r2, [r3, #0]
 8009b7a:	69fb      	ldr	r3, [r7, #28]
 8009b7c:	601a      	str	r2, [r3, #0]
    pDest++;
 8009b7e:	69fb      	ldr	r3, [r7, #28]
 8009b80:	3304      	adds	r3, #4
 8009b82:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8009b84:	69bb      	ldr	r3, [r7, #24]
 8009b86:	3301      	adds	r3, #1
 8009b88:	61bb      	str	r3, [r7, #24]
 8009b8a:	69ba      	ldr	r2, [r7, #24]
 8009b8c:	693b      	ldr	r3, [r7, #16]
 8009b8e:	429a      	cmp	r2, r3
 8009b90:	d3ef      	bcc.n	8009b72 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8009b92:	69fb      	ldr	r3, [r7, #28]
}
 8009b94:	4618      	mov	r0, r3
 8009b96:	3724      	adds	r7, #36	; 0x24
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9e:	4770      	bx	lr

08009ba0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009ba0:	b480      	push	{r7}
 8009ba2:	b085      	sub	sp, #20
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
 8009ba8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009bae:	683b      	ldr	r3, [r7, #0]
 8009bb0:	781b      	ldrb	r3, [r3, #0]
 8009bb2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009bb4:	683b      	ldr	r3, [r7, #0]
 8009bb6:	785b      	ldrb	r3, [r3, #1]
 8009bb8:	2b01      	cmp	r3, #1
 8009bba:	d12c      	bne.n	8009c16 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009bbc:	68bb      	ldr	r3, [r7, #8]
 8009bbe:	015a      	lsls	r2, r3, #5
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	4413      	add	r3, r2
 8009bc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	db12      	blt.n	8009bf4 <USB_EPSetStall+0x54>
 8009bce:	68bb      	ldr	r3, [r7, #8]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d00f      	beq.n	8009bf4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009bd4:	68bb      	ldr	r3, [r7, #8]
 8009bd6:	015a      	lsls	r2, r3, #5
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	4413      	add	r3, r2
 8009bdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	68ba      	ldr	r2, [r7, #8]
 8009be4:	0151      	lsls	r1, r2, #5
 8009be6:	68fa      	ldr	r2, [r7, #12]
 8009be8:	440a      	add	r2, r1
 8009bea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009bee:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009bf2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009bf4:	68bb      	ldr	r3, [r7, #8]
 8009bf6:	015a      	lsls	r2, r3, #5
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	4413      	add	r3, r2
 8009bfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	68ba      	ldr	r2, [r7, #8]
 8009c04:	0151      	lsls	r1, r2, #5
 8009c06:	68fa      	ldr	r2, [r7, #12]
 8009c08:	440a      	add	r2, r1
 8009c0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c0e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009c12:	6013      	str	r3, [r2, #0]
 8009c14:	e02b      	b.n	8009c6e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009c16:	68bb      	ldr	r3, [r7, #8]
 8009c18:	015a      	lsls	r2, r3, #5
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	4413      	add	r3, r2
 8009c1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	db12      	blt.n	8009c4e <USB_EPSetStall+0xae>
 8009c28:	68bb      	ldr	r3, [r7, #8]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d00f      	beq.n	8009c4e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009c2e:	68bb      	ldr	r3, [r7, #8]
 8009c30:	015a      	lsls	r2, r3, #5
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	4413      	add	r3, r2
 8009c36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	68ba      	ldr	r2, [r7, #8]
 8009c3e:	0151      	lsls	r1, r2, #5
 8009c40:	68fa      	ldr	r2, [r7, #12]
 8009c42:	440a      	add	r2, r1
 8009c44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c48:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009c4c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009c4e:	68bb      	ldr	r3, [r7, #8]
 8009c50:	015a      	lsls	r2, r3, #5
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	4413      	add	r3, r2
 8009c56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	68ba      	ldr	r2, [r7, #8]
 8009c5e:	0151      	lsls	r1, r2, #5
 8009c60:	68fa      	ldr	r2, [r7, #12]
 8009c62:	440a      	add	r2, r1
 8009c64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c68:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009c6c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009c6e:	2300      	movs	r3, #0
}
 8009c70:	4618      	mov	r0, r3
 8009c72:	3714      	adds	r7, #20
 8009c74:	46bd      	mov	sp, r7
 8009c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7a:	4770      	bx	lr

08009c7c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009c7c:	b480      	push	{r7}
 8009c7e:	b085      	sub	sp, #20
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
 8009c84:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009c8a:	683b      	ldr	r3, [r7, #0]
 8009c8c:	781b      	ldrb	r3, [r3, #0]
 8009c8e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009c90:	683b      	ldr	r3, [r7, #0]
 8009c92:	785b      	ldrb	r3, [r3, #1]
 8009c94:	2b01      	cmp	r3, #1
 8009c96:	d128      	bne.n	8009cea <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009c98:	68bb      	ldr	r3, [r7, #8]
 8009c9a:	015a      	lsls	r2, r3, #5
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	4413      	add	r3, r2
 8009ca0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	68ba      	ldr	r2, [r7, #8]
 8009ca8:	0151      	lsls	r1, r2, #5
 8009caa:	68fa      	ldr	r2, [r7, #12]
 8009cac:	440a      	add	r2, r1
 8009cae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009cb2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009cb6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009cb8:	683b      	ldr	r3, [r7, #0]
 8009cba:	78db      	ldrb	r3, [r3, #3]
 8009cbc:	2b03      	cmp	r3, #3
 8009cbe:	d003      	beq.n	8009cc8 <USB_EPClearStall+0x4c>
 8009cc0:	683b      	ldr	r3, [r7, #0]
 8009cc2:	78db      	ldrb	r3, [r3, #3]
 8009cc4:	2b02      	cmp	r3, #2
 8009cc6:	d138      	bne.n	8009d3a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009cc8:	68bb      	ldr	r3, [r7, #8]
 8009cca:	015a      	lsls	r2, r3, #5
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	4413      	add	r3, r2
 8009cd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	68ba      	ldr	r2, [r7, #8]
 8009cd8:	0151      	lsls	r1, r2, #5
 8009cda:	68fa      	ldr	r2, [r7, #12]
 8009cdc:	440a      	add	r2, r1
 8009cde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ce2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009ce6:	6013      	str	r3, [r2, #0]
 8009ce8:	e027      	b.n	8009d3a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009cea:	68bb      	ldr	r3, [r7, #8]
 8009cec:	015a      	lsls	r2, r3, #5
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	4413      	add	r3, r2
 8009cf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	68ba      	ldr	r2, [r7, #8]
 8009cfa:	0151      	lsls	r1, r2, #5
 8009cfc:	68fa      	ldr	r2, [r7, #12]
 8009cfe:	440a      	add	r2, r1
 8009d00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d04:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009d08:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009d0a:	683b      	ldr	r3, [r7, #0]
 8009d0c:	78db      	ldrb	r3, [r3, #3]
 8009d0e:	2b03      	cmp	r3, #3
 8009d10:	d003      	beq.n	8009d1a <USB_EPClearStall+0x9e>
 8009d12:	683b      	ldr	r3, [r7, #0]
 8009d14:	78db      	ldrb	r3, [r3, #3]
 8009d16:	2b02      	cmp	r3, #2
 8009d18:	d10f      	bne.n	8009d3a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009d1a:	68bb      	ldr	r3, [r7, #8]
 8009d1c:	015a      	lsls	r2, r3, #5
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	4413      	add	r3, r2
 8009d22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	68ba      	ldr	r2, [r7, #8]
 8009d2a:	0151      	lsls	r1, r2, #5
 8009d2c:	68fa      	ldr	r2, [r7, #12]
 8009d2e:	440a      	add	r2, r1
 8009d30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009d38:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009d3a:	2300      	movs	r3, #0
}
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	3714      	adds	r7, #20
 8009d40:	46bd      	mov	sp, r7
 8009d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d46:	4770      	bx	lr

08009d48 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009d48:	b480      	push	{r7}
 8009d4a:	b085      	sub	sp, #20
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
 8009d50:	460b      	mov	r3, r1
 8009d52:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	68fa      	ldr	r2, [r7, #12]
 8009d62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009d66:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009d6a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d72:	681a      	ldr	r2, [r3, #0]
 8009d74:	78fb      	ldrb	r3, [r7, #3]
 8009d76:	011b      	lsls	r3, r3, #4
 8009d78:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8009d7c:	68f9      	ldr	r1, [r7, #12]
 8009d7e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009d82:	4313      	orrs	r3, r2
 8009d84:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009d86:	2300      	movs	r3, #0
}
 8009d88:	4618      	mov	r0, r3
 8009d8a:	3714      	adds	r7, #20
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d92:	4770      	bx	lr

08009d94 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009d94:	b580      	push	{r7, lr}
 8009d96:	b084      	sub	sp, #16
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009da6:	685b      	ldr	r3, [r3, #4]
 8009da8:	68fa      	ldr	r2, [r7, #12]
 8009daa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009dae:	f023 0302 	bic.w	r3, r3, #2
 8009db2:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8009db4:	2003      	movs	r0, #3
 8009db6:	f7f7 fc0d 	bl	80015d4 <HAL_Delay>

  return HAL_OK;
 8009dba:	2300      	movs	r3, #0
}
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	3710      	adds	r7, #16
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	bd80      	pop	{r7, pc}

08009dc4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009dc4:	b580      	push	{r7, lr}
 8009dc6:	b084      	sub	sp, #16
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009dd6:	685b      	ldr	r3, [r3, #4]
 8009dd8:	68fa      	ldr	r2, [r7, #12]
 8009dda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009dde:	f043 0302 	orr.w	r3, r3, #2
 8009de2:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8009de4:	2003      	movs	r0, #3
 8009de6:	f7f7 fbf5 	bl	80015d4 <HAL_Delay>

  return HAL_OK;
 8009dea:	2300      	movs	r3, #0
}
 8009dec:	4618      	mov	r0, r3
 8009dee:	3710      	adds	r7, #16
 8009df0:	46bd      	mov	sp, r7
 8009df2:	bd80      	pop	{r7, pc}

08009df4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009df4:	b480      	push	{r7}
 8009df6:	b085      	sub	sp, #20
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	695b      	ldr	r3, [r3, #20]
 8009e00:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	699b      	ldr	r3, [r3, #24]
 8009e06:	68fa      	ldr	r2, [r7, #12]
 8009e08:	4013      	ands	r3, r2
 8009e0a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009e0c:	68fb      	ldr	r3, [r7, #12]
}
 8009e0e:	4618      	mov	r0, r3
 8009e10:	3714      	adds	r7, #20
 8009e12:	46bd      	mov	sp, r7
 8009e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e18:	4770      	bx	lr

08009e1a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009e1a:	b480      	push	{r7}
 8009e1c:	b085      	sub	sp, #20
 8009e1e:	af00      	add	r7, sp, #0
 8009e20:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e2c:	699b      	ldr	r3, [r3, #24]
 8009e2e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e36:	69db      	ldr	r3, [r3, #28]
 8009e38:	68ba      	ldr	r2, [r7, #8]
 8009e3a:	4013      	ands	r3, r2
 8009e3c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009e3e:	68bb      	ldr	r3, [r7, #8]
 8009e40:	0c1b      	lsrs	r3, r3, #16
}
 8009e42:	4618      	mov	r0, r3
 8009e44:	3714      	adds	r7, #20
 8009e46:	46bd      	mov	sp, r7
 8009e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4c:	4770      	bx	lr

08009e4e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009e4e:	b480      	push	{r7}
 8009e50:	b085      	sub	sp, #20
 8009e52:	af00      	add	r7, sp, #0
 8009e54:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e60:	699b      	ldr	r3, [r3, #24]
 8009e62:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e6a:	69db      	ldr	r3, [r3, #28]
 8009e6c:	68ba      	ldr	r2, [r7, #8]
 8009e6e:	4013      	ands	r3, r2
 8009e70:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009e72:	68bb      	ldr	r3, [r7, #8]
 8009e74:	b29b      	uxth	r3, r3
}
 8009e76:	4618      	mov	r0, r3
 8009e78:	3714      	adds	r7, #20
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e80:	4770      	bx	lr

08009e82 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009e82:	b480      	push	{r7}
 8009e84:	b085      	sub	sp, #20
 8009e86:	af00      	add	r7, sp, #0
 8009e88:	6078      	str	r0, [r7, #4]
 8009e8a:	460b      	mov	r3, r1
 8009e8c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009e92:	78fb      	ldrb	r3, [r7, #3]
 8009e94:	015a      	lsls	r2, r3, #5
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	4413      	add	r3, r2
 8009e9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e9e:	689b      	ldr	r3, [r3, #8]
 8009ea0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ea8:	695b      	ldr	r3, [r3, #20]
 8009eaa:	68ba      	ldr	r2, [r7, #8]
 8009eac:	4013      	ands	r3, r2
 8009eae:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009eb0:	68bb      	ldr	r3, [r7, #8]
}
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	3714      	adds	r7, #20
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ebc:	4770      	bx	lr

08009ebe <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009ebe:	b480      	push	{r7}
 8009ec0:	b087      	sub	sp, #28
 8009ec2:	af00      	add	r7, sp, #0
 8009ec4:	6078      	str	r0, [r7, #4]
 8009ec6:	460b      	mov	r3, r1
 8009ec8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009ece:	697b      	ldr	r3, [r7, #20]
 8009ed0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ed4:	691b      	ldr	r3, [r3, #16]
 8009ed6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009ed8:	697b      	ldr	r3, [r7, #20]
 8009eda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ede:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ee0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009ee2:	78fb      	ldrb	r3, [r7, #3]
 8009ee4:	f003 030f 	and.w	r3, r3, #15
 8009ee8:	68fa      	ldr	r2, [r7, #12]
 8009eea:	fa22 f303 	lsr.w	r3, r2, r3
 8009eee:	01db      	lsls	r3, r3, #7
 8009ef0:	b2db      	uxtb	r3, r3
 8009ef2:	693a      	ldr	r2, [r7, #16]
 8009ef4:	4313      	orrs	r3, r2
 8009ef6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009ef8:	78fb      	ldrb	r3, [r7, #3]
 8009efa:	015a      	lsls	r2, r3, #5
 8009efc:	697b      	ldr	r3, [r7, #20]
 8009efe:	4413      	add	r3, r2
 8009f00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f04:	689b      	ldr	r3, [r3, #8]
 8009f06:	693a      	ldr	r2, [r7, #16]
 8009f08:	4013      	ands	r3, r2
 8009f0a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009f0c:	68bb      	ldr	r3, [r7, #8]
}
 8009f0e:	4618      	mov	r0, r3
 8009f10:	371c      	adds	r7, #28
 8009f12:	46bd      	mov	sp, r7
 8009f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f18:	4770      	bx	lr

08009f1a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009f1a:	b480      	push	{r7}
 8009f1c:	b083      	sub	sp, #12
 8009f1e:	af00      	add	r7, sp, #0
 8009f20:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	695b      	ldr	r3, [r3, #20]
 8009f26:	f003 0301 	and.w	r3, r3, #1
}
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	370c      	adds	r7, #12
 8009f2e:	46bd      	mov	sp, r7
 8009f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f34:	4770      	bx	lr
	...

08009f38 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8009f38:	b480      	push	{r7}
 8009f3a:	b085      	sub	sp, #20
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f4a:	681a      	ldr	r2, [r3, #0]
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f52:	4619      	mov	r1, r3
 8009f54:	4b09      	ldr	r3, [pc, #36]	; (8009f7c <USB_ActivateSetup+0x44>)
 8009f56:	4013      	ands	r3, r2
 8009f58:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f60:	685b      	ldr	r3, [r3, #4]
 8009f62:	68fa      	ldr	r2, [r7, #12]
 8009f64:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009f68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009f6c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009f6e:	2300      	movs	r3, #0
}
 8009f70:	4618      	mov	r0, r3
 8009f72:	3714      	adds	r7, #20
 8009f74:	46bd      	mov	sp, r7
 8009f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7a:	4770      	bx	lr
 8009f7c:	fffff800 	.word	0xfffff800

08009f80 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8009f80:	b480      	push	{r7}
 8009f82:	b087      	sub	sp, #28
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	60f8      	str	r0, [r7, #12]
 8009f88:	460b      	mov	r3, r1
 8009f8a:	607a      	str	r2, [r7, #4]
 8009f8c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	333c      	adds	r3, #60	; 0x3c
 8009f96:	3304      	adds	r3, #4
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009f9c:	693b      	ldr	r3, [r7, #16]
 8009f9e:	4a26      	ldr	r2, [pc, #152]	; (800a038 <USB_EP0_OutStart+0xb8>)
 8009fa0:	4293      	cmp	r3, r2
 8009fa2:	d90a      	bls.n	8009fba <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009fa4:	697b      	ldr	r3, [r7, #20]
 8009fa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009fb0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009fb4:	d101      	bne.n	8009fba <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	e037      	b.n	800a02a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009fba:	697b      	ldr	r3, [r7, #20]
 8009fbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fc0:	461a      	mov	r2, r3
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009fc6:	697b      	ldr	r3, [r7, #20]
 8009fc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fcc:	691b      	ldr	r3, [r3, #16]
 8009fce:	697a      	ldr	r2, [r7, #20]
 8009fd0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009fd4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009fd8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009fda:	697b      	ldr	r3, [r7, #20]
 8009fdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fe0:	691b      	ldr	r3, [r3, #16]
 8009fe2:	697a      	ldr	r2, [r7, #20]
 8009fe4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009fe8:	f043 0318 	orr.w	r3, r3, #24
 8009fec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009fee:	697b      	ldr	r3, [r7, #20]
 8009ff0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ff4:	691b      	ldr	r3, [r3, #16]
 8009ff6:	697a      	ldr	r2, [r7, #20]
 8009ff8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ffc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800a000:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a002:	7afb      	ldrb	r3, [r7, #11]
 800a004:	2b01      	cmp	r3, #1
 800a006:	d10f      	bne.n	800a028 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a008:	697b      	ldr	r3, [r7, #20]
 800a00a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a00e:	461a      	mov	r2, r3
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a014:	697b      	ldr	r3, [r7, #20]
 800a016:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	697a      	ldr	r2, [r7, #20]
 800a01e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a022:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800a026:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a028:	2300      	movs	r3, #0
}
 800a02a:	4618      	mov	r0, r3
 800a02c:	371c      	adds	r7, #28
 800a02e:	46bd      	mov	sp, r7
 800a030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a034:	4770      	bx	lr
 800a036:	bf00      	nop
 800a038:	4f54300a 	.word	0x4f54300a

0800a03c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a03c:	b480      	push	{r7}
 800a03e:	b085      	sub	sp, #20
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800a044:	2300      	movs	r3, #0
 800a046:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	3301      	adds	r3, #1
 800a04c:	60fb      	str	r3, [r7, #12]
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	4a13      	ldr	r2, [pc, #76]	; (800a0a0 <USB_CoreReset+0x64>)
 800a052:	4293      	cmp	r3, r2
 800a054:	d901      	bls.n	800a05a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a056:	2303      	movs	r3, #3
 800a058:	e01b      	b.n	800a092 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	691b      	ldr	r3, [r3, #16]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	daf2      	bge.n	800a048 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a062:	2300      	movs	r3, #0
 800a064:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	691b      	ldr	r3, [r3, #16]
 800a06a:	f043 0201 	orr.w	r2, r3, #1
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	3301      	adds	r3, #1
 800a076:	60fb      	str	r3, [r7, #12]
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	4a09      	ldr	r2, [pc, #36]	; (800a0a0 <USB_CoreReset+0x64>)
 800a07c:	4293      	cmp	r3, r2
 800a07e:	d901      	bls.n	800a084 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a080:	2303      	movs	r3, #3
 800a082:	e006      	b.n	800a092 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	691b      	ldr	r3, [r3, #16]
 800a088:	f003 0301 	and.w	r3, r3, #1
 800a08c:	2b01      	cmp	r3, #1
 800a08e:	d0f0      	beq.n	800a072 <USB_CoreReset+0x36>

  return HAL_OK;
 800a090:	2300      	movs	r3, #0
}
 800a092:	4618      	mov	r0, r3
 800a094:	3714      	adds	r7, #20
 800a096:	46bd      	mov	sp, r7
 800a098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09c:	4770      	bx	lr
 800a09e:	bf00      	nop
 800a0a0:	00030d40 	.word	0x00030d40

0800a0a4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800a0a8:	4904      	ldr	r1, [pc, #16]	; (800a0bc <MX_FATFS_Init+0x18>)
 800a0aa:	4805      	ldr	r0, [pc, #20]	; (800a0c0 <MX_FATFS_Init+0x1c>)
 800a0ac:	f007 fb10 	bl	80116d0 <FATFS_LinkDriver>
 800a0b0:	4603      	mov	r3, r0
 800a0b2:	461a      	mov	r2, r3
 800a0b4:	4b03      	ldr	r3, [pc, #12]	; (800a0c4 <MX_FATFS_Init+0x20>)
 800a0b6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800a0b8:	bf00      	nop
 800a0ba:	bd80      	pop	{r7, pc}
 800a0bc:	2000736c 	.word	0x2000736c
 800a0c0:	0801613c 	.word	0x0801613c
 800a0c4:	20007368 	.word	0x20007368

0800a0c8 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800a0c8:	b480      	push	{r7}
 800a0ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800a0cc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d6:	4770      	bx	lr

0800a0d8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b082      	sub	sp, #8
 800a0dc:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800a0de:	2300      	movs	r3, #0
 800a0e0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800a0e2:	f000 f896 	bl	800a212 <BSP_SD_IsDetected>
 800a0e6:	4603      	mov	r3, r0
 800a0e8:	2b01      	cmp	r3, #1
 800a0ea:	d001      	beq.n	800a0f0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800a0ec:	2302      	movs	r3, #2
 800a0ee:	e012      	b.n	800a116 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800a0f0:	480b      	ldr	r0, [pc, #44]	; (800a120 <BSP_SD_Init+0x48>)
 800a0f2:	f7fb fa09 	bl	8005508 <HAL_SD_Init>
 800a0f6:	4603      	mov	r3, r0
 800a0f8:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800a0fa:	79fb      	ldrb	r3, [r7, #7]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d109      	bne.n	800a114 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800a100:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a104:	4806      	ldr	r0, [pc, #24]	; (800a120 <BSP_SD_Init+0x48>)
 800a106:	f7fc fb59 	bl	80067bc <HAL_SD_ConfigWideBusOperation>
 800a10a:	4603      	mov	r3, r0
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d001      	beq.n	800a114 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800a110:	2301      	movs	r3, #1
 800a112:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800a114:	79fb      	ldrb	r3, [r7, #7]
}
 800a116:	4618      	mov	r0, r3
 800a118:	3708      	adds	r7, #8
 800a11a:	46bd      	mov	sp, r7
 800a11c:	bd80      	pop	{r7, pc}
 800a11e:	bf00      	nop
 800a120:	20004c8c 	.word	0x20004c8c

0800a124 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800a124:	b580      	push	{r7, lr}
 800a126:	b086      	sub	sp, #24
 800a128:	af00      	add	r7, sp, #0
 800a12a:	60f8      	str	r0, [r7, #12]
 800a12c:	60b9      	str	r1, [r7, #8]
 800a12e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800a130:	2300      	movs	r3, #0
 800a132:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	68ba      	ldr	r2, [r7, #8]
 800a138:	68f9      	ldr	r1, [r7, #12]
 800a13a:	4806      	ldr	r0, [pc, #24]	; (800a154 <BSP_SD_ReadBlocks_DMA+0x30>)
 800a13c:	f7fb fe14 	bl	8005d68 <HAL_SD_ReadBlocks_DMA>
 800a140:	4603      	mov	r3, r0
 800a142:	2b00      	cmp	r3, #0
 800a144:	d001      	beq.n	800a14a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800a146:	2301      	movs	r3, #1
 800a148:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800a14a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a14c:	4618      	mov	r0, r3
 800a14e:	3718      	adds	r7, #24
 800a150:	46bd      	mov	sp, r7
 800a152:	bd80      	pop	{r7, pc}
 800a154:	20004c8c 	.word	0x20004c8c

0800a158 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800a158:	b580      	push	{r7, lr}
 800a15a:	b086      	sub	sp, #24
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	60f8      	str	r0, [r7, #12]
 800a160:	60b9      	str	r1, [r7, #8]
 800a162:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800a164:	2300      	movs	r3, #0
 800a166:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	68ba      	ldr	r2, [r7, #8]
 800a16c:	68f9      	ldr	r1, [r7, #12]
 800a16e:	4806      	ldr	r0, [pc, #24]	; (800a188 <BSP_SD_WriteBlocks_DMA+0x30>)
 800a170:	f7fb fee6 	bl	8005f40 <HAL_SD_WriteBlocks_DMA>
 800a174:	4603      	mov	r3, r0
 800a176:	2b00      	cmp	r3, #0
 800a178:	d001      	beq.n	800a17e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800a17a:	2301      	movs	r3, #1
 800a17c:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800a17e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a180:	4618      	mov	r0, r3
 800a182:	3718      	adds	r7, #24
 800a184:	46bd      	mov	sp, r7
 800a186:	bd80      	pop	{r7, pc}
 800a188:	20004c8c 	.word	0x20004c8c

0800a18c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800a190:	4805      	ldr	r0, [pc, #20]	; (800a1a8 <BSP_SD_GetCardState+0x1c>)
 800a192:	f7fc fb8f 	bl	80068b4 <HAL_SD_GetCardState>
 800a196:	4603      	mov	r3, r0
 800a198:	2b04      	cmp	r3, #4
 800a19a:	bf14      	ite	ne
 800a19c:	2301      	movne	r3, #1
 800a19e:	2300      	moveq	r3, #0
 800a1a0:	b2db      	uxtb	r3, r3
}
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	bd80      	pop	{r7, pc}
 800a1a6:	bf00      	nop
 800a1a8:	20004c8c 	.word	0x20004c8c

0800a1ac <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b082      	sub	sp, #8
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800a1b4:	6879      	ldr	r1, [r7, #4]
 800a1b6:	4803      	ldr	r0, [pc, #12]	; (800a1c4 <BSP_SD_GetCardInfo+0x18>)
 800a1b8:	f7fc fad4 	bl	8006764 <HAL_SD_GetCardInfo>
}
 800a1bc:	bf00      	nop
 800a1be:	3708      	adds	r7, #8
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	bd80      	pop	{r7, pc}
 800a1c4:	20004c8c 	.word	0x20004c8c

0800a1c8 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	b082      	sub	sp, #8
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800a1d0:	f000 f818 	bl	800a204 <BSP_SD_AbortCallback>
}
 800a1d4:	bf00      	nop
 800a1d6:	3708      	adds	r7, #8
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	bd80      	pop	{r7, pc}

0800a1dc <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b082      	sub	sp, #8
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800a1e4:	f000 f9b4 	bl	800a550 <BSP_SD_WriteCpltCallback>
}
 800a1e8:	bf00      	nop
 800a1ea:	3708      	adds	r7, #8
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	bd80      	pop	{r7, pc}

0800a1f0 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800a1f0:	b580      	push	{r7, lr}
 800a1f2:	b082      	sub	sp, #8
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800a1f8:	f000 f9bc 	bl	800a574 <BSP_SD_ReadCpltCallback>
}
 800a1fc:	bf00      	nop
 800a1fe:	3708      	adds	r7, #8
 800a200:	46bd      	mov	sp, r7
 800a202:	bd80      	pop	{r7, pc}

0800a204 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800a204:	b480      	push	{r7}
 800a206:	af00      	add	r7, sp, #0

}
 800a208:	bf00      	nop
 800a20a:	46bd      	mov	sp, r7
 800a20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a210:	4770      	bx	lr

0800a212 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800a212:	b580      	push	{r7, lr}
 800a214:	b082      	sub	sp, #8
 800a216:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800a218:	2301      	movs	r3, #1
 800a21a:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 800a21c:	f000 f80c 	bl	800a238 <BSP_PlatformIsDetected>
 800a220:	4603      	mov	r3, r0
 800a222:	2b00      	cmp	r3, #0
 800a224:	d101      	bne.n	800a22a <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800a226:	2300      	movs	r3, #0
 800a228:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800a22a:	79fb      	ldrb	r3, [r7, #7]
 800a22c:	b2db      	uxtb	r3, r3
}
 800a22e:	4618      	mov	r0, r3
 800a230:	3708      	adds	r7, #8
 800a232:	46bd      	mov	sp, r7
 800a234:	bd80      	pop	{r7, pc}
	...

0800a238 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800a238:	b580      	push	{r7, lr}
 800a23a:	b082      	sub	sp, #8
 800a23c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800a23e:	2301      	movs	r3, #1
 800a240:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800a242:	2104      	movs	r1, #4
 800a244:	4806      	ldr	r0, [pc, #24]	; (800a260 <BSP_PlatformIsDetected+0x28>)
 800a246:	f7f8 fdcb 	bl	8002de0 <HAL_GPIO_ReadPin>
 800a24a:	4603      	mov	r3, r0
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d001      	beq.n	800a254 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800a250:	2300      	movs	r3, #0
 800a252:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 800a254:	79fb      	ldrb	r3, [r7, #7]
}  
 800a256:	4618      	mov	r0, r3
 800a258:	3708      	adds	r7, #8
 800a25a:	46bd      	mov	sp, r7
 800a25c:	bd80      	pop	{r7, pc}
 800a25e:	bf00      	nop
 800a260:	40021800 	.word	0x40021800

0800a264 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800a264:	b580      	push	{r7, lr}
 800a266:	b084      	sub	sp, #16
 800a268:	af00      	add	r7, sp, #0
 800a26a:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripherial is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 800a26c:	f007 fbf8 	bl	8011a60 <osKernelGetTickCount>
 800a270:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 800a272:	e006      	b.n	800a282 <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a274:	f7ff ff8a 	bl	800a18c <BSP_SD_GetCardState>
 800a278:	4603      	mov	r3, r0
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d101      	bne.n	800a282 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800a27e:	2300      	movs	r3, #0
 800a280:	e009      	b.n	800a296 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 800a282:	f007 fbed 	bl	8011a60 <osKernelGetTickCount>
 800a286:	4602      	mov	r2, r0
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	1ad3      	subs	r3, r2, r3
 800a28c:	687a      	ldr	r2, [r7, #4]
 800a28e:	429a      	cmp	r2, r3
 800a290:	d8f0      	bhi.n	800a274 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800a292:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a296:	4618      	mov	r0, r3
 800a298:	3710      	adds	r7, #16
 800a29a:	46bd      	mov	sp, r7
 800a29c:	bd80      	pop	{r7, pc}
	...

0800a2a0 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	b082      	sub	sp, #8
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	4603      	mov	r3, r0
 800a2a8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800a2aa:	4b0b      	ldr	r3, [pc, #44]	; (800a2d8 <SD_CheckStatus+0x38>)
 800a2ac:	2201      	movs	r2, #1
 800a2ae:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a2b0:	f7ff ff6c 	bl	800a18c <BSP_SD_GetCardState>
 800a2b4:	4603      	mov	r3, r0
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d107      	bne.n	800a2ca <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800a2ba:	4b07      	ldr	r3, [pc, #28]	; (800a2d8 <SD_CheckStatus+0x38>)
 800a2bc:	781b      	ldrb	r3, [r3, #0]
 800a2be:	b2db      	uxtb	r3, r3
 800a2c0:	f023 0301 	bic.w	r3, r3, #1
 800a2c4:	b2da      	uxtb	r2, r3
 800a2c6:	4b04      	ldr	r3, [pc, #16]	; (800a2d8 <SD_CheckStatus+0x38>)
 800a2c8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800a2ca:	4b03      	ldr	r3, [pc, #12]	; (800a2d8 <SD_CheckStatus+0x38>)
 800a2cc:	781b      	ldrb	r3, [r3, #0]
 800a2ce:	b2db      	uxtb	r3, r3
}
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	3708      	adds	r7, #8
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	bd80      	pop	{r7, pc}
 800a2d8:	20000019 	.word	0x20000019

0800a2dc <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b082      	sub	sp, #8
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	4603      	mov	r3, r0
 800a2e4:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT; 
 800a2e6:	4b1c      	ldr	r3, [pc, #112]	; (800a358 <SD_initialize+0x7c>)
 800a2e8:	2201      	movs	r2, #1
 800a2ea:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 800a2ec:	f007 fb60 	bl	80119b0 <osKernelGetState>
 800a2f0:	4603      	mov	r3, r0
 800a2f2:	2b02      	cmp	r3, #2
 800a2f4:	d129      	bne.n	800a34a <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800a2f6:	f7ff feef 	bl	800a0d8 <BSP_SD_Init>
 800a2fa:	4603      	mov	r3, r0
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d107      	bne.n	800a310 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800a300:	79fb      	ldrb	r3, [r7, #7]
 800a302:	4618      	mov	r0, r3
 800a304:	f7ff ffcc 	bl	800a2a0 <SD_CheckStatus>
 800a308:	4603      	mov	r3, r0
 800a30a:	461a      	mov	r2, r3
 800a30c:	4b12      	ldr	r3, [pc, #72]	; (800a358 <SD_initialize+0x7c>)
 800a30e:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800a310:	4b11      	ldr	r3, [pc, #68]	; (800a358 <SD_initialize+0x7c>)
 800a312:	781b      	ldrb	r3, [r3, #0]
 800a314:	b2db      	uxtb	r3, r3
 800a316:	2b01      	cmp	r3, #1
 800a318:	d017      	beq.n	800a34a <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 800a31a:	4b10      	ldr	r3, [pc, #64]	; (800a35c <SD_initialize+0x80>)
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d107      	bne.n	800a332 <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 800a322:	2200      	movs	r2, #0
 800a324:	2102      	movs	r1, #2
 800a326:	200a      	movs	r0, #10
 800a328:	f007 fe28 	bl	8011f7c <osMessageQueueNew>
 800a32c:	4602      	mov	r2, r0
 800a32e:	4b0b      	ldr	r3, [pc, #44]	; (800a35c <SD_initialize+0x80>)
 800a330:	601a      	str	r2, [r3, #0]
#endif
      }

      if (SDQueueID == NULL)
 800a332:	4b0a      	ldr	r3, [pc, #40]	; (800a35c <SD_initialize+0x80>)
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d107      	bne.n	800a34a <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 800a33a:	4b07      	ldr	r3, [pc, #28]	; (800a358 <SD_initialize+0x7c>)
 800a33c:	781b      	ldrb	r3, [r3, #0]
 800a33e:	b2db      	uxtb	r3, r3
 800a340:	f043 0301 	orr.w	r3, r3, #1
 800a344:	b2da      	uxtb	r2, r3
 800a346:	4b04      	ldr	r3, [pc, #16]	; (800a358 <SD_initialize+0x7c>)
 800a348:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800a34a:	4b03      	ldr	r3, [pc, #12]	; (800a358 <SD_initialize+0x7c>)
 800a34c:	781b      	ldrb	r3, [r3, #0]
 800a34e:	b2db      	uxtb	r3, r3
}
 800a350:	4618      	mov	r0, r3
 800a352:	3708      	adds	r7, #8
 800a354:	46bd      	mov	sp, r7
 800a356:	bd80      	pop	{r7, pc}
 800a358:	20000019 	.word	0x20000019
 800a35c:	20000214 	.word	0x20000214

0800a360 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800a360:	b580      	push	{r7, lr}
 800a362:	b082      	sub	sp, #8
 800a364:	af00      	add	r7, sp, #0
 800a366:	4603      	mov	r3, r0
 800a368:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800a36a:	79fb      	ldrb	r3, [r7, #7]
 800a36c:	4618      	mov	r0, r3
 800a36e:	f7ff ff97 	bl	800a2a0 <SD_CheckStatus>
 800a372:	4603      	mov	r3, r0
}
 800a374:	4618      	mov	r0, r3
 800a376:	3708      	adds	r7, #8
 800a378:	46bd      	mov	sp, r7
 800a37a:	bd80      	pop	{r7, pc}

0800a37c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
   
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800a37c:	b580      	push	{r7, lr}
 800a37e:	b088      	sub	sp, #32
 800a380:	af00      	add	r7, sp, #0
 800a382:	60b9      	str	r1, [r7, #8]
 800a384:	607a      	str	r2, [r7, #4]
 800a386:	603b      	str	r3, [r7, #0]
 800a388:	4603      	mov	r3, r0
 800a38a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a38c:	2301      	movs	r3, #1
 800a38e:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800a390:	f247 5030 	movw	r0, #30000	; 0x7530
 800a394:	f7ff ff66 	bl	800a264 <SD_CheckStatusWithTimeout>
 800a398:	4603      	mov	r3, r0
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	da01      	bge.n	800a3a2 <SD_read+0x26>
  {
    return res;
 800a39e:	7ffb      	ldrb	r3, [r7, #31]
 800a3a0:	e02f      	b.n	800a402 <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800a3a2:	683a      	ldr	r2, [r7, #0]
 800a3a4:	6879      	ldr	r1, [r7, #4]
 800a3a6:	68b8      	ldr	r0, [r7, #8]
 800a3a8:	f7ff febc 	bl	800a124 <BSP_SD_ReadBlocks_DMA>
 800a3ac:	4603      	mov	r3, r0
 800a3ae:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 800a3b0:	7fbb      	ldrb	r3, [r7, #30]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d124      	bne.n	800a400 <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800a3b6:	4b15      	ldr	r3, [pc, #84]	; (800a40c <SD_read+0x90>)
 800a3b8:	6818      	ldr	r0, [r3, #0]
 800a3ba:	f107 0112 	add.w	r1, r7, #18
 800a3be:	f247 5330 	movw	r3, #30000	; 0x7530
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	f007 fed4 	bl	8012170 <osMessageQueueGet>
 800a3c8:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 800a3ca:	69bb      	ldr	r3, [r7, #24]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d117      	bne.n	800a400 <SD_read+0x84>
 800a3d0:	8a7b      	ldrh	r3, [r7, #18]
 800a3d2:	2b01      	cmp	r3, #1
 800a3d4:	d114      	bne.n	800a400 <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 800a3d6:	f007 fb43 	bl	8011a60 <osKernelGetTickCount>
 800a3da:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800a3dc:	e007      	b.n	800a3ee <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a3de:	f7ff fed5 	bl	800a18c <BSP_SD_GetCardState>
 800a3e2:	4603      	mov	r3, r0
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d102      	bne.n	800a3ee <SD_read+0x72>
              {
                res = RES_OK;
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800a3ec:	e008      	b.n	800a400 <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800a3ee:	f007 fb37 	bl	8011a60 <osKernelGetTickCount>
 800a3f2:	4602      	mov	r2, r0
 800a3f4:	697b      	ldr	r3, [r7, #20]
 800a3f6:	1ad3      	subs	r3, r2, r3
 800a3f8:	f247 522f 	movw	r2, #29999	; 0x752f
 800a3fc:	4293      	cmp	r3, r2
 800a3fe:	d9ee      	bls.n	800a3de <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800a400:	7ffb      	ldrb	r3, [r7, #31]
}
 800a402:	4618      	mov	r0, r3
 800a404:	3720      	adds	r7, #32
 800a406:	46bd      	mov	sp, r7
 800a408:	bd80      	pop	{r7, pc}
 800a40a:	bf00      	nop
 800a40c:	20000214 	.word	0x20000214

0800a410 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
   
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800a410:	b580      	push	{r7, lr}
 800a412:	b088      	sub	sp, #32
 800a414:	af00      	add	r7, sp, #0
 800a416:	60b9      	str	r1, [r7, #8]
 800a418:	607a      	str	r2, [r7, #4]
 800a41a:	603b      	str	r3, [r7, #0]
 800a41c:	4603      	mov	r3, r0
 800a41e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a420:	2301      	movs	r3, #1
 800a422:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800a424:	f247 5030 	movw	r0, #30000	; 0x7530
 800a428:	f7ff ff1c 	bl	800a264 <SD_CheckStatusWithTimeout>
 800a42c:	4603      	mov	r3, r0
 800a42e:	2b00      	cmp	r3, #0
 800a430:	da01      	bge.n	800a436 <SD_write+0x26>
  {
    return res;
 800a432:	7ffb      	ldrb	r3, [r7, #31]
 800a434:	e02d      	b.n	800a492 <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800a436:	683a      	ldr	r2, [r7, #0]
 800a438:	6879      	ldr	r1, [r7, #4]
 800a43a:	68b8      	ldr	r0, [r7, #8]
 800a43c:	f7ff fe8c 	bl	800a158 <BSP_SD_WriteBlocks_DMA>
 800a440:	4603      	mov	r3, r0
 800a442:	2b00      	cmp	r3, #0
 800a444:	d124      	bne.n	800a490 <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800a446:	4b15      	ldr	r3, [pc, #84]	; (800a49c <SD_write+0x8c>)
 800a448:	6818      	ldr	r0, [r3, #0]
 800a44a:	f107 0112 	add.w	r1, r7, #18
 800a44e:	f247 5330 	movw	r3, #30000	; 0x7530
 800a452:	2200      	movs	r2, #0
 800a454:	f007 fe8c 	bl	8012170 <osMessageQueueGet>
 800a458:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 800a45a:	69bb      	ldr	r3, [r7, #24]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d117      	bne.n	800a490 <SD_write+0x80>
 800a460:	8a7b      	ldrh	r3, [r7, #18]
 800a462:	2b02      	cmp	r3, #2
 800a464:	d114      	bne.n	800a490 <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 800a466:	f007 fafb 	bl	8011a60 <osKernelGetTickCount>
 800a46a:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800a46c:	e007      	b.n	800a47e <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a46e:	f7ff fe8d 	bl	800a18c <BSP_SD_GetCardState>
 800a472:	4603      	mov	r3, r0
 800a474:	2b00      	cmp	r3, #0
 800a476:	d102      	bne.n	800a47e <SD_write+0x6e>
          {
            res = RES_OK;
 800a478:	2300      	movs	r3, #0
 800a47a:	77fb      	strb	r3, [r7, #31]
            break;
 800a47c:	e008      	b.n	800a490 <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800a47e:	f007 faef 	bl	8011a60 <osKernelGetTickCount>
 800a482:	4602      	mov	r2, r0
 800a484:	697b      	ldr	r3, [r7, #20]
 800a486:	1ad3      	subs	r3, r2, r3
 800a488:	f247 522f 	movw	r2, #29999	; 0x752f
 800a48c:	4293      	cmp	r3, r2
 800a48e:	d9ee      	bls.n	800a46e <SD_write+0x5e>
    }

  }
#endif

  return res;
 800a490:	7ffb      	ldrb	r3, [r7, #31]
}
 800a492:	4618      	mov	r0, r3
 800a494:	3720      	adds	r7, #32
 800a496:	46bd      	mov	sp, r7
 800a498:	bd80      	pop	{r7, pc}
 800a49a:	bf00      	nop
 800a49c:	20000214 	.word	0x20000214

0800a4a0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800a4a0:	b580      	push	{r7, lr}
 800a4a2:	b08c      	sub	sp, #48	; 0x30
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	4603      	mov	r3, r0
 800a4a8:	603a      	str	r2, [r7, #0]
 800a4aa:	71fb      	strb	r3, [r7, #7]
 800a4ac:	460b      	mov	r3, r1
 800a4ae:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800a4b0:	2301      	movs	r3, #1
 800a4b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800a4b6:	4b25      	ldr	r3, [pc, #148]	; (800a54c <SD_ioctl+0xac>)
 800a4b8:	781b      	ldrb	r3, [r3, #0]
 800a4ba:	b2db      	uxtb	r3, r3
 800a4bc:	f003 0301 	and.w	r3, r3, #1
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d001      	beq.n	800a4c8 <SD_ioctl+0x28>
 800a4c4:	2303      	movs	r3, #3
 800a4c6:	e03c      	b.n	800a542 <SD_ioctl+0xa2>

  switch (cmd)
 800a4c8:	79bb      	ldrb	r3, [r7, #6]
 800a4ca:	2b03      	cmp	r3, #3
 800a4cc:	d834      	bhi.n	800a538 <SD_ioctl+0x98>
 800a4ce:	a201      	add	r2, pc, #4	; (adr r2, 800a4d4 <SD_ioctl+0x34>)
 800a4d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4d4:	0800a4e5 	.word	0x0800a4e5
 800a4d8:	0800a4ed 	.word	0x0800a4ed
 800a4dc:	0800a505 	.word	0x0800a505
 800a4e0:	0800a51f 	.word	0x0800a51f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a4ea:	e028      	b.n	800a53e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800a4ec:	f107 030c 	add.w	r3, r7, #12
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	f7ff fe5b 	bl	800a1ac <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800a4f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a4f8:	683b      	ldr	r3, [r7, #0]
 800a4fa:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a502:	e01c      	b.n	800a53e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a504:	f107 030c 	add.w	r3, r7, #12
 800a508:	4618      	mov	r0, r3
 800a50a:	f7ff fe4f 	bl	800a1ac <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800a50e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a510:	b29a      	uxth	r2, r3
 800a512:	683b      	ldr	r3, [r7, #0]
 800a514:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800a516:	2300      	movs	r3, #0
 800a518:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a51c:	e00f      	b.n	800a53e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a51e:	f107 030c 	add.w	r3, r7, #12
 800a522:	4618      	mov	r0, r3
 800a524:	f7ff fe42 	bl	800a1ac <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800a528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a52a:	0a5a      	lsrs	r2, r3, #9
 800a52c:	683b      	ldr	r3, [r7, #0]
 800a52e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a530:	2300      	movs	r3, #0
 800a532:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a536:	e002      	b.n	800a53e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800a538:	2304      	movs	r3, #4
 800a53a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800a53e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a542:	4618      	mov	r0, r3
 800a544:	3730      	adds	r7, #48	; 0x30
 800a546:	46bd      	mov	sp, r7
 800a548:	bd80      	pop	{r7, pc}
 800a54a:	bf00      	nop
 800a54c:	20000019 	.word	0x20000019

0800a550 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800a550:	b580      	push	{r7, lr}
 800a552:	b082      	sub	sp, #8
 800a554:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
#else
   const uint16_t msg = WRITE_CPLT_MSG;
 800a556:	2302      	movs	r3, #2
 800a558:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800a55a:	4b05      	ldr	r3, [pc, #20]	; (800a570 <BSP_SD_WriteCpltCallback+0x20>)
 800a55c:	6818      	ldr	r0, [r3, #0]
 800a55e:	1db9      	adds	r1, r7, #6
 800a560:	2300      	movs	r3, #0
 800a562:	2200      	movs	r2, #0
 800a564:	f007 fd90 	bl	8012088 <osMessageQueuePut>
#endif
}
 800a568:	bf00      	nop
 800a56a:	3708      	adds	r7, #8
 800a56c:	46bd      	mov	sp, r7
 800a56e:	bd80      	pop	{r7, pc}
 800a570:	20000214 	.word	0x20000214

0800a574 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800a574:	b580      	push	{r7, lr}
 800a576:	b082      	sub	sp, #8
 800a578:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 800a57a:	2301      	movs	r3, #1
 800a57c:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800a57e:	4b05      	ldr	r3, [pc, #20]	; (800a594 <BSP_SD_ReadCpltCallback+0x20>)
 800a580:	6818      	ldr	r0, [r3, #0]
 800a582:	1db9      	adds	r1, r7, #6
 800a584:	2300      	movs	r3, #0
 800a586:	2200      	movs	r2, #0
 800a588:	f007 fd7e 	bl	8012088 <osMessageQueuePut>
#endif
}
 800a58c:	bf00      	nop
 800a58e:	3708      	adds	r7, #8
 800a590:	46bd      	mov	sp, r7
 800a592:	bd80      	pop	{r7, pc}
 800a594:	20000214 	.word	0x20000214

0800a598 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a598:	b580      	push	{r7, lr}
 800a59a:	b084      	sub	sp, #16
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	6078      	str	r0, [r7, #4]
 800a5a0:	460b      	mov	r3, r1
 800a5a2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 800a5a4:	f44f 701d 	mov.w	r0, #628	; 0x274
 800a5a8:	f00b fc5e 	bl	8015e68 <malloc>
 800a5ac:	4603      	mov	r3, r0
 800a5ae:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d105      	bne.n	800a5c2 <USBD_MSC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	2200      	movs	r2, #0
 800a5ba:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800a5be:	2302      	movs	r3, #2
 800a5c0:	e034      	b.n	800a62c <USBD_MSC_Init+0x94>
  }

  pdev->pClassData = (void *)hmsc;
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	68fa      	ldr	r2, [r7, #12]
 800a5c6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	7c1b      	ldrb	r3, [r3, #16]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d115      	bne.n	800a5fe <USBD_MSC_Init+0x66>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800a5d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a5d6:	2202      	movs	r2, #2
 800a5d8:	2101      	movs	r1, #1
 800a5da:	6878      	ldr	r0, [r7, #4]
 800a5dc:	f00b fa57 	bl	8015a8e <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	2201      	movs	r2, #1
 800a5e4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800a5e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a5ec:	2202      	movs	r2, #2
 800a5ee:	2181      	movs	r1, #129	; 0x81
 800a5f0:	6878      	ldr	r0, [r7, #4]
 800a5f2:	f00b fa4c 	bl	8015a8e <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	2201      	movs	r2, #1
 800a5fa:	871a      	strh	r2, [r3, #56]	; 0x38
 800a5fc:	e012      	b.n	800a624 <USBD_MSC_Init+0x8c>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800a5fe:	2340      	movs	r3, #64	; 0x40
 800a600:	2202      	movs	r2, #2
 800a602:	2101      	movs	r1, #1
 800a604:	6878      	ldr	r0, [r7, #4]
 800a606:	f00b fa42 	bl	8015a8e <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	2201      	movs	r2, #1
 800a60e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800a612:	2340      	movs	r3, #64	; 0x40
 800a614:	2202      	movs	r2, #2
 800a616:	2181      	movs	r1, #129	; 0x81
 800a618:	6878      	ldr	r0, [r7, #4]
 800a61a:	f00b fa38 	bl	8015a8e <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	2201      	movs	r2, #1
 800a622:	871a      	strh	r2, [r3, #56]	; 0x38
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 800a624:	6878      	ldr	r0, [r7, #4]
 800a626:	f000 f98e 	bl	800a946 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 800a62a:	2300      	movs	r3, #0
}
 800a62c:	4618      	mov	r0, r3
 800a62e:	3710      	adds	r7, #16
 800a630:	46bd      	mov	sp, r7
 800a632:	bd80      	pop	{r7, pc}

0800a634 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a634:	b580      	push	{r7, lr}
 800a636:	b082      	sub	sp, #8
 800a638:	af00      	add	r7, sp, #0
 800a63a:	6078      	str	r0, [r7, #4]
 800a63c:	460b      	mov	r3, r1
 800a63e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 800a640:	2101      	movs	r1, #1
 800a642:	6878      	ldr	r0, [r7, #4]
 800a644:	f00b fa49 	bl	8015ada <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	2200      	movs	r2, #0
 800a64c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 800a650:	2181      	movs	r1, #129	; 0x81
 800a652:	6878      	ldr	r0, [r7, #4]
 800a654:	f00b fa41 	bl	8015ada <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	2200      	movs	r2, #0
 800a65c:	871a      	strh	r2, [r3, #56]	; 0x38

  /* De-Init the BOT layer */
  MSC_BOT_DeInit(pdev);
 800a65e:	6878      	ldr	r0, [r7, #4]
 800a660:	f000 f9c7 	bl	800a9f2 <MSC_BOT_DeInit>

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d009      	beq.n	800a682 <USBD_MSC_DeInit+0x4e>
  {
    (void)USBD_free(pdev->pClassData);
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a674:	4618      	mov	r0, r3
 800a676:	f00b fbff 	bl	8015e78 <free>
    pdev->pClassData = NULL;
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	2200      	movs	r2, #0
 800a67e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a682:	2300      	movs	r3, #0
}
 800a684:	4618      	mov	r0, r3
 800a686:	3708      	adds	r7, #8
 800a688:	46bd      	mov	sp, r7
 800a68a:	bd80      	pop	{r7, pc}

0800a68c <USBD_MSC_Setup>:
* @param  pdev: device instance
* @param  req: USB request
* @retval status
*/
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a68c:	b580      	push	{r7, lr}
 800a68e:	b086      	sub	sp, #24
 800a690:	af00      	add	r7, sp, #0
 800a692:	6078      	str	r0, [r7, #4]
 800a694:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a69c:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 800a69e:	2300      	movs	r3, #0
 800a6a0:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	81fb      	strh	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a6a6:	683b      	ldr	r3, [r7, #0]
 800a6a8:	781b      	ldrb	r3, [r3, #0]
 800a6aa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d04d      	beq.n	800a74e <USBD_MSC_Setup+0xc2>
 800a6b2:	2b20      	cmp	r3, #32
 800a6b4:	f040 80c6 	bne.w	800a844 <USBD_MSC_Setup+0x1b8>
  {
    /* Class request */
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 800a6b8:	683b      	ldr	r3, [r7, #0]
 800a6ba:	785b      	ldrb	r3, [r3, #1]
 800a6bc:	2bfe      	cmp	r3, #254	; 0xfe
 800a6be:	d002      	beq.n	800a6c6 <USBD_MSC_Setup+0x3a>
 800a6c0:	2bff      	cmp	r3, #255	; 0xff
 800a6c2:	d024      	beq.n	800a70e <USBD_MSC_Setup+0x82>
 800a6c4:	e03b      	b.n	800a73e <USBD_MSC_Setup+0xb2>
    {
    case BOT_GET_MAX_LUN:
      if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800a6c6:	683b      	ldr	r3, [r7, #0]
 800a6c8:	885b      	ldrh	r3, [r3, #2]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d118      	bne.n	800a700 <USBD_MSC_Setup+0x74>
 800a6ce:	683b      	ldr	r3, [r7, #0]
 800a6d0:	88db      	ldrh	r3, [r3, #6]
 800a6d2:	2b01      	cmp	r3, #1
 800a6d4:	d114      	bne.n	800a700 <USBD_MSC_Setup+0x74>
          ((req->bmRequest & 0x80U) == 0x80U))
 800a6d6:	683b      	ldr	r3, [r7, #0]
 800a6d8:	781b      	ldrb	r3, [r3, #0]
 800a6da:	b25b      	sxtb	r3, r3
      if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	da0f      	bge.n	800a700 <USBD_MSC_Setup+0x74>
      {
        hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a6e6:	699b      	ldr	r3, [r3, #24]
 800a6e8:	4798      	blx	r3
 800a6ea:	4603      	mov	r3, r0
 800a6ec:	461a      	mov	r2, r3
 800a6ee:	693b      	ldr	r3, [r7, #16]
 800a6f0:	601a      	str	r2, [r3, #0]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 800a6f2:	693b      	ldr	r3, [r7, #16]
 800a6f4:	2201      	movs	r2, #1
 800a6f6:	4619      	mov	r1, r3
 800a6f8:	6878      	ldr	r0, [r7, #4]
 800a6fa:	f002 fc82 	bl	800d002 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800a6fe:	e025      	b.n	800a74c <USBD_MSC_Setup+0xc0>
        USBD_CtlError(pdev, req);
 800a700:	6839      	ldr	r1, [r7, #0]
 800a702:	6878      	ldr	r0, [r7, #4]
 800a704:	f002 fc0c 	bl	800cf20 <USBD_CtlError>
        ret = USBD_FAIL;
 800a708:	2303      	movs	r3, #3
 800a70a:	75fb      	strb	r3, [r7, #23]
      break;
 800a70c:	e01e      	b.n	800a74c <USBD_MSC_Setup+0xc0>

    case BOT_RESET :
      if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800a70e:	683b      	ldr	r3, [r7, #0]
 800a710:	885b      	ldrh	r3, [r3, #2]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d10c      	bne.n	800a730 <USBD_MSC_Setup+0xa4>
 800a716:	683b      	ldr	r3, [r7, #0]
 800a718:	88db      	ldrh	r3, [r3, #6]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d108      	bne.n	800a730 <USBD_MSC_Setup+0xa4>
          ((req->bmRequest & 0x80U) != 0x80U))
 800a71e:	683b      	ldr	r3, [r7, #0]
 800a720:	781b      	ldrb	r3, [r3, #0]
 800a722:	b25b      	sxtb	r3, r3
      if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800a724:	2b00      	cmp	r3, #0
 800a726:	db03      	blt.n	800a730 <USBD_MSC_Setup+0xa4>
      {
        MSC_BOT_Reset(pdev);
 800a728:	6878      	ldr	r0, [r7, #4]
 800a72a:	f000 f940 	bl	800a9ae <MSC_BOT_Reset>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800a72e:	e00d      	b.n	800a74c <USBD_MSC_Setup+0xc0>
        USBD_CtlError(pdev, req);
 800a730:	6839      	ldr	r1, [r7, #0]
 800a732:	6878      	ldr	r0, [r7, #4]
 800a734:	f002 fbf4 	bl	800cf20 <USBD_CtlError>
        ret = USBD_FAIL;
 800a738:	2303      	movs	r3, #3
 800a73a:	75fb      	strb	r3, [r7, #23]
      break;
 800a73c:	e006      	b.n	800a74c <USBD_MSC_Setup+0xc0>

    default:
      USBD_CtlError(pdev, req);
 800a73e:	6839      	ldr	r1, [r7, #0]
 800a740:	6878      	ldr	r0, [r7, #4]
 800a742:	f002 fbed 	bl	800cf20 <USBD_CtlError>
      ret = USBD_FAIL;
 800a746:	2303      	movs	r3, #3
 800a748:	75fb      	strb	r3, [r7, #23]
      break;
 800a74a:	bf00      	nop
    }
    break;
 800a74c:	e081      	b.n	800a852 <USBD_MSC_Setup+0x1c6>
    /* Interface & Endpoint request */
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800a74e:	683b      	ldr	r3, [r7, #0]
 800a750:	785b      	ldrb	r3, [r3, #1]
 800a752:	2b0b      	cmp	r3, #11
 800a754:	d86d      	bhi.n	800a832 <USBD_MSC_Setup+0x1a6>
 800a756:	a201      	add	r2, pc, #4	; (adr r2, 800a75c <USBD_MSC_Setup+0xd0>)
 800a758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a75c:	0800a78d 	.word	0x0800a78d
 800a760:	0800a803 	.word	0x0800a803
 800a764:	0800a833 	.word	0x0800a833
 800a768:	0800a833 	.word	0x0800a833
 800a76c:	0800a833 	.word	0x0800a833
 800a770:	0800a833 	.word	0x0800a833
 800a774:	0800a833 	.word	0x0800a833
 800a778:	0800a833 	.word	0x0800a833
 800a77c:	0800a833 	.word	0x0800a833
 800a780:	0800a833 	.word	0x0800a833
 800a784:	0800a7b5 	.word	0x0800a7b5
 800a788:	0800a7dd 	.word	0x0800a7dd
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a792:	2b03      	cmp	r3, #3
 800a794:	d107      	bne.n	800a7a6 <USBD_MSC_Setup+0x11a>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a796:	f107 030e 	add.w	r3, r7, #14
 800a79a:	2202      	movs	r2, #2
 800a79c:	4619      	mov	r1, r3
 800a79e:	6878      	ldr	r0, [r7, #4]
 800a7a0:	f002 fc2f 	bl	800d002 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800a7a4:	e04d      	b.n	800a842 <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 800a7a6:	6839      	ldr	r1, [r7, #0]
 800a7a8:	6878      	ldr	r0, [r7, #4]
 800a7aa:	f002 fbb9 	bl	800cf20 <USBD_CtlError>
        ret = USBD_FAIL;
 800a7ae:	2303      	movs	r3, #3
 800a7b0:	75fb      	strb	r3, [r7, #23]
      break;
 800a7b2:	e046      	b.n	800a842 <USBD_MSC_Setup+0x1b6>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a7ba:	2b03      	cmp	r3, #3
 800a7bc:	d107      	bne.n	800a7ce <USBD_MSC_Setup+0x142>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 800a7be:	693b      	ldr	r3, [r7, #16]
 800a7c0:	3304      	adds	r3, #4
 800a7c2:	2201      	movs	r2, #1
 800a7c4:	4619      	mov	r1, r3
 800a7c6:	6878      	ldr	r0, [r7, #4]
 800a7c8:	f002 fc1b 	bl	800d002 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800a7cc:	e039      	b.n	800a842 <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 800a7ce:	6839      	ldr	r1, [r7, #0]
 800a7d0:	6878      	ldr	r0, [r7, #4]
 800a7d2:	f002 fba5 	bl	800cf20 <USBD_CtlError>
        ret = USBD_FAIL;
 800a7d6:	2303      	movs	r3, #3
 800a7d8:	75fb      	strb	r3, [r7, #23]
      break;
 800a7da:	e032      	b.n	800a842 <USBD_MSC_Setup+0x1b6>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a7e2:	2b03      	cmp	r3, #3
 800a7e4:	d106      	bne.n	800a7f4 <USBD_MSC_Setup+0x168>
      {
        hmsc->interface = (uint8_t)(req->wValue);
 800a7e6:	683b      	ldr	r3, [r7, #0]
 800a7e8:	885b      	ldrh	r3, [r3, #2]
 800a7ea:	b2db      	uxtb	r3, r3
 800a7ec:	461a      	mov	r2, r3
 800a7ee:	693b      	ldr	r3, [r7, #16]
 800a7f0:	605a      	str	r2, [r3, #4]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800a7f2:	e026      	b.n	800a842 <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 800a7f4:	6839      	ldr	r1, [r7, #0]
 800a7f6:	6878      	ldr	r0, [r7, #4]
 800a7f8:	f002 fb92 	bl	800cf20 <USBD_CtlError>
        ret = USBD_FAIL;
 800a7fc:	2303      	movs	r3, #3
 800a7fe:	75fb      	strb	r3, [r7, #23]
      break;
 800a800:	e01f      	b.n	800a842 <USBD_MSC_Setup+0x1b6>

    case USB_REQ_CLEAR_FEATURE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a808:	2b03      	cmp	r3, #3
 800a80a:	d119      	bne.n	800a840 <USBD_MSC_Setup+0x1b4>
      {
        if (req->wValue == USB_FEATURE_EP_HALT)
 800a80c:	683b      	ldr	r3, [r7, #0]
 800a80e:	885b      	ldrh	r3, [r3, #2]
 800a810:	2b00      	cmp	r3, #0
 800a812:	d115      	bne.n	800a840 <USBD_MSC_Setup+0x1b4>
        {
          /* Flush the FIFO */
          (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 800a814:	683b      	ldr	r3, [r7, #0]
 800a816:	889b      	ldrh	r3, [r3, #4]
 800a818:	b2db      	uxtb	r3, r3
 800a81a:	4619      	mov	r1, r3
 800a81c:	6878      	ldr	r0, [r7, #4]
 800a81e:	f00b f97b 	bl	8015b18 <USBD_LL_FlushEP>

          /* Handle BOT error */
          MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 800a822:	683b      	ldr	r3, [r7, #0]
 800a824:	889b      	ldrh	r3, [r3, #4]
 800a826:	b2db      	uxtb	r3, r3
 800a828:	4619      	mov	r1, r3
 800a82a:	6878      	ldr	r0, [r7, #4]
 800a82c:	f000 fa5a 	bl	800ace4 <MSC_BOT_CplClrFeature>
        }
      }
      break;
 800a830:	e006      	b.n	800a840 <USBD_MSC_Setup+0x1b4>

    default:
      USBD_CtlError(pdev, req);
 800a832:	6839      	ldr	r1, [r7, #0]
 800a834:	6878      	ldr	r0, [r7, #4]
 800a836:	f002 fb73 	bl	800cf20 <USBD_CtlError>
      ret = USBD_FAIL;
 800a83a:	2303      	movs	r3, #3
 800a83c:	75fb      	strb	r3, [r7, #23]
      break;
 800a83e:	e000      	b.n	800a842 <USBD_MSC_Setup+0x1b6>
      break;
 800a840:	bf00      	nop
    }
    break;
 800a842:	e006      	b.n	800a852 <USBD_MSC_Setup+0x1c6>

  default:
    USBD_CtlError(pdev, req);
 800a844:	6839      	ldr	r1, [r7, #0]
 800a846:	6878      	ldr	r0, [r7, #4]
 800a848:	f002 fb6a 	bl	800cf20 <USBD_CtlError>
    ret = USBD_FAIL;
 800a84c:	2303      	movs	r3, #3
 800a84e:	75fb      	strb	r3, [r7, #23]
    break;
 800a850:	bf00      	nop
  }

  return (uint8_t)ret;
 800a852:	7dfb      	ldrb	r3, [r7, #23]
}
 800a854:	4618      	mov	r0, r3
 800a856:	3718      	adds	r7, #24
 800a858:	46bd      	mov	sp, r7
 800a85a:	bd80      	pop	{r7, pc}

0800a85c <USBD_MSC_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a85c:	b580      	push	{r7, lr}
 800a85e:	b082      	sub	sp, #8
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
 800a864:	460b      	mov	r3, r1
 800a866:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 800a868:	78fb      	ldrb	r3, [r7, #3]
 800a86a:	4619      	mov	r1, r3
 800a86c:	6878      	ldr	r0, [r7, #4]
 800a86e:	f000 f8d1 	bl	800aa14 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 800a872:	2300      	movs	r3, #0
}
 800a874:	4618      	mov	r0, r3
 800a876:	3708      	adds	r7, #8
 800a878:	46bd      	mov	sp, r7
 800a87a:	bd80      	pop	{r7, pc}

0800a87c <USBD_MSC_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a87c:	b580      	push	{r7, lr}
 800a87e:	b082      	sub	sp, #8
 800a880:	af00      	add	r7, sp, #0
 800a882:	6078      	str	r0, [r7, #4]
 800a884:	460b      	mov	r3, r1
 800a886:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 800a888:	78fb      	ldrb	r3, [r7, #3]
 800a88a:	4619      	mov	r1, r3
 800a88c:	6878      	ldr	r0, [r7, #4]
 800a88e:	f000 f8f2 	bl	800aa76 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 800a892:	2300      	movs	r3, #0
}
 800a894:	4618      	mov	r0, r3
 800a896:	3708      	adds	r7, #8
 800a898:	46bd      	mov	sp, r7
 800a89a:	bd80      	pop	{r7, pc}

0800a89c <USBD_MSC_GetHSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 800a89c:	b480      	push	{r7}
 800a89e:	b083      	sub	sp, #12
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgHSDesc);
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	2220      	movs	r2, #32
 800a8a8:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 800a8aa:	4b03      	ldr	r3, [pc, #12]	; (800a8b8 <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	370c      	adds	r7, #12
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b6:	4770      	bx	lr
 800a8b8:	20000054 	.word	0x20000054

0800a8bc <USBD_MSC_GetFSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 800a8bc:	b480      	push	{r7}
 800a8be:	b083      	sub	sp, #12
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgFSDesc);
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	2220      	movs	r2, #32
 800a8c8:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 800a8ca:	4b03      	ldr	r3, [pc, #12]	; (800a8d8 <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	370c      	adds	r7, #12
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d6:	4770      	bx	lr
 800a8d8:	20000074 	.word	0x20000074

0800a8dc <USBD_MSC_GetOtherSpeedCfgDesc>:
*         return other speed configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a8dc:	b480      	push	{r7}
 800a8de:	b083      	sub	sp, #12
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_OtherSpeedCfgDesc);
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	2220      	movs	r2, #32
 800a8e8:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 800a8ea:	4b03      	ldr	r3, [pc, #12]	; (800a8f8 <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	370c      	adds	r7, #12
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f6:	4770      	bx	lr
 800a8f8:	20000094 	.word	0x20000094

0800a8fc <USBD_MSC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a8fc:	b480      	push	{r7}
 800a8fe:	b083      	sub	sp, #12
 800a900:	af00      	add	r7, sp, #0
 800a902:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	220a      	movs	r2, #10
 800a908:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 800a90a:	4b03      	ldr	r3, [pc, #12]	; (800a918 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a90c:	4618      	mov	r0, r3
 800a90e:	370c      	adds	r7, #12
 800a910:	46bd      	mov	sp, r7
 800a912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a916:	4770      	bx	lr
 800a918:	200000b4 	.word	0x200000b4

0800a91c <USBD_MSC_RegisterStorage>:
* @brief  USBD_MSC_RegisterStorage
* @param  fops: storage callback
* @retval status
*/
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 800a91c:	b480      	push	{r7}
 800a91e:	b083      	sub	sp, #12
 800a920:	af00      	add	r7, sp, #0
 800a922:	6078      	str	r0, [r7, #4]
 800a924:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a926:	683b      	ldr	r3, [r7, #0]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d101      	bne.n	800a930 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a92c:	2303      	movs	r3, #3
 800a92e:	e004      	b.n	800a93a <USBD_MSC_RegisterStorage+0x1e>
  }

  pdev->pUserData = fops;
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	683a      	ldr	r2, [r7, #0]
 800a934:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800a938:	2300      	movs	r3, #0
}
 800a93a:	4618      	mov	r0, r3
 800a93c:	370c      	adds	r7, #12
 800a93e:	46bd      	mov	sp, r7
 800a940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a944:	4770      	bx	lr

0800a946 <MSC_BOT_Init>:
*         Initialize the BOT Process
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 800a946:	b580      	push	{r7, lr}
 800a948:	b084      	sub	sp, #16
 800a94a:	af00      	add	r7, sp, #0
 800a94c:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a954:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state = USBD_BOT_IDLE;
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	2200      	movs	r2, #0
 800a95a:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	2200      	movs	r2, #0
 800a960:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	2200      	movs	r2, #0
 800a966:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  hmsc->scsi_sense_head = 0U;
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	2200      	movs	r2, #0
 800a96e:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	2200      	movs	r2, #0
 800a976:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	2000      	movs	r0, #0
 800a984:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 800a986:	2101      	movs	r1, #1
 800a988:	6878      	ldr	r0, [r7, #4]
 800a98a:	f00b f8c5 	bl	8015b18 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 800a98e:	2181      	movs	r1, #129	; 0x81
 800a990:	6878      	ldr	r0, [r7, #4]
 800a992:	f00b f8c1 	bl	8015b18 <USBD_LL_FlushEP>

  /* Prapare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800a99c:	231f      	movs	r3, #31
 800a99e:	2101      	movs	r1, #1
 800a9a0:	6878      	ldr	r0, [r7, #4]
 800a9a2:	f00b f982 	bl	8015caa <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 800a9a6:	bf00      	nop
 800a9a8:	3710      	adds	r7, #16
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	bd80      	pop	{r7, pc}

0800a9ae <MSC_BOT_Reset>:
*         Reset the BOT Machine
* @param  pdev: device instance
* @retval  None
*/
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 800a9ae:	b580      	push	{r7, lr}
 800a9b0:	b084      	sub	sp, #16
 800a9b2:	af00      	add	r7, sp, #0
 800a9b4:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a9bc:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state  = USBD_BOT_IDLE;
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	2200      	movs	r2, #0
 800a9c2:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	2201      	movs	r2, #1
 800a9c8:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSC_EPIN_ADDR);
 800a9ca:	2181      	movs	r1, #129	; 0x81
 800a9cc:	6878      	ldr	r0, [r7, #4]
 800a9ce:	f00b f8e1 	bl	8015b94 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSC_EPOUT_ADDR);
 800a9d2:	2101      	movs	r1, #1
 800a9d4:	6878      	ldr	r0, [r7, #4]
 800a9d6:	f00b f8dd 	bl	8015b94 <USBD_LL_ClearStallEP>

  /* Prapare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800a9e0:	231f      	movs	r3, #31
 800a9e2:	2101      	movs	r1, #1
 800a9e4:	6878      	ldr	r0, [r7, #4]
 800a9e6:	f00b f960 	bl	8015caa <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 800a9ea:	bf00      	nop
 800a9ec:	3710      	adds	r7, #16
 800a9ee:	46bd      	mov	sp, r7
 800a9f0:	bd80      	pop	{r7, pc}

0800a9f2 <MSC_BOT_DeInit>:
*         Deinitialize the BOT Machine
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 800a9f2:	b480      	push	{r7}
 800a9f4:	b085      	sub	sp, #20
 800a9f6:	af00      	add	r7, sp, #0
 800a9f8:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aa00:	60fb      	str	r3, [r7, #12]
  hmsc->bot_state = USBD_BOT_IDLE;
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	2200      	movs	r2, #0
 800aa06:	721a      	strb	r2, [r3, #8]
}
 800aa08:	bf00      	nop
 800aa0a:	3714      	adds	r7, #20
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa12:	4770      	bx	lr

0800aa14 <MSC_BOT_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800aa14:	b580      	push	{r7, lr}
 800aa16:	b084      	sub	sp, #16
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	6078      	str	r0, [r7, #4]
 800aa1c:	460b      	mov	r3, r1
 800aa1e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aa26:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	7a1b      	ldrb	r3, [r3, #8]
 800aa2c:	2b02      	cmp	r3, #2
 800aa2e:	d004      	beq.n	800aa3a <MSC_BOT_DataIn+0x26>
 800aa30:	2b02      	cmp	r3, #2
 800aa32:	db19      	blt.n	800aa68 <MSC_BOT_DataIn+0x54>
 800aa34:	2b04      	cmp	r3, #4
 800aa36:	dc17      	bgt.n	800aa68 <MSC_BOT_DataIn+0x54>
 800aa38:	e011      	b.n	800aa5e <MSC_BOT_DataIn+0x4a>
  {
  case USBD_BOT_DATA_IN:
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	f203 231f 	addw	r3, r3, #543	; 0x21f
 800aa46:	461a      	mov	r2, r3
 800aa48:	6878      	ldr	r0, [r7, #4]
 800aa4a:	f000 f973 	bl	800ad34 <SCSI_ProcessCmd>
 800aa4e:	4603      	mov	r3, r0
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	da0b      	bge.n	800aa6c <MSC_BOT_DataIn+0x58>
    {
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800aa54:	2101      	movs	r1, #1
 800aa56:	6878      	ldr	r0, [r7, #4]
 800aa58:	f000 f8ea 	bl	800ac30 <MSC_BOT_SendCSW>
    }
    break;
 800aa5c:	e006      	b.n	800aa6c <MSC_BOT_DataIn+0x58>

  case USBD_BOT_SEND_DATA:
  case USBD_BOT_LAST_DATA_IN:
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800aa5e:	2100      	movs	r1, #0
 800aa60:	6878      	ldr	r0, [r7, #4]
 800aa62:	f000 f8e5 	bl	800ac30 <MSC_BOT_SendCSW>
    break;
 800aa66:	e002      	b.n	800aa6e <MSC_BOT_DataIn+0x5a>

  default:
    break;
 800aa68:	bf00      	nop
 800aa6a:	e000      	b.n	800aa6e <MSC_BOT_DataIn+0x5a>
    break;
 800aa6c:	bf00      	nop
  }
}
 800aa6e:	bf00      	nop
 800aa70:	3710      	adds	r7, #16
 800aa72:	46bd      	mov	sp, r7
 800aa74:	bd80      	pop	{r7, pc}

0800aa76 <MSC_BOT_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800aa76:	b580      	push	{r7, lr}
 800aa78:	b084      	sub	sp, #16
 800aa7a:	af00      	add	r7, sp, #0
 800aa7c:	6078      	str	r0, [r7, #4]
 800aa7e:	460b      	mov	r3, r1
 800aa80:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aa88:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	7a1b      	ldrb	r3, [r3, #8]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d002      	beq.n	800aa98 <MSC_BOT_DataOut+0x22>
 800aa92:	2b01      	cmp	r3, #1
 800aa94:	d004      	beq.n	800aaa0 <MSC_BOT_DataOut+0x2a>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 800aa96:	e015      	b.n	800aac4 <MSC_BOT_DataOut+0x4e>
      MSC_BOT_CBW_Decode(pdev);
 800aa98:	6878      	ldr	r0, [r7, #4]
 800aa9a:	f000 f817 	bl	800aacc <MSC_BOT_CBW_Decode>
      break;
 800aa9e:	e011      	b.n	800aac4 <MSC_BOT_DataOut+0x4e>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	f203 231f 	addw	r3, r3, #543	; 0x21f
 800aaac:	461a      	mov	r2, r3
 800aaae:	6878      	ldr	r0, [r7, #4]
 800aab0:	f000 f940 	bl	800ad34 <SCSI_ProcessCmd>
 800aab4:	4603      	mov	r3, r0
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	da03      	bge.n	800aac2 <MSC_BOT_DataOut+0x4c>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800aaba:	2101      	movs	r1, #1
 800aabc:	6878      	ldr	r0, [r7, #4]
 800aabe:	f000 f8b7 	bl	800ac30 <MSC_BOT_SendCSW>
      break;
 800aac2:	bf00      	nop
  }
}
 800aac4:	bf00      	nop
 800aac6:	3710      	adds	r7, #16
 800aac8:	46bd      	mov	sp, r7
 800aaca:	bd80      	pop	{r7, pc}

0800aacc <MSC_BOT_CBW_Decode>:
*         Decode the CBW command and set the BOT state machine accordingly
* @param  pdev: device instance
* @retval None
*/
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 800aacc:	b580      	push	{r7, lr}
 800aace:	b084      	sub	sp, #16
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aada:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dTag = hmsc->cbw.dTag;
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 800aaf4:	2101      	movs	r1, #1
 800aaf6:	6878      	ldr	r0, [r7, #4]
 800aaf8:	f00b f8f8 	bl	8015cec <USBD_LL_GetRxDataSize>
 800aafc:	4603      	mov	r3, r0
 800aafe:	2b1f      	cmp	r3, #31
 800ab00:	d114      	bne.n	800ab2c <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 800ab08:	4a32      	ldr	r2, [pc, #200]	; (800abd4 <MSC_BOT_CBW_Decode+0x108>)
 800ab0a:	4293      	cmp	r3, r2
 800ab0c:	d10e      	bne.n	800ab2c <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800ab14:	2b01      	cmp	r3, #1
 800ab16:	d809      	bhi.n	800ab2c <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d004      	beq.n	800ab2c <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bCBLength > 16U))
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800ab28:	2b10      	cmp	r3, #16
 800ab2a:	d90e      	bls.n	800ab4a <MSC_BOT_CBW_Decode+0x7e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800ab32:	2320      	movs	r3, #32
 800ab34:	2205      	movs	r2, #5
 800ab36:	6878      	ldr	r0, [r7, #4]
 800ab38:	f000 fcc9 	bl	800b4ce <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	2202      	movs	r2, #2
 800ab40:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 800ab42:	6878      	ldr	r0, [r7, #4]
 800ab44:	f000 f8a0 	bl	800ac88 <MSC_BOT_Abort>
 800ab48:	e041      	b.n	800abce <MSC_BOT_CBW_Decode+0x102>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	f203 231f 	addw	r3, r3, #543	; 0x21f
 800ab56:	461a      	mov	r2, r3
 800ab58:	6878      	ldr	r0, [r7, #4]
 800ab5a:	f000 f8eb 	bl	800ad34 <SCSI_ProcessCmd>
 800ab5e:	4603      	mov	r3, r0
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	da0c      	bge.n	800ab7e <MSC_BOT_CBW_Decode+0xb2>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	7a1b      	ldrb	r3, [r3, #8]
 800ab68:	2b05      	cmp	r3, #5
 800ab6a:	d104      	bne.n	800ab76 <MSC_BOT_CBW_Decode+0xaa>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800ab6c:	2101      	movs	r1, #1
 800ab6e:	6878      	ldr	r0, [r7, #4]
 800ab70:	f000 f85e 	bl	800ac30 <MSC_BOT_SendCSW>
 800ab74:	e02b      	b.n	800abce <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800ab76:	6878      	ldr	r0, [r7, #4]
 800ab78:	f000 f886 	bl	800ac88 <MSC_BOT_Abort>
 800ab7c:	e027      	b.n	800abce <MSC_BOT_CBW_Decode+0x102>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	7a1b      	ldrb	r3, [r3, #8]
 800ab82:	2b02      	cmp	r3, #2
 800ab84:	d022      	beq.n	800abcc <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800ab8a:	2b01      	cmp	r3, #1
 800ab8c:	d01e      	beq.n	800abcc <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800ab92:	2b03      	cmp	r3, #3
 800ab94:	d01a      	beq.n	800abcc <MSC_BOT_CBW_Decode+0x100>
    {
      if (hmsc->bot_data_length > 0U)
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	68db      	ldr	r3, [r3, #12]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d009      	beq.n	800abb2 <MSC_BOT_CBW_Decode+0xe6>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	f103 0110 	add.w	r1, r3, #16
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	68db      	ldr	r3, [r3, #12]
 800aba8:	461a      	mov	r2, r3
 800abaa:	6878      	ldr	r0, [r7, #4]
 800abac:	f000 f814 	bl	800abd8 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 800abb0:	e00d      	b.n	800abce <MSC_BOT_CBW_Decode+0x102>
      }
      else if (hmsc->bot_data_length == 0U)
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	68db      	ldr	r3, [r3, #12]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d104      	bne.n	800abc4 <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800abba:	2100      	movs	r1, #0
 800abbc:	6878      	ldr	r0, [r7, #4]
 800abbe:	f000 f837 	bl	800ac30 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 800abc2:	e004      	b.n	800abce <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800abc4:	6878      	ldr	r0, [r7, #4]
 800abc6:	f000 f85f 	bl	800ac88 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 800abca:	e000      	b.n	800abce <MSC_BOT_CBW_Decode+0x102>
      }
    }
    else
    {
      return;
 800abcc:	bf00      	nop
    }
  }
}
 800abce:	3710      	adds	r7, #16
 800abd0:	46bd      	mov	sp, r7
 800abd2:	bd80      	pop	{r7, pc}
 800abd4:	43425355 	.word	0x43425355

0800abd8 <MSC_BOT_SendData>:
* @param  buf: pointer to data buffer
* @param  len: Data Length
* @retval None
*/
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 800abd8:	b580      	push	{r7, lr}
 800abda:	b086      	sub	sp, #24
 800abdc:	af00      	add	r7, sp, #0
 800abde:	60f8      	str	r0, [r7, #12]
 800abe0:	60b9      	str	r1, [r7, #8]
 800abe2:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800abea:	617b      	str	r3, [r7, #20]

  uint32_t length = MIN(hmsc->cbw.dDataLength, len);
 800abec:	697b      	ldr	r3, [r7, #20]
 800abee:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800abf2:	687a      	ldr	r2, [r7, #4]
 800abf4:	4293      	cmp	r3, r2
 800abf6:	bf28      	it	cs
 800abf8:	4613      	movcs	r3, r2
 800abfa:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 800abfc:	697b      	ldr	r3, [r7, #20]
 800abfe:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	1ad2      	subs	r2, r2, r3
 800ac06:	697b      	ldr	r3, [r7, #20]
 800ac08:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 800ac0c:	697b      	ldr	r3, [r7, #20]
 800ac0e:	2200      	movs	r2, #0
 800ac10:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 800ac14:	697b      	ldr	r3, [r7, #20]
 800ac16:	2204      	movs	r2, #4
 800ac18:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 800ac1a:	693b      	ldr	r3, [r7, #16]
 800ac1c:	68ba      	ldr	r2, [r7, #8]
 800ac1e:	2181      	movs	r1, #129	; 0x81
 800ac20:	68f8      	ldr	r0, [r7, #12]
 800ac22:	f00b f821 	bl	8015c68 <USBD_LL_Transmit>
}
 800ac26:	bf00      	nop
 800ac28:	3718      	adds	r7, #24
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	bd80      	pop	{r7, pc}
	...

0800ac30 <MSC_BOT_SendCSW>:
* @param  pdev: device instance
* @param  status : CSW status
* @retval None
*/
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 800ac30:	b580      	push	{r7, lr}
 800ac32:	b084      	sub	sp, #16
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	6078      	str	r0, [r7, #4]
 800ac38:	460b      	mov	r3, r1
 800ac3a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ac42:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	4a0f      	ldr	r2, [pc, #60]	; (800ac84 <MSC_BOT_SendCSW+0x54>)
 800ac48:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.bStatus = CSW_Status;
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	78fa      	ldrb	r2, [r7, #3]
 800ac50:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	2200      	movs	r2, #0
 800ac58:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)&hmsc->csw,
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	f503 720c 	add.w	r2, r3, #560	; 0x230
 800ac60:	230d      	movs	r3, #13
 800ac62:	2181      	movs	r1, #129	; 0x81
 800ac64:	6878      	ldr	r0, [r7, #4]
 800ac66:	f00a ffff 	bl	8015c68 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800ac70:	231f      	movs	r3, #31
 800ac72:	2101      	movs	r1, #1
 800ac74:	6878      	ldr	r0, [r7, #4]
 800ac76:	f00b f818 	bl	8015caa <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 800ac7a:	bf00      	nop
 800ac7c:	3710      	adds	r7, #16
 800ac7e:	46bd      	mov	sp, r7
 800ac80:	bd80      	pop	{r7, pc}
 800ac82:	bf00      	nop
 800ac84:	53425355 	.word	0x53425355

0800ac88 <MSC_BOT_Abort>:
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b084      	sub	sp, #16
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ac96:	60fb      	str	r3, [r7, #12]

  if ((hmsc->cbw.bmFlags == 0U) &&
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d10c      	bne.n	800acbc <MSC_BOT_Abort+0x34>
      (hmsc->cbw.dDataLength != 0U) &&
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d007      	beq.n	800acbc <MSC_BOT_Abort+0x34>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d103      	bne.n	800acbc <MSC_BOT_Abort+0x34>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 800acb4:	2101      	movs	r1, #1
 800acb6:	6878      	ldr	r0, [r7, #4]
 800acb8:	f00a ff4d 	bl	8015b56 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 800acbc:	2181      	movs	r1, #129	; 0x81
 800acbe:	6878      	ldr	r0, [r7, #4]
 800acc0:	f00a ff49 	bl	8015b56 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	7a5b      	ldrb	r3, [r3, #9]
 800acc8:	2b02      	cmp	r3, #2
 800acca:	d107      	bne.n	800acdc <MSC_BOT_Abort+0x54>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 800accc:	2181      	movs	r1, #129	; 0x81
 800acce:	6878      	ldr	r0, [r7, #4]
 800acd0:	f00a ff41 	bl	8015b56 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 800acd4:	2101      	movs	r1, #1
 800acd6:	6878      	ldr	r0, [r7, #4]
 800acd8:	f00a ff3d 	bl	8015b56 <USBD_LL_StallEP>
  }
}
 800acdc:	bf00      	nop
 800acde:	3710      	adds	r7, #16
 800ace0:	46bd      	mov	sp, r7
 800ace2:	bd80      	pop	{r7, pc}

0800ace4 <MSC_BOT_CplClrFeature>:
* @param  epnum: endpoint index
* @retval None
*/

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ace4:	b580      	push	{r7, lr}
 800ace6:	b084      	sub	sp, #16
 800ace8:	af00      	add	r7, sp, #0
 800acea:	6078      	str	r0, [r7, #4]
 800acec:	460b      	mov	r3, r1
 800acee:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800acf6:	60fb      	str	r3, [r7, #12]

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	7a5b      	ldrb	r3, [r3, #9]
 800acfc:	2b02      	cmp	r3, #2
 800acfe:	d108      	bne.n	800ad12 <MSC_BOT_CplClrFeature+0x2e>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 800ad00:	2181      	movs	r1, #129	; 0x81
 800ad02:	6878      	ldr	r0, [r7, #4]
 800ad04:	f00a ff27 	bl	8015b56 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 800ad08:	2101      	movs	r1, #1
 800ad0a:	6878      	ldr	r0, [r7, #4]
 800ad0c:	f00a ff23 	bl	8015b56 <USBD_LL_StallEP>
 800ad10:	e00d      	b.n	800ad2e <MSC_BOT_CplClrFeature+0x4a>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 800ad12:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	da08      	bge.n	800ad2c <MSC_BOT_CplClrFeature+0x48>
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	7a5b      	ldrb	r3, [r3, #9]
 800ad1e:	2b01      	cmp	r3, #1
 800ad20:	d004      	beq.n	800ad2c <MSC_BOT_CplClrFeature+0x48>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800ad22:	2101      	movs	r1, #1
 800ad24:	6878      	ldr	r0, [r7, #4]
 800ad26:	f7ff ff83 	bl	800ac30 <MSC_BOT_SendCSW>
 800ad2a:	e000      	b.n	800ad2e <MSC_BOT_CplClrFeature+0x4a>
  }
  else
  {
    return;
 800ad2c:	bf00      	nop
  }
}
 800ad2e:	3710      	adds	r7, #16
 800ad30:	46bd      	mov	sp, r7
 800ad32:	bd80      	pop	{r7, pc}

0800ad34 <SCSI_ProcessCmd>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b086      	sub	sp, #24
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	60f8      	str	r0, [r7, #12]
 800ad3c:	460b      	mov	r3, r1
 800ad3e:	607a      	str	r2, [r7, #4]
 800ad40:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ad48:	613b      	str	r3, [r7, #16]

  switch (cmd[0])
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	781b      	ldrb	r3, [r3, #0]
 800ad4e:	2b25      	cmp	r3, #37	; 0x25
 800ad50:	d06e      	beq.n	800ae30 <SCSI_ProcessCmd+0xfc>
 800ad52:	2b25      	cmp	r3, #37	; 0x25
 800ad54:	dc11      	bgt.n	800ad7a <SCSI_ProcessCmd+0x46>
 800ad56:	2b1a      	cmp	r3, #26
 800ad58:	d04f      	beq.n	800adfa <SCSI_ProcessCmd+0xc6>
 800ad5a:	2b1a      	cmp	r3, #26
 800ad5c:	dc06      	bgt.n	800ad6c <SCSI_ProcessCmd+0x38>
 800ad5e:	2b03      	cmp	r3, #3
 800ad60:	d027      	beq.n	800adb2 <SCSI_ProcessCmd+0x7e>
 800ad62:	2b12      	cmp	r3, #18
 800ad64:	d02e      	beq.n	800adc4 <SCSI_ProcessCmd+0x90>
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d01a      	beq.n	800ada0 <SCSI_ProcessCmd+0x6c>
 800ad6a:	e0a0      	b.n	800aeae <SCSI_ProcessCmd+0x17a>
 800ad6c:	2b1e      	cmp	r3, #30
 800ad6e:	d03b      	beq.n	800ade8 <SCSI_ProcessCmd+0xb4>
 800ad70:	2b23      	cmp	r3, #35	; 0x23
 800ad72:	d054      	beq.n	800ae1e <SCSI_ProcessCmd+0xea>
 800ad74:	2b1b      	cmp	r3, #27
 800ad76:	d02e      	beq.n	800add6 <SCSI_ProcessCmd+0xa2>
 800ad78:	e099      	b.n	800aeae <SCSI_ProcessCmd+0x17a>
 800ad7a:	2b5a      	cmp	r3, #90	; 0x5a
 800ad7c:	d046      	beq.n	800ae0c <SCSI_ProcessCmd+0xd8>
 800ad7e:	2b5a      	cmp	r3, #90	; 0x5a
 800ad80:	dc07      	bgt.n	800ad92 <SCSI_ProcessCmd+0x5e>
 800ad82:	2b2a      	cmp	r3, #42	; 0x2a
 800ad84:	d078      	beq.n	800ae78 <SCSI_ProcessCmd+0x144>
 800ad86:	2b2f      	cmp	r3, #47	; 0x2f
 800ad88:	f000 8088 	beq.w	800ae9c <SCSI_ProcessCmd+0x168>
 800ad8c:	2b28      	cmp	r3, #40	; 0x28
 800ad8e:	d061      	beq.n	800ae54 <SCSI_ProcessCmd+0x120>
 800ad90:	e08d      	b.n	800aeae <SCSI_ProcessCmd+0x17a>
 800ad92:	2ba8      	cmp	r3, #168	; 0xa8
 800ad94:	d067      	beq.n	800ae66 <SCSI_ProcessCmd+0x132>
 800ad96:	2baa      	cmp	r3, #170	; 0xaa
 800ad98:	d077      	beq.n	800ae8a <SCSI_ProcessCmd+0x156>
 800ad9a:	2b9e      	cmp	r3, #158	; 0x9e
 800ad9c:	d051      	beq.n	800ae42 <SCSI_ProcessCmd+0x10e>
 800ad9e:	e086      	b.n	800aeae <SCSI_ProcessCmd+0x17a>
  {
  case SCSI_TEST_UNIT_READY:
    ret = SCSI_TestUnitReady(pdev, lun, cmd);
 800ada0:	7afb      	ldrb	r3, [r7, #11]
 800ada2:	687a      	ldr	r2, [r7, #4]
 800ada4:	4619      	mov	r1, r3
 800ada6:	68f8      	ldr	r0, [r7, #12]
 800ada8:	f000 f893 	bl	800aed2 <SCSI_TestUnitReady>
 800adac:	4603      	mov	r3, r0
 800adae:	75fb      	strb	r3, [r7, #23]
    break;
 800adb0:	e089      	b.n	800aec6 <SCSI_ProcessCmd+0x192>

  case SCSI_REQUEST_SENSE:
    ret = SCSI_RequestSense(pdev, lun, cmd);
 800adb2:	7afb      	ldrb	r3, [r7, #11]
 800adb4:	687a      	ldr	r2, [r7, #4]
 800adb6:	4619      	mov	r1, r3
 800adb8:	68f8      	ldr	r0, [r7, #12]
 800adba:	f000 fb0f 	bl	800b3dc <SCSI_RequestSense>
 800adbe:	4603      	mov	r3, r0
 800adc0:	75fb      	strb	r3, [r7, #23]
    break;
 800adc2:	e080      	b.n	800aec6 <SCSI_ProcessCmd+0x192>

  case SCSI_INQUIRY:
    ret = SCSI_Inquiry(pdev, lun, cmd);
 800adc4:	7afb      	ldrb	r3, [r7, #11]
 800adc6:	687a      	ldr	r2, [r7, #4]
 800adc8:	4619      	mov	r1, r3
 800adca:	68f8      	ldr	r0, [r7, #12]
 800adcc:	f000 f8cc 	bl	800af68 <SCSI_Inquiry>
 800add0:	4603      	mov	r3, r0
 800add2:	75fb      	strb	r3, [r7, #23]
    break;
 800add4:	e077      	b.n	800aec6 <SCSI_ProcessCmd+0x192>

  case SCSI_START_STOP_UNIT:
    ret = SCSI_StartStopUnit(pdev, lun, cmd);
 800add6:	7afb      	ldrb	r3, [r7, #11]
 800add8:	687a      	ldr	r2, [r7, #4]
 800adda:	4619      	mov	r1, r3
 800addc:	68f8      	ldr	r0, [r7, #12]
 800adde:	f000 fbb9 	bl	800b554 <SCSI_StartStopUnit>
 800ade2:	4603      	mov	r3, r0
 800ade4:	75fb      	strb	r3, [r7, #23]
    break;
 800ade6:	e06e      	b.n	800aec6 <SCSI_ProcessCmd+0x192>

  case SCSI_ALLOW_MEDIUM_REMOVAL:
    ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 800ade8:	7afb      	ldrb	r3, [r7, #11]
 800adea:	687a      	ldr	r2, [r7, #4]
 800adec:	4619      	mov	r1, r3
 800adee:	68f8      	ldr	r0, [r7, #12]
 800adf0:	f000 fbfb 	bl	800b5ea <SCSI_AllowPreventRemovable>
 800adf4:	4603      	mov	r3, r0
 800adf6:	75fb      	strb	r3, [r7, #23]
    break;
 800adf8:	e065      	b.n	800aec6 <SCSI_ProcessCmd+0x192>

  case SCSI_MODE_SENSE6:
    ret = SCSI_ModeSense6(pdev, lun, cmd);
 800adfa:	7afb      	ldrb	r3, [r7, #11]
 800adfc:	687a      	ldr	r2, [r7, #4]
 800adfe:	4619      	mov	r1, r3
 800ae00:	68f8      	ldr	r0, [r7, #12]
 800ae02:	f000 fa9f 	bl	800b344 <SCSI_ModeSense6>
 800ae06:	4603      	mov	r3, r0
 800ae08:	75fb      	strb	r3, [r7, #23]
    break;
 800ae0a:	e05c      	b.n	800aec6 <SCSI_ProcessCmd+0x192>

  case SCSI_MODE_SENSE10:
    ret = SCSI_ModeSense10(pdev, lun, cmd);
 800ae0c:	7afb      	ldrb	r3, [r7, #11]
 800ae0e:	687a      	ldr	r2, [r7, #4]
 800ae10:	4619      	mov	r1, r3
 800ae12:	68f8      	ldr	r0, [r7, #12]
 800ae14:	f000 fabc 	bl	800b390 <SCSI_ModeSense10>
 800ae18:	4603      	mov	r3, r0
 800ae1a:	75fb      	strb	r3, [r7, #23]
    break;
 800ae1c:	e053      	b.n	800aec6 <SCSI_ProcessCmd+0x192>

  case SCSI_READ_FORMAT_CAPACITIES:
    ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 800ae1e:	7afb      	ldrb	r3, [r7, #11]
 800ae20:	687a      	ldr	r2, [r7, #4]
 800ae22:	4619      	mov	r1, r3
 800ae24:	68f8      	ldr	r0, [r7, #12]
 800ae26:	f000 fa20 	bl	800b26a <SCSI_ReadFormatCapacity>
 800ae2a:	4603      	mov	r3, r0
 800ae2c:	75fb      	strb	r3, [r7, #23]
    break;
 800ae2e:	e04a      	b.n	800aec6 <SCSI_ProcessCmd+0x192>

  case SCSI_READ_CAPACITY10:
    ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 800ae30:	7afb      	ldrb	r3, [r7, #11]
 800ae32:	687a      	ldr	r2, [r7, #4]
 800ae34:	4619      	mov	r1, r3
 800ae36:	68f8      	ldr	r0, [r7, #12]
 800ae38:	f000 f904 	bl	800b044 <SCSI_ReadCapacity10>
 800ae3c:	4603      	mov	r3, r0
 800ae3e:	75fb      	strb	r3, [r7, #23]
    break;
 800ae40:	e041      	b.n	800aec6 <SCSI_ProcessCmd+0x192>

  case SCSI_READ_CAPACITY16:
    ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 800ae42:	7afb      	ldrb	r3, [r7, #11]
 800ae44:	687a      	ldr	r2, [r7, #4]
 800ae46:	4619      	mov	r1, r3
 800ae48:	68f8      	ldr	r0, [r7, #12]
 800ae4a:	f000 f96a 	bl	800b122 <SCSI_ReadCapacity16>
 800ae4e:	4603      	mov	r3, r0
 800ae50:	75fb      	strb	r3, [r7, #23]
    break;
 800ae52:	e038      	b.n	800aec6 <SCSI_ProcessCmd+0x192>

  case SCSI_READ10:
    ret = SCSI_Read10(pdev, lun, cmd);
 800ae54:	7afb      	ldrb	r3, [r7, #11]
 800ae56:	687a      	ldr	r2, [r7, #4]
 800ae58:	4619      	mov	r1, r3
 800ae5a:	68f8      	ldr	r0, [r7, #12]
 800ae5c:	f000 fbe8 	bl	800b630 <SCSI_Read10>
 800ae60:	4603      	mov	r3, r0
 800ae62:	75fb      	strb	r3, [r7, #23]
    break;
 800ae64:	e02f      	b.n	800aec6 <SCSI_ProcessCmd+0x192>

  case SCSI_READ12:
    ret = SCSI_Read12(pdev, lun, cmd);
 800ae66:	7afb      	ldrb	r3, [r7, #11]
 800ae68:	687a      	ldr	r2, [r7, #4]
 800ae6a:	4619      	mov	r1, r3
 800ae6c:	68f8      	ldr	r0, [r7, #12]
 800ae6e:	f000 fc79 	bl	800b764 <SCSI_Read12>
 800ae72:	4603      	mov	r3, r0
 800ae74:	75fb      	strb	r3, [r7, #23]
    break;
 800ae76:	e026      	b.n	800aec6 <SCSI_ProcessCmd+0x192>

  case SCSI_WRITE10:
    ret = SCSI_Write10(pdev, lun, cmd);
 800ae78:	7afb      	ldrb	r3, [r7, #11]
 800ae7a:	687a      	ldr	r2, [r7, #4]
 800ae7c:	4619      	mov	r1, r3
 800ae7e:	68f8      	ldr	r0, [r7, #12]
 800ae80:	f000 fd15 	bl	800b8ae <SCSI_Write10>
 800ae84:	4603      	mov	r3, r0
 800ae86:	75fb      	strb	r3, [r7, #23]
    break;
 800ae88:	e01d      	b.n	800aec6 <SCSI_ProcessCmd+0x192>

  case SCSI_WRITE12:
    ret = SCSI_Write12(pdev, lun, cmd);
 800ae8a:	7afb      	ldrb	r3, [r7, #11]
 800ae8c:	687a      	ldr	r2, [r7, #4]
 800ae8e:	4619      	mov	r1, r3
 800ae90:	68f8      	ldr	r0, [r7, #12]
 800ae92:	f000 fdcb 	bl	800ba2c <SCSI_Write12>
 800ae96:	4603      	mov	r3, r0
 800ae98:	75fb      	strb	r3, [r7, #23]
    break;
 800ae9a:	e014      	b.n	800aec6 <SCSI_ProcessCmd+0x192>

  case SCSI_VERIFY10:
    ret = SCSI_Verify10(pdev, lun, cmd);
 800ae9c:	7afb      	ldrb	r3, [r7, #11]
 800ae9e:	687a      	ldr	r2, [r7, #4]
 800aea0:	4619      	mov	r1, r3
 800aea2:	68f8      	ldr	r0, [r7, #12]
 800aea4:	f000 fe91 	bl	800bbca <SCSI_Verify10>
 800aea8:	4603      	mov	r3, r0
 800aeaa:	75fb      	strb	r3, [r7, #23]
    break;
 800aeac:	e00b      	b.n	800aec6 <SCSI_ProcessCmd+0x192>

  default:
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 800aeae:	7af9      	ldrb	r1, [r7, #11]
 800aeb0:	2320      	movs	r3, #32
 800aeb2:	2205      	movs	r2, #5
 800aeb4:	68f8      	ldr	r0, [r7, #12]
 800aeb6:	f000 fb0a 	bl	800b4ce <SCSI_SenseCode>
    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800aeba:	693b      	ldr	r3, [r7, #16]
 800aebc:	2202      	movs	r2, #2
 800aebe:	725a      	strb	r2, [r3, #9]
    ret = -1;
 800aec0:	23ff      	movs	r3, #255	; 0xff
 800aec2:	75fb      	strb	r3, [r7, #23]
    break;
 800aec4:	bf00      	nop
  }

  return ret;
 800aec6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800aeca:	4618      	mov	r0, r3
 800aecc:	3718      	adds	r7, #24
 800aece:	46bd      	mov	sp, r7
 800aed0:	bd80      	pop	{r7, pc}

0800aed2 <SCSI_TestUnitReady>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800aed2:	b580      	push	{r7, lr}
 800aed4:	b086      	sub	sp, #24
 800aed6:	af00      	add	r7, sp, #0
 800aed8:	60f8      	str	r0, [r7, #12]
 800aeda:	460b      	mov	r3, r1
 800aedc:	607a      	str	r2, [r7, #4]
 800aede:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aee6:	617b      	str	r3, [r7, #20]

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 800aee8:	697b      	ldr	r3, [r7, #20]
 800aeea:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d00a      	beq.n	800af08 <SCSI_TestUnitReady+0x36>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800aef2:	697b      	ldr	r3, [r7, #20]
 800aef4:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800aef8:	2320      	movs	r3, #32
 800aefa:	2205      	movs	r2, #5
 800aefc:	68f8      	ldr	r0, [r7, #12]
 800aefe:	f000 fae6 	bl	800b4ce <SCSI_SenseCode>

    return -1;
 800af02:	f04f 33ff 	mov.w	r3, #4294967295
 800af06:	e02a      	b.n	800af5e <SCSI_TestUnitReady+0x8c>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800af08:	697b      	ldr	r3, [r7, #20]
 800af0a:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800af0e:	2b02      	cmp	r3, #2
 800af10:	d10b      	bne.n	800af2a <SCSI_TestUnitReady+0x58>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800af12:	7af9      	ldrb	r1, [r7, #11]
 800af14:	233a      	movs	r3, #58	; 0x3a
 800af16:	2202      	movs	r2, #2
 800af18:	68f8      	ldr	r0, [r7, #12]
 800af1a:	f000 fad8 	bl	800b4ce <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800af1e:	697b      	ldr	r3, [r7, #20]
 800af20:	2205      	movs	r2, #5
 800af22:	721a      	strb	r2, [r3, #8]
    return -1;
 800af24:	f04f 33ff 	mov.w	r3, #4294967295
 800af28:	e019      	b.n	800af5e <SCSI_TestUnitReady+0x8c>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800af30:	689b      	ldr	r3, [r3, #8]
 800af32:	7afa      	ldrb	r2, [r7, #11]
 800af34:	4610      	mov	r0, r2
 800af36:	4798      	blx	r3
 800af38:	4603      	mov	r3, r0
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d00b      	beq.n	800af56 <SCSI_TestUnitReady+0x84>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800af3e:	7af9      	ldrb	r1, [r7, #11]
 800af40:	233a      	movs	r3, #58	; 0x3a
 800af42:	2202      	movs	r2, #2
 800af44:	68f8      	ldr	r0, [r7, #12]
 800af46:	f000 fac2 	bl	800b4ce <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800af4a:	697b      	ldr	r3, [r7, #20]
 800af4c:	2205      	movs	r2, #5
 800af4e:	721a      	strb	r2, [r3, #8]

    return -1;
 800af50:	f04f 33ff 	mov.w	r3, #4294967295
 800af54:	e003      	b.n	800af5e <SCSI_TestUnitReady+0x8c>
  }
  hmsc->bot_data_length = 0U;
 800af56:	697b      	ldr	r3, [r7, #20]
 800af58:	2200      	movs	r2, #0
 800af5a:	60da      	str	r2, [r3, #12]

  return 0;
 800af5c:	2300      	movs	r3, #0
}
 800af5e:	4618      	mov	r0, r3
 800af60:	3718      	adds	r7, #24
 800af62:	46bd      	mov	sp, r7
 800af64:	bd80      	pop	{r7, pc}
	...

0800af68 <SCSI_Inquiry>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	b088      	sub	sp, #32
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	60f8      	str	r0, [r7, #12]
 800af70:	460b      	mov	r3, r1
 800af72:	607a      	str	r2, [r7, #4]
 800af74:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800af7c:	61bb      	str	r3, [r7, #24]

  if (hmsc->cbw.dDataLength == 0U)
 800af7e:	69bb      	ldr	r3, [r7, #24]
 800af80:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800af84:	2b00      	cmp	r3, #0
 800af86:	d10a      	bne.n	800af9e <SCSI_Inquiry+0x36>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800af88:	69bb      	ldr	r3, [r7, #24]
 800af8a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800af8e:	2320      	movs	r3, #32
 800af90:	2205      	movs	r2, #5
 800af92:	68f8      	ldr	r0, [r7, #12]
 800af94:	f000 fa9b 	bl	800b4ce <SCSI_SenseCode>
    return -1;
 800af98:	f04f 33ff 	mov.w	r3, #4294967295
 800af9c:	e04a      	b.n	800b034 <SCSI_Inquiry+0xcc>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	3301      	adds	r3, #1
 800afa2:	781b      	ldrb	r3, [r3, #0]
 800afa4:	f003 0301 	and.w	r3, r3, #1
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d020      	beq.n	800afee <SCSI_Inquiry+0x86>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	3302      	adds	r3, #2
 800afb0:	781b      	ldrb	r3, [r3, #0]
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d105      	bne.n	800afc2 <SCSI_Inquiry+0x5a>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 800afb6:	2206      	movs	r2, #6
 800afb8:	4920      	ldr	r1, [pc, #128]	; (800b03c <SCSI_Inquiry+0xd4>)
 800afba:	69b8      	ldr	r0, [r7, #24]
 800afbc:	f000 ff50 	bl	800be60 <SCSI_UpdateBotData>
 800afc0:	e037      	b.n	800b032 <SCSI_Inquiry+0xca>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	3302      	adds	r3, #2
 800afc6:	781b      	ldrb	r3, [r3, #0]
 800afc8:	2b80      	cmp	r3, #128	; 0x80
 800afca:	d105      	bne.n	800afd8 <SCSI_Inquiry+0x70>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 800afcc:	2208      	movs	r2, #8
 800afce:	491c      	ldr	r1, [pc, #112]	; (800b040 <SCSI_Inquiry+0xd8>)
 800afd0:	69b8      	ldr	r0, [r7, #24]
 800afd2:	f000 ff45 	bl	800be60 <SCSI_UpdateBotData>
 800afd6:	e02c      	b.n	800b032 <SCSI_Inquiry+0xca>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 800afd8:	69bb      	ldr	r3, [r7, #24]
 800afda:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800afde:	2324      	movs	r3, #36	; 0x24
 800afe0:	2205      	movs	r2, #5
 800afe2:	68f8      	ldr	r0, [r7, #12]
 800afe4:	f000 fa73 	bl	800b4ce <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 800afe8:	f04f 33ff 	mov.w	r3, #4294967295
 800afec:	e022      	b.n	800b034 <SCSI_Inquiry+0xcc>
    }
  }
  else
  {
    pPage = (uint8_t *)&((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aff4:	69d9      	ldr	r1, [r3, #28]
 800aff6:	7afa      	ldrb	r2, [r7, #11]
 800aff8:	4613      	mov	r3, r2
 800affa:	00db      	lsls	r3, r3, #3
 800affc:	4413      	add	r3, r2
 800affe:	009b      	lsls	r3, r3, #2
 800b000:	440b      	add	r3, r1
 800b002:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 800b004:	697b      	ldr	r3, [r7, #20]
 800b006:	3304      	adds	r3, #4
 800b008:	781b      	ldrb	r3, [r3, #0]
 800b00a:	b29b      	uxth	r3, r3
 800b00c:	3305      	adds	r3, #5
 800b00e:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	3304      	adds	r3, #4
 800b014:	781b      	ldrb	r3, [r3, #0]
 800b016:	b29b      	uxth	r3, r3
 800b018:	8bfa      	ldrh	r2, [r7, #30]
 800b01a:	429a      	cmp	r2, r3
 800b01c:	d303      	bcc.n	800b026 <SCSI_Inquiry+0xbe>
    {
      len = params[4];
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	3304      	adds	r3, #4
 800b022:	781b      	ldrb	r3, [r3, #0]
 800b024:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 800b026:	8bfb      	ldrh	r3, [r7, #30]
 800b028:	461a      	mov	r2, r3
 800b02a:	6979      	ldr	r1, [r7, #20]
 800b02c:	69b8      	ldr	r0, [r7, #24]
 800b02e:	f000 ff17 	bl	800be60 <SCSI_UpdateBotData>
  }

  return 0;
 800b032:	2300      	movs	r3, #0
}
 800b034:	4618      	mov	r0, r3
 800b036:	3720      	adds	r7, #32
 800b038:	46bd      	mov	sp, r7
 800b03a:	bd80      	pop	{r7, pc}
 800b03c:	200000c0 	.word	0x200000c0
 800b040:	200000c8 	.word	0x200000c8

0800b044 <SCSI_ReadCapacity10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800b044:	b580      	push	{r7, lr}
 800b046:	b086      	sub	sp, #24
 800b048:	af00      	add	r7, sp, #0
 800b04a:	60f8      	str	r0, [r7, #12]
 800b04c:	460b      	mov	r3, r1
 800b04e:	607a      	str	r2, [r7, #4]
 800b050:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b058:	617b      	str	r3, [r7, #20]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b060:	685b      	ldr	r3, [r3, #4]
 800b062:	697a      	ldr	r2, [r7, #20]
 800b064:	f502 711a 	add.w	r1, r2, #616	; 0x268
 800b068:	697a      	ldr	r2, [r7, #20]
 800b06a:	f502 7219 	add.w	r2, r2, #612	; 0x264
 800b06e:	7af8      	ldrb	r0, [r7, #11]
 800b070:	4798      	blx	r3
 800b072:	4603      	mov	r3, r0
 800b074:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800b076:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d104      	bne.n	800b088 <SCSI_ReadCapacity10+0x44>
 800b07e:	697b      	ldr	r3, [r7, #20]
 800b080:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800b084:	2b02      	cmp	r3, #2
 800b086:	d108      	bne.n	800b09a <SCSI_ReadCapacity10+0x56>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800b088:	7af9      	ldrb	r1, [r7, #11]
 800b08a:	233a      	movs	r3, #58	; 0x3a
 800b08c:	2202      	movs	r2, #2
 800b08e:	68f8      	ldr	r0, [r7, #12]
 800b090:	f000 fa1d 	bl	800b4ce <SCSI_SenseCode>
    return -1;
 800b094:	f04f 33ff 	mov.w	r3, #4294967295
 800b098:	e03f      	b.n	800b11a <SCSI_ReadCapacity10+0xd6>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800b09a:	697b      	ldr	r3, [r7, #20]
 800b09c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800b0a0:	3b01      	subs	r3, #1
 800b0a2:	0e1b      	lsrs	r3, r3, #24
 800b0a4:	b2da      	uxtb	r2, r3
 800b0a6:	697b      	ldr	r3, [r7, #20]
 800b0a8:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800b0aa:	697b      	ldr	r3, [r7, #20]
 800b0ac:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800b0b0:	3b01      	subs	r3, #1
 800b0b2:	0c1b      	lsrs	r3, r3, #16
 800b0b4:	b2da      	uxtb	r2, r3
 800b0b6:	697b      	ldr	r3, [r7, #20]
 800b0b8:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800b0ba:	697b      	ldr	r3, [r7, #20]
 800b0bc:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800b0c0:	3b01      	subs	r3, #1
 800b0c2:	0a1b      	lsrs	r3, r3, #8
 800b0c4:	b2da      	uxtb	r2, r3
 800b0c6:	697b      	ldr	r3, [r7, #20]
 800b0c8:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800b0ca:	697b      	ldr	r3, [r7, #20]
 800b0cc:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800b0d0:	b2db      	uxtb	r3, r3
 800b0d2:	3b01      	subs	r3, #1
 800b0d4:	b2da      	uxtb	r2, r3
 800b0d6:	697b      	ldr	r3, [r7, #20]
 800b0d8:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800b0da:	697b      	ldr	r3, [r7, #20]
 800b0dc:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800b0e0:	161b      	asrs	r3, r3, #24
 800b0e2:	b2da      	uxtb	r2, r3
 800b0e4:	697b      	ldr	r3, [r7, #20]
 800b0e6:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800b0e8:	697b      	ldr	r3, [r7, #20]
 800b0ea:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800b0ee:	141b      	asrs	r3, r3, #16
 800b0f0:	b2da      	uxtb	r2, r3
 800b0f2:	697b      	ldr	r3, [r7, #20]
 800b0f4:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800b0f6:	697b      	ldr	r3, [r7, #20]
 800b0f8:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800b0fc:	0a1b      	lsrs	r3, r3, #8
 800b0fe:	b29b      	uxth	r3, r3
 800b100:	b2da      	uxtb	r2, r3
 800b102:	697b      	ldr	r3, [r7, #20]
 800b104:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 800b106:	697b      	ldr	r3, [r7, #20]
 800b108:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800b10c:	b2da      	uxtb	r2, r3
 800b10e:	697b      	ldr	r3, [r7, #20]
 800b110:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 800b112:	697b      	ldr	r3, [r7, #20]
 800b114:	2208      	movs	r2, #8
 800b116:	60da      	str	r2, [r3, #12]

  return 0;
 800b118:	2300      	movs	r3, #0

}
 800b11a:	4618      	mov	r0, r3
 800b11c:	3718      	adds	r7, #24
 800b11e:	46bd      	mov	sp, r7
 800b120:	bd80      	pop	{r7, pc}

0800b122 <SCSI_ReadCapacity16>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800b122:	b580      	push	{r7, lr}
 800b124:	b088      	sub	sp, #32
 800b126:	af00      	add	r7, sp, #0
 800b128:	60f8      	str	r0, [r7, #12]
 800b12a:	460b      	mov	r3, r1
 800b12c:	607a      	str	r2, [r7, #4]
 800b12e:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b136:	61bb      	str	r3, [r7, #24]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b13e:	685b      	ldr	r3, [r3, #4]
 800b140:	69ba      	ldr	r2, [r7, #24]
 800b142:	f502 711a 	add.w	r1, r2, #616	; 0x268
 800b146:	69ba      	ldr	r2, [r7, #24]
 800b148:	f502 7219 	add.w	r2, r2, #612	; 0x264
 800b14c:	7af8      	ldrb	r0, [r7, #11]
 800b14e:	4798      	blx	r3
 800b150:	4603      	mov	r3, r0
 800b152:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800b154:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d104      	bne.n	800b166 <SCSI_ReadCapacity16+0x44>
 800b15c:	69bb      	ldr	r3, [r7, #24]
 800b15e:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800b162:	2b02      	cmp	r3, #2
 800b164:	d108      	bne.n	800b178 <SCSI_ReadCapacity16+0x56>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800b166:	7af9      	ldrb	r1, [r7, #11]
 800b168:	233a      	movs	r3, #58	; 0x3a
 800b16a:	2202      	movs	r2, #2
 800b16c:	68f8      	ldr	r0, [r7, #12]
 800b16e:	f000 f9ae 	bl	800b4ce <SCSI_SenseCode>
    return -1;
 800b172:	f04f 33ff 	mov.w	r3, #4294967295
 800b176:	e074      	b.n	800b262 <SCSI_ReadCapacity16+0x140>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	330a      	adds	r3, #10
 800b17c:	781b      	ldrb	r3, [r3, #0]
 800b17e:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	330b      	adds	r3, #11
 800b184:	781b      	ldrb	r3, [r3, #0]
 800b186:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800b188:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	330c      	adds	r3, #12
 800b18e:	781b      	ldrb	r3, [r3, #0]
 800b190:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800b192:	4313      	orrs	r3, r2
                           (uint32_t)params[13];
 800b194:	687a      	ldr	r2, [r7, #4]
 800b196:	320d      	adds	r2, #13
 800b198:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800b19a:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800b19c:	69bb      	ldr	r3, [r7, #24]
 800b19e:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800b1a0:	2300      	movs	r3, #0
 800b1a2:	77fb      	strb	r3, [r7, #31]
 800b1a4:	e007      	b.n	800b1b6 <SCSI_ReadCapacity16+0x94>
  {
    hmsc->bot_data[idx] = 0U;
 800b1a6:	7ffb      	ldrb	r3, [r7, #31]
 800b1a8:	69ba      	ldr	r2, [r7, #24]
 800b1aa:	4413      	add	r3, r2
 800b1ac:	2200      	movs	r2, #0
 800b1ae:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800b1b0:	7ffb      	ldrb	r3, [r7, #31]
 800b1b2:	3301      	adds	r3, #1
 800b1b4:	77fb      	strb	r3, [r7, #31]
 800b1b6:	7ffa      	ldrb	r2, [r7, #31]
 800b1b8:	69bb      	ldr	r3, [r7, #24]
 800b1ba:	68db      	ldr	r3, [r3, #12]
 800b1bc:	429a      	cmp	r2, r3
 800b1be:	d3f2      	bcc.n	800b1a6 <SCSI_ReadCapacity16+0x84>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800b1c0:	69bb      	ldr	r3, [r7, #24]
 800b1c2:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800b1c6:	3b01      	subs	r3, #1
 800b1c8:	0e1b      	lsrs	r3, r3, #24
 800b1ca:	b2da      	uxtb	r2, r3
 800b1cc:	69bb      	ldr	r3, [r7, #24]
 800b1ce:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800b1d0:	69bb      	ldr	r3, [r7, #24]
 800b1d2:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800b1d6:	3b01      	subs	r3, #1
 800b1d8:	0c1b      	lsrs	r3, r3, #16
 800b1da:	b2da      	uxtb	r2, r3
 800b1dc:	69bb      	ldr	r3, [r7, #24]
 800b1de:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800b1e0:	69bb      	ldr	r3, [r7, #24]
 800b1e2:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800b1e6:	3b01      	subs	r3, #1
 800b1e8:	0a1b      	lsrs	r3, r3, #8
 800b1ea:	b2da      	uxtb	r2, r3
 800b1ec:	69bb      	ldr	r3, [r7, #24]
 800b1ee:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800b1f0:	69bb      	ldr	r3, [r7, #24]
 800b1f2:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800b1f6:	b2db      	uxtb	r3, r3
 800b1f8:	3b01      	subs	r3, #1
 800b1fa:	b2da      	uxtb	r2, r3
 800b1fc:	69bb      	ldr	r3, [r7, #24]
 800b1fe:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800b200:	69bb      	ldr	r3, [r7, #24]
 800b202:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800b206:	161b      	asrs	r3, r3, #24
 800b208:	b2da      	uxtb	r2, r3
 800b20a:	69bb      	ldr	r3, [r7, #24]
 800b20c:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800b20e:	69bb      	ldr	r3, [r7, #24]
 800b210:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800b214:	141b      	asrs	r3, r3, #16
 800b216:	b2da      	uxtb	r2, r3
 800b218:	69bb      	ldr	r3, [r7, #24]
 800b21a:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800b21c:	69bb      	ldr	r3, [r7, #24]
 800b21e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800b222:	0a1b      	lsrs	r3, r3, #8
 800b224:	b29b      	uxth	r3, r3
 800b226:	b2da      	uxtb	r2, r3
 800b228:	69bb      	ldr	r3, [r7, #24]
 800b22a:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 800b22c:	69bb      	ldr	r3, [r7, #24]
 800b22e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800b232:	b2da      	uxtb	r2, r3
 800b234:	69bb      	ldr	r3, [r7, #24]
 800b236:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	330a      	adds	r3, #10
 800b23c:	781b      	ldrb	r3, [r3, #0]
 800b23e:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	330b      	adds	r3, #11
 800b244:	781b      	ldrb	r3, [r3, #0]
 800b246:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800b248:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	330c      	adds	r3, #12
 800b24e:	781b      	ldrb	r3, [r3, #0]
 800b250:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800b252:	4313      	orrs	r3, r2
                           (uint32_t)params[13];
 800b254:	687a      	ldr	r2, [r7, #4]
 800b256:	320d      	adds	r2, #13
 800b258:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800b25a:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800b25c:	69bb      	ldr	r3, [r7, #24]
 800b25e:	60da      	str	r2, [r3, #12]

  return 0;
 800b260:	2300      	movs	r3, #0
}
 800b262:	4618      	mov	r0, r3
 800b264:	3720      	adds	r7, #32
 800b266:	46bd      	mov	sp, r7
 800b268:	bd80      	pop	{r7, pc}

0800b26a <SCSI_ReadFormatCapacity>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800b26a:	b580      	push	{r7, lr}
 800b26c:	b088      	sub	sp, #32
 800b26e:	af00      	add	r7, sp, #0
 800b270:	60f8      	str	r0, [r7, #12]
 800b272:	460b      	mov	r3, r1
 800b274:	607a      	str	r2, [r7, #4]
 800b276:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b27e:	61bb      	str	r3, [r7, #24]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size);
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b286:	685b      	ldr	r3, [r3, #4]
 800b288:	f107 0214 	add.w	r2, r7, #20
 800b28c:	f107 0110 	add.w	r1, r7, #16
 800b290:	7af8      	ldrb	r0, [r7, #11]
 800b292:	4798      	blx	r3
 800b294:	4603      	mov	r3, r0
 800b296:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800b298:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d104      	bne.n	800b2aa <SCSI_ReadFormatCapacity+0x40>
 800b2a0:	69bb      	ldr	r3, [r7, #24]
 800b2a2:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800b2a6:	2b02      	cmp	r3, #2
 800b2a8:	d108      	bne.n	800b2bc <SCSI_ReadFormatCapacity+0x52>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800b2aa:	7af9      	ldrb	r1, [r7, #11]
 800b2ac:	233a      	movs	r3, #58	; 0x3a
 800b2ae:	2202      	movs	r2, #2
 800b2b0:	68f8      	ldr	r0, [r7, #12]
 800b2b2:	f000 f90c 	bl	800b4ce <SCSI_SenseCode>
    return -1;
 800b2b6:	f04f 33ff 	mov.w	r3, #4294967295
 800b2ba:	e03e      	b.n	800b33a <SCSI_ReadFormatCapacity+0xd0>
  }

  for (i = 0U; i < 12U ; i++)
 800b2bc:	2300      	movs	r3, #0
 800b2be:	83fb      	strh	r3, [r7, #30]
 800b2c0:	e007      	b.n	800b2d2 <SCSI_ReadFormatCapacity+0x68>
  {
    hmsc->bot_data[i] = 0U;
 800b2c2:	8bfb      	ldrh	r3, [r7, #30]
 800b2c4:	69ba      	ldr	r2, [r7, #24]
 800b2c6:	4413      	add	r3, r2
 800b2c8:	2200      	movs	r2, #0
 800b2ca:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 800b2cc:	8bfb      	ldrh	r3, [r7, #30]
 800b2ce:	3301      	adds	r3, #1
 800b2d0:	83fb      	strh	r3, [r7, #30]
 800b2d2:	8bfb      	ldrh	r3, [r7, #30]
 800b2d4:	2b0b      	cmp	r3, #11
 800b2d6:	d9f4      	bls.n	800b2c2 <SCSI_ReadFormatCapacity+0x58>
  }

  hmsc->bot_data[3] = 0x08U;
 800b2d8:	69bb      	ldr	r3, [r7, #24]
 800b2da:	2208      	movs	r2, #8
 800b2dc:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 800b2de:	693b      	ldr	r3, [r7, #16]
 800b2e0:	3b01      	subs	r3, #1
 800b2e2:	0e1b      	lsrs	r3, r3, #24
 800b2e4:	b2da      	uxtb	r2, r3
 800b2e6:	69bb      	ldr	r3, [r7, #24]
 800b2e8:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 800b2ea:	693b      	ldr	r3, [r7, #16]
 800b2ec:	3b01      	subs	r3, #1
 800b2ee:	0c1b      	lsrs	r3, r3, #16
 800b2f0:	b2da      	uxtb	r2, r3
 800b2f2:	69bb      	ldr	r3, [r7, #24]
 800b2f4:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 800b2f6:	693b      	ldr	r3, [r7, #16]
 800b2f8:	3b01      	subs	r3, #1
 800b2fa:	0a1b      	lsrs	r3, r3, #8
 800b2fc:	b2da      	uxtb	r2, r3
 800b2fe:	69bb      	ldr	r3, [r7, #24]
 800b300:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 800b302:	693b      	ldr	r3, [r7, #16]
 800b304:	b2db      	uxtb	r3, r3
 800b306:	3b01      	subs	r3, #1
 800b308:	b2da      	uxtb	r2, r3
 800b30a:	69bb      	ldr	r3, [r7, #24]
 800b30c:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 800b30e:	69bb      	ldr	r3, [r7, #24]
 800b310:	2202      	movs	r2, #2
 800b312:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 800b314:	8abb      	ldrh	r3, [r7, #20]
 800b316:	141b      	asrs	r3, r3, #16
 800b318:	b2da      	uxtb	r2, r3
 800b31a:	69bb      	ldr	r3, [r7, #24]
 800b31c:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 800b31e:	8abb      	ldrh	r3, [r7, #20]
 800b320:	0a1b      	lsrs	r3, r3, #8
 800b322:	b29b      	uxth	r3, r3
 800b324:	b2da      	uxtb	r2, r3
 800b326:	69bb      	ldr	r3, [r7, #24]
 800b328:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 800b32a:	8abb      	ldrh	r3, [r7, #20]
 800b32c:	b2da      	uxtb	r2, r3
 800b32e:	69bb      	ldr	r3, [r7, #24]
 800b330:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 800b332:	69bb      	ldr	r3, [r7, #24]
 800b334:	220c      	movs	r2, #12
 800b336:	60da      	str	r2, [r3, #12]

  return 0;
 800b338:	2300      	movs	r3, #0
}
 800b33a:	4618      	mov	r0, r3
 800b33c:	3720      	adds	r7, #32
 800b33e:	46bd      	mov	sp, r7
 800b340:	bd80      	pop	{r7, pc}
	...

0800b344 <SCSI_ModeSense6>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800b344:	b580      	push	{r7, lr}
 800b346:	b086      	sub	sp, #24
 800b348:	af00      	add	r7, sp, #0
 800b34a:	60f8      	str	r0, [r7, #12]
 800b34c:	460b      	mov	r3, r1
 800b34e:	607a      	str	r2, [r7, #4]
 800b350:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b358:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 800b35a:	2317      	movs	r3, #23
 800b35c:	82fb      	strh	r3, [r7, #22]

  if (params[4] <= len)
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	3304      	adds	r3, #4
 800b362:	781b      	ldrb	r3, [r3, #0]
 800b364:	b29b      	uxth	r3, r3
 800b366:	8afa      	ldrh	r2, [r7, #22]
 800b368:	429a      	cmp	r2, r3
 800b36a:	d303      	bcc.n	800b374 <SCSI_ModeSense6+0x30>
  {
    len = params[4];
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	3304      	adds	r3, #4
 800b370:	781b      	ldrb	r3, [r3, #0]
 800b372:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 800b374:	8afb      	ldrh	r3, [r7, #22]
 800b376:	461a      	mov	r2, r3
 800b378:	4904      	ldr	r1, [pc, #16]	; (800b38c <SCSI_ModeSense6+0x48>)
 800b37a:	6938      	ldr	r0, [r7, #16]
 800b37c:	f000 fd70 	bl	800be60 <SCSI_UpdateBotData>

  return 0;
 800b380:	2300      	movs	r3, #0
}
 800b382:	4618      	mov	r0, r3
 800b384:	3718      	adds	r7, #24
 800b386:	46bd      	mov	sp, r7
 800b388:	bd80      	pop	{r7, pc}
 800b38a:	bf00      	nop
 800b38c:	200000d0 	.word	0x200000d0

0800b390 <SCSI_ModeSense10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800b390:	b580      	push	{r7, lr}
 800b392:	b086      	sub	sp, #24
 800b394:	af00      	add	r7, sp, #0
 800b396:	60f8      	str	r0, [r7, #12]
 800b398:	460b      	mov	r3, r1
 800b39a:	607a      	str	r2, [r7, #4]
 800b39c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b3a4:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 800b3a6:	231b      	movs	r3, #27
 800b3a8:	82fb      	strh	r3, [r7, #22]

  if (params[8] <= len)
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	3308      	adds	r3, #8
 800b3ae:	781b      	ldrb	r3, [r3, #0]
 800b3b0:	b29b      	uxth	r3, r3
 800b3b2:	8afa      	ldrh	r2, [r7, #22]
 800b3b4:	429a      	cmp	r2, r3
 800b3b6:	d303      	bcc.n	800b3c0 <SCSI_ModeSense10+0x30>
  {
    len = params[8];
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	3308      	adds	r3, #8
 800b3bc:	781b      	ldrb	r3, [r3, #0]
 800b3be:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 800b3c0:	8afb      	ldrh	r3, [r7, #22]
 800b3c2:	461a      	mov	r2, r3
 800b3c4:	4904      	ldr	r1, [pc, #16]	; (800b3d8 <SCSI_ModeSense10+0x48>)
 800b3c6:	6938      	ldr	r0, [r7, #16]
 800b3c8:	f000 fd4a 	bl	800be60 <SCSI_UpdateBotData>

  return 0;
 800b3cc:	2300      	movs	r3, #0
}
 800b3ce:	4618      	mov	r0, r3
 800b3d0:	3718      	adds	r7, #24
 800b3d2:	46bd      	mov	sp, r7
 800b3d4:	bd80      	pop	{r7, pc}
 800b3d6:	bf00      	nop
 800b3d8:	200000e8 	.word	0x200000e8

0800b3dc <SCSI_RequestSense>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800b3dc:	b580      	push	{r7, lr}
 800b3de:	b086      	sub	sp, #24
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	60f8      	str	r0, [r7, #12]
 800b3e4:	460b      	mov	r3, r1
 800b3e6:	607a      	str	r2, [r7, #4]
 800b3e8:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b3f0:	613b      	str	r3, [r7, #16]

  if (hmsc->cbw.dDataLength == 0U)
 800b3f2:	693b      	ldr	r3, [r7, #16]
 800b3f4:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d10a      	bne.n	800b412 <SCSI_RequestSense+0x36>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800b3fc:	693b      	ldr	r3, [r7, #16]
 800b3fe:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800b402:	2320      	movs	r3, #32
 800b404:	2205      	movs	r2, #5
 800b406:	68f8      	ldr	r0, [r7, #12]
 800b408:	f000 f861 	bl	800b4ce <SCSI_SenseCode>
    return -1;
 800b40c:	f04f 33ff 	mov.w	r3, #4294967295
 800b410:	e059      	b.n	800b4c6 <SCSI_RequestSense+0xea>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800b412:	2300      	movs	r3, #0
 800b414:	75fb      	strb	r3, [r7, #23]
 800b416:	e007      	b.n	800b428 <SCSI_RequestSense+0x4c>
  {
    hmsc->bot_data[i] = 0U;
 800b418:	7dfb      	ldrb	r3, [r7, #23]
 800b41a:	693a      	ldr	r2, [r7, #16]
 800b41c:	4413      	add	r3, r2
 800b41e:	2200      	movs	r2, #0
 800b420:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800b422:	7dfb      	ldrb	r3, [r7, #23]
 800b424:	3301      	adds	r3, #1
 800b426:	75fb      	strb	r3, [r7, #23]
 800b428:	7dfb      	ldrb	r3, [r7, #23]
 800b42a:	2b11      	cmp	r3, #17
 800b42c:	d9f4      	bls.n	800b418 <SCSI_RequestSense+0x3c>
  }

  hmsc->bot_data[0] = 0x70U;
 800b42e:	693b      	ldr	r3, [r7, #16]
 800b430:	2270      	movs	r2, #112	; 0x70
 800b432:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 800b434:	693b      	ldr	r3, [r7, #16]
 800b436:	220c      	movs	r2, #12
 800b438:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 800b43a:	693b      	ldr	r3, [r7, #16]
 800b43c:	f893 2260 	ldrb.w	r2, [r3, #608]	; 0x260
 800b440:	693b      	ldr	r3, [r7, #16]
 800b442:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800b446:	429a      	cmp	r2, r3
 800b448:	d02e      	beq.n	800b4a8 <SCSI_RequestSense+0xcc>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 800b44a:	693b      	ldr	r3, [r7, #16]
 800b44c:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800b450:	461a      	mov	r2, r3
 800b452:	693b      	ldr	r3, [r7, #16]
 800b454:	3248      	adds	r2, #72	; 0x48
 800b456:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 800b45a:	693b      	ldr	r3, [r7, #16]
 800b45c:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 800b45e:	693b      	ldr	r3, [r7, #16]
 800b460:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800b464:	693a      	ldr	r2, [r7, #16]
 800b466:	3348      	adds	r3, #72	; 0x48
 800b468:	00db      	lsls	r3, r3, #3
 800b46a:	4413      	add	r3, r2
 800b46c:	791a      	ldrb	r2, [r3, #4]
 800b46e:	693b      	ldr	r3, [r7, #16]
 800b470:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 800b472:	693b      	ldr	r3, [r7, #16]
 800b474:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800b478:	693a      	ldr	r2, [r7, #16]
 800b47a:	3348      	adds	r3, #72	; 0x48
 800b47c:	00db      	lsls	r3, r3, #3
 800b47e:	4413      	add	r3, r2
 800b480:	795a      	ldrb	r2, [r3, #5]
 800b482:	693b      	ldr	r3, [r7, #16]
 800b484:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 800b486:	693b      	ldr	r3, [r7, #16]
 800b488:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800b48c:	3301      	adds	r3, #1
 800b48e:	b2da      	uxtb	r2, r3
 800b490:	693b      	ldr	r3, [r7, #16]
 800b492:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 800b496:	693b      	ldr	r3, [r7, #16]
 800b498:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800b49c:	2b04      	cmp	r3, #4
 800b49e:	d103      	bne.n	800b4a8 <SCSI_RequestSense+0xcc>
    {
      hmsc->scsi_sense_head = 0U;
 800b4a0:	693b      	ldr	r3, [r7, #16]
 800b4a2:	2200      	movs	r2, #0
 800b4a4:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 800b4a8:	693b      	ldr	r3, [r7, #16]
 800b4aa:	2212      	movs	r2, #18
 800b4ac:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	3304      	adds	r3, #4
 800b4b2:	781b      	ldrb	r3, [r3, #0]
 800b4b4:	2b12      	cmp	r3, #18
 800b4b6:	d805      	bhi.n	800b4c4 <SCSI_RequestSense+0xe8>
  {
    hmsc->bot_data_length = params[4];
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	3304      	adds	r3, #4
 800b4bc:	781b      	ldrb	r3, [r3, #0]
 800b4be:	461a      	mov	r2, r3
 800b4c0:	693b      	ldr	r3, [r7, #16]
 800b4c2:	60da      	str	r2, [r3, #12]
  }

  return 0;
 800b4c4:	2300      	movs	r3, #0
}
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	3718      	adds	r7, #24
 800b4ca:	46bd      	mov	sp, r7
 800b4cc:	bd80      	pop	{r7, pc}

0800b4ce <SCSI_SenseCode>:
* @param  ASC: Additional Sense Code
* @retval none

*/
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 800b4ce:	b480      	push	{r7}
 800b4d0:	b085      	sub	sp, #20
 800b4d2:	af00      	add	r7, sp, #0
 800b4d4:	6078      	str	r0, [r7, #4]
 800b4d6:	4608      	mov	r0, r1
 800b4d8:	4611      	mov	r1, r2
 800b4da:	461a      	mov	r2, r3
 800b4dc:	4603      	mov	r3, r0
 800b4de:	70fb      	strb	r3, [r7, #3]
 800b4e0:	460b      	mov	r3, r1
 800b4e2:	70bb      	strb	r3, [r7, #2]
 800b4e4:	4613      	mov	r3, r2
 800b4e6:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b4ee:	60fb      	str	r3, [r7, #12]

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800b4f6:	461a      	mov	r2, r3
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	3248      	adds	r2, #72	; 0x48
 800b4fc:	78b9      	ldrb	r1, [r7, #2]
 800b4fe:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800b508:	68fa      	ldr	r2, [r7, #12]
 800b50a:	3348      	adds	r3, #72	; 0x48
 800b50c:	00db      	lsls	r3, r3, #3
 800b50e:	4413      	add	r3, r2
 800b510:	787a      	ldrb	r2, [r7, #1]
 800b512:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800b51a:	68fa      	ldr	r2, [r7, #12]
 800b51c:	3348      	adds	r3, #72	; 0x48
 800b51e:	00db      	lsls	r3, r3, #3
 800b520:	4413      	add	r3, r2
 800b522:	2200      	movs	r2, #0
 800b524:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800b52c:	3301      	adds	r3, #1
 800b52e:	b2da      	uxtb	r2, r3
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800b53c:	2b04      	cmp	r3, #4
 800b53e:	d103      	bne.n	800b548 <SCSI_SenseCode+0x7a>
  {
    hmsc->scsi_sense_tail = 0U;
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	2200      	movs	r2, #0
 800b544:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  }
}
 800b548:	bf00      	nop
 800b54a:	3714      	adds	r7, #20
 800b54c:	46bd      	mov	sp, r7
 800b54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b552:	4770      	bx	lr

0800b554 <SCSI_StartStopUnit>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800b554:	b580      	push	{r7, lr}
 800b556:	b086      	sub	sp, #24
 800b558:	af00      	add	r7, sp, #0
 800b55a:	60f8      	str	r0, [r7, #12]
 800b55c:	460b      	mov	r3, r1
 800b55e:	607a      	str	r2, [r7, #4]
 800b560:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b568:	617b      	str	r3, [r7, #20]

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 800b56a:	697b      	ldr	r3, [r7, #20]
 800b56c:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800b570:	2b01      	cmp	r3, #1
 800b572:	d10f      	bne.n	800b594 <SCSI_StartStopUnit+0x40>
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	3304      	adds	r3, #4
 800b578:	781b      	ldrb	r3, [r3, #0]
 800b57a:	f003 0303 	and.w	r3, r3, #3
 800b57e:	2b02      	cmp	r3, #2
 800b580:	d108      	bne.n	800b594 <SCSI_StartStopUnit+0x40>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800b582:	7af9      	ldrb	r1, [r7, #11]
 800b584:	2324      	movs	r3, #36	; 0x24
 800b586:	2205      	movs	r2, #5
 800b588:	68f8      	ldr	r0, [r7, #12]
 800b58a:	f7ff ffa0 	bl	800b4ce <SCSI_SenseCode>

    return -1;
 800b58e:	f04f 33ff 	mov.w	r3, #4294967295
 800b592:	e026      	b.n	800b5e2 <SCSI_StartStopUnit+0x8e>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	3304      	adds	r3, #4
 800b598:	781b      	ldrb	r3, [r3, #0]
 800b59a:	f003 0303 	and.w	r3, r3, #3
 800b59e:	2b01      	cmp	r3, #1
 800b5a0:	d104      	bne.n	800b5ac <SCSI_StartStopUnit+0x58>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800b5a2:	697b      	ldr	r3, [r7, #20]
 800b5a4:	2200      	movs	r2, #0
 800b5a6:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 800b5aa:	e016      	b.n	800b5da <SCSI_StartStopUnit+0x86>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	3304      	adds	r3, #4
 800b5b0:	781b      	ldrb	r3, [r3, #0]
 800b5b2:	f003 0303 	and.w	r3, r3, #3
 800b5b6:	2b02      	cmp	r3, #2
 800b5b8:	d104      	bne.n	800b5c4 <SCSI_StartStopUnit+0x70>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 800b5ba:	697b      	ldr	r3, [r7, #20]
 800b5bc:	2202      	movs	r2, #2
 800b5be:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 800b5c2:	e00a      	b.n	800b5da <SCSI_StartStopUnit+0x86>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	3304      	adds	r3, #4
 800b5c8:	781b      	ldrb	r3, [r3, #0]
 800b5ca:	f003 0303 	and.w	r3, r3, #3
 800b5ce:	2b03      	cmp	r3, #3
 800b5d0:	d103      	bne.n	800b5da <SCSI_StartStopUnit+0x86>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800b5d2:	697b      	ldr	r3, [r7, #20]
 800b5d4:	2200      	movs	r2, #0
 800b5d6:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 800b5da:	697b      	ldr	r3, [r7, #20]
 800b5dc:	2200      	movs	r2, #0
 800b5de:	60da      	str	r2, [r3, #12]

  return 0;
 800b5e0:	2300      	movs	r3, #0
}
 800b5e2:	4618      	mov	r0, r3
 800b5e4:	3718      	adds	r7, #24
 800b5e6:	46bd      	mov	sp, r7
 800b5e8:	bd80      	pop	{r7, pc}

0800b5ea <SCSI_AllowPreventRemovable>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800b5ea:	b480      	push	{r7}
 800b5ec:	b087      	sub	sp, #28
 800b5ee:	af00      	add	r7, sp, #0
 800b5f0:	60f8      	str	r0, [r7, #12]
 800b5f2:	460b      	mov	r3, r1
 800b5f4:	607a      	str	r2, [r7, #4]
 800b5f6:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b5fe:	617b      	str	r3, [r7, #20]

  if (params[4] == 0U)
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	3304      	adds	r3, #4
 800b604:	781b      	ldrb	r3, [r3, #0]
 800b606:	2b00      	cmp	r3, #0
 800b608:	d104      	bne.n	800b614 <SCSI_AllowPreventRemovable+0x2a>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800b60a:	697b      	ldr	r3, [r7, #20]
 800b60c:	2200      	movs	r2, #0
 800b60e:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 800b612:	e003      	b.n	800b61c <SCSI_AllowPreventRemovable+0x32>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 800b614:	697b      	ldr	r3, [r7, #20]
 800b616:	2201      	movs	r2, #1
 800b618:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }

  hmsc->bot_data_length = 0U;
 800b61c:	697b      	ldr	r3, [r7, #20]
 800b61e:	2200      	movs	r2, #0
 800b620:	60da      	str	r2, [r3, #12]

  return 0;
 800b622:	2300      	movs	r3, #0
}
 800b624:	4618      	mov	r0, r3
 800b626:	371c      	adds	r7, #28
 800b628:	46bd      	mov	sp, r7
 800b62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b62e:	4770      	bx	lr

0800b630 <SCSI_Read10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800b630:	b580      	push	{r7, lr}
 800b632:	b086      	sub	sp, #24
 800b634:	af00      	add	r7, sp, #0
 800b636:	60f8      	str	r0, [r7, #12]
 800b638:	460b      	mov	r3, r1
 800b63a:	607a      	str	r2, [r7, #4]
 800b63c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b644:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800b646:	697b      	ldr	r3, [r7, #20]
 800b648:	7a1b      	ldrb	r3, [r3, #8]
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d17c      	bne.n	800b748 <SCSI_Read10+0x118>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800b64e:	697b      	ldr	r3, [r7, #20]
 800b650:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800b654:	b25b      	sxtb	r3, r3
 800b656:	2b00      	cmp	r3, #0
 800b658:	db0a      	blt.n	800b670 <SCSI_Read10+0x40>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800b65a:	697b      	ldr	r3, [r7, #20]
 800b65c:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800b660:	2320      	movs	r3, #32
 800b662:	2205      	movs	r2, #5
 800b664:	68f8      	ldr	r0, [r7, #12]
 800b666:	f7ff ff32 	bl	800b4ce <SCSI_SenseCode>
      return -1;
 800b66a:	f04f 33ff 	mov.w	r3, #4294967295
 800b66e:	e075      	b.n	800b75c <SCSI_Read10+0x12c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800b670:	697b      	ldr	r3, [r7, #20]
 800b672:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800b676:	2b02      	cmp	r3, #2
 800b678:	d108      	bne.n	800b68c <SCSI_Read10+0x5c>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800b67a:	7af9      	ldrb	r1, [r7, #11]
 800b67c:	233a      	movs	r3, #58	; 0x3a
 800b67e:	2202      	movs	r2, #2
 800b680:	68f8      	ldr	r0, [r7, #12]
 800b682:	f7ff ff24 	bl	800b4ce <SCSI_SenseCode>

      return -1;
 800b686:	f04f 33ff 	mov.w	r3, #4294967295
 800b68a:	e067      	b.n	800b75c <SCSI_Read10+0x12c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b692:	689b      	ldr	r3, [r3, #8]
 800b694:	7afa      	ldrb	r2, [r7, #11]
 800b696:	4610      	mov	r0, r2
 800b698:	4798      	blx	r3
 800b69a:	4603      	mov	r3, r0
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d008      	beq.n	800b6b2 <SCSI_Read10+0x82>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800b6a0:	7af9      	ldrb	r1, [r7, #11]
 800b6a2:	233a      	movs	r3, #58	; 0x3a
 800b6a4:	2202      	movs	r2, #2
 800b6a6:	68f8      	ldr	r0, [r7, #12]
 800b6a8:	f7ff ff11 	bl	800b4ce <SCSI_SenseCode>
      return -1;
 800b6ac:	f04f 33ff 	mov.w	r3, #4294967295
 800b6b0:	e054      	b.n	800b75c <SCSI_Read10+0x12c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	3302      	adds	r3, #2
 800b6b6:	781b      	ldrb	r3, [r3, #0]
 800b6b8:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	3303      	adds	r3, #3
 800b6be:	781b      	ldrb	r3, [r3, #0]
 800b6c0:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800b6c2:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	3304      	adds	r3, #4
 800b6c8:	781b      	ldrb	r3, [r3, #0]
 800b6ca:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800b6cc:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800b6ce:	687a      	ldr	r2, [r7, #4]
 800b6d0:	3205      	adds	r2, #5
 800b6d2:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800b6d4:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800b6d6:	697b      	ldr	r3, [r7, #20]
 800b6d8:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	3307      	adds	r3, #7
 800b6e0:	781b      	ldrb	r3, [r3, #0]
 800b6e2:	021b      	lsls	r3, r3, #8
 800b6e4:	687a      	ldr	r2, [r7, #4]
 800b6e6:	3208      	adds	r2, #8
 800b6e8:	7812      	ldrb	r2, [r2, #0]
 800b6ea:	431a      	orrs	r2, r3
 800b6ec:	697b      	ldr	r3, [r7, #20]
 800b6ee:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800b6f2:	697b      	ldr	r3, [r7, #20]
 800b6f4:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800b6f8:	697b      	ldr	r3, [r7, #20]
 800b6fa:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800b6fe:	7af9      	ldrb	r1, [r7, #11]
 800b700:	68f8      	ldr	r0, [r7, #12]
 800b702:	f000 fa95 	bl	800bc30 <SCSI_CheckAddressRange>
 800b706:	4603      	mov	r3, r0
 800b708:	2b00      	cmp	r3, #0
 800b70a:	da02      	bge.n	800b712 <SCSI_Read10+0xe2>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800b70c:	f04f 33ff 	mov.w	r3, #4294967295
 800b710:	e024      	b.n	800b75c <SCSI_Read10+0x12c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800b712:	697b      	ldr	r3, [r7, #20]
 800b714:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800b718:	697b      	ldr	r3, [r7, #20]
 800b71a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800b71e:	6979      	ldr	r1, [r7, #20]
 800b720:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 800b724:	fb01 f303 	mul.w	r3, r1, r3
 800b728:	429a      	cmp	r2, r3
 800b72a:	d00a      	beq.n	800b742 <SCSI_Read10+0x112>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800b72c:	697b      	ldr	r3, [r7, #20]
 800b72e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800b732:	2320      	movs	r3, #32
 800b734:	2205      	movs	r2, #5
 800b736:	68f8      	ldr	r0, [r7, #12]
 800b738:	f7ff fec9 	bl	800b4ce <SCSI_SenseCode>
      return -1;
 800b73c:	f04f 33ff 	mov.w	r3, #4294967295
 800b740:	e00c      	b.n	800b75c <SCSI_Read10+0x12c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800b742:	697b      	ldr	r3, [r7, #20]
 800b744:	2202      	movs	r2, #2
 800b746:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800b748:	697b      	ldr	r3, [r7, #20]
 800b74a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b74e:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800b750:	7afb      	ldrb	r3, [r7, #11]
 800b752:	4619      	mov	r1, r3
 800b754:	68f8      	ldr	r0, [r7, #12]
 800b756:	f000 fa8d 	bl	800bc74 <SCSI_ProcessRead>
 800b75a:	4603      	mov	r3, r0
}
 800b75c:	4618      	mov	r0, r3
 800b75e:	3718      	adds	r7, #24
 800b760:	46bd      	mov	sp, r7
 800b762:	bd80      	pop	{r7, pc}

0800b764 <SCSI_Read12>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800b764:	b580      	push	{r7, lr}
 800b766:	b086      	sub	sp, #24
 800b768:	af00      	add	r7, sp, #0
 800b76a:	60f8      	str	r0, [r7, #12]
 800b76c:	460b      	mov	r3, r1
 800b76e:	607a      	str	r2, [r7, #4]
 800b770:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b778:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800b77a:	697b      	ldr	r3, [r7, #20]
 800b77c:	7a1b      	ldrb	r3, [r3, #8]
 800b77e:	2b00      	cmp	r3, #0
 800b780:	f040 8087 	bne.w	800b892 <SCSI_Read12+0x12e>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800b784:	697b      	ldr	r3, [r7, #20]
 800b786:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800b78a:	b25b      	sxtb	r3, r3
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	db0a      	blt.n	800b7a6 <SCSI_Read12+0x42>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800b790:	697b      	ldr	r3, [r7, #20]
 800b792:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800b796:	2320      	movs	r3, #32
 800b798:	2205      	movs	r2, #5
 800b79a:	68f8      	ldr	r0, [r7, #12]
 800b79c:	f7ff fe97 	bl	800b4ce <SCSI_SenseCode>
      return -1;
 800b7a0:	f04f 33ff 	mov.w	r3, #4294967295
 800b7a4:	e07f      	b.n	800b8a6 <SCSI_Read12+0x142>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800b7a6:	697b      	ldr	r3, [r7, #20]
 800b7a8:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800b7ac:	2b02      	cmp	r3, #2
 800b7ae:	d108      	bne.n	800b7c2 <SCSI_Read12+0x5e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800b7b0:	7af9      	ldrb	r1, [r7, #11]
 800b7b2:	233a      	movs	r3, #58	; 0x3a
 800b7b4:	2202      	movs	r2, #2
 800b7b6:	68f8      	ldr	r0, [r7, #12]
 800b7b8:	f7ff fe89 	bl	800b4ce <SCSI_SenseCode>
      return -1;
 800b7bc:	f04f 33ff 	mov.w	r3, #4294967295
 800b7c0:	e071      	b.n	800b8a6 <SCSI_Read12+0x142>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b7c8:	689b      	ldr	r3, [r3, #8]
 800b7ca:	7afa      	ldrb	r2, [r7, #11]
 800b7cc:	4610      	mov	r0, r2
 800b7ce:	4798      	blx	r3
 800b7d0:	4603      	mov	r3, r0
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d008      	beq.n	800b7e8 <SCSI_Read12+0x84>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800b7d6:	7af9      	ldrb	r1, [r7, #11]
 800b7d8:	233a      	movs	r3, #58	; 0x3a
 800b7da:	2202      	movs	r2, #2
 800b7dc:	68f8      	ldr	r0, [r7, #12]
 800b7de:	f7ff fe76 	bl	800b4ce <SCSI_SenseCode>
      return -1;
 800b7e2:	f04f 33ff 	mov.w	r3, #4294967295
 800b7e6:	e05e      	b.n	800b8a6 <SCSI_Read12+0x142>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	3302      	adds	r3, #2
 800b7ec:	781b      	ldrb	r3, [r3, #0]
 800b7ee:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	3303      	adds	r3, #3
 800b7f4:	781b      	ldrb	r3, [r3, #0]
 800b7f6:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800b7f8:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	3304      	adds	r3, #4
 800b7fe:	781b      	ldrb	r3, [r3, #0]
 800b800:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800b802:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800b804:	687a      	ldr	r2, [r7, #4]
 800b806:	3205      	adds	r2, #5
 800b808:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800b80a:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800b80c:	697b      	ldr	r3, [r7, #20]
 800b80e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	3306      	adds	r3, #6
 800b816:	781b      	ldrb	r3, [r3, #0]
 800b818:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	3307      	adds	r3, #7
 800b81e:	781b      	ldrb	r3, [r3, #0]
 800b820:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800b822:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	3308      	adds	r3, #8
 800b828:	781b      	ldrb	r3, [r3, #0]
 800b82a:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800b82c:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800b82e:	687a      	ldr	r2, [r7, #4]
 800b830:	3209      	adds	r2, #9
 800b832:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800b834:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800b836:	697b      	ldr	r3, [r7, #20]
 800b838:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800b83c:	697b      	ldr	r3, [r7, #20]
 800b83e:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800b842:	697b      	ldr	r3, [r7, #20]
 800b844:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800b848:	7af9      	ldrb	r1, [r7, #11]
 800b84a:	68f8      	ldr	r0, [r7, #12]
 800b84c:	f000 f9f0 	bl	800bc30 <SCSI_CheckAddressRange>
 800b850:	4603      	mov	r3, r0
 800b852:	2b00      	cmp	r3, #0
 800b854:	da02      	bge.n	800b85c <SCSI_Read12+0xf8>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800b856:	f04f 33ff 	mov.w	r3, #4294967295
 800b85a:	e024      	b.n	800b8a6 <SCSI_Read12+0x142>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800b85c:	697b      	ldr	r3, [r7, #20]
 800b85e:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800b862:	697b      	ldr	r3, [r7, #20]
 800b864:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800b868:	6979      	ldr	r1, [r7, #20]
 800b86a:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 800b86e:	fb01 f303 	mul.w	r3, r1, r3
 800b872:	429a      	cmp	r2, r3
 800b874:	d00a      	beq.n	800b88c <SCSI_Read12+0x128>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800b876:	697b      	ldr	r3, [r7, #20]
 800b878:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800b87c:	2320      	movs	r3, #32
 800b87e:	2205      	movs	r2, #5
 800b880:	68f8      	ldr	r0, [r7, #12]
 800b882:	f7ff fe24 	bl	800b4ce <SCSI_SenseCode>
      return -1;
 800b886:	f04f 33ff 	mov.w	r3, #4294967295
 800b88a:	e00c      	b.n	800b8a6 <SCSI_Read12+0x142>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800b88c:	697b      	ldr	r3, [r7, #20]
 800b88e:	2202      	movs	r2, #2
 800b890:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800b892:	697b      	ldr	r3, [r7, #20]
 800b894:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b898:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800b89a:	7afb      	ldrb	r3, [r7, #11]
 800b89c:	4619      	mov	r1, r3
 800b89e:	68f8      	ldr	r0, [r7, #12]
 800b8a0:	f000 f9e8 	bl	800bc74 <SCSI_ProcessRead>
 800b8a4:	4603      	mov	r3, r0
}
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	3718      	adds	r7, #24
 800b8aa:	46bd      	mov	sp, r7
 800b8ac:	bd80      	pop	{r7, pc}

0800b8ae <SCSI_Write10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800b8ae:	b580      	push	{r7, lr}
 800b8b0:	b086      	sub	sp, #24
 800b8b2:	af00      	add	r7, sp, #0
 800b8b4:	60f8      	str	r0, [r7, #12]
 800b8b6:	460b      	mov	r3, r1
 800b8b8:	607a      	str	r2, [r7, #4]
 800b8ba:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b8c2:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800b8c4:	697b      	ldr	r3, [r7, #20]
 800b8c6:	7a1b      	ldrb	r3, [r3, #8]
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	f040 80a5 	bne.w	800ba18 <SCSI_Write10+0x16a>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800b8ce:	697b      	ldr	r3, [r7, #20]
 800b8d0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d10a      	bne.n	800b8ee <SCSI_Write10+0x40>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800b8d8:	697b      	ldr	r3, [r7, #20]
 800b8da:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800b8de:	2320      	movs	r3, #32
 800b8e0:	2205      	movs	r2, #5
 800b8e2:	68f8      	ldr	r0, [r7, #12]
 800b8e4:	f7ff fdf3 	bl	800b4ce <SCSI_SenseCode>
      return -1;
 800b8e8:	f04f 33ff 	mov.w	r3, #4294967295
 800b8ec:	e09a      	b.n	800ba24 <SCSI_Write10+0x176>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800b8ee:	697b      	ldr	r3, [r7, #20]
 800b8f0:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800b8f4:	b25b      	sxtb	r3, r3
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	da0a      	bge.n	800b910 <SCSI_Write10+0x62>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800b8fa:	697b      	ldr	r3, [r7, #20]
 800b8fc:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800b900:	2320      	movs	r3, #32
 800b902:	2205      	movs	r2, #5
 800b904:	68f8      	ldr	r0, [r7, #12]
 800b906:	f7ff fde2 	bl	800b4ce <SCSI_SenseCode>
      return -1;
 800b90a:	f04f 33ff 	mov.w	r3, #4294967295
 800b90e:	e089      	b.n	800ba24 <SCSI_Write10+0x176>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b916:	689b      	ldr	r3, [r3, #8]
 800b918:	7afa      	ldrb	r2, [r7, #11]
 800b91a:	4610      	mov	r0, r2
 800b91c:	4798      	blx	r3
 800b91e:	4603      	mov	r3, r0
 800b920:	2b00      	cmp	r3, #0
 800b922:	d008      	beq.n	800b936 <SCSI_Write10+0x88>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800b924:	7af9      	ldrb	r1, [r7, #11]
 800b926:	233a      	movs	r3, #58	; 0x3a
 800b928:	2202      	movs	r2, #2
 800b92a:	68f8      	ldr	r0, [r7, #12]
 800b92c:	f7ff fdcf 	bl	800b4ce <SCSI_SenseCode>
      return -1;
 800b930:	f04f 33ff 	mov.w	r3, #4294967295
 800b934:	e076      	b.n	800ba24 <SCSI_Write10+0x176>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b93c:	68db      	ldr	r3, [r3, #12]
 800b93e:	7afa      	ldrb	r2, [r7, #11]
 800b940:	4610      	mov	r0, r2
 800b942:	4798      	blx	r3
 800b944:	4603      	mov	r3, r0
 800b946:	2b00      	cmp	r3, #0
 800b948:	d008      	beq.n	800b95c <SCSI_Write10+0xae>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800b94a:	7af9      	ldrb	r1, [r7, #11]
 800b94c:	2327      	movs	r3, #39	; 0x27
 800b94e:	2202      	movs	r2, #2
 800b950:	68f8      	ldr	r0, [r7, #12]
 800b952:	f7ff fdbc 	bl	800b4ce <SCSI_SenseCode>
      return -1;
 800b956:	f04f 33ff 	mov.w	r3, #4294967295
 800b95a:	e063      	b.n	800ba24 <SCSI_Write10+0x176>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	3302      	adds	r3, #2
 800b960:	781b      	ldrb	r3, [r3, #0]
 800b962:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	3303      	adds	r3, #3
 800b968:	781b      	ldrb	r3, [r3, #0]
 800b96a:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800b96c:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	3304      	adds	r3, #4
 800b972:	781b      	ldrb	r3, [r3, #0]
 800b974:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800b976:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800b978:	687a      	ldr	r2, [r7, #4]
 800b97a:	3205      	adds	r2, #5
 800b97c:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800b97e:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800b980:	697b      	ldr	r3, [r7, #20]
 800b982:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	3307      	adds	r3, #7
 800b98a:	781b      	ldrb	r3, [r3, #0]
 800b98c:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 800b98e:	687a      	ldr	r2, [r7, #4]
 800b990:	3208      	adds	r2, #8
 800b992:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800b994:	431a      	orrs	r2, r3
 800b996:	697b      	ldr	r3, [r7, #20]
 800b998:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800b99c:	697b      	ldr	r3, [r7, #20]
 800b99e:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800b9a2:	697b      	ldr	r3, [r7, #20]
 800b9a4:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800b9a8:	7af9      	ldrb	r1, [r7, #11]
 800b9aa:	68f8      	ldr	r0, [r7, #12]
 800b9ac:	f000 f940 	bl	800bc30 <SCSI_CheckAddressRange>
 800b9b0:	4603      	mov	r3, r0
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	da02      	bge.n	800b9bc <SCSI_Write10+0x10e>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800b9b6:	f04f 33ff 	mov.w	r3, #4294967295
 800b9ba:	e033      	b.n	800ba24 <SCSI_Write10+0x176>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800b9bc:	697b      	ldr	r3, [r7, #20]
 800b9be:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800b9c2:	697a      	ldr	r2, [r7, #20]
 800b9c4:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800b9c8:	fb02 f303 	mul.w	r3, r2, r3
 800b9cc:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800b9ce:	697b      	ldr	r3, [r7, #20]
 800b9d0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800b9d4:	693a      	ldr	r2, [r7, #16]
 800b9d6:	429a      	cmp	r2, r3
 800b9d8:	d00a      	beq.n	800b9f0 <SCSI_Write10+0x142>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800b9da:	697b      	ldr	r3, [r7, #20]
 800b9dc:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800b9e0:	2320      	movs	r3, #32
 800b9e2:	2205      	movs	r2, #5
 800b9e4:	68f8      	ldr	r0, [r7, #12]
 800b9e6:	f7ff fd72 	bl	800b4ce <SCSI_SenseCode>
      return -1;
 800b9ea:	f04f 33ff 	mov.w	r3, #4294967295
 800b9ee:	e019      	b.n	800ba24 <SCSI_Write10+0x176>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800b9f0:	693b      	ldr	r3, [r7, #16]
 800b9f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b9f6:	bf28      	it	cs
 800b9f8:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800b9fc:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800b9fe:	697b      	ldr	r3, [r7, #20]
 800ba00:	2201      	movs	r2, #1
 800ba02:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 800ba04:	697b      	ldr	r3, [r7, #20]
 800ba06:	f103 0210 	add.w	r2, r3, #16
 800ba0a:	693b      	ldr	r3, [r7, #16]
 800ba0c:	2101      	movs	r1, #1
 800ba0e:	68f8      	ldr	r0, [r7, #12]
 800ba10:	f00a f94b 	bl	8015caa <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800ba14:	2300      	movs	r3, #0
 800ba16:	e005      	b.n	800ba24 <SCSI_Write10+0x176>
    return SCSI_ProcessWrite(pdev, lun);
 800ba18:	7afb      	ldrb	r3, [r7, #11]
 800ba1a:	4619      	mov	r1, r3
 800ba1c:	68f8      	ldr	r0, [r7, #12]
 800ba1e:	f000 f99c 	bl	800bd5a <SCSI_ProcessWrite>
 800ba22:	4603      	mov	r3, r0
}
 800ba24:	4618      	mov	r0, r3
 800ba26:	3718      	adds	r7, #24
 800ba28:	46bd      	mov	sp, r7
 800ba2a:	bd80      	pop	{r7, pc}

0800ba2c <SCSI_Write12>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800ba2c:	b580      	push	{r7, lr}
 800ba2e:	b086      	sub	sp, #24
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	60f8      	str	r0, [r7, #12]
 800ba34:	460b      	mov	r3, r1
 800ba36:	607a      	str	r2, [r7, #4]
 800ba38:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ba40:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800ba42:	697b      	ldr	r3, [r7, #20]
 800ba44:	7a1b      	ldrb	r3, [r3, #8]
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	f040 80b5 	bne.w	800bbb6 <SCSI_Write12+0x18a>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800ba4c:	697b      	ldr	r3, [r7, #20]
 800ba4e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d10a      	bne.n	800ba6c <SCSI_Write12+0x40>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800ba56:	697b      	ldr	r3, [r7, #20]
 800ba58:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800ba5c:	2320      	movs	r3, #32
 800ba5e:	2205      	movs	r2, #5
 800ba60:	68f8      	ldr	r0, [r7, #12]
 800ba62:	f7ff fd34 	bl	800b4ce <SCSI_SenseCode>
      return -1;
 800ba66:	f04f 33ff 	mov.w	r3, #4294967295
 800ba6a:	e0aa      	b.n	800bbc2 <SCSI_Write12+0x196>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800ba6c:	697b      	ldr	r3, [r7, #20]
 800ba6e:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800ba72:	b25b      	sxtb	r3, r3
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	da0a      	bge.n	800ba8e <SCSI_Write12+0x62>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800ba78:	697b      	ldr	r3, [r7, #20]
 800ba7a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800ba7e:	2320      	movs	r3, #32
 800ba80:	2205      	movs	r2, #5
 800ba82:	68f8      	ldr	r0, [r7, #12]
 800ba84:	f7ff fd23 	bl	800b4ce <SCSI_SenseCode>
      return -1;
 800ba88:	f04f 33ff 	mov.w	r3, #4294967295
 800ba8c:	e099      	b.n	800bbc2 <SCSI_Write12+0x196>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ba94:	689b      	ldr	r3, [r3, #8]
 800ba96:	7afa      	ldrb	r2, [r7, #11]
 800ba98:	4610      	mov	r0, r2
 800ba9a:	4798      	blx	r3
 800ba9c:	4603      	mov	r3, r0
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d00b      	beq.n	800baba <SCSI_Write12+0x8e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800baa2:	7af9      	ldrb	r1, [r7, #11]
 800baa4:	233a      	movs	r3, #58	; 0x3a
 800baa6:	2202      	movs	r2, #2
 800baa8:	68f8      	ldr	r0, [r7, #12]
 800baaa:	f7ff fd10 	bl	800b4ce <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800baae:	697b      	ldr	r3, [r7, #20]
 800bab0:	2205      	movs	r2, #5
 800bab2:	721a      	strb	r2, [r3, #8]
      return -1;
 800bab4:	f04f 33ff 	mov.w	r3, #4294967295
 800bab8:	e083      	b.n	800bbc2 <SCSI_Write12+0x196>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bac0:	68db      	ldr	r3, [r3, #12]
 800bac2:	7afa      	ldrb	r2, [r7, #11]
 800bac4:	4610      	mov	r0, r2
 800bac6:	4798      	blx	r3
 800bac8:	4603      	mov	r3, r0
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d00b      	beq.n	800bae6 <SCSI_Write12+0xba>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800bace:	7af9      	ldrb	r1, [r7, #11]
 800bad0:	2327      	movs	r3, #39	; 0x27
 800bad2:	2202      	movs	r2, #2
 800bad4:	68f8      	ldr	r0, [r7, #12]
 800bad6:	f7ff fcfa 	bl	800b4ce <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800bada:	697b      	ldr	r3, [r7, #20]
 800badc:	2205      	movs	r2, #5
 800bade:	721a      	strb	r2, [r3, #8]
      return -1;
 800bae0:	f04f 33ff 	mov.w	r3, #4294967295
 800bae4:	e06d      	b.n	800bbc2 <SCSI_Write12+0x196>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	3302      	adds	r3, #2
 800baea:	781b      	ldrb	r3, [r3, #0]
 800baec:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	3303      	adds	r3, #3
 800baf2:	781b      	ldrb	r3, [r3, #0]
 800baf4:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800baf6:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	3304      	adds	r3, #4
 800bafc:	781b      	ldrb	r3, [r3, #0]
 800bafe:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800bb00:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800bb02:	687a      	ldr	r2, [r7, #4]
 800bb04:	3205      	adds	r2, #5
 800bb06:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800bb08:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800bb0a:	697b      	ldr	r3, [r7, #20]
 800bb0c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	3306      	adds	r3, #6
 800bb14:	781b      	ldrb	r3, [r3, #0]
 800bb16:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	3307      	adds	r3, #7
 800bb1c:	781b      	ldrb	r3, [r3, #0]
 800bb1e:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800bb20:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	3308      	adds	r3, #8
 800bb26:	781b      	ldrb	r3, [r3, #0]
 800bb28:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800bb2a:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800bb2c:	687a      	ldr	r2, [r7, #4]
 800bb2e:	3209      	adds	r2, #9
 800bb30:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800bb32:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800bb34:	697b      	ldr	r3, [r7, #20]
 800bb36:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800bb3a:	697b      	ldr	r3, [r7, #20]
 800bb3c:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800bb40:	697b      	ldr	r3, [r7, #20]
 800bb42:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800bb46:	7af9      	ldrb	r1, [r7, #11]
 800bb48:	68f8      	ldr	r0, [r7, #12]
 800bb4a:	f000 f871 	bl	800bc30 <SCSI_CheckAddressRange>
 800bb4e:	4603      	mov	r3, r0
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	da02      	bge.n	800bb5a <SCSI_Write12+0x12e>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800bb54:	f04f 33ff 	mov.w	r3, #4294967295
 800bb58:	e033      	b.n	800bbc2 <SCSI_Write12+0x196>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800bb5a:	697b      	ldr	r3, [r7, #20]
 800bb5c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800bb60:	697a      	ldr	r2, [r7, #20]
 800bb62:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800bb66:	fb02 f303 	mul.w	r3, r2, r3
 800bb6a:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800bb6c:	697b      	ldr	r3, [r7, #20]
 800bb6e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800bb72:	693a      	ldr	r2, [r7, #16]
 800bb74:	429a      	cmp	r2, r3
 800bb76:	d00a      	beq.n	800bb8e <SCSI_Write12+0x162>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800bb78:	697b      	ldr	r3, [r7, #20]
 800bb7a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800bb7e:	2320      	movs	r3, #32
 800bb80:	2205      	movs	r2, #5
 800bb82:	68f8      	ldr	r0, [r7, #12]
 800bb84:	f7ff fca3 	bl	800b4ce <SCSI_SenseCode>
      return -1;
 800bb88:	f04f 33ff 	mov.w	r3, #4294967295
 800bb8c:	e019      	b.n	800bbc2 <SCSI_Write12+0x196>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800bb8e:	693b      	ldr	r3, [r7, #16]
 800bb90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bb94:	bf28      	it	cs
 800bb96:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800bb9a:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800bb9c:	697b      	ldr	r3, [r7, #20]
 800bb9e:	2201      	movs	r2, #1
 800bba0:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 800bba2:	697b      	ldr	r3, [r7, #20]
 800bba4:	f103 0210 	add.w	r2, r3, #16
 800bba8:	693b      	ldr	r3, [r7, #16]
 800bbaa:	2101      	movs	r1, #1
 800bbac:	68f8      	ldr	r0, [r7, #12]
 800bbae:	f00a f87c 	bl	8015caa <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800bbb2:	2300      	movs	r3, #0
 800bbb4:	e005      	b.n	800bbc2 <SCSI_Write12+0x196>
    return SCSI_ProcessWrite(pdev, lun);
 800bbb6:	7afb      	ldrb	r3, [r7, #11]
 800bbb8:	4619      	mov	r1, r3
 800bbba:	68f8      	ldr	r0, [r7, #12]
 800bbbc:	f000 f8cd 	bl	800bd5a <SCSI_ProcessWrite>
 800bbc0:	4603      	mov	r3, r0
}
 800bbc2:	4618      	mov	r0, r3
 800bbc4:	3718      	adds	r7, #24
 800bbc6:	46bd      	mov	sp, r7
 800bbc8:	bd80      	pop	{r7, pc}

0800bbca <SCSI_Verify10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800bbca:	b580      	push	{r7, lr}
 800bbcc:	b086      	sub	sp, #24
 800bbce:	af00      	add	r7, sp, #0
 800bbd0:	60f8      	str	r0, [r7, #12]
 800bbd2:	460b      	mov	r3, r1
 800bbd4:	607a      	str	r2, [r7, #4]
 800bbd6:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bbde:	617b      	str	r3, [r7, #20]

  if ((params[1] & 0x02U) == 0x02U)
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	3301      	adds	r3, #1
 800bbe4:	781b      	ldrb	r3, [r3, #0]
 800bbe6:	f003 0302 	and.w	r3, r3, #2
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d008      	beq.n	800bc00 <SCSI_Verify10+0x36>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800bbee:	7af9      	ldrb	r1, [r7, #11]
 800bbf0:	2324      	movs	r3, #36	; 0x24
 800bbf2:	2205      	movs	r2, #5
 800bbf4:	68f8      	ldr	r0, [r7, #12]
 800bbf6:	f7ff fc6a 	bl	800b4ce <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 800bbfa:	f04f 33ff 	mov.w	r3, #4294967295
 800bbfe:	e013      	b.n	800bc28 <SCSI_Verify10+0x5e>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 800bc00:	697b      	ldr	r3, [r7, #20]
 800bc02:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800bc06:	697b      	ldr	r3, [r7, #20]
 800bc08:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800bc0c:	7af9      	ldrb	r1, [r7, #11]
 800bc0e:	68f8      	ldr	r0, [r7, #12]
 800bc10:	f000 f80e 	bl	800bc30 <SCSI_CheckAddressRange>
 800bc14:	4603      	mov	r3, r0
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	da02      	bge.n	800bc20 <SCSI_Verify10+0x56>
  {
    return -1; /* error */
 800bc1a:	f04f 33ff 	mov.w	r3, #4294967295
 800bc1e:	e003      	b.n	800bc28 <SCSI_Verify10+0x5e>
  }

  hmsc->bot_data_length = 0U;
 800bc20:	697b      	ldr	r3, [r7, #20]
 800bc22:	2200      	movs	r2, #0
 800bc24:	60da      	str	r2, [r3, #12]

  return 0;
 800bc26:	2300      	movs	r3, #0
}
 800bc28:	4618      	mov	r0, r3
 800bc2a:	3718      	adds	r7, #24
 800bc2c:	46bd      	mov	sp, r7
 800bc2e:	bd80      	pop	{r7, pc}

0800bc30 <SCSI_CheckAddressRange>:
* @param  blk_nbr: number of block to be processed
* @retval status
*/
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 800bc30:	b580      	push	{r7, lr}
 800bc32:	b086      	sub	sp, #24
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	60f8      	str	r0, [r7, #12]
 800bc38:	607a      	str	r2, [r7, #4]
 800bc3a:	603b      	str	r3, [r7, #0]
 800bc3c:	460b      	mov	r3, r1
 800bc3e:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bc46:	617b      	str	r3, [r7, #20]

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 800bc48:	687a      	ldr	r2, [r7, #4]
 800bc4a:	683b      	ldr	r3, [r7, #0]
 800bc4c:	441a      	add	r2, r3
 800bc4e:	697b      	ldr	r3, [r7, #20]
 800bc50:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800bc54:	429a      	cmp	r2, r3
 800bc56:	d908      	bls.n	800bc6a <SCSI_CheckAddressRange+0x3a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 800bc58:	7af9      	ldrb	r1, [r7, #11]
 800bc5a:	2321      	movs	r3, #33	; 0x21
 800bc5c:	2205      	movs	r2, #5
 800bc5e:	68f8      	ldr	r0, [r7, #12]
 800bc60:	f7ff fc35 	bl	800b4ce <SCSI_SenseCode>
    return -1;
 800bc64:	f04f 33ff 	mov.w	r3, #4294967295
 800bc68:	e000      	b.n	800bc6c <SCSI_CheckAddressRange+0x3c>
  }

  return 0;
 800bc6a:	2300      	movs	r3, #0
}
 800bc6c:	4618      	mov	r0, r3
 800bc6e:	3718      	adds	r7, #24
 800bc70:	46bd      	mov	sp, r7
 800bc72:	bd80      	pop	{r7, pc}

0800bc74 <SCSI_ProcessRead>:
*         Handle Read Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800bc74:	b590      	push	{r4, r7, lr}
 800bc76:	b085      	sub	sp, #20
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	6078      	str	r0, [r7, #4]
 800bc7c:	460b      	mov	r3, r1
 800bc7e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bc86:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800bc8e:	68fa      	ldr	r2, [r7, #12]
 800bc90:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800bc94:	fb02 f303 	mul.w	r3, r2, r3
 800bc98:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 800bc9a:	68bb      	ldr	r3, [r7, #8]
 800bc9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bca0:	bf28      	it	cs
 800bca2:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800bca6:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bcae:	691c      	ldr	r4, [r3, #16]
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	f103 0110 	add.w	r1, r3, #16
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	68bb      	ldr	r3, [r7, #8]
 800bcc6:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 800bcca:	b29b      	uxth	r3, r3
 800bccc:	78f8      	ldrb	r0, [r7, #3]
 800bcce:	47a0      	blx	r4
 800bcd0:	4603      	mov	r3, r0
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	da08      	bge.n	800bce8 <SCSI_ProcessRead+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 800bcd6:	78f9      	ldrb	r1, [r7, #3]
 800bcd8:	2311      	movs	r3, #17
 800bcda:	2204      	movs	r2, #4
 800bcdc:	6878      	ldr	r0, [r7, #4]
 800bcde:	f7ff fbf6 	bl	800b4ce <SCSI_SenseCode>
    return -1;
 800bce2:	f04f 33ff 	mov.w	r3, #4294967295
 800bce6:	e034      	b.n	800bd52 <SCSI_ProcessRead+0xde>
  }

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	f103 0210 	add.w	r2, r3, #16
 800bcee:	68bb      	ldr	r3, [r7, #8]
 800bcf0:	2181      	movs	r1, #129	; 0x81
 800bcf2:	6878      	ldr	r0, [r7, #4]
 800bcf4:	f009 ffb8 	bl	8015c68 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800bd04:	4619      	mov	r1, r3
 800bd06:	68bb      	ldr	r3, [r7, #8]
 800bd08:	fbb3 f3f1 	udiv	r3, r3, r1
 800bd0c:	441a      	add	r2, r3
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800bd20:	4619      	mov	r1, r3
 800bd22:	68bb      	ldr	r3, [r7, #8]
 800bd24:	fbb3 f3f1 	udiv	r3, r3, r1
 800bd28:	1ad2      	subs	r2, r2, r3
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 800bd36:	68bb      	ldr	r3, [r7, #8]
 800bd38:	1ad2      	subs	r2, r2, r3
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d102      	bne.n	800bd50 <SCSI_ProcessRead+0xdc>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	2203      	movs	r2, #3
 800bd4e:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 800bd50:	2300      	movs	r3, #0
}
 800bd52:	4618      	mov	r0, r3
 800bd54:	3714      	adds	r7, #20
 800bd56:	46bd      	mov	sp, r7
 800bd58:	bd90      	pop	{r4, r7, pc}

0800bd5a <SCSI_ProcessWrite>:
*         Handle Write Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800bd5a:	b590      	push	{r4, r7, lr}
 800bd5c:	b085      	sub	sp, #20
 800bd5e:	af00      	add	r7, sp, #0
 800bd60:	6078      	str	r0, [r7, #4]
 800bd62:	460b      	mov	r3, r1
 800bd64:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bd6c:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800bd74:	68fa      	ldr	r2, [r7, #12]
 800bd76:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800bd7a:	fb02 f303 	mul.w	r3, r2, r3
 800bd7e:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 800bd80:	68bb      	ldr	r3, [r7, #8]
 800bd82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bd86:	bf28      	it	cs
 800bd88:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800bd8c:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bd94:	695c      	ldr	r4, [r3, #20]
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	f103 0110 	add.w	r1, r3, #16
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800bda8:	4618      	mov	r0, r3
 800bdaa:	68bb      	ldr	r3, [r7, #8]
 800bdac:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 800bdb0:	b29b      	uxth	r3, r3
 800bdb2:	78f8      	ldrb	r0, [r7, #3]
 800bdb4:	47a0      	blx	r4
 800bdb6:	4603      	mov	r3, r0
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	da08      	bge.n	800bdce <SCSI_ProcessWrite+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 800bdbc:	78f9      	ldrb	r1, [r7, #3]
 800bdbe:	2303      	movs	r3, #3
 800bdc0:	2204      	movs	r2, #4
 800bdc2:	6878      	ldr	r0, [r7, #4]
 800bdc4:	f7ff fb83 	bl	800b4ce <SCSI_SenseCode>
    return -1;
 800bdc8:	f04f 33ff 	mov.w	r3, #4294967295
 800bdcc:	e044      	b.n	800be58 <SCSI_ProcessWrite+0xfe>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800bdda:	4619      	mov	r1, r3
 800bddc:	68bb      	ldr	r3, [r7, #8]
 800bdde:	fbb3 f3f1 	udiv	r3, r3, r1
 800bde2:	441a      	add	r2, r3
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800bdf6:	4619      	mov	r1, r3
 800bdf8:	68bb      	ldr	r3, [r7, #8]
 800bdfa:	fbb3 f3f1 	udiv	r3, r3, r1
 800bdfe:	1ad2      	subs	r2, r2, r3
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 800be0c:	68bb      	ldr	r3, [r7, #8]
 800be0e:	1ad2      	subs	r2, r2, r3
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d104      	bne.n	800be2a <SCSI_ProcessWrite+0xd0>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800be20:	2100      	movs	r1, #0
 800be22:	6878      	ldr	r0, [r7, #4]
 800be24:	f7fe ff04 	bl	800ac30 <MSC_BOT_SendCSW>
 800be28:	e015      	b.n	800be56 <SCSI_ProcessWrite+0xfc>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800be30:	68fa      	ldr	r2, [r7, #12]
 800be32:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800be36:	fb02 f303 	mul.w	r3, r2, r3
 800be3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800be3e:	bf28      	it	cs
 800be40:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800be44:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	f103 0210 	add.w	r2, r3, #16
 800be4c:	68bb      	ldr	r3, [r7, #8]
 800be4e:	2101      	movs	r1, #1
 800be50:	6878      	ldr	r0, [r7, #4]
 800be52:	f009 ff2a 	bl	8015caa <USBD_LL_PrepareReceive>
  }

  return 0;
 800be56:	2300      	movs	r3, #0
}
 800be58:	4618      	mov	r0, r3
 800be5a:	3714      	adds	r7, #20
 800be5c:	46bd      	mov	sp, r7
 800be5e:	bd90      	pop	{r4, r7, pc}

0800be60 <SCSI_UpdateBotData>:
* @param  length: Data length
* @retval status
*/
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 800be60:	b480      	push	{r7}
 800be62:	b087      	sub	sp, #28
 800be64:	af00      	add	r7, sp, #0
 800be66:	60f8      	str	r0, [r7, #12]
 800be68:	60b9      	str	r1, [r7, #8]
 800be6a:	4613      	mov	r3, r2
 800be6c:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 800be6e:	88fb      	ldrh	r3, [r7, #6]
 800be70:	82fb      	strh	r3, [r7, #22]

  hmsc->bot_data_length = len;
 800be72:	8afa      	ldrh	r2, [r7, #22]
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 800be78:	e00b      	b.n	800be92 <SCSI_UpdateBotData+0x32>
  {
    len--;
 800be7a:	8afb      	ldrh	r3, [r7, #22]
 800be7c:	3b01      	subs	r3, #1
 800be7e:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 800be80:	8afb      	ldrh	r3, [r7, #22]
 800be82:	68ba      	ldr	r2, [r7, #8]
 800be84:	441a      	add	r2, r3
 800be86:	8afb      	ldrh	r3, [r7, #22]
 800be88:	7811      	ldrb	r1, [r2, #0]
 800be8a:	68fa      	ldr	r2, [r7, #12]
 800be8c:	4413      	add	r3, r2
 800be8e:	460a      	mov	r2, r1
 800be90:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 800be92:	8afb      	ldrh	r3, [r7, #22]
 800be94:	2b00      	cmp	r3, #0
 800be96:	d1f0      	bne.n	800be7a <SCSI_UpdateBotData+0x1a>
  }

  return 0;
 800be98:	2300      	movs	r3, #0
}
 800be9a:	4618      	mov	r0, r3
 800be9c:	371c      	adds	r7, #28
 800be9e:	46bd      	mov	sp, r7
 800bea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea4:	4770      	bx	lr

0800bea6 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800bea6:	b580      	push	{r7, lr}
 800bea8:	b086      	sub	sp, #24
 800beaa:	af00      	add	r7, sp, #0
 800beac:	60f8      	str	r0, [r7, #12]
 800beae:	60b9      	str	r1, [r7, #8]
 800beb0:	4613      	mov	r3, r2
 800beb2:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d101      	bne.n	800bebe <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800beba:	2303      	movs	r3, #3
 800bebc:	e025      	b.n	800bf0a <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d003      	beq.n	800bed0 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	2200      	movs	r2, #0
 800becc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d003      	beq.n	800bee2 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	2200      	movs	r2, #0
 800bede:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800bee2:	68bb      	ldr	r3, [r7, #8]
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d003      	beq.n	800bef0 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	68ba      	ldr	r2, [r7, #8]
 800beec:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	2201      	movs	r2, #1
 800bef4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	79fa      	ldrb	r2, [r7, #7]
 800befc:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800befe:	68f8      	ldr	r0, [r7, #12]
 800bf00:	f009 fd5e 	bl	80159c0 <USBD_LL_Init>
 800bf04:	4603      	mov	r3, r0
 800bf06:	75fb      	strb	r3, [r7, #23]

  return ret;
 800bf08:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	3718      	adds	r7, #24
 800bf0e:	46bd      	mov	sp, r7
 800bf10:	bd80      	pop	{r7, pc}

0800bf12 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800bf12:	b580      	push	{r7, lr}
 800bf14:	b084      	sub	sp, #16
 800bf16:	af00      	add	r7, sp, #0
 800bf18:	6078      	str	r0, [r7, #4]
 800bf1a:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bf1c:	2300      	movs	r3, #0
 800bf1e:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800bf20:	683b      	ldr	r3, [r7, #0]
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d101      	bne.n	800bf2a <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800bf26:	2303      	movs	r3, #3
 800bf28:	e010      	b.n	800bf4c <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	683a      	ldr	r2, [r7, #0]
 800bf2e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf3a:	f107 020e 	add.w	r2, r7, #14
 800bf3e:	4610      	mov	r0, r2
 800bf40:	4798      	blx	r3
 800bf42:	4602      	mov	r2, r0
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 800bf4a:	2300      	movs	r3, #0
}
 800bf4c:	4618      	mov	r0, r3
 800bf4e:	3710      	adds	r7, #16
 800bf50:	46bd      	mov	sp, r7
 800bf52:	bd80      	pop	{r7, pc}

0800bf54 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800bf54:	b580      	push	{r7, lr}
 800bf56:	b082      	sub	sp, #8
 800bf58:	af00      	add	r7, sp, #0
 800bf5a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800bf5c:	6878      	ldr	r0, [r7, #4]
 800bf5e:	f009 fd7b 	bl	8015a58 <USBD_LL_Start>
 800bf62:	4603      	mov	r3, r0
}
 800bf64:	4618      	mov	r0, r3
 800bf66:	3708      	adds	r7, #8
 800bf68:	46bd      	mov	sp, r7
 800bf6a:	bd80      	pop	{r7, pc}

0800bf6c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800bf6c:	b480      	push	{r7}
 800bf6e:	b083      	sub	sp, #12
 800bf70:	af00      	add	r7, sp, #0
 800bf72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bf74:	2300      	movs	r3, #0
}
 800bf76:	4618      	mov	r0, r3
 800bf78:	370c      	adds	r7, #12
 800bf7a:	46bd      	mov	sp, r7
 800bf7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf80:	4770      	bx	lr

0800bf82 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bf82:	b580      	push	{r7, lr}
 800bf84:	b084      	sub	sp, #16
 800bf86:	af00      	add	r7, sp, #0
 800bf88:	6078      	str	r0, [r7, #4]
 800bf8a:	460b      	mov	r3, r1
 800bf8c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800bf8e:	2303      	movs	r3, #3
 800bf90:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d009      	beq.n	800bfb0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	78fa      	ldrb	r2, [r7, #3]
 800bfa6:	4611      	mov	r1, r2
 800bfa8:	6878      	ldr	r0, [r7, #4]
 800bfaa:	4798      	blx	r3
 800bfac:	4603      	mov	r3, r0
 800bfae:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800bfb0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfb2:	4618      	mov	r0, r3
 800bfb4:	3710      	adds	r7, #16
 800bfb6:	46bd      	mov	sp, r7
 800bfb8:	bd80      	pop	{r7, pc}

0800bfba <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bfba:	b580      	push	{r7, lr}
 800bfbc:	b082      	sub	sp, #8
 800bfbe:	af00      	add	r7, sp, #0
 800bfc0:	6078      	str	r0, [r7, #4]
 800bfc2:	460b      	mov	r3, r1
 800bfc4:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d007      	beq.n	800bfe0 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bfd6:	685b      	ldr	r3, [r3, #4]
 800bfd8:	78fa      	ldrb	r2, [r7, #3]
 800bfda:	4611      	mov	r1, r2
 800bfdc:	6878      	ldr	r0, [r7, #4]
 800bfde:	4798      	blx	r3
  }

  return USBD_OK;
 800bfe0:	2300      	movs	r3, #0
}
 800bfe2:	4618      	mov	r0, r3
 800bfe4:	3708      	adds	r7, #8
 800bfe6:	46bd      	mov	sp, r7
 800bfe8:	bd80      	pop	{r7, pc}

0800bfea <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800bfea:	b580      	push	{r7, lr}
 800bfec:	b084      	sub	sp, #16
 800bfee:	af00      	add	r7, sp, #0
 800bff0:	6078      	str	r0, [r7, #4]
 800bff2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bffa:	6839      	ldr	r1, [r7, #0]
 800bffc:	4618      	mov	r0, r3
 800bffe:	f000 ff55 	bl	800ceac <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	2201      	movs	r2, #1
 800c006:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800c010:	461a      	mov	r2, r3
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c01e:	f003 031f 	and.w	r3, r3, #31
 800c022:	2b01      	cmp	r3, #1
 800c024:	d00e      	beq.n	800c044 <USBD_LL_SetupStage+0x5a>
 800c026:	2b01      	cmp	r3, #1
 800c028:	d302      	bcc.n	800c030 <USBD_LL_SetupStage+0x46>
 800c02a:	2b02      	cmp	r3, #2
 800c02c:	d014      	beq.n	800c058 <USBD_LL_SetupStage+0x6e>
 800c02e:	e01d      	b.n	800c06c <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c036:	4619      	mov	r1, r3
 800c038:	6878      	ldr	r0, [r7, #4]
 800c03a:	f000 fa17 	bl	800c46c <USBD_StdDevReq>
 800c03e:	4603      	mov	r3, r0
 800c040:	73fb      	strb	r3, [r7, #15]
      break;
 800c042:	e020      	b.n	800c086 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c04a:	4619      	mov	r1, r3
 800c04c:	6878      	ldr	r0, [r7, #4]
 800c04e:	f000 fa7b 	bl	800c548 <USBD_StdItfReq>
 800c052:	4603      	mov	r3, r0
 800c054:	73fb      	strb	r3, [r7, #15]
      break;
 800c056:	e016      	b.n	800c086 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c05e:	4619      	mov	r1, r3
 800c060:	6878      	ldr	r0, [r7, #4]
 800c062:	f000 fab7 	bl	800c5d4 <USBD_StdEPReq>
 800c066:	4603      	mov	r3, r0
 800c068:	73fb      	strb	r3, [r7, #15]
      break;
 800c06a:	e00c      	b.n	800c086 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c072:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c076:	b2db      	uxtb	r3, r3
 800c078:	4619      	mov	r1, r3
 800c07a:	6878      	ldr	r0, [r7, #4]
 800c07c:	f009 fd6b 	bl	8015b56 <USBD_LL_StallEP>
 800c080:	4603      	mov	r3, r0
 800c082:	73fb      	strb	r3, [r7, #15]
      break;
 800c084:	bf00      	nop
  }

  return ret;
 800c086:	7bfb      	ldrb	r3, [r7, #15]
}
 800c088:	4618      	mov	r0, r3
 800c08a:	3710      	adds	r7, #16
 800c08c:	46bd      	mov	sp, r7
 800c08e:	bd80      	pop	{r7, pc}

0800c090 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c090:	b580      	push	{r7, lr}
 800c092:	b086      	sub	sp, #24
 800c094:	af00      	add	r7, sp, #0
 800c096:	60f8      	str	r0, [r7, #12]
 800c098:	460b      	mov	r3, r1
 800c09a:	607a      	str	r2, [r7, #4]
 800c09c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c09e:	7afb      	ldrb	r3, [r7, #11]
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d137      	bne.n	800c114 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800c0aa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c0b2:	2b03      	cmp	r3, #3
 800c0b4:	d14a      	bne.n	800c14c <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800c0b6:	693b      	ldr	r3, [r7, #16]
 800c0b8:	689a      	ldr	r2, [r3, #8]
 800c0ba:	693b      	ldr	r3, [r7, #16]
 800c0bc:	68db      	ldr	r3, [r3, #12]
 800c0be:	429a      	cmp	r2, r3
 800c0c0:	d913      	bls.n	800c0ea <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c0c2:	693b      	ldr	r3, [r7, #16]
 800c0c4:	689a      	ldr	r2, [r3, #8]
 800c0c6:	693b      	ldr	r3, [r7, #16]
 800c0c8:	68db      	ldr	r3, [r3, #12]
 800c0ca:	1ad2      	subs	r2, r2, r3
 800c0cc:	693b      	ldr	r3, [r7, #16]
 800c0ce:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c0d0:	693b      	ldr	r3, [r7, #16]
 800c0d2:	68da      	ldr	r2, [r3, #12]
 800c0d4:	693b      	ldr	r3, [r7, #16]
 800c0d6:	689b      	ldr	r3, [r3, #8]
 800c0d8:	4293      	cmp	r3, r2
 800c0da:	bf28      	it	cs
 800c0dc:	4613      	movcs	r3, r2
 800c0de:	461a      	mov	r2, r3
 800c0e0:	6879      	ldr	r1, [r7, #4]
 800c0e2:	68f8      	ldr	r0, [r7, #12]
 800c0e4:	f000 ffb9 	bl	800d05a <USBD_CtlContinueRx>
 800c0e8:	e030      	b.n	800c14c <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c0f0:	691b      	ldr	r3, [r3, #16]
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d00a      	beq.n	800c10c <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800c0fc:	2b03      	cmp	r3, #3
 800c0fe:	d105      	bne.n	800c10c <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c106:	691b      	ldr	r3, [r3, #16]
 800c108:	68f8      	ldr	r0, [r7, #12]
 800c10a:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800c10c:	68f8      	ldr	r0, [r7, #12]
 800c10e:	f000 ffb5 	bl	800d07c <USBD_CtlSendStatus>
 800c112:	e01b      	b.n	800c14c <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c11a:	699b      	ldr	r3, [r3, #24]
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d013      	beq.n	800c148 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800c126:	2b03      	cmp	r3, #3
 800c128:	d10e      	bne.n	800c148 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c130:	699b      	ldr	r3, [r3, #24]
 800c132:	7afa      	ldrb	r2, [r7, #11]
 800c134:	4611      	mov	r1, r2
 800c136:	68f8      	ldr	r0, [r7, #12]
 800c138:	4798      	blx	r3
 800c13a:	4603      	mov	r3, r0
 800c13c:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800c13e:	7dfb      	ldrb	r3, [r7, #23]
 800c140:	2b00      	cmp	r3, #0
 800c142:	d003      	beq.n	800c14c <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800c144:	7dfb      	ldrb	r3, [r7, #23]
 800c146:	e002      	b.n	800c14e <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800c148:	2303      	movs	r3, #3
 800c14a:	e000      	b.n	800c14e <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800c14c:	2300      	movs	r3, #0
}
 800c14e:	4618      	mov	r0, r3
 800c150:	3718      	adds	r7, #24
 800c152:	46bd      	mov	sp, r7
 800c154:	bd80      	pop	{r7, pc}

0800c156 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c156:	b580      	push	{r7, lr}
 800c158:	b086      	sub	sp, #24
 800c15a:	af00      	add	r7, sp, #0
 800c15c:	60f8      	str	r0, [r7, #12]
 800c15e:	460b      	mov	r3, r1
 800c160:	607a      	str	r2, [r7, #4]
 800c162:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c164:	7afb      	ldrb	r3, [r7, #11]
 800c166:	2b00      	cmp	r3, #0
 800c168:	d16a      	bne.n	800c240 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	3314      	adds	r3, #20
 800c16e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c176:	2b02      	cmp	r3, #2
 800c178:	d155      	bne.n	800c226 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800c17a:	693b      	ldr	r3, [r7, #16]
 800c17c:	689a      	ldr	r2, [r3, #8]
 800c17e:	693b      	ldr	r3, [r7, #16]
 800c180:	68db      	ldr	r3, [r3, #12]
 800c182:	429a      	cmp	r2, r3
 800c184:	d914      	bls.n	800c1b0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c186:	693b      	ldr	r3, [r7, #16]
 800c188:	689a      	ldr	r2, [r3, #8]
 800c18a:	693b      	ldr	r3, [r7, #16]
 800c18c:	68db      	ldr	r3, [r3, #12]
 800c18e:	1ad2      	subs	r2, r2, r3
 800c190:	693b      	ldr	r3, [r7, #16]
 800c192:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c194:	693b      	ldr	r3, [r7, #16]
 800c196:	689b      	ldr	r3, [r3, #8]
 800c198:	461a      	mov	r2, r3
 800c19a:	6879      	ldr	r1, [r7, #4]
 800c19c:	68f8      	ldr	r0, [r7, #12]
 800c19e:	f000 ff4b 	bl	800d038 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c1a2:	2300      	movs	r3, #0
 800c1a4:	2200      	movs	r2, #0
 800c1a6:	2100      	movs	r1, #0
 800c1a8:	68f8      	ldr	r0, [r7, #12]
 800c1aa:	f009 fd7e 	bl	8015caa <USBD_LL_PrepareReceive>
 800c1ae:	e03a      	b.n	800c226 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c1b0:	693b      	ldr	r3, [r7, #16]
 800c1b2:	68da      	ldr	r2, [r3, #12]
 800c1b4:	693b      	ldr	r3, [r7, #16]
 800c1b6:	689b      	ldr	r3, [r3, #8]
 800c1b8:	429a      	cmp	r2, r3
 800c1ba:	d11c      	bne.n	800c1f6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800c1bc:	693b      	ldr	r3, [r7, #16]
 800c1be:	685a      	ldr	r2, [r3, #4]
 800c1c0:	693b      	ldr	r3, [r7, #16]
 800c1c2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c1c4:	429a      	cmp	r2, r3
 800c1c6:	d316      	bcc.n	800c1f6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800c1c8:	693b      	ldr	r3, [r7, #16]
 800c1ca:	685a      	ldr	r2, [r3, #4]
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c1d2:	429a      	cmp	r2, r3
 800c1d4:	d20f      	bcs.n	800c1f6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c1d6:	2200      	movs	r2, #0
 800c1d8:	2100      	movs	r1, #0
 800c1da:	68f8      	ldr	r0, [r7, #12]
 800c1dc:	f000 ff2c 	bl	800d038 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	2200      	movs	r2, #0
 800c1e4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c1e8:	2300      	movs	r3, #0
 800c1ea:	2200      	movs	r2, #0
 800c1ec:	2100      	movs	r1, #0
 800c1ee:	68f8      	ldr	r0, [r7, #12]
 800c1f0:	f009 fd5b 	bl	8015caa <USBD_LL_PrepareReceive>
 800c1f4:	e017      	b.n	800c226 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c1fc:	68db      	ldr	r3, [r3, #12]
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d00a      	beq.n	800c218 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800c208:	2b03      	cmp	r3, #3
 800c20a:	d105      	bne.n	800c218 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c212:	68db      	ldr	r3, [r3, #12]
 800c214:	68f8      	ldr	r0, [r7, #12]
 800c216:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c218:	2180      	movs	r1, #128	; 0x80
 800c21a:	68f8      	ldr	r0, [r7, #12]
 800c21c:	f009 fc9b 	bl	8015b56 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c220:	68f8      	ldr	r0, [r7, #12]
 800c222:	f000 ff3e 	bl	800d0a2 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800c22c:	2b01      	cmp	r3, #1
 800c22e:	d123      	bne.n	800c278 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800c230:	68f8      	ldr	r0, [r7, #12]
 800c232:	f7ff fe9b 	bl	800bf6c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	2200      	movs	r2, #0
 800c23a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800c23e:	e01b      	b.n	800c278 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c246:	695b      	ldr	r3, [r3, #20]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d013      	beq.n	800c274 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800c252:	2b03      	cmp	r3, #3
 800c254:	d10e      	bne.n	800c274 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c25c:	695b      	ldr	r3, [r3, #20]
 800c25e:	7afa      	ldrb	r2, [r7, #11]
 800c260:	4611      	mov	r1, r2
 800c262:	68f8      	ldr	r0, [r7, #12]
 800c264:	4798      	blx	r3
 800c266:	4603      	mov	r3, r0
 800c268:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800c26a:	7dfb      	ldrb	r3, [r7, #23]
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d003      	beq.n	800c278 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800c270:	7dfb      	ldrb	r3, [r7, #23]
 800c272:	e002      	b.n	800c27a <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800c274:	2303      	movs	r3, #3
 800c276:	e000      	b.n	800c27a <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800c278:	2300      	movs	r3, #0
}
 800c27a:	4618      	mov	r0, r3
 800c27c:	3718      	adds	r7, #24
 800c27e:	46bd      	mov	sp, r7
 800c280:	bd80      	pop	{r7, pc}

0800c282 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c282:	b580      	push	{r7, lr}
 800c284:	b082      	sub	sp, #8
 800c286:	af00      	add	r7, sp, #0
 800c288:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	2201      	movs	r2, #1
 800c28e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	2200      	movs	r2, #0
 800c296:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	2200      	movs	r2, #0
 800c29e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	2200      	movs	r2, #0
 800c2a4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d009      	beq.n	800c2c6 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c2b8:	685b      	ldr	r3, [r3, #4]
 800c2ba:	687a      	ldr	r2, [r7, #4]
 800c2bc:	6852      	ldr	r2, [r2, #4]
 800c2be:	b2d2      	uxtb	r2, r2
 800c2c0:	4611      	mov	r1, r2
 800c2c2:	6878      	ldr	r0, [r7, #4]
 800c2c4:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c2c6:	2340      	movs	r3, #64	; 0x40
 800c2c8:	2200      	movs	r2, #0
 800c2ca:	2100      	movs	r1, #0
 800c2cc:	6878      	ldr	r0, [r7, #4]
 800c2ce:	f009 fbde 	bl	8015a8e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	2201      	movs	r2, #1
 800c2d6:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	2240      	movs	r2, #64	; 0x40
 800c2de:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c2e2:	2340      	movs	r3, #64	; 0x40
 800c2e4:	2200      	movs	r2, #0
 800c2e6:	2180      	movs	r1, #128	; 0x80
 800c2e8:	6878      	ldr	r0, [r7, #4]
 800c2ea:	f009 fbd0 	bl	8015a8e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	2201      	movs	r2, #1
 800c2f2:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	2240      	movs	r2, #64	; 0x40
 800c2f8:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800c2fa:	2300      	movs	r3, #0
}
 800c2fc:	4618      	mov	r0, r3
 800c2fe:	3708      	adds	r7, #8
 800c300:	46bd      	mov	sp, r7
 800c302:	bd80      	pop	{r7, pc}

0800c304 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c304:	b480      	push	{r7}
 800c306:	b083      	sub	sp, #12
 800c308:	af00      	add	r7, sp, #0
 800c30a:	6078      	str	r0, [r7, #4]
 800c30c:	460b      	mov	r3, r1
 800c30e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	78fa      	ldrb	r2, [r7, #3]
 800c314:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c316:	2300      	movs	r3, #0
}
 800c318:	4618      	mov	r0, r3
 800c31a:	370c      	adds	r7, #12
 800c31c:	46bd      	mov	sp, r7
 800c31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c322:	4770      	bx	lr

0800c324 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c324:	b480      	push	{r7}
 800c326:	b083      	sub	sp, #12
 800c328:	af00      	add	r7, sp, #0
 800c32a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	2204      	movs	r2, #4
 800c33c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800c340:	2300      	movs	r3, #0
}
 800c342:	4618      	mov	r0, r3
 800c344:	370c      	adds	r7, #12
 800c346:	46bd      	mov	sp, r7
 800c348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c34c:	4770      	bx	lr

0800c34e <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c34e:	b480      	push	{r7}
 800c350:	b083      	sub	sp, #12
 800c352:	af00      	add	r7, sp, #0
 800c354:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c35c:	2b04      	cmp	r3, #4
 800c35e:	d105      	bne.n	800c36c <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800c36c:	2300      	movs	r3, #0
}
 800c36e:	4618      	mov	r0, r3
 800c370:	370c      	adds	r7, #12
 800c372:	46bd      	mov	sp, r7
 800c374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c378:	4770      	bx	lr

0800c37a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c37a:	b580      	push	{r7, lr}
 800c37c:	b082      	sub	sp, #8
 800c37e:	af00      	add	r7, sp, #0
 800c380:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c388:	2b03      	cmp	r3, #3
 800c38a:	d10b      	bne.n	800c3a4 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c392:	69db      	ldr	r3, [r3, #28]
 800c394:	2b00      	cmp	r3, #0
 800c396:	d005      	beq.n	800c3a4 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c39e:	69db      	ldr	r3, [r3, #28]
 800c3a0:	6878      	ldr	r0, [r7, #4]
 800c3a2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c3a4:	2300      	movs	r3, #0
}
 800c3a6:	4618      	mov	r0, r3
 800c3a8:	3708      	adds	r7, #8
 800c3aa:	46bd      	mov	sp, r7
 800c3ac:	bd80      	pop	{r7, pc}

0800c3ae <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800c3ae:	b480      	push	{r7}
 800c3b0:	b083      	sub	sp, #12
 800c3b2:	af00      	add	r7, sp, #0
 800c3b4:	6078      	str	r0, [r7, #4]
 800c3b6:	460b      	mov	r3, r1
 800c3b8:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800c3ba:	2300      	movs	r3, #0
}
 800c3bc:	4618      	mov	r0, r3
 800c3be:	370c      	adds	r7, #12
 800c3c0:	46bd      	mov	sp, r7
 800c3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c6:	4770      	bx	lr

0800c3c8 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800c3c8:	b480      	push	{r7}
 800c3ca:	b083      	sub	sp, #12
 800c3cc:	af00      	add	r7, sp, #0
 800c3ce:	6078      	str	r0, [r7, #4]
 800c3d0:	460b      	mov	r3, r1
 800c3d2:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800c3d4:	2300      	movs	r3, #0
}
 800c3d6:	4618      	mov	r0, r3
 800c3d8:	370c      	adds	r7, #12
 800c3da:	46bd      	mov	sp, r7
 800c3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e0:	4770      	bx	lr

0800c3e2 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800c3e2:	b480      	push	{r7}
 800c3e4:	b083      	sub	sp, #12
 800c3e6:	af00      	add	r7, sp, #0
 800c3e8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c3ea:	2300      	movs	r3, #0
}
 800c3ec:	4618      	mov	r0, r3
 800c3ee:	370c      	adds	r7, #12
 800c3f0:	46bd      	mov	sp, r7
 800c3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f6:	4770      	bx	lr

0800c3f8 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800c3f8:	b580      	push	{r7, lr}
 800c3fa:	b082      	sub	sp, #8
 800c3fc:	af00      	add	r7, sp, #0
 800c3fe:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	2201      	movs	r2, #1
 800c404:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d009      	beq.n	800c426 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c418:	685b      	ldr	r3, [r3, #4]
 800c41a:	687a      	ldr	r2, [r7, #4]
 800c41c:	6852      	ldr	r2, [r2, #4]
 800c41e:	b2d2      	uxtb	r2, r2
 800c420:	4611      	mov	r1, r2
 800c422:	6878      	ldr	r0, [r7, #4]
 800c424:	4798      	blx	r3
  }

  return USBD_OK;
 800c426:	2300      	movs	r3, #0
}
 800c428:	4618      	mov	r0, r3
 800c42a:	3708      	adds	r7, #8
 800c42c:	46bd      	mov	sp, r7
 800c42e:	bd80      	pop	{r7, pc}

0800c430 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c430:	b480      	push	{r7}
 800c432:	b087      	sub	sp, #28
 800c434:	af00      	add	r7, sp, #0
 800c436:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c43c:	697b      	ldr	r3, [r7, #20]
 800c43e:	781b      	ldrb	r3, [r3, #0]
 800c440:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c442:	697b      	ldr	r3, [r7, #20]
 800c444:	3301      	adds	r3, #1
 800c446:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c448:	697b      	ldr	r3, [r7, #20]
 800c44a:	781b      	ldrb	r3, [r3, #0]
 800c44c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c44e:	8a3b      	ldrh	r3, [r7, #16]
 800c450:	021b      	lsls	r3, r3, #8
 800c452:	b21a      	sxth	r2, r3
 800c454:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c458:	4313      	orrs	r3, r2
 800c45a:	b21b      	sxth	r3, r3
 800c45c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c45e:	89fb      	ldrh	r3, [r7, #14]
}
 800c460:	4618      	mov	r0, r3
 800c462:	371c      	adds	r7, #28
 800c464:	46bd      	mov	sp, r7
 800c466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c46a:	4770      	bx	lr

0800c46c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c46c:	b580      	push	{r7, lr}
 800c46e:	b084      	sub	sp, #16
 800c470:	af00      	add	r7, sp, #0
 800c472:	6078      	str	r0, [r7, #4]
 800c474:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c476:	2300      	movs	r3, #0
 800c478:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c47a:	683b      	ldr	r3, [r7, #0]
 800c47c:	781b      	ldrb	r3, [r3, #0]
 800c47e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c482:	2b20      	cmp	r3, #32
 800c484:	d004      	beq.n	800c490 <USBD_StdDevReq+0x24>
 800c486:	2b40      	cmp	r3, #64	; 0x40
 800c488:	d002      	beq.n	800c490 <USBD_StdDevReq+0x24>
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d00a      	beq.n	800c4a4 <USBD_StdDevReq+0x38>
 800c48e:	e050      	b.n	800c532 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c496:	689b      	ldr	r3, [r3, #8]
 800c498:	6839      	ldr	r1, [r7, #0]
 800c49a:	6878      	ldr	r0, [r7, #4]
 800c49c:	4798      	blx	r3
 800c49e:	4603      	mov	r3, r0
 800c4a0:	73fb      	strb	r3, [r7, #15]
    break;
 800c4a2:	e04b      	b.n	800c53c <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800c4a4:	683b      	ldr	r3, [r7, #0]
 800c4a6:	785b      	ldrb	r3, [r3, #1]
 800c4a8:	2b09      	cmp	r3, #9
 800c4aa:	d83c      	bhi.n	800c526 <USBD_StdDevReq+0xba>
 800c4ac:	a201      	add	r2, pc, #4	; (adr r2, 800c4b4 <USBD_StdDevReq+0x48>)
 800c4ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4b2:	bf00      	nop
 800c4b4:	0800c509 	.word	0x0800c509
 800c4b8:	0800c51d 	.word	0x0800c51d
 800c4bc:	0800c527 	.word	0x0800c527
 800c4c0:	0800c513 	.word	0x0800c513
 800c4c4:	0800c527 	.word	0x0800c527
 800c4c8:	0800c4e7 	.word	0x0800c4e7
 800c4cc:	0800c4dd 	.word	0x0800c4dd
 800c4d0:	0800c527 	.word	0x0800c527
 800c4d4:	0800c4ff 	.word	0x0800c4ff
 800c4d8:	0800c4f1 	.word	0x0800c4f1
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800c4dc:	6839      	ldr	r1, [r7, #0]
 800c4de:	6878      	ldr	r0, [r7, #4]
 800c4e0:	f000 f9ce 	bl	800c880 <USBD_GetDescriptor>
      break;
 800c4e4:	e024      	b.n	800c530 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800c4e6:	6839      	ldr	r1, [r7, #0]
 800c4e8:	6878      	ldr	r0, [r7, #4]
 800c4ea:	f000 fb5d 	bl	800cba8 <USBD_SetAddress>
      break;
 800c4ee:	e01f      	b.n	800c530 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800c4f0:	6839      	ldr	r1, [r7, #0]
 800c4f2:	6878      	ldr	r0, [r7, #4]
 800c4f4:	f000 fb9a 	bl	800cc2c <USBD_SetConfig>
 800c4f8:	4603      	mov	r3, r0
 800c4fa:	73fb      	strb	r3, [r7, #15]
      break;
 800c4fc:	e018      	b.n	800c530 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800c4fe:	6839      	ldr	r1, [r7, #0]
 800c500:	6878      	ldr	r0, [r7, #4]
 800c502:	f000 fc37 	bl	800cd74 <USBD_GetConfig>
      break;
 800c506:	e013      	b.n	800c530 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800c508:	6839      	ldr	r1, [r7, #0]
 800c50a:	6878      	ldr	r0, [r7, #4]
 800c50c:	f000 fc66 	bl	800cddc <USBD_GetStatus>
      break;
 800c510:	e00e      	b.n	800c530 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800c512:	6839      	ldr	r1, [r7, #0]
 800c514:	6878      	ldr	r0, [r7, #4]
 800c516:	f000 fc94 	bl	800ce42 <USBD_SetFeature>
      break;
 800c51a:	e009      	b.n	800c530 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800c51c:	6839      	ldr	r1, [r7, #0]
 800c51e:	6878      	ldr	r0, [r7, #4]
 800c520:	f000 fca3 	bl	800ce6a <USBD_ClrFeature>
      break;
 800c524:	e004      	b.n	800c530 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800c526:	6839      	ldr	r1, [r7, #0]
 800c528:	6878      	ldr	r0, [r7, #4]
 800c52a:	f000 fcf9 	bl	800cf20 <USBD_CtlError>
      break;
 800c52e:	bf00      	nop
    }
    break;
 800c530:	e004      	b.n	800c53c <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800c532:	6839      	ldr	r1, [r7, #0]
 800c534:	6878      	ldr	r0, [r7, #4]
 800c536:	f000 fcf3 	bl	800cf20 <USBD_CtlError>
    break;
 800c53a:	bf00      	nop
  }

  return ret;
 800c53c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c53e:	4618      	mov	r0, r3
 800c540:	3710      	adds	r7, #16
 800c542:	46bd      	mov	sp, r7
 800c544:	bd80      	pop	{r7, pc}
 800c546:	bf00      	nop

0800c548 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c548:	b580      	push	{r7, lr}
 800c54a:	b084      	sub	sp, #16
 800c54c:	af00      	add	r7, sp, #0
 800c54e:	6078      	str	r0, [r7, #4]
 800c550:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c552:	2300      	movs	r3, #0
 800c554:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c556:	683b      	ldr	r3, [r7, #0]
 800c558:	781b      	ldrb	r3, [r3, #0]
 800c55a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c55e:	2b20      	cmp	r3, #32
 800c560:	d003      	beq.n	800c56a <USBD_StdItfReq+0x22>
 800c562:	2b40      	cmp	r3, #64	; 0x40
 800c564:	d001      	beq.n	800c56a <USBD_StdItfReq+0x22>
 800c566:	2b00      	cmp	r3, #0
 800c568:	d12a      	bne.n	800c5c0 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c570:	3b01      	subs	r3, #1
 800c572:	2b02      	cmp	r3, #2
 800c574:	d81d      	bhi.n	800c5b2 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c576:	683b      	ldr	r3, [r7, #0]
 800c578:	889b      	ldrh	r3, [r3, #4]
 800c57a:	b2db      	uxtb	r3, r3
 800c57c:	2b01      	cmp	r3, #1
 800c57e:	d813      	bhi.n	800c5a8 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c586:	689b      	ldr	r3, [r3, #8]
 800c588:	6839      	ldr	r1, [r7, #0]
 800c58a:	6878      	ldr	r0, [r7, #4]
 800c58c:	4798      	blx	r3
 800c58e:	4603      	mov	r3, r0
 800c590:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800c592:	683b      	ldr	r3, [r7, #0]
 800c594:	88db      	ldrh	r3, [r3, #6]
 800c596:	2b00      	cmp	r3, #0
 800c598:	d110      	bne.n	800c5bc <USBD_StdItfReq+0x74>
 800c59a:	7bfb      	ldrb	r3, [r7, #15]
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d10d      	bne.n	800c5bc <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800c5a0:	6878      	ldr	r0, [r7, #4]
 800c5a2:	f000 fd6b 	bl	800d07c <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800c5a6:	e009      	b.n	800c5bc <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800c5a8:	6839      	ldr	r1, [r7, #0]
 800c5aa:	6878      	ldr	r0, [r7, #4]
 800c5ac:	f000 fcb8 	bl	800cf20 <USBD_CtlError>
      break;
 800c5b0:	e004      	b.n	800c5bc <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800c5b2:	6839      	ldr	r1, [r7, #0]
 800c5b4:	6878      	ldr	r0, [r7, #4]
 800c5b6:	f000 fcb3 	bl	800cf20 <USBD_CtlError>
      break;
 800c5ba:	e000      	b.n	800c5be <USBD_StdItfReq+0x76>
      break;
 800c5bc:	bf00      	nop
    }
    break;
 800c5be:	e004      	b.n	800c5ca <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800c5c0:	6839      	ldr	r1, [r7, #0]
 800c5c2:	6878      	ldr	r0, [r7, #4]
 800c5c4:	f000 fcac 	bl	800cf20 <USBD_CtlError>
    break;
 800c5c8:	bf00      	nop
  }

  return ret;
 800c5ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5cc:	4618      	mov	r0, r3
 800c5ce:	3710      	adds	r7, #16
 800c5d0:	46bd      	mov	sp, r7
 800c5d2:	bd80      	pop	{r7, pc}

0800c5d4 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c5d4:	b580      	push	{r7, lr}
 800c5d6:	b084      	sub	sp, #16
 800c5d8:	af00      	add	r7, sp, #0
 800c5da:	6078      	str	r0, [r7, #4]
 800c5dc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800c5de:	2300      	movs	r3, #0
 800c5e0:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800c5e2:	683b      	ldr	r3, [r7, #0]
 800c5e4:	889b      	ldrh	r3, [r3, #4]
 800c5e6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c5e8:	683b      	ldr	r3, [r7, #0]
 800c5ea:	781b      	ldrb	r3, [r3, #0]
 800c5ec:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c5f0:	2b20      	cmp	r3, #32
 800c5f2:	d004      	beq.n	800c5fe <USBD_StdEPReq+0x2a>
 800c5f4:	2b40      	cmp	r3, #64	; 0x40
 800c5f6:	d002      	beq.n	800c5fe <USBD_StdEPReq+0x2a>
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d00a      	beq.n	800c612 <USBD_StdEPReq+0x3e>
 800c5fc:	e135      	b.n	800c86a <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c604:	689b      	ldr	r3, [r3, #8]
 800c606:	6839      	ldr	r1, [r7, #0]
 800c608:	6878      	ldr	r0, [r7, #4]
 800c60a:	4798      	blx	r3
 800c60c:	4603      	mov	r3, r0
 800c60e:	73fb      	strb	r3, [r7, #15]
    break;
 800c610:	e130      	b.n	800c874 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800c612:	683b      	ldr	r3, [r7, #0]
 800c614:	785b      	ldrb	r3, [r3, #1]
 800c616:	2b01      	cmp	r3, #1
 800c618:	d03e      	beq.n	800c698 <USBD_StdEPReq+0xc4>
 800c61a:	2b03      	cmp	r3, #3
 800c61c:	d002      	beq.n	800c624 <USBD_StdEPReq+0x50>
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d077      	beq.n	800c712 <USBD_StdEPReq+0x13e>
 800c622:	e11c      	b.n	800c85e <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c62a:	2b02      	cmp	r3, #2
 800c62c:	d002      	beq.n	800c634 <USBD_StdEPReq+0x60>
 800c62e:	2b03      	cmp	r3, #3
 800c630:	d015      	beq.n	800c65e <USBD_StdEPReq+0x8a>
 800c632:	e02b      	b.n	800c68c <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c634:	7bbb      	ldrb	r3, [r7, #14]
 800c636:	2b00      	cmp	r3, #0
 800c638:	d00c      	beq.n	800c654 <USBD_StdEPReq+0x80>
 800c63a:	7bbb      	ldrb	r3, [r7, #14]
 800c63c:	2b80      	cmp	r3, #128	; 0x80
 800c63e:	d009      	beq.n	800c654 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800c640:	7bbb      	ldrb	r3, [r7, #14]
 800c642:	4619      	mov	r1, r3
 800c644:	6878      	ldr	r0, [r7, #4]
 800c646:	f009 fa86 	bl	8015b56 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c64a:	2180      	movs	r1, #128	; 0x80
 800c64c:	6878      	ldr	r0, [r7, #4]
 800c64e:	f009 fa82 	bl	8015b56 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800c652:	e020      	b.n	800c696 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 800c654:	6839      	ldr	r1, [r7, #0]
 800c656:	6878      	ldr	r0, [r7, #4]
 800c658:	f000 fc62 	bl	800cf20 <USBD_CtlError>
        break;
 800c65c:	e01b      	b.n	800c696 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800c65e:	683b      	ldr	r3, [r7, #0]
 800c660:	885b      	ldrh	r3, [r3, #2]
 800c662:	2b00      	cmp	r3, #0
 800c664:	d10e      	bne.n	800c684 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c666:	7bbb      	ldrb	r3, [r7, #14]
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d00b      	beq.n	800c684 <USBD_StdEPReq+0xb0>
 800c66c:	7bbb      	ldrb	r3, [r7, #14]
 800c66e:	2b80      	cmp	r3, #128	; 0x80
 800c670:	d008      	beq.n	800c684 <USBD_StdEPReq+0xb0>
 800c672:	683b      	ldr	r3, [r7, #0]
 800c674:	88db      	ldrh	r3, [r3, #6]
 800c676:	2b00      	cmp	r3, #0
 800c678:	d104      	bne.n	800c684 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800c67a:	7bbb      	ldrb	r3, [r7, #14]
 800c67c:	4619      	mov	r1, r3
 800c67e:	6878      	ldr	r0, [r7, #4]
 800c680:	f009 fa69 	bl	8015b56 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800c684:	6878      	ldr	r0, [r7, #4]
 800c686:	f000 fcf9 	bl	800d07c <USBD_CtlSendStatus>

        break;
 800c68a:	e004      	b.n	800c696 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800c68c:	6839      	ldr	r1, [r7, #0]
 800c68e:	6878      	ldr	r0, [r7, #4]
 800c690:	f000 fc46 	bl	800cf20 <USBD_CtlError>
        break;
 800c694:	bf00      	nop
      }
      break;
 800c696:	e0e7      	b.n	800c868 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c69e:	2b02      	cmp	r3, #2
 800c6a0:	d002      	beq.n	800c6a8 <USBD_StdEPReq+0xd4>
 800c6a2:	2b03      	cmp	r3, #3
 800c6a4:	d015      	beq.n	800c6d2 <USBD_StdEPReq+0xfe>
 800c6a6:	e02d      	b.n	800c704 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c6a8:	7bbb      	ldrb	r3, [r7, #14]
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d00c      	beq.n	800c6c8 <USBD_StdEPReq+0xf4>
 800c6ae:	7bbb      	ldrb	r3, [r7, #14]
 800c6b0:	2b80      	cmp	r3, #128	; 0x80
 800c6b2:	d009      	beq.n	800c6c8 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800c6b4:	7bbb      	ldrb	r3, [r7, #14]
 800c6b6:	4619      	mov	r1, r3
 800c6b8:	6878      	ldr	r0, [r7, #4]
 800c6ba:	f009 fa4c 	bl	8015b56 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c6be:	2180      	movs	r1, #128	; 0x80
 800c6c0:	6878      	ldr	r0, [r7, #4]
 800c6c2:	f009 fa48 	bl	8015b56 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800c6c6:	e023      	b.n	800c710 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 800c6c8:	6839      	ldr	r1, [r7, #0]
 800c6ca:	6878      	ldr	r0, [r7, #4]
 800c6cc:	f000 fc28 	bl	800cf20 <USBD_CtlError>
        break;
 800c6d0:	e01e      	b.n	800c710 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800c6d2:	683b      	ldr	r3, [r7, #0]
 800c6d4:	885b      	ldrh	r3, [r3, #2]
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d119      	bne.n	800c70e <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800c6da:	7bbb      	ldrb	r3, [r7, #14]
 800c6dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d004      	beq.n	800c6ee <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c6e4:	7bbb      	ldrb	r3, [r7, #14]
 800c6e6:	4619      	mov	r1, r3
 800c6e8:	6878      	ldr	r0, [r7, #4]
 800c6ea:	f009 fa53 	bl	8015b94 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800c6ee:	6878      	ldr	r0, [r7, #4]
 800c6f0:	f000 fcc4 	bl	800d07c <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c6fa:	689b      	ldr	r3, [r3, #8]
 800c6fc:	6839      	ldr	r1, [r7, #0]
 800c6fe:	6878      	ldr	r0, [r7, #4]
 800c700:	4798      	blx	r3
        }
        break;
 800c702:	e004      	b.n	800c70e <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 800c704:	6839      	ldr	r1, [r7, #0]
 800c706:	6878      	ldr	r0, [r7, #4]
 800c708:	f000 fc0a 	bl	800cf20 <USBD_CtlError>
        break;
 800c70c:	e000      	b.n	800c710 <USBD_StdEPReq+0x13c>
        break;
 800c70e:	bf00      	nop
      }
      break;
 800c710:	e0aa      	b.n	800c868 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c718:	2b02      	cmp	r3, #2
 800c71a:	d002      	beq.n	800c722 <USBD_StdEPReq+0x14e>
 800c71c:	2b03      	cmp	r3, #3
 800c71e:	d032      	beq.n	800c786 <USBD_StdEPReq+0x1b2>
 800c720:	e097      	b.n	800c852 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c722:	7bbb      	ldrb	r3, [r7, #14]
 800c724:	2b00      	cmp	r3, #0
 800c726:	d007      	beq.n	800c738 <USBD_StdEPReq+0x164>
 800c728:	7bbb      	ldrb	r3, [r7, #14]
 800c72a:	2b80      	cmp	r3, #128	; 0x80
 800c72c:	d004      	beq.n	800c738 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800c72e:	6839      	ldr	r1, [r7, #0]
 800c730:	6878      	ldr	r0, [r7, #4]
 800c732:	f000 fbf5 	bl	800cf20 <USBD_CtlError>
          break;
 800c736:	e091      	b.n	800c85c <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c738:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	da0b      	bge.n	800c758 <USBD_StdEPReq+0x184>
 800c740:	7bbb      	ldrb	r3, [r7, #14]
 800c742:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c746:	4613      	mov	r3, r2
 800c748:	009b      	lsls	r3, r3, #2
 800c74a:	4413      	add	r3, r2
 800c74c:	009b      	lsls	r3, r3, #2
 800c74e:	3310      	adds	r3, #16
 800c750:	687a      	ldr	r2, [r7, #4]
 800c752:	4413      	add	r3, r2
 800c754:	3304      	adds	r3, #4
 800c756:	e00b      	b.n	800c770 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800c758:	7bbb      	ldrb	r3, [r7, #14]
 800c75a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c75e:	4613      	mov	r3, r2
 800c760:	009b      	lsls	r3, r3, #2
 800c762:	4413      	add	r3, r2
 800c764:	009b      	lsls	r3, r3, #2
 800c766:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c76a:	687a      	ldr	r2, [r7, #4]
 800c76c:	4413      	add	r3, r2
 800c76e:	3304      	adds	r3, #4
 800c770:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800c772:	68bb      	ldr	r3, [r7, #8]
 800c774:	2200      	movs	r2, #0
 800c776:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c778:	68bb      	ldr	r3, [r7, #8]
 800c77a:	2202      	movs	r2, #2
 800c77c:	4619      	mov	r1, r3
 800c77e:	6878      	ldr	r0, [r7, #4]
 800c780:	f000 fc3f 	bl	800d002 <USBD_CtlSendData>
        break;
 800c784:	e06a      	b.n	800c85c <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800c786:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	da11      	bge.n	800c7b2 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c78e:	7bbb      	ldrb	r3, [r7, #14]
 800c790:	f003 020f 	and.w	r2, r3, #15
 800c794:	6879      	ldr	r1, [r7, #4]
 800c796:	4613      	mov	r3, r2
 800c798:	009b      	lsls	r3, r3, #2
 800c79a:	4413      	add	r3, r2
 800c79c:	009b      	lsls	r3, r3, #2
 800c79e:	440b      	add	r3, r1
 800c7a0:	3324      	adds	r3, #36	; 0x24
 800c7a2:	881b      	ldrh	r3, [r3, #0]
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d117      	bne.n	800c7d8 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800c7a8:	6839      	ldr	r1, [r7, #0]
 800c7aa:	6878      	ldr	r0, [r7, #4]
 800c7ac:	f000 fbb8 	bl	800cf20 <USBD_CtlError>
            break;
 800c7b0:	e054      	b.n	800c85c <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c7b2:	7bbb      	ldrb	r3, [r7, #14]
 800c7b4:	f003 020f 	and.w	r2, r3, #15
 800c7b8:	6879      	ldr	r1, [r7, #4]
 800c7ba:	4613      	mov	r3, r2
 800c7bc:	009b      	lsls	r3, r3, #2
 800c7be:	4413      	add	r3, r2
 800c7c0:	009b      	lsls	r3, r3, #2
 800c7c2:	440b      	add	r3, r1
 800c7c4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c7c8:	881b      	ldrh	r3, [r3, #0]
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d104      	bne.n	800c7d8 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800c7ce:	6839      	ldr	r1, [r7, #0]
 800c7d0:	6878      	ldr	r0, [r7, #4]
 800c7d2:	f000 fba5 	bl	800cf20 <USBD_CtlError>
            break;
 800c7d6:	e041      	b.n	800c85c <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c7d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	da0b      	bge.n	800c7f8 <USBD_StdEPReq+0x224>
 800c7e0:	7bbb      	ldrb	r3, [r7, #14]
 800c7e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c7e6:	4613      	mov	r3, r2
 800c7e8:	009b      	lsls	r3, r3, #2
 800c7ea:	4413      	add	r3, r2
 800c7ec:	009b      	lsls	r3, r3, #2
 800c7ee:	3310      	adds	r3, #16
 800c7f0:	687a      	ldr	r2, [r7, #4]
 800c7f2:	4413      	add	r3, r2
 800c7f4:	3304      	adds	r3, #4
 800c7f6:	e00b      	b.n	800c810 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800c7f8:	7bbb      	ldrb	r3, [r7, #14]
 800c7fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c7fe:	4613      	mov	r3, r2
 800c800:	009b      	lsls	r3, r3, #2
 800c802:	4413      	add	r3, r2
 800c804:	009b      	lsls	r3, r3, #2
 800c806:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c80a:	687a      	ldr	r2, [r7, #4]
 800c80c:	4413      	add	r3, r2
 800c80e:	3304      	adds	r3, #4
 800c810:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c812:	7bbb      	ldrb	r3, [r7, #14]
 800c814:	2b00      	cmp	r3, #0
 800c816:	d002      	beq.n	800c81e <USBD_StdEPReq+0x24a>
 800c818:	7bbb      	ldrb	r3, [r7, #14]
 800c81a:	2b80      	cmp	r3, #128	; 0x80
 800c81c:	d103      	bne.n	800c826 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800c81e:	68bb      	ldr	r3, [r7, #8]
 800c820:	2200      	movs	r2, #0
 800c822:	601a      	str	r2, [r3, #0]
 800c824:	e00e      	b.n	800c844 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c826:	7bbb      	ldrb	r3, [r7, #14]
 800c828:	4619      	mov	r1, r3
 800c82a:	6878      	ldr	r0, [r7, #4]
 800c82c:	f009 f9d1 	bl	8015bd2 <USBD_LL_IsStallEP>
 800c830:	4603      	mov	r3, r0
 800c832:	2b00      	cmp	r3, #0
 800c834:	d003      	beq.n	800c83e <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 800c836:	68bb      	ldr	r3, [r7, #8]
 800c838:	2201      	movs	r2, #1
 800c83a:	601a      	str	r2, [r3, #0]
 800c83c:	e002      	b.n	800c844 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800c83e:	68bb      	ldr	r3, [r7, #8]
 800c840:	2200      	movs	r2, #0
 800c842:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c844:	68bb      	ldr	r3, [r7, #8]
 800c846:	2202      	movs	r2, #2
 800c848:	4619      	mov	r1, r3
 800c84a:	6878      	ldr	r0, [r7, #4]
 800c84c:	f000 fbd9 	bl	800d002 <USBD_CtlSendData>
          break;
 800c850:	e004      	b.n	800c85c <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 800c852:	6839      	ldr	r1, [r7, #0]
 800c854:	6878      	ldr	r0, [r7, #4]
 800c856:	f000 fb63 	bl	800cf20 <USBD_CtlError>
        break;
 800c85a:	bf00      	nop
      }
      break;
 800c85c:	e004      	b.n	800c868 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800c85e:	6839      	ldr	r1, [r7, #0]
 800c860:	6878      	ldr	r0, [r7, #4]
 800c862:	f000 fb5d 	bl	800cf20 <USBD_CtlError>
      break;
 800c866:	bf00      	nop
    }
    break;
 800c868:	e004      	b.n	800c874 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800c86a:	6839      	ldr	r1, [r7, #0]
 800c86c:	6878      	ldr	r0, [r7, #4]
 800c86e:	f000 fb57 	bl	800cf20 <USBD_CtlError>
    break;
 800c872:	bf00      	nop
  }

  return ret;
 800c874:	7bfb      	ldrb	r3, [r7, #15]
}
 800c876:	4618      	mov	r0, r3
 800c878:	3710      	adds	r7, #16
 800c87a:	46bd      	mov	sp, r7
 800c87c:	bd80      	pop	{r7, pc}
	...

0800c880 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c880:	b580      	push	{r7, lr}
 800c882:	b084      	sub	sp, #16
 800c884:	af00      	add	r7, sp, #0
 800c886:	6078      	str	r0, [r7, #4]
 800c888:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c88a:	2300      	movs	r3, #0
 800c88c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c88e:	2300      	movs	r3, #0
 800c890:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c892:	2300      	movs	r3, #0
 800c894:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c896:	683b      	ldr	r3, [r7, #0]
 800c898:	885b      	ldrh	r3, [r3, #2]
 800c89a:	0a1b      	lsrs	r3, r3, #8
 800c89c:	b29b      	uxth	r3, r3
 800c89e:	3b01      	subs	r3, #1
 800c8a0:	2b0e      	cmp	r3, #14
 800c8a2:	f200 8152 	bhi.w	800cb4a <USBD_GetDescriptor+0x2ca>
 800c8a6:	a201      	add	r2, pc, #4	; (adr r2, 800c8ac <USBD_GetDescriptor+0x2c>)
 800c8a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8ac:	0800c91d 	.word	0x0800c91d
 800c8b0:	0800c935 	.word	0x0800c935
 800c8b4:	0800c975 	.word	0x0800c975
 800c8b8:	0800cb4b 	.word	0x0800cb4b
 800c8bc:	0800cb4b 	.word	0x0800cb4b
 800c8c0:	0800caeb 	.word	0x0800caeb
 800c8c4:	0800cb17 	.word	0x0800cb17
 800c8c8:	0800cb4b 	.word	0x0800cb4b
 800c8cc:	0800cb4b 	.word	0x0800cb4b
 800c8d0:	0800cb4b 	.word	0x0800cb4b
 800c8d4:	0800cb4b 	.word	0x0800cb4b
 800c8d8:	0800cb4b 	.word	0x0800cb4b
 800c8dc:	0800cb4b 	.word	0x0800cb4b
 800c8e0:	0800cb4b 	.word	0x0800cb4b
 800c8e4:	0800c8e9 	.word	0x0800c8e9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c8ee:	69db      	ldr	r3, [r3, #28]
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d00b      	beq.n	800c90c <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c8fa:	69db      	ldr	r3, [r3, #28]
 800c8fc:	687a      	ldr	r2, [r7, #4]
 800c8fe:	7c12      	ldrb	r2, [r2, #16]
 800c900:	f107 0108 	add.w	r1, r7, #8
 800c904:	4610      	mov	r0, r2
 800c906:	4798      	blx	r3
 800c908:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800c90a:	e126      	b.n	800cb5a <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800c90c:	6839      	ldr	r1, [r7, #0]
 800c90e:	6878      	ldr	r0, [r7, #4]
 800c910:	f000 fb06 	bl	800cf20 <USBD_CtlError>
      err++;
 800c914:	7afb      	ldrb	r3, [r7, #11]
 800c916:	3301      	adds	r3, #1
 800c918:	72fb      	strb	r3, [r7, #11]
    break;
 800c91a:	e11e      	b.n	800cb5a <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	687a      	ldr	r2, [r7, #4]
 800c926:	7c12      	ldrb	r2, [r2, #16]
 800c928:	f107 0108 	add.w	r1, r7, #8
 800c92c:	4610      	mov	r0, r2
 800c92e:	4798      	blx	r3
 800c930:	60f8      	str	r0, [r7, #12]
    break;
 800c932:	e112      	b.n	800cb5a <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	7c1b      	ldrb	r3, [r3, #16]
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d10d      	bne.n	800c958 <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c944:	f107 0208 	add.w	r2, r7, #8
 800c948:	4610      	mov	r0, r2
 800c94a:	4798      	blx	r3
 800c94c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	3301      	adds	r3, #1
 800c952:	2202      	movs	r2, #2
 800c954:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800c956:	e100      	b.n	800cb5a <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c95e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c960:	f107 0208 	add.w	r2, r7, #8
 800c964:	4610      	mov	r0, r2
 800c966:	4798      	blx	r3
 800c968:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	3301      	adds	r3, #1
 800c96e:	2202      	movs	r2, #2
 800c970:	701a      	strb	r2, [r3, #0]
    break;
 800c972:	e0f2      	b.n	800cb5a <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800c974:	683b      	ldr	r3, [r7, #0]
 800c976:	885b      	ldrh	r3, [r3, #2]
 800c978:	b2db      	uxtb	r3, r3
 800c97a:	2b05      	cmp	r3, #5
 800c97c:	f200 80ac 	bhi.w	800cad8 <USBD_GetDescriptor+0x258>
 800c980:	a201      	add	r2, pc, #4	; (adr r2, 800c988 <USBD_GetDescriptor+0x108>)
 800c982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c986:	bf00      	nop
 800c988:	0800c9a1 	.word	0x0800c9a1
 800c98c:	0800c9d5 	.word	0x0800c9d5
 800c990:	0800ca09 	.word	0x0800ca09
 800c994:	0800ca3d 	.word	0x0800ca3d
 800c998:	0800ca71 	.word	0x0800ca71
 800c99c:	0800caa5 	.word	0x0800caa5
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c9a6:	685b      	ldr	r3, [r3, #4]
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d00b      	beq.n	800c9c4 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c9b2:	685b      	ldr	r3, [r3, #4]
 800c9b4:	687a      	ldr	r2, [r7, #4]
 800c9b6:	7c12      	ldrb	r2, [r2, #16]
 800c9b8:	f107 0108 	add.w	r1, r7, #8
 800c9bc:	4610      	mov	r0, r2
 800c9be:	4798      	blx	r3
 800c9c0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c9c2:	e091      	b.n	800cae8 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800c9c4:	6839      	ldr	r1, [r7, #0]
 800c9c6:	6878      	ldr	r0, [r7, #4]
 800c9c8:	f000 faaa 	bl	800cf20 <USBD_CtlError>
        err++;
 800c9cc:	7afb      	ldrb	r3, [r7, #11]
 800c9ce:	3301      	adds	r3, #1
 800c9d0:	72fb      	strb	r3, [r7, #11]
      break;
 800c9d2:	e089      	b.n	800cae8 <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c9da:	689b      	ldr	r3, [r3, #8]
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d00b      	beq.n	800c9f8 <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c9e6:	689b      	ldr	r3, [r3, #8]
 800c9e8:	687a      	ldr	r2, [r7, #4]
 800c9ea:	7c12      	ldrb	r2, [r2, #16]
 800c9ec:	f107 0108 	add.w	r1, r7, #8
 800c9f0:	4610      	mov	r0, r2
 800c9f2:	4798      	blx	r3
 800c9f4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c9f6:	e077      	b.n	800cae8 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800c9f8:	6839      	ldr	r1, [r7, #0]
 800c9fa:	6878      	ldr	r0, [r7, #4]
 800c9fc:	f000 fa90 	bl	800cf20 <USBD_CtlError>
        err++;
 800ca00:	7afb      	ldrb	r3, [r7, #11]
 800ca02:	3301      	adds	r3, #1
 800ca04:	72fb      	strb	r3, [r7, #11]
      break;
 800ca06:	e06f      	b.n	800cae8 <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ca0e:	68db      	ldr	r3, [r3, #12]
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d00b      	beq.n	800ca2c <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ca1a:	68db      	ldr	r3, [r3, #12]
 800ca1c:	687a      	ldr	r2, [r7, #4]
 800ca1e:	7c12      	ldrb	r2, [r2, #16]
 800ca20:	f107 0108 	add.w	r1, r7, #8
 800ca24:	4610      	mov	r0, r2
 800ca26:	4798      	blx	r3
 800ca28:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ca2a:	e05d      	b.n	800cae8 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800ca2c:	6839      	ldr	r1, [r7, #0]
 800ca2e:	6878      	ldr	r0, [r7, #4]
 800ca30:	f000 fa76 	bl	800cf20 <USBD_CtlError>
        err++;
 800ca34:	7afb      	ldrb	r3, [r7, #11]
 800ca36:	3301      	adds	r3, #1
 800ca38:	72fb      	strb	r3, [r7, #11]
      break;
 800ca3a:	e055      	b.n	800cae8 <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ca42:	691b      	ldr	r3, [r3, #16]
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d00b      	beq.n	800ca60 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ca4e:	691b      	ldr	r3, [r3, #16]
 800ca50:	687a      	ldr	r2, [r7, #4]
 800ca52:	7c12      	ldrb	r2, [r2, #16]
 800ca54:	f107 0108 	add.w	r1, r7, #8
 800ca58:	4610      	mov	r0, r2
 800ca5a:	4798      	blx	r3
 800ca5c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ca5e:	e043      	b.n	800cae8 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800ca60:	6839      	ldr	r1, [r7, #0]
 800ca62:	6878      	ldr	r0, [r7, #4]
 800ca64:	f000 fa5c 	bl	800cf20 <USBD_CtlError>
        err++;
 800ca68:	7afb      	ldrb	r3, [r7, #11]
 800ca6a:	3301      	adds	r3, #1
 800ca6c:	72fb      	strb	r3, [r7, #11]
      break;
 800ca6e:	e03b      	b.n	800cae8 <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ca76:	695b      	ldr	r3, [r3, #20]
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d00b      	beq.n	800ca94 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ca82:	695b      	ldr	r3, [r3, #20]
 800ca84:	687a      	ldr	r2, [r7, #4]
 800ca86:	7c12      	ldrb	r2, [r2, #16]
 800ca88:	f107 0108 	add.w	r1, r7, #8
 800ca8c:	4610      	mov	r0, r2
 800ca8e:	4798      	blx	r3
 800ca90:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ca92:	e029      	b.n	800cae8 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800ca94:	6839      	ldr	r1, [r7, #0]
 800ca96:	6878      	ldr	r0, [r7, #4]
 800ca98:	f000 fa42 	bl	800cf20 <USBD_CtlError>
        err++;
 800ca9c:	7afb      	ldrb	r3, [r7, #11]
 800ca9e:	3301      	adds	r3, #1
 800caa0:	72fb      	strb	r3, [r7, #11]
      break;
 800caa2:	e021      	b.n	800cae8 <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800caaa:	699b      	ldr	r3, [r3, #24]
 800caac:	2b00      	cmp	r3, #0
 800caae:	d00b      	beq.n	800cac8 <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cab6:	699b      	ldr	r3, [r3, #24]
 800cab8:	687a      	ldr	r2, [r7, #4]
 800caba:	7c12      	ldrb	r2, [r2, #16]
 800cabc:	f107 0108 	add.w	r1, r7, #8
 800cac0:	4610      	mov	r0, r2
 800cac2:	4798      	blx	r3
 800cac4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cac6:	e00f      	b.n	800cae8 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800cac8:	6839      	ldr	r1, [r7, #0]
 800caca:	6878      	ldr	r0, [r7, #4]
 800cacc:	f000 fa28 	bl	800cf20 <USBD_CtlError>
        err++;
 800cad0:	7afb      	ldrb	r3, [r7, #11]
 800cad2:	3301      	adds	r3, #1
 800cad4:	72fb      	strb	r3, [r7, #11]
      break;
 800cad6:	e007      	b.n	800cae8 <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800cad8:	6839      	ldr	r1, [r7, #0]
 800cada:	6878      	ldr	r0, [r7, #4]
 800cadc:	f000 fa20 	bl	800cf20 <USBD_CtlError>
      err++;
 800cae0:	7afb      	ldrb	r3, [r7, #11]
 800cae2:	3301      	adds	r3, #1
 800cae4:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800cae6:	bf00      	nop
    }
    break;
 800cae8:	e037      	b.n	800cb5a <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	7c1b      	ldrb	r3, [r3, #16]
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d109      	bne.n	800cb06 <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800caf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cafa:	f107 0208 	add.w	r2, r7, #8
 800cafe:	4610      	mov	r0, r2
 800cb00:	4798      	blx	r3
 800cb02:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800cb04:	e029      	b.n	800cb5a <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800cb06:	6839      	ldr	r1, [r7, #0]
 800cb08:	6878      	ldr	r0, [r7, #4]
 800cb0a:	f000 fa09 	bl	800cf20 <USBD_CtlError>
      err++;
 800cb0e:	7afb      	ldrb	r3, [r7, #11]
 800cb10:	3301      	adds	r3, #1
 800cb12:	72fb      	strb	r3, [r7, #11]
    break;
 800cb14:	e021      	b.n	800cb5a <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	7c1b      	ldrb	r3, [r3, #16]
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d10d      	bne.n	800cb3a <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cb24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb26:	f107 0208 	add.w	r2, r7, #8
 800cb2a:	4610      	mov	r0, r2
 800cb2c:	4798      	blx	r3
 800cb2e:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	3301      	adds	r3, #1
 800cb34:	2207      	movs	r2, #7
 800cb36:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800cb38:	e00f      	b.n	800cb5a <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800cb3a:	6839      	ldr	r1, [r7, #0]
 800cb3c:	6878      	ldr	r0, [r7, #4]
 800cb3e:	f000 f9ef 	bl	800cf20 <USBD_CtlError>
      err++;
 800cb42:	7afb      	ldrb	r3, [r7, #11]
 800cb44:	3301      	adds	r3, #1
 800cb46:	72fb      	strb	r3, [r7, #11]
    break;
 800cb48:	e007      	b.n	800cb5a <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 800cb4a:	6839      	ldr	r1, [r7, #0]
 800cb4c:	6878      	ldr	r0, [r7, #4]
 800cb4e:	f000 f9e7 	bl	800cf20 <USBD_CtlError>
    err++;
 800cb52:	7afb      	ldrb	r3, [r7, #11]
 800cb54:	3301      	adds	r3, #1
 800cb56:	72fb      	strb	r3, [r7, #11]
    break;
 800cb58:	bf00      	nop
  }

  if (err != 0U)
 800cb5a:	7afb      	ldrb	r3, [r7, #11]
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d11e      	bne.n	800cb9e <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800cb60:	683b      	ldr	r3, [r7, #0]
 800cb62:	88db      	ldrh	r3, [r3, #6]
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d016      	beq.n	800cb96 <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 800cb68:	893b      	ldrh	r3, [r7, #8]
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d00e      	beq.n	800cb8c <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 800cb6e:	683b      	ldr	r3, [r7, #0]
 800cb70:	88da      	ldrh	r2, [r3, #6]
 800cb72:	893b      	ldrh	r3, [r7, #8]
 800cb74:	4293      	cmp	r3, r2
 800cb76:	bf28      	it	cs
 800cb78:	4613      	movcs	r3, r2
 800cb7a:	b29b      	uxth	r3, r3
 800cb7c:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800cb7e:	893b      	ldrh	r3, [r7, #8]
 800cb80:	461a      	mov	r2, r3
 800cb82:	68f9      	ldr	r1, [r7, #12]
 800cb84:	6878      	ldr	r0, [r7, #4]
 800cb86:	f000 fa3c 	bl	800d002 <USBD_CtlSendData>
 800cb8a:	e009      	b.n	800cba0 <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800cb8c:	6839      	ldr	r1, [r7, #0]
 800cb8e:	6878      	ldr	r0, [r7, #4]
 800cb90:	f000 f9c6 	bl	800cf20 <USBD_CtlError>
 800cb94:	e004      	b.n	800cba0 <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800cb96:	6878      	ldr	r0, [r7, #4]
 800cb98:	f000 fa70 	bl	800d07c <USBD_CtlSendStatus>
 800cb9c:	e000      	b.n	800cba0 <USBD_GetDescriptor+0x320>
    return;
 800cb9e:	bf00      	nop
    }
  }
}
 800cba0:	3710      	adds	r7, #16
 800cba2:	46bd      	mov	sp, r7
 800cba4:	bd80      	pop	{r7, pc}
 800cba6:	bf00      	nop

0800cba8 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cba8:	b580      	push	{r7, lr}
 800cbaa:	b084      	sub	sp, #16
 800cbac:	af00      	add	r7, sp, #0
 800cbae:	6078      	str	r0, [r7, #4]
 800cbb0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800cbb2:	683b      	ldr	r3, [r7, #0]
 800cbb4:	889b      	ldrh	r3, [r3, #4]
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d130      	bne.n	800cc1c <USBD_SetAddress+0x74>
 800cbba:	683b      	ldr	r3, [r7, #0]
 800cbbc:	88db      	ldrh	r3, [r3, #6]
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d12c      	bne.n	800cc1c <USBD_SetAddress+0x74>
 800cbc2:	683b      	ldr	r3, [r7, #0]
 800cbc4:	885b      	ldrh	r3, [r3, #2]
 800cbc6:	2b7f      	cmp	r3, #127	; 0x7f
 800cbc8:	d828      	bhi.n	800cc1c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800cbca:	683b      	ldr	r3, [r7, #0]
 800cbcc:	885b      	ldrh	r3, [r3, #2]
 800cbce:	b2db      	uxtb	r3, r3
 800cbd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cbd4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cbdc:	2b03      	cmp	r3, #3
 800cbde:	d104      	bne.n	800cbea <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800cbe0:	6839      	ldr	r1, [r7, #0]
 800cbe2:	6878      	ldr	r0, [r7, #4]
 800cbe4:	f000 f99c 	bl	800cf20 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cbe8:	e01c      	b.n	800cc24 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	7bfa      	ldrb	r2, [r7, #15]
 800cbee:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800cbf2:	7bfb      	ldrb	r3, [r7, #15]
 800cbf4:	4619      	mov	r1, r3
 800cbf6:	6878      	ldr	r0, [r7, #4]
 800cbf8:	f009 f817 	bl	8015c2a <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800cbfc:	6878      	ldr	r0, [r7, #4]
 800cbfe:	f000 fa3d 	bl	800d07c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800cc02:	7bfb      	ldrb	r3, [r7, #15]
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d004      	beq.n	800cc12 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	2202      	movs	r2, #2
 800cc0c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cc10:	e008      	b.n	800cc24 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	2201      	movs	r2, #1
 800cc16:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cc1a:	e003      	b.n	800cc24 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800cc1c:	6839      	ldr	r1, [r7, #0]
 800cc1e:	6878      	ldr	r0, [r7, #4]
 800cc20:	f000 f97e 	bl	800cf20 <USBD_CtlError>
  }
}
 800cc24:	bf00      	nop
 800cc26:	3710      	adds	r7, #16
 800cc28:	46bd      	mov	sp, r7
 800cc2a:	bd80      	pop	{r7, pc}

0800cc2c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cc2c:	b580      	push	{r7, lr}
 800cc2e:	b084      	sub	sp, #16
 800cc30:	af00      	add	r7, sp, #0
 800cc32:	6078      	str	r0, [r7, #4]
 800cc34:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cc36:	2300      	movs	r3, #0
 800cc38:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800cc3a:	683b      	ldr	r3, [r7, #0]
 800cc3c:	885b      	ldrh	r3, [r3, #2]
 800cc3e:	b2da      	uxtb	r2, r3
 800cc40:	4b4b      	ldr	r3, [pc, #300]	; (800cd70 <USBD_SetConfig+0x144>)
 800cc42:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800cc44:	4b4a      	ldr	r3, [pc, #296]	; (800cd70 <USBD_SetConfig+0x144>)
 800cc46:	781b      	ldrb	r3, [r3, #0]
 800cc48:	2b01      	cmp	r3, #1
 800cc4a:	d905      	bls.n	800cc58 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800cc4c:	6839      	ldr	r1, [r7, #0]
 800cc4e:	6878      	ldr	r0, [r7, #4]
 800cc50:	f000 f966 	bl	800cf20 <USBD_CtlError>
    return USBD_FAIL;
 800cc54:	2303      	movs	r3, #3
 800cc56:	e087      	b.n	800cd68 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cc5e:	2b02      	cmp	r3, #2
 800cc60:	d002      	beq.n	800cc68 <USBD_SetConfig+0x3c>
 800cc62:	2b03      	cmp	r3, #3
 800cc64:	d025      	beq.n	800ccb2 <USBD_SetConfig+0x86>
 800cc66:	e071      	b.n	800cd4c <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800cc68:	4b41      	ldr	r3, [pc, #260]	; (800cd70 <USBD_SetConfig+0x144>)
 800cc6a:	781b      	ldrb	r3, [r3, #0]
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d01c      	beq.n	800ccaa <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800cc70:	4b3f      	ldr	r3, [pc, #252]	; (800cd70 <USBD_SetConfig+0x144>)
 800cc72:	781b      	ldrb	r3, [r3, #0]
 800cc74:	461a      	mov	r2, r3
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800cc7a:	4b3d      	ldr	r3, [pc, #244]	; (800cd70 <USBD_SetConfig+0x144>)
 800cc7c:	781b      	ldrb	r3, [r3, #0]
 800cc7e:	4619      	mov	r1, r3
 800cc80:	6878      	ldr	r0, [r7, #4]
 800cc82:	f7ff f97e 	bl	800bf82 <USBD_SetClassConfig>
 800cc86:	4603      	mov	r3, r0
 800cc88:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800cc8a:	7bfb      	ldrb	r3, [r7, #15]
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d004      	beq.n	800cc9a <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800cc90:	6839      	ldr	r1, [r7, #0]
 800cc92:	6878      	ldr	r0, [r7, #4]
 800cc94:	f000 f944 	bl	800cf20 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800cc98:	e065      	b.n	800cd66 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800cc9a:	6878      	ldr	r0, [r7, #4]
 800cc9c:	f000 f9ee 	bl	800d07c <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	2203      	movs	r2, #3
 800cca4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800cca8:	e05d      	b.n	800cd66 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800ccaa:	6878      	ldr	r0, [r7, #4]
 800ccac:	f000 f9e6 	bl	800d07c <USBD_CtlSendStatus>
    break;
 800ccb0:	e059      	b.n	800cd66 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800ccb2:	4b2f      	ldr	r3, [pc, #188]	; (800cd70 <USBD_SetConfig+0x144>)
 800ccb4:	781b      	ldrb	r3, [r3, #0]
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d112      	bne.n	800cce0 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	2202      	movs	r2, #2
 800ccbe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800ccc2:	4b2b      	ldr	r3, [pc, #172]	; (800cd70 <USBD_SetConfig+0x144>)
 800ccc4:	781b      	ldrb	r3, [r3, #0]
 800ccc6:	461a      	mov	r2, r3
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cccc:	4b28      	ldr	r3, [pc, #160]	; (800cd70 <USBD_SetConfig+0x144>)
 800ccce:	781b      	ldrb	r3, [r3, #0]
 800ccd0:	4619      	mov	r1, r3
 800ccd2:	6878      	ldr	r0, [r7, #4]
 800ccd4:	f7ff f971 	bl	800bfba <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800ccd8:	6878      	ldr	r0, [r7, #4]
 800ccda:	f000 f9cf 	bl	800d07c <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800ccde:	e042      	b.n	800cd66 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800cce0:	4b23      	ldr	r3, [pc, #140]	; (800cd70 <USBD_SetConfig+0x144>)
 800cce2:	781b      	ldrb	r3, [r3, #0]
 800cce4:	461a      	mov	r2, r3
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	685b      	ldr	r3, [r3, #4]
 800ccea:	429a      	cmp	r2, r3
 800ccec:	d02a      	beq.n	800cd44 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	685b      	ldr	r3, [r3, #4]
 800ccf2:	b2db      	uxtb	r3, r3
 800ccf4:	4619      	mov	r1, r3
 800ccf6:	6878      	ldr	r0, [r7, #4]
 800ccf8:	f7ff f95f 	bl	800bfba <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800ccfc:	4b1c      	ldr	r3, [pc, #112]	; (800cd70 <USBD_SetConfig+0x144>)
 800ccfe:	781b      	ldrb	r3, [r3, #0]
 800cd00:	461a      	mov	r2, r3
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800cd06:	4b1a      	ldr	r3, [pc, #104]	; (800cd70 <USBD_SetConfig+0x144>)
 800cd08:	781b      	ldrb	r3, [r3, #0]
 800cd0a:	4619      	mov	r1, r3
 800cd0c:	6878      	ldr	r0, [r7, #4]
 800cd0e:	f7ff f938 	bl	800bf82 <USBD_SetClassConfig>
 800cd12:	4603      	mov	r3, r0
 800cd14:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800cd16:	7bfb      	ldrb	r3, [r7, #15]
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d00f      	beq.n	800cd3c <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800cd1c:	6839      	ldr	r1, [r7, #0]
 800cd1e:	6878      	ldr	r0, [r7, #4]
 800cd20:	f000 f8fe 	bl	800cf20 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	685b      	ldr	r3, [r3, #4]
 800cd28:	b2db      	uxtb	r3, r3
 800cd2a:	4619      	mov	r1, r3
 800cd2c:	6878      	ldr	r0, [r7, #4]
 800cd2e:	f7ff f944 	bl	800bfba <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	2202      	movs	r2, #2
 800cd36:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800cd3a:	e014      	b.n	800cd66 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800cd3c:	6878      	ldr	r0, [r7, #4]
 800cd3e:	f000 f99d 	bl	800d07c <USBD_CtlSendStatus>
    break;
 800cd42:	e010      	b.n	800cd66 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800cd44:	6878      	ldr	r0, [r7, #4]
 800cd46:	f000 f999 	bl	800d07c <USBD_CtlSendStatus>
    break;
 800cd4a:	e00c      	b.n	800cd66 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800cd4c:	6839      	ldr	r1, [r7, #0]
 800cd4e:	6878      	ldr	r0, [r7, #4]
 800cd50:	f000 f8e6 	bl	800cf20 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cd54:	4b06      	ldr	r3, [pc, #24]	; (800cd70 <USBD_SetConfig+0x144>)
 800cd56:	781b      	ldrb	r3, [r3, #0]
 800cd58:	4619      	mov	r1, r3
 800cd5a:	6878      	ldr	r0, [r7, #4]
 800cd5c:	f7ff f92d 	bl	800bfba <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800cd60:	2303      	movs	r3, #3
 800cd62:	73fb      	strb	r3, [r7, #15]
    break;
 800cd64:	bf00      	nop
  }

  return ret;
 800cd66:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd68:	4618      	mov	r0, r3
 800cd6a:	3710      	adds	r7, #16
 800cd6c:	46bd      	mov	sp, r7
 800cd6e:	bd80      	pop	{r7, pc}
 800cd70:	20000218 	.word	0x20000218

0800cd74 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cd74:	b580      	push	{r7, lr}
 800cd76:	b082      	sub	sp, #8
 800cd78:	af00      	add	r7, sp, #0
 800cd7a:	6078      	str	r0, [r7, #4]
 800cd7c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800cd7e:	683b      	ldr	r3, [r7, #0]
 800cd80:	88db      	ldrh	r3, [r3, #6]
 800cd82:	2b01      	cmp	r3, #1
 800cd84:	d004      	beq.n	800cd90 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800cd86:	6839      	ldr	r1, [r7, #0]
 800cd88:	6878      	ldr	r0, [r7, #4]
 800cd8a:	f000 f8c9 	bl	800cf20 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800cd8e:	e021      	b.n	800cdd4 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cd96:	2b01      	cmp	r3, #1
 800cd98:	db17      	blt.n	800cdca <USBD_GetConfig+0x56>
 800cd9a:	2b02      	cmp	r3, #2
 800cd9c:	dd02      	ble.n	800cda4 <USBD_GetConfig+0x30>
 800cd9e:	2b03      	cmp	r3, #3
 800cda0:	d00b      	beq.n	800cdba <USBD_GetConfig+0x46>
 800cda2:	e012      	b.n	800cdca <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	2200      	movs	r2, #0
 800cda8:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	3308      	adds	r3, #8
 800cdae:	2201      	movs	r2, #1
 800cdb0:	4619      	mov	r1, r3
 800cdb2:	6878      	ldr	r0, [r7, #4]
 800cdb4:	f000 f925 	bl	800d002 <USBD_CtlSendData>
      break;
 800cdb8:	e00c      	b.n	800cdd4 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	3304      	adds	r3, #4
 800cdbe:	2201      	movs	r2, #1
 800cdc0:	4619      	mov	r1, r3
 800cdc2:	6878      	ldr	r0, [r7, #4]
 800cdc4:	f000 f91d 	bl	800d002 <USBD_CtlSendData>
      break;
 800cdc8:	e004      	b.n	800cdd4 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800cdca:	6839      	ldr	r1, [r7, #0]
 800cdcc:	6878      	ldr	r0, [r7, #4]
 800cdce:	f000 f8a7 	bl	800cf20 <USBD_CtlError>
      break;
 800cdd2:	bf00      	nop
}
 800cdd4:	bf00      	nop
 800cdd6:	3708      	adds	r7, #8
 800cdd8:	46bd      	mov	sp, r7
 800cdda:	bd80      	pop	{r7, pc}

0800cddc <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cddc:	b580      	push	{r7, lr}
 800cdde:	b082      	sub	sp, #8
 800cde0:	af00      	add	r7, sp, #0
 800cde2:	6078      	str	r0, [r7, #4]
 800cde4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cdec:	3b01      	subs	r3, #1
 800cdee:	2b02      	cmp	r3, #2
 800cdf0:	d81e      	bhi.n	800ce30 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800cdf2:	683b      	ldr	r3, [r7, #0]
 800cdf4:	88db      	ldrh	r3, [r3, #6]
 800cdf6:	2b02      	cmp	r3, #2
 800cdf8:	d004      	beq.n	800ce04 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800cdfa:	6839      	ldr	r1, [r7, #0]
 800cdfc:	6878      	ldr	r0, [r7, #4]
 800cdfe:	f000 f88f 	bl	800cf20 <USBD_CtlError>
      break;
 800ce02:	e01a      	b.n	800ce3a <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	2201      	movs	r2, #1
 800ce08:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d005      	beq.n	800ce20 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	68db      	ldr	r3, [r3, #12]
 800ce18:	f043 0202 	orr.w	r2, r3, #2
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	330c      	adds	r3, #12
 800ce24:	2202      	movs	r2, #2
 800ce26:	4619      	mov	r1, r3
 800ce28:	6878      	ldr	r0, [r7, #4]
 800ce2a:	f000 f8ea 	bl	800d002 <USBD_CtlSendData>
    break;
 800ce2e:	e004      	b.n	800ce3a <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800ce30:	6839      	ldr	r1, [r7, #0]
 800ce32:	6878      	ldr	r0, [r7, #4]
 800ce34:	f000 f874 	bl	800cf20 <USBD_CtlError>
    break;
 800ce38:	bf00      	nop
  }
}
 800ce3a:	bf00      	nop
 800ce3c:	3708      	adds	r7, #8
 800ce3e:	46bd      	mov	sp, r7
 800ce40:	bd80      	pop	{r7, pc}

0800ce42 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ce42:	b580      	push	{r7, lr}
 800ce44:	b082      	sub	sp, #8
 800ce46:	af00      	add	r7, sp, #0
 800ce48:	6078      	str	r0, [r7, #4]
 800ce4a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ce4c:	683b      	ldr	r3, [r7, #0]
 800ce4e:	885b      	ldrh	r3, [r3, #2]
 800ce50:	2b01      	cmp	r3, #1
 800ce52:	d106      	bne.n	800ce62 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	2201      	movs	r2, #1
 800ce58:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ce5c:	6878      	ldr	r0, [r7, #4]
 800ce5e:	f000 f90d 	bl	800d07c <USBD_CtlSendStatus>
  }
}
 800ce62:	bf00      	nop
 800ce64:	3708      	adds	r7, #8
 800ce66:	46bd      	mov	sp, r7
 800ce68:	bd80      	pop	{r7, pc}

0800ce6a <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ce6a:	b580      	push	{r7, lr}
 800ce6c:	b082      	sub	sp, #8
 800ce6e:	af00      	add	r7, sp, #0
 800ce70:	6078      	str	r0, [r7, #4]
 800ce72:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ce7a:	3b01      	subs	r3, #1
 800ce7c:	2b02      	cmp	r3, #2
 800ce7e:	d80b      	bhi.n	800ce98 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ce80:	683b      	ldr	r3, [r7, #0]
 800ce82:	885b      	ldrh	r3, [r3, #2]
 800ce84:	2b01      	cmp	r3, #1
 800ce86:	d10c      	bne.n	800cea2 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	2200      	movs	r2, #0
 800ce8c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ce90:	6878      	ldr	r0, [r7, #4]
 800ce92:	f000 f8f3 	bl	800d07c <USBD_CtlSendStatus>
      }
      break;
 800ce96:	e004      	b.n	800cea2 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800ce98:	6839      	ldr	r1, [r7, #0]
 800ce9a:	6878      	ldr	r0, [r7, #4]
 800ce9c:	f000 f840 	bl	800cf20 <USBD_CtlError>
      break;
 800cea0:	e000      	b.n	800cea4 <USBD_ClrFeature+0x3a>
      break;
 800cea2:	bf00      	nop
  }
}
 800cea4:	bf00      	nop
 800cea6:	3708      	adds	r7, #8
 800cea8:	46bd      	mov	sp, r7
 800ceaa:	bd80      	pop	{r7, pc}

0800ceac <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ceac:	b580      	push	{r7, lr}
 800ceae:	b084      	sub	sp, #16
 800ceb0:	af00      	add	r7, sp, #0
 800ceb2:	6078      	str	r0, [r7, #4]
 800ceb4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ceb6:	683b      	ldr	r3, [r7, #0]
 800ceb8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	781a      	ldrb	r2, [r3, #0]
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	3301      	adds	r3, #1
 800cec6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	781a      	ldrb	r2, [r3, #0]
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	3301      	adds	r3, #1
 800ced4:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ced6:	68f8      	ldr	r0, [r7, #12]
 800ced8:	f7ff faaa 	bl	800c430 <SWAPBYTE>
 800cedc:	4603      	mov	r3, r0
 800cede:	461a      	mov	r2, r3
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	3301      	adds	r3, #1
 800cee8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	3301      	adds	r3, #1
 800ceee:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800cef0:	68f8      	ldr	r0, [r7, #12]
 800cef2:	f7ff fa9d 	bl	800c430 <SWAPBYTE>
 800cef6:	4603      	mov	r3, r0
 800cef8:	461a      	mov	r2, r3
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	3301      	adds	r3, #1
 800cf02:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	3301      	adds	r3, #1
 800cf08:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800cf0a:	68f8      	ldr	r0, [r7, #12]
 800cf0c:	f7ff fa90 	bl	800c430 <SWAPBYTE>
 800cf10:	4603      	mov	r3, r0
 800cf12:	461a      	mov	r2, r3
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	80da      	strh	r2, [r3, #6]
}
 800cf18:	bf00      	nop
 800cf1a:	3710      	adds	r7, #16
 800cf1c:	46bd      	mov	sp, r7
 800cf1e:	bd80      	pop	{r7, pc}

0800cf20 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cf20:	b580      	push	{r7, lr}
 800cf22:	b082      	sub	sp, #8
 800cf24:	af00      	add	r7, sp, #0
 800cf26:	6078      	str	r0, [r7, #4]
 800cf28:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800cf2a:	2180      	movs	r1, #128	; 0x80
 800cf2c:	6878      	ldr	r0, [r7, #4]
 800cf2e:	f008 fe12 	bl	8015b56 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800cf32:	2100      	movs	r1, #0
 800cf34:	6878      	ldr	r0, [r7, #4]
 800cf36:	f008 fe0e 	bl	8015b56 <USBD_LL_StallEP>
}
 800cf3a:	bf00      	nop
 800cf3c:	3708      	adds	r7, #8
 800cf3e:	46bd      	mov	sp, r7
 800cf40:	bd80      	pop	{r7, pc}

0800cf42 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800cf42:	b580      	push	{r7, lr}
 800cf44:	b086      	sub	sp, #24
 800cf46:	af00      	add	r7, sp, #0
 800cf48:	60f8      	str	r0, [r7, #12]
 800cf4a:	60b9      	str	r1, [r7, #8]
 800cf4c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800cf4e:	2300      	movs	r3, #0
 800cf50:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d036      	beq.n	800cfc6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800cf5c:	6938      	ldr	r0, [r7, #16]
 800cf5e:	f000 f836 	bl	800cfce <USBD_GetLen>
 800cf62:	4603      	mov	r3, r0
 800cf64:	3301      	adds	r3, #1
 800cf66:	b29b      	uxth	r3, r3
 800cf68:	005b      	lsls	r3, r3, #1
 800cf6a:	b29a      	uxth	r2, r3
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800cf70:	7dfb      	ldrb	r3, [r7, #23]
 800cf72:	68ba      	ldr	r2, [r7, #8]
 800cf74:	4413      	add	r3, r2
 800cf76:	687a      	ldr	r2, [r7, #4]
 800cf78:	7812      	ldrb	r2, [r2, #0]
 800cf7a:	701a      	strb	r2, [r3, #0]
  idx++;
 800cf7c:	7dfb      	ldrb	r3, [r7, #23]
 800cf7e:	3301      	adds	r3, #1
 800cf80:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800cf82:	7dfb      	ldrb	r3, [r7, #23]
 800cf84:	68ba      	ldr	r2, [r7, #8]
 800cf86:	4413      	add	r3, r2
 800cf88:	2203      	movs	r2, #3
 800cf8a:	701a      	strb	r2, [r3, #0]
  idx++;
 800cf8c:	7dfb      	ldrb	r3, [r7, #23]
 800cf8e:	3301      	adds	r3, #1
 800cf90:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800cf92:	e013      	b.n	800cfbc <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800cf94:	7dfb      	ldrb	r3, [r7, #23]
 800cf96:	68ba      	ldr	r2, [r7, #8]
 800cf98:	4413      	add	r3, r2
 800cf9a:	693a      	ldr	r2, [r7, #16]
 800cf9c:	7812      	ldrb	r2, [r2, #0]
 800cf9e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800cfa0:	693b      	ldr	r3, [r7, #16]
 800cfa2:	3301      	adds	r3, #1
 800cfa4:	613b      	str	r3, [r7, #16]
    idx++;
 800cfa6:	7dfb      	ldrb	r3, [r7, #23]
 800cfa8:	3301      	adds	r3, #1
 800cfaa:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800cfac:	7dfb      	ldrb	r3, [r7, #23]
 800cfae:	68ba      	ldr	r2, [r7, #8]
 800cfb0:	4413      	add	r3, r2
 800cfb2:	2200      	movs	r2, #0
 800cfb4:	701a      	strb	r2, [r3, #0]
    idx++;
 800cfb6:	7dfb      	ldrb	r3, [r7, #23]
 800cfb8:	3301      	adds	r3, #1
 800cfba:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800cfbc:	693b      	ldr	r3, [r7, #16]
 800cfbe:	781b      	ldrb	r3, [r3, #0]
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d1e7      	bne.n	800cf94 <USBD_GetString+0x52>
 800cfc4:	e000      	b.n	800cfc8 <USBD_GetString+0x86>
    return;
 800cfc6:	bf00      	nop
  }
}
 800cfc8:	3718      	adds	r7, #24
 800cfca:	46bd      	mov	sp, r7
 800cfcc:	bd80      	pop	{r7, pc}

0800cfce <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800cfce:	b480      	push	{r7}
 800cfd0:	b085      	sub	sp, #20
 800cfd2:	af00      	add	r7, sp, #0
 800cfd4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800cfd6:	2300      	movs	r3, #0
 800cfd8:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800cfde:	e005      	b.n	800cfec <USBD_GetLen+0x1e>
  {
    len++;
 800cfe0:	7bfb      	ldrb	r3, [r7, #15]
 800cfe2:	3301      	adds	r3, #1
 800cfe4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800cfe6:	68bb      	ldr	r3, [r7, #8]
 800cfe8:	3301      	adds	r3, #1
 800cfea:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800cfec:	68bb      	ldr	r3, [r7, #8]
 800cfee:	781b      	ldrb	r3, [r3, #0]
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d1f5      	bne.n	800cfe0 <USBD_GetLen+0x12>
  }

  return len;
 800cff4:	7bfb      	ldrb	r3, [r7, #15]
}
 800cff6:	4618      	mov	r0, r3
 800cff8:	3714      	adds	r7, #20
 800cffa:	46bd      	mov	sp, r7
 800cffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d000:	4770      	bx	lr

0800d002 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d002:	b580      	push	{r7, lr}
 800d004:	b084      	sub	sp, #16
 800d006:	af00      	add	r7, sp, #0
 800d008:	60f8      	str	r0, [r7, #12]
 800d00a:	60b9      	str	r1, [r7, #8]
 800d00c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	2202      	movs	r2, #2
 800d012:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	687a      	ldr	r2, [r7, #4]
 800d01a:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	687a      	ldr	r2, [r7, #4]
 800d020:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	68ba      	ldr	r2, [r7, #8]
 800d026:	2100      	movs	r1, #0
 800d028:	68f8      	ldr	r0, [r7, #12]
 800d02a:	f008 fe1d 	bl	8015c68 <USBD_LL_Transmit>

  return USBD_OK;
 800d02e:	2300      	movs	r3, #0
}
 800d030:	4618      	mov	r0, r3
 800d032:	3710      	adds	r7, #16
 800d034:	46bd      	mov	sp, r7
 800d036:	bd80      	pop	{r7, pc}

0800d038 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d038:	b580      	push	{r7, lr}
 800d03a:	b084      	sub	sp, #16
 800d03c:	af00      	add	r7, sp, #0
 800d03e:	60f8      	str	r0, [r7, #12]
 800d040:	60b9      	str	r1, [r7, #8]
 800d042:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	68ba      	ldr	r2, [r7, #8]
 800d048:	2100      	movs	r1, #0
 800d04a:	68f8      	ldr	r0, [r7, #12]
 800d04c:	f008 fe0c 	bl	8015c68 <USBD_LL_Transmit>

  return USBD_OK;
 800d050:	2300      	movs	r3, #0
}
 800d052:	4618      	mov	r0, r3
 800d054:	3710      	adds	r7, #16
 800d056:	46bd      	mov	sp, r7
 800d058:	bd80      	pop	{r7, pc}

0800d05a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d05a:	b580      	push	{r7, lr}
 800d05c:	b084      	sub	sp, #16
 800d05e:	af00      	add	r7, sp, #0
 800d060:	60f8      	str	r0, [r7, #12]
 800d062:	60b9      	str	r1, [r7, #8]
 800d064:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	68ba      	ldr	r2, [r7, #8]
 800d06a:	2100      	movs	r1, #0
 800d06c:	68f8      	ldr	r0, [r7, #12]
 800d06e:	f008 fe1c 	bl	8015caa <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d072:	2300      	movs	r3, #0
}
 800d074:	4618      	mov	r0, r3
 800d076:	3710      	adds	r7, #16
 800d078:	46bd      	mov	sp, r7
 800d07a:	bd80      	pop	{r7, pc}

0800d07c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d07c:	b580      	push	{r7, lr}
 800d07e:	b082      	sub	sp, #8
 800d080:	af00      	add	r7, sp, #0
 800d082:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	2204      	movs	r2, #4
 800d088:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d08c:	2300      	movs	r3, #0
 800d08e:	2200      	movs	r2, #0
 800d090:	2100      	movs	r1, #0
 800d092:	6878      	ldr	r0, [r7, #4]
 800d094:	f008 fde8 	bl	8015c68 <USBD_LL_Transmit>

  return USBD_OK;
 800d098:	2300      	movs	r3, #0
}
 800d09a:	4618      	mov	r0, r3
 800d09c:	3708      	adds	r7, #8
 800d09e:	46bd      	mov	sp, r7
 800d0a0:	bd80      	pop	{r7, pc}

0800d0a2 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d0a2:	b580      	push	{r7, lr}
 800d0a4:	b082      	sub	sp, #8
 800d0a6:	af00      	add	r7, sp, #0
 800d0a8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	2205      	movs	r2, #5
 800d0ae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d0b2:	2300      	movs	r3, #0
 800d0b4:	2200      	movs	r2, #0
 800d0b6:	2100      	movs	r1, #0
 800d0b8:	6878      	ldr	r0, [r7, #4]
 800d0ba:	f008 fdf6 	bl	8015caa <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d0be:	2300      	movs	r3, #0
}
 800d0c0:	4618      	mov	r0, r3
 800d0c2:	3708      	adds	r7, #8
 800d0c4:	46bd      	mov	sp, r7
 800d0c6:	bd80      	pop	{r7, pc}

0800d0c8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800d0c8:	b580      	push	{r7, lr}
 800d0ca:	b084      	sub	sp, #16
 800d0cc:	af00      	add	r7, sp, #0
 800d0ce:	4603      	mov	r3, r0
 800d0d0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800d0d2:	79fb      	ldrb	r3, [r7, #7]
 800d0d4:	4a08      	ldr	r2, [pc, #32]	; (800d0f8 <disk_status+0x30>)
 800d0d6:	009b      	lsls	r3, r3, #2
 800d0d8:	4413      	add	r3, r2
 800d0da:	685b      	ldr	r3, [r3, #4]
 800d0dc:	685b      	ldr	r3, [r3, #4]
 800d0de:	79fa      	ldrb	r2, [r7, #7]
 800d0e0:	4905      	ldr	r1, [pc, #20]	; (800d0f8 <disk_status+0x30>)
 800d0e2:	440a      	add	r2, r1
 800d0e4:	7a12      	ldrb	r2, [r2, #8]
 800d0e6:	4610      	mov	r0, r2
 800d0e8:	4798      	blx	r3
 800d0ea:	4603      	mov	r3, r0
 800d0ec:	73fb      	strb	r3, [r7, #15]
  return stat;
 800d0ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0f0:	4618      	mov	r0, r3
 800d0f2:	3710      	adds	r7, #16
 800d0f4:	46bd      	mov	sp, r7
 800d0f6:	bd80      	pop	{r7, pc}
 800d0f8:	200002c4 	.word	0x200002c4

0800d0fc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800d0fc:	b580      	push	{r7, lr}
 800d0fe:	b084      	sub	sp, #16
 800d100:	af00      	add	r7, sp, #0
 800d102:	4603      	mov	r3, r0
 800d104:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800d106:	2300      	movs	r3, #0
 800d108:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800d10a:	79fb      	ldrb	r3, [r7, #7]
 800d10c:	4a0d      	ldr	r2, [pc, #52]	; (800d144 <disk_initialize+0x48>)
 800d10e:	5cd3      	ldrb	r3, [r2, r3]
 800d110:	2b00      	cmp	r3, #0
 800d112:	d111      	bne.n	800d138 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800d114:	79fb      	ldrb	r3, [r7, #7]
 800d116:	4a0b      	ldr	r2, [pc, #44]	; (800d144 <disk_initialize+0x48>)
 800d118:	2101      	movs	r1, #1
 800d11a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800d11c:	79fb      	ldrb	r3, [r7, #7]
 800d11e:	4a09      	ldr	r2, [pc, #36]	; (800d144 <disk_initialize+0x48>)
 800d120:	009b      	lsls	r3, r3, #2
 800d122:	4413      	add	r3, r2
 800d124:	685b      	ldr	r3, [r3, #4]
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	79fa      	ldrb	r2, [r7, #7]
 800d12a:	4906      	ldr	r1, [pc, #24]	; (800d144 <disk_initialize+0x48>)
 800d12c:	440a      	add	r2, r1
 800d12e:	7a12      	ldrb	r2, [r2, #8]
 800d130:	4610      	mov	r0, r2
 800d132:	4798      	blx	r3
 800d134:	4603      	mov	r3, r0
 800d136:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800d138:	7bfb      	ldrb	r3, [r7, #15]
}
 800d13a:	4618      	mov	r0, r3
 800d13c:	3710      	adds	r7, #16
 800d13e:	46bd      	mov	sp, r7
 800d140:	bd80      	pop	{r7, pc}
 800d142:	bf00      	nop
 800d144:	200002c4 	.word	0x200002c4

0800d148 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800d148:	b590      	push	{r4, r7, lr}
 800d14a:	b087      	sub	sp, #28
 800d14c:	af00      	add	r7, sp, #0
 800d14e:	60b9      	str	r1, [r7, #8]
 800d150:	607a      	str	r2, [r7, #4]
 800d152:	603b      	str	r3, [r7, #0]
 800d154:	4603      	mov	r3, r0
 800d156:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800d158:	7bfb      	ldrb	r3, [r7, #15]
 800d15a:	4a0a      	ldr	r2, [pc, #40]	; (800d184 <disk_read+0x3c>)
 800d15c:	009b      	lsls	r3, r3, #2
 800d15e:	4413      	add	r3, r2
 800d160:	685b      	ldr	r3, [r3, #4]
 800d162:	689c      	ldr	r4, [r3, #8]
 800d164:	7bfb      	ldrb	r3, [r7, #15]
 800d166:	4a07      	ldr	r2, [pc, #28]	; (800d184 <disk_read+0x3c>)
 800d168:	4413      	add	r3, r2
 800d16a:	7a18      	ldrb	r0, [r3, #8]
 800d16c:	683b      	ldr	r3, [r7, #0]
 800d16e:	687a      	ldr	r2, [r7, #4]
 800d170:	68b9      	ldr	r1, [r7, #8]
 800d172:	47a0      	blx	r4
 800d174:	4603      	mov	r3, r0
 800d176:	75fb      	strb	r3, [r7, #23]
  return res;
 800d178:	7dfb      	ldrb	r3, [r7, #23]
}
 800d17a:	4618      	mov	r0, r3
 800d17c:	371c      	adds	r7, #28
 800d17e:	46bd      	mov	sp, r7
 800d180:	bd90      	pop	{r4, r7, pc}
 800d182:	bf00      	nop
 800d184:	200002c4 	.word	0x200002c4

0800d188 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800d188:	b590      	push	{r4, r7, lr}
 800d18a:	b087      	sub	sp, #28
 800d18c:	af00      	add	r7, sp, #0
 800d18e:	60b9      	str	r1, [r7, #8]
 800d190:	607a      	str	r2, [r7, #4]
 800d192:	603b      	str	r3, [r7, #0]
 800d194:	4603      	mov	r3, r0
 800d196:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800d198:	7bfb      	ldrb	r3, [r7, #15]
 800d19a:	4a0a      	ldr	r2, [pc, #40]	; (800d1c4 <disk_write+0x3c>)
 800d19c:	009b      	lsls	r3, r3, #2
 800d19e:	4413      	add	r3, r2
 800d1a0:	685b      	ldr	r3, [r3, #4]
 800d1a2:	68dc      	ldr	r4, [r3, #12]
 800d1a4:	7bfb      	ldrb	r3, [r7, #15]
 800d1a6:	4a07      	ldr	r2, [pc, #28]	; (800d1c4 <disk_write+0x3c>)
 800d1a8:	4413      	add	r3, r2
 800d1aa:	7a18      	ldrb	r0, [r3, #8]
 800d1ac:	683b      	ldr	r3, [r7, #0]
 800d1ae:	687a      	ldr	r2, [r7, #4]
 800d1b0:	68b9      	ldr	r1, [r7, #8]
 800d1b2:	47a0      	blx	r4
 800d1b4:	4603      	mov	r3, r0
 800d1b6:	75fb      	strb	r3, [r7, #23]
  return res;
 800d1b8:	7dfb      	ldrb	r3, [r7, #23]
}
 800d1ba:	4618      	mov	r0, r3
 800d1bc:	371c      	adds	r7, #28
 800d1be:	46bd      	mov	sp, r7
 800d1c0:	bd90      	pop	{r4, r7, pc}
 800d1c2:	bf00      	nop
 800d1c4:	200002c4 	.word	0x200002c4

0800d1c8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800d1c8:	b580      	push	{r7, lr}
 800d1ca:	b084      	sub	sp, #16
 800d1cc:	af00      	add	r7, sp, #0
 800d1ce:	4603      	mov	r3, r0
 800d1d0:	603a      	str	r2, [r7, #0]
 800d1d2:	71fb      	strb	r3, [r7, #7]
 800d1d4:	460b      	mov	r3, r1
 800d1d6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800d1d8:	79fb      	ldrb	r3, [r7, #7]
 800d1da:	4a09      	ldr	r2, [pc, #36]	; (800d200 <disk_ioctl+0x38>)
 800d1dc:	009b      	lsls	r3, r3, #2
 800d1de:	4413      	add	r3, r2
 800d1e0:	685b      	ldr	r3, [r3, #4]
 800d1e2:	691b      	ldr	r3, [r3, #16]
 800d1e4:	79fa      	ldrb	r2, [r7, #7]
 800d1e6:	4906      	ldr	r1, [pc, #24]	; (800d200 <disk_ioctl+0x38>)
 800d1e8:	440a      	add	r2, r1
 800d1ea:	7a10      	ldrb	r0, [r2, #8]
 800d1ec:	79b9      	ldrb	r1, [r7, #6]
 800d1ee:	683a      	ldr	r2, [r7, #0]
 800d1f0:	4798      	blx	r3
 800d1f2:	4603      	mov	r3, r0
 800d1f4:	73fb      	strb	r3, [r7, #15]
  return res;
 800d1f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1f8:	4618      	mov	r0, r3
 800d1fa:	3710      	adds	r7, #16
 800d1fc:	46bd      	mov	sp, r7
 800d1fe:	bd80      	pop	{r7, pc}
 800d200:	200002c4 	.word	0x200002c4

0800d204 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800d204:	b480      	push	{r7}
 800d206:	b085      	sub	sp, #20
 800d208:	af00      	add	r7, sp, #0
 800d20a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	3301      	adds	r3, #1
 800d210:	781b      	ldrb	r3, [r3, #0]
 800d212:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800d214:	89fb      	ldrh	r3, [r7, #14]
 800d216:	021b      	lsls	r3, r3, #8
 800d218:	b21a      	sxth	r2, r3
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	781b      	ldrb	r3, [r3, #0]
 800d21e:	b21b      	sxth	r3, r3
 800d220:	4313      	orrs	r3, r2
 800d222:	b21b      	sxth	r3, r3
 800d224:	81fb      	strh	r3, [r7, #14]
	return rv;
 800d226:	89fb      	ldrh	r3, [r7, #14]
}
 800d228:	4618      	mov	r0, r3
 800d22a:	3714      	adds	r7, #20
 800d22c:	46bd      	mov	sp, r7
 800d22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d232:	4770      	bx	lr

0800d234 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800d234:	b480      	push	{r7}
 800d236:	b085      	sub	sp, #20
 800d238:	af00      	add	r7, sp, #0
 800d23a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	3303      	adds	r3, #3
 800d240:	781b      	ldrb	r3, [r3, #0]
 800d242:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	021b      	lsls	r3, r3, #8
 800d248:	687a      	ldr	r2, [r7, #4]
 800d24a:	3202      	adds	r2, #2
 800d24c:	7812      	ldrb	r2, [r2, #0]
 800d24e:	4313      	orrs	r3, r2
 800d250:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	021b      	lsls	r3, r3, #8
 800d256:	687a      	ldr	r2, [r7, #4]
 800d258:	3201      	adds	r2, #1
 800d25a:	7812      	ldrb	r2, [r2, #0]
 800d25c:	4313      	orrs	r3, r2
 800d25e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	021b      	lsls	r3, r3, #8
 800d264:	687a      	ldr	r2, [r7, #4]
 800d266:	7812      	ldrb	r2, [r2, #0]
 800d268:	4313      	orrs	r3, r2
 800d26a:	60fb      	str	r3, [r7, #12]
	return rv;
 800d26c:	68fb      	ldr	r3, [r7, #12]
}
 800d26e:	4618      	mov	r0, r3
 800d270:	3714      	adds	r7, #20
 800d272:	46bd      	mov	sp, r7
 800d274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d278:	4770      	bx	lr

0800d27a <ld_qword>:

#if _FS_EXFAT
static
QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 800d27a:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 800d27e:	b085      	sub	sp, #20
 800d280:	af00      	add	r7, sp, #0
 800d282:	6078      	str	r0, [r7, #4]
	QWORD rv;

	rv = ptr[7];
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	3307      	adds	r3, #7
 800d288:	781b      	ldrb	r3, [r3, #0]
 800d28a:	b2db      	uxtb	r3, r3
 800d28c:	f04f 0400 	mov.w	r4, #0
 800d290:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[6];
 800d294:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800d298:	f04f 0b00 	mov.w	fp, #0
 800d29c:	f04f 0c00 	mov.w	ip, #0
 800d2a0:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 800d2a4:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 800d2a8:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 800d2ac:	687a      	ldr	r2, [r7, #4]
 800d2ae:	3206      	adds	r2, #6
 800d2b0:	7812      	ldrb	r2, [r2, #0]
 800d2b2:	b2d1      	uxtb	r1, r2
 800d2b4:	f04f 0200 	mov.w	r2, #0
 800d2b8:	ea4b 0301 	orr.w	r3, fp, r1
 800d2bc:	ea4c 0402 	orr.w	r4, ip, r2
 800d2c0:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[5];
 800d2c4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800d2c8:	f04f 0b00 	mov.w	fp, #0
 800d2cc:	f04f 0c00 	mov.w	ip, #0
 800d2d0:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 800d2d4:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 800d2d8:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 800d2dc:	687a      	ldr	r2, [r7, #4]
 800d2de:	3205      	adds	r2, #5
 800d2e0:	7812      	ldrb	r2, [r2, #0]
 800d2e2:	b2d1      	uxtb	r1, r2
 800d2e4:	f04f 0200 	mov.w	r2, #0
 800d2e8:	ea4b 0301 	orr.w	r3, fp, r1
 800d2ec:	ea4c 0402 	orr.w	r4, ip, r2
 800d2f0:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[4];
 800d2f4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800d2f8:	f04f 0b00 	mov.w	fp, #0
 800d2fc:	f04f 0c00 	mov.w	ip, #0
 800d300:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 800d304:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 800d308:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 800d30c:	687a      	ldr	r2, [r7, #4]
 800d30e:	3204      	adds	r2, #4
 800d310:	7812      	ldrb	r2, [r2, #0]
 800d312:	b2d1      	uxtb	r1, r2
 800d314:	f04f 0200 	mov.w	r2, #0
 800d318:	ea4b 0301 	orr.w	r3, fp, r1
 800d31c:	ea4c 0402 	orr.w	r4, ip, r2
 800d320:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[3];
 800d324:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800d328:	f04f 0b00 	mov.w	fp, #0
 800d32c:	f04f 0c00 	mov.w	ip, #0
 800d330:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 800d334:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 800d338:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 800d33c:	687a      	ldr	r2, [r7, #4]
 800d33e:	3203      	adds	r2, #3
 800d340:	7812      	ldrb	r2, [r2, #0]
 800d342:	b2d1      	uxtb	r1, r2
 800d344:	f04f 0200 	mov.w	r2, #0
 800d348:	ea4b 0301 	orr.w	r3, fp, r1
 800d34c:	ea4c 0402 	orr.w	r4, ip, r2
 800d350:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[2];
 800d354:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800d358:	f04f 0b00 	mov.w	fp, #0
 800d35c:	f04f 0c00 	mov.w	ip, #0
 800d360:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 800d364:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 800d368:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 800d36c:	687a      	ldr	r2, [r7, #4]
 800d36e:	3202      	adds	r2, #2
 800d370:	7812      	ldrb	r2, [r2, #0]
 800d372:	b2d1      	uxtb	r1, r2
 800d374:	f04f 0200 	mov.w	r2, #0
 800d378:	ea4b 0301 	orr.w	r3, fp, r1
 800d37c:	ea4c 0402 	orr.w	r4, ip, r2
 800d380:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[1];
 800d384:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800d388:	f04f 0b00 	mov.w	fp, #0
 800d38c:	f04f 0c00 	mov.w	ip, #0
 800d390:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 800d394:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 800d398:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 800d39c:	687a      	ldr	r2, [r7, #4]
 800d39e:	3201      	adds	r2, #1
 800d3a0:	7812      	ldrb	r2, [r2, #0]
 800d3a2:	b2d1      	uxtb	r1, r2
 800d3a4:	f04f 0200 	mov.w	r2, #0
 800d3a8:	ea4b 0301 	orr.w	r3, fp, r1
 800d3ac:	ea4c 0402 	orr.w	r4, ip, r2
 800d3b0:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[0];
 800d3b4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800d3b8:	f04f 0b00 	mov.w	fp, #0
 800d3bc:	f04f 0c00 	mov.w	ip, #0
 800d3c0:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 800d3c4:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 800d3c8:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 800d3cc:	687a      	ldr	r2, [r7, #4]
 800d3ce:	7812      	ldrb	r2, [r2, #0]
 800d3d0:	b2d1      	uxtb	r1, r2
 800d3d2:	f04f 0200 	mov.w	r2, #0
 800d3d6:	ea4b 0301 	orr.w	r3, fp, r1
 800d3da:	ea4c 0402 	orr.w	r4, ip, r2
 800d3de:	e9c7 3402 	strd	r3, r4, [r7, #8]
	return rv;
 800d3e2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
}
 800d3e6:	4618      	mov	r0, r3
 800d3e8:	4621      	mov	r1, r4
 800d3ea:	3714      	adds	r7, #20
 800d3ec:	46bd      	mov	sp, r7
 800d3ee:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 800d3f2:	4770      	bx	lr

0800d3f4 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800d3f4:	b480      	push	{r7}
 800d3f6:	b083      	sub	sp, #12
 800d3f8:	af00      	add	r7, sp, #0
 800d3fa:	6078      	str	r0, [r7, #4]
 800d3fc:	460b      	mov	r3, r1
 800d3fe:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	1c5a      	adds	r2, r3, #1
 800d404:	607a      	str	r2, [r7, #4]
 800d406:	887a      	ldrh	r2, [r7, #2]
 800d408:	b2d2      	uxtb	r2, r2
 800d40a:	701a      	strb	r2, [r3, #0]
 800d40c:	887b      	ldrh	r3, [r7, #2]
 800d40e:	0a1b      	lsrs	r3, r3, #8
 800d410:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	1c5a      	adds	r2, r3, #1
 800d416:	607a      	str	r2, [r7, #4]
 800d418:	887a      	ldrh	r2, [r7, #2]
 800d41a:	b2d2      	uxtb	r2, r2
 800d41c:	701a      	strb	r2, [r3, #0]
}
 800d41e:	bf00      	nop
 800d420:	370c      	adds	r7, #12
 800d422:	46bd      	mov	sp, r7
 800d424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d428:	4770      	bx	lr

0800d42a <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800d42a:	b480      	push	{r7}
 800d42c:	b083      	sub	sp, #12
 800d42e:	af00      	add	r7, sp, #0
 800d430:	6078      	str	r0, [r7, #4]
 800d432:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	1c5a      	adds	r2, r3, #1
 800d438:	607a      	str	r2, [r7, #4]
 800d43a:	683a      	ldr	r2, [r7, #0]
 800d43c:	b2d2      	uxtb	r2, r2
 800d43e:	701a      	strb	r2, [r3, #0]
 800d440:	683b      	ldr	r3, [r7, #0]
 800d442:	0a1b      	lsrs	r3, r3, #8
 800d444:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	1c5a      	adds	r2, r3, #1
 800d44a:	607a      	str	r2, [r7, #4]
 800d44c:	683a      	ldr	r2, [r7, #0]
 800d44e:	b2d2      	uxtb	r2, r2
 800d450:	701a      	strb	r2, [r3, #0]
 800d452:	683b      	ldr	r3, [r7, #0]
 800d454:	0a1b      	lsrs	r3, r3, #8
 800d456:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	1c5a      	adds	r2, r3, #1
 800d45c:	607a      	str	r2, [r7, #4]
 800d45e:	683a      	ldr	r2, [r7, #0]
 800d460:	b2d2      	uxtb	r2, r2
 800d462:	701a      	strb	r2, [r3, #0]
 800d464:	683b      	ldr	r3, [r7, #0]
 800d466:	0a1b      	lsrs	r3, r3, #8
 800d468:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	1c5a      	adds	r2, r3, #1
 800d46e:	607a      	str	r2, [r7, #4]
 800d470:	683a      	ldr	r2, [r7, #0]
 800d472:	b2d2      	uxtb	r2, r2
 800d474:	701a      	strb	r2, [r3, #0]
}
 800d476:	bf00      	nop
 800d478:	370c      	adds	r7, #12
 800d47a:	46bd      	mov	sp, r7
 800d47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d480:	4770      	bx	lr

0800d482 <st_qword>:

#if _FS_EXFAT
static
void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
 800d482:	b490      	push	{r4, r7}
 800d484:	b084      	sub	sp, #16
 800d486:	af00      	add	r7, sp, #0
 800d488:	60f8      	str	r0, [r7, #12]
 800d48a:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	1c5a      	adds	r2, r3, #1
 800d492:	60fa      	str	r2, [r7, #12]
 800d494:	783a      	ldrb	r2, [r7, #0]
 800d496:	701a      	strb	r2, [r3, #0]
 800d498:	e9d7 1200 	ldrd	r1, r2, [r7]
 800d49c:	f04f 0300 	mov.w	r3, #0
 800d4a0:	f04f 0400 	mov.w	r4, #0
 800d4a4:	0a0b      	lsrs	r3, r1, #8
 800d4a6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d4aa:	0a14      	lsrs	r4, r2, #8
 800d4ac:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	1c5a      	adds	r2, r3, #1
 800d4b4:	60fa      	str	r2, [r7, #12]
 800d4b6:	783a      	ldrb	r2, [r7, #0]
 800d4b8:	701a      	strb	r2, [r3, #0]
 800d4ba:	e9d7 1200 	ldrd	r1, r2, [r7]
 800d4be:	f04f 0300 	mov.w	r3, #0
 800d4c2:	f04f 0400 	mov.w	r4, #0
 800d4c6:	0a0b      	lsrs	r3, r1, #8
 800d4c8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d4cc:	0a14      	lsrs	r4, r2, #8
 800d4ce:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	1c5a      	adds	r2, r3, #1
 800d4d6:	60fa      	str	r2, [r7, #12]
 800d4d8:	783a      	ldrb	r2, [r7, #0]
 800d4da:	701a      	strb	r2, [r3, #0]
 800d4dc:	e9d7 1200 	ldrd	r1, r2, [r7]
 800d4e0:	f04f 0300 	mov.w	r3, #0
 800d4e4:	f04f 0400 	mov.w	r4, #0
 800d4e8:	0a0b      	lsrs	r3, r1, #8
 800d4ea:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d4ee:	0a14      	lsrs	r4, r2, #8
 800d4f0:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	1c5a      	adds	r2, r3, #1
 800d4f8:	60fa      	str	r2, [r7, #12]
 800d4fa:	783a      	ldrb	r2, [r7, #0]
 800d4fc:	701a      	strb	r2, [r3, #0]
 800d4fe:	e9d7 1200 	ldrd	r1, r2, [r7]
 800d502:	f04f 0300 	mov.w	r3, #0
 800d506:	f04f 0400 	mov.w	r4, #0
 800d50a:	0a0b      	lsrs	r3, r1, #8
 800d50c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d510:	0a14      	lsrs	r4, r2, #8
 800d512:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	1c5a      	adds	r2, r3, #1
 800d51a:	60fa      	str	r2, [r7, #12]
 800d51c:	783a      	ldrb	r2, [r7, #0]
 800d51e:	701a      	strb	r2, [r3, #0]
 800d520:	e9d7 1200 	ldrd	r1, r2, [r7]
 800d524:	f04f 0300 	mov.w	r3, #0
 800d528:	f04f 0400 	mov.w	r4, #0
 800d52c:	0a0b      	lsrs	r3, r1, #8
 800d52e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d532:	0a14      	lsrs	r4, r2, #8
 800d534:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	1c5a      	adds	r2, r3, #1
 800d53c:	60fa      	str	r2, [r7, #12]
 800d53e:	783a      	ldrb	r2, [r7, #0]
 800d540:	701a      	strb	r2, [r3, #0]
 800d542:	e9d7 1200 	ldrd	r1, r2, [r7]
 800d546:	f04f 0300 	mov.w	r3, #0
 800d54a:	f04f 0400 	mov.w	r4, #0
 800d54e:	0a0b      	lsrs	r3, r1, #8
 800d550:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d554:	0a14      	lsrs	r4, r2, #8
 800d556:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	1c5a      	adds	r2, r3, #1
 800d55e:	60fa      	str	r2, [r7, #12]
 800d560:	783a      	ldrb	r2, [r7, #0]
 800d562:	701a      	strb	r2, [r3, #0]
 800d564:	e9d7 1200 	ldrd	r1, r2, [r7]
 800d568:	f04f 0300 	mov.w	r3, #0
 800d56c:	f04f 0400 	mov.w	r4, #0
 800d570:	0a0b      	lsrs	r3, r1, #8
 800d572:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d576:	0a14      	lsrs	r4, r2, #8
 800d578:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val;
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	1c5a      	adds	r2, r3, #1
 800d580:	60fa      	str	r2, [r7, #12]
 800d582:	783a      	ldrb	r2, [r7, #0]
 800d584:	701a      	strb	r2, [r3, #0]
}
 800d586:	bf00      	nop
 800d588:	3710      	adds	r7, #16
 800d58a:	46bd      	mov	sp, r7
 800d58c:	bc90      	pop	{r4, r7}
 800d58e:	4770      	bx	lr

0800d590 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800d590:	b480      	push	{r7}
 800d592:	b087      	sub	sp, #28
 800d594:	af00      	add	r7, sp, #0
 800d596:	60f8      	str	r0, [r7, #12]
 800d598:	60b9      	str	r1, [r7, #8]
 800d59a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800d5a0:	68bb      	ldr	r3, [r7, #8]
 800d5a2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d00d      	beq.n	800d5c6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800d5aa:	693a      	ldr	r2, [r7, #16]
 800d5ac:	1c53      	adds	r3, r2, #1
 800d5ae:	613b      	str	r3, [r7, #16]
 800d5b0:	697b      	ldr	r3, [r7, #20]
 800d5b2:	1c59      	adds	r1, r3, #1
 800d5b4:	6179      	str	r1, [r7, #20]
 800d5b6:	7812      	ldrb	r2, [r2, #0]
 800d5b8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	3b01      	subs	r3, #1
 800d5be:	607b      	str	r3, [r7, #4]
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d1f1      	bne.n	800d5aa <mem_cpy+0x1a>
	}
}
 800d5c6:	bf00      	nop
 800d5c8:	371c      	adds	r7, #28
 800d5ca:	46bd      	mov	sp, r7
 800d5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5d0:	4770      	bx	lr

0800d5d2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800d5d2:	b480      	push	{r7}
 800d5d4:	b087      	sub	sp, #28
 800d5d6:	af00      	add	r7, sp, #0
 800d5d8:	60f8      	str	r0, [r7, #12]
 800d5da:	60b9      	str	r1, [r7, #8]
 800d5dc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800d5e2:	697b      	ldr	r3, [r7, #20]
 800d5e4:	1c5a      	adds	r2, r3, #1
 800d5e6:	617a      	str	r2, [r7, #20]
 800d5e8:	68ba      	ldr	r2, [r7, #8]
 800d5ea:	b2d2      	uxtb	r2, r2
 800d5ec:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	3b01      	subs	r3, #1
 800d5f2:	607b      	str	r3, [r7, #4]
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d1f3      	bne.n	800d5e2 <mem_set+0x10>
}
 800d5fa:	bf00      	nop
 800d5fc:	371c      	adds	r7, #28
 800d5fe:	46bd      	mov	sp, r7
 800d600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d604:	4770      	bx	lr

0800d606 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800d606:	b480      	push	{r7}
 800d608:	b089      	sub	sp, #36	; 0x24
 800d60a:	af00      	add	r7, sp, #0
 800d60c:	60f8      	str	r0, [r7, #12]
 800d60e:	60b9      	str	r1, [r7, #8]
 800d610:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	61fb      	str	r3, [r7, #28]
 800d616:	68bb      	ldr	r3, [r7, #8]
 800d618:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800d61a:	2300      	movs	r3, #0
 800d61c:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800d61e:	69fb      	ldr	r3, [r7, #28]
 800d620:	1c5a      	adds	r2, r3, #1
 800d622:	61fa      	str	r2, [r7, #28]
 800d624:	781b      	ldrb	r3, [r3, #0]
 800d626:	4619      	mov	r1, r3
 800d628:	69bb      	ldr	r3, [r7, #24]
 800d62a:	1c5a      	adds	r2, r3, #1
 800d62c:	61ba      	str	r2, [r7, #24]
 800d62e:	781b      	ldrb	r3, [r3, #0]
 800d630:	1acb      	subs	r3, r1, r3
 800d632:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	3b01      	subs	r3, #1
 800d638:	607b      	str	r3, [r7, #4]
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d002      	beq.n	800d646 <mem_cmp+0x40>
 800d640:	697b      	ldr	r3, [r7, #20]
 800d642:	2b00      	cmp	r3, #0
 800d644:	d0eb      	beq.n	800d61e <mem_cmp+0x18>

	return r;
 800d646:	697b      	ldr	r3, [r7, #20]
}
 800d648:	4618      	mov	r0, r3
 800d64a:	3724      	adds	r7, #36	; 0x24
 800d64c:	46bd      	mov	sp, r7
 800d64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d652:	4770      	bx	lr

0800d654 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800d654:	b480      	push	{r7}
 800d656:	b083      	sub	sp, #12
 800d658:	af00      	add	r7, sp, #0
 800d65a:	6078      	str	r0, [r7, #4]
 800d65c:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800d65e:	e002      	b.n	800d666 <chk_chr+0x12>
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	3301      	adds	r3, #1
 800d664:	607b      	str	r3, [r7, #4]
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	781b      	ldrb	r3, [r3, #0]
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d005      	beq.n	800d67a <chk_chr+0x26>
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	781b      	ldrb	r3, [r3, #0]
 800d672:	461a      	mov	r2, r3
 800d674:	683b      	ldr	r3, [r7, #0]
 800d676:	4293      	cmp	r3, r2
 800d678:	d1f2      	bne.n	800d660 <chk_chr+0xc>
	return *str;
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	781b      	ldrb	r3, [r3, #0]
}
 800d67e:	4618      	mov	r0, r3
 800d680:	370c      	adds	r7, #12
 800d682:	46bd      	mov	sp, r7
 800d684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d688:	4770      	bx	lr

0800d68a <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800d68a:	b580      	push	{r7, lr}
 800d68c:	b082      	sub	sp, #8
 800d68e:	af00      	add	r7, sp, #0
 800d690:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	2b00      	cmp	r3, #0
 800d696:	d009      	beq.n	800d6ac <lock_fs+0x22>
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	699b      	ldr	r3, [r3, #24]
 800d69c:	4618      	mov	r0, r3
 800d69e:	f004 f914 	bl	80118ca <ff_req_grant>
 800d6a2:	4603      	mov	r3, r0
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d001      	beq.n	800d6ac <lock_fs+0x22>
 800d6a8:	2301      	movs	r3, #1
 800d6aa:	e000      	b.n	800d6ae <lock_fs+0x24>
 800d6ac:	2300      	movs	r3, #0
}
 800d6ae:	4618      	mov	r0, r3
 800d6b0:	3708      	adds	r7, #8
 800d6b2:	46bd      	mov	sp, r7
 800d6b4:	bd80      	pop	{r7, pc}

0800d6b6 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800d6b6:	b580      	push	{r7, lr}
 800d6b8:	b082      	sub	sp, #8
 800d6ba:	af00      	add	r7, sp, #0
 800d6bc:	6078      	str	r0, [r7, #4]
 800d6be:	460b      	mov	r3, r1
 800d6c0:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d00d      	beq.n	800d6e4 <unlock_fs+0x2e>
 800d6c8:	78fb      	ldrb	r3, [r7, #3]
 800d6ca:	2b0c      	cmp	r3, #12
 800d6cc:	d00a      	beq.n	800d6e4 <unlock_fs+0x2e>
 800d6ce:	78fb      	ldrb	r3, [r7, #3]
 800d6d0:	2b0b      	cmp	r3, #11
 800d6d2:	d007      	beq.n	800d6e4 <unlock_fs+0x2e>
 800d6d4:	78fb      	ldrb	r3, [r7, #3]
 800d6d6:	2b0f      	cmp	r3, #15
 800d6d8:	d004      	beq.n	800d6e4 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	699b      	ldr	r3, [r3, #24]
 800d6de:	4618      	mov	r0, r3
 800d6e0:	f004 f908 	bl	80118f4 <ff_rel_grant>
	}
}
 800d6e4:	bf00      	nop
 800d6e6:	3708      	adds	r7, #8
 800d6e8:	46bd      	mov	sp, r7
 800d6ea:	bd80      	pop	{r7, pc}

0800d6ec <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d6ec:	b480      	push	{r7}
 800d6ee:	b085      	sub	sp, #20
 800d6f0:	af00      	add	r7, sp, #0
 800d6f2:	6078      	str	r0, [r7, #4]
 800d6f4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d6f6:	2300      	movs	r3, #0
 800d6f8:	60bb      	str	r3, [r7, #8]
 800d6fa:	68bb      	ldr	r3, [r7, #8]
 800d6fc:	60fb      	str	r3, [r7, #12]
 800d6fe:	e029      	b.n	800d754 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800d700:	4a27      	ldr	r2, [pc, #156]	; (800d7a0 <chk_lock+0xb4>)
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	011b      	lsls	r3, r3, #4
 800d706:	4413      	add	r3, r2
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d01d      	beq.n	800d74a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d70e:	4a24      	ldr	r2, [pc, #144]	; (800d7a0 <chk_lock+0xb4>)
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	011b      	lsls	r3, r3, #4
 800d714:	4413      	add	r3, r2
 800d716:	681a      	ldr	r2, [r3, #0]
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	429a      	cmp	r2, r3
 800d71e:	d116      	bne.n	800d74e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800d720:	4a1f      	ldr	r2, [pc, #124]	; (800d7a0 <chk_lock+0xb4>)
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	011b      	lsls	r3, r3, #4
 800d726:	4413      	add	r3, r2
 800d728:	3304      	adds	r3, #4
 800d72a:	681a      	ldr	r2, [r3, #0]
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d730:	429a      	cmp	r2, r3
 800d732:	d10c      	bne.n	800d74e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d734:	4a1a      	ldr	r2, [pc, #104]	; (800d7a0 <chk_lock+0xb4>)
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	011b      	lsls	r3, r3, #4
 800d73a:	4413      	add	r3, r2
 800d73c:	3308      	adds	r3, #8
 800d73e:	681a      	ldr	r2, [r3, #0]
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
				Files[i].clu == dp->obj.sclust &&
 800d744:	429a      	cmp	r2, r3
 800d746:	d102      	bne.n	800d74e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d748:	e007      	b.n	800d75a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800d74a:	2301      	movs	r3, #1
 800d74c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	3301      	adds	r3, #1
 800d752:	60fb      	str	r3, [r7, #12]
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	2b09      	cmp	r3, #9
 800d758:	d9d2      	bls.n	800d700 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	2b0a      	cmp	r3, #10
 800d75e:	d109      	bne.n	800d774 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800d760:	68bb      	ldr	r3, [r7, #8]
 800d762:	2b00      	cmp	r3, #0
 800d764:	d102      	bne.n	800d76c <chk_lock+0x80>
 800d766:	683b      	ldr	r3, [r7, #0]
 800d768:	2b02      	cmp	r3, #2
 800d76a:	d101      	bne.n	800d770 <chk_lock+0x84>
 800d76c:	2300      	movs	r3, #0
 800d76e:	e010      	b.n	800d792 <chk_lock+0xa6>
 800d770:	2312      	movs	r3, #18
 800d772:	e00e      	b.n	800d792 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800d774:	683b      	ldr	r3, [r7, #0]
 800d776:	2b00      	cmp	r3, #0
 800d778:	d108      	bne.n	800d78c <chk_lock+0xa0>
 800d77a:	4a09      	ldr	r2, [pc, #36]	; (800d7a0 <chk_lock+0xb4>)
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	011b      	lsls	r3, r3, #4
 800d780:	4413      	add	r3, r2
 800d782:	330c      	adds	r3, #12
 800d784:	881b      	ldrh	r3, [r3, #0]
 800d786:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d78a:	d101      	bne.n	800d790 <chk_lock+0xa4>
 800d78c:	2310      	movs	r3, #16
 800d78e:	e000      	b.n	800d792 <chk_lock+0xa6>
 800d790:	2300      	movs	r3, #0
}
 800d792:	4618      	mov	r0, r3
 800d794:	3714      	adds	r7, #20
 800d796:	46bd      	mov	sp, r7
 800d798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d79c:	4770      	bx	lr
 800d79e:	bf00      	nop
 800d7a0:	20000224 	.word	0x20000224

0800d7a4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800d7a4:	b480      	push	{r7}
 800d7a6:	b083      	sub	sp, #12
 800d7a8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d7aa:	2300      	movs	r3, #0
 800d7ac:	607b      	str	r3, [r7, #4]
 800d7ae:	e002      	b.n	800d7b6 <enq_lock+0x12>
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	3301      	adds	r3, #1
 800d7b4:	607b      	str	r3, [r7, #4]
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	2b09      	cmp	r3, #9
 800d7ba:	d806      	bhi.n	800d7ca <enq_lock+0x26>
 800d7bc:	4a09      	ldr	r2, [pc, #36]	; (800d7e4 <enq_lock+0x40>)
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	011b      	lsls	r3, r3, #4
 800d7c2:	4413      	add	r3, r2
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d1f2      	bne.n	800d7b0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	2b0a      	cmp	r3, #10
 800d7ce:	bf14      	ite	ne
 800d7d0:	2301      	movne	r3, #1
 800d7d2:	2300      	moveq	r3, #0
 800d7d4:	b2db      	uxtb	r3, r3
}
 800d7d6:	4618      	mov	r0, r3
 800d7d8:	370c      	adds	r7, #12
 800d7da:	46bd      	mov	sp, r7
 800d7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7e0:	4770      	bx	lr
 800d7e2:	bf00      	nop
 800d7e4:	20000224 	.word	0x20000224

0800d7e8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d7e8:	b480      	push	{r7}
 800d7ea:	b085      	sub	sp, #20
 800d7ec:	af00      	add	r7, sp, #0
 800d7ee:	6078      	str	r0, [r7, #4]
 800d7f0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d7f2:	2300      	movs	r3, #0
 800d7f4:	60fb      	str	r3, [r7, #12]
 800d7f6:	e01f      	b.n	800d838 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800d7f8:	4a41      	ldr	r2, [pc, #260]	; (800d900 <inc_lock+0x118>)
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	011b      	lsls	r3, r3, #4
 800d7fe:	4413      	add	r3, r2
 800d800:	681a      	ldr	r2, [r3, #0]
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	429a      	cmp	r2, r3
 800d808:	d113      	bne.n	800d832 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800d80a:	4a3d      	ldr	r2, [pc, #244]	; (800d900 <inc_lock+0x118>)
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	011b      	lsls	r3, r3, #4
 800d810:	4413      	add	r3, r2
 800d812:	3304      	adds	r3, #4
 800d814:	681a      	ldr	r2, [r3, #0]
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800d81a:	429a      	cmp	r2, r3
 800d81c:	d109      	bne.n	800d832 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800d81e:	4a38      	ldr	r2, [pc, #224]	; (800d900 <inc_lock+0x118>)
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	011b      	lsls	r3, r3, #4
 800d824:	4413      	add	r3, r2
 800d826:	3308      	adds	r3, #8
 800d828:	681a      	ldr	r2, [r3, #0]
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			Files[i].clu == dp->obj.sclust &&
 800d82e:	429a      	cmp	r2, r3
 800d830:	d006      	beq.n	800d840 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	3301      	adds	r3, #1
 800d836:	60fb      	str	r3, [r7, #12]
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	2b09      	cmp	r3, #9
 800d83c:	d9dc      	bls.n	800d7f8 <inc_lock+0x10>
 800d83e:	e000      	b.n	800d842 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800d840:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	2b0a      	cmp	r3, #10
 800d846:	d132      	bne.n	800d8ae <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d848:	2300      	movs	r3, #0
 800d84a:	60fb      	str	r3, [r7, #12]
 800d84c:	e002      	b.n	800d854 <inc_lock+0x6c>
 800d84e:	68fb      	ldr	r3, [r7, #12]
 800d850:	3301      	adds	r3, #1
 800d852:	60fb      	str	r3, [r7, #12]
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	2b09      	cmp	r3, #9
 800d858:	d806      	bhi.n	800d868 <inc_lock+0x80>
 800d85a:	4a29      	ldr	r2, [pc, #164]	; (800d900 <inc_lock+0x118>)
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	011b      	lsls	r3, r3, #4
 800d860:	4413      	add	r3, r2
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	2b00      	cmp	r3, #0
 800d866:	d1f2      	bne.n	800d84e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	2b0a      	cmp	r3, #10
 800d86c:	d101      	bne.n	800d872 <inc_lock+0x8a>
 800d86e:	2300      	movs	r3, #0
 800d870:	e040      	b.n	800d8f4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	681a      	ldr	r2, [r3, #0]
 800d876:	4922      	ldr	r1, [pc, #136]	; (800d900 <inc_lock+0x118>)
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	011b      	lsls	r3, r3, #4
 800d87c:	440b      	add	r3, r1
 800d87e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	689a      	ldr	r2, [r3, #8]
 800d884:	491e      	ldr	r1, [pc, #120]	; (800d900 <inc_lock+0x118>)
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	011b      	lsls	r3, r3, #4
 800d88a:	440b      	add	r3, r1
 800d88c:	3304      	adds	r3, #4
 800d88e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d894:	491a      	ldr	r1, [pc, #104]	; (800d900 <inc_lock+0x118>)
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	011b      	lsls	r3, r3, #4
 800d89a:	440b      	add	r3, r1
 800d89c:	3308      	adds	r3, #8
 800d89e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800d8a0:	4a17      	ldr	r2, [pc, #92]	; (800d900 <inc_lock+0x118>)
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	011b      	lsls	r3, r3, #4
 800d8a6:	4413      	add	r3, r2
 800d8a8:	330c      	adds	r3, #12
 800d8aa:	2200      	movs	r2, #0
 800d8ac:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800d8ae:	683b      	ldr	r3, [r7, #0]
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d009      	beq.n	800d8c8 <inc_lock+0xe0>
 800d8b4:	4a12      	ldr	r2, [pc, #72]	; (800d900 <inc_lock+0x118>)
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	011b      	lsls	r3, r3, #4
 800d8ba:	4413      	add	r3, r2
 800d8bc:	330c      	adds	r3, #12
 800d8be:	881b      	ldrh	r3, [r3, #0]
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d001      	beq.n	800d8c8 <inc_lock+0xe0>
 800d8c4:	2300      	movs	r3, #0
 800d8c6:	e015      	b.n	800d8f4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800d8c8:	683b      	ldr	r3, [r7, #0]
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d108      	bne.n	800d8e0 <inc_lock+0xf8>
 800d8ce:	4a0c      	ldr	r2, [pc, #48]	; (800d900 <inc_lock+0x118>)
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	011b      	lsls	r3, r3, #4
 800d8d4:	4413      	add	r3, r2
 800d8d6:	330c      	adds	r3, #12
 800d8d8:	881b      	ldrh	r3, [r3, #0]
 800d8da:	3301      	adds	r3, #1
 800d8dc:	b29a      	uxth	r2, r3
 800d8de:	e001      	b.n	800d8e4 <inc_lock+0xfc>
 800d8e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d8e4:	4906      	ldr	r1, [pc, #24]	; (800d900 <inc_lock+0x118>)
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	011b      	lsls	r3, r3, #4
 800d8ea:	440b      	add	r3, r1
 800d8ec:	330c      	adds	r3, #12
 800d8ee:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800d8f0:	68fb      	ldr	r3, [r7, #12]
 800d8f2:	3301      	adds	r3, #1
}
 800d8f4:	4618      	mov	r0, r3
 800d8f6:	3714      	adds	r7, #20
 800d8f8:	46bd      	mov	sp, r7
 800d8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8fe:	4770      	bx	lr
 800d900:	20000224 	.word	0x20000224

0800d904 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800d904:	b480      	push	{r7}
 800d906:	b085      	sub	sp, #20
 800d908:	af00      	add	r7, sp, #0
 800d90a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	3b01      	subs	r3, #1
 800d910:	607b      	str	r3, [r7, #4]
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	2b09      	cmp	r3, #9
 800d916:	d825      	bhi.n	800d964 <dec_lock+0x60>
		n = Files[i].ctr;
 800d918:	4a17      	ldr	r2, [pc, #92]	; (800d978 <dec_lock+0x74>)
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	011b      	lsls	r3, r3, #4
 800d91e:	4413      	add	r3, r2
 800d920:	330c      	adds	r3, #12
 800d922:	881b      	ldrh	r3, [r3, #0]
 800d924:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800d926:	89fb      	ldrh	r3, [r7, #14]
 800d928:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d92c:	d101      	bne.n	800d932 <dec_lock+0x2e>
 800d92e:	2300      	movs	r3, #0
 800d930:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800d932:	89fb      	ldrh	r3, [r7, #14]
 800d934:	2b00      	cmp	r3, #0
 800d936:	d002      	beq.n	800d93e <dec_lock+0x3a>
 800d938:	89fb      	ldrh	r3, [r7, #14]
 800d93a:	3b01      	subs	r3, #1
 800d93c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800d93e:	4a0e      	ldr	r2, [pc, #56]	; (800d978 <dec_lock+0x74>)
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	011b      	lsls	r3, r3, #4
 800d944:	4413      	add	r3, r2
 800d946:	330c      	adds	r3, #12
 800d948:	89fa      	ldrh	r2, [r7, #14]
 800d94a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800d94c:	89fb      	ldrh	r3, [r7, #14]
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d105      	bne.n	800d95e <dec_lock+0x5a>
 800d952:	4a09      	ldr	r2, [pc, #36]	; (800d978 <dec_lock+0x74>)
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	011b      	lsls	r3, r3, #4
 800d958:	4413      	add	r3, r2
 800d95a:	2200      	movs	r2, #0
 800d95c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800d95e:	2300      	movs	r3, #0
 800d960:	737b      	strb	r3, [r7, #13]
 800d962:	e001      	b.n	800d968 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800d964:	2302      	movs	r3, #2
 800d966:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800d968:	7b7b      	ldrb	r3, [r7, #13]
}
 800d96a:	4618      	mov	r0, r3
 800d96c:	3714      	adds	r7, #20
 800d96e:	46bd      	mov	sp, r7
 800d970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d974:	4770      	bx	lr
 800d976:	bf00      	nop
 800d978:	20000224 	.word	0x20000224

0800d97c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800d97c:	b480      	push	{r7}
 800d97e:	b085      	sub	sp, #20
 800d980:	af00      	add	r7, sp, #0
 800d982:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800d984:	2300      	movs	r3, #0
 800d986:	60fb      	str	r3, [r7, #12]
 800d988:	e010      	b.n	800d9ac <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800d98a:	4a0d      	ldr	r2, [pc, #52]	; (800d9c0 <clear_lock+0x44>)
 800d98c:	68fb      	ldr	r3, [r7, #12]
 800d98e:	011b      	lsls	r3, r3, #4
 800d990:	4413      	add	r3, r2
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	687a      	ldr	r2, [r7, #4]
 800d996:	429a      	cmp	r2, r3
 800d998:	d105      	bne.n	800d9a6 <clear_lock+0x2a>
 800d99a:	4a09      	ldr	r2, [pc, #36]	; (800d9c0 <clear_lock+0x44>)
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	011b      	lsls	r3, r3, #4
 800d9a0:	4413      	add	r3, r2
 800d9a2:	2200      	movs	r2, #0
 800d9a4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	3301      	adds	r3, #1
 800d9aa:	60fb      	str	r3, [r7, #12]
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	2b09      	cmp	r3, #9
 800d9b0:	d9eb      	bls.n	800d98a <clear_lock+0xe>
	}
}
 800d9b2:	bf00      	nop
 800d9b4:	3714      	adds	r7, #20
 800d9b6:	46bd      	mov	sp, r7
 800d9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9bc:	4770      	bx	lr
 800d9be:	bf00      	nop
 800d9c0:	20000224 	.word	0x20000224

0800d9c4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800d9c4:	b580      	push	{r7, lr}
 800d9c6:	b086      	sub	sp, #24
 800d9c8:	af00      	add	r7, sp, #0
 800d9ca:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800d9cc:	2300      	movs	r3, #0
 800d9ce:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	78db      	ldrb	r3, [r3, #3]
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d034      	beq.n	800da42 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9dc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	7858      	ldrb	r0, [r3, #1]
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800d9e8:	2301      	movs	r3, #1
 800d9ea:	697a      	ldr	r2, [r7, #20]
 800d9ec:	f7ff fbcc 	bl	800d188 <disk_write>
 800d9f0:	4603      	mov	r3, r0
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d002      	beq.n	800d9fc <sync_window+0x38>
			res = FR_DISK_ERR;
 800d9f6:	2301      	movs	r3, #1
 800d9f8:	73fb      	strb	r3, [r7, #15]
 800d9fa:	e022      	b.n	800da42 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	2200      	movs	r2, #0
 800da00:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da06:	697a      	ldr	r2, [r7, #20]
 800da08:	1ad2      	subs	r2, r2, r3
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da0e:	429a      	cmp	r2, r3
 800da10:	d217      	bcs.n	800da42 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	789b      	ldrb	r3, [r3, #2]
 800da16:	613b      	str	r3, [r7, #16]
 800da18:	e010      	b.n	800da3c <sync_window+0x78>
					wsect += fs->fsize;
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da1e:	697a      	ldr	r2, [r7, #20]
 800da20:	4413      	add	r3, r2
 800da22:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	7858      	ldrb	r0, [r3, #1]
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800da2e:	2301      	movs	r3, #1
 800da30:	697a      	ldr	r2, [r7, #20]
 800da32:	f7ff fba9 	bl	800d188 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800da36:	693b      	ldr	r3, [r7, #16]
 800da38:	3b01      	subs	r3, #1
 800da3a:	613b      	str	r3, [r7, #16]
 800da3c:	693b      	ldr	r3, [r7, #16]
 800da3e:	2b01      	cmp	r3, #1
 800da40:	d8eb      	bhi.n	800da1a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800da42:	7bfb      	ldrb	r3, [r7, #15]
}
 800da44:	4618      	mov	r0, r3
 800da46:	3718      	adds	r7, #24
 800da48:	46bd      	mov	sp, r7
 800da4a:	bd80      	pop	{r7, pc}

0800da4c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800da4c:	b580      	push	{r7, lr}
 800da4e:	b084      	sub	sp, #16
 800da50:	af00      	add	r7, sp, #0
 800da52:	6078      	str	r0, [r7, #4]
 800da54:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800da56:	2300      	movs	r3, #0
 800da58:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da5e:	683a      	ldr	r2, [r7, #0]
 800da60:	429a      	cmp	r2, r3
 800da62:	d01b      	beq.n	800da9c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800da64:	6878      	ldr	r0, [r7, #4]
 800da66:	f7ff ffad 	bl	800d9c4 <sync_window>
 800da6a:	4603      	mov	r3, r0
 800da6c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800da6e:	7bfb      	ldrb	r3, [r7, #15]
 800da70:	2b00      	cmp	r3, #0
 800da72:	d113      	bne.n	800da9c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	7858      	ldrb	r0, [r3, #1]
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800da7e:	2301      	movs	r3, #1
 800da80:	683a      	ldr	r2, [r7, #0]
 800da82:	f7ff fb61 	bl	800d148 <disk_read>
 800da86:	4603      	mov	r3, r0
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d004      	beq.n	800da96 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800da8c:	f04f 33ff 	mov.w	r3, #4294967295
 800da90:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800da92:	2301      	movs	r3, #1
 800da94:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	683a      	ldr	r2, [r7, #0]
 800da9a:	63da      	str	r2, [r3, #60]	; 0x3c
		}
	}
	return res;
 800da9c:	7bfb      	ldrb	r3, [r7, #15]
}
 800da9e:	4618      	mov	r0, r3
 800daa0:	3710      	adds	r7, #16
 800daa2:	46bd      	mov	sp, r7
 800daa4:	bd80      	pop	{r7, pc}
	...

0800daa8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800daa8:	b580      	push	{r7, lr}
 800daaa:	b084      	sub	sp, #16
 800daac:	af00      	add	r7, sp, #0
 800daae:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800dab0:	6878      	ldr	r0, [r7, #4]
 800dab2:	f7ff ff87 	bl	800d9c4 <sync_window>
 800dab6:	4603      	mov	r3, r0
 800dab8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800daba:	7bfb      	ldrb	r3, [r7, #15]
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d159      	bne.n	800db74 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	781b      	ldrb	r3, [r3, #0]
 800dac4:	2b03      	cmp	r3, #3
 800dac6:	d149      	bne.n	800db5c <sync_fs+0xb4>
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	791b      	ldrb	r3, [r3, #4]
 800dacc:	2b01      	cmp	r3, #1
 800dace:	d145      	bne.n	800db5c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	899b      	ldrh	r3, [r3, #12]
 800dada:	461a      	mov	r2, r3
 800dadc:	2100      	movs	r1, #0
 800dade:	f7ff fd78 	bl	800d5d2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	3340      	adds	r3, #64	; 0x40
 800dae6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800daea:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800daee:	4618      	mov	r0, r3
 800daf0:	f7ff fc80 	bl	800d3f4 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	3340      	adds	r3, #64	; 0x40
 800daf8:	4921      	ldr	r1, [pc, #132]	; (800db80 <sync_fs+0xd8>)
 800dafa:	4618      	mov	r0, r3
 800dafc:	f7ff fc95 	bl	800d42a <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	3340      	adds	r3, #64	; 0x40
 800db04:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800db08:	491e      	ldr	r1, [pc, #120]	; (800db84 <sync_fs+0xdc>)
 800db0a:	4618      	mov	r0, r3
 800db0c:	f7ff fc8d 	bl	800d42a <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	3340      	adds	r3, #64	; 0x40
 800db14:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	6a1b      	ldr	r3, [r3, #32]
 800db1c:	4619      	mov	r1, r3
 800db1e:	4610      	mov	r0, r2
 800db20:	f7ff fc83 	bl	800d42a <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	3340      	adds	r3, #64	; 0x40
 800db28:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	69db      	ldr	r3, [r3, #28]
 800db30:	4619      	mov	r1, r3
 800db32:	4610      	mov	r0, r2
 800db34:	f7ff fc79 	bl	800d42a <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db3c:	1c5a      	adds	r2, r3, #1
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	63da      	str	r2, [r3, #60]	; 0x3c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	7858      	ldrb	r0, [r3, #1]
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800db50:	2301      	movs	r3, #1
 800db52:	f7ff fb19 	bl	800d188 <disk_write>
			fs->fsi_flag = 0;
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	2200      	movs	r2, #0
 800db5a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	785b      	ldrb	r3, [r3, #1]
 800db60:	2200      	movs	r2, #0
 800db62:	2100      	movs	r1, #0
 800db64:	4618      	mov	r0, r3
 800db66:	f7ff fb2f 	bl	800d1c8 <disk_ioctl>
 800db6a:	4603      	mov	r3, r0
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d001      	beq.n	800db74 <sync_fs+0xcc>
 800db70:	2301      	movs	r3, #1
 800db72:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800db74:	7bfb      	ldrb	r3, [r7, #15]
}
 800db76:	4618      	mov	r0, r3
 800db78:	3710      	adds	r7, #16
 800db7a:	46bd      	mov	sp, r7
 800db7c:	bd80      	pop	{r7, pc}
 800db7e:	bf00      	nop
 800db80:	41615252 	.word	0x41615252
 800db84:	61417272 	.word	0x61417272

0800db88 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800db88:	b480      	push	{r7}
 800db8a:	b083      	sub	sp, #12
 800db8c:	af00      	add	r7, sp, #0
 800db8e:	6078      	str	r0, [r7, #4]
 800db90:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800db92:	683b      	ldr	r3, [r7, #0]
 800db94:	3b02      	subs	r3, #2
 800db96:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db9c:	3b02      	subs	r3, #2
 800db9e:	683a      	ldr	r2, [r7, #0]
 800dba0:	429a      	cmp	r2, r3
 800dba2:	d301      	bcc.n	800dba8 <clust2sect+0x20>
 800dba4:	2300      	movs	r3, #0
 800dba6:	e008      	b.n	800dbba <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	895b      	ldrh	r3, [r3, #10]
 800dbac:	461a      	mov	r2, r3
 800dbae:	683b      	ldr	r3, [r7, #0]
 800dbb0:	fb03 f202 	mul.w	r2, r3, r2
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbb8:	4413      	add	r3, r2
}
 800dbba:	4618      	mov	r0, r3
 800dbbc:	370c      	adds	r7, #12
 800dbbe:	46bd      	mov	sp, r7
 800dbc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbc4:	4770      	bx	lr
	...

0800dbc8 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800dbc8:	b590      	push	{r4, r7, lr}
 800dbca:	b089      	sub	sp, #36	; 0x24
 800dbcc:	af00      	add	r7, sp, #0
 800dbce:	6078      	str	r0, [r7, #4]
 800dbd0:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	61bb      	str	r3, [r7, #24]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800dbd8:	683b      	ldr	r3, [r7, #0]
 800dbda:	2b01      	cmp	r3, #1
 800dbdc:	d904      	bls.n	800dbe8 <get_fat+0x20>
 800dbde:	69bb      	ldr	r3, [r7, #24]
 800dbe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbe2:	683a      	ldr	r2, [r7, #0]
 800dbe4:	429a      	cmp	r2, r3
 800dbe6:	d302      	bcc.n	800dbee <get_fat+0x26>
		val = 1;	/* Internal error */
 800dbe8:	2301      	movs	r3, #1
 800dbea:	61fb      	str	r3, [r7, #28]
 800dbec:	e13a      	b.n	800de64 <get_fat+0x29c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800dbee:	f04f 33ff 	mov.w	r3, #4294967295
 800dbf2:	61fb      	str	r3, [r7, #28]

		switch (fs->fs_type) {
 800dbf4:	69bb      	ldr	r3, [r7, #24]
 800dbf6:	781b      	ldrb	r3, [r3, #0]
 800dbf8:	3b01      	subs	r3, #1
 800dbfa:	2b03      	cmp	r3, #3
 800dbfc:	f200 8126 	bhi.w	800de4c <get_fat+0x284>
 800dc00:	a201      	add	r2, pc, #4	; (adr r2, 800dc08 <get_fat+0x40>)
 800dc02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc06:	bf00      	nop
 800dc08:	0800dc19 	.word	0x0800dc19
 800dc0c:	0800dcc7 	.word	0x0800dcc7
 800dc10:	0800dd13 	.word	0x0800dd13
 800dc14:	0800dd63 	.word	0x0800dd63
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800dc18:	683b      	ldr	r3, [r7, #0]
 800dc1a:	60fb      	str	r3, [r7, #12]
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	085b      	lsrs	r3, r3, #1
 800dc20:	68fa      	ldr	r2, [r7, #12]
 800dc22:	4413      	add	r3, r2
 800dc24:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800dc26:	69bb      	ldr	r3, [r7, #24]
 800dc28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dc2a:	69bb      	ldr	r3, [r7, #24]
 800dc2c:	899b      	ldrh	r3, [r3, #12]
 800dc2e:	4619      	mov	r1, r3
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	fbb3 f3f1 	udiv	r3, r3, r1
 800dc36:	4413      	add	r3, r2
 800dc38:	4619      	mov	r1, r3
 800dc3a:	69b8      	ldr	r0, [r7, #24]
 800dc3c:	f7ff ff06 	bl	800da4c <move_window>
 800dc40:	4603      	mov	r3, r0
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	f040 8105 	bne.w	800de52 <get_fat+0x28a>
			wc = fs->win[bc++ % SS(fs)];
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	1c5a      	adds	r2, r3, #1
 800dc4c:	60fa      	str	r2, [r7, #12]
 800dc4e:	69ba      	ldr	r2, [r7, #24]
 800dc50:	8992      	ldrh	r2, [r2, #12]
 800dc52:	fbb3 f1f2 	udiv	r1, r3, r2
 800dc56:	fb02 f201 	mul.w	r2, r2, r1
 800dc5a:	1a9b      	subs	r3, r3, r2
 800dc5c:	69ba      	ldr	r2, [r7, #24]
 800dc5e:	4413      	add	r3, r2
 800dc60:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800dc64:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800dc66:	69bb      	ldr	r3, [r7, #24]
 800dc68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dc6a:	69bb      	ldr	r3, [r7, #24]
 800dc6c:	899b      	ldrh	r3, [r3, #12]
 800dc6e:	4619      	mov	r1, r3
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	fbb3 f3f1 	udiv	r3, r3, r1
 800dc76:	4413      	add	r3, r2
 800dc78:	4619      	mov	r1, r3
 800dc7a:	69b8      	ldr	r0, [r7, #24]
 800dc7c:	f7ff fee6 	bl	800da4c <move_window>
 800dc80:	4603      	mov	r3, r0
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	f040 80e7 	bne.w	800de56 <get_fat+0x28e>
			wc |= fs->win[bc % SS(fs)] << 8;
 800dc88:	69bb      	ldr	r3, [r7, #24]
 800dc8a:	899b      	ldrh	r3, [r3, #12]
 800dc8c:	461a      	mov	r2, r3
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	fbb3 f1f2 	udiv	r1, r3, r2
 800dc94:	fb02 f201 	mul.w	r2, r2, r1
 800dc98:	1a9b      	subs	r3, r3, r2
 800dc9a:	69ba      	ldr	r2, [r7, #24]
 800dc9c:	4413      	add	r3, r2
 800dc9e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800dca2:	021b      	lsls	r3, r3, #8
 800dca4:	461a      	mov	r2, r3
 800dca6:	68bb      	ldr	r3, [r7, #8]
 800dca8:	4313      	orrs	r3, r2
 800dcaa:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800dcac:	683b      	ldr	r3, [r7, #0]
 800dcae:	f003 0301 	and.w	r3, r3, #1
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d002      	beq.n	800dcbc <get_fat+0xf4>
 800dcb6:	68bb      	ldr	r3, [r7, #8]
 800dcb8:	091b      	lsrs	r3, r3, #4
 800dcba:	e002      	b.n	800dcc2 <get_fat+0xfa>
 800dcbc:	68bb      	ldr	r3, [r7, #8]
 800dcbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800dcc2:	61fb      	str	r3, [r7, #28]
			break;
 800dcc4:	e0ce      	b.n	800de64 <get_fat+0x29c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800dcc6:	69bb      	ldr	r3, [r7, #24]
 800dcc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dcca:	69bb      	ldr	r3, [r7, #24]
 800dccc:	899b      	ldrh	r3, [r3, #12]
 800dcce:	085b      	lsrs	r3, r3, #1
 800dcd0:	b29b      	uxth	r3, r3
 800dcd2:	4619      	mov	r1, r3
 800dcd4:	683b      	ldr	r3, [r7, #0]
 800dcd6:	fbb3 f3f1 	udiv	r3, r3, r1
 800dcda:	4413      	add	r3, r2
 800dcdc:	4619      	mov	r1, r3
 800dcde:	69b8      	ldr	r0, [r7, #24]
 800dce0:	f7ff feb4 	bl	800da4c <move_window>
 800dce4:	4603      	mov	r3, r0
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	f040 80b7 	bne.w	800de5a <get_fat+0x292>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800dcec:	69bb      	ldr	r3, [r7, #24]
 800dcee:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800dcf2:	683b      	ldr	r3, [r7, #0]
 800dcf4:	005b      	lsls	r3, r3, #1
 800dcf6:	69ba      	ldr	r2, [r7, #24]
 800dcf8:	8992      	ldrh	r2, [r2, #12]
 800dcfa:	fbb3 f0f2 	udiv	r0, r3, r2
 800dcfe:	fb02 f200 	mul.w	r2, r2, r0
 800dd02:	1a9b      	subs	r3, r3, r2
 800dd04:	440b      	add	r3, r1
 800dd06:	4618      	mov	r0, r3
 800dd08:	f7ff fa7c 	bl	800d204 <ld_word>
 800dd0c:	4603      	mov	r3, r0
 800dd0e:	61fb      	str	r3, [r7, #28]
			break;
 800dd10:	e0a8      	b.n	800de64 <get_fat+0x29c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800dd12:	69bb      	ldr	r3, [r7, #24]
 800dd14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dd16:	69bb      	ldr	r3, [r7, #24]
 800dd18:	899b      	ldrh	r3, [r3, #12]
 800dd1a:	089b      	lsrs	r3, r3, #2
 800dd1c:	b29b      	uxth	r3, r3
 800dd1e:	4619      	mov	r1, r3
 800dd20:	683b      	ldr	r3, [r7, #0]
 800dd22:	fbb3 f3f1 	udiv	r3, r3, r1
 800dd26:	4413      	add	r3, r2
 800dd28:	4619      	mov	r1, r3
 800dd2a:	69b8      	ldr	r0, [r7, #24]
 800dd2c:	f7ff fe8e 	bl	800da4c <move_window>
 800dd30:	4603      	mov	r3, r0
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	f040 8093 	bne.w	800de5e <get_fat+0x296>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800dd38:	69bb      	ldr	r3, [r7, #24]
 800dd3a:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800dd3e:	683b      	ldr	r3, [r7, #0]
 800dd40:	009b      	lsls	r3, r3, #2
 800dd42:	69ba      	ldr	r2, [r7, #24]
 800dd44:	8992      	ldrh	r2, [r2, #12]
 800dd46:	fbb3 f0f2 	udiv	r0, r3, r2
 800dd4a:	fb02 f200 	mul.w	r2, r2, r0
 800dd4e:	1a9b      	subs	r3, r3, r2
 800dd50:	440b      	add	r3, r1
 800dd52:	4618      	mov	r0, r3
 800dd54:	f7ff fa6e 	bl	800d234 <ld_dword>
 800dd58:	4603      	mov	r3, r0
 800dd5a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800dd5e:	61fb      	str	r3, [r7, #28]
			break;
 800dd60:	e080      	b.n	800de64 <get_fat+0x29c>
#if _FS_EXFAT
		case FS_EXFAT :
			if (obj->objsize) {
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800dd68:	4323      	orrs	r3, r4
 800dd6a:	d06f      	beq.n	800de4c <get_fat+0x284>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	689b      	ldr	r3, [r3, #8]
 800dd70:	683a      	ldr	r2, [r7, #0]
 800dd72:	1ad3      	subs	r3, r2, r3
 800dd74:	617b      	str	r3, [r7, #20]
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800dd7c:	f113 30ff 	adds.w	r0, r3, #4294967295
 800dd80:	f144 31ff 	adc.w	r1, r4, #4294967295
 800dd84:	69bb      	ldr	r3, [r7, #24]
 800dd86:	899b      	ldrh	r3, [r3, #12]
 800dd88:	b29b      	uxth	r3, r3
 800dd8a:	f04f 0400 	mov.w	r4, #0
 800dd8e:	461a      	mov	r2, r3
 800dd90:	4623      	mov	r3, r4
 800dd92:	f7f2 fa55 	bl	8000240 <__aeabi_uldivmod>
 800dd96:	4603      	mov	r3, r0
 800dd98:	460c      	mov	r4, r1
 800dd9a:	461a      	mov	r2, r3
 800dd9c:	69bb      	ldr	r3, [r7, #24]
 800dd9e:	895b      	ldrh	r3, [r3, #10]
 800dda0:	fbb2 f3f3 	udiv	r3, r2, r3
 800dda4:	613b      	str	r3, [r7, #16]

				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	79db      	ldrb	r3, [r3, #7]
 800ddaa:	2b02      	cmp	r3, #2
 800ddac:	d10e      	bne.n	800ddcc <get_fat+0x204>
					if (cofs <= clen) {
 800ddae:	697a      	ldr	r2, [r7, #20]
 800ddb0:	693b      	ldr	r3, [r7, #16]
 800ddb2:	429a      	cmp	r2, r3
 800ddb4:	d80a      	bhi.n	800ddcc <get_fat+0x204>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 800ddb6:	697a      	ldr	r2, [r7, #20]
 800ddb8:	693b      	ldr	r3, [r7, #16]
 800ddba:	429a      	cmp	r2, r3
 800ddbc:	d002      	beq.n	800ddc4 <get_fat+0x1fc>
 800ddbe:	683b      	ldr	r3, [r7, #0]
 800ddc0:	3301      	adds	r3, #1
 800ddc2:	e001      	b.n	800ddc8 <get_fat+0x200>
 800ddc4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800ddc8:	61fb      	str	r3, [r7, #28]
						break;
 800ddca:	e04b      	b.n	800de64 <get_fat+0x29c>
					}
				}
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	79db      	ldrb	r3, [r3, #7]
 800ddd0:	2b03      	cmp	r3, #3
 800ddd2:	d108      	bne.n	800dde6 <get_fat+0x21e>
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	699b      	ldr	r3, [r3, #24]
 800ddd8:	697a      	ldr	r2, [r7, #20]
 800ddda:	429a      	cmp	r2, r3
 800dddc:	d203      	bcs.n	800dde6 <get_fat+0x21e>
					val = clst + 1; 	/* Generate the value */
 800ddde:	683b      	ldr	r3, [r7, #0]
 800dde0:	3301      	adds	r3, #1
 800dde2:	61fb      	str	r3, [r7, #28]
					break;
 800dde4:	e03e      	b.n	800de64 <get_fat+0x29c>
				}
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	79db      	ldrb	r3, [r3, #7]
 800ddea:	2b02      	cmp	r3, #2
 800ddec:	d02e      	beq.n	800de4c <get_fat+0x284>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	69db      	ldr	r3, [r3, #28]
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d003      	beq.n	800ddfe <get_fat+0x236>
						val = 0x7FFFFFFF;	/* Generate EOC */
 800ddf6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800ddfa:	61fb      	str	r3, [r7, #28]
					} else {
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
					}
					break;
 800ddfc:	e032      	b.n	800de64 <get_fat+0x29c>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ddfe:	69bb      	ldr	r3, [r7, #24]
 800de00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800de02:	69bb      	ldr	r3, [r7, #24]
 800de04:	899b      	ldrh	r3, [r3, #12]
 800de06:	089b      	lsrs	r3, r3, #2
 800de08:	b29b      	uxth	r3, r3
 800de0a:	4619      	mov	r1, r3
 800de0c:	683b      	ldr	r3, [r7, #0]
 800de0e:	fbb3 f3f1 	udiv	r3, r3, r1
 800de12:	4413      	add	r3, r2
 800de14:	4619      	mov	r1, r3
 800de16:	69b8      	ldr	r0, [r7, #24]
 800de18:	f7ff fe18 	bl	800da4c <move_window>
 800de1c:	4603      	mov	r3, r0
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d11f      	bne.n	800de62 <get_fat+0x29a>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 800de22:	69bb      	ldr	r3, [r7, #24]
 800de24:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800de28:	683b      	ldr	r3, [r7, #0]
 800de2a:	009b      	lsls	r3, r3, #2
 800de2c:	69ba      	ldr	r2, [r7, #24]
 800de2e:	8992      	ldrh	r2, [r2, #12]
 800de30:	fbb3 f0f2 	udiv	r0, r3, r2
 800de34:	fb02 f200 	mul.w	r2, r2, r0
 800de38:	1a9b      	subs	r3, r3, r2
 800de3a:	440b      	add	r3, r1
 800de3c:	4618      	mov	r0, r3
 800de3e:	f7ff f9f9 	bl	800d234 <ld_dword>
 800de42:	4603      	mov	r3, r0
 800de44:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800de48:	61fb      	str	r3, [r7, #28]
					break;
 800de4a:	e00b      	b.n	800de64 <get_fat+0x29c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800de4c:	2301      	movs	r3, #1
 800de4e:	61fb      	str	r3, [r7, #28]
 800de50:	e008      	b.n	800de64 <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800de52:	bf00      	nop
 800de54:	e006      	b.n	800de64 <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800de56:	bf00      	nop
 800de58:	e004      	b.n	800de64 <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800de5a:	bf00      	nop
 800de5c:	e002      	b.n	800de64 <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800de5e:	bf00      	nop
 800de60:	e000      	b.n	800de64 <get_fat+0x29c>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800de62:	bf00      	nop
		}
	}

	return val;
 800de64:	69fb      	ldr	r3, [r7, #28]
}
 800de66:	4618      	mov	r0, r3
 800de68:	3724      	adds	r7, #36	; 0x24
 800de6a:	46bd      	mov	sp, r7
 800de6c:	bd90      	pop	{r4, r7, pc}
 800de6e:	bf00      	nop

0800de70 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800de70:	b590      	push	{r4, r7, lr}
 800de72:	b089      	sub	sp, #36	; 0x24
 800de74:	af00      	add	r7, sp, #0
 800de76:	60f8      	str	r0, [r7, #12]
 800de78:	60b9      	str	r1, [r7, #8]
 800de7a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800de7c:	2302      	movs	r3, #2
 800de7e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800de80:	68bb      	ldr	r3, [r7, #8]
 800de82:	2b01      	cmp	r3, #1
 800de84:	f240 8111 	bls.w	800e0aa <put_fat+0x23a>
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de8c:	68ba      	ldr	r2, [r7, #8]
 800de8e:	429a      	cmp	r2, r3
 800de90:	f080 810b 	bcs.w	800e0aa <put_fat+0x23a>
		switch (fs->fs_type) {
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	781b      	ldrb	r3, [r3, #0]
 800de98:	3b01      	subs	r3, #1
 800de9a:	2b03      	cmp	r3, #3
 800de9c:	f200 8105 	bhi.w	800e0aa <put_fat+0x23a>
 800dea0:	a201      	add	r2, pc, #4	; (adr r2, 800dea8 <put_fat+0x38>)
 800dea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dea6:	bf00      	nop
 800dea8:	0800deb9 	.word	0x0800deb9
 800deac:	0800dfbd 	.word	0x0800dfbd
 800deb0:	0800e013 	.word	0x0800e013
 800deb4:	0800e013 	.word	0x0800e013
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800deb8:	68bb      	ldr	r3, [r7, #8]
 800deba:	61bb      	str	r3, [r7, #24]
 800debc:	69bb      	ldr	r3, [r7, #24]
 800debe:	085b      	lsrs	r3, r3, #1
 800dec0:	69ba      	ldr	r2, [r7, #24]
 800dec2:	4413      	add	r3, r2
 800dec4:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	899b      	ldrh	r3, [r3, #12]
 800dece:	4619      	mov	r1, r3
 800ded0:	69bb      	ldr	r3, [r7, #24]
 800ded2:	fbb3 f3f1 	udiv	r3, r3, r1
 800ded6:	4413      	add	r3, r2
 800ded8:	4619      	mov	r1, r3
 800deda:	68f8      	ldr	r0, [r7, #12]
 800dedc:	f7ff fdb6 	bl	800da4c <move_window>
 800dee0:	4603      	mov	r3, r0
 800dee2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800dee4:	7ffb      	ldrb	r3, [r7, #31]
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	f040 80d8 	bne.w	800e09c <put_fat+0x22c>
			p = fs->win + bc++ % SS(fs);
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800def2:	69bb      	ldr	r3, [r7, #24]
 800def4:	1c5a      	adds	r2, r3, #1
 800def6:	61ba      	str	r2, [r7, #24]
 800def8:	68fa      	ldr	r2, [r7, #12]
 800defa:	8992      	ldrh	r2, [r2, #12]
 800defc:	fbb3 f0f2 	udiv	r0, r3, r2
 800df00:	fb02 f200 	mul.w	r2, r2, r0
 800df04:	1a9b      	subs	r3, r3, r2
 800df06:	440b      	add	r3, r1
 800df08:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800df0a:	68bb      	ldr	r3, [r7, #8]
 800df0c:	f003 0301 	and.w	r3, r3, #1
 800df10:	2b00      	cmp	r3, #0
 800df12:	d00d      	beq.n	800df30 <put_fat+0xc0>
 800df14:	697b      	ldr	r3, [r7, #20]
 800df16:	781b      	ldrb	r3, [r3, #0]
 800df18:	b25b      	sxtb	r3, r3
 800df1a:	f003 030f 	and.w	r3, r3, #15
 800df1e:	b25a      	sxtb	r2, r3
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	b2db      	uxtb	r3, r3
 800df24:	011b      	lsls	r3, r3, #4
 800df26:	b25b      	sxtb	r3, r3
 800df28:	4313      	orrs	r3, r2
 800df2a:	b25b      	sxtb	r3, r3
 800df2c:	b2db      	uxtb	r3, r3
 800df2e:	e001      	b.n	800df34 <put_fat+0xc4>
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	b2db      	uxtb	r3, r3
 800df34:	697a      	ldr	r2, [r7, #20]
 800df36:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	2201      	movs	r2, #1
 800df3c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800df42:	68fb      	ldr	r3, [r7, #12]
 800df44:	899b      	ldrh	r3, [r3, #12]
 800df46:	4619      	mov	r1, r3
 800df48:	69bb      	ldr	r3, [r7, #24]
 800df4a:	fbb3 f3f1 	udiv	r3, r3, r1
 800df4e:	4413      	add	r3, r2
 800df50:	4619      	mov	r1, r3
 800df52:	68f8      	ldr	r0, [r7, #12]
 800df54:	f7ff fd7a 	bl	800da4c <move_window>
 800df58:	4603      	mov	r3, r0
 800df5a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800df5c:	7ffb      	ldrb	r3, [r7, #31]
 800df5e:	2b00      	cmp	r3, #0
 800df60:	f040 809e 	bne.w	800e0a0 <put_fat+0x230>
			p = fs->win + bc % SS(fs);
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	899b      	ldrh	r3, [r3, #12]
 800df6e:	461a      	mov	r2, r3
 800df70:	69bb      	ldr	r3, [r7, #24]
 800df72:	fbb3 f0f2 	udiv	r0, r3, r2
 800df76:	fb02 f200 	mul.w	r2, r2, r0
 800df7a:	1a9b      	subs	r3, r3, r2
 800df7c:	440b      	add	r3, r1
 800df7e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800df80:	68bb      	ldr	r3, [r7, #8]
 800df82:	f003 0301 	and.w	r3, r3, #1
 800df86:	2b00      	cmp	r3, #0
 800df88:	d003      	beq.n	800df92 <put_fat+0x122>
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	091b      	lsrs	r3, r3, #4
 800df8e:	b2db      	uxtb	r3, r3
 800df90:	e00e      	b.n	800dfb0 <put_fat+0x140>
 800df92:	697b      	ldr	r3, [r7, #20]
 800df94:	781b      	ldrb	r3, [r3, #0]
 800df96:	b25b      	sxtb	r3, r3
 800df98:	f023 030f 	bic.w	r3, r3, #15
 800df9c:	b25a      	sxtb	r2, r3
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	0a1b      	lsrs	r3, r3, #8
 800dfa2:	b25b      	sxtb	r3, r3
 800dfa4:	f003 030f 	and.w	r3, r3, #15
 800dfa8:	b25b      	sxtb	r3, r3
 800dfaa:	4313      	orrs	r3, r2
 800dfac:	b25b      	sxtb	r3, r3
 800dfae:	b2db      	uxtb	r3, r3
 800dfb0:	697a      	ldr	r2, [r7, #20]
 800dfb2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	2201      	movs	r2, #1
 800dfb8:	70da      	strb	r2, [r3, #3]
			break;
 800dfba:	e076      	b.n	800e0aa <put_fat+0x23a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	899b      	ldrh	r3, [r3, #12]
 800dfc4:	085b      	lsrs	r3, r3, #1
 800dfc6:	b29b      	uxth	r3, r3
 800dfc8:	4619      	mov	r1, r3
 800dfca:	68bb      	ldr	r3, [r7, #8]
 800dfcc:	fbb3 f3f1 	udiv	r3, r3, r1
 800dfd0:	4413      	add	r3, r2
 800dfd2:	4619      	mov	r1, r3
 800dfd4:	68f8      	ldr	r0, [r7, #12]
 800dfd6:	f7ff fd39 	bl	800da4c <move_window>
 800dfda:	4603      	mov	r3, r0
 800dfdc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800dfde:	7ffb      	ldrb	r3, [r7, #31]
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d15f      	bne.n	800e0a4 <put_fat+0x234>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800dfea:	68bb      	ldr	r3, [r7, #8]
 800dfec:	005b      	lsls	r3, r3, #1
 800dfee:	68fa      	ldr	r2, [r7, #12]
 800dff0:	8992      	ldrh	r2, [r2, #12]
 800dff2:	fbb3 f0f2 	udiv	r0, r3, r2
 800dff6:	fb02 f200 	mul.w	r2, r2, r0
 800dffa:	1a9b      	subs	r3, r3, r2
 800dffc:	440b      	add	r3, r1
 800dffe:	687a      	ldr	r2, [r7, #4]
 800e000:	b292      	uxth	r2, r2
 800e002:	4611      	mov	r1, r2
 800e004:	4618      	mov	r0, r3
 800e006:	f7ff f9f5 	bl	800d3f4 <st_word>
			fs->wflag = 1;
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	2201      	movs	r2, #1
 800e00e:	70da      	strb	r2, [r3, #3]
			break;
 800e010:	e04b      	b.n	800e0aa <put_fat+0x23a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	899b      	ldrh	r3, [r3, #12]
 800e01a:	089b      	lsrs	r3, r3, #2
 800e01c:	b29b      	uxth	r3, r3
 800e01e:	4619      	mov	r1, r3
 800e020:	68bb      	ldr	r3, [r7, #8]
 800e022:	fbb3 f3f1 	udiv	r3, r3, r1
 800e026:	4413      	add	r3, r2
 800e028:	4619      	mov	r1, r3
 800e02a:	68f8      	ldr	r0, [r7, #12]
 800e02c:	f7ff fd0e 	bl	800da4c <move_window>
 800e030:	4603      	mov	r3, r0
 800e032:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e034:	7ffb      	ldrb	r3, [r7, #31]
 800e036:	2b00      	cmp	r3, #0
 800e038:	d136      	bne.n	800e0a8 <put_fat+0x238>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	781b      	ldrb	r3, [r3, #0]
 800e03e:	2b04      	cmp	r3, #4
 800e040:	d017      	beq.n	800e072 <put_fat+0x202>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800e048:	68fb      	ldr	r3, [r7, #12]
 800e04a:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800e04e:	68bb      	ldr	r3, [r7, #8]
 800e050:	009b      	lsls	r3, r3, #2
 800e052:	68fa      	ldr	r2, [r7, #12]
 800e054:	8992      	ldrh	r2, [r2, #12]
 800e056:	fbb3 f0f2 	udiv	r0, r3, r2
 800e05a:	fb02 f200 	mul.w	r2, r2, r0
 800e05e:	1a9b      	subs	r3, r3, r2
 800e060:	440b      	add	r3, r1
 800e062:	4618      	mov	r0, r3
 800e064:	f7ff f8e6 	bl	800d234 <ld_dword>
 800e068:	4603      	mov	r3, r0
 800e06a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800e06e:	4323      	orrs	r3, r4
 800e070:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800e078:	68bb      	ldr	r3, [r7, #8]
 800e07a:	009b      	lsls	r3, r3, #2
 800e07c:	68fa      	ldr	r2, [r7, #12]
 800e07e:	8992      	ldrh	r2, [r2, #12]
 800e080:	fbb3 f0f2 	udiv	r0, r3, r2
 800e084:	fb02 f200 	mul.w	r2, r2, r0
 800e088:	1a9b      	subs	r3, r3, r2
 800e08a:	440b      	add	r3, r1
 800e08c:	6879      	ldr	r1, [r7, #4]
 800e08e:	4618      	mov	r0, r3
 800e090:	f7ff f9cb 	bl	800d42a <st_dword>
			fs->wflag = 1;
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	2201      	movs	r2, #1
 800e098:	70da      	strb	r2, [r3, #3]
			break;
 800e09a:	e006      	b.n	800e0aa <put_fat+0x23a>
			if (res != FR_OK) break;
 800e09c:	bf00      	nop
 800e09e:	e004      	b.n	800e0aa <put_fat+0x23a>
			if (res != FR_OK) break;
 800e0a0:	bf00      	nop
 800e0a2:	e002      	b.n	800e0aa <put_fat+0x23a>
			if (res != FR_OK) break;
 800e0a4:	bf00      	nop
 800e0a6:	e000      	b.n	800e0aa <put_fat+0x23a>
			if (res != FR_OK) break;
 800e0a8:	bf00      	nop
		}
	}
	return res;
 800e0aa:	7ffb      	ldrb	r3, [r7, #31]
}
 800e0ac:	4618      	mov	r0, r3
 800e0ae:	3724      	adds	r7, #36	; 0x24
 800e0b0:	46bd      	mov	sp, r7
 800e0b2:	bd90      	pop	{r4, r7, pc}

0800e0b4 <find_bitmap>:
DWORD find_bitmap (	/* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to scan from */
	DWORD ncl	/* Number of contiguous clusters to find (1..) */
)
{
 800e0b4:	b580      	push	{r7, lr}
 800e0b6:	b08a      	sub	sp, #40	; 0x28
 800e0b8:	af00      	add	r7, sp, #0
 800e0ba:	60f8      	str	r0, [r7, #12]
 800e0bc:	60b9      	str	r1, [r7, #8]
 800e0be:	607a      	str	r2, [r7, #4]
	BYTE bm, bv;
	UINT i;
	DWORD val, scl, ctr;


	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 800e0c0:	68bb      	ldr	r3, [r7, #8]
 800e0c2:	3b02      	subs	r3, #2
 800e0c4:	60bb      	str	r3, [r7, #8]
	if (clst >= fs->n_fatent - 2) clst = 0;
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0ca:	3b02      	subs	r3, #2
 800e0cc:	68ba      	ldr	r2, [r7, #8]
 800e0ce:	429a      	cmp	r2, r3
 800e0d0:	d301      	bcc.n	800e0d6 <find_bitmap+0x22>
 800e0d2:	2300      	movs	r3, #0
 800e0d4:	60bb      	str	r3, [r7, #8]
	scl = val = clst; ctr = 0;
 800e0d6:	68bb      	ldr	r3, [r7, #8]
 800e0d8:	61fb      	str	r3, [r7, #28]
 800e0da:	69fb      	ldr	r3, [r7, #28]
 800e0dc:	61bb      	str	r3, [r7, #24]
 800e0de:	2300      	movs	r3, #0
 800e0e0:	617b      	str	r3, [r7, #20]
	for (;;) {
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e0e6:	69fb      	ldr	r3, [r7, #28]
 800e0e8:	08db      	lsrs	r3, r3, #3
 800e0ea:	68f9      	ldr	r1, [r7, #12]
 800e0ec:	8989      	ldrh	r1, [r1, #12]
 800e0ee:	fbb3 f3f1 	udiv	r3, r3, r1
 800e0f2:	4413      	add	r3, r2
 800e0f4:	4619      	mov	r1, r3
 800e0f6:	68f8      	ldr	r0, [r7, #12]
 800e0f8:	f7ff fca8 	bl	800da4c <move_window>
 800e0fc:	4603      	mov	r3, r0
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d002      	beq.n	800e108 <find_bitmap+0x54>
 800e102:	f04f 33ff 	mov.w	r3, #4294967295
 800e106:	e058      	b.n	800e1ba <find_bitmap+0x106>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 800e108:	69fb      	ldr	r3, [r7, #28]
 800e10a:	08db      	lsrs	r3, r3, #3
 800e10c:	68fa      	ldr	r2, [r7, #12]
 800e10e:	8992      	ldrh	r2, [r2, #12]
 800e110:	fbb3 f1f2 	udiv	r1, r3, r2
 800e114:	fb02 f201 	mul.w	r2, r2, r1
 800e118:	1a9b      	subs	r3, r3, r2
 800e11a:	623b      	str	r3, [r7, #32]
 800e11c:	69fb      	ldr	r3, [r7, #28]
 800e11e:	f003 0307 	and.w	r3, r3, #7
 800e122:	2201      	movs	r2, #1
 800e124:	fa02 f303 	lsl.w	r3, r2, r3
 800e128:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		do {
			do {
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 800e12c:	68fa      	ldr	r2, [r7, #12]
 800e12e:	6a3b      	ldr	r3, [r7, #32]
 800e130:	4413      	add	r3, r2
 800e132:	3340      	adds	r3, #64	; 0x40
 800e134:	781a      	ldrb	r2, [r3, #0]
 800e136:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e13a:	4013      	ands	r3, r2
 800e13c:	74fb      	strb	r3, [r7, #19]
 800e13e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e142:	005b      	lsls	r3, r3, #1
 800e144:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 800e148:	69fb      	ldr	r3, [r7, #28]
 800e14a:	3301      	adds	r3, #1
 800e14c:	61fb      	str	r3, [r7, #28]
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e152:	3b02      	subs	r3, #2
 800e154:	69fa      	ldr	r2, [r7, #28]
 800e156:	429a      	cmp	r2, r3
 800e158:	d307      	bcc.n	800e16a <find_bitmap+0xb6>
					val = 0; bm = 0; i = SS(fs);
 800e15a:	2300      	movs	r3, #0
 800e15c:	61fb      	str	r3, [r7, #28]
 800e15e:	2300      	movs	r3, #0
 800e160:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	899b      	ldrh	r3, [r3, #12]
 800e168:	623b      	str	r3, [r7, #32]
				}
				if (!bv) {	/* Is it a free cluster? */
 800e16a:	7cfb      	ldrb	r3, [r7, #19]
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d109      	bne.n	800e184 <find_bitmap+0xd0>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 800e170:	697b      	ldr	r3, [r7, #20]
 800e172:	3301      	adds	r3, #1
 800e174:	617b      	str	r3, [r7, #20]
 800e176:	697a      	ldr	r2, [r7, #20]
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	429a      	cmp	r2, r3
 800e17c:	d106      	bne.n	800e18c <find_bitmap+0xd8>
 800e17e:	69bb      	ldr	r3, [r7, #24]
 800e180:	3302      	adds	r3, #2
 800e182:	e01a      	b.n	800e1ba <find_bitmap+0x106>
				} else {
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
 800e184:	69fb      	ldr	r3, [r7, #28]
 800e186:	61bb      	str	r3, [r7, #24]
 800e188:	2300      	movs	r3, #0
 800e18a:	617b      	str	r3, [r7, #20]
				}
				if (val == clst) return 0;	/* All cluster scanned? */
 800e18c:	69fa      	ldr	r2, [r7, #28]
 800e18e:	68bb      	ldr	r3, [r7, #8]
 800e190:	429a      	cmp	r2, r3
 800e192:	d101      	bne.n	800e198 <find_bitmap+0xe4>
 800e194:	2300      	movs	r3, #0
 800e196:	e010      	b.n	800e1ba <find_bitmap+0x106>
			} while (bm);
 800e198:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d1c5      	bne.n	800e12c <find_bitmap+0x78>
			bm = 1;
 800e1a0:	2301      	movs	r3, #1
 800e1a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		} while (++i < SS(fs));
 800e1a6:	6a3b      	ldr	r3, [r7, #32]
 800e1a8:	3301      	adds	r3, #1
 800e1aa:	623b      	str	r3, [r7, #32]
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	899b      	ldrh	r3, [r3, #12]
 800e1b0:	461a      	mov	r2, r3
 800e1b2:	6a3b      	ldr	r3, [r7, #32]
 800e1b4:	4293      	cmp	r3, r2
 800e1b6:	d3b9      	bcc.n	800e12c <find_bitmap+0x78>
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 800e1b8:	e793      	b.n	800e0e2 <find_bitmap+0x2e>
	}
}
 800e1ba:	4618      	mov	r0, r3
 800e1bc:	3728      	adds	r7, #40	; 0x28
 800e1be:	46bd      	mov	sp, r7
 800e1c0:	bd80      	pop	{r7, pc}

0800e1c2 <change_bitmap>:
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to change from */
	DWORD ncl,	/* Number of clusters to be changed */
	int bv		/* bit value to be set (0 or 1) */
)
{
 800e1c2:	b580      	push	{r7, lr}
 800e1c4:	b088      	sub	sp, #32
 800e1c6:	af00      	add	r7, sp, #0
 800e1c8:	60f8      	str	r0, [r7, #12]
 800e1ca:	60b9      	str	r1, [r7, #8]
 800e1cc:	607a      	str	r2, [r7, #4]
 800e1ce:	603b      	str	r3, [r7, #0]
	BYTE bm;
	UINT i;
	DWORD sect;

	clst -= 2;	/* The first bit corresponds to cluster #2 */
 800e1d0:	68bb      	ldr	r3, [r7, #8]
 800e1d2:	3b02      	subs	r3, #2
 800e1d4:	60bb      	str	r3, [r7, #8]
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e1da:	68bb      	ldr	r3, [r7, #8]
 800e1dc:	08db      	lsrs	r3, r3, #3
 800e1de:	68f9      	ldr	r1, [r7, #12]
 800e1e0:	8989      	ldrh	r1, [r1, #12]
 800e1e2:	fbb3 f3f1 	udiv	r3, r3, r1
 800e1e6:	4413      	add	r3, r2
 800e1e8:	617b      	str	r3, [r7, #20]
	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
 800e1ea:	68bb      	ldr	r3, [r7, #8]
 800e1ec:	08db      	lsrs	r3, r3, #3
 800e1ee:	68fa      	ldr	r2, [r7, #12]
 800e1f0:	8992      	ldrh	r2, [r2, #12]
 800e1f2:	fbb3 f1f2 	udiv	r1, r3, r2
 800e1f6:	fb02 f201 	mul.w	r2, r2, r1
 800e1fa:	1a9b      	subs	r3, r3, r2
 800e1fc:	61bb      	str	r3, [r7, #24]
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
 800e1fe:	68bb      	ldr	r3, [r7, #8]
 800e200:	f003 0307 	and.w	r3, r3, #7
 800e204:	2201      	movs	r2, #1
 800e206:	fa02 f303 	lsl.w	r3, r2, r3
 800e20a:	77fb      	strb	r3, [r7, #31]
	for (;;) {
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800e20c:	697b      	ldr	r3, [r7, #20]
 800e20e:	1c5a      	adds	r2, r3, #1
 800e210:	617a      	str	r2, [r7, #20]
 800e212:	4619      	mov	r1, r3
 800e214:	68f8      	ldr	r0, [r7, #12]
 800e216:	f7ff fc19 	bl	800da4c <move_window>
 800e21a:	4603      	mov	r3, r0
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d001      	beq.n	800e224 <change_bitmap+0x62>
 800e220:	2301      	movs	r3, #1
 800e222:	e03f      	b.n	800e2a4 <change_bitmap+0xe2>
		do {
			do {
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 800e224:	68fa      	ldr	r2, [r7, #12]
 800e226:	69bb      	ldr	r3, [r7, #24]
 800e228:	4413      	add	r3, r2
 800e22a:	3340      	adds	r3, #64	; 0x40
 800e22c:	781a      	ldrb	r2, [r3, #0]
 800e22e:	7ffb      	ldrb	r3, [r7, #31]
 800e230:	4013      	ands	r3, r2
 800e232:	b2db      	uxtb	r3, r3
 800e234:	2b00      	cmp	r3, #0
 800e236:	bf14      	ite	ne
 800e238:	2301      	movne	r3, #1
 800e23a:	2300      	moveq	r3, #0
 800e23c:	b2db      	uxtb	r3, r3
 800e23e:	461a      	mov	r2, r3
 800e240:	683b      	ldr	r3, [r7, #0]
 800e242:	4293      	cmp	r3, r2
 800e244:	d101      	bne.n	800e24a <change_bitmap+0x88>
 800e246:	2302      	movs	r3, #2
 800e248:	e02c      	b.n	800e2a4 <change_bitmap+0xe2>
				fs->win[i] ^= bm;	/* Flip the bit */
 800e24a:	68fa      	ldr	r2, [r7, #12]
 800e24c:	69bb      	ldr	r3, [r7, #24]
 800e24e:	4413      	add	r3, r2
 800e250:	3340      	adds	r3, #64	; 0x40
 800e252:	781a      	ldrb	r2, [r3, #0]
 800e254:	7ffb      	ldrb	r3, [r7, #31]
 800e256:	4053      	eors	r3, r2
 800e258:	b2d9      	uxtb	r1, r3
 800e25a:	68fa      	ldr	r2, [r7, #12]
 800e25c:	69bb      	ldr	r3, [r7, #24]
 800e25e:	4413      	add	r3, r2
 800e260:	3340      	adds	r3, #64	; 0x40
 800e262:	460a      	mov	r2, r1
 800e264:	701a      	strb	r2, [r3, #0]
				fs->wflag = 1;
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	2201      	movs	r2, #1
 800e26a:	70da      	strb	r2, [r3, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	3b01      	subs	r3, #1
 800e270:	607b      	str	r3, [r7, #4]
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	2b00      	cmp	r3, #0
 800e276:	d101      	bne.n	800e27c <change_bitmap+0xba>
 800e278:	2300      	movs	r3, #0
 800e27a:	e013      	b.n	800e2a4 <change_bitmap+0xe2>
			} while (bm <<= 1);		/* Next bit */
 800e27c:	7ffb      	ldrb	r3, [r7, #31]
 800e27e:	005b      	lsls	r3, r3, #1
 800e280:	77fb      	strb	r3, [r7, #31]
 800e282:	7ffb      	ldrb	r3, [r7, #31]
 800e284:	2b00      	cmp	r3, #0
 800e286:	d1cd      	bne.n	800e224 <change_bitmap+0x62>
			bm = 1;
 800e288:	2301      	movs	r3, #1
 800e28a:	77fb      	strb	r3, [r7, #31]
		} while (++i < SS(fs));		/* Next byte */
 800e28c:	69bb      	ldr	r3, [r7, #24]
 800e28e:	3301      	adds	r3, #1
 800e290:	61bb      	str	r3, [r7, #24]
 800e292:	68fb      	ldr	r3, [r7, #12]
 800e294:	899b      	ldrh	r3, [r3, #12]
 800e296:	461a      	mov	r2, r3
 800e298:	69bb      	ldr	r3, [r7, #24]
 800e29a:	4293      	cmp	r3, r2
 800e29c:	d3c2      	bcc.n	800e224 <change_bitmap+0x62>
		i = 0;
 800e29e:	2300      	movs	r3, #0
 800e2a0:	61bb      	str	r3, [r7, #24]
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800e2a2:	e7b3      	b.n	800e20c <change_bitmap+0x4a>
	}
}
 800e2a4:	4618      	mov	r0, r3
 800e2a6:	3720      	adds	r7, #32
 800e2a8:	46bd      	mov	sp, r7
 800e2aa:	bd80      	pop	{r7, pc}

0800e2ac <fill_first_frag>:

static
FRESULT fill_first_frag (
	_FDID* obj	/* Pointer to the corresponding object */
)
{
 800e2ac:	b580      	push	{r7, lr}
 800e2ae:	b086      	sub	sp, #24
 800e2b0:	af00      	add	r7, sp, #0
 800e2b2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD cl, n;

	if (obj->stat == 3) {	/* Has the object been changed 'fragmented'? */
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	79db      	ldrb	r3, [r3, #7]
 800e2b8:	2b03      	cmp	r3, #3
 800e2ba:	d121      	bne.n	800e300 <fill_first_frag+0x54>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	689b      	ldr	r3, [r3, #8]
 800e2c0:	617b      	str	r3, [r7, #20]
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	699b      	ldr	r3, [r3, #24]
 800e2c6:	613b      	str	r3, [r7, #16]
 800e2c8:	e014      	b.n	800e2f4 <fill_first_frag+0x48>
			res = put_fat(obj->fs, cl, cl + 1);
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	6818      	ldr	r0, [r3, #0]
 800e2ce:	697b      	ldr	r3, [r7, #20]
 800e2d0:	3301      	adds	r3, #1
 800e2d2:	461a      	mov	r2, r3
 800e2d4:	6979      	ldr	r1, [r7, #20]
 800e2d6:	f7ff fdcb 	bl	800de70 <put_fat>
 800e2da:	4603      	mov	r3, r0
 800e2dc:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) return res;
 800e2de:	7bfb      	ldrb	r3, [r7, #15]
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d001      	beq.n	800e2e8 <fill_first_frag+0x3c>
 800e2e4:	7bfb      	ldrb	r3, [r7, #15]
 800e2e6:	e00c      	b.n	800e302 <fill_first_frag+0x56>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800e2e8:	697b      	ldr	r3, [r7, #20]
 800e2ea:	3301      	adds	r3, #1
 800e2ec:	617b      	str	r3, [r7, #20]
 800e2ee:	693b      	ldr	r3, [r7, #16]
 800e2f0:	3b01      	subs	r3, #1
 800e2f2:	613b      	str	r3, [r7, #16]
 800e2f4:	693b      	ldr	r3, [r7, #16]
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d1e7      	bne.n	800e2ca <fill_first_frag+0x1e>
		}
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	2200      	movs	r2, #0
 800e2fe:	71da      	strb	r2, [r3, #7]
	}
	return FR_OK;
 800e300:	2300      	movs	r3, #0
}
 800e302:	4618      	mov	r0, r3
 800e304:	3718      	adds	r7, #24
 800e306:	46bd      	mov	sp, r7
 800e308:	bd80      	pop	{r7, pc}

0800e30a <fill_last_frag>:
FRESULT fill_last_frag (
	_FDID* obj,	/* Pointer to the corresponding object */
	DWORD lcl,	/* Last cluster of the fragment */
	DWORD term	/* Value to set the last FAT entry */
)
{
 800e30a:	b580      	push	{r7, lr}
 800e30c:	b086      	sub	sp, #24
 800e30e:	af00      	add	r7, sp, #0
 800e310:	60f8      	str	r0, [r7, #12]
 800e312:	60b9      	str	r1, [r7, #8]
 800e314:	607a      	str	r2, [r7, #4]
	FRESULT res;

	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 800e316:	e020      	b.n	800e35a <fill_last_frag+0x50>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	6818      	ldr	r0, [r3, #0]
 800e31c:	68fb      	ldr	r3, [r7, #12]
 800e31e:	69db      	ldr	r3, [r3, #28]
 800e320:	68ba      	ldr	r2, [r7, #8]
 800e322:	1ad3      	subs	r3, r2, r3
 800e324:	1c59      	adds	r1, r3, #1
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	69db      	ldr	r3, [r3, #28]
 800e32a:	2b01      	cmp	r3, #1
 800e32c:	d905      	bls.n	800e33a <fill_last_frag+0x30>
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	69db      	ldr	r3, [r3, #28]
 800e332:	68ba      	ldr	r2, [r7, #8]
 800e334:	1ad3      	subs	r3, r2, r3
 800e336:	3302      	adds	r3, #2
 800e338:	e000      	b.n	800e33c <fill_last_frag+0x32>
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	461a      	mov	r2, r3
 800e33e:	f7ff fd97 	bl	800de70 <put_fat>
 800e342:	4603      	mov	r3, r0
 800e344:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 800e346:	7dfb      	ldrb	r3, [r7, #23]
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d001      	beq.n	800e350 <fill_last_frag+0x46>
 800e34c:	7dfb      	ldrb	r3, [r7, #23]
 800e34e:	e009      	b.n	800e364 <fill_last_frag+0x5a>
		obj->n_frag--;
 800e350:	68fb      	ldr	r3, [r7, #12]
 800e352:	69db      	ldr	r3, [r3, #28]
 800e354:	1e5a      	subs	r2, r3, #1
 800e356:	68fb      	ldr	r3, [r7, #12]
 800e358:	61da      	str	r2, [r3, #28]
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 800e35a:	68fb      	ldr	r3, [r7, #12]
 800e35c:	69db      	ldr	r3, [r3, #28]
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d1da      	bne.n	800e318 <fill_last_frag+0xe>
	}
	return FR_OK;
 800e362:	2300      	movs	r3, #0
}
 800e364:	4618      	mov	r0, r3
 800e366:	3718      	adds	r7, #24
 800e368:	46bd      	mov	sp, r7
 800e36a:	bd80      	pop	{r7, pc}

0800e36c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800e36c:	b580      	push	{r7, lr}
 800e36e:	b08a      	sub	sp, #40	; 0x28
 800e370:	af00      	add	r7, sp, #0
 800e372:	60f8      	str	r0, [r7, #12]
 800e374:	60b9      	str	r1, [r7, #8]
 800e376:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800e378:	2300      	movs	r3, #0
 800e37a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800e37c:	68fb      	ldr	r3, [r7, #12]
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	61bb      	str	r3, [r7, #24]
#if _FS_EXFAT || _USE_TRIM
	DWORD scl = clst, ecl = clst;
 800e382:	68bb      	ldr	r3, [r7, #8]
 800e384:	627b      	str	r3, [r7, #36]	; 0x24
 800e386:	68bb      	ldr	r3, [r7, #8]
 800e388:	623b      	str	r3, [r7, #32]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800e38a:	68bb      	ldr	r3, [r7, #8]
 800e38c:	2b01      	cmp	r3, #1
 800e38e:	d904      	bls.n	800e39a <remove_chain+0x2e>
 800e390:	69bb      	ldr	r3, [r7, #24]
 800e392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e394:	68ba      	ldr	r2, [r7, #8]
 800e396:	429a      	cmp	r2, r3
 800e398:	d301      	bcc.n	800e39e <remove_chain+0x32>
 800e39a:	2302      	movs	r3, #2
 800e39c:	e096      	b.n	800e4cc <remove_chain+0x160>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d014      	beq.n	800e3ce <remove_chain+0x62>
 800e3a4:	69bb      	ldr	r3, [r7, #24]
 800e3a6:	781b      	ldrb	r3, [r3, #0]
 800e3a8:	2b04      	cmp	r3, #4
 800e3aa:	d103      	bne.n	800e3b4 <remove_chain+0x48>
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	79db      	ldrb	r3, [r3, #7]
 800e3b0:	2b02      	cmp	r3, #2
 800e3b2:	d00c      	beq.n	800e3ce <remove_chain+0x62>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800e3b4:	f04f 32ff 	mov.w	r2, #4294967295
 800e3b8:	6879      	ldr	r1, [r7, #4]
 800e3ba:	69b8      	ldr	r0, [r7, #24]
 800e3bc:	f7ff fd58 	bl	800de70 <put_fat>
 800e3c0:	4603      	mov	r3, r0
 800e3c2:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800e3c4:	7ffb      	ldrb	r3, [r7, #31]
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d001      	beq.n	800e3ce <remove_chain+0x62>
 800e3ca:	7ffb      	ldrb	r3, [r7, #31]
 800e3cc:	e07e      	b.n	800e4cc <remove_chain+0x160>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800e3ce:	68b9      	ldr	r1, [r7, #8]
 800e3d0:	68f8      	ldr	r0, [r7, #12]
 800e3d2:	f7ff fbf9 	bl	800dbc8 <get_fat>
 800e3d6:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800e3d8:	697b      	ldr	r3, [r7, #20]
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d055      	beq.n	800e48a <remove_chain+0x11e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800e3de:	697b      	ldr	r3, [r7, #20]
 800e3e0:	2b01      	cmp	r3, #1
 800e3e2:	d101      	bne.n	800e3e8 <remove_chain+0x7c>
 800e3e4:	2302      	movs	r3, #2
 800e3e6:	e071      	b.n	800e4cc <remove_chain+0x160>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800e3e8:	697b      	ldr	r3, [r7, #20]
 800e3ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3ee:	d101      	bne.n	800e3f4 <remove_chain+0x88>
 800e3f0:	2301      	movs	r3, #1
 800e3f2:	e06b      	b.n	800e4cc <remove_chain+0x160>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800e3f4:	69bb      	ldr	r3, [r7, #24]
 800e3f6:	781b      	ldrb	r3, [r3, #0]
 800e3f8:	2b04      	cmp	r3, #4
 800e3fa:	d00b      	beq.n	800e414 <remove_chain+0xa8>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800e3fc:	2200      	movs	r2, #0
 800e3fe:	68b9      	ldr	r1, [r7, #8]
 800e400:	69b8      	ldr	r0, [r7, #24]
 800e402:	f7ff fd35 	bl	800de70 <put_fat>
 800e406:	4603      	mov	r3, r0
 800e408:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800e40a:	7ffb      	ldrb	r3, [r7, #31]
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d001      	beq.n	800e414 <remove_chain+0xa8>
 800e410:	7ffb      	ldrb	r3, [r7, #31]
 800e412:	e05b      	b.n	800e4cc <remove_chain+0x160>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800e414:	69bb      	ldr	r3, [r7, #24]
 800e416:	6a1a      	ldr	r2, [r3, #32]
 800e418:	69bb      	ldr	r3, [r7, #24]
 800e41a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e41c:	3b02      	subs	r3, #2
 800e41e:	429a      	cmp	r2, r3
 800e420:	d20b      	bcs.n	800e43a <remove_chain+0xce>
			fs->free_clst++;
 800e422:	69bb      	ldr	r3, [r7, #24]
 800e424:	6a1b      	ldr	r3, [r3, #32]
 800e426:	1c5a      	adds	r2, r3, #1
 800e428:	69bb      	ldr	r3, [r7, #24]
 800e42a:	621a      	str	r2, [r3, #32]
			fs->fsi_flag |= 1;
 800e42c:	69bb      	ldr	r3, [r7, #24]
 800e42e:	791b      	ldrb	r3, [r3, #4]
 800e430:	f043 0301 	orr.w	r3, r3, #1
 800e434:	b2da      	uxtb	r2, r3
 800e436:	69bb      	ldr	r3, [r7, #24]
 800e438:	711a      	strb	r2, [r3, #4]
		}
#if _FS_EXFAT || _USE_TRIM
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 800e43a:	6a3b      	ldr	r3, [r7, #32]
 800e43c:	3301      	adds	r3, #1
 800e43e:	697a      	ldr	r2, [r7, #20]
 800e440:	429a      	cmp	r2, r3
 800e442:	d102      	bne.n	800e44a <remove_chain+0xde>
			ecl = nxt;
 800e444:	697b      	ldr	r3, [r7, #20]
 800e446:	623b      	str	r3, [r7, #32]
 800e448:	e017      	b.n	800e47a <remove_chain+0x10e>
		} else {				/* End of contiguous cluster block */
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800e44a:	69bb      	ldr	r3, [r7, #24]
 800e44c:	781b      	ldrb	r3, [r3, #0]
 800e44e:	2b04      	cmp	r3, #4
 800e450:	d10f      	bne.n	800e472 <remove_chain+0x106>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 800e452:	6a3a      	ldr	r2, [r7, #32]
 800e454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e456:	1ad3      	subs	r3, r2, r3
 800e458:	1c5a      	adds	r2, r3, #1
 800e45a:	2300      	movs	r3, #0
 800e45c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e45e:	69b8      	ldr	r0, [r7, #24]
 800e460:	f7ff feaf 	bl	800e1c2 <change_bitmap>
 800e464:	4603      	mov	r3, r0
 800e466:	77fb      	strb	r3, [r7, #31]
				if (res != FR_OK) return res;
 800e468:	7ffb      	ldrb	r3, [r7, #31]
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d001      	beq.n	800e472 <remove_chain+0x106>
 800e46e:	7ffb      	ldrb	r3, [r7, #31]
 800e470:	e02c      	b.n	800e4cc <remove_chain+0x160>
#if _USE_TRIM
			rt[0] = clust2sect(fs, scl);					/* Start sector */
			rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
 800e472:	697b      	ldr	r3, [r7, #20]
 800e474:	623b      	str	r3, [r7, #32]
 800e476:	6a3b      	ldr	r3, [r7, #32]
 800e478:	627b      	str	r3, [r7, #36]	; 0x24
		}
#endif
		clst = nxt;					/* Next cluster */
 800e47a:	697b      	ldr	r3, [r7, #20]
 800e47c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800e47e:	69bb      	ldr	r3, [r7, #24]
 800e480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e482:	68ba      	ldr	r2, [r7, #8]
 800e484:	429a      	cmp	r2, r3
 800e486:	d3a2      	bcc.n	800e3ce <remove_chain+0x62>
 800e488:	e000      	b.n	800e48c <remove_chain+0x120>
		if (nxt == 0) break;				/* Empty cluster? */
 800e48a:	bf00      	nop

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {
 800e48c:	69bb      	ldr	r3, [r7, #24]
 800e48e:	781b      	ldrb	r3, [r3, #0]
 800e490:	2b04      	cmp	r3, #4
 800e492:	d11a      	bne.n	800e4ca <remove_chain+0x15e>
		if (pclst == 0) {	/* Does the object have no chain? */
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	2b00      	cmp	r3, #0
 800e498:	d103      	bne.n	800e4a2 <remove_chain+0x136>
			obj->stat = 0;		/* Change the object status 'initial' */
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	2200      	movs	r2, #0
 800e49e:	71da      	strb	r2, [r3, #7]
 800e4a0:	e013      	b.n	800e4ca <remove_chain+0x15e>
		} else {
			if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Did the chain get contiguous? */
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	79db      	ldrb	r3, [r3, #7]
 800e4a6:	2b03      	cmp	r3, #3
 800e4a8:	d10f      	bne.n	800e4ca <remove_chain+0x15e>
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	689b      	ldr	r3, [r3, #8]
 800e4ae:	687a      	ldr	r2, [r7, #4]
 800e4b0:	429a      	cmp	r2, r3
 800e4b2:	d30a      	bcc.n	800e4ca <remove_chain+0x15e>
 800e4b4:	68fb      	ldr	r3, [r7, #12]
 800e4b6:	689a      	ldr	r2, [r3, #8]
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	699b      	ldr	r3, [r3, #24]
 800e4bc:	4413      	add	r3, r2
 800e4be:	687a      	ldr	r2, [r7, #4]
 800e4c0:	429a      	cmp	r2, r3
 800e4c2:	d802      	bhi.n	800e4ca <remove_chain+0x15e>
				obj->stat = 2;	/* Change the object status 'contiguous' */
 800e4c4:	68fb      	ldr	r3, [r7, #12]
 800e4c6:	2202      	movs	r2, #2
 800e4c8:	71da      	strb	r2, [r3, #7]
			}
		}
	}
#endif
	return FR_OK;
 800e4ca:	2300      	movs	r3, #0
}
 800e4cc:	4618      	mov	r0, r3
 800e4ce:	3728      	adds	r7, #40	; 0x28
 800e4d0:	46bd      	mov	sp, r7
 800e4d2:	bd80      	pop	{r7, pc}

0800e4d4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800e4d4:	b580      	push	{r7, lr}
 800e4d6:	b088      	sub	sp, #32
 800e4d8:	af00      	add	r7, sp, #0
 800e4da:	6078      	str	r0, [r7, #4]
 800e4dc:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800e4e4:	683b      	ldr	r3, [r7, #0]
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d10d      	bne.n	800e506 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800e4ea:	693b      	ldr	r3, [r7, #16]
 800e4ec:	69db      	ldr	r3, [r3, #28]
 800e4ee:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800e4f0:	69bb      	ldr	r3, [r7, #24]
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d004      	beq.n	800e500 <create_chain+0x2c>
 800e4f6:	693b      	ldr	r3, [r7, #16]
 800e4f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4fa:	69ba      	ldr	r2, [r7, #24]
 800e4fc:	429a      	cmp	r2, r3
 800e4fe:	d31b      	bcc.n	800e538 <create_chain+0x64>
 800e500:	2301      	movs	r3, #1
 800e502:	61bb      	str	r3, [r7, #24]
 800e504:	e018      	b.n	800e538 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800e506:	6839      	ldr	r1, [r7, #0]
 800e508:	6878      	ldr	r0, [r7, #4]
 800e50a:	f7ff fb5d 	bl	800dbc8 <get_fat>
 800e50e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800e510:	68fb      	ldr	r3, [r7, #12]
 800e512:	2b01      	cmp	r3, #1
 800e514:	d801      	bhi.n	800e51a <create_chain+0x46>
 800e516:	2301      	movs	r3, #1
 800e518:	e0d9      	b.n	800e6ce <create_chain+0x1fa>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800e51a:	68fb      	ldr	r3, [r7, #12]
 800e51c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e520:	d101      	bne.n	800e526 <create_chain+0x52>
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	e0d3      	b.n	800e6ce <create_chain+0x1fa>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800e526:	693b      	ldr	r3, [r7, #16]
 800e528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e52a:	68fa      	ldr	r2, [r7, #12]
 800e52c:	429a      	cmp	r2, r3
 800e52e:	d201      	bcs.n	800e534 <create_chain+0x60>
 800e530:	68fb      	ldr	r3, [r7, #12]
 800e532:	e0cc      	b.n	800e6ce <create_chain+0x1fa>
		scl = clst;
 800e534:	683b      	ldr	r3, [r7, #0]
 800e536:	61bb      	str	r3, [r7, #24]
	}

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800e538:	693b      	ldr	r3, [r7, #16]
 800e53a:	781b      	ldrb	r3, [r3, #0]
 800e53c:	2b04      	cmp	r3, #4
 800e53e:	d164      	bne.n	800e60a <create_chain+0x136>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 800e540:	2201      	movs	r2, #1
 800e542:	69b9      	ldr	r1, [r7, #24]
 800e544:	6938      	ldr	r0, [r7, #16]
 800e546:	f7ff fdb5 	bl	800e0b4 <find_bitmap>
 800e54a:	61f8      	str	r0, [r7, #28]
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 800e54c:	69fb      	ldr	r3, [r7, #28]
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d003      	beq.n	800e55a <create_chain+0x86>
 800e552:	69fb      	ldr	r3, [r7, #28]
 800e554:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e558:	d101      	bne.n	800e55e <create_chain+0x8a>
 800e55a:	69fb      	ldr	r3, [r7, #28]
 800e55c:	e0b7      	b.n	800e6ce <create_chain+0x1fa>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 800e55e:	2301      	movs	r3, #1
 800e560:	2201      	movs	r2, #1
 800e562:	69f9      	ldr	r1, [r7, #28]
 800e564:	6938      	ldr	r0, [r7, #16]
 800e566:	f7ff fe2c 	bl	800e1c2 <change_bitmap>
 800e56a:	4603      	mov	r3, r0
 800e56c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_INT_ERR) return 1;
 800e56e:	7dfb      	ldrb	r3, [r7, #23]
 800e570:	2b02      	cmp	r3, #2
 800e572:	d101      	bne.n	800e578 <create_chain+0xa4>
 800e574:	2301      	movs	r3, #1
 800e576:	e0aa      	b.n	800e6ce <create_chain+0x1fa>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 800e578:	7dfb      	ldrb	r3, [r7, #23]
 800e57a:	2b01      	cmp	r3, #1
 800e57c:	d102      	bne.n	800e584 <create_chain+0xb0>
 800e57e:	f04f 33ff 	mov.w	r3, #4294967295
 800e582:	e0a4      	b.n	800e6ce <create_chain+0x1fa>
		if (clst == 0) {							/* Is it a new chain? */
 800e584:	683b      	ldr	r3, [r7, #0]
 800e586:	2b00      	cmp	r3, #0
 800e588:	d103      	bne.n	800e592 <create_chain+0xbe>
			obj->stat = 2;							/* Set status 'contiguous' */
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	2202      	movs	r2, #2
 800e58e:	71da      	strb	r2, [r3, #7]
 800e590:	e011      	b.n	800e5b6 <create_chain+0xe2>
		} else {									/* It is a stretched chain */
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	79db      	ldrb	r3, [r3, #7]
 800e596:	2b02      	cmp	r3, #2
 800e598:	d10d      	bne.n	800e5b6 <create_chain+0xe2>
 800e59a:	69bb      	ldr	r3, [r7, #24]
 800e59c:	3301      	adds	r3, #1
 800e59e:	69fa      	ldr	r2, [r7, #28]
 800e5a0:	429a      	cmp	r2, r3
 800e5a2:	d008      	beq.n	800e5b6 <create_chain+0xe2>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	689b      	ldr	r3, [r3, #8]
 800e5a8:	69ba      	ldr	r2, [r7, #24]
 800e5aa:	1ad2      	subs	r2, r2, r3
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	619a      	str	r2, [r3, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	2203      	movs	r2, #3
 800e5b4:	71da      	strb	r2, [r3, #7]
			}
		}
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	79db      	ldrb	r3, [r3, #7]
 800e5ba:	2b02      	cmp	r3, #2
 800e5bc:	d064      	beq.n	800e688 <create_chain+0x1b4>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 800e5be:	683b      	ldr	r3, [r7, #0]
 800e5c0:	3301      	adds	r3, #1
 800e5c2:	69fa      	ldr	r2, [r7, #28]
 800e5c4:	429a      	cmp	r2, r3
 800e5c6:	d10b      	bne.n	800e5e0 <create_chain+0x10c>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	69db      	ldr	r3, [r3, #28]
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d003      	beq.n	800e5d8 <create_chain+0x104>
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	69db      	ldr	r3, [r3, #28]
 800e5d4:	3301      	adds	r3, #1
 800e5d6:	e000      	b.n	800e5da <create_chain+0x106>
 800e5d8:	2302      	movs	r3, #2
 800e5da:	687a      	ldr	r2, [r7, #4]
 800e5dc:	61d3      	str	r3, [r2, #28]
 800e5de:	e053      	b.n	800e688 <create_chain+0x1b4>
			} else {				/* New fragment */
				if (obj->n_frag == 0) obj->n_frag = 1;
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	69db      	ldr	r3, [r3, #28]
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d102      	bne.n	800e5ee <create_chain+0x11a>
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	2201      	movs	r2, #1
 800e5ec:	61da      	str	r2, [r3, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 800e5ee:	69fa      	ldr	r2, [r7, #28]
 800e5f0:	6839      	ldr	r1, [r7, #0]
 800e5f2:	6878      	ldr	r0, [r7, #4]
 800e5f4:	f7ff fe89 	bl	800e30a <fill_last_frag>
 800e5f8:	4603      	mov	r3, r0
 800e5fa:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) obj->n_frag = 1;
 800e5fc:	7dfb      	ldrb	r3, [r7, #23]
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d142      	bne.n	800e688 <create_chain+0x1b4>
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	2201      	movs	r2, #1
 800e606:	61da      	str	r2, [r3, #28]
 800e608:	e03e      	b.n	800e688 <create_chain+0x1b4>
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800e60a:	69bb      	ldr	r3, [r7, #24]
 800e60c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800e60e:	69fb      	ldr	r3, [r7, #28]
 800e610:	3301      	adds	r3, #1
 800e612:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800e614:	693b      	ldr	r3, [r7, #16]
 800e616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e618:	69fa      	ldr	r2, [r7, #28]
 800e61a:	429a      	cmp	r2, r3
 800e61c:	d307      	bcc.n	800e62e <create_chain+0x15a>
				ncl = 2;
 800e61e:	2302      	movs	r3, #2
 800e620:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800e622:	69fa      	ldr	r2, [r7, #28]
 800e624:	69bb      	ldr	r3, [r7, #24]
 800e626:	429a      	cmp	r2, r3
 800e628:	d901      	bls.n	800e62e <create_chain+0x15a>
 800e62a:	2300      	movs	r3, #0
 800e62c:	e04f      	b.n	800e6ce <create_chain+0x1fa>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800e62e:	69f9      	ldr	r1, [r7, #28]
 800e630:	6878      	ldr	r0, [r7, #4]
 800e632:	f7ff fac9 	bl	800dbc8 <get_fat>
 800e636:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800e638:	68fb      	ldr	r3, [r7, #12]
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d00e      	beq.n	800e65c <create_chain+0x188>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	2b01      	cmp	r3, #1
 800e642:	d003      	beq.n	800e64c <create_chain+0x178>
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e64a:	d101      	bne.n	800e650 <create_chain+0x17c>
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	e03e      	b.n	800e6ce <create_chain+0x1fa>
			if (ncl == scl) return 0;		/* No free cluster */
 800e650:	69fa      	ldr	r2, [r7, #28]
 800e652:	69bb      	ldr	r3, [r7, #24]
 800e654:	429a      	cmp	r2, r3
 800e656:	d1da      	bne.n	800e60e <create_chain+0x13a>
 800e658:	2300      	movs	r3, #0
 800e65a:	e038      	b.n	800e6ce <create_chain+0x1fa>
			if (cs == 0) break;				/* Found a free cluster */
 800e65c:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800e65e:	f04f 32ff 	mov.w	r2, #4294967295
 800e662:	69f9      	ldr	r1, [r7, #28]
 800e664:	6938      	ldr	r0, [r7, #16]
 800e666:	f7ff fc03 	bl	800de70 <put_fat>
 800e66a:	4603      	mov	r3, r0
 800e66c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800e66e:	7dfb      	ldrb	r3, [r7, #23]
 800e670:	2b00      	cmp	r3, #0
 800e672:	d109      	bne.n	800e688 <create_chain+0x1b4>
 800e674:	683b      	ldr	r3, [r7, #0]
 800e676:	2b00      	cmp	r3, #0
 800e678:	d006      	beq.n	800e688 <create_chain+0x1b4>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800e67a:	69fa      	ldr	r2, [r7, #28]
 800e67c:	6839      	ldr	r1, [r7, #0]
 800e67e:	6938      	ldr	r0, [r7, #16]
 800e680:	f7ff fbf6 	bl	800de70 <put_fat>
 800e684:	4603      	mov	r3, r0
 800e686:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800e688:	7dfb      	ldrb	r3, [r7, #23]
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d116      	bne.n	800e6bc <create_chain+0x1e8>
		fs->last_clst = ncl;
 800e68e:	693b      	ldr	r3, [r7, #16]
 800e690:	69fa      	ldr	r2, [r7, #28]
 800e692:	61da      	str	r2, [r3, #28]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800e694:	693b      	ldr	r3, [r7, #16]
 800e696:	6a1a      	ldr	r2, [r3, #32]
 800e698:	693b      	ldr	r3, [r7, #16]
 800e69a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e69c:	3b02      	subs	r3, #2
 800e69e:	429a      	cmp	r2, r3
 800e6a0:	d804      	bhi.n	800e6ac <create_chain+0x1d8>
 800e6a2:	693b      	ldr	r3, [r7, #16]
 800e6a4:	6a1b      	ldr	r3, [r3, #32]
 800e6a6:	1e5a      	subs	r2, r3, #1
 800e6a8:	693b      	ldr	r3, [r7, #16]
 800e6aa:	621a      	str	r2, [r3, #32]
		fs->fsi_flag |= 1;
 800e6ac:	693b      	ldr	r3, [r7, #16]
 800e6ae:	791b      	ldrb	r3, [r3, #4]
 800e6b0:	f043 0301 	orr.w	r3, r3, #1
 800e6b4:	b2da      	uxtb	r2, r3
 800e6b6:	693b      	ldr	r3, [r7, #16]
 800e6b8:	711a      	strb	r2, [r3, #4]
 800e6ba:	e007      	b.n	800e6cc <create_chain+0x1f8>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800e6bc:	7dfb      	ldrb	r3, [r7, #23]
 800e6be:	2b01      	cmp	r3, #1
 800e6c0:	d102      	bne.n	800e6c8 <create_chain+0x1f4>
 800e6c2:	f04f 33ff 	mov.w	r3, #4294967295
 800e6c6:	e000      	b.n	800e6ca <create_chain+0x1f6>
 800e6c8:	2301      	movs	r3, #1
 800e6ca:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800e6cc:	69fb      	ldr	r3, [r7, #28]
}
 800e6ce:	4618      	mov	r0, r3
 800e6d0:	3720      	adds	r7, #32
 800e6d2:	46bd      	mov	sp, r7
 800e6d4:	bd80      	pop	{r7, pc}

0800e6d6 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800e6d6:	b590      	push	{r4, r7, lr}
 800e6d8:	b089      	sub	sp, #36	; 0x24
 800e6da:	af00      	add	r7, sp, #0
 800e6dc:	60f8      	str	r0, [r7, #12]
 800e6de:	e9c7 2300 	strd	r2, r3, [r7]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	681b      	ldr	r3, [r3, #0]
 800e6e6:	617b      	str	r3, [r7, #20]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e6ec:	3304      	adds	r3, #4
 800e6ee:	61bb      	str	r3, [r7, #24]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800e6f0:	697b      	ldr	r3, [r7, #20]
 800e6f2:	899b      	ldrh	r3, [r3, #12]
 800e6f4:	b29b      	uxth	r3, r3
 800e6f6:	f04f 0400 	mov.w	r4, #0
 800e6fa:	461a      	mov	r2, r3
 800e6fc:	4623      	mov	r3, r4
 800e6fe:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e702:	f7f1 fd9d 	bl	8000240 <__aeabi_uldivmod>
 800e706:	4603      	mov	r3, r0
 800e708:	460c      	mov	r4, r1
 800e70a:	4618      	mov	r0, r3
 800e70c:	4621      	mov	r1, r4
 800e70e:	697b      	ldr	r3, [r7, #20]
 800e710:	895b      	ldrh	r3, [r3, #10]
 800e712:	b29b      	uxth	r3, r3
 800e714:	f04f 0400 	mov.w	r4, #0
 800e718:	461a      	mov	r2, r3
 800e71a:	4623      	mov	r3, r4
 800e71c:	f7f1 fd90 	bl	8000240 <__aeabi_uldivmod>
 800e720:	4603      	mov	r3, r0
 800e722:	460c      	mov	r4, r1
 800e724:	61fb      	str	r3, [r7, #28]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800e726:	69bb      	ldr	r3, [r7, #24]
 800e728:	1d1a      	adds	r2, r3, #4
 800e72a:	61ba      	str	r2, [r7, #24]
 800e72c:	681b      	ldr	r3, [r3, #0]
 800e72e:	613b      	str	r3, [r7, #16]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800e730:	693b      	ldr	r3, [r7, #16]
 800e732:	2b00      	cmp	r3, #0
 800e734:	d101      	bne.n	800e73a <clmt_clust+0x64>
 800e736:	2300      	movs	r3, #0
 800e738:	e010      	b.n	800e75c <clmt_clust+0x86>
		if (cl < ncl) break;	/* In this fragment? */
 800e73a:	69fa      	ldr	r2, [r7, #28]
 800e73c:	693b      	ldr	r3, [r7, #16]
 800e73e:	429a      	cmp	r2, r3
 800e740:	d307      	bcc.n	800e752 <clmt_clust+0x7c>
		cl -= ncl; tbl++;		/* Next fragment */
 800e742:	69fa      	ldr	r2, [r7, #28]
 800e744:	693b      	ldr	r3, [r7, #16]
 800e746:	1ad3      	subs	r3, r2, r3
 800e748:	61fb      	str	r3, [r7, #28]
 800e74a:	69bb      	ldr	r3, [r7, #24]
 800e74c:	3304      	adds	r3, #4
 800e74e:	61bb      	str	r3, [r7, #24]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800e750:	e7e9      	b.n	800e726 <clmt_clust+0x50>
		if (cl < ncl) break;	/* In this fragment? */
 800e752:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800e754:	69bb      	ldr	r3, [r7, #24]
 800e756:	681a      	ldr	r2, [r3, #0]
 800e758:	69fb      	ldr	r3, [r7, #28]
 800e75a:	4413      	add	r3, r2
}
 800e75c:	4618      	mov	r0, r3
 800e75e:	3724      	adds	r7, #36	; 0x24
 800e760:	46bd      	mov	sp, r7
 800e762:	bd90      	pop	{r4, r7, pc}

0800e764 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800e764:	b580      	push	{r7, lr}
 800e766:	b086      	sub	sp, #24
 800e768:	af00      	add	r7, sp, #0
 800e76a:	6078      	str	r0, [r7, #4]
 800e76c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	681b      	ldr	r3, [r3, #0]
 800e772:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800e774:	693b      	ldr	r3, [r7, #16]
 800e776:	781b      	ldrb	r3, [r3, #0]
 800e778:	2b04      	cmp	r3, #4
 800e77a:	d102      	bne.n	800e782 <dir_sdi+0x1e>
 800e77c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e780:	e001      	b.n	800e786 <dir_sdi+0x22>
 800e782:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800e786:	683b      	ldr	r3, [r7, #0]
 800e788:	429a      	cmp	r2, r3
 800e78a:	d904      	bls.n	800e796 <dir_sdi+0x32>
 800e78c:	683b      	ldr	r3, [r7, #0]
 800e78e:	f003 031f 	and.w	r3, r3, #31
 800e792:	2b00      	cmp	r3, #0
 800e794:	d001      	beq.n	800e79a <dir_sdi+0x36>
		return FR_INT_ERR;
 800e796:	2302      	movs	r3, #2
 800e798:	e074      	b.n	800e884 <dir_sdi+0x120>
	}
	dp->dptr = ofs;				/* Set current offset */
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	683a      	ldr	r2, [r7, #0]
 800e79e:	631a      	str	r2, [r3, #48]	; 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	689b      	ldr	r3, [r3, #8]
 800e7a4:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800e7a6:	697b      	ldr	r3, [r7, #20]
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d109      	bne.n	800e7c0 <dir_sdi+0x5c>
 800e7ac:	693b      	ldr	r3, [r7, #16]
 800e7ae:	781b      	ldrb	r3, [r3, #0]
 800e7b0:	2b02      	cmp	r3, #2
 800e7b2:	d905      	bls.n	800e7c0 <dir_sdi+0x5c>
		clst = fs->dirbase;
 800e7b4:	693b      	ldr	r3, [r7, #16]
 800e7b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e7b8:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	2200      	movs	r2, #0
 800e7be:	71da      	strb	r2, [r3, #7]
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800e7c0:	697b      	ldr	r3, [r7, #20]
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d10c      	bne.n	800e7e0 <dir_sdi+0x7c>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800e7c6:	683b      	ldr	r3, [r7, #0]
 800e7c8:	095b      	lsrs	r3, r3, #5
 800e7ca:	693a      	ldr	r2, [r7, #16]
 800e7cc:	8912      	ldrh	r2, [r2, #8]
 800e7ce:	4293      	cmp	r3, r2
 800e7d0:	d301      	bcc.n	800e7d6 <dir_sdi+0x72>
 800e7d2:	2302      	movs	r3, #2
 800e7d4:	e056      	b.n	800e884 <dir_sdi+0x120>
		dp->sect = fs->dirbase;
 800e7d6:	693b      	ldr	r3, [r7, #16]
 800e7d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	639a      	str	r2, [r3, #56]	; 0x38
 800e7de:	e02d      	b.n	800e83c <dir_sdi+0xd8>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800e7e0:	693b      	ldr	r3, [r7, #16]
 800e7e2:	895b      	ldrh	r3, [r3, #10]
 800e7e4:	461a      	mov	r2, r3
 800e7e6:	693b      	ldr	r3, [r7, #16]
 800e7e8:	899b      	ldrh	r3, [r3, #12]
 800e7ea:	fb03 f302 	mul.w	r3, r3, r2
 800e7ee:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800e7f0:	e019      	b.n	800e826 <dir_sdi+0xc2>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	6979      	ldr	r1, [r7, #20]
 800e7f6:	4618      	mov	r0, r3
 800e7f8:	f7ff f9e6 	bl	800dbc8 <get_fat>
 800e7fc:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e7fe:	697b      	ldr	r3, [r7, #20]
 800e800:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e804:	d101      	bne.n	800e80a <dir_sdi+0xa6>
 800e806:	2301      	movs	r3, #1
 800e808:	e03c      	b.n	800e884 <dir_sdi+0x120>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800e80a:	697b      	ldr	r3, [r7, #20]
 800e80c:	2b01      	cmp	r3, #1
 800e80e:	d904      	bls.n	800e81a <dir_sdi+0xb6>
 800e810:	693b      	ldr	r3, [r7, #16]
 800e812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e814:	697a      	ldr	r2, [r7, #20]
 800e816:	429a      	cmp	r2, r3
 800e818:	d301      	bcc.n	800e81e <dir_sdi+0xba>
 800e81a:	2302      	movs	r3, #2
 800e81c:	e032      	b.n	800e884 <dir_sdi+0x120>
			ofs -= csz;
 800e81e:	683a      	ldr	r2, [r7, #0]
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	1ad3      	subs	r3, r2, r3
 800e824:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800e826:	683a      	ldr	r2, [r7, #0]
 800e828:	68fb      	ldr	r3, [r7, #12]
 800e82a:	429a      	cmp	r2, r3
 800e82c:	d2e1      	bcs.n	800e7f2 <dir_sdi+0x8e>
		}
		dp->sect = clust2sect(fs, clst);
 800e82e:	6979      	ldr	r1, [r7, #20]
 800e830:	6938      	ldr	r0, [r7, #16]
 800e832:	f7ff f9a9 	bl	800db88 <clust2sect>
 800e836:	4602      	mov	r2, r0
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	639a      	str	r2, [r3, #56]	; 0x38
	}
	dp->clust = clst;					/* Current cluster# */
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	697a      	ldr	r2, [r7, #20]
 800e840:	635a      	str	r2, [r3, #52]	; 0x34
	if (!dp->sect) return FR_INT_ERR;
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e846:	2b00      	cmp	r3, #0
 800e848:	d101      	bne.n	800e84e <dir_sdi+0xea>
 800e84a:	2302      	movs	r3, #2
 800e84c:	e01a      	b.n	800e884 <dir_sdi+0x120>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e852:	693b      	ldr	r3, [r7, #16]
 800e854:	899b      	ldrh	r3, [r3, #12]
 800e856:	4619      	mov	r1, r3
 800e858:	683b      	ldr	r3, [r7, #0]
 800e85a:	fbb3 f3f1 	udiv	r3, r3, r1
 800e85e:	441a      	add	r2, r3
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	639a      	str	r2, [r3, #56]	; 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800e864:	693b      	ldr	r3, [r7, #16]
 800e866:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800e86a:	693b      	ldr	r3, [r7, #16]
 800e86c:	899b      	ldrh	r3, [r3, #12]
 800e86e:	461a      	mov	r2, r3
 800e870:	683b      	ldr	r3, [r7, #0]
 800e872:	fbb3 f0f2 	udiv	r0, r3, r2
 800e876:	fb02 f200 	mul.w	r2, r2, r0
 800e87a:	1a9b      	subs	r3, r3, r2
 800e87c:	18ca      	adds	r2, r1, r3
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 800e882:	2300      	movs	r3, #0
}
 800e884:	4618      	mov	r0, r3
 800e886:	3718      	adds	r7, #24
 800e888:	46bd      	mov	sp, r7
 800e88a:	bd80      	pop	{r7, pc}

0800e88c <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800e88c:	b580      	push	{r7, lr}
 800e88e:	b086      	sub	sp, #24
 800e890:	af00      	add	r7, sp, #0
 800e892:	6078      	str	r0, [r7, #4]
 800e894:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8a0:	3320      	adds	r3, #32
 800e8a2:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d00b      	beq.n	800e8c4 <dir_next+0x38>
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	781b      	ldrb	r3, [r3, #0]
 800e8b0:	2b04      	cmp	r3, #4
 800e8b2:	d102      	bne.n	800e8ba <dir_next+0x2e>
 800e8b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e8b8:	e001      	b.n	800e8be <dir_next+0x32>
 800e8ba:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800e8be:	68bb      	ldr	r3, [r7, #8]
 800e8c0:	429a      	cmp	r2, r3
 800e8c2:	d801      	bhi.n	800e8c8 <dir_next+0x3c>
 800e8c4:	2304      	movs	r3, #4
 800e8c6:	e0c3      	b.n	800ea50 <dir_next+0x1c4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800e8c8:	68fb      	ldr	r3, [r7, #12]
 800e8ca:	899b      	ldrh	r3, [r3, #12]
 800e8cc:	461a      	mov	r2, r3
 800e8ce:	68bb      	ldr	r3, [r7, #8]
 800e8d0:	fbb3 f1f2 	udiv	r1, r3, r2
 800e8d4:	fb02 f201 	mul.w	r2, r2, r1
 800e8d8:	1a9b      	subs	r3, r3, r2
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	f040 80a5 	bne.w	800ea2a <dir_next+0x19e>
		dp->sect++;				/* Next sector */
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e8e4:	1c5a      	adds	r2, r3, #1
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	639a      	str	r2, [r3, #56]	; 0x38

		if (!dp->clust) {		/* Static table */
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d10b      	bne.n	800e90a <dir_next+0x7e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800e8f2:	68bb      	ldr	r3, [r7, #8]
 800e8f4:	095b      	lsrs	r3, r3, #5
 800e8f6:	68fa      	ldr	r2, [r7, #12]
 800e8f8:	8912      	ldrh	r2, [r2, #8]
 800e8fa:	4293      	cmp	r3, r2
 800e8fc:	f0c0 8095 	bcc.w	800ea2a <dir_next+0x19e>
				dp->sect = 0; return FR_NO_FILE;
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	2200      	movs	r2, #0
 800e904:	639a      	str	r2, [r3, #56]	; 0x38
 800e906:	2304      	movs	r3, #4
 800e908:	e0a2      	b.n	800ea50 <dir_next+0x1c4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	899b      	ldrh	r3, [r3, #12]
 800e90e:	461a      	mov	r2, r3
 800e910:	68bb      	ldr	r3, [r7, #8]
 800e912:	fbb3 f3f2 	udiv	r3, r3, r2
 800e916:	68fa      	ldr	r2, [r7, #12]
 800e918:	8952      	ldrh	r2, [r2, #10]
 800e91a:	3a01      	subs	r2, #1
 800e91c:	4013      	ands	r3, r2
 800e91e:	2b00      	cmp	r3, #0
 800e920:	f040 8083 	bne.w	800ea2a <dir_next+0x19e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800e924:	687a      	ldr	r2, [r7, #4]
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e92a:	4619      	mov	r1, r3
 800e92c:	4610      	mov	r0, r2
 800e92e:	f7ff f94b 	bl	800dbc8 <get_fat>
 800e932:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800e934:	697b      	ldr	r3, [r7, #20]
 800e936:	2b01      	cmp	r3, #1
 800e938:	d801      	bhi.n	800e93e <dir_next+0xb2>
 800e93a:	2302      	movs	r3, #2
 800e93c:	e088      	b.n	800ea50 <dir_next+0x1c4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800e93e:	697b      	ldr	r3, [r7, #20]
 800e940:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e944:	d101      	bne.n	800e94a <dir_next+0xbe>
 800e946:	2301      	movs	r3, #1
 800e948:	e082      	b.n	800ea50 <dir_next+0x1c4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e94e:	697a      	ldr	r2, [r7, #20]
 800e950:	429a      	cmp	r2, r3
 800e952:	d360      	bcc.n	800ea16 <dir_next+0x18a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800e954:	683b      	ldr	r3, [r7, #0]
 800e956:	2b00      	cmp	r3, #0
 800e958:	d104      	bne.n	800e964 <dir_next+0xd8>
						dp->sect = 0; return FR_NO_FILE;
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	2200      	movs	r2, #0
 800e95e:	639a      	str	r2, [r3, #56]	; 0x38
 800e960:	2304      	movs	r3, #4
 800e962:	e075      	b.n	800ea50 <dir_next+0x1c4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800e964:	687a      	ldr	r2, [r7, #4]
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e96a:	4619      	mov	r1, r3
 800e96c:	4610      	mov	r0, r2
 800e96e:	f7ff fdb1 	bl	800e4d4 <create_chain>
 800e972:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800e974:	697b      	ldr	r3, [r7, #20]
 800e976:	2b00      	cmp	r3, #0
 800e978:	d101      	bne.n	800e97e <dir_next+0xf2>
 800e97a:	2307      	movs	r3, #7
 800e97c:	e068      	b.n	800ea50 <dir_next+0x1c4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800e97e:	697b      	ldr	r3, [r7, #20]
 800e980:	2b01      	cmp	r3, #1
 800e982:	d101      	bne.n	800e988 <dir_next+0xfc>
 800e984:	2302      	movs	r3, #2
 800e986:	e063      	b.n	800ea50 <dir_next+0x1c4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e988:	697b      	ldr	r3, [r7, #20]
 800e98a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e98e:	d101      	bne.n	800e994 <dir_next+0x108>
 800e990:	2301      	movs	r3, #1
 800e992:	e05d      	b.n	800ea50 <dir_next+0x1c4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	79db      	ldrb	r3, [r3, #7]
 800e998:	f043 0304 	orr.w	r3, r3, #4
 800e99c:	b2da      	uxtb	r2, r3
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	71da      	strb	r2, [r3, #7]
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800e9a2:	68f8      	ldr	r0, [r7, #12]
 800e9a4:	f7ff f80e 	bl	800d9c4 <sync_window>
 800e9a8:	4603      	mov	r3, r0
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d001      	beq.n	800e9b2 <dir_next+0x126>
 800e9ae:	2301      	movs	r3, #1
 800e9b0:	e04e      	b.n	800ea50 <dir_next+0x1c4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800e9b2:	68fb      	ldr	r3, [r7, #12]
 800e9b4:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	899b      	ldrh	r3, [r3, #12]
 800e9bc:	461a      	mov	r2, r3
 800e9be:	2100      	movs	r1, #0
 800e9c0:	f7fe fe07 	bl	800d5d2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800e9c4:	2300      	movs	r3, #0
 800e9c6:	613b      	str	r3, [r7, #16]
 800e9c8:	6979      	ldr	r1, [r7, #20]
 800e9ca:	68f8      	ldr	r0, [r7, #12]
 800e9cc:	f7ff f8dc 	bl	800db88 <clust2sect>
 800e9d0:	4602      	mov	r2, r0
 800e9d2:	68fb      	ldr	r3, [r7, #12]
 800e9d4:	63da      	str	r2, [r3, #60]	; 0x3c
 800e9d6:	e012      	b.n	800e9fe <dir_next+0x172>
						fs->wflag = 1;
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	2201      	movs	r2, #1
 800e9dc:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800e9de:	68f8      	ldr	r0, [r7, #12]
 800e9e0:	f7fe fff0 	bl	800d9c4 <sync_window>
 800e9e4:	4603      	mov	r3, r0
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d001      	beq.n	800e9ee <dir_next+0x162>
 800e9ea:	2301      	movs	r3, #1
 800e9ec:	e030      	b.n	800ea50 <dir_next+0x1c4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800e9ee:	693b      	ldr	r3, [r7, #16]
 800e9f0:	3301      	adds	r3, #1
 800e9f2:	613b      	str	r3, [r7, #16]
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e9f8:	1c5a      	adds	r2, r3, #1
 800e9fa:	68fb      	ldr	r3, [r7, #12]
 800e9fc:	63da      	str	r2, [r3, #60]	; 0x3c
 800e9fe:	68fb      	ldr	r3, [r7, #12]
 800ea00:	895b      	ldrh	r3, [r3, #10]
 800ea02:	461a      	mov	r2, r3
 800ea04:	693b      	ldr	r3, [r7, #16]
 800ea06:	4293      	cmp	r3, r2
 800ea08:	d3e6      	bcc.n	800e9d8 <dir_next+0x14c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800ea0a:	68fb      	ldr	r3, [r7, #12]
 800ea0c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ea0e:	693b      	ldr	r3, [r7, #16]
 800ea10:	1ad2      	subs	r2, r2, r3
 800ea12:	68fb      	ldr	r3, [r7, #12]
 800ea14:	63da      	str	r2, [r3, #60]	; 0x3c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	697a      	ldr	r2, [r7, #20]
 800ea1a:	635a      	str	r2, [r3, #52]	; 0x34
				dp->sect = clust2sect(fs, clst);
 800ea1c:	6979      	ldr	r1, [r7, #20]
 800ea1e:	68f8      	ldr	r0, [r7, #12]
 800ea20:	f7ff f8b2 	bl	800db88 <clust2sect>
 800ea24:	4602      	mov	r2, r0
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	639a      	str	r2, [r3, #56]	; 0x38
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	68ba      	ldr	r2, [r7, #8]
 800ea2e:	631a      	str	r2, [r3, #48]	; 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800ea30:	68fb      	ldr	r3, [r7, #12]
 800ea32:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800ea36:	68fb      	ldr	r3, [r7, #12]
 800ea38:	899b      	ldrh	r3, [r3, #12]
 800ea3a:	461a      	mov	r2, r3
 800ea3c:	68bb      	ldr	r3, [r7, #8]
 800ea3e:	fbb3 f0f2 	udiv	r0, r3, r2
 800ea42:	fb02 f200 	mul.w	r2, r2, r0
 800ea46:	1a9b      	subs	r3, r3, r2
 800ea48:	18ca      	adds	r2, r1, r3
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 800ea4e:	2300      	movs	r3, #0
}
 800ea50:	4618      	mov	r0, r3
 800ea52:	3718      	adds	r7, #24
 800ea54:	46bd      	mov	sp, r7
 800ea56:	bd80      	pop	{r7, pc}

0800ea58 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800ea58:	b580      	push	{r7, lr}
 800ea5a:	b086      	sub	sp, #24
 800ea5c:	af00      	add	r7, sp, #0
 800ea5e:	6078      	str	r0, [r7, #4]
 800ea60:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800ea68:	2100      	movs	r1, #0
 800ea6a:	6878      	ldr	r0, [r7, #4]
 800ea6c:	f7ff fe7a 	bl	800e764 <dir_sdi>
 800ea70:	4603      	mov	r3, r0
 800ea72:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ea74:	7dfb      	ldrb	r3, [r7, #23]
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d140      	bne.n	800eafc <dir_alloc+0xa4>
		n = 0;
 800ea7a:	2300      	movs	r3, #0
 800ea7c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea82:	4619      	mov	r1, r3
 800ea84:	68f8      	ldr	r0, [r7, #12]
 800ea86:	f7fe ffe1 	bl	800da4c <move_window>
 800ea8a:	4603      	mov	r3, r0
 800ea8c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ea8e:	7dfb      	ldrb	r3, [r7, #23]
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d132      	bne.n	800eafa <dir_alloc+0xa2>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	781b      	ldrb	r3, [r3, #0]
 800ea98:	2b04      	cmp	r3, #4
 800ea9a:	d108      	bne.n	800eaae <dir_alloc+0x56>
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eaa0:	781b      	ldrb	r3, [r3, #0]
 800eaa2:	b25b      	sxtb	r3, r3
 800eaa4:	43db      	mvns	r3, r3
 800eaa6:	b2db      	uxtb	r3, r3
 800eaa8:	09db      	lsrs	r3, r3, #7
 800eaaa:	b2db      	uxtb	r3, r3
 800eaac:	e00f      	b.n	800eace <dir_alloc+0x76>
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eab2:	781b      	ldrb	r3, [r3, #0]
 800eab4:	2be5      	cmp	r3, #229	; 0xe5
 800eab6:	d004      	beq.n	800eac2 <dir_alloc+0x6a>
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eabc:	781b      	ldrb	r3, [r3, #0]
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	d101      	bne.n	800eac6 <dir_alloc+0x6e>
 800eac2:	2301      	movs	r3, #1
 800eac4:	e000      	b.n	800eac8 <dir_alloc+0x70>
 800eac6:	2300      	movs	r3, #0
 800eac8:	f003 0301 	and.w	r3, r3, #1
 800eacc:	b2db      	uxtb	r3, r3
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d007      	beq.n	800eae2 <dir_alloc+0x8a>
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800ead2:	693b      	ldr	r3, [r7, #16]
 800ead4:	3301      	adds	r3, #1
 800ead6:	613b      	str	r3, [r7, #16]
 800ead8:	693a      	ldr	r2, [r7, #16]
 800eada:	683b      	ldr	r3, [r7, #0]
 800eadc:	429a      	cmp	r2, r3
 800eade:	d102      	bne.n	800eae6 <dir_alloc+0x8e>
 800eae0:	e00c      	b.n	800eafc <dir_alloc+0xa4>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800eae2:	2300      	movs	r3, #0
 800eae4:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800eae6:	2101      	movs	r1, #1
 800eae8:	6878      	ldr	r0, [r7, #4]
 800eaea:	f7ff fecf 	bl	800e88c <dir_next>
 800eaee:	4603      	mov	r3, r0
 800eaf0:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800eaf2:	7dfb      	ldrb	r3, [r7, #23]
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d0c2      	beq.n	800ea7e <dir_alloc+0x26>
 800eaf8:	e000      	b.n	800eafc <dir_alloc+0xa4>
			if (res != FR_OK) break;
 800eafa:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800eafc:	7dfb      	ldrb	r3, [r7, #23]
 800eafe:	2b04      	cmp	r3, #4
 800eb00:	d101      	bne.n	800eb06 <dir_alloc+0xae>
 800eb02:	2307      	movs	r3, #7
 800eb04:	75fb      	strb	r3, [r7, #23]
	return res;
 800eb06:	7dfb      	ldrb	r3, [r7, #23]
}
 800eb08:	4618      	mov	r0, r3
 800eb0a:	3718      	adds	r7, #24
 800eb0c:	46bd      	mov	sp, r7
 800eb0e:	bd80      	pop	{r7, pc}

0800eb10 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800eb10:	b580      	push	{r7, lr}
 800eb12:	b084      	sub	sp, #16
 800eb14:	af00      	add	r7, sp, #0
 800eb16:	6078      	str	r0, [r7, #4]
 800eb18:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800eb1a:	683b      	ldr	r3, [r7, #0]
 800eb1c:	331a      	adds	r3, #26
 800eb1e:	4618      	mov	r0, r3
 800eb20:	f7fe fb70 	bl	800d204 <ld_word>
 800eb24:	4603      	mov	r3, r0
 800eb26:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	781b      	ldrb	r3, [r3, #0]
 800eb2c:	2b03      	cmp	r3, #3
 800eb2e:	d109      	bne.n	800eb44 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800eb30:	683b      	ldr	r3, [r7, #0]
 800eb32:	3314      	adds	r3, #20
 800eb34:	4618      	mov	r0, r3
 800eb36:	f7fe fb65 	bl	800d204 <ld_word>
 800eb3a:	4603      	mov	r3, r0
 800eb3c:	041b      	lsls	r3, r3, #16
 800eb3e:	68fa      	ldr	r2, [r7, #12]
 800eb40:	4313      	orrs	r3, r2
 800eb42:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800eb44:	68fb      	ldr	r3, [r7, #12]
}
 800eb46:	4618      	mov	r0, r3
 800eb48:	3710      	adds	r7, #16
 800eb4a:	46bd      	mov	sp, r7
 800eb4c:	bd80      	pop	{r7, pc}

0800eb4e <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800eb4e:	b580      	push	{r7, lr}
 800eb50:	b084      	sub	sp, #16
 800eb52:	af00      	add	r7, sp, #0
 800eb54:	60f8      	str	r0, [r7, #12]
 800eb56:	60b9      	str	r1, [r7, #8]
 800eb58:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800eb5a:	68bb      	ldr	r3, [r7, #8]
 800eb5c:	331a      	adds	r3, #26
 800eb5e:	687a      	ldr	r2, [r7, #4]
 800eb60:	b292      	uxth	r2, r2
 800eb62:	4611      	mov	r1, r2
 800eb64:	4618      	mov	r0, r3
 800eb66:	f7fe fc45 	bl	800d3f4 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800eb6a:	68fb      	ldr	r3, [r7, #12]
 800eb6c:	781b      	ldrb	r3, [r3, #0]
 800eb6e:	2b03      	cmp	r3, #3
 800eb70:	d109      	bne.n	800eb86 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800eb72:	68bb      	ldr	r3, [r7, #8]
 800eb74:	f103 0214 	add.w	r2, r3, #20
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	0c1b      	lsrs	r3, r3, #16
 800eb7c:	b29b      	uxth	r3, r3
 800eb7e:	4619      	mov	r1, r3
 800eb80:	4610      	mov	r0, r2
 800eb82:	f7fe fc37 	bl	800d3f4 <st_word>
	}
}
 800eb86:	bf00      	nop
 800eb88:	3710      	adds	r7, #16
 800eb8a:	46bd      	mov	sp, r7
 800eb8c:	bd80      	pop	{r7, pc}
	...

0800eb90 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800eb90:	b590      	push	{r4, r7, lr}
 800eb92:	b087      	sub	sp, #28
 800eb94:	af00      	add	r7, sp, #0
 800eb96:	6078      	str	r0, [r7, #4]
 800eb98:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800eb9a:	683b      	ldr	r3, [r7, #0]
 800eb9c:	331a      	adds	r3, #26
 800eb9e:	4618      	mov	r0, r3
 800eba0:	f7fe fb30 	bl	800d204 <ld_word>
 800eba4:	4603      	mov	r3, r0
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d001      	beq.n	800ebae <cmp_lfn+0x1e>
 800ebaa:	2300      	movs	r3, #0
 800ebac:	e059      	b.n	800ec62 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800ebae:	683b      	ldr	r3, [r7, #0]
 800ebb0:	781b      	ldrb	r3, [r3, #0]
 800ebb2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ebb6:	1e5a      	subs	r2, r3, #1
 800ebb8:	4613      	mov	r3, r2
 800ebba:	005b      	lsls	r3, r3, #1
 800ebbc:	4413      	add	r3, r2
 800ebbe:	009b      	lsls	r3, r3, #2
 800ebc0:	4413      	add	r3, r2
 800ebc2:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800ebc4:	2301      	movs	r3, #1
 800ebc6:	81fb      	strh	r3, [r7, #14]
 800ebc8:	2300      	movs	r3, #0
 800ebca:	613b      	str	r3, [r7, #16]
 800ebcc:	e033      	b.n	800ec36 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800ebce:	4a27      	ldr	r2, [pc, #156]	; (800ec6c <cmp_lfn+0xdc>)
 800ebd0:	693b      	ldr	r3, [r7, #16]
 800ebd2:	4413      	add	r3, r2
 800ebd4:	781b      	ldrb	r3, [r3, #0]
 800ebd6:	461a      	mov	r2, r3
 800ebd8:	683b      	ldr	r3, [r7, #0]
 800ebda:	4413      	add	r3, r2
 800ebdc:	4618      	mov	r0, r3
 800ebde:	f7fe fb11 	bl	800d204 <ld_word>
 800ebe2:	4603      	mov	r3, r0
 800ebe4:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800ebe6:	89fb      	ldrh	r3, [r7, #14]
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d01a      	beq.n	800ec22 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800ebec:	697b      	ldr	r3, [r7, #20]
 800ebee:	2bfe      	cmp	r3, #254	; 0xfe
 800ebf0:	d812      	bhi.n	800ec18 <cmp_lfn+0x88>
 800ebf2:	89bb      	ldrh	r3, [r7, #12]
 800ebf4:	4618      	mov	r0, r3
 800ebf6:	f002 fdb7 	bl	8011768 <ff_wtoupper>
 800ebfa:	4603      	mov	r3, r0
 800ebfc:	461c      	mov	r4, r3
 800ebfe:	697b      	ldr	r3, [r7, #20]
 800ec00:	1c5a      	adds	r2, r3, #1
 800ec02:	617a      	str	r2, [r7, #20]
 800ec04:	005b      	lsls	r3, r3, #1
 800ec06:	687a      	ldr	r2, [r7, #4]
 800ec08:	4413      	add	r3, r2
 800ec0a:	881b      	ldrh	r3, [r3, #0]
 800ec0c:	4618      	mov	r0, r3
 800ec0e:	f002 fdab 	bl	8011768 <ff_wtoupper>
 800ec12:	4603      	mov	r3, r0
 800ec14:	429c      	cmp	r4, r3
 800ec16:	d001      	beq.n	800ec1c <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800ec18:	2300      	movs	r3, #0
 800ec1a:	e022      	b.n	800ec62 <cmp_lfn+0xd2>
			}
			wc = uc;
 800ec1c:	89bb      	ldrh	r3, [r7, #12]
 800ec1e:	81fb      	strh	r3, [r7, #14]
 800ec20:	e006      	b.n	800ec30 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800ec22:	89bb      	ldrh	r3, [r7, #12]
 800ec24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ec28:	4293      	cmp	r3, r2
 800ec2a:	d001      	beq.n	800ec30 <cmp_lfn+0xa0>
 800ec2c:	2300      	movs	r3, #0
 800ec2e:	e018      	b.n	800ec62 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800ec30:	693b      	ldr	r3, [r7, #16]
 800ec32:	3301      	adds	r3, #1
 800ec34:	613b      	str	r3, [r7, #16]
 800ec36:	693b      	ldr	r3, [r7, #16]
 800ec38:	2b0c      	cmp	r3, #12
 800ec3a:	d9c8      	bls.n	800ebce <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800ec3c:	683b      	ldr	r3, [r7, #0]
 800ec3e:	781b      	ldrb	r3, [r3, #0]
 800ec40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d00b      	beq.n	800ec60 <cmp_lfn+0xd0>
 800ec48:	89fb      	ldrh	r3, [r7, #14]
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	d008      	beq.n	800ec60 <cmp_lfn+0xd0>
 800ec4e:	697b      	ldr	r3, [r7, #20]
 800ec50:	005b      	lsls	r3, r3, #1
 800ec52:	687a      	ldr	r2, [r7, #4]
 800ec54:	4413      	add	r3, r2
 800ec56:	881b      	ldrh	r3, [r3, #0]
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d001      	beq.n	800ec60 <cmp_lfn+0xd0>
 800ec5c:	2300      	movs	r3, #0
 800ec5e:	e000      	b.n	800ec62 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800ec60:	2301      	movs	r3, #1
}
 800ec62:	4618      	mov	r0, r3
 800ec64:	371c      	adds	r7, #28
 800ec66:	46bd      	mov	sp, r7
 800ec68:	bd90      	pop	{r4, r7, pc}
 800ec6a:	bf00      	nop
 800ec6c:	080161d0 	.word	0x080161d0

0800ec70 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800ec70:	b580      	push	{r7, lr}
 800ec72:	b086      	sub	sp, #24
 800ec74:	af00      	add	r7, sp, #0
 800ec76:	6078      	str	r0, [r7, #4]
 800ec78:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800ec7a:	683b      	ldr	r3, [r7, #0]
 800ec7c:	331a      	adds	r3, #26
 800ec7e:	4618      	mov	r0, r3
 800ec80:	f7fe fac0 	bl	800d204 <ld_word>
 800ec84:	4603      	mov	r3, r0
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d001      	beq.n	800ec8e <pick_lfn+0x1e>
 800ec8a:	2300      	movs	r3, #0
 800ec8c:	e04d      	b.n	800ed2a <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800ec8e:	683b      	ldr	r3, [r7, #0]
 800ec90:	781b      	ldrb	r3, [r3, #0]
 800ec92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ec96:	1e5a      	subs	r2, r3, #1
 800ec98:	4613      	mov	r3, r2
 800ec9a:	005b      	lsls	r3, r3, #1
 800ec9c:	4413      	add	r3, r2
 800ec9e:	009b      	lsls	r3, r3, #2
 800eca0:	4413      	add	r3, r2
 800eca2:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800eca4:	2301      	movs	r3, #1
 800eca6:	81fb      	strh	r3, [r7, #14]
 800eca8:	2300      	movs	r3, #0
 800ecaa:	613b      	str	r3, [r7, #16]
 800ecac:	e028      	b.n	800ed00 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800ecae:	4a21      	ldr	r2, [pc, #132]	; (800ed34 <pick_lfn+0xc4>)
 800ecb0:	693b      	ldr	r3, [r7, #16]
 800ecb2:	4413      	add	r3, r2
 800ecb4:	781b      	ldrb	r3, [r3, #0]
 800ecb6:	461a      	mov	r2, r3
 800ecb8:	683b      	ldr	r3, [r7, #0]
 800ecba:	4413      	add	r3, r2
 800ecbc:	4618      	mov	r0, r3
 800ecbe:	f7fe faa1 	bl	800d204 <ld_word>
 800ecc2:	4603      	mov	r3, r0
 800ecc4:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800ecc6:	89fb      	ldrh	r3, [r7, #14]
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d00f      	beq.n	800ecec <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800eccc:	697b      	ldr	r3, [r7, #20]
 800ecce:	2bfe      	cmp	r3, #254	; 0xfe
 800ecd0:	d901      	bls.n	800ecd6 <pick_lfn+0x66>
 800ecd2:	2300      	movs	r3, #0
 800ecd4:	e029      	b.n	800ed2a <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800ecd6:	89bb      	ldrh	r3, [r7, #12]
 800ecd8:	81fb      	strh	r3, [r7, #14]
 800ecda:	697b      	ldr	r3, [r7, #20]
 800ecdc:	1c5a      	adds	r2, r3, #1
 800ecde:	617a      	str	r2, [r7, #20]
 800ece0:	005b      	lsls	r3, r3, #1
 800ece2:	687a      	ldr	r2, [r7, #4]
 800ece4:	4413      	add	r3, r2
 800ece6:	89fa      	ldrh	r2, [r7, #14]
 800ece8:	801a      	strh	r2, [r3, #0]
 800ecea:	e006      	b.n	800ecfa <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800ecec:	89bb      	ldrh	r3, [r7, #12]
 800ecee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ecf2:	4293      	cmp	r3, r2
 800ecf4:	d001      	beq.n	800ecfa <pick_lfn+0x8a>
 800ecf6:	2300      	movs	r3, #0
 800ecf8:	e017      	b.n	800ed2a <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800ecfa:	693b      	ldr	r3, [r7, #16]
 800ecfc:	3301      	adds	r3, #1
 800ecfe:	613b      	str	r3, [r7, #16]
 800ed00:	693b      	ldr	r3, [r7, #16]
 800ed02:	2b0c      	cmp	r3, #12
 800ed04:	d9d3      	bls.n	800ecae <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800ed06:	683b      	ldr	r3, [r7, #0]
 800ed08:	781b      	ldrb	r3, [r3, #0]
 800ed0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d00a      	beq.n	800ed28 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800ed12:	697b      	ldr	r3, [r7, #20]
 800ed14:	2bfe      	cmp	r3, #254	; 0xfe
 800ed16:	d901      	bls.n	800ed1c <pick_lfn+0xac>
 800ed18:	2300      	movs	r3, #0
 800ed1a:	e006      	b.n	800ed2a <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800ed1c:	697b      	ldr	r3, [r7, #20]
 800ed1e:	005b      	lsls	r3, r3, #1
 800ed20:	687a      	ldr	r2, [r7, #4]
 800ed22:	4413      	add	r3, r2
 800ed24:	2200      	movs	r2, #0
 800ed26:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800ed28:	2301      	movs	r3, #1
}
 800ed2a:	4618      	mov	r0, r3
 800ed2c:	3718      	adds	r7, #24
 800ed2e:	46bd      	mov	sp, r7
 800ed30:	bd80      	pop	{r7, pc}
 800ed32:	bf00      	nop
 800ed34:	080161d0 	.word	0x080161d0

0800ed38 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800ed38:	b580      	push	{r7, lr}
 800ed3a:	b088      	sub	sp, #32
 800ed3c:	af00      	add	r7, sp, #0
 800ed3e:	60f8      	str	r0, [r7, #12]
 800ed40:	60b9      	str	r1, [r7, #8]
 800ed42:	4611      	mov	r1, r2
 800ed44:	461a      	mov	r2, r3
 800ed46:	460b      	mov	r3, r1
 800ed48:	71fb      	strb	r3, [r7, #7]
 800ed4a:	4613      	mov	r3, r2
 800ed4c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800ed4e:	68bb      	ldr	r3, [r7, #8]
 800ed50:	330d      	adds	r3, #13
 800ed52:	79ba      	ldrb	r2, [r7, #6]
 800ed54:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800ed56:	68bb      	ldr	r3, [r7, #8]
 800ed58:	330b      	adds	r3, #11
 800ed5a:	220f      	movs	r2, #15
 800ed5c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800ed5e:	68bb      	ldr	r3, [r7, #8]
 800ed60:	330c      	adds	r3, #12
 800ed62:	2200      	movs	r2, #0
 800ed64:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800ed66:	68bb      	ldr	r3, [r7, #8]
 800ed68:	331a      	adds	r3, #26
 800ed6a:	2100      	movs	r1, #0
 800ed6c:	4618      	mov	r0, r3
 800ed6e:	f7fe fb41 	bl	800d3f4 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800ed72:	79fb      	ldrb	r3, [r7, #7]
 800ed74:	1e5a      	subs	r2, r3, #1
 800ed76:	4613      	mov	r3, r2
 800ed78:	005b      	lsls	r3, r3, #1
 800ed7a:	4413      	add	r3, r2
 800ed7c:	009b      	lsls	r3, r3, #2
 800ed7e:	4413      	add	r3, r2
 800ed80:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800ed82:	2300      	movs	r3, #0
 800ed84:	82fb      	strh	r3, [r7, #22]
 800ed86:	2300      	movs	r3, #0
 800ed88:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800ed8a:	8afb      	ldrh	r3, [r7, #22]
 800ed8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ed90:	4293      	cmp	r3, r2
 800ed92:	d007      	beq.n	800eda4 <put_lfn+0x6c>
 800ed94:	69fb      	ldr	r3, [r7, #28]
 800ed96:	1c5a      	adds	r2, r3, #1
 800ed98:	61fa      	str	r2, [r7, #28]
 800ed9a:	005b      	lsls	r3, r3, #1
 800ed9c:	68fa      	ldr	r2, [r7, #12]
 800ed9e:	4413      	add	r3, r2
 800eda0:	881b      	ldrh	r3, [r3, #0]
 800eda2:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800eda4:	4a17      	ldr	r2, [pc, #92]	; (800ee04 <put_lfn+0xcc>)
 800eda6:	69bb      	ldr	r3, [r7, #24]
 800eda8:	4413      	add	r3, r2
 800edaa:	781b      	ldrb	r3, [r3, #0]
 800edac:	461a      	mov	r2, r3
 800edae:	68bb      	ldr	r3, [r7, #8]
 800edb0:	4413      	add	r3, r2
 800edb2:	8afa      	ldrh	r2, [r7, #22]
 800edb4:	4611      	mov	r1, r2
 800edb6:	4618      	mov	r0, r3
 800edb8:	f7fe fb1c 	bl	800d3f4 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800edbc:	8afb      	ldrh	r3, [r7, #22]
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d102      	bne.n	800edc8 <put_lfn+0x90>
 800edc2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800edc6:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800edc8:	69bb      	ldr	r3, [r7, #24]
 800edca:	3301      	adds	r3, #1
 800edcc:	61bb      	str	r3, [r7, #24]
 800edce:	69bb      	ldr	r3, [r7, #24]
 800edd0:	2b0c      	cmp	r3, #12
 800edd2:	d9da      	bls.n	800ed8a <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800edd4:	8afb      	ldrh	r3, [r7, #22]
 800edd6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800edda:	4293      	cmp	r3, r2
 800eddc:	d006      	beq.n	800edec <put_lfn+0xb4>
 800edde:	69fb      	ldr	r3, [r7, #28]
 800ede0:	005b      	lsls	r3, r3, #1
 800ede2:	68fa      	ldr	r2, [r7, #12]
 800ede4:	4413      	add	r3, r2
 800ede6:	881b      	ldrh	r3, [r3, #0]
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d103      	bne.n	800edf4 <put_lfn+0xbc>
 800edec:	79fb      	ldrb	r3, [r7, #7]
 800edee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800edf2:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800edf4:	68bb      	ldr	r3, [r7, #8]
 800edf6:	79fa      	ldrb	r2, [r7, #7]
 800edf8:	701a      	strb	r2, [r3, #0]
}
 800edfa:	bf00      	nop
 800edfc:	3720      	adds	r7, #32
 800edfe:	46bd      	mov	sp, r7
 800ee00:	bd80      	pop	{r7, pc}
 800ee02:	bf00      	nop
 800ee04:	080161d0 	.word	0x080161d0

0800ee08 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800ee08:	b580      	push	{r7, lr}
 800ee0a:	b08c      	sub	sp, #48	; 0x30
 800ee0c:	af00      	add	r7, sp, #0
 800ee0e:	60f8      	str	r0, [r7, #12]
 800ee10:	60b9      	str	r1, [r7, #8]
 800ee12:	607a      	str	r2, [r7, #4]
 800ee14:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800ee16:	220b      	movs	r2, #11
 800ee18:	68b9      	ldr	r1, [r7, #8]
 800ee1a:	68f8      	ldr	r0, [r7, #12]
 800ee1c:	f7fe fbb8 	bl	800d590 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800ee20:	683b      	ldr	r3, [r7, #0]
 800ee22:	2b05      	cmp	r3, #5
 800ee24:	d929      	bls.n	800ee7a <gen_numname+0x72>
		sr = seq;
 800ee26:	683b      	ldr	r3, [r7, #0]
 800ee28:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800ee2a:	e020      	b.n	800ee6e <gen_numname+0x66>
			wc = *lfn++;
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	1c9a      	adds	r2, r3, #2
 800ee30:	607a      	str	r2, [r7, #4]
 800ee32:	881b      	ldrh	r3, [r3, #0]
 800ee34:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800ee36:	2300      	movs	r3, #0
 800ee38:	62bb      	str	r3, [r7, #40]	; 0x28
 800ee3a:	e015      	b.n	800ee68 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 800ee3c:	69fb      	ldr	r3, [r7, #28]
 800ee3e:	005a      	lsls	r2, r3, #1
 800ee40:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ee42:	f003 0301 	and.w	r3, r3, #1
 800ee46:	4413      	add	r3, r2
 800ee48:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800ee4a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ee4c:	085b      	lsrs	r3, r3, #1
 800ee4e:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800ee50:	69fb      	ldr	r3, [r7, #28]
 800ee52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d003      	beq.n	800ee62 <gen_numname+0x5a>
 800ee5a:	69fa      	ldr	r2, [r7, #28]
 800ee5c:	4b31      	ldr	r3, [pc, #196]	; (800ef24 <gen_numname+0x11c>)
 800ee5e:	4053      	eors	r3, r2
 800ee60:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800ee62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee64:	3301      	adds	r3, #1
 800ee66:	62bb      	str	r3, [r7, #40]	; 0x28
 800ee68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee6a:	2b0f      	cmp	r3, #15
 800ee6c:	d9e6      	bls.n	800ee3c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	881b      	ldrh	r3, [r3, #0]
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	d1da      	bne.n	800ee2c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800ee76:	69fb      	ldr	r3, [r7, #28]
 800ee78:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800ee7a:	2307      	movs	r3, #7
 800ee7c:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800ee7e:	683b      	ldr	r3, [r7, #0]
 800ee80:	b2db      	uxtb	r3, r3
 800ee82:	f003 030f 	and.w	r3, r3, #15
 800ee86:	b2db      	uxtb	r3, r3
 800ee88:	3330      	adds	r3, #48	; 0x30
 800ee8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800ee8e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ee92:	2b39      	cmp	r3, #57	; 0x39
 800ee94:	d904      	bls.n	800eea0 <gen_numname+0x98>
 800ee96:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ee9a:	3307      	adds	r3, #7
 800ee9c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800eea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eea2:	1e5a      	subs	r2, r3, #1
 800eea4:	62ba      	str	r2, [r7, #40]	; 0x28
 800eea6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800eeaa:	4413      	add	r3, r2
 800eeac:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800eeb0:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800eeb4:	683b      	ldr	r3, [r7, #0]
 800eeb6:	091b      	lsrs	r3, r3, #4
 800eeb8:	603b      	str	r3, [r7, #0]
	} while (seq);
 800eeba:	683b      	ldr	r3, [r7, #0]
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	d1de      	bne.n	800ee7e <gen_numname+0x76>
	ns[i] = '~';
 800eec0:	f107 0214 	add.w	r2, r7, #20
 800eec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eec6:	4413      	add	r3, r2
 800eec8:	227e      	movs	r2, #126	; 0x7e
 800eeca:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800eecc:	2300      	movs	r3, #0
 800eece:	627b      	str	r3, [r7, #36]	; 0x24
 800eed0:	e002      	b.n	800eed8 <gen_numname+0xd0>
 800eed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eed4:	3301      	adds	r3, #1
 800eed6:	627b      	str	r3, [r7, #36]	; 0x24
 800eed8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eeda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eedc:	429a      	cmp	r2, r3
 800eede:	d205      	bcs.n	800eeec <gen_numname+0xe4>
 800eee0:	68fa      	ldr	r2, [r7, #12]
 800eee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eee4:	4413      	add	r3, r2
 800eee6:	781b      	ldrb	r3, [r3, #0]
 800eee8:	2b20      	cmp	r3, #32
 800eeea:	d1f2      	bne.n	800eed2 <gen_numname+0xca>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800eeec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eeee:	2b07      	cmp	r3, #7
 800eef0:	d808      	bhi.n	800ef04 <gen_numname+0xfc>
 800eef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eef4:	1c5a      	adds	r2, r3, #1
 800eef6:	62ba      	str	r2, [r7, #40]	; 0x28
 800eef8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800eefc:	4413      	add	r3, r2
 800eefe:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800ef02:	e000      	b.n	800ef06 <gen_numname+0xfe>
 800ef04:	2120      	movs	r1, #32
 800ef06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef08:	1c5a      	adds	r2, r3, #1
 800ef0a:	627a      	str	r2, [r7, #36]	; 0x24
 800ef0c:	68fa      	ldr	r2, [r7, #12]
 800ef0e:	4413      	add	r3, r2
 800ef10:	460a      	mov	r2, r1
 800ef12:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800ef14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef16:	2b07      	cmp	r3, #7
 800ef18:	d9e8      	bls.n	800eeec <gen_numname+0xe4>
}
 800ef1a:	bf00      	nop
 800ef1c:	3730      	adds	r7, #48	; 0x30
 800ef1e:	46bd      	mov	sp, r7
 800ef20:	bd80      	pop	{r7, pc}
 800ef22:	bf00      	nop
 800ef24:	00011021 	.word	0x00011021

0800ef28 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800ef28:	b480      	push	{r7}
 800ef2a:	b085      	sub	sp, #20
 800ef2c:	af00      	add	r7, sp, #0
 800ef2e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800ef30:	2300      	movs	r3, #0
 800ef32:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800ef34:	230b      	movs	r3, #11
 800ef36:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800ef38:	7bfb      	ldrb	r3, [r7, #15]
 800ef3a:	b2da      	uxtb	r2, r3
 800ef3c:	0852      	lsrs	r2, r2, #1
 800ef3e:	01db      	lsls	r3, r3, #7
 800ef40:	4313      	orrs	r3, r2
 800ef42:	b2da      	uxtb	r2, r3
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	1c59      	adds	r1, r3, #1
 800ef48:	6079      	str	r1, [r7, #4]
 800ef4a:	781b      	ldrb	r3, [r3, #0]
 800ef4c:	4413      	add	r3, r2
 800ef4e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800ef50:	68bb      	ldr	r3, [r7, #8]
 800ef52:	3b01      	subs	r3, #1
 800ef54:	60bb      	str	r3, [r7, #8]
 800ef56:	68bb      	ldr	r3, [r7, #8]
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d1ed      	bne.n	800ef38 <sum_sfn+0x10>
	return sum;
 800ef5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef5e:	4618      	mov	r0, r3
 800ef60:	3714      	adds	r7, #20
 800ef62:	46bd      	mov	sp, r7
 800ef64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef68:	4770      	bx	lr

0800ef6a <xdir_sum>:

static
WORD xdir_sum (			/* Get checksum of the directoly block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 800ef6a:	b480      	push	{r7}
 800ef6c:	b087      	sub	sp, #28
 800ef6e:	af00      	add	r7, sp, #0
 800ef70:	6078      	str	r0, [r7, #4]
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	3301      	adds	r3, #1
 800ef76:	781b      	ldrb	r3, [r3, #0]
 800ef78:	3301      	adds	r3, #1
 800ef7a:	015b      	lsls	r3, r3, #5
 800ef7c:	60fb      	str	r3, [r7, #12]
	for (i = sum = 0; i < szblk; i++) {
 800ef7e:	2300      	movs	r3, #0
 800ef80:	827b      	strh	r3, [r7, #18]
 800ef82:	2300      	movs	r3, #0
 800ef84:	617b      	str	r3, [r7, #20]
 800ef86:	e018      	b.n	800efba <xdir_sum+0x50>
		if (i == XDIR_SetSum) {	/* Skip sum field */
 800ef88:	697b      	ldr	r3, [r7, #20]
 800ef8a:	2b02      	cmp	r3, #2
 800ef8c:	d103      	bne.n	800ef96 <xdir_sum+0x2c>
			i++;
 800ef8e:	697b      	ldr	r3, [r7, #20]
 800ef90:	3301      	adds	r3, #1
 800ef92:	617b      	str	r3, [r7, #20]
 800ef94:	e00e      	b.n	800efb4 <xdir_sum+0x4a>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 800ef96:	8a7b      	ldrh	r3, [r7, #18]
 800ef98:	03db      	lsls	r3, r3, #15
 800ef9a:	b29a      	uxth	r2, r3
 800ef9c:	8a7b      	ldrh	r3, [r7, #18]
 800ef9e:	085b      	lsrs	r3, r3, #1
 800efa0:	b29b      	uxth	r3, r3
 800efa2:	4413      	add	r3, r2
 800efa4:	b29a      	uxth	r2, r3
 800efa6:	6879      	ldr	r1, [r7, #4]
 800efa8:	697b      	ldr	r3, [r7, #20]
 800efaa:	440b      	add	r3, r1
 800efac:	781b      	ldrb	r3, [r3, #0]
 800efae:	b29b      	uxth	r3, r3
 800efb0:	4413      	add	r3, r2
 800efb2:	827b      	strh	r3, [r7, #18]
	for (i = sum = 0; i < szblk; i++) {
 800efb4:	697b      	ldr	r3, [r7, #20]
 800efb6:	3301      	adds	r3, #1
 800efb8:	617b      	str	r3, [r7, #20]
 800efba:	697a      	ldr	r2, [r7, #20]
 800efbc:	68fb      	ldr	r3, [r7, #12]
 800efbe:	429a      	cmp	r2, r3
 800efc0:	d3e2      	bcc.n	800ef88 <xdir_sum+0x1e>
		}
	}
	return sum;
 800efc2:	8a7b      	ldrh	r3, [r7, #18]
}
 800efc4:	4618      	mov	r0, r3
 800efc6:	371c      	adds	r7, #28
 800efc8:	46bd      	mov	sp, r7
 800efca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efce:	4770      	bx	lr

0800efd0 <xname_sum>:

static
WORD xname_sum (		/* Get check sum (to be used as hash) of the name */
	const WCHAR* name	/* File name to be calculated */
)
{
 800efd0:	b580      	push	{r7, lr}
 800efd2:	b084      	sub	sp, #16
 800efd4:	af00      	add	r7, sp, #0
 800efd6:	6078      	str	r0, [r7, #4]
	WCHAR chr;
	WORD sum = 0;
 800efd8:	2300      	movs	r3, #0
 800efda:	81fb      	strh	r3, [r7, #14]


	while ((chr = *name++) != 0) {
 800efdc:	e01f      	b.n	800f01e <xname_sum+0x4e>
		chr = ff_wtoupper(chr);		/* File name needs to be ignored case */
 800efde:	89bb      	ldrh	r3, [r7, #12]
 800efe0:	4618      	mov	r0, r3
 800efe2:	f002 fbc1 	bl	8011768 <ff_wtoupper>
 800efe6:	4603      	mov	r3, r0
 800efe8:	81bb      	strh	r3, [r7, #12]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 800efea:	89fb      	ldrh	r3, [r7, #14]
 800efec:	03db      	lsls	r3, r3, #15
 800efee:	b29a      	uxth	r2, r3
 800eff0:	89fb      	ldrh	r3, [r7, #14]
 800eff2:	085b      	lsrs	r3, r3, #1
 800eff4:	b29b      	uxth	r3, r3
 800eff6:	4413      	add	r3, r2
 800eff8:	b29a      	uxth	r2, r3
 800effa:	89bb      	ldrh	r3, [r7, #12]
 800effc:	b2db      	uxtb	r3, r3
 800effe:	b29b      	uxth	r3, r3
 800f000:	4413      	add	r3, r2
 800f002:	81fb      	strh	r3, [r7, #14]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 800f004:	89fb      	ldrh	r3, [r7, #14]
 800f006:	03db      	lsls	r3, r3, #15
 800f008:	b29a      	uxth	r2, r3
 800f00a:	89fb      	ldrh	r3, [r7, #14]
 800f00c:	085b      	lsrs	r3, r3, #1
 800f00e:	b29b      	uxth	r3, r3
 800f010:	4413      	add	r3, r2
 800f012:	b29a      	uxth	r2, r3
 800f014:	89bb      	ldrh	r3, [r7, #12]
 800f016:	0a1b      	lsrs	r3, r3, #8
 800f018:	b29b      	uxth	r3, r3
 800f01a:	4413      	add	r3, r2
 800f01c:	81fb      	strh	r3, [r7, #14]
	while ((chr = *name++) != 0) {
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	1c9a      	adds	r2, r3, #2
 800f022:	607a      	str	r2, [r7, #4]
 800f024:	881b      	ldrh	r3, [r3, #0]
 800f026:	81bb      	strh	r3, [r7, #12]
 800f028:	89bb      	ldrh	r3, [r7, #12]
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	d1d7      	bne.n	800efde <xname_sum+0xe>
	}
	return sum;
 800f02e:	89fb      	ldrh	r3, [r7, #14]
}
 800f030:	4618      	mov	r0, r3
 800f032:	3710      	adds	r7, #16
 800f034:	46bd      	mov	sp, r7
 800f036:	bd80      	pop	{r7, pc}

0800f038 <load_xdir>:

static
FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
	DIR* dp			/* Pointer to the reading direcotry object pointing the 85 entry */
)
{
 800f038:	b590      	push	{r4, r7, lr}
 800f03a:	b087      	sub	sp, #28
 800f03c:	af00      	add	r7, sp, #0
 800f03e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT i, sz_ent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	681b      	ldr	r3, [r3, #0]
 800f044:	695b      	ldr	r3, [r3, #20]
 800f046:	613b      	str	r3, [r7, #16]


	/* Load 85 entry */
	res = move_window(dp->obj.fs, dp->sect);
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	681a      	ldr	r2, [r3, #0]
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f050:	4619      	mov	r1, r3
 800f052:	4610      	mov	r0, r2
 800f054:	f7fe fcfa 	bl	800da4c <move_window>
 800f058:	4603      	mov	r3, r0
 800f05a:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800f05c:	7bfb      	ldrb	r3, [r7, #15]
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d001      	beq.n	800f066 <load_xdir+0x2e>
 800f062:	7bfb      	ldrb	r3, [r7, #15]
 800f064:	e09f      	b.n	800f1a6 <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f06a:	781b      	ldrb	r3, [r3, #0]
 800f06c:	2b85      	cmp	r3, #133	; 0x85
 800f06e:	d001      	beq.n	800f074 <load_xdir+0x3c>
 800f070:	2302      	movs	r3, #2
 800f072:	e098      	b.n	800f1a6 <load_xdir+0x16e>
	mem_cpy(dirb + 0, dp->dir, SZDIRE);
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f078:	2220      	movs	r2, #32
 800f07a:	4619      	mov	r1, r3
 800f07c:	6938      	ldr	r0, [r7, #16]
 800f07e:	f7fe fa87 	bl	800d590 <mem_cpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 800f082:	693b      	ldr	r3, [r7, #16]
 800f084:	3301      	adds	r3, #1
 800f086:	781b      	ldrb	r3, [r3, #0]
 800f088:	3301      	adds	r3, #1
 800f08a:	015b      	lsls	r3, r3, #5
 800f08c:	60bb      	str	r3, [r7, #8]
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 800f08e:	68bb      	ldr	r3, [r7, #8]
 800f090:	2b5f      	cmp	r3, #95	; 0x5f
 800f092:	d903      	bls.n	800f09c <load_xdir+0x64>
 800f094:	68bb      	ldr	r3, [r7, #8]
 800f096:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800f09a:	d901      	bls.n	800f0a0 <load_xdir+0x68>
 800f09c:	2302      	movs	r3, #2
 800f09e:	e082      	b.n	800f1a6 <load_xdir+0x16e>

	/* Load C0 entry */
	res = dir_next(dp, 0);
 800f0a0:	2100      	movs	r1, #0
 800f0a2:	6878      	ldr	r0, [r7, #4]
 800f0a4:	f7ff fbf2 	bl	800e88c <dir_next>
 800f0a8:	4603      	mov	r3, r0
 800f0aa:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800f0ac:	7bfb      	ldrb	r3, [r7, #15]
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d001      	beq.n	800f0b6 <load_xdir+0x7e>
 800f0b2:	7bfb      	ldrb	r3, [r7, #15]
 800f0b4:	e077      	b.n	800f1a6 <load_xdir+0x16e>
	res = move_window(dp->obj.fs, dp->sect);
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	681a      	ldr	r2, [r3, #0]
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f0be:	4619      	mov	r1, r3
 800f0c0:	4610      	mov	r0, r2
 800f0c2:	f7fe fcc3 	bl	800da4c <move_window>
 800f0c6:	4603      	mov	r3, r0
 800f0c8:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800f0ca:	7bfb      	ldrb	r3, [r7, #15]
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	d001      	beq.n	800f0d4 <load_xdir+0x9c>
 800f0d0:	7bfb      	ldrb	r3, [r7, #15]
 800f0d2:	e068      	b.n	800f1a6 <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f0d8:	781b      	ldrb	r3, [r3, #0]
 800f0da:	2bc0      	cmp	r3, #192	; 0xc0
 800f0dc:	d001      	beq.n	800f0e2 <load_xdir+0xaa>
 800f0de:	2302      	movs	r3, #2
 800f0e0:	e061      	b.n	800f1a6 <load_xdir+0x16e>
	mem_cpy(dirb + SZDIRE, dp->dir, SZDIRE);
 800f0e2:	693b      	ldr	r3, [r7, #16]
 800f0e4:	f103 0020 	add.w	r0, r3, #32
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f0ec:	2220      	movs	r2, #32
 800f0ee:	4619      	mov	r1, r3
 800f0f0:	f7fe fa4e 	bl	800d590 <mem_cpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 800f0f4:	693b      	ldr	r3, [r7, #16]
 800f0f6:	3323      	adds	r3, #35	; 0x23
 800f0f8:	781b      	ldrb	r3, [r3, #0]
 800f0fa:	332c      	adds	r3, #44	; 0x2c
 800f0fc:	4a2c      	ldr	r2, [pc, #176]	; (800f1b0 <load_xdir+0x178>)
 800f0fe:	fba2 2303 	umull	r2, r3, r2, r3
 800f102:	08db      	lsrs	r3, r3, #3
 800f104:	015b      	lsls	r3, r3, #5
 800f106:	68ba      	ldr	r2, [r7, #8]
 800f108:	429a      	cmp	r2, r3
 800f10a:	d201      	bcs.n	800f110 <load_xdir+0xd8>
 800f10c:	2302      	movs	r3, #2
 800f10e:	e04a      	b.n	800f1a6 <load_xdir+0x16e>

	/* Load C1 entries */
	i = SZDIRE * 2;	/* C1 offset */
 800f110:	2340      	movs	r3, #64	; 0x40
 800f112:	617b      	str	r3, [r7, #20]
	do {
		res = dir_next(dp, 0);
 800f114:	2100      	movs	r1, #0
 800f116:	6878      	ldr	r0, [r7, #4]
 800f118:	f7ff fbb8 	bl	800e88c <dir_next>
 800f11c:	4603      	mov	r3, r0
 800f11e:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 800f120:	7bfb      	ldrb	r3, [r7, #15]
 800f122:	2b00      	cmp	r3, #0
 800f124:	d001      	beq.n	800f12a <load_xdir+0xf2>
 800f126:	7bfb      	ldrb	r3, [r7, #15]
 800f128:	e03d      	b.n	800f1a6 <load_xdir+0x16e>
		res = move_window(dp->obj.fs, dp->sect);
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	681a      	ldr	r2, [r3, #0]
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f132:	4619      	mov	r1, r3
 800f134:	4610      	mov	r0, r2
 800f136:	f7fe fc89 	bl	800da4c <move_window>
 800f13a:	4603      	mov	r3, r0
 800f13c:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 800f13e:	7bfb      	ldrb	r3, [r7, #15]
 800f140:	2b00      	cmp	r3, #0
 800f142:	d001      	beq.n	800f148 <load_xdir+0x110>
 800f144:	7bfb      	ldrb	r3, [r7, #15]
 800f146:	e02e      	b.n	800f1a6 <load_xdir+0x16e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f14c:	781b      	ldrb	r3, [r3, #0]
 800f14e:	2bc1      	cmp	r3, #193	; 0xc1
 800f150:	d001      	beq.n	800f156 <load_xdir+0x11e>
 800f152:	2302      	movs	r3, #2
 800f154:	e027      	b.n	800f1a6 <load_xdir+0x16e>
		if (i < MAXDIRB(_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
 800f156:	697b      	ldr	r3, [r7, #20]
 800f158:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800f15c:	d208      	bcs.n	800f170 <load_xdir+0x138>
 800f15e:	693a      	ldr	r2, [r7, #16]
 800f160:	697b      	ldr	r3, [r7, #20]
 800f162:	18d0      	adds	r0, r2, r3
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f168:	2220      	movs	r2, #32
 800f16a:	4619      	mov	r1, r3
 800f16c:	f7fe fa10 	bl	800d590 <mem_cpy>
	} while ((i += SZDIRE) < sz_ent);
 800f170:	697b      	ldr	r3, [r7, #20]
 800f172:	3320      	adds	r3, #32
 800f174:	617b      	str	r3, [r7, #20]
 800f176:	697a      	ldr	r2, [r7, #20]
 800f178:	68bb      	ldr	r3, [r7, #8]
 800f17a:	429a      	cmp	r2, r3
 800f17c:	d3ca      	bcc.n	800f114 <load_xdir+0xdc>

	/* Sanity check (do it when accessible object name) */
	if (i <= MAXDIRB(_MAX_LFN)) {
 800f17e:	697b      	ldr	r3, [r7, #20]
 800f180:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800f184:	d80e      	bhi.n	800f1a4 <load_xdir+0x16c>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 800f186:	6938      	ldr	r0, [r7, #16]
 800f188:	f7ff feef 	bl	800ef6a <xdir_sum>
 800f18c:	4603      	mov	r3, r0
 800f18e:	461c      	mov	r4, r3
 800f190:	693b      	ldr	r3, [r7, #16]
 800f192:	3302      	adds	r3, #2
 800f194:	4618      	mov	r0, r3
 800f196:	f7fe f835 	bl	800d204 <ld_word>
 800f19a:	4603      	mov	r3, r0
 800f19c:	429c      	cmp	r4, r3
 800f19e:	d001      	beq.n	800f1a4 <load_xdir+0x16c>
 800f1a0:	2302      	movs	r3, #2
 800f1a2:	e000      	b.n	800f1a6 <load_xdir+0x16e>
	}
	return FR_OK;
 800f1a4:	2300      	movs	r3, #0
}
 800f1a6:	4618      	mov	r0, r3
 800f1a8:	371c      	adds	r7, #28
 800f1aa:	46bd      	mov	sp, r7
 800f1ac:	bd90      	pop	{r4, r7, pc}
 800f1ae:	bf00      	nop
 800f1b0:	88888889 	.word	0x88888889

0800f1b4 <load_obj_dir>:
static
FRESULT load_obj_dir (
	DIR* dp,			/* Blank directory object to be used to access containing direcotry */
	const _FDID* obj	/* Object with its containing directory information */
)
{
 800f1b4:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800f1b8:	b084      	sub	sp, #16
 800f1ba:	af00      	add	r7, sp, #0
 800f1bc:	6078      	str	r0, [r7, #4]
 800f1be:	6039      	str	r1, [r7, #0]
	FRESULT res;

	/* Open object containing directory */
	dp->obj.fs = obj->fs;
 800f1c0:	683b      	ldr	r3, [r7, #0]
 800f1c2:	681a      	ldr	r2, [r3, #0]
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	601a      	str	r2, [r3, #0]
	dp->obj.sclust = obj->c_scl;
 800f1c8:	683b      	ldr	r3, [r7, #0]
 800f1ca:	6a1a      	ldr	r2, [r3, #32]
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	609a      	str	r2, [r3, #8]
	dp->obj.stat = (BYTE)obj->c_size;
 800f1d0:	683b      	ldr	r3, [r7, #0]
 800f1d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1d4:	b2da      	uxtb	r2, r3
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	71da      	strb	r2, [r3, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 800f1da:	683b      	ldr	r3, [r7, #0]
 800f1dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1de:	469b      	mov	fp, r3
 800f1e0:	f04f 0c00 	mov.w	ip, #0
 800f1e4:	f06f 01ff 	mvn.w	r1, #255	; 0xff
 800f1e8:	f04f 0200 	mov.w	r2, #0
 800f1ec:	ea0b 0301 	and.w	r3, fp, r1
 800f1f0:	ea0c 0402 	and.w	r4, ip, r2
 800f1f4:	687a      	ldr	r2, [r7, #4]
 800f1f6:	e9c2 3404 	strd	r3, r4, [r2, #16]
	dp->blk_ofs = obj->c_ofs;
 800f1fa:	683b      	ldr	r3, [r7, #0]
 800f1fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	64da      	str	r2, [r3, #76]	; 0x4c

	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f206:	4619      	mov	r1, r3
 800f208:	6878      	ldr	r0, [r7, #4]
 800f20a:	f7ff faab 	bl	800e764 <dir_sdi>
 800f20e:	4603      	mov	r3, r0
 800f210:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800f212:	7bfb      	ldrb	r3, [r7, #15]
 800f214:	2b00      	cmp	r3, #0
 800f216:	d104      	bne.n	800f222 <load_obj_dir+0x6e>
		res = load_xdir(dp);		/* Load the object's entry block */
 800f218:	6878      	ldr	r0, [r7, #4]
 800f21a:	f7ff ff0d 	bl	800f038 <load_xdir>
 800f21e:	4603      	mov	r3, r0
 800f220:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 800f222:	7bfb      	ldrb	r3, [r7, #15]
}
 800f224:	4618      	mov	r0, r3
 800f226:	3710      	adds	r7, #16
 800f228:	46bd      	mov	sp, r7
 800f22a:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800f22e <store_xdir>:
/*-----------------------------------------------*/
static
FRESULT store_xdir (
	DIR* dp				/* Pointer to the direcotry object */
)
{
 800f22e:	b590      	push	{r4, r7, lr}
 800f230:	b087      	sub	sp, #28
 800f232:	af00      	add	r7, sp, #0
 800f234:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT nent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	681b      	ldr	r3, [r3, #0]
 800f23a:	695b      	ldr	r3, [r3, #20]
 800f23c:	60fb      	str	r3, [r7, #12]

	/* Create set sum */
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
 800f23e:	68fb      	ldr	r3, [r7, #12]
 800f240:	1c9c      	adds	r4, r3, #2
 800f242:	68f8      	ldr	r0, [r7, #12]
 800f244:	f7ff fe91 	bl	800ef6a <xdir_sum>
 800f248:	4603      	mov	r3, r0
 800f24a:	4619      	mov	r1, r3
 800f24c:	4620      	mov	r0, r4
 800f24e:	f7fe f8d1 	bl	800d3f4 <st_word>
	nent = dirb[XDIR_NumSec] + 1;
 800f252:	68fb      	ldr	r3, [r7, #12]
 800f254:	3301      	adds	r3, #1
 800f256:	781b      	ldrb	r3, [r3, #0]
 800f258:	3301      	adds	r3, #1
 800f25a:	613b      	str	r3, [r7, #16]

	/* Store the set of directory to the volume */
	res = dir_sdi(dp, dp->blk_ofs);
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f260:	4619      	mov	r1, r3
 800f262:	6878      	ldr	r0, [r7, #4]
 800f264:	f7ff fa7e 	bl	800e764 <dir_sdi>
 800f268:	4603      	mov	r3, r0
 800f26a:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800f26c:	e026      	b.n	800f2bc <store_xdir+0x8e>
		res = move_window(dp->obj.fs, dp->sect);
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	681a      	ldr	r2, [r3, #0]
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f276:	4619      	mov	r1, r3
 800f278:	4610      	mov	r0, r2
 800f27a:	f7fe fbe7 	bl	800da4c <move_window>
 800f27e:	4603      	mov	r3, r0
 800f280:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f282:	7dfb      	ldrb	r3, [r7, #23]
 800f284:	2b00      	cmp	r3, #0
 800f286:	d11d      	bne.n	800f2c4 <store_xdir+0x96>
		mem_cpy(dp->dir, dirb, SZDIRE);
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f28c:	2220      	movs	r2, #32
 800f28e:	68f9      	ldr	r1, [r7, #12]
 800f290:	4618      	mov	r0, r3
 800f292:	f7fe f97d 	bl	800d590 <mem_cpy>
		dp->obj.fs->wflag = 1;
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	681b      	ldr	r3, [r3, #0]
 800f29a:	2201      	movs	r2, #1
 800f29c:	70da      	strb	r2, [r3, #3]
		if (--nent == 0) break;
 800f29e:	693b      	ldr	r3, [r7, #16]
 800f2a0:	3b01      	subs	r3, #1
 800f2a2:	613b      	str	r3, [r7, #16]
 800f2a4:	693b      	ldr	r3, [r7, #16]
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d00e      	beq.n	800f2c8 <store_xdir+0x9a>
		dirb += SZDIRE;
 800f2aa:	68fb      	ldr	r3, [r7, #12]
 800f2ac:	3320      	adds	r3, #32
 800f2ae:	60fb      	str	r3, [r7, #12]
		res = dir_next(dp, 0);
 800f2b0:	2100      	movs	r1, #0
 800f2b2:	6878      	ldr	r0, [r7, #4]
 800f2b4:	f7ff faea 	bl	800e88c <dir_next>
 800f2b8:	4603      	mov	r3, r0
 800f2ba:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800f2bc:	7dfb      	ldrb	r3, [r7, #23]
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d0d5      	beq.n	800f26e <store_xdir+0x40>
 800f2c2:	e002      	b.n	800f2ca <store_xdir+0x9c>
		if (res != FR_OK) break;
 800f2c4:	bf00      	nop
 800f2c6:	e000      	b.n	800f2ca <store_xdir+0x9c>
		if (--nent == 0) break;
 800f2c8:	bf00      	nop
	}
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 800f2ca:	7dfb      	ldrb	r3, [r7, #23]
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	d002      	beq.n	800f2d6 <store_xdir+0xa8>
 800f2d0:	7dfb      	ldrb	r3, [r7, #23]
 800f2d2:	2b01      	cmp	r3, #1
 800f2d4:	d101      	bne.n	800f2da <store_xdir+0xac>
 800f2d6:	7dfb      	ldrb	r3, [r7, #23]
 800f2d8:	e000      	b.n	800f2dc <store_xdir+0xae>
 800f2da:	2302      	movs	r3, #2
}
 800f2dc:	4618      	mov	r0, r3
 800f2de:	371c      	adds	r7, #28
 800f2e0:	46bd      	mov	sp, r7
 800f2e2:	bd90      	pop	{r4, r7, pc}

0800f2e4 <create_xdir>:
static
void create_xdir (
	BYTE* dirb,			/* Pointer to the direcotry entry block buffer */
	const WCHAR* lfn	/* Pointer to the nul terminated file name */
)
{
 800f2e4:	b590      	push	{r4, r7, lr}
 800f2e6:	b085      	sub	sp, #20
 800f2e8:	af00      	add	r7, sp, #0
 800f2ea:	6078      	str	r0, [r7, #4]
 800f2ec:	6039      	str	r1, [r7, #0]
	BYTE nb, nc;
	WCHAR chr;


	/* Create 85+C0 entry */
	mem_set(dirb, 0, 2 * SZDIRE);
 800f2ee:	2240      	movs	r2, #64	; 0x40
 800f2f0:	2100      	movs	r1, #0
 800f2f2:	6878      	ldr	r0, [r7, #4]
 800f2f4:	f7fe f96d 	bl	800d5d2 <mem_set>
	dirb[XDIR_Type] = 0x85;
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	2285      	movs	r2, #133	; 0x85
 800f2fc:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_Type + SZDIRE] = 0xC0;
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	3320      	adds	r3, #32
 800f302:	22c0      	movs	r2, #192	; 0xc0
 800f304:	701a      	strb	r2, [r3, #0]

	/* Create C1 entries */
	nc = 0; nb = 1; chr = 1; i = SZDIRE * 2;
 800f306:	2300      	movs	r3, #0
 800f308:	72bb      	strb	r3, [r7, #10]
 800f30a:	2301      	movs	r3, #1
 800f30c:	72fb      	strb	r3, [r7, #11]
 800f30e:	2301      	movs	r3, #1
 800f310:	813b      	strh	r3, [r7, #8]
 800f312:	2340      	movs	r3, #64	; 0x40
 800f314:	60fb      	str	r3, [r7, #12]
	do {
		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
 800f316:	68fb      	ldr	r3, [r7, #12]
 800f318:	1c5a      	adds	r2, r3, #1
 800f31a:	60fa      	str	r2, [r7, #12]
 800f31c:	687a      	ldr	r2, [r7, #4]
 800f31e:	4413      	add	r3, r2
 800f320:	22c1      	movs	r2, #193	; 0xc1
 800f322:	701a      	strb	r2, [r3, #0]
 800f324:	68fb      	ldr	r3, [r7, #12]
 800f326:	1c5a      	adds	r2, r3, #1
 800f328:	60fa      	str	r2, [r7, #12]
 800f32a:	687a      	ldr	r2, [r7, #4]
 800f32c:	4413      	add	r3, r2
 800f32e:	2200      	movs	r2, #0
 800f330:	701a      	strb	r2, [r3, #0]
		do {	/* Fill name field */
			if (chr && (chr = lfn[nc]) != 0) nc++;	/* Get a character if exist */
 800f332:	893b      	ldrh	r3, [r7, #8]
 800f334:	2b00      	cmp	r3, #0
 800f336:	d00b      	beq.n	800f350 <create_xdir+0x6c>
 800f338:	7abb      	ldrb	r3, [r7, #10]
 800f33a:	005b      	lsls	r3, r3, #1
 800f33c:	683a      	ldr	r2, [r7, #0]
 800f33e:	4413      	add	r3, r2
 800f340:	881b      	ldrh	r3, [r3, #0]
 800f342:	813b      	strh	r3, [r7, #8]
 800f344:	893b      	ldrh	r3, [r7, #8]
 800f346:	2b00      	cmp	r3, #0
 800f348:	d002      	beq.n	800f350 <create_xdir+0x6c>
 800f34a:	7abb      	ldrb	r3, [r7, #10]
 800f34c:	3301      	adds	r3, #1
 800f34e:	72bb      	strb	r3, [r7, #10]
			st_word(dirb + i, chr); 		/* Store it */
 800f350:	687a      	ldr	r2, [r7, #4]
 800f352:	68fb      	ldr	r3, [r7, #12]
 800f354:	4413      	add	r3, r2
 800f356:	893a      	ldrh	r2, [r7, #8]
 800f358:	4611      	mov	r1, r2
 800f35a:	4618      	mov	r0, r3
 800f35c:	f7fe f84a 	bl	800d3f4 <st_word>
		} while ((i += 2) % SZDIRE != 0);
 800f360:	68fb      	ldr	r3, [r7, #12]
 800f362:	3302      	adds	r3, #2
 800f364:	60fb      	str	r3, [r7, #12]
 800f366:	68fb      	ldr	r3, [r7, #12]
 800f368:	f003 031f 	and.w	r3, r3, #31
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	d1e0      	bne.n	800f332 <create_xdir+0x4e>
		nb++;
 800f370:	7afb      	ldrb	r3, [r7, #11]
 800f372:	3301      	adds	r3, #1
 800f374:	72fb      	strb	r3, [r7, #11]
	} while (lfn[nc]);	/* Fill next entry if any char follows */
 800f376:	7abb      	ldrb	r3, [r7, #10]
 800f378:	005b      	lsls	r3, r3, #1
 800f37a:	683a      	ldr	r2, [r7, #0]
 800f37c:	4413      	add	r3, r2
 800f37e:	881b      	ldrh	r3, [r3, #0]
 800f380:	2b00      	cmp	r3, #0
 800f382:	d1c8      	bne.n	800f316 <create_xdir+0x32>

	dirb[XDIR_NumName] = nc;	/* Set name length */
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	3323      	adds	r3, #35	; 0x23
 800f388:	7aba      	ldrb	r2, [r7, #10]
 800f38a:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_NumSec] = nb;		/* Set block length */
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	3301      	adds	r3, #1
 800f390:	7afa      	ldrb	r2, [r7, #11]
 800f392:	701a      	strb	r2, [r3, #0]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	f103 0424 	add.w	r4, r3, #36	; 0x24
 800f39a:	6838      	ldr	r0, [r7, #0]
 800f39c:	f7ff fe18 	bl	800efd0 <xname_sum>
 800f3a0:	4603      	mov	r3, r0
 800f3a2:	4619      	mov	r1, r3
 800f3a4:	4620      	mov	r0, r4
 800f3a6:	f7fe f825 	bl	800d3f4 <st_word>
}
 800f3aa:	bf00      	nop
 800f3ac:	3714      	adds	r7, #20
 800f3ae:	46bd      	mov	sp, r7
 800f3b0:	bd90      	pop	{r4, r7, pc}

0800f3b2 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800f3b2:	b580      	push	{r7, lr}
 800f3b4:	b086      	sub	sp, #24
 800f3b6:	af00      	add	r7, sp, #0
 800f3b8:	6078      	str	r0, [r7, #4]
 800f3ba:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800f3bc:	2304      	movs	r3, #4
 800f3be:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	681b      	ldr	r3, [r3, #0]
 800f3c4:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800f3c6:	23ff      	movs	r3, #255	; 0xff
 800f3c8:	757b      	strb	r3, [r7, #21]
 800f3ca:	23ff      	movs	r3, #255	; 0xff
 800f3cc:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800f3ce:	e09f      	b.n	800f510 <dir_read+0x15e>
		res = move_window(fs, dp->sect);
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f3d4:	4619      	mov	r1, r3
 800f3d6:	6938      	ldr	r0, [r7, #16]
 800f3d8:	f7fe fb38 	bl	800da4c <move_window>
 800f3dc:	4603      	mov	r3, r0
 800f3de:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f3e0:	7dfb      	ldrb	r3, [r7, #23]
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	f040 809a 	bne.w	800f51c <dir_read+0x16a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f3ec:	781b      	ldrb	r3, [r3, #0]
 800f3ee:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800f3f0:	7dbb      	ldrb	r3, [r7, #22]
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	d102      	bne.n	800f3fc <dir_read+0x4a>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800f3f6:	2304      	movs	r3, #4
 800f3f8:	75fb      	strb	r3, [r7, #23]
 800f3fa:	e096      	b.n	800f52a <dir_read+0x178>
		}
#if _FS_EXFAT
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800f3fc:	693b      	ldr	r3, [r7, #16]
 800f3fe:	781b      	ldrb	r3, [r3, #0]
 800f400:	2b04      	cmp	r3, #4
 800f402:	d118      	bne.n	800f436 <dir_read+0x84>
			if (_USE_LABEL && vol) {
				if (c == 0x83) break;	/* Volume label entry? */
			} else {
				if (c == 0x85) {		/* Start of the file entry block? */
 800f404:	7dbb      	ldrb	r3, [r7, #22]
 800f406:	2b85      	cmp	r3, #133	; 0x85
 800f408:	d179      	bne.n	800f4fe <dir_read+0x14c>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	64da      	str	r2, [r3, #76]	; 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 800f412:	6878      	ldr	r0, [r7, #4]
 800f414:	f7ff fe10 	bl	800f038 <load_xdir>
 800f418:	4603      	mov	r3, r0
 800f41a:	75fb      	strb	r3, [r7, #23]
					if (res == FR_OK) {
 800f41c:	7dfb      	ldrb	r3, [r7, #23]
 800f41e:	2b00      	cmp	r3, #0
 800f420:	d17e      	bne.n	800f520 <dir_read+0x16e>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 800f422:	693b      	ldr	r3, [r7, #16]
 800f424:	695b      	ldr	r3, [r3, #20]
 800f426:	3304      	adds	r3, #4
 800f428:	781b      	ldrb	r3, [r3, #0]
 800f42a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f42e:	b2da      	uxtb	r2, r3
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	719a      	strb	r2, [r3, #6]
					}
					break;
 800f434:	e074      	b.n	800f520 <dir_read+0x16e>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f43a:	330b      	adds	r3, #11
 800f43c:	781b      	ldrb	r3, [r3, #0]
 800f43e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f442:	73fb      	strb	r3, [r7, #15]
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	7bfa      	ldrb	r2, [r7, #15]
 800f448:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800f44a:	7dbb      	ldrb	r3, [r7, #22]
 800f44c:	2be5      	cmp	r3, #229	; 0xe5
 800f44e:	d00e      	beq.n	800f46e <dir_read+0xbc>
 800f450:	7dbb      	ldrb	r3, [r7, #22]
 800f452:	2b2e      	cmp	r3, #46	; 0x2e
 800f454:	d00b      	beq.n	800f46e <dir_read+0xbc>
 800f456:	7bfb      	ldrb	r3, [r7, #15]
 800f458:	f023 0320 	bic.w	r3, r3, #32
 800f45c:	2b08      	cmp	r3, #8
 800f45e:	bf0c      	ite	eq
 800f460:	2301      	moveq	r3, #1
 800f462:	2300      	movne	r3, #0
 800f464:	b2db      	uxtb	r3, r3
 800f466:	461a      	mov	r2, r3
 800f468:	683b      	ldr	r3, [r7, #0]
 800f46a:	4293      	cmp	r3, r2
 800f46c:	d002      	beq.n	800f474 <dir_read+0xc2>
				ord = 0xFF;
 800f46e:	23ff      	movs	r3, #255	; 0xff
 800f470:	757b      	strb	r3, [r7, #21]
 800f472:	e044      	b.n	800f4fe <dir_read+0x14c>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800f474:	7bfb      	ldrb	r3, [r7, #15]
 800f476:	2b0f      	cmp	r3, #15
 800f478:	d12f      	bne.n	800f4da <dir_read+0x128>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800f47a:	7dbb      	ldrb	r3, [r7, #22]
 800f47c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f480:	2b00      	cmp	r3, #0
 800f482:	d00d      	beq.n	800f4a0 <dir_read+0xee>
						sum = dp->dir[LDIR_Chksum];
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f488:	7b5b      	ldrb	r3, [r3, #13]
 800f48a:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800f48c:	7dbb      	ldrb	r3, [r7, #22]
 800f48e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f492:	75bb      	strb	r3, [r7, #22]
 800f494:	7dbb      	ldrb	r3, [r7, #22]
 800f496:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800f4a0:	7dba      	ldrb	r2, [r7, #22]
 800f4a2:	7d7b      	ldrb	r3, [r7, #21]
 800f4a4:	429a      	cmp	r2, r3
 800f4a6:	d115      	bne.n	800f4d4 <dir_read+0x122>
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f4ac:	330d      	adds	r3, #13
 800f4ae:	781b      	ldrb	r3, [r3, #0]
 800f4b0:	7d3a      	ldrb	r2, [r7, #20]
 800f4b2:	429a      	cmp	r2, r3
 800f4b4:	d10e      	bne.n	800f4d4 <dir_read+0x122>
 800f4b6:	693b      	ldr	r3, [r7, #16]
 800f4b8:	691a      	ldr	r2, [r3, #16]
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f4be:	4619      	mov	r1, r3
 800f4c0:	4610      	mov	r0, r2
 800f4c2:	f7ff fbd5 	bl	800ec70 <pick_lfn>
 800f4c6:	4603      	mov	r3, r0
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	d003      	beq.n	800f4d4 <dir_read+0x122>
 800f4cc:	7d7b      	ldrb	r3, [r7, #21]
 800f4ce:	3b01      	subs	r3, #1
 800f4d0:	b2db      	uxtb	r3, r3
 800f4d2:	e000      	b.n	800f4d6 <dir_read+0x124>
 800f4d4:	23ff      	movs	r3, #255	; 0xff
 800f4d6:	757b      	strb	r3, [r7, #21]
 800f4d8:	e011      	b.n	800f4fe <dir_read+0x14c>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800f4da:	7d7b      	ldrb	r3, [r7, #21]
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	d109      	bne.n	800f4f4 <dir_read+0x142>
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f4e4:	4618      	mov	r0, r3
 800f4e6:	f7ff fd1f 	bl	800ef28 <sum_sfn>
 800f4ea:	4603      	mov	r3, r0
 800f4ec:	461a      	mov	r2, r3
 800f4ee:	7d3b      	ldrb	r3, [r7, #20]
 800f4f0:	4293      	cmp	r3, r2
 800f4f2:	d017      	beq.n	800f524 <dir_read+0x172>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	f04f 32ff 	mov.w	r2, #4294967295
 800f4fa:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					break;
 800f4fc:	e012      	b.n	800f524 <dir_read+0x172>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800f4fe:	2100      	movs	r1, #0
 800f500:	6878      	ldr	r0, [r7, #4]
 800f502:	f7ff f9c3 	bl	800e88c <dir_next>
 800f506:	4603      	mov	r3, r0
 800f508:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f50a:	7dfb      	ldrb	r3, [r7, #23]
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	d10b      	bne.n	800f528 <dir_read+0x176>
	while (dp->sect) {
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f514:	2b00      	cmp	r3, #0
 800f516:	f47f af5b 	bne.w	800f3d0 <dir_read+0x1e>
 800f51a:	e006      	b.n	800f52a <dir_read+0x178>
		if (res != FR_OK) break;
 800f51c:	bf00      	nop
 800f51e:	e004      	b.n	800f52a <dir_read+0x178>
					break;
 800f520:	bf00      	nop
 800f522:	e002      	b.n	800f52a <dir_read+0x178>
					break;
 800f524:	bf00      	nop
 800f526:	e000      	b.n	800f52a <dir_read+0x178>
		if (res != FR_OK) break;
 800f528:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800f52a:	7dfb      	ldrb	r3, [r7, #23]
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d002      	beq.n	800f536 <dir_read+0x184>
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	2200      	movs	r2, #0
 800f534:	639a      	str	r2, [r3, #56]	; 0x38
	return res;
 800f536:	7dfb      	ldrb	r3, [r7, #23]
}
 800f538:	4618      	mov	r0, r3
 800f53a:	3718      	adds	r7, #24
 800f53c:	46bd      	mov	sp, r7
 800f53e:	bd80      	pop	{r7, pc}

0800f540 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800f540:	b590      	push	{r4, r7, lr}
 800f542:	b089      	sub	sp, #36	; 0x24
 800f544:	af00      	add	r7, sp, #0
 800f546:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	681b      	ldr	r3, [r3, #0]
 800f54c:	60fb      	str	r3, [r7, #12]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800f54e:	2100      	movs	r1, #0
 800f550:	6878      	ldr	r0, [r7, #4]
 800f552:	f7ff f907 	bl	800e764 <dir_sdi>
 800f556:	4603      	mov	r3, r0
 800f558:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) return res;
 800f55a:	7ffb      	ldrb	r3, [r7, #31]
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d001      	beq.n	800f564 <dir_find+0x24>
 800f560:	7ffb      	ldrb	r3, [r7, #31]
 800f562:	e112      	b.n	800f78a <dir_find+0x24a>
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800f564:	68fb      	ldr	r3, [r7, #12]
 800f566:	781b      	ldrb	r3, [r3, #0]
 800f568:	2b04      	cmp	r3, #4
 800f56a:	d164      	bne.n	800f636 <dir_find+0xf6>
		BYTE nc;
		UINT di, ni;
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 800f56c:	68fb      	ldr	r3, [r7, #12]
 800f56e:	691b      	ldr	r3, [r3, #16]
 800f570:	4618      	mov	r0, r3
 800f572:	f7ff fd2d 	bl	800efd0 <xname_sum>
 800f576:	4603      	mov	r3, r0
 800f578:	813b      	strh	r3, [r7, #8]

		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800f57a:	e04f      	b.n	800f61c <dir_find+0xdc>
#if _MAX_LFN < 255
			if (fs->dirbuf[XDIR_NumName] > _MAX_LFN) continue;			/* Skip comparison if inaccessible object name */
#endif
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 800f57c:	68fb      	ldr	r3, [r7, #12]
 800f57e:	695b      	ldr	r3, [r3, #20]
 800f580:	3324      	adds	r3, #36	; 0x24
 800f582:	4618      	mov	r0, r3
 800f584:	f7fd fe3e 	bl	800d204 <ld_word>
 800f588:	4603      	mov	r3, r0
 800f58a:	461a      	mov	r2, r3
 800f58c:	893b      	ldrh	r3, [r7, #8]
 800f58e:	4293      	cmp	r3, r2
 800f590:	d000      	beq.n	800f594 <dir_find+0x54>
 800f592:	e043      	b.n	800f61c <dir_find+0xdc>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800f594:	68fb      	ldr	r3, [r7, #12]
 800f596:	695b      	ldr	r3, [r3, #20]
 800f598:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800f59c:	76fb      	strb	r3, [r7, #27]
 800f59e:	2340      	movs	r3, #64	; 0x40
 800f5a0:	617b      	str	r3, [r7, #20]
 800f5a2:	2300      	movs	r3, #0
 800f5a4:	613b      	str	r3, [r7, #16]
 800f5a6:	e029      	b.n	800f5fc <dir_find+0xbc>
				if ((di % SZDIRE) == 0) di += 2;
 800f5a8:	697b      	ldr	r3, [r7, #20]
 800f5aa:	f003 031f 	and.w	r3, r3, #31
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	d102      	bne.n	800f5b8 <dir_find+0x78>
 800f5b2:	697b      	ldr	r3, [r7, #20]
 800f5b4:	3302      	adds	r3, #2
 800f5b6:	617b      	str	r3, [r7, #20]
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800f5b8:	68fb      	ldr	r3, [r7, #12]
 800f5ba:	695a      	ldr	r2, [r3, #20]
 800f5bc:	697b      	ldr	r3, [r7, #20]
 800f5be:	4413      	add	r3, r2
 800f5c0:	4618      	mov	r0, r3
 800f5c2:	f7fd fe1f 	bl	800d204 <ld_word>
 800f5c6:	4603      	mov	r3, r0
 800f5c8:	4618      	mov	r0, r3
 800f5ca:	f002 f8cd 	bl	8011768 <ff_wtoupper>
 800f5ce:	4603      	mov	r3, r0
 800f5d0:	461c      	mov	r4, r3
 800f5d2:	68fb      	ldr	r3, [r7, #12]
 800f5d4:	691a      	ldr	r2, [r3, #16]
 800f5d6:	693b      	ldr	r3, [r7, #16]
 800f5d8:	005b      	lsls	r3, r3, #1
 800f5da:	4413      	add	r3, r2
 800f5dc:	881b      	ldrh	r3, [r3, #0]
 800f5de:	4618      	mov	r0, r3
 800f5e0:	f002 f8c2 	bl	8011768 <ff_wtoupper>
 800f5e4:	4603      	mov	r3, r0
 800f5e6:	429c      	cmp	r4, r3
 800f5e8:	d10c      	bne.n	800f604 <dir_find+0xc4>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800f5ea:	7efb      	ldrb	r3, [r7, #27]
 800f5ec:	3b01      	subs	r3, #1
 800f5ee:	76fb      	strb	r3, [r7, #27]
 800f5f0:	697b      	ldr	r3, [r7, #20]
 800f5f2:	3302      	adds	r3, #2
 800f5f4:	617b      	str	r3, [r7, #20]
 800f5f6:	693b      	ldr	r3, [r7, #16]
 800f5f8:	3301      	adds	r3, #1
 800f5fa:	613b      	str	r3, [r7, #16]
 800f5fc:	7efb      	ldrb	r3, [r7, #27]
 800f5fe:	2b00      	cmp	r3, #0
 800f600:	d1d2      	bne.n	800f5a8 <dir_find+0x68>
 800f602:	e000      	b.n	800f606 <dir_find+0xc6>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800f604:	bf00      	nop
			}
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800f606:	7efb      	ldrb	r3, [r7, #27]
 800f608:	2b00      	cmp	r3, #0
 800f60a:	d107      	bne.n	800f61c <dir_find+0xdc>
 800f60c:	68fb      	ldr	r3, [r7, #12]
 800f60e:	691a      	ldr	r2, [r3, #16]
 800f610:	693b      	ldr	r3, [r7, #16]
 800f612:	005b      	lsls	r3, r3, #1
 800f614:	4413      	add	r3, r2
 800f616:	881b      	ldrh	r3, [r3, #0]
 800f618:	2b00      	cmp	r3, #0
 800f61a:	d009      	beq.n	800f630 <dir_find+0xf0>
		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800f61c:	2100      	movs	r1, #0
 800f61e:	6878      	ldr	r0, [r7, #4]
 800f620:	f7ff fec7 	bl	800f3b2 <dir_read>
 800f624:	4603      	mov	r3, r0
 800f626:	77fb      	strb	r3, [r7, #31]
 800f628:	7ffb      	ldrb	r3, [r7, #31]
 800f62a:	2b00      	cmp	r3, #0
 800f62c:	d0a6      	beq.n	800f57c <dir_find+0x3c>
 800f62e:	e000      	b.n	800f632 <dir_find+0xf2>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800f630:	bf00      	nop
		}
		return res;
 800f632:	7ffb      	ldrb	r3, [r7, #31]
 800f634:	e0a9      	b.n	800f78a <dir_find+0x24a>
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800f636:	23ff      	movs	r3, #255	; 0xff
 800f638:	773b      	strb	r3, [r7, #28]
 800f63a:	7f3b      	ldrb	r3, [r7, #28]
 800f63c:	777b      	strb	r3, [r7, #29]
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	f04f 32ff 	mov.w	r2, #4294967295
 800f644:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
	do {
		res = move_window(fs, dp->sect);
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f64a:	4619      	mov	r1, r3
 800f64c:	68f8      	ldr	r0, [r7, #12]
 800f64e:	f7fe f9fd 	bl	800da4c <move_window>
 800f652:	4603      	mov	r3, r0
 800f654:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) break;
 800f656:	7ffb      	ldrb	r3, [r7, #31]
 800f658:	2b00      	cmp	r3, #0
 800f65a:	f040 8090 	bne.w	800f77e <dir_find+0x23e>
		c = dp->dir[DIR_Name];
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f662:	781b      	ldrb	r3, [r3, #0]
 800f664:	77bb      	strb	r3, [r7, #30]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800f666:	7fbb      	ldrb	r3, [r7, #30]
 800f668:	2b00      	cmp	r3, #0
 800f66a:	d102      	bne.n	800f672 <dir_find+0x132>
 800f66c:	2304      	movs	r3, #4
 800f66e:	77fb      	strb	r3, [r7, #31]
 800f670:	e08a      	b.n	800f788 <dir_find+0x248>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f676:	330b      	adds	r3, #11
 800f678:	781b      	ldrb	r3, [r3, #0]
 800f67a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f67e:	72fb      	strb	r3, [r7, #11]
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	7afa      	ldrb	r2, [r7, #11]
 800f684:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800f686:	7fbb      	ldrb	r3, [r7, #30]
 800f688:	2be5      	cmp	r3, #229	; 0xe5
 800f68a:	d007      	beq.n	800f69c <dir_find+0x15c>
 800f68c:	7afb      	ldrb	r3, [r7, #11]
 800f68e:	f003 0308 	and.w	r3, r3, #8
 800f692:	2b00      	cmp	r3, #0
 800f694:	d009      	beq.n	800f6aa <dir_find+0x16a>
 800f696:	7afb      	ldrb	r3, [r7, #11]
 800f698:	2b0f      	cmp	r3, #15
 800f69a:	d006      	beq.n	800f6aa <dir_find+0x16a>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800f69c:	23ff      	movs	r3, #255	; 0xff
 800f69e:	777b      	strb	r3, [r7, #29]
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	f04f 32ff 	mov.w	r2, #4294967295
 800f6a6:	64da      	str	r2, [r3, #76]	; 0x4c
 800f6a8:	e05e      	b.n	800f768 <dir_find+0x228>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800f6aa:	7afb      	ldrb	r3, [r7, #11]
 800f6ac:	2b0f      	cmp	r3, #15
 800f6ae:	d136      	bne.n	800f71e <dir_find+0x1de>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800f6b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d154      	bne.n	800f768 <dir_find+0x228>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800f6be:	7fbb      	ldrb	r3, [r7, #30]
 800f6c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	d00d      	beq.n	800f6e4 <dir_find+0x1a4>
						sum = dp->dir[LDIR_Chksum];
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f6cc:	7b5b      	ldrb	r3, [r3, #13]
 800f6ce:	773b      	strb	r3, [r7, #28]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800f6d0:	7fbb      	ldrb	r3, [r7, #30]
 800f6d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f6d6:	77bb      	strb	r3, [r7, #30]
 800f6d8:	7fbb      	ldrb	r3, [r7, #30]
 800f6da:	777b      	strb	r3, [r7, #29]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800f6e4:	7fba      	ldrb	r2, [r7, #30]
 800f6e6:	7f7b      	ldrb	r3, [r7, #29]
 800f6e8:	429a      	cmp	r2, r3
 800f6ea:	d115      	bne.n	800f718 <dir_find+0x1d8>
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f6f0:	330d      	adds	r3, #13
 800f6f2:	781b      	ldrb	r3, [r3, #0]
 800f6f4:	7f3a      	ldrb	r2, [r7, #28]
 800f6f6:	429a      	cmp	r2, r3
 800f6f8:	d10e      	bne.n	800f718 <dir_find+0x1d8>
 800f6fa:	68fb      	ldr	r3, [r7, #12]
 800f6fc:	691a      	ldr	r2, [r3, #16]
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f702:	4619      	mov	r1, r3
 800f704:	4610      	mov	r0, r2
 800f706:	f7ff fa43 	bl	800eb90 <cmp_lfn>
 800f70a:	4603      	mov	r3, r0
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	d003      	beq.n	800f718 <dir_find+0x1d8>
 800f710:	7f7b      	ldrb	r3, [r7, #29]
 800f712:	3b01      	subs	r3, #1
 800f714:	b2db      	uxtb	r3, r3
 800f716:	e000      	b.n	800f71a <dir_find+0x1da>
 800f718:	23ff      	movs	r3, #255	; 0xff
 800f71a:	777b      	strb	r3, [r7, #29]
 800f71c:	e024      	b.n	800f768 <dir_find+0x228>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800f71e:	7f7b      	ldrb	r3, [r7, #29]
 800f720:	2b00      	cmp	r3, #0
 800f722:	d109      	bne.n	800f738 <dir_find+0x1f8>
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f728:	4618      	mov	r0, r3
 800f72a:	f7ff fbfd 	bl	800ef28 <sum_sfn>
 800f72e:	4603      	mov	r3, r0
 800f730:	461a      	mov	r2, r3
 800f732:	7f3b      	ldrb	r3, [r7, #28]
 800f734:	4293      	cmp	r3, r2
 800f736:	d024      	beq.n	800f782 <dir_find+0x242>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800f73e:	f003 0301 	and.w	r3, r3, #1
 800f742:	2b00      	cmp	r3, #0
 800f744:	d10a      	bne.n	800f75c <dir_find+0x21c>
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	3340      	adds	r3, #64	; 0x40
 800f74e:	220b      	movs	r2, #11
 800f750:	4619      	mov	r1, r3
 800f752:	f7fd ff58 	bl	800d606 <mem_cmp>
 800f756:	4603      	mov	r3, r0
 800f758:	2b00      	cmp	r3, #0
 800f75a:	d014      	beq.n	800f786 <dir_find+0x246>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800f75c:	23ff      	movs	r3, #255	; 0xff
 800f75e:	777b      	strb	r3, [r7, #29]
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	f04f 32ff 	mov.w	r2, #4294967295
 800f766:	64da      	str	r2, [r3, #76]	; 0x4c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800f768:	2100      	movs	r1, #0
 800f76a:	6878      	ldr	r0, [r7, #4]
 800f76c:	f7ff f88e 	bl	800e88c <dir_next>
 800f770:	4603      	mov	r3, r0
 800f772:	77fb      	strb	r3, [r7, #31]
	} while (res == FR_OK);
 800f774:	7ffb      	ldrb	r3, [r7, #31]
 800f776:	2b00      	cmp	r3, #0
 800f778:	f43f af65 	beq.w	800f646 <dir_find+0x106>
 800f77c:	e004      	b.n	800f788 <dir_find+0x248>
		if (res != FR_OK) break;
 800f77e:	bf00      	nop
 800f780:	e002      	b.n	800f788 <dir_find+0x248>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800f782:	bf00      	nop
 800f784:	e000      	b.n	800f788 <dir_find+0x248>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800f786:	bf00      	nop

	return res;
 800f788:	7ffb      	ldrb	r3, [r7, #31]
}
 800f78a:	4618      	mov	r0, r3
 800f78c:	3724      	adds	r7, #36	; 0x24
 800f78e:	46bd      	mov	sp, r7
 800f790:	bd90      	pop	{r4, r7, pc}
	...

0800f794 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800f794:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800f798:	b0a0      	sub	sp, #128	; 0x80
 800f79a:	af00      	add	r7, sp, #0
 800f79c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	681b      	ldr	r3, [r3, #0]
 800f7a2:	66fb      	str	r3, [r7, #108]	; 0x6c
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800f7aa:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	d001      	beq.n	800f7b6 <dir_register+0x22>
 800f7b2:	2306      	movs	r3, #6
 800f7b4:	e198      	b.n	800fae8 <dir_register+0x354>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800f7b6:	2300      	movs	r3, #0
 800f7b8:	677b      	str	r3, [r7, #116]	; 0x74
 800f7ba:	e002      	b.n	800f7c2 <dir_register+0x2e>
 800f7bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f7be:	3301      	adds	r3, #1
 800f7c0:	677b      	str	r3, [r7, #116]	; 0x74
 800f7c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f7c4:	691a      	ldr	r2, [r3, #16]
 800f7c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f7c8:	005b      	lsls	r3, r3, #1
 800f7ca:	4413      	add	r3, r2
 800f7cc:	881b      	ldrh	r3, [r3, #0]
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d1f4      	bne.n	800f7bc <dir_register+0x28>

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800f7d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f7d4:	781b      	ldrb	r3, [r3, #0]
 800f7d6:	2b04      	cmp	r3, #4
 800f7d8:	f040 80a9 	bne.w	800f92e <dir_register+0x19a>
		DIR dj;

		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 800f7dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f7de:	330e      	adds	r3, #14
 800f7e0:	4aa7      	ldr	r2, [pc, #668]	; (800fa80 <dir_register+0x2ec>)
 800f7e2:	fba2 2303 	umull	r2, r3, r2, r3
 800f7e6:	08db      	lsrs	r3, r3, #3
 800f7e8:	3302      	adds	r3, #2
 800f7ea:	673b      	str	r3, [r7, #112]	; 0x70
		res = dir_alloc(dp, nent);		/* Allocate entries */
 800f7ec:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800f7ee:	6878      	ldr	r0, [r7, #4]
 800f7f0:	f7ff f932 	bl	800ea58 <dir_alloc>
 800f7f4:	4603      	mov	r3, r0
 800f7f6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res != FR_OK) return res;
 800f7fa:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	d002      	beq.n	800f808 <dir_register+0x74>
 800f802:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f806:	e16f      	b.n	800fae8 <dir_register+0x354>
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f80c:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800f80e:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
 800f812:	440b      	add	r3, r1
 800f814:	015b      	lsls	r3, r3, #5
 800f816:	1ad2      	subs	r2, r2, r3
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	64da      	str	r2, [r3, #76]	; 0x4c

		if (dp->obj.sclust != 0 && (dp->obj.stat & 4)) {	/* Has the sub-directory been stretched? */
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	689b      	ldr	r3, [r3, #8]
 800f820:	2b00      	cmp	r3, #0
 800f822:	d07a      	beq.n	800f91a <dir_register+0x186>
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	79db      	ldrb	r3, [r3, #7]
 800f828:	f003 0304 	and.w	r3, r3, #4
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	d074      	beq.n	800f91a <dir_register+0x186>
			dp->obj.objsize += (DWORD)fs->csize * SS(fs);	/* Increase the directory size by cluster size */
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
 800f836:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f838:	895b      	ldrh	r3, [r3, #10]
 800f83a:	4618      	mov	r0, r3
 800f83c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f83e:	899b      	ldrh	r3, [r3, #12]
 800f840:	fb03 f300 	mul.w	r3, r3, r0
 800f844:	469b      	mov	fp, r3
 800f846:	f04f 0c00 	mov.w	ip, #0
 800f84a:	eb1b 0301 	adds.w	r3, fp, r1
 800f84e:	eb4c 0402 	adc.w	r4, ip, r2
 800f852:	687a      	ldr	r2, [r7, #4]
 800f854:	e9c2 3404 	strd	r3, r4, [r2, #16]
			res = fill_first_frag(&dp->obj);				/* Fill first fragment on the FAT if needed */
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	4618      	mov	r0, r3
 800f85c:	f7fe fd26 	bl	800e2ac <fill_first_frag>
 800f860:	4603      	mov	r3, r0
 800f862:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800f866:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	d002      	beq.n	800f874 <dir_register+0xe0>
 800f86e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f872:	e139      	b.n	800fae8 <dir_register+0x354>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800f874:	6878      	ldr	r0, [r7, #4]
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f87a:	f04f 32ff 	mov.w	r2, #4294967295
 800f87e:	4619      	mov	r1, r3
 800f880:	f7fe fd43 	bl	800e30a <fill_last_frag>
 800f884:	4603      	mov	r3, r0
 800f886:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800f88a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f88e:	2b00      	cmp	r3, #0
 800f890:	d002      	beq.n	800f898 <dir_register+0x104>
 800f892:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f896:	e127      	b.n	800fae8 <dir_register+0x354>
			res = load_obj_dir(&dj, &dp->obj);				/* Load the object status */
 800f898:	687a      	ldr	r2, [r7, #4]
 800f89a:	f107 0308 	add.w	r3, r7, #8
 800f89e:	4611      	mov	r1, r2
 800f8a0:	4618      	mov	r0, r3
 800f8a2:	f7ff fc87 	bl	800f1b4 <load_obj_dir>
 800f8a6:	4603      	mov	r3, r0
 800f8a8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800f8ac:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	d002      	beq.n	800f8ba <dir_register+0x126>
 800f8b4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f8b8:	e116      	b.n	800fae8 <dir_register+0x354>
			st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);		/* Update the allocation status */
 800f8ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f8bc:	695b      	ldr	r3, [r3, #20]
 800f8be:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800f8c8:	461a      	mov	r2, r3
 800f8ca:	4623      	mov	r3, r4
 800f8cc:	4608      	mov	r0, r1
 800f8ce:	f7fd fdd8 	bl	800d482 <st_qword>
			st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 800f8d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f8d4:	695b      	ldr	r3, [r3, #20]
 800f8d6:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800f8e0:	461a      	mov	r2, r3
 800f8e2:	4623      	mov	r3, r4
 800f8e4:	4608      	mov	r0, r1
 800f8e6:	f7fd fdcc 	bl	800d482 <st_qword>
			fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	79da      	ldrb	r2, [r3, #7]
 800f8ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f8f0:	695b      	ldr	r3, [r3, #20]
 800f8f2:	3321      	adds	r3, #33	; 0x21
 800f8f4:	f042 0201 	orr.w	r2, r2, #1
 800f8f8:	b2d2      	uxtb	r2, r2
 800f8fa:	701a      	strb	r2, [r3, #0]
			res = store_xdir(&dj);							/* Store the object status */
 800f8fc:	f107 0308 	add.w	r3, r7, #8
 800f900:	4618      	mov	r0, r3
 800f902:	f7ff fc94 	bl	800f22e <store_xdir>
 800f906:	4603      	mov	r3, r0
 800f908:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800f90c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f910:	2b00      	cmp	r3, #0
 800f912:	d002      	beq.n	800f91a <dir_register+0x186>
 800f914:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f918:	e0e6      	b.n	800fae8 <dir_register+0x354>
		}

		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 800f91a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f91c:	695a      	ldr	r2, [r3, #20]
 800f91e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f920:	691b      	ldr	r3, [r3, #16]
 800f922:	4619      	mov	r1, r3
 800f924:	4610      	mov	r0, r2
 800f926:	f7ff fcdd 	bl	800f2e4 <create_xdir>
		return FR_OK;
 800f92a:	2300      	movs	r3, #0
 800f92c:	e0dc      	b.n	800fae8 <dir_register+0x354>
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800f934:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800f938:	220c      	movs	r2, #12
 800f93a:	4618      	mov	r0, r3
 800f93c:	f7fd fe28 	bl	800d590 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800f940:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f944:	f003 0301 	and.w	r3, r3, #1
 800f948:	2b00      	cmp	r3, #0
 800f94a:	d033      	beq.n	800f9b4 <dir_register+0x220>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	2240      	movs	r2, #64	; 0x40
 800f950:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		for (n = 1; n < 100; n++) {
 800f954:	2301      	movs	r3, #1
 800f956:	67bb      	str	r3, [r7, #120]	; 0x78
 800f958:	e016      	b.n	800f988 <dir_register+0x1f4>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800f960:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f962:	691a      	ldr	r2, [r3, #16]
 800f964:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 800f968:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f96a:	f7ff fa4d 	bl	800ee08 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800f96e:	6878      	ldr	r0, [r7, #4]
 800f970:	f7ff fde6 	bl	800f540 <dir_find>
 800f974:	4603      	mov	r3, r0
 800f976:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) break;
 800f97a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f97e:	2b00      	cmp	r3, #0
 800f980:	d106      	bne.n	800f990 <dir_register+0x1fc>
		for (n = 1; n < 100; n++) {
 800f982:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f984:	3301      	adds	r3, #1
 800f986:	67bb      	str	r3, [r7, #120]	; 0x78
 800f988:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f98a:	2b63      	cmp	r3, #99	; 0x63
 800f98c:	d9e5      	bls.n	800f95a <dir_register+0x1c6>
 800f98e:	e000      	b.n	800f992 <dir_register+0x1fe>
			if (res != FR_OK) break;
 800f990:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800f992:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f994:	2b64      	cmp	r3, #100	; 0x64
 800f996:	d101      	bne.n	800f99c <dir_register+0x208>
 800f998:	2307      	movs	r3, #7
 800f99a:	e0a5      	b.n	800fae8 <dir_register+0x354>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800f99c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f9a0:	2b04      	cmp	r3, #4
 800f9a2:	d002      	beq.n	800f9aa <dir_register+0x216>
 800f9a4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f9a8:	e09e      	b.n	800fae8 <dir_register+0x354>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800f9aa:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800f9b4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f9b8:	f003 0302 	and.w	r3, r3, #2
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	d007      	beq.n	800f9d0 <dir_register+0x23c>
 800f9c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f9c2:	330c      	adds	r3, #12
 800f9c4:	4a2f      	ldr	r2, [pc, #188]	; (800fa84 <dir_register+0x2f0>)
 800f9c6:	fba2 2303 	umull	r2, r3, r2, r3
 800f9ca:	089b      	lsrs	r3, r3, #2
 800f9cc:	3301      	adds	r3, #1
 800f9ce:	e000      	b.n	800f9d2 <dir_register+0x23e>
 800f9d0:	2301      	movs	r3, #1
 800f9d2:	673b      	str	r3, [r7, #112]	; 0x70
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800f9d4:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800f9d6:	6878      	ldr	r0, [r7, #4]
 800f9d8:	f7ff f83e 	bl	800ea58 <dir_alloc>
 800f9dc:	4603      	mov	r3, r0
 800f9de:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800f9e2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	d14f      	bne.n	800fa8a <dir_register+0x2f6>
 800f9ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f9ec:	3b01      	subs	r3, #1
 800f9ee:	673b      	str	r3, [r7, #112]	; 0x70
 800f9f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	d049      	beq.n	800fa8a <dir_register+0x2f6>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f9fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f9fc:	015b      	lsls	r3, r3, #5
 800f9fe:	1ad3      	subs	r3, r2, r3
 800fa00:	4619      	mov	r1, r3
 800fa02:	6878      	ldr	r0, [r7, #4]
 800fa04:	f7fe feae 	bl	800e764 <dir_sdi>
 800fa08:	4603      	mov	r3, r0
 800fa0a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 800fa0e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800fa12:	2b00      	cmp	r3, #0
 800fa14:	d139      	bne.n	800fa8a <dir_register+0x2f6>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	3340      	adds	r3, #64	; 0x40
 800fa1a:	4618      	mov	r0, r3
 800fa1c:	f7ff fa84 	bl	800ef28 <sum_sfn>
 800fa20:	4603      	mov	r3, r0
 800fa22:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa2a:	4619      	mov	r1, r3
 800fa2c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800fa2e:	f7fe f80d 	bl	800da4c <move_window>
 800fa32:	4603      	mov	r3, r0
 800fa34:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (res != FR_OK) break;
 800fa38:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	d123      	bne.n	800fa88 <dir_register+0x2f4>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800fa40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fa42:	6918      	ldr	r0, [r3, #16]
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800fa48:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fa4a:	b2da      	uxtb	r2, r3
 800fa4c:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800fa50:	f7ff f972 	bl	800ed38 <put_lfn>
				fs->wflag = 1;
 800fa54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fa56:	2201      	movs	r2, #1
 800fa58:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800fa5a:	2100      	movs	r1, #0
 800fa5c:	6878      	ldr	r0, [r7, #4]
 800fa5e:	f7fe ff15 	bl	800e88c <dir_next>
 800fa62:	4603      	mov	r3, r0
 800fa64:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			} while (res == FR_OK && --nent);
 800fa68:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	d10c      	bne.n	800fa8a <dir_register+0x2f6>
 800fa70:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fa72:	3b01      	subs	r3, #1
 800fa74:	673b      	str	r3, [r7, #112]	; 0x70
 800fa76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	d1d4      	bne.n	800fa26 <dir_register+0x292>
 800fa7c:	e005      	b.n	800fa8a <dir_register+0x2f6>
 800fa7e:	bf00      	nop
 800fa80:	88888889 	.word	0x88888889
 800fa84:	4ec4ec4f 	.word	0x4ec4ec4f
				if (res != FR_OK) break;
 800fa88:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800fa8a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800fa8e:	2b00      	cmp	r3, #0
 800fa90:	d128      	bne.n	800fae4 <dir_register+0x350>
		res = move_window(fs, dp->sect);
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa96:	4619      	mov	r1, r3
 800fa98:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800fa9a:	f7fd ffd7 	bl	800da4c <move_window>
 800fa9e:	4603      	mov	r3, r0
 800faa0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 800faa4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	d11b      	bne.n	800fae4 <dir_register+0x350>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fab0:	2220      	movs	r2, #32
 800fab2:	2100      	movs	r1, #0
 800fab4:	4618      	mov	r0, r3
 800fab6:	f7fd fd8c 	bl	800d5d2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	3340      	adds	r3, #64	; 0x40
 800fac2:	220b      	movs	r2, #11
 800fac4:	4619      	mov	r1, r3
 800fac6:	f7fd fd63 	bl	800d590 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fad4:	330c      	adds	r3, #12
 800fad6:	f002 0218 	and.w	r2, r2, #24
 800fada:	b2d2      	uxtb	r2, r2
 800fadc:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800fade:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fae0:	2201      	movs	r2, #1
 800fae2:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800fae4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800fae8:	4618      	mov	r0, r3
 800faea:	3780      	adds	r7, #128	; 0x80
 800faec:	46bd      	mov	sp, r7
 800faee:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800faf2:	bf00      	nop

0800faf4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800faf4:	b580      	push	{r7, lr}
 800faf6:	b08a      	sub	sp, #40	; 0x28
 800faf8:	af00      	add	r7, sp, #0
 800fafa:	6078      	str	r0, [r7, #4]
 800fafc:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800fafe:	683b      	ldr	r3, [r7, #0]
 800fb00:	681b      	ldr	r3, [r3, #0]
 800fb02:	613b      	str	r3, [r7, #16]
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	681b      	ldr	r3, [r3, #0]
 800fb08:	691b      	ldr	r3, [r3, #16]
 800fb0a:	60fb      	str	r3, [r7, #12]
 800fb0c:	2300      	movs	r3, #0
 800fb0e:	617b      	str	r3, [r7, #20]
 800fb10:	697b      	ldr	r3, [r7, #20]
 800fb12:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800fb14:	69bb      	ldr	r3, [r7, #24]
 800fb16:	1c5a      	adds	r2, r3, #1
 800fb18:	61ba      	str	r2, [r7, #24]
 800fb1a:	693a      	ldr	r2, [r7, #16]
 800fb1c:	4413      	add	r3, r2
 800fb1e:	781b      	ldrb	r3, [r3, #0]
 800fb20:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800fb22:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fb24:	2b1f      	cmp	r3, #31
 800fb26:	d940      	bls.n	800fbaa <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800fb28:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fb2a:	2b2f      	cmp	r3, #47	; 0x2f
 800fb2c:	d006      	beq.n	800fb3c <create_name+0x48>
 800fb2e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fb30:	2b5c      	cmp	r3, #92	; 0x5c
 800fb32:	d110      	bne.n	800fb56 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800fb34:	e002      	b.n	800fb3c <create_name+0x48>
 800fb36:	69bb      	ldr	r3, [r7, #24]
 800fb38:	3301      	adds	r3, #1
 800fb3a:	61bb      	str	r3, [r7, #24]
 800fb3c:	693a      	ldr	r2, [r7, #16]
 800fb3e:	69bb      	ldr	r3, [r7, #24]
 800fb40:	4413      	add	r3, r2
 800fb42:	781b      	ldrb	r3, [r3, #0]
 800fb44:	2b2f      	cmp	r3, #47	; 0x2f
 800fb46:	d0f6      	beq.n	800fb36 <create_name+0x42>
 800fb48:	693a      	ldr	r2, [r7, #16]
 800fb4a:	69bb      	ldr	r3, [r7, #24]
 800fb4c:	4413      	add	r3, r2
 800fb4e:	781b      	ldrb	r3, [r3, #0]
 800fb50:	2b5c      	cmp	r3, #92	; 0x5c
 800fb52:	d0f0      	beq.n	800fb36 <create_name+0x42>
			break;
 800fb54:	e02a      	b.n	800fbac <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800fb56:	697b      	ldr	r3, [r7, #20]
 800fb58:	2bfe      	cmp	r3, #254	; 0xfe
 800fb5a:	d901      	bls.n	800fb60 <create_name+0x6c>
 800fb5c:	2306      	movs	r3, #6
 800fb5e:	e177      	b.n	800fe50 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 800fb60:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fb62:	b2db      	uxtb	r3, r3
 800fb64:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800fb66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fb68:	2101      	movs	r1, #1
 800fb6a:	4618      	mov	r0, r3
 800fb6c:	f001 fdc0 	bl	80116f0 <ff_convert>
 800fb70:	4603      	mov	r3, r0
 800fb72:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800fb74:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	d101      	bne.n	800fb7e <create_name+0x8a>
 800fb7a:	2306      	movs	r3, #6
 800fb7c:	e168      	b.n	800fe50 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800fb7e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fb80:	2b7f      	cmp	r3, #127	; 0x7f
 800fb82:	d809      	bhi.n	800fb98 <create_name+0xa4>
 800fb84:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fb86:	4619      	mov	r1, r3
 800fb88:	48b3      	ldr	r0, [pc, #716]	; (800fe58 <create_name+0x364>)
 800fb8a:	f7fd fd63 	bl	800d654 <chk_chr>
 800fb8e:	4603      	mov	r3, r0
 800fb90:	2b00      	cmp	r3, #0
 800fb92:	d001      	beq.n	800fb98 <create_name+0xa4>
 800fb94:	2306      	movs	r3, #6
 800fb96:	e15b      	b.n	800fe50 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 800fb98:	697b      	ldr	r3, [r7, #20]
 800fb9a:	1c5a      	adds	r2, r3, #1
 800fb9c:	617a      	str	r2, [r7, #20]
 800fb9e:	005b      	lsls	r3, r3, #1
 800fba0:	68fa      	ldr	r2, [r7, #12]
 800fba2:	4413      	add	r3, r2
 800fba4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800fba6:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800fba8:	e7b4      	b.n	800fb14 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800fbaa:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800fbac:	693a      	ldr	r2, [r7, #16]
 800fbae:	69bb      	ldr	r3, [r7, #24]
 800fbb0:	441a      	add	r2, r3
 800fbb2:	683b      	ldr	r3, [r7, #0]
 800fbb4:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800fbb6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fbb8:	2b1f      	cmp	r3, #31
 800fbba:	d801      	bhi.n	800fbc0 <create_name+0xcc>
 800fbbc:	2304      	movs	r3, #4
 800fbbe:	e000      	b.n	800fbc2 <create_name+0xce>
 800fbc0:	2300      	movs	r3, #0
 800fbc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800fbc6:	e011      	b.n	800fbec <create_name+0xf8>
		w = lfn[di - 1];
 800fbc8:	697a      	ldr	r2, [r7, #20]
 800fbca:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800fbce:	4413      	add	r3, r2
 800fbd0:	005b      	lsls	r3, r3, #1
 800fbd2:	68fa      	ldr	r2, [r7, #12]
 800fbd4:	4413      	add	r3, r2
 800fbd6:	881b      	ldrh	r3, [r3, #0]
 800fbd8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800fbda:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fbdc:	2b20      	cmp	r3, #32
 800fbde:	d002      	beq.n	800fbe6 <create_name+0xf2>
 800fbe0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fbe2:	2b2e      	cmp	r3, #46	; 0x2e
 800fbe4:	d106      	bne.n	800fbf4 <create_name+0x100>
		di--;
 800fbe6:	697b      	ldr	r3, [r7, #20]
 800fbe8:	3b01      	subs	r3, #1
 800fbea:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800fbec:	697b      	ldr	r3, [r7, #20]
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	d1ea      	bne.n	800fbc8 <create_name+0xd4>
 800fbf2:	e000      	b.n	800fbf6 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800fbf4:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800fbf6:	697b      	ldr	r3, [r7, #20]
 800fbf8:	005b      	lsls	r3, r3, #1
 800fbfa:	68fa      	ldr	r2, [r7, #12]
 800fbfc:	4413      	add	r3, r2
 800fbfe:	2200      	movs	r2, #0
 800fc00:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800fc02:	697b      	ldr	r3, [r7, #20]
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	d101      	bne.n	800fc0c <create_name+0x118>
 800fc08:	2306      	movs	r3, #6
 800fc0a:	e121      	b.n	800fe50 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	3340      	adds	r3, #64	; 0x40
 800fc10:	220b      	movs	r2, #11
 800fc12:	2120      	movs	r1, #32
 800fc14:	4618      	mov	r0, r3
 800fc16:	f7fd fcdc 	bl	800d5d2 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800fc1a:	2300      	movs	r3, #0
 800fc1c:	61bb      	str	r3, [r7, #24]
 800fc1e:	e002      	b.n	800fc26 <create_name+0x132>
 800fc20:	69bb      	ldr	r3, [r7, #24]
 800fc22:	3301      	adds	r3, #1
 800fc24:	61bb      	str	r3, [r7, #24]
 800fc26:	69bb      	ldr	r3, [r7, #24]
 800fc28:	005b      	lsls	r3, r3, #1
 800fc2a:	68fa      	ldr	r2, [r7, #12]
 800fc2c:	4413      	add	r3, r2
 800fc2e:	881b      	ldrh	r3, [r3, #0]
 800fc30:	2b20      	cmp	r3, #32
 800fc32:	d0f5      	beq.n	800fc20 <create_name+0x12c>
 800fc34:	69bb      	ldr	r3, [r7, #24]
 800fc36:	005b      	lsls	r3, r3, #1
 800fc38:	68fa      	ldr	r2, [r7, #12]
 800fc3a:	4413      	add	r3, r2
 800fc3c:	881b      	ldrh	r3, [r3, #0]
 800fc3e:	2b2e      	cmp	r3, #46	; 0x2e
 800fc40:	d0ee      	beq.n	800fc20 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800fc42:	69bb      	ldr	r3, [r7, #24]
 800fc44:	2b00      	cmp	r3, #0
 800fc46:	d009      	beq.n	800fc5c <create_name+0x168>
 800fc48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fc4c:	f043 0303 	orr.w	r3, r3, #3
 800fc50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800fc54:	e002      	b.n	800fc5c <create_name+0x168>
 800fc56:	697b      	ldr	r3, [r7, #20]
 800fc58:	3b01      	subs	r3, #1
 800fc5a:	617b      	str	r3, [r7, #20]
 800fc5c:	697b      	ldr	r3, [r7, #20]
 800fc5e:	2b00      	cmp	r3, #0
 800fc60:	d009      	beq.n	800fc76 <create_name+0x182>
 800fc62:	697a      	ldr	r2, [r7, #20]
 800fc64:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800fc68:	4413      	add	r3, r2
 800fc6a:	005b      	lsls	r3, r3, #1
 800fc6c:	68fa      	ldr	r2, [r7, #12]
 800fc6e:	4413      	add	r3, r2
 800fc70:	881b      	ldrh	r3, [r3, #0]
 800fc72:	2b2e      	cmp	r3, #46	; 0x2e
 800fc74:	d1ef      	bne.n	800fc56 <create_name+0x162>

	i = b = 0; ni = 8;
 800fc76:	2300      	movs	r3, #0
 800fc78:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800fc7c:	2300      	movs	r3, #0
 800fc7e:	623b      	str	r3, [r7, #32]
 800fc80:	2308      	movs	r3, #8
 800fc82:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800fc84:	69bb      	ldr	r3, [r7, #24]
 800fc86:	1c5a      	adds	r2, r3, #1
 800fc88:	61ba      	str	r2, [r7, #24]
 800fc8a:	005b      	lsls	r3, r3, #1
 800fc8c:	68fa      	ldr	r2, [r7, #12]
 800fc8e:	4413      	add	r3, r2
 800fc90:	881b      	ldrh	r3, [r3, #0]
 800fc92:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800fc94:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	f000 8090 	beq.w	800fdbc <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800fc9c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fc9e:	2b20      	cmp	r3, #32
 800fca0:	d006      	beq.n	800fcb0 <create_name+0x1bc>
 800fca2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fca4:	2b2e      	cmp	r3, #46	; 0x2e
 800fca6:	d10a      	bne.n	800fcbe <create_name+0x1ca>
 800fca8:	69ba      	ldr	r2, [r7, #24]
 800fcaa:	697b      	ldr	r3, [r7, #20]
 800fcac:	429a      	cmp	r2, r3
 800fcae:	d006      	beq.n	800fcbe <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800fcb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fcb4:	f043 0303 	orr.w	r3, r3, #3
 800fcb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fcbc:	e07d      	b.n	800fdba <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800fcbe:	6a3a      	ldr	r2, [r7, #32]
 800fcc0:	69fb      	ldr	r3, [r7, #28]
 800fcc2:	429a      	cmp	r2, r3
 800fcc4:	d203      	bcs.n	800fcce <create_name+0x1da>
 800fcc6:	69ba      	ldr	r2, [r7, #24]
 800fcc8:	697b      	ldr	r3, [r7, #20]
 800fcca:	429a      	cmp	r2, r3
 800fccc:	d123      	bne.n	800fd16 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800fcce:	69fb      	ldr	r3, [r7, #28]
 800fcd0:	2b0b      	cmp	r3, #11
 800fcd2:	d106      	bne.n	800fce2 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800fcd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fcd8:	f043 0303 	orr.w	r3, r3, #3
 800fcdc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fce0:	e06f      	b.n	800fdc2 <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800fce2:	69ba      	ldr	r2, [r7, #24]
 800fce4:	697b      	ldr	r3, [r7, #20]
 800fce6:	429a      	cmp	r2, r3
 800fce8:	d005      	beq.n	800fcf6 <create_name+0x202>
 800fcea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fcee:	f043 0303 	orr.w	r3, r3, #3
 800fcf2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800fcf6:	69ba      	ldr	r2, [r7, #24]
 800fcf8:	697b      	ldr	r3, [r7, #20]
 800fcfa:	429a      	cmp	r2, r3
 800fcfc:	d860      	bhi.n	800fdc0 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800fcfe:	697b      	ldr	r3, [r7, #20]
 800fd00:	61bb      	str	r3, [r7, #24]
 800fd02:	2308      	movs	r3, #8
 800fd04:	623b      	str	r3, [r7, #32]
 800fd06:	230b      	movs	r3, #11
 800fd08:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800fd0a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fd0e:	009b      	lsls	r3, r3, #2
 800fd10:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800fd14:	e051      	b.n	800fdba <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800fd16:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fd18:	2b7f      	cmp	r3, #127	; 0x7f
 800fd1a:	d914      	bls.n	800fd46 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800fd1c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fd1e:	2100      	movs	r1, #0
 800fd20:	4618      	mov	r0, r3
 800fd22:	f001 fce5 	bl	80116f0 <ff_convert>
 800fd26:	4603      	mov	r3, r0
 800fd28:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800fd2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	d004      	beq.n	800fd3a <create_name+0x246>
 800fd30:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fd32:	3b80      	subs	r3, #128	; 0x80
 800fd34:	4a49      	ldr	r2, [pc, #292]	; (800fe5c <create_name+0x368>)
 800fd36:	5cd3      	ldrb	r3, [r2, r3]
 800fd38:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800fd3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fd3e:	f043 0302 	orr.w	r3, r3, #2
 800fd42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800fd46:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	d007      	beq.n	800fd5c <create_name+0x268>
 800fd4c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fd4e:	4619      	mov	r1, r3
 800fd50:	4843      	ldr	r0, [pc, #268]	; (800fe60 <create_name+0x36c>)
 800fd52:	f7fd fc7f 	bl	800d654 <chk_chr>
 800fd56:	4603      	mov	r3, r0
 800fd58:	2b00      	cmp	r3, #0
 800fd5a:	d008      	beq.n	800fd6e <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800fd5c:	235f      	movs	r3, #95	; 0x5f
 800fd5e:	84bb      	strh	r3, [r7, #36]	; 0x24
 800fd60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fd64:	f043 0303 	orr.w	r3, r3, #3
 800fd68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fd6c:	e01b      	b.n	800fda6 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800fd6e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fd70:	2b40      	cmp	r3, #64	; 0x40
 800fd72:	d909      	bls.n	800fd88 <create_name+0x294>
 800fd74:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fd76:	2b5a      	cmp	r3, #90	; 0x5a
 800fd78:	d806      	bhi.n	800fd88 <create_name+0x294>
					b |= 2;
 800fd7a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fd7e:	f043 0302 	orr.w	r3, r3, #2
 800fd82:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800fd86:	e00e      	b.n	800fda6 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800fd88:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fd8a:	2b60      	cmp	r3, #96	; 0x60
 800fd8c:	d90b      	bls.n	800fda6 <create_name+0x2b2>
 800fd8e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fd90:	2b7a      	cmp	r3, #122	; 0x7a
 800fd92:	d808      	bhi.n	800fda6 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800fd94:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fd98:	f043 0301 	orr.w	r3, r3, #1
 800fd9c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800fda0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fda2:	3b20      	subs	r3, #32
 800fda4:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800fda6:	6a3b      	ldr	r3, [r7, #32]
 800fda8:	1c5a      	adds	r2, r3, #1
 800fdaa:	623a      	str	r2, [r7, #32]
 800fdac:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800fdae:	b2d1      	uxtb	r1, r2
 800fdb0:	687a      	ldr	r2, [r7, #4]
 800fdb2:	4413      	add	r3, r2
 800fdb4:	460a      	mov	r2, r1
 800fdb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		w = lfn[si++];					/* Get an LFN character */
 800fdba:	e763      	b.n	800fc84 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800fdbc:	bf00      	nop
 800fdbe:	e000      	b.n	800fdc2 <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 800fdc0:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fdc8:	2be5      	cmp	r3, #229	; 0xe5
 800fdca:	d103      	bne.n	800fdd4 <create_name+0x2e0>
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	2205      	movs	r2, #5
 800fdd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	if (ni == 8) b <<= 2;
 800fdd4:	69fb      	ldr	r3, [r7, #28]
 800fdd6:	2b08      	cmp	r3, #8
 800fdd8:	d104      	bne.n	800fde4 <create_name+0x2f0>
 800fdda:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fdde:	009b      	lsls	r3, r3, #2
 800fde0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800fde4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fde8:	f003 030c 	and.w	r3, r3, #12
 800fdec:	2b0c      	cmp	r3, #12
 800fdee:	d005      	beq.n	800fdfc <create_name+0x308>
 800fdf0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fdf4:	f003 0303 	and.w	r3, r3, #3
 800fdf8:	2b03      	cmp	r3, #3
 800fdfa:	d105      	bne.n	800fe08 <create_name+0x314>
 800fdfc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fe00:	f043 0302 	orr.w	r3, r3, #2
 800fe04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800fe08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fe0c:	f003 0302 	and.w	r3, r3, #2
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	d117      	bne.n	800fe44 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800fe14:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fe18:	f003 0303 	and.w	r3, r3, #3
 800fe1c:	2b01      	cmp	r3, #1
 800fe1e:	d105      	bne.n	800fe2c <create_name+0x338>
 800fe20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fe24:	f043 0310 	orr.w	r3, r3, #16
 800fe28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800fe2c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fe30:	f003 030c 	and.w	r3, r3, #12
 800fe34:	2b04      	cmp	r3, #4
 800fe36:	d105      	bne.n	800fe44 <create_name+0x350>
 800fe38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fe3c:	f043 0308 	orr.w	r3, r3, #8
 800fe40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800fe4a:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b

	return FR_OK;
 800fe4e:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800fe50:	4618      	mov	r0, r3
 800fe52:	3728      	adds	r7, #40	; 0x28
 800fe54:	46bd      	mov	sp, r7
 800fe56:	bd80      	pop	{r7, pc}
 800fe58:	08016048 	.word	0x08016048
 800fe5c:	08016150 	.word	0x08016150
 800fe60:	08016054 	.word	0x08016054

0800fe64 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800fe64:	b590      	push	{r4, r7, lr}
 800fe66:	b087      	sub	sp, #28
 800fe68:	af00      	add	r7, sp, #0
 800fe6a:	6078      	str	r0, [r7, #4]
 800fe6c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800fe72:	693b      	ldr	r3, [r7, #16]
 800fe74:	681b      	ldr	r3, [r3, #0]
 800fe76:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800fe78:	e002      	b.n	800fe80 <follow_path+0x1c>
 800fe7a:	683b      	ldr	r3, [r7, #0]
 800fe7c:	3301      	adds	r3, #1
 800fe7e:	603b      	str	r3, [r7, #0]
 800fe80:	683b      	ldr	r3, [r7, #0]
 800fe82:	781b      	ldrb	r3, [r3, #0]
 800fe84:	2b2f      	cmp	r3, #47	; 0x2f
 800fe86:	d0f8      	beq.n	800fe7a <follow_path+0x16>
 800fe88:	683b      	ldr	r3, [r7, #0]
 800fe8a:	781b      	ldrb	r3, [r3, #0]
 800fe8c:	2b5c      	cmp	r3, #92	; 0x5c
 800fe8e:	d0f4      	beq.n	800fe7a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800fe90:	693b      	ldr	r3, [r7, #16]
 800fe92:	2200      	movs	r2, #0
 800fe94:	609a      	str	r2, [r3, #8]
	}
#if _FS_EXFAT
	obj->n_frag = 0;	/* Invalidate last fragment counter of the object */
 800fe96:	693b      	ldr	r3, [r7, #16]
 800fe98:	2200      	movs	r2, #0
 800fe9a:	61da      	str	r2, [r3, #28]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800fe9c:	683b      	ldr	r3, [r7, #0]
 800fe9e:	781b      	ldrb	r3, [r3, #0]
 800fea0:	2b1f      	cmp	r3, #31
 800fea2:	d80a      	bhi.n	800feba <follow_path+0x56>
		dp->fn[NSFLAG] = NS_NONAME;
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	2280      	movs	r2, #128	; 0x80
 800fea8:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		res = dir_sdi(dp, 0);
 800feac:	2100      	movs	r1, #0
 800feae:	6878      	ldr	r0, [r7, #4]
 800feb0:	f7fe fc58 	bl	800e764 <dir_sdi>
 800feb4:	4603      	mov	r3, r0
 800feb6:	75fb      	strb	r3, [r7, #23]
 800feb8:	e07c      	b.n	800ffb4 <follow_path+0x150>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800feba:	463b      	mov	r3, r7
 800febc:	4619      	mov	r1, r3
 800febe:	6878      	ldr	r0, [r7, #4]
 800fec0:	f7ff fe18 	bl	800faf4 <create_name>
 800fec4:	4603      	mov	r3, r0
 800fec6:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800fec8:	7dfb      	ldrb	r3, [r7, #23]
 800feca:	2b00      	cmp	r3, #0
 800fecc:	d16d      	bne.n	800ffaa <follow_path+0x146>
			res = dir_find(dp);				/* Find an object with the segment name */
 800fece:	6878      	ldr	r0, [r7, #4]
 800fed0:	f7ff fb36 	bl	800f540 <dir_find>
 800fed4:	4603      	mov	r3, r0
 800fed6:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800fede:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800fee0:	7dfb      	ldrb	r3, [r7, #23]
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	d00a      	beq.n	800fefc <follow_path+0x98>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800fee6:	7dfb      	ldrb	r3, [r7, #23]
 800fee8:	2b04      	cmp	r3, #4
 800feea:	d160      	bne.n	800ffae <follow_path+0x14a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800feec:	7afb      	ldrb	r3, [r7, #11]
 800feee:	f003 0304 	and.w	r3, r3, #4
 800fef2:	2b00      	cmp	r3, #0
 800fef4:	d15b      	bne.n	800ffae <follow_path+0x14a>
 800fef6:	2305      	movs	r3, #5
 800fef8:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800fefa:	e058      	b.n	800ffae <follow_path+0x14a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800fefc:	7afb      	ldrb	r3, [r7, #11]
 800fefe:	f003 0304 	and.w	r3, r3, #4
 800ff02:	2b00      	cmp	r3, #0
 800ff04:	d155      	bne.n	800ffb2 <follow_path+0x14e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800ff06:	693b      	ldr	r3, [r7, #16]
 800ff08:	799b      	ldrb	r3, [r3, #6]
 800ff0a:	f003 0310 	and.w	r3, r3, #16
 800ff0e:	2b00      	cmp	r3, #0
 800ff10:	d102      	bne.n	800ff18 <follow_path+0xb4>
				res = FR_NO_PATH; break;
 800ff12:	2305      	movs	r3, #5
 800ff14:	75fb      	strb	r3, [r7, #23]
 800ff16:	e04d      	b.n	800ffb4 <follow_path+0x150>
			}
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
 800ff18:	68fb      	ldr	r3, [r7, #12]
 800ff1a:	781b      	ldrb	r3, [r3, #0]
 800ff1c:	2b04      	cmp	r3, #4
 800ff1e:	d12f      	bne.n	800ff80 <follow_path+0x11c>
				obj->c_scl = obj->sclust;
 800ff20:	693b      	ldr	r3, [r7, #16]
 800ff22:	689a      	ldr	r2, [r3, #8]
 800ff24:	693b      	ldr	r3, [r7, #16]
 800ff26:	621a      	str	r2, [r3, #32]
				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 800ff28:	693b      	ldr	r3, [r7, #16]
 800ff2a:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800ff2e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ff32:	693a      	ldr	r2, [r7, #16]
 800ff34:	79d2      	ldrb	r2, [r2, #7]
 800ff36:	431a      	orrs	r2, r3
 800ff38:	693b      	ldr	r3, [r7, #16]
 800ff3a:	625a      	str	r2, [r3, #36]	; 0x24
				obj->c_ofs = dp->blk_ofs;
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ff40:	693b      	ldr	r3, [r7, #16]
 800ff42:	629a      	str	r2, [r3, #40]	; 0x28
				obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
 800ff44:	68fb      	ldr	r3, [r7, #12]
 800ff46:	695b      	ldr	r3, [r3, #20]
 800ff48:	3334      	adds	r3, #52	; 0x34
 800ff4a:	4618      	mov	r0, r3
 800ff4c:	f7fd f972 	bl	800d234 <ld_dword>
 800ff50:	4602      	mov	r2, r0
 800ff52:	693b      	ldr	r3, [r7, #16]
 800ff54:	609a      	str	r2, [r3, #8]
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800ff56:	68fb      	ldr	r3, [r7, #12]
 800ff58:	695b      	ldr	r3, [r3, #20]
 800ff5a:	3321      	adds	r3, #33	; 0x21
 800ff5c:	781b      	ldrb	r3, [r3, #0]
 800ff5e:	f003 0302 	and.w	r3, r3, #2
 800ff62:	b2da      	uxtb	r2, r3
 800ff64:	693b      	ldr	r3, [r7, #16]
 800ff66:	71da      	strb	r2, [r3, #7]
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800ff68:	68fb      	ldr	r3, [r7, #12]
 800ff6a:	695b      	ldr	r3, [r3, #20]
 800ff6c:	3338      	adds	r3, #56	; 0x38
 800ff6e:	4618      	mov	r0, r3
 800ff70:	f7fd f983 	bl	800d27a <ld_qword>
 800ff74:	4603      	mov	r3, r0
 800ff76:	460c      	mov	r4, r1
 800ff78:	693a      	ldr	r2, [r7, #16]
 800ff7a:	e9c2 3404 	strd	r3, r4, [r2, #16]
 800ff7e:	e79c      	b.n	800feba <follow_path+0x56>
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800ff80:	68fb      	ldr	r3, [r7, #12]
 800ff82:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ff8a:	68fa      	ldr	r2, [r7, #12]
 800ff8c:	8992      	ldrh	r2, [r2, #12]
 800ff8e:	fbb3 f0f2 	udiv	r0, r3, r2
 800ff92:	fb02 f200 	mul.w	r2, r2, r0
 800ff96:	1a9b      	subs	r3, r3, r2
 800ff98:	440b      	add	r3, r1
 800ff9a:	4619      	mov	r1, r3
 800ff9c:	68f8      	ldr	r0, [r7, #12]
 800ff9e:	f7fe fdb7 	bl	800eb10 <ld_clust>
 800ffa2:	4602      	mov	r2, r0
 800ffa4:	693b      	ldr	r3, [r7, #16]
 800ffa6:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ffa8:	e787      	b.n	800feba <follow_path+0x56>
			if (res != FR_OK) break;
 800ffaa:	bf00      	nop
 800ffac:	e002      	b.n	800ffb4 <follow_path+0x150>
				break;
 800ffae:	bf00      	nop
 800ffb0:	e000      	b.n	800ffb4 <follow_path+0x150>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ffb2:	bf00      	nop
			}
		}
	}

	return res;
 800ffb4:	7dfb      	ldrb	r3, [r7, #23]
}
 800ffb6:	4618      	mov	r0, r3
 800ffb8:	371c      	adds	r7, #28
 800ffba:	46bd      	mov	sp, r7
 800ffbc:	bd90      	pop	{r4, r7, pc}

0800ffbe <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800ffbe:	b480      	push	{r7}
 800ffc0:	b087      	sub	sp, #28
 800ffc2:	af00      	add	r7, sp, #0
 800ffc4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800ffc6:	f04f 33ff 	mov.w	r3, #4294967295
 800ffca:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	681b      	ldr	r3, [r3, #0]
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	d031      	beq.n	8010038 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	681b      	ldr	r3, [r3, #0]
 800ffd8:	617b      	str	r3, [r7, #20]
 800ffda:	e002      	b.n	800ffe2 <get_ldnumber+0x24>
 800ffdc:	697b      	ldr	r3, [r7, #20]
 800ffde:	3301      	adds	r3, #1
 800ffe0:	617b      	str	r3, [r7, #20]
 800ffe2:	697b      	ldr	r3, [r7, #20]
 800ffe4:	781b      	ldrb	r3, [r3, #0]
 800ffe6:	2b1f      	cmp	r3, #31
 800ffe8:	d903      	bls.n	800fff2 <get_ldnumber+0x34>
 800ffea:	697b      	ldr	r3, [r7, #20]
 800ffec:	781b      	ldrb	r3, [r3, #0]
 800ffee:	2b3a      	cmp	r3, #58	; 0x3a
 800fff0:	d1f4      	bne.n	800ffdc <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800fff2:	697b      	ldr	r3, [r7, #20]
 800fff4:	781b      	ldrb	r3, [r3, #0]
 800fff6:	2b3a      	cmp	r3, #58	; 0x3a
 800fff8:	d11c      	bne.n	8010034 <get_ldnumber+0x76>
			tp = *path;
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	681b      	ldr	r3, [r3, #0]
 800fffe:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8010000:	68fb      	ldr	r3, [r7, #12]
 8010002:	1c5a      	adds	r2, r3, #1
 8010004:	60fa      	str	r2, [r7, #12]
 8010006:	781b      	ldrb	r3, [r3, #0]
 8010008:	3b30      	subs	r3, #48	; 0x30
 801000a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 801000c:	68bb      	ldr	r3, [r7, #8]
 801000e:	2b09      	cmp	r3, #9
 8010010:	d80e      	bhi.n	8010030 <get_ldnumber+0x72>
 8010012:	68fa      	ldr	r2, [r7, #12]
 8010014:	697b      	ldr	r3, [r7, #20]
 8010016:	429a      	cmp	r2, r3
 8010018:	d10a      	bne.n	8010030 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801001a:	68bb      	ldr	r3, [r7, #8]
 801001c:	2b00      	cmp	r3, #0
 801001e:	d107      	bne.n	8010030 <get_ldnumber+0x72>
					vol = (int)i;
 8010020:	68bb      	ldr	r3, [r7, #8]
 8010022:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8010024:	697b      	ldr	r3, [r7, #20]
 8010026:	3301      	adds	r3, #1
 8010028:	617b      	str	r3, [r7, #20]
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	697a      	ldr	r2, [r7, #20]
 801002e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8010030:	693b      	ldr	r3, [r7, #16]
 8010032:	e002      	b.n	801003a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8010034:	2300      	movs	r3, #0
 8010036:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8010038:	693b      	ldr	r3, [r7, #16]
}
 801003a:	4618      	mov	r0, r3
 801003c:	371c      	adds	r7, #28
 801003e:	46bd      	mov	sp, r7
 8010040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010044:	4770      	bx	lr
	...

08010048 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8010048:	b580      	push	{r7, lr}
 801004a:	b082      	sub	sp, #8
 801004c:	af00      	add	r7, sp, #0
 801004e:	6078      	str	r0, [r7, #4]
 8010050:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	2200      	movs	r2, #0
 8010056:	70da      	strb	r2, [r3, #3]
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	f04f 32ff 	mov.w	r2, #4294967295
 801005e:	63da      	str	r2, [r3, #60]	; 0x3c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8010060:	6839      	ldr	r1, [r7, #0]
 8010062:	6878      	ldr	r0, [r7, #4]
 8010064:	f7fd fcf2 	bl	800da4c <move_window>
 8010068:	4603      	mov	r3, r0
 801006a:	2b00      	cmp	r3, #0
 801006c:	d001      	beq.n	8010072 <check_fs+0x2a>
 801006e:	2304      	movs	r3, #4
 8010070:	e044      	b.n	80100fc <check_fs+0xb4>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	3340      	adds	r3, #64	; 0x40
 8010076:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801007a:	4618      	mov	r0, r3
 801007c:	f7fd f8c2 	bl	800d204 <ld_word>
 8010080:	4603      	mov	r3, r0
 8010082:	461a      	mov	r2, r3
 8010084:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8010088:	429a      	cmp	r2, r3
 801008a:	d001      	beq.n	8010090 <check_fs+0x48>
 801008c:	2303      	movs	r3, #3
 801008e:	e035      	b.n	80100fc <check_fs+0xb4>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010096:	2be9      	cmp	r3, #233	; 0xe9
 8010098:	d009      	beq.n	80100ae <check_fs+0x66>
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80100a0:	2beb      	cmp	r3, #235	; 0xeb
 80100a2:	d11e      	bne.n	80100e2 <check_fs+0x9a>
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80100aa:	2b90      	cmp	r3, #144	; 0x90
 80100ac:	d119      	bne.n	80100e2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	3340      	adds	r3, #64	; 0x40
 80100b2:	3336      	adds	r3, #54	; 0x36
 80100b4:	4618      	mov	r0, r3
 80100b6:	f7fd f8bd 	bl	800d234 <ld_dword>
 80100ba:	4603      	mov	r3, r0
 80100bc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80100c0:	4a10      	ldr	r2, [pc, #64]	; (8010104 <check_fs+0xbc>)
 80100c2:	4293      	cmp	r3, r2
 80100c4:	d101      	bne.n	80100ca <check_fs+0x82>
 80100c6:	2300      	movs	r3, #0
 80100c8:	e018      	b.n	80100fc <check_fs+0xb4>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	3340      	adds	r3, #64	; 0x40
 80100ce:	3352      	adds	r3, #82	; 0x52
 80100d0:	4618      	mov	r0, r3
 80100d2:	f7fd f8af 	bl	800d234 <ld_dword>
 80100d6:	4602      	mov	r2, r0
 80100d8:	4b0b      	ldr	r3, [pc, #44]	; (8010108 <check_fs+0xc0>)
 80100da:	429a      	cmp	r2, r3
 80100dc:	d101      	bne.n	80100e2 <check_fs+0x9a>
 80100de:	2300      	movs	r3, #0
 80100e0:	e00c      	b.n	80100fc <check_fs+0xb4>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	3340      	adds	r3, #64	; 0x40
 80100e6:	220b      	movs	r2, #11
 80100e8:	4908      	ldr	r1, [pc, #32]	; (801010c <check_fs+0xc4>)
 80100ea:	4618      	mov	r0, r3
 80100ec:	f7fd fa8b 	bl	800d606 <mem_cmp>
 80100f0:	4603      	mov	r3, r0
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	d101      	bne.n	80100fa <check_fs+0xb2>
 80100f6:	2301      	movs	r3, #1
 80100f8:	e000      	b.n	80100fc <check_fs+0xb4>
#endif
	return 2;
 80100fa:	2302      	movs	r3, #2
}
 80100fc:	4618      	mov	r0, r3
 80100fe:	3708      	adds	r7, #8
 8010100:	46bd      	mov	sp, r7
 8010102:	bd80      	pop	{r7, pc}
 8010104:	00544146 	.word	0x00544146
 8010108:	33544146 	.word	0x33544146
 801010c:	0801605c 	.word	0x0801605c

08010110 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8010110:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8010114:	b098      	sub	sp, #96	; 0x60
 8010116:	af00      	add	r7, sp, #0
 8010118:	60f8      	str	r0, [r7, #12]
 801011a:	60b9      	str	r1, [r7, #8]
 801011c:	4613      	mov	r3, r2
 801011e:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8010120:	68bb      	ldr	r3, [r7, #8]
 8010122:	2200      	movs	r2, #0
 8010124:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8010126:	68f8      	ldr	r0, [r7, #12]
 8010128:	f7ff ff49 	bl	800ffbe <get_ldnumber>
 801012c:	6478      	str	r0, [r7, #68]	; 0x44
	if (vol < 0) return FR_INVALID_DRIVE;
 801012e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010130:	2b00      	cmp	r3, #0
 8010132:	da01      	bge.n	8010138 <find_volume+0x28>
 8010134:	230b      	movs	r3, #11
 8010136:	e370      	b.n	801081a <find_volume+0x70a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8010138:	4aae      	ldr	r2, [pc, #696]	; (80103f4 <find_volume+0x2e4>)
 801013a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801013c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010140:	643b      	str	r3, [r7, #64]	; 0x40
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8010142:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010144:	2b00      	cmp	r3, #0
 8010146:	d101      	bne.n	801014c <find_volume+0x3c>
 8010148:	230c      	movs	r3, #12
 801014a:	e366      	b.n	801081a <find_volume+0x70a>

	ENTER_FF(fs);						/* Lock the volume */
 801014c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 801014e:	f7fd fa9c 	bl	800d68a <lock_fs>
 8010152:	4603      	mov	r3, r0
 8010154:	2b00      	cmp	r3, #0
 8010156:	d101      	bne.n	801015c <find_volume+0x4c>
 8010158:	230f      	movs	r3, #15
 801015a:	e35e      	b.n	801081a <find_volume+0x70a>
	*rfs = fs;							/* Return pointer to the file system object */
 801015c:	68bb      	ldr	r3, [r7, #8]
 801015e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010160:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8010162:	79fb      	ldrb	r3, [r7, #7]
 8010164:	f023 0301 	bic.w	r3, r3, #1
 8010168:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 801016a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801016c:	781b      	ldrb	r3, [r3, #0]
 801016e:	2b00      	cmp	r3, #0
 8010170:	d01a      	beq.n	80101a8 <find_volume+0x98>
		stat = disk_status(fs->drv);
 8010172:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010174:	785b      	ldrb	r3, [r3, #1]
 8010176:	4618      	mov	r0, r3
 8010178:	f7fc ffa6 	bl	800d0c8 <disk_status>
 801017c:	4603      	mov	r3, r0
 801017e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8010182:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010186:	f003 0301 	and.w	r3, r3, #1
 801018a:	2b00      	cmp	r3, #0
 801018c:	d10c      	bne.n	80101a8 <find_volume+0x98>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 801018e:	79fb      	ldrb	r3, [r7, #7]
 8010190:	2b00      	cmp	r3, #0
 8010192:	d007      	beq.n	80101a4 <find_volume+0x94>
 8010194:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010198:	f003 0304 	and.w	r3, r3, #4
 801019c:	2b00      	cmp	r3, #0
 801019e:	d001      	beq.n	80101a4 <find_volume+0x94>
				return FR_WRITE_PROTECTED;
 80101a0:	230a      	movs	r3, #10
 80101a2:	e33a      	b.n	801081a <find_volume+0x70a>
			}
			return FR_OK;				/* The file system object is valid */
 80101a4:	2300      	movs	r3, #0
 80101a6:	e338      	b.n	801081a <find_volume+0x70a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80101a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80101aa:	2200      	movs	r2, #0
 80101ac:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80101ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80101b0:	b2da      	uxtb	r2, r3
 80101b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80101b4:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80101b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80101b8:	785b      	ldrb	r3, [r3, #1]
 80101ba:	4618      	mov	r0, r3
 80101bc:	f7fc ff9e 	bl	800d0fc <disk_initialize>
 80101c0:	4603      	mov	r3, r0
 80101c2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80101c6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80101ca:	f003 0301 	and.w	r3, r3, #1
 80101ce:	2b00      	cmp	r3, #0
 80101d0:	d001      	beq.n	80101d6 <find_volume+0xc6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80101d2:	2303      	movs	r3, #3
 80101d4:	e321      	b.n	801081a <find_volume+0x70a>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80101d6:	79fb      	ldrb	r3, [r7, #7]
 80101d8:	2b00      	cmp	r3, #0
 80101da:	d007      	beq.n	80101ec <find_volume+0xdc>
 80101dc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80101e0:	f003 0304 	and.w	r3, r3, #4
 80101e4:	2b00      	cmp	r3, #0
 80101e6:	d001      	beq.n	80101ec <find_volume+0xdc>
		return FR_WRITE_PROTECTED;
 80101e8:	230a      	movs	r3, #10
 80101ea:	e316      	b.n	801081a <find_volume+0x70a>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80101ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80101ee:	7858      	ldrb	r0, [r3, #1]
 80101f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80101f2:	330c      	adds	r3, #12
 80101f4:	461a      	mov	r2, r3
 80101f6:	2102      	movs	r1, #2
 80101f8:	f7fc ffe6 	bl	800d1c8 <disk_ioctl>
 80101fc:	4603      	mov	r3, r0
 80101fe:	2b00      	cmp	r3, #0
 8010200:	d001      	beq.n	8010206 <find_volume+0xf6>
 8010202:	2301      	movs	r3, #1
 8010204:	e309      	b.n	801081a <find_volume+0x70a>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8010206:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010208:	899b      	ldrh	r3, [r3, #12]
 801020a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801020e:	d80d      	bhi.n	801022c <find_volume+0x11c>
 8010210:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010212:	899b      	ldrh	r3, [r3, #12]
 8010214:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010218:	d308      	bcc.n	801022c <find_volume+0x11c>
 801021a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801021c:	899b      	ldrh	r3, [r3, #12]
 801021e:	461a      	mov	r2, r3
 8010220:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010222:	899b      	ldrh	r3, [r3, #12]
 8010224:	3b01      	subs	r3, #1
 8010226:	4013      	ands	r3, r2
 8010228:	2b00      	cmp	r3, #0
 801022a:	d001      	beq.n	8010230 <find_volume+0x120>
 801022c:	2301      	movs	r3, #1
 801022e:	e2f4      	b.n	801081a <find_volume+0x70a>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8010230:	2300      	movs	r3, #0
 8010232:	65bb      	str	r3, [r7, #88]	; 0x58
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8010234:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010236:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8010238:	f7ff ff06 	bl	8010048 <check_fs>
 801023c:	4603      	mov	r3, r0
 801023e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8010242:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010246:	2b02      	cmp	r3, #2
 8010248:	d14b      	bne.n	80102e2 <find_volume+0x1d2>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801024a:	2300      	movs	r3, #0
 801024c:	64bb      	str	r3, [r7, #72]	; 0x48
 801024e:	e01f      	b.n	8010290 <find_volume+0x180>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8010250:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010252:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8010256:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010258:	011b      	lsls	r3, r3, #4
 801025a:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 801025e:	4413      	add	r3, r2
 8010260:	63bb      	str	r3, [r7, #56]	; 0x38
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8010262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010264:	3304      	adds	r3, #4
 8010266:	781b      	ldrb	r3, [r3, #0]
 8010268:	2b00      	cmp	r3, #0
 801026a:	d006      	beq.n	801027a <find_volume+0x16a>
 801026c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801026e:	3308      	adds	r3, #8
 8010270:	4618      	mov	r0, r3
 8010272:	f7fc ffdf 	bl	800d234 <ld_dword>
 8010276:	4602      	mov	r2, r0
 8010278:	e000      	b.n	801027c <find_volume+0x16c>
 801027a:	2200      	movs	r2, #0
 801027c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801027e:	009b      	lsls	r3, r3, #2
 8010280:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8010284:	440b      	add	r3, r1
 8010286:	f843 2c50 	str.w	r2, [r3, #-80]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801028a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801028c:	3301      	adds	r3, #1
 801028e:	64bb      	str	r3, [r7, #72]	; 0x48
 8010290:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010292:	2b03      	cmp	r3, #3
 8010294:	d9dc      	bls.n	8010250 <find_volume+0x140>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8010296:	2300      	movs	r3, #0
 8010298:	64bb      	str	r3, [r7, #72]	; 0x48
		if (i) i--;
 801029a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801029c:	2b00      	cmp	r3, #0
 801029e:	d002      	beq.n	80102a6 <find_volume+0x196>
 80102a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80102a2:	3b01      	subs	r3, #1
 80102a4:	64bb      	str	r3, [r7, #72]	; 0x48
		do {							/* Find an FAT volume */
			bsect = br[i];
 80102a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80102a8:	009b      	lsls	r3, r3, #2
 80102aa:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80102ae:	4413      	add	r3, r2
 80102b0:	f853 3c50 	ldr.w	r3, [r3, #-80]
 80102b4:	65bb      	str	r3, [r7, #88]	; 0x58
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80102b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	d005      	beq.n	80102c8 <find_volume+0x1b8>
 80102bc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80102be:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80102c0:	f7ff fec2 	bl	8010048 <check_fs>
 80102c4:	4603      	mov	r3, r0
 80102c6:	e000      	b.n	80102ca <find_volume+0x1ba>
 80102c8:	2303      	movs	r3, #3
 80102ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80102ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80102d2:	2b01      	cmp	r3, #1
 80102d4:	d905      	bls.n	80102e2 <find_volume+0x1d2>
 80102d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80102d8:	3301      	adds	r3, #1
 80102da:	64bb      	str	r3, [r7, #72]	; 0x48
 80102dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80102de:	2b03      	cmp	r3, #3
 80102e0:	d9e1      	bls.n	80102a6 <find_volume+0x196>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80102e2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80102e6:	2b04      	cmp	r3, #4
 80102e8:	d101      	bne.n	80102ee <find_volume+0x1de>
 80102ea:	2301      	movs	r3, #1
 80102ec:	e295      	b.n	801081a <find_volume+0x70a>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80102ee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80102f2:	2b01      	cmp	r3, #1
 80102f4:	d901      	bls.n	80102fa <find_volume+0x1ea>
 80102f6:	230d      	movs	r3, #13
 80102f8:	e28f      	b.n	801081a <find_volume+0x70a>

	/* An FAT volume is found (bsect). Following code initializes the file system object */

#if _FS_EXFAT
	if (fmt == 1) {
 80102fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80102fe:	2b01      	cmp	r3, #1
 8010300:	f040 8101 	bne.w	8010506 <find_volume+0x3f6>
		QWORD maxlba;

		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 8010304:	230b      	movs	r3, #11
 8010306:	64bb      	str	r3, [r7, #72]	; 0x48
 8010308:	e002      	b.n	8010310 <find_volume+0x200>
 801030a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801030c:	3301      	adds	r3, #1
 801030e:	64bb      	str	r3, [r7, #72]	; 0x48
 8010310:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010312:	2b3f      	cmp	r3, #63	; 0x3f
 8010314:	d806      	bhi.n	8010324 <find_volume+0x214>
 8010316:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010318:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801031a:	4413      	add	r3, r2
 801031c:	3340      	adds	r3, #64	; 0x40
 801031e:	781b      	ldrb	r3, [r3, #0]
 8010320:	2b00      	cmp	r3, #0
 8010322:	d0f2      	beq.n	801030a <find_volume+0x1fa>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 8010324:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010326:	2b3f      	cmp	r3, #63	; 0x3f
 8010328:	d801      	bhi.n	801032e <find_volume+0x21e>
 801032a:	230d      	movs	r3, #13
 801032c:	e275      	b.n	801081a <find_volume+0x70a>

		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Must be 1.0) */
 801032e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010330:	3340      	adds	r3, #64	; 0x40
 8010332:	3368      	adds	r3, #104	; 0x68
 8010334:	4618      	mov	r0, r3
 8010336:	f7fc ff65 	bl	800d204 <ld_word>
 801033a:	4603      	mov	r3, r0
 801033c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010340:	d001      	beq.n	8010346 <find_volume+0x236>
 8010342:	230d      	movs	r3, #13
 8010344:	e269      	b.n	801081a <find_volume+0x70a>

		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 8010346:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010348:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 801034c:	461a      	mov	r2, r3
 801034e:	2301      	movs	r3, #1
 8010350:	4093      	lsls	r3, r2
 8010352:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010354:	8992      	ldrh	r2, [r2, #12]
 8010356:	4293      	cmp	r3, r2
 8010358:	d001      	beq.n	801035e <find_volume+0x24e>
			return FR_NO_FILESYSTEM;
 801035a:	230d      	movs	r3, #13
 801035c:	e25d      	b.n	801081a <find_volume+0x70a>
		}

		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 801035e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010360:	3340      	adds	r3, #64	; 0x40
 8010362:	3348      	adds	r3, #72	; 0x48
 8010364:	4618      	mov	r0, r3
 8010366:	f7fc ff88 	bl	800d27a <ld_qword>
 801036a:	460a      	mov	r2, r1
 801036c:	4601      	mov	r1, r0
 801036e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010370:	469b      	mov	fp, r3
 8010372:	f04f 0c00 	mov.w	ip, #0
 8010376:	eb1b 0301 	adds.w	r3, fp, r1
 801037a:	eb4c 0402 	adc.w	r4, ip, r2
 801037e:	e9c7 3408 	strd	r3, r4, [r7, #32]
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 8010382:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8010386:	2c01      	cmp	r4, #1
 8010388:	bf08      	it	eq
 801038a:	2b00      	cmpeq	r3, #0
 801038c:	d301      	bcc.n	8010392 <find_volume+0x282>
 801038e:	230d      	movs	r3, #13
 8010390:	e243      	b.n	801081a <find_volume+0x70a>

		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 8010392:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010394:	3340      	adds	r3, #64	; 0x40
 8010396:	3354      	adds	r3, #84	; 0x54
 8010398:	4618      	mov	r0, r3
 801039a:	f7fc ff4b 	bl	800d234 <ld_dword>
 801039e:	4602      	mov	r2, r0
 80103a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80103a2:	629a      	str	r2, [r3, #40]	; 0x28

		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 80103a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80103a6:	f893 20ae 	ldrb.w	r2, [r3, #174]	; 0xae
 80103aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80103ac:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 80103ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80103b0:	789b      	ldrb	r3, [r3, #2]
 80103b2:	2b01      	cmp	r3, #1
 80103b4:	d001      	beq.n	80103ba <find_volume+0x2aa>
 80103b6:	230d      	movs	r3, #13
 80103b8:	e22f      	b.n	801081a <find_volume+0x70a>

		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 80103ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80103bc:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 80103c0:	461a      	mov	r2, r3
 80103c2:	2301      	movs	r3, #1
 80103c4:	4093      	lsls	r3, r2
 80103c6:	b29a      	uxth	r2, r3
 80103c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80103ca:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 80103cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80103ce:	895b      	ldrh	r3, [r3, #10]
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	d101      	bne.n	80103d8 <find_volume+0x2c8>
 80103d4:	230d      	movs	r3, #13
 80103d6:	e220      	b.n	801081a <find_volume+0x70a>

		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 80103d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80103da:	3340      	adds	r3, #64	; 0x40
 80103dc:	335c      	adds	r3, #92	; 0x5c
 80103de:	4618      	mov	r0, r3
 80103e0:	f7fc ff28 	bl	800d234 <ld_dword>
 80103e4:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 80103e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103e8:	4a03      	ldr	r2, [pc, #12]	; (80103f8 <find_volume+0x2e8>)
 80103ea:	4293      	cmp	r3, r2
 80103ec:	d906      	bls.n	80103fc <find_volume+0x2ec>
 80103ee:	230d      	movs	r3, #13
 80103f0:	e213      	b.n	801081a <find_volume+0x70a>
 80103f2:	bf00      	nop
 80103f4:	2000021c 	.word	0x2000021c
 80103f8:	7ffffffd 	.word	0x7ffffffd
		fs->n_fatent = nclst + 2;
 80103fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103fe:	1c9a      	adds	r2, r3, #2
 8010400:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010402:	625a      	str	r2, [r3, #36]	; 0x24

		/* Boundaries and Limits */
		fs->volbase = bsect;
 8010404:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010406:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010408:	62da      	str	r2, [r3, #44]	; 0x2c
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 801040a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801040c:	3340      	adds	r3, #64	; 0x40
 801040e:	3358      	adds	r3, #88	; 0x58
 8010410:	4618      	mov	r0, r3
 8010412:	f7fc ff0f 	bl	800d234 <ld_dword>
 8010416:	4602      	mov	r2, r0
 8010418:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801041a:	441a      	add	r2, r3
 801041c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801041e:	639a      	str	r2, [r3, #56]	; 0x38
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 8010420:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010422:	3340      	adds	r3, #64	; 0x40
 8010424:	3350      	adds	r3, #80	; 0x50
 8010426:	4618      	mov	r0, r3
 8010428:	f7fc ff04 	bl	800d234 <ld_dword>
 801042c:	4602      	mov	r2, r0
 801042e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010430:	441a      	add	r2, r3
 8010432:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010434:	631a      	str	r2, [r3, #48]	; 0x30
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 8010436:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801043a:	4619      	mov	r1, r3
 801043c:	f04f 0200 	mov.w	r2, #0
 8010440:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010442:	895b      	ldrh	r3, [r3, #10]
 8010444:	4618      	mov	r0, r3
 8010446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010448:	fb03 f300 	mul.w	r3, r3, r0
 801044c:	469b      	mov	fp, r3
 801044e:	f04f 0c00 	mov.w	ip, #0
 8010452:	eb1b 0301 	adds.w	r3, fp, r1
 8010456:	eb4c 0402 	adc.w	r4, ip, r2
 801045a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 801045e:	42a2      	cmp	r2, r4
 8010460:	bf08      	it	eq
 8010462:	4299      	cmpeq	r1, r3
 8010464:	d201      	bcs.n	801046a <find_volume+0x35a>
 8010466:	230d      	movs	r3, #13
 8010468:	e1d7      	b.n	801081a <find_volume+0x70a>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 801046a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801046c:	3340      	adds	r3, #64	; 0x40
 801046e:	3360      	adds	r3, #96	; 0x60
 8010470:	4618      	mov	r0, r3
 8010472:	f7fc fedf 	bl	800d234 <ld_dword>
 8010476:	4602      	mov	r2, r0
 8010478:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801047a:	635a      	str	r2, [r3, #52]	; 0x34

		/* Check if bitmap location is in assumption (at the first cluster) */
		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 801047c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801047e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010480:	4619      	mov	r1, r3
 8010482:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8010484:	f7fd fb80 	bl	800db88 <clust2sect>
 8010488:	4603      	mov	r3, r0
 801048a:	4619      	mov	r1, r3
 801048c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 801048e:	f7fd fadd 	bl	800da4c <move_window>
 8010492:	4603      	mov	r3, r0
 8010494:	2b00      	cmp	r3, #0
 8010496:	d001      	beq.n	801049c <find_volume+0x38c>
 8010498:	2301      	movs	r3, #1
 801049a:	e1be      	b.n	801081a <find_volume+0x70a>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 801049c:	2300      	movs	r3, #0
 801049e:	64bb      	str	r3, [r7, #72]	; 0x48
 80104a0:	e015      	b.n	80104ce <find_volume+0x3be>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 80104a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80104a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80104a6:	4413      	add	r3, r2
 80104a8:	3340      	adds	r3, #64	; 0x40
 80104aa:	781b      	ldrb	r3, [r3, #0]
 80104ac:	2b81      	cmp	r3, #129	; 0x81
 80104ae:	d10b      	bne.n	80104c8 <find_volume+0x3b8>
 80104b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80104b2:	f103 0240 	add.w	r2, r3, #64	; 0x40
 80104b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80104b8:	3314      	adds	r3, #20
 80104ba:	4413      	add	r3, r2
 80104bc:	4618      	mov	r0, r3
 80104be:	f7fc feb9 	bl	800d234 <ld_dword>
 80104c2:	4603      	mov	r3, r0
 80104c4:	2b02      	cmp	r3, #2
 80104c6:	d009      	beq.n	80104dc <find_volume+0x3cc>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 80104c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80104ca:	3320      	adds	r3, #32
 80104cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80104ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80104d0:	899b      	ldrh	r3, [r3, #12]
 80104d2:	461a      	mov	r2, r3
 80104d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80104d6:	4293      	cmp	r3, r2
 80104d8:	d3e3      	bcc.n	80104a2 <find_volume+0x392>
 80104da:	e000      	b.n	80104de <find_volume+0x3ce>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 80104dc:	bf00      	nop
		}
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
 80104de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80104e0:	899b      	ldrh	r3, [r3, #12]
 80104e2:	461a      	mov	r2, r3
 80104e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80104e6:	4293      	cmp	r3, r2
 80104e8:	d101      	bne.n	80104ee <find_volume+0x3de>
 80104ea:	230d      	movs	r3, #13
 80104ec:	e195      	b.n	801081a <find_volume+0x70a>
#if !_FS_READONLY
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80104ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80104f0:	f04f 32ff 	mov.w	r2, #4294967295
 80104f4:	621a      	str	r2, [r3, #32]
 80104f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80104f8:	6a1a      	ldr	r2, [r3, #32]
 80104fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80104fc:	61da      	str	r2, [r3, #28]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
 80104fe:	2304      	movs	r3, #4
 8010500:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8010504:	e177      	b.n	80107f6 <find_volume+0x6e6>
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8010506:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010508:	3340      	adds	r3, #64	; 0x40
 801050a:	330b      	adds	r3, #11
 801050c:	4618      	mov	r0, r3
 801050e:	f7fc fe79 	bl	800d204 <ld_word>
 8010512:	4603      	mov	r3, r0
 8010514:	461a      	mov	r2, r3
 8010516:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010518:	899b      	ldrh	r3, [r3, #12]
 801051a:	429a      	cmp	r2, r3
 801051c:	d001      	beq.n	8010522 <find_volume+0x412>
 801051e:	230d      	movs	r3, #13
 8010520:	e17b      	b.n	801081a <find_volume+0x70a>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8010522:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010524:	3340      	adds	r3, #64	; 0x40
 8010526:	3316      	adds	r3, #22
 8010528:	4618      	mov	r0, r3
 801052a:	f7fc fe6b 	bl	800d204 <ld_word>
 801052e:	4603      	mov	r3, r0
 8010530:	657b      	str	r3, [r7, #84]	; 0x54
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8010532:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010534:	2b00      	cmp	r3, #0
 8010536:	d106      	bne.n	8010546 <find_volume+0x436>
 8010538:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801053a:	3340      	adds	r3, #64	; 0x40
 801053c:	3324      	adds	r3, #36	; 0x24
 801053e:	4618      	mov	r0, r3
 8010540:	f7fc fe78 	bl	800d234 <ld_dword>
 8010544:	6578      	str	r0, [r7, #84]	; 0x54
		fs->fsize = fasize;
 8010546:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010548:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801054a:	629a      	str	r2, [r3, #40]	; 0x28

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801054c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801054e:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8010552:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010554:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8010556:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010558:	789b      	ldrb	r3, [r3, #2]
 801055a:	2b01      	cmp	r3, #1
 801055c:	d005      	beq.n	801056a <find_volume+0x45a>
 801055e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010560:	789b      	ldrb	r3, [r3, #2]
 8010562:	2b02      	cmp	r3, #2
 8010564:	d001      	beq.n	801056a <find_volume+0x45a>
 8010566:	230d      	movs	r3, #13
 8010568:	e157      	b.n	801081a <find_volume+0x70a>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 801056a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801056c:	789b      	ldrb	r3, [r3, #2]
 801056e:	461a      	mov	r2, r3
 8010570:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010572:	fb02 f303 	mul.w	r3, r2, r3
 8010576:	657b      	str	r3, [r7, #84]	; 0x54

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8010578:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801057a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 801057e:	b29a      	uxth	r2, r3
 8010580:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010582:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8010584:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010586:	895b      	ldrh	r3, [r3, #10]
 8010588:	2b00      	cmp	r3, #0
 801058a:	d008      	beq.n	801059e <find_volume+0x48e>
 801058c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801058e:	895b      	ldrh	r3, [r3, #10]
 8010590:	461a      	mov	r2, r3
 8010592:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010594:	895b      	ldrh	r3, [r3, #10]
 8010596:	3b01      	subs	r3, #1
 8010598:	4013      	ands	r3, r2
 801059a:	2b00      	cmp	r3, #0
 801059c:	d001      	beq.n	80105a2 <find_volume+0x492>
 801059e:	230d      	movs	r3, #13
 80105a0:	e13b      	b.n	801081a <find_volume+0x70a>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80105a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80105a4:	3340      	adds	r3, #64	; 0x40
 80105a6:	3311      	adds	r3, #17
 80105a8:	4618      	mov	r0, r3
 80105aa:	f7fc fe2b 	bl	800d204 <ld_word>
 80105ae:	4603      	mov	r3, r0
 80105b0:	461a      	mov	r2, r3
 80105b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80105b4:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80105b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80105b8:	891b      	ldrh	r3, [r3, #8]
 80105ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80105bc:	8992      	ldrh	r2, [r2, #12]
 80105be:	0952      	lsrs	r2, r2, #5
 80105c0:	b292      	uxth	r2, r2
 80105c2:	fbb3 f1f2 	udiv	r1, r3, r2
 80105c6:	fb02 f201 	mul.w	r2, r2, r1
 80105ca:	1a9b      	subs	r3, r3, r2
 80105cc:	b29b      	uxth	r3, r3
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	d001      	beq.n	80105d6 <find_volume+0x4c6>
 80105d2:	230d      	movs	r3, #13
 80105d4:	e121      	b.n	801081a <find_volume+0x70a>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80105d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80105d8:	3340      	adds	r3, #64	; 0x40
 80105da:	3313      	adds	r3, #19
 80105dc:	4618      	mov	r0, r3
 80105de:	f7fc fe11 	bl	800d204 <ld_word>
 80105e2:	4603      	mov	r3, r0
 80105e4:	653b      	str	r3, [r7, #80]	; 0x50
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80105e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	d106      	bne.n	80105fa <find_volume+0x4ea>
 80105ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80105ee:	3340      	adds	r3, #64	; 0x40
 80105f0:	3320      	adds	r3, #32
 80105f2:	4618      	mov	r0, r3
 80105f4:	f7fc fe1e 	bl	800d234 <ld_dword>
 80105f8:	6538      	str	r0, [r7, #80]	; 0x50

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80105fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80105fc:	3340      	adds	r3, #64	; 0x40
 80105fe:	330e      	adds	r3, #14
 8010600:	4618      	mov	r0, r3
 8010602:	f7fc fdff 	bl	800d204 <ld_word>
 8010606:	4603      	mov	r3, r0
 8010608:	86fb      	strh	r3, [r7, #54]	; 0x36
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 801060a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801060c:	2b00      	cmp	r3, #0
 801060e:	d101      	bne.n	8010614 <find_volume+0x504>
 8010610:	230d      	movs	r3, #13
 8010612:	e102      	b.n	801081a <find_volume+0x70a>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8010614:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8010616:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010618:	4413      	add	r3, r2
 801061a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801061c:	8911      	ldrh	r1, [r2, #8]
 801061e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010620:	8992      	ldrh	r2, [r2, #12]
 8010622:	0952      	lsrs	r2, r2, #5
 8010624:	b292      	uxth	r2, r2
 8010626:	fbb1 f2f2 	udiv	r2, r1, r2
 801062a:	b292      	uxth	r2, r2
 801062c:	4413      	add	r3, r2
 801062e:	633b      	str	r3, [r7, #48]	; 0x30
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8010630:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010634:	429a      	cmp	r2, r3
 8010636:	d201      	bcs.n	801063c <find_volume+0x52c>
 8010638:	230d      	movs	r3, #13
 801063a:	e0ee      	b.n	801081a <find_volume+0x70a>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 801063c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801063e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010640:	1ad3      	subs	r3, r2, r3
 8010642:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010644:	8952      	ldrh	r2, [r2, #10]
 8010646:	fbb3 f3f2 	udiv	r3, r3, r2
 801064a:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 801064c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801064e:	2b00      	cmp	r3, #0
 8010650:	d101      	bne.n	8010656 <find_volume+0x546>
 8010652:	230d      	movs	r3, #13
 8010654:	e0e1      	b.n	801081a <find_volume+0x70a>
		fmt = FS_FAT32;
 8010656:	2303      	movs	r3, #3
 8010658:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 801065c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801065e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8010662:	4293      	cmp	r3, r2
 8010664:	d802      	bhi.n	801066c <find_volume+0x55c>
 8010666:	2302      	movs	r3, #2
 8010668:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 801066c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801066e:	f640 72f5 	movw	r2, #4085	; 0xff5
 8010672:	4293      	cmp	r3, r2
 8010674:	d802      	bhi.n	801067c <find_volume+0x56c>
 8010676:	2301      	movs	r3, #1
 8010678:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801067c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801067e:	1c9a      	adds	r2, r3, #2
 8010680:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010682:	625a      	str	r2, [r3, #36]	; 0x24
		fs->volbase = bsect;							/* Volume start sector */
 8010684:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010686:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010688:	62da      	str	r2, [r3, #44]	; 0x2c
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801068a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801068c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801068e:	441a      	add	r2, r3
 8010690:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010692:	631a      	str	r2, [r3, #48]	; 0x30
		fs->database = bsect + sysect;					/* Data start sector */
 8010694:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010698:	441a      	add	r2, r3
 801069a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801069c:	639a      	str	r2, [r3, #56]	; 0x38
		if (fmt == FS_FAT32) {
 801069e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80106a2:	2b03      	cmp	r3, #3
 80106a4:	d11e      	bne.n	80106e4 <find_volume+0x5d4>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80106a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80106a8:	3340      	adds	r3, #64	; 0x40
 80106aa:	332a      	adds	r3, #42	; 0x2a
 80106ac:	4618      	mov	r0, r3
 80106ae:	f7fc fda9 	bl	800d204 <ld_word>
 80106b2:	4603      	mov	r3, r0
 80106b4:	2b00      	cmp	r3, #0
 80106b6:	d001      	beq.n	80106bc <find_volume+0x5ac>
 80106b8:	230d      	movs	r3, #13
 80106ba:	e0ae      	b.n	801081a <find_volume+0x70a>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80106bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80106be:	891b      	ldrh	r3, [r3, #8]
 80106c0:	2b00      	cmp	r3, #0
 80106c2:	d001      	beq.n	80106c8 <find_volume+0x5b8>
 80106c4:	230d      	movs	r3, #13
 80106c6:	e0a8      	b.n	801081a <find_volume+0x70a>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80106c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80106ca:	3340      	adds	r3, #64	; 0x40
 80106cc:	332c      	adds	r3, #44	; 0x2c
 80106ce:	4618      	mov	r0, r3
 80106d0:	f7fc fdb0 	bl	800d234 <ld_dword>
 80106d4:	4602      	mov	r2, r0
 80106d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80106d8:	635a      	str	r2, [r3, #52]	; 0x34
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80106da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80106dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106de:	009b      	lsls	r3, r3, #2
 80106e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80106e2:	e01f      	b.n	8010724 <find_volume+0x614>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80106e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80106e6:	891b      	ldrh	r3, [r3, #8]
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	d101      	bne.n	80106f0 <find_volume+0x5e0>
 80106ec:	230d      	movs	r3, #13
 80106ee:	e094      	b.n	801081a <find_volume+0x70a>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80106f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80106f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80106f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80106f6:	441a      	add	r2, r3
 80106f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80106fa:	635a      	str	r2, [r3, #52]	; 0x34
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80106fc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010700:	2b02      	cmp	r3, #2
 8010702:	d103      	bne.n	801070c <find_volume+0x5fc>
 8010704:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010708:	005b      	lsls	r3, r3, #1
 801070a:	e00a      	b.n	8010722 <find_volume+0x612>
 801070c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801070e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010710:	4613      	mov	r3, r2
 8010712:	005b      	lsls	r3, r3, #1
 8010714:	4413      	add	r3, r2
 8010716:	085a      	lsrs	r2, r3, #1
 8010718:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801071a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801071c:	f003 0301 	and.w	r3, r3, #1
 8010720:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8010722:	64fb      	str	r3, [r7, #76]	; 0x4c
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8010724:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010726:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010728:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801072a:	899b      	ldrh	r3, [r3, #12]
 801072c:	4619      	mov	r1, r3
 801072e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010730:	440b      	add	r3, r1
 8010732:	3b01      	subs	r3, #1
 8010734:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010736:	8989      	ldrh	r1, [r1, #12]
 8010738:	fbb3 f3f1 	udiv	r3, r3, r1
 801073c:	429a      	cmp	r2, r3
 801073e:	d201      	bcs.n	8010744 <find_volume+0x634>
 8010740:	230d      	movs	r3, #13
 8010742:	e06a      	b.n	801081a <find_volume+0x70a>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8010744:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010746:	f04f 32ff 	mov.w	r2, #4294967295
 801074a:	621a      	str	r2, [r3, #32]
 801074c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801074e:	6a1a      	ldr	r2, [r3, #32]
 8010750:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010752:	61da      	str	r2, [r3, #28]
		fs->fsi_flag = 0x80;
 8010754:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010756:	2280      	movs	r2, #128	; 0x80
 8010758:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 801075a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801075e:	2b03      	cmp	r3, #3
 8010760:	d149      	bne.n	80107f6 <find_volume+0x6e6>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8010762:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010764:	3340      	adds	r3, #64	; 0x40
 8010766:	3330      	adds	r3, #48	; 0x30
 8010768:	4618      	mov	r0, r3
 801076a:	f7fc fd4b 	bl	800d204 <ld_word>
 801076e:	4603      	mov	r3, r0
 8010770:	2b01      	cmp	r3, #1
 8010772:	d140      	bne.n	80107f6 <find_volume+0x6e6>
			&& move_window(fs, bsect + 1) == FR_OK)
 8010774:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010776:	3301      	adds	r3, #1
 8010778:	4619      	mov	r1, r3
 801077a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 801077c:	f7fd f966 	bl	800da4c <move_window>
 8010780:	4603      	mov	r3, r0
 8010782:	2b00      	cmp	r3, #0
 8010784:	d137      	bne.n	80107f6 <find_volume+0x6e6>
		{
			fs->fsi_flag = 0;
 8010786:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010788:	2200      	movs	r2, #0
 801078a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 801078c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801078e:	3340      	adds	r3, #64	; 0x40
 8010790:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010794:	4618      	mov	r0, r3
 8010796:	f7fc fd35 	bl	800d204 <ld_word>
 801079a:	4603      	mov	r3, r0
 801079c:	461a      	mov	r2, r3
 801079e:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80107a2:	429a      	cmp	r2, r3
 80107a4:	d127      	bne.n	80107f6 <find_volume+0x6e6>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80107a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80107a8:	3340      	adds	r3, #64	; 0x40
 80107aa:	4618      	mov	r0, r3
 80107ac:	f7fc fd42 	bl	800d234 <ld_dword>
 80107b0:	4602      	mov	r2, r0
 80107b2:	4b1c      	ldr	r3, [pc, #112]	; (8010824 <find_volume+0x714>)
 80107b4:	429a      	cmp	r2, r3
 80107b6:	d11e      	bne.n	80107f6 <find_volume+0x6e6>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80107b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80107ba:	3340      	adds	r3, #64	; 0x40
 80107bc:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80107c0:	4618      	mov	r0, r3
 80107c2:	f7fc fd37 	bl	800d234 <ld_dword>
 80107c6:	4602      	mov	r2, r0
 80107c8:	4b17      	ldr	r3, [pc, #92]	; (8010828 <find_volume+0x718>)
 80107ca:	429a      	cmp	r2, r3
 80107cc:	d113      	bne.n	80107f6 <find_volume+0x6e6>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80107ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80107d0:	3340      	adds	r3, #64	; 0x40
 80107d2:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80107d6:	4618      	mov	r0, r3
 80107d8:	f7fc fd2c 	bl	800d234 <ld_dword>
 80107dc:	4602      	mov	r2, r0
 80107de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80107e0:	621a      	str	r2, [r3, #32]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80107e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80107e4:	3340      	adds	r3, #64	; 0x40
 80107e6:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80107ea:	4618      	mov	r0, r3
 80107ec:	f7fc fd22 	bl	800d234 <ld_dword>
 80107f0:	4602      	mov	r2, r0
 80107f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80107f4:	61da      	str	r2, [r3, #28]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80107f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80107f8:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 80107fc:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80107fe:	4b0b      	ldr	r3, [pc, #44]	; (801082c <find_volume+0x71c>)
 8010800:	881b      	ldrh	r3, [r3, #0]
 8010802:	3301      	adds	r3, #1
 8010804:	b29a      	uxth	r2, r3
 8010806:	4b09      	ldr	r3, [pc, #36]	; (801082c <find_volume+0x71c>)
 8010808:	801a      	strh	r2, [r3, #0]
 801080a:	4b08      	ldr	r3, [pc, #32]	; (801082c <find_volume+0x71c>)
 801080c:	881a      	ldrh	r2, [r3, #0]
 801080e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010810:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8010812:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8010814:	f7fd f8b2 	bl	800d97c <clear_lock>
#endif
	return FR_OK;
 8010818:	2300      	movs	r3, #0
}
 801081a:	4618      	mov	r0, r3
 801081c:	3760      	adds	r7, #96	; 0x60
 801081e:	46bd      	mov	sp, r7
 8010820:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8010824:	41615252 	.word	0x41615252
 8010828:	61417272 	.word	0x61417272
 801082c:	20000220 	.word	0x20000220

08010830 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8010830:	b580      	push	{r7, lr}
 8010832:	b084      	sub	sp, #16
 8010834:	af00      	add	r7, sp, #0
 8010836:	6078      	str	r0, [r7, #4]
 8010838:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 801083a:	2309      	movs	r3, #9
 801083c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	2b00      	cmp	r3, #0
 8010842:	d02e      	beq.n	80108a2 <validate+0x72>
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	681b      	ldr	r3, [r3, #0]
 8010848:	2b00      	cmp	r3, #0
 801084a:	d02a      	beq.n	80108a2 <validate+0x72>
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	681b      	ldr	r3, [r3, #0]
 8010850:	781b      	ldrb	r3, [r3, #0]
 8010852:	2b00      	cmp	r3, #0
 8010854:	d025      	beq.n	80108a2 <validate+0x72>
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	889a      	ldrh	r2, [r3, #4]
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	681b      	ldr	r3, [r3, #0]
 801085e:	88db      	ldrh	r3, [r3, #6]
 8010860:	429a      	cmp	r2, r3
 8010862:	d11e      	bne.n	80108a2 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	681b      	ldr	r3, [r3, #0]
 8010868:	4618      	mov	r0, r3
 801086a:	f7fc ff0e 	bl	800d68a <lock_fs>
 801086e:	4603      	mov	r3, r0
 8010870:	2b00      	cmp	r3, #0
 8010872:	d014      	beq.n	801089e <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	681b      	ldr	r3, [r3, #0]
 8010878:	785b      	ldrb	r3, [r3, #1]
 801087a:	4618      	mov	r0, r3
 801087c:	f7fc fc24 	bl	800d0c8 <disk_status>
 8010880:	4603      	mov	r3, r0
 8010882:	f003 0301 	and.w	r3, r3, #1
 8010886:	2b00      	cmp	r3, #0
 8010888:	d102      	bne.n	8010890 <validate+0x60>
				res = FR_OK;
 801088a:	2300      	movs	r3, #0
 801088c:	73fb      	strb	r3, [r7, #15]
 801088e:	e008      	b.n	80108a2 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	681b      	ldr	r3, [r3, #0]
 8010894:	2100      	movs	r1, #0
 8010896:	4618      	mov	r0, r3
 8010898:	f7fc ff0d 	bl	800d6b6 <unlock_fs>
 801089c:	e001      	b.n	80108a2 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 801089e:	230f      	movs	r3, #15
 80108a0:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80108a2:	7bfb      	ldrb	r3, [r7, #15]
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	d102      	bne.n	80108ae <validate+0x7e>
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	681b      	ldr	r3, [r3, #0]
 80108ac:	e000      	b.n	80108b0 <validate+0x80>
 80108ae:	2300      	movs	r3, #0
 80108b0:	683a      	ldr	r2, [r7, #0]
 80108b2:	6013      	str	r3, [r2, #0]
	return res;
 80108b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80108b6:	4618      	mov	r0, r3
 80108b8:	3710      	adds	r7, #16
 80108ba:	46bd      	mov	sp, r7
 80108bc:	bd80      	pop	{r7, pc}
	...

080108c0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80108c0:	b580      	push	{r7, lr}
 80108c2:	b088      	sub	sp, #32
 80108c4:	af00      	add	r7, sp, #0
 80108c6:	60f8      	str	r0, [r7, #12]
 80108c8:	60b9      	str	r1, [r7, #8]
 80108ca:	4613      	mov	r3, r2
 80108cc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80108ce:	68bb      	ldr	r3, [r7, #8]
 80108d0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80108d2:	f107 0310 	add.w	r3, r7, #16
 80108d6:	4618      	mov	r0, r3
 80108d8:	f7ff fb71 	bl	800ffbe <get_ldnumber>
 80108dc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80108de:	69fb      	ldr	r3, [r7, #28]
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	da01      	bge.n	80108e8 <f_mount+0x28>
 80108e4:	230b      	movs	r3, #11
 80108e6:	e048      	b.n	801097a <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80108e8:	4a26      	ldr	r2, [pc, #152]	; (8010984 <f_mount+0xc4>)
 80108ea:	69fb      	ldr	r3, [r7, #28]
 80108ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80108f0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80108f2:	69bb      	ldr	r3, [r7, #24]
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	d00f      	beq.n	8010918 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80108f8:	69b8      	ldr	r0, [r7, #24]
 80108fa:	f7fd f83f 	bl	800d97c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 80108fe:	69bb      	ldr	r3, [r7, #24]
 8010900:	699b      	ldr	r3, [r3, #24]
 8010902:	4618      	mov	r0, r3
 8010904:	f000 ffd5 	bl	80118b2 <ff_del_syncobj>
 8010908:	4603      	mov	r3, r0
 801090a:	2b00      	cmp	r3, #0
 801090c:	d101      	bne.n	8010912 <f_mount+0x52>
 801090e:	2302      	movs	r3, #2
 8010910:	e033      	b.n	801097a <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8010912:	69bb      	ldr	r3, [r7, #24]
 8010914:	2200      	movs	r2, #0
 8010916:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8010918:	68fb      	ldr	r3, [r7, #12]
 801091a:	2b00      	cmp	r3, #0
 801091c:	d00f      	beq.n	801093e <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 801091e:	68fb      	ldr	r3, [r7, #12]
 8010920:	2200      	movs	r2, #0
 8010922:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8010924:	69fb      	ldr	r3, [r7, #28]
 8010926:	b2da      	uxtb	r2, r3
 8010928:	68fb      	ldr	r3, [r7, #12]
 801092a:	3318      	adds	r3, #24
 801092c:	4619      	mov	r1, r3
 801092e:	4610      	mov	r0, r2
 8010930:	f000 ffa4 	bl	801187c <ff_cre_syncobj>
 8010934:	4603      	mov	r3, r0
 8010936:	2b00      	cmp	r3, #0
 8010938:	d101      	bne.n	801093e <f_mount+0x7e>
 801093a:	2302      	movs	r3, #2
 801093c:	e01d      	b.n	801097a <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 801093e:	68fa      	ldr	r2, [r7, #12]
 8010940:	4910      	ldr	r1, [pc, #64]	; (8010984 <f_mount+0xc4>)
 8010942:	69fb      	ldr	r3, [r7, #28]
 8010944:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8010948:	68fb      	ldr	r3, [r7, #12]
 801094a:	2b00      	cmp	r3, #0
 801094c:	d002      	beq.n	8010954 <f_mount+0x94>
 801094e:	79fb      	ldrb	r3, [r7, #7]
 8010950:	2b01      	cmp	r3, #1
 8010952:	d001      	beq.n	8010958 <f_mount+0x98>
 8010954:	2300      	movs	r3, #0
 8010956:	e010      	b.n	801097a <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8010958:	f107 010c 	add.w	r1, r7, #12
 801095c:	f107 0308 	add.w	r3, r7, #8
 8010960:	2200      	movs	r2, #0
 8010962:	4618      	mov	r0, r3
 8010964:	f7ff fbd4 	bl	8010110 <find_volume>
 8010968:	4603      	mov	r3, r0
 801096a:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801096c:	68fb      	ldr	r3, [r7, #12]
 801096e:	7dfa      	ldrb	r2, [r7, #23]
 8010970:	4611      	mov	r1, r2
 8010972:	4618      	mov	r0, r3
 8010974:	f7fc fe9f 	bl	800d6b6 <unlock_fs>
 8010978:	7dfb      	ldrb	r3, [r7, #23]
}
 801097a:	4618      	mov	r0, r3
 801097c:	3720      	adds	r7, #32
 801097e:	46bd      	mov	sp, r7
 8010980:	bd80      	pop	{r7, pc}
 8010982:	bf00      	nop
 8010984:	2000021c 	.word	0x2000021c

08010988 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8010988:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 801098c:	b0a4      	sub	sp, #144	; 0x90
 801098e:	af00      	add	r7, sp, #0
 8010990:	60f8      	str	r0, [r7, #12]
 8010992:	60b9      	str	r1, [r7, #8]
 8010994:	4613      	mov	r3, r2
 8010996:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8010998:	68fb      	ldr	r3, [r7, #12]
 801099a:	2b00      	cmp	r3, #0
 801099c:	d101      	bne.n	80109a2 <f_open+0x1a>
 801099e:	2309      	movs	r3, #9
 80109a0:	e2c9      	b.n	8010f36 <f_open+0x5ae>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80109a2:	79fb      	ldrb	r3, [r7, #7]
 80109a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80109a8:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80109aa:	79fa      	ldrb	r2, [r7, #7]
 80109ac:	f107 0114 	add.w	r1, r7, #20
 80109b0:	f107 0308 	add.w	r3, r7, #8
 80109b4:	4618      	mov	r0, r3
 80109b6:	f7ff fbab 	bl	8010110 <find_volume>
 80109ba:	4603      	mov	r3, r0
 80109bc:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	if (res == FR_OK) {
 80109c0:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80109c4:	2b00      	cmp	r3, #0
 80109c6:	f040 82a6 	bne.w	8010f16 <f_open+0x58e>
		dj.obj.fs = fs;
 80109ca:	697b      	ldr	r3, [r7, #20]
 80109cc:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
 80109ce:	f44f 608c 	mov.w	r0, #1120	; 0x460
 80109d2:	f000 ff9a 	bl	801190a <ff_memalloc>
 80109d6:	67f8      	str	r0, [r7, #124]	; 0x7c
 80109d8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80109da:	2b00      	cmp	r3, #0
 80109dc:	d106      	bne.n	80109ec <f_open+0x64>
 80109de:	697b      	ldr	r3, [r7, #20]
 80109e0:	2111      	movs	r1, #17
 80109e2:	4618      	mov	r0, r3
 80109e4:	f7fc fe67 	bl	800d6b6 <unlock_fs>
 80109e8:	2311      	movs	r3, #17
 80109ea:	e2a4      	b.n	8010f36 <f_open+0x5ae>
 80109ec:	697b      	ldr	r3, [r7, #20]
 80109ee:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80109f0:	611a      	str	r2, [r3, #16]
 80109f2:	697b      	ldr	r3, [r7, #20]
 80109f4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80109f6:	f502 7200 	add.w	r2, r2, #512	; 0x200
 80109fa:	615a      	str	r2, [r3, #20]
		res = follow_path(&dj, path);	/* Follow the file path */
 80109fc:	68ba      	ldr	r2, [r7, #8]
 80109fe:	f107 0318 	add.w	r3, r7, #24
 8010a02:	4611      	mov	r1, r2
 8010a04:	4618      	mov	r0, r3
 8010a06:	f7ff fa2d 	bl	800fe64 <follow_path>
 8010a0a:	4603      	mov	r3, r0
 8010a0c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8010a10:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	d11a      	bne.n	8010a4e <f_open+0xc6>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8010a18:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8010a1c:	b25b      	sxtb	r3, r3
 8010a1e:	2b00      	cmp	r3, #0
 8010a20:	da03      	bge.n	8010a2a <f_open+0xa2>
				res = FR_INVALID_NAME;
 8010a22:	2306      	movs	r3, #6
 8010a24:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8010a28:	e011      	b.n	8010a4e <f_open+0xc6>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8010a2a:	79fb      	ldrb	r3, [r7, #7]
 8010a2c:	f023 0301 	bic.w	r3, r3, #1
 8010a30:	2b00      	cmp	r3, #0
 8010a32:	bf14      	ite	ne
 8010a34:	2301      	movne	r3, #1
 8010a36:	2300      	moveq	r3, #0
 8010a38:	b2db      	uxtb	r3, r3
 8010a3a:	461a      	mov	r2, r3
 8010a3c:	f107 0318 	add.w	r3, r7, #24
 8010a40:	4611      	mov	r1, r2
 8010a42:	4618      	mov	r0, r3
 8010a44:	f7fc fe52 	bl	800d6ec <chk_lock>
 8010a48:	4603      	mov	r3, r0
 8010a4a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8010a4e:	79fb      	ldrb	r3, [r7, #7]
 8010a50:	f003 031c 	and.w	r3, r3, #28
 8010a54:	2b00      	cmp	r3, #0
 8010a56:	f000 8109 	beq.w	8010c6c <f_open+0x2e4>
			if (res != FR_OK) {					/* No file, create new */
 8010a5a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	d017      	beq.n	8010a92 <f_open+0x10a>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8010a62:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8010a66:	2b04      	cmp	r3, #4
 8010a68:	d10e      	bne.n	8010a88 <f_open+0x100>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8010a6a:	f7fc fe9b 	bl	800d7a4 <enq_lock>
 8010a6e:	4603      	mov	r3, r0
 8010a70:	2b00      	cmp	r3, #0
 8010a72:	d006      	beq.n	8010a82 <f_open+0xfa>
 8010a74:	f107 0318 	add.w	r3, r7, #24
 8010a78:	4618      	mov	r0, r3
 8010a7a:	f7fe fe8b 	bl	800f794 <dir_register>
 8010a7e:	4603      	mov	r3, r0
 8010a80:	e000      	b.n	8010a84 <f_open+0xfc>
 8010a82:	2312      	movs	r3, #18
 8010a84:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8010a88:	79fb      	ldrb	r3, [r7, #7]
 8010a8a:	f043 0308 	orr.w	r3, r3, #8
 8010a8e:	71fb      	strb	r3, [r7, #7]
 8010a90:	e010      	b.n	8010ab4 <f_open+0x12c>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8010a92:	7fbb      	ldrb	r3, [r7, #30]
 8010a94:	f003 0311 	and.w	r3, r3, #17
 8010a98:	2b00      	cmp	r3, #0
 8010a9a:	d003      	beq.n	8010aa4 <f_open+0x11c>
					res = FR_DENIED;
 8010a9c:	2307      	movs	r3, #7
 8010a9e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8010aa2:	e007      	b.n	8010ab4 <f_open+0x12c>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8010aa4:	79fb      	ldrb	r3, [r7, #7]
 8010aa6:	f003 0304 	and.w	r3, r3, #4
 8010aaa:	2b00      	cmp	r3, #0
 8010aac:	d002      	beq.n	8010ab4 <f_open+0x12c>
 8010aae:	2308      	movs	r3, #8
 8010ab0:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8010ab4:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8010ab8:	2b00      	cmp	r3, #0
 8010aba:	f040 80f1 	bne.w	8010ca0 <f_open+0x318>
 8010abe:	79fb      	ldrb	r3, [r7, #7]
 8010ac0:	f003 0308 	and.w	r3, r3, #8
 8010ac4:	2b00      	cmp	r3, #0
 8010ac6:	f000 80eb 	beq.w	8010ca0 <f_open+0x318>
				dw = GET_FATTIME();
 8010aca:	f7f9 fafd 	bl	800a0c8 <get_fattime>
 8010ace:	67b8      	str	r0, [r7, #120]	; 0x78
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
 8010ad0:	697b      	ldr	r3, [r7, #20]
 8010ad2:	781b      	ldrb	r3, [r3, #0]
 8010ad4:	2b04      	cmp	r3, #4
 8010ad6:	f040 8082 	bne.w	8010bde <f_open+0x256>
					/* Get current allocation info */
					fp->obj.fs = fs;
 8010ada:	697a      	ldr	r2, [r7, #20]
 8010adc:	68fb      	ldr	r3, [r7, #12]
 8010ade:	601a      	str	r2, [r3, #0]
					fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);
 8010ae0:	697b      	ldr	r3, [r7, #20]
 8010ae2:	695b      	ldr	r3, [r3, #20]
 8010ae4:	3334      	adds	r3, #52	; 0x34
 8010ae6:	4618      	mov	r0, r3
 8010ae8:	f7fc fba4 	bl	800d234 <ld_dword>
 8010aec:	4602      	mov	r2, r0
 8010aee:	68fb      	ldr	r3, [r7, #12]
 8010af0:	609a      	str	r2, [r3, #8]
					fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 8010af2:	697b      	ldr	r3, [r7, #20]
 8010af4:	695b      	ldr	r3, [r3, #20]
 8010af6:	3338      	adds	r3, #56	; 0x38
 8010af8:	4618      	mov	r0, r3
 8010afa:	f7fc fbbe 	bl	800d27a <ld_qword>
 8010afe:	4603      	mov	r3, r0
 8010b00:	460c      	mov	r4, r1
 8010b02:	68fa      	ldr	r2, [r7, #12]
 8010b04:	e9c2 3404 	strd	r3, r4, [r2, #16]
					fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 8010b08:	697b      	ldr	r3, [r7, #20]
 8010b0a:	695b      	ldr	r3, [r3, #20]
 8010b0c:	3321      	adds	r3, #33	; 0x21
 8010b0e:	781b      	ldrb	r3, [r3, #0]
 8010b10:	f003 0302 	and.w	r3, r3, #2
 8010b14:	b2da      	uxtb	r2, r3
 8010b16:	68fb      	ldr	r3, [r7, #12]
 8010b18:	71da      	strb	r2, [r3, #7]
					fp->obj.n_frag = 0;
 8010b1a:	68fb      	ldr	r3, [r7, #12]
 8010b1c:	2200      	movs	r2, #0
 8010b1e:	61da      	str	r2, [r3, #28]
					/* Initialize directory entry block */
					st_dword(fs->dirbuf + XDIR_CrtTime, dw);	/* Set created time */
 8010b20:	697b      	ldr	r3, [r7, #20]
 8010b22:	695b      	ldr	r3, [r3, #20]
 8010b24:	3308      	adds	r3, #8
 8010b26:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8010b28:	4618      	mov	r0, r3
 8010b2a:	f7fc fc7e 	bl	800d42a <st_dword>
					fs->dirbuf[XDIR_CrtTime10] = 0;
 8010b2e:	697b      	ldr	r3, [r7, #20]
 8010b30:	695b      	ldr	r3, [r3, #20]
 8010b32:	3314      	adds	r3, #20
 8010b34:	2200      	movs	r2, #0
 8010b36:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_ModTime, dw);	/* Set modified time */
 8010b38:	697b      	ldr	r3, [r7, #20]
 8010b3a:	695b      	ldr	r3, [r3, #20]
 8010b3c:	330c      	adds	r3, #12
 8010b3e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8010b40:	4618      	mov	r0, r3
 8010b42:	f7fc fc72 	bl	800d42a <st_dword>
					fs->dirbuf[XDIR_ModTime10] = 0;
 8010b46:	697b      	ldr	r3, [r7, #20]
 8010b48:	695b      	ldr	r3, [r3, #20]
 8010b4a:	3315      	adds	r3, #21
 8010b4c:	2200      	movs	r2, #0
 8010b4e:	701a      	strb	r2, [r3, #0]
					fs->dirbuf[XDIR_Attr] = AM_ARC;				/* Reset attribute */
 8010b50:	697b      	ldr	r3, [r7, #20]
 8010b52:	695b      	ldr	r3, [r3, #20]
 8010b54:	3304      	adds	r3, #4
 8010b56:	2220      	movs	r2, #32
 8010b58:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_FstClus, 0);		/* Reset file allocation info */
 8010b5a:	697b      	ldr	r3, [r7, #20]
 8010b5c:	695b      	ldr	r3, [r3, #20]
 8010b5e:	3334      	adds	r3, #52	; 0x34
 8010b60:	2100      	movs	r1, #0
 8010b62:	4618      	mov	r0, r3
 8010b64:	f7fc fc61 	bl	800d42a <st_dword>
					st_qword(fs->dirbuf + XDIR_FileSize, 0);
 8010b68:	697b      	ldr	r3, [r7, #20]
 8010b6a:	695b      	ldr	r3, [r3, #20]
 8010b6c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8010b70:	f04f 0200 	mov.w	r2, #0
 8010b74:	f04f 0300 	mov.w	r3, #0
 8010b78:	4608      	mov	r0, r1
 8010b7a:	f7fc fc82 	bl	800d482 <st_qword>
					st_qword(fs->dirbuf + XDIR_ValidFileSize, 0);
 8010b7e:	697b      	ldr	r3, [r7, #20]
 8010b80:	695b      	ldr	r3, [r3, #20]
 8010b82:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8010b86:	f04f 0200 	mov.w	r2, #0
 8010b8a:	f04f 0300 	mov.w	r3, #0
 8010b8e:	4608      	mov	r0, r1
 8010b90:	f7fc fc77 	bl	800d482 <st_qword>
					fs->dirbuf[XDIR_GenFlags] = 1;
 8010b94:	697b      	ldr	r3, [r7, #20]
 8010b96:	695b      	ldr	r3, [r3, #20]
 8010b98:	3321      	adds	r3, #33	; 0x21
 8010b9a:	2201      	movs	r2, #1
 8010b9c:	701a      	strb	r2, [r3, #0]
					res = store_xdir(&dj);
 8010b9e:	f107 0318 	add.w	r3, r7, #24
 8010ba2:	4618      	mov	r0, r3
 8010ba4:	f7fe fb43 	bl	800f22e <store_xdir>
 8010ba8:	4603      	mov	r3, r0
 8010baa:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
					if (res == FR_OK && fp->obj.sclust) {		/* Remove the cluster chain if exist */
 8010bae:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8010bb2:	2b00      	cmp	r3, #0
 8010bb4:	d174      	bne.n	8010ca0 <f_open+0x318>
 8010bb6:	68fb      	ldr	r3, [r7, #12]
 8010bb8:	689b      	ldr	r3, [r3, #8]
 8010bba:	2b00      	cmp	r3, #0
 8010bbc:	d070      	beq.n	8010ca0 <f_open+0x318>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 8010bbe:	68f8      	ldr	r0, [r7, #12]
 8010bc0:	68fb      	ldr	r3, [r7, #12]
 8010bc2:	689b      	ldr	r3, [r3, #8]
 8010bc4:	2200      	movs	r2, #0
 8010bc6:	4619      	mov	r1, r3
 8010bc8:	f7fd fbd0 	bl	800e36c <remove_chain>
 8010bcc:	4603      	mov	r3, r0
 8010bce:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 8010bd2:	68fb      	ldr	r3, [r7, #12]
 8010bd4:	689a      	ldr	r2, [r3, #8]
 8010bd6:	697b      	ldr	r3, [r7, #20]
 8010bd8:	3a01      	subs	r2, #1
 8010bda:	61da      	str	r2, [r3, #28]
 8010bdc:	e060      	b.n	8010ca0 <f_open+0x318>
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8010bde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010be0:	330e      	adds	r3, #14
 8010be2:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8010be4:	4618      	mov	r0, r3
 8010be6:	f7fc fc20 	bl	800d42a <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8010bea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010bec:	3316      	adds	r3, #22
 8010bee:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8010bf0:	4618      	mov	r0, r3
 8010bf2:	f7fc fc1a 	bl	800d42a <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8010bf6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010bf8:	330b      	adds	r3, #11
 8010bfa:	2220      	movs	r2, #32
 8010bfc:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8010bfe:	697b      	ldr	r3, [r7, #20]
 8010c00:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010c02:	4611      	mov	r1, r2
 8010c04:	4618      	mov	r0, r3
 8010c06:	f7fd ff83 	bl	800eb10 <ld_clust>
 8010c0a:	6778      	str	r0, [r7, #116]	; 0x74
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8010c0c:	697b      	ldr	r3, [r7, #20]
 8010c0e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010c10:	2200      	movs	r2, #0
 8010c12:	4618      	mov	r0, r3
 8010c14:	f7fd ff9b 	bl	800eb4e <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8010c18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010c1a:	331c      	adds	r3, #28
 8010c1c:	2100      	movs	r1, #0
 8010c1e:	4618      	mov	r0, r3
 8010c20:	f7fc fc03 	bl	800d42a <st_dword>
					fs->wflag = 1;
 8010c24:	697b      	ldr	r3, [r7, #20]
 8010c26:	2201      	movs	r2, #1
 8010c28:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8010c2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010c2c:	2b00      	cmp	r3, #0
 8010c2e:	d037      	beq.n	8010ca0 <f_open+0x318>
						dw = fs->winsect;
 8010c30:	697b      	ldr	r3, [r7, #20]
 8010c32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010c34:	67bb      	str	r3, [r7, #120]	; 0x78
						res = remove_chain(&dj.obj, cl, 0);
 8010c36:	f107 0318 	add.w	r3, r7, #24
 8010c3a:	2200      	movs	r2, #0
 8010c3c:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8010c3e:	4618      	mov	r0, r3
 8010c40:	f7fd fb94 	bl	800e36c <remove_chain>
 8010c44:	4603      	mov	r3, r0
 8010c46:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
						if (res == FR_OK) {
 8010c4a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8010c4e:	2b00      	cmp	r3, #0
 8010c50:	d126      	bne.n	8010ca0 <f_open+0x318>
							res = move_window(fs, dw);
 8010c52:	697b      	ldr	r3, [r7, #20]
 8010c54:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8010c56:	4618      	mov	r0, r3
 8010c58:	f7fc fef8 	bl	800da4c <move_window>
 8010c5c:	4603      	mov	r3, r0
 8010c5e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8010c62:	697b      	ldr	r3, [r7, #20]
 8010c64:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8010c66:	3a01      	subs	r2, #1
 8010c68:	61da      	str	r2, [r3, #28]
 8010c6a:	e019      	b.n	8010ca0 <f_open+0x318>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8010c6c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8010c70:	2b00      	cmp	r3, #0
 8010c72:	d115      	bne.n	8010ca0 <f_open+0x318>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8010c74:	7fbb      	ldrb	r3, [r7, #30]
 8010c76:	f003 0310 	and.w	r3, r3, #16
 8010c7a:	2b00      	cmp	r3, #0
 8010c7c:	d003      	beq.n	8010c86 <f_open+0x2fe>
					res = FR_NO_FILE;
 8010c7e:	2304      	movs	r3, #4
 8010c80:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8010c84:	e00c      	b.n	8010ca0 <f_open+0x318>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8010c86:	79fb      	ldrb	r3, [r7, #7]
 8010c88:	f003 0302 	and.w	r3, r3, #2
 8010c8c:	2b00      	cmp	r3, #0
 8010c8e:	d007      	beq.n	8010ca0 <f_open+0x318>
 8010c90:	7fbb      	ldrb	r3, [r7, #30]
 8010c92:	f003 0301 	and.w	r3, r3, #1
 8010c96:	2b00      	cmp	r3, #0
 8010c98:	d002      	beq.n	8010ca0 <f_open+0x318>
						res = FR_DENIED;
 8010c9a:	2307      	movs	r3, #7
 8010c9c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
					}
				}
			}
		}
		if (res == FR_OK) {
 8010ca0:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8010ca4:	2b00      	cmp	r3, #0
 8010ca6:	d128      	bne.n	8010cfa <f_open+0x372>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8010ca8:	79fb      	ldrb	r3, [r7, #7]
 8010caa:	f003 0308 	and.w	r3, r3, #8
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	d003      	beq.n	8010cba <f_open+0x332>
				mode |= FA_MODIFIED;
 8010cb2:	79fb      	ldrb	r3, [r7, #7]
 8010cb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010cb8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8010cba:	697b      	ldr	r3, [r7, #20]
 8010cbc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010cbe:	68fb      	ldr	r3, [r7, #12]
 8010cc0:	649a      	str	r2, [r3, #72]	; 0x48
			fp->dir_ptr = dj.dir;
 8010cc2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010cc4:	68fb      	ldr	r3, [r7, #12]
 8010cc6:	64da      	str	r2, [r3, #76]	; 0x4c
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8010cc8:	79fb      	ldrb	r3, [r7, #7]
 8010cca:	f023 0301 	bic.w	r3, r3, #1
 8010cce:	2b00      	cmp	r3, #0
 8010cd0:	bf14      	ite	ne
 8010cd2:	2301      	movne	r3, #1
 8010cd4:	2300      	moveq	r3, #0
 8010cd6:	b2db      	uxtb	r3, r3
 8010cd8:	461a      	mov	r2, r3
 8010cda:	f107 0318 	add.w	r3, r7, #24
 8010cde:	4611      	mov	r1, r2
 8010ce0:	4618      	mov	r0, r3
 8010ce2:	f7fc fd81 	bl	800d7e8 <inc_lock>
 8010ce6:	4602      	mov	r2, r0
 8010ce8:	68fb      	ldr	r3, [r7, #12]
 8010cea:	62da      	str	r2, [r3, #44]	; 0x2c
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8010cec:	68fb      	ldr	r3, [r7, #12]
 8010cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010cf0:	2b00      	cmp	r3, #0
 8010cf2:	d102      	bne.n	8010cfa <f_open+0x372>
 8010cf4:	2302      	movs	r3, #2
 8010cf6:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8010cfa:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8010cfe:	2b00      	cmp	r3, #0
 8010d00:	f040 8106 	bne.w	8010f10 <f_open+0x588>
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 8010d04:	697b      	ldr	r3, [r7, #20]
 8010d06:	781b      	ldrb	r3, [r3, #0]
 8010d08:	2b04      	cmp	r3, #4
 8010d0a:	d12b      	bne.n	8010d64 <f_open+0x3dc>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 8010d0c:	6a3a      	ldr	r2, [r7, #32]
 8010d0e:	68fb      	ldr	r3, [r7, #12]
 8010d10:	621a      	str	r2, [r3, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 8010d12:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8010d16:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8010d1a:	7ffa      	ldrb	r2, [r7, #31]
 8010d1c:	431a      	orrs	r2, r3
 8010d1e:	68fb      	ldr	r3, [r7, #12]
 8010d20:	625a      	str	r2, [r3, #36]	; 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 8010d22:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8010d24:	68fb      	ldr	r3, [r7, #12]
 8010d26:	629a      	str	r2, [r3, #40]	; 0x28
				fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 8010d28:	697b      	ldr	r3, [r7, #20]
 8010d2a:	695b      	ldr	r3, [r3, #20]
 8010d2c:	3334      	adds	r3, #52	; 0x34
 8010d2e:	4618      	mov	r0, r3
 8010d30:	f7fc fa80 	bl	800d234 <ld_dword>
 8010d34:	4602      	mov	r2, r0
 8010d36:	68fb      	ldr	r3, [r7, #12]
 8010d38:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 8010d3a:	697b      	ldr	r3, [r7, #20]
 8010d3c:	695b      	ldr	r3, [r3, #20]
 8010d3e:	3338      	adds	r3, #56	; 0x38
 8010d40:	4618      	mov	r0, r3
 8010d42:	f7fc fa9a 	bl	800d27a <ld_qword>
 8010d46:	4603      	mov	r3, r0
 8010d48:	460c      	mov	r4, r1
 8010d4a:	68fa      	ldr	r2, [r7, #12]
 8010d4c:	e9c2 3404 	strd	r3, r4, [r2, #16]
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 8010d50:	697b      	ldr	r3, [r7, #20]
 8010d52:	695b      	ldr	r3, [r3, #20]
 8010d54:	3321      	adds	r3, #33	; 0x21
 8010d56:	781b      	ldrb	r3, [r3, #0]
 8010d58:	f003 0302 	and.w	r3, r3, #2
 8010d5c:	b2da      	uxtb	r2, r3
 8010d5e:	68fb      	ldr	r3, [r7, #12]
 8010d60:	71da      	strb	r2, [r3, #7]
 8010d62:	e013      	b.n	8010d8c <f_open+0x404>
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8010d64:	697b      	ldr	r3, [r7, #20]
 8010d66:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010d68:	4611      	mov	r1, r2
 8010d6a:	4618      	mov	r0, r3
 8010d6c:	f7fd fed0 	bl	800eb10 <ld_clust>
 8010d70:	4602      	mov	r2, r0
 8010d72:	68fb      	ldr	r3, [r7, #12]
 8010d74:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8010d76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010d78:	331c      	adds	r3, #28
 8010d7a:	4618      	mov	r0, r3
 8010d7c:	f7fc fa5a 	bl	800d234 <ld_dword>
 8010d80:	4603      	mov	r3, r0
 8010d82:	f04f 0400 	mov.w	r4, #0
 8010d86:	68fa      	ldr	r2, [r7, #12]
 8010d88:	e9c2 3404 	strd	r3, r4, [r2, #16]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8010d8c:	68fb      	ldr	r3, [r7, #12]
 8010d8e:	2200      	movs	r2, #0
 8010d90:	651a      	str	r2, [r3, #80]	; 0x50
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8010d92:	697a      	ldr	r2, [r7, #20]
 8010d94:	68fb      	ldr	r3, [r7, #12]
 8010d96:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8010d98:	697b      	ldr	r3, [r7, #20]
 8010d9a:	88da      	ldrh	r2, [r3, #6]
 8010d9c:	68fb      	ldr	r3, [r7, #12]
 8010d9e:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8010da0:	68fb      	ldr	r3, [r7, #12]
 8010da2:	79fa      	ldrb	r2, [r7, #7]
 8010da4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			fp->err = 0;			/* Clear error flag */
 8010da8:	68fb      	ldr	r3, [r7, #12]
 8010daa:	2200      	movs	r2, #0
 8010dac:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			fp->sect = 0;			/* Invalidate current data sector */
 8010db0:	68fb      	ldr	r3, [r7, #12]
 8010db2:	2200      	movs	r2, #0
 8010db4:	645a      	str	r2, [r3, #68]	; 0x44
			fp->fptr = 0;			/* Set file pointer top of the file */
 8010db6:	68fa      	ldr	r2, [r7, #12]
 8010db8:	f04f 0300 	mov.w	r3, #0
 8010dbc:	f04f 0400 	mov.w	r4, #0
 8010dc0:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8010dc4:	68fb      	ldr	r3, [r7, #12]
 8010dc6:	3354      	adds	r3, #84	; 0x54
 8010dc8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8010dcc:	2100      	movs	r1, #0
 8010dce:	4618      	mov	r0, r3
 8010dd0:	f7fc fbff 	bl	800d5d2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8010dd4:	79fb      	ldrb	r3, [r7, #7]
 8010dd6:	f003 0320 	and.w	r3, r3, #32
 8010dda:	2b00      	cmp	r3, #0
 8010ddc:	f000 8098 	beq.w	8010f10 <f_open+0x588>
 8010de0:	68fb      	ldr	r3, [r7, #12]
 8010de2:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8010de6:	4323      	orrs	r3, r4
 8010de8:	f000 8092 	beq.w	8010f10 <f_open+0x588>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8010dec:	68fb      	ldr	r3, [r7, #12]
 8010dee:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8010df2:	68fa      	ldr	r2, [r7, #12]
 8010df4:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8010df8:	697b      	ldr	r3, [r7, #20]
 8010dfa:	895b      	ldrh	r3, [r3, #10]
 8010dfc:	461a      	mov	r2, r3
 8010dfe:	697b      	ldr	r3, [r7, #20]
 8010e00:	899b      	ldrh	r3, [r3, #12]
 8010e02:	fb03 f302 	mul.w	r3, r3, r2
 8010e06:	673b      	str	r3, [r7, #112]	; 0x70
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8010e08:	68fb      	ldr	r3, [r7, #12]
 8010e0a:	689b      	ldr	r3, [r3, #8]
 8010e0c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8010e10:	68fb      	ldr	r3, [r7, #12]
 8010e12:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8010e16:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
 8010e1a:	e024      	b.n	8010e66 <f_open+0x4de>
					clst = get_fat(&fp->obj, clst);
 8010e1c:	68fb      	ldr	r3, [r7, #12]
 8010e1e:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8010e22:	4618      	mov	r0, r3
 8010e24:	f7fc fed0 	bl	800dbc8 <get_fat>
 8010e28:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
					if (clst <= 1) res = FR_INT_ERR;
 8010e2c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010e30:	2b01      	cmp	r3, #1
 8010e32:	d802      	bhi.n	8010e3a <f_open+0x4b2>
 8010e34:	2302      	movs	r3, #2
 8010e36:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8010e3a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010e3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e42:	d102      	bne.n	8010e4a <f_open+0x4c2>
 8010e44:	2301      	movs	r3, #1
 8010e46:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8010e4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010e4c:	469b      	mov	fp, r3
 8010e4e:	f04f 0c00 	mov.w	ip, #0
 8010e52:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8010e56:	460b      	mov	r3, r1
 8010e58:	4614      	mov	r4, r2
 8010e5a:	ebb3 030b 	subs.w	r3, r3, fp
 8010e5e:	eb64 040c 	sbc.w	r4, r4, ip
 8010e62:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
 8010e66:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8010e6a:	2b00      	cmp	r3, #0
 8010e6c:	d109      	bne.n	8010e82 <f_open+0x4fa>
 8010e6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010e70:	4619      	mov	r1, r3
 8010e72:	f04f 0200 	mov.w	r2, #0
 8010e76:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 8010e7a:	42a2      	cmp	r2, r4
 8010e7c:	bf08      	it	eq
 8010e7e:	4299      	cmpeq	r1, r3
 8010e80:	d3cc      	bcc.n	8010e1c <f_open+0x494>
				}
				fp->clust = clst;
 8010e82:	68fb      	ldr	r3, [r7, #12]
 8010e84:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8010e88:	641a      	str	r2, [r3, #64]	; 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8010e8a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8010e8e:	2b00      	cmp	r3, #0
 8010e90:	d13e      	bne.n	8010f10 <f_open+0x588>
 8010e92:	697b      	ldr	r3, [r7, #20]
 8010e94:	899b      	ldrh	r3, [r3, #12]
 8010e96:	b29b      	uxth	r3, r3
 8010e98:	f04f 0400 	mov.w	r4, #0
 8010e9c:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8010ea0:	461a      	mov	r2, r3
 8010ea2:	4623      	mov	r3, r4
 8010ea4:	f7ef f9cc 	bl	8000240 <__aeabi_uldivmod>
 8010ea8:	461c      	mov	r4, r3
 8010eaa:	4613      	mov	r3, r2
 8010eac:	4323      	orrs	r3, r4
 8010eae:	d02f      	beq.n	8010f10 <f_open+0x588>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8010eb0:	697b      	ldr	r3, [r7, #20]
 8010eb2:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8010eb6:	4618      	mov	r0, r3
 8010eb8:	f7fc fe66 	bl	800db88 <clust2sect>
 8010ebc:	66f8      	str	r0, [r7, #108]	; 0x6c
 8010ebe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010ec0:	2b00      	cmp	r3, #0
 8010ec2:	d103      	bne.n	8010ecc <f_open+0x544>
						res = FR_INT_ERR;
 8010ec4:	2302      	movs	r3, #2
 8010ec6:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8010eca:	e021      	b.n	8010f10 <f_open+0x588>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8010ecc:	697b      	ldr	r3, [r7, #20]
 8010ece:	899b      	ldrh	r3, [r3, #12]
 8010ed0:	b29b      	uxth	r3, r3
 8010ed2:	f04f 0400 	mov.w	r4, #0
 8010ed6:	461a      	mov	r2, r3
 8010ed8:	4623      	mov	r3, r4
 8010eda:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8010ede:	f7ef f9af 	bl	8000240 <__aeabi_uldivmod>
 8010ee2:	4603      	mov	r3, r0
 8010ee4:	460c      	mov	r4, r1
 8010ee6:	461a      	mov	r2, r3
 8010ee8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010eea:	441a      	add	r2, r3
 8010eec:	68fb      	ldr	r3, [r7, #12]
 8010eee:	645a      	str	r2, [r3, #68]	; 0x44
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8010ef0:	697b      	ldr	r3, [r7, #20]
 8010ef2:	7858      	ldrb	r0, [r3, #1]
 8010ef4:	68fb      	ldr	r3, [r7, #12]
 8010ef6:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8010efa:	68fb      	ldr	r3, [r7, #12]
 8010efc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010efe:	2301      	movs	r3, #1
 8010f00:	f7fc f922 	bl	800d148 <disk_read>
 8010f04:	4603      	mov	r3, r0
 8010f06:	2b00      	cmp	r3, #0
 8010f08:	d002      	beq.n	8010f10 <f_open+0x588>
 8010f0a:	2301      	movs	r3, #1
 8010f0c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
				}
			}
#endif
		}

		FREE_NAMBUF();
 8010f10:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8010f12:	f000 fd06 	bl	8011922 <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8010f16:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	d002      	beq.n	8010f24 <f_open+0x59c>
 8010f1e:	68fb      	ldr	r3, [r7, #12]
 8010f20:	2200      	movs	r2, #0
 8010f22:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8010f24:	697b      	ldr	r3, [r7, #20]
 8010f26:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 8010f2a:	4611      	mov	r1, r2
 8010f2c:	4618      	mov	r0, r3
 8010f2e:	f7fc fbc2 	bl	800d6b6 <unlock_fs>
 8010f32:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 8010f36:	4618      	mov	r0, r3
 8010f38:	3790      	adds	r7, #144	; 0x90
 8010f3a:	46bd      	mov	sp, r7
 8010f3c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08010f40 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8010f40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010f42:	b08d      	sub	sp, #52	; 0x34
 8010f44:	af00      	add	r7, sp, #0
 8010f46:	60f8      	str	r0, [r7, #12]
 8010f48:	60b9      	str	r1, [r7, #8]
 8010f4a:	607a      	str	r2, [r7, #4]
 8010f4c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8010f4e:	68bb      	ldr	r3, [r7, #8]
 8010f50:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8010f52:	683b      	ldr	r3, [r7, #0]
 8010f54:	2200      	movs	r2, #0
 8010f56:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8010f58:	68fb      	ldr	r3, [r7, #12]
 8010f5a:	f107 0210 	add.w	r2, r7, #16
 8010f5e:	4611      	mov	r1, r2
 8010f60:	4618      	mov	r0, r3
 8010f62:	f7ff fc65 	bl	8010830 <validate>
 8010f66:	4603      	mov	r3, r0
 8010f68:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8010f6c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010f70:	2b00      	cmp	r3, #0
 8010f72:	d108      	bne.n	8010f86 <f_write+0x46>
 8010f74:	68fb      	ldr	r3, [r7, #12]
 8010f76:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010f7a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8010f7e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	d009      	beq.n	8010f9a <f_write+0x5a>
 8010f86:	693b      	ldr	r3, [r7, #16]
 8010f88:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8010f8c:	4611      	mov	r1, r2
 8010f8e:	4618      	mov	r0, r3
 8010f90:	f7fc fb91 	bl	800d6b6 <unlock_fs>
 8010f94:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010f98:	e1d3      	b.n	8011342 <f_write+0x402>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8010f9a:	68fb      	ldr	r3, [r7, #12]
 8010f9c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010fa0:	f003 0302 	and.w	r3, r3, #2
 8010fa4:	2b00      	cmp	r3, #0
 8010fa6:	d106      	bne.n	8010fb6 <f_write+0x76>
 8010fa8:	693b      	ldr	r3, [r7, #16]
 8010faa:	2107      	movs	r1, #7
 8010fac:	4618      	mov	r0, r3
 8010fae:	f7fc fb82 	bl	800d6b6 <unlock_fs>
 8010fb2:	2307      	movs	r3, #7
 8010fb4:	e1c5      	b.n	8011342 <f_write+0x402>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8010fb6:	693b      	ldr	r3, [r7, #16]
 8010fb8:	781b      	ldrb	r3, [r3, #0]
 8010fba:	2b04      	cmp	r3, #4
 8010fbc:	f000 81ac 	beq.w	8011318 <f_write+0x3d8>
 8010fc0:	68fb      	ldr	r3, [r7, #12]
 8010fc2:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8010fc6:	461a      	mov	r2, r3
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	441a      	add	r2, r3
 8010fcc:	68fb      	ldr	r3, [r7, #12]
 8010fce:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8010fd2:	429a      	cmp	r2, r3
 8010fd4:	f080 81a0 	bcs.w	8011318 <f_write+0x3d8>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8010fd8:	68fb      	ldr	r3, [r7, #12]
 8010fda:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8010fde:	43db      	mvns	r3, r3
 8010fe0:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8010fe2:	e199      	b.n	8011318 <f_write+0x3d8>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8010fe4:	68fb      	ldr	r3, [r7, #12]
 8010fe6:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8010fea:	693b      	ldr	r3, [r7, #16]
 8010fec:	899b      	ldrh	r3, [r3, #12]
 8010fee:	b29b      	uxth	r3, r3
 8010ff0:	f04f 0400 	mov.w	r4, #0
 8010ff4:	461a      	mov	r2, r3
 8010ff6:	4623      	mov	r3, r4
 8010ff8:	f7ef f922 	bl	8000240 <__aeabi_uldivmod>
 8010ffc:	461c      	mov	r4, r3
 8010ffe:	4613      	mov	r3, r2
 8011000:	4323      	orrs	r3, r4
 8011002:	f040 812a 	bne.w	801125a <f_write+0x31a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8011006:	68fb      	ldr	r3, [r7, #12]
 8011008:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 801100c:	693b      	ldr	r3, [r7, #16]
 801100e:	899b      	ldrh	r3, [r3, #12]
 8011010:	b29b      	uxth	r3, r3
 8011012:	f04f 0400 	mov.w	r4, #0
 8011016:	461a      	mov	r2, r3
 8011018:	4623      	mov	r3, r4
 801101a:	f7ef f911 	bl	8000240 <__aeabi_uldivmod>
 801101e:	4603      	mov	r3, r0
 8011020:	460c      	mov	r4, r1
 8011022:	461a      	mov	r2, r3
 8011024:	693b      	ldr	r3, [r7, #16]
 8011026:	895b      	ldrh	r3, [r3, #10]
 8011028:	3b01      	subs	r3, #1
 801102a:	4013      	ands	r3, r2
 801102c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 801102e:	69bb      	ldr	r3, [r7, #24]
 8011030:	2b00      	cmp	r3, #0
 8011032:	d152      	bne.n	80110da <f_write+0x19a>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8011034:	68fb      	ldr	r3, [r7, #12]
 8011036:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 801103a:	4323      	orrs	r3, r4
 801103c:	d10c      	bne.n	8011058 <f_write+0x118>
					clst = fp->obj.sclust;	/* Follow from the origin */
 801103e:	68fb      	ldr	r3, [r7, #12]
 8011040:	689b      	ldr	r3, [r3, #8]
 8011042:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8011044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011046:	2b00      	cmp	r3, #0
 8011048:	d11c      	bne.n	8011084 <f_write+0x144>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 801104a:	68fb      	ldr	r3, [r7, #12]
 801104c:	2100      	movs	r1, #0
 801104e:	4618      	mov	r0, r3
 8011050:	f7fd fa40 	bl	800e4d4 <create_chain>
 8011054:	62b8      	str	r0, [r7, #40]	; 0x28
 8011056:	e015      	b.n	8011084 <f_write+0x144>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8011058:	68fb      	ldr	r3, [r7, #12]
 801105a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801105c:	2b00      	cmp	r3, #0
 801105e:	d009      	beq.n	8011074 <f_write+0x134>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8011060:	68fb      	ldr	r3, [r7, #12]
 8011062:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8011066:	461a      	mov	r2, r3
 8011068:	4623      	mov	r3, r4
 801106a:	68f8      	ldr	r0, [r7, #12]
 801106c:	f7fd fb33 	bl	800e6d6 <clmt_clust>
 8011070:	62b8      	str	r0, [r7, #40]	; 0x28
 8011072:	e007      	b.n	8011084 <f_write+0x144>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8011074:	68fa      	ldr	r2, [r7, #12]
 8011076:	68fb      	ldr	r3, [r7, #12]
 8011078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801107a:	4619      	mov	r1, r3
 801107c:	4610      	mov	r0, r2
 801107e:	f7fd fa29 	bl	800e4d4 <create_chain>
 8011082:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8011084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011086:	2b00      	cmp	r3, #0
 8011088:	f000 814b 	beq.w	8011322 <f_write+0x3e2>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801108c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801108e:	2b01      	cmp	r3, #1
 8011090:	d10a      	bne.n	80110a8 <f_write+0x168>
 8011092:	68fb      	ldr	r3, [r7, #12]
 8011094:	2202      	movs	r2, #2
 8011096:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 801109a:	693b      	ldr	r3, [r7, #16]
 801109c:	2102      	movs	r1, #2
 801109e:	4618      	mov	r0, r3
 80110a0:	f7fc fb09 	bl	800d6b6 <unlock_fs>
 80110a4:	2302      	movs	r3, #2
 80110a6:	e14c      	b.n	8011342 <f_write+0x402>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80110a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80110ae:	d10a      	bne.n	80110c6 <f_write+0x186>
 80110b0:	68fb      	ldr	r3, [r7, #12]
 80110b2:	2201      	movs	r2, #1
 80110b4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80110b8:	693b      	ldr	r3, [r7, #16]
 80110ba:	2101      	movs	r1, #1
 80110bc:	4618      	mov	r0, r3
 80110be:	f7fc fafa 	bl	800d6b6 <unlock_fs>
 80110c2:	2301      	movs	r3, #1
 80110c4:	e13d      	b.n	8011342 <f_write+0x402>
				fp->clust = clst;			/* Update current cluster */
 80110c6:	68fb      	ldr	r3, [r7, #12]
 80110c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80110ca:	641a      	str	r2, [r3, #64]	; 0x40
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80110cc:	68fb      	ldr	r3, [r7, #12]
 80110ce:	689b      	ldr	r3, [r3, #8]
 80110d0:	2b00      	cmp	r3, #0
 80110d2:	d102      	bne.n	80110da <f_write+0x19a>
 80110d4:	68fb      	ldr	r3, [r7, #12]
 80110d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80110d8:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80110da:	68fb      	ldr	r3, [r7, #12]
 80110dc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80110e0:	b25b      	sxtb	r3, r3
 80110e2:	2b00      	cmp	r3, #0
 80110e4:	da20      	bge.n	8011128 <f_write+0x1e8>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80110e6:	693b      	ldr	r3, [r7, #16]
 80110e8:	7858      	ldrb	r0, [r3, #1]
 80110ea:	68fb      	ldr	r3, [r7, #12]
 80110ec:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80110f0:	68fb      	ldr	r3, [r7, #12]
 80110f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80110f4:	2301      	movs	r3, #1
 80110f6:	f7fc f847 	bl	800d188 <disk_write>
 80110fa:	4603      	mov	r3, r0
 80110fc:	2b00      	cmp	r3, #0
 80110fe:	d00a      	beq.n	8011116 <f_write+0x1d6>
 8011100:	68fb      	ldr	r3, [r7, #12]
 8011102:	2201      	movs	r2, #1
 8011104:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8011108:	693b      	ldr	r3, [r7, #16]
 801110a:	2101      	movs	r1, #1
 801110c:	4618      	mov	r0, r3
 801110e:	f7fc fad2 	bl	800d6b6 <unlock_fs>
 8011112:	2301      	movs	r3, #1
 8011114:	e115      	b.n	8011342 <f_write+0x402>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011116:	68fb      	ldr	r3, [r7, #12]
 8011118:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801111c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011120:	b2da      	uxtb	r2, r3
 8011122:	68fb      	ldr	r3, [r7, #12]
 8011124:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8011128:	693a      	ldr	r2, [r7, #16]
 801112a:	68fb      	ldr	r3, [r7, #12]
 801112c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801112e:	4619      	mov	r1, r3
 8011130:	4610      	mov	r0, r2
 8011132:	f7fc fd29 	bl	800db88 <clust2sect>
 8011136:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8011138:	697b      	ldr	r3, [r7, #20]
 801113a:	2b00      	cmp	r3, #0
 801113c:	d10a      	bne.n	8011154 <f_write+0x214>
 801113e:	68fb      	ldr	r3, [r7, #12]
 8011140:	2202      	movs	r2, #2
 8011142:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8011146:	693b      	ldr	r3, [r7, #16]
 8011148:	2102      	movs	r1, #2
 801114a:	4618      	mov	r0, r3
 801114c:	f7fc fab3 	bl	800d6b6 <unlock_fs>
 8011150:	2302      	movs	r3, #2
 8011152:	e0f6      	b.n	8011342 <f_write+0x402>
			sect += csect;
 8011154:	697a      	ldr	r2, [r7, #20]
 8011156:	69bb      	ldr	r3, [r7, #24]
 8011158:	4413      	add	r3, r2
 801115a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 801115c:	693b      	ldr	r3, [r7, #16]
 801115e:	899b      	ldrh	r3, [r3, #12]
 8011160:	461a      	mov	r2, r3
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	fbb3 f3f2 	udiv	r3, r3, r2
 8011168:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 801116a:	6a3b      	ldr	r3, [r7, #32]
 801116c:	2b00      	cmp	r3, #0
 801116e:	d04b      	beq.n	8011208 <f_write+0x2c8>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8011170:	69ba      	ldr	r2, [r7, #24]
 8011172:	6a3b      	ldr	r3, [r7, #32]
 8011174:	4413      	add	r3, r2
 8011176:	693a      	ldr	r2, [r7, #16]
 8011178:	8952      	ldrh	r2, [r2, #10]
 801117a:	4293      	cmp	r3, r2
 801117c:	d905      	bls.n	801118a <f_write+0x24a>
					cc = fs->csize - csect;
 801117e:	693b      	ldr	r3, [r7, #16]
 8011180:	895b      	ldrh	r3, [r3, #10]
 8011182:	461a      	mov	r2, r3
 8011184:	69bb      	ldr	r3, [r7, #24]
 8011186:	1ad3      	subs	r3, r2, r3
 8011188:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801118a:	693b      	ldr	r3, [r7, #16]
 801118c:	7858      	ldrb	r0, [r3, #1]
 801118e:	6a3b      	ldr	r3, [r7, #32]
 8011190:	697a      	ldr	r2, [r7, #20]
 8011192:	69f9      	ldr	r1, [r7, #28]
 8011194:	f7fb fff8 	bl	800d188 <disk_write>
 8011198:	4603      	mov	r3, r0
 801119a:	2b00      	cmp	r3, #0
 801119c:	d00a      	beq.n	80111b4 <f_write+0x274>
 801119e:	68fb      	ldr	r3, [r7, #12]
 80111a0:	2201      	movs	r2, #1
 80111a2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80111a6:	693b      	ldr	r3, [r7, #16]
 80111a8:	2101      	movs	r1, #1
 80111aa:	4618      	mov	r0, r3
 80111ac:	f7fc fa83 	bl	800d6b6 <unlock_fs>
 80111b0:	2301      	movs	r3, #1
 80111b2:	e0c6      	b.n	8011342 <f_write+0x402>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80111b4:	68fb      	ldr	r3, [r7, #12]
 80111b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80111b8:	697b      	ldr	r3, [r7, #20]
 80111ba:	1ad3      	subs	r3, r2, r3
 80111bc:	6a3a      	ldr	r2, [r7, #32]
 80111be:	429a      	cmp	r2, r3
 80111c0:	d91a      	bls.n	80111f8 <f_write+0x2b8>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80111c2:	68fb      	ldr	r3, [r7, #12]
 80111c4:	f103 0054 	add.w	r0, r3, #84	; 0x54
 80111c8:	68fb      	ldr	r3, [r7, #12]
 80111ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80111cc:	697b      	ldr	r3, [r7, #20]
 80111ce:	1ad3      	subs	r3, r2, r3
 80111d0:	693a      	ldr	r2, [r7, #16]
 80111d2:	8992      	ldrh	r2, [r2, #12]
 80111d4:	fb02 f303 	mul.w	r3, r2, r3
 80111d8:	69fa      	ldr	r2, [r7, #28]
 80111da:	18d1      	adds	r1, r2, r3
 80111dc:	693b      	ldr	r3, [r7, #16]
 80111de:	899b      	ldrh	r3, [r3, #12]
 80111e0:	461a      	mov	r2, r3
 80111e2:	f7fc f9d5 	bl	800d590 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80111e6:	68fb      	ldr	r3, [r7, #12]
 80111e8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80111ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80111f0:	b2da      	uxtb	r2, r3
 80111f2:	68fb      	ldr	r3, [r7, #12]
 80111f4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80111f8:	693b      	ldr	r3, [r7, #16]
 80111fa:	899b      	ldrh	r3, [r3, #12]
 80111fc:	461a      	mov	r2, r3
 80111fe:	6a3b      	ldr	r3, [r7, #32]
 8011200:	fb02 f303 	mul.w	r3, r2, r3
 8011204:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8011206:	e05d      	b.n	80112c4 <f_write+0x384>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8011208:	68fb      	ldr	r3, [r7, #12]
 801120a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801120c:	697a      	ldr	r2, [r7, #20]
 801120e:	429a      	cmp	r2, r3
 8011210:	d020      	beq.n	8011254 <f_write+0x314>
				fp->fptr < fp->obj.objsize &&
 8011212:	68fb      	ldr	r3, [r7, #12]
 8011214:	e9d3 120e 	ldrd	r1, r2, [r3, #56]	; 0x38
 8011218:	68fb      	ldr	r3, [r7, #12]
 801121a:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801121e:	42a2      	cmp	r2, r4
 8011220:	bf08      	it	eq
 8011222:	4299      	cmpeq	r1, r3
 8011224:	d216      	bcs.n	8011254 <f_write+0x314>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8011226:	693b      	ldr	r3, [r7, #16]
 8011228:	7858      	ldrb	r0, [r3, #1]
 801122a:	68fb      	ldr	r3, [r7, #12]
 801122c:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8011230:	2301      	movs	r3, #1
 8011232:	697a      	ldr	r2, [r7, #20]
 8011234:	f7fb ff88 	bl	800d148 <disk_read>
 8011238:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 801123a:	2b00      	cmp	r3, #0
 801123c:	d00a      	beq.n	8011254 <f_write+0x314>
					ABORT(fs, FR_DISK_ERR);
 801123e:	68fb      	ldr	r3, [r7, #12]
 8011240:	2201      	movs	r2, #1
 8011242:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8011246:	693b      	ldr	r3, [r7, #16]
 8011248:	2101      	movs	r1, #1
 801124a:	4618      	mov	r0, r3
 801124c:	f7fc fa33 	bl	800d6b6 <unlock_fs>
 8011250:	2301      	movs	r3, #1
 8011252:	e076      	b.n	8011342 <f_write+0x402>
			}
#endif
			fp->sect = sect;
 8011254:	68fb      	ldr	r3, [r7, #12]
 8011256:	697a      	ldr	r2, [r7, #20]
 8011258:	645a      	str	r2, [r3, #68]	; 0x44
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801125a:	693b      	ldr	r3, [r7, #16]
 801125c:	899b      	ldrh	r3, [r3, #12]
 801125e:	4618      	mov	r0, r3
 8011260:	68fb      	ldr	r3, [r7, #12]
 8011262:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8011266:	693a      	ldr	r2, [r7, #16]
 8011268:	8992      	ldrh	r2, [r2, #12]
 801126a:	fbb3 f1f2 	udiv	r1, r3, r2
 801126e:	fb02 f201 	mul.w	r2, r2, r1
 8011272:	1a9b      	subs	r3, r3, r2
 8011274:	1ac3      	subs	r3, r0, r3
 8011276:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8011278:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	429a      	cmp	r2, r3
 801127e:	d901      	bls.n	8011284 <f_write+0x344>
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8011284:	68fb      	ldr	r3, [r7, #12]
 8011286:	f103 0554 	add.w	r5, r3, #84	; 0x54
 801128a:	68fb      	ldr	r3, [r7, #12]
 801128c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8011290:	693b      	ldr	r3, [r7, #16]
 8011292:	899b      	ldrh	r3, [r3, #12]
 8011294:	b29b      	uxth	r3, r3
 8011296:	f04f 0400 	mov.w	r4, #0
 801129a:	461a      	mov	r2, r3
 801129c:	4623      	mov	r3, r4
 801129e:	f7ee ffcf 	bl	8000240 <__aeabi_uldivmod>
 80112a2:	461c      	mov	r4, r3
 80112a4:	4613      	mov	r3, r2
 80112a6:	442b      	add	r3, r5
 80112a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80112aa:	69f9      	ldr	r1, [r7, #28]
 80112ac:	4618      	mov	r0, r3
 80112ae:	f7fc f96f 	bl	800d590 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80112b2:	68fb      	ldr	r3, [r7, #12]
 80112b4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80112b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80112bc:	b2da      	uxtb	r2, r3
 80112be:	68fb      	ldr	r3, [r7, #12]
 80112c0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80112c4:	69fa      	ldr	r2, [r7, #28]
 80112c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112c8:	4413      	add	r3, r2
 80112ca:	61fb      	str	r3, [r7, #28]
 80112cc:	68fb      	ldr	r3, [r7, #12]
 80112ce:	e9d3 120e 	ldrd	r1, r2, [r3, #56]	; 0x38
 80112d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112d4:	461d      	mov	r5, r3
 80112d6:	f04f 0600 	mov.w	r6, #0
 80112da:	186b      	adds	r3, r5, r1
 80112dc:	eb46 0402 	adc.w	r4, r6, r2
 80112e0:	68fa      	ldr	r2, [r7, #12]
 80112e2:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
 80112e6:	68fb      	ldr	r3, [r7, #12]
 80112e8:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 80112ec:	68fa      	ldr	r2, [r7, #12]
 80112ee:	e9d2 120e 	ldrd	r1, r2, [r2, #56]	; 0x38
 80112f2:	4294      	cmp	r4, r2
 80112f4:	bf08      	it	eq
 80112f6:	428b      	cmpeq	r3, r1
 80112f8:	d201      	bcs.n	80112fe <f_write+0x3be>
 80112fa:	460b      	mov	r3, r1
 80112fc:	4614      	mov	r4, r2
 80112fe:	68fa      	ldr	r2, [r7, #12]
 8011300:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8011304:	683b      	ldr	r3, [r7, #0]
 8011306:	681a      	ldr	r2, [r3, #0]
 8011308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801130a:	441a      	add	r2, r3
 801130c:	683b      	ldr	r3, [r7, #0]
 801130e:	601a      	str	r2, [r3, #0]
 8011310:	687a      	ldr	r2, [r7, #4]
 8011312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011314:	1ad3      	subs	r3, r2, r3
 8011316:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	2b00      	cmp	r3, #0
 801131c:	f47f ae62 	bne.w	8010fe4 <f_write+0xa4>
 8011320:	e000      	b.n	8011324 <f_write+0x3e4>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8011322:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8011324:	68fb      	ldr	r3, [r7, #12]
 8011326:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801132a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801132e:	b2da      	uxtb	r2, r3
 8011330:	68fb      	ldr	r3, [r7, #12]
 8011332:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	LEAVE_FF(fs, FR_OK);
 8011336:	693b      	ldr	r3, [r7, #16]
 8011338:	2100      	movs	r1, #0
 801133a:	4618      	mov	r0, r3
 801133c:	f7fc f9bb 	bl	800d6b6 <unlock_fs>
 8011340:	2300      	movs	r3, #0
}
 8011342:	4618      	mov	r0, r3
 8011344:	3734      	adds	r7, #52	; 0x34
 8011346:	46bd      	mov	sp, r7
 8011348:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801134a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801134a:	b590      	push	{r4, r7, lr}
 801134c:	b09d      	sub	sp, #116	; 0x74
 801134e:	af00      	add	r7, sp, #0
 8011350:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8011358:	4611      	mov	r1, r2
 801135a:	4618      	mov	r0, r3
 801135c:	f7ff fa68 	bl	8010830 <validate>
 8011360:	4603      	mov	r3, r0
 8011362:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if (res == FR_OK) {
 8011366:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 801136a:	2b00      	cmp	r3, #0
 801136c:	f040 8127 	bne.w	80115be <f_sync+0x274>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011376:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801137a:	2b00      	cmp	r3, #0
 801137c:	f000 811f 	beq.w	80115be <f_sync+0x274>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011386:	b25b      	sxtb	r3, r3
 8011388:	2b00      	cmp	r3, #0
 801138a:	da1c      	bge.n	80113c6 <f_sync+0x7c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801138c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801138e:	7858      	ldrb	r0, [r3, #1]
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801139a:	2301      	movs	r3, #1
 801139c:	f7fb fef4 	bl	800d188 <disk_write>
 80113a0:	4603      	mov	r3, r0
 80113a2:	2b00      	cmp	r3, #0
 80113a4:	d006      	beq.n	80113b4 <f_sync+0x6a>
 80113a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80113a8:	2101      	movs	r1, #1
 80113aa:	4618      	mov	r0, r3
 80113ac:	f7fc f983 	bl	800d6b6 <unlock_fs>
 80113b0:	2301      	movs	r3, #1
 80113b2:	e10d      	b.n	80115d0 <f_sync+0x286>
				fp->flag &= (BYTE)~FA_DIRTY;
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80113ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80113be:	b2da      	uxtb	r2, r3
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80113c6:	f7f8 fe7f 	bl	800a0c8 <get_fattime>
 80113ca:	66b8      	str	r0, [r7, #104]	; 0x68
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 80113cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80113ce:	781b      	ldrb	r3, [r3, #0]
 80113d0:	2b04      	cmp	r3, #4
 80113d2:	f040 80a9 	bne.w	8011528 <f_sync+0x1de>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	4618      	mov	r0, r3
 80113da:	f7fc ff67 	bl	800e2ac <fill_first_frag>
 80113de:	4603      	mov	r3, r0
 80113e0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
				if (res == FR_OK) {
 80113e4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80113e8:	2b00      	cmp	r3, #0
 80113ea:	d10a      	bne.n	8011402 <f_sync+0xb8>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 80113ec:	6878      	ldr	r0, [r7, #4]
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80113f2:	f04f 32ff 	mov.w	r2, #4294967295
 80113f6:	4619      	mov	r1, r3
 80113f8:	f7fc ff87 	bl	800e30a <fill_last_frag>
 80113fc:	4603      	mov	r3, r0
 80113fe:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
				}
				if (res == FR_OK) {
 8011402:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8011406:	2b00      	cmp	r3, #0
 8011408:	f040 80d9 	bne.w	80115be <f_sync+0x274>
					INIT_NAMBUF(fs);
 801140c:	f44f 608c 	mov.w	r0, #1120	; 0x460
 8011410:	f000 fa7b 	bl	801190a <ff_memalloc>
 8011414:	6638      	str	r0, [r7, #96]	; 0x60
 8011416:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011418:	2b00      	cmp	r3, #0
 801141a:	d106      	bne.n	801142a <f_sync+0xe0>
 801141c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801141e:	2111      	movs	r1, #17
 8011420:	4618      	mov	r0, r3
 8011422:	f7fc f948 	bl	800d6b6 <unlock_fs>
 8011426:	2311      	movs	r3, #17
 8011428:	e0d2      	b.n	80115d0 <f_sync+0x286>
 801142a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801142c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801142e:	611a      	str	r2, [r3, #16]
 8011430:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011432:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011434:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8011438:	615a      	str	r2, [r3, #20]
					res = load_obj_dir(&dj, &fp->obj);	/* Load directory entry block */
 801143a:	687a      	ldr	r2, [r7, #4]
 801143c:	f107 0308 	add.w	r3, r7, #8
 8011440:	4611      	mov	r1, r2
 8011442:	4618      	mov	r0, r3
 8011444:	f7fd feb6 	bl	800f1b4 <load_obj_dir>
 8011448:	4603      	mov	r3, r0
 801144a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					if (res == FR_OK) {
 801144e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8011452:	2b00      	cmp	r3, #0
 8011454:	d164      	bne.n	8011520 <f_sync+0x1d6>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive bit */
 8011456:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011458:	695b      	ldr	r3, [r3, #20]
 801145a:	3304      	adds	r3, #4
 801145c:	781a      	ldrb	r2, [r3, #0]
 801145e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011460:	695b      	ldr	r3, [r3, #20]
 8011462:	3304      	adds	r3, #4
 8011464:	f042 0220 	orr.w	r2, r2, #32
 8011468:	b2d2      	uxtb	r2, r2
 801146a:	701a      	strb	r2, [r3, #0]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation info */
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	79da      	ldrb	r2, [r3, #7]
 8011470:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011472:	695b      	ldr	r3, [r3, #20]
 8011474:	3321      	adds	r3, #33	; 0x21
 8011476:	f042 0201 	orr.w	r2, r2, #1
 801147a:	b2d2      	uxtb	r2, r2
 801147c:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);
 801147e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011480:	695b      	ldr	r3, [r3, #20]
 8011482:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	689b      	ldr	r3, [r3, #8]
 801148a:	4619      	mov	r1, r3
 801148c:	4610      	mov	r0, r2
 801148e:	f7fb ffcc 	bl	800d42a <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
 8011492:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011494:	695b      	ldr	r3, [r3, #20]
 8011496:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 80114a0:	461a      	mov	r2, r3
 80114a2:	4623      	mov	r3, r4
 80114a4:	4608      	mov	r0, r1
 80114a6:	f7fb ffec 	bl	800d482 <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
 80114aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80114ac:	695b      	ldr	r3, [r3, #20]
 80114ae:	f103 0128 	add.w	r1, r3, #40	; 0x28
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 80114b8:	461a      	mov	r2, r3
 80114ba:	4623      	mov	r3, r4
 80114bc:	4608      	mov	r0, r1
 80114be:	f7fb ffe0 	bl	800d482 <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 80114c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80114c4:	695b      	ldr	r3, [r3, #20]
 80114c6:	330c      	adds	r3, #12
 80114c8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80114ca:	4618      	mov	r0, r3
 80114cc:	f7fb ffad 	bl	800d42a <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
 80114d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80114d2:	695b      	ldr	r3, [r3, #20]
 80114d4:	3315      	adds	r3, #21
 80114d6:	2200      	movs	r2, #0
 80114d8:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 80114da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80114dc:	695b      	ldr	r3, [r3, #20]
 80114de:	3310      	adds	r3, #16
 80114e0:	2100      	movs	r1, #0
 80114e2:	4618      	mov	r0, r3
 80114e4:	f7fb ffa1 	bl	800d42a <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
 80114e8:	f107 0308 	add.w	r3, r7, #8
 80114ec:	4618      	mov	r0, r3
 80114ee:	f7fd fe9e 	bl	800f22e <store_xdir>
 80114f2:	4603      	mov	r3, r0
 80114f4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
						if (res == FR_OK) {
 80114f8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80114fc:	2b00      	cmp	r3, #0
 80114fe:	d10f      	bne.n	8011520 <f_sync+0x1d6>
							res = sync_fs(fs);
 8011500:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011502:	4618      	mov	r0, r3
 8011504:	f7fc fad0 	bl	800daa8 <sync_fs>
 8011508:	4603      	mov	r3, r0
 801150a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
							fp->flag &= (BYTE)~FA_MODIFIED;
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011514:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011518:	b2da      	uxtb	r2, r3
 801151a:	687b      	ldr	r3, [r7, #4]
 801151c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
						}
					}
					FREE_NAMBUF();
 8011520:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8011522:	f000 f9fe 	bl	8011922 <ff_memfree>
 8011526:	e04a      	b.n	80115be <f_sync+0x274>
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8011528:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801152e:	4619      	mov	r1, r3
 8011530:	4610      	mov	r0, r2
 8011532:	f7fc fa8b 	bl	800da4c <move_window>
 8011536:	4603      	mov	r3, r0
 8011538:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
				if (res == FR_OK) {
 801153c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8011540:	2b00      	cmp	r3, #0
 8011542:	d13c      	bne.n	80115be <f_sync+0x274>
					dir = fp->dir_ptr;
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011548:	667b      	str	r3, [r7, #100]	; 0x64
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801154a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801154c:	330b      	adds	r3, #11
 801154e:	781a      	ldrb	r2, [r3, #0]
 8011550:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011552:	330b      	adds	r3, #11
 8011554:	f042 0220 	orr.w	r2, r2, #32
 8011558:	b2d2      	uxtb	r2, r2
 801155a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	6818      	ldr	r0, [r3, #0]
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	689b      	ldr	r3, [r3, #8]
 8011564:	461a      	mov	r2, r3
 8011566:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8011568:	f7fd faf1 	bl	800eb4e <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801156c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801156e:	f103 021c 	add.w	r2, r3, #28
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8011578:	4619      	mov	r1, r3
 801157a:	4610      	mov	r0, r2
 801157c:	f7fb ff55 	bl	800d42a <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8011580:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011582:	3316      	adds	r3, #22
 8011584:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8011586:	4618      	mov	r0, r3
 8011588:	f7fb ff4f 	bl	800d42a <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801158c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801158e:	3312      	adds	r3, #18
 8011590:	2100      	movs	r1, #0
 8011592:	4618      	mov	r0, r3
 8011594:	f7fb ff2e 	bl	800d3f4 <st_word>
					fs->wflag = 1;
 8011598:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801159a:	2201      	movs	r2, #1
 801159c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801159e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80115a0:	4618      	mov	r0, r3
 80115a2:	f7fc fa81 	bl	800daa8 <sync_fs>
 80115a6:	4603      	mov	r3, r0
 80115a8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					fp->flag &= (BYTE)~FA_MODIFIED;
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80115b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80115b6:	b2da      	uxtb	r2, r3
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80115be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80115c0:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 80115c4:	4611      	mov	r1, r2
 80115c6:	4618      	mov	r0, r3
 80115c8:	f7fc f875 	bl	800d6b6 <unlock_fs>
 80115cc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 80115d0:	4618      	mov	r0, r3
 80115d2:	3774      	adds	r7, #116	; 0x74
 80115d4:	46bd      	mov	sp, r7
 80115d6:	bd90      	pop	{r4, r7, pc}

080115d8 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80115d8:	b580      	push	{r7, lr}
 80115da:	b084      	sub	sp, #16
 80115dc:	af00      	add	r7, sp, #0
 80115de:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80115e0:	6878      	ldr	r0, [r7, #4]
 80115e2:	f7ff feb2 	bl	801134a <f_sync>
 80115e6:	4603      	mov	r3, r0
 80115e8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80115ea:	7bfb      	ldrb	r3, [r7, #15]
 80115ec:	2b00      	cmp	r3, #0
 80115ee:	d11d      	bne.n	801162c <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	f107 0208 	add.w	r2, r7, #8
 80115f6:	4611      	mov	r1, r2
 80115f8:	4618      	mov	r0, r3
 80115fa:	f7ff f919 	bl	8010830 <validate>
 80115fe:	4603      	mov	r3, r0
 8011600:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8011602:	7bfb      	ldrb	r3, [r7, #15]
 8011604:	2b00      	cmp	r3, #0
 8011606:	d111      	bne.n	801162c <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801160c:	4618      	mov	r0, r3
 801160e:	f7fc f979 	bl	800d904 <dec_lock>
 8011612:	4603      	mov	r3, r0
 8011614:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8011616:	7bfb      	ldrb	r3, [r7, #15]
 8011618:	2b00      	cmp	r3, #0
 801161a:	d102      	bne.n	8011622 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801161c:	687b      	ldr	r3, [r7, #4]
 801161e:	2200      	movs	r2, #0
 8011620:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 8011622:	68bb      	ldr	r3, [r7, #8]
 8011624:	2100      	movs	r1, #0
 8011626:	4618      	mov	r0, r3
 8011628:	f7fc f845 	bl	800d6b6 <unlock_fs>
#endif
		}
	}
	return res;
 801162c:	7bfb      	ldrb	r3, [r7, #15]
}
 801162e:	4618      	mov	r0, r3
 8011630:	3710      	adds	r7, #16
 8011632:	46bd      	mov	sp, r7
 8011634:	bd80      	pop	{r7, pc}
	...

08011638 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8011638:	b480      	push	{r7}
 801163a:	b087      	sub	sp, #28
 801163c:	af00      	add	r7, sp, #0
 801163e:	60f8      	str	r0, [r7, #12]
 8011640:	60b9      	str	r1, [r7, #8]
 8011642:	4613      	mov	r3, r2
 8011644:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8011646:	2301      	movs	r3, #1
 8011648:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801164a:	2300      	movs	r3, #0
 801164c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801164e:	4b1f      	ldr	r3, [pc, #124]	; (80116cc <FATFS_LinkDriverEx+0x94>)
 8011650:	7a5b      	ldrb	r3, [r3, #9]
 8011652:	b2db      	uxtb	r3, r3
 8011654:	2b00      	cmp	r3, #0
 8011656:	d131      	bne.n	80116bc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8011658:	4b1c      	ldr	r3, [pc, #112]	; (80116cc <FATFS_LinkDriverEx+0x94>)
 801165a:	7a5b      	ldrb	r3, [r3, #9]
 801165c:	b2db      	uxtb	r3, r3
 801165e:	461a      	mov	r2, r3
 8011660:	4b1a      	ldr	r3, [pc, #104]	; (80116cc <FATFS_LinkDriverEx+0x94>)
 8011662:	2100      	movs	r1, #0
 8011664:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8011666:	4b19      	ldr	r3, [pc, #100]	; (80116cc <FATFS_LinkDriverEx+0x94>)
 8011668:	7a5b      	ldrb	r3, [r3, #9]
 801166a:	b2db      	uxtb	r3, r3
 801166c:	4a17      	ldr	r2, [pc, #92]	; (80116cc <FATFS_LinkDriverEx+0x94>)
 801166e:	009b      	lsls	r3, r3, #2
 8011670:	4413      	add	r3, r2
 8011672:	68fa      	ldr	r2, [r7, #12]
 8011674:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8011676:	4b15      	ldr	r3, [pc, #84]	; (80116cc <FATFS_LinkDriverEx+0x94>)
 8011678:	7a5b      	ldrb	r3, [r3, #9]
 801167a:	b2db      	uxtb	r3, r3
 801167c:	461a      	mov	r2, r3
 801167e:	4b13      	ldr	r3, [pc, #76]	; (80116cc <FATFS_LinkDriverEx+0x94>)
 8011680:	4413      	add	r3, r2
 8011682:	79fa      	ldrb	r2, [r7, #7]
 8011684:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8011686:	4b11      	ldr	r3, [pc, #68]	; (80116cc <FATFS_LinkDriverEx+0x94>)
 8011688:	7a5b      	ldrb	r3, [r3, #9]
 801168a:	b2db      	uxtb	r3, r3
 801168c:	1c5a      	adds	r2, r3, #1
 801168e:	b2d1      	uxtb	r1, r2
 8011690:	4a0e      	ldr	r2, [pc, #56]	; (80116cc <FATFS_LinkDriverEx+0x94>)
 8011692:	7251      	strb	r1, [r2, #9]
 8011694:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8011696:	7dbb      	ldrb	r3, [r7, #22]
 8011698:	3330      	adds	r3, #48	; 0x30
 801169a:	b2da      	uxtb	r2, r3
 801169c:	68bb      	ldr	r3, [r7, #8]
 801169e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80116a0:	68bb      	ldr	r3, [r7, #8]
 80116a2:	3301      	adds	r3, #1
 80116a4:	223a      	movs	r2, #58	; 0x3a
 80116a6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80116a8:	68bb      	ldr	r3, [r7, #8]
 80116aa:	3302      	adds	r3, #2
 80116ac:	222f      	movs	r2, #47	; 0x2f
 80116ae:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80116b0:	68bb      	ldr	r3, [r7, #8]
 80116b2:	3303      	adds	r3, #3
 80116b4:	2200      	movs	r2, #0
 80116b6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80116b8:	2300      	movs	r3, #0
 80116ba:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80116bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80116be:	4618      	mov	r0, r3
 80116c0:	371c      	adds	r7, #28
 80116c2:	46bd      	mov	sp, r7
 80116c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116c8:	4770      	bx	lr
 80116ca:	bf00      	nop
 80116cc:	200002c4 	.word	0x200002c4

080116d0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80116d0:	b580      	push	{r7, lr}
 80116d2:	b082      	sub	sp, #8
 80116d4:	af00      	add	r7, sp, #0
 80116d6:	6078      	str	r0, [r7, #4]
 80116d8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80116da:	2200      	movs	r2, #0
 80116dc:	6839      	ldr	r1, [r7, #0]
 80116de:	6878      	ldr	r0, [r7, #4]
 80116e0:	f7ff ffaa 	bl	8011638 <FATFS_LinkDriverEx>
 80116e4:	4603      	mov	r3, r0
}
 80116e6:	4618      	mov	r0, r3
 80116e8:	3708      	adds	r7, #8
 80116ea:	46bd      	mov	sp, r7
 80116ec:	bd80      	pop	{r7, pc}
	...

080116f0 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 80116f0:	b480      	push	{r7}
 80116f2:	b085      	sub	sp, #20
 80116f4:	af00      	add	r7, sp, #0
 80116f6:	4603      	mov	r3, r0
 80116f8:	6039      	str	r1, [r7, #0]
 80116fa:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80116fc:	88fb      	ldrh	r3, [r7, #6]
 80116fe:	2b7f      	cmp	r3, #127	; 0x7f
 8011700:	d802      	bhi.n	8011708 <ff_convert+0x18>
		c = chr;
 8011702:	88fb      	ldrh	r3, [r7, #6]
 8011704:	81fb      	strh	r3, [r7, #14]
 8011706:	e025      	b.n	8011754 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8011708:	683b      	ldr	r3, [r7, #0]
 801170a:	2b00      	cmp	r3, #0
 801170c:	d00b      	beq.n	8011726 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 801170e:	88fb      	ldrh	r3, [r7, #6]
 8011710:	2bff      	cmp	r3, #255	; 0xff
 8011712:	d805      	bhi.n	8011720 <ff_convert+0x30>
 8011714:	88fb      	ldrh	r3, [r7, #6]
 8011716:	3b80      	subs	r3, #128	; 0x80
 8011718:	4a12      	ldr	r2, [pc, #72]	; (8011764 <ff_convert+0x74>)
 801171a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801171e:	e000      	b.n	8011722 <ff_convert+0x32>
 8011720:	2300      	movs	r3, #0
 8011722:	81fb      	strh	r3, [r7, #14]
 8011724:	e016      	b.n	8011754 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8011726:	2300      	movs	r3, #0
 8011728:	81fb      	strh	r3, [r7, #14]
 801172a:	e009      	b.n	8011740 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 801172c:	89fb      	ldrh	r3, [r7, #14]
 801172e:	4a0d      	ldr	r2, [pc, #52]	; (8011764 <ff_convert+0x74>)
 8011730:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011734:	88fa      	ldrh	r2, [r7, #6]
 8011736:	429a      	cmp	r2, r3
 8011738:	d006      	beq.n	8011748 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 801173a:	89fb      	ldrh	r3, [r7, #14]
 801173c:	3301      	adds	r3, #1
 801173e:	81fb      	strh	r3, [r7, #14]
 8011740:	89fb      	ldrh	r3, [r7, #14]
 8011742:	2b7f      	cmp	r3, #127	; 0x7f
 8011744:	d9f2      	bls.n	801172c <ff_convert+0x3c>
 8011746:	e000      	b.n	801174a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8011748:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 801174a:	89fb      	ldrh	r3, [r7, #14]
 801174c:	3380      	adds	r3, #128	; 0x80
 801174e:	b29b      	uxth	r3, r3
 8011750:	b2db      	uxtb	r3, r3
 8011752:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8011754:	89fb      	ldrh	r3, [r7, #14]
}
 8011756:	4618      	mov	r0, r3
 8011758:	3714      	adds	r7, #20
 801175a:	46bd      	mov	sp, r7
 801175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011760:	4770      	bx	lr
 8011762:	bf00      	nop
 8011764:	080161e0 	.word	0x080161e0

08011768 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8011768:	b480      	push	{r7}
 801176a:	b087      	sub	sp, #28
 801176c:	af00      	add	r7, sp, #0
 801176e:	4603      	mov	r3, r0
 8011770:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8011772:	88fb      	ldrh	r3, [r7, #6]
 8011774:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011778:	d201      	bcs.n	801177e <ff_wtoupper+0x16>
 801177a:	4b3e      	ldr	r3, [pc, #248]	; (8011874 <ff_wtoupper+0x10c>)
 801177c:	e000      	b.n	8011780 <ff_wtoupper+0x18>
 801177e:	4b3e      	ldr	r3, [pc, #248]	; (8011878 <ff_wtoupper+0x110>)
 8011780:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8011782:	697b      	ldr	r3, [r7, #20]
 8011784:	1c9a      	adds	r2, r3, #2
 8011786:	617a      	str	r2, [r7, #20]
 8011788:	881b      	ldrh	r3, [r3, #0]
 801178a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 801178c:	8a7b      	ldrh	r3, [r7, #18]
 801178e:	2b00      	cmp	r3, #0
 8011790:	d068      	beq.n	8011864 <ff_wtoupper+0xfc>
 8011792:	88fa      	ldrh	r2, [r7, #6]
 8011794:	8a7b      	ldrh	r3, [r7, #18]
 8011796:	429a      	cmp	r2, r3
 8011798:	d364      	bcc.n	8011864 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 801179a:	697b      	ldr	r3, [r7, #20]
 801179c:	1c9a      	adds	r2, r3, #2
 801179e:	617a      	str	r2, [r7, #20]
 80117a0:	881b      	ldrh	r3, [r3, #0]
 80117a2:	823b      	strh	r3, [r7, #16]
 80117a4:	8a3b      	ldrh	r3, [r7, #16]
 80117a6:	0a1b      	lsrs	r3, r3, #8
 80117a8:	81fb      	strh	r3, [r7, #14]
 80117aa:	8a3b      	ldrh	r3, [r7, #16]
 80117ac:	b2db      	uxtb	r3, r3
 80117ae:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80117b0:	88fa      	ldrh	r2, [r7, #6]
 80117b2:	8a79      	ldrh	r1, [r7, #18]
 80117b4:	8a3b      	ldrh	r3, [r7, #16]
 80117b6:	440b      	add	r3, r1
 80117b8:	429a      	cmp	r2, r3
 80117ba:	da49      	bge.n	8011850 <ff_wtoupper+0xe8>
			switch (cmd) {
 80117bc:	89fb      	ldrh	r3, [r7, #14]
 80117be:	2b08      	cmp	r3, #8
 80117c0:	d84f      	bhi.n	8011862 <ff_wtoupper+0xfa>
 80117c2:	a201      	add	r2, pc, #4	; (adr r2, 80117c8 <ff_wtoupper+0x60>)
 80117c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80117c8:	080117ed 	.word	0x080117ed
 80117cc:	080117ff 	.word	0x080117ff
 80117d0:	08011815 	.word	0x08011815
 80117d4:	0801181d 	.word	0x0801181d
 80117d8:	08011825 	.word	0x08011825
 80117dc:	0801182d 	.word	0x0801182d
 80117e0:	08011835 	.word	0x08011835
 80117e4:	0801183d 	.word	0x0801183d
 80117e8:	08011845 	.word	0x08011845
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 80117ec:	88fa      	ldrh	r2, [r7, #6]
 80117ee:	8a7b      	ldrh	r3, [r7, #18]
 80117f0:	1ad3      	subs	r3, r2, r3
 80117f2:	005b      	lsls	r3, r3, #1
 80117f4:	697a      	ldr	r2, [r7, #20]
 80117f6:	4413      	add	r3, r2
 80117f8:	881b      	ldrh	r3, [r3, #0]
 80117fa:	80fb      	strh	r3, [r7, #6]
 80117fc:	e027      	b.n	801184e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 80117fe:	88fa      	ldrh	r2, [r7, #6]
 8011800:	8a7b      	ldrh	r3, [r7, #18]
 8011802:	1ad3      	subs	r3, r2, r3
 8011804:	b29b      	uxth	r3, r3
 8011806:	f003 0301 	and.w	r3, r3, #1
 801180a:	b29b      	uxth	r3, r3
 801180c:	88fa      	ldrh	r2, [r7, #6]
 801180e:	1ad3      	subs	r3, r2, r3
 8011810:	80fb      	strh	r3, [r7, #6]
 8011812:	e01c      	b.n	801184e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8011814:	88fb      	ldrh	r3, [r7, #6]
 8011816:	3b10      	subs	r3, #16
 8011818:	80fb      	strh	r3, [r7, #6]
 801181a:	e018      	b.n	801184e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 801181c:	88fb      	ldrh	r3, [r7, #6]
 801181e:	3b20      	subs	r3, #32
 8011820:	80fb      	strh	r3, [r7, #6]
 8011822:	e014      	b.n	801184e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8011824:	88fb      	ldrh	r3, [r7, #6]
 8011826:	3b30      	subs	r3, #48	; 0x30
 8011828:	80fb      	strh	r3, [r7, #6]
 801182a:	e010      	b.n	801184e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 801182c:	88fb      	ldrh	r3, [r7, #6]
 801182e:	3b1a      	subs	r3, #26
 8011830:	80fb      	strh	r3, [r7, #6]
 8011832:	e00c      	b.n	801184e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8011834:	88fb      	ldrh	r3, [r7, #6]
 8011836:	3308      	adds	r3, #8
 8011838:	80fb      	strh	r3, [r7, #6]
 801183a:	e008      	b.n	801184e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 801183c:	88fb      	ldrh	r3, [r7, #6]
 801183e:	3b50      	subs	r3, #80	; 0x50
 8011840:	80fb      	strh	r3, [r7, #6]
 8011842:	e004      	b.n	801184e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8011844:	88fb      	ldrh	r3, [r7, #6]
 8011846:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 801184a:	80fb      	strh	r3, [r7, #6]
 801184c:	bf00      	nop
			}
			break;
 801184e:	e008      	b.n	8011862 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8011850:	89fb      	ldrh	r3, [r7, #14]
 8011852:	2b00      	cmp	r3, #0
 8011854:	d195      	bne.n	8011782 <ff_wtoupper+0x1a>
 8011856:	8a3b      	ldrh	r3, [r7, #16]
 8011858:	005b      	lsls	r3, r3, #1
 801185a:	697a      	ldr	r2, [r7, #20]
 801185c:	4413      	add	r3, r2
 801185e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8011860:	e78f      	b.n	8011782 <ff_wtoupper+0x1a>
			break;
 8011862:	bf00      	nop
	}

	return chr;
 8011864:	88fb      	ldrh	r3, [r7, #6]
}
 8011866:	4618      	mov	r0, r3
 8011868:	371c      	adds	r7, #28
 801186a:	46bd      	mov	sp, r7
 801186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011870:	4770      	bx	lr
 8011872:	bf00      	nop
 8011874:	080162e0 	.word	0x080162e0
 8011878:	080164d4 	.word	0x080164d4

0801187c <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 801187c:	b580      	push	{r7, lr}
 801187e:	b084      	sub	sp, #16
 8011880:	af00      	add	r7, sp, #0
 8011882:	4603      	mov	r3, r0
 8011884:	6039      	str	r1, [r7, #0]
 8011886:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 8011888:	2200      	movs	r2, #0
 801188a:	2101      	movs	r1, #1
 801188c:	2001      	movs	r0, #1
 801188e:	f000 f9e3 	bl	8011c58 <osSemaphoreNew>
 8011892:	4602      	mov	r2, r0
 8011894:	683b      	ldr	r3, [r7, #0]
 8011896:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 8011898:	683b      	ldr	r3, [r7, #0]
 801189a:	681b      	ldr	r3, [r3, #0]
 801189c:	2b00      	cmp	r3, #0
 801189e:	bf14      	ite	ne
 80118a0:	2301      	movne	r3, #1
 80118a2:	2300      	moveq	r3, #0
 80118a4:	b2db      	uxtb	r3, r3
 80118a6:	60fb      	str	r3, [r7, #12]

    return ret;
 80118a8:	68fb      	ldr	r3, [r7, #12]
}
 80118aa:	4618      	mov	r0, r3
 80118ac:	3710      	adds	r7, #16
 80118ae:	46bd      	mov	sp, r7
 80118b0:	bd80      	pop	{r7, pc}

080118b2 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 80118b2:	b580      	push	{r7, lr}
 80118b4:	b082      	sub	sp, #8
 80118b6:	af00      	add	r7, sp, #0
 80118b8:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 80118ba:	6878      	ldr	r0, [r7, #4]
 80118bc:	f000 fb28 	bl	8011f10 <osSemaphoreDelete>
#endif
    return 1;
 80118c0:	2301      	movs	r3, #1
}
 80118c2:	4618      	mov	r0, r3
 80118c4:	3708      	adds	r7, #8
 80118c6:	46bd      	mov	sp, r7
 80118c8:	bd80      	pop	{r7, pc}

080118ca <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 80118ca:	b580      	push	{r7, lr}
 80118cc:	b084      	sub	sp, #16
 80118ce:	af00      	add	r7, sp, #0
 80118d0:	6078      	str	r0, [r7, #4]
  int ret = 0;
 80118d2:	2300      	movs	r3, #0
 80118d4:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 80118d6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80118da:	6878      	ldr	r0, [r7, #4]
 80118dc:	f000 fa5a 	bl	8011d94 <osSemaphoreAcquire>
 80118e0:	4603      	mov	r3, r0
 80118e2:	2b00      	cmp	r3, #0
 80118e4:	d101      	bne.n	80118ea <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 80118e6:	2301      	movs	r3, #1
 80118e8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80118ea:	68fb      	ldr	r3, [r7, #12]
}
 80118ec:	4618      	mov	r0, r3
 80118ee:	3710      	adds	r7, #16
 80118f0:	46bd      	mov	sp, r7
 80118f2:	bd80      	pop	{r7, pc}

080118f4 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 80118f4:	b580      	push	{r7, lr}
 80118f6:	b082      	sub	sp, #8
 80118f8:	af00      	add	r7, sp, #0
 80118fa:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 80118fc:	6878      	ldr	r0, [r7, #4]
 80118fe:	f000 faaf 	bl	8011e60 <osSemaphoreRelease>
#endif
}
 8011902:	bf00      	nop
 8011904:	3708      	adds	r7, #8
 8011906:	46bd      	mov	sp, r7
 8011908:	bd80      	pop	{r7, pc}

0801190a <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 801190a:	b580      	push	{r7, lr}
 801190c:	b082      	sub	sp, #8
 801190e:	af00      	add	r7, sp, #0
 8011910:	6078      	str	r0, [r7, #4]
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 8011912:	6878      	ldr	r0, [r7, #4]
 8011914:	f003 fb52 	bl	8014fbc <pvPortMalloc>
 8011918:	4603      	mov	r3, r0
}
 801191a:	4618      	mov	r0, r3
 801191c:	3708      	adds	r7, #8
 801191e:	46bd      	mov	sp, r7
 8011920:	bd80      	pop	{r7, pc}

08011922 <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 8011922:	b580      	push	{r7, lr}
 8011924:	b082      	sub	sp, #8
 8011926:	af00      	add	r7, sp, #0
 8011928:	6078      	str	r0, [r7, #4]
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 801192a:	6878      	ldr	r0, [r7, #4]
 801192c:	f003 fc0e 	bl	801514c <vPortFree>
}
 8011930:	bf00      	nop
 8011932:	3708      	adds	r7, #8
 8011934:	46bd      	mov	sp, r7
 8011936:	bd80      	pop	{r7, pc}

08011938 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8011938:	b480      	push	{r7}
 801193a:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 801193c:	bf00      	nop
 801193e:	46bd      	mov	sp, r7
 8011940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011944:	4770      	bx	lr
	...

08011948 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8011948:	b480      	push	{r7}
 801194a:	b085      	sub	sp, #20
 801194c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801194e:	f3ef 8305 	mrs	r3, IPSR
 8011952:	60bb      	str	r3, [r7, #8]
  return(result);
 8011954:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8011956:	2b00      	cmp	r3, #0
 8011958:	d10f      	bne.n	801197a <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801195a:	f3ef 8310 	mrs	r3, PRIMASK
 801195e:	607b      	str	r3, [r7, #4]
  return(result);
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	2b00      	cmp	r3, #0
 8011964:	d105      	bne.n	8011972 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011966:	f3ef 8311 	mrs	r3, BASEPRI
 801196a:	603b      	str	r3, [r7, #0]
  return(result);
 801196c:	683b      	ldr	r3, [r7, #0]
 801196e:	2b00      	cmp	r3, #0
 8011970:	d007      	beq.n	8011982 <osKernelInitialize+0x3a>
 8011972:	4b0e      	ldr	r3, [pc, #56]	; (80119ac <osKernelInitialize+0x64>)
 8011974:	681b      	ldr	r3, [r3, #0]
 8011976:	2b02      	cmp	r3, #2
 8011978:	d103      	bne.n	8011982 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 801197a:	f06f 0305 	mvn.w	r3, #5
 801197e:	60fb      	str	r3, [r7, #12]
 8011980:	e00c      	b.n	801199c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8011982:	4b0a      	ldr	r3, [pc, #40]	; (80119ac <osKernelInitialize+0x64>)
 8011984:	681b      	ldr	r3, [r3, #0]
 8011986:	2b00      	cmp	r3, #0
 8011988:	d105      	bne.n	8011996 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 801198a:	4b08      	ldr	r3, [pc, #32]	; (80119ac <osKernelInitialize+0x64>)
 801198c:	2201      	movs	r2, #1
 801198e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8011990:	2300      	movs	r3, #0
 8011992:	60fb      	str	r3, [r7, #12]
 8011994:	e002      	b.n	801199c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8011996:	f04f 33ff 	mov.w	r3, #4294967295
 801199a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 801199c:	68fb      	ldr	r3, [r7, #12]
}
 801199e:	4618      	mov	r0, r3
 80119a0:	3714      	adds	r7, #20
 80119a2:	46bd      	mov	sp, r7
 80119a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119a8:	4770      	bx	lr
 80119aa:	bf00      	nop
 80119ac:	200002d0 	.word	0x200002d0

080119b0 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 80119b0:	b580      	push	{r7, lr}
 80119b2:	b082      	sub	sp, #8
 80119b4:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 80119b6:	f002 fba1 	bl	80140fc <xTaskGetSchedulerState>
 80119ba:	4603      	mov	r3, r0
 80119bc:	2b00      	cmp	r3, #0
 80119be:	d004      	beq.n	80119ca <osKernelGetState+0x1a>
 80119c0:	2b02      	cmp	r3, #2
 80119c2:	d105      	bne.n	80119d0 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 80119c4:	2302      	movs	r3, #2
 80119c6:	607b      	str	r3, [r7, #4]
      break;
 80119c8:	e00c      	b.n	80119e4 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 80119ca:	2303      	movs	r3, #3
 80119cc:	607b      	str	r3, [r7, #4]
      break;
 80119ce:	e009      	b.n	80119e4 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 80119d0:	4b07      	ldr	r3, [pc, #28]	; (80119f0 <osKernelGetState+0x40>)
 80119d2:	681b      	ldr	r3, [r3, #0]
 80119d4:	2b01      	cmp	r3, #1
 80119d6:	d102      	bne.n	80119de <osKernelGetState+0x2e>
        state = osKernelReady;
 80119d8:	2301      	movs	r3, #1
 80119da:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 80119dc:	e001      	b.n	80119e2 <osKernelGetState+0x32>
        state = osKernelInactive;
 80119de:	2300      	movs	r3, #0
 80119e0:	607b      	str	r3, [r7, #4]
      break;
 80119e2:	bf00      	nop
  }

  return (state);
 80119e4:	687b      	ldr	r3, [r7, #4]
}
 80119e6:	4618      	mov	r0, r3
 80119e8:	3708      	adds	r7, #8
 80119ea:	46bd      	mov	sp, r7
 80119ec:	bd80      	pop	{r7, pc}
 80119ee:	bf00      	nop
 80119f0:	200002d0 	.word	0x200002d0

080119f4 <osKernelStart>:

osStatus_t osKernelStart (void) {
 80119f4:	b580      	push	{r7, lr}
 80119f6:	b084      	sub	sp, #16
 80119f8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80119fa:	f3ef 8305 	mrs	r3, IPSR
 80119fe:	60bb      	str	r3, [r7, #8]
  return(result);
 8011a00:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8011a02:	2b00      	cmp	r3, #0
 8011a04:	d10f      	bne.n	8011a26 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011a06:	f3ef 8310 	mrs	r3, PRIMASK
 8011a0a:	607b      	str	r3, [r7, #4]
  return(result);
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	2b00      	cmp	r3, #0
 8011a10:	d105      	bne.n	8011a1e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011a12:	f3ef 8311 	mrs	r3, BASEPRI
 8011a16:	603b      	str	r3, [r7, #0]
  return(result);
 8011a18:	683b      	ldr	r3, [r7, #0]
 8011a1a:	2b00      	cmp	r3, #0
 8011a1c:	d007      	beq.n	8011a2e <osKernelStart+0x3a>
 8011a1e:	4b0f      	ldr	r3, [pc, #60]	; (8011a5c <osKernelStart+0x68>)
 8011a20:	681b      	ldr	r3, [r3, #0]
 8011a22:	2b02      	cmp	r3, #2
 8011a24:	d103      	bne.n	8011a2e <osKernelStart+0x3a>
    stat = osErrorISR;
 8011a26:	f06f 0305 	mvn.w	r3, #5
 8011a2a:	60fb      	str	r3, [r7, #12]
 8011a2c:	e010      	b.n	8011a50 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8011a2e:	4b0b      	ldr	r3, [pc, #44]	; (8011a5c <osKernelStart+0x68>)
 8011a30:	681b      	ldr	r3, [r3, #0]
 8011a32:	2b01      	cmp	r3, #1
 8011a34:	d109      	bne.n	8011a4a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8011a36:	f7ff ff7f 	bl	8011938 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8011a3a:	4b08      	ldr	r3, [pc, #32]	; (8011a5c <osKernelStart+0x68>)
 8011a3c:	2202      	movs	r2, #2
 8011a3e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8011a40:	f001 fefe 	bl	8013840 <vTaskStartScheduler>
      stat = osOK;
 8011a44:	2300      	movs	r3, #0
 8011a46:	60fb      	str	r3, [r7, #12]
 8011a48:	e002      	b.n	8011a50 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8011a4a:	f04f 33ff 	mov.w	r3, #4294967295
 8011a4e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8011a50:	68fb      	ldr	r3, [r7, #12]
}
 8011a52:	4618      	mov	r0, r3
 8011a54:	3710      	adds	r7, #16
 8011a56:	46bd      	mov	sp, r7
 8011a58:	bd80      	pop	{r7, pc}
 8011a5a:	bf00      	nop
 8011a5c:	200002d0 	.word	0x200002d0

08011a60 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8011a60:	b580      	push	{r7, lr}
 8011a62:	b084      	sub	sp, #16
 8011a64:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011a66:	f3ef 8305 	mrs	r3, IPSR
 8011a6a:	60bb      	str	r3, [r7, #8]
  return(result);
 8011a6c:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 8011a6e:	2b00      	cmp	r3, #0
 8011a70:	d10f      	bne.n	8011a92 <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011a72:	f3ef 8310 	mrs	r3, PRIMASK
 8011a76:	607b      	str	r3, [r7, #4]
  return(result);
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	2b00      	cmp	r3, #0
 8011a7c:	d105      	bne.n	8011a8a <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011a7e:	f3ef 8311 	mrs	r3, BASEPRI
 8011a82:	603b      	str	r3, [r7, #0]
  return(result);
 8011a84:	683b      	ldr	r3, [r7, #0]
 8011a86:	2b00      	cmp	r3, #0
 8011a88:	d007      	beq.n	8011a9a <osKernelGetTickCount+0x3a>
 8011a8a:	4b08      	ldr	r3, [pc, #32]	; (8011aac <osKernelGetTickCount+0x4c>)
 8011a8c:	681b      	ldr	r3, [r3, #0]
 8011a8e:	2b02      	cmp	r3, #2
 8011a90:	d103      	bne.n	8011a9a <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 8011a92:	f001 fff9 	bl	8013a88 <xTaskGetTickCountFromISR>
 8011a96:	60f8      	str	r0, [r7, #12]
 8011a98:	e002      	b.n	8011aa0 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 8011a9a:	f001 ffe5 	bl	8013a68 <xTaskGetTickCount>
 8011a9e:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 8011aa0:	68fb      	ldr	r3, [r7, #12]
}
 8011aa2:	4618      	mov	r0, r3
 8011aa4:	3710      	adds	r7, #16
 8011aa6:	46bd      	mov	sp, r7
 8011aa8:	bd80      	pop	{r7, pc}
 8011aaa:	bf00      	nop
 8011aac:	200002d0 	.word	0x200002d0

08011ab0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8011ab0:	b580      	push	{r7, lr}
 8011ab2:	b090      	sub	sp, #64	; 0x40
 8011ab4:	af04      	add	r7, sp, #16
 8011ab6:	60f8      	str	r0, [r7, #12]
 8011ab8:	60b9      	str	r1, [r7, #8]
 8011aba:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8011abc:	2300      	movs	r3, #0
 8011abe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011ac0:	f3ef 8305 	mrs	r3, IPSR
 8011ac4:	61fb      	str	r3, [r7, #28]
  return(result);
 8011ac6:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	f040 808f 	bne.w	8011bec <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011ace:	f3ef 8310 	mrs	r3, PRIMASK
 8011ad2:	61bb      	str	r3, [r7, #24]
  return(result);
 8011ad4:	69bb      	ldr	r3, [r7, #24]
 8011ad6:	2b00      	cmp	r3, #0
 8011ad8:	d105      	bne.n	8011ae6 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011ada:	f3ef 8311 	mrs	r3, BASEPRI
 8011ade:	617b      	str	r3, [r7, #20]
  return(result);
 8011ae0:	697b      	ldr	r3, [r7, #20]
 8011ae2:	2b00      	cmp	r3, #0
 8011ae4:	d003      	beq.n	8011aee <osThreadNew+0x3e>
 8011ae6:	4b44      	ldr	r3, [pc, #272]	; (8011bf8 <osThreadNew+0x148>)
 8011ae8:	681b      	ldr	r3, [r3, #0]
 8011aea:	2b02      	cmp	r3, #2
 8011aec:	d07e      	beq.n	8011bec <osThreadNew+0x13c>
 8011aee:	68fb      	ldr	r3, [r7, #12]
 8011af0:	2b00      	cmp	r3, #0
 8011af2:	d07b      	beq.n	8011bec <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8011af4:	2380      	movs	r3, #128	; 0x80
 8011af6:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8011af8:	2318      	movs	r3, #24
 8011afa:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8011afc:	2300      	movs	r3, #0
 8011afe:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8011b00:	f04f 33ff 	mov.w	r3, #4294967295
 8011b04:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	2b00      	cmp	r3, #0
 8011b0a:	d045      	beq.n	8011b98 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	681b      	ldr	r3, [r3, #0]
 8011b10:	2b00      	cmp	r3, #0
 8011b12:	d002      	beq.n	8011b1a <osThreadNew+0x6a>
        name = attr->name;
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	681b      	ldr	r3, [r3, #0]
 8011b18:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	699b      	ldr	r3, [r3, #24]
 8011b1e:	2b00      	cmp	r3, #0
 8011b20:	d002      	beq.n	8011b28 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	699b      	ldr	r3, [r3, #24]
 8011b26:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8011b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b2a:	2b00      	cmp	r3, #0
 8011b2c:	d008      	beq.n	8011b40 <osThreadNew+0x90>
 8011b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b30:	2b38      	cmp	r3, #56	; 0x38
 8011b32:	d805      	bhi.n	8011b40 <osThreadNew+0x90>
 8011b34:	687b      	ldr	r3, [r7, #4]
 8011b36:	685b      	ldr	r3, [r3, #4]
 8011b38:	f003 0301 	and.w	r3, r3, #1
 8011b3c:	2b00      	cmp	r3, #0
 8011b3e:	d001      	beq.n	8011b44 <osThreadNew+0x94>
        return (NULL);
 8011b40:	2300      	movs	r3, #0
 8011b42:	e054      	b.n	8011bee <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8011b44:	687b      	ldr	r3, [r7, #4]
 8011b46:	695b      	ldr	r3, [r3, #20]
 8011b48:	2b00      	cmp	r3, #0
 8011b4a:	d003      	beq.n	8011b54 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	695b      	ldr	r3, [r3, #20]
 8011b50:	089b      	lsrs	r3, r3, #2
 8011b52:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	689b      	ldr	r3, [r3, #8]
 8011b58:	2b00      	cmp	r3, #0
 8011b5a:	d00e      	beq.n	8011b7a <osThreadNew+0xca>
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	68db      	ldr	r3, [r3, #12]
 8011b60:	2b5b      	cmp	r3, #91	; 0x5b
 8011b62:	d90a      	bls.n	8011b7a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8011b64:	687b      	ldr	r3, [r7, #4]
 8011b66:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8011b68:	2b00      	cmp	r3, #0
 8011b6a:	d006      	beq.n	8011b7a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	695b      	ldr	r3, [r3, #20]
 8011b70:	2b00      	cmp	r3, #0
 8011b72:	d002      	beq.n	8011b7a <osThreadNew+0xca>
        mem = 1;
 8011b74:	2301      	movs	r3, #1
 8011b76:	623b      	str	r3, [r7, #32]
 8011b78:	e010      	b.n	8011b9c <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	689b      	ldr	r3, [r3, #8]
 8011b7e:	2b00      	cmp	r3, #0
 8011b80:	d10c      	bne.n	8011b9c <osThreadNew+0xec>
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	68db      	ldr	r3, [r3, #12]
 8011b86:	2b00      	cmp	r3, #0
 8011b88:	d108      	bne.n	8011b9c <osThreadNew+0xec>
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	691b      	ldr	r3, [r3, #16]
 8011b8e:	2b00      	cmp	r3, #0
 8011b90:	d104      	bne.n	8011b9c <osThreadNew+0xec>
          mem = 0;
 8011b92:	2300      	movs	r3, #0
 8011b94:	623b      	str	r3, [r7, #32]
 8011b96:	e001      	b.n	8011b9c <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8011b98:	2300      	movs	r3, #0
 8011b9a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8011b9c:	6a3b      	ldr	r3, [r7, #32]
 8011b9e:	2b01      	cmp	r3, #1
 8011ba0:	d110      	bne.n	8011bc4 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8011ba6:	687a      	ldr	r2, [r7, #4]
 8011ba8:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8011baa:	9202      	str	r2, [sp, #8]
 8011bac:	9301      	str	r3, [sp, #4]
 8011bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bb0:	9300      	str	r3, [sp, #0]
 8011bb2:	68bb      	ldr	r3, [r7, #8]
 8011bb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011bb6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011bb8:	68f8      	ldr	r0, [r7, #12]
 8011bba:	f001 fc65 	bl	8013488 <xTaskCreateStatic>
 8011bbe:	4603      	mov	r3, r0
 8011bc0:	613b      	str	r3, [r7, #16]
 8011bc2:	e013      	b.n	8011bec <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8011bc4:	6a3b      	ldr	r3, [r7, #32]
 8011bc6:	2b00      	cmp	r3, #0
 8011bc8:	d110      	bne.n	8011bec <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8011bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011bcc:	b29a      	uxth	r2, r3
 8011bce:	f107 0310 	add.w	r3, r7, #16
 8011bd2:	9301      	str	r3, [sp, #4]
 8011bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bd6:	9300      	str	r3, [sp, #0]
 8011bd8:	68bb      	ldr	r3, [r7, #8]
 8011bda:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011bdc:	68f8      	ldr	r0, [r7, #12]
 8011bde:	f001 fcb3 	bl	8013548 <xTaskCreate>
 8011be2:	4603      	mov	r3, r0
 8011be4:	2b01      	cmp	r3, #1
 8011be6:	d001      	beq.n	8011bec <osThreadNew+0x13c>
          hTask = NULL;
 8011be8:	2300      	movs	r3, #0
 8011bea:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8011bec:	693b      	ldr	r3, [r7, #16]
}
 8011bee:	4618      	mov	r0, r3
 8011bf0:	3730      	adds	r7, #48	; 0x30
 8011bf2:	46bd      	mov	sp, r7
 8011bf4:	bd80      	pop	{r7, pc}
 8011bf6:	bf00      	nop
 8011bf8:	200002d0 	.word	0x200002d0

08011bfc <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8011bfc:	b580      	push	{r7, lr}
 8011bfe:	b086      	sub	sp, #24
 8011c00:	af00      	add	r7, sp, #0
 8011c02:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011c04:	f3ef 8305 	mrs	r3, IPSR
 8011c08:	613b      	str	r3, [r7, #16]
  return(result);
 8011c0a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8011c0c:	2b00      	cmp	r3, #0
 8011c0e:	d10f      	bne.n	8011c30 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011c10:	f3ef 8310 	mrs	r3, PRIMASK
 8011c14:	60fb      	str	r3, [r7, #12]
  return(result);
 8011c16:	68fb      	ldr	r3, [r7, #12]
 8011c18:	2b00      	cmp	r3, #0
 8011c1a:	d105      	bne.n	8011c28 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011c1c:	f3ef 8311 	mrs	r3, BASEPRI
 8011c20:	60bb      	str	r3, [r7, #8]
  return(result);
 8011c22:	68bb      	ldr	r3, [r7, #8]
 8011c24:	2b00      	cmp	r3, #0
 8011c26:	d007      	beq.n	8011c38 <osDelay+0x3c>
 8011c28:	4b0a      	ldr	r3, [pc, #40]	; (8011c54 <osDelay+0x58>)
 8011c2a:	681b      	ldr	r3, [r3, #0]
 8011c2c:	2b02      	cmp	r3, #2
 8011c2e:	d103      	bne.n	8011c38 <osDelay+0x3c>
    stat = osErrorISR;
 8011c30:	f06f 0305 	mvn.w	r3, #5
 8011c34:	617b      	str	r3, [r7, #20]
 8011c36:	e007      	b.n	8011c48 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8011c38:	2300      	movs	r3, #0
 8011c3a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8011c3c:	687b      	ldr	r3, [r7, #4]
 8011c3e:	2b00      	cmp	r3, #0
 8011c40:	d002      	beq.n	8011c48 <osDelay+0x4c>
      vTaskDelay(ticks);
 8011c42:	6878      	ldr	r0, [r7, #4]
 8011c44:	f001 fdc6 	bl	80137d4 <vTaskDelay>
    }
  }

  return (stat);
 8011c48:	697b      	ldr	r3, [r7, #20]
}
 8011c4a:	4618      	mov	r0, r3
 8011c4c:	3718      	adds	r7, #24
 8011c4e:	46bd      	mov	sp, r7
 8011c50:	bd80      	pop	{r7, pc}
 8011c52:	bf00      	nop
 8011c54:	200002d0 	.word	0x200002d0

08011c58 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8011c58:	b580      	push	{r7, lr}
 8011c5a:	b08c      	sub	sp, #48	; 0x30
 8011c5c:	af02      	add	r7, sp, #8
 8011c5e:	60f8      	str	r0, [r7, #12]
 8011c60:	60b9      	str	r1, [r7, #8]
 8011c62:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8011c64:	2300      	movs	r3, #0
 8011c66:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011c68:	f3ef 8305 	mrs	r3, IPSR
 8011c6c:	61bb      	str	r3, [r7, #24]
  return(result);
 8011c6e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8011c70:	2b00      	cmp	r3, #0
 8011c72:	f040 8087 	bne.w	8011d84 <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011c76:	f3ef 8310 	mrs	r3, PRIMASK
 8011c7a:	617b      	str	r3, [r7, #20]
  return(result);
 8011c7c:	697b      	ldr	r3, [r7, #20]
 8011c7e:	2b00      	cmp	r3, #0
 8011c80:	d105      	bne.n	8011c8e <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011c82:	f3ef 8311 	mrs	r3, BASEPRI
 8011c86:	613b      	str	r3, [r7, #16]
  return(result);
 8011c88:	693b      	ldr	r3, [r7, #16]
 8011c8a:	2b00      	cmp	r3, #0
 8011c8c:	d003      	beq.n	8011c96 <osSemaphoreNew+0x3e>
 8011c8e:	4b40      	ldr	r3, [pc, #256]	; (8011d90 <osSemaphoreNew+0x138>)
 8011c90:	681b      	ldr	r3, [r3, #0]
 8011c92:	2b02      	cmp	r3, #2
 8011c94:	d076      	beq.n	8011d84 <osSemaphoreNew+0x12c>
 8011c96:	68fb      	ldr	r3, [r7, #12]
 8011c98:	2b00      	cmp	r3, #0
 8011c9a:	d073      	beq.n	8011d84 <osSemaphoreNew+0x12c>
 8011c9c:	68ba      	ldr	r2, [r7, #8]
 8011c9e:	68fb      	ldr	r3, [r7, #12]
 8011ca0:	429a      	cmp	r2, r3
 8011ca2:	d86f      	bhi.n	8011d84 <osSemaphoreNew+0x12c>
    mem = -1;
 8011ca4:	f04f 33ff 	mov.w	r3, #4294967295
 8011ca8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	2b00      	cmp	r3, #0
 8011cae:	d015      	beq.n	8011cdc <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	689b      	ldr	r3, [r3, #8]
 8011cb4:	2b00      	cmp	r3, #0
 8011cb6:	d006      	beq.n	8011cc6 <osSemaphoreNew+0x6e>
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	68db      	ldr	r3, [r3, #12]
 8011cbc:	2b4f      	cmp	r3, #79	; 0x4f
 8011cbe:	d902      	bls.n	8011cc6 <osSemaphoreNew+0x6e>
        mem = 1;
 8011cc0:	2301      	movs	r3, #1
 8011cc2:	623b      	str	r3, [r7, #32]
 8011cc4:	e00c      	b.n	8011ce0 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	689b      	ldr	r3, [r3, #8]
 8011cca:	2b00      	cmp	r3, #0
 8011ccc:	d108      	bne.n	8011ce0 <osSemaphoreNew+0x88>
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	68db      	ldr	r3, [r3, #12]
 8011cd2:	2b00      	cmp	r3, #0
 8011cd4:	d104      	bne.n	8011ce0 <osSemaphoreNew+0x88>
          mem = 0;
 8011cd6:	2300      	movs	r3, #0
 8011cd8:	623b      	str	r3, [r7, #32]
 8011cda:	e001      	b.n	8011ce0 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8011cdc:	2300      	movs	r3, #0
 8011cde:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8011ce0:	6a3b      	ldr	r3, [r7, #32]
 8011ce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011ce6:	d04d      	beq.n	8011d84 <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 8011ce8:	68fb      	ldr	r3, [r7, #12]
 8011cea:	2b01      	cmp	r3, #1
 8011cec:	d129      	bne.n	8011d42 <osSemaphoreNew+0xea>
        if (mem == 1) {
 8011cee:	6a3b      	ldr	r3, [r7, #32]
 8011cf0:	2b01      	cmp	r3, #1
 8011cf2:	d10b      	bne.n	8011d0c <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	689a      	ldr	r2, [r3, #8]
 8011cf8:	2303      	movs	r3, #3
 8011cfa:	9300      	str	r3, [sp, #0]
 8011cfc:	4613      	mov	r3, r2
 8011cfe:	2200      	movs	r2, #0
 8011d00:	2100      	movs	r1, #0
 8011d02:	2001      	movs	r0, #1
 8011d04:	f000 fbf8 	bl	80124f8 <xQueueGenericCreateStatic>
 8011d08:	6278      	str	r0, [r7, #36]	; 0x24
 8011d0a:	e005      	b.n	8011d18 <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8011d0c:	2203      	movs	r2, #3
 8011d0e:	2100      	movs	r1, #0
 8011d10:	2001      	movs	r0, #1
 8011d12:	f000 fc6e 	bl	80125f2 <xQueueGenericCreate>
 8011d16:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8011d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d1a:	2b00      	cmp	r3, #0
 8011d1c:	d022      	beq.n	8011d64 <osSemaphoreNew+0x10c>
 8011d1e:	68bb      	ldr	r3, [r7, #8]
 8011d20:	2b00      	cmp	r3, #0
 8011d22:	d01f      	beq.n	8011d64 <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8011d24:	2300      	movs	r3, #0
 8011d26:	2200      	movs	r2, #0
 8011d28:	2100      	movs	r1, #0
 8011d2a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011d2c:	f000 fd34 	bl	8012798 <xQueueGenericSend>
 8011d30:	4603      	mov	r3, r0
 8011d32:	2b01      	cmp	r3, #1
 8011d34:	d016      	beq.n	8011d64 <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 8011d36:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011d38:	f001 f9d3 	bl	80130e2 <vQueueDelete>
            hSemaphore = NULL;
 8011d3c:	2300      	movs	r3, #0
 8011d3e:	627b      	str	r3, [r7, #36]	; 0x24
 8011d40:	e010      	b.n	8011d64 <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 8011d42:	6a3b      	ldr	r3, [r7, #32]
 8011d44:	2b01      	cmp	r3, #1
 8011d46:	d108      	bne.n	8011d5a <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	689b      	ldr	r3, [r3, #8]
 8011d4c:	461a      	mov	r2, r3
 8011d4e:	68b9      	ldr	r1, [r7, #8]
 8011d50:	68f8      	ldr	r0, [r7, #12]
 8011d52:	f000 fcb2 	bl	80126ba <xQueueCreateCountingSemaphoreStatic>
 8011d56:	6278      	str	r0, [r7, #36]	; 0x24
 8011d58:	e004      	b.n	8011d64 <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8011d5a:	68b9      	ldr	r1, [r7, #8]
 8011d5c:	68f8      	ldr	r0, [r7, #12]
 8011d5e:	f000 fce5 	bl	801272c <xQueueCreateCountingSemaphore>
 8011d62:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8011d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d66:	2b00      	cmp	r3, #0
 8011d68:	d00c      	beq.n	8011d84 <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 8011d6a:	687b      	ldr	r3, [r7, #4]
 8011d6c:	2b00      	cmp	r3, #0
 8011d6e:	d003      	beq.n	8011d78 <osSemaphoreNew+0x120>
          name = attr->name;
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	681b      	ldr	r3, [r3, #0]
 8011d74:	61fb      	str	r3, [r7, #28]
 8011d76:	e001      	b.n	8011d7c <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 8011d78:	2300      	movs	r3, #0
 8011d7a:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8011d7c:	69f9      	ldr	r1, [r7, #28]
 8011d7e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011d80:	f001 fafc 	bl	801337c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8011d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8011d86:	4618      	mov	r0, r3
 8011d88:	3728      	adds	r7, #40	; 0x28
 8011d8a:	46bd      	mov	sp, r7
 8011d8c:	bd80      	pop	{r7, pc}
 8011d8e:	bf00      	nop
 8011d90:	200002d0 	.word	0x200002d0

08011d94 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8011d94:	b580      	push	{r7, lr}
 8011d96:	b088      	sub	sp, #32
 8011d98:	af00      	add	r7, sp, #0
 8011d9a:	6078      	str	r0, [r7, #4]
 8011d9c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8011d9e:	687b      	ldr	r3, [r7, #4]
 8011da0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8011da2:	2300      	movs	r3, #0
 8011da4:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8011da6:	69bb      	ldr	r3, [r7, #24]
 8011da8:	2b00      	cmp	r3, #0
 8011daa:	d103      	bne.n	8011db4 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8011dac:	f06f 0303 	mvn.w	r3, #3
 8011db0:	61fb      	str	r3, [r7, #28]
 8011db2:	e04b      	b.n	8011e4c <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011db4:	f3ef 8305 	mrs	r3, IPSR
 8011db8:	617b      	str	r3, [r7, #20]
  return(result);
 8011dba:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8011dbc:	2b00      	cmp	r3, #0
 8011dbe:	d10f      	bne.n	8011de0 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011dc0:	f3ef 8310 	mrs	r3, PRIMASK
 8011dc4:	613b      	str	r3, [r7, #16]
  return(result);
 8011dc6:	693b      	ldr	r3, [r7, #16]
 8011dc8:	2b00      	cmp	r3, #0
 8011dca:	d105      	bne.n	8011dd8 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011dcc:	f3ef 8311 	mrs	r3, BASEPRI
 8011dd0:	60fb      	str	r3, [r7, #12]
  return(result);
 8011dd2:	68fb      	ldr	r3, [r7, #12]
 8011dd4:	2b00      	cmp	r3, #0
 8011dd6:	d026      	beq.n	8011e26 <osSemaphoreAcquire+0x92>
 8011dd8:	4b1f      	ldr	r3, [pc, #124]	; (8011e58 <osSemaphoreAcquire+0xc4>)
 8011dda:	681b      	ldr	r3, [r3, #0]
 8011ddc:	2b02      	cmp	r3, #2
 8011dde:	d122      	bne.n	8011e26 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8011de0:	683b      	ldr	r3, [r7, #0]
 8011de2:	2b00      	cmp	r3, #0
 8011de4:	d003      	beq.n	8011dee <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8011de6:	f06f 0303 	mvn.w	r3, #3
 8011dea:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8011dec:	e02d      	b.n	8011e4a <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8011dee:	2300      	movs	r3, #0
 8011df0:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8011df2:	f107 0308 	add.w	r3, r7, #8
 8011df6:	461a      	mov	r2, r3
 8011df8:	2100      	movs	r1, #0
 8011dfa:	69b8      	ldr	r0, [r7, #24]
 8011dfc:	f001 f8ee 	bl	8012fdc <xQueueReceiveFromISR>
 8011e00:	4603      	mov	r3, r0
 8011e02:	2b01      	cmp	r3, #1
 8011e04:	d003      	beq.n	8011e0e <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8011e06:	f06f 0302 	mvn.w	r3, #2
 8011e0a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8011e0c:	e01d      	b.n	8011e4a <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8011e0e:	68bb      	ldr	r3, [r7, #8]
 8011e10:	2b00      	cmp	r3, #0
 8011e12:	d01a      	beq.n	8011e4a <osSemaphoreAcquire+0xb6>
 8011e14:	4b11      	ldr	r3, [pc, #68]	; (8011e5c <osSemaphoreAcquire+0xc8>)
 8011e16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011e1a:	601a      	str	r2, [r3, #0]
 8011e1c:	f3bf 8f4f 	dsb	sy
 8011e20:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8011e24:	e011      	b.n	8011e4a <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8011e26:	6839      	ldr	r1, [r7, #0]
 8011e28:	69b8      	ldr	r0, [r7, #24]
 8011e2a:	f000 ffc7 	bl	8012dbc <xQueueSemaphoreTake>
 8011e2e:	4603      	mov	r3, r0
 8011e30:	2b01      	cmp	r3, #1
 8011e32:	d00b      	beq.n	8011e4c <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8011e34:	683b      	ldr	r3, [r7, #0]
 8011e36:	2b00      	cmp	r3, #0
 8011e38:	d003      	beq.n	8011e42 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8011e3a:	f06f 0301 	mvn.w	r3, #1
 8011e3e:	61fb      	str	r3, [r7, #28]
 8011e40:	e004      	b.n	8011e4c <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8011e42:	f06f 0302 	mvn.w	r3, #2
 8011e46:	61fb      	str	r3, [r7, #28]
 8011e48:	e000      	b.n	8011e4c <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8011e4a:	bf00      	nop
      }
    }
  }

  return (stat);
 8011e4c:	69fb      	ldr	r3, [r7, #28]
}
 8011e4e:	4618      	mov	r0, r3
 8011e50:	3720      	adds	r7, #32
 8011e52:	46bd      	mov	sp, r7
 8011e54:	bd80      	pop	{r7, pc}
 8011e56:	bf00      	nop
 8011e58:	200002d0 	.word	0x200002d0
 8011e5c:	e000ed04 	.word	0xe000ed04

08011e60 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8011e60:	b580      	push	{r7, lr}
 8011e62:	b088      	sub	sp, #32
 8011e64:	af00      	add	r7, sp, #0
 8011e66:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8011e6c:	2300      	movs	r3, #0
 8011e6e:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8011e70:	69bb      	ldr	r3, [r7, #24]
 8011e72:	2b00      	cmp	r3, #0
 8011e74:	d103      	bne.n	8011e7e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8011e76:	f06f 0303 	mvn.w	r3, #3
 8011e7a:	61fb      	str	r3, [r7, #28]
 8011e7c:	e03e      	b.n	8011efc <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011e7e:	f3ef 8305 	mrs	r3, IPSR
 8011e82:	617b      	str	r3, [r7, #20]
  return(result);
 8011e84:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8011e86:	2b00      	cmp	r3, #0
 8011e88:	d10f      	bne.n	8011eaa <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011e8a:	f3ef 8310 	mrs	r3, PRIMASK
 8011e8e:	613b      	str	r3, [r7, #16]
  return(result);
 8011e90:	693b      	ldr	r3, [r7, #16]
 8011e92:	2b00      	cmp	r3, #0
 8011e94:	d105      	bne.n	8011ea2 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011e96:	f3ef 8311 	mrs	r3, BASEPRI
 8011e9a:	60fb      	str	r3, [r7, #12]
  return(result);
 8011e9c:	68fb      	ldr	r3, [r7, #12]
 8011e9e:	2b00      	cmp	r3, #0
 8011ea0:	d01e      	beq.n	8011ee0 <osSemaphoreRelease+0x80>
 8011ea2:	4b19      	ldr	r3, [pc, #100]	; (8011f08 <osSemaphoreRelease+0xa8>)
 8011ea4:	681b      	ldr	r3, [r3, #0]
 8011ea6:	2b02      	cmp	r3, #2
 8011ea8:	d11a      	bne.n	8011ee0 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8011eaa:	2300      	movs	r3, #0
 8011eac:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8011eae:	f107 0308 	add.w	r3, r7, #8
 8011eb2:	4619      	mov	r1, r3
 8011eb4:	69b8      	ldr	r0, [r7, #24]
 8011eb6:	f000 fe0d 	bl	8012ad4 <xQueueGiveFromISR>
 8011eba:	4603      	mov	r3, r0
 8011ebc:	2b01      	cmp	r3, #1
 8011ebe:	d003      	beq.n	8011ec8 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8011ec0:	f06f 0302 	mvn.w	r3, #2
 8011ec4:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8011ec6:	e018      	b.n	8011efa <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8011ec8:	68bb      	ldr	r3, [r7, #8]
 8011eca:	2b00      	cmp	r3, #0
 8011ecc:	d015      	beq.n	8011efa <osSemaphoreRelease+0x9a>
 8011ece:	4b0f      	ldr	r3, [pc, #60]	; (8011f0c <osSemaphoreRelease+0xac>)
 8011ed0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011ed4:	601a      	str	r2, [r3, #0]
 8011ed6:	f3bf 8f4f 	dsb	sy
 8011eda:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8011ede:	e00c      	b.n	8011efa <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8011ee0:	2300      	movs	r3, #0
 8011ee2:	2200      	movs	r2, #0
 8011ee4:	2100      	movs	r1, #0
 8011ee6:	69b8      	ldr	r0, [r7, #24]
 8011ee8:	f000 fc56 	bl	8012798 <xQueueGenericSend>
 8011eec:	4603      	mov	r3, r0
 8011eee:	2b01      	cmp	r3, #1
 8011ef0:	d004      	beq.n	8011efc <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8011ef2:	f06f 0302 	mvn.w	r3, #2
 8011ef6:	61fb      	str	r3, [r7, #28]
 8011ef8:	e000      	b.n	8011efc <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8011efa:	bf00      	nop
    }
  }

  return (stat);
 8011efc:	69fb      	ldr	r3, [r7, #28]
}
 8011efe:	4618      	mov	r0, r3
 8011f00:	3720      	adds	r7, #32
 8011f02:	46bd      	mov	sp, r7
 8011f04:	bd80      	pop	{r7, pc}
 8011f06:	bf00      	nop
 8011f08:	200002d0 	.word	0x200002d0
 8011f0c:	e000ed04 	.word	0xe000ed04

08011f10 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8011f10:	b580      	push	{r7, lr}
 8011f12:	b088      	sub	sp, #32
 8011f14:	af00      	add	r7, sp, #0
 8011f16:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8011f18:	687b      	ldr	r3, [r7, #4]
 8011f1a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011f1c:	f3ef 8305 	mrs	r3, IPSR
 8011f20:	617b      	str	r3, [r7, #20]
  return(result);
 8011f22:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8011f24:	2b00      	cmp	r3, #0
 8011f26:	d10f      	bne.n	8011f48 <osSemaphoreDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011f28:	f3ef 8310 	mrs	r3, PRIMASK
 8011f2c:	613b      	str	r3, [r7, #16]
  return(result);
 8011f2e:	693b      	ldr	r3, [r7, #16]
 8011f30:	2b00      	cmp	r3, #0
 8011f32:	d105      	bne.n	8011f40 <osSemaphoreDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011f34:	f3ef 8311 	mrs	r3, BASEPRI
 8011f38:	60fb      	str	r3, [r7, #12]
  return(result);
 8011f3a:	68fb      	ldr	r3, [r7, #12]
 8011f3c:	2b00      	cmp	r3, #0
 8011f3e:	d007      	beq.n	8011f50 <osSemaphoreDelete+0x40>
 8011f40:	4b0d      	ldr	r3, [pc, #52]	; (8011f78 <osSemaphoreDelete+0x68>)
 8011f42:	681b      	ldr	r3, [r3, #0]
 8011f44:	2b02      	cmp	r3, #2
 8011f46:	d103      	bne.n	8011f50 <osSemaphoreDelete+0x40>
    stat = osErrorISR;
 8011f48:	f06f 0305 	mvn.w	r3, #5
 8011f4c:	61fb      	str	r3, [r7, #28]
 8011f4e:	e00e      	b.n	8011f6e <osSemaphoreDelete+0x5e>
  }
  else if (hSemaphore == NULL) {
 8011f50:	69bb      	ldr	r3, [r7, #24]
 8011f52:	2b00      	cmp	r3, #0
 8011f54:	d103      	bne.n	8011f5e <osSemaphoreDelete+0x4e>
    stat = osErrorParameter;
 8011f56:	f06f 0303 	mvn.w	r3, #3
 8011f5a:	61fb      	str	r3, [r7, #28]
 8011f5c:	e007      	b.n	8011f6e <osSemaphoreDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 8011f5e:	69b8      	ldr	r0, [r7, #24]
 8011f60:	f001 fa34 	bl	80133cc <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8011f64:	2300      	movs	r3, #0
 8011f66:	61fb      	str	r3, [r7, #28]
    vSemaphoreDelete (hSemaphore);
 8011f68:	69b8      	ldr	r0, [r7, #24]
 8011f6a:	f001 f8ba 	bl	80130e2 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8011f6e:	69fb      	ldr	r3, [r7, #28]
}
 8011f70:	4618      	mov	r0, r3
 8011f72:	3720      	adds	r7, #32
 8011f74:	46bd      	mov	sp, r7
 8011f76:	bd80      	pop	{r7, pc}
 8011f78:	200002d0 	.word	0x200002d0

08011f7c <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8011f7c:	b580      	push	{r7, lr}
 8011f7e:	b08c      	sub	sp, #48	; 0x30
 8011f80:	af02      	add	r7, sp, #8
 8011f82:	60f8      	str	r0, [r7, #12]
 8011f84:	60b9      	str	r1, [r7, #8]
 8011f86:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8011f88:	2300      	movs	r3, #0
 8011f8a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011f8c:	f3ef 8305 	mrs	r3, IPSR
 8011f90:	61bb      	str	r3, [r7, #24]
  return(result);
 8011f92:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8011f94:	2b00      	cmp	r3, #0
 8011f96:	d170      	bne.n	801207a <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011f98:	f3ef 8310 	mrs	r3, PRIMASK
 8011f9c:	617b      	str	r3, [r7, #20]
  return(result);
 8011f9e:	697b      	ldr	r3, [r7, #20]
 8011fa0:	2b00      	cmp	r3, #0
 8011fa2:	d105      	bne.n	8011fb0 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011fa4:	f3ef 8311 	mrs	r3, BASEPRI
 8011fa8:	613b      	str	r3, [r7, #16]
  return(result);
 8011faa:	693b      	ldr	r3, [r7, #16]
 8011fac:	2b00      	cmp	r3, #0
 8011fae:	d003      	beq.n	8011fb8 <osMessageQueueNew+0x3c>
 8011fb0:	4b34      	ldr	r3, [pc, #208]	; (8012084 <osMessageQueueNew+0x108>)
 8011fb2:	681b      	ldr	r3, [r3, #0]
 8011fb4:	2b02      	cmp	r3, #2
 8011fb6:	d060      	beq.n	801207a <osMessageQueueNew+0xfe>
 8011fb8:	68fb      	ldr	r3, [r7, #12]
 8011fba:	2b00      	cmp	r3, #0
 8011fbc:	d05d      	beq.n	801207a <osMessageQueueNew+0xfe>
 8011fbe:	68bb      	ldr	r3, [r7, #8]
 8011fc0:	2b00      	cmp	r3, #0
 8011fc2:	d05a      	beq.n	801207a <osMessageQueueNew+0xfe>
    mem = -1;
 8011fc4:	f04f 33ff 	mov.w	r3, #4294967295
 8011fc8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8011fca:	687b      	ldr	r3, [r7, #4]
 8011fcc:	2b00      	cmp	r3, #0
 8011fce:	d029      	beq.n	8012024 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	689b      	ldr	r3, [r3, #8]
 8011fd4:	2b00      	cmp	r3, #0
 8011fd6:	d012      	beq.n	8011ffe <osMessageQueueNew+0x82>
 8011fd8:	687b      	ldr	r3, [r7, #4]
 8011fda:	68db      	ldr	r3, [r3, #12]
 8011fdc:	2b4f      	cmp	r3, #79	; 0x4f
 8011fde:	d90e      	bls.n	8011ffe <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8011fe0:	687b      	ldr	r3, [r7, #4]
 8011fe2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8011fe4:	2b00      	cmp	r3, #0
 8011fe6:	d00a      	beq.n	8011ffe <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	695a      	ldr	r2, [r3, #20]
 8011fec:	68fb      	ldr	r3, [r7, #12]
 8011fee:	68b9      	ldr	r1, [r7, #8]
 8011ff0:	fb01 f303 	mul.w	r3, r1, r3
 8011ff4:	429a      	cmp	r2, r3
 8011ff6:	d302      	bcc.n	8011ffe <osMessageQueueNew+0x82>
        mem = 1;
 8011ff8:	2301      	movs	r3, #1
 8011ffa:	623b      	str	r3, [r7, #32]
 8011ffc:	e014      	b.n	8012028 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	689b      	ldr	r3, [r3, #8]
 8012002:	2b00      	cmp	r3, #0
 8012004:	d110      	bne.n	8012028 <osMessageQueueNew+0xac>
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	68db      	ldr	r3, [r3, #12]
 801200a:	2b00      	cmp	r3, #0
 801200c:	d10c      	bne.n	8012028 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 801200e:	687b      	ldr	r3, [r7, #4]
 8012010:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8012012:	2b00      	cmp	r3, #0
 8012014:	d108      	bne.n	8012028 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8012016:	687b      	ldr	r3, [r7, #4]
 8012018:	695b      	ldr	r3, [r3, #20]
 801201a:	2b00      	cmp	r3, #0
 801201c:	d104      	bne.n	8012028 <osMessageQueueNew+0xac>
          mem = 0;
 801201e:	2300      	movs	r3, #0
 8012020:	623b      	str	r3, [r7, #32]
 8012022:	e001      	b.n	8012028 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8012024:	2300      	movs	r3, #0
 8012026:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8012028:	6a3b      	ldr	r3, [r7, #32]
 801202a:	2b01      	cmp	r3, #1
 801202c:	d10c      	bne.n	8012048 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 801202e:	687b      	ldr	r3, [r7, #4]
 8012030:	691a      	ldr	r2, [r3, #16]
 8012032:	687b      	ldr	r3, [r7, #4]
 8012034:	6899      	ldr	r1, [r3, #8]
 8012036:	2300      	movs	r3, #0
 8012038:	9300      	str	r3, [sp, #0]
 801203a:	460b      	mov	r3, r1
 801203c:	68b9      	ldr	r1, [r7, #8]
 801203e:	68f8      	ldr	r0, [r7, #12]
 8012040:	f000 fa5a 	bl	80124f8 <xQueueGenericCreateStatic>
 8012044:	6278      	str	r0, [r7, #36]	; 0x24
 8012046:	e008      	b.n	801205a <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 8012048:	6a3b      	ldr	r3, [r7, #32]
 801204a:	2b00      	cmp	r3, #0
 801204c:	d105      	bne.n	801205a <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 801204e:	2200      	movs	r2, #0
 8012050:	68b9      	ldr	r1, [r7, #8]
 8012052:	68f8      	ldr	r0, [r7, #12]
 8012054:	f000 facd 	bl	80125f2 <xQueueGenericCreate>
 8012058:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 801205a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801205c:	2b00      	cmp	r3, #0
 801205e:	d00c      	beq.n	801207a <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	2b00      	cmp	r3, #0
 8012064:	d003      	beq.n	801206e <osMessageQueueNew+0xf2>
        name = attr->name;
 8012066:	687b      	ldr	r3, [r7, #4]
 8012068:	681b      	ldr	r3, [r3, #0]
 801206a:	61fb      	str	r3, [r7, #28]
 801206c:	e001      	b.n	8012072 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 801206e:	2300      	movs	r3, #0
 8012070:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8012072:	69f9      	ldr	r1, [r7, #28]
 8012074:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012076:	f001 f981 	bl	801337c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 801207a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801207c:	4618      	mov	r0, r3
 801207e:	3728      	adds	r7, #40	; 0x28
 8012080:	46bd      	mov	sp, r7
 8012082:	bd80      	pop	{r7, pc}
 8012084:	200002d0 	.word	0x200002d0

08012088 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8012088:	b580      	push	{r7, lr}
 801208a:	b08a      	sub	sp, #40	; 0x28
 801208c:	af00      	add	r7, sp, #0
 801208e:	60f8      	str	r0, [r7, #12]
 8012090:	60b9      	str	r1, [r7, #8]
 8012092:	603b      	str	r3, [r7, #0]
 8012094:	4613      	mov	r3, r2
 8012096:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8012098:	68fb      	ldr	r3, [r7, #12]
 801209a:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 801209c:	2300      	movs	r3, #0
 801209e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80120a0:	f3ef 8305 	mrs	r3, IPSR
 80120a4:	61fb      	str	r3, [r7, #28]
  return(result);
 80120a6:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80120a8:	2b00      	cmp	r3, #0
 80120aa:	d10f      	bne.n	80120cc <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80120ac:	f3ef 8310 	mrs	r3, PRIMASK
 80120b0:	61bb      	str	r3, [r7, #24]
  return(result);
 80120b2:	69bb      	ldr	r3, [r7, #24]
 80120b4:	2b00      	cmp	r3, #0
 80120b6:	d105      	bne.n	80120c4 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80120b8:	f3ef 8311 	mrs	r3, BASEPRI
 80120bc:	617b      	str	r3, [r7, #20]
  return(result);
 80120be:	697b      	ldr	r3, [r7, #20]
 80120c0:	2b00      	cmp	r3, #0
 80120c2:	d02c      	beq.n	801211e <osMessageQueuePut+0x96>
 80120c4:	4b28      	ldr	r3, [pc, #160]	; (8012168 <osMessageQueuePut+0xe0>)
 80120c6:	681b      	ldr	r3, [r3, #0]
 80120c8:	2b02      	cmp	r3, #2
 80120ca:	d128      	bne.n	801211e <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80120cc:	6a3b      	ldr	r3, [r7, #32]
 80120ce:	2b00      	cmp	r3, #0
 80120d0:	d005      	beq.n	80120de <osMessageQueuePut+0x56>
 80120d2:	68bb      	ldr	r3, [r7, #8]
 80120d4:	2b00      	cmp	r3, #0
 80120d6:	d002      	beq.n	80120de <osMessageQueuePut+0x56>
 80120d8:	683b      	ldr	r3, [r7, #0]
 80120da:	2b00      	cmp	r3, #0
 80120dc:	d003      	beq.n	80120e6 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 80120de:	f06f 0303 	mvn.w	r3, #3
 80120e2:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80120e4:	e039      	b.n	801215a <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 80120e6:	2300      	movs	r3, #0
 80120e8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80120ea:	f107 0210 	add.w	r2, r7, #16
 80120ee:	2300      	movs	r3, #0
 80120f0:	68b9      	ldr	r1, [r7, #8]
 80120f2:	6a38      	ldr	r0, [r7, #32]
 80120f4:	f000 fc52 	bl	801299c <xQueueGenericSendFromISR>
 80120f8:	4603      	mov	r3, r0
 80120fa:	2b01      	cmp	r3, #1
 80120fc:	d003      	beq.n	8012106 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 80120fe:	f06f 0302 	mvn.w	r3, #2
 8012102:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012104:	e029      	b.n	801215a <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8012106:	693b      	ldr	r3, [r7, #16]
 8012108:	2b00      	cmp	r3, #0
 801210a:	d026      	beq.n	801215a <osMessageQueuePut+0xd2>
 801210c:	4b17      	ldr	r3, [pc, #92]	; (801216c <osMessageQueuePut+0xe4>)
 801210e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012112:	601a      	str	r2, [r3, #0]
 8012114:	f3bf 8f4f 	dsb	sy
 8012118:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801211c:	e01d      	b.n	801215a <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 801211e:	6a3b      	ldr	r3, [r7, #32]
 8012120:	2b00      	cmp	r3, #0
 8012122:	d002      	beq.n	801212a <osMessageQueuePut+0xa2>
 8012124:	68bb      	ldr	r3, [r7, #8]
 8012126:	2b00      	cmp	r3, #0
 8012128:	d103      	bne.n	8012132 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 801212a:	f06f 0303 	mvn.w	r3, #3
 801212e:	627b      	str	r3, [r7, #36]	; 0x24
 8012130:	e014      	b.n	801215c <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8012132:	2300      	movs	r3, #0
 8012134:	683a      	ldr	r2, [r7, #0]
 8012136:	68b9      	ldr	r1, [r7, #8]
 8012138:	6a38      	ldr	r0, [r7, #32]
 801213a:	f000 fb2d 	bl	8012798 <xQueueGenericSend>
 801213e:	4603      	mov	r3, r0
 8012140:	2b01      	cmp	r3, #1
 8012142:	d00b      	beq.n	801215c <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8012144:	683b      	ldr	r3, [r7, #0]
 8012146:	2b00      	cmp	r3, #0
 8012148:	d003      	beq.n	8012152 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 801214a:	f06f 0301 	mvn.w	r3, #1
 801214e:	627b      	str	r3, [r7, #36]	; 0x24
 8012150:	e004      	b.n	801215c <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8012152:	f06f 0302 	mvn.w	r3, #2
 8012156:	627b      	str	r3, [r7, #36]	; 0x24
 8012158:	e000      	b.n	801215c <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801215a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 801215c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801215e:	4618      	mov	r0, r3
 8012160:	3728      	adds	r7, #40	; 0x28
 8012162:	46bd      	mov	sp, r7
 8012164:	bd80      	pop	{r7, pc}
 8012166:	bf00      	nop
 8012168:	200002d0 	.word	0x200002d0
 801216c:	e000ed04 	.word	0xe000ed04

08012170 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8012170:	b580      	push	{r7, lr}
 8012172:	b08a      	sub	sp, #40	; 0x28
 8012174:	af00      	add	r7, sp, #0
 8012176:	60f8      	str	r0, [r7, #12]
 8012178:	60b9      	str	r1, [r7, #8]
 801217a:	607a      	str	r2, [r7, #4]
 801217c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 801217e:	68fb      	ldr	r3, [r7, #12]
 8012180:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8012182:	2300      	movs	r3, #0
 8012184:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012186:	f3ef 8305 	mrs	r3, IPSR
 801218a:	61fb      	str	r3, [r7, #28]
  return(result);
 801218c:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 801218e:	2b00      	cmp	r3, #0
 8012190:	d10f      	bne.n	80121b2 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012192:	f3ef 8310 	mrs	r3, PRIMASK
 8012196:	61bb      	str	r3, [r7, #24]
  return(result);
 8012198:	69bb      	ldr	r3, [r7, #24]
 801219a:	2b00      	cmp	r3, #0
 801219c:	d105      	bne.n	80121aa <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801219e:	f3ef 8311 	mrs	r3, BASEPRI
 80121a2:	617b      	str	r3, [r7, #20]
  return(result);
 80121a4:	697b      	ldr	r3, [r7, #20]
 80121a6:	2b00      	cmp	r3, #0
 80121a8:	d02c      	beq.n	8012204 <osMessageQueueGet+0x94>
 80121aa:	4b28      	ldr	r3, [pc, #160]	; (801224c <osMessageQueueGet+0xdc>)
 80121ac:	681b      	ldr	r3, [r3, #0]
 80121ae:	2b02      	cmp	r3, #2
 80121b0:	d128      	bne.n	8012204 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80121b2:	6a3b      	ldr	r3, [r7, #32]
 80121b4:	2b00      	cmp	r3, #0
 80121b6:	d005      	beq.n	80121c4 <osMessageQueueGet+0x54>
 80121b8:	68bb      	ldr	r3, [r7, #8]
 80121ba:	2b00      	cmp	r3, #0
 80121bc:	d002      	beq.n	80121c4 <osMessageQueueGet+0x54>
 80121be:	683b      	ldr	r3, [r7, #0]
 80121c0:	2b00      	cmp	r3, #0
 80121c2:	d003      	beq.n	80121cc <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 80121c4:	f06f 0303 	mvn.w	r3, #3
 80121c8:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80121ca:	e038      	b.n	801223e <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 80121cc:	2300      	movs	r3, #0
 80121ce:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80121d0:	f107 0310 	add.w	r3, r7, #16
 80121d4:	461a      	mov	r2, r3
 80121d6:	68b9      	ldr	r1, [r7, #8]
 80121d8:	6a38      	ldr	r0, [r7, #32]
 80121da:	f000 feff 	bl	8012fdc <xQueueReceiveFromISR>
 80121de:	4603      	mov	r3, r0
 80121e0:	2b01      	cmp	r3, #1
 80121e2:	d003      	beq.n	80121ec <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 80121e4:	f06f 0302 	mvn.w	r3, #2
 80121e8:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80121ea:	e028      	b.n	801223e <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 80121ec:	693b      	ldr	r3, [r7, #16]
 80121ee:	2b00      	cmp	r3, #0
 80121f0:	d025      	beq.n	801223e <osMessageQueueGet+0xce>
 80121f2:	4b17      	ldr	r3, [pc, #92]	; (8012250 <osMessageQueueGet+0xe0>)
 80121f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80121f8:	601a      	str	r2, [r3, #0]
 80121fa:	f3bf 8f4f 	dsb	sy
 80121fe:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012202:	e01c      	b.n	801223e <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8012204:	6a3b      	ldr	r3, [r7, #32]
 8012206:	2b00      	cmp	r3, #0
 8012208:	d002      	beq.n	8012210 <osMessageQueueGet+0xa0>
 801220a:	68bb      	ldr	r3, [r7, #8]
 801220c:	2b00      	cmp	r3, #0
 801220e:	d103      	bne.n	8012218 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8012210:	f06f 0303 	mvn.w	r3, #3
 8012214:	627b      	str	r3, [r7, #36]	; 0x24
 8012216:	e013      	b.n	8012240 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8012218:	683a      	ldr	r2, [r7, #0]
 801221a:	68b9      	ldr	r1, [r7, #8]
 801221c:	6a38      	ldr	r0, [r7, #32]
 801221e:	f000 fceb 	bl	8012bf8 <xQueueReceive>
 8012222:	4603      	mov	r3, r0
 8012224:	2b01      	cmp	r3, #1
 8012226:	d00b      	beq.n	8012240 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8012228:	683b      	ldr	r3, [r7, #0]
 801222a:	2b00      	cmp	r3, #0
 801222c:	d003      	beq.n	8012236 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 801222e:	f06f 0301 	mvn.w	r3, #1
 8012232:	627b      	str	r3, [r7, #36]	; 0x24
 8012234:	e004      	b.n	8012240 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8012236:	f06f 0302 	mvn.w	r3, #2
 801223a:	627b      	str	r3, [r7, #36]	; 0x24
 801223c:	e000      	b.n	8012240 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801223e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8012240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8012242:	4618      	mov	r0, r3
 8012244:	3728      	adds	r7, #40	; 0x28
 8012246:	46bd      	mov	sp, r7
 8012248:	bd80      	pop	{r7, pc}
 801224a:	bf00      	nop
 801224c:	200002d0 	.word	0x200002d0
 8012250:	e000ed04 	.word	0xe000ed04

08012254 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8012254:	b480      	push	{r7}
 8012256:	b085      	sub	sp, #20
 8012258:	af00      	add	r7, sp, #0
 801225a:	60f8      	str	r0, [r7, #12]
 801225c:	60b9      	str	r1, [r7, #8]
 801225e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8012260:	68fb      	ldr	r3, [r7, #12]
 8012262:	4a07      	ldr	r2, [pc, #28]	; (8012280 <vApplicationGetIdleTaskMemory+0x2c>)
 8012264:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8012266:	68bb      	ldr	r3, [r7, #8]
 8012268:	4a06      	ldr	r2, [pc, #24]	; (8012284 <vApplicationGetIdleTaskMemory+0x30>)
 801226a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 801226c:	687b      	ldr	r3, [r7, #4]
 801226e:	2280      	movs	r2, #128	; 0x80
 8012270:	601a      	str	r2, [r3, #0]
}
 8012272:	bf00      	nop
 8012274:	3714      	adds	r7, #20
 8012276:	46bd      	mov	sp, r7
 8012278:	f85d 7b04 	ldr.w	r7, [sp], #4
 801227c:	4770      	bx	lr
 801227e:	bf00      	nop
 8012280:	200002d4 	.word	0x200002d4
 8012284:	20000330 	.word	0x20000330

08012288 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8012288:	b480      	push	{r7}
 801228a:	b085      	sub	sp, #20
 801228c:	af00      	add	r7, sp, #0
 801228e:	60f8      	str	r0, [r7, #12]
 8012290:	60b9      	str	r1, [r7, #8]
 8012292:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8012294:	68fb      	ldr	r3, [r7, #12]
 8012296:	4a07      	ldr	r2, [pc, #28]	; (80122b4 <vApplicationGetTimerTaskMemory+0x2c>)
 8012298:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 801229a:	68bb      	ldr	r3, [r7, #8]
 801229c:	4a06      	ldr	r2, [pc, #24]	; (80122b8 <vApplicationGetTimerTaskMemory+0x30>)
 801229e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80122a0:	687b      	ldr	r3, [r7, #4]
 80122a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80122a6:	601a      	str	r2, [r3, #0]
}
 80122a8:	bf00      	nop
 80122aa:	3714      	adds	r7, #20
 80122ac:	46bd      	mov	sp, r7
 80122ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122b2:	4770      	bx	lr
 80122b4:	20000530 	.word	0x20000530
 80122b8:	2000058c 	.word	0x2000058c

080122bc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80122bc:	b480      	push	{r7}
 80122be:	b083      	sub	sp, #12
 80122c0:	af00      	add	r7, sp, #0
 80122c2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	f103 0208 	add.w	r2, r3, #8
 80122ca:	687b      	ldr	r3, [r7, #4]
 80122cc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	f04f 32ff 	mov.w	r2, #4294967295
 80122d4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80122d6:	687b      	ldr	r3, [r7, #4]
 80122d8:	f103 0208 	add.w	r2, r3, #8
 80122dc:	687b      	ldr	r3, [r7, #4]
 80122de:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	f103 0208 	add.w	r2, r3, #8
 80122e6:	687b      	ldr	r3, [r7, #4]
 80122e8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80122ea:	687b      	ldr	r3, [r7, #4]
 80122ec:	2200      	movs	r2, #0
 80122ee:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80122f0:	bf00      	nop
 80122f2:	370c      	adds	r7, #12
 80122f4:	46bd      	mov	sp, r7
 80122f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122fa:	4770      	bx	lr

080122fc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80122fc:	b480      	push	{r7}
 80122fe:	b083      	sub	sp, #12
 8012300:	af00      	add	r7, sp, #0
 8012302:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8012304:	687b      	ldr	r3, [r7, #4]
 8012306:	2200      	movs	r2, #0
 8012308:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801230a:	bf00      	nop
 801230c:	370c      	adds	r7, #12
 801230e:	46bd      	mov	sp, r7
 8012310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012314:	4770      	bx	lr

08012316 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012316:	b480      	push	{r7}
 8012318:	b085      	sub	sp, #20
 801231a:	af00      	add	r7, sp, #0
 801231c:	6078      	str	r0, [r7, #4]
 801231e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8012320:	687b      	ldr	r3, [r7, #4]
 8012322:	685b      	ldr	r3, [r3, #4]
 8012324:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8012326:	683b      	ldr	r3, [r7, #0]
 8012328:	68fa      	ldr	r2, [r7, #12]
 801232a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801232c:	68fb      	ldr	r3, [r7, #12]
 801232e:	689a      	ldr	r2, [r3, #8]
 8012330:	683b      	ldr	r3, [r7, #0]
 8012332:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8012334:	68fb      	ldr	r3, [r7, #12]
 8012336:	689b      	ldr	r3, [r3, #8]
 8012338:	683a      	ldr	r2, [r7, #0]
 801233a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801233c:	68fb      	ldr	r3, [r7, #12]
 801233e:	683a      	ldr	r2, [r7, #0]
 8012340:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8012342:	683b      	ldr	r3, [r7, #0]
 8012344:	687a      	ldr	r2, [r7, #4]
 8012346:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012348:	687b      	ldr	r3, [r7, #4]
 801234a:	681b      	ldr	r3, [r3, #0]
 801234c:	1c5a      	adds	r2, r3, #1
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	601a      	str	r2, [r3, #0]
}
 8012352:	bf00      	nop
 8012354:	3714      	adds	r7, #20
 8012356:	46bd      	mov	sp, r7
 8012358:	f85d 7b04 	ldr.w	r7, [sp], #4
 801235c:	4770      	bx	lr

0801235e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801235e:	b480      	push	{r7}
 8012360:	b085      	sub	sp, #20
 8012362:	af00      	add	r7, sp, #0
 8012364:	6078      	str	r0, [r7, #4]
 8012366:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8012368:	683b      	ldr	r3, [r7, #0]
 801236a:	681b      	ldr	r3, [r3, #0]
 801236c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801236e:	68bb      	ldr	r3, [r7, #8]
 8012370:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012374:	d103      	bne.n	801237e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	691b      	ldr	r3, [r3, #16]
 801237a:	60fb      	str	r3, [r7, #12]
 801237c:	e00c      	b.n	8012398 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801237e:	687b      	ldr	r3, [r7, #4]
 8012380:	3308      	adds	r3, #8
 8012382:	60fb      	str	r3, [r7, #12]
 8012384:	e002      	b.n	801238c <vListInsert+0x2e>
 8012386:	68fb      	ldr	r3, [r7, #12]
 8012388:	685b      	ldr	r3, [r3, #4]
 801238a:	60fb      	str	r3, [r7, #12]
 801238c:	68fb      	ldr	r3, [r7, #12]
 801238e:	685b      	ldr	r3, [r3, #4]
 8012390:	681b      	ldr	r3, [r3, #0]
 8012392:	68ba      	ldr	r2, [r7, #8]
 8012394:	429a      	cmp	r2, r3
 8012396:	d2f6      	bcs.n	8012386 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8012398:	68fb      	ldr	r3, [r7, #12]
 801239a:	685a      	ldr	r2, [r3, #4]
 801239c:	683b      	ldr	r3, [r7, #0]
 801239e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80123a0:	683b      	ldr	r3, [r7, #0]
 80123a2:	685b      	ldr	r3, [r3, #4]
 80123a4:	683a      	ldr	r2, [r7, #0]
 80123a6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80123a8:	683b      	ldr	r3, [r7, #0]
 80123aa:	68fa      	ldr	r2, [r7, #12]
 80123ac:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80123ae:	68fb      	ldr	r3, [r7, #12]
 80123b0:	683a      	ldr	r2, [r7, #0]
 80123b2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80123b4:	683b      	ldr	r3, [r7, #0]
 80123b6:	687a      	ldr	r2, [r7, #4]
 80123b8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80123ba:	687b      	ldr	r3, [r7, #4]
 80123bc:	681b      	ldr	r3, [r3, #0]
 80123be:	1c5a      	adds	r2, r3, #1
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	601a      	str	r2, [r3, #0]
}
 80123c4:	bf00      	nop
 80123c6:	3714      	adds	r7, #20
 80123c8:	46bd      	mov	sp, r7
 80123ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123ce:	4770      	bx	lr

080123d0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80123d0:	b480      	push	{r7}
 80123d2:	b085      	sub	sp, #20
 80123d4:	af00      	add	r7, sp, #0
 80123d6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	691b      	ldr	r3, [r3, #16]
 80123dc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80123de:	687b      	ldr	r3, [r7, #4]
 80123e0:	685b      	ldr	r3, [r3, #4]
 80123e2:	687a      	ldr	r2, [r7, #4]
 80123e4:	6892      	ldr	r2, [r2, #8]
 80123e6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	689b      	ldr	r3, [r3, #8]
 80123ec:	687a      	ldr	r2, [r7, #4]
 80123ee:	6852      	ldr	r2, [r2, #4]
 80123f0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80123f2:	68fb      	ldr	r3, [r7, #12]
 80123f4:	685b      	ldr	r3, [r3, #4]
 80123f6:	687a      	ldr	r2, [r7, #4]
 80123f8:	429a      	cmp	r2, r3
 80123fa:	d103      	bne.n	8012404 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80123fc:	687b      	ldr	r3, [r7, #4]
 80123fe:	689a      	ldr	r2, [r3, #8]
 8012400:	68fb      	ldr	r3, [r7, #12]
 8012402:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	2200      	movs	r2, #0
 8012408:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801240a:	68fb      	ldr	r3, [r7, #12]
 801240c:	681b      	ldr	r3, [r3, #0]
 801240e:	1e5a      	subs	r2, r3, #1
 8012410:	68fb      	ldr	r3, [r7, #12]
 8012412:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8012414:	68fb      	ldr	r3, [r7, #12]
 8012416:	681b      	ldr	r3, [r3, #0]
}
 8012418:	4618      	mov	r0, r3
 801241a:	3714      	adds	r7, #20
 801241c:	46bd      	mov	sp, r7
 801241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012422:	4770      	bx	lr

08012424 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8012424:	b580      	push	{r7, lr}
 8012426:	b084      	sub	sp, #16
 8012428:	af00      	add	r7, sp, #0
 801242a:	6078      	str	r0, [r7, #4]
 801242c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801242e:	687b      	ldr	r3, [r7, #4]
 8012430:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8012432:	68fb      	ldr	r3, [r7, #12]
 8012434:	2b00      	cmp	r3, #0
 8012436:	d10b      	bne.n	8012450 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8012438:	f04f 0350 	mov.w	r3, #80	; 0x50
 801243c:	b672      	cpsid	i
 801243e:	f383 8811 	msr	BASEPRI, r3
 8012442:	f3bf 8f6f 	isb	sy
 8012446:	f3bf 8f4f 	dsb	sy
 801244a:	b662      	cpsie	i
 801244c:	60bb      	str	r3, [r7, #8]
 801244e:	e7fe      	b.n	801244e <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 8012450:	f002 fc92 	bl	8014d78 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012454:	68fb      	ldr	r3, [r7, #12]
 8012456:	681a      	ldr	r2, [r3, #0]
 8012458:	68fb      	ldr	r3, [r7, #12]
 801245a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801245c:	68f9      	ldr	r1, [r7, #12]
 801245e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8012460:	fb01 f303 	mul.w	r3, r1, r3
 8012464:	441a      	add	r2, r3
 8012466:	68fb      	ldr	r3, [r7, #12]
 8012468:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801246a:	68fb      	ldr	r3, [r7, #12]
 801246c:	2200      	movs	r2, #0
 801246e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8012470:	68fb      	ldr	r3, [r7, #12]
 8012472:	681a      	ldr	r2, [r3, #0]
 8012474:	68fb      	ldr	r3, [r7, #12]
 8012476:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012478:	68fb      	ldr	r3, [r7, #12]
 801247a:	681a      	ldr	r2, [r3, #0]
 801247c:	68fb      	ldr	r3, [r7, #12]
 801247e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012480:	3b01      	subs	r3, #1
 8012482:	68f9      	ldr	r1, [r7, #12]
 8012484:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8012486:	fb01 f303 	mul.w	r3, r1, r3
 801248a:	441a      	add	r2, r3
 801248c:	68fb      	ldr	r3, [r7, #12]
 801248e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8012490:	68fb      	ldr	r3, [r7, #12]
 8012492:	22ff      	movs	r2, #255	; 0xff
 8012494:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8012498:	68fb      	ldr	r3, [r7, #12]
 801249a:	22ff      	movs	r2, #255	; 0xff
 801249c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80124a0:	683b      	ldr	r3, [r7, #0]
 80124a2:	2b00      	cmp	r3, #0
 80124a4:	d114      	bne.n	80124d0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80124a6:	68fb      	ldr	r3, [r7, #12]
 80124a8:	691b      	ldr	r3, [r3, #16]
 80124aa:	2b00      	cmp	r3, #0
 80124ac:	d01a      	beq.n	80124e4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80124ae:	68fb      	ldr	r3, [r7, #12]
 80124b0:	3310      	adds	r3, #16
 80124b2:	4618      	mov	r0, r3
 80124b4:	f001 fc64 	bl	8013d80 <xTaskRemoveFromEventList>
 80124b8:	4603      	mov	r3, r0
 80124ba:	2b00      	cmp	r3, #0
 80124bc:	d012      	beq.n	80124e4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80124be:	4b0d      	ldr	r3, [pc, #52]	; (80124f4 <xQueueGenericReset+0xd0>)
 80124c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80124c4:	601a      	str	r2, [r3, #0]
 80124c6:	f3bf 8f4f 	dsb	sy
 80124ca:	f3bf 8f6f 	isb	sy
 80124ce:	e009      	b.n	80124e4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80124d0:	68fb      	ldr	r3, [r7, #12]
 80124d2:	3310      	adds	r3, #16
 80124d4:	4618      	mov	r0, r3
 80124d6:	f7ff fef1 	bl	80122bc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80124da:	68fb      	ldr	r3, [r7, #12]
 80124dc:	3324      	adds	r3, #36	; 0x24
 80124de:	4618      	mov	r0, r3
 80124e0:	f7ff feec 	bl	80122bc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80124e4:	f002 fc7a 	bl	8014ddc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80124e8:	2301      	movs	r3, #1
}
 80124ea:	4618      	mov	r0, r3
 80124ec:	3710      	adds	r7, #16
 80124ee:	46bd      	mov	sp, r7
 80124f0:	bd80      	pop	{r7, pc}
 80124f2:	bf00      	nop
 80124f4:	e000ed04 	.word	0xe000ed04

080124f8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80124f8:	b580      	push	{r7, lr}
 80124fa:	b08e      	sub	sp, #56	; 0x38
 80124fc:	af02      	add	r7, sp, #8
 80124fe:	60f8      	str	r0, [r7, #12]
 8012500:	60b9      	str	r1, [r7, #8]
 8012502:	607a      	str	r2, [r7, #4]
 8012504:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8012506:	68fb      	ldr	r3, [r7, #12]
 8012508:	2b00      	cmp	r3, #0
 801250a:	d10b      	bne.n	8012524 <xQueueGenericCreateStatic+0x2c>
 801250c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012510:	b672      	cpsid	i
 8012512:	f383 8811 	msr	BASEPRI, r3
 8012516:	f3bf 8f6f 	isb	sy
 801251a:	f3bf 8f4f 	dsb	sy
 801251e:	b662      	cpsie	i
 8012520:	62bb      	str	r3, [r7, #40]	; 0x28
 8012522:	e7fe      	b.n	8012522 <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8012524:	683b      	ldr	r3, [r7, #0]
 8012526:	2b00      	cmp	r3, #0
 8012528:	d10b      	bne.n	8012542 <xQueueGenericCreateStatic+0x4a>
 801252a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801252e:	b672      	cpsid	i
 8012530:	f383 8811 	msr	BASEPRI, r3
 8012534:	f3bf 8f6f 	isb	sy
 8012538:	f3bf 8f4f 	dsb	sy
 801253c:	b662      	cpsie	i
 801253e:	627b      	str	r3, [r7, #36]	; 0x24
 8012540:	e7fe      	b.n	8012540 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8012542:	687b      	ldr	r3, [r7, #4]
 8012544:	2b00      	cmp	r3, #0
 8012546:	d002      	beq.n	801254e <xQueueGenericCreateStatic+0x56>
 8012548:	68bb      	ldr	r3, [r7, #8]
 801254a:	2b00      	cmp	r3, #0
 801254c:	d001      	beq.n	8012552 <xQueueGenericCreateStatic+0x5a>
 801254e:	2301      	movs	r3, #1
 8012550:	e000      	b.n	8012554 <xQueueGenericCreateStatic+0x5c>
 8012552:	2300      	movs	r3, #0
 8012554:	2b00      	cmp	r3, #0
 8012556:	d10b      	bne.n	8012570 <xQueueGenericCreateStatic+0x78>
 8012558:	f04f 0350 	mov.w	r3, #80	; 0x50
 801255c:	b672      	cpsid	i
 801255e:	f383 8811 	msr	BASEPRI, r3
 8012562:	f3bf 8f6f 	isb	sy
 8012566:	f3bf 8f4f 	dsb	sy
 801256a:	b662      	cpsie	i
 801256c:	623b      	str	r3, [r7, #32]
 801256e:	e7fe      	b.n	801256e <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8012570:	687b      	ldr	r3, [r7, #4]
 8012572:	2b00      	cmp	r3, #0
 8012574:	d102      	bne.n	801257c <xQueueGenericCreateStatic+0x84>
 8012576:	68bb      	ldr	r3, [r7, #8]
 8012578:	2b00      	cmp	r3, #0
 801257a:	d101      	bne.n	8012580 <xQueueGenericCreateStatic+0x88>
 801257c:	2301      	movs	r3, #1
 801257e:	e000      	b.n	8012582 <xQueueGenericCreateStatic+0x8a>
 8012580:	2300      	movs	r3, #0
 8012582:	2b00      	cmp	r3, #0
 8012584:	d10b      	bne.n	801259e <xQueueGenericCreateStatic+0xa6>
 8012586:	f04f 0350 	mov.w	r3, #80	; 0x50
 801258a:	b672      	cpsid	i
 801258c:	f383 8811 	msr	BASEPRI, r3
 8012590:	f3bf 8f6f 	isb	sy
 8012594:	f3bf 8f4f 	dsb	sy
 8012598:	b662      	cpsie	i
 801259a:	61fb      	str	r3, [r7, #28]
 801259c:	e7fe      	b.n	801259c <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801259e:	2350      	movs	r3, #80	; 0x50
 80125a0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80125a2:	697b      	ldr	r3, [r7, #20]
 80125a4:	2b50      	cmp	r3, #80	; 0x50
 80125a6:	d00b      	beq.n	80125c0 <xQueueGenericCreateStatic+0xc8>
 80125a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125ac:	b672      	cpsid	i
 80125ae:	f383 8811 	msr	BASEPRI, r3
 80125b2:	f3bf 8f6f 	isb	sy
 80125b6:	f3bf 8f4f 	dsb	sy
 80125ba:	b662      	cpsie	i
 80125bc:	61bb      	str	r3, [r7, #24]
 80125be:	e7fe      	b.n	80125be <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80125c0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80125c2:	683b      	ldr	r3, [r7, #0]
 80125c4:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80125c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125c8:	2b00      	cmp	r3, #0
 80125ca:	d00d      	beq.n	80125e8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80125cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125ce:	2201      	movs	r2, #1
 80125d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80125d4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80125d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125da:	9300      	str	r3, [sp, #0]
 80125dc:	4613      	mov	r3, r2
 80125de:	687a      	ldr	r2, [r7, #4]
 80125e0:	68b9      	ldr	r1, [r7, #8]
 80125e2:	68f8      	ldr	r0, [r7, #12]
 80125e4:	f000 f846 	bl	8012674 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80125e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80125ea:	4618      	mov	r0, r3
 80125ec:	3730      	adds	r7, #48	; 0x30
 80125ee:	46bd      	mov	sp, r7
 80125f0:	bd80      	pop	{r7, pc}

080125f2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80125f2:	b580      	push	{r7, lr}
 80125f4:	b08a      	sub	sp, #40	; 0x28
 80125f6:	af02      	add	r7, sp, #8
 80125f8:	60f8      	str	r0, [r7, #12]
 80125fa:	60b9      	str	r1, [r7, #8]
 80125fc:	4613      	mov	r3, r2
 80125fe:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8012600:	68fb      	ldr	r3, [r7, #12]
 8012602:	2b00      	cmp	r3, #0
 8012604:	d10b      	bne.n	801261e <xQueueGenericCreate+0x2c>
 8012606:	f04f 0350 	mov.w	r3, #80	; 0x50
 801260a:	b672      	cpsid	i
 801260c:	f383 8811 	msr	BASEPRI, r3
 8012610:	f3bf 8f6f 	isb	sy
 8012614:	f3bf 8f4f 	dsb	sy
 8012618:	b662      	cpsie	i
 801261a:	613b      	str	r3, [r7, #16]
 801261c:	e7fe      	b.n	801261c <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 801261e:	68bb      	ldr	r3, [r7, #8]
 8012620:	2b00      	cmp	r3, #0
 8012622:	d102      	bne.n	801262a <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8012624:	2300      	movs	r3, #0
 8012626:	61fb      	str	r3, [r7, #28]
 8012628:	e004      	b.n	8012634 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801262a:	68fb      	ldr	r3, [r7, #12]
 801262c:	68ba      	ldr	r2, [r7, #8]
 801262e:	fb02 f303 	mul.w	r3, r2, r3
 8012632:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8012634:	69fb      	ldr	r3, [r7, #28]
 8012636:	3350      	adds	r3, #80	; 0x50
 8012638:	4618      	mov	r0, r3
 801263a:	f002 fcbf 	bl	8014fbc <pvPortMalloc>
 801263e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8012640:	69bb      	ldr	r3, [r7, #24]
 8012642:	2b00      	cmp	r3, #0
 8012644:	d011      	beq.n	801266a <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8012646:	69bb      	ldr	r3, [r7, #24]
 8012648:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801264a:	697b      	ldr	r3, [r7, #20]
 801264c:	3350      	adds	r3, #80	; 0x50
 801264e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8012650:	69bb      	ldr	r3, [r7, #24]
 8012652:	2200      	movs	r2, #0
 8012654:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8012658:	79fa      	ldrb	r2, [r7, #7]
 801265a:	69bb      	ldr	r3, [r7, #24]
 801265c:	9300      	str	r3, [sp, #0]
 801265e:	4613      	mov	r3, r2
 8012660:	697a      	ldr	r2, [r7, #20]
 8012662:	68b9      	ldr	r1, [r7, #8]
 8012664:	68f8      	ldr	r0, [r7, #12]
 8012666:	f000 f805 	bl	8012674 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801266a:	69bb      	ldr	r3, [r7, #24]
	}
 801266c:	4618      	mov	r0, r3
 801266e:	3720      	adds	r7, #32
 8012670:	46bd      	mov	sp, r7
 8012672:	bd80      	pop	{r7, pc}

08012674 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8012674:	b580      	push	{r7, lr}
 8012676:	b084      	sub	sp, #16
 8012678:	af00      	add	r7, sp, #0
 801267a:	60f8      	str	r0, [r7, #12]
 801267c:	60b9      	str	r1, [r7, #8]
 801267e:	607a      	str	r2, [r7, #4]
 8012680:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8012682:	68bb      	ldr	r3, [r7, #8]
 8012684:	2b00      	cmp	r3, #0
 8012686:	d103      	bne.n	8012690 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8012688:	69bb      	ldr	r3, [r7, #24]
 801268a:	69ba      	ldr	r2, [r7, #24]
 801268c:	601a      	str	r2, [r3, #0]
 801268e:	e002      	b.n	8012696 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8012690:	69bb      	ldr	r3, [r7, #24]
 8012692:	687a      	ldr	r2, [r7, #4]
 8012694:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8012696:	69bb      	ldr	r3, [r7, #24]
 8012698:	68fa      	ldr	r2, [r7, #12]
 801269a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 801269c:	69bb      	ldr	r3, [r7, #24]
 801269e:	68ba      	ldr	r2, [r7, #8]
 80126a0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80126a2:	2101      	movs	r1, #1
 80126a4:	69b8      	ldr	r0, [r7, #24]
 80126a6:	f7ff febd 	bl	8012424 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80126aa:	69bb      	ldr	r3, [r7, #24]
 80126ac:	78fa      	ldrb	r2, [r7, #3]
 80126ae:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80126b2:	bf00      	nop
 80126b4:	3710      	adds	r7, #16
 80126b6:	46bd      	mov	sp, r7
 80126b8:	bd80      	pop	{r7, pc}

080126ba <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80126ba:	b580      	push	{r7, lr}
 80126bc:	b08a      	sub	sp, #40	; 0x28
 80126be:	af02      	add	r7, sp, #8
 80126c0:	60f8      	str	r0, [r7, #12]
 80126c2:	60b9      	str	r1, [r7, #8]
 80126c4:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80126c6:	68fb      	ldr	r3, [r7, #12]
 80126c8:	2b00      	cmp	r3, #0
 80126ca:	d10b      	bne.n	80126e4 <xQueueCreateCountingSemaphoreStatic+0x2a>
 80126cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126d0:	b672      	cpsid	i
 80126d2:	f383 8811 	msr	BASEPRI, r3
 80126d6:	f3bf 8f6f 	isb	sy
 80126da:	f3bf 8f4f 	dsb	sy
 80126de:	b662      	cpsie	i
 80126e0:	61bb      	str	r3, [r7, #24]
 80126e2:	e7fe      	b.n	80126e2 <xQueueCreateCountingSemaphoreStatic+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 80126e4:	68ba      	ldr	r2, [r7, #8]
 80126e6:	68fb      	ldr	r3, [r7, #12]
 80126e8:	429a      	cmp	r2, r3
 80126ea:	d90b      	bls.n	8012704 <xQueueCreateCountingSemaphoreStatic+0x4a>
 80126ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126f0:	b672      	cpsid	i
 80126f2:	f383 8811 	msr	BASEPRI, r3
 80126f6:	f3bf 8f6f 	isb	sy
 80126fa:	f3bf 8f4f 	dsb	sy
 80126fe:	b662      	cpsie	i
 8012700:	617b      	str	r3, [r7, #20]
 8012702:	e7fe      	b.n	8012702 <xQueueCreateCountingSemaphoreStatic+0x48>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8012704:	2302      	movs	r3, #2
 8012706:	9300      	str	r3, [sp, #0]
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	2200      	movs	r2, #0
 801270c:	2100      	movs	r1, #0
 801270e:	68f8      	ldr	r0, [r7, #12]
 8012710:	f7ff fef2 	bl	80124f8 <xQueueGenericCreateStatic>
 8012714:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8012716:	69fb      	ldr	r3, [r7, #28]
 8012718:	2b00      	cmp	r3, #0
 801271a:	d002      	beq.n	8012722 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 801271c:	69fb      	ldr	r3, [r7, #28]
 801271e:	68ba      	ldr	r2, [r7, #8]
 8012720:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8012722:	69fb      	ldr	r3, [r7, #28]
	}
 8012724:	4618      	mov	r0, r3
 8012726:	3720      	adds	r7, #32
 8012728:	46bd      	mov	sp, r7
 801272a:	bd80      	pop	{r7, pc}

0801272c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 801272c:	b580      	push	{r7, lr}
 801272e:	b086      	sub	sp, #24
 8012730:	af00      	add	r7, sp, #0
 8012732:	6078      	str	r0, [r7, #4]
 8012734:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8012736:	687b      	ldr	r3, [r7, #4]
 8012738:	2b00      	cmp	r3, #0
 801273a:	d10b      	bne.n	8012754 <xQueueCreateCountingSemaphore+0x28>
 801273c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012740:	b672      	cpsid	i
 8012742:	f383 8811 	msr	BASEPRI, r3
 8012746:	f3bf 8f6f 	isb	sy
 801274a:	f3bf 8f4f 	dsb	sy
 801274e:	b662      	cpsie	i
 8012750:	613b      	str	r3, [r7, #16]
 8012752:	e7fe      	b.n	8012752 <xQueueCreateCountingSemaphore+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8012754:	683a      	ldr	r2, [r7, #0]
 8012756:	687b      	ldr	r3, [r7, #4]
 8012758:	429a      	cmp	r2, r3
 801275a:	d90b      	bls.n	8012774 <xQueueCreateCountingSemaphore+0x48>
 801275c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012760:	b672      	cpsid	i
 8012762:	f383 8811 	msr	BASEPRI, r3
 8012766:	f3bf 8f6f 	isb	sy
 801276a:	f3bf 8f4f 	dsb	sy
 801276e:	b662      	cpsie	i
 8012770:	60fb      	str	r3, [r7, #12]
 8012772:	e7fe      	b.n	8012772 <xQueueCreateCountingSemaphore+0x46>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8012774:	2202      	movs	r2, #2
 8012776:	2100      	movs	r1, #0
 8012778:	6878      	ldr	r0, [r7, #4]
 801277a:	f7ff ff3a 	bl	80125f2 <xQueueGenericCreate>
 801277e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8012780:	697b      	ldr	r3, [r7, #20]
 8012782:	2b00      	cmp	r3, #0
 8012784:	d002      	beq.n	801278c <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8012786:	697b      	ldr	r3, [r7, #20]
 8012788:	683a      	ldr	r2, [r7, #0]
 801278a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 801278c:	697b      	ldr	r3, [r7, #20]
	}
 801278e:	4618      	mov	r0, r3
 8012790:	3718      	adds	r7, #24
 8012792:	46bd      	mov	sp, r7
 8012794:	bd80      	pop	{r7, pc}
	...

08012798 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8012798:	b580      	push	{r7, lr}
 801279a:	b08e      	sub	sp, #56	; 0x38
 801279c:	af00      	add	r7, sp, #0
 801279e:	60f8      	str	r0, [r7, #12]
 80127a0:	60b9      	str	r1, [r7, #8]
 80127a2:	607a      	str	r2, [r7, #4]
 80127a4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80127a6:	2300      	movs	r3, #0
 80127a8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80127aa:	68fb      	ldr	r3, [r7, #12]
 80127ac:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80127ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127b0:	2b00      	cmp	r3, #0
 80127b2:	d10b      	bne.n	80127cc <xQueueGenericSend+0x34>
 80127b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127b8:	b672      	cpsid	i
 80127ba:	f383 8811 	msr	BASEPRI, r3
 80127be:	f3bf 8f6f 	isb	sy
 80127c2:	f3bf 8f4f 	dsb	sy
 80127c6:	b662      	cpsie	i
 80127c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80127ca:	e7fe      	b.n	80127ca <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80127cc:	68bb      	ldr	r3, [r7, #8]
 80127ce:	2b00      	cmp	r3, #0
 80127d0:	d103      	bne.n	80127da <xQueueGenericSend+0x42>
 80127d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80127d6:	2b00      	cmp	r3, #0
 80127d8:	d101      	bne.n	80127de <xQueueGenericSend+0x46>
 80127da:	2301      	movs	r3, #1
 80127dc:	e000      	b.n	80127e0 <xQueueGenericSend+0x48>
 80127de:	2300      	movs	r3, #0
 80127e0:	2b00      	cmp	r3, #0
 80127e2:	d10b      	bne.n	80127fc <xQueueGenericSend+0x64>
 80127e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127e8:	b672      	cpsid	i
 80127ea:	f383 8811 	msr	BASEPRI, r3
 80127ee:	f3bf 8f6f 	isb	sy
 80127f2:	f3bf 8f4f 	dsb	sy
 80127f6:	b662      	cpsie	i
 80127f8:	627b      	str	r3, [r7, #36]	; 0x24
 80127fa:	e7fe      	b.n	80127fa <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80127fc:	683b      	ldr	r3, [r7, #0]
 80127fe:	2b02      	cmp	r3, #2
 8012800:	d103      	bne.n	801280a <xQueueGenericSend+0x72>
 8012802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012804:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012806:	2b01      	cmp	r3, #1
 8012808:	d101      	bne.n	801280e <xQueueGenericSend+0x76>
 801280a:	2301      	movs	r3, #1
 801280c:	e000      	b.n	8012810 <xQueueGenericSend+0x78>
 801280e:	2300      	movs	r3, #0
 8012810:	2b00      	cmp	r3, #0
 8012812:	d10b      	bne.n	801282c <xQueueGenericSend+0x94>
 8012814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012818:	b672      	cpsid	i
 801281a:	f383 8811 	msr	BASEPRI, r3
 801281e:	f3bf 8f6f 	isb	sy
 8012822:	f3bf 8f4f 	dsb	sy
 8012826:	b662      	cpsie	i
 8012828:	623b      	str	r3, [r7, #32]
 801282a:	e7fe      	b.n	801282a <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801282c:	f001 fc66 	bl	80140fc <xTaskGetSchedulerState>
 8012830:	4603      	mov	r3, r0
 8012832:	2b00      	cmp	r3, #0
 8012834:	d102      	bne.n	801283c <xQueueGenericSend+0xa4>
 8012836:	687b      	ldr	r3, [r7, #4]
 8012838:	2b00      	cmp	r3, #0
 801283a:	d101      	bne.n	8012840 <xQueueGenericSend+0xa8>
 801283c:	2301      	movs	r3, #1
 801283e:	e000      	b.n	8012842 <xQueueGenericSend+0xaa>
 8012840:	2300      	movs	r3, #0
 8012842:	2b00      	cmp	r3, #0
 8012844:	d10b      	bne.n	801285e <xQueueGenericSend+0xc6>
 8012846:	f04f 0350 	mov.w	r3, #80	; 0x50
 801284a:	b672      	cpsid	i
 801284c:	f383 8811 	msr	BASEPRI, r3
 8012850:	f3bf 8f6f 	isb	sy
 8012854:	f3bf 8f4f 	dsb	sy
 8012858:	b662      	cpsie	i
 801285a:	61fb      	str	r3, [r7, #28]
 801285c:	e7fe      	b.n	801285c <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801285e:	f002 fa8b 	bl	8014d78 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8012862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012864:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012868:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801286a:	429a      	cmp	r2, r3
 801286c:	d302      	bcc.n	8012874 <xQueueGenericSend+0xdc>
 801286e:	683b      	ldr	r3, [r7, #0]
 8012870:	2b02      	cmp	r3, #2
 8012872:	d129      	bne.n	80128c8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012874:	683a      	ldr	r2, [r7, #0]
 8012876:	68b9      	ldr	r1, [r7, #8]
 8012878:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801287a:	f000 fc6e 	bl	801315a <prvCopyDataToQueue>
 801287e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012884:	2b00      	cmp	r3, #0
 8012886:	d010      	beq.n	80128aa <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801288a:	3324      	adds	r3, #36	; 0x24
 801288c:	4618      	mov	r0, r3
 801288e:	f001 fa77 	bl	8013d80 <xTaskRemoveFromEventList>
 8012892:	4603      	mov	r3, r0
 8012894:	2b00      	cmp	r3, #0
 8012896:	d013      	beq.n	80128c0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8012898:	4b3f      	ldr	r3, [pc, #252]	; (8012998 <xQueueGenericSend+0x200>)
 801289a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801289e:	601a      	str	r2, [r3, #0]
 80128a0:	f3bf 8f4f 	dsb	sy
 80128a4:	f3bf 8f6f 	isb	sy
 80128a8:	e00a      	b.n	80128c0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80128aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128ac:	2b00      	cmp	r3, #0
 80128ae:	d007      	beq.n	80128c0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80128b0:	4b39      	ldr	r3, [pc, #228]	; (8012998 <xQueueGenericSend+0x200>)
 80128b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80128b6:	601a      	str	r2, [r3, #0]
 80128b8:	f3bf 8f4f 	dsb	sy
 80128bc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80128c0:	f002 fa8c 	bl	8014ddc <vPortExitCritical>
				return pdPASS;
 80128c4:	2301      	movs	r3, #1
 80128c6:	e063      	b.n	8012990 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80128c8:	687b      	ldr	r3, [r7, #4]
 80128ca:	2b00      	cmp	r3, #0
 80128cc:	d103      	bne.n	80128d6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80128ce:	f002 fa85 	bl	8014ddc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80128d2:	2300      	movs	r3, #0
 80128d4:	e05c      	b.n	8012990 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80128d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80128d8:	2b00      	cmp	r3, #0
 80128da:	d106      	bne.n	80128ea <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80128dc:	f107 0314 	add.w	r3, r7, #20
 80128e0:	4618      	mov	r0, r3
 80128e2:	f001 fab1 	bl	8013e48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80128e6:	2301      	movs	r3, #1
 80128e8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80128ea:	f002 fa77 	bl	8014ddc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80128ee:	f001 f80f 	bl	8013910 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80128f2:	f002 fa41 	bl	8014d78 <vPortEnterCritical>
 80128f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80128fc:	b25b      	sxtb	r3, r3
 80128fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012902:	d103      	bne.n	801290c <xQueueGenericSend+0x174>
 8012904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012906:	2200      	movs	r2, #0
 8012908:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801290c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801290e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012912:	b25b      	sxtb	r3, r3
 8012914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012918:	d103      	bne.n	8012922 <xQueueGenericSend+0x18a>
 801291a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801291c:	2200      	movs	r2, #0
 801291e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012922:	f002 fa5b 	bl	8014ddc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012926:	1d3a      	adds	r2, r7, #4
 8012928:	f107 0314 	add.w	r3, r7, #20
 801292c:	4611      	mov	r1, r2
 801292e:	4618      	mov	r0, r3
 8012930:	f001 faa0 	bl	8013e74 <xTaskCheckForTimeOut>
 8012934:	4603      	mov	r3, r0
 8012936:	2b00      	cmp	r3, #0
 8012938:	d124      	bne.n	8012984 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801293a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801293c:	f000 fd05 	bl	801334a <prvIsQueueFull>
 8012940:	4603      	mov	r3, r0
 8012942:	2b00      	cmp	r3, #0
 8012944:	d018      	beq.n	8012978 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8012946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012948:	3310      	adds	r3, #16
 801294a:	687a      	ldr	r2, [r7, #4]
 801294c:	4611      	mov	r1, r2
 801294e:	4618      	mov	r0, r3
 8012950:	f001 f9c4 	bl	8013cdc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8012954:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012956:	f000 fc90 	bl	801327a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801295a:	f000 ffe7 	bl	801392c <xTaskResumeAll>
 801295e:	4603      	mov	r3, r0
 8012960:	2b00      	cmp	r3, #0
 8012962:	f47f af7c 	bne.w	801285e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8012966:	4b0c      	ldr	r3, [pc, #48]	; (8012998 <xQueueGenericSend+0x200>)
 8012968:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801296c:	601a      	str	r2, [r3, #0]
 801296e:	f3bf 8f4f 	dsb	sy
 8012972:	f3bf 8f6f 	isb	sy
 8012976:	e772      	b.n	801285e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8012978:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801297a:	f000 fc7e 	bl	801327a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801297e:	f000 ffd5 	bl	801392c <xTaskResumeAll>
 8012982:	e76c      	b.n	801285e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8012984:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012986:	f000 fc78 	bl	801327a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801298a:	f000 ffcf 	bl	801392c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801298e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8012990:	4618      	mov	r0, r3
 8012992:	3738      	adds	r7, #56	; 0x38
 8012994:	46bd      	mov	sp, r7
 8012996:	bd80      	pop	{r7, pc}
 8012998:	e000ed04 	.word	0xe000ed04

0801299c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 801299c:	b580      	push	{r7, lr}
 801299e:	b08e      	sub	sp, #56	; 0x38
 80129a0:	af00      	add	r7, sp, #0
 80129a2:	60f8      	str	r0, [r7, #12]
 80129a4:	60b9      	str	r1, [r7, #8]
 80129a6:	607a      	str	r2, [r7, #4]
 80129a8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80129aa:	68fb      	ldr	r3, [r7, #12]
 80129ac:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80129ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129b0:	2b00      	cmp	r3, #0
 80129b2:	d10b      	bne.n	80129cc <xQueueGenericSendFromISR+0x30>
 80129b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129b8:	b672      	cpsid	i
 80129ba:	f383 8811 	msr	BASEPRI, r3
 80129be:	f3bf 8f6f 	isb	sy
 80129c2:	f3bf 8f4f 	dsb	sy
 80129c6:	b662      	cpsie	i
 80129c8:	627b      	str	r3, [r7, #36]	; 0x24
 80129ca:	e7fe      	b.n	80129ca <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80129cc:	68bb      	ldr	r3, [r7, #8]
 80129ce:	2b00      	cmp	r3, #0
 80129d0:	d103      	bne.n	80129da <xQueueGenericSendFromISR+0x3e>
 80129d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80129d6:	2b00      	cmp	r3, #0
 80129d8:	d101      	bne.n	80129de <xQueueGenericSendFromISR+0x42>
 80129da:	2301      	movs	r3, #1
 80129dc:	e000      	b.n	80129e0 <xQueueGenericSendFromISR+0x44>
 80129de:	2300      	movs	r3, #0
 80129e0:	2b00      	cmp	r3, #0
 80129e2:	d10b      	bne.n	80129fc <xQueueGenericSendFromISR+0x60>
 80129e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129e8:	b672      	cpsid	i
 80129ea:	f383 8811 	msr	BASEPRI, r3
 80129ee:	f3bf 8f6f 	isb	sy
 80129f2:	f3bf 8f4f 	dsb	sy
 80129f6:	b662      	cpsie	i
 80129f8:	623b      	str	r3, [r7, #32]
 80129fa:	e7fe      	b.n	80129fa <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80129fc:	683b      	ldr	r3, [r7, #0]
 80129fe:	2b02      	cmp	r3, #2
 8012a00:	d103      	bne.n	8012a0a <xQueueGenericSendFromISR+0x6e>
 8012a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012a06:	2b01      	cmp	r3, #1
 8012a08:	d101      	bne.n	8012a0e <xQueueGenericSendFromISR+0x72>
 8012a0a:	2301      	movs	r3, #1
 8012a0c:	e000      	b.n	8012a10 <xQueueGenericSendFromISR+0x74>
 8012a0e:	2300      	movs	r3, #0
 8012a10:	2b00      	cmp	r3, #0
 8012a12:	d10b      	bne.n	8012a2c <xQueueGenericSendFromISR+0x90>
 8012a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a18:	b672      	cpsid	i
 8012a1a:	f383 8811 	msr	BASEPRI, r3
 8012a1e:	f3bf 8f6f 	isb	sy
 8012a22:	f3bf 8f4f 	dsb	sy
 8012a26:	b662      	cpsie	i
 8012a28:	61fb      	str	r3, [r7, #28]
 8012a2a:	e7fe      	b.n	8012a2a <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012a2c:	f002 fa84 	bl	8014f38 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8012a30:	f3ef 8211 	mrs	r2, BASEPRI
 8012a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a38:	b672      	cpsid	i
 8012a3a:	f383 8811 	msr	BASEPRI, r3
 8012a3e:	f3bf 8f6f 	isb	sy
 8012a42:	f3bf 8f4f 	dsb	sy
 8012a46:	b662      	cpsie	i
 8012a48:	61ba      	str	r2, [r7, #24]
 8012a4a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8012a4c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8012a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012a58:	429a      	cmp	r2, r3
 8012a5a:	d302      	bcc.n	8012a62 <xQueueGenericSendFromISR+0xc6>
 8012a5c:	683b      	ldr	r3, [r7, #0]
 8012a5e:	2b02      	cmp	r3, #2
 8012a60:	d12c      	bne.n	8012abc <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8012a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a64:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012a68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012a6c:	683a      	ldr	r2, [r7, #0]
 8012a6e:	68b9      	ldr	r1, [r7, #8]
 8012a70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012a72:	f000 fb72 	bl	801315a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8012a76:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8012a7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012a7e:	d112      	bne.n	8012aa6 <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a84:	2b00      	cmp	r3, #0
 8012a86:	d016      	beq.n	8012ab6 <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a8a:	3324      	adds	r3, #36	; 0x24
 8012a8c:	4618      	mov	r0, r3
 8012a8e:	f001 f977 	bl	8013d80 <xTaskRemoveFromEventList>
 8012a92:	4603      	mov	r3, r0
 8012a94:	2b00      	cmp	r3, #0
 8012a96:	d00e      	beq.n	8012ab6 <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8012a98:	687b      	ldr	r3, [r7, #4]
 8012a9a:	2b00      	cmp	r3, #0
 8012a9c:	d00b      	beq.n	8012ab6 <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8012a9e:	687b      	ldr	r3, [r7, #4]
 8012aa0:	2201      	movs	r2, #1
 8012aa2:	601a      	str	r2, [r3, #0]
 8012aa4:	e007      	b.n	8012ab6 <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8012aa6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8012aaa:	3301      	adds	r3, #1
 8012aac:	b2db      	uxtb	r3, r3
 8012aae:	b25a      	sxtb	r2, r3
 8012ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ab2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8012ab6:	2301      	movs	r3, #1
 8012ab8:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8012aba:	e001      	b.n	8012ac0 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8012abc:	2300      	movs	r3, #0
 8012abe:	637b      	str	r3, [r7, #52]	; 0x34
 8012ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ac2:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8012ac4:	693b      	ldr	r3, [r7, #16]
 8012ac6:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012aca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8012acc:	4618      	mov	r0, r3
 8012ace:	3738      	adds	r7, #56	; 0x38
 8012ad0:	46bd      	mov	sp, r7
 8012ad2:	bd80      	pop	{r7, pc}

08012ad4 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8012ad4:	b580      	push	{r7, lr}
 8012ad6:	b08e      	sub	sp, #56	; 0x38
 8012ad8:	af00      	add	r7, sp, #0
 8012ada:	6078      	str	r0, [r7, #4]
 8012adc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8012ade:	687b      	ldr	r3, [r7, #4]
 8012ae0:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8012ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ae4:	2b00      	cmp	r3, #0
 8012ae6:	d10b      	bne.n	8012b00 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8012ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012aec:	b672      	cpsid	i
 8012aee:	f383 8811 	msr	BASEPRI, r3
 8012af2:	f3bf 8f6f 	isb	sy
 8012af6:	f3bf 8f4f 	dsb	sy
 8012afa:	b662      	cpsie	i
 8012afc:	623b      	str	r3, [r7, #32]
 8012afe:	e7fe      	b.n	8012afe <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8012b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012b04:	2b00      	cmp	r3, #0
 8012b06:	d00b      	beq.n	8012b20 <xQueueGiveFromISR+0x4c>
 8012b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b0c:	b672      	cpsid	i
 8012b0e:	f383 8811 	msr	BASEPRI, r3
 8012b12:	f3bf 8f6f 	isb	sy
 8012b16:	f3bf 8f4f 	dsb	sy
 8012b1a:	b662      	cpsie	i
 8012b1c:	61fb      	str	r3, [r7, #28]
 8012b1e:	e7fe      	b.n	8012b1e <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8012b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b22:	681b      	ldr	r3, [r3, #0]
 8012b24:	2b00      	cmp	r3, #0
 8012b26:	d103      	bne.n	8012b30 <xQueueGiveFromISR+0x5c>
 8012b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b2a:	689b      	ldr	r3, [r3, #8]
 8012b2c:	2b00      	cmp	r3, #0
 8012b2e:	d101      	bne.n	8012b34 <xQueueGiveFromISR+0x60>
 8012b30:	2301      	movs	r3, #1
 8012b32:	e000      	b.n	8012b36 <xQueueGiveFromISR+0x62>
 8012b34:	2300      	movs	r3, #0
 8012b36:	2b00      	cmp	r3, #0
 8012b38:	d10b      	bne.n	8012b52 <xQueueGiveFromISR+0x7e>
 8012b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b3e:	b672      	cpsid	i
 8012b40:	f383 8811 	msr	BASEPRI, r3
 8012b44:	f3bf 8f6f 	isb	sy
 8012b48:	f3bf 8f4f 	dsb	sy
 8012b4c:	b662      	cpsie	i
 8012b4e:	61bb      	str	r3, [r7, #24]
 8012b50:	e7fe      	b.n	8012b50 <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012b52:	f002 f9f1 	bl	8014f38 <vPortValidateInterruptPriority>
	__asm volatile
 8012b56:	f3ef 8211 	mrs	r2, BASEPRI
 8012b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b5e:	b672      	cpsid	i
 8012b60:	f383 8811 	msr	BASEPRI, r3
 8012b64:	f3bf 8f6f 	isb	sy
 8012b68:	f3bf 8f4f 	dsb	sy
 8012b6c:	b662      	cpsie	i
 8012b6e:	617a      	str	r2, [r7, #20]
 8012b70:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8012b72:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012b74:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012b7a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8012b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012b80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012b82:	429a      	cmp	r2, r3
 8012b84:	d22b      	bcs.n	8012bde <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8012b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012b8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8012b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b92:	1c5a      	adds	r2, r3, #1
 8012b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b96:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8012b98:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012ba0:	d112      	bne.n	8012bc8 <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012ba6:	2b00      	cmp	r3, #0
 8012ba8:	d016      	beq.n	8012bd8 <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bac:	3324      	adds	r3, #36	; 0x24
 8012bae:	4618      	mov	r0, r3
 8012bb0:	f001 f8e6 	bl	8013d80 <xTaskRemoveFromEventList>
 8012bb4:	4603      	mov	r3, r0
 8012bb6:	2b00      	cmp	r3, #0
 8012bb8:	d00e      	beq.n	8012bd8 <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8012bba:	683b      	ldr	r3, [r7, #0]
 8012bbc:	2b00      	cmp	r3, #0
 8012bbe:	d00b      	beq.n	8012bd8 <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8012bc0:	683b      	ldr	r3, [r7, #0]
 8012bc2:	2201      	movs	r2, #1
 8012bc4:	601a      	str	r2, [r3, #0]
 8012bc6:	e007      	b.n	8012bd8 <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8012bc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012bcc:	3301      	adds	r3, #1
 8012bce:	b2db      	uxtb	r3, r3
 8012bd0:	b25a      	sxtb	r2, r3
 8012bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8012bd8:	2301      	movs	r3, #1
 8012bda:	637b      	str	r3, [r7, #52]	; 0x34
 8012bdc:	e001      	b.n	8012be2 <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8012bde:	2300      	movs	r3, #0
 8012be0:	637b      	str	r3, [r7, #52]	; 0x34
 8012be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012be4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8012be6:	68fb      	ldr	r3, [r7, #12]
 8012be8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012bec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8012bee:	4618      	mov	r0, r3
 8012bf0:	3738      	adds	r7, #56	; 0x38
 8012bf2:	46bd      	mov	sp, r7
 8012bf4:	bd80      	pop	{r7, pc}
	...

08012bf8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8012bf8:	b580      	push	{r7, lr}
 8012bfa:	b08c      	sub	sp, #48	; 0x30
 8012bfc:	af00      	add	r7, sp, #0
 8012bfe:	60f8      	str	r0, [r7, #12]
 8012c00:	60b9      	str	r1, [r7, #8]
 8012c02:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8012c04:	2300      	movs	r3, #0
 8012c06:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8012c08:	68fb      	ldr	r3, [r7, #12]
 8012c0a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8012c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c0e:	2b00      	cmp	r3, #0
 8012c10:	d10b      	bne.n	8012c2a <xQueueReceive+0x32>
	__asm volatile
 8012c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c16:	b672      	cpsid	i
 8012c18:	f383 8811 	msr	BASEPRI, r3
 8012c1c:	f3bf 8f6f 	isb	sy
 8012c20:	f3bf 8f4f 	dsb	sy
 8012c24:	b662      	cpsie	i
 8012c26:	623b      	str	r3, [r7, #32]
 8012c28:	e7fe      	b.n	8012c28 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012c2a:	68bb      	ldr	r3, [r7, #8]
 8012c2c:	2b00      	cmp	r3, #0
 8012c2e:	d103      	bne.n	8012c38 <xQueueReceive+0x40>
 8012c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012c34:	2b00      	cmp	r3, #0
 8012c36:	d101      	bne.n	8012c3c <xQueueReceive+0x44>
 8012c38:	2301      	movs	r3, #1
 8012c3a:	e000      	b.n	8012c3e <xQueueReceive+0x46>
 8012c3c:	2300      	movs	r3, #0
 8012c3e:	2b00      	cmp	r3, #0
 8012c40:	d10b      	bne.n	8012c5a <xQueueReceive+0x62>
 8012c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c46:	b672      	cpsid	i
 8012c48:	f383 8811 	msr	BASEPRI, r3
 8012c4c:	f3bf 8f6f 	isb	sy
 8012c50:	f3bf 8f4f 	dsb	sy
 8012c54:	b662      	cpsie	i
 8012c56:	61fb      	str	r3, [r7, #28]
 8012c58:	e7fe      	b.n	8012c58 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012c5a:	f001 fa4f 	bl	80140fc <xTaskGetSchedulerState>
 8012c5e:	4603      	mov	r3, r0
 8012c60:	2b00      	cmp	r3, #0
 8012c62:	d102      	bne.n	8012c6a <xQueueReceive+0x72>
 8012c64:	687b      	ldr	r3, [r7, #4]
 8012c66:	2b00      	cmp	r3, #0
 8012c68:	d101      	bne.n	8012c6e <xQueueReceive+0x76>
 8012c6a:	2301      	movs	r3, #1
 8012c6c:	e000      	b.n	8012c70 <xQueueReceive+0x78>
 8012c6e:	2300      	movs	r3, #0
 8012c70:	2b00      	cmp	r3, #0
 8012c72:	d10b      	bne.n	8012c8c <xQueueReceive+0x94>
 8012c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c78:	b672      	cpsid	i
 8012c7a:	f383 8811 	msr	BASEPRI, r3
 8012c7e:	f3bf 8f6f 	isb	sy
 8012c82:	f3bf 8f4f 	dsb	sy
 8012c86:	b662      	cpsie	i
 8012c88:	61bb      	str	r3, [r7, #24]
 8012c8a:	e7fe      	b.n	8012c8a <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8012c8c:	f002 f874 	bl	8014d78 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012c94:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c98:	2b00      	cmp	r3, #0
 8012c9a:	d01f      	beq.n	8012cdc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8012c9c:	68b9      	ldr	r1, [r7, #8]
 8012c9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012ca0:	f000 fac5 	bl	801322e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8012ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ca6:	1e5a      	subs	r2, r3, #1
 8012ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012caa:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012cae:	691b      	ldr	r3, [r3, #16]
 8012cb0:	2b00      	cmp	r3, #0
 8012cb2:	d00f      	beq.n	8012cd4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012cb6:	3310      	adds	r3, #16
 8012cb8:	4618      	mov	r0, r3
 8012cba:	f001 f861 	bl	8013d80 <xTaskRemoveFromEventList>
 8012cbe:	4603      	mov	r3, r0
 8012cc0:	2b00      	cmp	r3, #0
 8012cc2:	d007      	beq.n	8012cd4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8012cc4:	4b3c      	ldr	r3, [pc, #240]	; (8012db8 <xQueueReceive+0x1c0>)
 8012cc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012cca:	601a      	str	r2, [r3, #0]
 8012ccc:	f3bf 8f4f 	dsb	sy
 8012cd0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8012cd4:	f002 f882 	bl	8014ddc <vPortExitCritical>
				return pdPASS;
 8012cd8:	2301      	movs	r3, #1
 8012cda:	e069      	b.n	8012db0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012cdc:	687b      	ldr	r3, [r7, #4]
 8012cde:	2b00      	cmp	r3, #0
 8012ce0:	d103      	bne.n	8012cea <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8012ce2:	f002 f87b 	bl	8014ddc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8012ce6:	2300      	movs	r3, #0
 8012ce8:	e062      	b.n	8012db0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cec:	2b00      	cmp	r3, #0
 8012cee:	d106      	bne.n	8012cfe <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012cf0:	f107 0310 	add.w	r3, r7, #16
 8012cf4:	4618      	mov	r0, r3
 8012cf6:	f001 f8a7 	bl	8013e48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012cfa:	2301      	movs	r3, #1
 8012cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012cfe:	f002 f86d 	bl	8014ddc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012d02:	f000 fe05 	bl	8013910 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012d06:	f002 f837 	bl	8014d78 <vPortEnterCritical>
 8012d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d0c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012d10:	b25b      	sxtb	r3, r3
 8012d12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012d16:	d103      	bne.n	8012d20 <xQueueReceive+0x128>
 8012d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d1a:	2200      	movs	r2, #0
 8012d1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012d26:	b25b      	sxtb	r3, r3
 8012d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012d2c:	d103      	bne.n	8012d36 <xQueueReceive+0x13e>
 8012d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d30:	2200      	movs	r2, #0
 8012d32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012d36:	f002 f851 	bl	8014ddc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012d3a:	1d3a      	adds	r2, r7, #4
 8012d3c:	f107 0310 	add.w	r3, r7, #16
 8012d40:	4611      	mov	r1, r2
 8012d42:	4618      	mov	r0, r3
 8012d44:	f001 f896 	bl	8013e74 <xTaskCheckForTimeOut>
 8012d48:	4603      	mov	r3, r0
 8012d4a:	2b00      	cmp	r3, #0
 8012d4c:	d123      	bne.n	8012d96 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012d4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012d50:	f000 fae5 	bl	801331e <prvIsQueueEmpty>
 8012d54:	4603      	mov	r3, r0
 8012d56:	2b00      	cmp	r3, #0
 8012d58:	d017      	beq.n	8012d8a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8012d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d5c:	3324      	adds	r3, #36	; 0x24
 8012d5e:	687a      	ldr	r2, [r7, #4]
 8012d60:	4611      	mov	r1, r2
 8012d62:	4618      	mov	r0, r3
 8012d64:	f000 ffba 	bl	8013cdc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8012d68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012d6a:	f000 fa86 	bl	801327a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8012d6e:	f000 fddd 	bl	801392c <xTaskResumeAll>
 8012d72:	4603      	mov	r3, r0
 8012d74:	2b00      	cmp	r3, #0
 8012d76:	d189      	bne.n	8012c8c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8012d78:	4b0f      	ldr	r3, [pc, #60]	; (8012db8 <xQueueReceive+0x1c0>)
 8012d7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012d7e:	601a      	str	r2, [r3, #0]
 8012d80:	f3bf 8f4f 	dsb	sy
 8012d84:	f3bf 8f6f 	isb	sy
 8012d88:	e780      	b.n	8012c8c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8012d8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012d8c:	f000 fa75 	bl	801327a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012d90:	f000 fdcc 	bl	801392c <xTaskResumeAll>
 8012d94:	e77a      	b.n	8012c8c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8012d96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012d98:	f000 fa6f 	bl	801327a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012d9c:	f000 fdc6 	bl	801392c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012da0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012da2:	f000 fabc 	bl	801331e <prvIsQueueEmpty>
 8012da6:	4603      	mov	r3, r0
 8012da8:	2b00      	cmp	r3, #0
 8012daa:	f43f af6f 	beq.w	8012c8c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8012dae:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8012db0:	4618      	mov	r0, r3
 8012db2:	3730      	adds	r7, #48	; 0x30
 8012db4:	46bd      	mov	sp, r7
 8012db6:	bd80      	pop	{r7, pc}
 8012db8:	e000ed04 	.word	0xe000ed04

08012dbc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8012dbc:	b580      	push	{r7, lr}
 8012dbe:	b08e      	sub	sp, #56	; 0x38
 8012dc0:	af00      	add	r7, sp, #0
 8012dc2:	6078      	str	r0, [r7, #4]
 8012dc4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8012dc6:	2300      	movs	r3, #0
 8012dc8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8012dca:	687b      	ldr	r3, [r7, #4]
 8012dcc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8012dce:	2300      	movs	r3, #0
 8012dd0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8012dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012dd4:	2b00      	cmp	r3, #0
 8012dd6:	d10b      	bne.n	8012df0 <xQueueSemaphoreTake+0x34>
 8012dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ddc:	b672      	cpsid	i
 8012dde:	f383 8811 	msr	BASEPRI, r3
 8012de2:	f3bf 8f6f 	isb	sy
 8012de6:	f3bf 8f4f 	dsb	sy
 8012dea:	b662      	cpsie	i
 8012dec:	623b      	str	r3, [r7, #32]
 8012dee:	e7fe      	b.n	8012dee <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8012df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012df4:	2b00      	cmp	r3, #0
 8012df6:	d00b      	beq.n	8012e10 <xQueueSemaphoreTake+0x54>
 8012df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012dfc:	b672      	cpsid	i
 8012dfe:	f383 8811 	msr	BASEPRI, r3
 8012e02:	f3bf 8f6f 	isb	sy
 8012e06:	f3bf 8f4f 	dsb	sy
 8012e0a:	b662      	cpsie	i
 8012e0c:	61fb      	str	r3, [r7, #28]
 8012e0e:	e7fe      	b.n	8012e0e <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012e10:	f001 f974 	bl	80140fc <xTaskGetSchedulerState>
 8012e14:	4603      	mov	r3, r0
 8012e16:	2b00      	cmp	r3, #0
 8012e18:	d102      	bne.n	8012e20 <xQueueSemaphoreTake+0x64>
 8012e1a:	683b      	ldr	r3, [r7, #0]
 8012e1c:	2b00      	cmp	r3, #0
 8012e1e:	d101      	bne.n	8012e24 <xQueueSemaphoreTake+0x68>
 8012e20:	2301      	movs	r3, #1
 8012e22:	e000      	b.n	8012e26 <xQueueSemaphoreTake+0x6a>
 8012e24:	2300      	movs	r3, #0
 8012e26:	2b00      	cmp	r3, #0
 8012e28:	d10b      	bne.n	8012e42 <xQueueSemaphoreTake+0x86>
 8012e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e2e:	b672      	cpsid	i
 8012e30:	f383 8811 	msr	BASEPRI, r3
 8012e34:	f3bf 8f6f 	isb	sy
 8012e38:	f3bf 8f4f 	dsb	sy
 8012e3c:	b662      	cpsie	i
 8012e3e:	61bb      	str	r3, [r7, #24]
 8012e40:	e7fe      	b.n	8012e40 <xQueueSemaphoreTake+0x84>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8012e42:	f001 ff99 	bl	8014d78 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8012e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012e4a:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8012e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e4e:	2b00      	cmp	r3, #0
 8012e50:	d024      	beq.n	8012e9c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8012e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e54:	1e5a      	subs	r2, r3, #1
 8012e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e58:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e5c:	681b      	ldr	r3, [r3, #0]
 8012e5e:	2b00      	cmp	r3, #0
 8012e60:	d104      	bne.n	8012e6c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8012e62:	f001 fac5 	bl	80143f0 <pvTaskIncrementMutexHeldCount>
 8012e66:	4602      	mov	r2, r0
 8012e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e6a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e6e:	691b      	ldr	r3, [r3, #16]
 8012e70:	2b00      	cmp	r3, #0
 8012e72:	d00f      	beq.n	8012e94 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e76:	3310      	adds	r3, #16
 8012e78:	4618      	mov	r0, r3
 8012e7a:	f000 ff81 	bl	8013d80 <xTaskRemoveFromEventList>
 8012e7e:	4603      	mov	r3, r0
 8012e80:	2b00      	cmp	r3, #0
 8012e82:	d007      	beq.n	8012e94 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8012e84:	4b54      	ldr	r3, [pc, #336]	; (8012fd8 <xQueueSemaphoreTake+0x21c>)
 8012e86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012e8a:	601a      	str	r2, [r3, #0]
 8012e8c:	f3bf 8f4f 	dsb	sy
 8012e90:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8012e94:	f001 ffa2 	bl	8014ddc <vPortExitCritical>
				return pdPASS;
 8012e98:	2301      	movs	r3, #1
 8012e9a:	e098      	b.n	8012fce <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012e9c:	683b      	ldr	r3, [r7, #0]
 8012e9e:	2b00      	cmp	r3, #0
 8012ea0:	d112      	bne.n	8012ec8 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8012ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ea4:	2b00      	cmp	r3, #0
 8012ea6:	d00b      	beq.n	8012ec0 <xQueueSemaphoreTake+0x104>
 8012ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012eac:	b672      	cpsid	i
 8012eae:	f383 8811 	msr	BASEPRI, r3
 8012eb2:	f3bf 8f6f 	isb	sy
 8012eb6:	f3bf 8f4f 	dsb	sy
 8012eba:	b662      	cpsie	i
 8012ebc:	617b      	str	r3, [r7, #20]
 8012ebe:	e7fe      	b.n	8012ebe <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8012ec0:	f001 ff8c 	bl	8014ddc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8012ec4:	2300      	movs	r3, #0
 8012ec6:	e082      	b.n	8012fce <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012ec8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012eca:	2b00      	cmp	r3, #0
 8012ecc:	d106      	bne.n	8012edc <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012ece:	f107 030c 	add.w	r3, r7, #12
 8012ed2:	4618      	mov	r0, r3
 8012ed4:	f000 ffb8 	bl	8013e48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012ed8:	2301      	movs	r3, #1
 8012eda:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012edc:	f001 ff7e 	bl	8014ddc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012ee0:	f000 fd16 	bl	8013910 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012ee4:	f001 ff48 	bl	8014d78 <vPortEnterCritical>
 8012ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012eea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012eee:	b25b      	sxtb	r3, r3
 8012ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012ef4:	d103      	bne.n	8012efe <xQueueSemaphoreTake+0x142>
 8012ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ef8:	2200      	movs	r2, #0
 8012efa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012f04:	b25b      	sxtb	r3, r3
 8012f06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012f0a:	d103      	bne.n	8012f14 <xQueueSemaphoreTake+0x158>
 8012f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f0e:	2200      	movs	r2, #0
 8012f10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012f14:	f001 ff62 	bl	8014ddc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012f18:	463a      	mov	r2, r7
 8012f1a:	f107 030c 	add.w	r3, r7, #12
 8012f1e:	4611      	mov	r1, r2
 8012f20:	4618      	mov	r0, r3
 8012f22:	f000 ffa7 	bl	8013e74 <xTaskCheckForTimeOut>
 8012f26:	4603      	mov	r3, r0
 8012f28:	2b00      	cmp	r3, #0
 8012f2a:	d132      	bne.n	8012f92 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012f2c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012f2e:	f000 f9f6 	bl	801331e <prvIsQueueEmpty>
 8012f32:	4603      	mov	r3, r0
 8012f34:	2b00      	cmp	r3, #0
 8012f36:	d026      	beq.n	8012f86 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f3a:	681b      	ldr	r3, [r3, #0]
 8012f3c:	2b00      	cmp	r3, #0
 8012f3e:	d109      	bne.n	8012f54 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8012f40:	f001 ff1a 	bl	8014d78 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8012f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f46:	689b      	ldr	r3, [r3, #8]
 8012f48:	4618      	mov	r0, r3
 8012f4a:	f001 f8f5 	bl	8014138 <xTaskPriorityInherit>
 8012f4e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8012f50:	f001 ff44 	bl	8014ddc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8012f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f56:	3324      	adds	r3, #36	; 0x24
 8012f58:	683a      	ldr	r2, [r7, #0]
 8012f5a:	4611      	mov	r1, r2
 8012f5c:	4618      	mov	r0, r3
 8012f5e:	f000 febd 	bl	8013cdc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8012f62:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012f64:	f000 f989 	bl	801327a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8012f68:	f000 fce0 	bl	801392c <xTaskResumeAll>
 8012f6c:	4603      	mov	r3, r0
 8012f6e:	2b00      	cmp	r3, #0
 8012f70:	f47f af67 	bne.w	8012e42 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8012f74:	4b18      	ldr	r3, [pc, #96]	; (8012fd8 <xQueueSemaphoreTake+0x21c>)
 8012f76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012f7a:	601a      	str	r2, [r3, #0]
 8012f7c:	f3bf 8f4f 	dsb	sy
 8012f80:	f3bf 8f6f 	isb	sy
 8012f84:	e75d      	b.n	8012e42 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8012f86:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012f88:	f000 f977 	bl	801327a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012f8c:	f000 fcce 	bl	801392c <xTaskResumeAll>
 8012f90:	e757      	b.n	8012e42 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8012f92:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012f94:	f000 f971 	bl	801327a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012f98:	f000 fcc8 	bl	801392c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012f9c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012f9e:	f000 f9be 	bl	801331e <prvIsQueueEmpty>
 8012fa2:	4603      	mov	r3, r0
 8012fa4:	2b00      	cmp	r3, #0
 8012fa6:	f43f af4c 	beq.w	8012e42 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8012faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012fac:	2b00      	cmp	r3, #0
 8012fae:	d00d      	beq.n	8012fcc <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8012fb0:	f001 fee2 	bl	8014d78 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8012fb4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012fb6:	f000 f8b8 	bl	801312a <prvGetDisinheritPriorityAfterTimeout>
 8012fba:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8012fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012fbe:	689b      	ldr	r3, [r3, #8]
 8012fc0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012fc2:	4618      	mov	r0, r3
 8012fc4:	f001 f990 	bl	80142e8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8012fc8:	f001 ff08 	bl	8014ddc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8012fcc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8012fce:	4618      	mov	r0, r3
 8012fd0:	3738      	adds	r7, #56	; 0x38
 8012fd2:	46bd      	mov	sp, r7
 8012fd4:	bd80      	pop	{r7, pc}
 8012fd6:	bf00      	nop
 8012fd8:	e000ed04 	.word	0xe000ed04

08012fdc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8012fdc:	b580      	push	{r7, lr}
 8012fde:	b08e      	sub	sp, #56	; 0x38
 8012fe0:	af00      	add	r7, sp, #0
 8012fe2:	60f8      	str	r0, [r7, #12]
 8012fe4:	60b9      	str	r1, [r7, #8]
 8012fe6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8012fe8:	68fb      	ldr	r3, [r7, #12]
 8012fea:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8012fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012fee:	2b00      	cmp	r3, #0
 8012ff0:	d10b      	bne.n	801300a <xQueueReceiveFromISR+0x2e>
 8012ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ff6:	b672      	cpsid	i
 8012ff8:	f383 8811 	msr	BASEPRI, r3
 8012ffc:	f3bf 8f6f 	isb	sy
 8013000:	f3bf 8f4f 	dsb	sy
 8013004:	b662      	cpsie	i
 8013006:	623b      	str	r3, [r7, #32]
 8013008:	e7fe      	b.n	8013008 <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801300a:	68bb      	ldr	r3, [r7, #8]
 801300c:	2b00      	cmp	r3, #0
 801300e:	d103      	bne.n	8013018 <xQueueReceiveFromISR+0x3c>
 8013010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013014:	2b00      	cmp	r3, #0
 8013016:	d101      	bne.n	801301c <xQueueReceiveFromISR+0x40>
 8013018:	2301      	movs	r3, #1
 801301a:	e000      	b.n	801301e <xQueueReceiveFromISR+0x42>
 801301c:	2300      	movs	r3, #0
 801301e:	2b00      	cmp	r3, #0
 8013020:	d10b      	bne.n	801303a <xQueueReceiveFromISR+0x5e>
 8013022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013026:	b672      	cpsid	i
 8013028:	f383 8811 	msr	BASEPRI, r3
 801302c:	f3bf 8f6f 	isb	sy
 8013030:	f3bf 8f4f 	dsb	sy
 8013034:	b662      	cpsie	i
 8013036:	61fb      	str	r3, [r7, #28]
 8013038:	e7fe      	b.n	8013038 <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801303a:	f001 ff7d 	bl	8014f38 <vPortValidateInterruptPriority>
	__asm volatile
 801303e:	f3ef 8211 	mrs	r2, BASEPRI
 8013042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013046:	b672      	cpsid	i
 8013048:	f383 8811 	msr	BASEPRI, r3
 801304c:	f3bf 8f6f 	isb	sy
 8013050:	f3bf 8f4f 	dsb	sy
 8013054:	b662      	cpsie	i
 8013056:	61ba      	str	r2, [r7, #24]
 8013058:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801305a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801305c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801305e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013062:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013066:	2b00      	cmp	r3, #0
 8013068:	d02f      	beq.n	80130ca <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801306a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801306c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013070:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013074:	68b9      	ldr	r1, [r7, #8]
 8013076:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013078:	f000 f8d9 	bl	801322e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801307c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801307e:	1e5a      	subs	r2, r3, #1
 8013080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013082:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8013084:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8013088:	f1b3 3fff 	cmp.w	r3, #4294967295
 801308c:	d112      	bne.n	80130b4 <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801308e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013090:	691b      	ldr	r3, [r3, #16]
 8013092:	2b00      	cmp	r3, #0
 8013094:	d016      	beq.n	80130c4 <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013098:	3310      	adds	r3, #16
 801309a:	4618      	mov	r0, r3
 801309c:	f000 fe70 	bl	8013d80 <xTaskRemoveFromEventList>
 80130a0:	4603      	mov	r3, r0
 80130a2:	2b00      	cmp	r3, #0
 80130a4:	d00e      	beq.n	80130c4 <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80130a6:	687b      	ldr	r3, [r7, #4]
 80130a8:	2b00      	cmp	r3, #0
 80130aa:	d00b      	beq.n	80130c4 <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80130ac:	687b      	ldr	r3, [r7, #4]
 80130ae:	2201      	movs	r2, #1
 80130b0:	601a      	str	r2, [r3, #0]
 80130b2:	e007      	b.n	80130c4 <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80130b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80130b8:	3301      	adds	r3, #1
 80130ba:	b2db      	uxtb	r3, r3
 80130bc:	b25a      	sxtb	r2, r3
 80130be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80130c4:	2301      	movs	r3, #1
 80130c6:	637b      	str	r3, [r7, #52]	; 0x34
 80130c8:	e001      	b.n	80130ce <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 80130ca:	2300      	movs	r3, #0
 80130cc:	637b      	str	r3, [r7, #52]	; 0x34
 80130ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130d0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80130d2:	693b      	ldr	r3, [r7, #16]
 80130d4:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80130d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80130da:	4618      	mov	r0, r3
 80130dc:	3738      	adds	r7, #56	; 0x38
 80130de:	46bd      	mov	sp, r7
 80130e0:	bd80      	pop	{r7, pc}

080130e2 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80130e2:	b580      	push	{r7, lr}
 80130e4:	b084      	sub	sp, #16
 80130e6:	af00      	add	r7, sp, #0
 80130e8:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80130ea:	687b      	ldr	r3, [r7, #4]
 80130ec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80130ee:	68fb      	ldr	r3, [r7, #12]
 80130f0:	2b00      	cmp	r3, #0
 80130f2:	d10b      	bne.n	801310c <vQueueDelete+0x2a>
	__asm volatile
 80130f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130f8:	b672      	cpsid	i
 80130fa:	f383 8811 	msr	BASEPRI, r3
 80130fe:	f3bf 8f6f 	isb	sy
 8013102:	f3bf 8f4f 	dsb	sy
 8013106:	b662      	cpsie	i
 8013108:	60bb      	str	r3, [r7, #8]
 801310a:	e7fe      	b.n	801310a <vQueueDelete+0x28>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 801310c:	68f8      	ldr	r0, [r7, #12]
 801310e:	f000 f95d 	bl	80133cc <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8013112:	68fb      	ldr	r3, [r7, #12]
 8013114:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8013118:	2b00      	cmp	r3, #0
 801311a:	d102      	bne.n	8013122 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 801311c:	68f8      	ldr	r0, [r7, #12]
 801311e:	f002 f815 	bl	801514c <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8013122:	bf00      	nop
 8013124:	3710      	adds	r7, #16
 8013126:	46bd      	mov	sp, r7
 8013128:	bd80      	pop	{r7, pc}

0801312a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 801312a:	b480      	push	{r7}
 801312c:	b085      	sub	sp, #20
 801312e:	af00      	add	r7, sp, #0
 8013130:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8013132:	687b      	ldr	r3, [r7, #4]
 8013134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013136:	2b00      	cmp	r3, #0
 8013138:	d006      	beq.n	8013148 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 801313a:	687b      	ldr	r3, [r7, #4]
 801313c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801313e:	681b      	ldr	r3, [r3, #0]
 8013140:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8013144:	60fb      	str	r3, [r7, #12]
 8013146:	e001      	b.n	801314c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8013148:	2300      	movs	r3, #0
 801314a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 801314c:	68fb      	ldr	r3, [r7, #12]
	}
 801314e:	4618      	mov	r0, r3
 8013150:	3714      	adds	r7, #20
 8013152:	46bd      	mov	sp, r7
 8013154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013158:	4770      	bx	lr

0801315a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801315a:	b580      	push	{r7, lr}
 801315c:	b086      	sub	sp, #24
 801315e:	af00      	add	r7, sp, #0
 8013160:	60f8      	str	r0, [r7, #12]
 8013162:	60b9      	str	r1, [r7, #8]
 8013164:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8013166:	2300      	movs	r3, #0
 8013168:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801316a:	68fb      	ldr	r3, [r7, #12]
 801316c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801316e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8013170:	68fb      	ldr	r3, [r7, #12]
 8013172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013174:	2b00      	cmp	r3, #0
 8013176:	d10d      	bne.n	8013194 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013178:	68fb      	ldr	r3, [r7, #12]
 801317a:	681b      	ldr	r3, [r3, #0]
 801317c:	2b00      	cmp	r3, #0
 801317e:	d14d      	bne.n	801321c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8013180:	68fb      	ldr	r3, [r7, #12]
 8013182:	689b      	ldr	r3, [r3, #8]
 8013184:	4618      	mov	r0, r3
 8013186:	f001 f83f 	bl	8014208 <xTaskPriorityDisinherit>
 801318a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801318c:	68fb      	ldr	r3, [r7, #12]
 801318e:	2200      	movs	r2, #0
 8013190:	609a      	str	r2, [r3, #8]
 8013192:	e043      	b.n	801321c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8013194:	687b      	ldr	r3, [r7, #4]
 8013196:	2b00      	cmp	r3, #0
 8013198:	d119      	bne.n	80131ce <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801319a:	68fb      	ldr	r3, [r7, #12]
 801319c:	6858      	ldr	r0, [r3, #4]
 801319e:	68fb      	ldr	r3, [r7, #12]
 80131a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80131a2:	461a      	mov	r2, r3
 80131a4:	68b9      	ldr	r1, [r7, #8]
 80131a6:	f002 fe6f 	bl	8015e88 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80131aa:	68fb      	ldr	r3, [r7, #12]
 80131ac:	685a      	ldr	r2, [r3, #4]
 80131ae:	68fb      	ldr	r3, [r7, #12]
 80131b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80131b2:	441a      	add	r2, r3
 80131b4:	68fb      	ldr	r3, [r7, #12]
 80131b6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80131b8:	68fb      	ldr	r3, [r7, #12]
 80131ba:	685a      	ldr	r2, [r3, #4]
 80131bc:	68fb      	ldr	r3, [r7, #12]
 80131be:	689b      	ldr	r3, [r3, #8]
 80131c0:	429a      	cmp	r2, r3
 80131c2:	d32b      	bcc.n	801321c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80131c4:	68fb      	ldr	r3, [r7, #12]
 80131c6:	681a      	ldr	r2, [r3, #0]
 80131c8:	68fb      	ldr	r3, [r7, #12]
 80131ca:	605a      	str	r2, [r3, #4]
 80131cc:	e026      	b.n	801321c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80131ce:	68fb      	ldr	r3, [r7, #12]
 80131d0:	68d8      	ldr	r0, [r3, #12]
 80131d2:	68fb      	ldr	r3, [r7, #12]
 80131d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80131d6:	461a      	mov	r2, r3
 80131d8:	68b9      	ldr	r1, [r7, #8]
 80131da:	f002 fe55 	bl	8015e88 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80131de:	68fb      	ldr	r3, [r7, #12]
 80131e0:	68da      	ldr	r2, [r3, #12]
 80131e2:	68fb      	ldr	r3, [r7, #12]
 80131e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80131e6:	425b      	negs	r3, r3
 80131e8:	441a      	add	r2, r3
 80131ea:	68fb      	ldr	r3, [r7, #12]
 80131ec:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80131ee:	68fb      	ldr	r3, [r7, #12]
 80131f0:	68da      	ldr	r2, [r3, #12]
 80131f2:	68fb      	ldr	r3, [r7, #12]
 80131f4:	681b      	ldr	r3, [r3, #0]
 80131f6:	429a      	cmp	r2, r3
 80131f8:	d207      	bcs.n	801320a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80131fa:	68fb      	ldr	r3, [r7, #12]
 80131fc:	689a      	ldr	r2, [r3, #8]
 80131fe:	68fb      	ldr	r3, [r7, #12]
 8013200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013202:	425b      	negs	r3, r3
 8013204:	441a      	add	r2, r3
 8013206:	68fb      	ldr	r3, [r7, #12]
 8013208:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801320a:	687b      	ldr	r3, [r7, #4]
 801320c:	2b02      	cmp	r3, #2
 801320e:	d105      	bne.n	801321c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013210:	693b      	ldr	r3, [r7, #16]
 8013212:	2b00      	cmp	r3, #0
 8013214:	d002      	beq.n	801321c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8013216:	693b      	ldr	r3, [r7, #16]
 8013218:	3b01      	subs	r3, #1
 801321a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801321c:	693b      	ldr	r3, [r7, #16]
 801321e:	1c5a      	adds	r2, r3, #1
 8013220:	68fb      	ldr	r3, [r7, #12]
 8013222:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8013224:	697b      	ldr	r3, [r7, #20]
}
 8013226:	4618      	mov	r0, r3
 8013228:	3718      	adds	r7, #24
 801322a:	46bd      	mov	sp, r7
 801322c:	bd80      	pop	{r7, pc}

0801322e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801322e:	b580      	push	{r7, lr}
 8013230:	b082      	sub	sp, #8
 8013232:	af00      	add	r7, sp, #0
 8013234:	6078      	str	r0, [r7, #4]
 8013236:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8013238:	687b      	ldr	r3, [r7, #4]
 801323a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801323c:	2b00      	cmp	r3, #0
 801323e:	d018      	beq.n	8013272 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013240:	687b      	ldr	r3, [r7, #4]
 8013242:	68da      	ldr	r2, [r3, #12]
 8013244:	687b      	ldr	r3, [r7, #4]
 8013246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013248:	441a      	add	r2, r3
 801324a:	687b      	ldr	r3, [r7, #4]
 801324c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801324e:	687b      	ldr	r3, [r7, #4]
 8013250:	68da      	ldr	r2, [r3, #12]
 8013252:	687b      	ldr	r3, [r7, #4]
 8013254:	689b      	ldr	r3, [r3, #8]
 8013256:	429a      	cmp	r2, r3
 8013258:	d303      	bcc.n	8013262 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801325a:	687b      	ldr	r3, [r7, #4]
 801325c:	681a      	ldr	r2, [r3, #0]
 801325e:	687b      	ldr	r3, [r7, #4]
 8013260:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013262:	687b      	ldr	r3, [r7, #4]
 8013264:	68d9      	ldr	r1, [r3, #12]
 8013266:	687b      	ldr	r3, [r7, #4]
 8013268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801326a:	461a      	mov	r2, r3
 801326c:	6838      	ldr	r0, [r7, #0]
 801326e:	f002 fe0b 	bl	8015e88 <memcpy>
	}
}
 8013272:	bf00      	nop
 8013274:	3708      	adds	r7, #8
 8013276:	46bd      	mov	sp, r7
 8013278:	bd80      	pop	{r7, pc}

0801327a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801327a:	b580      	push	{r7, lr}
 801327c:	b084      	sub	sp, #16
 801327e:	af00      	add	r7, sp, #0
 8013280:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8013282:	f001 fd79 	bl	8014d78 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8013286:	687b      	ldr	r3, [r7, #4]
 8013288:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801328c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801328e:	e011      	b.n	80132b4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013290:	687b      	ldr	r3, [r7, #4]
 8013292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013294:	2b00      	cmp	r3, #0
 8013296:	d012      	beq.n	80132be <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013298:	687b      	ldr	r3, [r7, #4]
 801329a:	3324      	adds	r3, #36	; 0x24
 801329c:	4618      	mov	r0, r3
 801329e:	f000 fd6f 	bl	8013d80 <xTaskRemoveFromEventList>
 80132a2:	4603      	mov	r3, r0
 80132a4:	2b00      	cmp	r3, #0
 80132a6:	d001      	beq.n	80132ac <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80132a8:	f000 fe48 	bl	8013f3c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80132ac:	7bfb      	ldrb	r3, [r7, #15]
 80132ae:	3b01      	subs	r3, #1
 80132b0:	b2db      	uxtb	r3, r3
 80132b2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80132b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80132b8:	2b00      	cmp	r3, #0
 80132ba:	dce9      	bgt.n	8013290 <prvUnlockQueue+0x16>
 80132bc:	e000      	b.n	80132c0 <prvUnlockQueue+0x46>
					break;
 80132be:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80132c0:	687b      	ldr	r3, [r7, #4]
 80132c2:	22ff      	movs	r2, #255	; 0xff
 80132c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80132c8:	f001 fd88 	bl	8014ddc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80132cc:	f001 fd54 	bl	8014d78 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80132d0:	687b      	ldr	r3, [r7, #4]
 80132d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80132d6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80132d8:	e011      	b.n	80132fe <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80132da:	687b      	ldr	r3, [r7, #4]
 80132dc:	691b      	ldr	r3, [r3, #16]
 80132de:	2b00      	cmp	r3, #0
 80132e0:	d012      	beq.n	8013308 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80132e2:	687b      	ldr	r3, [r7, #4]
 80132e4:	3310      	adds	r3, #16
 80132e6:	4618      	mov	r0, r3
 80132e8:	f000 fd4a 	bl	8013d80 <xTaskRemoveFromEventList>
 80132ec:	4603      	mov	r3, r0
 80132ee:	2b00      	cmp	r3, #0
 80132f0:	d001      	beq.n	80132f6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80132f2:	f000 fe23 	bl	8013f3c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80132f6:	7bbb      	ldrb	r3, [r7, #14]
 80132f8:	3b01      	subs	r3, #1
 80132fa:	b2db      	uxtb	r3, r3
 80132fc:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80132fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013302:	2b00      	cmp	r3, #0
 8013304:	dce9      	bgt.n	80132da <prvUnlockQueue+0x60>
 8013306:	e000      	b.n	801330a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8013308:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801330a:	687b      	ldr	r3, [r7, #4]
 801330c:	22ff      	movs	r2, #255	; 0xff
 801330e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8013312:	f001 fd63 	bl	8014ddc <vPortExitCritical>
}
 8013316:	bf00      	nop
 8013318:	3710      	adds	r7, #16
 801331a:	46bd      	mov	sp, r7
 801331c:	bd80      	pop	{r7, pc}

0801331e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801331e:	b580      	push	{r7, lr}
 8013320:	b084      	sub	sp, #16
 8013322:	af00      	add	r7, sp, #0
 8013324:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013326:	f001 fd27 	bl	8014d78 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801332a:	687b      	ldr	r3, [r7, #4]
 801332c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801332e:	2b00      	cmp	r3, #0
 8013330:	d102      	bne.n	8013338 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8013332:	2301      	movs	r3, #1
 8013334:	60fb      	str	r3, [r7, #12]
 8013336:	e001      	b.n	801333c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8013338:	2300      	movs	r3, #0
 801333a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801333c:	f001 fd4e 	bl	8014ddc <vPortExitCritical>

	return xReturn;
 8013340:	68fb      	ldr	r3, [r7, #12]
}
 8013342:	4618      	mov	r0, r3
 8013344:	3710      	adds	r7, #16
 8013346:	46bd      	mov	sp, r7
 8013348:	bd80      	pop	{r7, pc}

0801334a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801334a:	b580      	push	{r7, lr}
 801334c:	b084      	sub	sp, #16
 801334e:	af00      	add	r7, sp, #0
 8013350:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013352:	f001 fd11 	bl	8014d78 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8013356:	687b      	ldr	r3, [r7, #4]
 8013358:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801335a:	687b      	ldr	r3, [r7, #4]
 801335c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801335e:	429a      	cmp	r2, r3
 8013360:	d102      	bne.n	8013368 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8013362:	2301      	movs	r3, #1
 8013364:	60fb      	str	r3, [r7, #12]
 8013366:	e001      	b.n	801336c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8013368:	2300      	movs	r3, #0
 801336a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801336c:	f001 fd36 	bl	8014ddc <vPortExitCritical>

	return xReturn;
 8013370:	68fb      	ldr	r3, [r7, #12]
}
 8013372:	4618      	mov	r0, r3
 8013374:	3710      	adds	r7, #16
 8013376:	46bd      	mov	sp, r7
 8013378:	bd80      	pop	{r7, pc}
	...

0801337c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 801337c:	b480      	push	{r7}
 801337e:	b085      	sub	sp, #20
 8013380:	af00      	add	r7, sp, #0
 8013382:	6078      	str	r0, [r7, #4]
 8013384:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013386:	2300      	movs	r3, #0
 8013388:	60fb      	str	r3, [r7, #12]
 801338a:	e014      	b.n	80133b6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 801338c:	4a0e      	ldr	r2, [pc, #56]	; (80133c8 <vQueueAddToRegistry+0x4c>)
 801338e:	68fb      	ldr	r3, [r7, #12]
 8013390:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8013394:	2b00      	cmp	r3, #0
 8013396:	d10b      	bne.n	80133b0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8013398:	490b      	ldr	r1, [pc, #44]	; (80133c8 <vQueueAddToRegistry+0x4c>)
 801339a:	68fb      	ldr	r3, [r7, #12]
 801339c:	683a      	ldr	r2, [r7, #0]
 801339e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80133a2:	4a09      	ldr	r2, [pc, #36]	; (80133c8 <vQueueAddToRegistry+0x4c>)
 80133a4:	68fb      	ldr	r3, [r7, #12]
 80133a6:	00db      	lsls	r3, r3, #3
 80133a8:	4413      	add	r3, r2
 80133aa:	687a      	ldr	r2, [r7, #4]
 80133ac:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80133ae:	e005      	b.n	80133bc <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80133b0:	68fb      	ldr	r3, [r7, #12]
 80133b2:	3301      	adds	r3, #1
 80133b4:	60fb      	str	r3, [r7, #12]
 80133b6:	68fb      	ldr	r3, [r7, #12]
 80133b8:	2b07      	cmp	r3, #7
 80133ba:	d9e7      	bls.n	801338c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80133bc:	bf00      	nop
 80133be:	3714      	adds	r7, #20
 80133c0:	46bd      	mov	sp, r7
 80133c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133c6:	4770      	bx	lr
 80133c8:	20009408 	.word	0x20009408

080133cc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80133cc:	b480      	push	{r7}
 80133ce:	b085      	sub	sp, #20
 80133d0:	af00      	add	r7, sp, #0
 80133d2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80133d4:	2300      	movs	r3, #0
 80133d6:	60fb      	str	r3, [r7, #12]
 80133d8:	e016      	b.n	8013408 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80133da:	4a10      	ldr	r2, [pc, #64]	; (801341c <vQueueUnregisterQueue+0x50>)
 80133dc:	68fb      	ldr	r3, [r7, #12]
 80133de:	00db      	lsls	r3, r3, #3
 80133e0:	4413      	add	r3, r2
 80133e2:	685b      	ldr	r3, [r3, #4]
 80133e4:	687a      	ldr	r2, [r7, #4]
 80133e6:	429a      	cmp	r2, r3
 80133e8:	d10b      	bne.n	8013402 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80133ea:	4a0c      	ldr	r2, [pc, #48]	; (801341c <vQueueUnregisterQueue+0x50>)
 80133ec:	68fb      	ldr	r3, [r7, #12]
 80133ee:	2100      	movs	r1, #0
 80133f0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80133f4:	4a09      	ldr	r2, [pc, #36]	; (801341c <vQueueUnregisterQueue+0x50>)
 80133f6:	68fb      	ldr	r3, [r7, #12]
 80133f8:	00db      	lsls	r3, r3, #3
 80133fa:	4413      	add	r3, r2
 80133fc:	2200      	movs	r2, #0
 80133fe:	605a      	str	r2, [r3, #4]
				break;
 8013400:	e005      	b.n	801340e <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013402:	68fb      	ldr	r3, [r7, #12]
 8013404:	3301      	adds	r3, #1
 8013406:	60fb      	str	r3, [r7, #12]
 8013408:	68fb      	ldr	r3, [r7, #12]
 801340a:	2b07      	cmp	r3, #7
 801340c:	d9e5      	bls.n	80133da <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 801340e:	bf00      	nop
 8013410:	3714      	adds	r7, #20
 8013412:	46bd      	mov	sp, r7
 8013414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013418:	4770      	bx	lr
 801341a:	bf00      	nop
 801341c:	20009408 	.word	0x20009408

08013420 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8013420:	b580      	push	{r7, lr}
 8013422:	b086      	sub	sp, #24
 8013424:	af00      	add	r7, sp, #0
 8013426:	60f8      	str	r0, [r7, #12]
 8013428:	60b9      	str	r1, [r7, #8]
 801342a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 801342c:	68fb      	ldr	r3, [r7, #12]
 801342e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8013430:	f001 fca2 	bl	8014d78 <vPortEnterCritical>
 8013434:	697b      	ldr	r3, [r7, #20]
 8013436:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801343a:	b25b      	sxtb	r3, r3
 801343c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013440:	d103      	bne.n	801344a <vQueueWaitForMessageRestricted+0x2a>
 8013442:	697b      	ldr	r3, [r7, #20]
 8013444:	2200      	movs	r2, #0
 8013446:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801344a:	697b      	ldr	r3, [r7, #20]
 801344c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013450:	b25b      	sxtb	r3, r3
 8013452:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013456:	d103      	bne.n	8013460 <vQueueWaitForMessageRestricted+0x40>
 8013458:	697b      	ldr	r3, [r7, #20]
 801345a:	2200      	movs	r2, #0
 801345c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013460:	f001 fcbc 	bl	8014ddc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8013464:	697b      	ldr	r3, [r7, #20]
 8013466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013468:	2b00      	cmp	r3, #0
 801346a:	d106      	bne.n	801347a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 801346c:	697b      	ldr	r3, [r7, #20]
 801346e:	3324      	adds	r3, #36	; 0x24
 8013470:	687a      	ldr	r2, [r7, #4]
 8013472:	68b9      	ldr	r1, [r7, #8]
 8013474:	4618      	mov	r0, r3
 8013476:	f000 fc57 	bl	8013d28 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801347a:	6978      	ldr	r0, [r7, #20]
 801347c:	f7ff fefd 	bl	801327a <prvUnlockQueue>
	}
 8013480:	bf00      	nop
 8013482:	3718      	adds	r7, #24
 8013484:	46bd      	mov	sp, r7
 8013486:	bd80      	pop	{r7, pc}

08013488 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8013488:	b580      	push	{r7, lr}
 801348a:	b08e      	sub	sp, #56	; 0x38
 801348c:	af04      	add	r7, sp, #16
 801348e:	60f8      	str	r0, [r7, #12]
 8013490:	60b9      	str	r1, [r7, #8]
 8013492:	607a      	str	r2, [r7, #4]
 8013494:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8013496:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013498:	2b00      	cmp	r3, #0
 801349a:	d10b      	bne.n	80134b4 <xTaskCreateStatic+0x2c>
 801349c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80134a0:	b672      	cpsid	i
 80134a2:	f383 8811 	msr	BASEPRI, r3
 80134a6:	f3bf 8f6f 	isb	sy
 80134aa:	f3bf 8f4f 	dsb	sy
 80134ae:	b662      	cpsie	i
 80134b0:	623b      	str	r3, [r7, #32]
 80134b2:	e7fe      	b.n	80134b2 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 80134b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80134b6:	2b00      	cmp	r3, #0
 80134b8:	d10b      	bne.n	80134d2 <xTaskCreateStatic+0x4a>
 80134ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80134be:	b672      	cpsid	i
 80134c0:	f383 8811 	msr	BASEPRI, r3
 80134c4:	f3bf 8f6f 	isb	sy
 80134c8:	f3bf 8f4f 	dsb	sy
 80134cc:	b662      	cpsie	i
 80134ce:	61fb      	str	r3, [r7, #28]
 80134d0:	e7fe      	b.n	80134d0 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80134d2:	235c      	movs	r3, #92	; 0x5c
 80134d4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80134d6:	693b      	ldr	r3, [r7, #16]
 80134d8:	2b5c      	cmp	r3, #92	; 0x5c
 80134da:	d00b      	beq.n	80134f4 <xTaskCreateStatic+0x6c>
 80134dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80134e0:	b672      	cpsid	i
 80134e2:	f383 8811 	msr	BASEPRI, r3
 80134e6:	f3bf 8f6f 	isb	sy
 80134ea:	f3bf 8f4f 	dsb	sy
 80134ee:	b662      	cpsie	i
 80134f0:	61bb      	str	r3, [r7, #24]
 80134f2:	e7fe      	b.n	80134f2 <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80134f4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80134f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80134f8:	2b00      	cmp	r3, #0
 80134fa:	d01e      	beq.n	801353a <xTaskCreateStatic+0xb2>
 80134fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80134fe:	2b00      	cmp	r3, #0
 8013500:	d01b      	beq.n	801353a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8013502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013504:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8013506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013508:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801350a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801350c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801350e:	2202      	movs	r2, #2
 8013510:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8013514:	2300      	movs	r3, #0
 8013516:	9303      	str	r3, [sp, #12]
 8013518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801351a:	9302      	str	r3, [sp, #8]
 801351c:	f107 0314 	add.w	r3, r7, #20
 8013520:	9301      	str	r3, [sp, #4]
 8013522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013524:	9300      	str	r3, [sp, #0]
 8013526:	683b      	ldr	r3, [r7, #0]
 8013528:	687a      	ldr	r2, [r7, #4]
 801352a:	68b9      	ldr	r1, [r7, #8]
 801352c:	68f8      	ldr	r0, [r7, #12]
 801352e:	f000 f850 	bl	80135d2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013532:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013534:	f000 f8de 	bl	80136f4 <prvAddNewTaskToReadyList>
 8013538:	e001      	b.n	801353e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 801353a:	2300      	movs	r3, #0
 801353c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801353e:	697b      	ldr	r3, [r7, #20]
	}
 8013540:	4618      	mov	r0, r3
 8013542:	3728      	adds	r7, #40	; 0x28
 8013544:	46bd      	mov	sp, r7
 8013546:	bd80      	pop	{r7, pc}

08013548 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8013548:	b580      	push	{r7, lr}
 801354a:	b08c      	sub	sp, #48	; 0x30
 801354c:	af04      	add	r7, sp, #16
 801354e:	60f8      	str	r0, [r7, #12]
 8013550:	60b9      	str	r1, [r7, #8]
 8013552:	603b      	str	r3, [r7, #0]
 8013554:	4613      	mov	r3, r2
 8013556:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8013558:	88fb      	ldrh	r3, [r7, #6]
 801355a:	009b      	lsls	r3, r3, #2
 801355c:	4618      	mov	r0, r3
 801355e:	f001 fd2d 	bl	8014fbc <pvPortMalloc>
 8013562:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8013564:	697b      	ldr	r3, [r7, #20]
 8013566:	2b00      	cmp	r3, #0
 8013568:	d00e      	beq.n	8013588 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801356a:	205c      	movs	r0, #92	; 0x5c
 801356c:	f001 fd26 	bl	8014fbc <pvPortMalloc>
 8013570:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8013572:	69fb      	ldr	r3, [r7, #28]
 8013574:	2b00      	cmp	r3, #0
 8013576:	d003      	beq.n	8013580 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8013578:	69fb      	ldr	r3, [r7, #28]
 801357a:	697a      	ldr	r2, [r7, #20]
 801357c:	631a      	str	r2, [r3, #48]	; 0x30
 801357e:	e005      	b.n	801358c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8013580:	6978      	ldr	r0, [r7, #20]
 8013582:	f001 fde3 	bl	801514c <vPortFree>
 8013586:	e001      	b.n	801358c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8013588:	2300      	movs	r3, #0
 801358a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801358c:	69fb      	ldr	r3, [r7, #28]
 801358e:	2b00      	cmp	r3, #0
 8013590:	d017      	beq.n	80135c2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8013592:	69fb      	ldr	r3, [r7, #28]
 8013594:	2200      	movs	r2, #0
 8013596:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801359a:	88fa      	ldrh	r2, [r7, #6]
 801359c:	2300      	movs	r3, #0
 801359e:	9303      	str	r3, [sp, #12]
 80135a0:	69fb      	ldr	r3, [r7, #28]
 80135a2:	9302      	str	r3, [sp, #8]
 80135a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135a6:	9301      	str	r3, [sp, #4]
 80135a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135aa:	9300      	str	r3, [sp, #0]
 80135ac:	683b      	ldr	r3, [r7, #0]
 80135ae:	68b9      	ldr	r1, [r7, #8]
 80135b0:	68f8      	ldr	r0, [r7, #12]
 80135b2:	f000 f80e 	bl	80135d2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80135b6:	69f8      	ldr	r0, [r7, #28]
 80135b8:	f000 f89c 	bl	80136f4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80135bc:	2301      	movs	r3, #1
 80135be:	61bb      	str	r3, [r7, #24]
 80135c0:	e002      	b.n	80135c8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80135c2:	f04f 33ff 	mov.w	r3, #4294967295
 80135c6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80135c8:	69bb      	ldr	r3, [r7, #24]
	}
 80135ca:	4618      	mov	r0, r3
 80135cc:	3720      	adds	r7, #32
 80135ce:	46bd      	mov	sp, r7
 80135d0:	bd80      	pop	{r7, pc}

080135d2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80135d2:	b580      	push	{r7, lr}
 80135d4:	b088      	sub	sp, #32
 80135d6:	af00      	add	r7, sp, #0
 80135d8:	60f8      	str	r0, [r7, #12]
 80135da:	60b9      	str	r1, [r7, #8]
 80135dc:	607a      	str	r2, [r7, #4]
 80135de:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80135e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135e2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80135e4:	687b      	ldr	r3, [r7, #4]
 80135e6:	009b      	lsls	r3, r3, #2
 80135e8:	461a      	mov	r2, r3
 80135ea:	21a5      	movs	r1, #165	; 0xa5
 80135ec:	f002 fc57 	bl	8015e9e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80135f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80135f4:	6879      	ldr	r1, [r7, #4]
 80135f6:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80135fa:	440b      	add	r3, r1
 80135fc:	009b      	lsls	r3, r3, #2
 80135fe:	4413      	add	r3, r2
 8013600:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8013602:	69bb      	ldr	r3, [r7, #24]
 8013604:	f023 0307 	bic.w	r3, r3, #7
 8013608:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801360a:	69bb      	ldr	r3, [r7, #24]
 801360c:	f003 0307 	and.w	r3, r3, #7
 8013610:	2b00      	cmp	r3, #0
 8013612:	d00b      	beq.n	801362c <prvInitialiseNewTask+0x5a>
 8013614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013618:	b672      	cpsid	i
 801361a:	f383 8811 	msr	BASEPRI, r3
 801361e:	f3bf 8f6f 	isb	sy
 8013622:	f3bf 8f4f 	dsb	sy
 8013626:	b662      	cpsie	i
 8013628:	617b      	str	r3, [r7, #20]
 801362a:	e7fe      	b.n	801362a <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801362c:	68bb      	ldr	r3, [r7, #8]
 801362e:	2b00      	cmp	r3, #0
 8013630:	d01f      	beq.n	8013672 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013632:	2300      	movs	r3, #0
 8013634:	61fb      	str	r3, [r7, #28]
 8013636:	e012      	b.n	801365e <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8013638:	68ba      	ldr	r2, [r7, #8]
 801363a:	69fb      	ldr	r3, [r7, #28]
 801363c:	4413      	add	r3, r2
 801363e:	7819      	ldrb	r1, [r3, #0]
 8013640:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013642:	69fb      	ldr	r3, [r7, #28]
 8013644:	4413      	add	r3, r2
 8013646:	3334      	adds	r3, #52	; 0x34
 8013648:	460a      	mov	r2, r1
 801364a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801364c:	68ba      	ldr	r2, [r7, #8]
 801364e:	69fb      	ldr	r3, [r7, #28]
 8013650:	4413      	add	r3, r2
 8013652:	781b      	ldrb	r3, [r3, #0]
 8013654:	2b00      	cmp	r3, #0
 8013656:	d006      	beq.n	8013666 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013658:	69fb      	ldr	r3, [r7, #28]
 801365a:	3301      	adds	r3, #1
 801365c:	61fb      	str	r3, [r7, #28]
 801365e:	69fb      	ldr	r3, [r7, #28]
 8013660:	2b0f      	cmp	r3, #15
 8013662:	d9e9      	bls.n	8013638 <prvInitialiseNewTask+0x66>
 8013664:	e000      	b.n	8013668 <prvInitialiseNewTask+0x96>
			{
				break;
 8013666:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8013668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801366a:	2200      	movs	r2, #0
 801366c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8013670:	e003      	b.n	801367a <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8013672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013674:	2200      	movs	r2, #0
 8013676:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801367a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801367c:	2b37      	cmp	r3, #55	; 0x37
 801367e:	d901      	bls.n	8013684 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8013680:	2337      	movs	r3, #55	; 0x37
 8013682:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8013684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013686:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013688:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801368a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801368c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801368e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8013690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013692:	2200      	movs	r2, #0
 8013694:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8013696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013698:	3304      	adds	r3, #4
 801369a:	4618      	mov	r0, r3
 801369c:	f7fe fe2e 	bl	80122fc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80136a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136a2:	3318      	adds	r3, #24
 80136a4:	4618      	mov	r0, r3
 80136a6:	f7fe fe29 	bl	80122fc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80136aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80136ae:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80136b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136b2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80136b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136b8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80136ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80136be:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80136c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136c2:	2200      	movs	r2, #0
 80136c4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80136c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136c8:	2200      	movs	r2, #0
 80136ca:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80136ce:	683a      	ldr	r2, [r7, #0]
 80136d0:	68f9      	ldr	r1, [r7, #12]
 80136d2:	69b8      	ldr	r0, [r7, #24]
 80136d4:	f001 fa48 	bl	8014b68 <pxPortInitialiseStack>
 80136d8:	4602      	mov	r2, r0
 80136da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136dc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80136de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136e0:	2b00      	cmp	r3, #0
 80136e2:	d002      	beq.n	80136ea <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80136e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80136e8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80136ea:	bf00      	nop
 80136ec:	3720      	adds	r7, #32
 80136ee:	46bd      	mov	sp, r7
 80136f0:	bd80      	pop	{r7, pc}
	...

080136f4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80136f4:	b580      	push	{r7, lr}
 80136f6:	b082      	sub	sp, #8
 80136f8:	af00      	add	r7, sp, #0
 80136fa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80136fc:	f001 fb3c 	bl	8014d78 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8013700:	4b2d      	ldr	r3, [pc, #180]	; (80137b8 <prvAddNewTaskToReadyList+0xc4>)
 8013702:	681b      	ldr	r3, [r3, #0]
 8013704:	3301      	adds	r3, #1
 8013706:	4a2c      	ldr	r2, [pc, #176]	; (80137b8 <prvAddNewTaskToReadyList+0xc4>)
 8013708:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801370a:	4b2c      	ldr	r3, [pc, #176]	; (80137bc <prvAddNewTaskToReadyList+0xc8>)
 801370c:	681b      	ldr	r3, [r3, #0]
 801370e:	2b00      	cmp	r3, #0
 8013710:	d109      	bne.n	8013726 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8013712:	4a2a      	ldr	r2, [pc, #168]	; (80137bc <prvAddNewTaskToReadyList+0xc8>)
 8013714:	687b      	ldr	r3, [r7, #4]
 8013716:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8013718:	4b27      	ldr	r3, [pc, #156]	; (80137b8 <prvAddNewTaskToReadyList+0xc4>)
 801371a:	681b      	ldr	r3, [r3, #0]
 801371c:	2b01      	cmp	r3, #1
 801371e:	d110      	bne.n	8013742 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8013720:	f000 fc30 	bl	8013f84 <prvInitialiseTaskLists>
 8013724:	e00d      	b.n	8013742 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8013726:	4b26      	ldr	r3, [pc, #152]	; (80137c0 <prvAddNewTaskToReadyList+0xcc>)
 8013728:	681b      	ldr	r3, [r3, #0]
 801372a:	2b00      	cmp	r3, #0
 801372c:	d109      	bne.n	8013742 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801372e:	4b23      	ldr	r3, [pc, #140]	; (80137bc <prvAddNewTaskToReadyList+0xc8>)
 8013730:	681b      	ldr	r3, [r3, #0]
 8013732:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013734:	687b      	ldr	r3, [r7, #4]
 8013736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013738:	429a      	cmp	r2, r3
 801373a:	d802      	bhi.n	8013742 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 801373c:	4a1f      	ldr	r2, [pc, #124]	; (80137bc <prvAddNewTaskToReadyList+0xc8>)
 801373e:	687b      	ldr	r3, [r7, #4]
 8013740:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8013742:	4b20      	ldr	r3, [pc, #128]	; (80137c4 <prvAddNewTaskToReadyList+0xd0>)
 8013744:	681b      	ldr	r3, [r3, #0]
 8013746:	3301      	adds	r3, #1
 8013748:	4a1e      	ldr	r2, [pc, #120]	; (80137c4 <prvAddNewTaskToReadyList+0xd0>)
 801374a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 801374c:	4b1d      	ldr	r3, [pc, #116]	; (80137c4 <prvAddNewTaskToReadyList+0xd0>)
 801374e:	681a      	ldr	r2, [r3, #0]
 8013750:	687b      	ldr	r3, [r7, #4]
 8013752:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8013754:	687b      	ldr	r3, [r7, #4]
 8013756:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013758:	4b1b      	ldr	r3, [pc, #108]	; (80137c8 <prvAddNewTaskToReadyList+0xd4>)
 801375a:	681b      	ldr	r3, [r3, #0]
 801375c:	429a      	cmp	r2, r3
 801375e:	d903      	bls.n	8013768 <prvAddNewTaskToReadyList+0x74>
 8013760:	687b      	ldr	r3, [r7, #4]
 8013762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013764:	4a18      	ldr	r2, [pc, #96]	; (80137c8 <prvAddNewTaskToReadyList+0xd4>)
 8013766:	6013      	str	r3, [r2, #0]
 8013768:	687b      	ldr	r3, [r7, #4]
 801376a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801376c:	4613      	mov	r3, r2
 801376e:	009b      	lsls	r3, r3, #2
 8013770:	4413      	add	r3, r2
 8013772:	009b      	lsls	r3, r3, #2
 8013774:	4a15      	ldr	r2, [pc, #84]	; (80137cc <prvAddNewTaskToReadyList+0xd8>)
 8013776:	441a      	add	r2, r3
 8013778:	687b      	ldr	r3, [r7, #4]
 801377a:	3304      	adds	r3, #4
 801377c:	4619      	mov	r1, r3
 801377e:	4610      	mov	r0, r2
 8013780:	f7fe fdc9 	bl	8012316 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8013784:	f001 fb2a 	bl	8014ddc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8013788:	4b0d      	ldr	r3, [pc, #52]	; (80137c0 <prvAddNewTaskToReadyList+0xcc>)
 801378a:	681b      	ldr	r3, [r3, #0]
 801378c:	2b00      	cmp	r3, #0
 801378e:	d00e      	beq.n	80137ae <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8013790:	4b0a      	ldr	r3, [pc, #40]	; (80137bc <prvAddNewTaskToReadyList+0xc8>)
 8013792:	681b      	ldr	r3, [r3, #0]
 8013794:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013796:	687b      	ldr	r3, [r7, #4]
 8013798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801379a:	429a      	cmp	r2, r3
 801379c:	d207      	bcs.n	80137ae <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801379e:	4b0c      	ldr	r3, [pc, #48]	; (80137d0 <prvAddNewTaskToReadyList+0xdc>)
 80137a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80137a4:	601a      	str	r2, [r3, #0]
 80137a6:	f3bf 8f4f 	dsb	sy
 80137aa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80137ae:	bf00      	nop
 80137b0:	3708      	adds	r7, #8
 80137b2:	46bd      	mov	sp, r7
 80137b4:	bd80      	pop	{r7, pc}
 80137b6:	bf00      	nop
 80137b8:	20000e60 	.word	0x20000e60
 80137bc:	2000098c 	.word	0x2000098c
 80137c0:	20000e6c 	.word	0x20000e6c
 80137c4:	20000e7c 	.word	0x20000e7c
 80137c8:	20000e68 	.word	0x20000e68
 80137cc:	20000990 	.word	0x20000990
 80137d0:	e000ed04 	.word	0xe000ed04

080137d4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80137d4:	b580      	push	{r7, lr}
 80137d6:	b084      	sub	sp, #16
 80137d8:	af00      	add	r7, sp, #0
 80137da:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80137dc:	2300      	movs	r3, #0
 80137de:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80137e0:	687b      	ldr	r3, [r7, #4]
 80137e2:	2b00      	cmp	r3, #0
 80137e4:	d018      	beq.n	8013818 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80137e6:	4b14      	ldr	r3, [pc, #80]	; (8013838 <vTaskDelay+0x64>)
 80137e8:	681b      	ldr	r3, [r3, #0]
 80137ea:	2b00      	cmp	r3, #0
 80137ec:	d00b      	beq.n	8013806 <vTaskDelay+0x32>
 80137ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137f2:	b672      	cpsid	i
 80137f4:	f383 8811 	msr	BASEPRI, r3
 80137f8:	f3bf 8f6f 	isb	sy
 80137fc:	f3bf 8f4f 	dsb	sy
 8013800:	b662      	cpsie	i
 8013802:	60bb      	str	r3, [r7, #8]
 8013804:	e7fe      	b.n	8013804 <vTaskDelay+0x30>
			vTaskSuspendAll();
 8013806:	f000 f883 	bl	8013910 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801380a:	2100      	movs	r1, #0
 801380c:	6878      	ldr	r0, [r7, #4]
 801380e:	f000 fe03 	bl	8014418 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8013812:	f000 f88b 	bl	801392c <xTaskResumeAll>
 8013816:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8013818:	68fb      	ldr	r3, [r7, #12]
 801381a:	2b00      	cmp	r3, #0
 801381c:	d107      	bne.n	801382e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 801381e:	4b07      	ldr	r3, [pc, #28]	; (801383c <vTaskDelay+0x68>)
 8013820:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013824:	601a      	str	r2, [r3, #0]
 8013826:	f3bf 8f4f 	dsb	sy
 801382a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801382e:	bf00      	nop
 8013830:	3710      	adds	r7, #16
 8013832:	46bd      	mov	sp, r7
 8013834:	bd80      	pop	{r7, pc}
 8013836:	bf00      	nop
 8013838:	20000e88 	.word	0x20000e88
 801383c:	e000ed04 	.word	0xe000ed04

08013840 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8013840:	b580      	push	{r7, lr}
 8013842:	b08a      	sub	sp, #40	; 0x28
 8013844:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8013846:	2300      	movs	r3, #0
 8013848:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801384a:	2300      	movs	r3, #0
 801384c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801384e:	463a      	mov	r2, r7
 8013850:	1d39      	adds	r1, r7, #4
 8013852:	f107 0308 	add.w	r3, r7, #8
 8013856:	4618      	mov	r0, r3
 8013858:	f7fe fcfc 	bl	8012254 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801385c:	6839      	ldr	r1, [r7, #0]
 801385e:	687b      	ldr	r3, [r7, #4]
 8013860:	68ba      	ldr	r2, [r7, #8]
 8013862:	9202      	str	r2, [sp, #8]
 8013864:	9301      	str	r3, [sp, #4]
 8013866:	2300      	movs	r3, #0
 8013868:	9300      	str	r3, [sp, #0]
 801386a:	2300      	movs	r3, #0
 801386c:	460a      	mov	r2, r1
 801386e:	4922      	ldr	r1, [pc, #136]	; (80138f8 <vTaskStartScheduler+0xb8>)
 8013870:	4822      	ldr	r0, [pc, #136]	; (80138fc <vTaskStartScheduler+0xbc>)
 8013872:	f7ff fe09 	bl	8013488 <xTaskCreateStatic>
 8013876:	4602      	mov	r2, r0
 8013878:	4b21      	ldr	r3, [pc, #132]	; (8013900 <vTaskStartScheduler+0xc0>)
 801387a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801387c:	4b20      	ldr	r3, [pc, #128]	; (8013900 <vTaskStartScheduler+0xc0>)
 801387e:	681b      	ldr	r3, [r3, #0]
 8013880:	2b00      	cmp	r3, #0
 8013882:	d002      	beq.n	801388a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8013884:	2301      	movs	r3, #1
 8013886:	617b      	str	r3, [r7, #20]
 8013888:	e001      	b.n	801388e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801388a:	2300      	movs	r3, #0
 801388c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801388e:	697b      	ldr	r3, [r7, #20]
 8013890:	2b01      	cmp	r3, #1
 8013892:	d102      	bne.n	801389a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8013894:	f000 fe14 	bl	80144c0 <xTimerCreateTimerTask>
 8013898:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801389a:	697b      	ldr	r3, [r7, #20]
 801389c:	2b01      	cmp	r3, #1
 801389e:	d117      	bne.n	80138d0 <vTaskStartScheduler+0x90>
 80138a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80138a4:	b672      	cpsid	i
 80138a6:	f383 8811 	msr	BASEPRI, r3
 80138aa:	f3bf 8f6f 	isb	sy
 80138ae:	f3bf 8f4f 	dsb	sy
 80138b2:	b662      	cpsie	i
 80138b4:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80138b6:	4b13      	ldr	r3, [pc, #76]	; (8013904 <vTaskStartScheduler+0xc4>)
 80138b8:	f04f 32ff 	mov.w	r2, #4294967295
 80138bc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80138be:	4b12      	ldr	r3, [pc, #72]	; (8013908 <vTaskStartScheduler+0xc8>)
 80138c0:	2201      	movs	r2, #1
 80138c2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80138c4:	4b11      	ldr	r3, [pc, #68]	; (801390c <vTaskStartScheduler+0xcc>)
 80138c6:	2200      	movs	r2, #0
 80138c8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80138ca:	f001 f9d9 	bl	8014c80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80138ce:	e00f      	b.n	80138f0 <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80138d0:	697b      	ldr	r3, [r7, #20]
 80138d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80138d6:	d10b      	bne.n	80138f0 <vTaskStartScheduler+0xb0>
 80138d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80138dc:	b672      	cpsid	i
 80138de:	f383 8811 	msr	BASEPRI, r3
 80138e2:	f3bf 8f6f 	isb	sy
 80138e6:	f3bf 8f4f 	dsb	sy
 80138ea:	b662      	cpsie	i
 80138ec:	60fb      	str	r3, [r7, #12]
 80138ee:	e7fe      	b.n	80138ee <vTaskStartScheduler+0xae>
}
 80138f0:	bf00      	nop
 80138f2:	3718      	adds	r7, #24
 80138f4:	46bd      	mov	sp, r7
 80138f6:	bd80      	pop	{r7, pc}
 80138f8:	0801609c 	.word	0x0801609c
 80138fc:	08013f55 	.word	0x08013f55
 8013900:	20000e84 	.word	0x20000e84
 8013904:	20000e80 	.word	0x20000e80
 8013908:	20000e6c 	.word	0x20000e6c
 801390c:	20000e64 	.word	0x20000e64

08013910 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8013910:	b480      	push	{r7}
 8013912:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8013914:	4b04      	ldr	r3, [pc, #16]	; (8013928 <vTaskSuspendAll+0x18>)
 8013916:	681b      	ldr	r3, [r3, #0]
 8013918:	3301      	adds	r3, #1
 801391a:	4a03      	ldr	r2, [pc, #12]	; (8013928 <vTaskSuspendAll+0x18>)
 801391c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 801391e:	bf00      	nop
 8013920:	46bd      	mov	sp, r7
 8013922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013926:	4770      	bx	lr
 8013928:	20000e88 	.word	0x20000e88

0801392c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801392c:	b580      	push	{r7, lr}
 801392e:	b084      	sub	sp, #16
 8013930:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8013932:	2300      	movs	r3, #0
 8013934:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8013936:	2300      	movs	r3, #0
 8013938:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801393a:	4b42      	ldr	r3, [pc, #264]	; (8013a44 <xTaskResumeAll+0x118>)
 801393c:	681b      	ldr	r3, [r3, #0]
 801393e:	2b00      	cmp	r3, #0
 8013940:	d10b      	bne.n	801395a <xTaskResumeAll+0x2e>
 8013942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013946:	b672      	cpsid	i
 8013948:	f383 8811 	msr	BASEPRI, r3
 801394c:	f3bf 8f6f 	isb	sy
 8013950:	f3bf 8f4f 	dsb	sy
 8013954:	b662      	cpsie	i
 8013956:	603b      	str	r3, [r7, #0]
 8013958:	e7fe      	b.n	8013958 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801395a:	f001 fa0d 	bl	8014d78 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801395e:	4b39      	ldr	r3, [pc, #228]	; (8013a44 <xTaskResumeAll+0x118>)
 8013960:	681b      	ldr	r3, [r3, #0]
 8013962:	3b01      	subs	r3, #1
 8013964:	4a37      	ldr	r2, [pc, #220]	; (8013a44 <xTaskResumeAll+0x118>)
 8013966:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013968:	4b36      	ldr	r3, [pc, #216]	; (8013a44 <xTaskResumeAll+0x118>)
 801396a:	681b      	ldr	r3, [r3, #0]
 801396c:	2b00      	cmp	r3, #0
 801396e:	d162      	bne.n	8013a36 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8013970:	4b35      	ldr	r3, [pc, #212]	; (8013a48 <xTaskResumeAll+0x11c>)
 8013972:	681b      	ldr	r3, [r3, #0]
 8013974:	2b00      	cmp	r3, #0
 8013976:	d05e      	beq.n	8013a36 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013978:	e02f      	b.n	80139da <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801397a:	4b34      	ldr	r3, [pc, #208]	; (8013a4c <xTaskResumeAll+0x120>)
 801397c:	68db      	ldr	r3, [r3, #12]
 801397e:	68db      	ldr	r3, [r3, #12]
 8013980:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013982:	68fb      	ldr	r3, [r7, #12]
 8013984:	3318      	adds	r3, #24
 8013986:	4618      	mov	r0, r3
 8013988:	f7fe fd22 	bl	80123d0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801398c:	68fb      	ldr	r3, [r7, #12]
 801398e:	3304      	adds	r3, #4
 8013990:	4618      	mov	r0, r3
 8013992:	f7fe fd1d 	bl	80123d0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8013996:	68fb      	ldr	r3, [r7, #12]
 8013998:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801399a:	4b2d      	ldr	r3, [pc, #180]	; (8013a50 <xTaskResumeAll+0x124>)
 801399c:	681b      	ldr	r3, [r3, #0]
 801399e:	429a      	cmp	r2, r3
 80139a0:	d903      	bls.n	80139aa <xTaskResumeAll+0x7e>
 80139a2:	68fb      	ldr	r3, [r7, #12]
 80139a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80139a6:	4a2a      	ldr	r2, [pc, #168]	; (8013a50 <xTaskResumeAll+0x124>)
 80139a8:	6013      	str	r3, [r2, #0]
 80139aa:	68fb      	ldr	r3, [r7, #12]
 80139ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80139ae:	4613      	mov	r3, r2
 80139b0:	009b      	lsls	r3, r3, #2
 80139b2:	4413      	add	r3, r2
 80139b4:	009b      	lsls	r3, r3, #2
 80139b6:	4a27      	ldr	r2, [pc, #156]	; (8013a54 <xTaskResumeAll+0x128>)
 80139b8:	441a      	add	r2, r3
 80139ba:	68fb      	ldr	r3, [r7, #12]
 80139bc:	3304      	adds	r3, #4
 80139be:	4619      	mov	r1, r3
 80139c0:	4610      	mov	r0, r2
 80139c2:	f7fe fca8 	bl	8012316 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80139c6:	68fb      	ldr	r3, [r7, #12]
 80139c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80139ca:	4b23      	ldr	r3, [pc, #140]	; (8013a58 <xTaskResumeAll+0x12c>)
 80139cc:	681b      	ldr	r3, [r3, #0]
 80139ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80139d0:	429a      	cmp	r2, r3
 80139d2:	d302      	bcc.n	80139da <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80139d4:	4b21      	ldr	r3, [pc, #132]	; (8013a5c <xTaskResumeAll+0x130>)
 80139d6:	2201      	movs	r2, #1
 80139d8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80139da:	4b1c      	ldr	r3, [pc, #112]	; (8013a4c <xTaskResumeAll+0x120>)
 80139dc:	681b      	ldr	r3, [r3, #0]
 80139de:	2b00      	cmp	r3, #0
 80139e0:	d1cb      	bne.n	801397a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80139e2:	68fb      	ldr	r3, [r7, #12]
 80139e4:	2b00      	cmp	r3, #0
 80139e6:	d001      	beq.n	80139ec <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80139e8:	f000 fb68 	bl	80140bc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80139ec:	4b1c      	ldr	r3, [pc, #112]	; (8013a60 <xTaskResumeAll+0x134>)
 80139ee:	681b      	ldr	r3, [r3, #0]
 80139f0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80139f2:	687b      	ldr	r3, [r7, #4]
 80139f4:	2b00      	cmp	r3, #0
 80139f6:	d010      	beq.n	8013a1a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80139f8:	f000 f858 	bl	8013aac <xTaskIncrementTick>
 80139fc:	4603      	mov	r3, r0
 80139fe:	2b00      	cmp	r3, #0
 8013a00:	d002      	beq.n	8013a08 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8013a02:	4b16      	ldr	r3, [pc, #88]	; (8013a5c <xTaskResumeAll+0x130>)
 8013a04:	2201      	movs	r2, #1
 8013a06:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8013a08:	687b      	ldr	r3, [r7, #4]
 8013a0a:	3b01      	subs	r3, #1
 8013a0c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8013a0e:	687b      	ldr	r3, [r7, #4]
 8013a10:	2b00      	cmp	r3, #0
 8013a12:	d1f1      	bne.n	80139f8 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8013a14:	4b12      	ldr	r3, [pc, #72]	; (8013a60 <xTaskResumeAll+0x134>)
 8013a16:	2200      	movs	r2, #0
 8013a18:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8013a1a:	4b10      	ldr	r3, [pc, #64]	; (8013a5c <xTaskResumeAll+0x130>)
 8013a1c:	681b      	ldr	r3, [r3, #0]
 8013a1e:	2b00      	cmp	r3, #0
 8013a20:	d009      	beq.n	8013a36 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8013a22:	2301      	movs	r3, #1
 8013a24:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8013a26:	4b0f      	ldr	r3, [pc, #60]	; (8013a64 <xTaskResumeAll+0x138>)
 8013a28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013a2c:	601a      	str	r2, [r3, #0]
 8013a2e:	f3bf 8f4f 	dsb	sy
 8013a32:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8013a36:	f001 f9d1 	bl	8014ddc <vPortExitCritical>

	return xAlreadyYielded;
 8013a3a:	68bb      	ldr	r3, [r7, #8]
}
 8013a3c:	4618      	mov	r0, r3
 8013a3e:	3710      	adds	r7, #16
 8013a40:	46bd      	mov	sp, r7
 8013a42:	bd80      	pop	{r7, pc}
 8013a44:	20000e88 	.word	0x20000e88
 8013a48:	20000e60 	.word	0x20000e60
 8013a4c:	20000e20 	.word	0x20000e20
 8013a50:	20000e68 	.word	0x20000e68
 8013a54:	20000990 	.word	0x20000990
 8013a58:	2000098c 	.word	0x2000098c
 8013a5c:	20000e74 	.word	0x20000e74
 8013a60:	20000e70 	.word	0x20000e70
 8013a64:	e000ed04 	.word	0xe000ed04

08013a68 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8013a68:	b480      	push	{r7}
 8013a6a:	b083      	sub	sp, #12
 8013a6c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8013a6e:	4b05      	ldr	r3, [pc, #20]	; (8013a84 <xTaskGetTickCount+0x1c>)
 8013a70:	681b      	ldr	r3, [r3, #0]
 8013a72:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8013a74:	687b      	ldr	r3, [r7, #4]
}
 8013a76:	4618      	mov	r0, r3
 8013a78:	370c      	adds	r7, #12
 8013a7a:	46bd      	mov	sp, r7
 8013a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a80:	4770      	bx	lr
 8013a82:	bf00      	nop
 8013a84:	20000e64 	.word	0x20000e64

08013a88 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8013a88:	b580      	push	{r7, lr}
 8013a8a:	b082      	sub	sp, #8
 8013a8c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013a8e:	f001 fa53 	bl	8014f38 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8013a92:	2300      	movs	r3, #0
 8013a94:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8013a96:	4b04      	ldr	r3, [pc, #16]	; (8013aa8 <xTaskGetTickCountFromISR+0x20>)
 8013a98:	681b      	ldr	r3, [r3, #0]
 8013a9a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013a9c:	683b      	ldr	r3, [r7, #0]
}
 8013a9e:	4618      	mov	r0, r3
 8013aa0:	3708      	adds	r7, #8
 8013aa2:	46bd      	mov	sp, r7
 8013aa4:	bd80      	pop	{r7, pc}
 8013aa6:	bf00      	nop
 8013aa8:	20000e64 	.word	0x20000e64

08013aac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8013aac:	b580      	push	{r7, lr}
 8013aae:	b086      	sub	sp, #24
 8013ab0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8013ab2:	2300      	movs	r3, #0
 8013ab4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013ab6:	4b4f      	ldr	r3, [pc, #316]	; (8013bf4 <xTaskIncrementTick+0x148>)
 8013ab8:	681b      	ldr	r3, [r3, #0]
 8013aba:	2b00      	cmp	r3, #0
 8013abc:	f040 808a 	bne.w	8013bd4 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8013ac0:	4b4d      	ldr	r3, [pc, #308]	; (8013bf8 <xTaskIncrementTick+0x14c>)
 8013ac2:	681b      	ldr	r3, [r3, #0]
 8013ac4:	3301      	adds	r3, #1
 8013ac6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8013ac8:	4a4b      	ldr	r2, [pc, #300]	; (8013bf8 <xTaskIncrementTick+0x14c>)
 8013aca:	693b      	ldr	r3, [r7, #16]
 8013acc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8013ace:	693b      	ldr	r3, [r7, #16]
 8013ad0:	2b00      	cmp	r3, #0
 8013ad2:	d121      	bne.n	8013b18 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8013ad4:	4b49      	ldr	r3, [pc, #292]	; (8013bfc <xTaskIncrementTick+0x150>)
 8013ad6:	681b      	ldr	r3, [r3, #0]
 8013ad8:	681b      	ldr	r3, [r3, #0]
 8013ada:	2b00      	cmp	r3, #0
 8013adc:	d00b      	beq.n	8013af6 <xTaskIncrementTick+0x4a>
 8013ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ae2:	b672      	cpsid	i
 8013ae4:	f383 8811 	msr	BASEPRI, r3
 8013ae8:	f3bf 8f6f 	isb	sy
 8013aec:	f3bf 8f4f 	dsb	sy
 8013af0:	b662      	cpsie	i
 8013af2:	603b      	str	r3, [r7, #0]
 8013af4:	e7fe      	b.n	8013af4 <xTaskIncrementTick+0x48>
 8013af6:	4b41      	ldr	r3, [pc, #260]	; (8013bfc <xTaskIncrementTick+0x150>)
 8013af8:	681b      	ldr	r3, [r3, #0]
 8013afa:	60fb      	str	r3, [r7, #12]
 8013afc:	4b40      	ldr	r3, [pc, #256]	; (8013c00 <xTaskIncrementTick+0x154>)
 8013afe:	681b      	ldr	r3, [r3, #0]
 8013b00:	4a3e      	ldr	r2, [pc, #248]	; (8013bfc <xTaskIncrementTick+0x150>)
 8013b02:	6013      	str	r3, [r2, #0]
 8013b04:	4a3e      	ldr	r2, [pc, #248]	; (8013c00 <xTaskIncrementTick+0x154>)
 8013b06:	68fb      	ldr	r3, [r7, #12]
 8013b08:	6013      	str	r3, [r2, #0]
 8013b0a:	4b3e      	ldr	r3, [pc, #248]	; (8013c04 <xTaskIncrementTick+0x158>)
 8013b0c:	681b      	ldr	r3, [r3, #0]
 8013b0e:	3301      	adds	r3, #1
 8013b10:	4a3c      	ldr	r2, [pc, #240]	; (8013c04 <xTaskIncrementTick+0x158>)
 8013b12:	6013      	str	r3, [r2, #0]
 8013b14:	f000 fad2 	bl	80140bc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8013b18:	4b3b      	ldr	r3, [pc, #236]	; (8013c08 <xTaskIncrementTick+0x15c>)
 8013b1a:	681b      	ldr	r3, [r3, #0]
 8013b1c:	693a      	ldr	r2, [r7, #16]
 8013b1e:	429a      	cmp	r2, r3
 8013b20:	d349      	bcc.n	8013bb6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013b22:	4b36      	ldr	r3, [pc, #216]	; (8013bfc <xTaskIncrementTick+0x150>)
 8013b24:	681b      	ldr	r3, [r3, #0]
 8013b26:	681b      	ldr	r3, [r3, #0]
 8013b28:	2b00      	cmp	r3, #0
 8013b2a:	d104      	bne.n	8013b36 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013b2c:	4b36      	ldr	r3, [pc, #216]	; (8013c08 <xTaskIncrementTick+0x15c>)
 8013b2e:	f04f 32ff 	mov.w	r2, #4294967295
 8013b32:	601a      	str	r2, [r3, #0]
					break;
 8013b34:	e03f      	b.n	8013bb6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013b36:	4b31      	ldr	r3, [pc, #196]	; (8013bfc <xTaskIncrementTick+0x150>)
 8013b38:	681b      	ldr	r3, [r3, #0]
 8013b3a:	68db      	ldr	r3, [r3, #12]
 8013b3c:	68db      	ldr	r3, [r3, #12]
 8013b3e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8013b40:	68bb      	ldr	r3, [r7, #8]
 8013b42:	685b      	ldr	r3, [r3, #4]
 8013b44:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8013b46:	693a      	ldr	r2, [r7, #16]
 8013b48:	687b      	ldr	r3, [r7, #4]
 8013b4a:	429a      	cmp	r2, r3
 8013b4c:	d203      	bcs.n	8013b56 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8013b4e:	4a2e      	ldr	r2, [pc, #184]	; (8013c08 <xTaskIncrementTick+0x15c>)
 8013b50:	687b      	ldr	r3, [r7, #4]
 8013b52:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8013b54:	e02f      	b.n	8013bb6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013b56:	68bb      	ldr	r3, [r7, #8]
 8013b58:	3304      	adds	r3, #4
 8013b5a:	4618      	mov	r0, r3
 8013b5c:	f7fe fc38 	bl	80123d0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8013b60:	68bb      	ldr	r3, [r7, #8]
 8013b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013b64:	2b00      	cmp	r3, #0
 8013b66:	d004      	beq.n	8013b72 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013b68:	68bb      	ldr	r3, [r7, #8]
 8013b6a:	3318      	adds	r3, #24
 8013b6c:	4618      	mov	r0, r3
 8013b6e:	f7fe fc2f 	bl	80123d0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8013b72:	68bb      	ldr	r3, [r7, #8]
 8013b74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013b76:	4b25      	ldr	r3, [pc, #148]	; (8013c0c <xTaskIncrementTick+0x160>)
 8013b78:	681b      	ldr	r3, [r3, #0]
 8013b7a:	429a      	cmp	r2, r3
 8013b7c:	d903      	bls.n	8013b86 <xTaskIncrementTick+0xda>
 8013b7e:	68bb      	ldr	r3, [r7, #8]
 8013b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b82:	4a22      	ldr	r2, [pc, #136]	; (8013c0c <xTaskIncrementTick+0x160>)
 8013b84:	6013      	str	r3, [r2, #0]
 8013b86:	68bb      	ldr	r3, [r7, #8]
 8013b88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013b8a:	4613      	mov	r3, r2
 8013b8c:	009b      	lsls	r3, r3, #2
 8013b8e:	4413      	add	r3, r2
 8013b90:	009b      	lsls	r3, r3, #2
 8013b92:	4a1f      	ldr	r2, [pc, #124]	; (8013c10 <xTaskIncrementTick+0x164>)
 8013b94:	441a      	add	r2, r3
 8013b96:	68bb      	ldr	r3, [r7, #8]
 8013b98:	3304      	adds	r3, #4
 8013b9a:	4619      	mov	r1, r3
 8013b9c:	4610      	mov	r0, r2
 8013b9e:	f7fe fbba 	bl	8012316 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013ba2:	68bb      	ldr	r3, [r7, #8]
 8013ba4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013ba6:	4b1b      	ldr	r3, [pc, #108]	; (8013c14 <xTaskIncrementTick+0x168>)
 8013ba8:	681b      	ldr	r3, [r3, #0]
 8013baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013bac:	429a      	cmp	r2, r3
 8013bae:	d3b8      	bcc.n	8013b22 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8013bb0:	2301      	movs	r3, #1
 8013bb2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013bb4:	e7b5      	b.n	8013b22 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8013bb6:	4b17      	ldr	r3, [pc, #92]	; (8013c14 <xTaskIncrementTick+0x168>)
 8013bb8:	681b      	ldr	r3, [r3, #0]
 8013bba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013bbc:	4914      	ldr	r1, [pc, #80]	; (8013c10 <xTaskIncrementTick+0x164>)
 8013bbe:	4613      	mov	r3, r2
 8013bc0:	009b      	lsls	r3, r3, #2
 8013bc2:	4413      	add	r3, r2
 8013bc4:	009b      	lsls	r3, r3, #2
 8013bc6:	440b      	add	r3, r1
 8013bc8:	681b      	ldr	r3, [r3, #0]
 8013bca:	2b01      	cmp	r3, #1
 8013bcc:	d907      	bls.n	8013bde <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8013bce:	2301      	movs	r3, #1
 8013bd0:	617b      	str	r3, [r7, #20]
 8013bd2:	e004      	b.n	8013bde <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8013bd4:	4b10      	ldr	r3, [pc, #64]	; (8013c18 <xTaskIncrementTick+0x16c>)
 8013bd6:	681b      	ldr	r3, [r3, #0]
 8013bd8:	3301      	adds	r3, #1
 8013bda:	4a0f      	ldr	r2, [pc, #60]	; (8013c18 <xTaskIncrementTick+0x16c>)
 8013bdc:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8013bde:	4b0f      	ldr	r3, [pc, #60]	; (8013c1c <xTaskIncrementTick+0x170>)
 8013be0:	681b      	ldr	r3, [r3, #0]
 8013be2:	2b00      	cmp	r3, #0
 8013be4:	d001      	beq.n	8013bea <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8013be6:	2301      	movs	r3, #1
 8013be8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8013bea:	697b      	ldr	r3, [r7, #20]
}
 8013bec:	4618      	mov	r0, r3
 8013bee:	3718      	adds	r7, #24
 8013bf0:	46bd      	mov	sp, r7
 8013bf2:	bd80      	pop	{r7, pc}
 8013bf4:	20000e88 	.word	0x20000e88
 8013bf8:	20000e64 	.word	0x20000e64
 8013bfc:	20000e18 	.word	0x20000e18
 8013c00:	20000e1c 	.word	0x20000e1c
 8013c04:	20000e78 	.word	0x20000e78
 8013c08:	20000e80 	.word	0x20000e80
 8013c0c:	20000e68 	.word	0x20000e68
 8013c10:	20000990 	.word	0x20000990
 8013c14:	2000098c 	.word	0x2000098c
 8013c18:	20000e70 	.word	0x20000e70
 8013c1c:	20000e74 	.word	0x20000e74

08013c20 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8013c20:	b480      	push	{r7}
 8013c22:	b085      	sub	sp, #20
 8013c24:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8013c26:	4b28      	ldr	r3, [pc, #160]	; (8013cc8 <vTaskSwitchContext+0xa8>)
 8013c28:	681b      	ldr	r3, [r3, #0]
 8013c2a:	2b00      	cmp	r3, #0
 8013c2c:	d003      	beq.n	8013c36 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8013c2e:	4b27      	ldr	r3, [pc, #156]	; (8013ccc <vTaskSwitchContext+0xac>)
 8013c30:	2201      	movs	r2, #1
 8013c32:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8013c34:	e042      	b.n	8013cbc <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8013c36:	4b25      	ldr	r3, [pc, #148]	; (8013ccc <vTaskSwitchContext+0xac>)
 8013c38:	2200      	movs	r2, #0
 8013c3a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013c3c:	4b24      	ldr	r3, [pc, #144]	; (8013cd0 <vTaskSwitchContext+0xb0>)
 8013c3e:	681b      	ldr	r3, [r3, #0]
 8013c40:	60fb      	str	r3, [r7, #12]
 8013c42:	e011      	b.n	8013c68 <vTaskSwitchContext+0x48>
 8013c44:	68fb      	ldr	r3, [r7, #12]
 8013c46:	2b00      	cmp	r3, #0
 8013c48:	d10b      	bne.n	8013c62 <vTaskSwitchContext+0x42>
 8013c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c4e:	b672      	cpsid	i
 8013c50:	f383 8811 	msr	BASEPRI, r3
 8013c54:	f3bf 8f6f 	isb	sy
 8013c58:	f3bf 8f4f 	dsb	sy
 8013c5c:	b662      	cpsie	i
 8013c5e:	607b      	str	r3, [r7, #4]
 8013c60:	e7fe      	b.n	8013c60 <vTaskSwitchContext+0x40>
 8013c62:	68fb      	ldr	r3, [r7, #12]
 8013c64:	3b01      	subs	r3, #1
 8013c66:	60fb      	str	r3, [r7, #12]
 8013c68:	491a      	ldr	r1, [pc, #104]	; (8013cd4 <vTaskSwitchContext+0xb4>)
 8013c6a:	68fa      	ldr	r2, [r7, #12]
 8013c6c:	4613      	mov	r3, r2
 8013c6e:	009b      	lsls	r3, r3, #2
 8013c70:	4413      	add	r3, r2
 8013c72:	009b      	lsls	r3, r3, #2
 8013c74:	440b      	add	r3, r1
 8013c76:	681b      	ldr	r3, [r3, #0]
 8013c78:	2b00      	cmp	r3, #0
 8013c7a:	d0e3      	beq.n	8013c44 <vTaskSwitchContext+0x24>
 8013c7c:	68fa      	ldr	r2, [r7, #12]
 8013c7e:	4613      	mov	r3, r2
 8013c80:	009b      	lsls	r3, r3, #2
 8013c82:	4413      	add	r3, r2
 8013c84:	009b      	lsls	r3, r3, #2
 8013c86:	4a13      	ldr	r2, [pc, #76]	; (8013cd4 <vTaskSwitchContext+0xb4>)
 8013c88:	4413      	add	r3, r2
 8013c8a:	60bb      	str	r3, [r7, #8]
 8013c8c:	68bb      	ldr	r3, [r7, #8]
 8013c8e:	685b      	ldr	r3, [r3, #4]
 8013c90:	685a      	ldr	r2, [r3, #4]
 8013c92:	68bb      	ldr	r3, [r7, #8]
 8013c94:	605a      	str	r2, [r3, #4]
 8013c96:	68bb      	ldr	r3, [r7, #8]
 8013c98:	685a      	ldr	r2, [r3, #4]
 8013c9a:	68bb      	ldr	r3, [r7, #8]
 8013c9c:	3308      	adds	r3, #8
 8013c9e:	429a      	cmp	r2, r3
 8013ca0:	d104      	bne.n	8013cac <vTaskSwitchContext+0x8c>
 8013ca2:	68bb      	ldr	r3, [r7, #8]
 8013ca4:	685b      	ldr	r3, [r3, #4]
 8013ca6:	685a      	ldr	r2, [r3, #4]
 8013ca8:	68bb      	ldr	r3, [r7, #8]
 8013caa:	605a      	str	r2, [r3, #4]
 8013cac:	68bb      	ldr	r3, [r7, #8]
 8013cae:	685b      	ldr	r3, [r3, #4]
 8013cb0:	68db      	ldr	r3, [r3, #12]
 8013cb2:	4a09      	ldr	r2, [pc, #36]	; (8013cd8 <vTaskSwitchContext+0xb8>)
 8013cb4:	6013      	str	r3, [r2, #0]
 8013cb6:	4a06      	ldr	r2, [pc, #24]	; (8013cd0 <vTaskSwitchContext+0xb0>)
 8013cb8:	68fb      	ldr	r3, [r7, #12]
 8013cba:	6013      	str	r3, [r2, #0]
}
 8013cbc:	bf00      	nop
 8013cbe:	3714      	adds	r7, #20
 8013cc0:	46bd      	mov	sp, r7
 8013cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cc6:	4770      	bx	lr
 8013cc8:	20000e88 	.word	0x20000e88
 8013ccc:	20000e74 	.word	0x20000e74
 8013cd0:	20000e68 	.word	0x20000e68
 8013cd4:	20000990 	.word	0x20000990
 8013cd8:	2000098c 	.word	0x2000098c

08013cdc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8013cdc:	b580      	push	{r7, lr}
 8013cde:	b084      	sub	sp, #16
 8013ce0:	af00      	add	r7, sp, #0
 8013ce2:	6078      	str	r0, [r7, #4]
 8013ce4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8013ce6:	687b      	ldr	r3, [r7, #4]
 8013ce8:	2b00      	cmp	r3, #0
 8013cea:	d10b      	bne.n	8013d04 <vTaskPlaceOnEventList+0x28>
 8013cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013cf0:	b672      	cpsid	i
 8013cf2:	f383 8811 	msr	BASEPRI, r3
 8013cf6:	f3bf 8f6f 	isb	sy
 8013cfa:	f3bf 8f4f 	dsb	sy
 8013cfe:	b662      	cpsie	i
 8013d00:	60fb      	str	r3, [r7, #12]
 8013d02:	e7fe      	b.n	8013d02 <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8013d04:	4b07      	ldr	r3, [pc, #28]	; (8013d24 <vTaskPlaceOnEventList+0x48>)
 8013d06:	681b      	ldr	r3, [r3, #0]
 8013d08:	3318      	adds	r3, #24
 8013d0a:	4619      	mov	r1, r3
 8013d0c:	6878      	ldr	r0, [r7, #4]
 8013d0e:	f7fe fb26 	bl	801235e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8013d12:	2101      	movs	r1, #1
 8013d14:	6838      	ldr	r0, [r7, #0]
 8013d16:	f000 fb7f 	bl	8014418 <prvAddCurrentTaskToDelayedList>
}
 8013d1a:	bf00      	nop
 8013d1c:	3710      	adds	r7, #16
 8013d1e:	46bd      	mov	sp, r7
 8013d20:	bd80      	pop	{r7, pc}
 8013d22:	bf00      	nop
 8013d24:	2000098c 	.word	0x2000098c

08013d28 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8013d28:	b580      	push	{r7, lr}
 8013d2a:	b086      	sub	sp, #24
 8013d2c:	af00      	add	r7, sp, #0
 8013d2e:	60f8      	str	r0, [r7, #12]
 8013d30:	60b9      	str	r1, [r7, #8]
 8013d32:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8013d34:	68fb      	ldr	r3, [r7, #12]
 8013d36:	2b00      	cmp	r3, #0
 8013d38:	d10b      	bne.n	8013d52 <vTaskPlaceOnEventListRestricted+0x2a>
 8013d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d3e:	b672      	cpsid	i
 8013d40:	f383 8811 	msr	BASEPRI, r3
 8013d44:	f3bf 8f6f 	isb	sy
 8013d48:	f3bf 8f4f 	dsb	sy
 8013d4c:	b662      	cpsie	i
 8013d4e:	617b      	str	r3, [r7, #20]
 8013d50:	e7fe      	b.n	8013d50 <vTaskPlaceOnEventListRestricted+0x28>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8013d52:	4b0a      	ldr	r3, [pc, #40]	; (8013d7c <vTaskPlaceOnEventListRestricted+0x54>)
 8013d54:	681b      	ldr	r3, [r3, #0]
 8013d56:	3318      	adds	r3, #24
 8013d58:	4619      	mov	r1, r3
 8013d5a:	68f8      	ldr	r0, [r7, #12]
 8013d5c:	f7fe fadb 	bl	8012316 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8013d60:	687b      	ldr	r3, [r7, #4]
 8013d62:	2b00      	cmp	r3, #0
 8013d64:	d002      	beq.n	8013d6c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8013d66:	f04f 33ff 	mov.w	r3, #4294967295
 8013d6a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8013d6c:	6879      	ldr	r1, [r7, #4]
 8013d6e:	68b8      	ldr	r0, [r7, #8]
 8013d70:	f000 fb52 	bl	8014418 <prvAddCurrentTaskToDelayedList>
	}
 8013d74:	bf00      	nop
 8013d76:	3718      	adds	r7, #24
 8013d78:	46bd      	mov	sp, r7
 8013d7a:	bd80      	pop	{r7, pc}
 8013d7c:	2000098c 	.word	0x2000098c

08013d80 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8013d80:	b580      	push	{r7, lr}
 8013d82:	b086      	sub	sp, #24
 8013d84:	af00      	add	r7, sp, #0
 8013d86:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013d88:	687b      	ldr	r3, [r7, #4]
 8013d8a:	68db      	ldr	r3, [r3, #12]
 8013d8c:	68db      	ldr	r3, [r3, #12]
 8013d8e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8013d90:	693b      	ldr	r3, [r7, #16]
 8013d92:	2b00      	cmp	r3, #0
 8013d94:	d10b      	bne.n	8013dae <xTaskRemoveFromEventList+0x2e>
 8013d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d9a:	b672      	cpsid	i
 8013d9c:	f383 8811 	msr	BASEPRI, r3
 8013da0:	f3bf 8f6f 	isb	sy
 8013da4:	f3bf 8f4f 	dsb	sy
 8013da8:	b662      	cpsie	i
 8013daa:	60fb      	str	r3, [r7, #12]
 8013dac:	e7fe      	b.n	8013dac <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8013dae:	693b      	ldr	r3, [r7, #16]
 8013db0:	3318      	adds	r3, #24
 8013db2:	4618      	mov	r0, r3
 8013db4:	f7fe fb0c 	bl	80123d0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013db8:	4b1d      	ldr	r3, [pc, #116]	; (8013e30 <xTaskRemoveFromEventList+0xb0>)
 8013dba:	681b      	ldr	r3, [r3, #0]
 8013dbc:	2b00      	cmp	r3, #0
 8013dbe:	d11d      	bne.n	8013dfc <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8013dc0:	693b      	ldr	r3, [r7, #16]
 8013dc2:	3304      	adds	r3, #4
 8013dc4:	4618      	mov	r0, r3
 8013dc6:	f7fe fb03 	bl	80123d0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8013dca:	693b      	ldr	r3, [r7, #16]
 8013dcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013dce:	4b19      	ldr	r3, [pc, #100]	; (8013e34 <xTaskRemoveFromEventList+0xb4>)
 8013dd0:	681b      	ldr	r3, [r3, #0]
 8013dd2:	429a      	cmp	r2, r3
 8013dd4:	d903      	bls.n	8013dde <xTaskRemoveFromEventList+0x5e>
 8013dd6:	693b      	ldr	r3, [r7, #16]
 8013dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013dda:	4a16      	ldr	r2, [pc, #88]	; (8013e34 <xTaskRemoveFromEventList+0xb4>)
 8013ddc:	6013      	str	r3, [r2, #0]
 8013dde:	693b      	ldr	r3, [r7, #16]
 8013de0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013de2:	4613      	mov	r3, r2
 8013de4:	009b      	lsls	r3, r3, #2
 8013de6:	4413      	add	r3, r2
 8013de8:	009b      	lsls	r3, r3, #2
 8013dea:	4a13      	ldr	r2, [pc, #76]	; (8013e38 <xTaskRemoveFromEventList+0xb8>)
 8013dec:	441a      	add	r2, r3
 8013dee:	693b      	ldr	r3, [r7, #16]
 8013df0:	3304      	adds	r3, #4
 8013df2:	4619      	mov	r1, r3
 8013df4:	4610      	mov	r0, r2
 8013df6:	f7fe fa8e 	bl	8012316 <vListInsertEnd>
 8013dfa:	e005      	b.n	8013e08 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8013dfc:	693b      	ldr	r3, [r7, #16]
 8013dfe:	3318      	adds	r3, #24
 8013e00:	4619      	mov	r1, r3
 8013e02:	480e      	ldr	r0, [pc, #56]	; (8013e3c <xTaskRemoveFromEventList+0xbc>)
 8013e04:	f7fe fa87 	bl	8012316 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8013e08:	693b      	ldr	r3, [r7, #16]
 8013e0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013e0c:	4b0c      	ldr	r3, [pc, #48]	; (8013e40 <xTaskRemoveFromEventList+0xc0>)
 8013e0e:	681b      	ldr	r3, [r3, #0]
 8013e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013e12:	429a      	cmp	r2, r3
 8013e14:	d905      	bls.n	8013e22 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8013e16:	2301      	movs	r3, #1
 8013e18:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8013e1a:	4b0a      	ldr	r3, [pc, #40]	; (8013e44 <xTaskRemoveFromEventList+0xc4>)
 8013e1c:	2201      	movs	r2, #1
 8013e1e:	601a      	str	r2, [r3, #0]
 8013e20:	e001      	b.n	8013e26 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8013e22:	2300      	movs	r3, #0
 8013e24:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8013e26:	697b      	ldr	r3, [r7, #20]
}
 8013e28:	4618      	mov	r0, r3
 8013e2a:	3718      	adds	r7, #24
 8013e2c:	46bd      	mov	sp, r7
 8013e2e:	bd80      	pop	{r7, pc}
 8013e30:	20000e88 	.word	0x20000e88
 8013e34:	20000e68 	.word	0x20000e68
 8013e38:	20000990 	.word	0x20000990
 8013e3c:	20000e20 	.word	0x20000e20
 8013e40:	2000098c 	.word	0x2000098c
 8013e44:	20000e74 	.word	0x20000e74

08013e48 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8013e48:	b480      	push	{r7}
 8013e4a:	b083      	sub	sp, #12
 8013e4c:	af00      	add	r7, sp, #0
 8013e4e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8013e50:	4b06      	ldr	r3, [pc, #24]	; (8013e6c <vTaskInternalSetTimeOutState+0x24>)
 8013e52:	681a      	ldr	r2, [r3, #0]
 8013e54:	687b      	ldr	r3, [r7, #4]
 8013e56:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8013e58:	4b05      	ldr	r3, [pc, #20]	; (8013e70 <vTaskInternalSetTimeOutState+0x28>)
 8013e5a:	681a      	ldr	r2, [r3, #0]
 8013e5c:	687b      	ldr	r3, [r7, #4]
 8013e5e:	605a      	str	r2, [r3, #4]
}
 8013e60:	bf00      	nop
 8013e62:	370c      	adds	r7, #12
 8013e64:	46bd      	mov	sp, r7
 8013e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e6a:	4770      	bx	lr
 8013e6c:	20000e78 	.word	0x20000e78
 8013e70:	20000e64 	.word	0x20000e64

08013e74 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8013e74:	b580      	push	{r7, lr}
 8013e76:	b088      	sub	sp, #32
 8013e78:	af00      	add	r7, sp, #0
 8013e7a:	6078      	str	r0, [r7, #4]
 8013e7c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8013e7e:	687b      	ldr	r3, [r7, #4]
 8013e80:	2b00      	cmp	r3, #0
 8013e82:	d10b      	bne.n	8013e9c <xTaskCheckForTimeOut+0x28>
 8013e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e88:	b672      	cpsid	i
 8013e8a:	f383 8811 	msr	BASEPRI, r3
 8013e8e:	f3bf 8f6f 	isb	sy
 8013e92:	f3bf 8f4f 	dsb	sy
 8013e96:	b662      	cpsie	i
 8013e98:	613b      	str	r3, [r7, #16]
 8013e9a:	e7fe      	b.n	8013e9a <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 8013e9c:	683b      	ldr	r3, [r7, #0]
 8013e9e:	2b00      	cmp	r3, #0
 8013ea0:	d10b      	bne.n	8013eba <xTaskCheckForTimeOut+0x46>
 8013ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ea6:	b672      	cpsid	i
 8013ea8:	f383 8811 	msr	BASEPRI, r3
 8013eac:	f3bf 8f6f 	isb	sy
 8013eb0:	f3bf 8f4f 	dsb	sy
 8013eb4:	b662      	cpsie	i
 8013eb6:	60fb      	str	r3, [r7, #12]
 8013eb8:	e7fe      	b.n	8013eb8 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 8013eba:	f000 ff5d 	bl	8014d78 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8013ebe:	4b1d      	ldr	r3, [pc, #116]	; (8013f34 <xTaskCheckForTimeOut+0xc0>)
 8013ec0:	681b      	ldr	r3, [r3, #0]
 8013ec2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8013ec4:	687b      	ldr	r3, [r7, #4]
 8013ec6:	685b      	ldr	r3, [r3, #4]
 8013ec8:	69ba      	ldr	r2, [r7, #24]
 8013eca:	1ad3      	subs	r3, r2, r3
 8013ecc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8013ece:	683b      	ldr	r3, [r7, #0]
 8013ed0:	681b      	ldr	r3, [r3, #0]
 8013ed2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013ed6:	d102      	bne.n	8013ede <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8013ed8:	2300      	movs	r3, #0
 8013eda:	61fb      	str	r3, [r7, #28]
 8013edc:	e023      	b.n	8013f26 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8013ede:	687b      	ldr	r3, [r7, #4]
 8013ee0:	681a      	ldr	r2, [r3, #0]
 8013ee2:	4b15      	ldr	r3, [pc, #84]	; (8013f38 <xTaskCheckForTimeOut+0xc4>)
 8013ee4:	681b      	ldr	r3, [r3, #0]
 8013ee6:	429a      	cmp	r2, r3
 8013ee8:	d007      	beq.n	8013efa <xTaskCheckForTimeOut+0x86>
 8013eea:	687b      	ldr	r3, [r7, #4]
 8013eec:	685b      	ldr	r3, [r3, #4]
 8013eee:	69ba      	ldr	r2, [r7, #24]
 8013ef0:	429a      	cmp	r2, r3
 8013ef2:	d302      	bcc.n	8013efa <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8013ef4:	2301      	movs	r3, #1
 8013ef6:	61fb      	str	r3, [r7, #28]
 8013ef8:	e015      	b.n	8013f26 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8013efa:	683b      	ldr	r3, [r7, #0]
 8013efc:	681b      	ldr	r3, [r3, #0]
 8013efe:	697a      	ldr	r2, [r7, #20]
 8013f00:	429a      	cmp	r2, r3
 8013f02:	d20b      	bcs.n	8013f1c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8013f04:	683b      	ldr	r3, [r7, #0]
 8013f06:	681a      	ldr	r2, [r3, #0]
 8013f08:	697b      	ldr	r3, [r7, #20]
 8013f0a:	1ad2      	subs	r2, r2, r3
 8013f0c:	683b      	ldr	r3, [r7, #0]
 8013f0e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8013f10:	6878      	ldr	r0, [r7, #4]
 8013f12:	f7ff ff99 	bl	8013e48 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8013f16:	2300      	movs	r3, #0
 8013f18:	61fb      	str	r3, [r7, #28]
 8013f1a:	e004      	b.n	8013f26 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8013f1c:	683b      	ldr	r3, [r7, #0]
 8013f1e:	2200      	movs	r2, #0
 8013f20:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8013f22:	2301      	movs	r3, #1
 8013f24:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8013f26:	f000 ff59 	bl	8014ddc <vPortExitCritical>

	return xReturn;
 8013f2a:	69fb      	ldr	r3, [r7, #28]
}
 8013f2c:	4618      	mov	r0, r3
 8013f2e:	3720      	adds	r7, #32
 8013f30:	46bd      	mov	sp, r7
 8013f32:	bd80      	pop	{r7, pc}
 8013f34:	20000e64 	.word	0x20000e64
 8013f38:	20000e78 	.word	0x20000e78

08013f3c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8013f3c:	b480      	push	{r7}
 8013f3e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8013f40:	4b03      	ldr	r3, [pc, #12]	; (8013f50 <vTaskMissedYield+0x14>)
 8013f42:	2201      	movs	r2, #1
 8013f44:	601a      	str	r2, [r3, #0]
}
 8013f46:	bf00      	nop
 8013f48:	46bd      	mov	sp, r7
 8013f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f4e:	4770      	bx	lr
 8013f50:	20000e74 	.word	0x20000e74

08013f54 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8013f54:	b580      	push	{r7, lr}
 8013f56:	b082      	sub	sp, #8
 8013f58:	af00      	add	r7, sp, #0
 8013f5a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8013f5c:	f000 f852 	bl	8014004 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8013f60:	4b06      	ldr	r3, [pc, #24]	; (8013f7c <prvIdleTask+0x28>)
 8013f62:	681b      	ldr	r3, [r3, #0]
 8013f64:	2b01      	cmp	r3, #1
 8013f66:	d9f9      	bls.n	8013f5c <prvIdleTask+0x8>
			{
				taskYIELD();
 8013f68:	4b05      	ldr	r3, [pc, #20]	; (8013f80 <prvIdleTask+0x2c>)
 8013f6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013f6e:	601a      	str	r2, [r3, #0]
 8013f70:	f3bf 8f4f 	dsb	sy
 8013f74:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8013f78:	e7f0      	b.n	8013f5c <prvIdleTask+0x8>
 8013f7a:	bf00      	nop
 8013f7c:	20000990 	.word	0x20000990
 8013f80:	e000ed04 	.word	0xe000ed04

08013f84 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8013f84:	b580      	push	{r7, lr}
 8013f86:	b082      	sub	sp, #8
 8013f88:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013f8a:	2300      	movs	r3, #0
 8013f8c:	607b      	str	r3, [r7, #4]
 8013f8e:	e00c      	b.n	8013faa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8013f90:	687a      	ldr	r2, [r7, #4]
 8013f92:	4613      	mov	r3, r2
 8013f94:	009b      	lsls	r3, r3, #2
 8013f96:	4413      	add	r3, r2
 8013f98:	009b      	lsls	r3, r3, #2
 8013f9a:	4a12      	ldr	r2, [pc, #72]	; (8013fe4 <prvInitialiseTaskLists+0x60>)
 8013f9c:	4413      	add	r3, r2
 8013f9e:	4618      	mov	r0, r3
 8013fa0:	f7fe f98c 	bl	80122bc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013fa4:	687b      	ldr	r3, [r7, #4]
 8013fa6:	3301      	adds	r3, #1
 8013fa8:	607b      	str	r3, [r7, #4]
 8013faa:	687b      	ldr	r3, [r7, #4]
 8013fac:	2b37      	cmp	r3, #55	; 0x37
 8013fae:	d9ef      	bls.n	8013f90 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8013fb0:	480d      	ldr	r0, [pc, #52]	; (8013fe8 <prvInitialiseTaskLists+0x64>)
 8013fb2:	f7fe f983 	bl	80122bc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8013fb6:	480d      	ldr	r0, [pc, #52]	; (8013fec <prvInitialiseTaskLists+0x68>)
 8013fb8:	f7fe f980 	bl	80122bc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8013fbc:	480c      	ldr	r0, [pc, #48]	; (8013ff0 <prvInitialiseTaskLists+0x6c>)
 8013fbe:	f7fe f97d 	bl	80122bc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8013fc2:	480c      	ldr	r0, [pc, #48]	; (8013ff4 <prvInitialiseTaskLists+0x70>)
 8013fc4:	f7fe f97a 	bl	80122bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8013fc8:	480b      	ldr	r0, [pc, #44]	; (8013ff8 <prvInitialiseTaskLists+0x74>)
 8013fca:	f7fe f977 	bl	80122bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8013fce:	4b0b      	ldr	r3, [pc, #44]	; (8013ffc <prvInitialiseTaskLists+0x78>)
 8013fd0:	4a05      	ldr	r2, [pc, #20]	; (8013fe8 <prvInitialiseTaskLists+0x64>)
 8013fd2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8013fd4:	4b0a      	ldr	r3, [pc, #40]	; (8014000 <prvInitialiseTaskLists+0x7c>)
 8013fd6:	4a05      	ldr	r2, [pc, #20]	; (8013fec <prvInitialiseTaskLists+0x68>)
 8013fd8:	601a      	str	r2, [r3, #0]
}
 8013fda:	bf00      	nop
 8013fdc:	3708      	adds	r7, #8
 8013fde:	46bd      	mov	sp, r7
 8013fe0:	bd80      	pop	{r7, pc}
 8013fe2:	bf00      	nop
 8013fe4:	20000990 	.word	0x20000990
 8013fe8:	20000df0 	.word	0x20000df0
 8013fec:	20000e04 	.word	0x20000e04
 8013ff0:	20000e20 	.word	0x20000e20
 8013ff4:	20000e34 	.word	0x20000e34
 8013ff8:	20000e4c 	.word	0x20000e4c
 8013ffc:	20000e18 	.word	0x20000e18
 8014000:	20000e1c 	.word	0x20000e1c

08014004 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8014004:	b580      	push	{r7, lr}
 8014006:	b082      	sub	sp, #8
 8014008:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801400a:	e019      	b.n	8014040 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801400c:	f000 feb4 	bl	8014d78 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014010:	4b0f      	ldr	r3, [pc, #60]	; (8014050 <prvCheckTasksWaitingTermination+0x4c>)
 8014012:	68db      	ldr	r3, [r3, #12]
 8014014:	68db      	ldr	r3, [r3, #12]
 8014016:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014018:	687b      	ldr	r3, [r7, #4]
 801401a:	3304      	adds	r3, #4
 801401c:	4618      	mov	r0, r3
 801401e:	f7fe f9d7 	bl	80123d0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8014022:	4b0c      	ldr	r3, [pc, #48]	; (8014054 <prvCheckTasksWaitingTermination+0x50>)
 8014024:	681b      	ldr	r3, [r3, #0]
 8014026:	3b01      	subs	r3, #1
 8014028:	4a0a      	ldr	r2, [pc, #40]	; (8014054 <prvCheckTasksWaitingTermination+0x50>)
 801402a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801402c:	4b0a      	ldr	r3, [pc, #40]	; (8014058 <prvCheckTasksWaitingTermination+0x54>)
 801402e:	681b      	ldr	r3, [r3, #0]
 8014030:	3b01      	subs	r3, #1
 8014032:	4a09      	ldr	r2, [pc, #36]	; (8014058 <prvCheckTasksWaitingTermination+0x54>)
 8014034:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8014036:	f000 fed1 	bl	8014ddc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801403a:	6878      	ldr	r0, [r7, #4]
 801403c:	f000 f80e 	bl	801405c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014040:	4b05      	ldr	r3, [pc, #20]	; (8014058 <prvCheckTasksWaitingTermination+0x54>)
 8014042:	681b      	ldr	r3, [r3, #0]
 8014044:	2b00      	cmp	r3, #0
 8014046:	d1e1      	bne.n	801400c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8014048:	bf00      	nop
 801404a:	3708      	adds	r7, #8
 801404c:	46bd      	mov	sp, r7
 801404e:	bd80      	pop	{r7, pc}
 8014050:	20000e34 	.word	0x20000e34
 8014054:	20000e60 	.word	0x20000e60
 8014058:	20000e48 	.word	0x20000e48

0801405c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801405c:	b580      	push	{r7, lr}
 801405e:	b084      	sub	sp, #16
 8014060:	af00      	add	r7, sp, #0
 8014062:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8014064:	687b      	ldr	r3, [r7, #4]
 8014066:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801406a:	2b00      	cmp	r3, #0
 801406c:	d108      	bne.n	8014080 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801406e:	687b      	ldr	r3, [r7, #4]
 8014070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014072:	4618      	mov	r0, r3
 8014074:	f001 f86a 	bl	801514c <vPortFree>
				vPortFree( pxTCB );
 8014078:	6878      	ldr	r0, [r7, #4]
 801407a:	f001 f867 	bl	801514c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801407e:	e019      	b.n	80140b4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8014080:	687b      	ldr	r3, [r7, #4]
 8014082:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8014086:	2b01      	cmp	r3, #1
 8014088:	d103      	bne.n	8014092 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801408a:	6878      	ldr	r0, [r7, #4]
 801408c:	f001 f85e 	bl	801514c <vPortFree>
	}
 8014090:	e010      	b.n	80140b4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8014092:	687b      	ldr	r3, [r7, #4]
 8014094:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8014098:	2b02      	cmp	r3, #2
 801409a:	d00b      	beq.n	80140b4 <prvDeleteTCB+0x58>
 801409c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80140a0:	b672      	cpsid	i
 80140a2:	f383 8811 	msr	BASEPRI, r3
 80140a6:	f3bf 8f6f 	isb	sy
 80140aa:	f3bf 8f4f 	dsb	sy
 80140ae:	b662      	cpsie	i
 80140b0:	60fb      	str	r3, [r7, #12]
 80140b2:	e7fe      	b.n	80140b2 <prvDeleteTCB+0x56>
	}
 80140b4:	bf00      	nop
 80140b6:	3710      	adds	r7, #16
 80140b8:	46bd      	mov	sp, r7
 80140ba:	bd80      	pop	{r7, pc}

080140bc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80140bc:	b480      	push	{r7}
 80140be:	b083      	sub	sp, #12
 80140c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80140c2:	4b0c      	ldr	r3, [pc, #48]	; (80140f4 <prvResetNextTaskUnblockTime+0x38>)
 80140c4:	681b      	ldr	r3, [r3, #0]
 80140c6:	681b      	ldr	r3, [r3, #0]
 80140c8:	2b00      	cmp	r3, #0
 80140ca:	d104      	bne.n	80140d6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80140cc:	4b0a      	ldr	r3, [pc, #40]	; (80140f8 <prvResetNextTaskUnblockTime+0x3c>)
 80140ce:	f04f 32ff 	mov.w	r2, #4294967295
 80140d2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80140d4:	e008      	b.n	80140e8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80140d6:	4b07      	ldr	r3, [pc, #28]	; (80140f4 <prvResetNextTaskUnblockTime+0x38>)
 80140d8:	681b      	ldr	r3, [r3, #0]
 80140da:	68db      	ldr	r3, [r3, #12]
 80140dc:	68db      	ldr	r3, [r3, #12]
 80140de:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80140e0:	687b      	ldr	r3, [r7, #4]
 80140e2:	685b      	ldr	r3, [r3, #4]
 80140e4:	4a04      	ldr	r2, [pc, #16]	; (80140f8 <prvResetNextTaskUnblockTime+0x3c>)
 80140e6:	6013      	str	r3, [r2, #0]
}
 80140e8:	bf00      	nop
 80140ea:	370c      	adds	r7, #12
 80140ec:	46bd      	mov	sp, r7
 80140ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140f2:	4770      	bx	lr
 80140f4:	20000e18 	.word	0x20000e18
 80140f8:	20000e80 	.word	0x20000e80

080140fc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80140fc:	b480      	push	{r7}
 80140fe:	b083      	sub	sp, #12
 8014100:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8014102:	4b0b      	ldr	r3, [pc, #44]	; (8014130 <xTaskGetSchedulerState+0x34>)
 8014104:	681b      	ldr	r3, [r3, #0]
 8014106:	2b00      	cmp	r3, #0
 8014108:	d102      	bne.n	8014110 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801410a:	2301      	movs	r3, #1
 801410c:	607b      	str	r3, [r7, #4]
 801410e:	e008      	b.n	8014122 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014110:	4b08      	ldr	r3, [pc, #32]	; (8014134 <xTaskGetSchedulerState+0x38>)
 8014112:	681b      	ldr	r3, [r3, #0]
 8014114:	2b00      	cmp	r3, #0
 8014116:	d102      	bne.n	801411e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8014118:	2302      	movs	r3, #2
 801411a:	607b      	str	r3, [r7, #4]
 801411c:	e001      	b.n	8014122 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801411e:	2300      	movs	r3, #0
 8014120:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8014122:	687b      	ldr	r3, [r7, #4]
	}
 8014124:	4618      	mov	r0, r3
 8014126:	370c      	adds	r7, #12
 8014128:	46bd      	mov	sp, r7
 801412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801412e:	4770      	bx	lr
 8014130:	20000e6c 	.word	0x20000e6c
 8014134:	20000e88 	.word	0x20000e88

08014138 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8014138:	b580      	push	{r7, lr}
 801413a:	b084      	sub	sp, #16
 801413c:	af00      	add	r7, sp, #0
 801413e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8014140:	687b      	ldr	r3, [r7, #4]
 8014142:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8014144:	2300      	movs	r3, #0
 8014146:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8014148:	687b      	ldr	r3, [r7, #4]
 801414a:	2b00      	cmp	r3, #0
 801414c:	d051      	beq.n	80141f2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801414e:	68bb      	ldr	r3, [r7, #8]
 8014150:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014152:	4b2a      	ldr	r3, [pc, #168]	; (80141fc <xTaskPriorityInherit+0xc4>)
 8014154:	681b      	ldr	r3, [r3, #0]
 8014156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014158:	429a      	cmp	r2, r3
 801415a:	d241      	bcs.n	80141e0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801415c:	68bb      	ldr	r3, [r7, #8]
 801415e:	699b      	ldr	r3, [r3, #24]
 8014160:	2b00      	cmp	r3, #0
 8014162:	db06      	blt.n	8014172 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014164:	4b25      	ldr	r3, [pc, #148]	; (80141fc <xTaskPriorityInherit+0xc4>)
 8014166:	681b      	ldr	r3, [r3, #0]
 8014168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801416a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801416e:	68bb      	ldr	r3, [r7, #8]
 8014170:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8014172:	68bb      	ldr	r3, [r7, #8]
 8014174:	6959      	ldr	r1, [r3, #20]
 8014176:	68bb      	ldr	r3, [r7, #8]
 8014178:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801417a:	4613      	mov	r3, r2
 801417c:	009b      	lsls	r3, r3, #2
 801417e:	4413      	add	r3, r2
 8014180:	009b      	lsls	r3, r3, #2
 8014182:	4a1f      	ldr	r2, [pc, #124]	; (8014200 <xTaskPriorityInherit+0xc8>)
 8014184:	4413      	add	r3, r2
 8014186:	4299      	cmp	r1, r3
 8014188:	d122      	bne.n	80141d0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801418a:	68bb      	ldr	r3, [r7, #8]
 801418c:	3304      	adds	r3, #4
 801418e:	4618      	mov	r0, r3
 8014190:	f7fe f91e 	bl	80123d0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8014194:	4b19      	ldr	r3, [pc, #100]	; (80141fc <xTaskPriorityInherit+0xc4>)
 8014196:	681b      	ldr	r3, [r3, #0]
 8014198:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801419a:	68bb      	ldr	r3, [r7, #8]
 801419c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801419e:	68bb      	ldr	r3, [r7, #8]
 80141a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80141a2:	4b18      	ldr	r3, [pc, #96]	; (8014204 <xTaskPriorityInherit+0xcc>)
 80141a4:	681b      	ldr	r3, [r3, #0]
 80141a6:	429a      	cmp	r2, r3
 80141a8:	d903      	bls.n	80141b2 <xTaskPriorityInherit+0x7a>
 80141aa:	68bb      	ldr	r3, [r7, #8]
 80141ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80141ae:	4a15      	ldr	r2, [pc, #84]	; (8014204 <xTaskPriorityInherit+0xcc>)
 80141b0:	6013      	str	r3, [r2, #0]
 80141b2:	68bb      	ldr	r3, [r7, #8]
 80141b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80141b6:	4613      	mov	r3, r2
 80141b8:	009b      	lsls	r3, r3, #2
 80141ba:	4413      	add	r3, r2
 80141bc:	009b      	lsls	r3, r3, #2
 80141be:	4a10      	ldr	r2, [pc, #64]	; (8014200 <xTaskPriorityInherit+0xc8>)
 80141c0:	441a      	add	r2, r3
 80141c2:	68bb      	ldr	r3, [r7, #8]
 80141c4:	3304      	adds	r3, #4
 80141c6:	4619      	mov	r1, r3
 80141c8:	4610      	mov	r0, r2
 80141ca:	f7fe f8a4 	bl	8012316 <vListInsertEnd>
 80141ce:	e004      	b.n	80141da <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80141d0:	4b0a      	ldr	r3, [pc, #40]	; (80141fc <xTaskPriorityInherit+0xc4>)
 80141d2:	681b      	ldr	r3, [r3, #0]
 80141d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80141d6:	68bb      	ldr	r3, [r7, #8]
 80141d8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80141da:	2301      	movs	r3, #1
 80141dc:	60fb      	str	r3, [r7, #12]
 80141de:	e008      	b.n	80141f2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80141e0:	68bb      	ldr	r3, [r7, #8]
 80141e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80141e4:	4b05      	ldr	r3, [pc, #20]	; (80141fc <xTaskPriorityInherit+0xc4>)
 80141e6:	681b      	ldr	r3, [r3, #0]
 80141e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80141ea:	429a      	cmp	r2, r3
 80141ec:	d201      	bcs.n	80141f2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80141ee:	2301      	movs	r3, #1
 80141f0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80141f2:	68fb      	ldr	r3, [r7, #12]
	}
 80141f4:	4618      	mov	r0, r3
 80141f6:	3710      	adds	r7, #16
 80141f8:	46bd      	mov	sp, r7
 80141fa:	bd80      	pop	{r7, pc}
 80141fc:	2000098c 	.word	0x2000098c
 8014200:	20000990 	.word	0x20000990
 8014204:	20000e68 	.word	0x20000e68

08014208 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8014208:	b580      	push	{r7, lr}
 801420a:	b086      	sub	sp, #24
 801420c:	af00      	add	r7, sp, #0
 801420e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8014210:	687b      	ldr	r3, [r7, #4]
 8014212:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8014214:	2300      	movs	r3, #0
 8014216:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8014218:	687b      	ldr	r3, [r7, #4]
 801421a:	2b00      	cmp	r3, #0
 801421c:	d058      	beq.n	80142d0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801421e:	4b2f      	ldr	r3, [pc, #188]	; (80142dc <xTaskPriorityDisinherit+0xd4>)
 8014220:	681b      	ldr	r3, [r3, #0]
 8014222:	693a      	ldr	r2, [r7, #16]
 8014224:	429a      	cmp	r2, r3
 8014226:	d00b      	beq.n	8014240 <xTaskPriorityDisinherit+0x38>
 8014228:	f04f 0350 	mov.w	r3, #80	; 0x50
 801422c:	b672      	cpsid	i
 801422e:	f383 8811 	msr	BASEPRI, r3
 8014232:	f3bf 8f6f 	isb	sy
 8014236:	f3bf 8f4f 	dsb	sy
 801423a:	b662      	cpsie	i
 801423c:	60fb      	str	r3, [r7, #12]
 801423e:	e7fe      	b.n	801423e <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 8014240:	693b      	ldr	r3, [r7, #16]
 8014242:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014244:	2b00      	cmp	r3, #0
 8014246:	d10b      	bne.n	8014260 <xTaskPriorityDisinherit+0x58>
 8014248:	f04f 0350 	mov.w	r3, #80	; 0x50
 801424c:	b672      	cpsid	i
 801424e:	f383 8811 	msr	BASEPRI, r3
 8014252:	f3bf 8f6f 	isb	sy
 8014256:	f3bf 8f4f 	dsb	sy
 801425a:	b662      	cpsie	i
 801425c:	60bb      	str	r3, [r7, #8]
 801425e:	e7fe      	b.n	801425e <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 8014260:	693b      	ldr	r3, [r7, #16]
 8014262:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014264:	1e5a      	subs	r2, r3, #1
 8014266:	693b      	ldr	r3, [r7, #16]
 8014268:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801426a:	693b      	ldr	r3, [r7, #16]
 801426c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801426e:	693b      	ldr	r3, [r7, #16]
 8014270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014272:	429a      	cmp	r2, r3
 8014274:	d02c      	beq.n	80142d0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8014276:	693b      	ldr	r3, [r7, #16]
 8014278:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801427a:	2b00      	cmp	r3, #0
 801427c:	d128      	bne.n	80142d0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801427e:	693b      	ldr	r3, [r7, #16]
 8014280:	3304      	adds	r3, #4
 8014282:	4618      	mov	r0, r3
 8014284:	f7fe f8a4 	bl	80123d0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8014288:	693b      	ldr	r3, [r7, #16]
 801428a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801428c:	693b      	ldr	r3, [r7, #16]
 801428e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014290:	693b      	ldr	r3, [r7, #16]
 8014292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014294:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8014298:	693b      	ldr	r3, [r7, #16]
 801429a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801429c:	693b      	ldr	r3, [r7, #16]
 801429e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80142a0:	4b0f      	ldr	r3, [pc, #60]	; (80142e0 <xTaskPriorityDisinherit+0xd8>)
 80142a2:	681b      	ldr	r3, [r3, #0]
 80142a4:	429a      	cmp	r2, r3
 80142a6:	d903      	bls.n	80142b0 <xTaskPriorityDisinherit+0xa8>
 80142a8:	693b      	ldr	r3, [r7, #16]
 80142aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80142ac:	4a0c      	ldr	r2, [pc, #48]	; (80142e0 <xTaskPriorityDisinherit+0xd8>)
 80142ae:	6013      	str	r3, [r2, #0]
 80142b0:	693b      	ldr	r3, [r7, #16]
 80142b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80142b4:	4613      	mov	r3, r2
 80142b6:	009b      	lsls	r3, r3, #2
 80142b8:	4413      	add	r3, r2
 80142ba:	009b      	lsls	r3, r3, #2
 80142bc:	4a09      	ldr	r2, [pc, #36]	; (80142e4 <xTaskPriorityDisinherit+0xdc>)
 80142be:	441a      	add	r2, r3
 80142c0:	693b      	ldr	r3, [r7, #16]
 80142c2:	3304      	adds	r3, #4
 80142c4:	4619      	mov	r1, r3
 80142c6:	4610      	mov	r0, r2
 80142c8:	f7fe f825 	bl	8012316 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80142cc:	2301      	movs	r3, #1
 80142ce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80142d0:	697b      	ldr	r3, [r7, #20]
	}
 80142d2:	4618      	mov	r0, r3
 80142d4:	3718      	adds	r7, #24
 80142d6:	46bd      	mov	sp, r7
 80142d8:	bd80      	pop	{r7, pc}
 80142da:	bf00      	nop
 80142dc:	2000098c 	.word	0x2000098c
 80142e0:	20000e68 	.word	0x20000e68
 80142e4:	20000990 	.word	0x20000990

080142e8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80142e8:	b580      	push	{r7, lr}
 80142ea:	b088      	sub	sp, #32
 80142ec:	af00      	add	r7, sp, #0
 80142ee:	6078      	str	r0, [r7, #4]
 80142f0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80142f2:	687b      	ldr	r3, [r7, #4]
 80142f4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80142f6:	2301      	movs	r3, #1
 80142f8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80142fa:	687b      	ldr	r3, [r7, #4]
 80142fc:	2b00      	cmp	r3, #0
 80142fe:	d06c      	beq.n	80143da <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8014300:	69bb      	ldr	r3, [r7, #24]
 8014302:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014304:	2b00      	cmp	r3, #0
 8014306:	d10b      	bne.n	8014320 <vTaskPriorityDisinheritAfterTimeout+0x38>
 8014308:	f04f 0350 	mov.w	r3, #80	; 0x50
 801430c:	b672      	cpsid	i
 801430e:	f383 8811 	msr	BASEPRI, r3
 8014312:	f3bf 8f6f 	isb	sy
 8014316:	f3bf 8f4f 	dsb	sy
 801431a:	b662      	cpsie	i
 801431c:	60fb      	str	r3, [r7, #12]
 801431e:	e7fe      	b.n	801431e <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8014320:	69bb      	ldr	r3, [r7, #24]
 8014322:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014324:	683a      	ldr	r2, [r7, #0]
 8014326:	429a      	cmp	r2, r3
 8014328:	d902      	bls.n	8014330 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 801432a:	683b      	ldr	r3, [r7, #0]
 801432c:	61fb      	str	r3, [r7, #28]
 801432e:	e002      	b.n	8014336 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8014330:	69bb      	ldr	r3, [r7, #24]
 8014332:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014334:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8014336:	69bb      	ldr	r3, [r7, #24]
 8014338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801433a:	69fa      	ldr	r2, [r7, #28]
 801433c:	429a      	cmp	r2, r3
 801433e:	d04c      	beq.n	80143da <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8014340:	69bb      	ldr	r3, [r7, #24]
 8014342:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014344:	697a      	ldr	r2, [r7, #20]
 8014346:	429a      	cmp	r2, r3
 8014348:	d147      	bne.n	80143da <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 801434a:	4b26      	ldr	r3, [pc, #152]	; (80143e4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 801434c:	681b      	ldr	r3, [r3, #0]
 801434e:	69ba      	ldr	r2, [r7, #24]
 8014350:	429a      	cmp	r2, r3
 8014352:	d10b      	bne.n	801436c <vTaskPriorityDisinheritAfterTimeout+0x84>
 8014354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014358:	b672      	cpsid	i
 801435a:	f383 8811 	msr	BASEPRI, r3
 801435e:	f3bf 8f6f 	isb	sy
 8014362:	f3bf 8f4f 	dsb	sy
 8014366:	b662      	cpsie	i
 8014368:	60bb      	str	r3, [r7, #8]
 801436a:	e7fe      	b.n	801436a <vTaskPriorityDisinheritAfterTimeout+0x82>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 801436c:	69bb      	ldr	r3, [r7, #24]
 801436e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014370:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8014372:	69bb      	ldr	r3, [r7, #24]
 8014374:	69fa      	ldr	r2, [r7, #28]
 8014376:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8014378:	69bb      	ldr	r3, [r7, #24]
 801437a:	699b      	ldr	r3, [r3, #24]
 801437c:	2b00      	cmp	r3, #0
 801437e:	db04      	blt.n	801438a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014380:	69fb      	ldr	r3, [r7, #28]
 8014382:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8014386:	69bb      	ldr	r3, [r7, #24]
 8014388:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801438a:	69bb      	ldr	r3, [r7, #24]
 801438c:	6959      	ldr	r1, [r3, #20]
 801438e:	693a      	ldr	r2, [r7, #16]
 8014390:	4613      	mov	r3, r2
 8014392:	009b      	lsls	r3, r3, #2
 8014394:	4413      	add	r3, r2
 8014396:	009b      	lsls	r3, r3, #2
 8014398:	4a13      	ldr	r2, [pc, #76]	; (80143e8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 801439a:	4413      	add	r3, r2
 801439c:	4299      	cmp	r1, r3
 801439e:	d11c      	bne.n	80143da <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80143a0:	69bb      	ldr	r3, [r7, #24]
 80143a2:	3304      	adds	r3, #4
 80143a4:	4618      	mov	r0, r3
 80143a6:	f7fe f813 	bl	80123d0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80143aa:	69bb      	ldr	r3, [r7, #24]
 80143ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80143ae:	4b0f      	ldr	r3, [pc, #60]	; (80143ec <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80143b0:	681b      	ldr	r3, [r3, #0]
 80143b2:	429a      	cmp	r2, r3
 80143b4:	d903      	bls.n	80143be <vTaskPriorityDisinheritAfterTimeout+0xd6>
 80143b6:	69bb      	ldr	r3, [r7, #24]
 80143b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80143ba:	4a0c      	ldr	r2, [pc, #48]	; (80143ec <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80143bc:	6013      	str	r3, [r2, #0]
 80143be:	69bb      	ldr	r3, [r7, #24]
 80143c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80143c2:	4613      	mov	r3, r2
 80143c4:	009b      	lsls	r3, r3, #2
 80143c6:	4413      	add	r3, r2
 80143c8:	009b      	lsls	r3, r3, #2
 80143ca:	4a07      	ldr	r2, [pc, #28]	; (80143e8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80143cc:	441a      	add	r2, r3
 80143ce:	69bb      	ldr	r3, [r7, #24]
 80143d0:	3304      	adds	r3, #4
 80143d2:	4619      	mov	r1, r3
 80143d4:	4610      	mov	r0, r2
 80143d6:	f7fd ff9e 	bl	8012316 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80143da:	bf00      	nop
 80143dc:	3720      	adds	r7, #32
 80143de:	46bd      	mov	sp, r7
 80143e0:	bd80      	pop	{r7, pc}
 80143e2:	bf00      	nop
 80143e4:	2000098c 	.word	0x2000098c
 80143e8:	20000990 	.word	0x20000990
 80143ec:	20000e68 	.word	0x20000e68

080143f0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80143f0:	b480      	push	{r7}
 80143f2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80143f4:	4b07      	ldr	r3, [pc, #28]	; (8014414 <pvTaskIncrementMutexHeldCount+0x24>)
 80143f6:	681b      	ldr	r3, [r3, #0]
 80143f8:	2b00      	cmp	r3, #0
 80143fa:	d004      	beq.n	8014406 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80143fc:	4b05      	ldr	r3, [pc, #20]	; (8014414 <pvTaskIncrementMutexHeldCount+0x24>)
 80143fe:	681b      	ldr	r3, [r3, #0]
 8014400:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014402:	3201      	adds	r2, #1
 8014404:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8014406:	4b03      	ldr	r3, [pc, #12]	; (8014414 <pvTaskIncrementMutexHeldCount+0x24>)
 8014408:	681b      	ldr	r3, [r3, #0]
	}
 801440a:	4618      	mov	r0, r3
 801440c:	46bd      	mov	sp, r7
 801440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014412:	4770      	bx	lr
 8014414:	2000098c 	.word	0x2000098c

08014418 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8014418:	b580      	push	{r7, lr}
 801441a:	b084      	sub	sp, #16
 801441c:	af00      	add	r7, sp, #0
 801441e:	6078      	str	r0, [r7, #4]
 8014420:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8014422:	4b21      	ldr	r3, [pc, #132]	; (80144a8 <prvAddCurrentTaskToDelayedList+0x90>)
 8014424:	681b      	ldr	r3, [r3, #0]
 8014426:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014428:	4b20      	ldr	r3, [pc, #128]	; (80144ac <prvAddCurrentTaskToDelayedList+0x94>)
 801442a:	681b      	ldr	r3, [r3, #0]
 801442c:	3304      	adds	r3, #4
 801442e:	4618      	mov	r0, r3
 8014430:	f7fd ffce 	bl	80123d0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8014434:	687b      	ldr	r3, [r7, #4]
 8014436:	f1b3 3fff 	cmp.w	r3, #4294967295
 801443a:	d10a      	bne.n	8014452 <prvAddCurrentTaskToDelayedList+0x3a>
 801443c:	683b      	ldr	r3, [r7, #0]
 801443e:	2b00      	cmp	r3, #0
 8014440:	d007      	beq.n	8014452 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014442:	4b1a      	ldr	r3, [pc, #104]	; (80144ac <prvAddCurrentTaskToDelayedList+0x94>)
 8014444:	681b      	ldr	r3, [r3, #0]
 8014446:	3304      	adds	r3, #4
 8014448:	4619      	mov	r1, r3
 801444a:	4819      	ldr	r0, [pc, #100]	; (80144b0 <prvAddCurrentTaskToDelayedList+0x98>)
 801444c:	f7fd ff63 	bl	8012316 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8014450:	e026      	b.n	80144a0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8014452:	68fa      	ldr	r2, [r7, #12]
 8014454:	687b      	ldr	r3, [r7, #4]
 8014456:	4413      	add	r3, r2
 8014458:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801445a:	4b14      	ldr	r3, [pc, #80]	; (80144ac <prvAddCurrentTaskToDelayedList+0x94>)
 801445c:	681b      	ldr	r3, [r3, #0]
 801445e:	68ba      	ldr	r2, [r7, #8]
 8014460:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8014462:	68ba      	ldr	r2, [r7, #8]
 8014464:	68fb      	ldr	r3, [r7, #12]
 8014466:	429a      	cmp	r2, r3
 8014468:	d209      	bcs.n	801447e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801446a:	4b12      	ldr	r3, [pc, #72]	; (80144b4 <prvAddCurrentTaskToDelayedList+0x9c>)
 801446c:	681a      	ldr	r2, [r3, #0]
 801446e:	4b0f      	ldr	r3, [pc, #60]	; (80144ac <prvAddCurrentTaskToDelayedList+0x94>)
 8014470:	681b      	ldr	r3, [r3, #0]
 8014472:	3304      	adds	r3, #4
 8014474:	4619      	mov	r1, r3
 8014476:	4610      	mov	r0, r2
 8014478:	f7fd ff71 	bl	801235e <vListInsert>
}
 801447c:	e010      	b.n	80144a0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801447e:	4b0e      	ldr	r3, [pc, #56]	; (80144b8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8014480:	681a      	ldr	r2, [r3, #0]
 8014482:	4b0a      	ldr	r3, [pc, #40]	; (80144ac <prvAddCurrentTaskToDelayedList+0x94>)
 8014484:	681b      	ldr	r3, [r3, #0]
 8014486:	3304      	adds	r3, #4
 8014488:	4619      	mov	r1, r3
 801448a:	4610      	mov	r0, r2
 801448c:	f7fd ff67 	bl	801235e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8014490:	4b0a      	ldr	r3, [pc, #40]	; (80144bc <prvAddCurrentTaskToDelayedList+0xa4>)
 8014492:	681b      	ldr	r3, [r3, #0]
 8014494:	68ba      	ldr	r2, [r7, #8]
 8014496:	429a      	cmp	r2, r3
 8014498:	d202      	bcs.n	80144a0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801449a:	4a08      	ldr	r2, [pc, #32]	; (80144bc <prvAddCurrentTaskToDelayedList+0xa4>)
 801449c:	68bb      	ldr	r3, [r7, #8]
 801449e:	6013      	str	r3, [r2, #0]
}
 80144a0:	bf00      	nop
 80144a2:	3710      	adds	r7, #16
 80144a4:	46bd      	mov	sp, r7
 80144a6:	bd80      	pop	{r7, pc}
 80144a8:	20000e64 	.word	0x20000e64
 80144ac:	2000098c 	.word	0x2000098c
 80144b0:	20000e4c 	.word	0x20000e4c
 80144b4:	20000e1c 	.word	0x20000e1c
 80144b8:	20000e18 	.word	0x20000e18
 80144bc:	20000e80 	.word	0x20000e80

080144c0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80144c0:	b580      	push	{r7, lr}
 80144c2:	b08a      	sub	sp, #40	; 0x28
 80144c4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80144c6:	2300      	movs	r3, #0
 80144c8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80144ca:	f000 fb0d 	bl	8014ae8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80144ce:	4b1d      	ldr	r3, [pc, #116]	; (8014544 <xTimerCreateTimerTask+0x84>)
 80144d0:	681b      	ldr	r3, [r3, #0]
 80144d2:	2b00      	cmp	r3, #0
 80144d4:	d021      	beq.n	801451a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80144d6:	2300      	movs	r3, #0
 80144d8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80144da:	2300      	movs	r3, #0
 80144dc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80144de:	1d3a      	adds	r2, r7, #4
 80144e0:	f107 0108 	add.w	r1, r7, #8
 80144e4:	f107 030c 	add.w	r3, r7, #12
 80144e8:	4618      	mov	r0, r3
 80144ea:	f7fd fecd 	bl	8012288 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80144ee:	6879      	ldr	r1, [r7, #4]
 80144f0:	68bb      	ldr	r3, [r7, #8]
 80144f2:	68fa      	ldr	r2, [r7, #12]
 80144f4:	9202      	str	r2, [sp, #8]
 80144f6:	9301      	str	r3, [sp, #4]
 80144f8:	2302      	movs	r3, #2
 80144fa:	9300      	str	r3, [sp, #0]
 80144fc:	2300      	movs	r3, #0
 80144fe:	460a      	mov	r2, r1
 8014500:	4911      	ldr	r1, [pc, #68]	; (8014548 <xTimerCreateTimerTask+0x88>)
 8014502:	4812      	ldr	r0, [pc, #72]	; (801454c <xTimerCreateTimerTask+0x8c>)
 8014504:	f7fe ffc0 	bl	8013488 <xTaskCreateStatic>
 8014508:	4602      	mov	r2, r0
 801450a:	4b11      	ldr	r3, [pc, #68]	; (8014550 <xTimerCreateTimerTask+0x90>)
 801450c:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801450e:	4b10      	ldr	r3, [pc, #64]	; (8014550 <xTimerCreateTimerTask+0x90>)
 8014510:	681b      	ldr	r3, [r3, #0]
 8014512:	2b00      	cmp	r3, #0
 8014514:	d001      	beq.n	801451a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8014516:	2301      	movs	r3, #1
 8014518:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801451a:	697b      	ldr	r3, [r7, #20]
 801451c:	2b00      	cmp	r3, #0
 801451e:	d10b      	bne.n	8014538 <xTimerCreateTimerTask+0x78>
 8014520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014524:	b672      	cpsid	i
 8014526:	f383 8811 	msr	BASEPRI, r3
 801452a:	f3bf 8f6f 	isb	sy
 801452e:	f3bf 8f4f 	dsb	sy
 8014532:	b662      	cpsie	i
 8014534:	613b      	str	r3, [r7, #16]
 8014536:	e7fe      	b.n	8014536 <xTimerCreateTimerTask+0x76>
	return xReturn;
 8014538:	697b      	ldr	r3, [r7, #20]
}
 801453a:	4618      	mov	r0, r3
 801453c:	3718      	adds	r7, #24
 801453e:	46bd      	mov	sp, r7
 8014540:	bd80      	pop	{r7, pc}
 8014542:	bf00      	nop
 8014544:	20000ebc 	.word	0x20000ebc
 8014548:	080160a4 	.word	0x080160a4
 801454c:	0801468d 	.word	0x0801468d
 8014550:	20000ec0 	.word	0x20000ec0

08014554 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8014554:	b580      	push	{r7, lr}
 8014556:	b08a      	sub	sp, #40	; 0x28
 8014558:	af00      	add	r7, sp, #0
 801455a:	60f8      	str	r0, [r7, #12]
 801455c:	60b9      	str	r1, [r7, #8]
 801455e:	607a      	str	r2, [r7, #4]
 8014560:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8014562:	2300      	movs	r3, #0
 8014564:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8014566:	68fb      	ldr	r3, [r7, #12]
 8014568:	2b00      	cmp	r3, #0
 801456a:	d10b      	bne.n	8014584 <xTimerGenericCommand+0x30>
 801456c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014570:	b672      	cpsid	i
 8014572:	f383 8811 	msr	BASEPRI, r3
 8014576:	f3bf 8f6f 	isb	sy
 801457a:	f3bf 8f4f 	dsb	sy
 801457e:	b662      	cpsie	i
 8014580:	623b      	str	r3, [r7, #32]
 8014582:	e7fe      	b.n	8014582 <xTimerGenericCommand+0x2e>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8014584:	4b19      	ldr	r3, [pc, #100]	; (80145ec <xTimerGenericCommand+0x98>)
 8014586:	681b      	ldr	r3, [r3, #0]
 8014588:	2b00      	cmp	r3, #0
 801458a:	d02a      	beq.n	80145e2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801458c:	68bb      	ldr	r3, [r7, #8]
 801458e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8014590:	687b      	ldr	r3, [r7, #4]
 8014592:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8014594:	68fb      	ldr	r3, [r7, #12]
 8014596:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8014598:	68bb      	ldr	r3, [r7, #8]
 801459a:	2b05      	cmp	r3, #5
 801459c:	dc18      	bgt.n	80145d0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801459e:	f7ff fdad 	bl	80140fc <xTaskGetSchedulerState>
 80145a2:	4603      	mov	r3, r0
 80145a4:	2b02      	cmp	r3, #2
 80145a6:	d109      	bne.n	80145bc <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80145a8:	4b10      	ldr	r3, [pc, #64]	; (80145ec <xTimerGenericCommand+0x98>)
 80145aa:	6818      	ldr	r0, [r3, #0]
 80145ac:	f107 0110 	add.w	r1, r7, #16
 80145b0:	2300      	movs	r3, #0
 80145b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80145b4:	f7fe f8f0 	bl	8012798 <xQueueGenericSend>
 80145b8:	6278      	str	r0, [r7, #36]	; 0x24
 80145ba:	e012      	b.n	80145e2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80145bc:	4b0b      	ldr	r3, [pc, #44]	; (80145ec <xTimerGenericCommand+0x98>)
 80145be:	6818      	ldr	r0, [r3, #0]
 80145c0:	f107 0110 	add.w	r1, r7, #16
 80145c4:	2300      	movs	r3, #0
 80145c6:	2200      	movs	r2, #0
 80145c8:	f7fe f8e6 	bl	8012798 <xQueueGenericSend>
 80145cc:	6278      	str	r0, [r7, #36]	; 0x24
 80145ce:	e008      	b.n	80145e2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80145d0:	4b06      	ldr	r3, [pc, #24]	; (80145ec <xTimerGenericCommand+0x98>)
 80145d2:	6818      	ldr	r0, [r3, #0]
 80145d4:	f107 0110 	add.w	r1, r7, #16
 80145d8:	2300      	movs	r3, #0
 80145da:	683a      	ldr	r2, [r7, #0]
 80145dc:	f7fe f9de 	bl	801299c <xQueueGenericSendFromISR>
 80145e0:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80145e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80145e4:	4618      	mov	r0, r3
 80145e6:	3728      	adds	r7, #40	; 0x28
 80145e8:	46bd      	mov	sp, r7
 80145ea:	bd80      	pop	{r7, pc}
 80145ec:	20000ebc 	.word	0x20000ebc

080145f0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80145f0:	b580      	push	{r7, lr}
 80145f2:	b088      	sub	sp, #32
 80145f4:	af02      	add	r7, sp, #8
 80145f6:	6078      	str	r0, [r7, #4]
 80145f8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80145fa:	4b23      	ldr	r3, [pc, #140]	; (8014688 <prvProcessExpiredTimer+0x98>)
 80145fc:	681b      	ldr	r3, [r3, #0]
 80145fe:	68db      	ldr	r3, [r3, #12]
 8014600:	68db      	ldr	r3, [r3, #12]
 8014602:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8014604:	697b      	ldr	r3, [r7, #20]
 8014606:	3304      	adds	r3, #4
 8014608:	4618      	mov	r0, r3
 801460a:	f7fd fee1 	bl	80123d0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801460e:	697b      	ldr	r3, [r7, #20]
 8014610:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014614:	f003 0304 	and.w	r3, r3, #4
 8014618:	2b00      	cmp	r3, #0
 801461a:	d023      	beq.n	8014664 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801461c:	697b      	ldr	r3, [r7, #20]
 801461e:	699a      	ldr	r2, [r3, #24]
 8014620:	687b      	ldr	r3, [r7, #4]
 8014622:	18d1      	adds	r1, r2, r3
 8014624:	687b      	ldr	r3, [r7, #4]
 8014626:	683a      	ldr	r2, [r7, #0]
 8014628:	6978      	ldr	r0, [r7, #20]
 801462a:	f000 f8d3 	bl	80147d4 <prvInsertTimerInActiveList>
 801462e:	4603      	mov	r3, r0
 8014630:	2b00      	cmp	r3, #0
 8014632:	d020      	beq.n	8014676 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8014634:	2300      	movs	r3, #0
 8014636:	9300      	str	r3, [sp, #0]
 8014638:	2300      	movs	r3, #0
 801463a:	687a      	ldr	r2, [r7, #4]
 801463c:	2100      	movs	r1, #0
 801463e:	6978      	ldr	r0, [r7, #20]
 8014640:	f7ff ff88 	bl	8014554 <xTimerGenericCommand>
 8014644:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8014646:	693b      	ldr	r3, [r7, #16]
 8014648:	2b00      	cmp	r3, #0
 801464a:	d114      	bne.n	8014676 <prvProcessExpiredTimer+0x86>
 801464c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014650:	b672      	cpsid	i
 8014652:	f383 8811 	msr	BASEPRI, r3
 8014656:	f3bf 8f6f 	isb	sy
 801465a:	f3bf 8f4f 	dsb	sy
 801465e:	b662      	cpsie	i
 8014660:	60fb      	str	r3, [r7, #12]
 8014662:	e7fe      	b.n	8014662 <prvProcessExpiredTimer+0x72>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8014664:	697b      	ldr	r3, [r7, #20]
 8014666:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801466a:	f023 0301 	bic.w	r3, r3, #1
 801466e:	b2da      	uxtb	r2, r3
 8014670:	697b      	ldr	r3, [r7, #20]
 8014672:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8014676:	697b      	ldr	r3, [r7, #20]
 8014678:	6a1b      	ldr	r3, [r3, #32]
 801467a:	6978      	ldr	r0, [r7, #20]
 801467c:	4798      	blx	r3
}
 801467e:	bf00      	nop
 8014680:	3718      	adds	r7, #24
 8014682:	46bd      	mov	sp, r7
 8014684:	bd80      	pop	{r7, pc}
 8014686:	bf00      	nop
 8014688:	20000eb4 	.word	0x20000eb4

0801468c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 801468c:	b580      	push	{r7, lr}
 801468e:	b084      	sub	sp, #16
 8014690:	af00      	add	r7, sp, #0
 8014692:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8014694:	f107 0308 	add.w	r3, r7, #8
 8014698:	4618      	mov	r0, r3
 801469a:	f000 f857 	bl	801474c <prvGetNextExpireTime>
 801469e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80146a0:	68bb      	ldr	r3, [r7, #8]
 80146a2:	4619      	mov	r1, r3
 80146a4:	68f8      	ldr	r0, [r7, #12]
 80146a6:	f000 f803 	bl	80146b0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80146aa:	f000 f8d5 	bl	8014858 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80146ae:	e7f1      	b.n	8014694 <prvTimerTask+0x8>

080146b0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80146b0:	b580      	push	{r7, lr}
 80146b2:	b084      	sub	sp, #16
 80146b4:	af00      	add	r7, sp, #0
 80146b6:	6078      	str	r0, [r7, #4]
 80146b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80146ba:	f7ff f929 	bl	8013910 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80146be:	f107 0308 	add.w	r3, r7, #8
 80146c2:	4618      	mov	r0, r3
 80146c4:	f000 f866 	bl	8014794 <prvSampleTimeNow>
 80146c8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80146ca:	68bb      	ldr	r3, [r7, #8]
 80146cc:	2b00      	cmp	r3, #0
 80146ce:	d130      	bne.n	8014732 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80146d0:	683b      	ldr	r3, [r7, #0]
 80146d2:	2b00      	cmp	r3, #0
 80146d4:	d10a      	bne.n	80146ec <prvProcessTimerOrBlockTask+0x3c>
 80146d6:	687a      	ldr	r2, [r7, #4]
 80146d8:	68fb      	ldr	r3, [r7, #12]
 80146da:	429a      	cmp	r2, r3
 80146dc:	d806      	bhi.n	80146ec <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80146de:	f7ff f925 	bl	801392c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80146e2:	68f9      	ldr	r1, [r7, #12]
 80146e4:	6878      	ldr	r0, [r7, #4]
 80146e6:	f7ff ff83 	bl	80145f0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80146ea:	e024      	b.n	8014736 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80146ec:	683b      	ldr	r3, [r7, #0]
 80146ee:	2b00      	cmp	r3, #0
 80146f0:	d008      	beq.n	8014704 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80146f2:	4b13      	ldr	r3, [pc, #76]	; (8014740 <prvProcessTimerOrBlockTask+0x90>)
 80146f4:	681b      	ldr	r3, [r3, #0]
 80146f6:	681b      	ldr	r3, [r3, #0]
 80146f8:	2b00      	cmp	r3, #0
 80146fa:	d101      	bne.n	8014700 <prvProcessTimerOrBlockTask+0x50>
 80146fc:	2301      	movs	r3, #1
 80146fe:	e000      	b.n	8014702 <prvProcessTimerOrBlockTask+0x52>
 8014700:	2300      	movs	r3, #0
 8014702:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8014704:	4b0f      	ldr	r3, [pc, #60]	; (8014744 <prvProcessTimerOrBlockTask+0x94>)
 8014706:	6818      	ldr	r0, [r3, #0]
 8014708:	687a      	ldr	r2, [r7, #4]
 801470a:	68fb      	ldr	r3, [r7, #12]
 801470c:	1ad3      	subs	r3, r2, r3
 801470e:	683a      	ldr	r2, [r7, #0]
 8014710:	4619      	mov	r1, r3
 8014712:	f7fe fe85 	bl	8013420 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8014716:	f7ff f909 	bl	801392c <xTaskResumeAll>
 801471a:	4603      	mov	r3, r0
 801471c:	2b00      	cmp	r3, #0
 801471e:	d10a      	bne.n	8014736 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8014720:	4b09      	ldr	r3, [pc, #36]	; (8014748 <prvProcessTimerOrBlockTask+0x98>)
 8014722:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014726:	601a      	str	r2, [r3, #0]
 8014728:	f3bf 8f4f 	dsb	sy
 801472c:	f3bf 8f6f 	isb	sy
}
 8014730:	e001      	b.n	8014736 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8014732:	f7ff f8fb 	bl	801392c <xTaskResumeAll>
}
 8014736:	bf00      	nop
 8014738:	3710      	adds	r7, #16
 801473a:	46bd      	mov	sp, r7
 801473c:	bd80      	pop	{r7, pc}
 801473e:	bf00      	nop
 8014740:	20000eb8 	.word	0x20000eb8
 8014744:	20000ebc 	.word	0x20000ebc
 8014748:	e000ed04 	.word	0xe000ed04

0801474c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 801474c:	b480      	push	{r7}
 801474e:	b085      	sub	sp, #20
 8014750:	af00      	add	r7, sp, #0
 8014752:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8014754:	4b0e      	ldr	r3, [pc, #56]	; (8014790 <prvGetNextExpireTime+0x44>)
 8014756:	681b      	ldr	r3, [r3, #0]
 8014758:	681b      	ldr	r3, [r3, #0]
 801475a:	2b00      	cmp	r3, #0
 801475c:	d101      	bne.n	8014762 <prvGetNextExpireTime+0x16>
 801475e:	2201      	movs	r2, #1
 8014760:	e000      	b.n	8014764 <prvGetNextExpireTime+0x18>
 8014762:	2200      	movs	r2, #0
 8014764:	687b      	ldr	r3, [r7, #4]
 8014766:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8014768:	687b      	ldr	r3, [r7, #4]
 801476a:	681b      	ldr	r3, [r3, #0]
 801476c:	2b00      	cmp	r3, #0
 801476e:	d105      	bne.n	801477c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8014770:	4b07      	ldr	r3, [pc, #28]	; (8014790 <prvGetNextExpireTime+0x44>)
 8014772:	681b      	ldr	r3, [r3, #0]
 8014774:	68db      	ldr	r3, [r3, #12]
 8014776:	681b      	ldr	r3, [r3, #0]
 8014778:	60fb      	str	r3, [r7, #12]
 801477a:	e001      	b.n	8014780 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 801477c:	2300      	movs	r3, #0
 801477e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8014780:	68fb      	ldr	r3, [r7, #12]
}
 8014782:	4618      	mov	r0, r3
 8014784:	3714      	adds	r7, #20
 8014786:	46bd      	mov	sp, r7
 8014788:	f85d 7b04 	ldr.w	r7, [sp], #4
 801478c:	4770      	bx	lr
 801478e:	bf00      	nop
 8014790:	20000eb4 	.word	0x20000eb4

08014794 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8014794:	b580      	push	{r7, lr}
 8014796:	b084      	sub	sp, #16
 8014798:	af00      	add	r7, sp, #0
 801479a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 801479c:	f7ff f964 	bl	8013a68 <xTaskGetTickCount>
 80147a0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80147a2:	4b0b      	ldr	r3, [pc, #44]	; (80147d0 <prvSampleTimeNow+0x3c>)
 80147a4:	681b      	ldr	r3, [r3, #0]
 80147a6:	68fa      	ldr	r2, [r7, #12]
 80147a8:	429a      	cmp	r2, r3
 80147aa:	d205      	bcs.n	80147b8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80147ac:	f000 f936 	bl	8014a1c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80147b0:	687b      	ldr	r3, [r7, #4]
 80147b2:	2201      	movs	r2, #1
 80147b4:	601a      	str	r2, [r3, #0]
 80147b6:	e002      	b.n	80147be <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80147b8:	687b      	ldr	r3, [r7, #4]
 80147ba:	2200      	movs	r2, #0
 80147bc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80147be:	4a04      	ldr	r2, [pc, #16]	; (80147d0 <prvSampleTimeNow+0x3c>)
 80147c0:	68fb      	ldr	r3, [r7, #12]
 80147c2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80147c4:	68fb      	ldr	r3, [r7, #12]
}
 80147c6:	4618      	mov	r0, r3
 80147c8:	3710      	adds	r7, #16
 80147ca:	46bd      	mov	sp, r7
 80147cc:	bd80      	pop	{r7, pc}
 80147ce:	bf00      	nop
 80147d0:	20000ec4 	.word	0x20000ec4

080147d4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80147d4:	b580      	push	{r7, lr}
 80147d6:	b086      	sub	sp, #24
 80147d8:	af00      	add	r7, sp, #0
 80147da:	60f8      	str	r0, [r7, #12]
 80147dc:	60b9      	str	r1, [r7, #8]
 80147de:	607a      	str	r2, [r7, #4]
 80147e0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80147e2:	2300      	movs	r3, #0
 80147e4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80147e6:	68fb      	ldr	r3, [r7, #12]
 80147e8:	68ba      	ldr	r2, [r7, #8]
 80147ea:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80147ec:	68fb      	ldr	r3, [r7, #12]
 80147ee:	68fa      	ldr	r2, [r7, #12]
 80147f0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80147f2:	68ba      	ldr	r2, [r7, #8]
 80147f4:	687b      	ldr	r3, [r7, #4]
 80147f6:	429a      	cmp	r2, r3
 80147f8:	d812      	bhi.n	8014820 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80147fa:	687a      	ldr	r2, [r7, #4]
 80147fc:	683b      	ldr	r3, [r7, #0]
 80147fe:	1ad2      	subs	r2, r2, r3
 8014800:	68fb      	ldr	r3, [r7, #12]
 8014802:	699b      	ldr	r3, [r3, #24]
 8014804:	429a      	cmp	r2, r3
 8014806:	d302      	bcc.n	801480e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8014808:	2301      	movs	r3, #1
 801480a:	617b      	str	r3, [r7, #20]
 801480c:	e01b      	b.n	8014846 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801480e:	4b10      	ldr	r3, [pc, #64]	; (8014850 <prvInsertTimerInActiveList+0x7c>)
 8014810:	681a      	ldr	r2, [r3, #0]
 8014812:	68fb      	ldr	r3, [r7, #12]
 8014814:	3304      	adds	r3, #4
 8014816:	4619      	mov	r1, r3
 8014818:	4610      	mov	r0, r2
 801481a:	f7fd fda0 	bl	801235e <vListInsert>
 801481e:	e012      	b.n	8014846 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8014820:	687a      	ldr	r2, [r7, #4]
 8014822:	683b      	ldr	r3, [r7, #0]
 8014824:	429a      	cmp	r2, r3
 8014826:	d206      	bcs.n	8014836 <prvInsertTimerInActiveList+0x62>
 8014828:	68ba      	ldr	r2, [r7, #8]
 801482a:	683b      	ldr	r3, [r7, #0]
 801482c:	429a      	cmp	r2, r3
 801482e:	d302      	bcc.n	8014836 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8014830:	2301      	movs	r3, #1
 8014832:	617b      	str	r3, [r7, #20]
 8014834:	e007      	b.n	8014846 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8014836:	4b07      	ldr	r3, [pc, #28]	; (8014854 <prvInsertTimerInActiveList+0x80>)
 8014838:	681a      	ldr	r2, [r3, #0]
 801483a:	68fb      	ldr	r3, [r7, #12]
 801483c:	3304      	adds	r3, #4
 801483e:	4619      	mov	r1, r3
 8014840:	4610      	mov	r0, r2
 8014842:	f7fd fd8c 	bl	801235e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8014846:	697b      	ldr	r3, [r7, #20]
}
 8014848:	4618      	mov	r0, r3
 801484a:	3718      	adds	r7, #24
 801484c:	46bd      	mov	sp, r7
 801484e:	bd80      	pop	{r7, pc}
 8014850:	20000eb8 	.word	0x20000eb8
 8014854:	20000eb4 	.word	0x20000eb4

08014858 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8014858:	b580      	push	{r7, lr}
 801485a:	b08e      	sub	sp, #56	; 0x38
 801485c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801485e:	e0cc      	b.n	80149fa <prvProcessReceivedCommands+0x1a2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8014860:	687b      	ldr	r3, [r7, #4]
 8014862:	2b00      	cmp	r3, #0
 8014864:	da19      	bge.n	801489a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8014866:	1d3b      	adds	r3, r7, #4
 8014868:	3304      	adds	r3, #4
 801486a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 801486c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801486e:	2b00      	cmp	r3, #0
 8014870:	d10b      	bne.n	801488a <prvProcessReceivedCommands+0x32>
 8014872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014876:	b672      	cpsid	i
 8014878:	f383 8811 	msr	BASEPRI, r3
 801487c:	f3bf 8f6f 	isb	sy
 8014880:	f3bf 8f4f 	dsb	sy
 8014884:	b662      	cpsie	i
 8014886:	61fb      	str	r3, [r7, #28]
 8014888:	e7fe      	b.n	8014888 <prvProcessReceivedCommands+0x30>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801488a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801488c:	681b      	ldr	r3, [r3, #0]
 801488e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014890:	6850      	ldr	r0, [r2, #4]
 8014892:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014894:	6892      	ldr	r2, [r2, #8]
 8014896:	4611      	mov	r1, r2
 8014898:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801489a:	687b      	ldr	r3, [r7, #4]
 801489c:	2b00      	cmp	r3, #0
 801489e:	f2c0 80ab 	blt.w	80149f8 <prvProcessReceivedCommands+0x1a0>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80148a2:	68fb      	ldr	r3, [r7, #12]
 80148a4:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80148a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148a8:	695b      	ldr	r3, [r3, #20]
 80148aa:	2b00      	cmp	r3, #0
 80148ac:	d004      	beq.n	80148b8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80148ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148b0:	3304      	adds	r3, #4
 80148b2:	4618      	mov	r0, r3
 80148b4:	f7fd fd8c 	bl	80123d0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80148b8:	463b      	mov	r3, r7
 80148ba:	4618      	mov	r0, r3
 80148bc:	f7ff ff6a 	bl	8014794 <prvSampleTimeNow>
 80148c0:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80148c2:	687b      	ldr	r3, [r7, #4]
 80148c4:	2b09      	cmp	r3, #9
 80148c6:	f200 8098 	bhi.w	80149fa <prvProcessReceivedCommands+0x1a2>
 80148ca:	a201      	add	r2, pc, #4	; (adr r2, 80148d0 <prvProcessReceivedCommands+0x78>)
 80148cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80148d0:	080148f9 	.word	0x080148f9
 80148d4:	080148f9 	.word	0x080148f9
 80148d8:	080148f9 	.word	0x080148f9
 80148dc:	0801496f 	.word	0x0801496f
 80148e0:	08014983 	.word	0x08014983
 80148e4:	080149cf 	.word	0x080149cf
 80148e8:	080148f9 	.word	0x080148f9
 80148ec:	080148f9 	.word	0x080148f9
 80148f0:	0801496f 	.word	0x0801496f
 80148f4:	08014983 	.word	0x08014983
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80148f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80148fe:	f043 0301 	orr.w	r3, r3, #1
 8014902:	b2da      	uxtb	r2, r3
 8014904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014906:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801490a:	68ba      	ldr	r2, [r7, #8]
 801490c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801490e:	699b      	ldr	r3, [r3, #24]
 8014910:	18d1      	adds	r1, r2, r3
 8014912:	68bb      	ldr	r3, [r7, #8]
 8014914:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014916:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014918:	f7ff ff5c 	bl	80147d4 <prvInsertTimerInActiveList>
 801491c:	4603      	mov	r3, r0
 801491e:	2b00      	cmp	r3, #0
 8014920:	d06b      	beq.n	80149fa <prvProcessReceivedCommands+0x1a2>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8014922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014924:	6a1b      	ldr	r3, [r3, #32]
 8014926:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014928:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801492a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801492c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014930:	f003 0304 	and.w	r3, r3, #4
 8014934:	2b00      	cmp	r3, #0
 8014936:	d060      	beq.n	80149fa <prvProcessReceivedCommands+0x1a2>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8014938:	68ba      	ldr	r2, [r7, #8]
 801493a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801493c:	699b      	ldr	r3, [r3, #24]
 801493e:	441a      	add	r2, r3
 8014940:	2300      	movs	r3, #0
 8014942:	9300      	str	r3, [sp, #0]
 8014944:	2300      	movs	r3, #0
 8014946:	2100      	movs	r1, #0
 8014948:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801494a:	f7ff fe03 	bl	8014554 <xTimerGenericCommand>
 801494e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8014950:	6a3b      	ldr	r3, [r7, #32]
 8014952:	2b00      	cmp	r3, #0
 8014954:	d151      	bne.n	80149fa <prvProcessReceivedCommands+0x1a2>
 8014956:	f04f 0350 	mov.w	r3, #80	; 0x50
 801495a:	b672      	cpsid	i
 801495c:	f383 8811 	msr	BASEPRI, r3
 8014960:	f3bf 8f6f 	isb	sy
 8014964:	f3bf 8f4f 	dsb	sy
 8014968:	b662      	cpsie	i
 801496a:	61bb      	str	r3, [r7, #24]
 801496c:	e7fe      	b.n	801496c <prvProcessReceivedCommands+0x114>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801496e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014970:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014974:	f023 0301 	bic.w	r3, r3, #1
 8014978:	b2da      	uxtb	r2, r3
 801497a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801497c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8014980:	e03b      	b.n	80149fa <prvProcessReceivedCommands+0x1a2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8014982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014984:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014988:	f043 0301 	orr.w	r3, r3, #1
 801498c:	b2da      	uxtb	r2, r3
 801498e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014990:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8014994:	68ba      	ldr	r2, [r7, #8]
 8014996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014998:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801499a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801499c:	699b      	ldr	r3, [r3, #24]
 801499e:	2b00      	cmp	r3, #0
 80149a0:	d10b      	bne.n	80149ba <prvProcessReceivedCommands+0x162>
 80149a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80149a6:	b672      	cpsid	i
 80149a8:	f383 8811 	msr	BASEPRI, r3
 80149ac:	f3bf 8f6f 	isb	sy
 80149b0:	f3bf 8f4f 	dsb	sy
 80149b4:	b662      	cpsie	i
 80149b6:	617b      	str	r3, [r7, #20]
 80149b8:	e7fe      	b.n	80149b8 <prvProcessReceivedCommands+0x160>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80149ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149bc:	699a      	ldr	r2, [r3, #24]
 80149be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149c0:	18d1      	adds	r1, r2, r3
 80149c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80149c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80149c8:	f7ff ff04 	bl	80147d4 <prvInsertTimerInActiveList>
					break;
 80149cc:	e015      	b.n	80149fa <prvProcessReceivedCommands+0x1a2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80149ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80149d4:	f003 0302 	and.w	r3, r3, #2
 80149d8:	2b00      	cmp	r3, #0
 80149da:	d103      	bne.n	80149e4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80149dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80149de:	f000 fbb5 	bl	801514c <vPortFree>
 80149e2:	e00a      	b.n	80149fa <prvProcessReceivedCommands+0x1a2>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80149e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80149ea:	f023 0301 	bic.w	r3, r3, #1
 80149ee:	b2da      	uxtb	r2, r3
 80149f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80149f6:	e000      	b.n	80149fa <prvProcessReceivedCommands+0x1a2>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80149f8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80149fa:	4b07      	ldr	r3, [pc, #28]	; (8014a18 <prvProcessReceivedCommands+0x1c0>)
 80149fc:	681b      	ldr	r3, [r3, #0]
 80149fe:	1d39      	adds	r1, r7, #4
 8014a00:	2200      	movs	r2, #0
 8014a02:	4618      	mov	r0, r3
 8014a04:	f7fe f8f8 	bl	8012bf8 <xQueueReceive>
 8014a08:	4603      	mov	r3, r0
 8014a0a:	2b00      	cmp	r3, #0
 8014a0c:	f47f af28 	bne.w	8014860 <prvProcessReceivedCommands+0x8>
	}
}
 8014a10:	bf00      	nop
 8014a12:	3730      	adds	r7, #48	; 0x30
 8014a14:	46bd      	mov	sp, r7
 8014a16:	bd80      	pop	{r7, pc}
 8014a18:	20000ebc 	.word	0x20000ebc

08014a1c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8014a1c:	b580      	push	{r7, lr}
 8014a1e:	b088      	sub	sp, #32
 8014a20:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8014a22:	e049      	b.n	8014ab8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8014a24:	4b2e      	ldr	r3, [pc, #184]	; (8014ae0 <prvSwitchTimerLists+0xc4>)
 8014a26:	681b      	ldr	r3, [r3, #0]
 8014a28:	68db      	ldr	r3, [r3, #12]
 8014a2a:	681b      	ldr	r3, [r3, #0]
 8014a2c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014a2e:	4b2c      	ldr	r3, [pc, #176]	; (8014ae0 <prvSwitchTimerLists+0xc4>)
 8014a30:	681b      	ldr	r3, [r3, #0]
 8014a32:	68db      	ldr	r3, [r3, #12]
 8014a34:	68db      	ldr	r3, [r3, #12]
 8014a36:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8014a38:	68fb      	ldr	r3, [r7, #12]
 8014a3a:	3304      	adds	r3, #4
 8014a3c:	4618      	mov	r0, r3
 8014a3e:	f7fd fcc7 	bl	80123d0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8014a42:	68fb      	ldr	r3, [r7, #12]
 8014a44:	6a1b      	ldr	r3, [r3, #32]
 8014a46:	68f8      	ldr	r0, [r7, #12]
 8014a48:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8014a4a:	68fb      	ldr	r3, [r7, #12]
 8014a4c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014a50:	f003 0304 	and.w	r3, r3, #4
 8014a54:	2b00      	cmp	r3, #0
 8014a56:	d02f      	beq.n	8014ab8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8014a58:	68fb      	ldr	r3, [r7, #12]
 8014a5a:	699b      	ldr	r3, [r3, #24]
 8014a5c:	693a      	ldr	r2, [r7, #16]
 8014a5e:	4413      	add	r3, r2
 8014a60:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8014a62:	68ba      	ldr	r2, [r7, #8]
 8014a64:	693b      	ldr	r3, [r7, #16]
 8014a66:	429a      	cmp	r2, r3
 8014a68:	d90e      	bls.n	8014a88 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8014a6a:	68fb      	ldr	r3, [r7, #12]
 8014a6c:	68ba      	ldr	r2, [r7, #8]
 8014a6e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8014a70:	68fb      	ldr	r3, [r7, #12]
 8014a72:	68fa      	ldr	r2, [r7, #12]
 8014a74:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8014a76:	4b1a      	ldr	r3, [pc, #104]	; (8014ae0 <prvSwitchTimerLists+0xc4>)
 8014a78:	681a      	ldr	r2, [r3, #0]
 8014a7a:	68fb      	ldr	r3, [r7, #12]
 8014a7c:	3304      	adds	r3, #4
 8014a7e:	4619      	mov	r1, r3
 8014a80:	4610      	mov	r0, r2
 8014a82:	f7fd fc6c 	bl	801235e <vListInsert>
 8014a86:	e017      	b.n	8014ab8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8014a88:	2300      	movs	r3, #0
 8014a8a:	9300      	str	r3, [sp, #0]
 8014a8c:	2300      	movs	r3, #0
 8014a8e:	693a      	ldr	r2, [r7, #16]
 8014a90:	2100      	movs	r1, #0
 8014a92:	68f8      	ldr	r0, [r7, #12]
 8014a94:	f7ff fd5e 	bl	8014554 <xTimerGenericCommand>
 8014a98:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8014a9a:	687b      	ldr	r3, [r7, #4]
 8014a9c:	2b00      	cmp	r3, #0
 8014a9e:	d10b      	bne.n	8014ab8 <prvSwitchTimerLists+0x9c>
 8014aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014aa4:	b672      	cpsid	i
 8014aa6:	f383 8811 	msr	BASEPRI, r3
 8014aaa:	f3bf 8f6f 	isb	sy
 8014aae:	f3bf 8f4f 	dsb	sy
 8014ab2:	b662      	cpsie	i
 8014ab4:	603b      	str	r3, [r7, #0]
 8014ab6:	e7fe      	b.n	8014ab6 <prvSwitchTimerLists+0x9a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8014ab8:	4b09      	ldr	r3, [pc, #36]	; (8014ae0 <prvSwitchTimerLists+0xc4>)
 8014aba:	681b      	ldr	r3, [r3, #0]
 8014abc:	681b      	ldr	r3, [r3, #0]
 8014abe:	2b00      	cmp	r3, #0
 8014ac0:	d1b0      	bne.n	8014a24 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8014ac2:	4b07      	ldr	r3, [pc, #28]	; (8014ae0 <prvSwitchTimerLists+0xc4>)
 8014ac4:	681b      	ldr	r3, [r3, #0]
 8014ac6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8014ac8:	4b06      	ldr	r3, [pc, #24]	; (8014ae4 <prvSwitchTimerLists+0xc8>)
 8014aca:	681b      	ldr	r3, [r3, #0]
 8014acc:	4a04      	ldr	r2, [pc, #16]	; (8014ae0 <prvSwitchTimerLists+0xc4>)
 8014ace:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8014ad0:	4a04      	ldr	r2, [pc, #16]	; (8014ae4 <prvSwitchTimerLists+0xc8>)
 8014ad2:	697b      	ldr	r3, [r7, #20]
 8014ad4:	6013      	str	r3, [r2, #0]
}
 8014ad6:	bf00      	nop
 8014ad8:	3718      	adds	r7, #24
 8014ada:	46bd      	mov	sp, r7
 8014adc:	bd80      	pop	{r7, pc}
 8014ade:	bf00      	nop
 8014ae0:	20000eb4 	.word	0x20000eb4
 8014ae4:	20000eb8 	.word	0x20000eb8

08014ae8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8014ae8:	b580      	push	{r7, lr}
 8014aea:	b082      	sub	sp, #8
 8014aec:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8014aee:	f000 f943 	bl	8014d78 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8014af2:	4b15      	ldr	r3, [pc, #84]	; (8014b48 <prvCheckForValidListAndQueue+0x60>)
 8014af4:	681b      	ldr	r3, [r3, #0]
 8014af6:	2b00      	cmp	r3, #0
 8014af8:	d120      	bne.n	8014b3c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8014afa:	4814      	ldr	r0, [pc, #80]	; (8014b4c <prvCheckForValidListAndQueue+0x64>)
 8014afc:	f7fd fbde 	bl	80122bc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8014b00:	4813      	ldr	r0, [pc, #76]	; (8014b50 <prvCheckForValidListAndQueue+0x68>)
 8014b02:	f7fd fbdb 	bl	80122bc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8014b06:	4b13      	ldr	r3, [pc, #76]	; (8014b54 <prvCheckForValidListAndQueue+0x6c>)
 8014b08:	4a10      	ldr	r2, [pc, #64]	; (8014b4c <prvCheckForValidListAndQueue+0x64>)
 8014b0a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8014b0c:	4b12      	ldr	r3, [pc, #72]	; (8014b58 <prvCheckForValidListAndQueue+0x70>)
 8014b0e:	4a10      	ldr	r2, [pc, #64]	; (8014b50 <prvCheckForValidListAndQueue+0x68>)
 8014b10:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8014b12:	2300      	movs	r3, #0
 8014b14:	9300      	str	r3, [sp, #0]
 8014b16:	4b11      	ldr	r3, [pc, #68]	; (8014b5c <prvCheckForValidListAndQueue+0x74>)
 8014b18:	4a11      	ldr	r2, [pc, #68]	; (8014b60 <prvCheckForValidListAndQueue+0x78>)
 8014b1a:	2110      	movs	r1, #16
 8014b1c:	200a      	movs	r0, #10
 8014b1e:	f7fd fceb 	bl	80124f8 <xQueueGenericCreateStatic>
 8014b22:	4602      	mov	r2, r0
 8014b24:	4b08      	ldr	r3, [pc, #32]	; (8014b48 <prvCheckForValidListAndQueue+0x60>)
 8014b26:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8014b28:	4b07      	ldr	r3, [pc, #28]	; (8014b48 <prvCheckForValidListAndQueue+0x60>)
 8014b2a:	681b      	ldr	r3, [r3, #0]
 8014b2c:	2b00      	cmp	r3, #0
 8014b2e:	d005      	beq.n	8014b3c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8014b30:	4b05      	ldr	r3, [pc, #20]	; (8014b48 <prvCheckForValidListAndQueue+0x60>)
 8014b32:	681b      	ldr	r3, [r3, #0]
 8014b34:	490b      	ldr	r1, [pc, #44]	; (8014b64 <prvCheckForValidListAndQueue+0x7c>)
 8014b36:	4618      	mov	r0, r3
 8014b38:	f7fe fc20 	bl	801337c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8014b3c:	f000 f94e 	bl	8014ddc <vPortExitCritical>
}
 8014b40:	bf00      	nop
 8014b42:	46bd      	mov	sp, r7
 8014b44:	bd80      	pop	{r7, pc}
 8014b46:	bf00      	nop
 8014b48:	20000ebc 	.word	0x20000ebc
 8014b4c:	20000e8c 	.word	0x20000e8c
 8014b50:	20000ea0 	.word	0x20000ea0
 8014b54:	20000eb4 	.word	0x20000eb4
 8014b58:	20000eb8 	.word	0x20000eb8
 8014b5c:	20000f68 	.word	0x20000f68
 8014b60:	20000ec8 	.word	0x20000ec8
 8014b64:	080160ac 	.word	0x080160ac

08014b68 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8014b68:	b480      	push	{r7}
 8014b6a:	b085      	sub	sp, #20
 8014b6c:	af00      	add	r7, sp, #0
 8014b6e:	60f8      	str	r0, [r7, #12]
 8014b70:	60b9      	str	r1, [r7, #8]
 8014b72:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8014b74:	68fb      	ldr	r3, [r7, #12]
 8014b76:	3b04      	subs	r3, #4
 8014b78:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8014b7a:	68fb      	ldr	r3, [r7, #12]
 8014b7c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8014b80:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014b82:	68fb      	ldr	r3, [r7, #12]
 8014b84:	3b04      	subs	r3, #4
 8014b86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8014b88:	68bb      	ldr	r3, [r7, #8]
 8014b8a:	f023 0201 	bic.w	r2, r3, #1
 8014b8e:	68fb      	ldr	r3, [r7, #12]
 8014b90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014b92:	68fb      	ldr	r3, [r7, #12]
 8014b94:	3b04      	subs	r3, #4
 8014b96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8014b98:	4a0c      	ldr	r2, [pc, #48]	; (8014bcc <pxPortInitialiseStack+0x64>)
 8014b9a:	68fb      	ldr	r3, [r7, #12]
 8014b9c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8014b9e:	68fb      	ldr	r3, [r7, #12]
 8014ba0:	3b14      	subs	r3, #20
 8014ba2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8014ba4:	687a      	ldr	r2, [r7, #4]
 8014ba6:	68fb      	ldr	r3, [r7, #12]
 8014ba8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8014baa:	68fb      	ldr	r3, [r7, #12]
 8014bac:	3b04      	subs	r3, #4
 8014bae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8014bb0:	68fb      	ldr	r3, [r7, #12]
 8014bb2:	f06f 0202 	mvn.w	r2, #2
 8014bb6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8014bb8:	68fb      	ldr	r3, [r7, #12]
 8014bba:	3b20      	subs	r3, #32
 8014bbc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8014bbe:	68fb      	ldr	r3, [r7, #12]
}
 8014bc0:	4618      	mov	r0, r3
 8014bc2:	3714      	adds	r7, #20
 8014bc4:	46bd      	mov	sp, r7
 8014bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bca:	4770      	bx	lr
 8014bcc:	08014bd1 	.word	0x08014bd1

08014bd0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8014bd0:	b480      	push	{r7}
 8014bd2:	b085      	sub	sp, #20
 8014bd4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8014bd6:	2300      	movs	r3, #0
 8014bd8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8014bda:	4b13      	ldr	r3, [pc, #76]	; (8014c28 <prvTaskExitError+0x58>)
 8014bdc:	681b      	ldr	r3, [r3, #0]
 8014bde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014be2:	d00b      	beq.n	8014bfc <prvTaskExitError+0x2c>
 8014be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014be8:	b672      	cpsid	i
 8014bea:	f383 8811 	msr	BASEPRI, r3
 8014bee:	f3bf 8f6f 	isb	sy
 8014bf2:	f3bf 8f4f 	dsb	sy
 8014bf6:	b662      	cpsie	i
 8014bf8:	60fb      	str	r3, [r7, #12]
 8014bfa:	e7fe      	b.n	8014bfa <prvTaskExitError+0x2a>
 8014bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c00:	b672      	cpsid	i
 8014c02:	f383 8811 	msr	BASEPRI, r3
 8014c06:	f3bf 8f6f 	isb	sy
 8014c0a:	f3bf 8f4f 	dsb	sy
 8014c0e:	b662      	cpsie	i
 8014c10:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8014c12:	bf00      	nop
 8014c14:	687b      	ldr	r3, [r7, #4]
 8014c16:	2b00      	cmp	r3, #0
 8014c18:	d0fc      	beq.n	8014c14 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8014c1a:	bf00      	nop
 8014c1c:	3714      	adds	r7, #20
 8014c1e:	46bd      	mov	sp, r7
 8014c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c24:	4770      	bx	lr
 8014c26:	bf00      	nop
 8014c28:	20000104 	.word	0x20000104
 8014c2c:	00000000 	.word	0x00000000

08014c30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8014c30:	4b07      	ldr	r3, [pc, #28]	; (8014c50 <pxCurrentTCBConst2>)
 8014c32:	6819      	ldr	r1, [r3, #0]
 8014c34:	6808      	ldr	r0, [r1, #0]
 8014c36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c3a:	f380 8809 	msr	PSP, r0
 8014c3e:	f3bf 8f6f 	isb	sy
 8014c42:	f04f 0000 	mov.w	r0, #0
 8014c46:	f380 8811 	msr	BASEPRI, r0
 8014c4a:	4770      	bx	lr
 8014c4c:	f3af 8000 	nop.w

08014c50 <pxCurrentTCBConst2>:
 8014c50:	2000098c 	.word	0x2000098c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8014c54:	bf00      	nop
 8014c56:	bf00      	nop

08014c58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8014c58:	4808      	ldr	r0, [pc, #32]	; (8014c7c <prvPortStartFirstTask+0x24>)
 8014c5a:	6800      	ldr	r0, [r0, #0]
 8014c5c:	6800      	ldr	r0, [r0, #0]
 8014c5e:	f380 8808 	msr	MSP, r0
 8014c62:	f04f 0000 	mov.w	r0, #0
 8014c66:	f380 8814 	msr	CONTROL, r0
 8014c6a:	b662      	cpsie	i
 8014c6c:	b661      	cpsie	f
 8014c6e:	f3bf 8f4f 	dsb	sy
 8014c72:	f3bf 8f6f 	isb	sy
 8014c76:	df00      	svc	0
 8014c78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8014c7a:	bf00      	nop
 8014c7c:	e000ed08 	.word	0xe000ed08

08014c80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8014c80:	b580      	push	{r7, lr}
 8014c82:	b084      	sub	sp, #16
 8014c84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8014c86:	4b36      	ldr	r3, [pc, #216]	; (8014d60 <xPortStartScheduler+0xe0>)
 8014c88:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8014c8a:	68fb      	ldr	r3, [r7, #12]
 8014c8c:	781b      	ldrb	r3, [r3, #0]
 8014c8e:	b2db      	uxtb	r3, r3
 8014c90:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8014c92:	68fb      	ldr	r3, [r7, #12]
 8014c94:	22ff      	movs	r2, #255	; 0xff
 8014c96:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8014c98:	68fb      	ldr	r3, [r7, #12]
 8014c9a:	781b      	ldrb	r3, [r3, #0]
 8014c9c:	b2db      	uxtb	r3, r3
 8014c9e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8014ca0:	78fb      	ldrb	r3, [r7, #3]
 8014ca2:	b2db      	uxtb	r3, r3
 8014ca4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8014ca8:	b2da      	uxtb	r2, r3
 8014caa:	4b2e      	ldr	r3, [pc, #184]	; (8014d64 <xPortStartScheduler+0xe4>)
 8014cac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8014cae:	4b2e      	ldr	r3, [pc, #184]	; (8014d68 <xPortStartScheduler+0xe8>)
 8014cb0:	2207      	movs	r2, #7
 8014cb2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014cb4:	e009      	b.n	8014cca <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8014cb6:	4b2c      	ldr	r3, [pc, #176]	; (8014d68 <xPortStartScheduler+0xe8>)
 8014cb8:	681b      	ldr	r3, [r3, #0]
 8014cba:	3b01      	subs	r3, #1
 8014cbc:	4a2a      	ldr	r2, [pc, #168]	; (8014d68 <xPortStartScheduler+0xe8>)
 8014cbe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8014cc0:	78fb      	ldrb	r3, [r7, #3]
 8014cc2:	b2db      	uxtb	r3, r3
 8014cc4:	005b      	lsls	r3, r3, #1
 8014cc6:	b2db      	uxtb	r3, r3
 8014cc8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014cca:	78fb      	ldrb	r3, [r7, #3]
 8014ccc:	b2db      	uxtb	r3, r3
 8014cce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014cd2:	2b80      	cmp	r3, #128	; 0x80
 8014cd4:	d0ef      	beq.n	8014cb6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8014cd6:	4b24      	ldr	r3, [pc, #144]	; (8014d68 <xPortStartScheduler+0xe8>)
 8014cd8:	681b      	ldr	r3, [r3, #0]
 8014cda:	f1c3 0307 	rsb	r3, r3, #7
 8014cde:	2b04      	cmp	r3, #4
 8014ce0:	d00b      	beq.n	8014cfa <xPortStartScheduler+0x7a>
 8014ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ce6:	b672      	cpsid	i
 8014ce8:	f383 8811 	msr	BASEPRI, r3
 8014cec:	f3bf 8f6f 	isb	sy
 8014cf0:	f3bf 8f4f 	dsb	sy
 8014cf4:	b662      	cpsie	i
 8014cf6:	60bb      	str	r3, [r7, #8]
 8014cf8:	e7fe      	b.n	8014cf8 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8014cfa:	4b1b      	ldr	r3, [pc, #108]	; (8014d68 <xPortStartScheduler+0xe8>)
 8014cfc:	681b      	ldr	r3, [r3, #0]
 8014cfe:	021b      	lsls	r3, r3, #8
 8014d00:	4a19      	ldr	r2, [pc, #100]	; (8014d68 <xPortStartScheduler+0xe8>)
 8014d02:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8014d04:	4b18      	ldr	r3, [pc, #96]	; (8014d68 <xPortStartScheduler+0xe8>)
 8014d06:	681b      	ldr	r3, [r3, #0]
 8014d08:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8014d0c:	4a16      	ldr	r2, [pc, #88]	; (8014d68 <xPortStartScheduler+0xe8>)
 8014d0e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8014d10:	687b      	ldr	r3, [r7, #4]
 8014d12:	b2da      	uxtb	r2, r3
 8014d14:	68fb      	ldr	r3, [r7, #12]
 8014d16:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8014d18:	4b14      	ldr	r3, [pc, #80]	; (8014d6c <xPortStartScheduler+0xec>)
 8014d1a:	681b      	ldr	r3, [r3, #0]
 8014d1c:	4a13      	ldr	r2, [pc, #76]	; (8014d6c <xPortStartScheduler+0xec>)
 8014d1e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8014d22:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8014d24:	4b11      	ldr	r3, [pc, #68]	; (8014d6c <xPortStartScheduler+0xec>)
 8014d26:	681b      	ldr	r3, [r3, #0]
 8014d28:	4a10      	ldr	r2, [pc, #64]	; (8014d6c <xPortStartScheduler+0xec>)
 8014d2a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8014d2e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8014d30:	f000 f8d4 	bl	8014edc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8014d34:	4b0e      	ldr	r3, [pc, #56]	; (8014d70 <xPortStartScheduler+0xf0>)
 8014d36:	2200      	movs	r2, #0
 8014d38:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8014d3a:	f000 f8f3 	bl	8014f24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8014d3e:	4b0d      	ldr	r3, [pc, #52]	; (8014d74 <xPortStartScheduler+0xf4>)
 8014d40:	681b      	ldr	r3, [r3, #0]
 8014d42:	4a0c      	ldr	r2, [pc, #48]	; (8014d74 <xPortStartScheduler+0xf4>)
 8014d44:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8014d48:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8014d4a:	f7ff ff85 	bl	8014c58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8014d4e:	f7fe ff67 	bl	8013c20 <vTaskSwitchContext>
	prvTaskExitError();
 8014d52:	f7ff ff3d 	bl	8014bd0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8014d56:	2300      	movs	r3, #0
}
 8014d58:	4618      	mov	r0, r3
 8014d5a:	3710      	adds	r7, #16
 8014d5c:	46bd      	mov	sp, r7
 8014d5e:	bd80      	pop	{r7, pc}
 8014d60:	e000e400 	.word	0xe000e400
 8014d64:	20000fb8 	.word	0x20000fb8
 8014d68:	20000fbc 	.word	0x20000fbc
 8014d6c:	e000ed20 	.word	0xe000ed20
 8014d70:	20000104 	.word	0x20000104
 8014d74:	e000ef34 	.word	0xe000ef34

08014d78 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8014d78:	b480      	push	{r7}
 8014d7a:	b083      	sub	sp, #12
 8014d7c:	af00      	add	r7, sp, #0
 8014d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d82:	b672      	cpsid	i
 8014d84:	f383 8811 	msr	BASEPRI, r3
 8014d88:	f3bf 8f6f 	isb	sy
 8014d8c:	f3bf 8f4f 	dsb	sy
 8014d90:	b662      	cpsie	i
 8014d92:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8014d94:	4b0f      	ldr	r3, [pc, #60]	; (8014dd4 <vPortEnterCritical+0x5c>)
 8014d96:	681b      	ldr	r3, [r3, #0]
 8014d98:	3301      	adds	r3, #1
 8014d9a:	4a0e      	ldr	r2, [pc, #56]	; (8014dd4 <vPortEnterCritical+0x5c>)
 8014d9c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8014d9e:	4b0d      	ldr	r3, [pc, #52]	; (8014dd4 <vPortEnterCritical+0x5c>)
 8014da0:	681b      	ldr	r3, [r3, #0]
 8014da2:	2b01      	cmp	r3, #1
 8014da4:	d110      	bne.n	8014dc8 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8014da6:	4b0c      	ldr	r3, [pc, #48]	; (8014dd8 <vPortEnterCritical+0x60>)
 8014da8:	681b      	ldr	r3, [r3, #0]
 8014daa:	b2db      	uxtb	r3, r3
 8014dac:	2b00      	cmp	r3, #0
 8014dae:	d00b      	beq.n	8014dc8 <vPortEnterCritical+0x50>
 8014db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014db4:	b672      	cpsid	i
 8014db6:	f383 8811 	msr	BASEPRI, r3
 8014dba:	f3bf 8f6f 	isb	sy
 8014dbe:	f3bf 8f4f 	dsb	sy
 8014dc2:	b662      	cpsie	i
 8014dc4:	603b      	str	r3, [r7, #0]
 8014dc6:	e7fe      	b.n	8014dc6 <vPortEnterCritical+0x4e>
	}
}
 8014dc8:	bf00      	nop
 8014dca:	370c      	adds	r7, #12
 8014dcc:	46bd      	mov	sp, r7
 8014dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dd2:	4770      	bx	lr
 8014dd4:	20000104 	.word	0x20000104
 8014dd8:	e000ed04 	.word	0xe000ed04

08014ddc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8014ddc:	b480      	push	{r7}
 8014dde:	b083      	sub	sp, #12
 8014de0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8014de2:	4b12      	ldr	r3, [pc, #72]	; (8014e2c <vPortExitCritical+0x50>)
 8014de4:	681b      	ldr	r3, [r3, #0]
 8014de6:	2b00      	cmp	r3, #0
 8014de8:	d10b      	bne.n	8014e02 <vPortExitCritical+0x26>
 8014dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014dee:	b672      	cpsid	i
 8014df0:	f383 8811 	msr	BASEPRI, r3
 8014df4:	f3bf 8f6f 	isb	sy
 8014df8:	f3bf 8f4f 	dsb	sy
 8014dfc:	b662      	cpsie	i
 8014dfe:	607b      	str	r3, [r7, #4]
 8014e00:	e7fe      	b.n	8014e00 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 8014e02:	4b0a      	ldr	r3, [pc, #40]	; (8014e2c <vPortExitCritical+0x50>)
 8014e04:	681b      	ldr	r3, [r3, #0]
 8014e06:	3b01      	subs	r3, #1
 8014e08:	4a08      	ldr	r2, [pc, #32]	; (8014e2c <vPortExitCritical+0x50>)
 8014e0a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8014e0c:	4b07      	ldr	r3, [pc, #28]	; (8014e2c <vPortExitCritical+0x50>)
 8014e0e:	681b      	ldr	r3, [r3, #0]
 8014e10:	2b00      	cmp	r3, #0
 8014e12:	d104      	bne.n	8014e1e <vPortExitCritical+0x42>
 8014e14:	2300      	movs	r3, #0
 8014e16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014e18:	683b      	ldr	r3, [r7, #0]
 8014e1a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8014e1e:	bf00      	nop
 8014e20:	370c      	adds	r7, #12
 8014e22:	46bd      	mov	sp, r7
 8014e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e28:	4770      	bx	lr
 8014e2a:	bf00      	nop
 8014e2c:	20000104 	.word	0x20000104

08014e30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8014e30:	f3ef 8009 	mrs	r0, PSP
 8014e34:	f3bf 8f6f 	isb	sy
 8014e38:	4b15      	ldr	r3, [pc, #84]	; (8014e90 <pxCurrentTCBConst>)
 8014e3a:	681a      	ldr	r2, [r3, #0]
 8014e3c:	f01e 0f10 	tst.w	lr, #16
 8014e40:	bf08      	it	eq
 8014e42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8014e46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e4a:	6010      	str	r0, [r2, #0]
 8014e4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8014e50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8014e54:	b672      	cpsid	i
 8014e56:	f380 8811 	msr	BASEPRI, r0
 8014e5a:	f3bf 8f4f 	dsb	sy
 8014e5e:	f3bf 8f6f 	isb	sy
 8014e62:	b662      	cpsie	i
 8014e64:	f7fe fedc 	bl	8013c20 <vTaskSwitchContext>
 8014e68:	f04f 0000 	mov.w	r0, #0
 8014e6c:	f380 8811 	msr	BASEPRI, r0
 8014e70:	bc09      	pop	{r0, r3}
 8014e72:	6819      	ldr	r1, [r3, #0]
 8014e74:	6808      	ldr	r0, [r1, #0]
 8014e76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e7a:	f01e 0f10 	tst.w	lr, #16
 8014e7e:	bf08      	it	eq
 8014e80:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8014e84:	f380 8809 	msr	PSP, r0
 8014e88:	f3bf 8f6f 	isb	sy
 8014e8c:	4770      	bx	lr
 8014e8e:	bf00      	nop

08014e90 <pxCurrentTCBConst>:
 8014e90:	2000098c 	.word	0x2000098c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8014e94:	bf00      	nop
 8014e96:	bf00      	nop

08014e98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8014e98:	b580      	push	{r7, lr}
 8014e9a:	b082      	sub	sp, #8
 8014e9c:	af00      	add	r7, sp, #0
	__asm volatile
 8014e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ea2:	b672      	cpsid	i
 8014ea4:	f383 8811 	msr	BASEPRI, r3
 8014ea8:	f3bf 8f6f 	isb	sy
 8014eac:	f3bf 8f4f 	dsb	sy
 8014eb0:	b662      	cpsie	i
 8014eb2:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8014eb4:	f7fe fdfa 	bl	8013aac <xTaskIncrementTick>
 8014eb8:	4603      	mov	r3, r0
 8014eba:	2b00      	cmp	r3, #0
 8014ebc:	d003      	beq.n	8014ec6 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8014ebe:	4b06      	ldr	r3, [pc, #24]	; (8014ed8 <SysTick_Handler+0x40>)
 8014ec0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014ec4:	601a      	str	r2, [r3, #0]
 8014ec6:	2300      	movs	r3, #0
 8014ec8:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014eca:	683b      	ldr	r3, [r7, #0]
 8014ecc:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8014ed0:	bf00      	nop
 8014ed2:	3708      	adds	r7, #8
 8014ed4:	46bd      	mov	sp, r7
 8014ed6:	bd80      	pop	{r7, pc}
 8014ed8:	e000ed04 	.word	0xe000ed04

08014edc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8014edc:	b480      	push	{r7}
 8014ede:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8014ee0:	4b0b      	ldr	r3, [pc, #44]	; (8014f10 <vPortSetupTimerInterrupt+0x34>)
 8014ee2:	2200      	movs	r2, #0
 8014ee4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8014ee6:	4b0b      	ldr	r3, [pc, #44]	; (8014f14 <vPortSetupTimerInterrupt+0x38>)
 8014ee8:	2200      	movs	r2, #0
 8014eea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8014eec:	4b0a      	ldr	r3, [pc, #40]	; (8014f18 <vPortSetupTimerInterrupt+0x3c>)
 8014eee:	681b      	ldr	r3, [r3, #0]
 8014ef0:	4a0a      	ldr	r2, [pc, #40]	; (8014f1c <vPortSetupTimerInterrupt+0x40>)
 8014ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8014ef6:	099b      	lsrs	r3, r3, #6
 8014ef8:	4a09      	ldr	r2, [pc, #36]	; (8014f20 <vPortSetupTimerInterrupt+0x44>)
 8014efa:	3b01      	subs	r3, #1
 8014efc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8014efe:	4b04      	ldr	r3, [pc, #16]	; (8014f10 <vPortSetupTimerInterrupt+0x34>)
 8014f00:	2207      	movs	r2, #7
 8014f02:	601a      	str	r2, [r3, #0]
}
 8014f04:	bf00      	nop
 8014f06:	46bd      	mov	sp, r7
 8014f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f0c:	4770      	bx	lr
 8014f0e:	bf00      	nop
 8014f10:	e000e010 	.word	0xe000e010
 8014f14:	e000e018 	.word	0xe000e018
 8014f18:	20000010 	.word	0x20000010
 8014f1c:	10624dd3 	.word	0x10624dd3
 8014f20:	e000e014 	.word	0xe000e014

08014f24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8014f24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8014f34 <vPortEnableVFP+0x10>
 8014f28:	6801      	ldr	r1, [r0, #0]
 8014f2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8014f2e:	6001      	str	r1, [r0, #0]
 8014f30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8014f32:	bf00      	nop
 8014f34:	e000ed88 	.word	0xe000ed88

08014f38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8014f38:	b480      	push	{r7}
 8014f3a:	b085      	sub	sp, #20
 8014f3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8014f3e:	f3ef 8305 	mrs	r3, IPSR
 8014f42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8014f44:	68fb      	ldr	r3, [r7, #12]
 8014f46:	2b0f      	cmp	r3, #15
 8014f48:	d915      	bls.n	8014f76 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8014f4a:	4a18      	ldr	r2, [pc, #96]	; (8014fac <vPortValidateInterruptPriority+0x74>)
 8014f4c:	68fb      	ldr	r3, [r7, #12]
 8014f4e:	4413      	add	r3, r2
 8014f50:	781b      	ldrb	r3, [r3, #0]
 8014f52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8014f54:	4b16      	ldr	r3, [pc, #88]	; (8014fb0 <vPortValidateInterruptPriority+0x78>)
 8014f56:	781b      	ldrb	r3, [r3, #0]
 8014f58:	7afa      	ldrb	r2, [r7, #11]
 8014f5a:	429a      	cmp	r2, r3
 8014f5c:	d20b      	bcs.n	8014f76 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8014f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f62:	b672      	cpsid	i
 8014f64:	f383 8811 	msr	BASEPRI, r3
 8014f68:	f3bf 8f6f 	isb	sy
 8014f6c:	f3bf 8f4f 	dsb	sy
 8014f70:	b662      	cpsie	i
 8014f72:	607b      	str	r3, [r7, #4]
 8014f74:	e7fe      	b.n	8014f74 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8014f76:	4b0f      	ldr	r3, [pc, #60]	; (8014fb4 <vPortValidateInterruptPriority+0x7c>)
 8014f78:	681b      	ldr	r3, [r3, #0]
 8014f7a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8014f7e:	4b0e      	ldr	r3, [pc, #56]	; (8014fb8 <vPortValidateInterruptPriority+0x80>)
 8014f80:	681b      	ldr	r3, [r3, #0]
 8014f82:	429a      	cmp	r2, r3
 8014f84:	d90b      	bls.n	8014f9e <vPortValidateInterruptPriority+0x66>
 8014f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f8a:	b672      	cpsid	i
 8014f8c:	f383 8811 	msr	BASEPRI, r3
 8014f90:	f3bf 8f6f 	isb	sy
 8014f94:	f3bf 8f4f 	dsb	sy
 8014f98:	b662      	cpsie	i
 8014f9a:	603b      	str	r3, [r7, #0]
 8014f9c:	e7fe      	b.n	8014f9c <vPortValidateInterruptPriority+0x64>
	}
 8014f9e:	bf00      	nop
 8014fa0:	3714      	adds	r7, #20
 8014fa2:	46bd      	mov	sp, r7
 8014fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fa8:	4770      	bx	lr
 8014faa:	bf00      	nop
 8014fac:	e000e3f0 	.word	0xe000e3f0
 8014fb0:	20000fb8 	.word	0x20000fb8
 8014fb4:	e000ed0c 	.word	0xe000ed0c
 8014fb8:	20000fbc 	.word	0x20000fbc

08014fbc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8014fbc:	b580      	push	{r7, lr}
 8014fbe:	b08a      	sub	sp, #40	; 0x28
 8014fc0:	af00      	add	r7, sp, #0
 8014fc2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8014fc4:	2300      	movs	r3, #0
 8014fc6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8014fc8:	f7fe fca2 	bl	8013910 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8014fcc:	4b5a      	ldr	r3, [pc, #360]	; (8015138 <pvPortMalloc+0x17c>)
 8014fce:	681b      	ldr	r3, [r3, #0]
 8014fd0:	2b00      	cmp	r3, #0
 8014fd2:	d101      	bne.n	8014fd8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8014fd4:	f000 f916 	bl	8015204 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8014fd8:	4b58      	ldr	r3, [pc, #352]	; (801513c <pvPortMalloc+0x180>)
 8014fda:	681a      	ldr	r2, [r3, #0]
 8014fdc:	687b      	ldr	r3, [r7, #4]
 8014fde:	4013      	ands	r3, r2
 8014fe0:	2b00      	cmp	r3, #0
 8014fe2:	f040 8090 	bne.w	8015106 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8014fe6:	687b      	ldr	r3, [r7, #4]
 8014fe8:	2b00      	cmp	r3, #0
 8014fea:	d01e      	beq.n	801502a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8014fec:	2208      	movs	r2, #8
 8014fee:	687b      	ldr	r3, [r7, #4]
 8014ff0:	4413      	add	r3, r2
 8014ff2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8014ff4:	687b      	ldr	r3, [r7, #4]
 8014ff6:	f003 0307 	and.w	r3, r3, #7
 8014ffa:	2b00      	cmp	r3, #0
 8014ffc:	d015      	beq.n	801502a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8014ffe:	687b      	ldr	r3, [r7, #4]
 8015000:	f023 0307 	bic.w	r3, r3, #7
 8015004:	3308      	adds	r3, #8
 8015006:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015008:	687b      	ldr	r3, [r7, #4]
 801500a:	f003 0307 	and.w	r3, r3, #7
 801500e:	2b00      	cmp	r3, #0
 8015010:	d00b      	beq.n	801502a <pvPortMalloc+0x6e>
 8015012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015016:	b672      	cpsid	i
 8015018:	f383 8811 	msr	BASEPRI, r3
 801501c:	f3bf 8f6f 	isb	sy
 8015020:	f3bf 8f4f 	dsb	sy
 8015024:	b662      	cpsie	i
 8015026:	617b      	str	r3, [r7, #20]
 8015028:	e7fe      	b.n	8015028 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801502a:	687b      	ldr	r3, [r7, #4]
 801502c:	2b00      	cmp	r3, #0
 801502e:	d06a      	beq.n	8015106 <pvPortMalloc+0x14a>
 8015030:	4b43      	ldr	r3, [pc, #268]	; (8015140 <pvPortMalloc+0x184>)
 8015032:	681b      	ldr	r3, [r3, #0]
 8015034:	687a      	ldr	r2, [r7, #4]
 8015036:	429a      	cmp	r2, r3
 8015038:	d865      	bhi.n	8015106 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801503a:	4b42      	ldr	r3, [pc, #264]	; (8015144 <pvPortMalloc+0x188>)
 801503c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801503e:	4b41      	ldr	r3, [pc, #260]	; (8015144 <pvPortMalloc+0x188>)
 8015040:	681b      	ldr	r3, [r3, #0]
 8015042:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8015044:	e004      	b.n	8015050 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8015046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015048:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801504a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801504c:	681b      	ldr	r3, [r3, #0]
 801504e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8015050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015052:	685b      	ldr	r3, [r3, #4]
 8015054:	687a      	ldr	r2, [r7, #4]
 8015056:	429a      	cmp	r2, r3
 8015058:	d903      	bls.n	8015062 <pvPortMalloc+0xa6>
 801505a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801505c:	681b      	ldr	r3, [r3, #0]
 801505e:	2b00      	cmp	r3, #0
 8015060:	d1f1      	bne.n	8015046 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8015062:	4b35      	ldr	r3, [pc, #212]	; (8015138 <pvPortMalloc+0x17c>)
 8015064:	681b      	ldr	r3, [r3, #0]
 8015066:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015068:	429a      	cmp	r2, r3
 801506a:	d04c      	beq.n	8015106 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801506c:	6a3b      	ldr	r3, [r7, #32]
 801506e:	681b      	ldr	r3, [r3, #0]
 8015070:	2208      	movs	r2, #8
 8015072:	4413      	add	r3, r2
 8015074:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8015076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015078:	681a      	ldr	r2, [r3, #0]
 801507a:	6a3b      	ldr	r3, [r7, #32]
 801507c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801507e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015080:	685a      	ldr	r2, [r3, #4]
 8015082:	687b      	ldr	r3, [r7, #4]
 8015084:	1ad2      	subs	r2, r2, r3
 8015086:	2308      	movs	r3, #8
 8015088:	005b      	lsls	r3, r3, #1
 801508a:	429a      	cmp	r2, r3
 801508c:	d920      	bls.n	80150d0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801508e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015090:	687b      	ldr	r3, [r7, #4]
 8015092:	4413      	add	r3, r2
 8015094:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015096:	69bb      	ldr	r3, [r7, #24]
 8015098:	f003 0307 	and.w	r3, r3, #7
 801509c:	2b00      	cmp	r3, #0
 801509e:	d00b      	beq.n	80150b8 <pvPortMalloc+0xfc>
 80150a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80150a4:	b672      	cpsid	i
 80150a6:	f383 8811 	msr	BASEPRI, r3
 80150aa:	f3bf 8f6f 	isb	sy
 80150ae:	f3bf 8f4f 	dsb	sy
 80150b2:	b662      	cpsie	i
 80150b4:	613b      	str	r3, [r7, #16]
 80150b6:	e7fe      	b.n	80150b6 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80150b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150ba:	685a      	ldr	r2, [r3, #4]
 80150bc:	687b      	ldr	r3, [r7, #4]
 80150be:	1ad2      	subs	r2, r2, r3
 80150c0:	69bb      	ldr	r3, [r7, #24]
 80150c2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80150c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150c6:	687a      	ldr	r2, [r7, #4]
 80150c8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80150ca:	69b8      	ldr	r0, [r7, #24]
 80150cc:	f000 f8fc 	bl	80152c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80150d0:	4b1b      	ldr	r3, [pc, #108]	; (8015140 <pvPortMalloc+0x184>)
 80150d2:	681a      	ldr	r2, [r3, #0]
 80150d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150d6:	685b      	ldr	r3, [r3, #4]
 80150d8:	1ad3      	subs	r3, r2, r3
 80150da:	4a19      	ldr	r2, [pc, #100]	; (8015140 <pvPortMalloc+0x184>)
 80150dc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80150de:	4b18      	ldr	r3, [pc, #96]	; (8015140 <pvPortMalloc+0x184>)
 80150e0:	681a      	ldr	r2, [r3, #0]
 80150e2:	4b19      	ldr	r3, [pc, #100]	; (8015148 <pvPortMalloc+0x18c>)
 80150e4:	681b      	ldr	r3, [r3, #0]
 80150e6:	429a      	cmp	r2, r3
 80150e8:	d203      	bcs.n	80150f2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80150ea:	4b15      	ldr	r3, [pc, #84]	; (8015140 <pvPortMalloc+0x184>)
 80150ec:	681b      	ldr	r3, [r3, #0]
 80150ee:	4a16      	ldr	r2, [pc, #88]	; (8015148 <pvPortMalloc+0x18c>)
 80150f0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80150f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150f4:	685a      	ldr	r2, [r3, #4]
 80150f6:	4b11      	ldr	r3, [pc, #68]	; (801513c <pvPortMalloc+0x180>)
 80150f8:	681b      	ldr	r3, [r3, #0]
 80150fa:	431a      	orrs	r2, r3
 80150fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150fe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8015100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015102:	2200      	movs	r2, #0
 8015104:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8015106:	f7fe fc11 	bl	801392c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801510a:	69fb      	ldr	r3, [r7, #28]
 801510c:	f003 0307 	and.w	r3, r3, #7
 8015110:	2b00      	cmp	r3, #0
 8015112:	d00b      	beq.n	801512c <pvPortMalloc+0x170>
 8015114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015118:	b672      	cpsid	i
 801511a:	f383 8811 	msr	BASEPRI, r3
 801511e:	f3bf 8f6f 	isb	sy
 8015122:	f3bf 8f4f 	dsb	sy
 8015126:	b662      	cpsie	i
 8015128:	60fb      	str	r3, [r7, #12]
 801512a:	e7fe      	b.n	801512a <pvPortMalloc+0x16e>
	return pvReturn;
 801512c:	69fb      	ldr	r3, [r7, #28]
}
 801512e:	4618      	mov	r0, r3
 8015130:	3728      	adds	r7, #40	; 0x28
 8015132:	46bd      	mov	sp, r7
 8015134:	bd80      	pop	{r7, pc}
 8015136:	bf00      	nop
 8015138:	20004bc8 	.word	0x20004bc8
 801513c:	20004bd4 	.word	0x20004bd4
 8015140:	20004bcc 	.word	0x20004bcc
 8015144:	20004bc0 	.word	0x20004bc0
 8015148:	20004bd0 	.word	0x20004bd0

0801514c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 801514c:	b580      	push	{r7, lr}
 801514e:	b086      	sub	sp, #24
 8015150:	af00      	add	r7, sp, #0
 8015152:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8015154:	687b      	ldr	r3, [r7, #4]
 8015156:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8015158:	687b      	ldr	r3, [r7, #4]
 801515a:	2b00      	cmp	r3, #0
 801515c:	d04a      	beq.n	80151f4 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801515e:	2308      	movs	r3, #8
 8015160:	425b      	negs	r3, r3
 8015162:	697a      	ldr	r2, [r7, #20]
 8015164:	4413      	add	r3, r2
 8015166:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8015168:	697b      	ldr	r3, [r7, #20]
 801516a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801516c:	693b      	ldr	r3, [r7, #16]
 801516e:	685a      	ldr	r2, [r3, #4]
 8015170:	4b22      	ldr	r3, [pc, #136]	; (80151fc <vPortFree+0xb0>)
 8015172:	681b      	ldr	r3, [r3, #0]
 8015174:	4013      	ands	r3, r2
 8015176:	2b00      	cmp	r3, #0
 8015178:	d10b      	bne.n	8015192 <vPortFree+0x46>
 801517a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801517e:	b672      	cpsid	i
 8015180:	f383 8811 	msr	BASEPRI, r3
 8015184:	f3bf 8f6f 	isb	sy
 8015188:	f3bf 8f4f 	dsb	sy
 801518c:	b662      	cpsie	i
 801518e:	60fb      	str	r3, [r7, #12]
 8015190:	e7fe      	b.n	8015190 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8015192:	693b      	ldr	r3, [r7, #16]
 8015194:	681b      	ldr	r3, [r3, #0]
 8015196:	2b00      	cmp	r3, #0
 8015198:	d00b      	beq.n	80151b2 <vPortFree+0x66>
 801519a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801519e:	b672      	cpsid	i
 80151a0:	f383 8811 	msr	BASEPRI, r3
 80151a4:	f3bf 8f6f 	isb	sy
 80151a8:	f3bf 8f4f 	dsb	sy
 80151ac:	b662      	cpsie	i
 80151ae:	60bb      	str	r3, [r7, #8]
 80151b0:	e7fe      	b.n	80151b0 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80151b2:	693b      	ldr	r3, [r7, #16]
 80151b4:	685a      	ldr	r2, [r3, #4]
 80151b6:	4b11      	ldr	r3, [pc, #68]	; (80151fc <vPortFree+0xb0>)
 80151b8:	681b      	ldr	r3, [r3, #0]
 80151ba:	4013      	ands	r3, r2
 80151bc:	2b00      	cmp	r3, #0
 80151be:	d019      	beq.n	80151f4 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80151c0:	693b      	ldr	r3, [r7, #16]
 80151c2:	681b      	ldr	r3, [r3, #0]
 80151c4:	2b00      	cmp	r3, #0
 80151c6:	d115      	bne.n	80151f4 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80151c8:	693b      	ldr	r3, [r7, #16]
 80151ca:	685a      	ldr	r2, [r3, #4]
 80151cc:	4b0b      	ldr	r3, [pc, #44]	; (80151fc <vPortFree+0xb0>)
 80151ce:	681b      	ldr	r3, [r3, #0]
 80151d0:	43db      	mvns	r3, r3
 80151d2:	401a      	ands	r2, r3
 80151d4:	693b      	ldr	r3, [r7, #16]
 80151d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80151d8:	f7fe fb9a 	bl	8013910 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80151dc:	693b      	ldr	r3, [r7, #16]
 80151de:	685a      	ldr	r2, [r3, #4]
 80151e0:	4b07      	ldr	r3, [pc, #28]	; (8015200 <vPortFree+0xb4>)
 80151e2:	681b      	ldr	r3, [r3, #0]
 80151e4:	4413      	add	r3, r2
 80151e6:	4a06      	ldr	r2, [pc, #24]	; (8015200 <vPortFree+0xb4>)
 80151e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80151ea:	6938      	ldr	r0, [r7, #16]
 80151ec:	f000 f86c 	bl	80152c8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80151f0:	f7fe fb9c 	bl	801392c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80151f4:	bf00      	nop
 80151f6:	3718      	adds	r7, #24
 80151f8:	46bd      	mov	sp, r7
 80151fa:	bd80      	pop	{r7, pc}
 80151fc:	20004bd4 	.word	0x20004bd4
 8015200:	20004bcc 	.word	0x20004bcc

08015204 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8015204:	b480      	push	{r7}
 8015206:	b085      	sub	sp, #20
 8015208:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801520a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801520e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8015210:	4b27      	ldr	r3, [pc, #156]	; (80152b0 <prvHeapInit+0xac>)
 8015212:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8015214:	68fb      	ldr	r3, [r7, #12]
 8015216:	f003 0307 	and.w	r3, r3, #7
 801521a:	2b00      	cmp	r3, #0
 801521c:	d00c      	beq.n	8015238 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801521e:	68fb      	ldr	r3, [r7, #12]
 8015220:	3307      	adds	r3, #7
 8015222:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015224:	68fb      	ldr	r3, [r7, #12]
 8015226:	f023 0307 	bic.w	r3, r3, #7
 801522a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801522c:	68ba      	ldr	r2, [r7, #8]
 801522e:	68fb      	ldr	r3, [r7, #12]
 8015230:	1ad3      	subs	r3, r2, r3
 8015232:	4a1f      	ldr	r2, [pc, #124]	; (80152b0 <prvHeapInit+0xac>)
 8015234:	4413      	add	r3, r2
 8015236:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8015238:	68fb      	ldr	r3, [r7, #12]
 801523a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801523c:	4a1d      	ldr	r2, [pc, #116]	; (80152b4 <prvHeapInit+0xb0>)
 801523e:	687b      	ldr	r3, [r7, #4]
 8015240:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8015242:	4b1c      	ldr	r3, [pc, #112]	; (80152b4 <prvHeapInit+0xb0>)
 8015244:	2200      	movs	r2, #0
 8015246:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8015248:	687b      	ldr	r3, [r7, #4]
 801524a:	68ba      	ldr	r2, [r7, #8]
 801524c:	4413      	add	r3, r2
 801524e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8015250:	2208      	movs	r2, #8
 8015252:	68fb      	ldr	r3, [r7, #12]
 8015254:	1a9b      	subs	r3, r3, r2
 8015256:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015258:	68fb      	ldr	r3, [r7, #12]
 801525a:	f023 0307 	bic.w	r3, r3, #7
 801525e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8015260:	68fb      	ldr	r3, [r7, #12]
 8015262:	4a15      	ldr	r2, [pc, #84]	; (80152b8 <prvHeapInit+0xb4>)
 8015264:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8015266:	4b14      	ldr	r3, [pc, #80]	; (80152b8 <prvHeapInit+0xb4>)
 8015268:	681b      	ldr	r3, [r3, #0]
 801526a:	2200      	movs	r2, #0
 801526c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801526e:	4b12      	ldr	r3, [pc, #72]	; (80152b8 <prvHeapInit+0xb4>)
 8015270:	681b      	ldr	r3, [r3, #0]
 8015272:	2200      	movs	r2, #0
 8015274:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8015276:	687b      	ldr	r3, [r7, #4]
 8015278:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801527a:	683b      	ldr	r3, [r7, #0]
 801527c:	68fa      	ldr	r2, [r7, #12]
 801527e:	1ad2      	subs	r2, r2, r3
 8015280:	683b      	ldr	r3, [r7, #0]
 8015282:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8015284:	4b0c      	ldr	r3, [pc, #48]	; (80152b8 <prvHeapInit+0xb4>)
 8015286:	681a      	ldr	r2, [r3, #0]
 8015288:	683b      	ldr	r3, [r7, #0]
 801528a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801528c:	683b      	ldr	r3, [r7, #0]
 801528e:	685b      	ldr	r3, [r3, #4]
 8015290:	4a0a      	ldr	r2, [pc, #40]	; (80152bc <prvHeapInit+0xb8>)
 8015292:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8015294:	683b      	ldr	r3, [r7, #0]
 8015296:	685b      	ldr	r3, [r3, #4]
 8015298:	4a09      	ldr	r2, [pc, #36]	; (80152c0 <prvHeapInit+0xbc>)
 801529a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801529c:	4b09      	ldr	r3, [pc, #36]	; (80152c4 <prvHeapInit+0xc0>)
 801529e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80152a2:	601a      	str	r2, [r3, #0]
}
 80152a4:	bf00      	nop
 80152a6:	3714      	adds	r7, #20
 80152a8:	46bd      	mov	sp, r7
 80152aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152ae:	4770      	bx	lr
 80152b0:	20000fc0 	.word	0x20000fc0
 80152b4:	20004bc0 	.word	0x20004bc0
 80152b8:	20004bc8 	.word	0x20004bc8
 80152bc:	20004bd0 	.word	0x20004bd0
 80152c0:	20004bcc 	.word	0x20004bcc
 80152c4:	20004bd4 	.word	0x20004bd4

080152c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80152c8:	b480      	push	{r7}
 80152ca:	b085      	sub	sp, #20
 80152cc:	af00      	add	r7, sp, #0
 80152ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80152d0:	4b28      	ldr	r3, [pc, #160]	; (8015374 <prvInsertBlockIntoFreeList+0xac>)
 80152d2:	60fb      	str	r3, [r7, #12]
 80152d4:	e002      	b.n	80152dc <prvInsertBlockIntoFreeList+0x14>
 80152d6:	68fb      	ldr	r3, [r7, #12]
 80152d8:	681b      	ldr	r3, [r3, #0]
 80152da:	60fb      	str	r3, [r7, #12]
 80152dc:	68fb      	ldr	r3, [r7, #12]
 80152de:	681b      	ldr	r3, [r3, #0]
 80152e0:	687a      	ldr	r2, [r7, #4]
 80152e2:	429a      	cmp	r2, r3
 80152e4:	d8f7      	bhi.n	80152d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80152e6:	68fb      	ldr	r3, [r7, #12]
 80152e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80152ea:	68fb      	ldr	r3, [r7, #12]
 80152ec:	685b      	ldr	r3, [r3, #4]
 80152ee:	68ba      	ldr	r2, [r7, #8]
 80152f0:	4413      	add	r3, r2
 80152f2:	687a      	ldr	r2, [r7, #4]
 80152f4:	429a      	cmp	r2, r3
 80152f6:	d108      	bne.n	801530a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80152f8:	68fb      	ldr	r3, [r7, #12]
 80152fa:	685a      	ldr	r2, [r3, #4]
 80152fc:	687b      	ldr	r3, [r7, #4]
 80152fe:	685b      	ldr	r3, [r3, #4]
 8015300:	441a      	add	r2, r3
 8015302:	68fb      	ldr	r3, [r7, #12]
 8015304:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8015306:	68fb      	ldr	r3, [r7, #12]
 8015308:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801530a:	687b      	ldr	r3, [r7, #4]
 801530c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801530e:	687b      	ldr	r3, [r7, #4]
 8015310:	685b      	ldr	r3, [r3, #4]
 8015312:	68ba      	ldr	r2, [r7, #8]
 8015314:	441a      	add	r2, r3
 8015316:	68fb      	ldr	r3, [r7, #12]
 8015318:	681b      	ldr	r3, [r3, #0]
 801531a:	429a      	cmp	r2, r3
 801531c:	d118      	bne.n	8015350 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801531e:	68fb      	ldr	r3, [r7, #12]
 8015320:	681a      	ldr	r2, [r3, #0]
 8015322:	4b15      	ldr	r3, [pc, #84]	; (8015378 <prvInsertBlockIntoFreeList+0xb0>)
 8015324:	681b      	ldr	r3, [r3, #0]
 8015326:	429a      	cmp	r2, r3
 8015328:	d00d      	beq.n	8015346 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801532a:	687b      	ldr	r3, [r7, #4]
 801532c:	685a      	ldr	r2, [r3, #4]
 801532e:	68fb      	ldr	r3, [r7, #12]
 8015330:	681b      	ldr	r3, [r3, #0]
 8015332:	685b      	ldr	r3, [r3, #4]
 8015334:	441a      	add	r2, r3
 8015336:	687b      	ldr	r3, [r7, #4]
 8015338:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801533a:	68fb      	ldr	r3, [r7, #12]
 801533c:	681b      	ldr	r3, [r3, #0]
 801533e:	681a      	ldr	r2, [r3, #0]
 8015340:	687b      	ldr	r3, [r7, #4]
 8015342:	601a      	str	r2, [r3, #0]
 8015344:	e008      	b.n	8015358 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8015346:	4b0c      	ldr	r3, [pc, #48]	; (8015378 <prvInsertBlockIntoFreeList+0xb0>)
 8015348:	681a      	ldr	r2, [r3, #0]
 801534a:	687b      	ldr	r3, [r7, #4]
 801534c:	601a      	str	r2, [r3, #0]
 801534e:	e003      	b.n	8015358 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8015350:	68fb      	ldr	r3, [r7, #12]
 8015352:	681a      	ldr	r2, [r3, #0]
 8015354:	687b      	ldr	r3, [r7, #4]
 8015356:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8015358:	68fa      	ldr	r2, [r7, #12]
 801535a:	687b      	ldr	r3, [r7, #4]
 801535c:	429a      	cmp	r2, r3
 801535e:	d002      	beq.n	8015366 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8015360:	68fb      	ldr	r3, [r7, #12]
 8015362:	687a      	ldr	r2, [r7, #4]
 8015364:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015366:	bf00      	nop
 8015368:	3714      	adds	r7, #20
 801536a:	46bd      	mov	sp, r7
 801536c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015370:	4770      	bx	lr
 8015372:	bf00      	nop
 8015374:	20004bc0 	.word	0x20004bc0
 8015378:	20004bc8 	.word	0x20004bc8

0801537c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801537c:	b580      	push	{r7, lr}
 801537e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8015380:	2200      	movs	r2, #0
 8015382:	4912      	ldr	r1, [pc, #72]	; (80153cc <MX_USB_DEVICE_Init+0x50>)
 8015384:	4812      	ldr	r0, [pc, #72]	; (80153d0 <MX_USB_DEVICE_Init+0x54>)
 8015386:	f7f6 fd8e 	bl	800bea6 <USBD_Init>
 801538a:	4603      	mov	r3, r0
 801538c:	2b00      	cmp	r3, #0
 801538e:	d001      	beq.n	8015394 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8015390:	f7eb fe02 	bl	8000f98 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 8015394:	490f      	ldr	r1, [pc, #60]	; (80153d4 <MX_USB_DEVICE_Init+0x58>)
 8015396:	480e      	ldr	r0, [pc, #56]	; (80153d0 <MX_USB_DEVICE_Init+0x54>)
 8015398:	f7f6 fdbb 	bl	800bf12 <USBD_RegisterClass>
 801539c:	4603      	mov	r3, r0
 801539e:	2b00      	cmp	r3, #0
 80153a0:	d001      	beq.n	80153a6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80153a2:	f7eb fdf9 	bl	8000f98 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 80153a6:	490c      	ldr	r1, [pc, #48]	; (80153d8 <MX_USB_DEVICE_Init+0x5c>)
 80153a8:	4809      	ldr	r0, [pc, #36]	; (80153d0 <MX_USB_DEVICE_Init+0x54>)
 80153aa:	f7f5 fab7 	bl	800a91c <USBD_MSC_RegisterStorage>
 80153ae:	4603      	mov	r3, r0
 80153b0:	2b00      	cmp	r3, #0
 80153b2:	d001      	beq.n	80153b8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80153b4:	f7eb fdf0 	bl	8000f98 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80153b8:	4805      	ldr	r0, [pc, #20]	; (80153d0 <MX_USB_DEVICE_Init+0x54>)
 80153ba:	f7f6 fdcb 	bl	800bf54 <USBD_Start>
 80153be:	4603      	mov	r3, r0
 80153c0:	2b00      	cmp	r3, #0
 80153c2:	d001      	beq.n	80153c8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80153c4:	f7eb fde8 	bl	8000f98 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80153c8:	bf00      	nop
 80153ca:	bd80      	pop	{r7, pc}
 80153cc:	20000108 	.word	0x20000108
 80153d0:	20009448 	.word	0x20009448
 80153d4:	2000001c 	.word	0x2000001c
 80153d8:	20000168 	.word	0x20000168

080153dc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80153dc:	b480      	push	{r7}
 80153de:	b083      	sub	sp, #12
 80153e0:	af00      	add	r7, sp, #0
 80153e2:	4603      	mov	r3, r0
 80153e4:	6039      	str	r1, [r7, #0]
 80153e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80153e8:	683b      	ldr	r3, [r7, #0]
 80153ea:	2212      	movs	r2, #18
 80153ec:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80153ee:	4b03      	ldr	r3, [pc, #12]	; (80153fc <USBD_FS_DeviceDescriptor+0x20>)
}
 80153f0:	4618      	mov	r0, r3
 80153f2:	370c      	adds	r7, #12
 80153f4:	46bd      	mov	sp, r7
 80153f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153fa:	4770      	bx	lr
 80153fc:	20000128 	.word	0x20000128

08015400 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015400:	b480      	push	{r7}
 8015402:	b083      	sub	sp, #12
 8015404:	af00      	add	r7, sp, #0
 8015406:	4603      	mov	r3, r0
 8015408:	6039      	str	r1, [r7, #0]
 801540a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801540c:	683b      	ldr	r3, [r7, #0]
 801540e:	2204      	movs	r2, #4
 8015410:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8015412:	4b03      	ldr	r3, [pc, #12]	; (8015420 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8015414:	4618      	mov	r0, r3
 8015416:	370c      	adds	r7, #12
 8015418:	46bd      	mov	sp, r7
 801541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801541e:	4770      	bx	lr
 8015420:	20000148 	.word	0x20000148

08015424 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015424:	b580      	push	{r7, lr}
 8015426:	b082      	sub	sp, #8
 8015428:	af00      	add	r7, sp, #0
 801542a:	4603      	mov	r3, r0
 801542c:	6039      	str	r1, [r7, #0]
 801542e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8015430:	79fb      	ldrb	r3, [r7, #7]
 8015432:	2b00      	cmp	r3, #0
 8015434:	d105      	bne.n	8015442 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8015436:	683a      	ldr	r2, [r7, #0]
 8015438:	4907      	ldr	r1, [pc, #28]	; (8015458 <USBD_FS_ProductStrDescriptor+0x34>)
 801543a:	4808      	ldr	r0, [pc, #32]	; (801545c <USBD_FS_ProductStrDescriptor+0x38>)
 801543c:	f7f7 fd81 	bl	800cf42 <USBD_GetString>
 8015440:	e004      	b.n	801544c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8015442:	683a      	ldr	r2, [r7, #0]
 8015444:	4904      	ldr	r1, [pc, #16]	; (8015458 <USBD_FS_ProductStrDescriptor+0x34>)
 8015446:	4805      	ldr	r0, [pc, #20]	; (801545c <USBD_FS_ProductStrDescriptor+0x38>)
 8015448:	f7f7 fd7b 	bl	800cf42 <USBD_GetString>
  }
  return USBD_StrDesc;
 801544c:	4b02      	ldr	r3, [pc, #8]	; (8015458 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801544e:	4618      	mov	r0, r3
 8015450:	3708      	adds	r7, #8
 8015452:	46bd      	mov	sp, r7
 8015454:	bd80      	pop	{r7, pc}
 8015456:	bf00      	nop
 8015458:	20009718 	.word	0x20009718
 801545c:	080160b4 	.word	0x080160b4

08015460 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015460:	b580      	push	{r7, lr}
 8015462:	b082      	sub	sp, #8
 8015464:	af00      	add	r7, sp, #0
 8015466:	4603      	mov	r3, r0
 8015468:	6039      	str	r1, [r7, #0]
 801546a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801546c:	683a      	ldr	r2, [r7, #0]
 801546e:	4904      	ldr	r1, [pc, #16]	; (8015480 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8015470:	4804      	ldr	r0, [pc, #16]	; (8015484 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8015472:	f7f7 fd66 	bl	800cf42 <USBD_GetString>
  return USBD_StrDesc;
 8015476:	4b02      	ldr	r3, [pc, #8]	; (8015480 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8015478:	4618      	mov	r0, r3
 801547a:	3708      	adds	r7, #8
 801547c:	46bd      	mov	sp, r7
 801547e:	bd80      	pop	{r7, pc}
 8015480:	20009718 	.word	0x20009718
 8015484:	080160c8 	.word	0x080160c8

08015488 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015488:	b580      	push	{r7, lr}
 801548a:	b082      	sub	sp, #8
 801548c:	af00      	add	r7, sp, #0
 801548e:	4603      	mov	r3, r0
 8015490:	6039      	str	r1, [r7, #0]
 8015492:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8015494:	683b      	ldr	r3, [r7, #0]
 8015496:	221a      	movs	r2, #26
 8015498:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801549a:	f000 f855 	bl	8015548 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801549e:	4b02      	ldr	r3, [pc, #8]	; (80154a8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80154a0:	4618      	mov	r0, r3
 80154a2:	3708      	adds	r7, #8
 80154a4:	46bd      	mov	sp, r7
 80154a6:	bd80      	pop	{r7, pc}
 80154a8:	2000014c 	.word	0x2000014c

080154ac <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80154ac:	b580      	push	{r7, lr}
 80154ae:	b082      	sub	sp, #8
 80154b0:	af00      	add	r7, sp, #0
 80154b2:	4603      	mov	r3, r0
 80154b4:	6039      	str	r1, [r7, #0]
 80154b6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80154b8:	79fb      	ldrb	r3, [r7, #7]
 80154ba:	2b00      	cmp	r3, #0
 80154bc:	d105      	bne.n	80154ca <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80154be:	683a      	ldr	r2, [r7, #0]
 80154c0:	4907      	ldr	r1, [pc, #28]	; (80154e0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80154c2:	4808      	ldr	r0, [pc, #32]	; (80154e4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80154c4:	f7f7 fd3d 	bl	800cf42 <USBD_GetString>
 80154c8:	e004      	b.n	80154d4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80154ca:	683a      	ldr	r2, [r7, #0]
 80154cc:	4904      	ldr	r1, [pc, #16]	; (80154e0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80154ce:	4805      	ldr	r0, [pc, #20]	; (80154e4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80154d0:	f7f7 fd37 	bl	800cf42 <USBD_GetString>
  }
  return USBD_StrDesc;
 80154d4:	4b02      	ldr	r3, [pc, #8]	; (80154e0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80154d6:	4618      	mov	r0, r3
 80154d8:	3708      	adds	r7, #8
 80154da:	46bd      	mov	sp, r7
 80154dc:	bd80      	pop	{r7, pc}
 80154de:	bf00      	nop
 80154e0:	20009718 	.word	0x20009718
 80154e4:	080160dc 	.word	0x080160dc

080154e8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80154e8:	b580      	push	{r7, lr}
 80154ea:	b082      	sub	sp, #8
 80154ec:	af00      	add	r7, sp, #0
 80154ee:	4603      	mov	r3, r0
 80154f0:	6039      	str	r1, [r7, #0]
 80154f2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80154f4:	79fb      	ldrb	r3, [r7, #7]
 80154f6:	2b00      	cmp	r3, #0
 80154f8:	d105      	bne.n	8015506 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80154fa:	683a      	ldr	r2, [r7, #0]
 80154fc:	4907      	ldr	r1, [pc, #28]	; (801551c <USBD_FS_InterfaceStrDescriptor+0x34>)
 80154fe:	4808      	ldr	r0, [pc, #32]	; (8015520 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8015500:	f7f7 fd1f 	bl	800cf42 <USBD_GetString>
 8015504:	e004      	b.n	8015510 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8015506:	683a      	ldr	r2, [r7, #0]
 8015508:	4904      	ldr	r1, [pc, #16]	; (801551c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801550a:	4805      	ldr	r0, [pc, #20]	; (8015520 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801550c:	f7f7 fd19 	bl	800cf42 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015510:	4b02      	ldr	r3, [pc, #8]	; (801551c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8015512:	4618      	mov	r0, r3
 8015514:	3708      	adds	r7, #8
 8015516:	46bd      	mov	sp, r7
 8015518:	bd80      	pop	{r7, pc}
 801551a:	bf00      	nop
 801551c:	20009718 	.word	0x20009718
 8015520:	080160e8 	.word	0x080160e8

08015524 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015524:	b480      	push	{r7}
 8015526:	b083      	sub	sp, #12
 8015528:	af00      	add	r7, sp, #0
 801552a:	4603      	mov	r3, r0
 801552c:	6039      	str	r1, [r7, #0]
 801552e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8015530:	683b      	ldr	r3, [r7, #0]
 8015532:	220c      	movs	r2, #12
 8015534:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8015536:	4b03      	ldr	r3, [pc, #12]	; (8015544 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8015538:	4618      	mov	r0, r3
 801553a:	370c      	adds	r7, #12
 801553c:	46bd      	mov	sp, r7
 801553e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015542:	4770      	bx	lr
 8015544:	2000013c 	.word	0x2000013c

08015548 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8015548:	b580      	push	{r7, lr}
 801554a:	b084      	sub	sp, #16
 801554c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801554e:	4b0f      	ldr	r3, [pc, #60]	; (801558c <Get_SerialNum+0x44>)
 8015550:	681b      	ldr	r3, [r3, #0]
 8015552:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8015554:	4b0e      	ldr	r3, [pc, #56]	; (8015590 <Get_SerialNum+0x48>)
 8015556:	681b      	ldr	r3, [r3, #0]
 8015558:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801555a:	4b0e      	ldr	r3, [pc, #56]	; (8015594 <Get_SerialNum+0x4c>)
 801555c:	681b      	ldr	r3, [r3, #0]
 801555e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8015560:	68fa      	ldr	r2, [r7, #12]
 8015562:	687b      	ldr	r3, [r7, #4]
 8015564:	4413      	add	r3, r2
 8015566:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8015568:	68fb      	ldr	r3, [r7, #12]
 801556a:	2b00      	cmp	r3, #0
 801556c:	d009      	beq.n	8015582 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801556e:	2208      	movs	r2, #8
 8015570:	4909      	ldr	r1, [pc, #36]	; (8015598 <Get_SerialNum+0x50>)
 8015572:	68f8      	ldr	r0, [r7, #12]
 8015574:	f000 f814 	bl	80155a0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8015578:	2204      	movs	r2, #4
 801557a:	4908      	ldr	r1, [pc, #32]	; (801559c <Get_SerialNum+0x54>)
 801557c:	68b8      	ldr	r0, [r7, #8]
 801557e:	f000 f80f 	bl	80155a0 <IntToUnicode>
  }
}
 8015582:	bf00      	nop
 8015584:	3710      	adds	r7, #16
 8015586:	46bd      	mov	sp, r7
 8015588:	bd80      	pop	{r7, pc}
 801558a:	bf00      	nop
 801558c:	1ff0f420 	.word	0x1ff0f420
 8015590:	1ff0f424 	.word	0x1ff0f424
 8015594:	1ff0f428 	.word	0x1ff0f428
 8015598:	2000014e 	.word	0x2000014e
 801559c:	2000015e 	.word	0x2000015e

080155a0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80155a0:	b480      	push	{r7}
 80155a2:	b087      	sub	sp, #28
 80155a4:	af00      	add	r7, sp, #0
 80155a6:	60f8      	str	r0, [r7, #12]
 80155a8:	60b9      	str	r1, [r7, #8]
 80155aa:	4613      	mov	r3, r2
 80155ac:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80155ae:	2300      	movs	r3, #0
 80155b0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80155b2:	2300      	movs	r3, #0
 80155b4:	75fb      	strb	r3, [r7, #23]
 80155b6:	e027      	b.n	8015608 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80155b8:	68fb      	ldr	r3, [r7, #12]
 80155ba:	0f1b      	lsrs	r3, r3, #28
 80155bc:	2b09      	cmp	r3, #9
 80155be:	d80b      	bhi.n	80155d8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80155c0:	68fb      	ldr	r3, [r7, #12]
 80155c2:	0f1b      	lsrs	r3, r3, #28
 80155c4:	b2da      	uxtb	r2, r3
 80155c6:	7dfb      	ldrb	r3, [r7, #23]
 80155c8:	005b      	lsls	r3, r3, #1
 80155ca:	4619      	mov	r1, r3
 80155cc:	68bb      	ldr	r3, [r7, #8]
 80155ce:	440b      	add	r3, r1
 80155d0:	3230      	adds	r2, #48	; 0x30
 80155d2:	b2d2      	uxtb	r2, r2
 80155d4:	701a      	strb	r2, [r3, #0]
 80155d6:	e00a      	b.n	80155ee <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80155d8:	68fb      	ldr	r3, [r7, #12]
 80155da:	0f1b      	lsrs	r3, r3, #28
 80155dc:	b2da      	uxtb	r2, r3
 80155de:	7dfb      	ldrb	r3, [r7, #23]
 80155e0:	005b      	lsls	r3, r3, #1
 80155e2:	4619      	mov	r1, r3
 80155e4:	68bb      	ldr	r3, [r7, #8]
 80155e6:	440b      	add	r3, r1
 80155e8:	3237      	adds	r2, #55	; 0x37
 80155ea:	b2d2      	uxtb	r2, r2
 80155ec:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80155ee:	68fb      	ldr	r3, [r7, #12]
 80155f0:	011b      	lsls	r3, r3, #4
 80155f2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80155f4:	7dfb      	ldrb	r3, [r7, #23]
 80155f6:	005b      	lsls	r3, r3, #1
 80155f8:	3301      	adds	r3, #1
 80155fa:	68ba      	ldr	r2, [r7, #8]
 80155fc:	4413      	add	r3, r2
 80155fe:	2200      	movs	r2, #0
 8015600:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8015602:	7dfb      	ldrb	r3, [r7, #23]
 8015604:	3301      	adds	r3, #1
 8015606:	75fb      	strb	r3, [r7, #23]
 8015608:	7dfa      	ldrb	r2, [r7, #23]
 801560a:	79fb      	ldrb	r3, [r7, #7]
 801560c:	429a      	cmp	r2, r3
 801560e:	d3d3      	bcc.n	80155b8 <IntToUnicode+0x18>
  }
}
 8015610:	bf00      	nop
 8015612:	371c      	adds	r7, #28
 8015614:	46bd      	mov	sp, r7
 8015616:	f85d 7b04 	ldr.w	r7, [sp], #4
 801561a:	4770      	bx	lr

0801561c <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 801561c:	b480      	push	{r7}
 801561e:	b083      	sub	sp, #12
 8015620:	af00      	add	r7, sp, #0
 8015622:	4603      	mov	r3, r0
 8015624:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 8015626:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8015628:	4618      	mov	r0, r3
 801562a:	370c      	adds	r7, #12
 801562c:	46bd      	mov	sp, r7
 801562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015632:	4770      	bx	lr

08015634 <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 8015634:	b580      	push	{r7, lr}
 8015636:	b084      	sub	sp, #16
 8015638:	af00      	add	r7, sp, #0
 801563a:	4603      	mov	r3, r0
 801563c:	60b9      	str	r1, [r7, #8]
 801563e:	607a      	str	r2, [r7, #4]
 8015640:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  if(HAL_SD_GetCardInfo(&hsd1,&SDCardInfo)==HAL_OK){
 8015642:	490b      	ldr	r1, [pc, #44]	; (8015670 <STORAGE_GetCapacity_FS+0x3c>)
 8015644:	480b      	ldr	r0, [pc, #44]	; (8015674 <STORAGE_GetCapacity_FS+0x40>)
 8015646:	f7f1 f88d 	bl	8006764 <HAL_SD_GetCardInfo>
 801564a:	4603      	mov	r3, r0
 801564c:	2b00      	cmp	r3, #0
 801564e:	d10a      	bne.n	8015666 <STORAGE_GetCapacity_FS+0x32>
  *block_num  = SDCardInfo.LogBlockNbr;
 8015650:	4b07      	ldr	r3, [pc, #28]	; (8015670 <STORAGE_GetCapacity_FS+0x3c>)
 8015652:	699a      	ldr	r2, [r3, #24]
 8015654:	68bb      	ldr	r3, [r7, #8]
 8015656:	601a      	str	r2, [r3, #0]
  *block_size = SDCardInfo.LogBlockSize;
 8015658:	4b05      	ldr	r3, [pc, #20]	; (8015670 <STORAGE_GetCapacity_FS+0x3c>)
 801565a:	69db      	ldr	r3, [r3, #28]
 801565c:	b29a      	uxth	r2, r3
 801565e:	687b      	ldr	r3, [r7, #4]
 8015660:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 8015662:	2300      	movs	r3, #0
 8015664:	e7ff      	b.n	8015666 <STORAGE_GetCapacity_FS+0x32>
  }
  /* USER CODE END 3 */
}
 8015666:	4618      	mov	r0, r3
 8015668:	3710      	adds	r7, #16
 801566a:	46bd      	mov	sp, r7
 801566c:	bd80      	pop	{r7, pc}
 801566e:	bf00      	nop
 8015670:	20004d10 	.word	0x20004d10
 8015674:	20004c8c 	.word	0x20004c8c

08015678 <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 8015678:	b480      	push	{r7}
 801567a:	b083      	sub	sp, #12
 801567c:	af00      	add	r7, sp, #0
 801567e:	4603      	mov	r3, r0
 8015680:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8015682:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8015684:	4618      	mov	r0, r3
 8015686:	370c      	adds	r7, #12
 8015688:	46bd      	mov	sp, r7
 801568a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801568e:	4770      	bx	lr

08015690 <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 8015690:	b480      	push	{r7}
 8015692:	b083      	sub	sp, #12
 8015694:	af00      	add	r7, sp, #0
 8015696:	4603      	mov	r3, r0
 8015698:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 801569a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801569c:	4618      	mov	r0, r3
 801569e:	370c      	adds	r7, #12
 80156a0:	46bd      	mov	sp, r7
 80156a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156a6:	4770      	bx	lr

080156a8 <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 80156a8:	b580      	push	{r7, lr}
 80156aa:	b086      	sub	sp, #24
 80156ac:	af02      	add	r7, sp, #8
 80156ae:	60b9      	str	r1, [r7, #8]
 80156b0:	607a      	str	r2, [r7, #4]
 80156b2:	461a      	mov	r2, r3
 80156b4:	4603      	mov	r3, r0
 80156b6:	73fb      	strb	r3, [r7, #15]
 80156b8:	4613      	mov	r3, r2
 80156ba:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
 if(HAL_SD_ReadBlocks(&hsd1,buf,blk_addr,blk_len,10)==HAL_OK){
 80156bc:	89ba      	ldrh	r2, [r7, #12]
 80156be:	230a      	movs	r3, #10
 80156c0:	9300      	str	r3, [sp, #0]
 80156c2:	4613      	mov	r3, r2
 80156c4:	687a      	ldr	r2, [r7, #4]
 80156c6:	68b9      	ldr	r1, [r7, #8]
 80156c8:	4805      	ldr	r0, [pc, #20]	; (80156e0 <STORAGE_Read_FS+0x38>)
 80156ca:	f7ef ffb5 	bl	8005638 <HAL_SD_ReadBlocks>
 80156ce:	4603      	mov	r3, r0
 80156d0:	2b00      	cmp	r3, #0
 80156d2:	d101      	bne.n	80156d8 <STORAGE_Read_FS+0x30>

  return (USBD_OK);
 80156d4:	2300      	movs	r3, #0
 80156d6:	e7ff      	b.n	80156d8 <STORAGE_Read_FS+0x30>
 }
  /* USER CODE END 6 */
}
 80156d8:	4618      	mov	r0, r3
 80156da:	3710      	adds	r7, #16
 80156dc:	46bd      	mov	sp, r7
 80156de:	bd80      	pop	{r7, pc}
 80156e0:	20004c8c 	.word	0x20004c8c

080156e4 <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 80156e4:	b580      	push	{r7, lr}
 80156e6:	b086      	sub	sp, #24
 80156e8:	af02      	add	r7, sp, #8
 80156ea:	60b9      	str	r1, [r7, #8]
 80156ec:	607a      	str	r2, [r7, #4]
 80156ee:	461a      	mov	r2, r3
 80156f0:	4603      	mov	r3, r0
 80156f2:	73fb      	strb	r3, [r7, #15]
 80156f4:	4613      	mov	r3, r2
 80156f6:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
	if(HAL_SD_WriteBlocks(&hsd1,buf,blk_addr,blk_len,10)==HAL_OK){
 80156f8:	89ba      	ldrh	r2, [r7, #12]
 80156fa:	230a      	movs	r3, #10
 80156fc:	9300      	str	r3, [sp, #0]
 80156fe:	4613      	mov	r3, r2
 8015700:	687a      	ldr	r2, [r7, #4]
 8015702:	68b9      	ldr	r1, [r7, #8]
 8015704:	4805      	ldr	r0, [pc, #20]	; (801571c <STORAGE_Write_FS+0x38>)
 8015706:	f7f0 f98f 	bl	8005a28 <HAL_SD_WriteBlocks>
 801570a:	4603      	mov	r3, r0
 801570c:	2b00      	cmp	r3, #0
 801570e:	d101      	bne.n	8015714 <STORAGE_Write_FS+0x30>

	  return (USBD_OK);
 8015710:	2300      	movs	r3, #0
 8015712:	e7ff      	b.n	8015714 <STORAGE_Write_FS+0x30>
	 }
  /* USER CODE END 7 */
}
 8015714:	4618      	mov	r0, r3
 8015716:	3710      	adds	r7, #16
 8015718:	46bd      	mov	sp, r7
 801571a:	bd80      	pop	{r7, pc}
 801571c:	20004c8c 	.word	0x20004c8c

08015720 <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 8015720:	b480      	push	{r7}
 8015722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 8015724:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8015726:	4618      	mov	r0, r3
 8015728:	46bd      	mov	sp, r7
 801572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801572e:	4770      	bx	lr

08015730 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8015730:	b580      	push	{r7, lr}
 8015732:	b08a      	sub	sp, #40	; 0x28
 8015734:	af00      	add	r7, sp, #0
 8015736:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015738:	f107 0314 	add.w	r3, r7, #20
 801573c:	2200      	movs	r2, #0
 801573e:	601a      	str	r2, [r3, #0]
 8015740:	605a      	str	r2, [r3, #4]
 8015742:	609a      	str	r2, [r3, #8]
 8015744:	60da      	str	r2, [r3, #12]
 8015746:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8015748:	687b      	ldr	r3, [r7, #4]
 801574a:	681b      	ldr	r3, [r3, #0]
 801574c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8015750:	d13c      	bne.n	80157cc <HAL_PCD_MspInit+0x9c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8015752:	4b20      	ldr	r3, [pc, #128]	; (80157d4 <HAL_PCD_MspInit+0xa4>)
 8015754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015756:	4a1f      	ldr	r2, [pc, #124]	; (80157d4 <HAL_PCD_MspInit+0xa4>)
 8015758:	f043 0301 	orr.w	r3, r3, #1
 801575c:	6313      	str	r3, [r2, #48]	; 0x30
 801575e:	4b1d      	ldr	r3, [pc, #116]	; (80157d4 <HAL_PCD_MspInit+0xa4>)
 8015760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015762:	f003 0301 	and.w	r3, r3, #1
 8015766:	613b      	str	r3, [r7, #16]
 8015768:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_DM_Pin|USB_DP_Pin;
 801576a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801576e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015770:	2302      	movs	r3, #2
 8015772:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015774:	2300      	movs	r3, #0
 8015776:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015778:	2303      	movs	r3, #3
 801577a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801577c:	230a      	movs	r3, #10
 801577e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8015780:	f107 0314 	add.w	r3, r7, #20
 8015784:	4619      	mov	r1, r3
 8015786:	4814      	ldr	r0, [pc, #80]	; (80157d8 <HAL_PCD_MspInit+0xa8>)
 8015788:	f7ed f980 	bl	8002a8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801578c:	4b11      	ldr	r3, [pc, #68]	; (80157d4 <HAL_PCD_MspInit+0xa4>)
 801578e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015790:	4a10      	ldr	r2, [pc, #64]	; (80157d4 <HAL_PCD_MspInit+0xa4>)
 8015792:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015796:	6353      	str	r3, [r2, #52]	; 0x34
 8015798:	4b0e      	ldr	r3, [pc, #56]	; (80157d4 <HAL_PCD_MspInit+0xa4>)
 801579a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801579c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80157a0:	60fb      	str	r3, [r7, #12]
 80157a2:	68fb      	ldr	r3, [r7, #12]
 80157a4:	4b0b      	ldr	r3, [pc, #44]	; (80157d4 <HAL_PCD_MspInit+0xa4>)
 80157a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80157a8:	4a0a      	ldr	r2, [pc, #40]	; (80157d4 <HAL_PCD_MspInit+0xa4>)
 80157aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80157ae:	6453      	str	r3, [r2, #68]	; 0x44
 80157b0:	4b08      	ldr	r3, [pc, #32]	; (80157d4 <HAL_PCD_MspInit+0xa4>)
 80157b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80157b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80157b8:	60bb      	str	r3, [r7, #8]
 80157ba:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 9, 0);
 80157bc:	2200      	movs	r2, #0
 80157be:	2109      	movs	r1, #9
 80157c0:	2043      	movs	r0, #67	; 0x43
 80157c2:	f7ec fd95 	bl	80022f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80157c6:	2043      	movs	r0, #67	; 0x43
 80157c8:	f7ec fdae 	bl	8002328 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80157cc:	bf00      	nop
 80157ce:	3728      	adds	r7, #40	; 0x28
 80157d0:	46bd      	mov	sp, r7
 80157d2:	bd80      	pop	{r7, pc}
 80157d4:	40023800 	.word	0x40023800
 80157d8:	40020000 	.word	0x40020000

080157dc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80157dc:	b580      	push	{r7, lr}
 80157de:	b082      	sub	sp, #8
 80157e0:	af00      	add	r7, sp, #0
 80157e2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80157e4:	687b      	ldr	r3, [r7, #4]
 80157e6:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80157ea:	687b      	ldr	r3, [r7, #4]
 80157ec:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80157f0:	4619      	mov	r1, r3
 80157f2:	4610      	mov	r0, r2
 80157f4:	f7f6 fbf9 	bl	800bfea <USBD_LL_SetupStage>
}
 80157f8:	bf00      	nop
 80157fa:	3708      	adds	r7, #8
 80157fc:	46bd      	mov	sp, r7
 80157fe:	bd80      	pop	{r7, pc}

08015800 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015800:	b580      	push	{r7, lr}
 8015802:	b082      	sub	sp, #8
 8015804:	af00      	add	r7, sp, #0
 8015806:	6078      	str	r0, [r7, #4]
 8015808:	460b      	mov	r3, r1
 801580a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801580c:	687b      	ldr	r3, [r7, #4]
 801580e:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
 8015812:	78fa      	ldrb	r2, [r7, #3]
 8015814:	6879      	ldr	r1, [r7, #4]
 8015816:	4613      	mov	r3, r2
 8015818:	00db      	lsls	r3, r3, #3
 801581a:	1a9b      	subs	r3, r3, r2
 801581c:	009b      	lsls	r3, r3, #2
 801581e:	440b      	add	r3, r1
 8015820:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8015824:	681a      	ldr	r2, [r3, #0]
 8015826:	78fb      	ldrb	r3, [r7, #3]
 8015828:	4619      	mov	r1, r3
 801582a:	f7f6 fc31 	bl	800c090 <USBD_LL_DataOutStage>
}
 801582e:	bf00      	nop
 8015830:	3708      	adds	r7, #8
 8015832:	46bd      	mov	sp, r7
 8015834:	bd80      	pop	{r7, pc}

08015836 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015836:	b580      	push	{r7, lr}
 8015838:	b082      	sub	sp, #8
 801583a:	af00      	add	r7, sp, #0
 801583c:	6078      	str	r0, [r7, #4]
 801583e:	460b      	mov	r3, r1
 8015840:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8015842:	687b      	ldr	r3, [r7, #4]
 8015844:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
 8015848:	78fa      	ldrb	r2, [r7, #3]
 801584a:	6879      	ldr	r1, [r7, #4]
 801584c:	4613      	mov	r3, r2
 801584e:	00db      	lsls	r3, r3, #3
 8015850:	1a9b      	subs	r3, r3, r2
 8015852:	009b      	lsls	r3, r3, #2
 8015854:	440b      	add	r3, r1
 8015856:	3348      	adds	r3, #72	; 0x48
 8015858:	681a      	ldr	r2, [r3, #0]
 801585a:	78fb      	ldrb	r3, [r7, #3]
 801585c:	4619      	mov	r1, r3
 801585e:	f7f6 fc7a 	bl	800c156 <USBD_LL_DataInStage>
}
 8015862:	bf00      	nop
 8015864:	3708      	adds	r7, #8
 8015866:	46bd      	mov	sp, r7
 8015868:	bd80      	pop	{r7, pc}

0801586a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801586a:	b580      	push	{r7, lr}
 801586c:	b082      	sub	sp, #8
 801586e:	af00      	add	r7, sp, #0
 8015870:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8015872:	687b      	ldr	r3, [r7, #4]
 8015874:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8015878:	4618      	mov	r0, r3
 801587a:	f7f6 fd7e 	bl	800c37a <USBD_LL_SOF>
}
 801587e:	bf00      	nop
 8015880:	3708      	adds	r7, #8
 8015882:	46bd      	mov	sp, r7
 8015884:	bd80      	pop	{r7, pc}

08015886 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8015886:	b580      	push	{r7, lr}
 8015888:	b084      	sub	sp, #16
 801588a:	af00      	add	r7, sp, #0
 801588c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801588e:	2301      	movs	r3, #1
 8015890:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8015892:	687b      	ldr	r3, [r7, #4]
 8015894:	68db      	ldr	r3, [r3, #12]
 8015896:	2b00      	cmp	r3, #0
 8015898:	d102      	bne.n	80158a0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801589a:	2300      	movs	r3, #0
 801589c:	73fb      	strb	r3, [r7, #15]
 801589e:	e008      	b.n	80158b2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80158a0:	687b      	ldr	r3, [r7, #4]
 80158a2:	68db      	ldr	r3, [r3, #12]
 80158a4:	2b02      	cmp	r3, #2
 80158a6:	d102      	bne.n	80158ae <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80158a8:	2301      	movs	r3, #1
 80158aa:	73fb      	strb	r3, [r7, #15]
 80158ac:	e001      	b.n	80158b2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80158ae:	f7eb fb73 	bl	8000f98 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80158b2:	687b      	ldr	r3, [r7, #4]
 80158b4:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80158b8:	7bfa      	ldrb	r2, [r7, #15]
 80158ba:	4611      	mov	r1, r2
 80158bc:	4618      	mov	r0, r3
 80158be:	f7f6 fd21 	bl	800c304 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80158c2:	687b      	ldr	r3, [r7, #4]
 80158c4:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80158c8:	4618      	mov	r0, r3
 80158ca:	f7f6 fcda 	bl	800c282 <USBD_LL_Reset>
}
 80158ce:	bf00      	nop
 80158d0:	3710      	adds	r7, #16
 80158d2:	46bd      	mov	sp, r7
 80158d4:	bd80      	pop	{r7, pc}
	...

080158d8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80158d8:	b580      	push	{r7, lr}
 80158da:	b082      	sub	sp, #8
 80158dc:	af00      	add	r7, sp, #0
 80158de:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80158e0:	687b      	ldr	r3, [r7, #4]
 80158e2:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80158e6:	4618      	mov	r0, r3
 80158e8:	f7f6 fd1c 	bl	800c324 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80158ec:	687b      	ldr	r3, [r7, #4]
 80158ee:	681b      	ldr	r3, [r3, #0]
 80158f0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80158f4:	681b      	ldr	r3, [r3, #0]
 80158f6:	687a      	ldr	r2, [r7, #4]
 80158f8:	6812      	ldr	r2, [r2, #0]
 80158fa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80158fe:	f043 0301 	orr.w	r3, r3, #1
 8015902:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8015904:	687b      	ldr	r3, [r7, #4]
 8015906:	6a1b      	ldr	r3, [r3, #32]
 8015908:	2b00      	cmp	r3, #0
 801590a:	d005      	beq.n	8015918 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801590c:	4b04      	ldr	r3, [pc, #16]	; (8015920 <HAL_PCD_SuspendCallback+0x48>)
 801590e:	691b      	ldr	r3, [r3, #16]
 8015910:	4a03      	ldr	r2, [pc, #12]	; (8015920 <HAL_PCD_SuspendCallback+0x48>)
 8015912:	f043 0306 	orr.w	r3, r3, #6
 8015916:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8015918:	bf00      	nop
 801591a:	3708      	adds	r7, #8
 801591c:	46bd      	mov	sp, r7
 801591e:	bd80      	pop	{r7, pc}
 8015920:	e000ed00 	.word	0xe000ed00

08015924 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015924:	b580      	push	{r7, lr}
 8015926:	b082      	sub	sp, #8
 8015928:	af00      	add	r7, sp, #0
 801592a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801592c:	687b      	ldr	r3, [r7, #4]
 801592e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8015932:	4618      	mov	r0, r3
 8015934:	f7f6 fd0b 	bl	800c34e <USBD_LL_Resume>
}
 8015938:	bf00      	nop
 801593a:	3708      	adds	r7, #8
 801593c:	46bd      	mov	sp, r7
 801593e:	bd80      	pop	{r7, pc}

08015940 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015940:	b580      	push	{r7, lr}
 8015942:	b082      	sub	sp, #8
 8015944:	af00      	add	r7, sp, #0
 8015946:	6078      	str	r0, [r7, #4]
 8015948:	460b      	mov	r3, r1
 801594a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801594c:	687b      	ldr	r3, [r7, #4]
 801594e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8015952:	78fa      	ldrb	r2, [r7, #3]
 8015954:	4611      	mov	r1, r2
 8015956:	4618      	mov	r0, r3
 8015958:	f7f6 fd36 	bl	800c3c8 <USBD_LL_IsoOUTIncomplete>
}
 801595c:	bf00      	nop
 801595e:	3708      	adds	r7, #8
 8015960:	46bd      	mov	sp, r7
 8015962:	bd80      	pop	{r7, pc}

08015964 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015964:	b580      	push	{r7, lr}
 8015966:	b082      	sub	sp, #8
 8015968:	af00      	add	r7, sp, #0
 801596a:	6078      	str	r0, [r7, #4]
 801596c:	460b      	mov	r3, r1
 801596e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8015970:	687b      	ldr	r3, [r7, #4]
 8015972:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8015976:	78fa      	ldrb	r2, [r7, #3]
 8015978:	4611      	mov	r1, r2
 801597a:	4618      	mov	r0, r3
 801597c:	f7f6 fd17 	bl	800c3ae <USBD_LL_IsoINIncomplete>
}
 8015980:	bf00      	nop
 8015982:	3708      	adds	r7, #8
 8015984:	46bd      	mov	sp, r7
 8015986:	bd80      	pop	{r7, pc}

08015988 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015988:	b580      	push	{r7, lr}
 801598a:	b082      	sub	sp, #8
 801598c:	af00      	add	r7, sp, #0
 801598e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8015990:	687b      	ldr	r3, [r7, #4]
 8015992:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8015996:	4618      	mov	r0, r3
 8015998:	f7f6 fd23 	bl	800c3e2 <USBD_LL_DevConnected>
}
 801599c:	bf00      	nop
 801599e:	3708      	adds	r7, #8
 80159a0:	46bd      	mov	sp, r7
 80159a2:	bd80      	pop	{r7, pc}

080159a4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80159a4:	b580      	push	{r7, lr}
 80159a6:	b082      	sub	sp, #8
 80159a8:	af00      	add	r7, sp, #0
 80159aa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80159ac:	687b      	ldr	r3, [r7, #4]
 80159ae:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80159b2:	4618      	mov	r0, r3
 80159b4:	f7f6 fd20 	bl	800c3f8 <USBD_LL_DevDisconnected>
}
 80159b8:	bf00      	nop
 80159ba:	3708      	adds	r7, #8
 80159bc:	46bd      	mov	sp, r7
 80159be:	bd80      	pop	{r7, pc}

080159c0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80159c0:	b580      	push	{r7, lr}
 80159c2:	b082      	sub	sp, #8
 80159c4:	af00      	add	r7, sp, #0
 80159c6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80159c8:	687b      	ldr	r3, [r7, #4]
 80159ca:	781b      	ldrb	r3, [r3, #0]
 80159cc:	2b00      	cmp	r3, #0
 80159ce:	d13c      	bne.n	8015a4a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80159d0:	4a20      	ldr	r2, [pc, #128]	; (8015a54 <USBD_LL_Init+0x94>)
 80159d2:	687b      	ldr	r3, [r7, #4]
 80159d4:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
  pdev->pData = &hpcd_USB_OTG_FS;
 80159d8:	687b      	ldr	r3, [r7, #4]
 80159da:	4a1e      	ldr	r2, [pc, #120]	; (8015a54 <USBD_LL_Init+0x94>)
 80159dc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80159e0:	4b1c      	ldr	r3, [pc, #112]	; (8015a54 <USBD_LL_Init+0x94>)
 80159e2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80159e6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80159e8:	4b1a      	ldr	r3, [pc, #104]	; (8015a54 <USBD_LL_Init+0x94>)
 80159ea:	2206      	movs	r2, #6
 80159ec:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80159ee:	4b19      	ldr	r3, [pc, #100]	; (8015a54 <USBD_LL_Init+0x94>)
 80159f0:	2202      	movs	r2, #2
 80159f2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80159f4:	4b17      	ldr	r3, [pc, #92]	; (8015a54 <USBD_LL_Init+0x94>)
 80159f6:	2200      	movs	r2, #0
 80159f8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80159fa:	4b16      	ldr	r3, [pc, #88]	; (8015a54 <USBD_LL_Init+0x94>)
 80159fc:	2202      	movs	r2, #2
 80159fe:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8015a00:	4b14      	ldr	r3, [pc, #80]	; (8015a54 <USBD_LL_Init+0x94>)
 8015a02:	2200      	movs	r2, #0
 8015a04:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8015a06:	4b13      	ldr	r3, [pc, #76]	; (8015a54 <USBD_LL_Init+0x94>)
 8015a08:	2200      	movs	r2, #0
 8015a0a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8015a0c:	4b11      	ldr	r3, [pc, #68]	; (8015a54 <USBD_LL_Init+0x94>)
 8015a0e:	2200      	movs	r2, #0
 8015a10:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8015a12:	4b10      	ldr	r3, [pc, #64]	; (8015a54 <USBD_LL_Init+0x94>)
 8015a14:	2200      	movs	r2, #0
 8015a16:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8015a18:	4b0e      	ldr	r3, [pc, #56]	; (8015a54 <USBD_LL_Init+0x94>)
 8015a1a:	2200      	movs	r2, #0
 8015a1c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8015a1e:	480d      	ldr	r0, [pc, #52]	; (8015a54 <USBD_LL_Init+0x94>)
 8015a20:	f7ed fa29 	bl	8002e76 <HAL_PCD_Init>
 8015a24:	4603      	mov	r3, r0
 8015a26:	2b00      	cmp	r3, #0
 8015a28:	d001      	beq.n	8015a2e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8015a2a:	f7eb fab5 	bl	8000f98 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8015a2e:	2180      	movs	r1, #128	; 0x80
 8015a30:	4808      	ldr	r0, [pc, #32]	; (8015a54 <USBD_LL_Init+0x94>)
 8015a32:	f7ee fbd6 	bl	80041e2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8015a36:	2240      	movs	r2, #64	; 0x40
 8015a38:	2100      	movs	r1, #0
 8015a3a:	4806      	ldr	r0, [pc, #24]	; (8015a54 <USBD_LL_Init+0x94>)
 8015a3c:	f7ee fb8a 	bl	8004154 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8015a40:	2280      	movs	r2, #128	; 0x80
 8015a42:	2101      	movs	r1, #1
 8015a44:	4803      	ldr	r0, [pc, #12]	; (8015a54 <USBD_LL_Init+0x94>)
 8015a46:	f7ee fb85 	bl	8004154 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8015a4a:	2300      	movs	r3, #0
}
 8015a4c:	4618      	mov	r0, r3
 8015a4e:	3708      	adds	r7, #8
 8015a50:	46bd      	mov	sp, r7
 8015a52:	bd80      	pop	{r7, pc}
 8015a54:	20009918 	.word	0x20009918

08015a58 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8015a58:	b580      	push	{r7, lr}
 8015a5a:	b084      	sub	sp, #16
 8015a5c:	af00      	add	r7, sp, #0
 8015a5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015a60:	2300      	movs	r3, #0
 8015a62:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015a64:	2300      	movs	r3, #0
 8015a66:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8015a68:	687b      	ldr	r3, [r7, #4]
 8015a6a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015a6e:	4618      	mov	r0, r3
 8015a70:	f7ed fb25 	bl	80030be <HAL_PCD_Start>
 8015a74:	4603      	mov	r3, r0
 8015a76:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 8015a78:	7bfb      	ldrb	r3, [r7, #15]
 8015a7a:	4618      	mov	r0, r3
 8015a7c:	f000 f99e 	bl	8015dbc <USBD_Get_USB_Status>
 8015a80:	4603      	mov	r3, r0
 8015a82:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8015a84:	7bbb      	ldrb	r3, [r7, #14]
}
 8015a86:	4618      	mov	r0, r3
 8015a88:	3710      	adds	r7, #16
 8015a8a:	46bd      	mov	sp, r7
 8015a8c:	bd80      	pop	{r7, pc}

08015a8e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8015a8e:	b580      	push	{r7, lr}
 8015a90:	b084      	sub	sp, #16
 8015a92:	af00      	add	r7, sp, #0
 8015a94:	6078      	str	r0, [r7, #4]
 8015a96:	4608      	mov	r0, r1
 8015a98:	4611      	mov	r1, r2
 8015a9a:	461a      	mov	r2, r3
 8015a9c:	4603      	mov	r3, r0
 8015a9e:	70fb      	strb	r3, [r7, #3]
 8015aa0:	460b      	mov	r3, r1
 8015aa2:	70bb      	strb	r3, [r7, #2]
 8015aa4:	4613      	mov	r3, r2
 8015aa6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015aa8:	2300      	movs	r3, #0
 8015aaa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015aac:	2300      	movs	r3, #0
 8015aae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8015ab0:	687b      	ldr	r3, [r7, #4]
 8015ab2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015ab6:	78bb      	ldrb	r3, [r7, #2]
 8015ab8:	883a      	ldrh	r2, [r7, #0]
 8015aba:	78f9      	ldrb	r1, [r7, #3]
 8015abc:	f7ed ff25 	bl	800390a <HAL_PCD_EP_Open>
 8015ac0:	4603      	mov	r3, r0
 8015ac2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015ac4:	7bfb      	ldrb	r3, [r7, #15]
 8015ac6:	4618      	mov	r0, r3
 8015ac8:	f000 f978 	bl	8015dbc <USBD_Get_USB_Status>
 8015acc:	4603      	mov	r3, r0
 8015ace:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8015ad0:	7bbb      	ldrb	r3, [r7, #14]
}
 8015ad2:	4618      	mov	r0, r3
 8015ad4:	3710      	adds	r7, #16
 8015ad6:	46bd      	mov	sp, r7
 8015ad8:	bd80      	pop	{r7, pc}

08015ada <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015ada:	b580      	push	{r7, lr}
 8015adc:	b084      	sub	sp, #16
 8015ade:	af00      	add	r7, sp, #0
 8015ae0:	6078      	str	r0, [r7, #4]
 8015ae2:	460b      	mov	r3, r1
 8015ae4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015ae6:	2300      	movs	r3, #0
 8015ae8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015aea:	2300      	movs	r3, #0
 8015aec:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8015aee:	687b      	ldr	r3, [r7, #4]
 8015af0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015af4:	78fa      	ldrb	r2, [r7, #3]
 8015af6:	4611      	mov	r1, r2
 8015af8:	4618      	mov	r0, r3
 8015afa:	f7ed ff6e 	bl	80039da <HAL_PCD_EP_Close>
 8015afe:	4603      	mov	r3, r0
 8015b00:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 8015b02:	7bfb      	ldrb	r3, [r7, #15]
 8015b04:	4618      	mov	r0, r3
 8015b06:	f000 f959 	bl	8015dbc <USBD_Get_USB_Status>
 8015b0a:	4603      	mov	r3, r0
 8015b0c:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8015b0e:	7bbb      	ldrb	r3, [r7, #14]
}
 8015b10:	4618      	mov	r0, r3
 8015b12:	3710      	adds	r7, #16
 8015b14:	46bd      	mov	sp, r7
 8015b16:	bd80      	pop	{r7, pc}

08015b18 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015b18:	b580      	push	{r7, lr}
 8015b1a:	b084      	sub	sp, #16
 8015b1c:	af00      	add	r7, sp, #0
 8015b1e:	6078      	str	r0, [r7, #4]
 8015b20:	460b      	mov	r3, r1
 8015b22:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015b24:	2300      	movs	r3, #0
 8015b26:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015b28:	2300      	movs	r3, #0
 8015b2a:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 8015b2c:	687b      	ldr	r3, [r7, #4]
 8015b2e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015b32:	78fa      	ldrb	r2, [r7, #3]
 8015b34:	4611      	mov	r1, r2
 8015b36:	4618      	mov	r0, r3
 8015b38:	f7ee f900 	bl	8003d3c <HAL_PCD_EP_Flush>
 8015b3c:	4603      	mov	r3, r0
 8015b3e:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 8015b40:	7bfb      	ldrb	r3, [r7, #15]
 8015b42:	4618      	mov	r0, r3
 8015b44:	f000 f93a 	bl	8015dbc <USBD_Get_USB_Status>
 8015b48:	4603      	mov	r3, r0
 8015b4a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8015b4c:	7bbb      	ldrb	r3, [r7, #14]
}
 8015b4e:	4618      	mov	r0, r3
 8015b50:	3710      	adds	r7, #16
 8015b52:	46bd      	mov	sp, r7
 8015b54:	bd80      	pop	{r7, pc}

08015b56 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015b56:	b580      	push	{r7, lr}
 8015b58:	b084      	sub	sp, #16
 8015b5a:	af00      	add	r7, sp, #0
 8015b5c:	6078      	str	r0, [r7, #4]
 8015b5e:	460b      	mov	r3, r1
 8015b60:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015b62:	2300      	movs	r3, #0
 8015b64:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015b66:	2300      	movs	r3, #0
 8015b68:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8015b6a:	687b      	ldr	r3, [r7, #4]
 8015b6c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015b70:	78fa      	ldrb	r2, [r7, #3]
 8015b72:	4611      	mov	r1, r2
 8015b74:	4618      	mov	r0, r3
 8015b76:	f7ee f827 	bl	8003bc8 <HAL_PCD_EP_SetStall>
 8015b7a:	4603      	mov	r3, r0
 8015b7c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015b7e:	7bfb      	ldrb	r3, [r7, #15]
 8015b80:	4618      	mov	r0, r3
 8015b82:	f000 f91b 	bl	8015dbc <USBD_Get_USB_Status>
 8015b86:	4603      	mov	r3, r0
 8015b88:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8015b8a:	7bbb      	ldrb	r3, [r7, #14]
}
 8015b8c:	4618      	mov	r0, r3
 8015b8e:	3710      	adds	r7, #16
 8015b90:	46bd      	mov	sp, r7
 8015b92:	bd80      	pop	{r7, pc}

08015b94 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015b94:	b580      	push	{r7, lr}
 8015b96:	b084      	sub	sp, #16
 8015b98:	af00      	add	r7, sp, #0
 8015b9a:	6078      	str	r0, [r7, #4]
 8015b9c:	460b      	mov	r3, r1
 8015b9e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015ba0:	2300      	movs	r3, #0
 8015ba2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015ba4:	2300      	movs	r3, #0
 8015ba6:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8015ba8:	687b      	ldr	r3, [r7, #4]
 8015baa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015bae:	78fa      	ldrb	r2, [r7, #3]
 8015bb0:	4611      	mov	r1, r2
 8015bb2:	4618      	mov	r0, r3
 8015bb4:	f7ee f86c 	bl	8003c90 <HAL_PCD_EP_ClrStall>
 8015bb8:	4603      	mov	r3, r0
 8015bba:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 8015bbc:	7bfb      	ldrb	r3, [r7, #15]
 8015bbe:	4618      	mov	r0, r3
 8015bc0:	f000 f8fc 	bl	8015dbc <USBD_Get_USB_Status>
 8015bc4:	4603      	mov	r3, r0
 8015bc6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 8015bc8:	7bbb      	ldrb	r3, [r7, #14]
}
 8015bca:	4618      	mov	r0, r3
 8015bcc:	3710      	adds	r7, #16
 8015bce:	46bd      	mov	sp, r7
 8015bd0:	bd80      	pop	{r7, pc}

08015bd2 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015bd2:	b480      	push	{r7}
 8015bd4:	b085      	sub	sp, #20
 8015bd6:	af00      	add	r7, sp, #0
 8015bd8:	6078      	str	r0, [r7, #4]
 8015bda:	460b      	mov	r3, r1
 8015bdc:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8015bde:	687b      	ldr	r3, [r7, #4]
 8015be0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015be4:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8015be6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8015bea:	2b00      	cmp	r3, #0
 8015bec:	da0b      	bge.n	8015c06 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8015bee:	78fb      	ldrb	r3, [r7, #3]
 8015bf0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015bf4:	68f9      	ldr	r1, [r7, #12]
 8015bf6:	4613      	mov	r3, r2
 8015bf8:	00db      	lsls	r3, r3, #3
 8015bfa:	1a9b      	subs	r3, r3, r2
 8015bfc:	009b      	lsls	r3, r3, #2
 8015bfe:	440b      	add	r3, r1
 8015c00:	333e      	adds	r3, #62	; 0x3e
 8015c02:	781b      	ldrb	r3, [r3, #0]
 8015c04:	e00b      	b.n	8015c1e <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8015c06:	78fb      	ldrb	r3, [r7, #3]
 8015c08:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015c0c:	68f9      	ldr	r1, [r7, #12]
 8015c0e:	4613      	mov	r3, r2
 8015c10:	00db      	lsls	r3, r3, #3
 8015c12:	1a9b      	subs	r3, r3, r2
 8015c14:	009b      	lsls	r3, r3, #2
 8015c16:	440b      	add	r3, r1
 8015c18:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8015c1c:	781b      	ldrb	r3, [r3, #0]
  }
}
 8015c1e:	4618      	mov	r0, r3
 8015c20:	3714      	adds	r7, #20
 8015c22:	46bd      	mov	sp, r7
 8015c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c28:	4770      	bx	lr

08015c2a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8015c2a:	b580      	push	{r7, lr}
 8015c2c:	b084      	sub	sp, #16
 8015c2e:	af00      	add	r7, sp, #0
 8015c30:	6078      	str	r0, [r7, #4]
 8015c32:	460b      	mov	r3, r1
 8015c34:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015c36:	2300      	movs	r3, #0
 8015c38:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015c3a:	2300      	movs	r3, #0
 8015c3c:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8015c3e:	687b      	ldr	r3, [r7, #4]
 8015c40:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015c44:	78fa      	ldrb	r2, [r7, #3]
 8015c46:	4611      	mov	r1, r2
 8015c48:	4618      	mov	r0, r3
 8015c4a:	f7ed fe39 	bl	80038c0 <HAL_PCD_SetAddress>
 8015c4e:	4603      	mov	r3, r0
 8015c50:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 8015c52:	7bfb      	ldrb	r3, [r7, #15]
 8015c54:	4618      	mov	r0, r3
 8015c56:	f000 f8b1 	bl	8015dbc <USBD_Get_USB_Status>
 8015c5a:	4603      	mov	r3, r0
 8015c5c:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8015c5e:	7bbb      	ldrb	r3, [r7, #14]
}
 8015c60:	4618      	mov	r0, r3
 8015c62:	3710      	adds	r7, #16
 8015c64:	46bd      	mov	sp, r7
 8015c66:	bd80      	pop	{r7, pc}

08015c68 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8015c68:	b580      	push	{r7, lr}
 8015c6a:	b086      	sub	sp, #24
 8015c6c:	af00      	add	r7, sp, #0
 8015c6e:	60f8      	str	r0, [r7, #12]
 8015c70:	607a      	str	r2, [r7, #4]
 8015c72:	603b      	str	r3, [r7, #0]
 8015c74:	460b      	mov	r3, r1
 8015c76:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015c78:	2300      	movs	r3, #0
 8015c7a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015c7c:	2300      	movs	r3, #0
 8015c7e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8015c80:	68fb      	ldr	r3, [r7, #12]
 8015c82:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015c86:	7af9      	ldrb	r1, [r7, #11]
 8015c88:	683b      	ldr	r3, [r7, #0]
 8015c8a:	687a      	ldr	r2, [r7, #4]
 8015c8c:	f7ed ff52 	bl	8003b34 <HAL_PCD_EP_Transmit>
 8015c90:	4603      	mov	r3, r0
 8015c92:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 8015c94:	7dfb      	ldrb	r3, [r7, #23]
 8015c96:	4618      	mov	r0, r3
 8015c98:	f000 f890 	bl	8015dbc <USBD_Get_USB_Status>
 8015c9c:	4603      	mov	r3, r0
 8015c9e:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8015ca0:	7dbb      	ldrb	r3, [r7, #22]
}
 8015ca2:	4618      	mov	r0, r3
 8015ca4:	3718      	adds	r7, #24
 8015ca6:	46bd      	mov	sp, r7
 8015ca8:	bd80      	pop	{r7, pc}

08015caa <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8015caa:	b580      	push	{r7, lr}
 8015cac:	b086      	sub	sp, #24
 8015cae:	af00      	add	r7, sp, #0
 8015cb0:	60f8      	str	r0, [r7, #12]
 8015cb2:	607a      	str	r2, [r7, #4]
 8015cb4:	603b      	str	r3, [r7, #0]
 8015cb6:	460b      	mov	r3, r1
 8015cb8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015cba:	2300      	movs	r3, #0
 8015cbc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015cbe:	2300      	movs	r3, #0
 8015cc0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8015cc2:	68fb      	ldr	r3, [r7, #12]
 8015cc4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015cc8:	7af9      	ldrb	r1, [r7, #11]
 8015cca:	683b      	ldr	r3, [r7, #0]
 8015ccc:	687a      	ldr	r2, [r7, #4]
 8015cce:	f7ed fece 	bl	8003a6e <HAL_PCD_EP_Receive>
 8015cd2:	4603      	mov	r3, r0
 8015cd4:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 8015cd6:	7dfb      	ldrb	r3, [r7, #23]
 8015cd8:	4618      	mov	r0, r3
 8015cda:	f000 f86f 	bl	8015dbc <USBD_Get_USB_Status>
 8015cde:	4603      	mov	r3, r0
 8015ce0:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 8015ce2:	7dbb      	ldrb	r3, [r7, #22]
}
 8015ce4:	4618      	mov	r0, r3
 8015ce6:	3718      	adds	r7, #24
 8015ce8:	46bd      	mov	sp, r7
 8015cea:	bd80      	pop	{r7, pc}

08015cec <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015cec:	b580      	push	{r7, lr}
 8015cee:	b082      	sub	sp, #8
 8015cf0:	af00      	add	r7, sp, #0
 8015cf2:	6078      	str	r0, [r7, #4]
 8015cf4:	460b      	mov	r3, r1
 8015cf6:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8015cf8:	687b      	ldr	r3, [r7, #4]
 8015cfa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015cfe:	78fa      	ldrb	r2, [r7, #3]
 8015d00:	4611      	mov	r1, r2
 8015d02:	4618      	mov	r0, r3
 8015d04:	f7ed fefe 	bl	8003b04 <HAL_PCD_EP_GetRxCount>
 8015d08:	4603      	mov	r3, r0
}
 8015d0a:	4618      	mov	r0, r3
 8015d0c:	3708      	adds	r7, #8
 8015d0e:	46bd      	mov	sp, r7
 8015d10:	bd80      	pop	{r7, pc}
	...

08015d14 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8015d14:	b580      	push	{r7, lr}
 8015d16:	b082      	sub	sp, #8
 8015d18:	af00      	add	r7, sp, #0
 8015d1a:	6078      	str	r0, [r7, #4]
 8015d1c:	460b      	mov	r3, r1
 8015d1e:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8015d20:	78fb      	ldrb	r3, [r7, #3]
 8015d22:	2b00      	cmp	r3, #0
 8015d24:	d002      	beq.n	8015d2c <HAL_PCDEx_LPM_Callback+0x18>
 8015d26:	2b01      	cmp	r3, #1
 8015d28:	d01f      	beq.n	8015d6a <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;   
  }
}
 8015d2a:	e03b      	b.n	8015da4 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8015d2c:	687b      	ldr	r3, [r7, #4]
 8015d2e:	6a1b      	ldr	r3, [r3, #32]
 8015d30:	2b00      	cmp	r3, #0
 8015d32:	d007      	beq.n	8015d44 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8015d34:	f000 f83c 	bl	8015db0 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8015d38:	4b1c      	ldr	r3, [pc, #112]	; (8015dac <HAL_PCDEx_LPM_Callback+0x98>)
 8015d3a:	691b      	ldr	r3, [r3, #16]
 8015d3c:	4a1b      	ldr	r2, [pc, #108]	; (8015dac <HAL_PCDEx_LPM_Callback+0x98>)
 8015d3e:	f023 0306 	bic.w	r3, r3, #6
 8015d42:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8015d44:	687b      	ldr	r3, [r7, #4]
 8015d46:	681b      	ldr	r3, [r3, #0]
 8015d48:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8015d4c:	681b      	ldr	r3, [r3, #0]
 8015d4e:	687a      	ldr	r2, [r7, #4]
 8015d50:	6812      	ldr	r2, [r2, #0]
 8015d52:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8015d56:	f023 0301 	bic.w	r3, r3, #1
 8015d5a:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8015d5c:	687b      	ldr	r3, [r7, #4]
 8015d5e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8015d62:	4618      	mov	r0, r3
 8015d64:	f7f6 faf3 	bl	800c34e <USBD_LL_Resume>
    break;
 8015d68:	e01c      	b.n	8015da4 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8015d6a:	687b      	ldr	r3, [r7, #4]
 8015d6c:	681b      	ldr	r3, [r3, #0]
 8015d6e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8015d72:	681b      	ldr	r3, [r3, #0]
 8015d74:	687a      	ldr	r2, [r7, #4]
 8015d76:	6812      	ldr	r2, [r2, #0]
 8015d78:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8015d7c:	f043 0301 	orr.w	r3, r3, #1
 8015d80:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8015d82:	687b      	ldr	r3, [r7, #4]
 8015d84:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8015d88:	4618      	mov	r0, r3
 8015d8a:	f7f6 facb 	bl	800c324 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8015d8e:	687b      	ldr	r3, [r7, #4]
 8015d90:	6a1b      	ldr	r3, [r3, #32]
 8015d92:	2b00      	cmp	r3, #0
 8015d94:	d005      	beq.n	8015da2 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8015d96:	4b05      	ldr	r3, [pc, #20]	; (8015dac <HAL_PCDEx_LPM_Callback+0x98>)
 8015d98:	691b      	ldr	r3, [r3, #16]
 8015d9a:	4a04      	ldr	r2, [pc, #16]	; (8015dac <HAL_PCDEx_LPM_Callback+0x98>)
 8015d9c:	f043 0306 	orr.w	r3, r3, #6
 8015da0:	6113      	str	r3, [r2, #16]
    break;   
 8015da2:	bf00      	nop
}
 8015da4:	bf00      	nop
 8015da6:	3708      	adds	r7, #8
 8015da8:	46bd      	mov	sp, r7
 8015daa:	bd80      	pop	{r7, pc}
 8015dac:	e000ed00 	.word	0xe000ed00

08015db0 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8015db0:	b580      	push	{r7, lr}
 8015db2:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8015db4:	f7ea fc18 	bl	80005e8 <SystemClock_Config>
}
 8015db8:	bf00      	nop
 8015dba:	bd80      	pop	{r7, pc}

08015dbc <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8015dbc:	b480      	push	{r7}
 8015dbe:	b085      	sub	sp, #20
 8015dc0:	af00      	add	r7, sp, #0
 8015dc2:	4603      	mov	r3, r0
 8015dc4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015dc6:	2300      	movs	r3, #0
 8015dc8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8015dca:	79fb      	ldrb	r3, [r7, #7]
 8015dcc:	2b03      	cmp	r3, #3
 8015dce:	d817      	bhi.n	8015e00 <USBD_Get_USB_Status+0x44>
 8015dd0:	a201      	add	r2, pc, #4	; (adr r2, 8015dd8 <USBD_Get_USB_Status+0x1c>)
 8015dd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015dd6:	bf00      	nop
 8015dd8:	08015de9 	.word	0x08015de9
 8015ddc:	08015def 	.word	0x08015def
 8015de0:	08015df5 	.word	0x08015df5
 8015de4:	08015dfb 	.word	0x08015dfb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8015de8:	2300      	movs	r3, #0
 8015dea:	73fb      	strb	r3, [r7, #15]
    break;
 8015dec:	e00b      	b.n	8015e06 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8015dee:	2303      	movs	r3, #3
 8015df0:	73fb      	strb	r3, [r7, #15]
    break;
 8015df2:	e008      	b.n	8015e06 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8015df4:	2301      	movs	r3, #1
 8015df6:	73fb      	strb	r3, [r7, #15]
    break;
 8015df8:	e005      	b.n	8015e06 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8015dfa:	2303      	movs	r3, #3
 8015dfc:	73fb      	strb	r3, [r7, #15]
    break;
 8015dfe:	e002      	b.n	8015e06 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8015e00:	2303      	movs	r3, #3
 8015e02:	73fb      	strb	r3, [r7, #15]
    break;
 8015e04:	bf00      	nop
  }
  return usb_status;
 8015e06:	7bfb      	ldrb	r3, [r7, #15]
}
 8015e08:	4618      	mov	r0, r3
 8015e0a:	3714      	adds	r7, #20
 8015e0c:	46bd      	mov	sp, r7
 8015e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e12:	4770      	bx	lr

08015e14 <__errno>:
 8015e14:	4b01      	ldr	r3, [pc, #4]	; (8015e1c <__errno+0x8>)
 8015e16:	6818      	ldr	r0, [r3, #0]
 8015e18:	4770      	bx	lr
 8015e1a:	bf00      	nop
 8015e1c:	20000188 	.word	0x20000188

08015e20 <__libc_init_array>:
 8015e20:	b570      	push	{r4, r5, r6, lr}
 8015e22:	4e0d      	ldr	r6, [pc, #52]	; (8015e58 <__libc_init_array+0x38>)
 8015e24:	4c0d      	ldr	r4, [pc, #52]	; (8015e5c <__libc_init_array+0x3c>)
 8015e26:	1ba4      	subs	r4, r4, r6
 8015e28:	10a4      	asrs	r4, r4, #2
 8015e2a:	2500      	movs	r5, #0
 8015e2c:	42a5      	cmp	r5, r4
 8015e2e:	d109      	bne.n	8015e44 <__libc_init_array+0x24>
 8015e30:	4e0b      	ldr	r6, [pc, #44]	; (8015e60 <__libc_init_array+0x40>)
 8015e32:	4c0c      	ldr	r4, [pc, #48]	; (8015e64 <__libc_init_array+0x44>)
 8015e34:	f000 f8f6 	bl	8016024 <_init>
 8015e38:	1ba4      	subs	r4, r4, r6
 8015e3a:	10a4      	asrs	r4, r4, #2
 8015e3c:	2500      	movs	r5, #0
 8015e3e:	42a5      	cmp	r5, r4
 8015e40:	d105      	bne.n	8015e4e <__libc_init_array+0x2e>
 8015e42:	bd70      	pop	{r4, r5, r6, pc}
 8015e44:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8015e48:	4798      	blx	r3
 8015e4a:	3501      	adds	r5, #1
 8015e4c:	e7ee      	b.n	8015e2c <__libc_init_array+0xc>
 8015e4e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8015e52:	4798      	blx	r3
 8015e54:	3501      	adds	r5, #1
 8015e56:	e7f2      	b.n	8015e3e <__libc_init_array+0x1e>
 8015e58:	080165bc 	.word	0x080165bc
 8015e5c:	080165bc 	.word	0x080165bc
 8015e60:	080165bc 	.word	0x080165bc
 8015e64:	080165c0 	.word	0x080165c0

08015e68 <malloc>:
 8015e68:	4b02      	ldr	r3, [pc, #8]	; (8015e74 <malloc+0xc>)
 8015e6a:	4601      	mov	r1, r0
 8015e6c:	6818      	ldr	r0, [r3, #0]
 8015e6e:	f000 b86d 	b.w	8015f4c <_malloc_r>
 8015e72:	bf00      	nop
 8015e74:	20000188 	.word	0x20000188

08015e78 <free>:
 8015e78:	4b02      	ldr	r3, [pc, #8]	; (8015e84 <free+0xc>)
 8015e7a:	4601      	mov	r1, r0
 8015e7c:	6818      	ldr	r0, [r3, #0]
 8015e7e:	f000 b817 	b.w	8015eb0 <_free_r>
 8015e82:	bf00      	nop
 8015e84:	20000188 	.word	0x20000188

08015e88 <memcpy>:
 8015e88:	b510      	push	{r4, lr}
 8015e8a:	1e43      	subs	r3, r0, #1
 8015e8c:	440a      	add	r2, r1
 8015e8e:	4291      	cmp	r1, r2
 8015e90:	d100      	bne.n	8015e94 <memcpy+0xc>
 8015e92:	bd10      	pop	{r4, pc}
 8015e94:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015e98:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015e9c:	e7f7      	b.n	8015e8e <memcpy+0x6>

08015e9e <memset>:
 8015e9e:	4402      	add	r2, r0
 8015ea0:	4603      	mov	r3, r0
 8015ea2:	4293      	cmp	r3, r2
 8015ea4:	d100      	bne.n	8015ea8 <memset+0xa>
 8015ea6:	4770      	bx	lr
 8015ea8:	f803 1b01 	strb.w	r1, [r3], #1
 8015eac:	e7f9      	b.n	8015ea2 <memset+0x4>
	...

08015eb0 <_free_r>:
 8015eb0:	b538      	push	{r3, r4, r5, lr}
 8015eb2:	4605      	mov	r5, r0
 8015eb4:	2900      	cmp	r1, #0
 8015eb6:	d045      	beq.n	8015f44 <_free_r+0x94>
 8015eb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015ebc:	1f0c      	subs	r4, r1, #4
 8015ebe:	2b00      	cmp	r3, #0
 8015ec0:	bfb8      	it	lt
 8015ec2:	18e4      	addlt	r4, r4, r3
 8015ec4:	f000 f8ac 	bl	8016020 <__malloc_lock>
 8015ec8:	4a1f      	ldr	r2, [pc, #124]	; (8015f48 <_free_r+0x98>)
 8015eca:	6813      	ldr	r3, [r2, #0]
 8015ecc:	4610      	mov	r0, r2
 8015ece:	b933      	cbnz	r3, 8015ede <_free_r+0x2e>
 8015ed0:	6063      	str	r3, [r4, #4]
 8015ed2:	6014      	str	r4, [r2, #0]
 8015ed4:	4628      	mov	r0, r5
 8015ed6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015eda:	f000 b8a2 	b.w	8016022 <__malloc_unlock>
 8015ede:	42a3      	cmp	r3, r4
 8015ee0:	d90c      	bls.n	8015efc <_free_r+0x4c>
 8015ee2:	6821      	ldr	r1, [r4, #0]
 8015ee4:	1862      	adds	r2, r4, r1
 8015ee6:	4293      	cmp	r3, r2
 8015ee8:	bf04      	itt	eq
 8015eea:	681a      	ldreq	r2, [r3, #0]
 8015eec:	685b      	ldreq	r3, [r3, #4]
 8015eee:	6063      	str	r3, [r4, #4]
 8015ef0:	bf04      	itt	eq
 8015ef2:	1852      	addeq	r2, r2, r1
 8015ef4:	6022      	streq	r2, [r4, #0]
 8015ef6:	6004      	str	r4, [r0, #0]
 8015ef8:	e7ec      	b.n	8015ed4 <_free_r+0x24>
 8015efa:	4613      	mov	r3, r2
 8015efc:	685a      	ldr	r2, [r3, #4]
 8015efe:	b10a      	cbz	r2, 8015f04 <_free_r+0x54>
 8015f00:	42a2      	cmp	r2, r4
 8015f02:	d9fa      	bls.n	8015efa <_free_r+0x4a>
 8015f04:	6819      	ldr	r1, [r3, #0]
 8015f06:	1858      	adds	r0, r3, r1
 8015f08:	42a0      	cmp	r0, r4
 8015f0a:	d10b      	bne.n	8015f24 <_free_r+0x74>
 8015f0c:	6820      	ldr	r0, [r4, #0]
 8015f0e:	4401      	add	r1, r0
 8015f10:	1858      	adds	r0, r3, r1
 8015f12:	4282      	cmp	r2, r0
 8015f14:	6019      	str	r1, [r3, #0]
 8015f16:	d1dd      	bne.n	8015ed4 <_free_r+0x24>
 8015f18:	6810      	ldr	r0, [r2, #0]
 8015f1a:	6852      	ldr	r2, [r2, #4]
 8015f1c:	605a      	str	r2, [r3, #4]
 8015f1e:	4401      	add	r1, r0
 8015f20:	6019      	str	r1, [r3, #0]
 8015f22:	e7d7      	b.n	8015ed4 <_free_r+0x24>
 8015f24:	d902      	bls.n	8015f2c <_free_r+0x7c>
 8015f26:	230c      	movs	r3, #12
 8015f28:	602b      	str	r3, [r5, #0]
 8015f2a:	e7d3      	b.n	8015ed4 <_free_r+0x24>
 8015f2c:	6820      	ldr	r0, [r4, #0]
 8015f2e:	1821      	adds	r1, r4, r0
 8015f30:	428a      	cmp	r2, r1
 8015f32:	bf04      	itt	eq
 8015f34:	6811      	ldreq	r1, [r2, #0]
 8015f36:	6852      	ldreq	r2, [r2, #4]
 8015f38:	6062      	str	r2, [r4, #4]
 8015f3a:	bf04      	itt	eq
 8015f3c:	1809      	addeq	r1, r1, r0
 8015f3e:	6021      	streq	r1, [r4, #0]
 8015f40:	605c      	str	r4, [r3, #4]
 8015f42:	e7c7      	b.n	8015ed4 <_free_r+0x24>
 8015f44:	bd38      	pop	{r3, r4, r5, pc}
 8015f46:	bf00      	nop
 8015f48:	20004bd8 	.word	0x20004bd8

08015f4c <_malloc_r>:
 8015f4c:	b570      	push	{r4, r5, r6, lr}
 8015f4e:	1ccd      	adds	r5, r1, #3
 8015f50:	f025 0503 	bic.w	r5, r5, #3
 8015f54:	3508      	adds	r5, #8
 8015f56:	2d0c      	cmp	r5, #12
 8015f58:	bf38      	it	cc
 8015f5a:	250c      	movcc	r5, #12
 8015f5c:	2d00      	cmp	r5, #0
 8015f5e:	4606      	mov	r6, r0
 8015f60:	db01      	blt.n	8015f66 <_malloc_r+0x1a>
 8015f62:	42a9      	cmp	r1, r5
 8015f64:	d903      	bls.n	8015f6e <_malloc_r+0x22>
 8015f66:	230c      	movs	r3, #12
 8015f68:	6033      	str	r3, [r6, #0]
 8015f6a:	2000      	movs	r0, #0
 8015f6c:	bd70      	pop	{r4, r5, r6, pc}
 8015f6e:	f000 f857 	bl	8016020 <__malloc_lock>
 8015f72:	4a21      	ldr	r2, [pc, #132]	; (8015ff8 <_malloc_r+0xac>)
 8015f74:	6814      	ldr	r4, [r2, #0]
 8015f76:	4621      	mov	r1, r4
 8015f78:	b991      	cbnz	r1, 8015fa0 <_malloc_r+0x54>
 8015f7a:	4c20      	ldr	r4, [pc, #128]	; (8015ffc <_malloc_r+0xb0>)
 8015f7c:	6823      	ldr	r3, [r4, #0]
 8015f7e:	b91b      	cbnz	r3, 8015f88 <_malloc_r+0x3c>
 8015f80:	4630      	mov	r0, r6
 8015f82:	f000 f83d 	bl	8016000 <_sbrk_r>
 8015f86:	6020      	str	r0, [r4, #0]
 8015f88:	4629      	mov	r1, r5
 8015f8a:	4630      	mov	r0, r6
 8015f8c:	f000 f838 	bl	8016000 <_sbrk_r>
 8015f90:	1c43      	adds	r3, r0, #1
 8015f92:	d124      	bne.n	8015fde <_malloc_r+0x92>
 8015f94:	230c      	movs	r3, #12
 8015f96:	6033      	str	r3, [r6, #0]
 8015f98:	4630      	mov	r0, r6
 8015f9a:	f000 f842 	bl	8016022 <__malloc_unlock>
 8015f9e:	e7e4      	b.n	8015f6a <_malloc_r+0x1e>
 8015fa0:	680b      	ldr	r3, [r1, #0]
 8015fa2:	1b5b      	subs	r3, r3, r5
 8015fa4:	d418      	bmi.n	8015fd8 <_malloc_r+0x8c>
 8015fa6:	2b0b      	cmp	r3, #11
 8015fa8:	d90f      	bls.n	8015fca <_malloc_r+0x7e>
 8015faa:	600b      	str	r3, [r1, #0]
 8015fac:	50cd      	str	r5, [r1, r3]
 8015fae:	18cc      	adds	r4, r1, r3
 8015fb0:	4630      	mov	r0, r6
 8015fb2:	f000 f836 	bl	8016022 <__malloc_unlock>
 8015fb6:	f104 000b 	add.w	r0, r4, #11
 8015fba:	1d23      	adds	r3, r4, #4
 8015fbc:	f020 0007 	bic.w	r0, r0, #7
 8015fc0:	1ac3      	subs	r3, r0, r3
 8015fc2:	d0d3      	beq.n	8015f6c <_malloc_r+0x20>
 8015fc4:	425a      	negs	r2, r3
 8015fc6:	50e2      	str	r2, [r4, r3]
 8015fc8:	e7d0      	b.n	8015f6c <_malloc_r+0x20>
 8015fca:	428c      	cmp	r4, r1
 8015fcc:	684b      	ldr	r3, [r1, #4]
 8015fce:	bf16      	itet	ne
 8015fd0:	6063      	strne	r3, [r4, #4]
 8015fd2:	6013      	streq	r3, [r2, #0]
 8015fd4:	460c      	movne	r4, r1
 8015fd6:	e7eb      	b.n	8015fb0 <_malloc_r+0x64>
 8015fd8:	460c      	mov	r4, r1
 8015fda:	6849      	ldr	r1, [r1, #4]
 8015fdc:	e7cc      	b.n	8015f78 <_malloc_r+0x2c>
 8015fde:	1cc4      	adds	r4, r0, #3
 8015fe0:	f024 0403 	bic.w	r4, r4, #3
 8015fe4:	42a0      	cmp	r0, r4
 8015fe6:	d005      	beq.n	8015ff4 <_malloc_r+0xa8>
 8015fe8:	1a21      	subs	r1, r4, r0
 8015fea:	4630      	mov	r0, r6
 8015fec:	f000 f808 	bl	8016000 <_sbrk_r>
 8015ff0:	3001      	adds	r0, #1
 8015ff2:	d0cf      	beq.n	8015f94 <_malloc_r+0x48>
 8015ff4:	6025      	str	r5, [r4, #0]
 8015ff6:	e7db      	b.n	8015fb0 <_malloc_r+0x64>
 8015ff8:	20004bd8 	.word	0x20004bd8
 8015ffc:	20004bdc 	.word	0x20004bdc

08016000 <_sbrk_r>:
 8016000:	b538      	push	{r3, r4, r5, lr}
 8016002:	4c06      	ldr	r4, [pc, #24]	; (801601c <_sbrk_r+0x1c>)
 8016004:	2300      	movs	r3, #0
 8016006:	4605      	mov	r5, r0
 8016008:	4608      	mov	r0, r1
 801600a:	6023      	str	r3, [r4, #0]
 801600c:	f7eb fa4a 	bl	80014a4 <_sbrk>
 8016010:	1c43      	adds	r3, r0, #1
 8016012:	d102      	bne.n	801601a <_sbrk_r+0x1a>
 8016014:	6823      	ldr	r3, [r4, #0]
 8016016:	b103      	cbz	r3, 801601a <_sbrk_r+0x1a>
 8016018:	602b      	str	r3, [r5, #0]
 801601a:	bd38      	pop	{r3, r4, r5, pc}
 801601c:	20009d1c 	.word	0x20009d1c

08016020 <__malloc_lock>:
 8016020:	4770      	bx	lr

08016022 <__malloc_unlock>:
 8016022:	4770      	bx	lr

08016024 <_init>:
 8016024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016026:	bf00      	nop
 8016028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801602a:	bc08      	pop	{r3}
 801602c:	469e      	mov	lr, r3
 801602e:	4770      	bx	lr

08016030 <_fini>:
 8016030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016032:	bf00      	nop
 8016034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016036:	bc08      	pop	{r3}
 8016038:	469e      	mov	lr, r3
 801603a:	4770      	bx	lr
