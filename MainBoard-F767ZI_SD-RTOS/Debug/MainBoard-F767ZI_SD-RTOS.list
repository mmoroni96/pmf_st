
MainBoard-F767ZI_SD-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015e6c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000578  0801606c  0801606c  0002606c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080165e4  080165e4  000301ec  2**0
                  CONTENTS
  4 .ARM          00000008  080165e4  080165e4  000265e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080165ec  080165ec  000301ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080165ec  080165ec  000265ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080165f0  080165f0  000265f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  080165f4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009af0  200001f0  080167e0  000301f0  2**3
                  ALLOC
 10 ._user_heap_stack 00006000  20009ce0  080167e0  00039ce0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000301ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00037f6d  00000000  00000000  0003021a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00006b3f  00000000  00000000  00068187  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000026e0  00000000  00000000  0006ecc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000023e0  00000000  00000000  000713a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000b654  00000000  00000000  00073788  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000270e9  00000000  00000000  0007eddc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001127d0  00000000  00000000  000a5ec5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001b8695  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a320  00000000  00000000  001b8710  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001f0 	.word	0x200001f0
 800021c:	00000000 	.word	0x00000000
 8000220:	08016054 	.word	0x08016054

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001f4 	.word	0x200001f4
 800023c:	08016054 	.word	0x08016054

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b972 	b.w	800053c <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9e08      	ldr	r6, [sp, #32]
 8000276:	4604      	mov	r4, r0
 8000278:	4688      	mov	r8, r1
 800027a:	2b00      	cmp	r3, #0
 800027c:	d14b      	bne.n	8000316 <__udivmoddi4+0xa6>
 800027e:	428a      	cmp	r2, r1
 8000280:	4615      	mov	r5, r2
 8000282:	d967      	bls.n	8000354 <__udivmoddi4+0xe4>
 8000284:	fab2 f282 	clz	r2, r2
 8000288:	b14a      	cbz	r2, 800029e <__udivmoddi4+0x2e>
 800028a:	f1c2 0720 	rsb	r7, r2, #32
 800028e:	fa01 f302 	lsl.w	r3, r1, r2
 8000292:	fa20 f707 	lsr.w	r7, r0, r7
 8000296:	4095      	lsls	r5, r2
 8000298:	ea47 0803 	orr.w	r8, r7, r3
 800029c:	4094      	lsls	r4, r2
 800029e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002a2:	0c23      	lsrs	r3, r4, #16
 80002a4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002a8:	fa1f fc85 	uxth.w	ip, r5
 80002ac:	fb0e 8817 	mls	r8, lr, r7, r8
 80002b0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002b4:	fb07 f10c 	mul.w	r1, r7, ip
 80002b8:	4299      	cmp	r1, r3
 80002ba:	d909      	bls.n	80002d0 <__udivmoddi4+0x60>
 80002bc:	18eb      	adds	r3, r5, r3
 80002be:	f107 30ff 	add.w	r0, r7, #4294967295
 80002c2:	f080 811b 	bcs.w	80004fc <__udivmoddi4+0x28c>
 80002c6:	4299      	cmp	r1, r3
 80002c8:	f240 8118 	bls.w	80004fc <__udivmoddi4+0x28c>
 80002cc:	3f02      	subs	r7, #2
 80002ce:	442b      	add	r3, r5
 80002d0:	1a5b      	subs	r3, r3, r1
 80002d2:	b2a4      	uxth	r4, r4
 80002d4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002d8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002dc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002e4:	45a4      	cmp	ip, r4
 80002e6:	d909      	bls.n	80002fc <__udivmoddi4+0x8c>
 80002e8:	192c      	adds	r4, r5, r4
 80002ea:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ee:	f080 8107 	bcs.w	8000500 <__udivmoddi4+0x290>
 80002f2:	45a4      	cmp	ip, r4
 80002f4:	f240 8104 	bls.w	8000500 <__udivmoddi4+0x290>
 80002f8:	3802      	subs	r0, #2
 80002fa:	442c      	add	r4, r5
 80002fc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000300:	eba4 040c 	sub.w	r4, r4, ip
 8000304:	2700      	movs	r7, #0
 8000306:	b11e      	cbz	r6, 8000310 <__udivmoddi4+0xa0>
 8000308:	40d4      	lsrs	r4, r2
 800030a:	2300      	movs	r3, #0
 800030c:	e9c6 4300 	strd	r4, r3, [r6]
 8000310:	4639      	mov	r1, r7
 8000312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000316:	428b      	cmp	r3, r1
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0xbe>
 800031a:	2e00      	cmp	r6, #0
 800031c:	f000 80eb 	beq.w	80004f6 <__udivmoddi4+0x286>
 8000320:	2700      	movs	r7, #0
 8000322:	e9c6 0100 	strd	r0, r1, [r6]
 8000326:	4638      	mov	r0, r7
 8000328:	4639      	mov	r1, r7
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	fab3 f783 	clz	r7, r3
 8000332:	2f00      	cmp	r7, #0
 8000334:	d147      	bne.n	80003c6 <__udivmoddi4+0x156>
 8000336:	428b      	cmp	r3, r1
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0xd0>
 800033a:	4282      	cmp	r2, r0
 800033c:	f200 80fa 	bhi.w	8000534 <__udivmoddi4+0x2c4>
 8000340:	1a84      	subs	r4, r0, r2
 8000342:	eb61 0303 	sbc.w	r3, r1, r3
 8000346:	2001      	movs	r0, #1
 8000348:	4698      	mov	r8, r3
 800034a:	2e00      	cmp	r6, #0
 800034c:	d0e0      	beq.n	8000310 <__udivmoddi4+0xa0>
 800034e:	e9c6 4800 	strd	r4, r8, [r6]
 8000352:	e7dd      	b.n	8000310 <__udivmoddi4+0xa0>
 8000354:	b902      	cbnz	r2, 8000358 <__udivmoddi4+0xe8>
 8000356:	deff      	udf	#255	; 0xff
 8000358:	fab2 f282 	clz	r2, r2
 800035c:	2a00      	cmp	r2, #0
 800035e:	f040 808f 	bne.w	8000480 <__udivmoddi4+0x210>
 8000362:	1b49      	subs	r1, r1, r5
 8000364:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000368:	fa1f f885 	uxth.w	r8, r5
 800036c:	2701      	movs	r7, #1
 800036e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000372:	0c23      	lsrs	r3, r4, #16
 8000374:	fb0e 111c 	mls	r1, lr, ip, r1
 8000378:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037c:	fb08 f10c 	mul.w	r1, r8, ip
 8000380:	4299      	cmp	r1, r3
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x124>
 8000384:	18eb      	adds	r3, r5, r3
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x122>
 800038c:	4299      	cmp	r1, r3
 800038e:	f200 80cd 	bhi.w	800052c <__udivmoddi4+0x2bc>
 8000392:	4684      	mov	ip, r0
 8000394:	1a59      	subs	r1, r3, r1
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1410 	mls	r4, lr, r0, r1
 80003a0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x14c>
 80003ac:	192c      	adds	r4, r5, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x14a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80b6 	bhi.w	8000526 <__udivmoddi4+0x2b6>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e79f      	b.n	8000306 <__udivmoddi4+0x96>
 80003c6:	f1c7 0c20 	rsb	ip, r7, #32
 80003ca:	40bb      	lsls	r3, r7
 80003cc:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003d0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003d4:	fa01 f407 	lsl.w	r4, r1, r7
 80003d8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003dc:	fa21 f30c 	lsr.w	r3, r1, ip
 80003e0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003e4:	4325      	orrs	r5, r4
 80003e6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ea:	0c2c      	lsrs	r4, r5, #16
 80003ec:	fb08 3319 	mls	r3, r8, r9, r3
 80003f0:	fa1f fa8e 	uxth.w	sl, lr
 80003f4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003f8:	fb09 f40a 	mul.w	r4, r9, sl
 80003fc:	429c      	cmp	r4, r3
 80003fe:	fa02 f207 	lsl.w	r2, r2, r7
 8000402:	fa00 f107 	lsl.w	r1, r0, r7
 8000406:	d90b      	bls.n	8000420 <__udivmoddi4+0x1b0>
 8000408:	eb1e 0303 	adds.w	r3, lr, r3
 800040c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000410:	f080 8087 	bcs.w	8000522 <__udivmoddi4+0x2b2>
 8000414:	429c      	cmp	r4, r3
 8000416:	f240 8084 	bls.w	8000522 <__udivmoddi4+0x2b2>
 800041a:	f1a9 0902 	sub.w	r9, r9, #2
 800041e:	4473      	add	r3, lr
 8000420:	1b1b      	subs	r3, r3, r4
 8000422:	b2ad      	uxth	r5, r5
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000430:	fb00 fa0a 	mul.w	sl, r0, sl
 8000434:	45a2      	cmp	sl, r4
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x1da>
 8000438:	eb1e 0404 	adds.w	r4, lr, r4
 800043c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000440:	d26b      	bcs.n	800051a <__udivmoddi4+0x2aa>
 8000442:	45a2      	cmp	sl, r4
 8000444:	d969      	bls.n	800051a <__udivmoddi4+0x2aa>
 8000446:	3802      	subs	r0, #2
 8000448:	4474      	add	r4, lr
 800044a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044e:	fba0 8902 	umull	r8, r9, r0, r2
 8000452:	eba4 040a 	sub.w	r4, r4, sl
 8000456:	454c      	cmp	r4, r9
 8000458:	46c2      	mov	sl, r8
 800045a:	464b      	mov	r3, r9
 800045c:	d354      	bcc.n	8000508 <__udivmoddi4+0x298>
 800045e:	d051      	beq.n	8000504 <__udivmoddi4+0x294>
 8000460:	2e00      	cmp	r6, #0
 8000462:	d069      	beq.n	8000538 <__udivmoddi4+0x2c8>
 8000464:	ebb1 050a 	subs.w	r5, r1, sl
 8000468:	eb64 0403 	sbc.w	r4, r4, r3
 800046c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000470:	40fd      	lsrs	r5, r7
 8000472:	40fc      	lsrs	r4, r7
 8000474:	ea4c 0505 	orr.w	r5, ip, r5
 8000478:	e9c6 5400 	strd	r5, r4, [r6]
 800047c:	2700      	movs	r7, #0
 800047e:	e747      	b.n	8000310 <__udivmoddi4+0xa0>
 8000480:	f1c2 0320 	rsb	r3, r2, #32
 8000484:	fa20 f703 	lsr.w	r7, r0, r3
 8000488:	4095      	lsls	r5, r2
 800048a:	fa01 f002 	lsl.w	r0, r1, r2
 800048e:	fa21 f303 	lsr.w	r3, r1, r3
 8000492:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000496:	4338      	orrs	r0, r7
 8000498:	0c01      	lsrs	r1, r0, #16
 800049a:	fbb3 f7fe 	udiv	r7, r3, lr
 800049e:	fa1f f885 	uxth.w	r8, r5
 80004a2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004a6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004aa:	fb07 f308 	mul.w	r3, r7, r8
 80004ae:	428b      	cmp	r3, r1
 80004b0:	fa04 f402 	lsl.w	r4, r4, r2
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x256>
 80004b6:	1869      	adds	r1, r5, r1
 80004b8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004bc:	d22f      	bcs.n	800051e <__udivmoddi4+0x2ae>
 80004be:	428b      	cmp	r3, r1
 80004c0:	d92d      	bls.n	800051e <__udivmoddi4+0x2ae>
 80004c2:	3f02      	subs	r7, #2
 80004c4:	4429      	add	r1, r5
 80004c6:	1acb      	subs	r3, r1, r3
 80004c8:	b281      	uxth	r1, r0
 80004ca:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ce:	fb0e 3310 	mls	r3, lr, r0, r3
 80004d2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d6:	fb00 f308 	mul.w	r3, r0, r8
 80004da:	428b      	cmp	r3, r1
 80004dc:	d907      	bls.n	80004ee <__udivmoddi4+0x27e>
 80004de:	1869      	adds	r1, r5, r1
 80004e0:	f100 3cff 	add.w	ip, r0, #4294967295
 80004e4:	d217      	bcs.n	8000516 <__udivmoddi4+0x2a6>
 80004e6:	428b      	cmp	r3, r1
 80004e8:	d915      	bls.n	8000516 <__udivmoddi4+0x2a6>
 80004ea:	3802      	subs	r0, #2
 80004ec:	4429      	add	r1, r5
 80004ee:	1ac9      	subs	r1, r1, r3
 80004f0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004f4:	e73b      	b.n	800036e <__udivmoddi4+0xfe>
 80004f6:	4637      	mov	r7, r6
 80004f8:	4630      	mov	r0, r6
 80004fa:	e709      	b.n	8000310 <__udivmoddi4+0xa0>
 80004fc:	4607      	mov	r7, r0
 80004fe:	e6e7      	b.n	80002d0 <__udivmoddi4+0x60>
 8000500:	4618      	mov	r0, r3
 8000502:	e6fb      	b.n	80002fc <__udivmoddi4+0x8c>
 8000504:	4541      	cmp	r1, r8
 8000506:	d2ab      	bcs.n	8000460 <__udivmoddi4+0x1f0>
 8000508:	ebb8 0a02 	subs.w	sl, r8, r2
 800050c:	eb69 020e 	sbc.w	r2, r9, lr
 8000510:	3801      	subs	r0, #1
 8000512:	4613      	mov	r3, r2
 8000514:	e7a4      	b.n	8000460 <__udivmoddi4+0x1f0>
 8000516:	4660      	mov	r0, ip
 8000518:	e7e9      	b.n	80004ee <__udivmoddi4+0x27e>
 800051a:	4618      	mov	r0, r3
 800051c:	e795      	b.n	800044a <__udivmoddi4+0x1da>
 800051e:	4667      	mov	r7, ip
 8000520:	e7d1      	b.n	80004c6 <__udivmoddi4+0x256>
 8000522:	4681      	mov	r9, r0
 8000524:	e77c      	b.n	8000420 <__udivmoddi4+0x1b0>
 8000526:	3802      	subs	r0, #2
 8000528:	442c      	add	r4, r5
 800052a:	e747      	b.n	80003bc <__udivmoddi4+0x14c>
 800052c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000530:	442b      	add	r3, r5
 8000532:	e72f      	b.n	8000394 <__udivmoddi4+0x124>
 8000534:	4638      	mov	r0, r7
 8000536:	e708      	b.n	800034a <__udivmoddi4+0xda>
 8000538:	4637      	mov	r7, r6
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0xa0>

0800053c <__aeabi_idiv0>:
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop

08000540 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000540:	b480      	push	{r7}
 8000542:	b083      	sub	sp, #12
 8000544:	af00      	add	r7, sp, #0
 8000546:	4603      	mov	r3, r0
 8000548:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800054a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800054e:	2b00      	cmp	r3, #0
 8000550:	db0b      	blt.n	800056a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000552:	79fb      	ldrb	r3, [r7, #7]
 8000554:	f003 021f 	and.w	r2, r3, #31
 8000558:	4907      	ldr	r1, [pc, #28]	; (8000578 <__NVIC_EnableIRQ+0x38>)
 800055a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800055e:	095b      	lsrs	r3, r3, #5
 8000560:	2001      	movs	r0, #1
 8000562:	fa00 f202 	lsl.w	r2, r0, r2
 8000566:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800056a:	bf00      	nop
 800056c:	370c      	adds	r7, #12
 800056e:	46bd      	mov	sp, r7
 8000570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop
 8000578:	e000e100 	.word	0xe000e100

0800057c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000580:	f000 ff8f 	bl	80014a2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000584:	f000 f828 	bl	80005d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000588:	f000 f97c 	bl	8000884 <MX_GPIO_Init>
  MX_DMA_Init();
 800058c:	f000 f954 	bl	8000838 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000590:	f000 f922 	bl	80007d8 <MX_USART3_UART_Init>
  MX_CAN1_Init();
 8000594:	f000 f8c4 	bl	8000720 <MX_CAN1_Init>
  MX_SDMMC1_SD_Init();
 8000598:	f000 f8f8 	bl	800078c <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 800059c:	f009 fdfc 	bl	800a198 <MX_FATFS_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80005a0:	f000 f8b2 	bl	8000708 <MX_NVIC_Init>
  res = f_close(&SDFile);
  res = f_open(&SDFile, &path[0], FA_OPEN_APPEND | FA_WRITE);*/
  //USB start
  //MX_USB_DEVICE_Init();
  // CAN Initialization
  CAN_Config();
 80005a4:	f000 fbc6 	bl	8000d34 <CAN_Config>
  HAL_CAN_Start(&hcan1);
 80005a8:	4807      	ldr	r0, [pc, #28]	; (80005c8 <main+0x4c>)
 80005aa:	f001 f9b1 	bl	8001910 <HAL_CAN_Start>
  //HAL_TIM_Base_Start_IT(&htim13);
  //HAL_TIM_Base_Start_IT(&htim14);
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005ae:	f011 fa45 	bl	8011a3c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005b2:	4a06      	ldr	r2, [pc, #24]	; (80005cc <main+0x50>)
 80005b4:	2100      	movs	r1, #0
 80005b6:	4806      	ldr	r0, [pc, #24]	; (80005d0 <main+0x54>)
 80005b8:	f011 faf4 	bl	8011ba4 <osThreadNew>
 80005bc:	4602      	mov	r2, r0
 80005be:	4b05      	ldr	r3, [pc, #20]	; (80005d4 <main+0x58>)
 80005c0:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005c2:	f011 fa91 	bl	8011ae8 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005c6:	e7fe      	b.n	80005c6 <main+0x4a>
 80005c8:	20007020 	.word	0x20007020
 80005cc:	08016128 	.word	0x08016128
 80005d0:	08000da1 	.word	0x08000da1
 80005d4:	20004c08 	.word	0x20004c08

080005d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b0b8      	sub	sp, #224	; 0xe0
 80005dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005de:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80005e2:	2234      	movs	r2, #52	; 0x34
 80005e4:	2100      	movs	r1, #0
 80005e6:	4618      	mov	r0, r3
 80005e8:	f015 fc71 	bl	8015ece <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ec:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
 80005f4:	605a      	str	r2, [r3, #4]
 80005f6:	609a      	str	r2, [r3, #8]
 80005f8:	60da      	str	r2, [r3, #12]
 80005fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80005fc:	f107 0308 	add.w	r3, r7, #8
 8000600:	2290      	movs	r2, #144	; 0x90
 8000602:	2100      	movs	r1, #0
 8000604:	4618      	mov	r0, r3
 8000606:	f015 fc62 	bl	8015ece <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 800060a:	f003 fe8f 	bl	800432c <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800060e:	4b3b      	ldr	r3, [pc, #236]	; (80006fc <SystemClock_Config+0x124>)
 8000610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000612:	4a3a      	ldr	r2, [pc, #232]	; (80006fc <SystemClock_Config+0x124>)
 8000614:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000618:	6413      	str	r3, [r2, #64]	; 0x40
 800061a:	4b38      	ldr	r3, [pc, #224]	; (80006fc <SystemClock_Config+0x124>)
 800061c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800061e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000622:	607b      	str	r3, [r7, #4]
 8000624:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000626:	4b36      	ldr	r3, [pc, #216]	; (8000700 <SystemClock_Config+0x128>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	4a35      	ldr	r2, [pc, #212]	; (8000700 <SystemClock_Config+0x128>)
 800062c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000630:	6013      	str	r3, [r2, #0]
 8000632:	4b33      	ldr	r3, [pc, #204]	; (8000700 <SystemClock_Config+0x128>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800063a:	603b      	str	r3, [r7, #0]
 800063c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800063e:	2301      	movs	r3, #1
 8000640:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000644:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000648:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800064c:	2302      	movs	r3, #2
 800064e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000652:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000656:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 800065a:	2304      	movs	r3, #4
 800065c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000660:	23c0      	movs	r3, #192	; 0xc0
 8000662:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000666:	2302      	movs	r3, #2
 8000668:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800066c:	2308      	movs	r3, #8
 800066e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000672:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000676:	4618      	mov	r0, r3
 8000678:	f003 feb8 	bl	80043ec <HAL_RCC_OscConfig>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000682:	f000 fc4d 	bl	8000f20 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000686:	f003 fe61 	bl	800434c <HAL_PWREx_EnableOverDrive>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000690:	f000 fc46 	bl	8000f20 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000694:	230f      	movs	r3, #15
 8000696:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800069a:	2302      	movs	r3, #2
 800069c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a0:	2300      	movs	r3, #0
 80006a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006a6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006b2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80006b6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80006ba:	2106      	movs	r1, #6
 80006bc:	4618      	mov	r0, r3
 80006be:	f004 f943 	bl	8004948 <HAL_RCC_ClockConfig>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <SystemClock_Config+0xf4>
  {
    Error_Handler();
 80006c8:	f000 fc2a 	bl	8000f20 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_SDMMC1
 80006cc:	4b0d      	ldr	r3, [pc, #52]	; (8000704 <SystemClock_Config+0x12c>)
 80006ce:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80006d0:	2300      	movs	r3, #0
 80006d2:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80006d4:	2300      	movs	r3, #0
 80006d6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 80006da:	2300      	movs	r3, #0
 80006dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006e0:	f107 0308 	add.w	r3, r7, #8
 80006e4:	4618      	mov	r0, r3
 80006e6:	f004 fb59 	bl	8004d9c <HAL_RCCEx_PeriphCLKConfig>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <SystemClock_Config+0x11c>
  {
    Error_Handler();
 80006f0:	f000 fc16 	bl	8000f20 <Error_Handler>
  }
}
 80006f4:	bf00      	nop
 80006f6:	37e0      	adds	r7, #224	; 0xe0
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	40023800 	.word	0x40023800
 8000700:	40007000 	.word	0x40007000
 8000704:	00a00100 	.word	0x00a00100

08000708 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  /* CAN1_RX0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 6, 0);
 800070c:	2200      	movs	r2, #0
 800070e:	2106      	movs	r1, #6
 8000710:	2014      	movs	r0, #20
 8000712:	f001 fe5d 	bl	80023d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000716:	2014      	movs	r0, #20
 8000718:	f001 fe76 	bl	8002408 <HAL_NVIC_EnableIRQ>
}
 800071c:	bf00      	nop
 800071e:	bd80      	pop	{r7, pc}

08000720 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000724:	4b17      	ldr	r3, [pc, #92]	; (8000784 <MX_CAN1_Init+0x64>)
 8000726:	4a18      	ldr	r2, [pc, #96]	; (8000788 <MX_CAN1_Init+0x68>)
 8000728:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 4;
 800072a:	4b16      	ldr	r3, [pc, #88]	; (8000784 <MX_CAN1_Init+0x64>)
 800072c:	2204      	movs	r2, #4
 800072e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000730:	4b14      	ldr	r3, [pc, #80]	; (8000784 <MX_CAN1_Init+0x64>)
 8000732:	2200      	movs	r2, #0
 8000734:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000736:	4b13      	ldr	r3, [pc, #76]	; (8000784 <MX_CAN1_Init+0x64>)
 8000738:	2200      	movs	r2, #0
 800073a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_12TQ;
 800073c:	4b11      	ldr	r3, [pc, #68]	; (8000784 <MX_CAN1_Init+0x64>)
 800073e:	f44f 2230 	mov.w	r2, #720896	; 0xb0000
 8000742:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000744:	4b0f      	ldr	r3, [pc, #60]	; (8000784 <MX_CAN1_Init+0x64>)
 8000746:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800074a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800074c:	4b0d      	ldr	r3, [pc, #52]	; (8000784 <MX_CAN1_Init+0x64>)
 800074e:	2200      	movs	r2, #0
 8000750:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000752:	4b0c      	ldr	r3, [pc, #48]	; (8000784 <MX_CAN1_Init+0x64>)
 8000754:	2200      	movs	r2, #0
 8000756:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000758:	4b0a      	ldr	r3, [pc, #40]	; (8000784 <MX_CAN1_Init+0x64>)
 800075a:	2200      	movs	r2, #0
 800075c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800075e:	4b09      	ldr	r3, [pc, #36]	; (8000784 <MX_CAN1_Init+0x64>)
 8000760:	2200      	movs	r2, #0
 8000762:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = ENABLE;
 8000764:	4b07      	ldr	r3, [pc, #28]	; (8000784 <MX_CAN1_Init+0x64>)
 8000766:	2201      	movs	r2, #1
 8000768:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800076a:	4b06      	ldr	r3, [pc, #24]	; (8000784 <MX_CAN1_Init+0x64>)
 800076c:	2200      	movs	r2, #0
 800076e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000770:	4804      	ldr	r0, [pc, #16]	; (8000784 <MX_CAN1_Init+0x64>)
 8000772:	f000 fee5 	bl	8001540 <HAL_CAN_Init>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 800077c:	f000 fbd0 	bl	8000f20 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000780:	bf00      	nop
 8000782:	bd80      	pop	{r7, pc}
 8000784:	20007020 	.word	0x20007020
 8000788:	40006400 	.word	0x40006400

0800078c <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000790:	4b0f      	ldr	r3, [pc, #60]	; (80007d0 <MX_SDMMC1_SD_Init+0x44>)
 8000792:	4a10      	ldr	r2, [pc, #64]	; (80007d4 <MX_SDMMC1_SD_Init+0x48>)
 8000794:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000796:	4b0e      	ldr	r3, [pc, #56]	; (80007d0 <MX_SDMMC1_SD_Init+0x44>)
 8000798:	2200      	movs	r2, #0
 800079a:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 800079c:	4b0c      	ldr	r3, [pc, #48]	; (80007d0 <MX_SDMMC1_SD_Init+0x44>)
 800079e:	2200      	movs	r2, #0
 80007a0:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80007a2:	4b0b      	ldr	r3, [pc, #44]	; (80007d0 <MX_SDMMC1_SD_Init+0x44>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 80007a8:	4b09      	ldr	r3, [pc, #36]	; (80007d0 <MX_SDMMC1_SD_Init+0x44>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80007ae:	4b08      	ldr	r3, [pc, #32]	; (80007d0 <MX_SDMMC1_SD_Init+0x44>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 8;
 80007b4:	4b06      	ldr	r3, [pc, #24]	; (80007d0 <MX_SDMMC1_SD_Init+0x44>)
 80007b6:	2208      	movs	r2, #8
 80007b8:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */
  // Is Redundant
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 80007ba:	4805      	ldr	r0, [pc, #20]	; (80007d0 <MX_SDMMC1_SD_Init+0x44>)
 80007bc:	f004 ff14 	bl	80055e8 <HAL_SD_Init>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_SDMMC1_SD_Init+0x3e>
  {
	  Error_Handler();
 80007c6:	f000 fbab 	bl	8000f20 <Error_Handler>
  }
  /* USER CODE END SDMMC1_Init 2 */

}
 80007ca:	bf00      	nop
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	20004c8c 	.word	0x20004c8c
 80007d4:	40012c00 	.word	0x40012c00

080007d8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007dc:	4b14      	ldr	r3, [pc, #80]	; (8000830 <MX_USART3_UART_Init+0x58>)
 80007de:	4a15      	ldr	r2, [pc, #84]	; (8000834 <MX_USART3_UART_Init+0x5c>)
 80007e0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007e2:	4b13      	ldr	r3, [pc, #76]	; (8000830 <MX_USART3_UART_Init+0x58>)
 80007e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007e8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007ea:	4b11      	ldr	r3, [pc, #68]	; (8000830 <MX_USART3_UART_Init+0x58>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007f0:	4b0f      	ldr	r3, [pc, #60]	; (8000830 <MX_USART3_UART_Init+0x58>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007f6:	4b0e      	ldr	r3, [pc, #56]	; (8000830 <MX_USART3_UART_Init+0x58>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007fc:	4b0c      	ldr	r3, [pc, #48]	; (8000830 <MX_USART3_UART_Init+0x58>)
 80007fe:	220c      	movs	r2, #12
 8000800:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000802:	4b0b      	ldr	r3, [pc, #44]	; (8000830 <MX_USART3_UART_Init+0x58>)
 8000804:	2200      	movs	r2, #0
 8000806:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000808:	4b09      	ldr	r3, [pc, #36]	; (8000830 <MX_USART3_UART_Init+0x58>)
 800080a:	2200      	movs	r2, #0
 800080c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800080e:	4b08      	ldr	r3, [pc, #32]	; (8000830 <MX_USART3_UART_Init+0x58>)
 8000810:	2200      	movs	r2, #0
 8000812:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000814:	4b06      	ldr	r3, [pc, #24]	; (8000830 <MX_USART3_UART_Init+0x58>)
 8000816:	2200      	movs	r2, #0
 8000818:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800081a:	4805      	ldr	r0, [pc, #20]	; (8000830 <MX_USART3_UART_Init+0x58>)
 800081c:	f006 ffd8 	bl	80077d0 <HAL_UART_Init>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000826:	f000 fb7b 	bl	8000f20 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800082a:	bf00      	nop
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	20004c0c 	.word	0x20004c0c
 8000834:	40004800 	.word	0x40004800

08000838 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800083e:	4b10      	ldr	r3, [pc, #64]	; (8000880 <MX_DMA_Init+0x48>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	4a0f      	ldr	r2, [pc, #60]	; (8000880 <MX_DMA_Init+0x48>)
 8000844:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000848:	6313      	str	r3, [r2, #48]	; 0x30
 800084a:	4b0d      	ldr	r3, [pc, #52]	; (8000880 <MX_DMA_Init+0x48>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000852:	607b      	str	r3, [r7, #4]
 8000854:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 7, 0);
 8000856:	2200      	movs	r2, #0
 8000858:	2107      	movs	r1, #7
 800085a:	203b      	movs	r0, #59	; 0x3b
 800085c:	f001 fdb8 	bl	80023d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000860:	203b      	movs	r0, #59	; 0x3b
 8000862:	f001 fdd1 	bl	8002408 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 11, 0);
 8000866:	2200      	movs	r2, #0
 8000868:	210b      	movs	r1, #11
 800086a:	2045      	movs	r0, #69	; 0x45
 800086c:	f001 fdb0 	bl	80023d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000870:	2045      	movs	r0, #69	; 0x45
 8000872:	f001 fdc9 	bl	8002408 <HAL_NVIC_EnableIRQ>

}
 8000876:	bf00      	nop
 8000878:	3708      	adds	r7, #8
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	40023800 	.word	0x40023800

08000884 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b08c      	sub	sp, #48	; 0x30
 8000888:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800088a:	f107 031c 	add.w	r3, r7, #28
 800088e:	2200      	movs	r2, #0
 8000890:	601a      	str	r2, [r3, #0]
 8000892:	605a      	str	r2, [r3, #4]
 8000894:	609a      	str	r2, [r3, #8]
 8000896:	60da      	str	r2, [r3, #12]
 8000898:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800089a:	4b78      	ldr	r3, [pc, #480]	; (8000a7c <MX_GPIO_Init+0x1f8>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	4a77      	ldr	r2, [pc, #476]	; (8000a7c <MX_GPIO_Init+0x1f8>)
 80008a0:	f043 0304 	orr.w	r3, r3, #4
 80008a4:	6313      	str	r3, [r2, #48]	; 0x30
 80008a6:	4b75      	ldr	r3, [pc, #468]	; (8000a7c <MX_GPIO_Init+0x1f8>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	f003 0304 	and.w	r3, r3, #4
 80008ae:	61bb      	str	r3, [r7, #24]
 80008b0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008b2:	4b72      	ldr	r3, [pc, #456]	; (8000a7c <MX_GPIO_Init+0x1f8>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	4a71      	ldr	r2, [pc, #452]	; (8000a7c <MX_GPIO_Init+0x1f8>)
 80008b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008bc:	6313      	str	r3, [r2, #48]	; 0x30
 80008be:	4b6f      	ldr	r3, [pc, #444]	; (8000a7c <MX_GPIO_Init+0x1f8>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008c6:	617b      	str	r3, [r7, #20]
 80008c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ca:	4b6c      	ldr	r3, [pc, #432]	; (8000a7c <MX_GPIO_Init+0x1f8>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	4a6b      	ldr	r2, [pc, #428]	; (8000a7c <MX_GPIO_Init+0x1f8>)
 80008d0:	f043 0301 	orr.w	r3, r3, #1
 80008d4:	6313      	str	r3, [r2, #48]	; 0x30
 80008d6:	4b69      	ldr	r3, [pc, #420]	; (8000a7c <MX_GPIO_Init+0x1f8>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	f003 0301 	and.w	r3, r3, #1
 80008de:	613b      	str	r3, [r7, #16]
 80008e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008e2:	4b66      	ldr	r3, [pc, #408]	; (8000a7c <MX_GPIO_Init+0x1f8>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	4a65      	ldr	r2, [pc, #404]	; (8000a7c <MX_GPIO_Init+0x1f8>)
 80008e8:	f043 0302 	orr.w	r3, r3, #2
 80008ec:	6313      	str	r3, [r2, #48]	; 0x30
 80008ee:	4b63      	ldr	r3, [pc, #396]	; (8000a7c <MX_GPIO_Init+0x1f8>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	f003 0302 	and.w	r3, r3, #2
 80008f6:	60fb      	str	r3, [r7, #12]
 80008f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008fa:	4b60      	ldr	r3, [pc, #384]	; (8000a7c <MX_GPIO_Init+0x1f8>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	4a5f      	ldr	r2, [pc, #380]	; (8000a7c <MX_GPIO_Init+0x1f8>)
 8000900:	f043 0308 	orr.w	r3, r3, #8
 8000904:	6313      	str	r3, [r2, #48]	; 0x30
 8000906:	4b5d      	ldr	r3, [pc, #372]	; (8000a7c <MX_GPIO_Init+0x1f8>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	f003 0308 	and.w	r3, r3, #8
 800090e:	60bb      	str	r3, [r7, #8]
 8000910:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000912:	4b5a      	ldr	r3, [pc, #360]	; (8000a7c <MX_GPIO_Init+0x1f8>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	4a59      	ldr	r2, [pc, #356]	; (8000a7c <MX_GPIO_Init+0x1f8>)
 8000918:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800091c:	6313      	str	r3, [r2, #48]	; 0x30
 800091e:	4b57      	ldr	r3, [pc, #348]	; (8000a7c <MX_GPIO_Init+0x1f8>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000926:	607b      	str	r3, [r7, #4]
 8000928:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin|GPIO_PIN_8 
 800092a:	2200      	movs	r2, #0
 800092c:	f244 3181 	movw	r1, #17281	; 0x4381
 8000930:	4853      	ldr	r0, [pc, #332]	; (8000a80 <MX_GPIO_Init+0x1fc>)
 8000932:	f002 fadd 	bl	8002ef0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000936:	2200      	movs	r2, #0
 8000938:	2140      	movs	r1, #64	; 0x40
 800093a:	4852      	ldr	r0, [pc, #328]	; (8000a84 <MX_GPIO_Init+0x200>)
 800093c:	f002 fad8 	bl	8002ef0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000940:	2200      	movs	r2, #0
 8000942:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000946:	4850      	ldr	r0, [pc, #320]	; (8000a88 <MX_GPIO_Init+0x204>)
 8000948:	f002 fad2 	bl	8002ef0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800094c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000950:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000952:	4b4e      	ldr	r3, [pc, #312]	; (8000a8c <MX_GPIO_Init+0x208>)
 8000954:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	2300      	movs	r3, #0
 8000958:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800095a:	f107 031c 	add.w	r3, r7, #28
 800095e:	4619      	mov	r1, r3
 8000960:	484b      	ldr	r0, [pc, #300]	; (8000a90 <MX_GPIO_Init+0x20c>)
 8000962:	f002 f903 	bl	8002b6c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000966:	2332      	movs	r3, #50	; 0x32
 8000968:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096a:	2302      	movs	r3, #2
 800096c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096e:	2300      	movs	r3, #0
 8000970:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000972:	2303      	movs	r3, #3
 8000974:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000976:	230b      	movs	r3, #11
 8000978:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800097a:	f107 031c 	add.w	r3, r7, #28
 800097e:	4619      	mov	r1, r3
 8000980:	4843      	ldr	r0, [pc, #268]	; (8000a90 <MX_GPIO_Init+0x20c>)
 8000982:	f002 f8f3 	bl	8002b6c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000986:	2386      	movs	r3, #134	; 0x86
 8000988:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098a:	2302      	movs	r3, #2
 800098c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000992:	2303      	movs	r3, #3
 8000994:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000996:	230b      	movs	r3, #11
 8000998:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800099a:	f107 031c 	add.w	r3, r7, #28
 800099e:	4619      	mov	r1, r3
 80009a0:	4839      	ldr	r0, [pc, #228]	; (8000a88 <MX_GPIO_Init+0x204>)
 80009a2:	f002 f8e3 	bl	8002b6c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin PB8 
                           PB9 */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin|GPIO_PIN_8 
 80009a6:	f244 3381 	movw	r3, #17281	; 0x4381
 80009aa:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ac:	2301      	movs	r3, #1
 80009ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b0:	2300      	movs	r3, #0
 80009b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b4:	2300      	movs	r3, #0
 80009b6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009b8:	f107 031c 	add.w	r3, r7, #28
 80009bc:	4619      	mov	r1, r3
 80009be:	4830      	ldr	r0, [pc, #192]	; (8000a80 <MX_GPIO_Init+0x1fc>)
 80009c0:	f002 f8d4 	bl	8002b6c <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80009c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ca:	2302      	movs	r3, #2
 80009cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ce:	2300      	movs	r3, #0
 80009d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d2:	2303      	movs	r3, #3
 80009d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009d6:	230b      	movs	r3, #11
 80009d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80009da:	f107 031c 	add.w	r3, r7, #28
 80009de:	4619      	mov	r1, r3
 80009e0:	4827      	ldr	r0, [pc, #156]	; (8000a80 <MX_GPIO_Init+0x1fc>)
 80009e2:	f002 f8c3 	bl	8002b6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PG2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80009e6:	2304      	movs	r3, #4
 80009e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ea:	2300      	movs	r3, #0
 80009ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80009ee:	2302      	movs	r3, #2
 80009f0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009f2:	f107 031c 	add.w	r3, r7, #28
 80009f6:	4619      	mov	r1, r3
 80009f8:	4822      	ldr	r0, [pc, #136]	; (8000a84 <MX_GPIO_Init+0x200>)
 80009fa:	f002 f8b7 	bl	8002b6c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80009fe:	2340      	movs	r3, #64	; 0x40
 8000a00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a02:	2301      	movs	r3, #1
 8000a04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a06:	2300      	movs	r3, #0
 8000a08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a0e:	f107 031c 	add.w	r3, r7, #28
 8000a12:	4619      	mov	r1, r3
 8000a14:	481b      	ldr	r0, [pc, #108]	; (8000a84 <MX_GPIO_Init+0x200>)
 8000a16:	f002 f8a9 	bl	8002b6c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a1a:	2380      	movs	r3, #128	; 0x80
 8000a1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a22:	2300      	movs	r3, #0
 8000a24:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a26:	f107 031c 	add.w	r3, r7, #28
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4815      	ldr	r0, [pc, #84]	; (8000a84 <MX_GPIO_Init+0x200>)
 8000a2e:	f002 f89d 	bl	8002b6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000a32:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a40:	2300      	movs	r3, #0
 8000a42:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a44:	f107 031c 	add.w	r3, r7, #28
 8000a48:	4619      	mov	r1, r3
 8000a4a:	480f      	ldr	r0, [pc, #60]	; (8000a88 <MX_GPIO_Init+0x204>)
 8000a4c:	f002 f88e 	bl	8002b6c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000a50:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000a54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a56:	2302      	movs	r3, #2
 8000a58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a5e:	2303      	movs	r3, #3
 8000a60:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a62:	230b      	movs	r3, #11
 8000a64:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a66:	f107 031c 	add.w	r3, r7, #28
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	4805      	ldr	r0, [pc, #20]	; (8000a84 <MX_GPIO_Init+0x200>)
 8000a6e:	f002 f87d 	bl	8002b6c <HAL_GPIO_Init>

}
 8000a72:	bf00      	nop
 8000a74:	3730      	adds	r7, #48	; 0x30
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	40023800 	.word	0x40023800
 8000a80:	40020400 	.word	0x40020400
 8000a84:	40021800 	.word	0x40021800
 8000a88:	40020000 	.word	0x40020000
 8000a8c:	10110000 	.word	0x10110000
 8000a90:	40020800 	.word	0x40020800

08000a94 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8000a94:	b590      	push	{r4, r7, lr}
 8000a96:	b085      	sub	sp, #20
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000aa2:	4823      	ldr	r0, [pc, #140]	; (8000b30 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 8000aa4:	f002 fa24 	bl	8002ef0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_SET);
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	2180      	movs	r1, #128	; 0x80
 8000aac:	4820      	ldr	r0, [pc, #128]	; (8000b30 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 8000aae:	f002 fa1f 	bl	8002ef0 <HAL_GPIO_WritePin>
	if(HAL_CAN_GetRxMessage(&hcan1,CAN_RX_FIFO0,&RxHeader,RxData) == HAL_OK){
 8000ab2:	4b20      	ldr	r3, [pc, #128]	; (8000b34 <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 8000ab4:	4a20      	ldr	r2, [pc, #128]	; (8000b38 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	4820      	ldr	r0, [pc, #128]	; (8000b3c <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
 8000aba:	f001 f848 	bl	8001b4e <HAL_CAN_GetRxMessage>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d101      	bne.n	8000ac8 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>
		Get_Data();
 8000ac4:	f000 f844 	bl	8000b50 <Get_Data>
	}
	// Test if the buffer is full
	if(ind >= 32){
 8000ac8:	4b1d      	ldr	r3, [pc, #116]	; (8000b40 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	2b1f      	cmp	r3, #31
 8000ace:	d91f      	bls.n	8000b10 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>
		// Move the acquired data to the writing buffer
		for(uint8_t i=0;i<32;i++){
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	73fb      	strb	r3, [r7, #15]
 8000ad4:	e016      	b.n	8000b04 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>
			SD_buffer[i] = buffer[i];
 8000ad6:	7bfb      	ldrb	r3, [r7, #15]
 8000ad8:	7bfa      	ldrb	r2, [r7, #15]
 8000ada:	491a      	ldr	r1, [pc, #104]	; (8000b44 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 8000adc:	0112      	lsls	r2, r2, #4
 8000ade:	4411      	add	r1, r2
 8000ae0:	4a19      	ldr	r2, [pc, #100]	; (8000b48 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>)
 8000ae2:	011b      	lsls	r3, r3, #4
 8000ae4:	441a      	add	r2, r3
 8000ae6:	460b      	mov	r3, r1
 8000ae8:	6814      	ldr	r4, [r2, #0]
 8000aea:	6850      	ldr	r0, [r2, #4]
 8000aec:	6891      	ldr	r1, [r2, #8]
 8000aee:	68d2      	ldr	r2, [r2, #12]
 8000af0:	601c      	str	r4, [r3, #0]
 8000af2:	6058      	str	r0, [r3, #4]
 8000af4:	6099      	str	r1, [r3, #8]
 8000af6:	60da      	str	r2, [r3, #12]
			wf = 1;
 8000af8:	4b14      	ldr	r3, [pc, #80]	; (8000b4c <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 8000afa:	2201      	movs	r2, #1
 8000afc:	701a      	strb	r2, [r3, #0]
		for(uint8_t i=0;i<32;i++){
 8000afe:	7bfb      	ldrb	r3, [r7, #15]
 8000b00:	3301      	adds	r3, #1
 8000b02:	73fb      	strb	r3, [r7, #15]
 8000b04:	7bfb      	ldrb	r3, [r7, #15]
 8000b06:	2b1f      	cmp	r3, #31
 8000b08:	d9e5      	bls.n	8000ad6 <HAL_CAN_RxFifo0MsgPendingCallback+0x42>
		}
		ind = 0;
 8000b0a:	4b0d      	ldr	r3, [pc, #52]	; (8000b40 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	701a      	strb	r2, [r3, #0]
		// Stop the data request to write the buffer to the memory
		//HAL_TIM_Base_Stop_IT(&htim14);
		//HAL_CAN_DeactivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8000b10:	2200      	movs	r2, #0
 8000b12:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b16:	4806      	ldr	r0, [pc, #24]	; (8000b30 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 8000b18:	f002 f9ea 	bl	8002ef0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_RESET);
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	2180      	movs	r1, #128	; 0x80
 8000b20:	4803      	ldr	r0, [pc, #12]	; (8000b30 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 8000b22:	f002 f9e5 	bl	8002ef0 <HAL_GPIO_WritePin>
}
 8000b26:	bf00      	nop
 8000b28:	3714      	adds	r7, #20
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd90      	pop	{r4, r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	40020400 	.word	0x40020400
 8000b34:	20007018 	.word	0x20007018
 8000b38:	200072c4 	.word	0x200072c4
 8000b3c:	20007020 	.word	0x20007020
 8000b40:	2000020c 	.word	0x2000020c
 8000b44:	200070c4 	.word	0x200070c4
 8000b48:	20005d30 	.word	0x20005d30
 8000b4c:	2000020e 	.word	0x2000020e

08000b50 <Get_Data>:

void Get_Data(){
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
	 *   | |       ID
	 *   | | _______________
	 * -|-|-|x|x|x|x|x|x|x|x|
	 *   9 8 7 6 5 4 3 2 1 0
	 */
	if((RxHeader.StdId>>8) == 0x00){
 8000b54:	4b73      	ldr	r3, [pc, #460]	; (8000d24 <Get_Data+0x1d4>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	0a1b      	lsrs	r3, r3, #8
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d169      	bne.n	8000c32 <Get_Data+0xe2>
		buffer[ind].Header_H = ((uint8_t)RxHeader.StdId & 0x1F)<<1;
 8000b5e:	4b71      	ldr	r3, [pc, #452]	; (8000d24 <Get_Data+0x1d4>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	b2db      	uxtb	r3, r3
 8000b64:	005b      	lsls	r3, r3, #1
 8000b66:	b2db      	uxtb	r3, r3
 8000b68:	4a6f      	ldr	r2, [pc, #444]	; (8000d28 <Get_Data+0x1d8>)
 8000b6a:	7812      	ldrb	r2, [r2, #0]
 8000b6c:	4610      	mov	r0, r2
 8000b6e:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8000b72:	b2d9      	uxtb	r1, r3
 8000b74:	4a6d      	ldr	r2, [pc, #436]	; (8000d2c <Get_Data+0x1dc>)
 8000b76:	0103      	lsls	r3, r0, #4
 8000b78:	4413      	add	r3, r2
 8000b7a:	460a      	mov	r2, r1
 8000b7c:	701a      	strb	r2, [r3, #0]
		buffer[ind].Header_L = RxData[0];
 8000b7e:	4b6a      	ldr	r3, [pc, #424]	; (8000d28 <Get_Data+0x1d8>)
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	4618      	mov	r0, r3
 8000b84:	4b6a      	ldr	r3, [pc, #424]	; (8000d30 <Get_Data+0x1e0>)
 8000b86:	7819      	ldrb	r1, [r3, #0]
 8000b88:	4a68      	ldr	r2, [pc, #416]	; (8000d2c <Get_Data+0x1dc>)
 8000b8a:	0103      	lsls	r3, r0, #4
 8000b8c:	4413      	add	r3, r2
 8000b8e:	3302      	adds	r3, #2
 8000b90:	460a      	mov	r2, r1
 8000b92:	701a      	strb	r2, [r3, #0]
		buffer[ind].Header_M = RxData[1];
 8000b94:	4b64      	ldr	r3, [pc, #400]	; (8000d28 <Get_Data+0x1d8>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	4618      	mov	r0, r3
 8000b9a:	4b65      	ldr	r3, [pc, #404]	; (8000d30 <Get_Data+0x1e0>)
 8000b9c:	7859      	ldrb	r1, [r3, #1]
 8000b9e:	4a63      	ldr	r2, [pc, #396]	; (8000d2c <Get_Data+0x1dc>)
 8000ba0:	0103      	lsls	r3, r0, #4
 8000ba2:	4413      	add	r3, r2
 8000ba4:	3301      	adds	r3, #1
 8000ba6:	460a      	mov	r2, r1
 8000ba8:	701a      	strb	r2, [r3, #0]
		buffer[ind].Header_H |= (RxData[2] & 0x01);
 8000baa:	4b5f      	ldr	r3, [pc, #380]	; (8000d28 <Get_Data+0x1d8>)
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	4a5f      	ldr	r2, [pc, #380]	; (8000d2c <Get_Data+0x1dc>)
 8000bb0:	011b      	lsls	r3, r3, #4
 8000bb2:	4413      	add	r3, r2
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	b25a      	sxtb	r2, r3
 8000bb8:	4b5d      	ldr	r3, [pc, #372]	; (8000d30 <Get_Data+0x1e0>)
 8000bba:	789b      	ldrb	r3, [r3, #2]
 8000bbc:	b25b      	sxtb	r3, r3
 8000bbe:	f003 0301 	and.w	r3, r3, #1
 8000bc2:	b25b      	sxtb	r3, r3
 8000bc4:	4313      	orrs	r3, r2
 8000bc6:	b25a      	sxtb	r2, r3
 8000bc8:	4b57      	ldr	r3, [pc, #348]	; (8000d28 <Get_Data+0x1d8>)
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	b2d1      	uxtb	r1, r2
 8000bce:	4a57      	ldr	r2, [pc, #348]	; (8000d2c <Get_Data+0x1dc>)
 8000bd0:	011b      	lsls	r3, r3, #4
 8000bd2:	4413      	add	r3, r2
 8000bd4:	460a      	mov	r2, r1
 8000bd6:	701a      	strb	r2, [r3, #0]
		buffer[ind].GyrX_L = RxData[4];
 8000bd8:	4b53      	ldr	r3, [pc, #332]	; (8000d28 <Get_Data+0x1d8>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	4618      	mov	r0, r3
 8000bde:	4b54      	ldr	r3, [pc, #336]	; (8000d30 <Get_Data+0x1e0>)
 8000be0:	7919      	ldrb	r1, [r3, #4]
 8000be2:	4a52      	ldr	r2, [pc, #328]	; (8000d2c <Get_Data+0x1dc>)
 8000be4:	0103      	lsls	r3, r0, #4
 8000be6:	4413      	add	r3, r2
 8000be8:	330a      	adds	r3, #10
 8000bea:	460a      	mov	r2, r1
 8000bec:	701a      	strb	r2, [r3, #0]
		buffer[ind].GyrX_H = RxData[5];
 8000bee:	4b4e      	ldr	r3, [pc, #312]	; (8000d28 <Get_Data+0x1d8>)
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	4b4e      	ldr	r3, [pc, #312]	; (8000d30 <Get_Data+0x1e0>)
 8000bf6:	7959      	ldrb	r1, [r3, #5]
 8000bf8:	4a4c      	ldr	r2, [pc, #304]	; (8000d2c <Get_Data+0x1dc>)
 8000bfa:	0103      	lsls	r3, r0, #4
 8000bfc:	4413      	add	r3, r2
 8000bfe:	3309      	adds	r3, #9
 8000c00:	460a      	mov	r2, r1
 8000c02:	701a      	strb	r2, [r3, #0]
		buffer[ind].GyrX_L = RxData[6];
 8000c04:	4b48      	ldr	r3, [pc, #288]	; (8000d28 <Get_Data+0x1d8>)
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	4618      	mov	r0, r3
 8000c0a:	4b49      	ldr	r3, [pc, #292]	; (8000d30 <Get_Data+0x1e0>)
 8000c0c:	7999      	ldrb	r1, [r3, #6]
 8000c0e:	4a47      	ldr	r2, [pc, #284]	; (8000d2c <Get_Data+0x1dc>)
 8000c10:	0103      	lsls	r3, r0, #4
 8000c12:	4413      	add	r3, r2
 8000c14:	330a      	adds	r3, #10
 8000c16:	460a      	mov	r2, r1
 8000c18:	701a      	strb	r2, [r3, #0]
		buffer[ind].GyrY_H = RxData[7];
 8000c1a:	4b43      	ldr	r3, [pc, #268]	; (8000d28 <Get_Data+0x1d8>)
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	4618      	mov	r0, r3
 8000c20:	4b43      	ldr	r3, [pc, #268]	; (8000d30 <Get_Data+0x1e0>)
 8000c22:	79d9      	ldrb	r1, [r3, #7]
 8000c24:	4a41      	ldr	r2, [pc, #260]	; (8000d2c <Get_Data+0x1dc>)
 8000c26:	0103      	lsls	r3, r0, #4
 8000c28:	4413      	add	r3, r2
 8000c2a:	330b      	adds	r3, #11
 8000c2c:	460a      	mov	r2, r1
 8000c2e:	701a      	strb	r2, [r3, #0]
		buffer[ind].AccZ_H = RxData[5];
		buffer[ind].Temp_L = RxData[6];
		buffer[ind].Temp_H = RxData[7];
		ind++;
	}
}
 8000c30:	e072      	b.n	8000d18 <Get_Data+0x1c8>
	else if((RxHeader.StdId>>8) == 0x01){
 8000c32:	4b3c      	ldr	r3, [pc, #240]	; (8000d24 <Get_Data+0x1d4>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	0a1b      	lsrs	r3, r3, #8
 8000c38:	2b01      	cmp	r3, #1
 8000c3a:	d16d      	bne.n	8000d18 <Get_Data+0x1c8>
		buffer[ind].Header_H = ((uint8_t)RxHeader.StdId & 0x1F)<<1;
 8000c3c:	4b39      	ldr	r3, [pc, #228]	; (8000d24 <Get_Data+0x1d4>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	b2db      	uxtb	r3, r3
 8000c42:	005b      	lsls	r3, r3, #1
 8000c44:	b2db      	uxtb	r3, r3
 8000c46:	4a38      	ldr	r2, [pc, #224]	; (8000d28 <Get_Data+0x1d8>)
 8000c48:	7812      	ldrb	r2, [r2, #0]
 8000c4a:	4610      	mov	r0, r2
 8000c4c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8000c50:	b2d9      	uxtb	r1, r3
 8000c52:	4a36      	ldr	r2, [pc, #216]	; (8000d2c <Get_Data+0x1dc>)
 8000c54:	0103      	lsls	r3, r0, #4
 8000c56:	4413      	add	r3, r2
 8000c58:	460a      	mov	r2, r1
 8000c5a:	701a      	strb	r2, [r3, #0]
		buffer[ind].AccX_L = RxData[0];
 8000c5c:	4b32      	ldr	r3, [pc, #200]	; (8000d28 <Get_Data+0x1d8>)
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	4618      	mov	r0, r3
 8000c62:	4b33      	ldr	r3, [pc, #204]	; (8000d30 <Get_Data+0x1e0>)
 8000c64:	7819      	ldrb	r1, [r3, #0]
 8000c66:	4a31      	ldr	r2, [pc, #196]	; (8000d2c <Get_Data+0x1dc>)
 8000c68:	0103      	lsls	r3, r0, #4
 8000c6a:	4413      	add	r3, r2
 8000c6c:	3304      	adds	r3, #4
 8000c6e:	460a      	mov	r2, r1
 8000c70:	701a      	strb	r2, [r3, #0]
		buffer[ind].AccX_H = RxData[1];
 8000c72:	4b2d      	ldr	r3, [pc, #180]	; (8000d28 <Get_Data+0x1d8>)
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	4618      	mov	r0, r3
 8000c78:	4b2d      	ldr	r3, [pc, #180]	; (8000d30 <Get_Data+0x1e0>)
 8000c7a:	7859      	ldrb	r1, [r3, #1]
 8000c7c:	4a2b      	ldr	r2, [pc, #172]	; (8000d2c <Get_Data+0x1dc>)
 8000c7e:	0103      	lsls	r3, r0, #4
 8000c80:	4413      	add	r3, r2
 8000c82:	3303      	adds	r3, #3
 8000c84:	460a      	mov	r2, r1
 8000c86:	701a      	strb	r2, [r3, #0]
		buffer[ind].AccY_L = RxData[2];
 8000c88:	4b27      	ldr	r3, [pc, #156]	; (8000d28 <Get_Data+0x1d8>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	4b28      	ldr	r3, [pc, #160]	; (8000d30 <Get_Data+0x1e0>)
 8000c90:	7899      	ldrb	r1, [r3, #2]
 8000c92:	4a26      	ldr	r2, [pc, #152]	; (8000d2c <Get_Data+0x1dc>)
 8000c94:	0103      	lsls	r3, r0, #4
 8000c96:	4413      	add	r3, r2
 8000c98:	3306      	adds	r3, #6
 8000c9a:	460a      	mov	r2, r1
 8000c9c:	701a      	strb	r2, [r3, #0]
		buffer[ind].AccY_H = RxData[3];
 8000c9e:	4b22      	ldr	r3, [pc, #136]	; (8000d28 <Get_Data+0x1d8>)
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	4b22      	ldr	r3, [pc, #136]	; (8000d30 <Get_Data+0x1e0>)
 8000ca6:	78d9      	ldrb	r1, [r3, #3]
 8000ca8:	4a20      	ldr	r2, [pc, #128]	; (8000d2c <Get_Data+0x1dc>)
 8000caa:	0103      	lsls	r3, r0, #4
 8000cac:	4413      	add	r3, r2
 8000cae:	3305      	adds	r3, #5
 8000cb0:	460a      	mov	r2, r1
 8000cb2:	701a      	strb	r2, [r3, #0]
		buffer[ind].AccZ_L = RxData[4];
 8000cb4:	4b1c      	ldr	r3, [pc, #112]	; (8000d28 <Get_Data+0x1d8>)
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	4618      	mov	r0, r3
 8000cba:	4b1d      	ldr	r3, [pc, #116]	; (8000d30 <Get_Data+0x1e0>)
 8000cbc:	7919      	ldrb	r1, [r3, #4]
 8000cbe:	4a1b      	ldr	r2, [pc, #108]	; (8000d2c <Get_Data+0x1dc>)
 8000cc0:	0103      	lsls	r3, r0, #4
 8000cc2:	4413      	add	r3, r2
 8000cc4:	3308      	adds	r3, #8
 8000cc6:	460a      	mov	r2, r1
 8000cc8:	701a      	strb	r2, [r3, #0]
		buffer[ind].AccZ_H = RxData[5];
 8000cca:	4b17      	ldr	r3, [pc, #92]	; (8000d28 <Get_Data+0x1d8>)
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	4618      	mov	r0, r3
 8000cd0:	4b17      	ldr	r3, [pc, #92]	; (8000d30 <Get_Data+0x1e0>)
 8000cd2:	7959      	ldrb	r1, [r3, #5]
 8000cd4:	4a15      	ldr	r2, [pc, #84]	; (8000d2c <Get_Data+0x1dc>)
 8000cd6:	0103      	lsls	r3, r0, #4
 8000cd8:	4413      	add	r3, r2
 8000cda:	3307      	adds	r3, #7
 8000cdc:	460a      	mov	r2, r1
 8000cde:	701a      	strb	r2, [r3, #0]
		buffer[ind].Temp_L = RxData[6];
 8000ce0:	4b11      	ldr	r3, [pc, #68]	; (8000d28 <Get_Data+0x1d8>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	4b12      	ldr	r3, [pc, #72]	; (8000d30 <Get_Data+0x1e0>)
 8000ce8:	7999      	ldrb	r1, [r3, #6]
 8000cea:	4a10      	ldr	r2, [pc, #64]	; (8000d2c <Get_Data+0x1dc>)
 8000cec:	0103      	lsls	r3, r0, #4
 8000cee:	4413      	add	r3, r2
 8000cf0:	330e      	adds	r3, #14
 8000cf2:	460a      	mov	r2, r1
 8000cf4:	701a      	strb	r2, [r3, #0]
		buffer[ind].Temp_H = RxData[7];
 8000cf6:	4b0c      	ldr	r3, [pc, #48]	; (8000d28 <Get_Data+0x1d8>)
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	4b0c      	ldr	r3, [pc, #48]	; (8000d30 <Get_Data+0x1e0>)
 8000cfe:	79d9      	ldrb	r1, [r3, #7]
 8000d00:	4a0a      	ldr	r2, [pc, #40]	; (8000d2c <Get_Data+0x1dc>)
 8000d02:	0103      	lsls	r3, r0, #4
 8000d04:	4413      	add	r3, r2
 8000d06:	330d      	adds	r3, #13
 8000d08:	460a      	mov	r2, r1
 8000d0a:	701a      	strb	r2, [r3, #0]
		ind++;
 8000d0c:	4b06      	ldr	r3, [pc, #24]	; (8000d28 <Get_Data+0x1d8>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	3301      	adds	r3, #1
 8000d12:	b2da      	uxtb	r2, r3
 8000d14:	4b04      	ldr	r3, [pc, #16]	; (8000d28 <Get_Data+0x1d8>)
 8000d16:	701a      	strb	r2, [r3, #0]
}
 8000d18:	bf00      	nop
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	200072c4 	.word	0x200072c4
 8000d28:	2000020c 	.word	0x2000020c
 8000d2c:	20005d30 	.word	0x20005d30
 8000d30:	20007018 	.word	0x20007018

08000d34 <CAN_Config>:

void CAN_Config(void){
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
	TxHeader.StdId = 0x01;
 8000d38:	4b16      	ldr	r3, [pc, #88]	; (8000d94 <CAN_Config+0x60>)
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	601a      	str	r2, [r3, #0]
	TxHeader.ExtId = 0x01;
 8000d3e:	4b15      	ldr	r3, [pc, #84]	; (8000d94 <CAN_Config+0x60>)
 8000d40:	2201      	movs	r2, #1
 8000d42:	605a      	str	r2, [r3, #4]
	TxHeader.RTR = CAN_RTR_DATA;
 8000d44:	4b13      	ldr	r3, [pc, #76]	; (8000d94 <CAN_Config+0x60>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	60da      	str	r2, [r3, #12]
	TxHeader.IDE = CAN_ID_EXT;
 8000d4a:	4b12      	ldr	r3, [pc, #72]	; (8000d94 <CAN_Config+0x60>)
 8000d4c:	2204      	movs	r2, #4
 8000d4e:	609a      	str	r2, [r3, #8]
	TxHeader.DLC = 8;
 8000d50:	4b10      	ldr	r3, [pc, #64]	; (8000d94 <CAN_Config+0x60>)
 8000d52:	2208      	movs	r2, #8
 8000d54:	611a      	str	r2, [r3, #16]
	TxHeader.TransmitGlobalTime = DISABLE;
 8000d56:	4b0f      	ldr	r3, [pc, #60]	; (8000d94 <CAN_Config+0x60>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	751a      	strb	r2, [r3, #20]
	sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000d5c:	4b0e      	ldr	r3, [pc, #56]	; (8000d98 <CAN_Config+0x64>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterIdHigh = 0x0;
 8000d62:	4b0d      	ldr	r3, [pc, #52]	; (8000d98 <CAN_Config+0x64>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIdLow = 0;
 8000d68:	4b0b      	ldr	r3, [pc, #44]	; (8000d98 <CAN_Config+0x64>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterMaskIdHigh = 0x0;
 8000d6e:	4b0a      	ldr	r3, [pc, #40]	; (8000d98 <CAN_Config+0x64>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow = 0;
 8000d74:	4b08      	ldr	r3, [pc, #32]	; (8000d98 <CAN_Config+0x64>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000d7a:	4b07      	ldr	r3, [pc, #28]	; (8000d98 <CAN_Config+0x64>)
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	61da      	str	r2, [r3, #28]
	sFilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 8000d80:	4b05      	ldr	r3, [pc, #20]	; (8000d98 <CAN_Config+0x64>)
 8000d82:	2201      	movs	r2, #1
 8000d84:	621a      	str	r2, [r3, #32]
	HAL_CAN_ConfigFilter(&hcan1,&sFilterConfig);
 8000d86:	4904      	ldr	r1, [pc, #16]	; (8000d98 <CAN_Config+0x64>)
 8000d88:	4804      	ldr	r0, [pc, #16]	; (8000d9c <CAN_Config+0x68>)
 8000d8a:	f000 fcd5 	bl	8001738 <HAL_CAN_ConfigFilter>
}
 8000d8e:	bf00      	nop
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	2000704c 	.word	0x2000704c
 8000d98:	20004be0 	.word	0x20004be0
 8000d9c:	20007020 	.word	0x20007020

08000da0 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  //MX_USB_DEVICE_Init();
  /* USER CODE BEGIN 5 */
	// Mount filesystem only one time
	if(flag == 0){
 8000da8:	4b39      	ldr	r3, [pc, #228]	; (8000e90 <StartDefaultTask+0xf0>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d128      	bne.n	8000e02 <StartDefaultTask+0x62>


		res = f_mount(&SDFatFs, SDPath, 1);
 8000db0:	2201      	movs	r2, #1
 8000db2:	4938      	ldr	r1, [pc, #224]	; (8000e94 <StartDefaultTask+0xf4>)
 8000db4:	4838      	ldr	r0, [pc, #224]	; (8000e98 <StartDefaultTask+0xf8>)
 8000db6:	f00f fdfd 	bl	80109b4 <f_mount>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	461a      	mov	r2, r3
 8000dbe:	4b37      	ldr	r3, [pc, #220]	; (8000e9c <StartDefaultTask+0xfc>)
 8000dc0:	701a      	strb	r2, [r3, #0]
		res = f_open(&SDFile, &path[0], FA_CREATE_ALWAYS);
 8000dc2:	2208      	movs	r2, #8
 8000dc4:	4936      	ldr	r1, [pc, #216]	; (8000ea0 <StartDefaultTask+0x100>)
 8000dc6:	4837      	ldr	r0, [pc, #220]	; (8000ea4 <StartDefaultTask+0x104>)
 8000dc8:	f00f fe58 	bl	8010a7c <f_open>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	461a      	mov	r2, r3
 8000dd0:	4b32      	ldr	r3, [pc, #200]	; (8000e9c <StartDefaultTask+0xfc>)
 8000dd2:	701a      	strb	r2, [r3, #0]
		res = f_close(&SDFile);
 8000dd4:	4833      	ldr	r0, [pc, #204]	; (8000ea4 <StartDefaultTask+0x104>)
 8000dd6:	f010 fc79 	bl	80116cc <f_close>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	461a      	mov	r2, r3
 8000dde:	4b2f      	ldr	r3, [pc, #188]	; (8000e9c <StartDefaultTask+0xfc>)
 8000de0:	701a      	strb	r2, [r3, #0]
		res = f_open(&SDFile, &path[0], FA_OPEN_APPEND | FA_WRITE);
 8000de2:	2232      	movs	r2, #50	; 0x32
 8000de4:	492e      	ldr	r1, [pc, #184]	; (8000ea0 <StartDefaultTask+0x100>)
 8000de6:	482f      	ldr	r0, [pc, #188]	; (8000ea4 <StartDefaultTask+0x104>)
 8000de8:	f00f fe48 	bl	8010a7c <f_open>
 8000dec:	4603      	mov	r3, r0
 8000dee:	461a      	mov	r2, r3
 8000df0:	4b2a      	ldr	r3, [pc, #168]	; (8000e9c <StartDefaultTask+0xfc>)
 8000df2:	701a      	strb	r2, [r3, #0]
		flag = 1;
 8000df4:	4b26      	ldr	r3, [pc, #152]	; (8000e90 <StartDefaultTask+0xf0>)
 8000df6:	2201      	movs	r2, #1
 8000df8:	701a      	strb	r2, [r3, #0]


		// Start 5mS timer to trigger the data request
		HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000dfa:	2102      	movs	r1, #2
 8000dfc:	482a      	ldr	r0, [pc, #168]	; (8000ea8 <StartDefaultTask+0x108>)
 8000dfe:	f000 ffb8 	bl	8001d72 <HAL_CAN_ActivateNotification>
		//HAL_TIM_Base_Start_IT(&htim14);
	}
  /* Infinite loop */
  for(;;)
  {
	if(HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin) == GPIO_PIN_SET){
 8000e02:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e06:	4829      	ldr	r0, [pc, #164]	; (8000eac <StartDefaultTask+0x10c>)
 8000e08:	f002 f85a 	bl	8002ec0 <HAL_GPIO_ReadPin>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b01      	cmp	r3, #1
 8000e10:	d115      	bne.n	8000e3e <StartDefaultTask+0x9e>
		HAL_CAN_DeactivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000e12:	2102      	movs	r1, #2
 8000e14:	4824      	ldr	r0, [pc, #144]	; (8000ea8 <StartDefaultTask+0x108>)
 8000e16:	f000 ffd2 	bl	8001dbe <HAL_CAN_DeactivateNotification>
		//HAL_TIM_Base_Stop_IT(&htim14);
		res = f_close(&SDFile);
 8000e1a:	4822      	ldr	r0, [pc, #136]	; (8000ea4 <StartDefaultTask+0x104>)
 8000e1c:	f010 fc56 	bl	80116cc <f_close>
 8000e20:	4603      	mov	r3, r0
 8000e22:	461a      	mov	r2, r3
 8000e24:	4b1d      	ldr	r3, [pc, #116]	; (8000e9c <StartDefaultTask+0xfc>)
 8000e26:	701a      	strb	r2, [r3, #0]
		//NVIC_DisableIRQ(OTG_FS_IRQn);



		MX_USB_DEVICE_Init();
 8000e28:	f014 fac0 	bl	80153ac <MX_USB_DEVICE_Init>
		NVIC_EnableIRQ(OTG_FS_IRQn);
 8000e2c:	2043      	movs	r0, #67	; 0x43
 8000e2e:	f7ff fb87 	bl	8000540 <__NVIC_EnableIRQ>

		//vPortEndScheduler();
		//NVIC_EnableIRQ(OTG_FS_IRQn);
		HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_SET);
 8000e32:	2201      	movs	r2, #1
 8000e34:	2180      	movs	r1, #128	; 0x80
 8000e36:	481e      	ldr	r0, [pc, #120]	; (8000eb0 <StartDefaultTask+0x110>)
 8000e38:	f002 f85a 	bl	8002ef0 <HAL_GPIO_WritePin>
 8000e3c:	e7e1      	b.n	8000e02 <StartDefaultTask+0x62>
	}
	else{
		// Test if the data is ready to be written
		if(wf != 0){
 8000e3e:	4b1d      	ldr	r3, [pc, #116]	; (8000eb4 <StartDefaultTask+0x114>)
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d0dd      	beq.n	8000e02 <StartDefaultTask+0x62>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8000e46:	2201      	movs	r2, #1
 8000e48:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e4c:	4818      	ldr	r0, [pc, #96]	; (8000eb0 <StartDefaultTask+0x110>)
 8000e4e:	f002 f84f 	bl	8002ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
 8000e52:	2201      	movs	r2, #1
 8000e54:	2101      	movs	r1, #1
 8000e56:	4816      	ldr	r0, [pc, #88]	; (8000eb0 <StartDefaultTask+0x110>)
 8000e58:	f002 f84a 	bl	8002ef0 <HAL_GPIO_WritePin>
			// Write the buffer to the memory
			res = f_write(&SDFile, SD_buffer, sizeof(SD_buffer), &writeBuff);
 8000e5c:	4b16      	ldr	r3, [pc, #88]	; (8000eb8 <StartDefaultTask+0x118>)
 8000e5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e62:	4916      	ldr	r1, [pc, #88]	; (8000ebc <StartDefaultTask+0x11c>)
 8000e64:	480f      	ldr	r0, [pc, #60]	; (8000ea4 <StartDefaultTask+0x104>)
 8000e66:	f010 f8e5 	bl	8011034 <f_write>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	4b0b      	ldr	r3, [pc, #44]	; (8000e9c <StartDefaultTask+0xfc>)
 8000e70:	701a      	strb	r2, [r3, #0]
			wf = 0;
 8000e72:	4b10      	ldr	r3, [pc, #64]	; (8000eb4 <StartDefaultTask+0x114>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8000e78:	2200      	movs	r2, #0
 8000e7a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e7e:	480c      	ldr	r0, [pc, #48]	; (8000eb0 <StartDefaultTask+0x110>)
 8000e80:	f002 f836 	bl	8002ef0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET);
 8000e84:	2200      	movs	r2, #0
 8000e86:	2101      	movs	r1, #1
 8000e88:	4809      	ldr	r0, [pc, #36]	; (8000eb0 <StartDefaultTask+0x110>)
 8000e8a:	f002 f831 	bl	8002ef0 <HAL_GPIO_WritePin>
	if(HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin) == GPIO_PIN_SET){
 8000e8e:	e7b8      	b.n	8000e02 <StartDefaultTask+0x62>
 8000e90:	2000020d 	.word	0x2000020d
 8000e94:	2000732c 	.word	0x2000732c
 8000e98:	20005f30 	.word	0x20005f30
 8000e9c:	20007048 	.word	0x20007048
 8000ea0:	20000000 	.word	0x20000000
 8000ea4:	20007330 	.word	0x20007330
 8000ea8:	20007020 	.word	0x20007020
 8000eac:	40020800 	.word	0x40020800
 8000eb0:	40020400 	.word	0x40020400
 8000eb4:	2000020e 	.word	0x2000020e
 8000eb8:	200072e0 	.word	0x200072e0
 8000ebc:	200070c4 	.word	0x200070c4

08000ec0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a0e      	ldr	r2, [pc, #56]	; (8000f08 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d101      	bne.n	8000ed6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ed2:	f000 faf3 	bl	80014bc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM14) {
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4a0c      	ldr	r2, [pc, #48]	; (8000f0c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000edc:	4293      	cmp	r3, r2
 8000ede:	d10f      	bne.n	8000f00 <HAL_TIM_PeriodElapsedCallback+0x40>
	  // Send a Data request
	  TxData[0] = 0x01;
 8000ee0:	4b0b      	ldr	r3, [pc, #44]	; (8000f10 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	701a      	strb	r2, [r3, #0]
	  if(HAL_CAN_AddTxMessage(&hcan1,&TxHeader,TxData,&TxMailbox) == HAL_OK){
 8000ee6:	4b0b      	ldr	r3, [pc, #44]	; (8000f14 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000ee8:	4a09      	ldr	r2, [pc, #36]	; (8000f10 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000eea:	490b      	ldr	r1, [pc, #44]	; (8000f18 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000eec:	480b      	ldr	r0, [pc, #44]	; (8000f1c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000eee:	f000 fd53 	bl	8001998 <HAL_CAN_AddTxMessage>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d103      	bne.n	8000f00 <HAL_TIM_PeriodElapsedCallback+0x40>
		  // Listen can bus interrupt
		  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000ef8:	2102      	movs	r1, #2
 8000efa:	4808      	ldr	r0, [pc, #32]	; (8000f1c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000efc:	f000 ff39 	bl	8001d72 <HAL_CAN_ActivateNotification>
	  }
  }
  /* USER CODE END Callback 1 */
}
 8000f00:	bf00      	nop
 8000f02:	3708      	adds	r7, #8
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	40001000 	.word	0x40001000
 8000f0c:	40002000 	.word	0x40002000
 8000f10:	20006f70 	.word	0x20006f70
 8000f14:	20006f78 	.word	0x20006f78
 8000f18:	2000704c 	.word	0x2000704c
 8000f1c:	20007020 	.word	0x20007020

08000f20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	while(1){
		HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
 8000f24:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f28:	4803      	ldr	r0, [pc, #12]	; (8000f38 <Error_Handler+0x18>)
 8000f2a:	f001 fffa 	bl	8002f22 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8000f2e:	2064      	movs	r0, #100	; 0x64
 8000f30:	f000 fae4 	bl	80014fc <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
 8000f34:	e7f6      	b.n	8000f24 <Error_Handler+0x4>
 8000f36:	bf00      	nop
 8000f38:	40020400 	.word	0x40020400

08000f3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000f42:	4b11      	ldr	r3, [pc, #68]	; (8000f88 <HAL_MspInit+0x4c>)
 8000f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f46:	4a10      	ldr	r2, [pc, #64]	; (8000f88 <HAL_MspInit+0x4c>)
 8000f48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f4e:	4b0e      	ldr	r3, [pc, #56]	; (8000f88 <HAL_MspInit+0x4c>)
 8000f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f56:	607b      	str	r3, [r7, #4]
 8000f58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f5a:	4b0b      	ldr	r3, [pc, #44]	; (8000f88 <HAL_MspInit+0x4c>)
 8000f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f5e:	4a0a      	ldr	r2, [pc, #40]	; (8000f88 <HAL_MspInit+0x4c>)
 8000f60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f64:	6453      	str	r3, [r2, #68]	; 0x44
 8000f66:	4b08      	ldr	r3, [pc, #32]	; (8000f88 <HAL_MspInit+0x4c>)
 8000f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f6e:	603b      	str	r3, [r7, #0]
 8000f70:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f72:	2200      	movs	r2, #0
 8000f74:	210f      	movs	r1, #15
 8000f76:	f06f 0001 	mvn.w	r0, #1
 8000f7a:	f001 fa29 	bl	80023d0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f7e:	bf00      	nop
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	40023800 	.word	0x40023800

08000f8c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b08a      	sub	sp, #40	; 0x28
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f94:	f107 0314 	add.w	r3, r7, #20
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
 8000f9c:	605a      	str	r2, [r3, #4]
 8000f9e:	609a      	str	r2, [r3, #8]
 8000fa0:	60da      	str	r2, [r3, #12]
 8000fa2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a17      	ldr	r2, [pc, #92]	; (8001008 <HAL_CAN_MspInit+0x7c>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d127      	bne.n	8000ffe <HAL_CAN_MspInit+0x72>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000fae:	4b17      	ldr	r3, [pc, #92]	; (800100c <HAL_CAN_MspInit+0x80>)
 8000fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb2:	4a16      	ldr	r2, [pc, #88]	; (800100c <HAL_CAN_MspInit+0x80>)
 8000fb4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000fb8:	6413      	str	r3, [r2, #64]	; 0x40
 8000fba:	4b14      	ldr	r3, [pc, #80]	; (800100c <HAL_CAN_MspInit+0x80>)
 8000fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fc2:	613b      	str	r3, [r7, #16]
 8000fc4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fc6:	4b11      	ldr	r3, [pc, #68]	; (800100c <HAL_CAN_MspInit+0x80>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fca:	4a10      	ldr	r2, [pc, #64]	; (800100c <HAL_CAN_MspInit+0x80>)
 8000fcc:	f043 0308 	orr.w	r3, r3, #8
 8000fd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd2:	4b0e      	ldr	r3, [pc, #56]	; (800100c <HAL_CAN_MspInit+0x80>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd6:	f003 0308 	and.w	r3, r3, #8
 8000fda:	60fb      	str	r3, [r7, #12]
 8000fdc:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000fde:	2303      	movs	r3, #3
 8000fe0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fea:	2303      	movs	r3, #3
 8000fec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000fee:	2309      	movs	r3, #9
 8000ff0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ff2:	f107 0314 	add.w	r3, r7, #20
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4805      	ldr	r0, [pc, #20]	; (8001010 <HAL_CAN_MspInit+0x84>)
 8000ffa:	f001 fdb7 	bl	8002b6c <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000ffe:	bf00      	nop
 8001000:	3728      	adds	r7, #40	; 0x28
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	40006400 	.word	0x40006400
 800100c:	40023800 	.word	0x40023800
 8001010:	40020c00 	.word	0x40020c00

08001014 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b08a      	sub	sp, #40	; 0x28
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800101c:	f107 0314 	add.w	r3, r7, #20
 8001020:	2200      	movs	r2, #0
 8001022:	601a      	str	r2, [r3, #0]
 8001024:	605a      	str	r2, [r3, #4]
 8001026:	609a      	str	r2, [r3, #8]
 8001028:	60da      	str	r2, [r3, #12]
 800102a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a65      	ldr	r2, [pc, #404]	; (80011c8 <HAL_SD_MspInit+0x1b4>)
 8001032:	4293      	cmp	r3, r2
 8001034:	f040 80c3 	bne.w	80011be <HAL_SD_MspInit+0x1aa>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001038:	4b64      	ldr	r3, [pc, #400]	; (80011cc <HAL_SD_MspInit+0x1b8>)
 800103a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800103c:	4a63      	ldr	r2, [pc, #396]	; (80011cc <HAL_SD_MspInit+0x1b8>)
 800103e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001042:	6453      	str	r3, [r2, #68]	; 0x44
 8001044:	4b61      	ldr	r3, [pc, #388]	; (80011cc <HAL_SD_MspInit+0x1b8>)
 8001046:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001048:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800104c:	613b      	str	r3, [r7, #16]
 800104e:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001050:	4b5e      	ldr	r3, [pc, #376]	; (80011cc <HAL_SD_MspInit+0x1b8>)
 8001052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001054:	4a5d      	ldr	r2, [pc, #372]	; (80011cc <HAL_SD_MspInit+0x1b8>)
 8001056:	f043 0304 	orr.w	r3, r3, #4
 800105a:	6313      	str	r3, [r2, #48]	; 0x30
 800105c:	4b5b      	ldr	r3, [pc, #364]	; (80011cc <HAL_SD_MspInit+0x1b8>)
 800105e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001060:	f003 0304 	and.w	r3, r3, #4
 8001064:	60fb      	str	r3, [r7, #12]
 8001066:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001068:	4b58      	ldr	r3, [pc, #352]	; (80011cc <HAL_SD_MspInit+0x1b8>)
 800106a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106c:	4a57      	ldr	r2, [pc, #348]	; (80011cc <HAL_SD_MspInit+0x1b8>)
 800106e:	f043 0308 	orr.w	r3, r3, #8
 8001072:	6313      	str	r3, [r2, #48]	; 0x30
 8001074:	4b55      	ldr	r3, [pc, #340]	; (80011cc <HAL_SD_MspInit+0x1b8>)
 8001076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001078:	f003 0308 	and.w	r3, r3, #8
 800107c:	60bb      	str	r3, [r7, #8]
 800107e:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8001080:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001084:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001086:	2302      	movs	r3, #2
 8001088:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108a:	2300      	movs	r3, #0
 800108c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800108e:	2303      	movs	r3, #3
 8001090:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001092:	230c      	movs	r3, #12
 8001094:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001096:	f107 0314 	add.w	r3, r7, #20
 800109a:	4619      	mov	r1, r3
 800109c:	484c      	ldr	r0, [pc, #304]	; (80011d0 <HAL_SD_MspInit+0x1bc>)
 800109e:	f001 fd65 	bl	8002b6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80010a2:	2304      	movs	r3, #4
 80010a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a6:	2302      	movs	r3, #2
 80010a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010aa:	2300      	movs	r3, #0
 80010ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ae:	2303      	movs	r3, #3
 80010b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80010b2:	230c      	movs	r3, #12
 80010b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010b6:	f107 0314 	add.w	r3, r7, #20
 80010ba:	4619      	mov	r1, r3
 80010bc:	4845      	ldr	r0, [pc, #276]	; (80011d4 <HAL_SD_MspInit+0x1c0>)
 80010be:	f001 fd55 	bl	8002b6c <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream3;
 80010c2:	4b45      	ldr	r3, [pc, #276]	; (80011d8 <HAL_SD_MspInit+0x1c4>)
 80010c4:	4a45      	ldr	r2, [pc, #276]	; (80011dc <HAL_SD_MspInit+0x1c8>)
 80010c6:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 80010c8:	4b43      	ldr	r3, [pc, #268]	; (80011d8 <HAL_SD_MspInit+0x1c4>)
 80010ca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80010ce:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80010d0:	4b41      	ldr	r3, [pc, #260]	; (80011d8 <HAL_SD_MspInit+0x1c4>)
 80010d2:	2240      	movs	r2, #64	; 0x40
 80010d4:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010d6:	4b40      	ldr	r3, [pc, #256]	; (80011d8 <HAL_SD_MspInit+0x1c4>)
 80010d8:	2200      	movs	r2, #0
 80010da:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80010dc:	4b3e      	ldr	r3, [pc, #248]	; (80011d8 <HAL_SD_MspInit+0x1c4>)
 80010de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010e2:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80010e4:	4b3c      	ldr	r3, [pc, #240]	; (80011d8 <HAL_SD_MspInit+0x1c4>)
 80010e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010ea:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80010ec:	4b3a      	ldr	r3, [pc, #232]	; (80011d8 <HAL_SD_MspInit+0x1c4>)
 80010ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010f2:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 80010f4:	4b38      	ldr	r3, [pc, #224]	; (80011d8 <HAL_SD_MspInit+0x1c4>)
 80010f6:	2220      	movs	r2, #32
 80010f8:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80010fa:	4b37      	ldr	r3, [pc, #220]	; (80011d8 <HAL_SD_MspInit+0x1c4>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001100:	4b35      	ldr	r3, [pc, #212]	; (80011d8 <HAL_SD_MspInit+0x1c4>)
 8001102:	2204      	movs	r2, #4
 8001104:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001106:	4b34      	ldr	r3, [pc, #208]	; (80011d8 <HAL_SD_MspInit+0x1c4>)
 8001108:	2203      	movs	r2, #3
 800110a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 800110c:	4b32      	ldr	r3, [pc, #200]	; (80011d8 <HAL_SD_MspInit+0x1c4>)
 800110e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001112:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001114:	4b30      	ldr	r3, [pc, #192]	; (80011d8 <HAL_SD_MspInit+0x1c4>)
 8001116:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800111a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 800111c:	482e      	ldr	r0, [pc, #184]	; (80011d8 <HAL_SD_MspInit+0x1c4>)
 800111e:	f001 f981 	bl	8002424 <HAL_DMA_Init>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <HAL_SD_MspInit+0x118>
    {
      Error_Handler();
 8001128:	f7ff fefa 	bl	8000f20 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1_tx);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	4a2a      	ldr	r2, [pc, #168]	; (80011d8 <HAL_SD_MspInit+0x1c4>)
 8001130:	63da      	str	r2, [r3, #60]	; 0x3c
 8001132:	4a29      	ldr	r2, [pc, #164]	; (80011d8 <HAL_SD_MspInit+0x1c4>)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream6;
 8001138:	4b29      	ldr	r3, [pc, #164]	; (80011e0 <HAL_SD_MspInit+0x1cc>)
 800113a:	4a2a      	ldr	r2, [pc, #168]	; (80011e4 <HAL_SD_MspInit+0x1d0>)
 800113c:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 800113e:	4b28      	ldr	r3, [pc, #160]	; (80011e0 <HAL_SD_MspInit+0x1cc>)
 8001140:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001144:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001146:	4b26      	ldr	r3, [pc, #152]	; (80011e0 <HAL_SD_MspInit+0x1cc>)
 8001148:	2200      	movs	r2, #0
 800114a:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800114c:	4b24      	ldr	r3, [pc, #144]	; (80011e0 <HAL_SD_MspInit+0x1cc>)
 800114e:	2200      	movs	r2, #0
 8001150:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001152:	4b23      	ldr	r3, [pc, #140]	; (80011e0 <HAL_SD_MspInit+0x1cc>)
 8001154:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001158:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800115a:	4b21      	ldr	r3, [pc, #132]	; (80011e0 <HAL_SD_MspInit+0x1cc>)
 800115c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001160:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001162:	4b1f      	ldr	r3, [pc, #124]	; (80011e0 <HAL_SD_MspInit+0x1cc>)
 8001164:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001168:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 800116a:	4b1d      	ldr	r3, [pc, #116]	; (80011e0 <HAL_SD_MspInit+0x1cc>)
 800116c:	2220      	movs	r2, #32
 800116e:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001170:	4b1b      	ldr	r3, [pc, #108]	; (80011e0 <HAL_SD_MspInit+0x1cc>)
 8001172:	2200      	movs	r2, #0
 8001174:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001176:	4b1a      	ldr	r3, [pc, #104]	; (80011e0 <HAL_SD_MspInit+0x1cc>)
 8001178:	2204      	movs	r2, #4
 800117a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800117c:	4b18      	ldr	r3, [pc, #96]	; (80011e0 <HAL_SD_MspInit+0x1cc>)
 800117e:	2203      	movs	r2, #3
 8001180:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 8001182:	4b17      	ldr	r3, [pc, #92]	; (80011e0 <HAL_SD_MspInit+0x1cc>)
 8001184:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001188:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 800118a:	4b15      	ldr	r3, [pc, #84]	; (80011e0 <HAL_SD_MspInit+0x1cc>)
 800118c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001190:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 8001192:	4813      	ldr	r0, [pc, #76]	; (80011e0 <HAL_SD_MspInit+0x1cc>)
 8001194:	f001 f946 	bl	8002424 <HAL_DMA_Init>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <HAL_SD_MspInit+0x18e>
    {
      Error_Handler();
 800119e:	f7ff febf 	bl	8000f20 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1_rx);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4a0e      	ldr	r2, [pc, #56]	; (80011e0 <HAL_SD_MspInit+0x1cc>)
 80011a6:	641a      	str	r2, [r3, #64]	; 0x40
 80011a8:	4a0d      	ldr	r2, [pc, #52]	; (80011e0 <HAL_SD_MspInit+0x1cc>)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 8, 0);
 80011ae:	2200      	movs	r2, #0
 80011b0:	2108      	movs	r1, #8
 80011b2:	2031      	movs	r0, #49	; 0x31
 80011b4:	f001 f90c 	bl	80023d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80011b8:	2031      	movs	r0, #49	; 0x31
 80011ba:	f001 f925 	bl	8002408 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80011be:	bf00      	nop
 80011c0:	3728      	adds	r7, #40	; 0x28
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	40012c00 	.word	0x40012c00
 80011cc:	40023800 	.word	0x40023800
 80011d0:	40020800 	.word	0x40020800
 80011d4:	40020c00 	.word	0x40020c00
 80011d8:	20007064 	.word	0x20007064
 80011dc:	40026458 	.word	0x40026458
 80011e0:	20006f98 	.word	0x20006f98
 80011e4:	400264a0 	.word	0x400264a0

080011e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b08a      	sub	sp, #40	; 0x28
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f0:	f107 0314 	add.w	r3, r7, #20
 80011f4:	2200      	movs	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]
 80011f8:	605a      	str	r2, [r3, #4]
 80011fa:	609a      	str	r2, [r3, #8]
 80011fc:	60da      	str	r2, [r3, #12]
 80011fe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a17      	ldr	r2, [pc, #92]	; (8001264 <HAL_UART_MspInit+0x7c>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d128      	bne.n	800125c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800120a:	4b17      	ldr	r3, [pc, #92]	; (8001268 <HAL_UART_MspInit+0x80>)
 800120c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120e:	4a16      	ldr	r2, [pc, #88]	; (8001268 <HAL_UART_MspInit+0x80>)
 8001210:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001214:	6413      	str	r3, [r2, #64]	; 0x40
 8001216:	4b14      	ldr	r3, [pc, #80]	; (8001268 <HAL_UART_MspInit+0x80>)
 8001218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800121e:	613b      	str	r3, [r7, #16]
 8001220:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001222:	4b11      	ldr	r3, [pc, #68]	; (8001268 <HAL_UART_MspInit+0x80>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	4a10      	ldr	r2, [pc, #64]	; (8001268 <HAL_UART_MspInit+0x80>)
 8001228:	f043 0308 	orr.w	r3, r3, #8
 800122c:	6313      	str	r3, [r2, #48]	; 0x30
 800122e:	4b0e      	ldr	r3, [pc, #56]	; (8001268 <HAL_UART_MspInit+0x80>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	f003 0308 	and.w	r3, r3, #8
 8001236:	60fb      	str	r3, [r7, #12]
 8001238:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800123a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800123e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001240:	2302      	movs	r3, #2
 8001242:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001244:	2300      	movs	r3, #0
 8001246:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001248:	2303      	movs	r3, #3
 800124a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800124c:	2307      	movs	r3, #7
 800124e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001250:	f107 0314 	add.w	r3, r7, #20
 8001254:	4619      	mov	r1, r3
 8001256:	4805      	ldr	r0, [pc, #20]	; (800126c <HAL_UART_MspInit+0x84>)
 8001258:	f001 fc88 	bl	8002b6c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800125c:	bf00      	nop
 800125e:	3728      	adds	r7, #40	; 0x28
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	40004800 	.word	0x40004800
 8001268:	40023800 	.word	0x40023800
 800126c:	40020c00 	.word	0x40020c00

08001270 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b08c      	sub	sp, #48	; 0x30
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001278:	2300      	movs	r3, #0
 800127a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800127c:	2300      	movs	r3, #0
 800127e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8001280:	2200      	movs	r2, #0
 8001282:	6879      	ldr	r1, [r7, #4]
 8001284:	2036      	movs	r0, #54	; 0x36
 8001286:	f001 f8a3 	bl	80023d0 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 800128a:	2036      	movs	r0, #54	; 0x36
 800128c:	f001 f8bc 	bl	8002408 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001290:	4b1f      	ldr	r3, [pc, #124]	; (8001310 <HAL_InitTick+0xa0>)
 8001292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001294:	4a1e      	ldr	r2, [pc, #120]	; (8001310 <HAL_InitTick+0xa0>)
 8001296:	f043 0310 	orr.w	r3, r3, #16
 800129a:	6413      	str	r3, [r2, #64]	; 0x40
 800129c:	4b1c      	ldr	r3, [pc, #112]	; (8001310 <HAL_InitTick+0xa0>)
 800129e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a0:	f003 0310 	and.w	r3, r3, #16
 80012a4:	60fb      	str	r3, [r7, #12]
 80012a6:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80012a8:	f107 0210 	add.w	r2, r7, #16
 80012ac:	f107 0314 	add.w	r3, r7, #20
 80012b0:	4611      	mov	r1, r2
 80012b2:	4618      	mov	r0, r3
 80012b4:	f003 fd40 	bl	8004d38 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80012b8:	f003 fd16 	bl	8004ce8 <HAL_RCC_GetPCLK1Freq>
 80012bc:	4603      	mov	r3, r0
 80012be:	005b      	lsls	r3, r3, #1
 80012c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80012c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012c4:	4a13      	ldr	r2, [pc, #76]	; (8001314 <HAL_InitTick+0xa4>)
 80012c6:	fba2 2303 	umull	r2, r3, r2, r3
 80012ca:	0c9b      	lsrs	r3, r3, #18
 80012cc:	3b01      	subs	r3, #1
 80012ce:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80012d0:	4b11      	ldr	r3, [pc, #68]	; (8001318 <HAL_InitTick+0xa8>)
 80012d2:	4a12      	ldr	r2, [pc, #72]	; (800131c <HAL_InitTick+0xac>)
 80012d4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 80012d6:	4b10      	ldr	r3, [pc, #64]	; (8001318 <HAL_InitTick+0xa8>)
 80012d8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80012dc:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80012de:	4a0e      	ldr	r2, [pc, #56]	; (8001318 <HAL_InitTick+0xa8>)
 80012e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012e2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80012e4:	4b0c      	ldr	r3, [pc, #48]	; (8001318 <HAL_InitTick+0xa8>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ea:	4b0b      	ldr	r3, [pc, #44]	; (8001318 <HAL_InitTick+0xa8>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80012f0:	4809      	ldr	r0, [pc, #36]	; (8001318 <HAL_InitTick+0xa8>)
 80012f2:	f006 f807 	bl	8007304 <HAL_TIM_Base_Init>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d104      	bne.n	8001306 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80012fc:	4806      	ldr	r0, [pc, #24]	; (8001318 <HAL_InitTick+0xa8>)
 80012fe:	f006 f837 	bl	8007370 <HAL_TIM_Base_Start_IT>
 8001302:	4603      	mov	r3, r0
 8001304:	e000      	b.n	8001308 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
}
 8001308:	4618      	mov	r0, r3
 800130a:	3730      	adds	r7, #48	; 0x30
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	40023800 	.word	0x40023800
 8001314:	431bde83 	.word	0x431bde83
 8001318:	200072e4 	.word	0x200072e4
 800131c:	40001000 	.word	0x40001000

08001320 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001324:	bf00      	nop
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr

0800132e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800132e:	b480      	push	{r7}
 8001330:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001332:	e7fe      	b.n	8001332 <HardFault_Handler+0x4>

08001334 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001338:	e7fe      	b.n	8001338 <MemManage_Handler+0x4>

0800133a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800133a:	b480      	push	{r7}
 800133c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800133e:	e7fe      	b.n	800133e <BusFault_Handler+0x4>

08001340 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001344:	e7fe      	b.n	8001344 <UsageFault_Handler+0x4>

08001346 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001346:	b480      	push	{r7}
 8001348:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800134a:	bf00      	nop
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr

08001354 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001358:	4802      	ldr	r0, [pc, #8]	; (8001364 <CAN1_RX0_IRQHandler+0x10>)
 800135a:	f000 fd57 	bl	8001e0c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800135e:	bf00      	nop
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	20007020 	.word	0x20007020

08001368 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 800136c:	4802      	ldr	r0, [pc, #8]	; (8001378 <SDMMC1_IRQHandler+0x10>)
 800136e:	f004 ff45 	bl	80061fc <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8001372:	bf00      	nop
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	20004c8c 	.word	0x20004c8c

0800137c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001380:	4802      	ldr	r0, [pc, #8]	; (800138c <TIM6_DAC_IRQHandler+0x10>)
 8001382:	f006 f81f 	bl	80073c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001386:	bf00      	nop
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	200072e4 	.word	0x200072e4

08001390 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 8001394:	4802      	ldr	r0, [pc, #8]	; (80013a0 <DMA2_Stream3_IRQHandler+0x10>)
 8001396:	f001 f975 	bl	8002684 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800139a:	bf00      	nop
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	20007064 	.word	0x20007064

080013a4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80013a8:	4802      	ldr	r0, [pc, #8]	; (80013b4 <OTG_FS_IRQHandler+0x10>)
 80013aa:	f001 ff1a 	bl	80031e2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80013ae:	bf00      	nop
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	200098d8 	.word	0x200098d8

080013b8 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 80013bc:	4802      	ldr	r0, [pc, #8]	; (80013c8 <DMA2_Stream6_IRQHandler+0x10>)
 80013be:	f001 f961 	bl	8002684 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80013c2:	bf00      	nop
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	20006f98 	.word	0x20006f98

080013cc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80013d4:	4b11      	ldr	r3, [pc, #68]	; (800141c <_sbrk+0x50>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d102      	bne.n	80013e2 <_sbrk+0x16>
		heap_end = &end;
 80013dc:	4b0f      	ldr	r3, [pc, #60]	; (800141c <_sbrk+0x50>)
 80013de:	4a10      	ldr	r2, [pc, #64]	; (8001420 <_sbrk+0x54>)
 80013e0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80013e2:	4b0e      	ldr	r3, [pc, #56]	; (800141c <_sbrk+0x50>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80013e8:	4b0c      	ldr	r3, [pc, #48]	; (800141c <_sbrk+0x50>)
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	4413      	add	r3, r2
 80013f0:	466a      	mov	r2, sp
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d907      	bls.n	8001406 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80013f6:	f014 fd25 	bl	8015e44 <__errno>
 80013fa:	4602      	mov	r2, r0
 80013fc:	230c      	movs	r3, #12
 80013fe:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001400:	f04f 33ff 	mov.w	r3, #4294967295
 8001404:	e006      	b.n	8001414 <_sbrk+0x48>
	}

	heap_end += incr;
 8001406:	4b05      	ldr	r3, [pc, #20]	; (800141c <_sbrk+0x50>)
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4413      	add	r3, r2
 800140e:	4a03      	ldr	r2, [pc, #12]	; (800141c <_sbrk+0x50>)
 8001410:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001412:	68fb      	ldr	r3, [r7, #12]
}
 8001414:	4618      	mov	r0, r3
 8001416:	3710      	adds	r7, #16
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	20000210 	.word	0x20000210
 8001420:	20009ce0 	.word	0x20009ce0

08001424 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001428:	4b08      	ldr	r3, [pc, #32]	; (800144c <SystemInit+0x28>)
 800142a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800142e:	4a07      	ldr	r2, [pc, #28]	; (800144c <SystemInit+0x28>)
 8001430:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001434:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001438:	4b04      	ldr	r3, [pc, #16]	; (800144c <SystemInit+0x28>)
 800143a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800143e:	609a      	str	r2, [r3, #8]
#endif
}
 8001440:	bf00      	nop
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	e000ed00 	.word	0xe000ed00

08001450 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001450:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001488 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001454:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001456:	e003      	b.n	8001460 <LoopCopyDataInit>

08001458 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001458:	4b0c      	ldr	r3, [pc, #48]	; (800148c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800145a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800145c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800145e:	3104      	adds	r1, #4

08001460 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001460:	480b      	ldr	r0, [pc, #44]	; (8001490 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001462:	4b0c      	ldr	r3, [pc, #48]	; (8001494 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001464:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001466:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001468:	d3f6      	bcc.n	8001458 <CopyDataInit>
  ldr  r2, =_sbss
 800146a:	4a0b      	ldr	r2, [pc, #44]	; (8001498 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800146c:	e002      	b.n	8001474 <LoopFillZerobss>

0800146e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800146e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001470:	f842 3b04 	str.w	r3, [r2], #4

08001474 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001474:	4b09      	ldr	r3, [pc, #36]	; (800149c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001476:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001478:	d3f9      	bcc.n	800146e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800147a:	f7ff ffd3 	bl	8001424 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800147e:	f014 fce7 	bl	8015e50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001482:	f7ff f87b 	bl	800057c <main>
  bx  lr    
 8001486:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001488:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 800148c:	080165f4 	.word	0x080165f4
  ldr  r0, =_sdata
 8001490:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001494:	200001ec 	.word	0x200001ec
  ldr  r2, =_sbss
 8001498:	200001f0 	.word	0x200001f0
  ldr  r3, = _ebss
 800149c:	20009ce0 	.word	0x20009ce0

080014a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014a0:	e7fe      	b.n	80014a0 <ADC_IRQHandler>

080014a2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014a2:	b580      	push	{r7, lr}
 80014a4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014a6:	2003      	movs	r0, #3
 80014a8:	f000 ff87 	bl	80023ba <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014ac:	2000      	movs	r0, #0
 80014ae:	f7ff fedf 	bl	8001270 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80014b2:	f7ff fd43 	bl	8000f3c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80014b6:	2300      	movs	r3, #0
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	bd80      	pop	{r7, pc}

080014bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014c0:	4b06      	ldr	r3, [pc, #24]	; (80014dc <HAL_IncTick+0x20>)
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	461a      	mov	r2, r3
 80014c6:	4b06      	ldr	r3, [pc, #24]	; (80014e0 <HAL_IncTick+0x24>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4413      	add	r3, r2
 80014cc:	4a04      	ldr	r2, [pc, #16]	; (80014e0 <HAL_IncTick+0x24>)
 80014ce:	6013      	str	r3, [r2, #0]
}
 80014d0:	bf00      	nop
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	20000018 	.word	0x20000018
 80014e0:	20007324 	.word	0x20007324

080014e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  return uwTick;
 80014e8:	4b03      	ldr	r3, [pc, #12]	; (80014f8 <HAL_GetTick+0x14>)
 80014ea:	681b      	ldr	r3, [r3, #0]
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	20007324 	.word	0x20007324

080014fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001504:	f7ff ffee 	bl	80014e4 <HAL_GetTick>
 8001508:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001514:	d005      	beq.n	8001522 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001516:	4b09      	ldr	r3, [pc, #36]	; (800153c <HAL_Delay+0x40>)
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	461a      	mov	r2, r3
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	4413      	add	r3, r2
 8001520:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001522:	bf00      	nop
 8001524:	f7ff ffde 	bl	80014e4 <HAL_GetTick>
 8001528:	4602      	mov	r2, r0
 800152a:	68bb      	ldr	r3, [r7, #8]
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	68fa      	ldr	r2, [r7, #12]
 8001530:	429a      	cmp	r2, r3
 8001532:	d8f7      	bhi.n	8001524 <HAL_Delay+0x28>
  {
  }
}
 8001534:	bf00      	nop
 8001536:	3710      	adds	r7, #16
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	20000018 	.word	0x20000018

08001540 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b084      	sub	sp, #16
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d101      	bne.n	8001552 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e0ed      	b.n	800172e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001558:	b2db      	uxtb	r3, r3
 800155a:	2b00      	cmp	r3, #0
 800155c:	d102      	bne.n	8001564 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	f7ff fd14 	bl	8000f8c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f022 0202 	bic.w	r2, r2, #2
 8001572:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001574:	f7ff ffb6 	bl	80014e4 <HAL_GetTick>
 8001578:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800157a:	e012      	b.n	80015a2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800157c:	f7ff ffb2 	bl	80014e4 <HAL_GetTick>
 8001580:	4602      	mov	r2, r0
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	2b0a      	cmp	r3, #10
 8001588:	d90b      	bls.n	80015a2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800158e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2205      	movs	r2, #5
 800159a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e0c5      	b.n	800172e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f003 0302 	and.w	r3, r3, #2
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d1e5      	bne.n	800157c <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f042 0201 	orr.w	r2, r2, #1
 80015be:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015c0:	f7ff ff90 	bl	80014e4 <HAL_GetTick>
 80015c4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80015c6:	e012      	b.n	80015ee <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80015c8:	f7ff ff8c 	bl	80014e4 <HAL_GetTick>
 80015cc:	4602      	mov	r2, r0
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	2b0a      	cmp	r3, #10
 80015d4:	d90b      	bls.n	80015ee <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015da:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2205      	movs	r2, #5
 80015e6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e09f      	b.n	800172e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f003 0301 	and.w	r3, r3, #1
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d0e5      	beq.n	80015c8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	7e1b      	ldrb	r3, [r3, #24]
 8001600:	2b01      	cmp	r3, #1
 8001602:	d108      	bne.n	8001616 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001612:	601a      	str	r2, [r3, #0]
 8001614:	e007      	b.n	8001626 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001624:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	7e5b      	ldrb	r3, [r3, #25]
 800162a:	2b01      	cmp	r3, #1
 800162c:	d108      	bne.n	8001640 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800163c:	601a      	str	r2, [r3, #0]
 800163e:	e007      	b.n	8001650 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800164e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	7e9b      	ldrb	r3, [r3, #26]
 8001654:	2b01      	cmp	r3, #1
 8001656:	d108      	bne.n	800166a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f042 0220 	orr.w	r2, r2, #32
 8001666:	601a      	str	r2, [r3, #0]
 8001668:	e007      	b.n	800167a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f022 0220 	bic.w	r2, r2, #32
 8001678:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	7edb      	ldrb	r3, [r3, #27]
 800167e:	2b01      	cmp	r3, #1
 8001680:	d108      	bne.n	8001694 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f022 0210 	bic.w	r2, r2, #16
 8001690:	601a      	str	r2, [r3, #0]
 8001692:	e007      	b.n	80016a4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f042 0210 	orr.w	r2, r2, #16
 80016a2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	7f1b      	ldrb	r3, [r3, #28]
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d108      	bne.n	80016be <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f042 0208 	orr.w	r2, r2, #8
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	e007      	b.n	80016ce <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f022 0208 	bic.w	r2, r2, #8
 80016cc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	7f5b      	ldrb	r3, [r3, #29]
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d108      	bne.n	80016e8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f042 0204 	orr.w	r2, r2, #4
 80016e4:	601a      	str	r2, [r3, #0]
 80016e6:	e007      	b.n	80016f8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f022 0204 	bic.w	r2, r2, #4
 80016f6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	689a      	ldr	r2, [r3, #8]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	431a      	orrs	r2, r3
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	691b      	ldr	r3, [r3, #16]
 8001706:	431a      	orrs	r2, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	695b      	ldr	r3, [r3, #20]
 800170c:	ea42 0103 	orr.w	r1, r2, r3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	1e5a      	subs	r2, r3, #1
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	430a      	orrs	r2, r1
 800171c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2200      	movs	r2, #0
 8001722:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2201      	movs	r2, #1
 8001728:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800172c:	2300      	movs	r3, #0
}
 800172e:	4618      	mov	r0, r3
 8001730:	3710      	adds	r7, #16
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
	...

08001738 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001738:	b480      	push	{r7}
 800173a:	b087      	sub	sp, #28
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800174e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001750:	7cfb      	ldrb	r3, [r7, #19]
 8001752:	2b01      	cmp	r3, #1
 8001754:	d003      	beq.n	800175e <HAL_CAN_ConfigFilter+0x26>
 8001756:	7cfb      	ldrb	r3, [r7, #19]
 8001758:	2b02      	cmp	r3, #2
 800175a:	f040 80c7 	bne.w	80018ec <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a69      	ldr	r2, [pc, #420]	; (8001908 <HAL_CAN_ConfigFilter+0x1d0>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d001      	beq.n	800176c <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8001768:	4b68      	ldr	r3, [pc, #416]	; (800190c <HAL_CAN_ConfigFilter+0x1d4>)
 800176a:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001772:	f043 0201 	orr.w	r2, r3, #1
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	4a63      	ldr	r2, [pc, #396]	; (800190c <HAL_CAN_ConfigFilter+0x1d4>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d111      	bne.n	80017a8 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800178a:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800179e:	021b      	lsls	r3, r3, #8
 80017a0:	431a      	orrs	r2, r3
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	695b      	ldr	r3, [r3, #20]
 80017ac:	f003 031f 	and.w	r3, r3, #31
 80017b0:	2201      	movs	r2, #1
 80017b2:	fa02 f303 	lsl.w	r3, r2, r3
 80017b6:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	43db      	mvns	r3, r3
 80017c2:	401a      	ands	r2, r3
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	69db      	ldr	r3, [r3, #28]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d123      	bne.n	800181a <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	43db      	mvns	r3, r3
 80017dc:	401a      	ands	r2, r3
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80017f0:	683a      	ldr	r2, [r7, #0]
 80017f2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80017f4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	3248      	adds	r2, #72	; 0x48
 80017fa:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800180e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001810:	6979      	ldr	r1, [r7, #20]
 8001812:	3348      	adds	r3, #72	; 0x48
 8001814:	00db      	lsls	r3, r3, #3
 8001816:	440b      	add	r3, r1
 8001818:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	69db      	ldr	r3, [r3, #28]
 800181e:	2b01      	cmp	r3, #1
 8001820:	d122      	bne.n	8001868 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	431a      	orrs	r2, r3
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800183e:	683a      	ldr	r2, [r7, #0]
 8001840:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001842:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	3248      	adds	r2, #72	; 0x48
 8001848:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	68db      	ldr	r3, [r3, #12]
 8001856:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800185c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800185e:	6979      	ldr	r1, [r7, #20]
 8001860:	3348      	adds	r3, #72	; 0x48
 8001862:	00db      	lsls	r3, r3, #3
 8001864:	440b      	add	r3, r1
 8001866:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	699b      	ldr	r3, [r3, #24]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d109      	bne.n	8001884 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	43db      	mvns	r3, r3
 800187a:	401a      	ands	r2, r3
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001882:	e007      	b.n	8001894 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	431a      	orrs	r2, r3
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	691b      	ldr	r3, [r3, #16]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d109      	bne.n	80018b0 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	43db      	mvns	r3, r3
 80018a6:	401a      	ands	r2, r3
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80018ae:	e007      	b.n	80018c0 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	431a      	orrs	r2, r3
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	6a1b      	ldr	r3, [r3, #32]
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d107      	bne.n	80018d8 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	431a      	orrs	r2, r3
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80018de:	f023 0201 	bic.w	r2, r3, #1
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80018e8:	2300      	movs	r3, #0
 80018ea:	e006      	b.n	80018fa <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
  }
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	371c      	adds	r7, #28
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	40003400 	.word	0x40003400
 800190c:	40006400 	.word	0x40006400

08001910 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800191e:	b2db      	uxtb	r3, r3
 8001920:	2b01      	cmp	r3, #1
 8001922:	d12e      	bne.n	8001982 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2202      	movs	r2, #2
 8001928:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f022 0201 	bic.w	r2, r2, #1
 800193a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800193c:	f7ff fdd2 	bl	80014e4 <HAL_GetTick>
 8001940:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001942:	e012      	b.n	800196a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001944:	f7ff fdce 	bl	80014e4 <HAL_GetTick>
 8001948:	4602      	mov	r2, r0
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	2b0a      	cmp	r3, #10
 8001950:	d90b      	bls.n	800196a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001956:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2205      	movs	r2, #5
 8001962:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e012      	b.n	8001990 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f003 0301 	and.w	r3, r3, #1
 8001974:	2b00      	cmp	r3, #0
 8001976:	d1e5      	bne.n	8001944 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2200      	movs	r2, #0
 800197c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800197e:	2300      	movs	r3, #0
 8001980:	e006      	b.n	8001990 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001986:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
  }
}
 8001990:	4618      	mov	r0, r3
 8001992:	3710      	adds	r7, #16
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}

08001998 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001998:	b480      	push	{r7}
 800199a:	b089      	sub	sp, #36	; 0x24
 800199c:	af00      	add	r7, sp, #0
 800199e:	60f8      	str	r0, [r7, #12]
 80019a0:	60b9      	str	r1, [r7, #8]
 80019a2:	607a      	str	r2, [r7, #4]
 80019a4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019ac:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80019b6:	7ffb      	ldrb	r3, [r7, #31]
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d003      	beq.n	80019c4 <HAL_CAN_AddTxMessage+0x2c>
 80019bc:	7ffb      	ldrb	r3, [r7, #31]
 80019be:	2b02      	cmp	r3, #2
 80019c0:	f040 80b8 	bne.w	8001b34 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80019c4:	69bb      	ldr	r3, [r7, #24]
 80019c6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d10a      	bne.n	80019e4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80019ce:	69bb      	ldr	r3, [r7, #24]
 80019d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d105      	bne.n	80019e4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80019d8:	69bb      	ldr	r3, [r7, #24]
 80019da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80019de:	2b00      	cmp	r3, #0
 80019e0:	f000 80a0 	beq.w	8001b24 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80019e4:	69bb      	ldr	r3, [r7, #24]
 80019e6:	0e1b      	lsrs	r3, r3, #24
 80019e8:	f003 0303 	and.w	r3, r3, #3
 80019ec:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	d907      	bls.n	8001a04 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	e09e      	b.n	8001b42 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001a04:	2201      	movs	r2, #1
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	409a      	lsls	r2, r3
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d10d      	bne.n	8001a32 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001a20:	68f9      	ldr	r1, [r7, #12]
 8001a22:	6809      	ldr	r1, [r1, #0]
 8001a24:	431a      	orrs	r2, r3
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	3318      	adds	r3, #24
 8001a2a:	011b      	lsls	r3, r3, #4
 8001a2c:	440b      	add	r3, r1
 8001a2e:	601a      	str	r2, [r3, #0]
 8001a30:	e00f      	b.n	8001a52 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001a3c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001a42:	68f9      	ldr	r1, [r7, #12]
 8001a44:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001a46:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	3318      	adds	r3, #24
 8001a4c:	011b      	lsls	r3, r3, #4
 8001a4e:	440b      	add	r3, r1
 8001a50:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	6819      	ldr	r1, [r3, #0]
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	691a      	ldr	r2, [r3, #16]
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	3318      	adds	r3, #24
 8001a5e:	011b      	lsls	r3, r3, #4
 8001a60:	440b      	add	r3, r1
 8001a62:	3304      	adds	r3, #4
 8001a64:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	7d1b      	ldrb	r3, [r3, #20]
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d111      	bne.n	8001a92 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	3318      	adds	r3, #24
 8001a76:	011b      	lsls	r3, r3, #4
 8001a78:	4413      	add	r3, r2
 8001a7a:	3304      	adds	r3, #4
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	68fa      	ldr	r2, [r7, #12]
 8001a80:	6811      	ldr	r1, [r2, #0]
 8001a82:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	3318      	adds	r3, #24
 8001a8a:	011b      	lsls	r3, r3, #4
 8001a8c:	440b      	add	r3, r1
 8001a8e:	3304      	adds	r3, #4
 8001a90:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	3307      	adds	r3, #7
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	061a      	lsls	r2, r3, #24
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	3306      	adds	r3, #6
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	041b      	lsls	r3, r3, #16
 8001aa2:	431a      	orrs	r2, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	3305      	adds	r3, #5
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	021b      	lsls	r3, r3, #8
 8001aac:	4313      	orrs	r3, r2
 8001aae:	687a      	ldr	r2, [r7, #4]
 8001ab0:	3204      	adds	r2, #4
 8001ab2:	7812      	ldrb	r2, [r2, #0]
 8001ab4:	4610      	mov	r0, r2
 8001ab6:	68fa      	ldr	r2, [r7, #12]
 8001ab8:	6811      	ldr	r1, [r2, #0]
 8001aba:	ea43 0200 	orr.w	r2, r3, r0
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	011b      	lsls	r3, r3, #4
 8001ac2:	440b      	add	r3, r1
 8001ac4:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001ac8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	3303      	adds	r3, #3
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	061a      	lsls	r2, r3, #24
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	3302      	adds	r3, #2
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	041b      	lsls	r3, r3, #16
 8001ada:	431a      	orrs	r2, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	3301      	adds	r3, #1
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	021b      	lsls	r3, r3, #8
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	687a      	ldr	r2, [r7, #4]
 8001ae8:	7812      	ldrb	r2, [r2, #0]
 8001aea:	4610      	mov	r0, r2
 8001aec:	68fa      	ldr	r2, [r7, #12]
 8001aee:	6811      	ldr	r1, [r2, #0]
 8001af0:	ea43 0200 	orr.w	r2, r3, r0
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	011b      	lsls	r3, r3, #4
 8001af8:	440b      	add	r3, r1
 8001afa:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001afe:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	3318      	adds	r3, #24
 8001b08:	011b      	lsls	r3, r3, #4
 8001b0a:	4413      	add	r3, r2
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	68fa      	ldr	r2, [r7, #12]
 8001b10:	6811      	ldr	r1, [r2, #0]
 8001b12:	f043 0201 	orr.w	r2, r3, #1
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	3318      	adds	r3, #24
 8001b1a:	011b      	lsls	r3, r3, #4
 8001b1c:	440b      	add	r3, r1
 8001b1e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001b20:	2300      	movs	r3, #0
 8001b22:	e00e      	b.n	8001b42 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b28:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e006      	b.n	8001b42 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b38:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
  }
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3724      	adds	r7, #36	; 0x24
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr

08001b4e <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001b4e:	b480      	push	{r7}
 8001b50:	b087      	sub	sp, #28
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	60f8      	str	r0, [r7, #12]
 8001b56:	60b9      	str	r1, [r7, #8]
 8001b58:	607a      	str	r2, [r7, #4]
 8001b5a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b62:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001b64:	7dfb      	ldrb	r3, [r7, #23]
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d003      	beq.n	8001b72 <HAL_CAN_GetRxMessage+0x24>
 8001b6a:	7dfb      	ldrb	r3, [r7, #23]
 8001b6c:	2b02      	cmp	r3, #2
 8001b6e:	f040 80f3 	bne.w	8001d58 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d10e      	bne.n	8001b96 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	68db      	ldr	r3, [r3, #12]
 8001b7e:	f003 0303 	and.w	r3, r3, #3
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d116      	bne.n	8001bb4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b8a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e0e7      	b.n	8001d66 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	691b      	ldr	r3, [r3, #16]
 8001b9c:	f003 0303 	and.w	r3, r3, #3
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d107      	bne.n	8001bb4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e0d8      	b.n	8001d66 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	331b      	adds	r3, #27
 8001bbc:	011b      	lsls	r3, r3, #4
 8001bbe:	4413      	add	r3, r2
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 0204 	and.w	r2, r3, #4
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d10c      	bne.n	8001bec <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	331b      	adds	r3, #27
 8001bda:	011b      	lsls	r3, r3, #4
 8001bdc:	4413      	add	r3, r2
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	0d5b      	lsrs	r3, r3, #21
 8001be2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	601a      	str	r2, [r3, #0]
 8001bea:	e00b      	b.n	8001c04 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	331b      	adds	r3, #27
 8001bf4:	011b      	lsls	r3, r3, #4
 8001bf6:	4413      	add	r3, r2
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	08db      	lsrs	r3, r3, #3
 8001bfc:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	331b      	adds	r3, #27
 8001c0c:	011b      	lsls	r3, r3, #4
 8001c0e:	4413      	add	r3, r2
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0202 	and.w	r2, r3, #2
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	331b      	adds	r3, #27
 8001c22:	011b      	lsls	r3, r3, #4
 8001c24:	4413      	add	r3, r2
 8001c26:	3304      	adds	r3, #4
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 020f 	and.w	r2, r3, #15
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	331b      	adds	r3, #27
 8001c3a:	011b      	lsls	r3, r3, #4
 8001c3c:	4413      	add	r3, r2
 8001c3e:	3304      	adds	r3, #4
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	0a1b      	lsrs	r3, r3, #8
 8001c44:	b2da      	uxtb	r2, r3
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	331b      	adds	r3, #27
 8001c52:	011b      	lsls	r3, r3, #4
 8001c54:	4413      	add	r3, r2
 8001c56:	3304      	adds	r3, #4
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	0c1b      	lsrs	r3, r3, #16
 8001c5c:	b29a      	uxth	r2, r3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	011b      	lsls	r3, r3, #4
 8001c6a:	4413      	add	r3, r2
 8001c6c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	b2da      	uxtb	r2, r3
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	011b      	lsls	r3, r3, #4
 8001c80:	4413      	add	r3, r2
 8001c82:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	0a1a      	lsrs	r2, r3, #8
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	b2d2      	uxtb	r2, r2
 8001c90:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	011b      	lsls	r3, r3, #4
 8001c9a:	4413      	add	r3, r2
 8001c9c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	0c1a      	lsrs	r2, r3, #16
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	3302      	adds	r3, #2
 8001ca8:	b2d2      	uxtb	r2, r2
 8001caa:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	011b      	lsls	r3, r3, #4
 8001cb4:	4413      	add	r3, r2
 8001cb6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	0e1a      	lsrs	r2, r3, #24
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	3303      	adds	r3, #3
 8001cc2:	b2d2      	uxtb	r2, r2
 8001cc4:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	011b      	lsls	r3, r3, #4
 8001cce:	4413      	add	r3, r2
 8001cd0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	3304      	adds	r3, #4
 8001cda:	b2d2      	uxtb	r2, r2
 8001cdc:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	011b      	lsls	r3, r3, #4
 8001ce6:	4413      	add	r3, r2
 8001ce8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	0a1a      	lsrs	r2, r3, #8
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	3305      	adds	r3, #5
 8001cf4:	b2d2      	uxtb	r2, r2
 8001cf6:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	011b      	lsls	r3, r3, #4
 8001d00:	4413      	add	r3, r2
 8001d02:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	0c1a      	lsrs	r2, r3, #16
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	3306      	adds	r3, #6
 8001d0e:	b2d2      	uxtb	r2, r2
 8001d10:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	011b      	lsls	r3, r3, #4
 8001d1a:	4413      	add	r3, r2
 8001d1c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	0e1a      	lsrs	r2, r3, #24
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	3307      	adds	r3, #7
 8001d28:	b2d2      	uxtb	r2, r2
 8001d2a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d108      	bne.n	8001d44 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	68da      	ldr	r2, [r3, #12]
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f042 0220 	orr.w	r2, r2, #32
 8001d40:	60da      	str	r2, [r3, #12]
 8001d42:	e007      	b.n	8001d54 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	691a      	ldr	r2, [r3, #16]
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f042 0220 	orr.w	r2, r2, #32
 8001d52:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001d54:	2300      	movs	r3, #0
 8001d56:	e006      	b.n	8001d66 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d5c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
  }
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	371c      	adds	r7, #28
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr

08001d72 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001d72:	b480      	push	{r7}
 8001d74:	b085      	sub	sp, #20
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	6078      	str	r0, [r7, #4]
 8001d7a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d82:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001d84:	7bfb      	ldrb	r3, [r7, #15]
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d002      	beq.n	8001d90 <HAL_CAN_ActivateNotification+0x1e>
 8001d8a:	7bfb      	ldrb	r3, [r7, #15]
 8001d8c:	2b02      	cmp	r3, #2
 8001d8e:	d109      	bne.n	8001da4 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	6959      	ldr	r1, [r3, #20]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	683a      	ldr	r2, [r7, #0]
 8001d9c:	430a      	orrs	r2, r1
 8001d9e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001da0:	2300      	movs	r3, #0
 8001da2:	e006      	b.n	8001db2 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
  }
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3714      	adds	r7, #20
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr

08001dbe <HAL_CAN_DeactivateNotification>:
  * @param  InactiveITs indicates which interrupts will be disabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeactivateNotification(CAN_HandleTypeDef *hcan, uint32_t InactiveITs)
{
 8001dbe:	b480      	push	{r7}
 8001dc0:	b085      	sub	sp, #20
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	6078      	str	r0, [r7, #4]
 8001dc6:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001dce:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(InactiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001dd0:	7bfb      	ldrb	r3, [r7, #15]
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d002      	beq.n	8001ddc <HAL_CAN_DeactivateNotification+0x1e>
 8001dd6:	7bfb      	ldrb	r3, [r7, #15]
 8001dd8:	2b02      	cmp	r3, #2
 8001dda:	d10a      	bne.n	8001df2 <HAL_CAN_DeactivateNotification+0x34>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Disable the selected interrupts */
    __HAL_CAN_DISABLE_IT(hcan, InactiveITs);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	6959      	ldr	r1, [r3, #20]
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	43da      	mvns	r2, r3
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	400a      	ands	r2, r1
 8001dec:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001dee:	2300      	movs	r3, #0
 8001df0:	e006      	b.n	8001e00 <HAL_CAN_DeactivateNotification+0x42>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
  }
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3714      	adds	r7, #20
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr

08001e0c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b08a      	sub	sp, #40	; 0x28
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001e14:	2300      	movs	r3, #0
 8001e16:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	695b      	ldr	r3, [r3, #20]
 8001e1e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	68db      	ldr	r3, [r3, #12]
 8001e36:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	691b      	ldr	r3, [r3, #16]
 8001e3e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	699b      	ldr	r3, [r3, #24]
 8001e46:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001e48:	6a3b      	ldr	r3, [r7, #32]
 8001e4a:	f003 0301 	and.w	r3, r3, #1
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d07c      	beq.n	8001f4c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001e52:	69bb      	ldr	r3, [r7, #24]
 8001e54:	f003 0301 	and.w	r3, r3, #1
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d023      	beq.n	8001ea4 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	2201      	movs	r2, #1
 8001e62:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001e64:	69bb      	ldr	r3, [r7, #24]
 8001e66:	f003 0302 	and.w	r3, r3, #2
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d003      	beq.n	8001e76 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f000 f97d 	bl	800216e <HAL_CAN_TxMailbox0CompleteCallback>
 8001e74:	e016      	b.n	8001ea4 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001e76:	69bb      	ldr	r3, [r7, #24]
 8001e78:	f003 0304 	and.w	r3, r3, #4
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d004      	beq.n	8001e8a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e82:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001e86:	627b      	str	r3, [r7, #36]	; 0x24
 8001e88:	e00c      	b.n	8001ea4 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001e8a:	69bb      	ldr	r3, [r7, #24]
 8001e8c:	f003 0308 	and.w	r3, r3, #8
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d004      	beq.n	8001e9e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e96:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e9a:	627b      	str	r3, [r7, #36]	; 0x24
 8001e9c:	e002      	b.n	8001ea4 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f000 f983 	bl	80021aa <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001ea4:	69bb      	ldr	r3, [r7, #24]
 8001ea6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d024      	beq.n	8001ef8 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001eb6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001eb8:	69bb      	ldr	r3, [r7, #24]
 8001eba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d003      	beq.n	8001eca <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f000 f95d 	bl	8002182 <HAL_CAN_TxMailbox1CompleteCallback>
 8001ec8:	e016      	b.n	8001ef8 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001eca:	69bb      	ldr	r3, [r7, #24]
 8001ecc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d004      	beq.n	8001ede <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001eda:	627b      	str	r3, [r7, #36]	; 0x24
 8001edc:	e00c      	b.n	8001ef8 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001ede:	69bb      	ldr	r3, [r7, #24]
 8001ee0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d004      	beq.n	8001ef2 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001eee:	627b      	str	r3, [r7, #36]	; 0x24
 8001ef0:	e002      	b.n	8001ef8 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f000 f963 	bl	80021be <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001ef8:	69bb      	ldr	r3, [r7, #24]
 8001efa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d024      	beq.n	8001f4c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001f0a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001f0c:	69bb      	ldr	r3, [r7, #24]
 8001f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d003      	beq.n	8001f1e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f000 f93d 	bl	8002196 <HAL_CAN_TxMailbox2CompleteCallback>
 8001f1c:	e016      	b.n	8001f4c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001f1e:	69bb      	ldr	r3, [r7, #24]
 8001f20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d004      	beq.n	8001f32 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f2e:	627b      	str	r3, [r7, #36]	; 0x24
 8001f30:	e00c      	b.n	8001f4c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001f32:	69bb      	ldr	r3, [r7, #24]
 8001f34:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d004      	beq.n	8001f46 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f42:	627b      	str	r3, [r7, #36]	; 0x24
 8001f44:	e002      	b.n	8001f4c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f000 f943 	bl	80021d2 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001f4c:	6a3b      	ldr	r3, [r7, #32]
 8001f4e:	f003 0308 	and.w	r3, r3, #8
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d00c      	beq.n	8001f70 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	f003 0310 	and.w	r3, r3, #16
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d007      	beq.n	8001f70 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f66:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	2210      	movs	r2, #16
 8001f6e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001f70:	6a3b      	ldr	r3, [r7, #32]
 8001f72:	f003 0304 	and.w	r3, r3, #4
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d00b      	beq.n	8001f92 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	f003 0308 	and.w	r3, r3, #8
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d006      	beq.n	8001f92 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	2208      	movs	r2, #8
 8001f8a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f000 f92a 	bl	80021e6 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001f92:	6a3b      	ldr	r3, [r7, #32]
 8001f94:	f003 0302 	and.w	r3, r3, #2
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d009      	beq.n	8001fb0 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	68db      	ldr	r3, [r3, #12]
 8001fa2:	f003 0303 	and.w	r3, r3, #3
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d002      	beq.n	8001fb0 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f7fe fd72 	bl	8000a94 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001fb0:	6a3b      	ldr	r3, [r7, #32]
 8001fb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d00c      	beq.n	8001fd4 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	f003 0310 	and.w	r3, r3, #16
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d007      	beq.n	8001fd4 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fca:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	2210      	movs	r2, #16
 8001fd2:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001fd4:	6a3b      	ldr	r3, [r7, #32]
 8001fd6:	f003 0320 	and.w	r3, r3, #32
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d00b      	beq.n	8001ff6 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	f003 0308 	and.w	r3, r3, #8
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d006      	beq.n	8001ff6 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	2208      	movs	r2, #8
 8001fee:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	f000 f90c 	bl	800220e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001ff6:	6a3b      	ldr	r3, [r7, #32]
 8001ff8:	f003 0310 	and.w	r3, r3, #16
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d009      	beq.n	8002014 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	691b      	ldr	r3, [r3, #16]
 8002006:	f003 0303 	and.w	r3, r3, #3
 800200a:	2b00      	cmp	r3, #0
 800200c:	d002      	beq.n	8002014 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f000 f8f3 	bl	80021fa <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002014:	6a3b      	ldr	r3, [r7, #32]
 8002016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800201a:	2b00      	cmp	r3, #0
 800201c:	d00b      	beq.n	8002036 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	f003 0310 	and.w	r3, r3, #16
 8002024:	2b00      	cmp	r3, #0
 8002026:	d006      	beq.n	8002036 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2210      	movs	r2, #16
 800202e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f000 f8f6 	bl	8002222 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002036:	6a3b      	ldr	r3, [r7, #32]
 8002038:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d00b      	beq.n	8002058 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	f003 0308 	and.w	r3, r3, #8
 8002046:	2b00      	cmp	r3, #0
 8002048:	d006      	beq.n	8002058 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	2208      	movs	r2, #8
 8002050:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f000 f8ef 	bl	8002236 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002058:	6a3b      	ldr	r3, [r7, #32]
 800205a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d075      	beq.n	800214e <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	f003 0304 	and.w	r3, r3, #4
 8002068:	2b00      	cmp	r3, #0
 800206a:	d06c      	beq.n	8002146 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800206c:	6a3b      	ldr	r3, [r7, #32]
 800206e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002072:	2b00      	cmp	r3, #0
 8002074:	d008      	beq.n	8002088 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800207c:	2b00      	cmp	r3, #0
 800207e:	d003      	beq.n	8002088 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002082:	f043 0301 	orr.w	r3, r3, #1
 8002086:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002088:	6a3b      	ldr	r3, [r7, #32]
 800208a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800208e:	2b00      	cmp	r3, #0
 8002090:	d008      	beq.n	80020a4 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002098:	2b00      	cmp	r3, #0
 800209a:	d003      	beq.n	80020a4 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800209c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209e:	f043 0302 	orr.w	r3, r3, #2
 80020a2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80020a4:	6a3b      	ldr	r3, [r7, #32]
 80020a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d008      	beq.n	80020c0 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d003      	beq.n	80020c0 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80020b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ba:	f043 0304 	orr.w	r3, r3, #4
 80020be:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80020c0:	6a3b      	ldr	r3, [r7, #32]
 80020c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d03d      	beq.n	8002146 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d038      	beq.n	8002146 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80020da:	2b30      	cmp	r3, #48	; 0x30
 80020dc:	d017      	beq.n	800210e <HAL_CAN_IRQHandler+0x302>
 80020de:	2b30      	cmp	r3, #48	; 0x30
 80020e0:	d804      	bhi.n	80020ec <HAL_CAN_IRQHandler+0x2e0>
 80020e2:	2b10      	cmp	r3, #16
 80020e4:	d009      	beq.n	80020fa <HAL_CAN_IRQHandler+0x2ee>
 80020e6:	2b20      	cmp	r3, #32
 80020e8:	d00c      	beq.n	8002104 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80020ea:	e024      	b.n	8002136 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 80020ec:	2b50      	cmp	r3, #80	; 0x50
 80020ee:	d018      	beq.n	8002122 <HAL_CAN_IRQHandler+0x316>
 80020f0:	2b60      	cmp	r3, #96	; 0x60
 80020f2:	d01b      	beq.n	800212c <HAL_CAN_IRQHandler+0x320>
 80020f4:	2b40      	cmp	r3, #64	; 0x40
 80020f6:	d00f      	beq.n	8002118 <HAL_CAN_IRQHandler+0x30c>
            break;
 80020f8:	e01d      	b.n	8002136 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 80020fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fc:	f043 0308 	orr.w	r3, r3, #8
 8002100:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002102:	e018      	b.n	8002136 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002106:	f043 0310 	orr.w	r3, r3, #16
 800210a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800210c:	e013      	b.n	8002136 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 800210e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002110:	f043 0320 	orr.w	r3, r3, #32
 8002114:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002116:	e00e      	b.n	8002136 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8002118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800211e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002120:	e009      	b.n	8002136 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8002122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002124:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002128:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800212a:	e004      	b.n	8002136 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 800212c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002132:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002134:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	699a      	ldr	r2, [r3, #24]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002144:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	2204      	movs	r2, #4
 800214c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800214e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002150:	2b00      	cmp	r3, #0
 8002152:	d008      	beq.n	8002166 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215a:	431a      	orrs	r2, r3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	f000 f872 	bl	800224a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002166:	bf00      	nop
 8002168:	3728      	adds	r7, #40	; 0x28
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}

0800216e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800216e:	b480      	push	{r7}
 8002170:	b083      	sub	sp, #12
 8002172:	af00      	add	r7, sp, #0
 8002174:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002176:	bf00      	nop
 8002178:	370c      	adds	r7, #12
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr

08002182 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002182:	b480      	push	{r7}
 8002184:	b083      	sub	sp, #12
 8002186:	af00      	add	r7, sp, #0
 8002188:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800218a:	bf00      	nop
 800218c:	370c      	adds	r7, #12
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr

08002196 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002196:	b480      	push	{r7}
 8002198:	b083      	sub	sp, #12
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800219e:	bf00      	nop
 80021a0:	370c      	adds	r7, #12
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr

080021aa <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80021aa:	b480      	push	{r7}
 80021ac:	b083      	sub	sp, #12
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80021b2:	bf00      	nop
 80021b4:	370c      	adds	r7, #12
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr

080021be <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80021be:	b480      	push	{r7}
 80021c0:	b083      	sub	sp, #12
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80021c6:	bf00      	nop
 80021c8:	370c      	adds	r7, #12
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr

080021d2 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80021d2:	b480      	push	{r7}
 80021d4:	b083      	sub	sp, #12
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80021da:	bf00      	nop
 80021dc:	370c      	adds	r7, #12
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr

080021e6 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80021e6:	b480      	push	{r7}
 80021e8:	b083      	sub	sp, #12
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80021ee:	bf00      	nop
 80021f0:	370c      	adds	r7, #12
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr

080021fa <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80021fa:	b480      	push	{r7}
 80021fc:	b083      	sub	sp, #12
 80021fe:	af00      	add	r7, sp, #0
 8002200:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002202:	bf00      	nop
 8002204:	370c      	adds	r7, #12
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr

0800220e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800220e:	b480      	push	{r7}
 8002210:	b083      	sub	sp, #12
 8002212:	af00      	add	r7, sp, #0
 8002214:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002216:	bf00      	nop
 8002218:	370c      	adds	r7, #12
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr

08002222 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002222:	b480      	push	{r7}
 8002224:	b083      	sub	sp, #12
 8002226:	af00      	add	r7, sp, #0
 8002228:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800222a:	bf00      	nop
 800222c:	370c      	adds	r7, #12
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr

08002236 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002236:	b480      	push	{r7}
 8002238:	b083      	sub	sp, #12
 800223a:	af00      	add	r7, sp, #0
 800223c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800223e:	bf00      	nop
 8002240:	370c      	adds	r7, #12
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr

0800224a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800224a:	b480      	push	{r7}
 800224c:	b083      	sub	sp, #12
 800224e:	af00      	add	r7, sp, #0
 8002250:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002252:	bf00      	nop
 8002254:	370c      	adds	r7, #12
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
	...

08002260 <__NVIC_SetPriorityGrouping>:
{
 8002260:	b480      	push	{r7}
 8002262:	b085      	sub	sp, #20
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	f003 0307 	and.w	r3, r3, #7
 800226e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002270:	4b0b      	ldr	r3, [pc, #44]	; (80022a0 <__NVIC_SetPriorityGrouping+0x40>)
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002276:	68ba      	ldr	r2, [r7, #8]
 8002278:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800227c:	4013      	ands	r3, r2
 800227e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002288:	4b06      	ldr	r3, [pc, #24]	; (80022a4 <__NVIC_SetPriorityGrouping+0x44>)
 800228a:	4313      	orrs	r3, r2
 800228c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800228e:	4a04      	ldr	r2, [pc, #16]	; (80022a0 <__NVIC_SetPriorityGrouping+0x40>)
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	60d3      	str	r3, [r2, #12]
}
 8002294:	bf00      	nop
 8002296:	3714      	adds	r7, #20
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr
 80022a0:	e000ed00 	.word	0xe000ed00
 80022a4:	05fa0000 	.word	0x05fa0000

080022a8 <__NVIC_GetPriorityGrouping>:
{
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022ac:	4b04      	ldr	r3, [pc, #16]	; (80022c0 <__NVIC_GetPriorityGrouping+0x18>)
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	0a1b      	lsrs	r3, r3, #8
 80022b2:	f003 0307 	and.w	r3, r3, #7
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr
 80022c0:	e000ed00 	.word	0xe000ed00

080022c4 <__NVIC_EnableIRQ>:
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	4603      	mov	r3, r0
 80022cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	db0b      	blt.n	80022ee <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022d6:	79fb      	ldrb	r3, [r7, #7]
 80022d8:	f003 021f 	and.w	r2, r3, #31
 80022dc:	4907      	ldr	r1, [pc, #28]	; (80022fc <__NVIC_EnableIRQ+0x38>)
 80022de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e2:	095b      	lsrs	r3, r3, #5
 80022e4:	2001      	movs	r0, #1
 80022e6:	fa00 f202 	lsl.w	r2, r0, r2
 80022ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80022ee:	bf00      	nop
 80022f0:	370c      	adds	r7, #12
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr
 80022fa:	bf00      	nop
 80022fc:	e000e100 	.word	0xe000e100

08002300 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	4603      	mov	r3, r0
 8002308:	6039      	str	r1, [r7, #0]
 800230a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800230c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002310:	2b00      	cmp	r3, #0
 8002312:	db0a      	blt.n	800232a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	b2da      	uxtb	r2, r3
 8002318:	490c      	ldr	r1, [pc, #48]	; (800234c <__NVIC_SetPriority+0x4c>)
 800231a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800231e:	0112      	lsls	r2, r2, #4
 8002320:	b2d2      	uxtb	r2, r2
 8002322:	440b      	add	r3, r1
 8002324:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002328:	e00a      	b.n	8002340 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	b2da      	uxtb	r2, r3
 800232e:	4908      	ldr	r1, [pc, #32]	; (8002350 <__NVIC_SetPriority+0x50>)
 8002330:	79fb      	ldrb	r3, [r7, #7]
 8002332:	f003 030f 	and.w	r3, r3, #15
 8002336:	3b04      	subs	r3, #4
 8002338:	0112      	lsls	r2, r2, #4
 800233a:	b2d2      	uxtb	r2, r2
 800233c:	440b      	add	r3, r1
 800233e:	761a      	strb	r2, [r3, #24]
}
 8002340:	bf00      	nop
 8002342:	370c      	adds	r7, #12
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr
 800234c:	e000e100 	.word	0xe000e100
 8002350:	e000ed00 	.word	0xe000ed00

08002354 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002354:	b480      	push	{r7}
 8002356:	b089      	sub	sp, #36	; 0x24
 8002358:	af00      	add	r7, sp, #0
 800235a:	60f8      	str	r0, [r7, #12]
 800235c:	60b9      	str	r1, [r7, #8]
 800235e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	f003 0307 	and.w	r3, r3, #7
 8002366:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	f1c3 0307 	rsb	r3, r3, #7
 800236e:	2b04      	cmp	r3, #4
 8002370:	bf28      	it	cs
 8002372:	2304      	movcs	r3, #4
 8002374:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	3304      	adds	r3, #4
 800237a:	2b06      	cmp	r3, #6
 800237c:	d902      	bls.n	8002384 <NVIC_EncodePriority+0x30>
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	3b03      	subs	r3, #3
 8002382:	e000      	b.n	8002386 <NVIC_EncodePriority+0x32>
 8002384:	2300      	movs	r3, #0
 8002386:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002388:	f04f 32ff 	mov.w	r2, #4294967295
 800238c:	69bb      	ldr	r3, [r7, #24]
 800238e:	fa02 f303 	lsl.w	r3, r2, r3
 8002392:	43da      	mvns	r2, r3
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	401a      	ands	r2, r3
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800239c:	f04f 31ff 	mov.w	r1, #4294967295
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	fa01 f303 	lsl.w	r3, r1, r3
 80023a6:	43d9      	mvns	r1, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023ac:	4313      	orrs	r3, r2
         );
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3724      	adds	r7, #36	; 0x24
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr

080023ba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023ba:	b580      	push	{r7, lr}
 80023bc:	b082      	sub	sp, #8
 80023be:	af00      	add	r7, sp, #0
 80023c0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f7ff ff4c 	bl	8002260 <__NVIC_SetPriorityGrouping>
}
 80023c8:	bf00      	nop
 80023ca:	3708      	adds	r7, #8
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}

080023d0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b086      	sub	sp, #24
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	4603      	mov	r3, r0
 80023d8:	60b9      	str	r1, [r7, #8]
 80023da:	607a      	str	r2, [r7, #4]
 80023dc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80023de:	2300      	movs	r3, #0
 80023e0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023e2:	f7ff ff61 	bl	80022a8 <__NVIC_GetPriorityGrouping>
 80023e6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	68b9      	ldr	r1, [r7, #8]
 80023ec:	6978      	ldr	r0, [r7, #20]
 80023ee:	f7ff ffb1 	bl	8002354 <NVIC_EncodePriority>
 80023f2:	4602      	mov	r2, r0
 80023f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023f8:	4611      	mov	r1, r2
 80023fa:	4618      	mov	r0, r3
 80023fc:	f7ff ff80 	bl	8002300 <__NVIC_SetPriority>
}
 8002400:	bf00      	nop
 8002402:	3718      	adds	r7, #24
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}

08002408 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
 800240e:	4603      	mov	r3, r0
 8002410:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002416:	4618      	mov	r0, r3
 8002418:	f7ff ff54 	bl	80022c4 <__NVIC_EnableIRQ>
}
 800241c:	bf00      	nop
 800241e:	3708      	adds	r7, #8
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}

08002424 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b086      	sub	sp, #24
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800242c:	2300      	movs	r3, #0
 800242e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002430:	f7ff f858 	bl	80014e4 <HAL_GetTick>
 8002434:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d101      	bne.n	8002440 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e099      	b.n	8002574 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2200      	movs	r2, #0
 8002444:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2202      	movs	r2, #2
 800244c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f022 0201 	bic.w	r2, r2, #1
 800245e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002460:	e00f      	b.n	8002482 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002462:	f7ff f83f 	bl	80014e4 <HAL_GetTick>
 8002466:	4602      	mov	r2, r0
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	1ad3      	subs	r3, r2, r3
 800246c:	2b05      	cmp	r3, #5
 800246e:	d908      	bls.n	8002482 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2220      	movs	r2, #32
 8002474:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2203      	movs	r2, #3
 800247a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	e078      	b.n	8002574 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0301 	and.w	r3, r3, #1
 800248c:	2b00      	cmp	r3, #0
 800248e:	d1e8      	bne.n	8002462 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002498:	697a      	ldr	r2, [r7, #20]
 800249a:	4b38      	ldr	r3, [pc, #224]	; (800257c <HAL_DMA_Init+0x158>)
 800249c:	4013      	ands	r3, r2
 800249e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	685a      	ldr	r2, [r3, #4]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	691b      	ldr	r3, [r3, #16]
 80024b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	699b      	ldr	r3, [r3, #24]
 80024c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024c6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6a1b      	ldr	r3, [r3, #32]
 80024cc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024ce:	697a      	ldr	r2, [r7, #20]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d8:	2b04      	cmp	r3, #4
 80024da:	d107      	bne.n	80024ec <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e4:	4313      	orrs	r3, r2
 80024e6:	697a      	ldr	r2, [r7, #20]
 80024e8:	4313      	orrs	r3, r2
 80024ea:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	697a      	ldr	r2, [r7, #20]
 80024f2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	695b      	ldr	r3, [r3, #20]
 80024fa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	f023 0307 	bic.w	r3, r3, #7
 8002502:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002508:	697a      	ldr	r2, [r7, #20]
 800250a:	4313      	orrs	r3, r2
 800250c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002512:	2b04      	cmp	r3, #4
 8002514:	d117      	bne.n	8002546 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800251a:	697a      	ldr	r2, [r7, #20]
 800251c:	4313      	orrs	r3, r2
 800251e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002524:	2b00      	cmp	r3, #0
 8002526:	d00e      	beq.n	8002546 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f000 faa5 	bl	8002a78 <DMA_CheckFifoParam>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d008      	beq.n	8002546 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2240      	movs	r2, #64	; 0x40
 8002538:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2201      	movs	r2, #1
 800253e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002542:	2301      	movs	r3, #1
 8002544:	e016      	b.n	8002574 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	697a      	ldr	r2, [r7, #20]
 800254c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f000 fa5c 	bl	8002a0c <DMA_CalcBaseAndBitshift>
 8002554:	4603      	mov	r3, r0
 8002556:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800255c:	223f      	movs	r2, #63	; 0x3f
 800255e:	409a      	lsls	r2, r3
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2200      	movs	r2, #0
 8002568:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2201      	movs	r2, #1
 800256e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002572:	2300      	movs	r3, #0
}
 8002574:	4618      	mov	r0, r3
 8002576:	3718      	adds	r7, #24
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}
 800257c:	e010803f 	.word	0xe010803f

08002580 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b086      	sub	sp, #24
 8002584:	af00      	add	r7, sp, #0
 8002586:	60f8      	str	r0, [r7, #12]
 8002588:	60b9      	str	r1, [r7, #8]
 800258a:	607a      	str	r2, [r7, #4]
 800258c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800258e:	2300      	movs	r3, #0
 8002590:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002596:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d101      	bne.n	80025a6 <HAL_DMA_Start_IT+0x26>
 80025a2:	2302      	movs	r3, #2
 80025a4:	e048      	b.n	8002638 <HAL_DMA_Start_IT+0xb8>
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2201      	movs	r2, #1
 80025aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d137      	bne.n	800262a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2202      	movs	r2, #2
 80025be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2200      	movs	r2, #0
 80025c6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	687a      	ldr	r2, [r7, #4]
 80025cc:	68b9      	ldr	r1, [r7, #8]
 80025ce:	68f8      	ldr	r0, [r7, #12]
 80025d0:	f000 f9ee 	bl	80029b0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025d8:	223f      	movs	r2, #63	; 0x3f
 80025da:	409a      	lsls	r2, r3
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f042 0216 	orr.w	r2, r2, #22
 80025ee:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	695a      	ldr	r2, [r3, #20]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80025fe:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002604:	2b00      	cmp	r3, #0
 8002606:	d007      	beq.n	8002618 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f042 0208 	orr.w	r2, r2, #8
 8002616:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f042 0201 	orr.w	r2, r2, #1
 8002626:	601a      	str	r2, [r3, #0]
 8002628:	e005      	b.n	8002636 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2200      	movs	r2, #0
 800262e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002632:	2302      	movs	r3, #2
 8002634:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002636:	7dfb      	ldrb	r3, [r7, #23]
}
 8002638:	4618      	mov	r0, r3
 800263a:	3718      	adds	r7, #24
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}

08002640 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002640:	b480      	push	{r7}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800264e:	b2db      	uxtb	r3, r3
 8002650:	2b02      	cmp	r3, #2
 8002652:	d004      	beq.n	800265e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2280      	movs	r2, #128	; 0x80
 8002658:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e00c      	b.n	8002678 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2205      	movs	r2, #5
 8002662:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f022 0201 	bic.w	r2, r2, #1
 8002674:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002676:	2300      	movs	r3, #0
}
 8002678:	4618      	mov	r0, r3
 800267a:	370c      	adds	r7, #12
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr

08002684 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b086      	sub	sp, #24
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800268c:	2300      	movs	r3, #0
 800268e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002690:	4b92      	ldr	r3, [pc, #584]	; (80028dc <HAL_DMA_IRQHandler+0x258>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a92      	ldr	r2, [pc, #584]	; (80028e0 <HAL_DMA_IRQHandler+0x25c>)
 8002696:	fba2 2303 	umull	r2, r3, r2, r3
 800269a:	0a9b      	lsrs	r3, r3, #10
 800269c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026a2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026ae:	2208      	movs	r2, #8
 80026b0:	409a      	lsls	r2, r3
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	4013      	ands	r3, r2
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d01a      	beq.n	80026f0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0304 	and.w	r3, r3, #4
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d013      	beq.n	80026f0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f022 0204 	bic.w	r2, r2, #4
 80026d6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026dc:	2208      	movs	r2, #8
 80026de:	409a      	lsls	r2, r3
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026e8:	f043 0201 	orr.w	r2, r3, #1
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026f4:	2201      	movs	r2, #1
 80026f6:	409a      	lsls	r2, r3
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	4013      	ands	r3, r2
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d012      	beq.n	8002726 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	695b      	ldr	r3, [r3, #20]
 8002706:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800270a:	2b00      	cmp	r3, #0
 800270c:	d00b      	beq.n	8002726 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002712:	2201      	movs	r2, #1
 8002714:	409a      	lsls	r2, r3
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800271e:	f043 0202 	orr.w	r2, r3, #2
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800272a:	2204      	movs	r2, #4
 800272c:	409a      	lsls	r2, r3
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	4013      	ands	r3, r2
 8002732:	2b00      	cmp	r3, #0
 8002734:	d012      	beq.n	800275c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0302 	and.w	r3, r3, #2
 8002740:	2b00      	cmp	r3, #0
 8002742:	d00b      	beq.n	800275c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002748:	2204      	movs	r2, #4
 800274a:	409a      	lsls	r2, r3
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002754:	f043 0204 	orr.w	r2, r3, #4
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002760:	2210      	movs	r2, #16
 8002762:	409a      	lsls	r2, r3
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	4013      	ands	r3, r2
 8002768:	2b00      	cmp	r3, #0
 800276a:	d043      	beq.n	80027f4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0308 	and.w	r3, r3, #8
 8002776:	2b00      	cmp	r3, #0
 8002778:	d03c      	beq.n	80027f4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800277e:	2210      	movs	r2, #16
 8002780:	409a      	lsls	r2, r3
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002790:	2b00      	cmp	r3, #0
 8002792:	d018      	beq.n	80027c6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d108      	bne.n	80027b4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d024      	beq.n	80027f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	4798      	blx	r3
 80027b2:	e01f      	b.n	80027f4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d01b      	beq.n	80027f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	4798      	blx	r3
 80027c4:	e016      	b.n	80027f4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d107      	bne.n	80027e4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f022 0208 	bic.w	r2, r2, #8
 80027e2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d003      	beq.n	80027f4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027f8:	2220      	movs	r2, #32
 80027fa:	409a      	lsls	r2, r3
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	4013      	ands	r3, r2
 8002800:	2b00      	cmp	r3, #0
 8002802:	f000 808e 	beq.w	8002922 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 0310 	and.w	r3, r3, #16
 8002810:	2b00      	cmp	r3, #0
 8002812:	f000 8086 	beq.w	8002922 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800281a:	2220      	movs	r2, #32
 800281c:	409a      	lsls	r2, r3
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002828:	b2db      	uxtb	r3, r3
 800282a:	2b05      	cmp	r3, #5
 800282c:	d136      	bne.n	800289c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f022 0216 	bic.w	r2, r2, #22
 800283c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	695a      	ldr	r2, [r3, #20]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800284c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002852:	2b00      	cmp	r3, #0
 8002854:	d103      	bne.n	800285e <HAL_DMA_IRQHandler+0x1da>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800285a:	2b00      	cmp	r3, #0
 800285c:	d007      	beq.n	800286e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f022 0208 	bic.w	r2, r2, #8
 800286c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002872:	223f      	movs	r2, #63	; 0x3f
 8002874:	409a      	lsls	r2, r3
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2200      	movs	r2, #0
 800287e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2201      	movs	r2, #1
 8002886:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800288e:	2b00      	cmp	r3, #0
 8002890:	d07d      	beq.n	800298e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	4798      	blx	r3
        }
        return;
 800289a:	e078      	b.n	800298e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d01c      	beq.n	80028e4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d108      	bne.n	80028ca <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d030      	beq.n	8002922 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c4:	6878      	ldr	r0, [r7, #4]
 80028c6:	4798      	blx	r3
 80028c8:	e02b      	b.n	8002922 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d027      	beq.n	8002922 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	4798      	blx	r3
 80028da:	e022      	b.n	8002922 <HAL_DMA_IRQHandler+0x29e>
 80028dc:	20000010 	.word	0x20000010
 80028e0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d10f      	bne.n	8002912 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f022 0210 	bic.w	r2, r2, #16
 8002900:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2201      	movs	r2, #1
 800290e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002916:	2b00      	cmp	r3, #0
 8002918:	d003      	beq.n	8002922 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002926:	2b00      	cmp	r3, #0
 8002928:	d032      	beq.n	8002990 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800292e:	f003 0301 	and.w	r3, r3, #1
 8002932:	2b00      	cmp	r3, #0
 8002934:	d022      	beq.n	800297c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2205      	movs	r2, #5
 800293a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f022 0201 	bic.w	r2, r2, #1
 800294c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	3301      	adds	r3, #1
 8002952:	60bb      	str	r3, [r7, #8]
 8002954:	697a      	ldr	r2, [r7, #20]
 8002956:	429a      	cmp	r2, r3
 8002958:	d307      	bcc.n	800296a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 0301 	and.w	r3, r3, #1
 8002964:	2b00      	cmp	r3, #0
 8002966:	d1f2      	bne.n	800294e <HAL_DMA_IRQHandler+0x2ca>
 8002968:	e000      	b.n	800296c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800296a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2200      	movs	r2, #0
 8002970:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002980:	2b00      	cmp	r3, #0
 8002982:	d005      	beq.n	8002990 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	4798      	blx	r3
 800298c:	e000      	b.n	8002990 <HAL_DMA_IRQHandler+0x30c>
        return;
 800298e:	bf00      	nop
    }
  }
}
 8002990:	3718      	adds	r7, #24
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop

08002998 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	370c      	adds	r7, #12
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr

080029b0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b085      	sub	sp, #20
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	60f8      	str	r0, [r7, #12]
 80029b8:	60b9      	str	r1, [r7, #8]
 80029ba:	607a      	str	r2, [r7, #4]
 80029bc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80029cc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	683a      	ldr	r2, [r7, #0]
 80029d4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	2b40      	cmp	r3, #64	; 0x40
 80029dc:	d108      	bne.n	80029f0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	68ba      	ldr	r2, [r7, #8]
 80029ec:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80029ee:	e007      	b.n	8002a00 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	68ba      	ldr	r2, [r7, #8]
 80029f6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	60da      	str	r2, [r3, #12]
}
 8002a00:	bf00      	nop
 8002a02:	3714      	adds	r7, #20
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr

08002a0c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b085      	sub	sp, #20
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	3b10      	subs	r3, #16
 8002a1c:	4a13      	ldr	r2, [pc, #76]	; (8002a6c <DMA_CalcBaseAndBitshift+0x60>)
 8002a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a22:	091b      	lsrs	r3, r3, #4
 8002a24:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002a26:	4a12      	ldr	r2, [pc, #72]	; (8002a70 <DMA_CalcBaseAndBitshift+0x64>)
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	4413      	add	r3, r2
 8002a2c:	781b      	ldrb	r3, [r3, #0]
 8002a2e:	461a      	mov	r2, r3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2b03      	cmp	r3, #3
 8002a38:	d908      	bls.n	8002a4c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	461a      	mov	r2, r3
 8002a40:	4b0c      	ldr	r3, [pc, #48]	; (8002a74 <DMA_CalcBaseAndBitshift+0x68>)
 8002a42:	4013      	ands	r3, r2
 8002a44:	1d1a      	adds	r2, r3, #4
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	659a      	str	r2, [r3, #88]	; 0x58
 8002a4a:	e006      	b.n	8002a5a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	461a      	mov	r2, r3
 8002a52:	4b08      	ldr	r3, [pc, #32]	; (8002a74 <DMA_CalcBaseAndBitshift+0x68>)
 8002a54:	4013      	ands	r3, r2
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3714      	adds	r7, #20
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr
 8002a6a:	bf00      	nop
 8002a6c:	aaaaaaab 	.word	0xaaaaaaab
 8002a70:	08016164 	.word	0x08016164
 8002a74:	fffffc00 	.word	0xfffffc00

08002a78 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b085      	sub	sp, #20
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a80:	2300      	movs	r3, #0
 8002a82:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a88:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	699b      	ldr	r3, [r3, #24]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d11f      	bne.n	8002ad2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	2b03      	cmp	r3, #3
 8002a96:	d855      	bhi.n	8002b44 <DMA_CheckFifoParam+0xcc>
 8002a98:	a201      	add	r2, pc, #4	; (adr r2, 8002aa0 <DMA_CheckFifoParam+0x28>)
 8002a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a9e:	bf00      	nop
 8002aa0:	08002ab1 	.word	0x08002ab1
 8002aa4:	08002ac3 	.word	0x08002ac3
 8002aa8:	08002ab1 	.word	0x08002ab1
 8002aac:	08002b45 	.word	0x08002b45
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d045      	beq.n	8002b48 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ac0:	e042      	b.n	8002b48 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002aca:	d13f      	bne.n	8002b4c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ad0:	e03c      	b.n	8002b4c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	699b      	ldr	r3, [r3, #24]
 8002ad6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ada:	d121      	bne.n	8002b20 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	2b03      	cmp	r3, #3
 8002ae0:	d836      	bhi.n	8002b50 <DMA_CheckFifoParam+0xd8>
 8002ae2:	a201      	add	r2, pc, #4	; (adr r2, 8002ae8 <DMA_CheckFifoParam+0x70>)
 8002ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ae8:	08002af9 	.word	0x08002af9
 8002aec:	08002aff 	.word	0x08002aff
 8002af0:	08002af9 	.word	0x08002af9
 8002af4:	08002b11 	.word	0x08002b11
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	73fb      	strb	r3, [r7, #15]
      break;
 8002afc:	e02f      	b.n	8002b5e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b02:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d024      	beq.n	8002b54 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b0e:	e021      	b.n	8002b54 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b14:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b18:	d11e      	bne.n	8002b58 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002b1e:	e01b      	b.n	8002b58 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d902      	bls.n	8002b2c <DMA_CheckFifoParam+0xb4>
 8002b26:	2b03      	cmp	r3, #3
 8002b28:	d003      	beq.n	8002b32 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002b2a:	e018      	b.n	8002b5e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	73fb      	strb	r3, [r7, #15]
      break;
 8002b30:	e015      	b.n	8002b5e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b36:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d00e      	beq.n	8002b5c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	73fb      	strb	r3, [r7, #15]
      break;
 8002b42:	e00b      	b.n	8002b5c <DMA_CheckFifoParam+0xe4>
      break;
 8002b44:	bf00      	nop
 8002b46:	e00a      	b.n	8002b5e <DMA_CheckFifoParam+0xe6>
      break;
 8002b48:	bf00      	nop
 8002b4a:	e008      	b.n	8002b5e <DMA_CheckFifoParam+0xe6>
      break;
 8002b4c:	bf00      	nop
 8002b4e:	e006      	b.n	8002b5e <DMA_CheckFifoParam+0xe6>
      break;
 8002b50:	bf00      	nop
 8002b52:	e004      	b.n	8002b5e <DMA_CheckFifoParam+0xe6>
      break;
 8002b54:	bf00      	nop
 8002b56:	e002      	b.n	8002b5e <DMA_CheckFifoParam+0xe6>
      break;   
 8002b58:	bf00      	nop
 8002b5a:	e000      	b.n	8002b5e <DMA_CheckFifoParam+0xe6>
      break;
 8002b5c:	bf00      	nop
    }
  } 
  
  return status; 
 8002b5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3714      	adds	r7, #20
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr

08002b6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b089      	sub	sp, #36	; 0x24
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
 8002b74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002b76:	2300      	movs	r3, #0
 8002b78:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002b82:	2300      	movs	r3, #0
 8002b84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002b86:	2300      	movs	r3, #0
 8002b88:	61fb      	str	r3, [r7, #28]
 8002b8a:	e175      	b.n	8002e78 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	fa02 f303 	lsl.w	r3, r2, r3
 8002b94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	697a      	ldr	r2, [r7, #20]
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ba0:	693a      	ldr	r2, [r7, #16]
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	f040 8164 	bne.w	8002e72 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d00b      	beq.n	8002bca <HAL_GPIO_Init+0x5e>
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d007      	beq.n	8002bca <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002bbe:	2b11      	cmp	r3, #17
 8002bc0:	d003      	beq.n	8002bca <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	2b12      	cmp	r3, #18
 8002bc8:	d130      	bne.n	8002c2c <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	005b      	lsls	r3, r3, #1
 8002bd4:	2203      	movs	r2, #3
 8002bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bda:	43db      	mvns	r3, r3
 8002bdc:	69ba      	ldr	r2, [r7, #24]
 8002bde:	4013      	ands	r3, r2
 8002be0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	68da      	ldr	r2, [r3, #12]
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	005b      	lsls	r3, r3, #1
 8002bea:	fa02 f303 	lsl.w	r3, r2, r3
 8002bee:	69ba      	ldr	r2, [r7, #24]
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	69ba      	ldr	r2, [r7, #24]
 8002bf8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c00:	2201      	movs	r2, #1
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	fa02 f303 	lsl.w	r3, r2, r3
 8002c08:	43db      	mvns	r3, r3
 8002c0a:	69ba      	ldr	r2, [r7, #24]
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	091b      	lsrs	r3, r3, #4
 8002c16:	f003 0201 	and.w	r2, r3, #1
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c20:	69ba      	ldr	r2, [r7, #24]
 8002c22:	4313      	orrs	r3, r2
 8002c24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	69ba      	ldr	r2, [r7, #24]
 8002c2a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	005b      	lsls	r3, r3, #1
 8002c36:	2203      	movs	r2, #3
 8002c38:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3c:	43db      	mvns	r3, r3
 8002c3e:	69ba      	ldr	r2, [r7, #24]
 8002c40:	4013      	ands	r3, r2
 8002c42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	689a      	ldr	r2, [r3, #8]
 8002c48:	69fb      	ldr	r3, [r7, #28]
 8002c4a:	005b      	lsls	r3, r3, #1
 8002c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c50:	69ba      	ldr	r2, [r7, #24]
 8002c52:	4313      	orrs	r3, r2
 8002c54:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	69ba      	ldr	r2, [r7, #24]
 8002c5a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	2b02      	cmp	r3, #2
 8002c62:	d003      	beq.n	8002c6c <HAL_GPIO_Init+0x100>
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	2b12      	cmp	r3, #18
 8002c6a:	d123      	bne.n	8002cb4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	08da      	lsrs	r2, r3, #3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	3208      	adds	r2, #8
 8002c74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	f003 0307 	and.w	r3, r3, #7
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	220f      	movs	r2, #15
 8002c84:	fa02 f303 	lsl.w	r3, r2, r3
 8002c88:	43db      	mvns	r3, r3
 8002c8a:	69ba      	ldr	r2, [r7, #24]
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	691a      	ldr	r2, [r3, #16]
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	f003 0307 	and.w	r3, r3, #7
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca0:	69ba      	ldr	r2, [r7, #24]
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	08da      	lsrs	r2, r3, #3
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	3208      	adds	r2, #8
 8002cae:	69b9      	ldr	r1, [r7, #24]
 8002cb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	005b      	lsls	r3, r3, #1
 8002cbe:	2203      	movs	r2, #3
 8002cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc4:	43db      	mvns	r3, r3
 8002cc6:	69ba      	ldr	r2, [r7, #24]
 8002cc8:	4013      	ands	r3, r2
 8002cca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f003 0203 	and.w	r2, r3, #3
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	005b      	lsls	r3, r3, #1
 8002cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cdc:	69ba      	ldr	r2, [r7, #24]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	69ba      	ldr	r2, [r7, #24]
 8002ce6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	f000 80be 	beq.w	8002e72 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cf6:	4b65      	ldr	r3, [pc, #404]	; (8002e8c <HAL_GPIO_Init+0x320>)
 8002cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cfa:	4a64      	ldr	r2, [pc, #400]	; (8002e8c <HAL_GPIO_Init+0x320>)
 8002cfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d00:	6453      	str	r3, [r2, #68]	; 0x44
 8002d02:	4b62      	ldr	r3, [pc, #392]	; (8002e8c <HAL_GPIO_Init+0x320>)
 8002d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d0a:	60fb      	str	r3, [r7, #12]
 8002d0c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002d0e:	4a60      	ldr	r2, [pc, #384]	; (8002e90 <HAL_GPIO_Init+0x324>)
 8002d10:	69fb      	ldr	r3, [r7, #28]
 8002d12:	089b      	lsrs	r3, r3, #2
 8002d14:	3302      	adds	r3, #2
 8002d16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	f003 0303 	and.w	r3, r3, #3
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	220f      	movs	r2, #15
 8002d26:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2a:	43db      	mvns	r3, r3
 8002d2c:	69ba      	ldr	r2, [r7, #24]
 8002d2e:	4013      	ands	r3, r2
 8002d30:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	4a57      	ldr	r2, [pc, #348]	; (8002e94 <HAL_GPIO_Init+0x328>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d037      	beq.n	8002daa <HAL_GPIO_Init+0x23e>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4a56      	ldr	r2, [pc, #344]	; (8002e98 <HAL_GPIO_Init+0x32c>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d031      	beq.n	8002da6 <HAL_GPIO_Init+0x23a>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	4a55      	ldr	r2, [pc, #340]	; (8002e9c <HAL_GPIO_Init+0x330>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d02b      	beq.n	8002da2 <HAL_GPIO_Init+0x236>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4a54      	ldr	r2, [pc, #336]	; (8002ea0 <HAL_GPIO_Init+0x334>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d025      	beq.n	8002d9e <HAL_GPIO_Init+0x232>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4a53      	ldr	r2, [pc, #332]	; (8002ea4 <HAL_GPIO_Init+0x338>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d01f      	beq.n	8002d9a <HAL_GPIO_Init+0x22e>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4a52      	ldr	r2, [pc, #328]	; (8002ea8 <HAL_GPIO_Init+0x33c>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d019      	beq.n	8002d96 <HAL_GPIO_Init+0x22a>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4a51      	ldr	r2, [pc, #324]	; (8002eac <HAL_GPIO_Init+0x340>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d013      	beq.n	8002d92 <HAL_GPIO_Init+0x226>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4a50      	ldr	r2, [pc, #320]	; (8002eb0 <HAL_GPIO_Init+0x344>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d00d      	beq.n	8002d8e <HAL_GPIO_Init+0x222>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4a4f      	ldr	r2, [pc, #316]	; (8002eb4 <HAL_GPIO_Init+0x348>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d007      	beq.n	8002d8a <HAL_GPIO_Init+0x21e>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4a4e      	ldr	r2, [pc, #312]	; (8002eb8 <HAL_GPIO_Init+0x34c>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d101      	bne.n	8002d86 <HAL_GPIO_Init+0x21a>
 8002d82:	2309      	movs	r3, #9
 8002d84:	e012      	b.n	8002dac <HAL_GPIO_Init+0x240>
 8002d86:	230a      	movs	r3, #10
 8002d88:	e010      	b.n	8002dac <HAL_GPIO_Init+0x240>
 8002d8a:	2308      	movs	r3, #8
 8002d8c:	e00e      	b.n	8002dac <HAL_GPIO_Init+0x240>
 8002d8e:	2307      	movs	r3, #7
 8002d90:	e00c      	b.n	8002dac <HAL_GPIO_Init+0x240>
 8002d92:	2306      	movs	r3, #6
 8002d94:	e00a      	b.n	8002dac <HAL_GPIO_Init+0x240>
 8002d96:	2305      	movs	r3, #5
 8002d98:	e008      	b.n	8002dac <HAL_GPIO_Init+0x240>
 8002d9a:	2304      	movs	r3, #4
 8002d9c:	e006      	b.n	8002dac <HAL_GPIO_Init+0x240>
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e004      	b.n	8002dac <HAL_GPIO_Init+0x240>
 8002da2:	2302      	movs	r3, #2
 8002da4:	e002      	b.n	8002dac <HAL_GPIO_Init+0x240>
 8002da6:	2301      	movs	r3, #1
 8002da8:	e000      	b.n	8002dac <HAL_GPIO_Init+0x240>
 8002daa:	2300      	movs	r3, #0
 8002dac:	69fa      	ldr	r2, [r7, #28]
 8002dae:	f002 0203 	and.w	r2, r2, #3
 8002db2:	0092      	lsls	r2, r2, #2
 8002db4:	4093      	lsls	r3, r2
 8002db6:	69ba      	ldr	r2, [r7, #24]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002dbc:	4934      	ldr	r1, [pc, #208]	; (8002e90 <HAL_GPIO_Init+0x324>)
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	089b      	lsrs	r3, r3, #2
 8002dc2:	3302      	adds	r3, #2
 8002dc4:	69ba      	ldr	r2, [r7, #24]
 8002dc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002dca:	4b3c      	ldr	r3, [pc, #240]	; (8002ebc <HAL_GPIO_Init+0x350>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	43db      	mvns	r3, r3
 8002dd4:	69ba      	ldr	r2, [r7, #24]
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d003      	beq.n	8002dee <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002de6:	69ba      	ldr	r2, [r7, #24]
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002dee:	4a33      	ldr	r2, [pc, #204]	; (8002ebc <HAL_GPIO_Init+0x350>)
 8002df0:	69bb      	ldr	r3, [r7, #24]
 8002df2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002df4:	4b31      	ldr	r3, [pc, #196]	; (8002ebc <HAL_GPIO_Init+0x350>)
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	43db      	mvns	r3, r3
 8002dfe:	69ba      	ldr	r2, [r7, #24]
 8002e00:	4013      	ands	r3, r2
 8002e02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d003      	beq.n	8002e18 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002e10:	69ba      	ldr	r2, [r7, #24]
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	4313      	orrs	r3, r2
 8002e16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e18:	4a28      	ldr	r2, [pc, #160]	; (8002ebc <HAL_GPIO_Init+0x350>)
 8002e1a:	69bb      	ldr	r3, [r7, #24]
 8002e1c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e1e:	4b27      	ldr	r3, [pc, #156]	; (8002ebc <HAL_GPIO_Init+0x350>)
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	43db      	mvns	r3, r3
 8002e28:	69ba      	ldr	r2, [r7, #24]
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d003      	beq.n	8002e42 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002e3a:	69ba      	ldr	r2, [r7, #24]
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e42:	4a1e      	ldr	r2, [pc, #120]	; (8002ebc <HAL_GPIO_Init+0x350>)
 8002e44:	69bb      	ldr	r3, [r7, #24]
 8002e46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e48:	4b1c      	ldr	r3, [pc, #112]	; (8002ebc <HAL_GPIO_Init+0x350>)
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	43db      	mvns	r3, r3
 8002e52:	69ba      	ldr	r2, [r7, #24]
 8002e54:	4013      	ands	r3, r2
 8002e56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d003      	beq.n	8002e6c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002e64:	69ba      	ldr	r2, [r7, #24]
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e6c:	4a13      	ldr	r2, [pc, #76]	; (8002ebc <HAL_GPIO_Init+0x350>)
 8002e6e:	69bb      	ldr	r3, [r7, #24]
 8002e70:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	3301      	adds	r3, #1
 8002e76:	61fb      	str	r3, [r7, #28]
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	2b0f      	cmp	r3, #15
 8002e7c:	f67f ae86 	bls.w	8002b8c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002e80:	bf00      	nop
 8002e82:	3724      	adds	r7, #36	; 0x24
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr
 8002e8c:	40023800 	.word	0x40023800
 8002e90:	40013800 	.word	0x40013800
 8002e94:	40020000 	.word	0x40020000
 8002e98:	40020400 	.word	0x40020400
 8002e9c:	40020800 	.word	0x40020800
 8002ea0:	40020c00 	.word	0x40020c00
 8002ea4:	40021000 	.word	0x40021000
 8002ea8:	40021400 	.word	0x40021400
 8002eac:	40021800 	.word	0x40021800
 8002eb0:	40021c00 	.word	0x40021c00
 8002eb4:	40022000 	.word	0x40022000
 8002eb8:	40022400 	.word	0x40022400
 8002ebc:	40013c00 	.word	0x40013c00

08002ec0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b085      	sub	sp, #20
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
 8002ec8:	460b      	mov	r3, r1
 8002eca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	691a      	ldr	r2, [r3, #16]
 8002ed0:	887b      	ldrh	r3, [r7, #2]
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d002      	beq.n	8002ede <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	73fb      	strb	r3, [r7, #15]
 8002edc:	e001      	b.n	8002ee2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002ee2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3714      	adds	r7, #20
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr

08002ef0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b083      	sub	sp, #12
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
 8002ef8:	460b      	mov	r3, r1
 8002efa:	807b      	strh	r3, [r7, #2]
 8002efc:	4613      	mov	r3, r2
 8002efe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f00:	787b      	ldrb	r3, [r7, #1]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d003      	beq.n	8002f0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f06:	887a      	ldrh	r2, [r7, #2]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002f0c:	e003      	b.n	8002f16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002f0e:	887b      	ldrh	r3, [r7, #2]
 8002f10:	041a      	lsls	r2, r3, #16
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	619a      	str	r2, [r3, #24]
}
 8002f16:	bf00      	nop
 8002f18:	370c      	adds	r7, #12
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr

08002f22 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f22:	b480      	push	{r7}
 8002f24:	b083      	sub	sp, #12
 8002f26:	af00      	add	r7, sp, #0
 8002f28:	6078      	str	r0, [r7, #4]
 8002f2a:	460b      	mov	r3, r1
 8002f2c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	695a      	ldr	r2, [r3, #20]
 8002f32:	887b      	ldrh	r3, [r7, #2]
 8002f34:	4013      	ands	r3, r2
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d004      	beq.n	8002f44 <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002f3a:	887b      	ldrh	r3, [r7, #2]
 8002f3c:	041a      	lsls	r2, r3, #16
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8002f42:	e002      	b.n	8002f4a <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f44:	887a      	ldrh	r2, [r7, #2]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	619a      	str	r2, [r3, #24]
}
 8002f4a:	bf00      	nop
 8002f4c:	370c      	adds	r7, #12
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr

08002f56 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002f56:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f58:	b08f      	sub	sp, #60	; 0x3c
 8002f5a:	af0a      	add	r7, sp, #40	; 0x28
 8002f5c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d101      	bne.n	8002f68 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e116      	b.n	8003196 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d106      	bne.n	8002f88 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f012 fbec 	bl	8015760 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2203      	movs	r2, #3
 8002f8c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d102      	bne.n	8002fa2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f005 fedf 	bl	8008d6a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	603b      	str	r3, [r7, #0]
 8002fb2:	687e      	ldr	r6, [r7, #4]
 8002fb4:	466d      	mov	r5, sp
 8002fb6:	f106 0410 	add.w	r4, r6, #16
 8002fba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fbc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fbe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fc0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fc2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002fc6:	e885 0003 	stmia.w	r5, {r0, r1}
 8002fca:	1d33      	adds	r3, r6, #4
 8002fcc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002fce:	6838      	ldr	r0, [r7, #0]
 8002fd0:	f005 fdc0 	bl	8008b54 <USB_CoreInit>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d005      	beq.n	8002fe6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2202      	movs	r2, #2
 8002fde:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e0d7      	b.n	8003196 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	2100      	movs	r1, #0
 8002fec:	4618      	mov	r0, r3
 8002fee:	f005 fecd 	bl	8008d8c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	73fb      	strb	r3, [r7, #15]
 8002ff6:	e04a      	b.n	800308e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002ff8:	7bfa      	ldrb	r2, [r7, #15]
 8002ffa:	6879      	ldr	r1, [r7, #4]
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	00db      	lsls	r3, r3, #3
 8003000:	1a9b      	subs	r3, r3, r2
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	440b      	add	r3, r1
 8003006:	333d      	adds	r3, #61	; 0x3d
 8003008:	2201      	movs	r2, #1
 800300a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800300c:	7bfa      	ldrb	r2, [r7, #15]
 800300e:	6879      	ldr	r1, [r7, #4]
 8003010:	4613      	mov	r3, r2
 8003012:	00db      	lsls	r3, r3, #3
 8003014:	1a9b      	subs	r3, r3, r2
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	440b      	add	r3, r1
 800301a:	333c      	adds	r3, #60	; 0x3c
 800301c:	7bfa      	ldrb	r2, [r7, #15]
 800301e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003020:	7bfa      	ldrb	r2, [r7, #15]
 8003022:	7bfb      	ldrb	r3, [r7, #15]
 8003024:	b298      	uxth	r0, r3
 8003026:	6879      	ldr	r1, [r7, #4]
 8003028:	4613      	mov	r3, r2
 800302a:	00db      	lsls	r3, r3, #3
 800302c:	1a9b      	subs	r3, r3, r2
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	440b      	add	r3, r1
 8003032:	3342      	adds	r3, #66	; 0x42
 8003034:	4602      	mov	r2, r0
 8003036:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003038:	7bfa      	ldrb	r2, [r7, #15]
 800303a:	6879      	ldr	r1, [r7, #4]
 800303c:	4613      	mov	r3, r2
 800303e:	00db      	lsls	r3, r3, #3
 8003040:	1a9b      	subs	r3, r3, r2
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	440b      	add	r3, r1
 8003046:	333f      	adds	r3, #63	; 0x3f
 8003048:	2200      	movs	r2, #0
 800304a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800304c:	7bfa      	ldrb	r2, [r7, #15]
 800304e:	6879      	ldr	r1, [r7, #4]
 8003050:	4613      	mov	r3, r2
 8003052:	00db      	lsls	r3, r3, #3
 8003054:	1a9b      	subs	r3, r3, r2
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	440b      	add	r3, r1
 800305a:	3344      	adds	r3, #68	; 0x44
 800305c:	2200      	movs	r2, #0
 800305e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003060:	7bfa      	ldrb	r2, [r7, #15]
 8003062:	6879      	ldr	r1, [r7, #4]
 8003064:	4613      	mov	r3, r2
 8003066:	00db      	lsls	r3, r3, #3
 8003068:	1a9b      	subs	r3, r3, r2
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	440b      	add	r3, r1
 800306e:	3348      	adds	r3, #72	; 0x48
 8003070:	2200      	movs	r2, #0
 8003072:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003074:	7bfa      	ldrb	r2, [r7, #15]
 8003076:	6879      	ldr	r1, [r7, #4]
 8003078:	4613      	mov	r3, r2
 800307a:	00db      	lsls	r3, r3, #3
 800307c:	1a9b      	subs	r3, r3, r2
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	440b      	add	r3, r1
 8003082:	3350      	adds	r3, #80	; 0x50
 8003084:	2200      	movs	r2, #0
 8003086:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003088:	7bfb      	ldrb	r3, [r7, #15]
 800308a:	3301      	adds	r3, #1
 800308c:	73fb      	strb	r3, [r7, #15]
 800308e:	7bfa      	ldrb	r2, [r7, #15]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	429a      	cmp	r2, r3
 8003096:	d3af      	bcc.n	8002ff8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003098:	2300      	movs	r3, #0
 800309a:	73fb      	strb	r3, [r7, #15]
 800309c:	e044      	b.n	8003128 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800309e:	7bfa      	ldrb	r2, [r7, #15]
 80030a0:	6879      	ldr	r1, [r7, #4]
 80030a2:	4613      	mov	r3, r2
 80030a4:	00db      	lsls	r3, r3, #3
 80030a6:	1a9b      	subs	r3, r3, r2
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	440b      	add	r3, r1
 80030ac:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80030b0:	2200      	movs	r2, #0
 80030b2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80030b4:	7bfa      	ldrb	r2, [r7, #15]
 80030b6:	6879      	ldr	r1, [r7, #4]
 80030b8:	4613      	mov	r3, r2
 80030ba:	00db      	lsls	r3, r3, #3
 80030bc:	1a9b      	subs	r3, r3, r2
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	440b      	add	r3, r1
 80030c2:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80030c6:	7bfa      	ldrb	r2, [r7, #15]
 80030c8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80030ca:	7bfa      	ldrb	r2, [r7, #15]
 80030cc:	6879      	ldr	r1, [r7, #4]
 80030ce:	4613      	mov	r3, r2
 80030d0:	00db      	lsls	r3, r3, #3
 80030d2:	1a9b      	subs	r3, r3, r2
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	440b      	add	r3, r1
 80030d8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80030dc:	2200      	movs	r2, #0
 80030de:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80030e0:	7bfa      	ldrb	r2, [r7, #15]
 80030e2:	6879      	ldr	r1, [r7, #4]
 80030e4:	4613      	mov	r3, r2
 80030e6:	00db      	lsls	r3, r3, #3
 80030e8:	1a9b      	subs	r3, r3, r2
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	440b      	add	r3, r1
 80030ee:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80030f2:	2200      	movs	r2, #0
 80030f4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80030f6:	7bfa      	ldrb	r2, [r7, #15]
 80030f8:	6879      	ldr	r1, [r7, #4]
 80030fa:	4613      	mov	r3, r2
 80030fc:	00db      	lsls	r3, r3, #3
 80030fe:	1a9b      	subs	r3, r3, r2
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	440b      	add	r3, r1
 8003104:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003108:	2200      	movs	r2, #0
 800310a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800310c:	7bfa      	ldrb	r2, [r7, #15]
 800310e:	6879      	ldr	r1, [r7, #4]
 8003110:	4613      	mov	r3, r2
 8003112:	00db      	lsls	r3, r3, #3
 8003114:	1a9b      	subs	r3, r3, r2
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	440b      	add	r3, r1
 800311a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800311e:	2200      	movs	r2, #0
 8003120:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003122:	7bfb      	ldrb	r3, [r7, #15]
 8003124:	3301      	adds	r3, #1
 8003126:	73fb      	strb	r3, [r7, #15]
 8003128:	7bfa      	ldrb	r2, [r7, #15]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	429a      	cmp	r2, r3
 8003130:	d3b5      	bcc.n	800309e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	603b      	str	r3, [r7, #0]
 8003138:	687e      	ldr	r6, [r7, #4]
 800313a:	466d      	mov	r5, sp
 800313c:	f106 0410 	add.w	r4, r6, #16
 8003140:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003142:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003144:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003146:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003148:	e894 0003 	ldmia.w	r4, {r0, r1}
 800314c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003150:	1d33      	adds	r3, r6, #4
 8003152:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003154:	6838      	ldr	r0, [r7, #0]
 8003156:	f005 fe43 	bl	8008de0 <USB_DevInit>
 800315a:	4603      	mov	r3, r0
 800315c:	2b00      	cmp	r3, #0
 800315e:	d005      	beq.n	800316c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2202      	movs	r2, #2
 8003164:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e014      	b.n	8003196 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2200      	movs	r2, #0
 8003170:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2201      	movs	r2, #1
 8003178:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003180:	2b01      	cmp	r3, #1
 8003182:	d102      	bne.n	800318a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	f001 f8ad 	bl	80042e4 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4618      	mov	r0, r3
 8003190:	f006 fe92 	bl	8009eb8 <USB_DevDisconnect>

  return HAL_OK;
 8003194:	2300      	movs	r3, #0
}
 8003196:	4618      	mov	r0, r3
 8003198:	3714      	adds	r7, #20
 800319a:	46bd      	mov	sp, r7
 800319c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800319e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800319e:	b580      	push	{r7, lr}
 80031a0:	b082      	sub	sp, #8
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d101      	bne.n	80031b4 <HAL_PCD_Start+0x16>
 80031b0:	2302      	movs	r3, #2
 80031b2:	e012      	b.n	80031da <HAL_PCD_Start+0x3c>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2201      	movs	r2, #1
 80031b8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DevConnect(hpcd->Instance);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4618      	mov	r0, r3
 80031c2:	f006 fe61 	bl	8009e88 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4618      	mov	r0, r3
 80031cc:	f005 fdbc 	bl	8008d48 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2200      	movs	r2, #0
 80031d4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80031d8:	2300      	movs	r3, #0
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3708      	adds	r7, #8
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}

080031e2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80031e2:	b590      	push	{r4, r7, lr}
 80031e4:	b08d      	sub	sp, #52	; 0x34
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031f0:	6a3b      	ldr	r3, [r7, #32]
 80031f2:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4618      	mov	r0, r3
 80031fa:	f006 ff08 	bl	800a00e <USB_GetMode>
 80031fe:	4603      	mov	r3, r0
 8003200:	2b00      	cmp	r3, #0
 8003202:	f040 83ca 	bne.w	800399a <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4618      	mov	r0, r3
 800320c:	f006 fe6c 	bl	8009ee8 <USB_ReadInterrupts>
 8003210:	4603      	mov	r3, r0
 8003212:	2b00      	cmp	r3, #0
 8003214:	f000 83c0 	beq.w	8003998 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4618      	mov	r0, r3
 800321e:	f006 fe63 	bl	8009ee8 <USB_ReadInterrupts>
 8003222:	4603      	mov	r3, r0
 8003224:	f003 0302 	and.w	r3, r3, #2
 8003228:	2b02      	cmp	r3, #2
 800322a:	d107      	bne.n	800323c <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	695a      	ldr	r2, [r3, #20]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f002 0202 	and.w	r2, r2, #2
 800323a:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4618      	mov	r0, r3
 8003242:	f006 fe51 	bl	8009ee8 <USB_ReadInterrupts>
 8003246:	4603      	mov	r3, r0
 8003248:	f003 0310 	and.w	r3, r3, #16
 800324c:	2b10      	cmp	r3, #16
 800324e:	d161      	bne.n	8003314 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	699a      	ldr	r2, [r3, #24]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f022 0210 	bic.w	r2, r2, #16
 800325e:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8003260:	6a3b      	ldr	r3, [r7, #32]
 8003262:	6a1b      	ldr	r3, [r3, #32]
 8003264:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8003266:	69bb      	ldr	r3, [r7, #24]
 8003268:	f003 020f 	and.w	r2, r3, #15
 800326c:	4613      	mov	r3, r2
 800326e:	00db      	lsls	r3, r3, #3
 8003270:	1a9b      	subs	r3, r3, r2
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	4413      	add	r3, r2
 800327c:	3304      	adds	r3, #4
 800327e:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003280:	69bb      	ldr	r3, [r7, #24]
 8003282:	0c5b      	lsrs	r3, r3, #17
 8003284:	f003 030f 	and.w	r3, r3, #15
 8003288:	2b02      	cmp	r3, #2
 800328a:	d124      	bne.n	80032d6 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800328c:	69ba      	ldr	r2, [r7, #24]
 800328e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003292:	4013      	ands	r3, r2
 8003294:	2b00      	cmp	r3, #0
 8003296:	d035      	beq.n	8003304 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800329c:	69bb      	ldr	r3, [r7, #24]
 800329e:	091b      	lsrs	r3, r3, #4
 80032a0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80032a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	461a      	mov	r2, r3
 80032aa:	6a38      	ldr	r0, [r7, #32]
 80032ac:	f006 fcc9 	bl	8009c42 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	68da      	ldr	r2, [r3, #12]
 80032b4:	69bb      	ldr	r3, [r7, #24]
 80032b6:	091b      	lsrs	r3, r3, #4
 80032b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80032bc:	441a      	add	r2, r3
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	699a      	ldr	r2, [r3, #24]
 80032c6:	69bb      	ldr	r3, [r7, #24]
 80032c8:	091b      	lsrs	r3, r3, #4
 80032ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80032ce:	441a      	add	r2, r3
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	619a      	str	r2, [r3, #24]
 80032d4:	e016      	b.n	8003304 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80032d6:	69bb      	ldr	r3, [r7, #24]
 80032d8:	0c5b      	lsrs	r3, r3, #17
 80032da:	f003 030f 	and.w	r3, r3, #15
 80032de:	2b06      	cmp	r3, #6
 80032e0:	d110      	bne.n	8003304 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80032e8:	2208      	movs	r2, #8
 80032ea:	4619      	mov	r1, r3
 80032ec:	6a38      	ldr	r0, [r7, #32]
 80032ee:	f006 fca8 	bl	8009c42 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	699a      	ldr	r2, [r3, #24]
 80032f6:	69bb      	ldr	r3, [r7, #24]
 80032f8:	091b      	lsrs	r3, r3, #4
 80032fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80032fe:	441a      	add	r2, r3
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	699a      	ldr	r2, [r3, #24]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f042 0210 	orr.w	r2, r2, #16
 8003312:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4618      	mov	r0, r3
 800331a:	f006 fde5 	bl	8009ee8 <USB_ReadInterrupts>
 800331e:	4603      	mov	r3, r0
 8003320:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003324:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003328:	d16e      	bne.n	8003408 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800332a:	2300      	movs	r3, #0
 800332c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4618      	mov	r0, r3
 8003334:	f006 fdeb 	bl	8009f0e <USB_ReadDevAllOutEpInterrupt>
 8003338:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800333a:	e062      	b.n	8003402 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800333c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800333e:	f003 0301 	and.w	r3, r3, #1
 8003342:	2b00      	cmp	r3, #0
 8003344:	d057      	beq.n	80033f6 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800334c:	b2d2      	uxtb	r2, r2
 800334e:	4611      	mov	r1, r2
 8003350:	4618      	mov	r0, r3
 8003352:	f006 fe10 	bl	8009f76 <USB_ReadDevOutEPInterrupt>
 8003356:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	f003 0301 	and.w	r3, r3, #1
 800335e:	2b00      	cmp	r3, #0
 8003360:	d00c      	beq.n	800337c <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003364:	015a      	lsls	r2, r3, #5
 8003366:	69fb      	ldr	r3, [r7, #28]
 8003368:	4413      	add	r3, r2
 800336a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800336e:	461a      	mov	r2, r3
 8003370:	2301      	movs	r3, #1
 8003372:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003374:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f000 fe0a 	bl	8003f90 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	f003 0308 	and.w	r3, r3, #8
 8003382:	2b00      	cmp	r3, #0
 8003384:	d00c      	beq.n	80033a0 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003388:	015a      	lsls	r2, r3, #5
 800338a:	69fb      	ldr	r3, [r7, #28]
 800338c:	4413      	add	r3, r2
 800338e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003392:	461a      	mov	r2, r3
 8003394:	2308      	movs	r3, #8
 8003396:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003398:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f000 ff04 	bl	80041a8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	f003 0310 	and.w	r3, r3, #16
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d008      	beq.n	80033bc <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80033aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ac:	015a      	lsls	r2, r3, #5
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	4413      	add	r3, r2
 80033b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033b6:	461a      	mov	r2, r3
 80033b8:	2310      	movs	r3, #16
 80033ba:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	f003 0320 	and.w	r3, r3, #32
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d008      	beq.n	80033d8 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80033c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c8:	015a      	lsls	r2, r3, #5
 80033ca:	69fb      	ldr	r3, [r7, #28]
 80033cc:	4413      	add	r3, r2
 80033ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033d2:	461a      	mov	r2, r3
 80033d4:	2320      	movs	r3, #32
 80033d6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d009      	beq.n	80033f6 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80033e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e4:	015a      	lsls	r2, r3, #5
 80033e6:	69fb      	ldr	r3, [r7, #28]
 80033e8:	4413      	add	r3, r2
 80033ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033ee:	461a      	mov	r2, r3
 80033f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80033f4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80033f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f8:	3301      	adds	r3, #1
 80033fa:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80033fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033fe:	085b      	lsrs	r3, r3, #1
 8003400:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003404:	2b00      	cmp	r3, #0
 8003406:	d199      	bne.n	800333c <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4618      	mov	r0, r3
 800340e:	f006 fd6b 	bl	8009ee8 <USB_ReadInterrupts>
 8003412:	4603      	mov	r3, r0
 8003414:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003418:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800341c:	f040 80c0 	bne.w	80035a0 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4618      	mov	r0, r3
 8003426:	f006 fd8c 	bl	8009f42 <USB_ReadDevAllInEpInterrupt>
 800342a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800342c:	2300      	movs	r3, #0
 800342e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003430:	e0b2      	b.n	8003598 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003434:	f003 0301 	and.w	r3, r3, #1
 8003438:	2b00      	cmp	r3, #0
 800343a:	f000 80a7 	beq.w	800358c <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003444:	b2d2      	uxtb	r2, r2
 8003446:	4611      	mov	r1, r2
 8003448:	4618      	mov	r0, r3
 800344a:	f006 fdb2 	bl	8009fb2 <USB_ReadDevInEPInterrupt>
 800344e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	f003 0301 	and.w	r3, r3, #1
 8003456:	2b00      	cmp	r3, #0
 8003458:	d057      	beq.n	800350a <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800345a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800345c:	f003 030f 	and.w	r3, r3, #15
 8003460:	2201      	movs	r2, #1
 8003462:	fa02 f303 	lsl.w	r3, r2, r3
 8003466:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003468:	69fb      	ldr	r3, [r7, #28]
 800346a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800346e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	43db      	mvns	r3, r3
 8003474:	69f9      	ldr	r1, [r7, #28]
 8003476:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800347a:	4013      	ands	r3, r2
 800347c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800347e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003480:	015a      	lsls	r2, r3, #5
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	4413      	add	r3, r2
 8003486:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800348a:	461a      	mov	r2, r3
 800348c:	2301      	movs	r3, #1
 800348e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	691b      	ldr	r3, [r3, #16]
 8003494:	2b01      	cmp	r3, #1
 8003496:	d132      	bne.n	80034fe <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003498:	6879      	ldr	r1, [r7, #4]
 800349a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800349c:	4613      	mov	r3, r2
 800349e:	00db      	lsls	r3, r3, #3
 80034a0:	1a9b      	subs	r3, r3, r2
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	440b      	add	r3, r1
 80034a6:	3348      	adds	r3, #72	; 0x48
 80034a8:	6819      	ldr	r1, [r3, #0]
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034ae:	4613      	mov	r3, r2
 80034b0:	00db      	lsls	r3, r3, #3
 80034b2:	1a9b      	subs	r3, r3, r2
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	4403      	add	r3, r0
 80034b8:	3344      	adds	r3, #68	; 0x44
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4419      	add	r1, r3
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034c2:	4613      	mov	r3, r2
 80034c4:	00db      	lsls	r3, r3, #3
 80034c6:	1a9b      	subs	r3, r3, r2
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	4403      	add	r3, r0
 80034cc:	3348      	adds	r3, #72	; 0x48
 80034ce:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80034d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d113      	bne.n	80034fe <HAL_PCD_IRQHandler+0x31c>
 80034d6:	6879      	ldr	r1, [r7, #4]
 80034d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034da:	4613      	mov	r3, r2
 80034dc:	00db      	lsls	r3, r3, #3
 80034de:	1a9b      	subs	r3, r3, r2
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	440b      	add	r3, r1
 80034e4:	3350      	adds	r3, #80	; 0x50
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d108      	bne.n	80034fe <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6818      	ldr	r0, [r3, #0]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80034f6:	461a      	mov	r2, r3
 80034f8:	2101      	movs	r1, #1
 80034fa:	f006 fdbb 	bl	800a074 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80034fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003500:	b2db      	uxtb	r3, r3
 8003502:	4619      	mov	r1, r3
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f012 f9ae 	bl	8015866 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	f003 0308 	and.w	r3, r3, #8
 8003510:	2b00      	cmp	r3, #0
 8003512:	d008      	beq.n	8003526 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003516:	015a      	lsls	r2, r3, #5
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	4413      	add	r3, r2
 800351c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003520:	461a      	mov	r2, r3
 8003522:	2308      	movs	r3, #8
 8003524:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	f003 0310 	and.w	r3, r3, #16
 800352c:	2b00      	cmp	r3, #0
 800352e:	d008      	beq.n	8003542 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003532:	015a      	lsls	r2, r3, #5
 8003534:	69fb      	ldr	r3, [r7, #28]
 8003536:	4413      	add	r3, r2
 8003538:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800353c:	461a      	mov	r2, r3
 800353e:	2310      	movs	r3, #16
 8003540:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003548:	2b00      	cmp	r3, #0
 800354a:	d008      	beq.n	800355e <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800354c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354e:	015a      	lsls	r2, r3, #5
 8003550:	69fb      	ldr	r3, [r7, #28]
 8003552:	4413      	add	r3, r2
 8003554:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003558:	461a      	mov	r2, r3
 800355a:	2340      	movs	r3, #64	; 0x40
 800355c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	f003 0302 	and.w	r3, r3, #2
 8003564:	2b00      	cmp	r3, #0
 8003566:	d008      	beq.n	800357a <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356a:	015a      	lsls	r2, r3, #5
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	4413      	add	r3, r2
 8003570:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003574:	461a      	mov	r2, r3
 8003576:	2302      	movs	r3, #2
 8003578:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003580:	2b00      	cmp	r3, #0
 8003582:	d003      	beq.n	800358c <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003584:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f000 fc75 	bl	8003e76 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800358c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358e:	3301      	adds	r3, #1
 8003590:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003594:	085b      	lsrs	r3, r3, #1
 8003596:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800359a:	2b00      	cmp	r3, #0
 800359c:	f47f af49 	bne.w	8003432 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4618      	mov	r0, r3
 80035a6:	f006 fc9f 	bl	8009ee8 <USB_ReadInterrupts>
 80035aa:	4603      	mov	r3, r0
 80035ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80035b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80035b4:	d122      	bne.n	80035fc <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	69fa      	ldr	r2, [r7, #28]
 80035c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80035c4:	f023 0301 	bic.w	r3, r3, #1
 80035c8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d108      	bne.n	80035e6 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2200      	movs	r2, #0
 80035d8:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80035dc:	2100      	movs	r1, #0
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f012 fbb0 	bl	8015d44 <HAL_PCDEx_LPM_Callback>
 80035e4:	e002      	b.n	80035ec <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f012 f9b4 	bl	8015954 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	695a      	ldr	r2, [r3, #20]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80035fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4618      	mov	r0, r3
 8003602:	f006 fc71 	bl	8009ee8 <USB_ReadInterrupts>
 8003606:	4603      	mov	r3, r0
 8003608:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800360c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003610:	d112      	bne.n	8003638 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	f003 0301 	and.w	r3, r3, #1
 800361e:	2b01      	cmp	r3, #1
 8003620:	d102      	bne.n	8003628 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f012 f970 	bl	8015908 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	695a      	ldr	r2, [r3, #20]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003636:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4618      	mov	r0, r3
 800363e:	f006 fc53 	bl	8009ee8 <USB_ReadInterrupts>
 8003642:	4603      	mov	r3, r0
 8003644:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003648:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800364c:	d121      	bne.n	8003692 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	695a      	ldr	r2, [r3, #20]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800365c:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003664:	2b00      	cmp	r3, #0
 8003666:	d111      	bne.n	800368c <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2201      	movs	r2, #1
 800366c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003676:	089b      	lsrs	r3, r3, #2
 8003678:	f003 020f 	and.w	r2, r3, #15
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003682:	2101      	movs	r1, #1
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	f012 fb5d 	bl	8015d44 <HAL_PCDEx_LPM_Callback>
 800368a:	e002      	b.n	8003692 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	f012 f93b 	bl	8015908 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4618      	mov	r0, r3
 8003698:	f006 fc26 	bl	8009ee8 <USB_ReadInterrupts>
 800369c:	4603      	mov	r3, r0
 800369e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036a6:	f040 80c7 	bne.w	8003838 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	69fa      	ldr	r2, [r7, #28]
 80036b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036b8:	f023 0301 	bic.w	r3, r3, #1
 80036bc:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	2110      	movs	r1, #16
 80036c4:	4618      	mov	r0, r3
 80036c6:	f005 fcf9 	bl	80090bc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036ca:	2300      	movs	r3, #0
 80036cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036ce:	e056      	b.n	800377e <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80036d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036d2:	015a      	lsls	r2, r3, #5
 80036d4:	69fb      	ldr	r3, [r7, #28]
 80036d6:	4413      	add	r3, r2
 80036d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036dc:	461a      	mov	r2, r3
 80036de:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80036e2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80036e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036e6:	015a      	lsls	r2, r3, #5
 80036e8:	69fb      	ldr	r3, [r7, #28]
 80036ea:	4413      	add	r3, r2
 80036ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036f4:	0151      	lsls	r1, r2, #5
 80036f6:	69fa      	ldr	r2, [r7, #28]
 80036f8:	440a      	add	r2, r1
 80036fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80036fe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003702:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003706:	015a      	lsls	r2, r3, #5
 8003708:	69fb      	ldr	r3, [r7, #28]
 800370a:	4413      	add	r3, r2
 800370c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003714:	0151      	lsls	r1, r2, #5
 8003716:	69fa      	ldr	r2, [r7, #28]
 8003718:	440a      	add	r2, r1
 800371a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800371e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003722:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003726:	015a      	lsls	r2, r3, #5
 8003728:	69fb      	ldr	r3, [r7, #28]
 800372a:	4413      	add	r3, r2
 800372c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003730:	461a      	mov	r2, r3
 8003732:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003736:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800373a:	015a      	lsls	r2, r3, #5
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	4413      	add	r3, r2
 8003740:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003748:	0151      	lsls	r1, r2, #5
 800374a:	69fa      	ldr	r2, [r7, #28]
 800374c:	440a      	add	r2, r1
 800374e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003752:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003756:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800375a:	015a      	lsls	r2, r3, #5
 800375c:	69fb      	ldr	r3, [r7, #28]
 800375e:	4413      	add	r3, r2
 8003760:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003768:	0151      	lsls	r1, r2, #5
 800376a:	69fa      	ldr	r2, [r7, #28]
 800376c:	440a      	add	r2, r1
 800376e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003772:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003776:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800377a:	3301      	adds	r3, #1
 800377c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003784:	429a      	cmp	r2, r3
 8003786:	d3a3      	bcc.n	80036d0 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003788:	69fb      	ldr	r3, [r7, #28]
 800378a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800378e:	69db      	ldr	r3, [r3, #28]
 8003790:	69fa      	ldr	r2, [r7, #28]
 8003792:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003796:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800379a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d016      	beq.n	80037d2 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037ae:	69fa      	ldr	r2, [r7, #28]
 80037b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037b4:	f043 030b 	orr.w	r3, r3, #11
 80037b8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037c4:	69fa      	ldr	r2, [r7, #28]
 80037c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037ca:	f043 030b 	orr.w	r3, r3, #11
 80037ce:	6453      	str	r3, [r2, #68]	; 0x44
 80037d0:	e015      	b.n	80037fe <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80037d2:	69fb      	ldr	r3, [r7, #28]
 80037d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037d8:	695a      	ldr	r2, [r3, #20]
 80037da:	69fb      	ldr	r3, [r7, #28]
 80037dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037e0:	4619      	mov	r1, r3
 80037e2:	f242 032b 	movw	r3, #8235	; 0x202b
 80037e6:	4313      	orrs	r3, r2
 80037e8:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80037ea:	69fb      	ldr	r3, [r7, #28]
 80037ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037f0:	691b      	ldr	r3, [r3, #16]
 80037f2:	69fa      	ldr	r2, [r7, #28]
 80037f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037f8:	f043 030b 	orr.w	r3, r3, #11
 80037fc:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	69fa      	ldr	r2, [r7, #28]
 8003808:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800380c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003810:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6818      	ldr	r0, [r3, #0]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	691b      	ldr	r3, [r3, #16]
 800381a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003822:	461a      	mov	r2, r3
 8003824:	f006 fc26 	bl	800a074 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	695a      	ldr	r2, [r3, #20]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003836:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4618      	mov	r0, r3
 800383e:	f006 fb53 	bl	8009ee8 <USB_ReadInterrupts>
 8003842:	4603      	mov	r3, r0
 8003844:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003848:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800384c:	d124      	bne.n	8003898 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4618      	mov	r0, r3
 8003854:	f006 fbea 	bl	800a02c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4618      	mov	r0, r3
 800385e:	f005 fc8e 	bl	800917e <USB_GetDevSpeed>
 8003862:	4603      	mov	r3, r0
 8003864:	461a      	mov	r2, r3
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681c      	ldr	r4, [r3, #0]
 800386e:	f001 fa2f 	bl	8004cd0 <HAL_RCC_GetHCLKFreq>
 8003872:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003878:	b2db      	uxtb	r3, r3
 800387a:	461a      	mov	r2, r3
 800387c:	4620      	mov	r0, r4
 800387e:	f005 f9c1 	bl	8008c04 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f012 f817 	bl	80158b6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	695a      	ldr	r2, [r3, #20]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003896:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4618      	mov	r0, r3
 800389e:	f006 fb23 	bl	8009ee8 <USB_ReadInterrupts>
 80038a2:	4603      	mov	r3, r0
 80038a4:	f003 0308 	and.w	r3, r3, #8
 80038a8:	2b08      	cmp	r3, #8
 80038aa:	d10a      	bne.n	80038c2 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f011 fff4 	bl	801589a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	695a      	ldr	r2, [r3, #20]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f002 0208 	and.w	r2, r2, #8
 80038c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4618      	mov	r0, r3
 80038c8:	f006 fb0e 	bl	8009ee8 <USB_ReadInterrupts>
 80038cc:	4603      	mov	r3, r0
 80038ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038d6:	d10f      	bne.n	80038f8 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80038d8:	2300      	movs	r3, #0
 80038da:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80038dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	4619      	mov	r1, r3
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f012 f856 	bl	8015994 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	695a      	ldr	r2, [r3, #20]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80038f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4618      	mov	r0, r3
 80038fe:	f006 faf3 	bl	8009ee8 <USB_ReadInterrupts>
 8003902:	4603      	mov	r3, r0
 8003904:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003908:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800390c:	d10f      	bne.n	800392e <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800390e:	2300      	movs	r3, #0
 8003910:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003914:	b2db      	uxtb	r3, r3
 8003916:	4619      	mov	r1, r3
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f012 f829 	bl	8015970 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	695a      	ldr	r2, [r3, #20]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800392c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4618      	mov	r0, r3
 8003934:	f006 fad8 	bl	8009ee8 <USB_ReadInterrupts>
 8003938:	4603      	mov	r3, r0
 800393a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800393e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003942:	d10a      	bne.n	800395a <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f012 f837 	bl	80159b8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	695a      	ldr	r2, [r3, #20]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003958:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4618      	mov	r0, r3
 8003960:	f006 fac2 	bl	8009ee8 <USB_ReadInterrupts>
 8003964:	4603      	mov	r3, r0
 8003966:	f003 0304 	and.w	r3, r3, #4
 800396a:	2b04      	cmp	r3, #4
 800396c:	d115      	bne.n	800399a <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003976:	69bb      	ldr	r3, [r7, #24]
 8003978:	f003 0304 	and.w	r3, r3, #4
 800397c:	2b00      	cmp	r3, #0
 800397e:	d002      	beq.n	8003986 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	f012 f827 	bl	80159d4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	6859      	ldr	r1, [r3, #4]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	69ba      	ldr	r2, [r7, #24]
 8003992:	430a      	orrs	r2, r1
 8003994:	605a      	str	r2, [r3, #4]
 8003996:	e000      	b.n	800399a <HAL_PCD_IRQHandler+0x7b8>
      return;
 8003998:	bf00      	nop
    }
  }
}
 800399a:	3734      	adds	r7, #52	; 0x34
 800399c:	46bd      	mov	sp, r7
 800399e:	bd90      	pop	{r4, r7, pc}

080039a0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b082      	sub	sp, #8
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	460b      	mov	r3, r1
 80039aa:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d101      	bne.n	80039ba <HAL_PCD_SetAddress+0x1a>
 80039b6:	2302      	movs	r3, #2
 80039b8:	e013      	b.n	80039e2 <HAL_PCD_SetAddress+0x42>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2201      	movs	r2, #1
 80039be:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	78fa      	ldrb	r2, [r7, #3]
 80039c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	78fa      	ldrb	r2, [r7, #3]
 80039d0:	4611      	mov	r1, r2
 80039d2:	4618      	mov	r0, r3
 80039d4:	f006 fa32 	bl	8009e3c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2200      	movs	r2, #0
 80039dc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80039e0:	2300      	movs	r3, #0
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3708      	adds	r7, #8
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}

080039ea <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80039ea:	b580      	push	{r7, lr}
 80039ec:	b084      	sub	sp, #16
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	6078      	str	r0, [r7, #4]
 80039f2:	4608      	mov	r0, r1
 80039f4:	4611      	mov	r1, r2
 80039f6:	461a      	mov	r2, r3
 80039f8:	4603      	mov	r3, r0
 80039fa:	70fb      	strb	r3, [r7, #3]
 80039fc:	460b      	mov	r3, r1
 80039fe:	803b      	strh	r3, [r7, #0]
 8003a00:	4613      	mov	r3, r2
 8003a02:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003a04:	2300      	movs	r3, #0
 8003a06:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003a08:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	da0f      	bge.n	8003a30 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a10:	78fb      	ldrb	r3, [r7, #3]
 8003a12:	f003 020f 	and.w	r2, r3, #15
 8003a16:	4613      	mov	r3, r2
 8003a18:	00db      	lsls	r3, r3, #3
 8003a1a:	1a9b      	subs	r3, r3, r2
 8003a1c:	009b      	lsls	r3, r3, #2
 8003a1e:	3338      	adds	r3, #56	; 0x38
 8003a20:	687a      	ldr	r2, [r7, #4]
 8003a22:	4413      	add	r3, r2
 8003a24:	3304      	adds	r3, #4
 8003a26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	705a      	strb	r2, [r3, #1]
 8003a2e:	e00f      	b.n	8003a50 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a30:	78fb      	ldrb	r3, [r7, #3]
 8003a32:	f003 020f 	and.w	r2, r3, #15
 8003a36:	4613      	mov	r3, r2
 8003a38:	00db      	lsls	r3, r3, #3
 8003a3a:	1a9b      	subs	r3, r3, r2
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003a42:	687a      	ldr	r2, [r7, #4]
 8003a44:	4413      	add	r3, r2
 8003a46:	3304      	adds	r3, #4
 8003a48:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003a50:	78fb      	ldrb	r3, [r7, #3]
 8003a52:	f003 030f 	and.w	r3, r3, #15
 8003a56:	b2da      	uxtb	r2, r3
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003a5c:	883a      	ldrh	r2, [r7, #0]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	78ba      	ldrb	r2, [r7, #2]
 8003a66:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	785b      	ldrb	r3, [r3, #1]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d004      	beq.n	8003a7a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	781b      	ldrb	r3, [r3, #0]
 8003a74:	b29a      	uxth	r2, r3
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003a7a:	78bb      	ldrb	r3, [r7, #2]
 8003a7c:	2b02      	cmp	r3, #2
 8003a7e:	d102      	bne.n	8003a86 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2200      	movs	r2, #0
 8003a84:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d101      	bne.n	8003a94 <HAL_PCD_EP_Open+0xaa>
 8003a90:	2302      	movs	r3, #2
 8003a92:	e00e      	b.n	8003ab2 <HAL_PCD_EP_Open+0xc8>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2201      	movs	r2, #1
 8003a98:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	68f9      	ldr	r1, [r7, #12]
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f005 fb90 	bl	80091c8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8003ab0:	7afb      	ldrb	r3, [r7, #11]
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3710      	adds	r7, #16
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}

08003aba <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003aba:	b580      	push	{r7, lr}
 8003abc:	b084      	sub	sp, #16
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	6078      	str	r0, [r7, #4]
 8003ac2:	460b      	mov	r3, r1
 8003ac4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003ac6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	da0f      	bge.n	8003aee <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ace:	78fb      	ldrb	r3, [r7, #3]
 8003ad0:	f003 020f 	and.w	r2, r3, #15
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	00db      	lsls	r3, r3, #3
 8003ad8:	1a9b      	subs	r3, r3, r2
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	3338      	adds	r3, #56	; 0x38
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	4413      	add	r3, r2
 8003ae2:	3304      	adds	r3, #4
 8003ae4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2201      	movs	r2, #1
 8003aea:	705a      	strb	r2, [r3, #1]
 8003aec:	e00f      	b.n	8003b0e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003aee:	78fb      	ldrb	r3, [r7, #3]
 8003af0:	f003 020f 	and.w	r2, r3, #15
 8003af4:	4613      	mov	r3, r2
 8003af6:	00db      	lsls	r3, r3, #3
 8003af8:	1a9b      	subs	r3, r3, r2
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003b00:	687a      	ldr	r2, [r7, #4]
 8003b02:	4413      	add	r3, r2
 8003b04:	3304      	adds	r3, #4
 8003b06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003b0e:	78fb      	ldrb	r3, [r7, #3]
 8003b10:	f003 030f 	and.w	r3, r3, #15
 8003b14:	b2da      	uxtb	r2, r3
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d101      	bne.n	8003b28 <HAL_PCD_EP_Close+0x6e>
 8003b24:	2302      	movs	r3, #2
 8003b26:	e00e      	b.n	8003b46 <HAL_PCD_EP_Close+0x8c>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	68f9      	ldr	r1, [r7, #12]
 8003b36:	4618      	mov	r0, r3
 8003b38:	f005 fbce 	bl	80092d8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003b44:	2300      	movs	r3, #0
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3710      	adds	r7, #16
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}

08003b4e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003b4e:	b580      	push	{r7, lr}
 8003b50:	b086      	sub	sp, #24
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	60f8      	str	r0, [r7, #12]
 8003b56:	607a      	str	r2, [r7, #4]
 8003b58:	603b      	str	r3, [r7, #0]
 8003b5a:	460b      	mov	r3, r1
 8003b5c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b5e:	7afb      	ldrb	r3, [r7, #11]
 8003b60:	f003 020f 	and.w	r2, r3, #15
 8003b64:	4613      	mov	r3, r2
 8003b66:	00db      	lsls	r3, r3, #3
 8003b68:	1a9b      	subs	r3, r3, r2
 8003b6a:	009b      	lsls	r3, r3, #2
 8003b6c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003b70:	68fa      	ldr	r2, [r7, #12]
 8003b72:	4413      	add	r3, r2
 8003b74:	3304      	adds	r3, #4
 8003b76:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	687a      	ldr	r2, [r7, #4]
 8003b7c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	683a      	ldr	r2, [r7, #0]
 8003b82:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	2200      	movs	r2, #0
 8003b88:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b90:	7afb      	ldrb	r3, [r7, #11]
 8003b92:	f003 030f 	and.w	r3, r3, #15
 8003b96:	b2da      	uxtb	r2, r3
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	691b      	ldr	r3, [r3, #16]
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d102      	bne.n	8003baa <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003ba4:	687a      	ldr	r2, [r7, #4]
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003baa:	7afb      	ldrb	r3, [r7, #11]
 8003bac:	f003 030f 	and.w	r3, r3, #15
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d109      	bne.n	8003bc8 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	6818      	ldr	r0, [r3, #0]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	691b      	ldr	r3, [r3, #16]
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	461a      	mov	r2, r3
 8003bc0:	6979      	ldr	r1, [r7, #20]
 8003bc2:	f005 feb1 	bl	8009928 <USB_EP0StartXfer>
 8003bc6:	e008      	b.n	8003bda <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	6818      	ldr	r0, [r3, #0]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	691b      	ldr	r3, [r3, #16]
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	6979      	ldr	r1, [r7, #20]
 8003bd6:	f005 fc5b 	bl	8009490 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003bda:	2300      	movs	r3, #0
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3718      	adds	r7, #24
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}

08003be4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b083      	sub	sp, #12
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
 8003bec:	460b      	mov	r3, r1
 8003bee:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003bf0:	78fb      	ldrb	r3, [r7, #3]
 8003bf2:	f003 020f 	and.w	r2, r3, #15
 8003bf6:	6879      	ldr	r1, [r7, #4]
 8003bf8:	4613      	mov	r3, r2
 8003bfa:	00db      	lsls	r3, r3, #3
 8003bfc:	1a9b      	subs	r3, r3, r2
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	440b      	add	r3, r1
 8003c02:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003c06:	681b      	ldr	r3, [r3, #0]
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	370c      	adds	r7, #12
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr

08003c14 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b086      	sub	sp, #24
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	60f8      	str	r0, [r7, #12]
 8003c1c:	607a      	str	r2, [r7, #4]
 8003c1e:	603b      	str	r3, [r7, #0]
 8003c20:	460b      	mov	r3, r1
 8003c22:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c24:	7afb      	ldrb	r3, [r7, #11]
 8003c26:	f003 020f 	and.w	r2, r3, #15
 8003c2a:	4613      	mov	r3, r2
 8003c2c:	00db      	lsls	r3, r3, #3
 8003c2e:	1a9b      	subs	r3, r3, r2
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	3338      	adds	r3, #56	; 0x38
 8003c34:	68fa      	ldr	r2, [r7, #12]
 8003c36:	4413      	add	r3, r2
 8003c38:	3304      	adds	r3, #4
 8003c3a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	683a      	ldr	r2, [r7, #0]
 8003c46:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	2201      	movs	r2, #1
 8003c52:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c54:	7afb      	ldrb	r3, [r7, #11]
 8003c56:	f003 030f 	and.w	r3, r3, #15
 8003c5a:	b2da      	uxtb	r2, r3
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	691b      	ldr	r3, [r3, #16]
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d102      	bne.n	8003c6e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003c68:	687a      	ldr	r2, [r7, #4]
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003c6e:	7afb      	ldrb	r3, [r7, #11]
 8003c70:	f003 030f 	and.w	r3, r3, #15
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d109      	bne.n	8003c8c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	6818      	ldr	r0, [r3, #0]
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	691b      	ldr	r3, [r3, #16]
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	461a      	mov	r2, r3
 8003c84:	6979      	ldr	r1, [r7, #20]
 8003c86:	f005 fe4f 	bl	8009928 <USB_EP0StartXfer>
 8003c8a:	e008      	b.n	8003c9e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	6818      	ldr	r0, [r3, #0]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	691b      	ldr	r3, [r3, #16]
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	461a      	mov	r2, r3
 8003c98:	6979      	ldr	r1, [r7, #20]
 8003c9a:	f005 fbf9 	bl	8009490 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003c9e:	2300      	movs	r3, #0
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	3718      	adds	r7, #24
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}

08003ca8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b084      	sub	sp, #16
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
 8003cb0:	460b      	mov	r3, r1
 8003cb2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003cb4:	78fb      	ldrb	r3, [r7, #3]
 8003cb6:	f003 020f 	and.w	r2, r3, #15
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d901      	bls.n	8003cc6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e050      	b.n	8003d68 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003cc6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	da0f      	bge.n	8003cee <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003cce:	78fb      	ldrb	r3, [r7, #3]
 8003cd0:	f003 020f 	and.w	r2, r3, #15
 8003cd4:	4613      	mov	r3, r2
 8003cd6:	00db      	lsls	r3, r3, #3
 8003cd8:	1a9b      	subs	r3, r3, r2
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	3338      	adds	r3, #56	; 0x38
 8003cde:	687a      	ldr	r2, [r7, #4]
 8003ce0:	4413      	add	r3, r2
 8003ce2:	3304      	adds	r3, #4
 8003ce4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2201      	movs	r2, #1
 8003cea:	705a      	strb	r2, [r3, #1]
 8003cec:	e00d      	b.n	8003d0a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003cee:	78fa      	ldrb	r2, [r7, #3]
 8003cf0:	4613      	mov	r3, r2
 8003cf2:	00db      	lsls	r3, r3, #3
 8003cf4:	1a9b      	subs	r3, r3, r2
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003cfc:	687a      	ldr	r2, [r7, #4]
 8003cfe:	4413      	add	r3, r2
 8003d00:	3304      	adds	r3, #4
 8003d02:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2200      	movs	r2, #0
 8003d08:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d10:	78fb      	ldrb	r3, [r7, #3]
 8003d12:	f003 030f 	and.w	r3, r3, #15
 8003d16:	b2da      	uxtb	r2, r3
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d101      	bne.n	8003d2a <HAL_PCD_EP_SetStall+0x82>
 8003d26:	2302      	movs	r3, #2
 8003d28:	e01e      	b.n	8003d68 <HAL_PCD_EP_SetStall+0xc0>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	68f9      	ldr	r1, [r7, #12]
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f005 ffab 	bl	8009c94 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003d3e:	78fb      	ldrb	r3, [r7, #3]
 8003d40:	f003 030f 	and.w	r3, r3, #15
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d10a      	bne.n	8003d5e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6818      	ldr	r0, [r3, #0]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	691b      	ldr	r3, [r3, #16]
 8003d50:	b2d9      	uxtb	r1, r3
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003d58:	461a      	mov	r2, r3
 8003d5a:	f006 f98b 	bl	800a074 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2200      	movs	r2, #0
 8003d62:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003d66:	2300      	movs	r3, #0
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3710      	adds	r7, #16
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}

08003d70 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b084      	sub	sp, #16
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	460b      	mov	r3, r1
 8003d7a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003d7c:	78fb      	ldrb	r3, [r7, #3]
 8003d7e:	f003 020f 	and.w	r2, r3, #15
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d901      	bls.n	8003d8e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e042      	b.n	8003e14 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003d8e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	da0f      	bge.n	8003db6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d96:	78fb      	ldrb	r3, [r7, #3]
 8003d98:	f003 020f 	and.w	r2, r3, #15
 8003d9c:	4613      	mov	r3, r2
 8003d9e:	00db      	lsls	r3, r3, #3
 8003da0:	1a9b      	subs	r3, r3, r2
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	3338      	adds	r3, #56	; 0x38
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	4413      	add	r3, r2
 8003daa:	3304      	adds	r3, #4
 8003dac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2201      	movs	r2, #1
 8003db2:	705a      	strb	r2, [r3, #1]
 8003db4:	e00f      	b.n	8003dd6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003db6:	78fb      	ldrb	r3, [r7, #3]
 8003db8:	f003 020f 	and.w	r2, r3, #15
 8003dbc:	4613      	mov	r3, r2
 8003dbe:	00db      	lsls	r3, r3, #3
 8003dc0:	1a9b      	subs	r3, r3, r2
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	4413      	add	r3, r2
 8003dcc:	3304      	adds	r3, #4
 8003dce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ddc:	78fb      	ldrb	r3, [r7, #3]
 8003dde:	f003 030f 	and.w	r3, r3, #15
 8003de2:	b2da      	uxtb	r2, r3
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d101      	bne.n	8003df6 <HAL_PCD_EP_ClrStall+0x86>
 8003df2:	2302      	movs	r3, #2
 8003df4:	e00e      	b.n	8003e14 <HAL_PCD_EP_ClrStall+0xa4>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2201      	movs	r2, #1
 8003dfa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	68f9      	ldr	r1, [r7, #12]
 8003e04:	4618      	mov	r0, r3
 8003e06:	f005 ffb3 	bl	8009d70 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003e12:	2300      	movs	r3, #0
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	3710      	adds	r7, #16
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}

08003e1c <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b082      	sub	sp, #8
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	460b      	mov	r3, r1
 8003e26:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d101      	bne.n	8003e36 <HAL_PCD_EP_Flush+0x1a>
 8003e32:	2302      	movs	r3, #2
 8003e34:	e01b      	b.n	8003e6e <HAL_PCD_EP_Flush+0x52>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2201      	movs	r2, #1
 8003e3a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((ep_addr & 0x80U) == 0x80U)
 8003e3e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	da09      	bge.n	8003e5a <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	78fb      	ldrb	r3, [r7, #3]
 8003e4c:	f003 030f 	and.w	r3, r3, #15
 8003e50:	4619      	mov	r1, r3
 8003e52:	4610      	mov	r0, r2
 8003e54:	f005 f932 	bl	80090bc <USB_FlushTxFifo>
 8003e58:	e004      	b.n	8003e64 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f005 f952 	bl	8009108 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2200      	movs	r2, #0
 8003e68:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003e6c:	2300      	movs	r3, #0
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3708      	adds	r7, #8
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}

08003e76 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003e76:	b580      	push	{r7, lr}
 8003e78:	b08a      	sub	sp, #40	; 0x28
 8003e7a:	af02      	add	r7, sp, #8
 8003e7c:	6078      	str	r0, [r7, #4]
 8003e7e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003e8a:	683a      	ldr	r2, [r7, #0]
 8003e8c:	4613      	mov	r3, r2
 8003e8e:	00db      	lsls	r3, r3, #3
 8003e90:	1a9b      	subs	r3, r3, r2
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	3338      	adds	r3, #56	; 0x38
 8003e96:	687a      	ldr	r2, [r7, #4]
 8003e98:	4413      	add	r3, r2
 8003e9a:	3304      	adds	r3, #4
 8003e9c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	699a      	ldr	r2, [r3, #24]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	695b      	ldr	r3, [r3, #20]
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	d901      	bls.n	8003eae <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e06c      	b.n	8003f88 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	695a      	ldr	r2, [r3, #20]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	699b      	ldr	r3, [r3, #24]
 8003eb6:	1ad3      	subs	r3, r2, r3
 8003eb8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	69fa      	ldr	r2, [r7, #28]
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d902      	bls.n	8003eca <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003eca:	69fb      	ldr	r3, [r7, #28]
 8003ecc:	3303      	adds	r3, #3
 8003ece:	089b      	lsrs	r3, r3, #2
 8003ed0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003ed2:	e02b      	b.n	8003f2c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	695a      	ldr	r2, [r3, #20]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	699b      	ldr	r3, [r3, #24]
 8003edc:	1ad3      	subs	r3, r2, r3
 8003ede:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	69fa      	ldr	r2, [r7, #28]
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d902      	bls.n	8003ef0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003ef0:	69fb      	ldr	r3, [r7, #28]
 8003ef2:	3303      	adds	r3, #3
 8003ef4:	089b      	lsrs	r3, r3, #2
 8003ef6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	68d9      	ldr	r1, [r3, #12]
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	b2da      	uxtb	r2, r3
 8003f00:	69fb      	ldr	r3, [r7, #28]
 8003f02:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	9300      	str	r3, [sp, #0]
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	6978      	ldr	r0, [r7, #20]
 8003f10:	f005 fe62 	bl	8009bd8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	68da      	ldr	r2, [r3, #12]
 8003f18:	69fb      	ldr	r3, [r7, #28]
 8003f1a:	441a      	add	r2, r3
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	699a      	ldr	r2, [r3, #24]
 8003f24:	69fb      	ldr	r3, [r7, #28]
 8003f26:	441a      	add	r2, r3
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	015a      	lsls	r2, r3, #5
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	4413      	add	r3, r2
 8003f34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f38:	699b      	ldr	r3, [r3, #24]
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	69ba      	ldr	r2, [r7, #24]
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	d809      	bhi.n	8003f56 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	699a      	ldr	r2, [r3, #24]
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003f4a:	429a      	cmp	r2, r3
 8003f4c:	d203      	bcs.n	8003f56 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	695b      	ldr	r3, [r3, #20]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d1be      	bne.n	8003ed4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	695a      	ldr	r2, [r3, #20]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	699b      	ldr	r3, [r3, #24]
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d811      	bhi.n	8003f86 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	f003 030f 	and.w	r3, r3, #15
 8003f68:	2201      	movs	r2, #1
 8003f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f6e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	43db      	mvns	r3, r3
 8003f7c:	6939      	ldr	r1, [r7, #16]
 8003f7e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f82:	4013      	ands	r3, r2
 8003f84:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003f86:	2300      	movs	r3, #0
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3720      	adds	r7, #32
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}

08003f90 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b086      	sub	sp, #24
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	333c      	adds	r3, #60	; 0x3c
 8003fa8:	3304      	adds	r3, #4
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	015a      	lsls	r2, r3, #5
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	4413      	add	r3, r2
 8003fb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	691b      	ldr	r3, [r3, #16]
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	f040 80a0 	bne.w	8004108 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	f003 0308 	and.w	r3, r3, #8
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d015      	beq.n	8003ffe <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	4a72      	ldr	r2, [pc, #456]	; (80041a0 <PCD_EP_OutXfrComplete_int+0x210>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	f240 80dd 	bls.w	8004196 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	f000 80d7 	beq.w	8004196 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	015a      	lsls	r2, r3, #5
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	4413      	add	r3, r2
 8003ff0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ffa:	6093      	str	r3, [r2, #8]
 8003ffc:	e0cb      	b.n	8004196 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	f003 0320 	and.w	r3, r3, #32
 8004004:	2b00      	cmp	r3, #0
 8004006:	d009      	beq.n	800401c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	015a      	lsls	r2, r3, #5
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	4413      	add	r3, r2
 8004010:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004014:	461a      	mov	r2, r3
 8004016:	2320      	movs	r3, #32
 8004018:	6093      	str	r3, [r2, #8]
 800401a:	e0bc      	b.n	8004196 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004022:	2b00      	cmp	r3, #0
 8004024:	f040 80b7 	bne.w	8004196 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	4a5d      	ldr	r2, [pc, #372]	; (80041a0 <PCD_EP_OutXfrComplete_int+0x210>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d90f      	bls.n	8004050 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004036:	2b00      	cmp	r3, #0
 8004038:	d00a      	beq.n	8004050 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	015a      	lsls	r2, r3, #5
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	4413      	add	r3, r2
 8004042:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004046:	461a      	mov	r2, r3
 8004048:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800404c:	6093      	str	r3, [r2, #8]
 800404e:	e0a2      	b.n	8004196 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8004050:	6879      	ldr	r1, [r7, #4]
 8004052:	683a      	ldr	r2, [r7, #0]
 8004054:	4613      	mov	r3, r2
 8004056:	00db      	lsls	r3, r3, #3
 8004058:	1a9b      	subs	r3, r3, r2
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	440b      	add	r3, r1
 800405e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004062:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	0159      	lsls	r1, r3, #5
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	440b      	add	r3, r1
 800406c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004070:	691b      	ldr	r3, [r3, #16]
 8004072:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8004076:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	683a      	ldr	r2, [r7, #0]
 800407c:	4613      	mov	r3, r2
 800407e:	00db      	lsls	r3, r3, #3
 8004080:	1a9b      	subs	r3, r3, r2
 8004082:	009b      	lsls	r3, r3, #2
 8004084:	4403      	add	r3, r0
 8004086:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800408a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800408c:	6879      	ldr	r1, [r7, #4]
 800408e:	683a      	ldr	r2, [r7, #0]
 8004090:	4613      	mov	r3, r2
 8004092:	00db      	lsls	r3, r3, #3
 8004094:	1a9b      	subs	r3, r3, r2
 8004096:	009b      	lsls	r3, r3, #2
 8004098:	440b      	add	r3, r1
 800409a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800409e:	6819      	ldr	r1, [r3, #0]
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	683a      	ldr	r2, [r7, #0]
 80040a4:	4613      	mov	r3, r2
 80040a6:	00db      	lsls	r3, r3, #3
 80040a8:	1a9b      	subs	r3, r3, r2
 80040aa:	009b      	lsls	r3, r3, #2
 80040ac:	4403      	add	r3, r0
 80040ae:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4419      	add	r1, r3
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	683a      	ldr	r2, [r7, #0]
 80040ba:	4613      	mov	r3, r2
 80040bc:	00db      	lsls	r3, r3, #3
 80040be:	1a9b      	subs	r3, r3, r2
 80040c0:	009b      	lsls	r3, r3, #2
 80040c2:	4403      	add	r3, r0
 80040c4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80040c8:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d114      	bne.n	80040fa <PCD_EP_OutXfrComplete_int+0x16a>
 80040d0:	6879      	ldr	r1, [r7, #4]
 80040d2:	683a      	ldr	r2, [r7, #0]
 80040d4:	4613      	mov	r3, r2
 80040d6:	00db      	lsls	r3, r3, #3
 80040d8:	1a9b      	subs	r3, r3, r2
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	440b      	add	r3, r1
 80040de:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d108      	bne.n	80040fa <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6818      	ldr	r0, [r3, #0]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80040f2:	461a      	mov	r2, r3
 80040f4:	2101      	movs	r1, #1
 80040f6:	f005 ffbd 	bl	800a074 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	4619      	mov	r1, r3
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	f011 fb95 	bl	8015830 <HAL_PCD_DataOutStageCallback>
 8004106:	e046      	b.n	8004196 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	4a26      	ldr	r2, [pc, #152]	; (80041a4 <PCD_EP_OutXfrComplete_int+0x214>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d124      	bne.n	800415a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004116:	2b00      	cmp	r3, #0
 8004118:	d00a      	beq.n	8004130 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	015a      	lsls	r2, r3, #5
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	4413      	add	r3, r2
 8004122:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004126:	461a      	mov	r2, r3
 8004128:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800412c:	6093      	str	r3, [r2, #8]
 800412e:	e032      	b.n	8004196 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	f003 0320 	and.w	r3, r3, #32
 8004136:	2b00      	cmp	r3, #0
 8004138:	d008      	beq.n	800414c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	015a      	lsls	r2, r3, #5
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	4413      	add	r3, r2
 8004142:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004146:	461a      	mov	r2, r3
 8004148:	2320      	movs	r3, #32
 800414a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	b2db      	uxtb	r3, r3
 8004150:	4619      	mov	r1, r3
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f011 fb6c 	bl	8015830 <HAL_PCD_DataOutStageCallback>
 8004158:	e01d      	b.n	8004196 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d114      	bne.n	800418a <PCD_EP_OutXfrComplete_int+0x1fa>
 8004160:	6879      	ldr	r1, [r7, #4]
 8004162:	683a      	ldr	r2, [r7, #0]
 8004164:	4613      	mov	r3, r2
 8004166:	00db      	lsls	r3, r3, #3
 8004168:	1a9b      	subs	r3, r3, r2
 800416a:	009b      	lsls	r3, r3, #2
 800416c:	440b      	add	r3, r1
 800416e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d108      	bne.n	800418a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6818      	ldr	r0, [r3, #0]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004182:	461a      	mov	r2, r3
 8004184:	2100      	movs	r1, #0
 8004186:	f005 ff75 	bl	800a074 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	b2db      	uxtb	r3, r3
 800418e:	4619      	mov	r1, r3
 8004190:	6878      	ldr	r0, [r7, #4]
 8004192:	f011 fb4d 	bl	8015830 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004196:	2300      	movs	r3, #0
}
 8004198:	4618      	mov	r0, r3
 800419a:	3718      	adds	r7, #24
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}
 80041a0:	4f54300a 	.word	0x4f54300a
 80041a4:	4f54310a 	.word	0x4f54310a

080041a8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b086      	sub	sp, #24
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
 80041b0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	333c      	adds	r3, #60	; 0x3c
 80041c0:	3304      	adds	r3, #4
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	015a      	lsls	r2, r3, #5
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	4413      	add	r3, r2
 80041ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	4a15      	ldr	r2, [pc, #84]	; (8004230 <PCD_EP_OutSetupPacket_int+0x88>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d90e      	bls.n	80041fc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d009      	beq.n	80041fc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	015a      	lsls	r2, r3, #5
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	4413      	add	r3, r2
 80041f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041f4:	461a      	mov	r2, r3
 80041f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041fa:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80041fc:	6878      	ldr	r0, [r7, #4]
 80041fe:	f011 fb05 	bl	801580c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	4a0a      	ldr	r2, [pc, #40]	; (8004230 <PCD_EP_OutSetupPacket_int+0x88>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d90c      	bls.n	8004224 <PCD_EP_OutSetupPacket_int+0x7c>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	691b      	ldr	r3, [r3, #16]
 800420e:	2b01      	cmp	r3, #1
 8004210:	d108      	bne.n	8004224 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6818      	ldr	r0, [r3, #0]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800421c:	461a      	mov	r2, r3
 800421e:	2101      	movs	r1, #1
 8004220:	f005 ff28 	bl	800a074 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004224:	2300      	movs	r3, #0
}
 8004226:	4618      	mov	r0, r3
 8004228:	3718      	adds	r7, #24
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}
 800422e:	bf00      	nop
 8004230:	4f54300a 	.word	0x4f54300a

08004234 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004234:	b480      	push	{r7}
 8004236:	b085      	sub	sp, #20
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
 800423c:	460b      	mov	r3, r1
 800423e:	70fb      	strb	r3, [r7, #3]
 8004240:	4613      	mov	r3, r2
 8004242:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800424a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800424c:	78fb      	ldrb	r3, [r7, #3]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d107      	bne.n	8004262 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004252:	883b      	ldrh	r3, [r7, #0]
 8004254:	0419      	lsls	r1, r3, #16
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	68ba      	ldr	r2, [r7, #8]
 800425c:	430a      	orrs	r2, r1
 800425e:	629a      	str	r2, [r3, #40]	; 0x28
 8004260:	e028      	b.n	80042b4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004268:	0c1b      	lsrs	r3, r3, #16
 800426a:	68ba      	ldr	r2, [r7, #8]
 800426c:	4413      	add	r3, r2
 800426e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004270:	2300      	movs	r3, #0
 8004272:	73fb      	strb	r3, [r7, #15]
 8004274:	e00d      	b.n	8004292 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	7bfb      	ldrb	r3, [r7, #15]
 800427c:	3340      	adds	r3, #64	; 0x40
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	4413      	add	r3, r2
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	0c1b      	lsrs	r3, r3, #16
 8004286:	68ba      	ldr	r2, [r7, #8]
 8004288:	4413      	add	r3, r2
 800428a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800428c:	7bfb      	ldrb	r3, [r7, #15]
 800428e:	3301      	adds	r3, #1
 8004290:	73fb      	strb	r3, [r7, #15]
 8004292:	7bfa      	ldrb	r2, [r7, #15]
 8004294:	78fb      	ldrb	r3, [r7, #3]
 8004296:	3b01      	subs	r3, #1
 8004298:	429a      	cmp	r2, r3
 800429a:	d3ec      	bcc.n	8004276 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800429c:	883b      	ldrh	r3, [r7, #0]
 800429e:	0418      	lsls	r0, r3, #16
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6819      	ldr	r1, [r3, #0]
 80042a4:	78fb      	ldrb	r3, [r7, #3]
 80042a6:	3b01      	subs	r3, #1
 80042a8:	68ba      	ldr	r2, [r7, #8]
 80042aa:	4302      	orrs	r2, r0
 80042ac:	3340      	adds	r3, #64	; 0x40
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	440b      	add	r3, r1
 80042b2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80042b4:	2300      	movs	r3, #0
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	3714      	adds	r7, #20
 80042ba:	46bd      	mov	sp, r7
 80042bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c0:	4770      	bx	lr

080042c2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80042c2:	b480      	push	{r7}
 80042c4:	b083      	sub	sp, #12
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	6078      	str	r0, [r7, #4]
 80042ca:	460b      	mov	r3, r1
 80042cc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	887a      	ldrh	r2, [r7, #2]
 80042d4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80042d6:	2300      	movs	r3, #0
}
 80042d8:	4618      	mov	r0, r3
 80042da:	370c      	adds	r7, #12
 80042dc:	46bd      	mov	sp, r7
 80042de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e2:	4770      	bx	lr

080042e4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b085      	sub	sp, #20
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2201      	movs	r2, #1
 80042f6:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2200      	movs	r2, #0
 80042fe:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	699b      	ldr	r3, [r3, #24]
 8004306:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004312:	4b05      	ldr	r3, [pc, #20]	; (8004328 <HAL_PCDEx_ActivateLPM+0x44>)
 8004314:	4313      	orrs	r3, r2
 8004316:	68fa      	ldr	r2, [r7, #12]
 8004318:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800431a:	2300      	movs	r3, #0
}
 800431c:	4618      	mov	r0, r3
 800431e:	3714      	adds	r7, #20
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr
 8004328:	10000003 	.word	0x10000003

0800432c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800432c:	b480      	push	{r7}
 800432e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004330:	4b05      	ldr	r3, [pc, #20]	; (8004348 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a04      	ldr	r2, [pc, #16]	; (8004348 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004336:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800433a:	6013      	str	r3, [r2, #0]
}
 800433c:	bf00      	nop
 800433e:	46bd      	mov	sp, r7
 8004340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004344:	4770      	bx	lr
 8004346:	bf00      	nop
 8004348:	40007000 	.word	0x40007000

0800434c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b082      	sub	sp, #8
 8004350:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004352:	2300      	movs	r3, #0
 8004354:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004356:	4b23      	ldr	r3, [pc, #140]	; (80043e4 <HAL_PWREx_EnableOverDrive+0x98>)
 8004358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800435a:	4a22      	ldr	r2, [pc, #136]	; (80043e4 <HAL_PWREx_EnableOverDrive+0x98>)
 800435c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004360:	6413      	str	r3, [r2, #64]	; 0x40
 8004362:	4b20      	ldr	r3, [pc, #128]	; (80043e4 <HAL_PWREx_EnableOverDrive+0x98>)
 8004364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004366:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800436a:	603b      	str	r3, [r7, #0]
 800436c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800436e:	4b1e      	ldr	r3, [pc, #120]	; (80043e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a1d      	ldr	r2, [pc, #116]	; (80043e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004374:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004378:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800437a:	f7fd f8b3 	bl	80014e4 <HAL_GetTick>
 800437e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004380:	e009      	b.n	8004396 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004382:	f7fd f8af 	bl	80014e4 <HAL_GetTick>
 8004386:	4602      	mov	r2, r0
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	1ad3      	subs	r3, r2, r3
 800438c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004390:	d901      	bls.n	8004396 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004392:	2303      	movs	r3, #3
 8004394:	e022      	b.n	80043dc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004396:	4b14      	ldr	r3, [pc, #80]	; (80043e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800439e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043a2:	d1ee      	bne.n	8004382 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80043a4:	4b10      	ldr	r3, [pc, #64]	; (80043e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a0f      	ldr	r2, [pc, #60]	; (80043e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80043aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043ae:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80043b0:	f7fd f898 	bl	80014e4 <HAL_GetTick>
 80043b4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80043b6:	e009      	b.n	80043cc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80043b8:	f7fd f894 	bl	80014e4 <HAL_GetTick>
 80043bc:	4602      	mov	r2, r0
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	1ad3      	subs	r3, r2, r3
 80043c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80043c6:	d901      	bls.n	80043cc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80043c8:	2303      	movs	r3, #3
 80043ca:	e007      	b.n	80043dc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80043cc:	4b06      	ldr	r3, [pc, #24]	; (80043e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80043d8:	d1ee      	bne.n	80043b8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80043da:	2300      	movs	r3, #0
}
 80043dc:	4618      	mov	r0, r3
 80043de:	3708      	adds	r7, #8
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}
 80043e4:	40023800 	.word	0x40023800
 80043e8:	40007000 	.word	0x40007000

080043ec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b086      	sub	sp, #24
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80043f4:	2300      	movs	r3, #0
 80043f6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d101      	bne.n	8004402 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	e29b      	b.n	800493a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 0301 	and.w	r3, r3, #1
 800440a:	2b00      	cmp	r3, #0
 800440c:	f000 8087 	beq.w	800451e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004410:	4b96      	ldr	r3, [pc, #600]	; (800466c <HAL_RCC_OscConfig+0x280>)
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	f003 030c 	and.w	r3, r3, #12
 8004418:	2b04      	cmp	r3, #4
 800441a:	d00c      	beq.n	8004436 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800441c:	4b93      	ldr	r3, [pc, #588]	; (800466c <HAL_RCC_OscConfig+0x280>)
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	f003 030c 	and.w	r3, r3, #12
 8004424:	2b08      	cmp	r3, #8
 8004426:	d112      	bne.n	800444e <HAL_RCC_OscConfig+0x62>
 8004428:	4b90      	ldr	r3, [pc, #576]	; (800466c <HAL_RCC_OscConfig+0x280>)
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004430:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004434:	d10b      	bne.n	800444e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004436:	4b8d      	ldr	r3, [pc, #564]	; (800466c <HAL_RCC_OscConfig+0x280>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800443e:	2b00      	cmp	r3, #0
 8004440:	d06c      	beq.n	800451c <HAL_RCC_OscConfig+0x130>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d168      	bne.n	800451c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	e275      	b.n	800493a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004456:	d106      	bne.n	8004466 <HAL_RCC_OscConfig+0x7a>
 8004458:	4b84      	ldr	r3, [pc, #528]	; (800466c <HAL_RCC_OscConfig+0x280>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a83      	ldr	r2, [pc, #524]	; (800466c <HAL_RCC_OscConfig+0x280>)
 800445e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004462:	6013      	str	r3, [r2, #0]
 8004464:	e02e      	b.n	80044c4 <HAL_RCC_OscConfig+0xd8>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d10c      	bne.n	8004488 <HAL_RCC_OscConfig+0x9c>
 800446e:	4b7f      	ldr	r3, [pc, #508]	; (800466c <HAL_RCC_OscConfig+0x280>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a7e      	ldr	r2, [pc, #504]	; (800466c <HAL_RCC_OscConfig+0x280>)
 8004474:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004478:	6013      	str	r3, [r2, #0]
 800447a:	4b7c      	ldr	r3, [pc, #496]	; (800466c <HAL_RCC_OscConfig+0x280>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a7b      	ldr	r2, [pc, #492]	; (800466c <HAL_RCC_OscConfig+0x280>)
 8004480:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004484:	6013      	str	r3, [r2, #0]
 8004486:	e01d      	b.n	80044c4 <HAL_RCC_OscConfig+0xd8>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004490:	d10c      	bne.n	80044ac <HAL_RCC_OscConfig+0xc0>
 8004492:	4b76      	ldr	r3, [pc, #472]	; (800466c <HAL_RCC_OscConfig+0x280>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a75      	ldr	r2, [pc, #468]	; (800466c <HAL_RCC_OscConfig+0x280>)
 8004498:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800449c:	6013      	str	r3, [r2, #0]
 800449e:	4b73      	ldr	r3, [pc, #460]	; (800466c <HAL_RCC_OscConfig+0x280>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a72      	ldr	r2, [pc, #456]	; (800466c <HAL_RCC_OscConfig+0x280>)
 80044a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044a8:	6013      	str	r3, [r2, #0]
 80044aa:	e00b      	b.n	80044c4 <HAL_RCC_OscConfig+0xd8>
 80044ac:	4b6f      	ldr	r3, [pc, #444]	; (800466c <HAL_RCC_OscConfig+0x280>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a6e      	ldr	r2, [pc, #440]	; (800466c <HAL_RCC_OscConfig+0x280>)
 80044b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044b6:	6013      	str	r3, [r2, #0]
 80044b8:	4b6c      	ldr	r3, [pc, #432]	; (800466c <HAL_RCC_OscConfig+0x280>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a6b      	ldr	r2, [pc, #428]	; (800466c <HAL_RCC_OscConfig+0x280>)
 80044be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d013      	beq.n	80044f4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044cc:	f7fd f80a 	bl	80014e4 <HAL_GetTick>
 80044d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044d2:	e008      	b.n	80044e6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044d4:	f7fd f806 	bl	80014e4 <HAL_GetTick>
 80044d8:	4602      	mov	r2, r0
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	2b64      	cmp	r3, #100	; 0x64
 80044e0:	d901      	bls.n	80044e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80044e2:	2303      	movs	r3, #3
 80044e4:	e229      	b.n	800493a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044e6:	4b61      	ldr	r3, [pc, #388]	; (800466c <HAL_RCC_OscConfig+0x280>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d0f0      	beq.n	80044d4 <HAL_RCC_OscConfig+0xe8>
 80044f2:	e014      	b.n	800451e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044f4:	f7fc fff6 	bl	80014e4 <HAL_GetTick>
 80044f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044fa:	e008      	b.n	800450e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044fc:	f7fc fff2 	bl	80014e4 <HAL_GetTick>
 8004500:	4602      	mov	r2, r0
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	1ad3      	subs	r3, r2, r3
 8004506:	2b64      	cmp	r3, #100	; 0x64
 8004508:	d901      	bls.n	800450e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800450a:	2303      	movs	r3, #3
 800450c:	e215      	b.n	800493a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800450e:	4b57      	ldr	r3, [pc, #348]	; (800466c <HAL_RCC_OscConfig+0x280>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004516:	2b00      	cmp	r3, #0
 8004518:	d1f0      	bne.n	80044fc <HAL_RCC_OscConfig+0x110>
 800451a:	e000      	b.n	800451e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800451c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f003 0302 	and.w	r3, r3, #2
 8004526:	2b00      	cmp	r3, #0
 8004528:	d069      	beq.n	80045fe <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800452a:	4b50      	ldr	r3, [pc, #320]	; (800466c <HAL_RCC_OscConfig+0x280>)
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	f003 030c 	and.w	r3, r3, #12
 8004532:	2b00      	cmp	r3, #0
 8004534:	d00b      	beq.n	800454e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004536:	4b4d      	ldr	r3, [pc, #308]	; (800466c <HAL_RCC_OscConfig+0x280>)
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	f003 030c 	and.w	r3, r3, #12
 800453e:	2b08      	cmp	r3, #8
 8004540:	d11c      	bne.n	800457c <HAL_RCC_OscConfig+0x190>
 8004542:	4b4a      	ldr	r3, [pc, #296]	; (800466c <HAL_RCC_OscConfig+0x280>)
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800454a:	2b00      	cmp	r3, #0
 800454c:	d116      	bne.n	800457c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800454e:	4b47      	ldr	r3, [pc, #284]	; (800466c <HAL_RCC_OscConfig+0x280>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 0302 	and.w	r3, r3, #2
 8004556:	2b00      	cmp	r3, #0
 8004558:	d005      	beq.n	8004566 <HAL_RCC_OscConfig+0x17a>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	68db      	ldr	r3, [r3, #12]
 800455e:	2b01      	cmp	r3, #1
 8004560:	d001      	beq.n	8004566 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	e1e9      	b.n	800493a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004566:	4b41      	ldr	r3, [pc, #260]	; (800466c <HAL_RCC_OscConfig+0x280>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	691b      	ldr	r3, [r3, #16]
 8004572:	00db      	lsls	r3, r3, #3
 8004574:	493d      	ldr	r1, [pc, #244]	; (800466c <HAL_RCC_OscConfig+0x280>)
 8004576:	4313      	orrs	r3, r2
 8004578:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800457a:	e040      	b.n	80045fe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d023      	beq.n	80045cc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004584:	4b39      	ldr	r3, [pc, #228]	; (800466c <HAL_RCC_OscConfig+0x280>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a38      	ldr	r2, [pc, #224]	; (800466c <HAL_RCC_OscConfig+0x280>)
 800458a:	f043 0301 	orr.w	r3, r3, #1
 800458e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004590:	f7fc ffa8 	bl	80014e4 <HAL_GetTick>
 8004594:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004596:	e008      	b.n	80045aa <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004598:	f7fc ffa4 	bl	80014e4 <HAL_GetTick>
 800459c:	4602      	mov	r2, r0
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	1ad3      	subs	r3, r2, r3
 80045a2:	2b02      	cmp	r3, #2
 80045a4:	d901      	bls.n	80045aa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80045a6:	2303      	movs	r3, #3
 80045a8:	e1c7      	b.n	800493a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045aa:	4b30      	ldr	r3, [pc, #192]	; (800466c <HAL_RCC_OscConfig+0x280>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f003 0302 	and.w	r3, r3, #2
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d0f0      	beq.n	8004598 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045b6:	4b2d      	ldr	r3, [pc, #180]	; (800466c <HAL_RCC_OscConfig+0x280>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	691b      	ldr	r3, [r3, #16]
 80045c2:	00db      	lsls	r3, r3, #3
 80045c4:	4929      	ldr	r1, [pc, #164]	; (800466c <HAL_RCC_OscConfig+0x280>)
 80045c6:	4313      	orrs	r3, r2
 80045c8:	600b      	str	r3, [r1, #0]
 80045ca:	e018      	b.n	80045fe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045cc:	4b27      	ldr	r3, [pc, #156]	; (800466c <HAL_RCC_OscConfig+0x280>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a26      	ldr	r2, [pc, #152]	; (800466c <HAL_RCC_OscConfig+0x280>)
 80045d2:	f023 0301 	bic.w	r3, r3, #1
 80045d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045d8:	f7fc ff84 	bl	80014e4 <HAL_GetTick>
 80045dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045de:	e008      	b.n	80045f2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045e0:	f7fc ff80 	bl	80014e4 <HAL_GetTick>
 80045e4:	4602      	mov	r2, r0
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	1ad3      	subs	r3, r2, r3
 80045ea:	2b02      	cmp	r3, #2
 80045ec:	d901      	bls.n	80045f2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80045ee:	2303      	movs	r3, #3
 80045f0:	e1a3      	b.n	800493a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045f2:	4b1e      	ldr	r3, [pc, #120]	; (800466c <HAL_RCC_OscConfig+0x280>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f003 0302 	and.w	r3, r3, #2
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d1f0      	bne.n	80045e0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 0308 	and.w	r3, r3, #8
 8004606:	2b00      	cmp	r3, #0
 8004608:	d038      	beq.n	800467c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	695b      	ldr	r3, [r3, #20]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d019      	beq.n	8004646 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004612:	4b16      	ldr	r3, [pc, #88]	; (800466c <HAL_RCC_OscConfig+0x280>)
 8004614:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004616:	4a15      	ldr	r2, [pc, #84]	; (800466c <HAL_RCC_OscConfig+0x280>)
 8004618:	f043 0301 	orr.w	r3, r3, #1
 800461c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800461e:	f7fc ff61 	bl	80014e4 <HAL_GetTick>
 8004622:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004624:	e008      	b.n	8004638 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004626:	f7fc ff5d 	bl	80014e4 <HAL_GetTick>
 800462a:	4602      	mov	r2, r0
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	1ad3      	subs	r3, r2, r3
 8004630:	2b02      	cmp	r3, #2
 8004632:	d901      	bls.n	8004638 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004634:	2303      	movs	r3, #3
 8004636:	e180      	b.n	800493a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004638:	4b0c      	ldr	r3, [pc, #48]	; (800466c <HAL_RCC_OscConfig+0x280>)
 800463a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800463c:	f003 0302 	and.w	r3, r3, #2
 8004640:	2b00      	cmp	r3, #0
 8004642:	d0f0      	beq.n	8004626 <HAL_RCC_OscConfig+0x23a>
 8004644:	e01a      	b.n	800467c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004646:	4b09      	ldr	r3, [pc, #36]	; (800466c <HAL_RCC_OscConfig+0x280>)
 8004648:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800464a:	4a08      	ldr	r2, [pc, #32]	; (800466c <HAL_RCC_OscConfig+0x280>)
 800464c:	f023 0301 	bic.w	r3, r3, #1
 8004650:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004652:	f7fc ff47 	bl	80014e4 <HAL_GetTick>
 8004656:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004658:	e00a      	b.n	8004670 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800465a:	f7fc ff43 	bl	80014e4 <HAL_GetTick>
 800465e:	4602      	mov	r2, r0
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	1ad3      	subs	r3, r2, r3
 8004664:	2b02      	cmp	r3, #2
 8004666:	d903      	bls.n	8004670 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004668:	2303      	movs	r3, #3
 800466a:	e166      	b.n	800493a <HAL_RCC_OscConfig+0x54e>
 800466c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004670:	4b92      	ldr	r3, [pc, #584]	; (80048bc <HAL_RCC_OscConfig+0x4d0>)
 8004672:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004674:	f003 0302 	and.w	r3, r3, #2
 8004678:	2b00      	cmp	r3, #0
 800467a:	d1ee      	bne.n	800465a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f003 0304 	and.w	r3, r3, #4
 8004684:	2b00      	cmp	r3, #0
 8004686:	f000 80a4 	beq.w	80047d2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800468a:	4b8c      	ldr	r3, [pc, #560]	; (80048bc <HAL_RCC_OscConfig+0x4d0>)
 800468c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004692:	2b00      	cmp	r3, #0
 8004694:	d10d      	bne.n	80046b2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004696:	4b89      	ldr	r3, [pc, #548]	; (80048bc <HAL_RCC_OscConfig+0x4d0>)
 8004698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800469a:	4a88      	ldr	r2, [pc, #544]	; (80048bc <HAL_RCC_OscConfig+0x4d0>)
 800469c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046a0:	6413      	str	r3, [r2, #64]	; 0x40
 80046a2:	4b86      	ldr	r3, [pc, #536]	; (80048bc <HAL_RCC_OscConfig+0x4d0>)
 80046a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046aa:	60bb      	str	r3, [r7, #8]
 80046ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046ae:	2301      	movs	r3, #1
 80046b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046b2:	4b83      	ldr	r3, [pc, #524]	; (80048c0 <HAL_RCC_OscConfig+0x4d4>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d118      	bne.n	80046f0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80046be:	4b80      	ldr	r3, [pc, #512]	; (80048c0 <HAL_RCC_OscConfig+0x4d4>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a7f      	ldr	r2, [pc, #508]	; (80048c0 <HAL_RCC_OscConfig+0x4d4>)
 80046c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046ca:	f7fc ff0b 	bl	80014e4 <HAL_GetTick>
 80046ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046d0:	e008      	b.n	80046e4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046d2:	f7fc ff07 	bl	80014e4 <HAL_GetTick>
 80046d6:	4602      	mov	r2, r0
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	1ad3      	subs	r3, r2, r3
 80046dc:	2b64      	cmp	r3, #100	; 0x64
 80046de:	d901      	bls.n	80046e4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80046e0:	2303      	movs	r3, #3
 80046e2:	e12a      	b.n	800493a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046e4:	4b76      	ldr	r3, [pc, #472]	; (80048c0 <HAL_RCC_OscConfig+0x4d4>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d0f0      	beq.n	80046d2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d106      	bne.n	8004706 <HAL_RCC_OscConfig+0x31a>
 80046f8:	4b70      	ldr	r3, [pc, #448]	; (80048bc <HAL_RCC_OscConfig+0x4d0>)
 80046fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046fc:	4a6f      	ldr	r2, [pc, #444]	; (80048bc <HAL_RCC_OscConfig+0x4d0>)
 80046fe:	f043 0301 	orr.w	r3, r3, #1
 8004702:	6713      	str	r3, [r2, #112]	; 0x70
 8004704:	e02d      	b.n	8004762 <HAL_RCC_OscConfig+0x376>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d10c      	bne.n	8004728 <HAL_RCC_OscConfig+0x33c>
 800470e:	4b6b      	ldr	r3, [pc, #428]	; (80048bc <HAL_RCC_OscConfig+0x4d0>)
 8004710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004712:	4a6a      	ldr	r2, [pc, #424]	; (80048bc <HAL_RCC_OscConfig+0x4d0>)
 8004714:	f023 0301 	bic.w	r3, r3, #1
 8004718:	6713      	str	r3, [r2, #112]	; 0x70
 800471a:	4b68      	ldr	r3, [pc, #416]	; (80048bc <HAL_RCC_OscConfig+0x4d0>)
 800471c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800471e:	4a67      	ldr	r2, [pc, #412]	; (80048bc <HAL_RCC_OscConfig+0x4d0>)
 8004720:	f023 0304 	bic.w	r3, r3, #4
 8004724:	6713      	str	r3, [r2, #112]	; 0x70
 8004726:	e01c      	b.n	8004762 <HAL_RCC_OscConfig+0x376>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	2b05      	cmp	r3, #5
 800472e:	d10c      	bne.n	800474a <HAL_RCC_OscConfig+0x35e>
 8004730:	4b62      	ldr	r3, [pc, #392]	; (80048bc <HAL_RCC_OscConfig+0x4d0>)
 8004732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004734:	4a61      	ldr	r2, [pc, #388]	; (80048bc <HAL_RCC_OscConfig+0x4d0>)
 8004736:	f043 0304 	orr.w	r3, r3, #4
 800473a:	6713      	str	r3, [r2, #112]	; 0x70
 800473c:	4b5f      	ldr	r3, [pc, #380]	; (80048bc <HAL_RCC_OscConfig+0x4d0>)
 800473e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004740:	4a5e      	ldr	r2, [pc, #376]	; (80048bc <HAL_RCC_OscConfig+0x4d0>)
 8004742:	f043 0301 	orr.w	r3, r3, #1
 8004746:	6713      	str	r3, [r2, #112]	; 0x70
 8004748:	e00b      	b.n	8004762 <HAL_RCC_OscConfig+0x376>
 800474a:	4b5c      	ldr	r3, [pc, #368]	; (80048bc <HAL_RCC_OscConfig+0x4d0>)
 800474c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800474e:	4a5b      	ldr	r2, [pc, #364]	; (80048bc <HAL_RCC_OscConfig+0x4d0>)
 8004750:	f023 0301 	bic.w	r3, r3, #1
 8004754:	6713      	str	r3, [r2, #112]	; 0x70
 8004756:	4b59      	ldr	r3, [pc, #356]	; (80048bc <HAL_RCC_OscConfig+0x4d0>)
 8004758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800475a:	4a58      	ldr	r2, [pc, #352]	; (80048bc <HAL_RCC_OscConfig+0x4d0>)
 800475c:	f023 0304 	bic.w	r3, r3, #4
 8004760:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d015      	beq.n	8004796 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800476a:	f7fc febb 	bl	80014e4 <HAL_GetTick>
 800476e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004770:	e00a      	b.n	8004788 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004772:	f7fc feb7 	bl	80014e4 <HAL_GetTick>
 8004776:	4602      	mov	r2, r0
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	1ad3      	subs	r3, r2, r3
 800477c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004780:	4293      	cmp	r3, r2
 8004782:	d901      	bls.n	8004788 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004784:	2303      	movs	r3, #3
 8004786:	e0d8      	b.n	800493a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004788:	4b4c      	ldr	r3, [pc, #304]	; (80048bc <HAL_RCC_OscConfig+0x4d0>)
 800478a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800478c:	f003 0302 	and.w	r3, r3, #2
 8004790:	2b00      	cmp	r3, #0
 8004792:	d0ee      	beq.n	8004772 <HAL_RCC_OscConfig+0x386>
 8004794:	e014      	b.n	80047c0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004796:	f7fc fea5 	bl	80014e4 <HAL_GetTick>
 800479a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800479c:	e00a      	b.n	80047b4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800479e:	f7fc fea1 	bl	80014e4 <HAL_GetTick>
 80047a2:	4602      	mov	r2, r0
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	1ad3      	subs	r3, r2, r3
 80047a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d901      	bls.n	80047b4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80047b0:	2303      	movs	r3, #3
 80047b2:	e0c2      	b.n	800493a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047b4:	4b41      	ldr	r3, [pc, #260]	; (80048bc <HAL_RCC_OscConfig+0x4d0>)
 80047b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047b8:	f003 0302 	and.w	r3, r3, #2
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d1ee      	bne.n	800479e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80047c0:	7dfb      	ldrb	r3, [r7, #23]
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d105      	bne.n	80047d2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047c6:	4b3d      	ldr	r3, [pc, #244]	; (80048bc <HAL_RCC_OscConfig+0x4d0>)
 80047c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ca:	4a3c      	ldr	r2, [pc, #240]	; (80048bc <HAL_RCC_OscConfig+0x4d0>)
 80047cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047d0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	699b      	ldr	r3, [r3, #24]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	f000 80ae 	beq.w	8004938 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80047dc:	4b37      	ldr	r3, [pc, #220]	; (80048bc <HAL_RCC_OscConfig+0x4d0>)
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	f003 030c 	and.w	r3, r3, #12
 80047e4:	2b08      	cmp	r3, #8
 80047e6:	d06d      	beq.n	80048c4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	699b      	ldr	r3, [r3, #24]
 80047ec:	2b02      	cmp	r3, #2
 80047ee:	d14b      	bne.n	8004888 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047f0:	4b32      	ldr	r3, [pc, #200]	; (80048bc <HAL_RCC_OscConfig+0x4d0>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a31      	ldr	r2, [pc, #196]	; (80048bc <HAL_RCC_OscConfig+0x4d0>)
 80047f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80047fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047fc:	f7fc fe72 	bl	80014e4 <HAL_GetTick>
 8004800:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004802:	e008      	b.n	8004816 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004804:	f7fc fe6e 	bl	80014e4 <HAL_GetTick>
 8004808:	4602      	mov	r2, r0
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	1ad3      	subs	r3, r2, r3
 800480e:	2b02      	cmp	r3, #2
 8004810:	d901      	bls.n	8004816 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004812:	2303      	movs	r3, #3
 8004814:	e091      	b.n	800493a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004816:	4b29      	ldr	r3, [pc, #164]	; (80048bc <HAL_RCC_OscConfig+0x4d0>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800481e:	2b00      	cmp	r3, #0
 8004820:	d1f0      	bne.n	8004804 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	69da      	ldr	r2, [r3, #28]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6a1b      	ldr	r3, [r3, #32]
 800482a:	431a      	orrs	r2, r3
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004830:	019b      	lsls	r3, r3, #6
 8004832:	431a      	orrs	r2, r3
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004838:	085b      	lsrs	r3, r3, #1
 800483a:	3b01      	subs	r3, #1
 800483c:	041b      	lsls	r3, r3, #16
 800483e:	431a      	orrs	r2, r3
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004844:	061b      	lsls	r3, r3, #24
 8004846:	431a      	orrs	r2, r3
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800484c:	071b      	lsls	r3, r3, #28
 800484e:	491b      	ldr	r1, [pc, #108]	; (80048bc <HAL_RCC_OscConfig+0x4d0>)
 8004850:	4313      	orrs	r3, r2
 8004852:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004854:	4b19      	ldr	r3, [pc, #100]	; (80048bc <HAL_RCC_OscConfig+0x4d0>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a18      	ldr	r2, [pc, #96]	; (80048bc <HAL_RCC_OscConfig+0x4d0>)
 800485a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800485e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004860:	f7fc fe40 	bl	80014e4 <HAL_GetTick>
 8004864:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004866:	e008      	b.n	800487a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004868:	f7fc fe3c 	bl	80014e4 <HAL_GetTick>
 800486c:	4602      	mov	r2, r0
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	1ad3      	subs	r3, r2, r3
 8004872:	2b02      	cmp	r3, #2
 8004874:	d901      	bls.n	800487a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004876:	2303      	movs	r3, #3
 8004878:	e05f      	b.n	800493a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800487a:	4b10      	ldr	r3, [pc, #64]	; (80048bc <HAL_RCC_OscConfig+0x4d0>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004882:	2b00      	cmp	r3, #0
 8004884:	d0f0      	beq.n	8004868 <HAL_RCC_OscConfig+0x47c>
 8004886:	e057      	b.n	8004938 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004888:	4b0c      	ldr	r3, [pc, #48]	; (80048bc <HAL_RCC_OscConfig+0x4d0>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a0b      	ldr	r2, [pc, #44]	; (80048bc <HAL_RCC_OscConfig+0x4d0>)
 800488e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004892:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004894:	f7fc fe26 	bl	80014e4 <HAL_GetTick>
 8004898:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800489a:	e008      	b.n	80048ae <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800489c:	f7fc fe22 	bl	80014e4 <HAL_GetTick>
 80048a0:	4602      	mov	r2, r0
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	1ad3      	subs	r3, r2, r3
 80048a6:	2b02      	cmp	r3, #2
 80048a8:	d901      	bls.n	80048ae <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80048aa:	2303      	movs	r3, #3
 80048ac:	e045      	b.n	800493a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048ae:	4b03      	ldr	r3, [pc, #12]	; (80048bc <HAL_RCC_OscConfig+0x4d0>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d1f0      	bne.n	800489c <HAL_RCC_OscConfig+0x4b0>
 80048ba:	e03d      	b.n	8004938 <HAL_RCC_OscConfig+0x54c>
 80048bc:	40023800 	.word	0x40023800
 80048c0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80048c4:	4b1f      	ldr	r3, [pc, #124]	; (8004944 <HAL_RCC_OscConfig+0x558>)
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	699b      	ldr	r3, [r3, #24]
 80048ce:	2b01      	cmp	r3, #1
 80048d0:	d030      	beq.n	8004934 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048dc:	429a      	cmp	r2, r3
 80048de:	d129      	bne.n	8004934 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048ea:	429a      	cmp	r2, r3
 80048ec:	d122      	bne.n	8004934 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80048ee:	68fa      	ldr	r2, [r7, #12]
 80048f0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80048f4:	4013      	ands	r3, r2
 80048f6:	687a      	ldr	r2, [r7, #4]
 80048f8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80048fa:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d119      	bne.n	8004934 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800490a:	085b      	lsrs	r3, r3, #1
 800490c:	3b01      	subs	r3, #1
 800490e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004910:	429a      	cmp	r2, r3
 8004912:	d10f      	bne.n	8004934 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800491e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004920:	429a      	cmp	r2, r3
 8004922:	d107      	bne.n	8004934 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800492e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004930:	429a      	cmp	r2, r3
 8004932:	d001      	beq.n	8004938 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	e000      	b.n	800493a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004938:	2300      	movs	r3, #0
}
 800493a:	4618      	mov	r0, r3
 800493c:	3718      	adds	r7, #24
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}
 8004942:	bf00      	nop
 8004944:	40023800 	.word	0x40023800

08004948 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b084      	sub	sp, #16
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
 8004950:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004952:	2300      	movs	r3, #0
 8004954:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d101      	bne.n	8004960 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800495c:	2301      	movs	r3, #1
 800495e:	e0d0      	b.n	8004b02 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004960:	4b6a      	ldr	r3, [pc, #424]	; (8004b0c <HAL_RCC_ClockConfig+0x1c4>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f003 030f 	and.w	r3, r3, #15
 8004968:	683a      	ldr	r2, [r7, #0]
 800496a:	429a      	cmp	r2, r3
 800496c:	d910      	bls.n	8004990 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800496e:	4b67      	ldr	r3, [pc, #412]	; (8004b0c <HAL_RCC_ClockConfig+0x1c4>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f023 020f 	bic.w	r2, r3, #15
 8004976:	4965      	ldr	r1, [pc, #404]	; (8004b0c <HAL_RCC_ClockConfig+0x1c4>)
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	4313      	orrs	r3, r2
 800497c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800497e:	4b63      	ldr	r3, [pc, #396]	; (8004b0c <HAL_RCC_ClockConfig+0x1c4>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f003 030f 	and.w	r3, r3, #15
 8004986:	683a      	ldr	r2, [r7, #0]
 8004988:	429a      	cmp	r2, r3
 800498a:	d001      	beq.n	8004990 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	e0b8      	b.n	8004b02 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f003 0302 	and.w	r3, r3, #2
 8004998:	2b00      	cmp	r3, #0
 800499a:	d020      	beq.n	80049de <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f003 0304 	and.w	r3, r3, #4
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d005      	beq.n	80049b4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049a8:	4b59      	ldr	r3, [pc, #356]	; (8004b10 <HAL_RCC_ClockConfig+0x1c8>)
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	4a58      	ldr	r2, [pc, #352]	; (8004b10 <HAL_RCC_ClockConfig+0x1c8>)
 80049ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80049b2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 0308 	and.w	r3, r3, #8
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d005      	beq.n	80049cc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80049c0:	4b53      	ldr	r3, [pc, #332]	; (8004b10 <HAL_RCC_ClockConfig+0x1c8>)
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	4a52      	ldr	r2, [pc, #328]	; (8004b10 <HAL_RCC_ClockConfig+0x1c8>)
 80049c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80049ca:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049cc:	4b50      	ldr	r3, [pc, #320]	; (8004b10 <HAL_RCC_ClockConfig+0x1c8>)
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	494d      	ldr	r1, [pc, #308]	; (8004b10 <HAL_RCC_ClockConfig+0x1c8>)
 80049da:	4313      	orrs	r3, r2
 80049dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 0301 	and.w	r3, r3, #1
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d040      	beq.n	8004a6c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	d107      	bne.n	8004a02 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049f2:	4b47      	ldr	r3, [pc, #284]	; (8004b10 <HAL_RCC_ClockConfig+0x1c8>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d115      	bne.n	8004a2a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	e07f      	b.n	8004b02 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	2b02      	cmp	r3, #2
 8004a08:	d107      	bne.n	8004a1a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a0a:	4b41      	ldr	r3, [pc, #260]	; (8004b10 <HAL_RCC_ClockConfig+0x1c8>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d109      	bne.n	8004a2a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	e073      	b.n	8004b02 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a1a:	4b3d      	ldr	r3, [pc, #244]	; (8004b10 <HAL_RCC_ClockConfig+0x1c8>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f003 0302 	and.w	r3, r3, #2
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d101      	bne.n	8004a2a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	e06b      	b.n	8004b02 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a2a:	4b39      	ldr	r3, [pc, #228]	; (8004b10 <HAL_RCC_ClockConfig+0x1c8>)
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	f023 0203 	bic.w	r2, r3, #3
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	4936      	ldr	r1, [pc, #216]	; (8004b10 <HAL_RCC_ClockConfig+0x1c8>)
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a3c:	f7fc fd52 	bl	80014e4 <HAL_GetTick>
 8004a40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a42:	e00a      	b.n	8004a5a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a44:	f7fc fd4e 	bl	80014e4 <HAL_GetTick>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	1ad3      	subs	r3, r2, r3
 8004a4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d901      	bls.n	8004a5a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004a56:	2303      	movs	r3, #3
 8004a58:	e053      	b.n	8004b02 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a5a:	4b2d      	ldr	r3, [pc, #180]	; (8004b10 <HAL_RCC_ClockConfig+0x1c8>)
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	f003 020c 	and.w	r2, r3, #12
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	009b      	lsls	r3, r3, #2
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d1eb      	bne.n	8004a44 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a6c:	4b27      	ldr	r3, [pc, #156]	; (8004b0c <HAL_RCC_ClockConfig+0x1c4>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f003 030f 	and.w	r3, r3, #15
 8004a74:	683a      	ldr	r2, [r7, #0]
 8004a76:	429a      	cmp	r2, r3
 8004a78:	d210      	bcs.n	8004a9c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a7a:	4b24      	ldr	r3, [pc, #144]	; (8004b0c <HAL_RCC_ClockConfig+0x1c4>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f023 020f 	bic.w	r2, r3, #15
 8004a82:	4922      	ldr	r1, [pc, #136]	; (8004b0c <HAL_RCC_ClockConfig+0x1c4>)
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	4313      	orrs	r3, r2
 8004a88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a8a:	4b20      	ldr	r3, [pc, #128]	; (8004b0c <HAL_RCC_ClockConfig+0x1c4>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f003 030f 	and.w	r3, r3, #15
 8004a92:	683a      	ldr	r2, [r7, #0]
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d001      	beq.n	8004a9c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	e032      	b.n	8004b02 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 0304 	and.w	r3, r3, #4
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d008      	beq.n	8004aba <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004aa8:	4b19      	ldr	r3, [pc, #100]	; (8004b10 <HAL_RCC_ClockConfig+0x1c8>)
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	68db      	ldr	r3, [r3, #12]
 8004ab4:	4916      	ldr	r1, [pc, #88]	; (8004b10 <HAL_RCC_ClockConfig+0x1c8>)
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f003 0308 	and.w	r3, r3, #8
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d009      	beq.n	8004ada <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004ac6:	4b12      	ldr	r3, [pc, #72]	; (8004b10 <HAL_RCC_ClockConfig+0x1c8>)
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	691b      	ldr	r3, [r3, #16]
 8004ad2:	00db      	lsls	r3, r3, #3
 8004ad4:	490e      	ldr	r1, [pc, #56]	; (8004b10 <HAL_RCC_ClockConfig+0x1c8>)
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004ada:	f000 f821 	bl	8004b20 <HAL_RCC_GetSysClockFreq>
 8004ade:	4601      	mov	r1, r0
 8004ae0:	4b0b      	ldr	r3, [pc, #44]	; (8004b10 <HAL_RCC_ClockConfig+0x1c8>)
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	091b      	lsrs	r3, r3, #4
 8004ae6:	f003 030f 	and.w	r3, r3, #15
 8004aea:	4a0a      	ldr	r2, [pc, #40]	; (8004b14 <HAL_RCC_ClockConfig+0x1cc>)
 8004aec:	5cd3      	ldrb	r3, [r2, r3]
 8004aee:	fa21 f303 	lsr.w	r3, r1, r3
 8004af2:	4a09      	ldr	r2, [pc, #36]	; (8004b18 <HAL_RCC_ClockConfig+0x1d0>)
 8004af4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004af6:	4b09      	ldr	r3, [pc, #36]	; (8004b1c <HAL_RCC_ClockConfig+0x1d4>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4618      	mov	r0, r3
 8004afc:	f7fc fbb8 	bl	8001270 <HAL_InitTick>

  return HAL_OK;
 8004b00:	2300      	movs	r3, #0
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3710      	adds	r7, #16
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}
 8004b0a:	bf00      	nop
 8004b0c:	40023c00 	.word	0x40023c00
 8004b10:	40023800 	.word	0x40023800
 8004b14:	0801614c 	.word	0x0801614c
 8004b18:	20000010 	.word	0x20000010
 8004b1c:	20000014 	.word	0x20000014

08004b20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b22:	b085      	sub	sp, #20
 8004b24:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004b26:	2300      	movs	r3, #0
 8004b28:	607b      	str	r3, [r7, #4]
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	60fb      	str	r3, [r7, #12]
 8004b2e:	2300      	movs	r3, #0
 8004b30:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8004b32:	2300      	movs	r3, #0
 8004b34:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b36:	4b63      	ldr	r3, [pc, #396]	; (8004cc4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	f003 030c 	and.w	r3, r3, #12
 8004b3e:	2b04      	cmp	r3, #4
 8004b40:	d007      	beq.n	8004b52 <HAL_RCC_GetSysClockFreq+0x32>
 8004b42:	2b08      	cmp	r3, #8
 8004b44:	d008      	beq.n	8004b58 <HAL_RCC_GetSysClockFreq+0x38>
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	f040 80b4 	bne.w	8004cb4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004b4c:	4b5e      	ldr	r3, [pc, #376]	; (8004cc8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004b4e:	60bb      	str	r3, [r7, #8]
      break;
 8004b50:	e0b3      	b.n	8004cba <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004b52:	4b5e      	ldr	r3, [pc, #376]	; (8004ccc <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004b54:	60bb      	str	r3, [r7, #8]
      break;
 8004b56:	e0b0      	b.n	8004cba <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b58:	4b5a      	ldr	r3, [pc, #360]	; (8004cc4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b60:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004b62:	4b58      	ldr	r3, [pc, #352]	; (8004cc4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d04a      	beq.n	8004c04 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b6e:	4b55      	ldr	r3, [pc, #340]	; (8004cc4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	099b      	lsrs	r3, r3, #6
 8004b74:	f04f 0400 	mov.w	r4, #0
 8004b78:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004b7c:	f04f 0200 	mov.w	r2, #0
 8004b80:	ea03 0501 	and.w	r5, r3, r1
 8004b84:	ea04 0602 	and.w	r6, r4, r2
 8004b88:	4629      	mov	r1, r5
 8004b8a:	4632      	mov	r2, r6
 8004b8c:	f04f 0300 	mov.w	r3, #0
 8004b90:	f04f 0400 	mov.w	r4, #0
 8004b94:	0154      	lsls	r4, r2, #5
 8004b96:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004b9a:	014b      	lsls	r3, r1, #5
 8004b9c:	4619      	mov	r1, r3
 8004b9e:	4622      	mov	r2, r4
 8004ba0:	1b49      	subs	r1, r1, r5
 8004ba2:	eb62 0206 	sbc.w	r2, r2, r6
 8004ba6:	f04f 0300 	mov.w	r3, #0
 8004baa:	f04f 0400 	mov.w	r4, #0
 8004bae:	0194      	lsls	r4, r2, #6
 8004bb0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004bb4:	018b      	lsls	r3, r1, #6
 8004bb6:	1a5b      	subs	r3, r3, r1
 8004bb8:	eb64 0402 	sbc.w	r4, r4, r2
 8004bbc:	f04f 0100 	mov.w	r1, #0
 8004bc0:	f04f 0200 	mov.w	r2, #0
 8004bc4:	00e2      	lsls	r2, r4, #3
 8004bc6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004bca:	00d9      	lsls	r1, r3, #3
 8004bcc:	460b      	mov	r3, r1
 8004bce:	4614      	mov	r4, r2
 8004bd0:	195b      	adds	r3, r3, r5
 8004bd2:	eb44 0406 	adc.w	r4, r4, r6
 8004bd6:	f04f 0100 	mov.w	r1, #0
 8004bda:	f04f 0200 	mov.w	r2, #0
 8004bde:	0262      	lsls	r2, r4, #9
 8004be0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004be4:	0259      	lsls	r1, r3, #9
 8004be6:	460b      	mov	r3, r1
 8004be8:	4614      	mov	r4, r2
 8004bea:	4618      	mov	r0, r3
 8004bec:	4621      	mov	r1, r4
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	f04f 0400 	mov.w	r4, #0
 8004bf4:	461a      	mov	r2, r3
 8004bf6:	4623      	mov	r3, r4
 8004bf8:	f7fb fb22 	bl	8000240 <__aeabi_uldivmod>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	460c      	mov	r4, r1
 8004c00:	60fb      	str	r3, [r7, #12]
 8004c02:	e049      	b.n	8004c98 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c04:	4b2f      	ldr	r3, [pc, #188]	; (8004cc4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	099b      	lsrs	r3, r3, #6
 8004c0a:	f04f 0400 	mov.w	r4, #0
 8004c0e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004c12:	f04f 0200 	mov.w	r2, #0
 8004c16:	ea03 0501 	and.w	r5, r3, r1
 8004c1a:	ea04 0602 	and.w	r6, r4, r2
 8004c1e:	4629      	mov	r1, r5
 8004c20:	4632      	mov	r2, r6
 8004c22:	f04f 0300 	mov.w	r3, #0
 8004c26:	f04f 0400 	mov.w	r4, #0
 8004c2a:	0154      	lsls	r4, r2, #5
 8004c2c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004c30:	014b      	lsls	r3, r1, #5
 8004c32:	4619      	mov	r1, r3
 8004c34:	4622      	mov	r2, r4
 8004c36:	1b49      	subs	r1, r1, r5
 8004c38:	eb62 0206 	sbc.w	r2, r2, r6
 8004c3c:	f04f 0300 	mov.w	r3, #0
 8004c40:	f04f 0400 	mov.w	r4, #0
 8004c44:	0194      	lsls	r4, r2, #6
 8004c46:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004c4a:	018b      	lsls	r3, r1, #6
 8004c4c:	1a5b      	subs	r3, r3, r1
 8004c4e:	eb64 0402 	sbc.w	r4, r4, r2
 8004c52:	f04f 0100 	mov.w	r1, #0
 8004c56:	f04f 0200 	mov.w	r2, #0
 8004c5a:	00e2      	lsls	r2, r4, #3
 8004c5c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004c60:	00d9      	lsls	r1, r3, #3
 8004c62:	460b      	mov	r3, r1
 8004c64:	4614      	mov	r4, r2
 8004c66:	195b      	adds	r3, r3, r5
 8004c68:	eb44 0406 	adc.w	r4, r4, r6
 8004c6c:	f04f 0100 	mov.w	r1, #0
 8004c70:	f04f 0200 	mov.w	r2, #0
 8004c74:	02a2      	lsls	r2, r4, #10
 8004c76:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004c7a:	0299      	lsls	r1, r3, #10
 8004c7c:	460b      	mov	r3, r1
 8004c7e:	4614      	mov	r4, r2
 8004c80:	4618      	mov	r0, r3
 8004c82:	4621      	mov	r1, r4
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	f04f 0400 	mov.w	r4, #0
 8004c8a:	461a      	mov	r2, r3
 8004c8c:	4623      	mov	r3, r4
 8004c8e:	f7fb fad7 	bl	8000240 <__aeabi_uldivmod>
 8004c92:	4603      	mov	r3, r0
 8004c94:	460c      	mov	r4, r1
 8004c96:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004c98:	4b0a      	ldr	r3, [pc, #40]	; (8004cc4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	0c1b      	lsrs	r3, r3, #16
 8004c9e:	f003 0303 	and.w	r3, r3, #3
 8004ca2:	3301      	adds	r3, #1
 8004ca4:	005b      	lsls	r3, r3, #1
 8004ca6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8004ca8:	68fa      	ldr	r2, [r7, #12]
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cb0:	60bb      	str	r3, [r7, #8]
      break;
 8004cb2:	e002      	b.n	8004cba <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004cb4:	4b04      	ldr	r3, [pc, #16]	; (8004cc8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004cb6:	60bb      	str	r3, [r7, #8]
      break;
 8004cb8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004cba:	68bb      	ldr	r3, [r7, #8]
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	3714      	adds	r7, #20
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004cc4:	40023800 	.word	0x40023800
 8004cc8:	00f42400 	.word	0x00f42400
 8004ccc:	007a1200 	.word	0x007a1200

08004cd0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004cd4:	4b03      	ldr	r3, [pc, #12]	; (8004ce4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce0:	4770      	bx	lr
 8004ce2:	bf00      	nop
 8004ce4:	20000010 	.word	0x20000010

08004ce8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004cec:	f7ff fff0 	bl	8004cd0 <HAL_RCC_GetHCLKFreq>
 8004cf0:	4601      	mov	r1, r0
 8004cf2:	4b05      	ldr	r3, [pc, #20]	; (8004d08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	0a9b      	lsrs	r3, r3, #10
 8004cf8:	f003 0307 	and.w	r3, r3, #7
 8004cfc:	4a03      	ldr	r2, [pc, #12]	; (8004d0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004cfe:	5cd3      	ldrb	r3, [r2, r3]
 8004d00:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	bd80      	pop	{r7, pc}
 8004d08:	40023800 	.word	0x40023800
 8004d0c:	0801615c 	.word	0x0801615c

08004d10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004d14:	f7ff ffdc 	bl	8004cd0 <HAL_RCC_GetHCLKFreq>
 8004d18:	4601      	mov	r1, r0
 8004d1a:	4b05      	ldr	r3, [pc, #20]	; (8004d30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	0b5b      	lsrs	r3, r3, #13
 8004d20:	f003 0307 	and.w	r3, r3, #7
 8004d24:	4a03      	ldr	r2, [pc, #12]	; (8004d34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d26:	5cd3      	ldrb	r3, [r2, r3]
 8004d28:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	bd80      	pop	{r7, pc}
 8004d30:	40023800 	.word	0x40023800
 8004d34:	0801615c 	.word	0x0801615c

08004d38 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b083      	sub	sp, #12
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
 8004d40:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	220f      	movs	r2, #15
 8004d46:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004d48:	4b12      	ldr	r3, [pc, #72]	; (8004d94 <HAL_RCC_GetClockConfig+0x5c>)
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	f003 0203 	and.w	r2, r3, #3
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004d54:	4b0f      	ldr	r3, [pc, #60]	; (8004d94 <HAL_RCC_GetClockConfig+0x5c>)
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004d60:	4b0c      	ldr	r3, [pc, #48]	; (8004d94 <HAL_RCC_GetClockConfig+0x5c>)
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004d6c:	4b09      	ldr	r3, [pc, #36]	; (8004d94 <HAL_RCC_GetClockConfig+0x5c>)
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	08db      	lsrs	r3, r3, #3
 8004d72:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004d7a:	4b07      	ldr	r3, [pc, #28]	; (8004d98 <HAL_RCC_GetClockConfig+0x60>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f003 020f 	and.w	r2, r3, #15
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	601a      	str	r2, [r3, #0]
}
 8004d86:	bf00      	nop
 8004d88:	370c      	adds	r7, #12
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d90:	4770      	bx	lr
 8004d92:	bf00      	nop
 8004d94:	40023800 	.word	0x40023800
 8004d98:	40023c00 	.word	0x40023c00

08004d9c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b088      	sub	sp, #32
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004da4:	2300      	movs	r3, #0
 8004da6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004da8:	2300      	movs	r3, #0
 8004daa:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004dac:	2300      	movs	r3, #0
 8004dae:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004db0:	2300      	movs	r3, #0
 8004db2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004db4:	2300      	movs	r3, #0
 8004db6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f003 0301 	and.w	r3, r3, #1
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d012      	beq.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004dc4:	4b69      	ldr	r3, [pc, #420]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	4a68      	ldr	r2, [pc, #416]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dca:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004dce:	6093      	str	r3, [r2, #8]
 8004dd0:	4b66      	ldr	r3, [pc, #408]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dd2:	689a      	ldr	r2, [r3, #8]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dd8:	4964      	ldr	r1, [pc, #400]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d101      	bne.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004de6:	2301      	movs	r3, #1
 8004de8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d017      	beq.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004df6:	4b5d      	ldr	r3, [pc, #372]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004df8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004dfc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e04:	4959      	ldr	r1, [pc, #356]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e06:	4313      	orrs	r3, r2
 8004e08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e10:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e14:	d101      	bne.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004e16:	2301      	movs	r3, #1
 8004e18:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d101      	bne.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004e22:	2301      	movs	r3, #1
 8004e24:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d017      	beq.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004e32:	4b4e      	ldr	r3, [pc, #312]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e38:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e40:	494a      	ldr	r1, [pc, #296]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e42:	4313      	orrs	r3, r2
 8004e44:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e4c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e50:	d101      	bne.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004e52:	2301      	movs	r3, #1
 8004e54:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d101      	bne.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d001      	beq.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f003 0320 	and.w	r3, r3, #32
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	f000 808b 	beq.w	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004e80:	4b3a      	ldr	r3, [pc, #232]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e84:	4a39      	ldr	r2, [pc, #228]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e8a:	6413      	str	r3, [r2, #64]	; 0x40
 8004e8c:	4b37      	ldr	r3, [pc, #220]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e94:	60bb      	str	r3, [r7, #8]
 8004e96:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004e98:	4b35      	ldr	r3, [pc, #212]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a34      	ldr	r2, [pc, #208]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004e9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ea2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ea4:	f7fc fb1e 	bl	80014e4 <HAL_GetTick>
 8004ea8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004eaa:	e008      	b.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004eac:	f7fc fb1a 	bl	80014e4 <HAL_GetTick>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	1ad3      	subs	r3, r2, r3
 8004eb6:	2b64      	cmp	r3, #100	; 0x64
 8004eb8:	d901      	bls.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004eba:	2303      	movs	r3, #3
 8004ebc:	e38d      	b.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004ebe:	4b2c      	ldr	r3, [pc, #176]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d0f0      	beq.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004eca:	4b28      	ldr	r3, [pc, #160]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ece:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ed2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d035      	beq.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ede:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ee2:	693a      	ldr	r2, [r7, #16]
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d02e      	beq.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ee8:	4b20      	ldr	r3, [pc, #128]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004eea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ef0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004ef2:	4b1e      	ldr	r3, [pc, #120]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ef4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ef6:	4a1d      	ldr	r2, [pc, #116]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ef8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004efc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004efe:	4b1b      	ldr	r3, [pc, #108]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f02:	4a1a      	ldr	r2, [pc, #104]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f08:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004f0a:	4a18      	ldr	r2, [pc, #96]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004f10:	4b16      	ldr	r3, [pc, #88]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f14:	f003 0301 	and.w	r3, r3, #1
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	d114      	bne.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f1c:	f7fc fae2 	bl	80014e4 <HAL_GetTick>
 8004f20:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f22:	e00a      	b.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f24:	f7fc fade 	bl	80014e4 <HAL_GetTick>
 8004f28:	4602      	mov	r2, r0
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	1ad3      	subs	r3, r2, r3
 8004f2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d901      	bls.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004f36:	2303      	movs	r3, #3
 8004f38:	e34f      	b.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f3a:	4b0c      	ldr	r3, [pc, #48]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f3e:	f003 0302 	and.w	r3, r3, #2
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d0ee      	beq.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f4e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f52:	d111      	bne.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004f54:	4b05      	ldr	r3, [pc, #20]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004f60:	4b04      	ldr	r3, [pc, #16]	; (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004f62:	400b      	ands	r3, r1
 8004f64:	4901      	ldr	r1, [pc, #4]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f66:	4313      	orrs	r3, r2
 8004f68:	608b      	str	r3, [r1, #8]
 8004f6a:	e00b      	b.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004f6c:	40023800 	.word	0x40023800
 8004f70:	40007000 	.word	0x40007000
 8004f74:	0ffffcff 	.word	0x0ffffcff
 8004f78:	4bb3      	ldr	r3, [pc, #716]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	4ab2      	ldr	r2, [pc, #712]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f7e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004f82:	6093      	str	r3, [r2, #8]
 8004f84:	4bb0      	ldr	r3, [pc, #704]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f86:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f90:	49ad      	ldr	r1, [pc, #692]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f92:	4313      	orrs	r3, r2
 8004f94:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f003 0310 	and.w	r3, r3, #16
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d010      	beq.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004fa2:	4ba9      	ldr	r3, [pc, #676]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004fa4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004fa8:	4aa7      	ldr	r2, [pc, #668]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004faa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004fae:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004fb2:	4ba5      	ldr	r3, [pc, #660]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004fb4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fbc:	49a2      	ldr	r1, [pc, #648]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d00a      	beq.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004fd0:	4b9d      	ldr	r3, [pc, #628]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004fd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fd6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004fde:	499a      	ldr	r1, [pc, #616]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d00a      	beq.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004ff2:	4b95      	ldr	r3, [pc, #596]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ff4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ff8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005000:	4991      	ldr	r1, [pc, #580]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005002:	4313      	orrs	r3, r2
 8005004:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005010:	2b00      	cmp	r3, #0
 8005012:	d00a      	beq.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005014:	4b8c      	ldr	r3, [pc, #560]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005016:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800501a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005022:	4989      	ldr	r1, [pc, #548]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005024:	4313      	orrs	r3, r2
 8005026:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005032:	2b00      	cmp	r3, #0
 8005034:	d00a      	beq.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005036:	4b84      	ldr	r3, [pc, #528]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005038:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800503c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005044:	4980      	ldr	r1, [pc, #512]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005046:	4313      	orrs	r3, r2
 8005048:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005054:	2b00      	cmp	r3, #0
 8005056:	d00a      	beq.n	800506e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005058:	4b7b      	ldr	r3, [pc, #492]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800505a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800505e:	f023 0203 	bic.w	r2, r3, #3
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005066:	4978      	ldr	r1, [pc, #480]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005068:	4313      	orrs	r3, r2
 800506a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005076:	2b00      	cmp	r3, #0
 8005078:	d00a      	beq.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800507a:	4b73      	ldr	r3, [pc, #460]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800507c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005080:	f023 020c 	bic.w	r2, r3, #12
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005088:	496f      	ldr	r1, [pc, #444]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800508a:	4313      	orrs	r3, r2
 800508c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005098:	2b00      	cmp	r3, #0
 800509a:	d00a      	beq.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800509c:	4b6a      	ldr	r3, [pc, #424]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800509e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050a2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050aa:	4967      	ldr	r1, [pc, #412]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80050ac:	4313      	orrs	r3, r2
 80050ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d00a      	beq.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80050be:	4b62      	ldr	r3, [pc, #392]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80050c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050c4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050cc:	495e      	ldr	r1, [pc, #376]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80050ce:	4313      	orrs	r3, r2
 80050d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d00a      	beq.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80050e0:	4b59      	ldr	r3, [pc, #356]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80050e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050e6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050ee:	4956      	ldr	r1, [pc, #344]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80050f0:	4313      	orrs	r3, r2
 80050f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d00a      	beq.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005102:	4b51      	ldr	r3, [pc, #324]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005104:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005108:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005110:	494d      	ldr	r1, [pc, #308]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005112:	4313      	orrs	r3, r2
 8005114:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005120:	2b00      	cmp	r3, #0
 8005122:	d00a      	beq.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005124:	4b48      	ldr	r3, [pc, #288]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005126:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800512a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005132:	4945      	ldr	r1, [pc, #276]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005134:	4313      	orrs	r3, r2
 8005136:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005142:	2b00      	cmp	r3, #0
 8005144:	d00a      	beq.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005146:	4b40      	ldr	r3, [pc, #256]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005148:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800514c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005154:	493c      	ldr	r1, [pc, #240]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005156:	4313      	orrs	r3, r2
 8005158:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005164:	2b00      	cmp	r3, #0
 8005166:	d00a      	beq.n	800517e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005168:	4b37      	ldr	r3, [pc, #220]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800516a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800516e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005176:	4934      	ldr	r1, [pc, #208]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005178:	4313      	orrs	r3, r2
 800517a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005186:	2b00      	cmp	r3, #0
 8005188:	d011      	beq.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800518a:	4b2f      	ldr	r3, [pc, #188]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800518c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005190:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005198:	492b      	ldr	r1, [pc, #172]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800519a:	4313      	orrs	r3, r2
 800519c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80051a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80051a8:	d101      	bne.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80051aa:	2301      	movs	r3, #1
 80051ac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f003 0308 	and.w	r3, r3, #8
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d001      	beq.n	80051be <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80051ba:	2301      	movs	r3, #1
 80051bc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d00a      	beq.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80051ca:	4b1f      	ldr	r3, [pc, #124]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80051cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051d0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051d8:	491b      	ldr	r1, [pc, #108]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80051da:	4313      	orrs	r3, r2
 80051dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d00b      	beq.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80051ec:	4b16      	ldr	r3, [pc, #88]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80051ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051f2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80051fc:	4912      	ldr	r1, [pc, #72]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80051fe:	4313      	orrs	r3, r2
 8005200:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800520c:	2b00      	cmp	r3, #0
 800520e:	d00b      	beq.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005210:	4b0d      	ldr	r3, [pc, #52]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005212:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005216:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005220:	4909      	ldr	r1, [pc, #36]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005222:	4313      	orrs	r3, r2
 8005224:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005230:	2b00      	cmp	r3, #0
 8005232:	d00f      	beq.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005234:	4b04      	ldr	r3, [pc, #16]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005236:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800523a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005244:	e002      	b.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8005246:	bf00      	nop
 8005248:	40023800 	.word	0x40023800
 800524c:	4985      	ldr	r1, [pc, #532]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800524e:	4313      	orrs	r3, r2
 8005250:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800525c:	2b00      	cmp	r3, #0
 800525e:	d00b      	beq.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005260:	4b80      	ldr	r3, [pc, #512]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005262:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005266:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005270:	497c      	ldr	r1, [pc, #496]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005272:	4313      	orrs	r3, r2
 8005274:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8005278:	69fb      	ldr	r3, [r7, #28]
 800527a:	2b01      	cmp	r3, #1
 800527c:	d005      	beq.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005286:	f040 80d6 	bne.w	8005436 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800528a:	4b76      	ldr	r3, [pc, #472]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a75      	ldr	r2, [pc, #468]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005290:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005294:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005296:	f7fc f925 	bl	80014e4 <HAL_GetTick>
 800529a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800529c:	e008      	b.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800529e:	f7fc f921 	bl	80014e4 <HAL_GetTick>
 80052a2:	4602      	mov	r2, r0
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	1ad3      	subs	r3, r2, r3
 80052a8:	2b64      	cmp	r3, #100	; 0x64
 80052aa:	d901      	bls.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80052ac:	2303      	movs	r3, #3
 80052ae:	e194      	b.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80052b0:	4b6c      	ldr	r3, [pc, #432]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d1f0      	bne.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f003 0301 	and.w	r3, r3, #1
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d021      	beq.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x570>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d11d      	bne.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80052d0:	4b64      	ldr	r3, [pc, #400]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80052d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052d6:	0c1b      	lsrs	r3, r3, #16
 80052d8:	f003 0303 	and.w	r3, r3, #3
 80052dc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80052de:	4b61      	ldr	r3, [pc, #388]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80052e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052e4:	0e1b      	lsrs	r3, r3, #24
 80052e6:	f003 030f 	and.w	r3, r3, #15
 80052ea:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	019a      	lsls	r2, r3, #6
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	041b      	lsls	r3, r3, #16
 80052f6:	431a      	orrs	r2, r3
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	061b      	lsls	r3, r3, #24
 80052fc:	431a      	orrs	r2, r3
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	689b      	ldr	r3, [r3, #8]
 8005302:	071b      	lsls	r3, r3, #28
 8005304:	4957      	ldr	r1, [pc, #348]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005306:	4313      	orrs	r3, r2
 8005308:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005314:	2b00      	cmp	r3, #0
 8005316:	d004      	beq.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800531c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005320:	d00a      	beq.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800532a:	2b00      	cmp	r3, #0
 800532c:	d02e      	beq.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005332:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005336:	d129      	bne.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005338:	4b4a      	ldr	r3, [pc, #296]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800533a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800533e:	0c1b      	lsrs	r3, r3, #16
 8005340:	f003 0303 	and.w	r3, r3, #3
 8005344:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005346:	4b47      	ldr	r3, [pc, #284]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005348:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800534c:	0f1b      	lsrs	r3, r3, #28
 800534e:	f003 0307 	and.w	r3, r3, #7
 8005352:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	019a      	lsls	r2, r3, #6
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	041b      	lsls	r3, r3, #16
 800535e:	431a      	orrs	r2, r3
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	68db      	ldr	r3, [r3, #12]
 8005364:	061b      	lsls	r3, r3, #24
 8005366:	431a      	orrs	r2, r3
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	071b      	lsls	r3, r3, #28
 800536c:	493d      	ldr	r1, [pc, #244]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800536e:	4313      	orrs	r3, r2
 8005370:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005374:	4b3b      	ldr	r3, [pc, #236]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005376:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800537a:	f023 021f 	bic.w	r2, r3, #31
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005382:	3b01      	subs	r3, #1
 8005384:	4937      	ldr	r1, [pc, #220]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005386:	4313      	orrs	r3, r2
 8005388:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005394:	2b00      	cmp	r3, #0
 8005396:	d01d      	beq.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005398:	4b32      	ldr	r3, [pc, #200]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800539a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800539e:	0e1b      	lsrs	r3, r3, #24
 80053a0:	f003 030f 	and.w	r3, r3, #15
 80053a4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80053a6:	4b2f      	ldr	r3, [pc, #188]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80053a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053ac:	0f1b      	lsrs	r3, r3, #28
 80053ae:	f003 0307 	and.w	r3, r3, #7
 80053b2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	019a      	lsls	r2, r3, #6
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	691b      	ldr	r3, [r3, #16]
 80053be:	041b      	lsls	r3, r3, #16
 80053c0:	431a      	orrs	r2, r3
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	061b      	lsls	r3, r3, #24
 80053c6:	431a      	orrs	r2, r3
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	071b      	lsls	r3, r3, #28
 80053cc:	4925      	ldr	r1, [pc, #148]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80053ce:	4313      	orrs	r3, r2
 80053d0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d011      	beq.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	019a      	lsls	r2, r3, #6
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	691b      	ldr	r3, [r3, #16]
 80053ea:	041b      	lsls	r3, r3, #16
 80053ec:	431a      	orrs	r2, r3
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	68db      	ldr	r3, [r3, #12]
 80053f2:	061b      	lsls	r3, r3, #24
 80053f4:	431a      	orrs	r2, r3
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	689b      	ldr	r3, [r3, #8]
 80053fa:	071b      	lsls	r3, r3, #28
 80053fc:	4919      	ldr	r1, [pc, #100]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80053fe:	4313      	orrs	r3, r2
 8005400:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005404:	4b17      	ldr	r3, [pc, #92]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a16      	ldr	r2, [pc, #88]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800540a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800540e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005410:	f7fc f868 	bl	80014e4 <HAL_GetTick>
 8005414:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005416:	e008      	b.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005418:	f7fc f864 	bl	80014e4 <HAL_GetTick>
 800541c:	4602      	mov	r2, r0
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	1ad3      	subs	r3, r2, r3
 8005422:	2b64      	cmp	r3, #100	; 0x64
 8005424:	d901      	bls.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005426:	2303      	movs	r3, #3
 8005428:	e0d7      	b.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800542a:	4b0e      	ldr	r3, [pc, #56]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005432:	2b00      	cmp	r3, #0
 8005434:	d0f0      	beq.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005436:	69bb      	ldr	r3, [r7, #24]
 8005438:	2b01      	cmp	r3, #1
 800543a:	f040 80cd 	bne.w	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800543e:	4b09      	ldr	r3, [pc, #36]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a08      	ldr	r2, [pc, #32]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005444:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005448:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800544a:	f7fc f84b 	bl	80014e4 <HAL_GetTick>
 800544e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005450:	e00a      	b.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005452:	f7fc f847 	bl	80014e4 <HAL_GetTick>
 8005456:	4602      	mov	r2, r0
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	1ad3      	subs	r3, r2, r3
 800545c:	2b64      	cmp	r3, #100	; 0x64
 800545e:	d903      	bls.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005460:	2303      	movs	r3, #3
 8005462:	e0ba      	b.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8005464:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005468:	4b5e      	ldr	r3, [pc, #376]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005470:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005474:	d0ed      	beq.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800547e:	2b00      	cmp	r3, #0
 8005480:	d003      	beq.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005486:	2b00      	cmp	r3, #0
 8005488:	d009      	beq.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005492:	2b00      	cmp	r3, #0
 8005494:	d02e      	beq.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800549a:	2b00      	cmp	r3, #0
 800549c:	d12a      	bne.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800549e:	4b51      	ldr	r3, [pc, #324]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80054a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054a4:	0c1b      	lsrs	r3, r3, #16
 80054a6:	f003 0303 	and.w	r3, r3, #3
 80054aa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80054ac:	4b4d      	ldr	r3, [pc, #308]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80054ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054b2:	0f1b      	lsrs	r3, r3, #28
 80054b4:	f003 0307 	and.w	r3, r3, #7
 80054b8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	695b      	ldr	r3, [r3, #20]
 80054be:	019a      	lsls	r2, r3, #6
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	041b      	lsls	r3, r3, #16
 80054c4:	431a      	orrs	r2, r3
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	699b      	ldr	r3, [r3, #24]
 80054ca:	061b      	lsls	r3, r3, #24
 80054cc:	431a      	orrs	r2, r3
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	071b      	lsls	r3, r3, #28
 80054d2:	4944      	ldr	r1, [pc, #272]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80054d4:	4313      	orrs	r3, r2
 80054d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80054da:	4b42      	ldr	r3, [pc, #264]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80054dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054e0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054e8:	3b01      	subs	r3, #1
 80054ea:	021b      	lsls	r3, r3, #8
 80054ec:	493d      	ldr	r1, [pc, #244]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80054ee:	4313      	orrs	r3, r2
 80054f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d022      	beq.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005504:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005508:	d11d      	bne.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800550a:	4b36      	ldr	r3, [pc, #216]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800550c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005510:	0e1b      	lsrs	r3, r3, #24
 8005512:	f003 030f 	and.w	r3, r3, #15
 8005516:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005518:	4b32      	ldr	r3, [pc, #200]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800551a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800551e:	0f1b      	lsrs	r3, r3, #28
 8005520:	f003 0307 	and.w	r3, r3, #7
 8005524:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	695b      	ldr	r3, [r3, #20]
 800552a:	019a      	lsls	r2, r3, #6
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6a1b      	ldr	r3, [r3, #32]
 8005530:	041b      	lsls	r3, r3, #16
 8005532:	431a      	orrs	r2, r3
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	061b      	lsls	r3, r3, #24
 8005538:	431a      	orrs	r2, r3
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	071b      	lsls	r3, r3, #28
 800553e:	4929      	ldr	r1, [pc, #164]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005540:	4313      	orrs	r3, r2
 8005542:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f003 0308 	and.w	r3, r3, #8
 800554e:	2b00      	cmp	r3, #0
 8005550:	d028      	beq.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005552:	4b24      	ldr	r3, [pc, #144]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005554:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005558:	0e1b      	lsrs	r3, r3, #24
 800555a:	f003 030f 	and.w	r3, r3, #15
 800555e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005560:	4b20      	ldr	r3, [pc, #128]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005562:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005566:	0c1b      	lsrs	r3, r3, #16
 8005568:	f003 0303 	and.w	r3, r3, #3
 800556c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	695b      	ldr	r3, [r3, #20]
 8005572:	019a      	lsls	r2, r3, #6
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	041b      	lsls	r3, r3, #16
 8005578:	431a      	orrs	r2, r3
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	061b      	lsls	r3, r3, #24
 800557e:	431a      	orrs	r2, r3
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	69db      	ldr	r3, [r3, #28]
 8005584:	071b      	lsls	r3, r3, #28
 8005586:	4917      	ldr	r1, [pc, #92]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005588:	4313      	orrs	r3, r2
 800558a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800558e:	4b15      	ldr	r3, [pc, #84]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005590:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005594:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800559c:	4911      	ldr	r1, [pc, #68]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800559e:	4313      	orrs	r3, r2
 80055a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80055a4:	4b0f      	ldr	r3, [pc, #60]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a0e      	ldr	r2, [pc, #56]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80055aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055b0:	f7fb ff98 	bl	80014e4 <HAL_GetTick>
 80055b4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80055b6:	e008      	b.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80055b8:	f7fb ff94 	bl	80014e4 <HAL_GetTick>
 80055bc:	4602      	mov	r2, r0
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	1ad3      	subs	r3, r2, r3
 80055c2:	2b64      	cmp	r3, #100	; 0x64
 80055c4:	d901      	bls.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80055c6:	2303      	movs	r3, #3
 80055c8:	e007      	b.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80055ca:	4b06      	ldr	r3, [pc, #24]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80055d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055d6:	d1ef      	bne.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 80055d8:	2300      	movs	r3, #0
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3720      	adds	r7, #32
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}
 80055e2:	bf00      	nop
 80055e4:	40023800 	.word	0x40023800

080055e8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b082      	sub	sp, #8
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d101      	bne.n	80055fa <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80055f6:	2301      	movs	r3, #1
 80055f8:	e022      	b.n	8005640 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005600:	b2db      	uxtb	r3, r3
 8005602:	2b00      	cmp	r3, #0
 8005604:	d105      	bne.n	8005612 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2200      	movs	r2, #0
 800560a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800560c:	6878      	ldr	r0, [r7, #4]
 800560e:	f7fb fd01 	bl	8001014 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2203      	movs	r2, #3
 8005616:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f000 f814 	bl	8005648 <HAL_SD_InitCard>
 8005620:	4603      	mov	r3, r0
 8005622:	2b00      	cmp	r3, #0
 8005624:	d001      	beq.n	800562a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8005626:	2301      	movs	r3, #1
 8005628:	e00a      	b.n	8005640 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2200      	movs	r2, #0
 800562e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2200      	movs	r2, #0
 8005634:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2201      	movs	r2, #1
 800563a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800563e:	2300      	movs	r3, #0
}
 8005640:	4618      	mov	r0, r3
 8005642:	3708      	adds	r7, #8
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}

08005648 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005648:	b5b0      	push	{r4, r5, r7, lr}
 800564a:	b08e      	sub	sp, #56	; 0x38
 800564c:	af04      	add	r7, sp, #16
 800564e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8005650:	2300      	movs	r3, #0
 8005652:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8005654:	2300      	movs	r3, #0
 8005656:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8005658:	2300      	movs	r3, #0
 800565a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800565c:	2300      	movs	r3, #0
 800565e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8005660:	2300      	movs	r3, #0
 8005662:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8005664:	2376      	movs	r3, #118	; 0x76
 8005666:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681d      	ldr	r5, [r3, #0]
 800566c:	466c      	mov	r4, sp
 800566e:	f107 0314 	add.w	r3, r7, #20
 8005672:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005676:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800567a:	f107 0308 	add.w	r3, r7, #8
 800567e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005680:	4628      	mov	r0, r5
 8005682:	f002 fcff 	bl	8008084 <SDMMC_Init>
 8005686:	4603      	mov	r3, r0
 8005688:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800568c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005690:	2b00      	cmp	r3, #0
 8005692:	d001      	beq.n	8005698 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8005694:	2301      	movs	r3, #1
 8005696:	e03b      	b.n	8005710 <HAL_SD_InitCard+0xc8>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	685a      	ldr	r2, [r3, #4]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80056a6:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4618      	mov	r0, r3
 80056ae:	f002 fd33 	bl	8008118 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	685a      	ldr	r2, [r3, #4]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80056c0:	605a      	str	r2, [r3, #4]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f001 fb62 	bl	8006d8c <SD_PowerON>
 80056c8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80056ca:	6a3b      	ldr	r3, [r7, #32]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d00b      	beq.n	80056e8 <HAL_SD_InitCard+0xa0>
  {
    hsd->State = HAL_SD_STATE_READY;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2201      	movs	r2, #1
 80056d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056dc:	6a3b      	ldr	r3, [r7, #32]
 80056de:	431a      	orrs	r2, r3
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80056e4:	2301      	movs	r3, #1
 80056e6:	e013      	b.n	8005710 <HAL_SD_InitCard+0xc8>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f001 fa81 	bl	8006bf0 <SD_InitCard>
 80056ee:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80056f0:	6a3b      	ldr	r3, [r7, #32]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d00b      	beq.n	800570e <HAL_SD_InitCard+0xc6>
  {
    hsd->State = HAL_SD_STATE_READY;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2201      	movs	r2, #1
 80056fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005702:	6a3b      	ldr	r3, [r7, #32]
 8005704:	431a      	orrs	r2, r3
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	e000      	b.n	8005710 <HAL_SD_InitCard+0xc8>
  }

  return HAL_OK;
 800570e:	2300      	movs	r3, #0
}
 8005710:	4618      	mov	r0, r3
 8005712:	3728      	adds	r7, #40	; 0x28
 8005714:	46bd      	mov	sp, r7
 8005716:	bdb0      	pop	{r4, r5, r7, pc}

08005718 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b092      	sub	sp, #72	; 0x48
 800571c:	af00      	add	r7, sp, #0
 800571e:	60f8      	str	r0, [r7, #12]
 8005720:	60b9      	str	r1, [r7, #8]
 8005722:	607a      	str	r2, [r7, #4]
 8005724:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005726:	f7fb fedd 	bl	80014e4 <HAL_GetTick>
 800572a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d107      	bne.n	800574a <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800573e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005746:	2301      	movs	r3, #1
 8005748:	e1d7      	b.n	8005afa <HAL_SD_ReadBlocks+0x3e2>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005750:	b2db      	uxtb	r3, r3
 8005752:	2b01      	cmp	r3, #1
 8005754:	f040 81ca 	bne.w	8005aec <HAL_SD_ReadBlocks+0x3d4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2200      	movs	r2, #0
 800575c:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800575e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	441a      	add	r2, r3
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005768:	429a      	cmp	r2, r3
 800576a:	d907      	bls.n	800577c <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005770:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005778:	2301      	movs	r3, #1
 800577a:	e1be      	b.n	8005afa <HAL_SD_ReadBlocks+0x3e2>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	2203      	movs	r2, #3
 8005780:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	2200      	movs	r2, #0
 800578a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005790:	2b01      	cmp	r3, #1
 8005792:	d002      	beq.n	800579a <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8005794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005796:	025b      	lsls	r3, r3, #9
 8005798:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80057a2:	4618      	mov	r0, r3
 80057a4:	f002 fd4c 	bl	8008240 <SDMMC_CmdBlockLength>
 80057a8:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 80057aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d00f      	beq.n	80057d0 <HAL_SD_ReadBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a9a      	ldr	r2, [pc, #616]	; (8005a20 <HAL_SD_ReadBlocks+0x308>)
 80057b6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057be:	431a      	orrs	r2, r3
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2201      	movs	r2, #1
 80057c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80057cc:	2301      	movs	r3, #1
 80057ce:	e194      	b.n	8005afa <HAL_SD_ReadBlocks+0x3e2>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80057d0:	f04f 33ff 	mov.w	r3, #4294967295
 80057d4:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	025b      	lsls	r3, r3, #9
 80057da:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80057dc:	2390      	movs	r3, #144	; 0x90
 80057de:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80057e0:	2302      	movs	r3, #2
 80057e2:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80057e4:	2300      	movs	r3, #0
 80057e6:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_ENABLE;
 80057e8:	2301      	movs	r3, #1
 80057ea:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f107 0214 	add.w	r2, r7, #20
 80057f4:	4611      	mov	r1, r2
 80057f6:	4618      	mov	r0, r3
 80057f8:	f002 fcf6 	bl	80081e8 <SDMMC_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	2b01      	cmp	r3, #1
 8005800:	d90a      	bls.n	8005818 <HAL_SD_ReadBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2202      	movs	r2, #2
 8005806:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800580e:	4618      	mov	r0, r3
 8005810:	f002 fd5a 	bl	80082c8 <SDMMC_CmdReadMultiBlock>
 8005814:	6478      	str	r0, [r7, #68]	; 0x44
 8005816:	e009      	b.n	800582c <HAL_SD_ReadBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	2201      	movs	r2, #1
 800581c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005824:	4618      	mov	r0, r3
 8005826:	f002 fd2d 	bl	8008284 <SDMMC_CmdReadSingleBlock>
 800582a:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800582c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800582e:	2b00      	cmp	r3, #0
 8005830:	d012      	beq.n	8005858 <HAL_SD_ReadBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a7a      	ldr	r2, [pc, #488]	; (8005a20 <HAL_SD_ReadBlocks+0x308>)
 8005838:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800583e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005840:	431a      	orrs	r2, r3
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2201      	movs	r2, #1
 800584a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2200      	movs	r2, #0
 8005852:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005854:	2301      	movs	r3, #1
 8005856:	e150      	b.n	8005afa <HAL_SD_ReadBlocks+0x3e2>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8005858:	69bb      	ldr	r3, [r7, #24]
 800585a:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800585c:	e061      	b.n	8005922 <HAL_SD_ReadBlocks+0x20a>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005864:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005868:	2b00      	cmp	r3, #0
 800586a:	d03c      	beq.n	80058e6 <HAL_SD_ReadBlocks+0x1ce>
 800586c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800586e:	2b00      	cmp	r3, #0
 8005870:	d039      	beq.n	80058e6 <HAL_SD_ReadBlocks+0x1ce>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8005872:	2300      	movs	r3, #0
 8005874:	643b      	str	r3, [r7, #64]	; 0x40
 8005876:	e033      	b.n	80058e0 <HAL_SD_ReadBlocks+0x1c8>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4618      	mov	r0, r3
 800587e:	f002 fc2d 	bl	80080dc <SDMMC_ReadFIFO>
 8005882:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8005884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005886:	b2da      	uxtb	r2, r3
 8005888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800588a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800588c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800588e:	3301      	adds	r3, #1
 8005890:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005892:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005894:	3b01      	subs	r3, #1
 8005896:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8005898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800589a:	0a1b      	lsrs	r3, r3, #8
 800589c:	b2da      	uxtb	r2, r3
 800589e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058a0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80058a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058a4:	3301      	adds	r3, #1
 80058a6:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80058a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058aa:	3b01      	subs	r3, #1
 80058ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80058ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058b0:	0c1b      	lsrs	r3, r3, #16
 80058b2:	b2da      	uxtb	r2, r3
 80058b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058b6:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80058b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058ba:	3301      	adds	r3, #1
 80058bc:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80058be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058c0:	3b01      	subs	r3, #1
 80058c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80058c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058c6:	0e1b      	lsrs	r3, r3, #24
 80058c8:	b2da      	uxtb	r2, r3
 80058ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058cc:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80058ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058d0:	3301      	adds	r3, #1
 80058d2:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80058d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058d6:	3b01      	subs	r3, #1
 80058d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 80058da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058dc:	3301      	adds	r3, #1
 80058de:	643b      	str	r3, [r7, #64]	; 0x40
 80058e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058e2:	2b07      	cmp	r3, #7
 80058e4:	d9c8      	bls.n	8005878 <HAL_SD_ReadBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80058e6:	f7fb fdfd 	bl	80014e4 <HAL_GetTick>
 80058ea:	4602      	mov	r2, r0
 80058ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ee:	1ad3      	subs	r3, r2, r3
 80058f0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80058f2:	429a      	cmp	r2, r3
 80058f4:	d902      	bls.n	80058fc <HAL_SD_ReadBlocks+0x1e4>
 80058f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d112      	bne.n	8005922 <HAL_SD_ReadBlocks+0x20a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a47      	ldr	r2, [pc, #284]	; (8005a20 <HAL_SD_ReadBlocks+0x308>)
 8005902:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005908:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2201      	movs	r2, #1
 8005914:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	2200      	movs	r2, #0
 800591c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800591e:	2303      	movs	r3, #3
 8005920:	e0eb      	b.n	8005afa <HAL_SD_ReadBlocks+0x3e2>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005928:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800592c:	2b00      	cmp	r3, #0
 800592e:	d096      	beq.n	800585e <HAL_SD_ReadBlocks+0x146>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005936:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800593a:	2b00      	cmp	r3, #0
 800593c:	d022      	beq.n	8005984 <HAL_SD_ReadBlocks+0x26c>
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	2b01      	cmp	r3, #1
 8005942:	d91f      	bls.n	8005984 <HAL_SD_ReadBlocks+0x26c>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005948:	2b03      	cmp	r3, #3
 800594a:	d01b      	beq.n	8005984 <HAL_SD_ReadBlocks+0x26c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4618      	mov	r0, r3
 8005952:	f002 fd1f 	bl	8008394 <SDMMC_CmdStopTransfer>
 8005956:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8005958:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800595a:	2b00      	cmp	r3, #0
 800595c:	d012      	beq.n	8005984 <HAL_SD_ReadBlocks+0x26c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a2f      	ldr	r2, [pc, #188]	; (8005a20 <HAL_SD_ReadBlocks+0x308>)
 8005964:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800596a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800596c:	431a      	orrs	r2, r3
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2201      	movs	r2, #1
 8005976:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	2200      	movs	r2, #0
 800597e:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8005980:	2301      	movs	r3, #1
 8005982:	e0ba      	b.n	8005afa <HAL_SD_ReadBlocks+0x3e2>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800598a:	f003 0308 	and.w	r3, r3, #8
 800598e:	2b00      	cmp	r3, #0
 8005990:	d012      	beq.n	80059b8 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a22      	ldr	r2, [pc, #136]	; (8005a20 <HAL_SD_ReadBlocks+0x308>)
 8005998:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800599e:	f043 0208 	orr.w	r2, r3, #8
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2201      	movs	r2, #1
 80059aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2200      	movs	r2, #0
 80059b2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80059b4:	2301      	movs	r3, #1
 80059b6:	e0a0      	b.n	8005afa <HAL_SD_ReadBlocks+0x3e2>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059be:	f003 0302 	and.w	r3, r3, #2
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d012      	beq.n	80059ec <HAL_SD_ReadBlocks+0x2d4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a15      	ldr	r2, [pc, #84]	; (8005a20 <HAL_SD_ReadBlocks+0x308>)
 80059cc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059d2:	f043 0202 	orr.w	r2, r3, #2
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2201      	movs	r2, #1
 80059de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2200      	movs	r2, #0
 80059e6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80059e8:	2301      	movs	r3, #1
 80059ea:	e086      	b.n	8005afa <HAL_SD_ReadBlocks+0x3e2>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059f2:	f003 0320 	and.w	r3, r3, #32
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d063      	beq.n	8005ac2 <HAL_SD_ReadBlocks+0x3aa>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a08      	ldr	r2, [pc, #32]	; (8005a20 <HAL_SD_ReadBlocks+0x308>)
 8005a00:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a06:	f043 0220 	orr.w	r2, r3, #32
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	2201      	movs	r2, #1
 8005a12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	e06c      	b.n	8005afa <HAL_SD_ReadBlocks+0x3e2>
 8005a20:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4618      	mov	r0, r3
 8005a2a:	f002 fb57 	bl	80080dc <SDMMC_ReadFIFO>
 8005a2e:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8005a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a32:	b2da      	uxtb	r2, r3
 8005a34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a36:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005a38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a3a:	3301      	adds	r3, #1
 8005a3c:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8005a3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a40:	3b01      	subs	r3, #1
 8005a42:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8005a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a46:	0a1b      	lsrs	r3, r3, #8
 8005a48:	b2da      	uxtb	r2, r3
 8005a4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a4c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005a4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a50:	3301      	adds	r3, #1
 8005a52:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8005a54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a56:	3b01      	subs	r3, #1
 8005a58:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8005a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a5c:	0c1b      	lsrs	r3, r3, #16
 8005a5e:	b2da      	uxtb	r2, r3
 8005a60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a62:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005a64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a66:	3301      	adds	r3, #1
 8005a68:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8005a6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a6c:	3b01      	subs	r3, #1
 8005a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8005a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a72:	0e1b      	lsrs	r3, r3, #24
 8005a74:	b2da      	uxtb	r2, r3
 8005a76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a78:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005a7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a7c:	3301      	adds	r3, #1
 8005a7e:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8005a80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a82:	3b01      	subs	r3, #1
 8005a84:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8005a86:	f7fb fd2d 	bl	80014e4 <HAL_GetTick>
 8005a8a:	4602      	mov	r2, r0
 8005a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a8e:	1ad3      	subs	r3, r2, r3
 8005a90:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005a92:	429a      	cmp	r2, r3
 8005a94:	d902      	bls.n	8005a9c <HAL_SD_ReadBlocks+0x384>
 8005a96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d112      	bne.n	8005ac2 <HAL_SD_ReadBlocks+0x3aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a18      	ldr	r2, [pc, #96]	; (8005b04 <HAL_SD_ReadBlocks+0x3ec>)
 8005aa2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aa8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	2200      	movs	r2, #0
 8005abc:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	e01b      	b.n	8005afa <HAL_SD_ReadBlocks+0x3e2>
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ac8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d002      	beq.n	8005ad6 <HAL_SD_ReadBlocks+0x3be>
 8005ad0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d1a6      	bne.n	8005a24 <HAL_SD_ReadBlocks+0x30c>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f240 523a 	movw	r2, #1338	; 0x53a
 8005ade:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	e006      	b.n	8005afa <HAL_SD_ReadBlocks+0x3e2>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005af0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005af8:	2301      	movs	r3, #1
  }
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3748      	adds	r7, #72	; 0x48
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}
 8005b02:	bf00      	nop
 8005b04:	004005ff 	.word	0x004005ff

08005b08 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b092      	sub	sp, #72	; 0x48
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	60f8      	str	r0, [r7, #12]
 8005b10:	60b9      	str	r1, [r7, #8]
 8005b12:	607a      	str	r2, [r7, #4]
 8005b14:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005b16:	f7fb fce5 	bl	80014e4 <HAL_GetTick>
 8005b1a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d107      	bne.n	8005b3a <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b2e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005b36:	2301      	movs	r3, #1
 8005b38:	e182      	b.n	8005e40 <HAL_SD_WriteBlocks+0x338>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005b40:	b2db      	uxtb	r3, r3
 8005b42:	2b01      	cmp	r3, #1
 8005b44:	f040 8175 	bne.w	8005e32 <HAL_SD_WriteBlocks+0x32a>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005b4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	441a      	add	r2, r3
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b58:	429a      	cmp	r2, r3
 8005b5a:	d907      	bls.n	8005b6c <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b60:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	e169      	b.n	8005e40 <HAL_SD_WriteBlocks+0x338>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	2203      	movs	r2, #3
 8005b70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b80:	2b01      	cmp	r3, #1
 8005b82:	d002      	beq.n	8005b8a <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8005b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b86:	025b      	lsls	r3, r3, #9
 8005b88:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005b92:	4618      	mov	r0, r3
 8005b94:	f002 fb54 	bl	8008240 <SDMMC_CmdBlockLength>
 8005b98:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 8005b9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d00f      	beq.n	8005bc0 <HAL_SD_WriteBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a9c      	ldr	r2, [pc, #624]	; (8005e18 <HAL_SD_WriteBlocks+0x310>)
 8005ba6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005bac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bae:	431a      	orrs	r2, r3
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	e13f      	b.n	8005e40 <HAL_SD_WriteBlocks+0x338>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005bc0:	f04f 33ff 	mov.w	r3, #4294967295
 8005bc4:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	025b      	lsls	r3, r3, #9
 8005bca:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8005bcc:	2390      	movs	r3, #144	; 0x90
 8005bce:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8005bd8:	2301      	movs	r3, #1
 8005bda:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f107 0218 	add.w	r2, r7, #24
 8005be4:	4611      	mov	r1, r2
 8005be6:	4618      	mov	r0, r3
 8005be8:	f002 fafe 	bl	80081e8 <SDMMC_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	2b01      	cmp	r3, #1
 8005bf0:	d90a      	bls.n	8005c08 <HAL_SD_WriteBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2220      	movs	r2, #32
 8005bf6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f002 fba6 	bl	8008350 <SDMMC_CmdWriteMultiBlock>
 8005c04:	6478      	str	r0, [r7, #68]	; 0x44
 8005c06:	e009      	b.n	8005c1c <HAL_SD_WriteBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2210      	movs	r2, #16
 8005c0c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005c14:	4618      	mov	r0, r3
 8005c16:	f002 fb79 	bl	800830c <SDMMC_CmdWriteSingleBlock>
 8005c1a:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8005c1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d012      	beq.n	8005c48 <HAL_SD_WriteBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a7c      	ldr	r2, [pc, #496]	; (8005e18 <HAL_SD_WriteBlocks+0x310>)
 8005c28:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c30:	431a      	orrs	r2, r3
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2201      	movs	r2, #1
 8005c3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2200      	movs	r2, #0
 8005c42:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005c44:	2301      	movs	r3, #1
 8005c46:	e0fb      	b.n	8005e40 <HAL_SD_WriteBlocks+0x338>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8005c48:	69fb      	ldr	r3, [r7, #28]
 8005c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005c4c:	e065      	b.n	8005d1a <HAL_SD_WriteBlocks+0x212>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d040      	beq.n	8005cde <HAL_SD_WriteBlocks+0x1d6>
 8005c5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d03d      	beq.n	8005cde <HAL_SD_WriteBlocks+0x1d6>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8005c62:	2300      	movs	r3, #0
 8005c64:	643b      	str	r3, [r7, #64]	; 0x40
 8005c66:	e037      	b.n	8005cd8 <HAL_SD_WriteBlocks+0x1d0>
        {
          data = (uint32_t)(*tempbuff);
 8005c68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c6a:	781b      	ldrb	r3, [r3, #0]
 8005c6c:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005c6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c70:	3301      	adds	r3, #1
 8005c72:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005c74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c76:	3b01      	subs	r3, #1
 8005c78:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8005c7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c7c:	781b      	ldrb	r3, [r3, #0]
 8005c7e:	021a      	lsls	r2, r3, #8
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	4313      	orrs	r3, r2
 8005c84:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005c86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c88:	3301      	adds	r3, #1
 8005c8a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005c8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c8e:	3b01      	subs	r3, #1
 8005c90:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8005c92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c94:	781b      	ldrb	r3, [r3, #0]
 8005c96:	041a      	lsls	r2, r3, #16
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005c9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ca0:	3301      	adds	r3, #1
 8005ca2:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005ca4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ca6:	3b01      	subs	r3, #1
 8005ca8:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8005caa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cac:	781b      	ldrb	r3, [r3, #0]
 8005cae:	061a      	lsls	r2, r3, #24
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005cb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cb8:	3301      	adds	r3, #1
 8005cba:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005cbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cbe:	3b01      	subs	r3, #1
 8005cc0:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f107 0214 	add.w	r2, r7, #20
 8005cca:	4611      	mov	r1, r2
 8005ccc:	4618      	mov	r0, r3
 8005cce:	f002 fa12 	bl	80080f6 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8005cd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cd4:	3301      	adds	r3, #1
 8005cd6:	643b      	str	r3, [r7, #64]	; 0x40
 8005cd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cda:	2b07      	cmp	r3, #7
 8005cdc:	d9c4      	bls.n	8005c68 <HAL_SD_WriteBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8005cde:	f7fb fc01 	bl	80014e4 <HAL_GetTick>
 8005ce2:	4602      	mov	r2, r0
 8005ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ce6:	1ad3      	subs	r3, r2, r3
 8005ce8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005cea:	429a      	cmp	r2, r3
 8005cec:	d902      	bls.n	8005cf4 <HAL_SD_WriteBlocks+0x1ec>
 8005cee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d112      	bne.n	8005d1a <HAL_SD_WriteBlocks+0x212>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a47      	ldr	r2, [pc, #284]	; (8005e18 <HAL_SD_WriteBlocks+0x310>)
 8005cfa:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d02:	431a      	orrs	r2, r3
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2200      	movs	r2, #0
 8005d14:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8005d16:	2303      	movs	r3, #3
 8005d18:	e092      	b.n	8005e40 <HAL_SD_WriteBlocks+0x338>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d20:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d092      	beq.n	8005c4e <HAL_SD_WriteBlocks+0x146>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d022      	beq.n	8005d7c <HAL_SD_WriteBlocks+0x274>
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	2b01      	cmp	r3, #1
 8005d3a:	d91f      	bls.n	8005d7c <HAL_SD_WriteBlocks+0x274>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d40:	2b03      	cmp	r3, #3
 8005d42:	d01b      	beq.n	8005d7c <HAL_SD_WriteBlocks+0x274>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4618      	mov	r0, r3
 8005d4a:	f002 fb23 	bl	8008394 <SDMMC_CmdStopTransfer>
 8005d4e:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8005d50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d012      	beq.n	8005d7c <HAL_SD_WriteBlocks+0x274>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a2f      	ldr	r2, [pc, #188]	; (8005e18 <HAL_SD_WriteBlocks+0x310>)
 8005d5c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d64:	431a      	orrs	r2, r3
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2200      	movs	r2, #0
 8005d76:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8005d78:	2301      	movs	r3, #1
 8005d7a:	e061      	b.n	8005e40 <HAL_SD_WriteBlocks+0x338>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d82:	f003 0308 	and.w	r3, r3, #8
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d012      	beq.n	8005db0 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a22      	ldr	r2, [pc, #136]	; (8005e18 <HAL_SD_WriteBlocks+0x310>)
 8005d90:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d96:	f043 0208 	orr.w	r2, r3, #8
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	2201      	movs	r2, #1
 8005da2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2200      	movs	r2, #0
 8005daa:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005dac:	2301      	movs	r3, #1
 8005dae:	e047      	b.n	8005e40 <HAL_SD_WriteBlocks+0x338>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005db6:	f003 0302 	and.w	r3, r3, #2
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d012      	beq.n	8005de4 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a15      	ldr	r2, [pc, #84]	; (8005e18 <HAL_SD_WriteBlocks+0x310>)
 8005dc4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dca:	f043 0202 	orr.w	r2, r3, #2
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2201      	movs	r2, #1
 8005dd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005de0:	2301      	movs	r3, #1
 8005de2:	e02d      	b.n	8005e40 <HAL_SD_WriteBlocks+0x338>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dea:	f003 0310 	and.w	r3, r3, #16
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d014      	beq.n	8005e1c <HAL_SD_WriteBlocks+0x314>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a08      	ldr	r2, [pc, #32]	; (8005e18 <HAL_SD_WriteBlocks+0x310>)
 8005df8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dfe:	f043 0210 	orr.w	r2, r3, #16
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2201      	movs	r2, #1
 8005e0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	2200      	movs	r2, #0
 8005e12:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005e14:	2301      	movs	r3, #1
 8005e16:	e013      	b.n	8005e40 <HAL_SD_WriteBlocks+0x338>
 8005e18:	004005ff 	.word	0x004005ff
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f240 523a 	movw	r2, #1338	; 0x53a
 8005e24:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	2201      	movs	r2, #1
 8005e2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	e006      	b.n	8005e40 <HAL_SD_WriteBlocks+0x338>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e36:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005e3e:	2301      	movs	r3, #1
  }
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	3748      	adds	r7, #72	; 0x48
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}

08005e48 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b08c      	sub	sp, #48	; 0x30
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	60f8      	str	r0, [r7, #12]
 8005e50:	60b9      	str	r1, [r7, #8]
 8005e52:	607a      	str	r2, [r7, #4]
 8005e54:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d107      	bne.n	8005e70 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e64:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	e0cc      	b.n	800600a <HAL_SD_ReadBlocks_DMA+0x1c2>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005e76:	b2db      	uxtb	r3, r3
 8005e78:	2b01      	cmp	r3, #1
 8005e7a:	f040 80c5 	bne.w	8006008 <HAL_SD_ReadBlocks_DMA+0x1c0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2200      	movs	r2, #0
 8005e82:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005e84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	441a      	add	r2, r3
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e8e:	429a      	cmp	r2, r3
 8005e90:	d907      	bls.n	8005ea2 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e96:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	e0b3      	b.n	800600a <HAL_SD_ReadBlocks_DMA+0x1c2>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2203      	movs	r2, #3
 8005ea6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8005ec0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ec6:	4a53      	ldr	r2, [pc, #332]	; (8006014 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8005ec8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ece:	4a52      	ldr	r2, [pc, #328]	; (8006018 <HAL_SD_ReadBlocks_DMA+0x1d0>)
 8005ed0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	3380      	adds	r3, #128	; 0x80
 8005ee4:	4619      	mov	r1, r3
 8005ee6:	68ba      	ldr	r2, [r7, #8]
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	025b      	lsls	r3, r3, #9
 8005eec:	089b      	lsrs	r3, r3, #2
 8005eee:	f7fc fb47 	bl	8002580 <HAL_DMA_Start_IT>
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d017      	beq.n	8005f28 <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8005f06:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a43      	ldr	r2, [pc, #268]	; (800601c <HAL_SD_ReadBlocks_DMA+0x1d4>)
 8005f0e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f14:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2201      	movs	r2, #1
 8005f20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8005f24:	2301      	movs	r3, #1
 8005f26:	e070      	b.n	800600a <HAL_SD_ReadBlocks_DMA+0x1c2>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f042 0208 	orr.w	r2, r2, #8
 8005f36:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	d002      	beq.n	8005f46 <HAL_SD_ReadBlocks_DMA+0xfe>
      {
        add *= 512U;
 8005f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f42:	025b      	lsls	r3, r3, #9
 8005f44:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f002 f976 	bl	8008240 <SDMMC_CmdBlockLength>
 8005f54:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 8005f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d00f      	beq.n	8005f7c <HAL_SD_ReadBlocks_DMA+0x134>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a2e      	ldr	r2, [pc, #184]	; (800601c <HAL_SD_ReadBlocks_DMA+0x1d4>)
 8005f62:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f6a:	431a      	orrs	r2, r3
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2201      	movs	r2, #1
 8005f74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 8005f78:	2301      	movs	r3, #1
 8005f7a:	e046      	b.n	800600a <HAL_SD_ReadBlocks_DMA+0x1c2>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005f7c:	f04f 33ff 	mov.w	r3, #4294967295
 8005f80:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	025b      	lsls	r3, r3, #9
 8005f86:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8005f88:	2390      	movs	r3, #144	; 0x90
 8005f8a:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005f8c:	2302      	movs	r3, #2
 8005f8e:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005f90:	2300      	movs	r3, #0
 8005f92:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8005f94:	2301      	movs	r3, #1
 8005f96:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f107 0210 	add.w	r2, r7, #16
 8005fa0:	4611      	mov	r1, r2
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	f002 f920 	bl	80081e8 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	2b01      	cmp	r3, #1
 8005fac:	d90a      	bls.n	8005fc4 <HAL_SD_ReadBlocks_DMA+0x17c>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2282      	movs	r2, #130	; 0x82
 8005fb2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005fba:	4618      	mov	r0, r3
 8005fbc:	f002 f984 	bl	80082c8 <SDMMC_CmdReadMultiBlock>
 8005fc0:	62f8      	str	r0, [r7, #44]	; 0x2c
 8005fc2:	e009      	b.n	8005fd8 <HAL_SD_ReadBlocks_DMA+0x190>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	2281      	movs	r2, #129	; 0x81
 8005fc8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	f002 f957 	bl	8008284 <SDMMC_CmdReadSingleBlock>
 8005fd6:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8005fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d012      	beq.n	8006004 <HAL_SD_ReadBlocks_DMA+0x1bc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a0e      	ldr	r2, [pc, #56]	; (800601c <HAL_SD_ReadBlocks_DMA+0x1d4>)
 8005fe4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fec:	431a      	orrs	r2, r3
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	2201      	movs	r2, #1
 8005ff6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8006000:	2301      	movs	r3, #1
 8006002:	e002      	b.n	800600a <HAL_SD_ReadBlocks_DMA+0x1c2>
      }

      return HAL_OK;
 8006004:	2300      	movs	r3, #0
 8006006:	e000      	b.n	800600a <HAL_SD_ReadBlocks_DMA+0x1c2>
    }
  }
  else
  {
    return HAL_BUSY;
 8006008:	2302      	movs	r3, #2
  }
}
 800600a:	4618      	mov	r0, r3
 800600c:	3730      	adds	r7, #48	; 0x30
 800600e:	46bd      	mov	sp, r7
 8006010:	bd80      	pop	{r7, pc}
 8006012:	bf00      	nop
 8006014:	080069ff 	.word	0x080069ff
 8006018:	08006a71 	.word	0x08006a71
 800601c:	004005ff 	.word	0x004005ff

08006020 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b08c      	sub	sp, #48	; 0x30
 8006024:	af00      	add	r7, sp, #0
 8006026:	60f8      	str	r0, [r7, #12]
 8006028:	60b9      	str	r1, [r7, #8]
 800602a:	607a      	str	r2, [r7, #4]
 800602c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d107      	bne.n	8006048 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800603c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006044:	2301      	movs	r3, #1
 8006046:	e0cf      	b.n	80061e8 <HAL_SD_WriteBlocks_DMA+0x1c8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800604e:	b2db      	uxtb	r3, r3
 8006050:	2b01      	cmp	r3, #1
 8006052:	f040 80c8 	bne.w	80061e6 <HAL_SD_WriteBlocks_DMA+0x1c6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2200      	movs	r2, #0
 800605a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800605c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	441a      	add	r2, r3
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006066:	429a      	cmp	r2, r3
 8006068:	d907      	bls.n	800607a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800606e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006076:	2301      	movs	r3, #1
 8006078:	e0b6      	b.n	80061e8 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	2203      	movs	r2, #3
 800607e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	2200      	movs	r2, #0
 8006088:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f042 021a 	orr.w	r2, r2, #26
 8006098:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800609e:	4a54      	ldr	r2, [pc, #336]	; (80061f0 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 80060a0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060a6:	4a53      	ldr	r2, [pc, #332]	; (80061f4 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 80060a8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060ae:	2200      	movs	r2, #0
 80060b0:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060b6:	2b01      	cmp	r3, #1
 80060b8:	d002      	beq.n	80060c0 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 80060ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060bc:	025b      	lsls	r3, r3, #9
 80060be:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80060c8:	4618      	mov	r0, r3
 80060ca:	f002 f8b9 	bl	8008240 <SDMMC_CmdBlockLength>
 80060ce:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 80060d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d00f      	beq.n	80060f6 <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a47      	ldr	r2, [pc, #284]	; (80061f8 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 80060dc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060e4:	431a      	orrs	r2, r3
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	2201      	movs	r2, #1
 80060ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80060f2:	2301      	movs	r3, #1
 80060f4:	e078      	b.n	80061e8 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	2b01      	cmp	r3, #1
 80060fa:	d90a      	bls.n	8006112 <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	22a0      	movs	r2, #160	; 0xa0
 8006100:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006108:	4618      	mov	r0, r3
 800610a:	f002 f921 	bl	8008350 <SDMMC_CmdWriteMultiBlock>
 800610e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006110:	e009      	b.n	8006126 <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	2290      	movs	r2, #144	; 0x90
 8006116:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800611e:	4618      	mov	r0, r3
 8006120:	f002 f8f4 	bl	800830c <SDMMC_CmdWriteSingleBlock>
 8006124:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8006126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006128:	2b00      	cmp	r3, #0
 800612a:	d012      	beq.n	8006152 <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a31      	ldr	r2, [pc, #196]	; (80061f8 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8006132:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800613a:	431a      	orrs	r2, r3
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	2201      	movs	r2, #1
 8006144:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2200      	movs	r2, #0
 800614c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800614e:	2301      	movs	r3, #1
 8006150:	e04a      	b.n	80061e8 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f042 0208 	orr.w	r2, r2, #8
 8006160:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006166:	68b9      	ldr	r1, [r7, #8]
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	3380      	adds	r3, #128	; 0x80
 800616e:	461a      	mov	r2, r3
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	025b      	lsls	r3, r3, #9
 8006174:	089b      	lsrs	r3, r3, #2
 8006176:	f7fc fa03 	bl	8002580 <HAL_DMA_Start_IT>
 800617a:	4603      	mov	r3, r0
 800617c:	2b00      	cmp	r3, #0
 800617e:	d01a      	beq.n	80061b6 <HAL_SD_WriteBlocks_DMA+0x196>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f022 021a 	bic.w	r2, r2, #26
 800618e:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4a18      	ldr	r2, [pc, #96]	; (80061f8 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8006196:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800619c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	2201      	movs	r2, #1
 80061a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	2200      	movs	r2, #0
 80061b0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80061b2:	2301      	movs	r3, #1
 80061b4:	e018      	b.n	80061e8 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80061b6:	f04f 33ff 	mov.w	r3, #4294967295
 80061ba:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	025b      	lsls	r3, r3, #9
 80061c0:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80061c2:	2390      	movs	r3, #144	; 0x90
 80061c4:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80061c6:	2300      	movs	r3, #0
 80061c8:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80061ca:	2300      	movs	r3, #0
 80061cc:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 80061ce:	2301      	movs	r3, #1
 80061d0:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f107 0210 	add.w	r2, r7, #16
 80061da:	4611      	mov	r1, r2
 80061dc:	4618      	mov	r0, r3
 80061de:	f002 f803 	bl	80081e8 <SDMMC_ConfigData>

      return HAL_OK;
 80061e2:	2300      	movs	r3, #0
 80061e4:	e000      	b.n	80061e8 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }
  }
  else
  {
    return HAL_BUSY;
 80061e6:	2302      	movs	r3, #2
  }
}
 80061e8:	4618      	mov	r0, r3
 80061ea:	3730      	adds	r7, #48	; 0x30
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bd80      	pop	{r7, pc}
 80061f0:	080069d5 	.word	0x080069d5
 80061f4:	08006a71 	.word	0x08006a71
 80061f8:	004005ff 	.word	0x004005ff

080061fc <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b084      	sub	sp, #16
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006208:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006210:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006214:	2b00      	cmp	r3, #0
 8006216:	d008      	beq.n	800622a <HAL_SD_IRQHandler+0x2e>
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	f003 0308 	and.w	r3, r3, #8
 800621e:	2b00      	cmp	r3, #0
 8006220:	d003      	beq.n	800622a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f000 ffc8 	bl	80071b8 <SD_Read_IT>
 8006228:	e153      	b.n	80064d2 <HAL_SD_IRQHandler+0x2d6>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006230:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006234:	2b00      	cmp	r3, #0
 8006236:	f000 808d 	beq.w	8006354 <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006242:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681a      	ldr	r2, [r3, #0]
 800624e:	4ba3      	ldr	r3, [pc, #652]	; (80064dc <HAL_SD_IRQHandler+0x2e0>)
 8006250:	400b      	ands	r3, r1
 8006252:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f022 0201 	bic.w	r2, r2, #1
 8006262:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	f003 0308 	and.w	r3, r3, #8
 800626a:	2b00      	cmp	r3, #0
 800626c:	d039      	beq.n	80062e2 <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	f003 0302 	and.w	r3, r3, #2
 8006274:	2b00      	cmp	r3, #0
 8006276:	d104      	bne.n	8006282 <HAL_SD_IRQHandler+0x86>
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	f003 0320 	and.w	r3, r3, #32
 800627e:	2b00      	cmp	r3, #0
 8006280:	d011      	beq.n	80062a6 <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4618      	mov	r0, r3
 8006288:	f002 f884 	bl	8008394 <SDMMC_CmdStopTransfer>
 800628c:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d008      	beq.n	80062a6 <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	431a      	orrs	r2, r3
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	f000 f921 	bl	80064e8 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f240 523a 	movw	r2, #1338	; 0x53a
 80062ae:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2201      	movs	r2, #1
 80062b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2200      	movs	r2, #0
 80062bc:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	f003 0301 	and.w	r3, r3, #1
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d104      	bne.n	80062d2 <HAL_SD_IRQHandler+0xd6>
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	f003 0302 	and.w	r3, r3, #2
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d003      	beq.n	80062da <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f004 f806 	bl	800a2e4 <HAL_SD_RxCpltCallback>
 80062d8:	e0fb      	b.n	80064d2 <HAL_SD_IRQHandler+0x2d6>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f003 fff8 	bl	800a2d0 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80062e0:	e0f7      	b.n	80064d2 <HAL_SD_IRQHandler+0x2d6>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	f000 80f2 	beq.w	80064d2 <HAL_SD_IRQHandler+0x2d6>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	f003 0320 	and.w	r3, r3, #32
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d011      	beq.n	800631c <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4618      	mov	r0, r3
 80062fe:	f002 f849 	bl	8008394 <SDMMC_CmdStopTransfer>
 8006302:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d008      	beq.n	800631c <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	431a      	orrs	r2, r3
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	f000 f8e6 	bl	80064e8 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	f003 0301 	and.w	r3, r3, #1
 8006322:	2b00      	cmp	r3, #0
 8006324:	f040 80d5 	bne.w	80064d2 <HAL_SD_IRQHandler+0x2d6>
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f003 0302 	and.w	r3, r3, #2
 800632e:	2b00      	cmp	r3, #0
 8006330:	f040 80cf 	bne.w	80064d2 <HAL_SD_IRQHandler+0x2d6>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f022 0208 	bic.w	r2, r2, #8
 8006342:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2201      	movs	r2, #1
 8006348:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f003 ffbf 	bl	800a2d0 <HAL_SD_TxCpltCallback>
}
 8006352:	e0be      	b.n	80064d2 <HAL_SD_IRQHandler+0x2d6>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800635a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800635e:	2b00      	cmp	r3, #0
 8006360:	d008      	beq.n	8006374 <HAL_SD_IRQHandler+0x178>
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	f003 0308 	and.w	r3, r3, #8
 8006368:	2b00      	cmp	r3, #0
 800636a:	d003      	beq.n	8006374 <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 800636c:	6878      	ldr	r0, [r7, #4]
 800636e:	f000 ff74 	bl	800725a <SD_Write_IT>
 8006372:	e0ae      	b.n	80064d2 <HAL_SD_IRQHandler+0x2d6>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800637a:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800637e:	2b00      	cmp	r3, #0
 8006380:	f000 80a7 	beq.w	80064d2 <HAL_SD_IRQHandler+0x2d6>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800638a:	f003 0302 	and.w	r3, r3, #2
 800638e:	2b00      	cmp	r3, #0
 8006390:	d005      	beq.n	800639e <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006396:	f043 0202 	orr.w	r2, r3, #2
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063a4:	f003 0308 	and.w	r3, r3, #8
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d005      	beq.n	80063b8 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063b0:	f043 0208 	orr.w	r2, r3, #8
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063be:	f003 0320 	and.w	r3, r3, #32
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d005      	beq.n	80063d2 <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ca:	f043 0220 	orr.w	r2, r3, #32
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063d8:	f003 0310 	and.w	r3, r3, #16
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d005      	beq.n	80063ec <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063e4:	f043 0210 	orr.w	r2, r3, #16
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f240 523a 	movw	r2, #1338	; 0x53a
 80063f4:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8006404:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4618      	mov	r0, r3
 800640c:	f001 ffc2 	bl	8008394 <SDMMC_CmdStopTransfer>
 8006410:	4602      	mov	r2, r0
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006416:	431a      	orrs	r2, r3
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	f003 0308 	and.w	r3, r3, #8
 8006422:	2b00      	cmp	r3, #0
 8006424:	d00a      	beq.n	800643c <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2201      	movs	r2, #1
 800642a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2200      	movs	r2, #0
 8006432:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8006434:	6878      	ldr	r0, [r7, #4]
 8006436:	f000 f857 	bl	80064e8 <HAL_SD_ErrorCallback>
}
 800643a:	e04a      	b.n	80064d2 <HAL_SD_IRQHandler+0x2d6>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006442:	2b00      	cmp	r3, #0
 8006444:	d045      	beq.n	80064d2 <HAL_SD_IRQHandler+0x2d6>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	f003 0310 	and.w	r3, r3, #16
 800644c:	2b00      	cmp	r3, #0
 800644e:	d104      	bne.n	800645a <HAL_SD_IRQHandler+0x25e>
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	f003 0320 	and.w	r3, r3, #32
 8006456:	2b00      	cmp	r3, #0
 8006458:	d011      	beq.n	800647e <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800645e:	4a20      	ldr	r2, [pc, #128]	; (80064e0 <HAL_SD_IRQHandler+0x2e4>)
 8006460:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006466:	4618      	mov	r0, r3
 8006468:	f7fc f8ea 	bl	8002640 <HAL_DMA_Abort_IT>
 800646c:	4603      	mov	r3, r0
 800646e:	2b00      	cmp	r3, #0
 8006470:	d02f      	beq.n	80064d2 <HAL_SD_IRQHandler+0x2d6>
          SD_DMATxAbort(hsd->hdmatx);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006476:	4618      	mov	r0, r3
 8006478:	f000 fb4c 	bl	8006b14 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800647c:	e029      	b.n	80064d2 <HAL_SD_IRQHandler+0x2d6>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	f003 0301 	and.w	r3, r3, #1
 8006484:	2b00      	cmp	r3, #0
 8006486:	d104      	bne.n	8006492 <HAL_SD_IRQHandler+0x296>
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	f003 0302 	and.w	r3, r3, #2
 800648e:	2b00      	cmp	r3, #0
 8006490:	d011      	beq.n	80064b6 <HAL_SD_IRQHandler+0x2ba>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006496:	4a13      	ldr	r2, [pc, #76]	; (80064e4 <HAL_SD_IRQHandler+0x2e8>)
 8006498:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800649e:	4618      	mov	r0, r3
 80064a0:	f7fc f8ce 	bl	8002640 <HAL_DMA_Abort_IT>
 80064a4:	4603      	mov	r3, r0
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d013      	beq.n	80064d2 <HAL_SD_IRQHandler+0x2d6>
          SD_DMARxAbort(hsd->hdmarx);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ae:	4618      	mov	r0, r3
 80064b0:	f000 fb67 	bl	8006b82 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80064b4:	e00d      	b.n	80064d2 <HAL_SD_IRQHandler+0x2d6>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2200      	movs	r2, #0
 80064ba:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2201      	movs	r2, #1
 80064c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2200      	movs	r2, #0
 80064c8:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f003 fef6 	bl	800a2bc <HAL_SD_AbortCallback>
}
 80064d0:	e7ff      	b.n	80064d2 <HAL_SD_IRQHandler+0x2d6>
 80064d2:	bf00      	nop
 80064d4:	3710      	adds	r7, #16
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bd80      	pop	{r7, pc}
 80064da:	bf00      	nop
 80064dc:	ffff3ec5 	.word	0xffff3ec5
 80064e0:	08006b15 	.word	0x08006b15
 80064e4:	08006b83 	.word	0x08006b83

080064e8 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80064e8:	b480      	push	{r7}
 80064ea:	b083      	sub	sp, #12
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80064f0:	bf00      	nop
 80064f2:	370c      	adds	r7, #12
 80064f4:	46bd      	mov	sp, r7
 80064f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fa:	4770      	bx	lr

080064fc <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80064fc:	b480      	push	{r7}
 80064fe:	b083      	sub	sp, #12
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
 8006504:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800650a:	0f9b      	lsrs	r3, r3, #30
 800650c:	b2da      	uxtb	r2, r3
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006516:	0e9b      	lsrs	r3, r3, #26
 8006518:	b2db      	uxtb	r3, r3
 800651a:	f003 030f 	and.w	r3, r3, #15
 800651e:	b2da      	uxtb	r2, r3
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006528:	0e1b      	lsrs	r3, r3, #24
 800652a:	b2db      	uxtb	r3, r3
 800652c:	f003 0303 	and.w	r3, r3, #3
 8006530:	b2da      	uxtb	r2, r3
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800653a:	0c1b      	lsrs	r3, r3, #16
 800653c:	b2da      	uxtb	r2, r3
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006546:	0a1b      	lsrs	r3, r3, #8
 8006548:	b2da      	uxtb	r2, r3
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006552:	b2da      	uxtb	r2, r3
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800655c:	0d1b      	lsrs	r3, r3, #20
 800655e:	b29a      	uxth	r2, r3
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006568:	0c1b      	lsrs	r3, r3, #16
 800656a:	b2db      	uxtb	r3, r3
 800656c:	f003 030f 	and.w	r3, r3, #15
 8006570:	b2da      	uxtb	r2, r3
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800657a:	0bdb      	lsrs	r3, r3, #15
 800657c:	b2db      	uxtb	r3, r3
 800657e:	f003 0301 	and.w	r3, r3, #1
 8006582:	b2da      	uxtb	r2, r3
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800658c:	0b9b      	lsrs	r3, r3, #14
 800658e:	b2db      	uxtb	r3, r3
 8006590:	f003 0301 	and.w	r3, r3, #1
 8006594:	b2da      	uxtb	r2, r3
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800659e:	0b5b      	lsrs	r3, r3, #13
 80065a0:	b2db      	uxtb	r3, r3
 80065a2:	f003 0301 	and.w	r3, r3, #1
 80065a6:	b2da      	uxtb	r2, r3
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80065b0:	0b1b      	lsrs	r3, r3, #12
 80065b2:	b2db      	uxtb	r3, r3
 80065b4:	f003 0301 	and.w	r3, r3, #1
 80065b8:	b2da      	uxtb	r2, r3
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	2200      	movs	r2, #0
 80065c2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d163      	bne.n	8006694 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80065d0:	009a      	lsls	r2, r3, #2
 80065d2:	f640 73fc 	movw	r3, #4092	; 0xffc
 80065d6:	4013      	ands	r3, r2
 80065d8:	687a      	ldr	r2, [r7, #4]
 80065da:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80065dc:	0f92      	lsrs	r2, r2, #30
 80065de:	431a      	orrs	r2, r3
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065e8:	0edb      	lsrs	r3, r3, #27
 80065ea:	b2db      	uxtb	r3, r3
 80065ec:	f003 0307 	and.w	r3, r3, #7
 80065f0:	b2da      	uxtb	r2, r3
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065fa:	0e1b      	lsrs	r3, r3, #24
 80065fc:	b2db      	uxtb	r3, r3
 80065fe:	f003 0307 	and.w	r3, r3, #7
 8006602:	b2da      	uxtb	r2, r3
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800660c:	0d5b      	lsrs	r3, r3, #21
 800660e:	b2db      	uxtb	r3, r3
 8006610:	f003 0307 	and.w	r3, r3, #7
 8006614:	b2da      	uxtb	r2, r3
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800661e:	0c9b      	lsrs	r3, r3, #18
 8006620:	b2db      	uxtb	r3, r3
 8006622:	f003 0307 	and.w	r3, r3, #7
 8006626:	b2da      	uxtb	r2, r3
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006630:	0bdb      	lsrs	r3, r3, #15
 8006632:	b2db      	uxtb	r3, r3
 8006634:	f003 0307 	and.w	r3, r3, #7
 8006638:	b2da      	uxtb	r2, r3
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	691b      	ldr	r3, [r3, #16]
 8006642:	1c5a      	adds	r2, r3, #1
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	7e1b      	ldrb	r3, [r3, #24]
 800664c:	b2db      	uxtb	r3, r3
 800664e:	f003 0307 	and.w	r3, r3, #7
 8006652:	3302      	adds	r3, #2
 8006654:	2201      	movs	r2, #1
 8006656:	fa02 f303 	lsl.w	r3, r2, r3
 800665a:	687a      	ldr	r2, [r7, #4]
 800665c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800665e:	fb02 f203 	mul.w	r2, r2, r3
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	7a1b      	ldrb	r3, [r3, #8]
 800666a:	b2db      	uxtb	r3, r3
 800666c:	f003 030f 	and.w	r3, r3, #15
 8006670:	2201      	movs	r2, #1
 8006672:	409a      	lsls	r2, r3
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800667c:	687a      	ldr	r2, [r7, #4]
 800667e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8006680:	0a52      	lsrs	r2, r2, #9
 8006682:	fb02 f203 	mul.w	r2, r2, r3
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006690:	661a      	str	r2, [r3, #96]	; 0x60
 8006692:	e031      	b.n	80066f8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006698:	2b01      	cmp	r3, #1
 800669a:	d11d      	bne.n	80066d8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80066a0:	041b      	lsls	r3, r3, #16
 80066a2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066aa:	0c1b      	lsrs	r3, r3, #16
 80066ac:	431a      	orrs	r2, r3
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	691b      	ldr	r3, [r3, #16]
 80066b6:	3301      	adds	r3, #1
 80066b8:	029a      	lsls	r2, r3, #10
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80066cc:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	661a      	str	r2, [r3, #96]	; 0x60
 80066d6:	e00f      	b.n	80066f8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a58      	ldr	r2, [pc, #352]	; (8006840 <HAL_SD_GetCardCSD+0x344>)
 80066de:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066e4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2201      	movs	r2, #1
 80066f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80066f4:	2301      	movs	r3, #1
 80066f6:	e09d      	b.n	8006834 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066fc:	0b9b      	lsrs	r3, r3, #14
 80066fe:	b2db      	uxtb	r3, r3
 8006700:	f003 0301 	and.w	r3, r3, #1
 8006704:	b2da      	uxtb	r2, r3
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800670e:	09db      	lsrs	r3, r3, #7
 8006710:	b2db      	uxtb	r3, r3
 8006712:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006716:	b2da      	uxtb	r2, r3
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006720:	b2db      	uxtb	r3, r3
 8006722:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006726:	b2da      	uxtb	r2, r3
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006730:	0fdb      	lsrs	r3, r3, #31
 8006732:	b2da      	uxtb	r2, r3
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800673c:	0f5b      	lsrs	r3, r3, #29
 800673e:	b2db      	uxtb	r3, r3
 8006740:	f003 0303 	and.w	r3, r3, #3
 8006744:	b2da      	uxtb	r2, r3
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800674e:	0e9b      	lsrs	r3, r3, #26
 8006750:	b2db      	uxtb	r3, r3
 8006752:	f003 0307 	and.w	r3, r3, #7
 8006756:	b2da      	uxtb	r2, r3
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006760:	0d9b      	lsrs	r3, r3, #22
 8006762:	b2db      	uxtb	r3, r3
 8006764:	f003 030f 	and.w	r3, r3, #15
 8006768:	b2da      	uxtb	r2, r3
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006772:	0d5b      	lsrs	r3, r3, #21
 8006774:	b2db      	uxtb	r3, r3
 8006776:	f003 0301 	and.w	r3, r3, #1
 800677a:	b2da      	uxtb	r2, r3
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	2200      	movs	r2, #0
 8006786:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800678e:	0c1b      	lsrs	r3, r3, #16
 8006790:	b2db      	uxtb	r3, r3
 8006792:	f003 0301 	and.w	r3, r3, #1
 8006796:	b2da      	uxtb	r2, r3
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067a2:	0bdb      	lsrs	r3, r3, #15
 80067a4:	b2db      	uxtb	r3, r3
 80067a6:	f003 0301 	and.w	r3, r3, #1
 80067aa:	b2da      	uxtb	r2, r3
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067b6:	0b9b      	lsrs	r3, r3, #14
 80067b8:	b2db      	uxtb	r3, r3
 80067ba:	f003 0301 	and.w	r3, r3, #1
 80067be:	b2da      	uxtb	r2, r3
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067ca:	0b5b      	lsrs	r3, r3, #13
 80067cc:	b2db      	uxtb	r3, r3
 80067ce:	f003 0301 	and.w	r3, r3, #1
 80067d2:	b2da      	uxtb	r2, r3
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067de:	0b1b      	lsrs	r3, r3, #12
 80067e0:	b2db      	uxtb	r3, r3
 80067e2:	f003 0301 	and.w	r3, r3, #1
 80067e6:	b2da      	uxtb	r2, r3
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067f2:	0a9b      	lsrs	r3, r3, #10
 80067f4:	b2db      	uxtb	r3, r3
 80067f6:	f003 0303 	and.w	r3, r3, #3
 80067fa:	b2da      	uxtb	r2, r3
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006806:	0a1b      	lsrs	r3, r3, #8
 8006808:	b2db      	uxtb	r3, r3
 800680a:	f003 0303 	and.w	r3, r3, #3
 800680e:	b2da      	uxtb	r2, r3
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800681a:	085b      	lsrs	r3, r3, #1
 800681c:	b2db      	uxtb	r3, r3
 800681e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006822:	b2da      	uxtb	r2, r3
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	2201      	movs	r2, #1
 800682e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8006832:	2300      	movs	r3, #0
}
 8006834:	4618      	mov	r0, r3
 8006836:	370c      	adds	r7, #12
 8006838:	46bd      	mov	sp, r7
 800683a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683e:	4770      	bx	lr
 8006840:	004005ff 	.word	0x004005ff

08006844 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8006844:	b480      	push	{r7}
 8006846:	b083      	sub	sp, #12
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
 800684c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800688e:	2300      	movs	r3, #0
}
 8006890:	4618      	mov	r0, r3
 8006892:	370c      	adds	r7, #12
 8006894:	46bd      	mov	sp, r7
 8006896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689a:	4770      	bx	lr

0800689c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800689c:	b5b0      	push	{r4, r5, r7, lr}
 800689e:	b08e      	sub	sp, #56	; 0x38
 80068a0:	af04      	add	r7, sp, #16
 80068a2:	6078      	str	r0, [r7, #4]
 80068a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2203      	movs	r2, #3
 80068aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068b2:	2b03      	cmp	r3, #3
 80068b4:	d02e      	beq.n	8006914 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068bc:	d106      	bne.n	80068cc <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068c2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	639a      	str	r2, [r3, #56]	; 0x38
 80068ca:	e029      	b.n	8006920 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068d2:	d10a      	bne.n	80068ea <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	f000 fb0f 	bl	8006ef8 <SD_WideBus_Enable>
 80068da:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e2:	431a      	orrs	r2, r3
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	639a      	str	r2, [r3, #56]	; 0x38
 80068e8:	e01a      	b.n	8006920 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d10a      	bne.n	8006906 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f000 fb4c 	bl	8006f8e <SD_WideBus_Disable>
 80068f6:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068fe:	431a      	orrs	r2, r3
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	639a      	str	r2, [r3, #56]	; 0x38
 8006904:	e00c      	b.n	8006920 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800690a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	639a      	str	r2, [r3, #56]	; 0x38
 8006912:	e005      	b.n	8006920 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006918:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006924:	2b00      	cmp	r3, #0
 8006926:	d009      	beq.n	800693c <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a18      	ldr	r2, [pc, #96]	; (8006990 <HAL_SD_ConfigWideBusOperation+0xf4>)
 800692e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2201      	movs	r2, #1
 8006934:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006938:	2301      	movs	r3, #1
 800693a:	e024      	b.n	8006986 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	689b      	ldr	r3, [r3, #8]
 8006946:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	68db      	ldr	r3, [r3, #12]
 800694c:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	695b      	ldr	r3, [r3, #20]
 8006956:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	699b      	ldr	r3, [r3, #24]
 800695c:	623b      	str	r3, [r7, #32]
    (void)SDMMC_Init(hsd->Instance, Init);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681d      	ldr	r5, [r3, #0]
 8006962:	466c      	mov	r4, sp
 8006964:	f107 0318 	add.w	r3, r7, #24
 8006968:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800696c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006970:	f107 030c 	add.w	r3, r7, #12
 8006974:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006976:	4628      	mov	r0, r5
 8006978:	f001 fb84 	bl	8008084 <SDMMC_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2201      	movs	r2, #1
 8006980:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006984:	2300      	movs	r3, #0
}
 8006986:	4618      	mov	r0, r3
 8006988:	3728      	adds	r7, #40	; 0x28
 800698a:	46bd      	mov	sp, r7
 800698c:	bdb0      	pop	{r4, r5, r7, pc}
 800698e:	bf00      	nop
 8006990:	004005ff 	.word	0x004005ff

08006994 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b086      	sub	sp, #24
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800699c:	2300      	movs	r3, #0
 800699e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80069a0:	f107 030c 	add.w	r3, r7, #12
 80069a4:	4619      	mov	r1, r3
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f000 fa7e 	bl	8006ea8 <SD_SendStatus>
 80069ac:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d005      	beq.n	80069c0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069b8:	697b      	ldr	r3, [r7, #20]
 80069ba:	431a      	orrs	r2, r3
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	0a5b      	lsrs	r3, r3, #9
 80069c4:	f003 030f 	and.w	r3, r3, #15
 80069c8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80069ca:	693b      	ldr	r3, [r7, #16]
}
 80069cc:	4618      	mov	r0, r3
 80069ce:	3718      	adds	r7, #24
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bd80      	pop	{r7, pc}

080069d4 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b085      	sub	sp, #20
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069e0:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80069f0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80069f2:	bf00      	nop
 80069f4:	3714      	adds	r7, #20
 80069f6:	46bd      	mov	sp, r7
 80069f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fc:	4770      	bx	lr

080069fe <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80069fe:	b580      	push	{r7, lr}
 8006a00:	b084      	sub	sp, #16
 8006a02:	af00      	add	r7, sp, #0
 8006a04:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a0a:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a10:	2b82      	cmp	r3, #130	; 0x82
 8006a12:	d111      	bne.n	8006a38 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4618      	mov	r0, r3
 8006a1a:	f001 fcbb 	bl	8008394 <SDMMC_CmdStopTransfer>
 8006a1e:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d008      	beq.n	8006a38 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a2a:	68bb      	ldr	r3, [r7, #8]
 8006a2c:	431a      	orrs	r2, r3
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8006a32:	68f8      	ldr	r0, [r7, #12]
 8006a34:	f7ff fd58 	bl	80064e8 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f022 0208 	bic.w	r2, r2, #8
 8006a46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f240 523a 	movw	r2, #1338	; 0x53a
 8006a50:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	2201      	movs	r2, #1
 8006a56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8006a60:	68f8      	ldr	r0, [r7, #12]
 8006a62:	f003 fc3f 	bl	800a2e4 <HAL_SD_RxCpltCallback>
#endif
}
 8006a66:	bf00      	nop
 8006a68:	3710      	adds	r7, #16
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	bd80      	pop	{r7, pc}
	...

08006a70 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b086      	sub	sp, #24
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a7c:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f7fb ff8a 	bl	8002998 <HAL_DMA_GetError>
 8006a84:	4603      	mov	r3, r0
 8006a86:	2b02      	cmp	r3, #2
 8006a88:	d03e      	beq.n	8006b08 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a90:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a98:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8006a9a:	693b      	ldr	r3, [r7, #16]
 8006a9c:	2b01      	cmp	r3, #1
 8006a9e:	d002      	beq.n	8006aa6 <SD_DMAError+0x36>
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	2b01      	cmp	r3, #1
 8006aa4:	d12d      	bne.n	8006b02 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a19      	ldr	r2, [pc, #100]	; (8006b10 <SD_DMAError+0xa0>)
 8006aac:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006ab4:	697b      	ldr	r3, [r7, #20]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8006abc:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ac2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8006aca:	6978      	ldr	r0, [r7, #20]
 8006acc:	f7ff ff62 	bl	8006994 <HAL_SD_GetCardState>
 8006ad0:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	2b06      	cmp	r3, #6
 8006ad6:	d002      	beq.n	8006ade <SD_DMAError+0x6e>
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	2b05      	cmp	r3, #5
 8006adc:	d10a      	bne.n	8006af4 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006ade:	697b      	ldr	r3, [r7, #20]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	f001 fc56 	bl	8008394 <SDMMC_CmdStopTransfer>
 8006ae8:	4602      	mov	r2, r0
 8006aea:	697b      	ldr	r3, [r7, #20]
 8006aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aee:	431a      	orrs	r2, r3
 8006af0:	697b      	ldr	r3, [r7, #20]
 8006af2:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8006af4:	697b      	ldr	r3, [r7, #20]
 8006af6:	2201      	movs	r2, #1
 8006af8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	2200      	movs	r2, #0
 8006b00:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8006b02:	6978      	ldr	r0, [r7, #20]
 8006b04:	f7ff fcf0 	bl	80064e8 <HAL_SD_ErrorCallback>
#endif
  }
}
 8006b08:	bf00      	nop
 8006b0a:	3718      	adds	r7, #24
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	bd80      	pop	{r7, pc}
 8006b10:	004005ff 	.word	0x004005ff

08006b14 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b084      	sub	sp, #16
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b20:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f240 523a 	movw	r2, #1338	; 0x53a
 8006b2a:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8006b2c:	68f8      	ldr	r0, [r7, #12]
 8006b2e:	f7ff ff31 	bl	8006994 <HAL_SD_GetCardState>
 8006b32:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	2201      	movs	r2, #1
 8006b38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	2b06      	cmp	r3, #6
 8006b46:	d002      	beq.n	8006b4e <SD_DMATxAbort+0x3a>
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	2b05      	cmp	r3, #5
 8006b4c:	d10a      	bne.n	8006b64 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4618      	mov	r0, r3
 8006b54:	f001 fc1e 	bl	8008394 <SDMMC_CmdStopTransfer>
 8006b58:	4602      	mov	r2, r0
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b5e:	431a      	orrs	r2, r3
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d103      	bne.n	8006b74 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8006b6c:	68f8      	ldr	r0, [r7, #12]
 8006b6e:	f003 fba5 	bl	800a2bc <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8006b72:	e002      	b.n	8006b7a <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8006b74:	68f8      	ldr	r0, [r7, #12]
 8006b76:	f7ff fcb7 	bl	80064e8 <HAL_SD_ErrorCallback>
}
 8006b7a:	bf00      	nop
 8006b7c:	3710      	adds	r7, #16
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bd80      	pop	{r7, pc}

08006b82 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8006b82:	b580      	push	{r7, lr}
 8006b84:	b084      	sub	sp, #16
 8006b86:	af00      	add	r7, sp, #0
 8006b88:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b8e:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f240 523a 	movw	r2, #1338	; 0x53a
 8006b98:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8006b9a:	68f8      	ldr	r0, [r7, #12]
 8006b9c:	f7ff fefa 	bl	8006994 <HAL_SD_GetCardState>
 8006ba0:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	2201      	movs	r2, #1
 8006ba6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	2200      	movs	r2, #0
 8006bae:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	2b06      	cmp	r3, #6
 8006bb4:	d002      	beq.n	8006bbc <SD_DMARxAbort+0x3a>
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	2b05      	cmp	r3, #5
 8006bba:	d10a      	bne.n	8006bd2 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	f001 fbe7 	bl	8008394 <SDMMC_CmdStopTransfer>
 8006bc6:	4602      	mov	r2, r0
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bcc:	431a      	orrs	r2, r3
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d103      	bne.n	8006be2 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8006bda:	68f8      	ldr	r0, [r7, #12]
 8006bdc:	f003 fb6e 	bl	800a2bc <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8006be0:	e002      	b.n	8006be8 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8006be2:	68f8      	ldr	r0, [r7, #12]
 8006be4:	f7ff fc80 	bl	80064e8 <HAL_SD_ErrorCallback>
}
 8006be8:	bf00      	nop
 8006bea:	3710      	adds	r7, #16
 8006bec:	46bd      	mov	sp, r7
 8006bee:	bd80      	pop	{r7, pc}

08006bf0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006bf0:	b5b0      	push	{r4, r5, r7, lr}
 8006bf2:	b094      	sub	sp, #80	; 0x50
 8006bf4:	af04      	add	r7, sp, #16
 8006bf6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4618      	mov	r0, r3
 8006c02:	f001 fa98 	bl	8008136 <SDMMC_GetPowerState>
 8006c06:	4603      	mov	r3, r0
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d102      	bne.n	8006c12 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006c0c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006c10:	e0b7      	b.n	8006d82 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c16:	2b03      	cmp	r3, #3
 8006c18:	d02f      	beq.n	8006c7a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4618      	mov	r0, r3
 8006c20:	f001 fcc3 	bl	80085aa <SDMMC_CmdSendCID>
 8006c24:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006c26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d001      	beq.n	8006c30 <SD_InitCard+0x40>
    {
      return errorstate;
 8006c2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c2e:	e0a8      	b.n	8006d82 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	2100      	movs	r1, #0
 8006c36:	4618      	mov	r0, r3
 8006c38:	f001 fac3 	bl	80081c2 <SDMMC_GetResponse>
 8006c3c:	4602      	mov	r2, r0
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	2104      	movs	r1, #4
 8006c48:	4618      	mov	r0, r3
 8006c4a:	f001 faba 	bl	80081c2 <SDMMC_GetResponse>
 8006c4e:	4602      	mov	r2, r0
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	2108      	movs	r1, #8
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	f001 fab1 	bl	80081c2 <SDMMC_GetResponse>
 8006c60:	4602      	mov	r2, r0
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	210c      	movs	r1, #12
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	f001 faa8 	bl	80081c2 <SDMMC_GetResponse>
 8006c72:	4602      	mov	r2, r0
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c7e:	2b03      	cmp	r3, #3
 8006c80:	d00d      	beq.n	8006c9e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f107 020e 	add.w	r2, r7, #14
 8006c8a:	4611      	mov	r1, r2
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	f001 fcc9 	bl	8008624 <SDMMC_CmdSetRelAdd>
 8006c92:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006c94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d001      	beq.n	8006c9e <SD_InitCard+0xae>
    {
      return errorstate;
 8006c9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c9c:	e071      	b.n	8006d82 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ca2:	2b03      	cmp	r3, #3
 8006ca4:	d036      	beq.n	8006d14 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8006ca6:	89fb      	ldrh	r3, [r7, #14]
 8006ca8:	461a      	mov	r2, r3
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681a      	ldr	r2, [r3, #0]
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cb6:	041b      	lsls	r3, r3, #16
 8006cb8:	4619      	mov	r1, r3
 8006cba:	4610      	mov	r0, r2
 8006cbc:	f001 fc93 	bl	80085e6 <SDMMC_CmdSendCSD>
 8006cc0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006cc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d001      	beq.n	8006ccc <SD_InitCard+0xdc>
    {
      return errorstate;
 8006cc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cca:	e05a      	b.n	8006d82 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	2100      	movs	r1, #0
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	f001 fa75 	bl	80081c2 <SDMMC_GetResponse>
 8006cd8:	4602      	mov	r2, r0
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	2104      	movs	r1, #4
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	f001 fa6c 	bl	80081c2 <SDMMC_GetResponse>
 8006cea:	4602      	mov	r2, r0
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	2108      	movs	r1, #8
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	f001 fa63 	bl	80081c2 <SDMMC_GetResponse>
 8006cfc:	4602      	mov	r2, r0
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	210c      	movs	r1, #12
 8006d08:	4618      	mov	r0, r3
 8006d0a:	f001 fa5a 	bl	80081c2 <SDMMC_GetResponse>
 8006d0e:	4602      	mov	r2, r0
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	2104      	movs	r1, #4
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	f001 fa51 	bl	80081c2 <SDMMC_GetResponse>
 8006d20:	4603      	mov	r3, r0
 8006d22:	0d1a      	lsrs	r2, r3, #20
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006d28:	f107 0310 	add.w	r3, r7, #16
 8006d2c:	4619      	mov	r1, r3
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f7ff fbe4 	bl	80064fc <HAL_SD_GetCardCSD>
 8006d34:	4603      	mov	r3, r0
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d002      	beq.n	8006d40 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006d3a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006d3e:	e020      	b.n	8006d82 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6819      	ldr	r1, [r3, #0]
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d48:	041b      	lsls	r3, r3, #16
 8006d4a:	f04f 0400 	mov.w	r4, #0
 8006d4e:	461a      	mov	r2, r3
 8006d50:	4623      	mov	r3, r4
 8006d52:	4608      	mov	r0, r1
 8006d54:	f001 fb40 	bl	80083d8 <SDMMC_CmdSelDesel>
 8006d58:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8006d5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d001      	beq.n	8006d64 <SD_InitCard+0x174>
  {
    return errorstate;
 8006d60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d62:	e00e      	b.n	8006d82 <SD_InitCard+0x192>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681d      	ldr	r5, [r3, #0]
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	466c      	mov	r4, sp
 8006d6c:	f103 0210 	add.w	r2, r3, #16
 8006d70:	ca07      	ldmia	r2, {r0, r1, r2}
 8006d72:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006d76:	3304      	adds	r3, #4
 8006d78:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006d7a:	4628      	mov	r0, r5
 8006d7c:	f001 f982 	bl	8008084 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8006d80:	2300      	movs	r3, #0
}
 8006d82:	4618      	mov	r0, r3
 8006d84:	3740      	adds	r7, #64	; 0x40
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bdb0      	pop	{r4, r5, r7, pc}
	...

08006d8c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b086      	sub	sp, #24
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006d94:	2300      	movs	r3, #0
 8006d96:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8006d98:	2300      	movs	r3, #0
 8006d9a:	617b      	str	r3, [r7, #20]
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4618      	mov	r0, r3
 8006da6:	f001 fb3a 	bl	800841e <SDMMC_CmdGoIdleState>
 8006daa:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d001      	beq.n	8006db6 <SD_PowerON+0x2a>
  {
    return errorstate;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	e072      	b.n	8006e9c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4618      	mov	r0, r3
 8006dbc:	f001 fb4d 	bl	800845a <SDMMC_CmdOperCond>
 8006dc0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d00d      	beq.n	8006de4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	f001 fb23 	bl	800841e <SDMMC_CmdGoIdleState>
 8006dd8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d004      	beq.n	8006dea <SD_PowerON+0x5e>
    {
      return errorstate;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	e05b      	b.n	8006e9c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2201      	movs	r2, #1
 8006de8:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006dee:	2b01      	cmp	r3, #1
 8006df0:	d137      	bne.n	8006e62 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	2100      	movs	r1, #0
 8006df8:	4618      	mov	r0, r3
 8006dfa:	f001 fb4d 	bl	8008498 <SDMMC_CmdAppCommand>
 8006dfe:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d02d      	beq.n	8006e62 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006e06:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006e0a:	e047      	b.n	8006e9c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	2100      	movs	r1, #0
 8006e12:	4618      	mov	r0, r3
 8006e14:	f001 fb40 	bl	8008498 <SDMMC_CmdAppCommand>
 8006e18:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d001      	beq.n	8006e24 <SD_PowerON+0x98>
    {
      return errorstate;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	e03b      	b.n	8006e9c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	491e      	ldr	r1, [pc, #120]	; (8006ea4 <SD_PowerON+0x118>)
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	f001 fb56 	bl	80084dc <SDMMC_CmdAppOperCommand>
 8006e30:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d002      	beq.n	8006e3e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006e38:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006e3c:	e02e      	b.n	8006e9c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	2100      	movs	r1, #0
 8006e44:	4618      	mov	r0, r3
 8006e46:	f001 f9bc 	bl	80081c2 <SDMMC_GetResponse>
 8006e4a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	0fdb      	lsrs	r3, r3, #31
 8006e50:	2b01      	cmp	r3, #1
 8006e52:	d101      	bne.n	8006e58 <SD_PowerON+0xcc>
 8006e54:	2301      	movs	r3, #1
 8006e56:	e000      	b.n	8006e5a <SD_PowerON+0xce>
 8006e58:	2300      	movs	r3, #0
 8006e5a:	613b      	str	r3, [r7, #16]

    count++;
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	3301      	adds	r3, #1
 8006e60:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d802      	bhi.n	8006e72 <SD_PowerON+0xe6>
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d0cc      	beq.n	8006e0c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d902      	bls.n	8006e82 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006e7c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006e80:	e00c      	b.n	8006e9c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8006e82:	697b      	ldr	r3, [r7, #20]
 8006e84:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d003      	beq.n	8006e94 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2201      	movs	r2, #1
 8006e90:	645a      	str	r2, [r3, #68]	; 0x44
 8006e92:	e002      	b.n	8006e9a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2200      	movs	r2, #0
 8006e98:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8006e9a:	2300      	movs	r3, #0
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	3718      	adds	r7, #24
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}
 8006ea4:	c1100000 	.word	0xc1100000

08006ea8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b084      	sub	sp, #16
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
 8006eb0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d102      	bne.n	8006ebe <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8006eb8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006ebc:	e018      	b.n	8006ef0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681a      	ldr	r2, [r3, #0]
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ec6:	041b      	lsls	r3, r3, #16
 8006ec8:	4619      	mov	r1, r3
 8006eca:	4610      	mov	r0, r2
 8006ecc:	f001 fbcb 	bl	8008666 <SDMMC_CmdSendStatus>
 8006ed0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d001      	beq.n	8006edc <SD_SendStatus+0x34>
  {
    return errorstate;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	e009      	b.n	8006ef0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	2100      	movs	r1, #0
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	f001 f96d 	bl	80081c2 <SDMMC_GetResponse>
 8006ee8:	4602      	mov	r2, r0
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8006eee:	2300      	movs	r3, #0
}
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	3710      	adds	r7, #16
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bd80      	pop	{r7, pc}

08006ef8 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b086      	sub	sp, #24
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8006f00:	2300      	movs	r3, #0
 8006f02:	60fb      	str	r3, [r7, #12]
 8006f04:	2300      	movs	r3, #0
 8006f06:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	2100      	movs	r1, #0
 8006f0e:	4618      	mov	r0, r3
 8006f10:	f001 f957 	bl	80081c2 <SDMMC_GetResponse>
 8006f14:	4603      	mov	r3, r0
 8006f16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f1a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006f1e:	d102      	bne.n	8006f26 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006f20:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006f24:	e02f      	b.n	8006f86 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006f26:	f107 030c 	add.w	r3, r7, #12
 8006f2a:	4619      	mov	r1, r3
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f000 f879 	bl	8007024 <SD_FindSCR>
 8006f32:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006f34:	697b      	ldr	r3, [r7, #20]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d001      	beq.n	8006f3e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	e023      	b.n	8006f86 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006f3e:	693b      	ldr	r3, [r7, #16]
 8006f40:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d01c      	beq.n	8006f82 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681a      	ldr	r2, [r3, #0]
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f50:	041b      	lsls	r3, r3, #16
 8006f52:	4619      	mov	r1, r3
 8006f54:	4610      	mov	r0, r2
 8006f56:	f001 fa9f 	bl	8008498 <SDMMC_CmdAppCommand>
 8006f5a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006f5c:	697b      	ldr	r3, [r7, #20]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d001      	beq.n	8006f66 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	e00f      	b.n	8006f86 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	2102      	movs	r1, #2
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	f001 fad9 	bl	8008524 <SDMMC_CmdBusWidth>
 8006f72:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006f74:	697b      	ldr	r3, [r7, #20]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d001      	beq.n	8006f7e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8006f7a:	697b      	ldr	r3, [r7, #20]
 8006f7c:	e003      	b.n	8006f86 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	e001      	b.n	8006f86 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006f82:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006f86:	4618      	mov	r0, r3
 8006f88:	3718      	adds	r7, #24
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bd80      	pop	{r7, pc}

08006f8e <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8006f8e:	b580      	push	{r7, lr}
 8006f90:	b086      	sub	sp, #24
 8006f92:	af00      	add	r7, sp, #0
 8006f94:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8006f96:	2300      	movs	r3, #0
 8006f98:	60fb      	str	r3, [r7, #12]
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	2100      	movs	r1, #0
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	f001 f90c 	bl	80081c2 <SDMMC_GetResponse>
 8006faa:	4603      	mov	r3, r0
 8006fac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fb0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006fb4:	d102      	bne.n	8006fbc <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006fb6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006fba:	e02f      	b.n	800701c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006fbc:	f107 030c 	add.w	r3, r7, #12
 8006fc0:	4619      	mov	r1, r3
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f000 f82e 	bl	8007024 <SD_FindSCR>
 8006fc8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006fca:	697b      	ldr	r3, [r7, #20]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d001      	beq.n	8006fd4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8006fd0:	697b      	ldr	r3, [r7, #20]
 8006fd2:	e023      	b.n	800701c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006fd4:	693b      	ldr	r3, [r7, #16]
 8006fd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d01c      	beq.n	8007018 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681a      	ldr	r2, [r3, #0]
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fe6:	041b      	lsls	r3, r3, #16
 8006fe8:	4619      	mov	r1, r3
 8006fea:	4610      	mov	r0, r2
 8006fec:	f001 fa54 	bl	8008498 <SDMMC_CmdAppCommand>
 8006ff0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006ff2:	697b      	ldr	r3, [r7, #20]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d001      	beq.n	8006ffc <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8006ff8:	697b      	ldr	r3, [r7, #20]
 8006ffa:	e00f      	b.n	800701c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	2100      	movs	r1, #0
 8007002:	4618      	mov	r0, r3
 8007004:	f001 fa8e 	bl	8008524 <SDMMC_CmdBusWidth>
 8007008:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800700a:	697b      	ldr	r3, [r7, #20]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d001      	beq.n	8007014 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8007010:	697b      	ldr	r3, [r7, #20]
 8007012:	e003      	b.n	800701c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007014:	2300      	movs	r3, #0
 8007016:	e001      	b.n	800701c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007018:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800701c:	4618      	mov	r0, r3
 800701e:	3718      	adds	r7, #24
 8007020:	46bd      	mov	sp, r7
 8007022:	bd80      	pop	{r7, pc}

08007024 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8007024:	b590      	push	{r4, r7, lr}
 8007026:	b08f      	sub	sp, #60	; 0x3c
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
 800702c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800702e:	f7fa fa59 	bl	80014e4 <HAL_GetTick>
 8007032:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8007034:	2300      	movs	r3, #0
 8007036:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8007038:	2300      	movs	r3, #0
 800703a:	60bb      	str	r3, [r7, #8]
 800703c:	2300      	movs	r3, #0
 800703e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	2108      	movs	r1, #8
 800704a:	4618      	mov	r0, r3
 800704c:	f001 f8f8 	bl	8008240 <SDMMC_CmdBlockLength>
 8007050:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007054:	2b00      	cmp	r3, #0
 8007056:	d001      	beq.n	800705c <SD_FindSCR+0x38>
  {
    return errorstate;
 8007058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800705a:	e0a9      	b.n	80071b0 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681a      	ldr	r2, [r3, #0]
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007064:	041b      	lsls	r3, r3, #16
 8007066:	4619      	mov	r1, r3
 8007068:	4610      	mov	r0, r2
 800706a:	f001 fa15 	bl	8008498 <SDMMC_CmdAppCommand>
 800706e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007072:	2b00      	cmp	r3, #0
 8007074:	d001      	beq.n	800707a <SD_FindSCR+0x56>
  {
    return errorstate;
 8007076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007078:	e09a      	b.n	80071b0 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800707a:	f04f 33ff 	mov.w	r3, #4294967295
 800707e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8007080:	2308      	movs	r3, #8
 8007082:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8007084:	2330      	movs	r3, #48	; 0x30
 8007086:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007088:	2302      	movs	r3, #2
 800708a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800708c:	2300      	movs	r3, #0
 800708e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8007090:	2301      	movs	r3, #1
 8007092:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f107 0210 	add.w	r2, r7, #16
 800709c:	4611      	mov	r1, r2
 800709e:	4618      	mov	r0, r3
 80070a0:	f001 f8a2 	bl	80081e8 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	4618      	mov	r0, r3
 80070aa:	f001 fa5d 	bl	8008568 <SDMMC_CmdSendSCR>
 80070ae:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80070b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d022      	beq.n	80070fc <SD_FindSCR+0xd8>
  {
    return errorstate;
 80070b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070b8:	e07a      	b.n	80071b0 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d00e      	beq.n	80070e6 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6819      	ldr	r1, [r3, #0]
 80070cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070ce:	009b      	lsls	r3, r3, #2
 80070d0:	f107 0208 	add.w	r2, r7, #8
 80070d4:	18d4      	adds	r4, r2, r3
 80070d6:	4608      	mov	r0, r1
 80070d8:	f001 f800 	bl	80080dc <SDMMC_ReadFIFO>
 80070dc:	4603      	mov	r3, r0
 80070de:	6023      	str	r3, [r4, #0]
      index++;
 80070e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070e2:	3301      	adds	r3, #1
 80070e4:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80070e6:	f7fa f9fd 	bl	80014e4 <HAL_GetTick>
 80070ea:	4602      	mov	r2, r0
 80070ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ee:	1ad3      	subs	r3, r2, r3
 80070f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070f4:	d102      	bne.n	80070fc <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80070f6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80070fa:	e059      	b.n	80071b0 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007102:	f240 432a 	movw	r3, #1066	; 0x42a
 8007106:	4013      	ands	r3, r2
 8007108:	2b00      	cmp	r3, #0
 800710a:	d0d6      	beq.n	80070ba <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007112:	f003 0308 	and.w	r3, r3, #8
 8007116:	2b00      	cmp	r3, #0
 8007118:	d005      	beq.n	8007126 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	2208      	movs	r2, #8
 8007120:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007122:	2308      	movs	r3, #8
 8007124:	e044      	b.n	80071b0 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800712c:	f003 0302 	and.w	r3, r3, #2
 8007130:	2b00      	cmp	r3, #0
 8007132:	d005      	beq.n	8007140 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	2202      	movs	r2, #2
 800713a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800713c:	2302      	movs	r3, #2
 800713e:	e037      	b.n	80071b0 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007146:	f003 0320 	and.w	r3, r3, #32
 800714a:	2b00      	cmp	r3, #0
 800714c:	d005      	beq.n	800715a <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	2220      	movs	r2, #32
 8007154:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8007156:	2320      	movs	r3, #32
 8007158:	e02a      	b.n	80071b0 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f240 523a 	movw	r2, #1338	; 0x53a
 8007162:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	061a      	lsls	r2, r3, #24
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	021b      	lsls	r3, r3, #8
 800716c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007170:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	0a1b      	lsrs	r3, r3, #8
 8007176:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800717a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	0e1b      	lsrs	r3, r3, #24
 8007180:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007184:	601a      	str	r2, [r3, #0]
    scr++;
 8007186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007188:	3304      	adds	r3, #4
 800718a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	061a      	lsls	r2, r3, #24
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	021b      	lsls	r3, r3, #8
 8007194:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007198:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800719a:	68bb      	ldr	r3, [r7, #8]
 800719c:	0a1b      	lsrs	r3, r3, #8
 800719e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80071a2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	0e1b      	lsrs	r3, r3, #24
 80071a8:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80071aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071ac:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80071ae:	2300      	movs	r3, #0
}
 80071b0:	4618      	mov	r0, r3
 80071b2:	373c      	adds	r7, #60	; 0x3c
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bd90      	pop	{r4, r7, pc}

080071b8 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b086      	sub	sp, #24
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071c4:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071ca:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80071cc:	693b      	ldr	r3, [r7, #16]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d03f      	beq.n	8007252 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80071d2:	2300      	movs	r3, #0
 80071d4:	617b      	str	r3, [r7, #20]
 80071d6:	e033      	b.n	8007240 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4618      	mov	r0, r3
 80071de:	f000 ff7d 	bl	80080dc <SDMMC_ReadFIFO>
 80071e2:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	b2da      	uxtb	r2, r3
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	701a      	strb	r2, [r3, #0]
      tmp++;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	3301      	adds	r3, #1
 80071f0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80071f2:	693b      	ldr	r3, [r7, #16]
 80071f4:	3b01      	subs	r3, #1
 80071f6:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	0a1b      	lsrs	r3, r3, #8
 80071fc:	b2da      	uxtb	r2, r3
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	3301      	adds	r3, #1
 8007206:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007208:	693b      	ldr	r3, [r7, #16]
 800720a:	3b01      	subs	r3, #1
 800720c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	0c1b      	lsrs	r3, r3, #16
 8007212:	b2da      	uxtb	r2, r3
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	3301      	adds	r3, #1
 800721c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800721e:	693b      	ldr	r3, [r7, #16]
 8007220:	3b01      	subs	r3, #1
 8007222:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	0e1b      	lsrs	r3, r3, #24
 8007228:	b2da      	uxtb	r2, r3
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	3301      	adds	r3, #1
 8007232:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007234:	693b      	ldr	r3, [r7, #16]
 8007236:	3b01      	subs	r3, #1
 8007238:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800723a:	697b      	ldr	r3, [r7, #20]
 800723c:	3301      	adds	r3, #1
 800723e:	617b      	str	r3, [r7, #20]
 8007240:	697b      	ldr	r3, [r7, #20]
 8007242:	2b07      	cmp	r3, #7
 8007244:	d9c8      	bls.n	80071d8 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	68fa      	ldr	r2, [r7, #12]
 800724a:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	693a      	ldr	r2, [r7, #16]
 8007250:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8007252:	bf00      	nop
 8007254:	3718      	adds	r7, #24
 8007256:	46bd      	mov	sp, r7
 8007258:	bd80      	pop	{r7, pc}

0800725a <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800725a:	b580      	push	{r7, lr}
 800725c:	b086      	sub	sp, #24
 800725e:	af00      	add	r7, sp, #0
 8007260:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6a1b      	ldr	r3, [r3, #32]
 8007266:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800726c:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800726e:	693b      	ldr	r3, [r7, #16]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d043      	beq.n	80072fc <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8007274:	2300      	movs	r3, #0
 8007276:	617b      	str	r3, [r7, #20]
 8007278:	e037      	b.n	80072ea <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	781b      	ldrb	r3, [r3, #0]
 800727e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	3301      	adds	r3, #1
 8007284:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007286:	693b      	ldr	r3, [r7, #16]
 8007288:	3b01      	subs	r3, #1
 800728a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	781b      	ldrb	r3, [r3, #0]
 8007290:	021a      	lsls	r2, r3, #8
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	4313      	orrs	r3, r2
 8007296:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	3301      	adds	r3, #1
 800729c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800729e:	693b      	ldr	r3, [r7, #16]
 80072a0:	3b01      	subs	r3, #1
 80072a2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	781b      	ldrb	r3, [r3, #0]
 80072a8:	041a      	lsls	r2, r3, #16
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	4313      	orrs	r3, r2
 80072ae:	60bb      	str	r3, [r7, #8]
      tmp++;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	3301      	adds	r3, #1
 80072b4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80072b6:	693b      	ldr	r3, [r7, #16]
 80072b8:	3b01      	subs	r3, #1
 80072ba:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	781b      	ldrb	r3, [r3, #0]
 80072c0:	061a      	lsls	r2, r3, #24
 80072c2:	68bb      	ldr	r3, [r7, #8]
 80072c4:	4313      	orrs	r3, r2
 80072c6:	60bb      	str	r3, [r7, #8]
      tmp++;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	3301      	adds	r3, #1
 80072cc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80072ce:	693b      	ldr	r3, [r7, #16]
 80072d0:	3b01      	subs	r3, #1
 80072d2:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f107 0208 	add.w	r2, r7, #8
 80072dc:	4611      	mov	r1, r2
 80072de:	4618      	mov	r0, r3
 80072e0:	f000 ff09 	bl	80080f6 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	3301      	adds	r3, #1
 80072e8:	617b      	str	r3, [r7, #20]
 80072ea:	697b      	ldr	r3, [r7, #20]
 80072ec:	2b07      	cmp	r3, #7
 80072ee:	d9c4      	bls.n	800727a <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	68fa      	ldr	r2, [r7, #12]
 80072f4:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	693a      	ldr	r2, [r7, #16]
 80072fa:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 80072fc:	bf00      	nop
 80072fe:	3718      	adds	r7, #24
 8007300:	46bd      	mov	sp, r7
 8007302:	bd80      	pop	{r7, pc}

08007304 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b082      	sub	sp, #8
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d101      	bne.n	8007316 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007312:	2301      	movs	r3, #1
 8007314:	e01d      	b.n	8007352 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800731c:	b2db      	uxtb	r3, r3
 800731e:	2b00      	cmp	r3, #0
 8007320:	d106      	bne.n	8007330 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2200      	movs	r2, #0
 8007326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f000 f815 	bl	800735a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2202      	movs	r2, #2
 8007334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681a      	ldr	r2, [r3, #0]
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	3304      	adds	r3, #4
 8007340:	4619      	mov	r1, r3
 8007342:	4610      	mov	r0, r2
 8007344:	f000 f986 	bl	8007654 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2201      	movs	r2, #1
 800734c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007350:	2300      	movs	r3, #0
}
 8007352:	4618      	mov	r0, r3
 8007354:	3708      	adds	r7, #8
 8007356:	46bd      	mov	sp, r7
 8007358:	bd80      	pop	{r7, pc}

0800735a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800735a:	b480      	push	{r7}
 800735c:	b083      	sub	sp, #12
 800735e:	af00      	add	r7, sp, #0
 8007360:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007362:	bf00      	nop
 8007364:	370c      	adds	r7, #12
 8007366:	46bd      	mov	sp, r7
 8007368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736c:	4770      	bx	lr
	...

08007370 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007370:	b480      	push	{r7}
 8007372:	b085      	sub	sp, #20
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	68da      	ldr	r2, [r3, #12]
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f042 0201 	orr.w	r2, r2, #1
 8007386:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	689a      	ldr	r2, [r3, #8]
 800738e:	4b0c      	ldr	r3, [pc, #48]	; (80073c0 <HAL_TIM_Base_Start_IT+0x50>)
 8007390:	4013      	ands	r3, r2
 8007392:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	2b06      	cmp	r3, #6
 8007398:	d00b      	beq.n	80073b2 <HAL_TIM_Base_Start_IT+0x42>
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073a0:	d007      	beq.n	80073b2 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	681a      	ldr	r2, [r3, #0]
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f042 0201 	orr.w	r2, r2, #1
 80073b0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80073b2:	2300      	movs	r3, #0
}
 80073b4:	4618      	mov	r0, r3
 80073b6:	3714      	adds	r7, #20
 80073b8:	46bd      	mov	sp, r7
 80073ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073be:	4770      	bx	lr
 80073c0:	00010007 	.word	0x00010007

080073c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b082      	sub	sp, #8
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	691b      	ldr	r3, [r3, #16]
 80073d2:	f003 0302 	and.w	r3, r3, #2
 80073d6:	2b02      	cmp	r3, #2
 80073d8:	d122      	bne.n	8007420 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	68db      	ldr	r3, [r3, #12]
 80073e0:	f003 0302 	and.w	r3, r3, #2
 80073e4:	2b02      	cmp	r3, #2
 80073e6:	d11b      	bne.n	8007420 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f06f 0202 	mvn.w	r2, #2
 80073f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2201      	movs	r2, #1
 80073f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	699b      	ldr	r3, [r3, #24]
 80073fe:	f003 0303 	and.w	r3, r3, #3
 8007402:	2b00      	cmp	r3, #0
 8007404:	d003      	beq.n	800740e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f000 f905 	bl	8007616 <HAL_TIM_IC_CaptureCallback>
 800740c:	e005      	b.n	800741a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f000 f8f7 	bl	8007602 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	f000 f908 	bl	800762a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2200      	movs	r2, #0
 800741e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	691b      	ldr	r3, [r3, #16]
 8007426:	f003 0304 	and.w	r3, r3, #4
 800742a:	2b04      	cmp	r3, #4
 800742c:	d122      	bne.n	8007474 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	68db      	ldr	r3, [r3, #12]
 8007434:	f003 0304 	and.w	r3, r3, #4
 8007438:	2b04      	cmp	r3, #4
 800743a:	d11b      	bne.n	8007474 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f06f 0204 	mvn.w	r2, #4
 8007444:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2202      	movs	r2, #2
 800744a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	699b      	ldr	r3, [r3, #24]
 8007452:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007456:	2b00      	cmp	r3, #0
 8007458:	d003      	beq.n	8007462 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f000 f8db 	bl	8007616 <HAL_TIM_IC_CaptureCallback>
 8007460:	e005      	b.n	800746e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	f000 f8cd 	bl	8007602 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	f000 f8de 	bl	800762a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2200      	movs	r2, #0
 8007472:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	691b      	ldr	r3, [r3, #16]
 800747a:	f003 0308 	and.w	r3, r3, #8
 800747e:	2b08      	cmp	r3, #8
 8007480:	d122      	bne.n	80074c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	68db      	ldr	r3, [r3, #12]
 8007488:	f003 0308 	and.w	r3, r3, #8
 800748c:	2b08      	cmp	r3, #8
 800748e:	d11b      	bne.n	80074c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f06f 0208 	mvn.w	r2, #8
 8007498:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2204      	movs	r2, #4
 800749e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	69db      	ldr	r3, [r3, #28]
 80074a6:	f003 0303 	and.w	r3, r3, #3
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d003      	beq.n	80074b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f000 f8b1 	bl	8007616 <HAL_TIM_IC_CaptureCallback>
 80074b4:	e005      	b.n	80074c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f000 f8a3 	bl	8007602 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	f000 f8b4 	bl	800762a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2200      	movs	r2, #0
 80074c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	691b      	ldr	r3, [r3, #16]
 80074ce:	f003 0310 	and.w	r3, r3, #16
 80074d2:	2b10      	cmp	r3, #16
 80074d4:	d122      	bne.n	800751c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	68db      	ldr	r3, [r3, #12]
 80074dc:	f003 0310 	and.w	r3, r3, #16
 80074e0:	2b10      	cmp	r3, #16
 80074e2:	d11b      	bne.n	800751c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f06f 0210 	mvn.w	r2, #16
 80074ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2208      	movs	r2, #8
 80074f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	69db      	ldr	r3, [r3, #28]
 80074fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d003      	beq.n	800750a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f000 f887 	bl	8007616 <HAL_TIM_IC_CaptureCallback>
 8007508:	e005      	b.n	8007516 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f000 f879 	bl	8007602 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007510:	6878      	ldr	r0, [r7, #4]
 8007512:	f000 f88a 	bl	800762a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2200      	movs	r2, #0
 800751a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	691b      	ldr	r3, [r3, #16]
 8007522:	f003 0301 	and.w	r3, r3, #1
 8007526:	2b01      	cmp	r3, #1
 8007528:	d10e      	bne.n	8007548 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	68db      	ldr	r3, [r3, #12]
 8007530:	f003 0301 	and.w	r3, r3, #1
 8007534:	2b01      	cmp	r3, #1
 8007536:	d107      	bne.n	8007548 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f06f 0201 	mvn.w	r2, #1
 8007540:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f7f9 fcbc 	bl	8000ec0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	691b      	ldr	r3, [r3, #16]
 800754e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007552:	2b80      	cmp	r3, #128	; 0x80
 8007554:	d10e      	bne.n	8007574 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	68db      	ldr	r3, [r3, #12]
 800755c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007560:	2b80      	cmp	r3, #128	; 0x80
 8007562:	d107      	bne.n	8007574 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800756c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f000 f91a 	bl	80077a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	691b      	ldr	r3, [r3, #16]
 800757a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800757e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007582:	d10e      	bne.n	80075a2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	68db      	ldr	r3, [r3, #12]
 800758a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800758e:	2b80      	cmp	r3, #128	; 0x80
 8007590:	d107      	bne.n	80075a2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800759a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f000 f90d 	bl	80077bc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	691b      	ldr	r3, [r3, #16]
 80075a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075ac:	2b40      	cmp	r3, #64	; 0x40
 80075ae:	d10e      	bne.n	80075ce <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	68db      	ldr	r3, [r3, #12]
 80075b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075ba:	2b40      	cmp	r3, #64	; 0x40
 80075bc:	d107      	bne.n	80075ce <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80075c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	f000 f838 	bl	800763e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	691b      	ldr	r3, [r3, #16]
 80075d4:	f003 0320 	and.w	r3, r3, #32
 80075d8:	2b20      	cmp	r3, #32
 80075da:	d10e      	bne.n	80075fa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	68db      	ldr	r3, [r3, #12]
 80075e2:	f003 0320 	and.w	r3, r3, #32
 80075e6:	2b20      	cmp	r3, #32
 80075e8:	d107      	bne.n	80075fa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f06f 0220 	mvn.w	r2, #32
 80075f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80075f4:	6878      	ldr	r0, [r7, #4]
 80075f6:	f000 f8cd 	bl	8007794 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80075fa:	bf00      	nop
 80075fc:	3708      	adds	r7, #8
 80075fe:	46bd      	mov	sp, r7
 8007600:	bd80      	pop	{r7, pc}

08007602 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007602:	b480      	push	{r7}
 8007604:	b083      	sub	sp, #12
 8007606:	af00      	add	r7, sp, #0
 8007608:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800760a:	bf00      	nop
 800760c:	370c      	adds	r7, #12
 800760e:	46bd      	mov	sp, r7
 8007610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007614:	4770      	bx	lr

08007616 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007616:	b480      	push	{r7}
 8007618:	b083      	sub	sp, #12
 800761a:	af00      	add	r7, sp, #0
 800761c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800761e:	bf00      	nop
 8007620:	370c      	adds	r7, #12
 8007622:	46bd      	mov	sp, r7
 8007624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007628:	4770      	bx	lr

0800762a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800762a:	b480      	push	{r7}
 800762c:	b083      	sub	sp, #12
 800762e:	af00      	add	r7, sp, #0
 8007630:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007632:	bf00      	nop
 8007634:	370c      	adds	r7, #12
 8007636:	46bd      	mov	sp, r7
 8007638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763c:	4770      	bx	lr

0800763e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800763e:	b480      	push	{r7}
 8007640:	b083      	sub	sp, #12
 8007642:	af00      	add	r7, sp, #0
 8007644:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007646:	bf00      	nop
 8007648:	370c      	adds	r7, #12
 800764a:	46bd      	mov	sp, r7
 800764c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007650:	4770      	bx	lr
	...

08007654 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007654:	b480      	push	{r7}
 8007656:	b085      	sub	sp, #20
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
 800765c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	4a40      	ldr	r2, [pc, #256]	; (8007768 <TIM_Base_SetConfig+0x114>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d013      	beq.n	8007694 <TIM_Base_SetConfig+0x40>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007672:	d00f      	beq.n	8007694 <TIM_Base_SetConfig+0x40>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	4a3d      	ldr	r2, [pc, #244]	; (800776c <TIM_Base_SetConfig+0x118>)
 8007678:	4293      	cmp	r3, r2
 800767a:	d00b      	beq.n	8007694 <TIM_Base_SetConfig+0x40>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	4a3c      	ldr	r2, [pc, #240]	; (8007770 <TIM_Base_SetConfig+0x11c>)
 8007680:	4293      	cmp	r3, r2
 8007682:	d007      	beq.n	8007694 <TIM_Base_SetConfig+0x40>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	4a3b      	ldr	r2, [pc, #236]	; (8007774 <TIM_Base_SetConfig+0x120>)
 8007688:	4293      	cmp	r3, r2
 800768a:	d003      	beq.n	8007694 <TIM_Base_SetConfig+0x40>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	4a3a      	ldr	r2, [pc, #232]	; (8007778 <TIM_Base_SetConfig+0x124>)
 8007690:	4293      	cmp	r3, r2
 8007692:	d108      	bne.n	80076a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800769a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	685b      	ldr	r3, [r3, #4]
 80076a0:	68fa      	ldr	r2, [r7, #12]
 80076a2:	4313      	orrs	r3, r2
 80076a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	4a2f      	ldr	r2, [pc, #188]	; (8007768 <TIM_Base_SetConfig+0x114>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d02b      	beq.n	8007706 <TIM_Base_SetConfig+0xb2>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076b4:	d027      	beq.n	8007706 <TIM_Base_SetConfig+0xb2>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	4a2c      	ldr	r2, [pc, #176]	; (800776c <TIM_Base_SetConfig+0x118>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d023      	beq.n	8007706 <TIM_Base_SetConfig+0xb2>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	4a2b      	ldr	r2, [pc, #172]	; (8007770 <TIM_Base_SetConfig+0x11c>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d01f      	beq.n	8007706 <TIM_Base_SetConfig+0xb2>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	4a2a      	ldr	r2, [pc, #168]	; (8007774 <TIM_Base_SetConfig+0x120>)
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d01b      	beq.n	8007706 <TIM_Base_SetConfig+0xb2>
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	4a29      	ldr	r2, [pc, #164]	; (8007778 <TIM_Base_SetConfig+0x124>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d017      	beq.n	8007706 <TIM_Base_SetConfig+0xb2>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	4a28      	ldr	r2, [pc, #160]	; (800777c <TIM_Base_SetConfig+0x128>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d013      	beq.n	8007706 <TIM_Base_SetConfig+0xb2>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	4a27      	ldr	r2, [pc, #156]	; (8007780 <TIM_Base_SetConfig+0x12c>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d00f      	beq.n	8007706 <TIM_Base_SetConfig+0xb2>
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	4a26      	ldr	r2, [pc, #152]	; (8007784 <TIM_Base_SetConfig+0x130>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d00b      	beq.n	8007706 <TIM_Base_SetConfig+0xb2>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	4a25      	ldr	r2, [pc, #148]	; (8007788 <TIM_Base_SetConfig+0x134>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d007      	beq.n	8007706 <TIM_Base_SetConfig+0xb2>
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	4a24      	ldr	r2, [pc, #144]	; (800778c <TIM_Base_SetConfig+0x138>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d003      	beq.n	8007706 <TIM_Base_SetConfig+0xb2>
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	4a23      	ldr	r2, [pc, #140]	; (8007790 <TIM_Base_SetConfig+0x13c>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d108      	bne.n	8007718 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800770c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	68db      	ldr	r3, [r3, #12]
 8007712:	68fa      	ldr	r2, [r7, #12]
 8007714:	4313      	orrs	r3, r2
 8007716:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	695b      	ldr	r3, [r3, #20]
 8007722:	4313      	orrs	r3, r2
 8007724:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	68fa      	ldr	r2, [r7, #12]
 800772a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	689a      	ldr	r2, [r3, #8]
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	681a      	ldr	r2, [r3, #0]
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	4a0a      	ldr	r2, [pc, #40]	; (8007768 <TIM_Base_SetConfig+0x114>)
 8007740:	4293      	cmp	r3, r2
 8007742:	d003      	beq.n	800774c <TIM_Base_SetConfig+0xf8>
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	4a0c      	ldr	r2, [pc, #48]	; (8007778 <TIM_Base_SetConfig+0x124>)
 8007748:	4293      	cmp	r3, r2
 800774a:	d103      	bne.n	8007754 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	691a      	ldr	r2, [r3, #16]
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2201      	movs	r2, #1
 8007758:	615a      	str	r2, [r3, #20]
}
 800775a:	bf00      	nop
 800775c:	3714      	adds	r7, #20
 800775e:	46bd      	mov	sp, r7
 8007760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007764:	4770      	bx	lr
 8007766:	bf00      	nop
 8007768:	40010000 	.word	0x40010000
 800776c:	40000400 	.word	0x40000400
 8007770:	40000800 	.word	0x40000800
 8007774:	40000c00 	.word	0x40000c00
 8007778:	40010400 	.word	0x40010400
 800777c:	40014000 	.word	0x40014000
 8007780:	40014400 	.word	0x40014400
 8007784:	40014800 	.word	0x40014800
 8007788:	40001800 	.word	0x40001800
 800778c:	40001c00 	.word	0x40001c00
 8007790:	40002000 	.word	0x40002000

08007794 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007794:	b480      	push	{r7}
 8007796:	b083      	sub	sp, #12
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800779c:	bf00      	nop
 800779e:	370c      	adds	r7, #12
 80077a0:	46bd      	mov	sp, r7
 80077a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a6:	4770      	bx	lr

080077a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80077a8:	b480      	push	{r7}
 80077aa:	b083      	sub	sp, #12
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80077b0:	bf00      	nop
 80077b2:	370c      	adds	r7, #12
 80077b4:	46bd      	mov	sp, r7
 80077b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ba:	4770      	bx	lr

080077bc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80077bc:	b480      	push	{r7}
 80077be:	b083      	sub	sp, #12
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80077c4:	bf00      	nop
 80077c6:	370c      	adds	r7, #12
 80077c8:	46bd      	mov	sp, r7
 80077ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ce:	4770      	bx	lr

080077d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b082      	sub	sp, #8
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d101      	bne.n	80077e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80077de:	2301      	movs	r3, #1
 80077e0:	e040      	b.n	8007864 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d106      	bne.n	80077f8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2200      	movs	r2, #0
 80077ee:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f7f9 fcf8 	bl	80011e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2224      	movs	r2, #36	; 0x24
 80077fc:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	681a      	ldr	r2, [r3, #0]
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f022 0201 	bic.w	r2, r2, #1
 800780c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f000 f82c 	bl	800786c <UART_SetConfig>
 8007814:	4603      	mov	r3, r0
 8007816:	2b01      	cmp	r3, #1
 8007818:	d101      	bne.n	800781e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800781a:	2301      	movs	r3, #1
 800781c:	e022      	b.n	8007864 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007822:	2b00      	cmp	r3, #0
 8007824:	d002      	beq.n	800782c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	f000 faca 	bl	8007dc0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	685a      	ldr	r2, [r3, #4]
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800783a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	689a      	ldr	r2, [r3, #8]
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800784a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	681a      	ldr	r2, [r3, #0]
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f042 0201 	orr.w	r2, r2, #1
 800785a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	f000 fb51 	bl	8007f04 <UART_CheckIdleState>
 8007862:	4603      	mov	r3, r0
}
 8007864:	4618      	mov	r0, r3
 8007866:	3708      	adds	r7, #8
 8007868:	46bd      	mov	sp, r7
 800786a:	bd80      	pop	{r7, pc}

0800786c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b088      	sub	sp, #32
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8007874:	2300      	movs	r3, #0
 8007876:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8007878:	2300      	movs	r3, #0
 800787a:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	689a      	ldr	r2, [r3, #8]
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	691b      	ldr	r3, [r3, #16]
 8007884:	431a      	orrs	r2, r3
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	695b      	ldr	r3, [r3, #20]
 800788a:	431a      	orrs	r2, r3
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	69db      	ldr	r3, [r3, #28]
 8007890:	4313      	orrs	r3, r2
 8007892:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	681a      	ldr	r2, [r3, #0]
 800789a:	4bb1      	ldr	r3, [pc, #708]	; (8007b60 <UART_SetConfig+0x2f4>)
 800789c:	4013      	ands	r3, r2
 800789e:	687a      	ldr	r2, [r7, #4]
 80078a0:	6812      	ldr	r2, [r2, #0]
 80078a2:	6939      	ldr	r1, [r7, #16]
 80078a4:	430b      	orrs	r3, r1
 80078a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	685b      	ldr	r3, [r3, #4]
 80078ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	68da      	ldr	r2, [r3, #12]
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	430a      	orrs	r2, r1
 80078bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	699b      	ldr	r3, [r3, #24]
 80078c2:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6a1b      	ldr	r3, [r3, #32]
 80078c8:	693a      	ldr	r2, [r7, #16]
 80078ca:	4313      	orrs	r3, r2
 80078cc:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	689b      	ldr	r3, [r3, #8]
 80078d4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	693a      	ldr	r2, [r7, #16]
 80078de:	430a      	orrs	r2, r1
 80078e0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	4a9f      	ldr	r2, [pc, #636]	; (8007b64 <UART_SetConfig+0x2f8>)
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d121      	bne.n	8007930 <UART_SetConfig+0xc4>
 80078ec:	4b9e      	ldr	r3, [pc, #632]	; (8007b68 <UART_SetConfig+0x2fc>)
 80078ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078f2:	f003 0303 	and.w	r3, r3, #3
 80078f6:	2b03      	cmp	r3, #3
 80078f8:	d816      	bhi.n	8007928 <UART_SetConfig+0xbc>
 80078fa:	a201      	add	r2, pc, #4	; (adr r2, 8007900 <UART_SetConfig+0x94>)
 80078fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007900:	08007911 	.word	0x08007911
 8007904:	0800791d 	.word	0x0800791d
 8007908:	08007917 	.word	0x08007917
 800790c:	08007923 	.word	0x08007923
 8007910:	2301      	movs	r3, #1
 8007912:	77fb      	strb	r3, [r7, #31]
 8007914:	e151      	b.n	8007bba <UART_SetConfig+0x34e>
 8007916:	2302      	movs	r3, #2
 8007918:	77fb      	strb	r3, [r7, #31]
 800791a:	e14e      	b.n	8007bba <UART_SetConfig+0x34e>
 800791c:	2304      	movs	r3, #4
 800791e:	77fb      	strb	r3, [r7, #31]
 8007920:	e14b      	b.n	8007bba <UART_SetConfig+0x34e>
 8007922:	2308      	movs	r3, #8
 8007924:	77fb      	strb	r3, [r7, #31]
 8007926:	e148      	b.n	8007bba <UART_SetConfig+0x34e>
 8007928:	2310      	movs	r3, #16
 800792a:	77fb      	strb	r3, [r7, #31]
 800792c:	bf00      	nop
 800792e:	e144      	b.n	8007bba <UART_SetConfig+0x34e>
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	4a8d      	ldr	r2, [pc, #564]	; (8007b6c <UART_SetConfig+0x300>)
 8007936:	4293      	cmp	r3, r2
 8007938:	d134      	bne.n	80079a4 <UART_SetConfig+0x138>
 800793a:	4b8b      	ldr	r3, [pc, #556]	; (8007b68 <UART_SetConfig+0x2fc>)
 800793c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007940:	f003 030c 	and.w	r3, r3, #12
 8007944:	2b0c      	cmp	r3, #12
 8007946:	d829      	bhi.n	800799c <UART_SetConfig+0x130>
 8007948:	a201      	add	r2, pc, #4	; (adr r2, 8007950 <UART_SetConfig+0xe4>)
 800794a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800794e:	bf00      	nop
 8007950:	08007985 	.word	0x08007985
 8007954:	0800799d 	.word	0x0800799d
 8007958:	0800799d 	.word	0x0800799d
 800795c:	0800799d 	.word	0x0800799d
 8007960:	08007991 	.word	0x08007991
 8007964:	0800799d 	.word	0x0800799d
 8007968:	0800799d 	.word	0x0800799d
 800796c:	0800799d 	.word	0x0800799d
 8007970:	0800798b 	.word	0x0800798b
 8007974:	0800799d 	.word	0x0800799d
 8007978:	0800799d 	.word	0x0800799d
 800797c:	0800799d 	.word	0x0800799d
 8007980:	08007997 	.word	0x08007997
 8007984:	2300      	movs	r3, #0
 8007986:	77fb      	strb	r3, [r7, #31]
 8007988:	e117      	b.n	8007bba <UART_SetConfig+0x34e>
 800798a:	2302      	movs	r3, #2
 800798c:	77fb      	strb	r3, [r7, #31]
 800798e:	e114      	b.n	8007bba <UART_SetConfig+0x34e>
 8007990:	2304      	movs	r3, #4
 8007992:	77fb      	strb	r3, [r7, #31]
 8007994:	e111      	b.n	8007bba <UART_SetConfig+0x34e>
 8007996:	2308      	movs	r3, #8
 8007998:	77fb      	strb	r3, [r7, #31]
 800799a:	e10e      	b.n	8007bba <UART_SetConfig+0x34e>
 800799c:	2310      	movs	r3, #16
 800799e:	77fb      	strb	r3, [r7, #31]
 80079a0:	bf00      	nop
 80079a2:	e10a      	b.n	8007bba <UART_SetConfig+0x34e>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	4a71      	ldr	r2, [pc, #452]	; (8007b70 <UART_SetConfig+0x304>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d120      	bne.n	80079f0 <UART_SetConfig+0x184>
 80079ae:	4b6e      	ldr	r3, [pc, #440]	; (8007b68 <UART_SetConfig+0x2fc>)
 80079b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079b4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80079b8:	2b10      	cmp	r3, #16
 80079ba:	d00f      	beq.n	80079dc <UART_SetConfig+0x170>
 80079bc:	2b10      	cmp	r3, #16
 80079be:	d802      	bhi.n	80079c6 <UART_SetConfig+0x15a>
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d005      	beq.n	80079d0 <UART_SetConfig+0x164>
 80079c4:	e010      	b.n	80079e8 <UART_SetConfig+0x17c>
 80079c6:	2b20      	cmp	r3, #32
 80079c8:	d005      	beq.n	80079d6 <UART_SetConfig+0x16a>
 80079ca:	2b30      	cmp	r3, #48	; 0x30
 80079cc:	d009      	beq.n	80079e2 <UART_SetConfig+0x176>
 80079ce:	e00b      	b.n	80079e8 <UART_SetConfig+0x17c>
 80079d0:	2300      	movs	r3, #0
 80079d2:	77fb      	strb	r3, [r7, #31]
 80079d4:	e0f1      	b.n	8007bba <UART_SetConfig+0x34e>
 80079d6:	2302      	movs	r3, #2
 80079d8:	77fb      	strb	r3, [r7, #31]
 80079da:	e0ee      	b.n	8007bba <UART_SetConfig+0x34e>
 80079dc:	2304      	movs	r3, #4
 80079de:	77fb      	strb	r3, [r7, #31]
 80079e0:	e0eb      	b.n	8007bba <UART_SetConfig+0x34e>
 80079e2:	2308      	movs	r3, #8
 80079e4:	77fb      	strb	r3, [r7, #31]
 80079e6:	e0e8      	b.n	8007bba <UART_SetConfig+0x34e>
 80079e8:	2310      	movs	r3, #16
 80079ea:	77fb      	strb	r3, [r7, #31]
 80079ec:	bf00      	nop
 80079ee:	e0e4      	b.n	8007bba <UART_SetConfig+0x34e>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4a5f      	ldr	r2, [pc, #380]	; (8007b74 <UART_SetConfig+0x308>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d120      	bne.n	8007a3c <UART_SetConfig+0x1d0>
 80079fa:	4b5b      	ldr	r3, [pc, #364]	; (8007b68 <UART_SetConfig+0x2fc>)
 80079fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a00:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007a04:	2b40      	cmp	r3, #64	; 0x40
 8007a06:	d00f      	beq.n	8007a28 <UART_SetConfig+0x1bc>
 8007a08:	2b40      	cmp	r3, #64	; 0x40
 8007a0a:	d802      	bhi.n	8007a12 <UART_SetConfig+0x1a6>
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d005      	beq.n	8007a1c <UART_SetConfig+0x1b0>
 8007a10:	e010      	b.n	8007a34 <UART_SetConfig+0x1c8>
 8007a12:	2b80      	cmp	r3, #128	; 0x80
 8007a14:	d005      	beq.n	8007a22 <UART_SetConfig+0x1b6>
 8007a16:	2bc0      	cmp	r3, #192	; 0xc0
 8007a18:	d009      	beq.n	8007a2e <UART_SetConfig+0x1c2>
 8007a1a:	e00b      	b.n	8007a34 <UART_SetConfig+0x1c8>
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	77fb      	strb	r3, [r7, #31]
 8007a20:	e0cb      	b.n	8007bba <UART_SetConfig+0x34e>
 8007a22:	2302      	movs	r3, #2
 8007a24:	77fb      	strb	r3, [r7, #31]
 8007a26:	e0c8      	b.n	8007bba <UART_SetConfig+0x34e>
 8007a28:	2304      	movs	r3, #4
 8007a2a:	77fb      	strb	r3, [r7, #31]
 8007a2c:	e0c5      	b.n	8007bba <UART_SetConfig+0x34e>
 8007a2e:	2308      	movs	r3, #8
 8007a30:	77fb      	strb	r3, [r7, #31]
 8007a32:	e0c2      	b.n	8007bba <UART_SetConfig+0x34e>
 8007a34:	2310      	movs	r3, #16
 8007a36:	77fb      	strb	r3, [r7, #31]
 8007a38:	bf00      	nop
 8007a3a:	e0be      	b.n	8007bba <UART_SetConfig+0x34e>
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	4a4d      	ldr	r2, [pc, #308]	; (8007b78 <UART_SetConfig+0x30c>)
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d124      	bne.n	8007a90 <UART_SetConfig+0x224>
 8007a46:	4b48      	ldr	r3, [pc, #288]	; (8007b68 <UART_SetConfig+0x2fc>)
 8007a48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a54:	d012      	beq.n	8007a7c <UART_SetConfig+0x210>
 8007a56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a5a:	d802      	bhi.n	8007a62 <UART_SetConfig+0x1f6>
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d007      	beq.n	8007a70 <UART_SetConfig+0x204>
 8007a60:	e012      	b.n	8007a88 <UART_SetConfig+0x21c>
 8007a62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a66:	d006      	beq.n	8007a76 <UART_SetConfig+0x20a>
 8007a68:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a6c:	d009      	beq.n	8007a82 <UART_SetConfig+0x216>
 8007a6e:	e00b      	b.n	8007a88 <UART_SetConfig+0x21c>
 8007a70:	2300      	movs	r3, #0
 8007a72:	77fb      	strb	r3, [r7, #31]
 8007a74:	e0a1      	b.n	8007bba <UART_SetConfig+0x34e>
 8007a76:	2302      	movs	r3, #2
 8007a78:	77fb      	strb	r3, [r7, #31]
 8007a7a:	e09e      	b.n	8007bba <UART_SetConfig+0x34e>
 8007a7c:	2304      	movs	r3, #4
 8007a7e:	77fb      	strb	r3, [r7, #31]
 8007a80:	e09b      	b.n	8007bba <UART_SetConfig+0x34e>
 8007a82:	2308      	movs	r3, #8
 8007a84:	77fb      	strb	r3, [r7, #31]
 8007a86:	e098      	b.n	8007bba <UART_SetConfig+0x34e>
 8007a88:	2310      	movs	r3, #16
 8007a8a:	77fb      	strb	r3, [r7, #31]
 8007a8c:	bf00      	nop
 8007a8e:	e094      	b.n	8007bba <UART_SetConfig+0x34e>
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	4a39      	ldr	r2, [pc, #228]	; (8007b7c <UART_SetConfig+0x310>)
 8007a96:	4293      	cmp	r3, r2
 8007a98:	d124      	bne.n	8007ae4 <UART_SetConfig+0x278>
 8007a9a:	4b33      	ldr	r3, [pc, #204]	; (8007b68 <UART_SetConfig+0x2fc>)
 8007a9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007aa0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007aa4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007aa8:	d012      	beq.n	8007ad0 <UART_SetConfig+0x264>
 8007aaa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007aae:	d802      	bhi.n	8007ab6 <UART_SetConfig+0x24a>
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d007      	beq.n	8007ac4 <UART_SetConfig+0x258>
 8007ab4:	e012      	b.n	8007adc <UART_SetConfig+0x270>
 8007ab6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007aba:	d006      	beq.n	8007aca <UART_SetConfig+0x25e>
 8007abc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007ac0:	d009      	beq.n	8007ad6 <UART_SetConfig+0x26a>
 8007ac2:	e00b      	b.n	8007adc <UART_SetConfig+0x270>
 8007ac4:	2301      	movs	r3, #1
 8007ac6:	77fb      	strb	r3, [r7, #31]
 8007ac8:	e077      	b.n	8007bba <UART_SetConfig+0x34e>
 8007aca:	2302      	movs	r3, #2
 8007acc:	77fb      	strb	r3, [r7, #31]
 8007ace:	e074      	b.n	8007bba <UART_SetConfig+0x34e>
 8007ad0:	2304      	movs	r3, #4
 8007ad2:	77fb      	strb	r3, [r7, #31]
 8007ad4:	e071      	b.n	8007bba <UART_SetConfig+0x34e>
 8007ad6:	2308      	movs	r3, #8
 8007ad8:	77fb      	strb	r3, [r7, #31]
 8007ada:	e06e      	b.n	8007bba <UART_SetConfig+0x34e>
 8007adc:	2310      	movs	r3, #16
 8007ade:	77fb      	strb	r3, [r7, #31]
 8007ae0:	bf00      	nop
 8007ae2:	e06a      	b.n	8007bba <UART_SetConfig+0x34e>
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	4a25      	ldr	r2, [pc, #148]	; (8007b80 <UART_SetConfig+0x314>)
 8007aea:	4293      	cmp	r3, r2
 8007aec:	d124      	bne.n	8007b38 <UART_SetConfig+0x2cc>
 8007aee:	4b1e      	ldr	r3, [pc, #120]	; (8007b68 <UART_SetConfig+0x2fc>)
 8007af0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007af4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007af8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007afc:	d012      	beq.n	8007b24 <UART_SetConfig+0x2b8>
 8007afe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b02:	d802      	bhi.n	8007b0a <UART_SetConfig+0x29e>
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d007      	beq.n	8007b18 <UART_SetConfig+0x2ac>
 8007b08:	e012      	b.n	8007b30 <UART_SetConfig+0x2c4>
 8007b0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b0e:	d006      	beq.n	8007b1e <UART_SetConfig+0x2b2>
 8007b10:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007b14:	d009      	beq.n	8007b2a <UART_SetConfig+0x2be>
 8007b16:	e00b      	b.n	8007b30 <UART_SetConfig+0x2c4>
 8007b18:	2300      	movs	r3, #0
 8007b1a:	77fb      	strb	r3, [r7, #31]
 8007b1c:	e04d      	b.n	8007bba <UART_SetConfig+0x34e>
 8007b1e:	2302      	movs	r3, #2
 8007b20:	77fb      	strb	r3, [r7, #31]
 8007b22:	e04a      	b.n	8007bba <UART_SetConfig+0x34e>
 8007b24:	2304      	movs	r3, #4
 8007b26:	77fb      	strb	r3, [r7, #31]
 8007b28:	e047      	b.n	8007bba <UART_SetConfig+0x34e>
 8007b2a:	2308      	movs	r3, #8
 8007b2c:	77fb      	strb	r3, [r7, #31]
 8007b2e:	e044      	b.n	8007bba <UART_SetConfig+0x34e>
 8007b30:	2310      	movs	r3, #16
 8007b32:	77fb      	strb	r3, [r7, #31]
 8007b34:	bf00      	nop
 8007b36:	e040      	b.n	8007bba <UART_SetConfig+0x34e>
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	4a11      	ldr	r2, [pc, #68]	; (8007b84 <UART_SetConfig+0x318>)
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	d139      	bne.n	8007bb6 <UART_SetConfig+0x34a>
 8007b42:	4b09      	ldr	r3, [pc, #36]	; (8007b68 <UART_SetConfig+0x2fc>)
 8007b44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b48:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007b4c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007b50:	d027      	beq.n	8007ba2 <UART_SetConfig+0x336>
 8007b52:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007b56:	d817      	bhi.n	8007b88 <UART_SetConfig+0x31c>
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d01c      	beq.n	8007b96 <UART_SetConfig+0x32a>
 8007b5c:	e027      	b.n	8007bae <UART_SetConfig+0x342>
 8007b5e:	bf00      	nop
 8007b60:	efff69f3 	.word	0xefff69f3
 8007b64:	40011000 	.word	0x40011000
 8007b68:	40023800 	.word	0x40023800
 8007b6c:	40004400 	.word	0x40004400
 8007b70:	40004800 	.word	0x40004800
 8007b74:	40004c00 	.word	0x40004c00
 8007b78:	40005000 	.word	0x40005000
 8007b7c:	40011400 	.word	0x40011400
 8007b80:	40007800 	.word	0x40007800
 8007b84:	40007c00 	.word	0x40007c00
 8007b88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b8c:	d006      	beq.n	8007b9c <UART_SetConfig+0x330>
 8007b8e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007b92:	d009      	beq.n	8007ba8 <UART_SetConfig+0x33c>
 8007b94:	e00b      	b.n	8007bae <UART_SetConfig+0x342>
 8007b96:	2300      	movs	r3, #0
 8007b98:	77fb      	strb	r3, [r7, #31]
 8007b9a:	e00e      	b.n	8007bba <UART_SetConfig+0x34e>
 8007b9c:	2302      	movs	r3, #2
 8007b9e:	77fb      	strb	r3, [r7, #31]
 8007ba0:	e00b      	b.n	8007bba <UART_SetConfig+0x34e>
 8007ba2:	2304      	movs	r3, #4
 8007ba4:	77fb      	strb	r3, [r7, #31]
 8007ba6:	e008      	b.n	8007bba <UART_SetConfig+0x34e>
 8007ba8:	2308      	movs	r3, #8
 8007baa:	77fb      	strb	r3, [r7, #31]
 8007bac:	e005      	b.n	8007bba <UART_SetConfig+0x34e>
 8007bae:	2310      	movs	r3, #16
 8007bb0:	77fb      	strb	r3, [r7, #31]
 8007bb2:	bf00      	nop
 8007bb4:	e001      	b.n	8007bba <UART_SetConfig+0x34e>
 8007bb6:	2310      	movs	r3, #16
 8007bb8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	69db      	ldr	r3, [r3, #28]
 8007bbe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007bc2:	d17f      	bne.n	8007cc4 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8007bc4:	7ffb      	ldrb	r3, [r7, #31]
 8007bc6:	2b08      	cmp	r3, #8
 8007bc8:	d85c      	bhi.n	8007c84 <UART_SetConfig+0x418>
 8007bca:	a201      	add	r2, pc, #4	; (adr r2, 8007bd0 <UART_SetConfig+0x364>)
 8007bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bd0:	08007bf5 	.word	0x08007bf5
 8007bd4:	08007c15 	.word	0x08007c15
 8007bd8:	08007c35 	.word	0x08007c35
 8007bdc:	08007c85 	.word	0x08007c85
 8007be0:	08007c4d 	.word	0x08007c4d
 8007be4:	08007c85 	.word	0x08007c85
 8007be8:	08007c85 	.word	0x08007c85
 8007bec:	08007c85 	.word	0x08007c85
 8007bf0:	08007c6d 	.word	0x08007c6d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007bf4:	f7fd f878 	bl	8004ce8 <HAL_RCC_GetPCLK1Freq>
 8007bf8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	005a      	lsls	r2, r3, #1
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	685b      	ldr	r3, [r3, #4]
 8007c02:	085b      	lsrs	r3, r3, #1
 8007c04:	441a      	add	r2, r3
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	685b      	ldr	r3, [r3, #4]
 8007c0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c0e:	b29b      	uxth	r3, r3
 8007c10:	61bb      	str	r3, [r7, #24]
        break;
 8007c12:	e03a      	b.n	8007c8a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c14:	f7fd f87c 	bl	8004d10 <HAL_RCC_GetPCLK2Freq>
 8007c18:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	005a      	lsls	r2, r3, #1
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	685b      	ldr	r3, [r3, #4]
 8007c22:	085b      	lsrs	r3, r3, #1
 8007c24:	441a      	add	r2, r3
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	685b      	ldr	r3, [r3, #4]
 8007c2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c2e:	b29b      	uxth	r3, r3
 8007c30:	61bb      	str	r3, [r7, #24]
        break;
 8007c32:	e02a      	b.n	8007c8a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	685b      	ldr	r3, [r3, #4]
 8007c38:	085a      	lsrs	r2, r3, #1
 8007c3a:	4b5f      	ldr	r3, [pc, #380]	; (8007db8 <UART_SetConfig+0x54c>)
 8007c3c:	4413      	add	r3, r2
 8007c3e:	687a      	ldr	r2, [r7, #4]
 8007c40:	6852      	ldr	r2, [r2, #4]
 8007c42:	fbb3 f3f2 	udiv	r3, r3, r2
 8007c46:	b29b      	uxth	r3, r3
 8007c48:	61bb      	str	r3, [r7, #24]
        break;
 8007c4a:	e01e      	b.n	8007c8a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c4c:	f7fc ff68 	bl	8004b20 <HAL_RCC_GetSysClockFreq>
 8007c50:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	005a      	lsls	r2, r3, #1
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	685b      	ldr	r3, [r3, #4]
 8007c5a:	085b      	lsrs	r3, r3, #1
 8007c5c:	441a      	add	r2, r3
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	685b      	ldr	r3, [r3, #4]
 8007c62:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c66:	b29b      	uxth	r3, r3
 8007c68:	61bb      	str	r3, [r7, #24]
        break;
 8007c6a:	e00e      	b.n	8007c8a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	685b      	ldr	r3, [r3, #4]
 8007c70:	085b      	lsrs	r3, r3, #1
 8007c72:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	685b      	ldr	r3, [r3, #4]
 8007c7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c7e:	b29b      	uxth	r3, r3
 8007c80:	61bb      	str	r3, [r7, #24]
        break;
 8007c82:	e002      	b.n	8007c8a <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8007c84:	2301      	movs	r3, #1
 8007c86:	75fb      	strb	r3, [r7, #23]
        break;
 8007c88:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007c8a:	69bb      	ldr	r3, [r7, #24]
 8007c8c:	2b0f      	cmp	r3, #15
 8007c8e:	d916      	bls.n	8007cbe <UART_SetConfig+0x452>
 8007c90:	69bb      	ldr	r3, [r7, #24]
 8007c92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c96:	d212      	bcs.n	8007cbe <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007c98:	69bb      	ldr	r3, [r7, #24]
 8007c9a:	b29b      	uxth	r3, r3
 8007c9c:	f023 030f 	bic.w	r3, r3, #15
 8007ca0:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007ca2:	69bb      	ldr	r3, [r7, #24]
 8007ca4:	085b      	lsrs	r3, r3, #1
 8007ca6:	b29b      	uxth	r3, r3
 8007ca8:	f003 0307 	and.w	r3, r3, #7
 8007cac:	b29a      	uxth	r2, r3
 8007cae:	897b      	ldrh	r3, [r7, #10]
 8007cb0:	4313      	orrs	r3, r2
 8007cb2:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	897a      	ldrh	r2, [r7, #10]
 8007cba:	60da      	str	r2, [r3, #12]
 8007cbc:	e070      	b.n	8007da0 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	75fb      	strb	r3, [r7, #23]
 8007cc2:	e06d      	b.n	8007da0 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8007cc4:	7ffb      	ldrb	r3, [r7, #31]
 8007cc6:	2b08      	cmp	r3, #8
 8007cc8:	d859      	bhi.n	8007d7e <UART_SetConfig+0x512>
 8007cca:	a201      	add	r2, pc, #4	; (adr r2, 8007cd0 <UART_SetConfig+0x464>)
 8007ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cd0:	08007cf5 	.word	0x08007cf5
 8007cd4:	08007d13 	.word	0x08007d13
 8007cd8:	08007d31 	.word	0x08007d31
 8007cdc:	08007d7f 	.word	0x08007d7f
 8007ce0:	08007d49 	.word	0x08007d49
 8007ce4:	08007d7f 	.word	0x08007d7f
 8007ce8:	08007d7f 	.word	0x08007d7f
 8007cec:	08007d7f 	.word	0x08007d7f
 8007cf0:	08007d67 	.word	0x08007d67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007cf4:	f7fc fff8 	bl	8004ce8 <HAL_RCC_GetPCLK1Freq>
 8007cf8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	685b      	ldr	r3, [r3, #4]
 8007cfe:	085a      	lsrs	r2, r3, #1
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	441a      	add	r2, r3
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	685b      	ldr	r3, [r3, #4]
 8007d08:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d0c:	b29b      	uxth	r3, r3
 8007d0e:	61bb      	str	r3, [r7, #24]
        break;
 8007d10:	e038      	b.n	8007d84 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007d12:	f7fc fffd 	bl	8004d10 <HAL_RCC_GetPCLK2Freq>
 8007d16:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	685b      	ldr	r3, [r3, #4]
 8007d1c:	085a      	lsrs	r2, r3, #1
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	441a      	add	r2, r3
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	685b      	ldr	r3, [r3, #4]
 8007d26:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d2a:	b29b      	uxth	r3, r3
 8007d2c:	61bb      	str	r3, [r7, #24]
        break;
 8007d2e:	e029      	b.n	8007d84 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	685b      	ldr	r3, [r3, #4]
 8007d34:	085a      	lsrs	r2, r3, #1
 8007d36:	4b21      	ldr	r3, [pc, #132]	; (8007dbc <UART_SetConfig+0x550>)
 8007d38:	4413      	add	r3, r2
 8007d3a:	687a      	ldr	r2, [r7, #4]
 8007d3c:	6852      	ldr	r2, [r2, #4]
 8007d3e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d42:	b29b      	uxth	r3, r3
 8007d44:	61bb      	str	r3, [r7, #24]
        break;
 8007d46:	e01d      	b.n	8007d84 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007d48:	f7fc feea 	bl	8004b20 <HAL_RCC_GetSysClockFreq>
 8007d4c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	685b      	ldr	r3, [r3, #4]
 8007d52:	085a      	lsrs	r2, r3, #1
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	441a      	add	r2, r3
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	685b      	ldr	r3, [r3, #4]
 8007d5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d60:	b29b      	uxth	r3, r3
 8007d62:	61bb      	str	r3, [r7, #24]
        break;
 8007d64:	e00e      	b.n	8007d84 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	685b      	ldr	r3, [r3, #4]
 8007d6a:	085b      	lsrs	r3, r3, #1
 8007d6c:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	685b      	ldr	r3, [r3, #4]
 8007d74:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d78:	b29b      	uxth	r3, r3
 8007d7a:	61bb      	str	r3, [r7, #24]
        break;
 8007d7c:	e002      	b.n	8007d84 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8007d7e:	2301      	movs	r3, #1
 8007d80:	75fb      	strb	r3, [r7, #23]
        break;
 8007d82:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d84:	69bb      	ldr	r3, [r7, #24]
 8007d86:	2b0f      	cmp	r3, #15
 8007d88:	d908      	bls.n	8007d9c <UART_SetConfig+0x530>
 8007d8a:	69bb      	ldr	r3, [r7, #24]
 8007d8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d90:	d204      	bcs.n	8007d9c <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	69ba      	ldr	r2, [r7, #24]
 8007d98:	60da      	str	r2, [r3, #12]
 8007d9a:	e001      	b.n	8007da0 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8007d9c:	2301      	movs	r3, #1
 8007d9e:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2200      	movs	r2, #0
 8007da4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2200      	movs	r2, #0
 8007daa:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8007dac:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dae:	4618      	mov	r0, r3
 8007db0:	3720      	adds	r7, #32
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd80      	pop	{r7, pc}
 8007db6:	bf00      	nop
 8007db8:	01e84800 	.word	0x01e84800
 8007dbc:	00f42400 	.word	0x00f42400

08007dc0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007dc0:	b480      	push	{r7}
 8007dc2:	b083      	sub	sp, #12
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dcc:	f003 0301 	and.w	r3, r3, #1
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d00a      	beq.n	8007dea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	685b      	ldr	r3, [r3, #4]
 8007dda:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	430a      	orrs	r2, r1
 8007de8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dee:	f003 0302 	and.w	r3, r3, #2
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d00a      	beq.n	8007e0c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	685b      	ldr	r3, [r3, #4]
 8007dfc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	430a      	orrs	r2, r1
 8007e0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e10:	f003 0304 	and.w	r3, r3, #4
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d00a      	beq.n	8007e2e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	685b      	ldr	r3, [r3, #4]
 8007e1e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	430a      	orrs	r2, r1
 8007e2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e32:	f003 0308 	and.w	r3, r3, #8
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d00a      	beq.n	8007e50 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	685b      	ldr	r3, [r3, #4]
 8007e40:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	430a      	orrs	r2, r1
 8007e4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e54:	f003 0310 	and.w	r3, r3, #16
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d00a      	beq.n	8007e72 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	689b      	ldr	r3, [r3, #8]
 8007e62:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	430a      	orrs	r2, r1
 8007e70:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e76:	f003 0320 	and.w	r3, r3, #32
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d00a      	beq.n	8007e94 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	689b      	ldr	r3, [r3, #8]
 8007e84:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	430a      	orrs	r2, r1
 8007e92:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d01a      	beq.n	8007ed6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	685b      	ldr	r3, [r3, #4]
 8007ea6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	430a      	orrs	r2, r1
 8007eb4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007ebe:	d10a      	bne.n	8007ed6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	685b      	ldr	r3, [r3, #4]
 8007ec6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	430a      	orrs	r2, r1
 8007ed4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d00a      	beq.n	8007ef8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	685b      	ldr	r3, [r3, #4]
 8007ee8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	430a      	orrs	r2, r1
 8007ef6:	605a      	str	r2, [r3, #4]
  }
}
 8007ef8:	bf00      	nop
 8007efa:	370c      	adds	r7, #12
 8007efc:	46bd      	mov	sp, r7
 8007efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f02:	4770      	bx	lr

08007f04 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b086      	sub	sp, #24
 8007f08:	af02      	add	r7, sp, #8
 8007f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2200      	movs	r2, #0
 8007f10:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8007f12:	f7f9 fae7 	bl	80014e4 <HAL_GetTick>
 8007f16:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f003 0308 	and.w	r3, r3, #8
 8007f22:	2b08      	cmp	r3, #8
 8007f24:	d10e      	bne.n	8007f44 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007f26:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007f2a:	9300      	str	r3, [sp, #0]
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	2200      	movs	r2, #0
 8007f30:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	f000 f82a 	bl	8007f8e <UART_WaitOnFlagUntilTimeout>
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d001      	beq.n	8007f44 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007f40:	2303      	movs	r3, #3
 8007f42:	e020      	b.n	8007f86 <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f003 0304 	and.w	r3, r3, #4
 8007f4e:	2b04      	cmp	r3, #4
 8007f50:	d10e      	bne.n	8007f70 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007f52:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007f56:	9300      	str	r3, [sp, #0]
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007f60:	6878      	ldr	r0, [r7, #4]
 8007f62:	f000 f814 	bl	8007f8e <UART_WaitOnFlagUntilTimeout>
 8007f66:	4603      	mov	r3, r0
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d001      	beq.n	8007f70 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007f6c:	2303      	movs	r3, #3
 8007f6e:	e00a      	b.n	8007f86 <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2220      	movs	r2, #32
 8007f74:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2220      	movs	r2, #32
 8007f7a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2200      	movs	r2, #0
 8007f80:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8007f84:	2300      	movs	r3, #0
}
 8007f86:	4618      	mov	r0, r3
 8007f88:	3710      	adds	r7, #16
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	bd80      	pop	{r7, pc}

08007f8e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007f8e:	b580      	push	{r7, lr}
 8007f90:	b084      	sub	sp, #16
 8007f92:	af00      	add	r7, sp, #0
 8007f94:	60f8      	str	r0, [r7, #12]
 8007f96:	60b9      	str	r1, [r7, #8]
 8007f98:	603b      	str	r3, [r7, #0]
 8007f9a:	4613      	mov	r3, r2
 8007f9c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f9e:	e05d      	b.n	800805c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007fa0:	69bb      	ldr	r3, [r7, #24]
 8007fa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fa6:	d059      	beq.n	800805c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007fa8:	f7f9 fa9c 	bl	80014e4 <HAL_GetTick>
 8007fac:	4602      	mov	r2, r0
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	1ad3      	subs	r3, r2, r3
 8007fb2:	69ba      	ldr	r2, [r7, #24]
 8007fb4:	429a      	cmp	r2, r3
 8007fb6:	d302      	bcc.n	8007fbe <UART_WaitOnFlagUntilTimeout+0x30>
 8007fb8:	69bb      	ldr	r3, [r7, #24]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d11b      	bne.n	8007ff6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	681a      	ldr	r2, [r3, #0]
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007fcc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	689a      	ldr	r2, [r3, #8]
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f022 0201 	bic.w	r2, r2, #1
 8007fdc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	2220      	movs	r2, #32
 8007fe2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	2220      	movs	r2, #32
 8007fe8:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	2200      	movs	r2, #0
 8007fee:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8007ff2:	2303      	movs	r3, #3
 8007ff4:	e042      	b.n	800807c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f003 0304 	and.w	r3, r3, #4
 8008000:	2b00      	cmp	r3, #0
 8008002:	d02b      	beq.n	800805c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	69db      	ldr	r3, [r3, #28]
 800800a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800800e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008012:	d123      	bne.n	800805c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800801c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	681a      	ldr	r2, [r3, #0]
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800802c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	689a      	ldr	r2, [r3, #8]
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f022 0201 	bic.w	r2, r2, #1
 800803c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	2220      	movs	r2, #32
 8008042:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	2220      	movs	r2, #32
 8008048:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	2220      	movs	r2, #32
 800804e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	2200      	movs	r2, #0
 8008054:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8008058:	2303      	movs	r3, #3
 800805a:	e00f      	b.n	800807c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	69da      	ldr	r2, [r3, #28]
 8008062:	68bb      	ldr	r3, [r7, #8]
 8008064:	4013      	ands	r3, r2
 8008066:	68ba      	ldr	r2, [r7, #8]
 8008068:	429a      	cmp	r2, r3
 800806a:	bf0c      	ite	eq
 800806c:	2301      	moveq	r3, #1
 800806e:	2300      	movne	r3, #0
 8008070:	b2db      	uxtb	r3, r3
 8008072:	461a      	mov	r2, r3
 8008074:	79fb      	ldrb	r3, [r7, #7]
 8008076:	429a      	cmp	r2, r3
 8008078:	d092      	beq.n	8007fa0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800807a:	2300      	movs	r3, #0
}
 800807c:	4618      	mov	r0, r3
 800807e:	3710      	adds	r7, #16
 8008080:	46bd      	mov	sp, r7
 8008082:	bd80      	pop	{r7, pc}

08008084 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8008084:	b084      	sub	sp, #16
 8008086:	b480      	push	{r7}
 8008088:	b085      	sub	sp, #20
 800808a:	af00      	add	r7, sp, #0
 800808c:	6078      	str	r0, [r7, #4]
 800808e:	f107 001c 	add.w	r0, r7, #28
 8008092:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8008096:	2300      	movs	r3, #0
 8008098:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800809a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800809c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800809e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80080a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80080a2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80080a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80080a6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80080a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80080aa:	431a      	orrs	r2, r3
             Init.ClockDiv
 80080ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80080ae:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80080b0:	68fa      	ldr	r2, [r7, #12]
 80080b2:	4313      	orrs	r3, r2
 80080b4:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	685a      	ldr	r2, [r3, #4]
 80080ba:	4b07      	ldr	r3, [pc, #28]	; (80080d8 <SDMMC_Init+0x54>)
 80080bc:	4013      	ands	r3, r2
 80080be:	68fa      	ldr	r2, [r7, #12]
 80080c0:	431a      	orrs	r2, r3
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80080c6:	2300      	movs	r3, #0
}
 80080c8:	4618      	mov	r0, r3
 80080ca:	3714      	adds	r7, #20
 80080cc:	46bd      	mov	sp, r7
 80080ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d2:	b004      	add	sp, #16
 80080d4:	4770      	bx	lr
 80080d6:	bf00      	nop
 80080d8:	ffff8100 	.word	0xffff8100

080080dc <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80080dc:	b480      	push	{r7}
 80080de:	b083      	sub	sp, #12
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80080ea:	4618      	mov	r0, r3
 80080ec:	370c      	adds	r7, #12
 80080ee:	46bd      	mov	sp, r7
 80080f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f4:	4770      	bx	lr

080080f6 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 80080f6:	b480      	push	{r7}
 80080f8:	b083      	sub	sp, #12
 80080fa:	af00      	add	r7, sp, #0
 80080fc:	6078      	str	r0, [r7, #4]
 80080fe:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	681a      	ldr	r2, [r3, #0]
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800810a:	2300      	movs	r3, #0
}
 800810c:	4618      	mov	r0, r3
 800810e:	370c      	adds	r7, #12
 8008110:	46bd      	mov	sp, r7
 8008112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008116:	4770      	bx	lr

08008118 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 8008118:	b580      	push	{r7, lr}
 800811a:	b082      	sub	sp, #8
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2203      	movs	r2, #3
 8008124:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8008126:	2002      	movs	r0, #2
 8008128:	f7f9 f9e8 	bl	80014fc <HAL_Delay>
  
  return HAL_OK;
 800812c:	2300      	movs	r3, #0
}
 800812e:	4618      	mov	r0, r3
 8008130:	3708      	adds	r7, #8
 8008132:	46bd      	mov	sp, r7
 8008134:	bd80      	pop	{r7, pc}

08008136 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8008136:	b480      	push	{r7}
 8008138:	b083      	sub	sp, #12
 800813a:	af00      	add	r7, sp, #0
 800813c:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f003 0303 	and.w	r3, r3, #3
}
 8008146:	4618      	mov	r0, r3
 8008148:	370c      	adds	r7, #12
 800814a:	46bd      	mov	sp, r7
 800814c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008150:	4770      	bx	lr
	...

08008154 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8008154:	b480      	push	{r7}
 8008156:	b085      	sub	sp, #20
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
 800815c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800815e:	2300      	movs	r3, #0
 8008160:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	681a      	ldr	r2, [r3, #0]
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008172:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8008178:	431a      	orrs	r2, r3
                       Command->CPSM);
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800817e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008180:	68fa      	ldr	r2, [r7, #12]
 8008182:	4313      	orrs	r3, r2
 8008184:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	68da      	ldr	r2, [r3, #12]
 800818a:	4b06      	ldr	r3, [pc, #24]	; (80081a4 <SDMMC_SendCommand+0x50>)
 800818c:	4013      	ands	r3, r2
 800818e:	68fa      	ldr	r2, [r7, #12]
 8008190:	431a      	orrs	r2, r3
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8008196:	2300      	movs	r3, #0
}
 8008198:	4618      	mov	r0, r3
 800819a:	3714      	adds	r7, #20
 800819c:	46bd      	mov	sp, r7
 800819e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a2:	4770      	bx	lr
 80081a4:	fffff000 	.word	0xfffff000

080081a8 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 80081a8:	b480      	push	{r7}
 80081aa:	b083      	sub	sp, #12
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	691b      	ldr	r3, [r3, #16]
 80081b4:	b2db      	uxtb	r3, r3
}
 80081b6:	4618      	mov	r0, r3
 80081b8:	370c      	adds	r7, #12
 80081ba:	46bd      	mov	sp, r7
 80081bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c0:	4770      	bx	lr

080081c2 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80081c2:	b480      	push	{r7}
 80081c4:	b085      	sub	sp, #20
 80081c6:	af00      	add	r7, sp, #0
 80081c8:	6078      	str	r0, [r7, #4]
 80081ca:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	3314      	adds	r3, #20
 80081d0:	461a      	mov	r2, r3
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	4413      	add	r3, r2
 80081d6:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	681b      	ldr	r3, [r3, #0]
}  
 80081dc:	4618      	mov	r0, r3
 80081de:	3714      	adds	r7, #20
 80081e0:	46bd      	mov	sp, r7
 80081e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e6:	4770      	bx	lr

080081e8 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 80081e8:	b480      	push	{r7}
 80081ea:	b085      	sub	sp, #20
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
 80081f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80081f2:	2300      	movs	r3, #0
 80081f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	681a      	ldr	r2, [r3, #0]
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	685a      	ldr	r2, [r3, #4]
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800820e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8008214:	431a      	orrs	r2, r3
                       Data->DPSM);
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800821a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800821c:	68fa      	ldr	r2, [r7, #12]
 800821e:	4313      	orrs	r3, r2
 8008220:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008226:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	431a      	orrs	r2, r3
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008232:	2300      	movs	r3, #0

}
 8008234:	4618      	mov	r0, r3
 8008236:	3714      	adds	r7, #20
 8008238:	46bd      	mov	sp, r7
 800823a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823e:	4770      	bx	lr

08008240 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b088      	sub	sp, #32
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
 8008248:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800824e:	2310      	movs	r3, #16
 8008250:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008252:	2340      	movs	r3, #64	; 0x40
 8008254:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008256:	2300      	movs	r3, #0
 8008258:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800825a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800825e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008260:	f107 0308 	add.w	r3, r7, #8
 8008264:	4619      	mov	r1, r3
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	f7ff ff74 	bl	8008154 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800826c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008270:	2110      	movs	r1, #16
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f000 fa42 	bl	80086fc <SDMMC_GetCmdResp1>
 8008278:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800827a:	69fb      	ldr	r3, [r7, #28]
}
 800827c:	4618      	mov	r0, r3
 800827e:	3720      	adds	r7, #32
 8008280:	46bd      	mov	sp, r7
 8008282:	bd80      	pop	{r7, pc}

08008284 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b088      	sub	sp, #32
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
 800828c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8008292:	2311      	movs	r3, #17
 8008294:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008296:	2340      	movs	r3, #64	; 0x40
 8008298:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800829a:	2300      	movs	r3, #0
 800829c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800829e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80082a2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80082a4:	f107 0308 	add.w	r3, r7, #8
 80082a8:	4619      	mov	r1, r3
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	f7ff ff52 	bl	8008154 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80082b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80082b4:	2111      	movs	r1, #17
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f000 fa20 	bl	80086fc <SDMMC_GetCmdResp1>
 80082bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80082be:	69fb      	ldr	r3, [r7, #28]
}
 80082c0:	4618      	mov	r0, r3
 80082c2:	3720      	adds	r7, #32
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bd80      	pop	{r7, pc}

080082c8 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b088      	sub	sp, #32
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
 80082d0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80082d6:	2312      	movs	r3, #18
 80082d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80082da:	2340      	movs	r3, #64	; 0x40
 80082dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80082de:	2300      	movs	r3, #0
 80082e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80082e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80082e6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80082e8:	f107 0308 	add.w	r3, r7, #8
 80082ec:	4619      	mov	r1, r3
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f7ff ff30 	bl	8008154 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80082f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80082f8:	2112      	movs	r1, #18
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	f000 f9fe 	bl	80086fc <SDMMC_GetCmdResp1>
 8008300:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008302:	69fb      	ldr	r3, [r7, #28]
}
 8008304:	4618      	mov	r0, r3
 8008306:	3720      	adds	r7, #32
 8008308:	46bd      	mov	sp, r7
 800830a:	bd80      	pop	{r7, pc}

0800830c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b088      	sub	sp, #32
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
 8008314:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800831a:	2318      	movs	r3, #24
 800831c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800831e:	2340      	movs	r3, #64	; 0x40
 8008320:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008322:	2300      	movs	r3, #0
 8008324:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008326:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800832a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800832c:	f107 0308 	add.w	r3, r7, #8
 8008330:	4619      	mov	r1, r3
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f7ff ff0e 	bl	8008154 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008338:	f241 3288 	movw	r2, #5000	; 0x1388
 800833c:	2118      	movs	r1, #24
 800833e:	6878      	ldr	r0, [r7, #4]
 8008340:	f000 f9dc 	bl	80086fc <SDMMC_GetCmdResp1>
 8008344:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008346:	69fb      	ldr	r3, [r7, #28]
}
 8008348:	4618      	mov	r0, r3
 800834a:	3720      	adds	r7, #32
 800834c:	46bd      	mov	sp, r7
 800834e:	bd80      	pop	{r7, pc}

08008350 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b088      	sub	sp, #32
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
 8008358:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800835e:	2319      	movs	r3, #25
 8008360:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008362:	2340      	movs	r3, #64	; 0x40
 8008364:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008366:	2300      	movs	r3, #0
 8008368:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800836a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800836e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008370:	f107 0308 	add.w	r3, r7, #8
 8008374:	4619      	mov	r1, r3
 8008376:	6878      	ldr	r0, [r7, #4]
 8008378:	f7ff feec 	bl	8008154 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800837c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008380:	2119      	movs	r1, #25
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	f000 f9ba 	bl	80086fc <SDMMC_GetCmdResp1>
 8008388:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800838a:	69fb      	ldr	r3, [r7, #28]
}
 800838c:	4618      	mov	r0, r3
 800838e:	3720      	adds	r7, #32
 8008390:	46bd      	mov	sp, r7
 8008392:	bd80      	pop	{r7, pc}

08008394 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b088      	sub	sp, #32
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800839c:	2300      	movs	r3, #0
 800839e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80083a0:	230c      	movs	r3, #12
 80083a2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80083a4:	2340      	movs	r3, #64	; 0x40
 80083a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80083a8:	2300      	movs	r3, #0
 80083aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80083ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80083b0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80083b2:	f107 0308 	add.w	r3, r7, #8
 80083b6:	4619      	mov	r1, r3
 80083b8:	6878      	ldr	r0, [r7, #4]
 80083ba:	f7ff fecb 	bl	8008154 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 80083be:	4a05      	ldr	r2, [pc, #20]	; (80083d4 <SDMMC_CmdStopTransfer+0x40>)
 80083c0:	210c      	movs	r1, #12
 80083c2:	6878      	ldr	r0, [r7, #4]
 80083c4:	f000 f99a 	bl	80086fc <SDMMC_GetCmdResp1>
 80083c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80083ca:	69fb      	ldr	r3, [r7, #28]
}
 80083cc:	4618      	mov	r0, r3
 80083ce:	3720      	adds	r7, #32
 80083d0:	46bd      	mov	sp, r7
 80083d2:	bd80      	pop	{r7, pc}
 80083d4:	05f5e100 	.word	0x05f5e100

080083d8 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b08a      	sub	sp, #40	; 0x28
 80083dc:	af00      	add	r7, sp, #0
 80083de:	60f8      	str	r0, [r7, #12]
 80083e0:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80083e8:	2307      	movs	r3, #7
 80083ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80083ec:	2340      	movs	r3, #64	; 0x40
 80083ee:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80083f0:	2300      	movs	r3, #0
 80083f2:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80083f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80083f8:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80083fa:	f107 0310 	add.w	r3, r7, #16
 80083fe:	4619      	mov	r1, r3
 8008400:	68f8      	ldr	r0, [r7, #12]
 8008402:	f7ff fea7 	bl	8008154 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8008406:	f241 3288 	movw	r2, #5000	; 0x1388
 800840a:	2107      	movs	r1, #7
 800840c:	68f8      	ldr	r0, [r7, #12]
 800840e:	f000 f975 	bl	80086fc <SDMMC_GetCmdResp1>
 8008412:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8008414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008416:	4618      	mov	r0, r3
 8008418:	3728      	adds	r7, #40	; 0x28
 800841a:	46bd      	mov	sp, r7
 800841c:	bd80      	pop	{r7, pc}

0800841e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800841e:	b580      	push	{r7, lr}
 8008420:	b088      	sub	sp, #32
 8008422:	af00      	add	r7, sp, #0
 8008424:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8008426:	2300      	movs	r3, #0
 8008428:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800842a:	2300      	movs	r3, #0
 800842c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800842e:	2300      	movs	r3, #0
 8008430:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008432:	2300      	movs	r3, #0
 8008434:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008436:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800843a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800843c:	f107 0308 	add.w	r3, r7, #8
 8008440:	4619      	mov	r1, r3
 8008442:	6878      	ldr	r0, [r7, #4]
 8008444:	f7ff fe86 	bl	8008154 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8008448:	6878      	ldr	r0, [r7, #4]
 800844a:	f000 f92f 	bl	80086ac <SDMMC_GetCmdError>
 800844e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008450:	69fb      	ldr	r3, [r7, #28]
}
 8008452:	4618      	mov	r0, r3
 8008454:	3720      	adds	r7, #32
 8008456:	46bd      	mov	sp, r7
 8008458:	bd80      	pop	{r7, pc}

0800845a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800845a:	b580      	push	{r7, lr}
 800845c:	b088      	sub	sp, #32
 800845e:	af00      	add	r7, sp, #0
 8008460:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8008462:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8008466:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8008468:	2308      	movs	r3, #8
 800846a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800846c:	2340      	movs	r3, #64	; 0x40
 800846e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008470:	2300      	movs	r3, #0
 8008472:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008474:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008478:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800847a:	f107 0308 	add.w	r3, r7, #8
 800847e:	4619      	mov	r1, r3
 8008480:	6878      	ldr	r0, [r7, #4]
 8008482:	f7ff fe67 	bl	8008154 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8008486:	6878      	ldr	r0, [r7, #4]
 8008488:	f000 fb18 	bl	8008abc <SDMMC_GetCmdResp7>
 800848c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800848e:	69fb      	ldr	r3, [r7, #28]
}
 8008490:	4618      	mov	r0, r3
 8008492:	3720      	adds	r7, #32
 8008494:	46bd      	mov	sp, r7
 8008496:	bd80      	pop	{r7, pc}

08008498 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b088      	sub	sp, #32
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
 80084a0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80084a6:	2337      	movs	r3, #55	; 0x37
 80084a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80084aa:	2340      	movs	r3, #64	; 0x40
 80084ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80084ae:	2300      	movs	r3, #0
 80084b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80084b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80084b6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80084b8:	f107 0308 	add.w	r3, r7, #8
 80084bc:	4619      	mov	r1, r3
 80084be:	6878      	ldr	r0, [r7, #4]
 80084c0:	f7ff fe48 	bl	8008154 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80084c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80084c8:	2137      	movs	r1, #55	; 0x37
 80084ca:	6878      	ldr	r0, [r7, #4]
 80084cc:	f000 f916 	bl	80086fc <SDMMC_GetCmdResp1>
 80084d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80084d2:	69fb      	ldr	r3, [r7, #28]
}
 80084d4:	4618      	mov	r0, r3
 80084d6:	3720      	adds	r7, #32
 80084d8:	46bd      	mov	sp, r7
 80084da:	bd80      	pop	{r7, pc}

080084dc <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b088      	sub	sp, #32
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
 80084e4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80084e6:	683a      	ldr	r2, [r7, #0]
 80084e8:	4b0d      	ldr	r3, [pc, #52]	; (8008520 <SDMMC_CmdAppOperCommand+0x44>)
 80084ea:	4313      	orrs	r3, r2
 80084ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80084ee:	2329      	movs	r3, #41	; 0x29
 80084f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80084f2:	2340      	movs	r3, #64	; 0x40
 80084f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80084f6:	2300      	movs	r3, #0
 80084f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80084fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80084fe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008500:	f107 0308 	add.w	r3, r7, #8
 8008504:	4619      	mov	r1, r3
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	f7ff fe24 	bl	8008154 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800850c:	6878      	ldr	r0, [r7, #4]
 800850e:	f000 fa27 	bl	8008960 <SDMMC_GetCmdResp3>
 8008512:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008514:	69fb      	ldr	r3, [r7, #28]
}
 8008516:	4618      	mov	r0, r3
 8008518:	3720      	adds	r7, #32
 800851a:	46bd      	mov	sp, r7
 800851c:	bd80      	pop	{r7, pc}
 800851e:	bf00      	nop
 8008520:	80100000 	.word	0x80100000

08008524 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b088      	sub	sp, #32
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
 800852c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8008532:	2306      	movs	r3, #6
 8008534:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008536:	2340      	movs	r3, #64	; 0x40
 8008538:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800853a:	2300      	movs	r3, #0
 800853c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800853e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008542:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008544:	f107 0308 	add.w	r3, r7, #8
 8008548:	4619      	mov	r1, r3
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	f7ff fe02 	bl	8008154 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8008550:	f241 3288 	movw	r2, #5000	; 0x1388
 8008554:	2106      	movs	r1, #6
 8008556:	6878      	ldr	r0, [r7, #4]
 8008558:	f000 f8d0 	bl	80086fc <SDMMC_GetCmdResp1>
 800855c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800855e:	69fb      	ldr	r3, [r7, #28]
}
 8008560:	4618      	mov	r0, r3
 8008562:	3720      	adds	r7, #32
 8008564:	46bd      	mov	sp, r7
 8008566:	bd80      	pop	{r7, pc}

08008568 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b088      	sub	sp, #32
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8008570:	2300      	movs	r3, #0
 8008572:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8008574:	2333      	movs	r3, #51	; 0x33
 8008576:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008578:	2340      	movs	r3, #64	; 0x40
 800857a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800857c:	2300      	movs	r3, #0
 800857e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008580:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008584:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008586:	f107 0308 	add.w	r3, r7, #8
 800858a:	4619      	mov	r1, r3
 800858c:	6878      	ldr	r0, [r7, #4]
 800858e:	f7ff fde1 	bl	8008154 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8008592:	f241 3288 	movw	r2, #5000	; 0x1388
 8008596:	2133      	movs	r1, #51	; 0x33
 8008598:	6878      	ldr	r0, [r7, #4]
 800859a:	f000 f8af 	bl	80086fc <SDMMC_GetCmdResp1>
 800859e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80085a0:	69fb      	ldr	r3, [r7, #28]
}
 80085a2:	4618      	mov	r0, r3
 80085a4:	3720      	adds	r7, #32
 80085a6:	46bd      	mov	sp, r7
 80085a8:	bd80      	pop	{r7, pc}

080085aa <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80085aa:	b580      	push	{r7, lr}
 80085ac:	b088      	sub	sp, #32
 80085ae:	af00      	add	r7, sp, #0
 80085b0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80085b2:	2300      	movs	r3, #0
 80085b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80085b6:	2302      	movs	r3, #2
 80085b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80085ba:	23c0      	movs	r3, #192	; 0xc0
 80085bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80085be:	2300      	movs	r3, #0
 80085c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80085c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80085c6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80085c8:	f107 0308 	add.w	r3, r7, #8
 80085cc:	4619      	mov	r1, r3
 80085ce:	6878      	ldr	r0, [r7, #4]
 80085d0:	f7ff fdc0 	bl	8008154 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80085d4:	6878      	ldr	r0, [r7, #4]
 80085d6:	f000 f97d 	bl	80088d4 <SDMMC_GetCmdResp2>
 80085da:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80085dc:	69fb      	ldr	r3, [r7, #28]
}
 80085de:	4618      	mov	r0, r3
 80085e0:	3720      	adds	r7, #32
 80085e2:	46bd      	mov	sp, r7
 80085e4:	bd80      	pop	{r7, pc}

080085e6 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80085e6:	b580      	push	{r7, lr}
 80085e8:	b088      	sub	sp, #32
 80085ea:	af00      	add	r7, sp, #0
 80085ec:	6078      	str	r0, [r7, #4]
 80085ee:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80085f4:	2309      	movs	r3, #9
 80085f6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80085f8:	23c0      	movs	r3, #192	; 0xc0
 80085fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80085fc:	2300      	movs	r3, #0
 80085fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008600:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008604:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008606:	f107 0308 	add.w	r3, r7, #8
 800860a:	4619      	mov	r1, r3
 800860c:	6878      	ldr	r0, [r7, #4]
 800860e:	f7ff fda1 	bl	8008154 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	f000 f95e 	bl	80088d4 <SDMMC_GetCmdResp2>
 8008618:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800861a:	69fb      	ldr	r3, [r7, #28]
}
 800861c:	4618      	mov	r0, r3
 800861e:	3720      	adds	r7, #32
 8008620:	46bd      	mov	sp, r7
 8008622:	bd80      	pop	{r7, pc}

08008624 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b088      	sub	sp, #32
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
 800862c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800862e:	2300      	movs	r3, #0
 8008630:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8008632:	2303      	movs	r3, #3
 8008634:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008636:	2340      	movs	r3, #64	; 0x40
 8008638:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800863a:	2300      	movs	r3, #0
 800863c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800863e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008642:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008644:	f107 0308 	add.w	r3, r7, #8
 8008648:	4619      	mov	r1, r3
 800864a:	6878      	ldr	r0, [r7, #4]
 800864c:	f7ff fd82 	bl	8008154 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8008650:	683a      	ldr	r2, [r7, #0]
 8008652:	2103      	movs	r1, #3
 8008654:	6878      	ldr	r0, [r7, #4]
 8008656:	f000 f9bd 	bl	80089d4 <SDMMC_GetCmdResp6>
 800865a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800865c:	69fb      	ldr	r3, [r7, #28]
}
 800865e:	4618      	mov	r0, r3
 8008660:	3720      	adds	r7, #32
 8008662:	46bd      	mov	sp, r7
 8008664:	bd80      	pop	{r7, pc}

08008666 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008666:	b580      	push	{r7, lr}
 8008668:	b088      	sub	sp, #32
 800866a:	af00      	add	r7, sp, #0
 800866c:	6078      	str	r0, [r7, #4]
 800866e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8008674:	230d      	movs	r3, #13
 8008676:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008678:	2340      	movs	r3, #64	; 0x40
 800867a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800867c:	2300      	movs	r3, #0
 800867e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008680:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008684:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008686:	f107 0308 	add.w	r3, r7, #8
 800868a:	4619      	mov	r1, r3
 800868c:	6878      	ldr	r0, [r7, #4]
 800868e:	f7ff fd61 	bl	8008154 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8008692:	f241 3288 	movw	r2, #5000	; 0x1388
 8008696:	210d      	movs	r1, #13
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	f000 f82f 	bl	80086fc <SDMMC_GetCmdResp1>
 800869e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80086a0:	69fb      	ldr	r3, [r7, #28]
}
 80086a2:	4618      	mov	r0, r3
 80086a4:	3720      	adds	r7, #32
 80086a6:	46bd      	mov	sp, r7
 80086a8:	bd80      	pop	{r7, pc}
	...

080086ac <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 80086ac:	b490      	push	{r4, r7}
 80086ae:	b082      	sub	sp, #8
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80086b4:	4b0f      	ldr	r3, [pc, #60]	; (80086f4 <SDMMC_GetCmdError+0x48>)
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	4a0f      	ldr	r2, [pc, #60]	; (80086f8 <SDMMC_GetCmdError+0x4c>)
 80086ba:	fba2 2303 	umull	r2, r3, r2, r3
 80086be:	0a5b      	lsrs	r3, r3, #9
 80086c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80086c4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80086c8:	4623      	mov	r3, r4
 80086ca:	1e5c      	subs	r4, r3, #1
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d102      	bne.n	80086d6 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80086d0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80086d4:	e009      	b.n	80086ea <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d0f2      	beq.n	80086c8 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	22c5      	movs	r2, #197	; 0xc5
 80086e6:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80086e8:	2300      	movs	r3, #0
}
 80086ea:	4618      	mov	r0, r3
 80086ec:	3708      	adds	r7, #8
 80086ee:	46bd      	mov	sp, r7
 80086f0:	bc90      	pop	{r4, r7}
 80086f2:	4770      	bx	lr
 80086f4:	20000010 	.word	0x20000010
 80086f8:	10624dd3 	.word	0x10624dd3

080086fc <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80086fc:	b590      	push	{r4, r7, lr}
 80086fe:	b087      	sub	sp, #28
 8008700:	af00      	add	r7, sp, #0
 8008702:	60f8      	str	r0, [r7, #12]
 8008704:	460b      	mov	r3, r1
 8008706:	607a      	str	r2, [r7, #4]
 8008708:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800870a:	4b6f      	ldr	r3, [pc, #444]	; (80088c8 <SDMMC_GetCmdResp1+0x1cc>)
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	4a6f      	ldr	r2, [pc, #444]	; (80088cc <SDMMC_GetCmdResp1+0x1d0>)
 8008710:	fba2 2303 	umull	r2, r3, r2, r3
 8008714:	0a5b      	lsrs	r3, r3, #9
 8008716:	687a      	ldr	r2, [r7, #4]
 8008718:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800871c:	4623      	mov	r3, r4
 800871e:	1e5c      	subs	r4, r3, #1
 8008720:	2b00      	cmp	r3, #0
 8008722:	d102      	bne.n	800872a <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008724:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008728:	e0c9      	b.n	80088be <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDMMCx->STA;
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800872e:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008730:	697b      	ldr	r3, [r7, #20]
 8008732:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008736:	2b00      	cmp	r3, #0
 8008738:	d0f0      	beq.n	800871c <SDMMC_GetCmdResp1+0x20>
 800873a:	697b      	ldr	r3, [r7, #20]
 800873c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008740:	2b00      	cmp	r3, #0
 8008742:	d1eb      	bne.n	800871c <SDMMC_GetCmdResp1+0x20>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008748:	f003 0304 	and.w	r3, r3, #4
 800874c:	2b00      	cmp	r3, #0
 800874e:	d004      	beq.n	800875a <SDMMC_GetCmdResp1+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	2204      	movs	r2, #4
 8008754:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008756:	2304      	movs	r3, #4
 8008758:	e0b1      	b.n	80088be <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800875e:	f003 0301 	and.w	r3, r3, #1
 8008762:	2b00      	cmp	r3, #0
 8008764:	d004      	beq.n	8008770 <SDMMC_GetCmdResp1+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	2201      	movs	r2, #1
 800876a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800876c:	2301      	movs	r3, #1
 800876e:	e0a6      	b.n	80088be <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	22c5      	movs	r2, #197	; 0xc5
 8008774:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8008776:	68f8      	ldr	r0, [r7, #12]
 8008778:	f7ff fd16 	bl	80081a8 <SDMMC_GetCommandResponse>
 800877c:	4603      	mov	r3, r0
 800877e:	461a      	mov	r2, r3
 8008780:	7afb      	ldrb	r3, [r7, #11]
 8008782:	4293      	cmp	r3, r2
 8008784:	d001      	beq.n	800878a <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008786:	2301      	movs	r3, #1
 8008788:	e099      	b.n	80088be <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800878a:	2100      	movs	r1, #0
 800878c:	68f8      	ldr	r0, [r7, #12]
 800878e:	f7ff fd18 	bl	80081c2 <SDMMC_GetResponse>
 8008792:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8008794:	693a      	ldr	r2, [r7, #16]
 8008796:	4b4e      	ldr	r3, [pc, #312]	; (80088d0 <SDMMC_GetCmdResp1+0x1d4>)
 8008798:	4013      	ands	r3, r2
 800879a:	2b00      	cmp	r3, #0
 800879c:	d101      	bne.n	80087a2 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800879e:	2300      	movs	r3, #0
 80087a0:	e08d      	b.n	80088be <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80087a2:	693b      	ldr	r3, [r7, #16]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	da02      	bge.n	80087ae <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80087a8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80087ac:	e087      	b.n	80088be <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80087ae:	693b      	ldr	r3, [r7, #16]
 80087b0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d001      	beq.n	80087bc <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80087b8:	2340      	movs	r3, #64	; 0x40
 80087ba:	e080      	b.n	80088be <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80087bc:	693b      	ldr	r3, [r7, #16]
 80087be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d001      	beq.n	80087ca <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80087c6:	2380      	movs	r3, #128	; 0x80
 80087c8:	e079      	b.n	80088be <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80087ca:	693b      	ldr	r3, [r7, #16]
 80087cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d002      	beq.n	80087da <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80087d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80087d8:	e071      	b.n	80088be <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80087da:	693b      	ldr	r3, [r7, #16]
 80087dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d002      	beq.n	80087ea <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80087e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80087e8:	e069      	b.n	80088be <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80087ea:	693b      	ldr	r3, [r7, #16]
 80087ec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d002      	beq.n	80087fa <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80087f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80087f8:	e061      	b.n	80088be <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80087fa:	693b      	ldr	r3, [r7, #16]
 80087fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008800:	2b00      	cmp	r3, #0
 8008802:	d002      	beq.n	800880a <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8008804:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008808:	e059      	b.n	80088be <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800880a:	693b      	ldr	r3, [r7, #16]
 800880c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008810:	2b00      	cmp	r3, #0
 8008812:	d002      	beq.n	800881a <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008814:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008818:	e051      	b.n	80088be <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800881a:	693b      	ldr	r3, [r7, #16]
 800881c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008820:	2b00      	cmp	r3, #0
 8008822:	d002      	beq.n	800882a <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008824:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008828:	e049      	b.n	80088be <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800882a:	693b      	ldr	r3, [r7, #16]
 800882c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008830:	2b00      	cmp	r3, #0
 8008832:	d002      	beq.n	800883a <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8008834:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008838:	e041      	b.n	80088be <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800883a:	693b      	ldr	r3, [r7, #16]
 800883c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008840:	2b00      	cmp	r3, #0
 8008842:	d002      	beq.n	800884a <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8008844:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008848:	e039      	b.n	80088be <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800884a:	693b      	ldr	r3, [r7, #16]
 800884c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008850:	2b00      	cmp	r3, #0
 8008852:	d002      	beq.n	800885a <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8008854:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008858:	e031      	b.n	80088be <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800885a:	693b      	ldr	r3, [r7, #16]
 800885c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008860:	2b00      	cmp	r3, #0
 8008862:	d002      	beq.n	800886a <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8008864:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008868:	e029      	b.n	80088be <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800886a:	693b      	ldr	r3, [r7, #16]
 800886c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008870:	2b00      	cmp	r3, #0
 8008872:	d002      	beq.n	800887a <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8008874:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008878:	e021      	b.n	80088be <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800887a:	693b      	ldr	r3, [r7, #16]
 800887c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008880:	2b00      	cmp	r3, #0
 8008882:	d002      	beq.n	800888a <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8008884:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008888:	e019      	b.n	80088be <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800888a:	693b      	ldr	r3, [r7, #16]
 800888c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008890:	2b00      	cmp	r3, #0
 8008892:	d002      	beq.n	800889a <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8008894:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008898:	e011      	b.n	80088be <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800889a:	693b      	ldr	r3, [r7, #16]
 800889c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d002      	beq.n	80088aa <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80088a4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80088a8:	e009      	b.n	80088be <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80088aa:	693b      	ldr	r3, [r7, #16]
 80088ac:	f003 0308 	and.w	r3, r3, #8
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d002      	beq.n	80088ba <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80088b4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80088b8:	e001      	b.n	80088be <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80088ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80088be:	4618      	mov	r0, r3
 80088c0:	371c      	adds	r7, #28
 80088c2:	46bd      	mov	sp, r7
 80088c4:	bd90      	pop	{r4, r7, pc}
 80088c6:	bf00      	nop
 80088c8:	20000010 	.word	0x20000010
 80088cc:	10624dd3 	.word	0x10624dd3
 80088d0:	fdffe008 	.word	0xfdffe008

080088d4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80088d4:	b490      	push	{r4, r7}
 80088d6:	b084      	sub	sp, #16
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80088dc:	4b1e      	ldr	r3, [pc, #120]	; (8008958 <SDMMC_GetCmdResp2+0x84>)
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	4a1e      	ldr	r2, [pc, #120]	; (800895c <SDMMC_GetCmdResp2+0x88>)
 80088e2:	fba2 2303 	umull	r2, r3, r2, r3
 80088e6:	0a5b      	lsrs	r3, r3, #9
 80088e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80088ec:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80088f0:	4623      	mov	r3, r4
 80088f2:	1e5c      	subs	r4, r3, #1
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d102      	bne.n	80088fe <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80088f8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80088fc:	e026      	b.n	800894c <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDMMCx->STA;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008902:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800890a:	2b00      	cmp	r3, #0
 800890c:	d0f0      	beq.n	80088f0 <SDMMC_GetCmdResp2+0x1c>
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008914:	2b00      	cmp	r3, #0
 8008916:	d1eb      	bne.n	80088f0 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800891c:	f003 0304 	and.w	r3, r3, #4
 8008920:	2b00      	cmp	r3, #0
 8008922:	d004      	beq.n	800892e <SDMMC_GetCmdResp2+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2204      	movs	r2, #4
 8008928:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800892a:	2304      	movs	r3, #4
 800892c:	e00e      	b.n	800894c <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008932:	f003 0301 	and.w	r3, r3, #1
 8008936:	2b00      	cmp	r3, #0
 8008938:	d004      	beq.n	8008944 <SDMMC_GetCmdResp2+0x70>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	2201      	movs	r2, #1
 800893e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008940:	2301      	movs	r3, #1
 8008942:	e003      	b.n	800894c <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	22c5      	movs	r2, #197	; 0xc5
 8008948:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800894a:	2300      	movs	r3, #0
}
 800894c:	4618      	mov	r0, r3
 800894e:	3710      	adds	r7, #16
 8008950:	46bd      	mov	sp, r7
 8008952:	bc90      	pop	{r4, r7}
 8008954:	4770      	bx	lr
 8008956:	bf00      	nop
 8008958:	20000010 	.word	0x20000010
 800895c:	10624dd3 	.word	0x10624dd3

08008960 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8008960:	b490      	push	{r4, r7}
 8008962:	b084      	sub	sp, #16
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008968:	4b18      	ldr	r3, [pc, #96]	; (80089cc <SDMMC_GetCmdResp3+0x6c>)
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	4a18      	ldr	r2, [pc, #96]	; (80089d0 <SDMMC_GetCmdResp3+0x70>)
 800896e:	fba2 2303 	umull	r2, r3, r2, r3
 8008972:	0a5b      	lsrs	r3, r3, #9
 8008974:	f241 3288 	movw	r2, #5000	; 0x1388
 8008978:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800897c:	4623      	mov	r3, r4
 800897e:	1e5c      	subs	r4, r3, #1
 8008980:	2b00      	cmp	r3, #0
 8008982:	d102      	bne.n	800898a <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008984:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008988:	e01b      	b.n	80089c2 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDMMCx->STA;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800898e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008996:	2b00      	cmp	r3, #0
 8008998:	d0f0      	beq.n	800897c <SDMMC_GetCmdResp3+0x1c>
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d1eb      	bne.n	800897c <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089a8:	f003 0304 	and.w	r3, r3, #4
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d004      	beq.n	80089ba <SDMMC_GetCmdResp3+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2204      	movs	r2, #4
 80089b4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80089b6:	2304      	movs	r3, #4
 80089b8:	e003      	b.n	80089c2 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	22c5      	movs	r2, #197	; 0xc5
 80089be:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80089c0:	2300      	movs	r3, #0
}
 80089c2:	4618      	mov	r0, r3
 80089c4:	3710      	adds	r7, #16
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bc90      	pop	{r4, r7}
 80089ca:	4770      	bx	lr
 80089cc:	20000010 	.word	0x20000010
 80089d0:	10624dd3 	.word	0x10624dd3

080089d4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80089d4:	b590      	push	{r4, r7, lr}
 80089d6:	b087      	sub	sp, #28
 80089d8:	af00      	add	r7, sp, #0
 80089da:	60f8      	str	r0, [r7, #12]
 80089dc:	460b      	mov	r3, r1
 80089de:	607a      	str	r2, [r7, #4]
 80089e0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80089e2:	4b34      	ldr	r3, [pc, #208]	; (8008ab4 <SDMMC_GetCmdResp6+0xe0>)
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	4a34      	ldr	r2, [pc, #208]	; (8008ab8 <SDMMC_GetCmdResp6+0xe4>)
 80089e8:	fba2 2303 	umull	r2, r3, r2, r3
 80089ec:	0a5b      	lsrs	r3, r3, #9
 80089ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80089f2:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80089f6:	4623      	mov	r3, r4
 80089f8:	1e5c      	subs	r4, r3, #1
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d102      	bne.n	8008a04 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 80089fe:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008a02:	e052      	b.n	8008aaa <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDMMCx->STA;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a08:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008a0a:	697b      	ldr	r3, [r7, #20]
 8008a0c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d0f0      	beq.n	80089f6 <SDMMC_GetCmdResp6+0x22>
 8008a14:	697b      	ldr	r3, [r7, #20]
 8008a16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d1eb      	bne.n	80089f6 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a22:	f003 0304 	and.w	r3, r3, #4
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d004      	beq.n	8008a34 <SDMMC_GetCmdResp6+0x60>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	2204      	movs	r2, #4
 8008a2e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008a30:	2304      	movs	r3, #4
 8008a32:	e03a      	b.n	8008aaa <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a38:	f003 0301 	and.w	r3, r3, #1
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d004      	beq.n	8008a4a <SDMMC_GetCmdResp6+0x76>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	2201      	movs	r2, #1
 8008a44:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008a46:	2301      	movs	r3, #1
 8008a48:	e02f      	b.n	8008aaa <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8008a4a:	68f8      	ldr	r0, [r7, #12]
 8008a4c:	f7ff fbac 	bl	80081a8 <SDMMC_GetCommandResponse>
 8008a50:	4603      	mov	r3, r0
 8008a52:	461a      	mov	r2, r3
 8008a54:	7afb      	ldrb	r3, [r7, #11]
 8008a56:	4293      	cmp	r3, r2
 8008a58:	d001      	beq.n	8008a5e <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008a5a:	2301      	movs	r3, #1
 8008a5c:	e025      	b.n	8008aaa <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	22c5      	movs	r2, #197	; 0xc5
 8008a62:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8008a64:	2100      	movs	r1, #0
 8008a66:	68f8      	ldr	r0, [r7, #12]
 8008a68:	f7ff fbab 	bl	80081c2 <SDMMC_GetResponse>
 8008a6c:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8008a6e:	693b      	ldr	r3, [r7, #16]
 8008a70:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d106      	bne.n	8008a86 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8008a78:	693b      	ldr	r3, [r7, #16]
 8008a7a:	0c1b      	lsrs	r3, r3, #16
 8008a7c:	b29a      	uxth	r2, r3
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8008a82:	2300      	movs	r3, #0
 8008a84:	e011      	b.n	8008aaa <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8008a86:	693b      	ldr	r3, [r7, #16]
 8008a88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d002      	beq.n	8008a96 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008a90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008a94:	e009      	b.n	8008aaa <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8008a96:	693b      	ldr	r3, [r7, #16]
 8008a98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d002      	beq.n	8008aa6 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008aa0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008aa4:	e001      	b.n	8008aaa <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008aa6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8008aaa:	4618      	mov	r0, r3
 8008aac:	371c      	adds	r7, #28
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	bd90      	pop	{r4, r7, pc}
 8008ab2:	bf00      	nop
 8008ab4:	20000010 	.word	0x20000010
 8008ab8:	10624dd3 	.word	0x10624dd3

08008abc <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8008abc:	b490      	push	{r4, r7}
 8008abe:	b084      	sub	sp, #16
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008ac4:	4b21      	ldr	r3, [pc, #132]	; (8008b4c <SDMMC_GetCmdResp7+0x90>)
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	4a21      	ldr	r2, [pc, #132]	; (8008b50 <SDMMC_GetCmdResp7+0x94>)
 8008aca:	fba2 2303 	umull	r2, r3, r2, r3
 8008ace:	0a5b      	lsrs	r3, r3, #9
 8008ad0:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ad4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8008ad8:	4623      	mov	r3, r4
 8008ada:	1e5c      	subs	r4, r3, #1
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d102      	bne.n	8008ae6 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008ae0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008ae4:	e02c      	b.n	8008b40 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDMMCx->STA;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008aea:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d0f0      	beq.n	8008ad8 <SDMMC_GetCmdResp7+0x1c>
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d1eb      	bne.n	8008ad8 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b04:	f003 0304 	and.w	r3, r3, #4
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d004      	beq.n	8008b16 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2204      	movs	r2, #4
 8008b10:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008b12:	2304      	movs	r3, #4
 8008b14:	e014      	b.n	8008b40 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b1a:	f003 0301 	and.w	r3, r3, #1
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d004      	beq.n	8008b2c <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	2201      	movs	r2, #1
 8008b26:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008b28:	2301      	movs	r3, #1
 8008b2a:	e009      	b.n	8008b40 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d002      	beq.n	8008b3e <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2240      	movs	r2, #64	; 0x40
 8008b3c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8008b3e:	2300      	movs	r3, #0
  
}
 8008b40:	4618      	mov	r0, r3
 8008b42:	3710      	adds	r7, #16
 8008b44:	46bd      	mov	sp, r7
 8008b46:	bc90      	pop	{r4, r7}
 8008b48:	4770      	bx	lr
 8008b4a:	bf00      	nop
 8008b4c:	20000010 	.word	0x20000010
 8008b50:	10624dd3 	.word	0x10624dd3

08008b54 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008b54:	b084      	sub	sp, #16
 8008b56:	b580      	push	{r7, lr}
 8008b58:	b084      	sub	sp, #16
 8008b5a:	af00      	add	r7, sp, #0
 8008b5c:	6078      	str	r0, [r7, #4]
 8008b5e:	f107 001c 	add.w	r0, r7, #28
 8008b62:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b68:	2b01      	cmp	r3, #1
 8008b6a:	d120      	bne.n	8008bae <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b70:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	68da      	ldr	r2, [r3, #12]
 8008b7c:	4b20      	ldr	r3, [pc, #128]	; (8008c00 <USB_CoreInit+0xac>)
 8008b7e:	4013      	ands	r3, r2
 8008b80:	687a      	ldr	r2, [r7, #4]
 8008b82:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	68db      	ldr	r3, [r3, #12]
 8008b88:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008b90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b92:	2b01      	cmp	r3, #1
 8008b94:	d105      	bne.n	8008ba2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	68db      	ldr	r3, [r3, #12]
 8008b9a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8008ba2:	6878      	ldr	r0, [r7, #4]
 8008ba4:	f001 fac4 	bl	800a130 <USB_CoreReset>
 8008ba8:	4603      	mov	r3, r0
 8008baa:	73fb      	strb	r3, [r7, #15]
 8008bac:	e010      	b.n	8008bd0 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	68db      	ldr	r3, [r3, #12]
 8008bb2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	f001 fab8 	bl	800a130 <USB_CoreReset>
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bc8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8008bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bd2:	2b01      	cmp	r3, #1
 8008bd4:	d10b      	bne.n	8008bee <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	689b      	ldr	r3, [r3, #8]
 8008bda:	f043 0206 	orr.w	r2, r3, #6
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	689b      	ldr	r3, [r3, #8]
 8008be6:	f043 0220 	orr.w	r2, r3, #32
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008bee:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	3710      	adds	r7, #16
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008bfa:	b004      	add	sp, #16
 8008bfc:	4770      	bx	lr
 8008bfe:	bf00      	nop
 8008c00:	ffbdffbf 	.word	0xffbdffbf

08008c04 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008c04:	b480      	push	{r7}
 8008c06:	b087      	sub	sp, #28
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	60f8      	str	r0, [r7, #12]
 8008c0c:	60b9      	str	r1, [r7, #8]
 8008c0e:	4613      	mov	r3, r2
 8008c10:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008c12:	79fb      	ldrb	r3, [r7, #7]
 8008c14:	2b02      	cmp	r3, #2
 8008c16:	d165      	bne.n	8008ce4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008c18:	68bb      	ldr	r3, [r7, #8]
 8008c1a:	4a41      	ldr	r2, [pc, #260]	; (8008d20 <USB_SetTurnaroundTime+0x11c>)
 8008c1c:	4293      	cmp	r3, r2
 8008c1e:	d906      	bls.n	8008c2e <USB_SetTurnaroundTime+0x2a>
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	4a40      	ldr	r2, [pc, #256]	; (8008d24 <USB_SetTurnaroundTime+0x120>)
 8008c24:	4293      	cmp	r3, r2
 8008c26:	d802      	bhi.n	8008c2e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008c28:	230f      	movs	r3, #15
 8008c2a:	617b      	str	r3, [r7, #20]
 8008c2c:	e062      	b.n	8008cf4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008c2e:	68bb      	ldr	r3, [r7, #8]
 8008c30:	4a3c      	ldr	r2, [pc, #240]	; (8008d24 <USB_SetTurnaroundTime+0x120>)
 8008c32:	4293      	cmp	r3, r2
 8008c34:	d906      	bls.n	8008c44 <USB_SetTurnaroundTime+0x40>
 8008c36:	68bb      	ldr	r3, [r7, #8]
 8008c38:	4a3b      	ldr	r2, [pc, #236]	; (8008d28 <USB_SetTurnaroundTime+0x124>)
 8008c3a:	4293      	cmp	r3, r2
 8008c3c:	d802      	bhi.n	8008c44 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008c3e:	230e      	movs	r3, #14
 8008c40:	617b      	str	r3, [r7, #20]
 8008c42:	e057      	b.n	8008cf4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008c44:	68bb      	ldr	r3, [r7, #8]
 8008c46:	4a38      	ldr	r2, [pc, #224]	; (8008d28 <USB_SetTurnaroundTime+0x124>)
 8008c48:	4293      	cmp	r3, r2
 8008c4a:	d906      	bls.n	8008c5a <USB_SetTurnaroundTime+0x56>
 8008c4c:	68bb      	ldr	r3, [r7, #8]
 8008c4e:	4a37      	ldr	r2, [pc, #220]	; (8008d2c <USB_SetTurnaroundTime+0x128>)
 8008c50:	4293      	cmp	r3, r2
 8008c52:	d802      	bhi.n	8008c5a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008c54:	230d      	movs	r3, #13
 8008c56:	617b      	str	r3, [r7, #20]
 8008c58:	e04c      	b.n	8008cf4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008c5a:	68bb      	ldr	r3, [r7, #8]
 8008c5c:	4a33      	ldr	r2, [pc, #204]	; (8008d2c <USB_SetTurnaroundTime+0x128>)
 8008c5e:	4293      	cmp	r3, r2
 8008c60:	d906      	bls.n	8008c70 <USB_SetTurnaroundTime+0x6c>
 8008c62:	68bb      	ldr	r3, [r7, #8]
 8008c64:	4a32      	ldr	r2, [pc, #200]	; (8008d30 <USB_SetTurnaroundTime+0x12c>)
 8008c66:	4293      	cmp	r3, r2
 8008c68:	d802      	bhi.n	8008c70 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008c6a:	230c      	movs	r3, #12
 8008c6c:	617b      	str	r3, [r7, #20]
 8008c6e:	e041      	b.n	8008cf4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008c70:	68bb      	ldr	r3, [r7, #8]
 8008c72:	4a2f      	ldr	r2, [pc, #188]	; (8008d30 <USB_SetTurnaroundTime+0x12c>)
 8008c74:	4293      	cmp	r3, r2
 8008c76:	d906      	bls.n	8008c86 <USB_SetTurnaroundTime+0x82>
 8008c78:	68bb      	ldr	r3, [r7, #8]
 8008c7a:	4a2e      	ldr	r2, [pc, #184]	; (8008d34 <USB_SetTurnaroundTime+0x130>)
 8008c7c:	4293      	cmp	r3, r2
 8008c7e:	d802      	bhi.n	8008c86 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008c80:	230b      	movs	r3, #11
 8008c82:	617b      	str	r3, [r7, #20]
 8008c84:	e036      	b.n	8008cf4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008c86:	68bb      	ldr	r3, [r7, #8]
 8008c88:	4a2a      	ldr	r2, [pc, #168]	; (8008d34 <USB_SetTurnaroundTime+0x130>)
 8008c8a:	4293      	cmp	r3, r2
 8008c8c:	d906      	bls.n	8008c9c <USB_SetTurnaroundTime+0x98>
 8008c8e:	68bb      	ldr	r3, [r7, #8]
 8008c90:	4a29      	ldr	r2, [pc, #164]	; (8008d38 <USB_SetTurnaroundTime+0x134>)
 8008c92:	4293      	cmp	r3, r2
 8008c94:	d802      	bhi.n	8008c9c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008c96:	230a      	movs	r3, #10
 8008c98:	617b      	str	r3, [r7, #20]
 8008c9a:	e02b      	b.n	8008cf4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008c9c:	68bb      	ldr	r3, [r7, #8]
 8008c9e:	4a26      	ldr	r2, [pc, #152]	; (8008d38 <USB_SetTurnaroundTime+0x134>)
 8008ca0:	4293      	cmp	r3, r2
 8008ca2:	d906      	bls.n	8008cb2 <USB_SetTurnaroundTime+0xae>
 8008ca4:	68bb      	ldr	r3, [r7, #8]
 8008ca6:	4a25      	ldr	r2, [pc, #148]	; (8008d3c <USB_SetTurnaroundTime+0x138>)
 8008ca8:	4293      	cmp	r3, r2
 8008caa:	d802      	bhi.n	8008cb2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008cac:	2309      	movs	r3, #9
 8008cae:	617b      	str	r3, [r7, #20]
 8008cb0:	e020      	b.n	8008cf4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008cb2:	68bb      	ldr	r3, [r7, #8]
 8008cb4:	4a21      	ldr	r2, [pc, #132]	; (8008d3c <USB_SetTurnaroundTime+0x138>)
 8008cb6:	4293      	cmp	r3, r2
 8008cb8:	d906      	bls.n	8008cc8 <USB_SetTurnaroundTime+0xc4>
 8008cba:	68bb      	ldr	r3, [r7, #8]
 8008cbc:	4a20      	ldr	r2, [pc, #128]	; (8008d40 <USB_SetTurnaroundTime+0x13c>)
 8008cbe:	4293      	cmp	r3, r2
 8008cc0:	d802      	bhi.n	8008cc8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008cc2:	2308      	movs	r3, #8
 8008cc4:	617b      	str	r3, [r7, #20]
 8008cc6:	e015      	b.n	8008cf4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008cc8:	68bb      	ldr	r3, [r7, #8]
 8008cca:	4a1d      	ldr	r2, [pc, #116]	; (8008d40 <USB_SetTurnaroundTime+0x13c>)
 8008ccc:	4293      	cmp	r3, r2
 8008cce:	d906      	bls.n	8008cde <USB_SetTurnaroundTime+0xda>
 8008cd0:	68bb      	ldr	r3, [r7, #8]
 8008cd2:	4a1c      	ldr	r2, [pc, #112]	; (8008d44 <USB_SetTurnaroundTime+0x140>)
 8008cd4:	4293      	cmp	r3, r2
 8008cd6:	d802      	bhi.n	8008cde <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008cd8:	2307      	movs	r3, #7
 8008cda:	617b      	str	r3, [r7, #20]
 8008cdc:	e00a      	b.n	8008cf4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008cde:	2306      	movs	r3, #6
 8008ce0:	617b      	str	r3, [r7, #20]
 8008ce2:	e007      	b.n	8008cf4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008ce4:	79fb      	ldrb	r3, [r7, #7]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d102      	bne.n	8008cf0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008cea:	2309      	movs	r3, #9
 8008cec:	617b      	str	r3, [r7, #20]
 8008cee:	e001      	b.n	8008cf4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008cf0:	2309      	movs	r3, #9
 8008cf2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	68db      	ldr	r3, [r3, #12]
 8008cf8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	68da      	ldr	r2, [r3, #12]
 8008d04:	697b      	ldr	r3, [r7, #20]
 8008d06:	029b      	lsls	r3, r3, #10
 8008d08:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008d0c:	431a      	orrs	r2, r3
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008d12:	2300      	movs	r3, #0
}
 8008d14:	4618      	mov	r0, r3
 8008d16:	371c      	adds	r7, #28
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1e:	4770      	bx	lr
 8008d20:	00d8acbf 	.word	0x00d8acbf
 8008d24:	00e4e1bf 	.word	0x00e4e1bf
 8008d28:	00f423ff 	.word	0x00f423ff
 8008d2c:	0106737f 	.word	0x0106737f
 8008d30:	011a499f 	.word	0x011a499f
 8008d34:	01312cff 	.word	0x01312cff
 8008d38:	014ca43f 	.word	0x014ca43f
 8008d3c:	016e35ff 	.word	0x016e35ff
 8008d40:	01a6ab1f 	.word	0x01a6ab1f
 8008d44:	01e847ff 	.word	0x01e847ff

08008d48 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008d48:	b480      	push	{r7}
 8008d4a:	b083      	sub	sp, #12
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	689b      	ldr	r3, [r3, #8]
 8008d54:	f043 0201 	orr.w	r2, r3, #1
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008d5c:	2300      	movs	r3, #0
}
 8008d5e:	4618      	mov	r0, r3
 8008d60:	370c      	adds	r7, #12
 8008d62:	46bd      	mov	sp, r7
 8008d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d68:	4770      	bx	lr

08008d6a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008d6a:	b480      	push	{r7}
 8008d6c:	b083      	sub	sp, #12
 8008d6e:	af00      	add	r7, sp, #0
 8008d70:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	689b      	ldr	r3, [r3, #8]
 8008d76:	f023 0201 	bic.w	r2, r3, #1
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008d7e:	2300      	movs	r3, #0
}
 8008d80:	4618      	mov	r0, r3
 8008d82:	370c      	adds	r7, #12
 8008d84:	46bd      	mov	sp, r7
 8008d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8a:	4770      	bx	lr

08008d8c <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b082      	sub	sp, #8
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
 8008d94:	460b      	mov	r3, r1
 8008d96:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	68db      	ldr	r3, [r3, #12]
 8008d9c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008da4:	78fb      	ldrb	r3, [r7, #3]
 8008da6:	2b01      	cmp	r3, #1
 8008da8:	d106      	bne.n	8008db8 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	68db      	ldr	r3, [r3, #12]
 8008dae:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	60da      	str	r2, [r3, #12]
 8008db6:	e00b      	b.n	8008dd0 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8008db8:	78fb      	ldrb	r3, [r7, #3]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d106      	bne.n	8008dcc <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	68db      	ldr	r3, [r3, #12]
 8008dc2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	60da      	str	r2, [r3, #12]
 8008dca:	e001      	b.n	8008dd0 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8008dcc:	2301      	movs	r3, #1
 8008dce:	e003      	b.n	8008dd8 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8008dd0:	2032      	movs	r0, #50	; 0x32
 8008dd2:	f7f8 fb93 	bl	80014fc <HAL_Delay>

  return HAL_OK;
 8008dd6:	2300      	movs	r3, #0
}
 8008dd8:	4618      	mov	r0, r3
 8008dda:	3708      	adds	r7, #8
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	bd80      	pop	{r7, pc}

08008de0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008de0:	b084      	sub	sp, #16
 8008de2:	b580      	push	{r7, lr}
 8008de4:	b086      	sub	sp, #24
 8008de6:	af00      	add	r7, sp, #0
 8008de8:	6078      	str	r0, [r7, #4]
 8008dea:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008dee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008df2:	2300      	movs	r3, #0
 8008df4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	613b      	str	r3, [r7, #16]
 8008dfe:	e009      	b.n	8008e14 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008e00:	687a      	ldr	r2, [r7, #4]
 8008e02:	693b      	ldr	r3, [r7, #16]
 8008e04:	3340      	adds	r3, #64	; 0x40
 8008e06:	009b      	lsls	r3, r3, #2
 8008e08:	4413      	add	r3, r2
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008e0e:	693b      	ldr	r3, [r7, #16]
 8008e10:	3301      	adds	r3, #1
 8008e12:	613b      	str	r3, [r7, #16]
 8008e14:	693b      	ldr	r3, [r7, #16]
 8008e16:	2b0e      	cmp	r3, #14
 8008e18:	d9f2      	bls.n	8008e00 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008e1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d11c      	bne.n	8008e5a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e26:	685b      	ldr	r3, [r3, #4]
 8008e28:	68fa      	ldr	r2, [r7, #12]
 8008e2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008e2e:	f043 0302 	orr.w	r3, r3, #2
 8008e32:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e38:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	601a      	str	r2, [r3, #0]
 8008e58:	e005      	b.n	8008e66 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e5e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008e6c:	461a      	mov	r2, r3
 8008e6e:	2300      	movs	r3, #0
 8008e70:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e78:	4619      	mov	r1, r3
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e80:	461a      	mov	r2, r3
 8008e82:	680b      	ldr	r3, [r1, #0]
 8008e84:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e88:	2b01      	cmp	r3, #1
 8008e8a:	d10c      	bne.n	8008ea6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d104      	bne.n	8008e9c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008e92:	2100      	movs	r1, #0
 8008e94:	6878      	ldr	r0, [r7, #4]
 8008e96:	f000 f959 	bl	800914c <USB_SetDevSpeed>
 8008e9a:	e018      	b.n	8008ece <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008e9c:	2101      	movs	r1, #1
 8008e9e:	6878      	ldr	r0, [r7, #4]
 8008ea0:	f000 f954 	bl	800914c <USB_SetDevSpeed>
 8008ea4:	e013      	b.n	8008ece <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8008ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ea8:	2b03      	cmp	r3, #3
 8008eaa:	d10c      	bne.n	8008ec6 <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d104      	bne.n	8008ebc <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008eb2:	2100      	movs	r1, #0
 8008eb4:	6878      	ldr	r0, [r7, #4]
 8008eb6:	f000 f949 	bl	800914c <USB_SetDevSpeed>
 8008eba:	e008      	b.n	8008ece <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008ebc:	2101      	movs	r1, #1
 8008ebe:	6878      	ldr	r0, [r7, #4]
 8008ec0:	f000 f944 	bl	800914c <USB_SetDevSpeed>
 8008ec4:	e003      	b.n	8008ece <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008ec6:	2103      	movs	r1, #3
 8008ec8:	6878      	ldr	r0, [r7, #4]
 8008eca:	f000 f93f 	bl	800914c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008ece:	2110      	movs	r1, #16
 8008ed0:	6878      	ldr	r0, [r7, #4]
 8008ed2:	f000 f8f3 	bl	80090bc <USB_FlushTxFifo>
 8008ed6:	4603      	mov	r3, r0
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d001      	beq.n	8008ee0 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 8008edc:	2301      	movs	r3, #1
 8008ede:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008ee0:	6878      	ldr	r0, [r7, #4]
 8008ee2:	f000 f911 	bl	8009108 <USB_FlushRxFifo>
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d001      	beq.n	8008ef0 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 8008eec:	2301      	movs	r3, #1
 8008eee:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ef6:	461a      	mov	r2, r3
 8008ef8:	2300      	movs	r3, #0
 8008efa:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f02:	461a      	mov	r2, r3
 8008f04:	2300      	movs	r3, #0
 8008f06:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f0e:	461a      	mov	r2, r3
 8008f10:	2300      	movs	r3, #0
 8008f12:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008f14:	2300      	movs	r3, #0
 8008f16:	613b      	str	r3, [r7, #16]
 8008f18:	e043      	b.n	8008fa2 <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008f1a:	693b      	ldr	r3, [r7, #16]
 8008f1c:	015a      	lsls	r2, r3, #5
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	4413      	add	r3, r2
 8008f22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008f2c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008f30:	d118      	bne.n	8008f64 <USB_DevInit+0x184>
    {
      if (i == 0U)
 8008f32:	693b      	ldr	r3, [r7, #16]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d10a      	bne.n	8008f4e <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008f38:	693b      	ldr	r3, [r7, #16]
 8008f3a:	015a      	lsls	r2, r3, #5
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	4413      	add	r3, r2
 8008f40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f44:	461a      	mov	r2, r3
 8008f46:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008f4a:	6013      	str	r3, [r2, #0]
 8008f4c:	e013      	b.n	8008f76 <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008f4e:	693b      	ldr	r3, [r7, #16]
 8008f50:	015a      	lsls	r2, r3, #5
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	4413      	add	r3, r2
 8008f56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f5a:	461a      	mov	r2, r3
 8008f5c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008f60:	6013      	str	r3, [r2, #0]
 8008f62:	e008      	b.n	8008f76 <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008f64:	693b      	ldr	r3, [r7, #16]
 8008f66:	015a      	lsls	r2, r3, #5
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	4413      	add	r3, r2
 8008f6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f70:	461a      	mov	r2, r3
 8008f72:	2300      	movs	r3, #0
 8008f74:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008f76:	693b      	ldr	r3, [r7, #16]
 8008f78:	015a      	lsls	r2, r3, #5
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	4413      	add	r3, r2
 8008f7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f82:	461a      	mov	r2, r3
 8008f84:	2300      	movs	r3, #0
 8008f86:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008f88:	693b      	ldr	r3, [r7, #16]
 8008f8a:	015a      	lsls	r2, r3, #5
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	4413      	add	r3, r2
 8008f90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f94:	461a      	mov	r2, r3
 8008f96:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008f9a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008f9c:	693b      	ldr	r3, [r7, #16]
 8008f9e:	3301      	adds	r3, #1
 8008fa0:	613b      	str	r3, [r7, #16]
 8008fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fa4:	693a      	ldr	r2, [r7, #16]
 8008fa6:	429a      	cmp	r2, r3
 8008fa8:	d3b7      	bcc.n	8008f1a <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008faa:	2300      	movs	r3, #0
 8008fac:	613b      	str	r3, [r7, #16]
 8008fae:	e043      	b.n	8009038 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008fb0:	693b      	ldr	r3, [r7, #16]
 8008fb2:	015a      	lsls	r2, r3, #5
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	4413      	add	r3, r2
 8008fb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008fc2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008fc6:	d118      	bne.n	8008ffa <USB_DevInit+0x21a>
    {
      if (i == 0U)
 8008fc8:	693b      	ldr	r3, [r7, #16]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d10a      	bne.n	8008fe4 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008fce:	693b      	ldr	r3, [r7, #16]
 8008fd0:	015a      	lsls	r2, r3, #5
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	4413      	add	r3, r2
 8008fd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fda:	461a      	mov	r2, r3
 8008fdc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008fe0:	6013      	str	r3, [r2, #0]
 8008fe2:	e013      	b.n	800900c <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008fe4:	693b      	ldr	r3, [r7, #16]
 8008fe6:	015a      	lsls	r2, r3, #5
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	4413      	add	r3, r2
 8008fec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ff0:	461a      	mov	r2, r3
 8008ff2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008ff6:	6013      	str	r3, [r2, #0]
 8008ff8:	e008      	b.n	800900c <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008ffa:	693b      	ldr	r3, [r7, #16]
 8008ffc:	015a      	lsls	r2, r3, #5
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	4413      	add	r3, r2
 8009002:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009006:	461a      	mov	r2, r3
 8009008:	2300      	movs	r3, #0
 800900a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800900c:	693b      	ldr	r3, [r7, #16]
 800900e:	015a      	lsls	r2, r3, #5
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	4413      	add	r3, r2
 8009014:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009018:	461a      	mov	r2, r3
 800901a:	2300      	movs	r3, #0
 800901c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800901e:	693b      	ldr	r3, [r7, #16]
 8009020:	015a      	lsls	r2, r3, #5
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	4413      	add	r3, r2
 8009026:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800902a:	461a      	mov	r2, r3
 800902c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009030:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009032:	693b      	ldr	r3, [r7, #16]
 8009034:	3301      	adds	r3, #1
 8009036:	613b      	str	r3, [r7, #16]
 8009038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800903a:	693a      	ldr	r2, [r7, #16]
 800903c:	429a      	cmp	r2, r3
 800903e:	d3b7      	bcc.n	8008fb0 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009046:	691b      	ldr	r3, [r3, #16]
 8009048:	68fa      	ldr	r2, [r7, #12]
 800904a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800904e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009052:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2200      	movs	r2, #0
 8009058:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009060:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009064:	2b00      	cmp	r3, #0
 8009066:	d105      	bne.n	8009074 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	699b      	ldr	r3, [r3, #24]
 800906c:	f043 0210 	orr.w	r2, r3, #16
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	699a      	ldr	r2, [r3, #24]
 8009078:	4b0e      	ldr	r3, [pc, #56]	; (80090b4 <USB_DevInit+0x2d4>)
 800907a:	4313      	orrs	r3, r2
 800907c:	687a      	ldr	r2, [r7, #4]
 800907e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009080:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009082:	2b00      	cmp	r3, #0
 8009084:	d005      	beq.n	8009092 <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	699b      	ldr	r3, [r3, #24]
 800908a:	f043 0208 	orr.w	r2, r3, #8
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009092:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009094:	2b01      	cmp	r3, #1
 8009096:	d105      	bne.n	80090a4 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	699a      	ldr	r2, [r3, #24]
 800909c:	4b06      	ldr	r3, [pc, #24]	; (80090b8 <USB_DevInit+0x2d8>)
 800909e:	4313      	orrs	r3, r2
 80090a0:	687a      	ldr	r2, [r7, #4]
 80090a2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80090a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80090a6:	4618      	mov	r0, r3
 80090a8:	3718      	adds	r7, #24
 80090aa:	46bd      	mov	sp, r7
 80090ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80090b0:	b004      	add	sp, #16
 80090b2:	4770      	bx	lr
 80090b4:	803c3800 	.word	0x803c3800
 80090b8:	40000004 	.word	0x40000004

080090bc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80090bc:	b480      	push	{r7}
 80090be:	b085      	sub	sp, #20
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
 80090c4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80090c6:	2300      	movs	r3, #0
 80090c8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80090ca:	683b      	ldr	r3, [r7, #0]
 80090cc:	019b      	lsls	r3, r3, #6
 80090ce:	f043 0220 	orr.w	r2, r3, #32
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	3301      	adds	r3, #1
 80090da:	60fb      	str	r3, [r7, #12]
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	4a09      	ldr	r2, [pc, #36]	; (8009104 <USB_FlushTxFifo+0x48>)
 80090e0:	4293      	cmp	r3, r2
 80090e2:	d901      	bls.n	80090e8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80090e4:	2303      	movs	r3, #3
 80090e6:	e006      	b.n	80090f6 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	691b      	ldr	r3, [r3, #16]
 80090ec:	f003 0320 	and.w	r3, r3, #32
 80090f0:	2b20      	cmp	r3, #32
 80090f2:	d0f0      	beq.n	80090d6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80090f4:	2300      	movs	r3, #0
}
 80090f6:	4618      	mov	r0, r3
 80090f8:	3714      	adds	r7, #20
 80090fa:	46bd      	mov	sp, r7
 80090fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009100:	4770      	bx	lr
 8009102:	bf00      	nop
 8009104:	00030d40 	.word	0x00030d40

08009108 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009108:	b480      	push	{r7}
 800910a:	b085      	sub	sp, #20
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8009110:	2300      	movs	r3, #0
 8009112:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2210      	movs	r2, #16
 8009118:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	3301      	adds	r3, #1
 800911e:	60fb      	str	r3, [r7, #12]
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	4a09      	ldr	r2, [pc, #36]	; (8009148 <USB_FlushRxFifo+0x40>)
 8009124:	4293      	cmp	r3, r2
 8009126:	d901      	bls.n	800912c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8009128:	2303      	movs	r3, #3
 800912a:	e006      	b.n	800913a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	691b      	ldr	r3, [r3, #16]
 8009130:	f003 0310 	and.w	r3, r3, #16
 8009134:	2b10      	cmp	r3, #16
 8009136:	d0f0      	beq.n	800911a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8009138:	2300      	movs	r3, #0
}
 800913a:	4618      	mov	r0, r3
 800913c:	3714      	adds	r7, #20
 800913e:	46bd      	mov	sp, r7
 8009140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009144:	4770      	bx	lr
 8009146:	bf00      	nop
 8009148:	00030d40 	.word	0x00030d40

0800914c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800914c:	b480      	push	{r7}
 800914e:	b085      	sub	sp, #20
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
 8009154:	460b      	mov	r3, r1
 8009156:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009162:	681a      	ldr	r2, [r3, #0]
 8009164:	78fb      	ldrb	r3, [r7, #3]
 8009166:	68f9      	ldr	r1, [r7, #12]
 8009168:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800916c:	4313      	orrs	r3, r2
 800916e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009170:	2300      	movs	r3, #0
}
 8009172:	4618      	mov	r0, r3
 8009174:	3714      	adds	r7, #20
 8009176:	46bd      	mov	sp, r7
 8009178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917c:	4770      	bx	lr

0800917e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800917e:	b480      	push	{r7}
 8009180:	b087      	sub	sp, #28
 8009182:	af00      	add	r7, sp, #0
 8009184:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800918a:	693b      	ldr	r3, [r7, #16]
 800918c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009190:	689b      	ldr	r3, [r3, #8]
 8009192:	f003 0306 	and.w	r3, r3, #6
 8009196:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d102      	bne.n	80091a4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800919e:	2300      	movs	r3, #0
 80091a0:	75fb      	strb	r3, [r7, #23]
 80091a2:	e00a      	b.n	80091ba <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	2b02      	cmp	r3, #2
 80091a8:	d002      	beq.n	80091b0 <USB_GetDevSpeed+0x32>
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	2b06      	cmp	r3, #6
 80091ae:	d102      	bne.n	80091b6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80091b0:	2302      	movs	r3, #2
 80091b2:	75fb      	strb	r3, [r7, #23]
 80091b4:	e001      	b.n	80091ba <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80091b6:	230f      	movs	r3, #15
 80091b8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80091ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80091bc:	4618      	mov	r0, r3
 80091be:	371c      	adds	r7, #28
 80091c0:	46bd      	mov	sp, r7
 80091c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c6:	4770      	bx	lr

080091c8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80091c8:	b480      	push	{r7}
 80091ca:	b085      	sub	sp, #20
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
 80091d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80091d6:	683b      	ldr	r3, [r7, #0]
 80091d8:	781b      	ldrb	r3, [r3, #0]
 80091da:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	785b      	ldrb	r3, [r3, #1]
 80091e0:	2b01      	cmp	r3, #1
 80091e2:	d139      	bne.n	8009258 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091ea:	69da      	ldr	r2, [r3, #28]
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	781b      	ldrb	r3, [r3, #0]
 80091f0:	f003 030f 	and.w	r3, r3, #15
 80091f4:	2101      	movs	r1, #1
 80091f6:	fa01 f303 	lsl.w	r3, r1, r3
 80091fa:	b29b      	uxth	r3, r3
 80091fc:	68f9      	ldr	r1, [r7, #12]
 80091fe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009202:	4313      	orrs	r3, r2
 8009204:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009206:	68bb      	ldr	r3, [r7, #8]
 8009208:	015a      	lsls	r2, r3, #5
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	4413      	add	r3, r2
 800920e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009218:	2b00      	cmp	r3, #0
 800921a:	d153      	bne.n	80092c4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800921c:	68bb      	ldr	r3, [r7, #8]
 800921e:	015a      	lsls	r2, r3, #5
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	4413      	add	r3, r2
 8009224:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009228:	681a      	ldr	r2, [r3, #0]
 800922a:	683b      	ldr	r3, [r7, #0]
 800922c:	689b      	ldr	r3, [r3, #8]
 800922e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009232:	683b      	ldr	r3, [r7, #0]
 8009234:	78db      	ldrb	r3, [r3, #3]
 8009236:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009238:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800923a:	68bb      	ldr	r3, [r7, #8]
 800923c:	059b      	lsls	r3, r3, #22
 800923e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009240:	431a      	orrs	r2, r3
 8009242:	68bb      	ldr	r3, [r7, #8]
 8009244:	0159      	lsls	r1, r3, #5
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	440b      	add	r3, r1
 800924a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800924e:	4619      	mov	r1, r3
 8009250:	4b20      	ldr	r3, [pc, #128]	; (80092d4 <USB_ActivateEndpoint+0x10c>)
 8009252:	4313      	orrs	r3, r2
 8009254:	600b      	str	r3, [r1, #0]
 8009256:	e035      	b.n	80092c4 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800925e:	69da      	ldr	r2, [r3, #28]
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	781b      	ldrb	r3, [r3, #0]
 8009264:	f003 030f 	and.w	r3, r3, #15
 8009268:	2101      	movs	r1, #1
 800926a:	fa01 f303 	lsl.w	r3, r1, r3
 800926e:	041b      	lsls	r3, r3, #16
 8009270:	68f9      	ldr	r1, [r7, #12]
 8009272:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009276:	4313      	orrs	r3, r2
 8009278:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800927a:	68bb      	ldr	r3, [r7, #8]
 800927c:	015a      	lsls	r2, r3, #5
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	4413      	add	r3, r2
 8009282:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800928c:	2b00      	cmp	r3, #0
 800928e:	d119      	bne.n	80092c4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009290:	68bb      	ldr	r3, [r7, #8]
 8009292:	015a      	lsls	r2, r3, #5
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	4413      	add	r3, r2
 8009298:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800929c:	681a      	ldr	r2, [r3, #0]
 800929e:	683b      	ldr	r3, [r7, #0]
 80092a0:	689b      	ldr	r3, [r3, #8]
 80092a2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80092a6:	683b      	ldr	r3, [r7, #0]
 80092a8:	78db      	ldrb	r3, [r3, #3]
 80092aa:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80092ac:	430b      	orrs	r3, r1
 80092ae:	431a      	orrs	r2, r3
 80092b0:	68bb      	ldr	r3, [r7, #8]
 80092b2:	0159      	lsls	r1, r3, #5
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	440b      	add	r3, r1
 80092b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092bc:	4619      	mov	r1, r3
 80092be:	4b05      	ldr	r3, [pc, #20]	; (80092d4 <USB_ActivateEndpoint+0x10c>)
 80092c0:	4313      	orrs	r3, r2
 80092c2:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80092c4:	2300      	movs	r3, #0
}
 80092c6:	4618      	mov	r0, r3
 80092c8:	3714      	adds	r7, #20
 80092ca:	46bd      	mov	sp, r7
 80092cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d0:	4770      	bx	lr
 80092d2:	bf00      	nop
 80092d4:	10008000 	.word	0x10008000

080092d8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80092d8:	b480      	push	{r7}
 80092da:	b085      	sub	sp, #20
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
 80092e0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80092e6:	683b      	ldr	r3, [r7, #0]
 80092e8:	781b      	ldrb	r3, [r3, #0]
 80092ea:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80092ec:	683b      	ldr	r3, [r7, #0]
 80092ee:	785b      	ldrb	r3, [r3, #1]
 80092f0:	2b01      	cmp	r3, #1
 80092f2:	d161      	bne.n	80093b8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80092f4:	68bb      	ldr	r3, [r7, #8]
 80092f6:	015a      	lsls	r2, r3, #5
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	4413      	add	r3, r2
 80092fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009306:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800930a:	d11f      	bne.n	800934c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800930c:	68bb      	ldr	r3, [r7, #8]
 800930e:	015a      	lsls	r2, r3, #5
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	4413      	add	r3, r2
 8009314:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	68ba      	ldr	r2, [r7, #8]
 800931c:	0151      	lsls	r1, r2, #5
 800931e:	68fa      	ldr	r2, [r7, #12]
 8009320:	440a      	add	r2, r1
 8009322:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009326:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800932a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800932c:	68bb      	ldr	r3, [r7, #8]
 800932e:	015a      	lsls	r2, r3, #5
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	4413      	add	r3, r2
 8009334:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	68ba      	ldr	r2, [r7, #8]
 800933c:	0151      	lsls	r1, r2, #5
 800933e:	68fa      	ldr	r2, [r7, #12]
 8009340:	440a      	add	r2, r1
 8009342:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009346:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800934a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009352:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009354:	683b      	ldr	r3, [r7, #0]
 8009356:	781b      	ldrb	r3, [r3, #0]
 8009358:	f003 030f 	and.w	r3, r3, #15
 800935c:	2101      	movs	r1, #1
 800935e:	fa01 f303 	lsl.w	r3, r1, r3
 8009362:	b29b      	uxth	r3, r3
 8009364:	43db      	mvns	r3, r3
 8009366:	68f9      	ldr	r1, [r7, #12]
 8009368:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800936c:	4013      	ands	r3, r2
 800936e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009376:	69da      	ldr	r2, [r3, #28]
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	781b      	ldrb	r3, [r3, #0]
 800937c:	f003 030f 	and.w	r3, r3, #15
 8009380:	2101      	movs	r1, #1
 8009382:	fa01 f303 	lsl.w	r3, r1, r3
 8009386:	b29b      	uxth	r3, r3
 8009388:	43db      	mvns	r3, r3
 800938a:	68f9      	ldr	r1, [r7, #12]
 800938c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009390:	4013      	ands	r3, r2
 8009392:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009394:	68bb      	ldr	r3, [r7, #8]
 8009396:	015a      	lsls	r2, r3, #5
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	4413      	add	r3, r2
 800939c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093a0:	681a      	ldr	r2, [r3, #0]
 80093a2:	68bb      	ldr	r3, [r7, #8]
 80093a4:	0159      	lsls	r1, r3, #5
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	440b      	add	r3, r1
 80093aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093ae:	4619      	mov	r1, r3
 80093b0:	4b35      	ldr	r3, [pc, #212]	; (8009488 <USB_DeactivateEndpoint+0x1b0>)
 80093b2:	4013      	ands	r3, r2
 80093b4:	600b      	str	r3, [r1, #0]
 80093b6:	e060      	b.n	800947a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80093b8:	68bb      	ldr	r3, [r7, #8]
 80093ba:	015a      	lsls	r2, r3, #5
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	4413      	add	r3, r2
 80093c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80093ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80093ce:	d11f      	bne.n	8009410 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80093d0:	68bb      	ldr	r3, [r7, #8]
 80093d2:	015a      	lsls	r2, r3, #5
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	4413      	add	r3, r2
 80093d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	68ba      	ldr	r2, [r7, #8]
 80093e0:	0151      	lsls	r1, r2, #5
 80093e2:	68fa      	ldr	r2, [r7, #12]
 80093e4:	440a      	add	r2, r1
 80093e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80093ea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80093ee:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80093f0:	68bb      	ldr	r3, [r7, #8]
 80093f2:	015a      	lsls	r2, r3, #5
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	4413      	add	r3, r2
 80093f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	68ba      	ldr	r2, [r7, #8]
 8009400:	0151      	lsls	r1, r2, #5
 8009402:	68fa      	ldr	r2, [r7, #12]
 8009404:	440a      	add	r2, r1
 8009406:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800940a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800940e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009416:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009418:	683b      	ldr	r3, [r7, #0]
 800941a:	781b      	ldrb	r3, [r3, #0]
 800941c:	f003 030f 	and.w	r3, r3, #15
 8009420:	2101      	movs	r1, #1
 8009422:	fa01 f303 	lsl.w	r3, r1, r3
 8009426:	041b      	lsls	r3, r3, #16
 8009428:	43db      	mvns	r3, r3
 800942a:	68f9      	ldr	r1, [r7, #12]
 800942c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009430:	4013      	ands	r3, r2
 8009432:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800943a:	69da      	ldr	r2, [r3, #28]
 800943c:	683b      	ldr	r3, [r7, #0]
 800943e:	781b      	ldrb	r3, [r3, #0]
 8009440:	f003 030f 	and.w	r3, r3, #15
 8009444:	2101      	movs	r1, #1
 8009446:	fa01 f303 	lsl.w	r3, r1, r3
 800944a:	041b      	lsls	r3, r3, #16
 800944c:	43db      	mvns	r3, r3
 800944e:	68f9      	ldr	r1, [r7, #12]
 8009450:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009454:	4013      	ands	r3, r2
 8009456:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009458:	68bb      	ldr	r3, [r7, #8]
 800945a:	015a      	lsls	r2, r3, #5
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	4413      	add	r3, r2
 8009460:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009464:	681a      	ldr	r2, [r3, #0]
 8009466:	68bb      	ldr	r3, [r7, #8]
 8009468:	0159      	lsls	r1, r3, #5
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	440b      	add	r3, r1
 800946e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009472:	4619      	mov	r1, r3
 8009474:	4b05      	ldr	r3, [pc, #20]	; (800948c <USB_DeactivateEndpoint+0x1b4>)
 8009476:	4013      	ands	r3, r2
 8009478:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800947a:	2300      	movs	r3, #0
}
 800947c:	4618      	mov	r0, r3
 800947e:	3714      	adds	r7, #20
 8009480:	46bd      	mov	sp, r7
 8009482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009486:	4770      	bx	lr
 8009488:	ec337800 	.word	0xec337800
 800948c:	eff37800 	.word	0xeff37800

08009490 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009490:	b580      	push	{r7, lr}
 8009492:	b08a      	sub	sp, #40	; 0x28
 8009494:	af02      	add	r7, sp, #8
 8009496:	60f8      	str	r0, [r7, #12]
 8009498:	60b9      	str	r1, [r7, #8]
 800949a:	4613      	mov	r3, r2
 800949c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80094a2:	68bb      	ldr	r3, [r7, #8]
 80094a4:	781b      	ldrb	r3, [r3, #0]
 80094a6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80094a8:	68bb      	ldr	r3, [r7, #8]
 80094aa:	785b      	ldrb	r3, [r3, #1]
 80094ac:	2b01      	cmp	r3, #1
 80094ae:	f040 8163 	bne.w	8009778 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80094b2:	68bb      	ldr	r3, [r7, #8]
 80094b4:	695b      	ldr	r3, [r3, #20]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d132      	bne.n	8009520 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80094ba:	69bb      	ldr	r3, [r7, #24]
 80094bc:	015a      	lsls	r2, r3, #5
 80094be:	69fb      	ldr	r3, [r7, #28]
 80094c0:	4413      	add	r3, r2
 80094c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094c6:	691a      	ldr	r2, [r3, #16]
 80094c8:	69bb      	ldr	r3, [r7, #24]
 80094ca:	0159      	lsls	r1, r3, #5
 80094cc:	69fb      	ldr	r3, [r7, #28]
 80094ce:	440b      	add	r3, r1
 80094d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094d4:	4619      	mov	r1, r3
 80094d6:	4ba5      	ldr	r3, [pc, #660]	; (800976c <USB_EPStartXfer+0x2dc>)
 80094d8:	4013      	ands	r3, r2
 80094da:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80094dc:	69bb      	ldr	r3, [r7, #24]
 80094de:	015a      	lsls	r2, r3, #5
 80094e0:	69fb      	ldr	r3, [r7, #28]
 80094e2:	4413      	add	r3, r2
 80094e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094e8:	691b      	ldr	r3, [r3, #16]
 80094ea:	69ba      	ldr	r2, [r7, #24]
 80094ec:	0151      	lsls	r1, r2, #5
 80094ee:	69fa      	ldr	r2, [r7, #28]
 80094f0:	440a      	add	r2, r1
 80094f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80094f6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80094fa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80094fc:	69bb      	ldr	r3, [r7, #24]
 80094fe:	015a      	lsls	r2, r3, #5
 8009500:	69fb      	ldr	r3, [r7, #28]
 8009502:	4413      	add	r3, r2
 8009504:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009508:	691a      	ldr	r2, [r3, #16]
 800950a:	69bb      	ldr	r3, [r7, #24]
 800950c:	0159      	lsls	r1, r3, #5
 800950e:	69fb      	ldr	r3, [r7, #28]
 8009510:	440b      	add	r3, r1
 8009512:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009516:	4619      	mov	r1, r3
 8009518:	4b95      	ldr	r3, [pc, #596]	; (8009770 <USB_EPStartXfer+0x2e0>)
 800951a:	4013      	ands	r3, r2
 800951c:	610b      	str	r3, [r1, #16]
 800951e:	e074      	b.n	800960a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009520:	69bb      	ldr	r3, [r7, #24]
 8009522:	015a      	lsls	r2, r3, #5
 8009524:	69fb      	ldr	r3, [r7, #28]
 8009526:	4413      	add	r3, r2
 8009528:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800952c:	691a      	ldr	r2, [r3, #16]
 800952e:	69bb      	ldr	r3, [r7, #24]
 8009530:	0159      	lsls	r1, r3, #5
 8009532:	69fb      	ldr	r3, [r7, #28]
 8009534:	440b      	add	r3, r1
 8009536:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800953a:	4619      	mov	r1, r3
 800953c:	4b8c      	ldr	r3, [pc, #560]	; (8009770 <USB_EPStartXfer+0x2e0>)
 800953e:	4013      	ands	r3, r2
 8009540:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009542:	69bb      	ldr	r3, [r7, #24]
 8009544:	015a      	lsls	r2, r3, #5
 8009546:	69fb      	ldr	r3, [r7, #28]
 8009548:	4413      	add	r3, r2
 800954a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800954e:	691a      	ldr	r2, [r3, #16]
 8009550:	69bb      	ldr	r3, [r7, #24]
 8009552:	0159      	lsls	r1, r3, #5
 8009554:	69fb      	ldr	r3, [r7, #28]
 8009556:	440b      	add	r3, r1
 8009558:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800955c:	4619      	mov	r1, r3
 800955e:	4b83      	ldr	r3, [pc, #524]	; (800976c <USB_EPStartXfer+0x2dc>)
 8009560:	4013      	ands	r3, r2
 8009562:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8009564:	69bb      	ldr	r3, [r7, #24]
 8009566:	015a      	lsls	r2, r3, #5
 8009568:	69fb      	ldr	r3, [r7, #28]
 800956a:	4413      	add	r3, r2
 800956c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009570:	691a      	ldr	r2, [r3, #16]
 8009572:	68bb      	ldr	r3, [r7, #8]
 8009574:	6959      	ldr	r1, [r3, #20]
 8009576:	68bb      	ldr	r3, [r7, #8]
 8009578:	689b      	ldr	r3, [r3, #8]
 800957a:	440b      	add	r3, r1
 800957c:	1e59      	subs	r1, r3, #1
 800957e:	68bb      	ldr	r3, [r7, #8]
 8009580:	689b      	ldr	r3, [r3, #8]
 8009582:	fbb1 f3f3 	udiv	r3, r1, r3
 8009586:	04d9      	lsls	r1, r3, #19
 8009588:	4b7a      	ldr	r3, [pc, #488]	; (8009774 <USB_EPStartXfer+0x2e4>)
 800958a:	400b      	ands	r3, r1
 800958c:	69b9      	ldr	r1, [r7, #24]
 800958e:	0148      	lsls	r0, r1, #5
 8009590:	69f9      	ldr	r1, [r7, #28]
 8009592:	4401      	add	r1, r0
 8009594:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009598:	4313      	orrs	r3, r2
 800959a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800959c:	69bb      	ldr	r3, [r7, #24]
 800959e:	015a      	lsls	r2, r3, #5
 80095a0:	69fb      	ldr	r3, [r7, #28]
 80095a2:	4413      	add	r3, r2
 80095a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095a8:	691a      	ldr	r2, [r3, #16]
 80095aa:	68bb      	ldr	r3, [r7, #8]
 80095ac:	695b      	ldr	r3, [r3, #20]
 80095ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80095b2:	69b9      	ldr	r1, [r7, #24]
 80095b4:	0148      	lsls	r0, r1, #5
 80095b6:	69f9      	ldr	r1, [r7, #28]
 80095b8:	4401      	add	r1, r0
 80095ba:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80095be:	4313      	orrs	r3, r2
 80095c0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80095c2:	68bb      	ldr	r3, [r7, #8]
 80095c4:	78db      	ldrb	r3, [r3, #3]
 80095c6:	2b01      	cmp	r3, #1
 80095c8:	d11f      	bne.n	800960a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80095ca:	69bb      	ldr	r3, [r7, #24]
 80095cc:	015a      	lsls	r2, r3, #5
 80095ce:	69fb      	ldr	r3, [r7, #28]
 80095d0:	4413      	add	r3, r2
 80095d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095d6:	691b      	ldr	r3, [r3, #16]
 80095d8:	69ba      	ldr	r2, [r7, #24]
 80095da:	0151      	lsls	r1, r2, #5
 80095dc:	69fa      	ldr	r2, [r7, #28]
 80095de:	440a      	add	r2, r1
 80095e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095e4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80095e8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80095ea:	69bb      	ldr	r3, [r7, #24]
 80095ec:	015a      	lsls	r2, r3, #5
 80095ee:	69fb      	ldr	r3, [r7, #28]
 80095f0:	4413      	add	r3, r2
 80095f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095f6:	691b      	ldr	r3, [r3, #16]
 80095f8:	69ba      	ldr	r2, [r7, #24]
 80095fa:	0151      	lsls	r1, r2, #5
 80095fc:	69fa      	ldr	r2, [r7, #28]
 80095fe:	440a      	add	r2, r1
 8009600:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009604:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009608:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800960a:	79fb      	ldrb	r3, [r7, #7]
 800960c:	2b01      	cmp	r3, #1
 800960e:	d14b      	bne.n	80096a8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009610:	68bb      	ldr	r3, [r7, #8]
 8009612:	691b      	ldr	r3, [r3, #16]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d009      	beq.n	800962c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009618:	69bb      	ldr	r3, [r7, #24]
 800961a:	015a      	lsls	r2, r3, #5
 800961c:	69fb      	ldr	r3, [r7, #28]
 800961e:	4413      	add	r3, r2
 8009620:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009624:	461a      	mov	r2, r3
 8009626:	68bb      	ldr	r3, [r7, #8]
 8009628:	691b      	ldr	r3, [r3, #16]
 800962a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800962c:	68bb      	ldr	r3, [r7, #8]
 800962e:	78db      	ldrb	r3, [r3, #3]
 8009630:	2b01      	cmp	r3, #1
 8009632:	d128      	bne.n	8009686 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009634:	69fb      	ldr	r3, [r7, #28]
 8009636:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800963a:	689b      	ldr	r3, [r3, #8]
 800963c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009640:	2b00      	cmp	r3, #0
 8009642:	d110      	bne.n	8009666 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009644:	69bb      	ldr	r3, [r7, #24]
 8009646:	015a      	lsls	r2, r3, #5
 8009648:	69fb      	ldr	r3, [r7, #28]
 800964a:	4413      	add	r3, r2
 800964c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	69ba      	ldr	r2, [r7, #24]
 8009654:	0151      	lsls	r1, r2, #5
 8009656:	69fa      	ldr	r2, [r7, #28]
 8009658:	440a      	add	r2, r1
 800965a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800965e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009662:	6013      	str	r3, [r2, #0]
 8009664:	e00f      	b.n	8009686 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009666:	69bb      	ldr	r3, [r7, #24]
 8009668:	015a      	lsls	r2, r3, #5
 800966a:	69fb      	ldr	r3, [r7, #28]
 800966c:	4413      	add	r3, r2
 800966e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	69ba      	ldr	r2, [r7, #24]
 8009676:	0151      	lsls	r1, r2, #5
 8009678:	69fa      	ldr	r2, [r7, #28]
 800967a:	440a      	add	r2, r1
 800967c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009680:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009684:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009686:	69bb      	ldr	r3, [r7, #24]
 8009688:	015a      	lsls	r2, r3, #5
 800968a:	69fb      	ldr	r3, [r7, #28]
 800968c:	4413      	add	r3, r2
 800968e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	69ba      	ldr	r2, [r7, #24]
 8009696:	0151      	lsls	r1, r2, #5
 8009698:	69fa      	ldr	r2, [r7, #28]
 800969a:	440a      	add	r2, r1
 800969c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80096a0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80096a4:	6013      	str	r3, [r2, #0]
 80096a6:	e133      	b.n	8009910 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80096a8:	69bb      	ldr	r3, [r7, #24]
 80096aa:	015a      	lsls	r2, r3, #5
 80096ac:	69fb      	ldr	r3, [r7, #28]
 80096ae:	4413      	add	r3, r2
 80096b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	69ba      	ldr	r2, [r7, #24]
 80096b8:	0151      	lsls	r1, r2, #5
 80096ba:	69fa      	ldr	r2, [r7, #28]
 80096bc:	440a      	add	r2, r1
 80096be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80096c2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80096c6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80096c8:	68bb      	ldr	r3, [r7, #8]
 80096ca:	78db      	ldrb	r3, [r3, #3]
 80096cc:	2b01      	cmp	r3, #1
 80096ce:	d015      	beq.n	80096fc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80096d0:	68bb      	ldr	r3, [r7, #8]
 80096d2:	695b      	ldr	r3, [r3, #20]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	f000 811b 	beq.w	8009910 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80096da:	69fb      	ldr	r3, [r7, #28]
 80096dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80096e2:	68bb      	ldr	r3, [r7, #8]
 80096e4:	781b      	ldrb	r3, [r3, #0]
 80096e6:	f003 030f 	and.w	r3, r3, #15
 80096ea:	2101      	movs	r1, #1
 80096ec:	fa01 f303 	lsl.w	r3, r1, r3
 80096f0:	69f9      	ldr	r1, [r7, #28]
 80096f2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80096f6:	4313      	orrs	r3, r2
 80096f8:	634b      	str	r3, [r1, #52]	; 0x34
 80096fa:	e109      	b.n	8009910 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80096fc:	69fb      	ldr	r3, [r7, #28]
 80096fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009702:	689b      	ldr	r3, [r3, #8]
 8009704:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009708:	2b00      	cmp	r3, #0
 800970a:	d110      	bne.n	800972e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800970c:	69bb      	ldr	r3, [r7, #24]
 800970e:	015a      	lsls	r2, r3, #5
 8009710:	69fb      	ldr	r3, [r7, #28]
 8009712:	4413      	add	r3, r2
 8009714:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	69ba      	ldr	r2, [r7, #24]
 800971c:	0151      	lsls	r1, r2, #5
 800971e:	69fa      	ldr	r2, [r7, #28]
 8009720:	440a      	add	r2, r1
 8009722:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009726:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800972a:	6013      	str	r3, [r2, #0]
 800972c:	e00f      	b.n	800974e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800972e:	69bb      	ldr	r3, [r7, #24]
 8009730:	015a      	lsls	r2, r3, #5
 8009732:	69fb      	ldr	r3, [r7, #28]
 8009734:	4413      	add	r3, r2
 8009736:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	69ba      	ldr	r2, [r7, #24]
 800973e:	0151      	lsls	r1, r2, #5
 8009740:	69fa      	ldr	r2, [r7, #28]
 8009742:	440a      	add	r2, r1
 8009744:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009748:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800974c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800974e:	68bb      	ldr	r3, [r7, #8]
 8009750:	68d9      	ldr	r1, [r3, #12]
 8009752:	68bb      	ldr	r3, [r7, #8]
 8009754:	781a      	ldrb	r2, [r3, #0]
 8009756:	68bb      	ldr	r3, [r7, #8]
 8009758:	695b      	ldr	r3, [r3, #20]
 800975a:	b298      	uxth	r0, r3
 800975c:	79fb      	ldrb	r3, [r7, #7]
 800975e:	9300      	str	r3, [sp, #0]
 8009760:	4603      	mov	r3, r0
 8009762:	68f8      	ldr	r0, [r7, #12]
 8009764:	f000 fa38 	bl	8009bd8 <USB_WritePacket>
 8009768:	e0d2      	b.n	8009910 <USB_EPStartXfer+0x480>
 800976a:	bf00      	nop
 800976c:	e007ffff 	.word	0xe007ffff
 8009770:	fff80000 	.word	0xfff80000
 8009774:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009778:	69bb      	ldr	r3, [r7, #24]
 800977a:	015a      	lsls	r2, r3, #5
 800977c:	69fb      	ldr	r3, [r7, #28]
 800977e:	4413      	add	r3, r2
 8009780:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009784:	691a      	ldr	r2, [r3, #16]
 8009786:	69bb      	ldr	r3, [r7, #24]
 8009788:	0159      	lsls	r1, r3, #5
 800978a:	69fb      	ldr	r3, [r7, #28]
 800978c:	440b      	add	r3, r1
 800978e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009792:	4619      	mov	r1, r3
 8009794:	4b61      	ldr	r3, [pc, #388]	; (800991c <USB_EPStartXfer+0x48c>)
 8009796:	4013      	ands	r3, r2
 8009798:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800979a:	69bb      	ldr	r3, [r7, #24]
 800979c:	015a      	lsls	r2, r3, #5
 800979e:	69fb      	ldr	r3, [r7, #28]
 80097a0:	4413      	add	r3, r2
 80097a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097a6:	691a      	ldr	r2, [r3, #16]
 80097a8:	69bb      	ldr	r3, [r7, #24]
 80097aa:	0159      	lsls	r1, r3, #5
 80097ac:	69fb      	ldr	r3, [r7, #28]
 80097ae:	440b      	add	r3, r1
 80097b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097b4:	4619      	mov	r1, r3
 80097b6:	4b5a      	ldr	r3, [pc, #360]	; (8009920 <USB_EPStartXfer+0x490>)
 80097b8:	4013      	ands	r3, r2
 80097ba:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 80097bc:	68bb      	ldr	r3, [r7, #8]
 80097be:	695b      	ldr	r3, [r3, #20]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d123      	bne.n	800980c <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80097c4:	69bb      	ldr	r3, [r7, #24]
 80097c6:	015a      	lsls	r2, r3, #5
 80097c8:	69fb      	ldr	r3, [r7, #28]
 80097ca:	4413      	add	r3, r2
 80097cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097d0:	691a      	ldr	r2, [r3, #16]
 80097d2:	68bb      	ldr	r3, [r7, #8]
 80097d4:	689b      	ldr	r3, [r3, #8]
 80097d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80097da:	69b9      	ldr	r1, [r7, #24]
 80097dc:	0148      	lsls	r0, r1, #5
 80097de:	69f9      	ldr	r1, [r7, #28]
 80097e0:	4401      	add	r1, r0
 80097e2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80097e6:	4313      	orrs	r3, r2
 80097e8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80097ea:	69bb      	ldr	r3, [r7, #24]
 80097ec:	015a      	lsls	r2, r3, #5
 80097ee:	69fb      	ldr	r3, [r7, #28]
 80097f0:	4413      	add	r3, r2
 80097f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097f6:	691b      	ldr	r3, [r3, #16]
 80097f8:	69ba      	ldr	r2, [r7, #24]
 80097fa:	0151      	lsls	r1, r2, #5
 80097fc:	69fa      	ldr	r2, [r7, #28]
 80097fe:	440a      	add	r2, r1
 8009800:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009804:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009808:	6113      	str	r3, [r2, #16]
 800980a:	e033      	b.n	8009874 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800980c:	68bb      	ldr	r3, [r7, #8]
 800980e:	695a      	ldr	r2, [r3, #20]
 8009810:	68bb      	ldr	r3, [r7, #8]
 8009812:	689b      	ldr	r3, [r3, #8]
 8009814:	4413      	add	r3, r2
 8009816:	1e5a      	subs	r2, r3, #1
 8009818:	68bb      	ldr	r3, [r7, #8]
 800981a:	689b      	ldr	r3, [r3, #8]
 800981c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009820:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009822:	69bb      	ldr	r3, [r7, #24]
 8009824:	015a      	lsls	r2, r3, #5
 8009826:	69fb      	ldr	r3, [r7, #28]
 8009828:	4413      	add	r3, r2
 800982a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800982e:	691a      	ldr	r2, [r3, #16]
 8009830:	8afb      	ldrh	r3, [r7, #22]
 8009832:	04d9      	lsls	r1, r3, #19
 8009834:	4b3b      	ldr	r3, [pc, #236]	; (8009924 <USB_EPStartXfer+0x494>)
 8009836:	400b      	ands	r3, r1
 8009838:	69b9      	ldr	r1, [r7, #24]
 800983a:	0148      	lsls	r0, r1, #5
 800983c:	69f9      	ldr	r1, [r7, #28]
 800983e:	4401      	add	r1, r0
 8009840:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009844:	4313      	orrs	r3, r2
 8009846:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8009848:	69bb      	ldr	r3, [r7, #24]
 800984a:	015a      	lsls	r2, r3, #5
 800984c:	69fb      	ldr	r3, [r7, #28]
 800984e:	4413      	add	r3, r2
 8009850:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009854:	691a      	ldr	r2, [r3, #16]
 8009856:	68bb      	ldr	r3, [r7, #8]
 8009858:	689b      	ldr	r3, [r3, #8]
 800985a:	8af9      	ldrh	r1, [r7, #22]
 800985c:	fb01 f303 	mul.w	r3, r1, r3
 8009860:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009864:	69b9      	ldr	r1, [r7, #24]
 8009866:	0148      	lsls	r0, r1, #5
 8009868:	69f9      	ldr	r1, [r7, #28]
 800986a:	4401      	add	r1, r0
 800986c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009870:	4313      	orrs	r3, r2
 8009872:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009874:	79fb      	ldrb	r3, [r7, #7]
 8009876:	2b01      	cmp	r3, #1
 8009878:	d10d      	bne.n	8009896 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800987a:	68bb      	ldr	r3, [r7, #8]
 800987c:	68db      	ldr	r3, [r3, #12]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d009      	beq.n	8009896 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009882:	68bb      	ldr	r3, [r7, #8]
 8009884:	68d9      	ldr	r1, [r3, #12]
 8009886:	69bb      	ldr	r3, [r7, #24]
 8009888:	015a      	lsls	r2, r3, #5
 800988a:	69fb      	ldr	r3, [r7, #28]
 800988c:	4413      	add	r3, r2
 800988e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009892:	460a      	mov	r2, r1
 8009894:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009896:	68bb      	ldr	r3, [r7, #8]
 8009898:	78db      	ldrb	r3, [r3, #3]
 800989a:	2b01      	cmp	r3, #1
 800989c:	d128      	bne.n	80098f0 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800989e:	69fb      	ldr	r3, [r7, #28]
 80098a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098a4:	689b      	ldr	r3, [r3, #8]
 80098a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d110      	bne.n	80098d0 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80098ae:	69bb      	ldr	r3, [r7, #24]
 80098b0:	015a      	lsls	r2, r3, #5
 80098b2:	69fb      	ldr	r3, [r7, #28]
 80098b4:	4413      	add	r3, r2
 80098b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	69ba      	ldr	r2, [r7, #24]
 80098be:	0151      	lsls	r1, r2, #5
 80098c0:	69fa      	ldr	r2, [r7, #28]
 80098c2:	440a      	add	r2, r1
 80098c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80098c8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80098cc:	6013      	str	r3, [r2, #0]
 80098ce:	e00f      	b.n	80098f0 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80098d0:	69bb      	ldr	r3, [r7, #24]
 80098d2:	015a      	lsls	r2, r3, #5
 80098d4:	69fb      	ldr	r3, [r7, #28]
 80098d6:	4413      	add	r3, r2
 80098d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	69ba      	ldr	r2, [r7, #24]
 80098e0:	0151      	lsls	r1, r2, #5
 80098e2:	69fa      	ldr	r2, [r7, #28]
 80098e4:	440a      	add	r2, r1
 80098e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80098ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80098ee:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80098f0:	69bb      	ldr	r3, [r7, #24]
 80098f2:	015a      	lsls	r2, r3, #5
 80098f4:	69fb      	ldr	r3, [r7, #28]
 80098f6:	4413      	add	r3, r2
 80098f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	69ba      	ldr	r2, [r7, #24]
 8009900:	0151      	lsls	r1, r2, #5
 8009902:	69fa      	ldr	r2, [r7, #28]
 8009904:	440a      	add	r2, r1
 8009906:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800990a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800990e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009910:	2300      	movs	r3, #0
}
 8009912:	4618      	mov	r0, r3
 8009914:	3720      	adds	r7, #32
 8009916:	46bd      	mov	sp, r7
 8009918:	bd80      	pop	{r7, pc}
 800991a:	bf00      	nop
 800991c:	fff80000 	.word	0xfff80000
 8009920:	e007ffff 	.word	0xe007ffff
 8009924:	1ff80000 	.word	0x1ff80000

08009928 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009928:	b480      	push	{r7}
 800992a:	b087      	sub	sp, #28
 800992c:	af00      	add	r7, sp, #0
 800992e:	60f8      	str	r0, [r7, #12]
 8009930:	60b9      	str	r1, [r7, #8]
 8009932:	4613      	mov	r3, r2
 8009934:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800993a:	68bb      	ldr	r3, [r7, #8]
 800993c:	781b      	ldrb	r3, [r3, #0]
 800993e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009940:	68bb      	ldr	r3, [r7, #8]
 8009942:	785b      	ldrb	r3, [r3, #1]
 8009944:	2b01      	cmp	r3, #1
 8009946:	f040 80cd 	bne.w	8009ae4 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800994a:	68bb      	ldr	r3, [r7, #8]
 800994c:	695b      	ldr	r3, [r3, #20]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d132      	bne.n	80099b8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009952:	693b      	ldr	r3, [r7, #16]
 8009954:	015a      	lsls	r2, r3, #5
 8009956:	697b      	ldr	r3, [r7, #20]
 8009958:	4413      	add	r3, r2
 800995a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800995e:	691a      	ldr	r2, [r3, #16]
 8009960:	693b      	ldr	r3, [r7, #16]
 8009962:	0159      	lsls	r1, r3, #5
 8009964:	697b      	ldr	r3, [r7, #20]
 8009966:	440b      	add	r3, r1
 8009968:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800996c:	4619      	mov	r1, r3
 800996e:	4b98      	ldr	r3, [pc, #608]	; (8009bd0 <USB_EP0StartXfer+0x2a8>)
 8009970:	4013      	ands	r3, r2
 8009972:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009974:	693b      	ldr	r3, [r7, #16]
 8009976:	015a      	lsls	r2, r3, #5
 8009978:	697b      	ldr	r3, [r7, #20]
 800997a:	4413      	add	r3, r2
 800997c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009980:	691b      	ldr	r3, [r3, #16]
 8009982:	693a      	ldr	r2, [r7, #16]
 8009984:	0151      	lsls	r1, r2, #5
 8009986:	697a      	ldr	r2, [r7, #20]
 8009988:	440a      	add	r2, r1
 800998a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800998e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009992:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009994:	693b      	ldr	r3, [r7, #16]
 8009996:	015a      	lsls	r2, r3, #5
 8009998:	697b      	ldr	r3, [r7, #20]
 800999a:	4413      	add	r3, r2
 800999c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099a0:	691a      	ldr	r2, [r3, #16]
 80099a2:	693b      	ldr	r3, [r7, #16]
 80099a4:	0159      	lsls	r1, r3, #5
 80099a6:	697b      	ldr	r3, [r7, #20]
 80099a8:	440b      	add	r3, r1
 80099aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099ae:	4619      	mov	r1, r3
 80099b0:	4b88      	ldr	r3, [pc, #544]	; (8009bd4 <USB_EP0StartXfer+0x2ac>)
 80099b2:	4013      	ands	r3, r2
 80099b4:	610b      	str	r3, [r1, #16]
 80099b6:	e04e      	b.n	8009a56 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80099b8:	693b      	ldr	r3, [r7, #16]
 80099ba:	015a      	lsls	r2, r3, #5
 80099bc:	697b      	ldr	r3, [r7, #20]
 80099be:	4413      	add	r3, r2
 80099c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099c4:	691a      	ldr	r2, [r3, #16]
 80099c6:	693b      	ldr	r3, [r7, #16]
 80099c8:	0159      	lsls	r1, r3, #5
 80099ca:	697b      	ldr	r3, [r7, #20]
 80099cc:	440b      	add	r3, r1
 80099ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099d2:	4619      	mov	r1, r3
 80099d4:	4b7f      	ldr	r3, [pc, #508]	; (8009bd4 <USB_EP0StartXfer+0x2ac>)
 80099d6:	4013      	ands	r3, r2
 80099d8:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80099da:	693b      	ldr	r3, [r7, #16]
 80099dc:	015a      	lsls	r2, r3, #5
 80099de:	697b      	ldr	r3, [r7, #20]
 80099e0:	4413      	add	r3, r2
 80099e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099e6:	691a      	ldr	r2, [r3, #16]
 80099e8:	693b      	ldr	r3, [r7, #16]
 80099ea:	0159      	lsls	r1, r3, #5
 80099ec:	697b      	ldr	r3, [r7, #20]
 80099ee:	440b      	add	r3, r1
 80099f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099f4:	4619      	mov	r1, r3
 80099f6:	4b76      	ldr	r3, [pc, #472]	; (8009bd0 <USB_EP0StartXfer+0x2a8>)
 80099f8:	4013      	ands	r3, r2
 80099fa:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 80099fc:	68bb      	ldr	r3, [r7, #8]
 80099fe:	695a      	ldr	r2, [r3, #20]
 8009a00:	68bb      	ldr	r3, [r7, #8]
 8009a02:	689b      	ldr	r3, [r3, #8]
 8009a04:	429a      	cmp	r2, r3
 8009a06:	d903      	bls.n	8009a10 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8009a08:	68bb      	ldr	r3, [r7, #8]
 8009a0a:	689a      	ldr	r2, [r3, #8]
 8009a0c:	68bb      	ldr	r3, [r7, #8]
 8009a0e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009a10:	693b      	ldr	r3, [r7, #16]
 8009a12:	015a      	lsls	r2, r3, #5
 8009a14:	697b      	ldr	r3, [r7, #20]
 8009a16:	4413      	add	r3, r2
 8009a18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a1c:	691b      	ldr	r3, [r3, #16]
 8009a1e:	693a      	ldr	r2, [r7, #16]
 8009a20:	0151      	lsls	r1, r2, #5
 8009a22:	697a      	ldr	r2, [r7, #20]
 8009a24:	440a      	add	r2, r1
 8009a26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a2a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009a2e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009a30:	693b      	ldr	r3, [r7, #16]
 8009a32:	015a      	lsls	r2, r3, #5
 8009a34:	697b      	ldr	r3, [r7, #20]
 8009a36:	4413      	add	r3, r2
 8009a38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a3c:	691a      	ldr	r2, [r3, #16]
 8009a3e:	68bb      	ldr	r3, [r7, #8]
 8009a40:	695b      	ldr	r3, [r3, #20]
 8009a42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009a46:	6939      	ldr	r1, [r7, #16]
 8009a48:	0148      	lsls	r0, r1, #5
 8009a4a:	6979      	ldr	r1, [r7, #20]
 8009a4c:	4401      	add	r1, r0
 8009a4e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009a52:	4313      	orrs	r3, r2
 8009a54:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009a56:	79fb      	ldrb	r3, [r7, #7]
 8009a58:	2b01      	cmp	r3, #1
 8009a5a:	d11e      	bne.n	8009a9a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009a5c:	68bb      	ldr	r3, [r7, #8]
 8009a5e:	691b      	ldr	r3, [r3, #16]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d009      	beq.n	8009a78 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009a64:	693b      	ldr	r3, [r7, #16]
 8009a66:	015a      	lsls	r2, r3, #5
 8009a68:	697b      	ldr	r3, [r7, #20]
 8009a6a:	4413      	add	r3, r2
 8009a6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a70:	461a      	mov	r2, r3
 8009a72:	68bb      	ldr	r3, [r7, #8]
 8009a74:	691b      	ldr	r3, [r3, #16]
 8009a76:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009a78:	693b      	ldr	r3, [r7, #16]
 8009a7a:	015a      	lsls	r2, r3, #5
 8009a7c:	697b      	ldr	r3, [r7, #20]
 8009a7e:	4413      	add	r3, r2
 8009a80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	693a      	ldr	r2, [r7, #16]
 8009a88:	0151      	lsls	r1, r2, #5
 8009a8a:	697a      	ldr	r2, [r7, #20]
 8009a8c:	440a      	add	r2, r1
 8009a8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a92:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009a96:	6013      	str	r3, [r2, #0]
 8009a98:	e092      	b.n	8009bc0 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009a9a:	693b      	ldr	r3, [r7, #16]
 8009a9c:	015a      	lsls	r2, r3, #5
 8009a9e:	697b      	ldr	r3, [r7, #20]
 8009aa0:	4413      	add	r3, r2
 8009aa2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	693a      	ldr	r2, [r7, #16]
 8009aaa:	0151      	lsls	r1, r2, #5
 8009aac:	697a      	ldr	r2, [r7, #20]
 8009aae:	440a      	add	r2, r1
 8009ab0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ab4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009ab8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8009aba:	68bb      	ldr	r3, [r7, #8]
 8009abc:	695b      	ldr	r3, [r3, #20]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d07e      	beq.n	8009bc0 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009ac2:	697b      	ldr	r3, [r7, #20]
 8009ac4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ac8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009aca:	68bb      	ldr	r3, [r7, #8]
 8009acc:	781b      	ldrb	r3, [r3, #0]
 8009ace:	f003 030f 	and.w	r3, r3, #15
 8009ad2:	2101      	movs	r1, #1
 8009ad4:	fa01 f303 	lsl.w	r3, r1, r3
 8009ad8:	6979      	ldr	r1, [r7, #20]
 8009ada:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009ade:	4313      	orrs	r3, r2
 8009ae0:	634b      	str	r3, [r1, #52]	; 0x34
 8009ae2:	e06d      	b.n	8009bc0 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009ae4:	693b      	ldr	r3, [r7, #16]
 8009ae6:	015a      	lsls	r2, r3, #5
 8009ae8:	697b      	ldr	r3, [r7, #20]
 8009aea:	4413      	add	r3, r2
 8009aec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009af0:	691a      	ldr	r2, [r3, #16]
 8009af2:	693b      	ldr	r3, [r7, #16]
 8009af4:	0159      	lsls	r1, r3, #5
 8009af6:	697b      	ldr	r3, [r7, #20]
 8009af8:	440b      	add	r3, r1
 8009afa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009afe:	4619      	mov	r1, r3
 8009b00:	4b34      	ldr	r3, [pc, #208]	; (8009bd4 <USB_EP0StartXfer+0x2ac>)
 8009b02:	4013      	ands	r3, r2
 8009b04:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009b06:	693b      	ldr	r3, [r7, #16]
 8009b08:	015a      	lsls	r2, r3, #5
 8009b0a:	697b      	ldr	r3, [r7, #20]
 8009b0c:	4413      	add	r3, r2
 8009b0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b12:	691a      	ldr	r2, [r3, #16]
 8009b14:	693b      	ldr	r3, [r7, #16]
 8009b16:	0159      	lsls	r1, r3, #5
 8009b18:	697b      	ldr	r3, [r7, #20]
 8009b1a:	440b      	add	r3, r1
 8009b1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b20:	4619      	mov	r1, r3
 8009b22:	4b2b      	ldr	r3, [pc, #172]	; (8009bd0 <USB_EP0StartXfer+0x2a8>)
 8009b24:	4013      	ands	r3, r2
 8009b26:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8009b28:	68bb      	ldr	r3, [r7, #8]
 8009b2a:	695b      	ldr	r3, [r3, #20]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d003      	beq.n	8009b38 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8009b30:	68bb      	ldr	r3, [r7, #8]
 8009b32:	689a      	ldr	r2, [r3, #8]
 8009b34:	68bb      	ldr	r3, [r7, #8]
 8009b36:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009b38:	693b      	ldr	r3, [r7, #16]
 8009b3a:	015a      	lsls	r2, r3, #5
 8009b3c:	697b      	ldr	r3, [r7, #20]
 8009b3e:	4413      	add	r3, r2
 8009b40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b44:	691b      	ldr	r3, [r3, #16]
 8009b46:	693a      	ldr	r2, [r7, #16]
 8009b48:	0151      	lsls	r1, r2, #5
 8009b4a:	697a      	ldr	r2, [r7, #20]
 8009b4c:	440a      	add	r2, r1
 8009b4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009b52:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009b56:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8009b58:	693b      	ldr	r3, [r7, #16]
 8009b5a:	015a      	lsls	r2, r3, #5
 8009b5c:	697b      	ldr	r3, [r7, #20]
 8009b5e:	4413      	add	r3, r2
 8009b60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b64:	691a      	ldr	r2, [r3, #16]
 8009b66:	68bb      	ldr	r3, [r7, #8]
 8009b68:	689b      	ldr	r3, [r3, #8]
 8009b6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009b6e:	6939      	ldr	r1, [r7, #16]
 8009b70:	0148      	lsls	r0, r1, #5
 8009b72:	6979      	ldr	r1, [r7, #20]
 8009b74:	4401      	add	r1, r0
 8009b76:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009b7a:	4313      	orrs	r3, r2
 8009b7c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8009b7e:	79fb      	ldrb	r3, [r7, #7]
 8009b80:	2b01      	cmp	r3, #1
 8009b82:	d10d      	bne.n	8009ba0 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009b84:	68bb      	ldr	r3, [r7, #8]
 8009b86:	68db      	ldr	r3, [r3, #12]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d009      	beq.n	8009ba0 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009b8c:	68bb      	ldr	r3, [r7, #8]
 8009b8e:	68d9      	ldr	r1, [r3, #12]
 8009b90:	693b      	ldr	r3, [r7, #16]
 8009b92:	015a      	lsls	r2, r3, #5
 8009b94:	697b      	ldr	r3, [r7, #20]
 8009b96:	4413      	add	r3, r2
 8009b98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b9c:	460a      	mov	r2, r1
 8009b9e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009ba0:	693b      	ldr	r3, [r7, #16]
 8009ba2:	015a      	lsls	r2, r3, #5
 8009ba4:	697b      	ldr	r3, [r7, #20]
 8009ba6:	4413      	add	r3, r2
 8009ba8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	693a      	ldr	r2, [r7, #16]
 8009bb0:	0151      	lsls	r1, r2, #5
 8009bb2:	697a      	ldr	r2, [r7, #20]
 8009bb4:	440a      	add	r2, r1
 8009bb6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009bba:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009bbe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009bc0:	2300      	movs	r3, #0
}
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	371c      	adds	r7, #28
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bcc:	4770      	bx	lr
 8009bce:	bf00      	nop
 8009bd0:	e007ffff 	.word	0xe007ffff
 8009bd4:	fff80000 	.word	0xfff80000

08009bd8 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009bd8:	b480      	push	{r7}
 8009bda:	b089      	sub	sp, #36	; 0x24
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	60f8      	str	r0, [r7, #12]
 8009be0:	60b9      	str	r1, [r7, #8]
 8009be2:	4611      	mov	r1, r2
 8009be4:	461a      	mov	r2, r3
 8009be6:	460b      	mov	r3, r1
 8009be8:	71fb      	strb	r3, [r7, #7]
 8009bea:	4613      	mov	r3, r2
 8009bec:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8009bf2:	68bb      	ldr	r3, [r7, #8]
 8009bf4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8009bf6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d11a      	bne.n	8009c34 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009bfe:	88bb      	ldrh	r3, [r7, #4]
 8009c00:	3303      	adds	r3, #3
 8009c02:	089b      	lsrs	r3, r3, #2
 8009c04:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009c06:	2300      	movs	r3, #0
 8009c08:	61bb      	str	r3, [r7, #24]
 8009c0a:	e00f      	b.n	8009c2c <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009c0c:	79fb      	ldrb	r3, [r7, #7]
 8009c0e:	031a      	lsls	r2, r3, #12
 8009c10:	697b      	ldr	r3, [r7, #20]
 8009c12:	4413      	add	r3, r2
 8009c14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c18:	461a      	mov	r2, r3
 8009c1a:	69fb      	ldr	r3, [r7, #28]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009c20:	69fb      	ldr	r3, [r7, #28]
 8009c22:	3304      	adds	r3, #4
 8009c24:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009c26:	69bb      	ldr	r3, [r7, #24]
 8009c28:	3301      	adds	r3, #1
 8009c2a:	61bb      	str	r3, [r7, #24]
 8009c2c:	69ba      	ldr	r2, [r7, #24]
 8009c2e:	693b      	ldr	r3, [r7, #16]
 8009c30:	429a      	cmp	r2, r3
 8009c32:	d3eb      	bcc.n	8009c0c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009c34:	2300      	movs	r3, #0
}
 8009c36:	4618      	mov	r0, r3
 8009c38:	3724      	adds	r7, #36	; 0x24
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c40:	4770      	bx	lr

08009c42 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009c42:	b480      	push	{r7}
 8009c44:	b089      	sub	sp, #36	; 0x24
 8009c46:	af00      	add	r7, sp, #0
 8009c48:	60f8      	str	r0, [r7, #12]
 8009c4a:	60b9      	str	r1, [r7, #8]
 8009c4c:	4613      	mov	r3, r2
 8009c4e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8009c54:	68bb      	ldr	r3, [r7, #8]
 8009c56:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8009c58:	88fb      	ldrh	r3, [r7, #6]
 8009c5a:	3303      	adds	r3, #3
 8009c5c:	089b      	lsrs	r3, r3, #2
 8009c5e:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8009c60:	2300      	movs	r3, #0
 8009c62:	61bb      	str	r3, [r7, #24]
 8009c64:	e00b      	b.n	8009c7e <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009c66:	697b      	ldr	r3, [r7, #20]
 8009c68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c6c:	681a      	ldr	r2, [r3, #0]
 8009c6e:	69fb      	ldr	r3, [r7, #28]
 8009c70:	601a      	str	r2, [r3, #0]
    pDest++;
 8009c72:	69fb      	ldr	r3, [r7, #28]
 8009c74:	3304      	adds	r3, #4
 8009c76:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8009c78:	69bb      	ldr	r3, [r7, #24]
 8009c7a:	3301      	adds	r3, #1
 8009c7c:	61bb      	str	r3, [r7, #24]
 8009c7e:	69ba      	ldr	r2, [r7, #24]
 8009c80:	693b      	ldr	r3, [r7, #16]
 8009c82:	429a      	cmp	r2, r3
 8009c84:	d3ef      	bcc.n	8009c66 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8009c86:	69fb      	ldr	r3, [r7, #28]
}
 8009c88:	4618      	mov	r0, r3
 8009c8a:	3724      	adds	r7, #36	; 0x24
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c92:	4770      	bx	lr

08009c94 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009c94:	b480      	push	{r7}
 8009c96:	b085      	sub	sp, #20
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
 8009c9c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009ca2:	683b      	ldr	r3, [r7, #0]
 8009ca4:	781b      	ldrb	r3, [r3, #0]
 8009ca6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009ca8:	683b      	ldr	r3, [r7, #0]
 8009caa:	785b      	ldrb	r3, [r3, #1]
 8009cac:	2b01      	cmp	r3, #1
 8009cae:	d12c      	bne.n	8009d0a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009cb0:	68bb      	ldr	r3, [r7, #8]
 8009cb2:	015a      	lsls	r2, r3, #5
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	4413      	add	r3, r2
 8009cb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	db12      	blt.n	8009ce8 <USB_EPSetStall+0x54>
 8009cc2:	68bb      	ldr	r3, [r7, #8]
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d00f      	beq.n	8009ce8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009cc8:	68bb      	ldr	r3, [r7, #8]
 8009cca:	015a      	lsls	r2, r3, #5
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	4413      	add	r3, r2
 8009cd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	68ba      	ldr	r2, [r7, #8]
 8009cd8:	0151      	lsls	r1, r2, #5
 8009cda:	68fa      	ldr	r2, [r7, #12]
 8009cdc:	440a      	add	r2, r1
 8009cde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ce2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009ce6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009ce8:	68bb      	ldr	r3, [r7, #8]
 8009cea:	015a      	lsls	r2, r3, #5
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	4413      	add	r3, r2
 8009cf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	68ba      	ldr	r2, [r7, #8]
 8009cf8:	0151      	lsls	r1, r2, #5
 8009cfa:	68fa      	ldr	r2, [r7, #12]
 8009cfc:	440a      	add	r2, r1
 8009cfe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d02:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009d06:	6013      	str	r3, [r2, #0]
 8009d08:	e02b      	b.n	8009d62 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009d0a:	68bb      	ldr	r3, [r7, #8]
 8009d0c:	015a      	lsls	r2, r3, #5
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	4413      	add	r3, r2
 8009d12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	db12      	blt.n	8009d42 <USB_EPSetStall+0xae>
 8009d1c:	68bb      	ldr	r3, [r7, #8]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d00f      	beq.n	8009d42 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009d22:	68bb      	ldr	r3, [r7, #8]
 8009d24:	015a      	lsls	r2, r3, #5
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	4413      	add	r3, r2
 8009d2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	68ba      	ldr	r2, [r7, #8]
 8009d32:	0151      	lsls	r1, r2, #5
 8009d34:	68fa      	ldr	r2, [r7, #12]
 8009d36:	440a      	add	r2, r1
 8009d38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d3c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009d40:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009d42:	68bb      	ldr	r3, [r7, #8]
 8009d44:	015a      	lsls	r2, r3, #5
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	4413      	add	r3, r2
 8009d4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	68ba      	ldr	r2, [r7, #8]
 8009d52:	0151      	lsls	r1, r2, #5
 8009d54:	68fa      	ldr	r2, [r7, #12]
 8009d56:	440a      	add	r2, r1
 8009d58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d5c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009d60:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009d62:	2300      	movs	r3, #0
}
 8009d64:	4618      	mov	r0, r3
 8009d66:	3714      	adds	r7, #20
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6e:	4770      	bx	lr

08009d70 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009d70:	b480      	push	{r7}
 8009d72:	b085      	sub	sp, #20
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
 8009d78:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009d7e:	683b      	ldr	r3, [r7, #0]
 8009d80:	781b      	ldrb	r3, [r3, #0]
 8009d82:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009d84:	683b      	ldr	r3, [r7, #0]
 8009d86:	785b      	ldrb	r3, [r3, #1]
 8009d88:	2b01      	cmp	r3, #1
 8009d8a:	d128      	bne.n	8009dde <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009d8c:	68bb      	ldr	r3, [r7, #8]
 8009d8e:	015a      	lsls	r2, r3, #5
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	4413      	add	r3, r2
 8009d94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	68ba      	ldr	r2, [r7, #8]
 8009d9c:	0151      	lsls	r1, r2, #5
 8009d9e:	68fa      	ldr	r2, [r7, #12]
 8009da0:	440a      	add	r2, r1
 8009da2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009da6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009daa:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009dac:	683b      	ldr	r3, [r7, #0]
 8009dae:	78db      	ldrb	r3, [r3, #3]
 8009db0:	2b03      	cmp	r3, #3
 8009db2:	d003      	beq.n	8009dbc <USB_EPClearStall+0x4c>
 8009db4:	683b      	ldr	r3, [r7, #0]
 8009db6:	78db      	ldrb	r3, [r3, #3]
 8009db8:	2b02      	cmp	r3, #2
 8009dba:	d138      	bne.n	8009e2e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009dbc:	68bb      	ldr	r3, [r7, #8]
 8009dbe:	015a      	lsls	r2, r3, #5
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	4413      	add	r3, r2
 8009dc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	68ba      	ldr	r2, [r7, #8]
 8009dcc:	0151      	lsls	r1, r2, #5
 8009dce:	68fa      	ldr	r2, [r7, #12]
 8009dd0:	440a      	add	r2, r1
 8009dd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009dd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009dda:	6013      	str	r3, [r2, #0]
 8009ddc:	e027      	b.n	8009e2e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009dde:	68bb      	ldr	r3, [r7, #8]
 8009de0:	015a      	lsls	r2, r3, #5
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	4413      	add	r3, r2
 8009de6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	68ba      	ldr	r2, [r7, #8]
 8009dee:	0151      	lsls	r1, r2, #5
 8009df0:	68fa      	ldr	r2, [r7, #12]
 8009df2:	440a      	add	r2, r1
 8009df4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009df8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009dfc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009dfe:	683b      	ldr	r3, [r7, #0]
 8009e00:	78db      	ldrb	r3, [r3, #3]
 8009e02:	2b03      	cmp	r3, #3
 8009e04:	d003      	beq.n	8009e0e <USB_EPClearStall+0x9e>
 8009e06:	683b      	ldr	r3, [r7, #0]
 8009e08:	78db      	ldrb	r3, [r3, #3]
 8009e0a:	2b02      	cmp	r3, #2
 8009e0c:	d10f      	bne.n	8009e2e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009e0e:	68bb      	ldr	r3, [r7, #8]
 8009e10:	015a      	lsls	r2, r3, #5
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	4413      	add	r3, r2
 8009e16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	68ba      	ldr	r2, [r7, #8]
 8009e1e:	0151      	lsls	r1, r2, #5
 8009e20:	68fa      	ldr	r2, [r7, #12]
 8009e22:	440a      	add	r2, r1
 8009e24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009e28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009e2c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009e2e:	2300      	movs	r3, #0
}
 8009e30:	4618      	mov	r0, r3
 8009e32:	3714      	adds	r7, #20
 8009e34:	46bd      	mov	sp, r7
 8009e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3a:	4770      	bx	lr

08009e3c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009e3c:	b480      	push	{r7}
 8009e3e:	b085      	sub	sp, #20
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
 8009e44:	460b      	mov	r3, r1
 8009e46:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	68fa      	ldr	r2, [r7, #12]
 8009e56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009e5a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009e5e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e66:	681a      	ldr	r2, [r3, #0]
 8009e68:	78fb      	ldrb	r3, [r7, #3]
 8009e6a:	011b      	lsls	r3, r3, #4
 8009e6c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8009e70:	68f9      	ldr	r1, [r7, #12]
 8009e72:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009e76:	4313      	orrs	r3, r2
 8009e78:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009e7a:	2300      	movs	r3, #0
}
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	3714      	adds	r7, #20
 8009e80:	46bd      	mov	sp, r7
 8009e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e86:	4770      	bx	lr

08009e88 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b084      	sub	sp, #16
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e9a:	685b      	ldr	r3, [r3, #4]
 8009e9c:	68fa      	ldr	r2, [r7, #12]
 8009e9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009ea2:	f023 0302 	bic.w	r3, r3, #2
 8009ea6:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8009ea8:	2003      	movs	r0, #3
 8009eaa:	f7f7 fb27 	bl	80014fc <HAL_Delay>

  return HAL_OK;
 8009eae:	2300      	movs	r3, #0
}
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	3710      	adds	r7, #16
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	bd80      	pop	{r7, pc}

08009eb8 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	b084      	sub	sp, #16
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009eca:	685b      	ldr	r3, [r3, #4]
 8009ecc:	68fa      	ldr	r2, [r7, #12]
 8009ece:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009ed2:	f043 0302 	orr.w	r3, r3, #2
 8009ed6:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8009ed8:	2003      	movs	r0, #3
 8009eda:	f7f7 fb0f 	bl	80014fc <HAL_Delay>

  return HAL_OK;
 8009ede:	2300      	movs	r3, #0
}
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	3710      	adds	r7, #16
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	bd80      	pop	{r7, pc}

08009ee8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009ee8:	b480      	push	{r7}
 8009eea:	b085      	sub	sp, #20
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	695b      	ldr	r3, [r3, #20]
 8009ef4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	699b      	ldr	r3, [r3, #24]
 8009efa:	68fa      	ldr	r2, [r7, #12]
 8009efc:	4013      	ands	r3, r2
 8009efe:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009f00:	68fb      	ldr	r3, [r7, #12]
}
 8009f02:	4618      	mov	r0, r3
 8009f04:	3714      	adds	r7, #20
 8009f06:	46bd      	mov	sp, r7
 8009f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0c:	4770      	bx	lr

08009f0e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009f0e:	b480      	push	{r7}
 8009f10:	b085      	sub	sp, #20
 8009f12:	af00      	add	r7, sp, #0
 8009f14:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f20:	699b      	ldr	r3, [r3, #24]
 8009f22:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f2a:	69db      	ldr	r3, [r3, #28]
 8009f2c:	68ba      	ldr	r2, [r7, #8]
 8009f2e:	4013      	ands	r3, r2
 8009f30:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009f32:	68bb      	ldr	r3, [r7, #8]
 8009f34:	0c1b      	lsrs	r3, r3, #16
}
 8009f36:	4618      	mov	r0, r3
 8009f38:	3714      	adds	r7, #20
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f40:	4770      	bx	lr

08009f42 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009f42:	b480      	push	{r7}
 8009f44:	b085      	sub	sp, #20
 8009f46:	af00      	add	r7, sp, #0
 8009f48:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f54:	699b      	ldr	r3, [r3, #24]
 8009f56:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f5e:	69db      	ldr	r3, [r3, #28]
 8009f60:	68ba      	ldr	r2, [r7, #8]
 8009f62:	4013      	ands	r3, r2
 8009f64:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009f66:	68bb      	ldr	r3, [r7, #8]
 8009f68:	b29b      	uxth	r3, r3
}
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	3714      	adds	r7, #20
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f74:	4770      	bx	lr

08009f76 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009f76:	b480      	push	{r7}
 8009f78:	b085      	sub	sp, #20
 8009f7a:	af00      	add	r7, sp, #0
 8009f7c:	6078      	str	r0, [r7, #4]
 8009f7e:	460b      	mov	r3, r1
 8009f80:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009f86:	78fb      	ldrb	r3, [r7, #3]
 8009f88:	015a      	lsls	r2, r3, #5
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	4413      	add	r3, r2
 8009f8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f92:	689b      	ldr	r3, [r3, #8]
 8009f94:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f9c:	695b      	ldr	r3, [r3, #20]
 8009f9e:	68ba      	ldr	r2, [r7, #8]
 8009fa0:	4013      	ands	r3, r2
 8009fa2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009fa4:	68bb      	ldr	r3, [r7, #8]
}
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	3714      	adds	r7, #20
 8009faa:	46bd      	mov	sp, r7
 8009fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb0:	4770      	bx	lr

08009fb2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009fb2:	b480      	push	{r7}
 8009fb4:	b087      	sub	sp, #28
 8009fb6:	af00      	add	r7, sp, #0
 8009fb8:	6078      	str	r0, [r7, #4]
 8009fba:	460b      	mov	r3, r1
 8009fbc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009fc2:	697b      	ldr	r3, [r7, #20]
 8009fc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009fc8:	691b      	ldr	r3, [r3, #16]
 8009fca:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009fcc:	697b      	ldr	r3, [r7, #20]
 8009fce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009fd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fd4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009fd6:	78fb      	ldrb	r3, [r7, #3]
 8009fd8:	f003 030f 	and.w	r3, r3, #15
 8009fdc:	68fa      	ldr	r2, [r7, #12]
 8009fde:	fa22 f303 	lsr.w	r3, r2, r3
 8009fe2:	01db      	lsls	r3, r3, #7
 8009fe4:	b2db      	uxtb	r3, r3
 8009fe6:	693a      	ldr	r2, [r7, #16]
 8009fe8:	4313      	orrs	r3, r2
 8009fea:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009fec:	78fb      	ldrb	r3, [r7, #3]
 8009fee:	015a      	lsls	r2, r3, #5
 8009ff0:	697b      	ldr	r3, [r7, #20]
 8009ff2:	4413      	add	r3, r2
 8009ff4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ff8:	689b      	ldr	r3, [r3, #8]
 8009ffa:	693a      	ldr	r2, [r7, #16]
 8009ffc:	4013      	ands	r3, r2
 8009ffe:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a000:	68bb      	ldr	r3, [r7, #8]
}
 800a002:	4618      	mov	r0, r3
 800a004:	371c      	adds	r7, #28
 800a006:	46bd      	mov	sp, r7
 800a008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00c:	4770      	bx	lr

0800a00e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a00e:	b480      	push	{r7}
 800a010:	b083      	sub	sp, #12
 800a012:	af00      	add	r7, sp, #0
 800a014:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	695b      	ldr	r3, [r3, #20]
 800a01a:	f003 0301 	and.w	r3, r3, #1
}
 800a01e:	4618      	mov	r0, r3
 800a020:	370c      	adds	r7, #12
 800a022:	46bd      	mov	sp, r7
 800a024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a028:	4770      	bx	lr
	...

0800a02c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800a02c:	b480      	push	{r7}
 800a02e:	b085      	sub	sp, #20
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a03e:	681a      	ldr	r2, [r3, #0]
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a046:	4619      	mov	r1, r3
 800a048:	4b09      	ldr	r3, [pc, #36]	; (800a070 <USB_ActivateSetup+0x44>)
 800a04a:	4013      	ands	r3, r2
 800a04c:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a054:	685b      	ldr	r3, [r3, #4]
 800a056:	68fa      	ldr	r2, [r7, #12]
 800a058:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a05c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a060:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a062:	2300      	movs	r3, #0
}
 800a064:	4618      	mov	r0, r3
 800a066:	3714      	adds	r7, #20
 800a068:	46bd      	mov	sp, r7
 800a06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06e:	4770      	bx	lr
 800a070:	fffff800 	.word	0xfffff800

0800a074 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800a074:	b480      	push	{r7}
 800a076:	b087      	sub	sp, #28
 800a078:	af00      	add	r7, sp, #0
 800a07a:	60f8      	str	r0, [r7, #12]
 800a07c:	460b      	mov	r3, r1
 800a07e:	607a      	str	r2, [r7, #4]
 800a080:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	333c      	adds	r3, #60	; 0x3c
 800a08a:	3304      	adds	r3, #4
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a090:	693b      	ldr	r3, [r7, #16]
 800a092:	4a26      	ldr	r2, [pc, #152]	; (800a12c <USB_EP0_OutStart+0xb8>)
 800a094:	4293      	cmp	r3, r2
 800a096:	d90a      	bls.n	800a0ae <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a098:	697b      	ldr	r3, [r7, #20]
 800a09a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a0a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a0a8:	d101      	bne.n	800a0ae <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	e037      	b.n	800a11e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a0ae:	697b      	ldr	r3, [r7, #20]
 800a0b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0b4:	461a      	mov	r2, r3
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a0ba:	697b      	ldr	r3, [r7, #20]
 800a0bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0c0:	691b      	ldr	r3, [r3, #16]
 800a0c2:	697a      	ldr	r2, [r7, #20]
 800a0c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a0c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a0cc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a0ce:	697b      	ldr	r3, [r7, #20]
 800a0d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0d4:	691b      	ldr	r3, [r3, #16]
 800a0d6:	697a      	ldr	r2, [r7, #20]
 800a0d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a0dc:	f043 0318 	orr.w	r3, r3, #24
 800a0e0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a0e2:	697b      	ldr	r3, [r7, #20]
 800a0e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0e8:	691b      	ldr	r3, [r3, #16]
 800a0ea:	697a      	ldr	r2, [r7, #20]
 800a0ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a0f0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800a0f4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a0f6:	7afb      	ldrb	r3, [r7, #11]
 800a0f8:	2b01      	cmp	r3, #1
 800a0fa:	d10f      	bne.n	800a11c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a0fc:	697b      	ldr	r3, [r7, #20]
 800a0fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a102:	461a      	mov	r2, r3
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a108:	697b      	ldr	r3, [r7, #20]
 800a10a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	697a      	ldr	r2, [r7, #20]
 800a112:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a116:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800a11a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a11c:	2300      	movs	r3, #0
}
 800a11e:	4618      	mov	r0, r3
 800a120:	371c      	adds	r7, #28
 800a122:	46bd      	mov	sp, r7
 800a124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a128:	4770      	bx	lr
 800a12a:	bf00      	nop
 800a12c:	4f54300a 	.word	0x4f54300a

0800a130 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a130:	b480      	push	{r7}
 800a132:	b085      	sub	sp, #20
 800a134:	af00      	add	r7, sp, #0
 800a136:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800a138:	2300      	movs	r3, #0
 800a13a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	3301      	adds	r3, #1
 800a140:	60fb      	str	r3, [r7, #12]
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	4a13      	ldr	r2, [pc, #76]	; (800a194 <USB_CoreReset+0x64>)
 800a146:	4293      	cmp	r3, r2
 800a148:	d901      	bls.n	800a14e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a14a:	2303      	movs	r3, #3
 800a14c:	e01b      	b.n	800a186 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	691b      	ldr	r3, [r3, #16]
 800a152:	2b00      	cmp	r3, #0
 800a154:	daf2      	bge.n	800a13c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a156:	2300      	movs	r3, #0
 800a158:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	691b      	ldr	r3, [r3, #16]
 800a15e:	f043 0201 	orr.w	r2, r3, #1
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	3301      	adds	r3, #1
 800a16a:	60fb      	str	r3, [r7, #12]
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	4a09      	ldr	r2, [pc, #36]	; (800a194 <USB_CoreReset+0x64>)
 800a170:	4293      	cmp	r3, r2
 800a172:	d901      	bls.n	800a178 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a174:	2303      	movs	r3, #3
 800a176:	e006      	b.n	800a186 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	691b      	ldr	r3, [r3, #16]
 800a17c:	f003 0301 	and.w	r3, r3, #1
 800a180:	2b01      	cmp	r3, #1
 800a182:	d0f0      	beq.n	800a166 <USB_CoreReset+0x36>

  return HAL_OK;
 800a184:	2300      	movs	r3, #0
}
 800a186:	4618      	mov	r0, r3
 800a188:	3714      	adds	r7, #20
 800a18a:	46bd      	mov	sp, r7
 800a18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a190:	4770      	bx	lr
 800a192:	bf00      	nop
 800a194:	00030d40 	.word	0x00030d40

0800a198 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800a198:	b580      	push	{r7, lr}
 800a19a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800a19c:	4904      	ldr	r1, [pc, #16]	; (800a1b0 <MX_FATFS_Init+0x18>)
 800a19e:	4805      	ldr	r0, [pc, #20]	; (800a1b4 <MX_FATFS_Init+0x1c>)
 800a1a0:	f007 fb10 	bl	80117c4 <FATFS_LinkDriver>
 800a1a4:	4603      	mov	r3, r0
 800a1a6:	461a      	mov	r2, r3
 800a1a8:	4b03      	ldr	r3, [pc, #12]	; (800a1b8 <MX_FATFS_Init+0x20>)
 800a1aa:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800a1ac:	bf00      	nop
 800a1ae:	bd80      	pop	{r7, pc}
 800a1b0:	2000732c 	.word	0x2000732c
 800a1b4:	0801616c 	.word	0x0801616c
 800a1b8:	20007328 	.word	0x20007328

0800a1bc <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800a1bc:	b480      	push	{r7}
 800a1be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800a1c0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ca:	4770      	bx	lr

0800a1cc <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	b082      	sub	sp, #8
 800a1d0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800a1d6:	f000 f896 	bl	800a306 <BSP_SD_IsDetected>
 800a1da:	4603      	mov	r3, r0
 800a1dc:	2b01      	cmp	r3, #1
 800a1de:	d001      	beq.n	800a1e4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800a1e0:	2302      	movs	r3, #2
 800a1e2:	e012      	b.n	800a20a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800a1e4:	480b      	ldr	r0, [pc, #44]	; (800a214 <BSP_SD_Init+0x48>)
 800a1e6:	f7fb f9ff 	bl	80055e8 <HAL_SD_Init>
 800a1ea:	4603      	mov	r3, r0
 800a1ec:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800a1ee:	79fb      	ldrb	r3, [r7, #7]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d109      	bne.n	800a208 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800a1f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a1f8:	4806      	ldr	r0, [pc, #24]	; (800a214 <BSP_SD_Init+0x48>)
 800a1fa:	f7fc fb4f 	bl	800689c <HAL_SD_ConfigWideBusOperation>
 800a1fe:	4603      	mov	r3, r0
 800a200:	2b00      	cmp	r3, #0
 800a202:	d001      	beq.n	800a208 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800a204:	2301      	movs	r3, #1
 800a206:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800a208:	79fb      	ldrb	r3, [r7, #7]
}
 800a20a:	4618      	mov	r0, r3
 800a20c:	3708      	adds	r7, #8
 800a20e:	46bd      	mov	sp, r7
 800a210:	bd80      	pop	{r7, pc}
 800a212:	bf00      	nop
 800a214:	20004c8c 	.word	0x20004c8c

0800a218 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800a218:	b580      	push	{r7, lr}
 800a21a:	b086      	sub	sp, #24
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	60f8      	str	r0, [r7, #12]
 800a220:	60b9      	str	r1, [r7, #8]
 800a222:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800a224:	2300      	movs	r3, #0
 800a226:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	68ba      	ldr	r2, [r7, #8]
 800a22c:	68f9      	ldr	r1, [r7, #12]
 800a22e:	4806      	ldr	r0, [pc, #24]	; (800a248 <BSP_SD_ReadBlocks_DMA+0x30>)
 800a230:	f7fb fe0a 	bl	8005e48 <HAL_SD_ReadBlocks_DMA>
 800a234:	4603      	mov	r3, r0
 800a236:	2b00      	cmp	r3, #0
 800a238:	d001      	beq.n	800a23e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800a23a:	2301      	movs	r3, #1
 800a23c:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800a23e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a240:	4618      	mov	r0, r3
 800a242:	3718      	adds	r7, #24
 800a244:	46bd      	mov	sp, r7
 800a246:	bd80      	pop	{r7, pc}
 800a248:	20004c8c 	.word	0x20004c8c

0800a24c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b086      	sub	sp, #24
 800a250:	af00      	add	r7, sp, #0
 800a252:	60f8      	str	r0, [r7, #12]
 800a254:	60b9      	str	r1, [r7, #8]
 800a256:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800a258:	2300      	movs	r3, #0
 800a25a:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	68ba      	ldr	r2, [r7, #8]
 800a260:	68f9      	ldr	r1, [r7, #12]
 800a262:	4806      	ldr	r0, [pc, #24]	; (800a27c <BSP_SD_WriteBlocks_DMA+0x30>)
 800a264:	f7fb fedc 	bl	8006020 <HAL_SD_WriteBlocks_DMA>
 800a268:	4603      	mov	r3, r0
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d001      	beq.n	800a272 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800a26e:	2301      	movs	r3, #1
 800a270:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800a272:	7dfb      	ldrb	r3, [r7, #23]
}
 800a274:	4618      	mov	r0, r3
 800a276:	3718      	adds	r7, #24
 800a278:	46bd      	mov	sp, r7
 800a27a:	bd80      	pop	{r7, pc}
 800a27c:	20004c8c 	.word	0x20004c8c

0800a280 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800a280:	b580      	push	{r7, lr}
 800a282:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800a284:	4805      	ldr	r0, [pc, #20]	; (800a29c <BSP_SD_GetCardState+0x1c>)
 800a286:	f7fc fb85 	bl	8006994 <HAL_SD_GetCardState>
 800a28a:	4603      	mov	r3, r0
 800a28c:	2b04      	cmp	r3, #4
 800a28e:	bf14      	ite	ne
 800a290:	2301      	movne	r3, #1
 800a292:	2300      	moveq	r3, #0
 800a294:	b2db      	uxtb	r3, r3
}
 800a296:	4618      	mov	r0, r3
 800a298:	bd80      	pop	{r7, pc}
 800a29a:	bf00      	nop
 800a29c:	20004c8c 	.word	0x20004c8c

0800a2a0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	b082      	sub	sp, #8
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800a2a8:	6879      	ldr	r1, [r7, #4]
 800a2aa:	4803      	ldr	r0, [pc, #12]	; (800a2b8 <BSP_SD_GetCardInfo+0x18>)
 800a2ac:	f7fc faca 	bl	8006844 <HAL_SD_GetCardInfo>
}
 800a2b0:	bf00      	nop
 800a2b2:	3708      	adds	r7, #8
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	bd80      	pop	{r7, pc}
 800a2b8:	20004c8c 	.word	0x20004c8c

0800a2bc <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b082      	sub	sp, #8
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800a2c4:	f000 f818 	bl	800a2f8 <BSP_SD_AbortCallback>
}
 800a2c8:	bf00      	nop
 800a2ca:	3708      	adds	r7, #8
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	bd80      	pop	{r7, pc}

0800a2d0 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	b082      	sub	sp, #8
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800a2d8:	f000 f9b4 	bl	800a644 <BSP_SD_WriteCpltCallback>
}
 800a2dc:	bf00      	nop
 800a2de:	3708      	adds	r7, #8
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	bd80      	pop	{r7, pc}

0800a2e4 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	b082      	sub	sp, #8
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800a2ec:	f000 f9bc 	bl	800a668 <BSP_SD_ReadCpltCallback>
}
 800a2f0:	bf00      	nop
 800a2f2:	3708      	adds	r7, #8
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	bd80      	pop	{r7, pc}

0800a2f8 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800a2f8:	b480      	push	{r7}
 800a2fa:	af00      	add	r7, sp, #0

}
 800a2fc:	bf00      	nop
 800a2fe:	46bd      	mov	sp, r7
 800a300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a304:	4770      	bx	lr

0800a306 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800a306:	b580      	push	{r7, lr}
 800a308:	b082      	sub	sp, #8
 800a30a:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800a30c:	2301      	movs	r3, #1
 800a30e:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 800a310:	f000 f80c 	bl	800a32c <BSP_PlatformIsDetected>
 800a314:	4603      	mov	r3, r0
 800a316:	2b00      	cmp	r3, #0
 800a318:	d101      	bne.n	800a31e <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800a31a:	2300      	movs	r3, #0
 800a31c:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800a31e:	79fb      	ldrb	r3, [r7, #7]
 800a320:	b2db      	uxtb	r3, r3
}
 800a322:	4618      	mov	r0, r3
 800a324:	3708      	adds	r7, #8
 800a326:	46bd      	mov	sp, r7
 800a328:	bd80      	pop	{r7, pc}
	...

0800a32c <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b082      	sub	sp, #8
 800a330:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800a332:	2301      	movs	r3, #1
 800a334:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800a336:	2104      	movs	r1, #4
 800a338:	4806      	ldr	r0, [pc, #24]	; (800a354 <BSP_PlatformIsDetected+0x28>)
 800a33a:	f7f8 fdc1 	bl	8002ec0 <HAL_GPIO_ReadPin>
 800a33e:	4603      	mov	r3, r0
 800a340:	2b00      	cmp	r3, #0
 800a342:	d001      	beq.n	800a348 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800a344:	2300      	movs	r3, #0
 800a346:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 800a348:	79fb      	ldrb	r3, [r7, #7]
}  
 800a34a:	4618      	mov	r0, r3
 800a34c:	3708      	adds	r7, #8
 800a34e:	46bd      	mov	sp, r7
 800a350:	bd80      	pop	{r7, pc}
 800a352:	bf00      	nop
 800a354:	40021800 	.word	0x40021800

0800a358 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800a358:	b580      	push	{r7, lr}
 800a35a:	b084      	sub	sp, #16
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripherial is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 800a360:	f007 fbf8 	bl	8011b54 <osKernelGetTickCount>
 800a364:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 800a366:	e006      	b.n	800a376 <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a368:	f7ff ff8a 	bl	800a280 <BSP_SD_GetCardState>
 800a36c:	4603      	mov	r3, r0
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d101      	bne.n	800a376 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800a372:	2300      	movs	r3, #0
 800a374:	e009      	b.n	800a38a <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 800a376:	f007 fbed 	bl	8011b54 <osKernelGetTickCount>
 800a37a:	4602      	mov	r2, r0
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	1ad3      	subs	r3, r2, r3
 800a380:	687a      	ldr	r2, [r7, #4]
 800a382:	429a      	cmp	r2, r3
 800a384:	d8f0      	bhi.n	800a368 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800a386:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a38a:	4618      	mov	r0, r3
 800a38c:	3710      	adds	r7, #16
 800a38e:	46bd      	mov	sp, r7
 800a390:	bd80      	pop	{r7, pc}
	...

0800a394 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800a394:	b580      	push	{r7, lr}
 800a396:	b082      	sub	sp, #8
 800a398:	af00      	add	r7, sp, #0
 800a39a:	4603      	mov	r3, r0
 800a39c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800a39e:	4b0b      	ldr	r3, [pc, #44]	; (800a3cc <SD_CheckStatus+0x38>)
 800a3a0:	2201      	movs	r2, #1
 800a3a2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a3a4:	f7ff ff6c 	bl	800a280 <BSP_SD_GetCardState>
 800a3a8:	4603      	mov	r3, r0
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d107      	bne.n	800a3be <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800a3ae:	4b07      	ldr	r3, [pc, #28]	; (800a3cc <SD_CheckStatus+0x38>)
 800a3b0:	781b      	ldrb	r3, [r3, #0]
 800a3b2:	b2db      	uxtb	r3, r3
 800a3b4:	f023 0301 	bic.w	r3, r3, #1
 800a3b8:	b2da      	uxtb	r2, r3
 800a3ba:	4b04      	ldr	r3, [pc, #16]	; (800a3cc <SD_CheckStatus+0x38>)
 800a3bc:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800a3be:	4b03      	ldr	r3, [pc, #12]	; (800a3cc <SD_CheckStatus+0x38>)
 800a3c0:	781b      	ldrb	r3, [r3, #0]
 800a3c2:	b2db      	uxtb	r3, r3
}
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	3708      	adds	r7, #8
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	bd80      	pop	{r7, pc}
 800a3cc:	20000019 	.word	0x20000019

0800a3d0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800a3d0:	b580      	push	{r7, lr}
 800a3d2:	b082      	sub	sp, #8
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	4603      	mov	r3, r0
 800a3d8:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT; 
 800a3da:	4b1c      	ldr	r3, [pc, #112]	; (800a44c <SD_initialize+0x7c>)
 800a3dc:	2201      	movs	r2, #1
 800a3de:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 800a3e0:	f007 fb60 	bl	8011aa4 <osKernelGetState>
 800a3e4:	4603      	mov	r3, r0
 800a3e6:	2b02      	cmp	r3, #2
 800a3e8:	d129      	bne.n	800a43e <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800a3ea:	f7ff feef 	bl	800a1cc <BSP_SD_Init>
 800a3ee:	4603      	mov	r3, r0
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d107      	bne.n	800a404 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800a3f4:	79fb      	ldrb	r3, [r7, #7]
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	f7ff ffcc 	bl	800a394 <SD_CheckStatus>
 800a3fc:	4603      	mov	r3, r0
 800a3fe:	461a      	mov	r2, r3
 800a400:	4b12      	ldr	r3, [pc, #72]	; (800a44c <SD_initialize+0x7c>)
 800a402:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800a404:	4b11      	ldr	r3, [pc, #68]	; (800a44c <SD_initialize+0x7c>)
 800a406:	781b      	ldrb	r3, [r3, #0]
 800a408:	b2db      	uxtb	r3, r3
 800a40a:	2b01      	cmp	r3, #1
 800a40c:	d017      	beq.n	800a43e <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 800a40e:	4b10      	ldr	r3, [pc, #64]	; (800a450 <SD_initialize+0x80>)
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	2b00      	cmp	r3, #0
 800a414:	d107      	bne.n	800a426 <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 800a416:	2200      	movs	r2, #0
 800a418:	2102      	movs	r1, #2
 800a41a:	200a      	movs	r0, #10
 800a41c:	f007 fdfa 	bl	8012014 <osMessageQueueNew>
 800a420:	4602      	mov	r2, r0
 800a422:	4b0b      	ldr	r3, [pc, #44]	; (800a450 <SD_initialize+0x80>)
 800a424:	601a      	str	r2, [r3, #0]
#endif
      }

      if (SDQueueID == NULL)
 800a426:	4b0a      	ldr	r3, [pc, #40]	; (800a450 <SD_initialize+0x80>)
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d107      	bne.n	800a43e <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 800a42e:	4b07      	ldr	r3, [pc, #28]	; (800a44c <SD_initialize+0x7c>)
 800a430:	781b      	ldrb	r3, [r3, #0]
 800a432:	b2db      	uxtb	r3, r3
 800a434:	f043 0301 	orr.w	r3, r3, #1
 800a438:	b2da      	uxtb	r2, r3
 800a43a:	4b04      	ldr	r3, [pc, #16]	; (800a44c <SD_initialize+0x7c>)
 800a43c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800a43e:	4b03      	ldr	r3, [pc, #12]	; (800a44c <SD_initialize+0x7c>)
 800a440:	781b      	ldrb	r3, [r3, #0]
 800a442:	b2db      	uxtb	r3, r3
}
 800a444:	4618      	mov	r0, r3
 800a446:	3708      	adds	r7, #8
 800a448:	46bd      	mov	sp, r7
 800a44a:	bd80      	pop	{r7, pc}
 800a44c:	20000019 	.word	0x20000019
 800a450:	20000214 	.word	0x20000214

0800a454 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800a454:	b580      	push	{r7, lr}
 800a456:	b082      	sub	sp, #8
 800a458:	af00      	add	r7, sp, #0
 800a45a:	4603      	mov	r3, r0
 800a45c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800a45e:	79fb      	ldrb	r3, [r7, #7]
 800a460:	4618      	mov	r0, r3
 800a462:	f7ff ff97 	bl	800a394 <SD_CheckStatus>
 800a466:	4603      	mov	r3, r0
}
 800a468:	4618      	mov	r0, r3
 800a46a:	3708      	adds	r7, #8
 800a46c:	46bd      	mov	sp, r7
 800a46e:	bd80      	pop	{r7, pc}

0800a470 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
   
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800a470:	b580      	push	{r7, lr}
 800a472:	b088      	sub	sp, #32
 800a474:	af00      	add	r7, sp, #0
 800a476:	60b9      	str	r1, [r7, #8]
 800a478:	607a      	str	r2, [r7, #4]
 800a47a:	603b      	str	r3, [r7, #0]
 800a47c:	4603      	mov	r3, r0
 800a47e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a480:	2301      	movs	r3, #1
 800a482:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800a484:	f247 5030 	movw	r0, #30000	; 0x7530
 800a488:	f7ff ff66 	bl	800a358 <SD_CheckStatusWithTimeout>
 800a48c:	4603      	mov	r3, r0
 800a48e:	2b00      	cmp	r3, #0
 800a490:	da01      	bge.n	800a496 <SD_read+0x26>
  {
    return res;
 800a492:	7ffb      	ldrb	r3, [r7, #31]
 800a494:	e02f      	b.n	800a4f6 <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800a496:	683a      	ldr	r2, [r7, #0]
 800a498:	6879      	ldr	r1, [r7, #4]
 800a49a:	68b8      	ldr	r0, [r7, #8]
 800a49c:	f7ff febc 	bl	800a218 <BSP_SD_ReadBlocks_DMA>
 800a4a0:	4603      	mov	r3, r0
 800a4a2:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 800a4a4:	7fbb      	ldrb	r3, [r7, #30]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d124      	bne.n	800a4f4 <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800a4aa:	4b15      	ldr	r3, [pc, #84]	; (800a500 <SD_read+0x90>)
 800a4ac:	6818      	ldr	r0, [r3, #0]
 800a4ae:	f107 0112 	add.w	r1, r7, #18
 800a4b2:	f247 5330 	movw	r3, #30000	; 0x7530
 800a4b6:	2200      	movs	r2, #0
 800a4b8:	f007 fea6 	bl	8012208 <osMessageQueueGet>
 800a4bc:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 800a4be:	69bb      	ldr	r3, [r7, #24]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d117      	bne.n	800a4f4 <SD_read+0x84>
 800a4c4:	8a7b      	ldrh	r3, [r7, #18]
 800a4c6:	2b01      	cmp	r3, #1
 800a4c8:	d114      	bne.n	800a4f4 <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 800a4ca:	f007 fb43 	bl	8011b54 <osKernelGetTickCount>
 800a4ce:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800a4d0:	e007      	b.n	800a4e2 <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a4d2:	f7ff fed5 	bl	800a280 <BSP_SD_GetCardState>
 800a4d6:	4603      	mov	r3, r0
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d102      	bne.n	800a4e2 <SD_read+0x72>
              {
                res = RES_OK;
 800a4dc:	2300      	movs	r3, #0
 800a4de:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800a4e0:	e008      	b.n	800a4f4 <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800a4e2:	f007 fb37 	bl	8011b54 <osKernelGetTickCount>
 800a4e6:	4602      	mov	r2, r0
 800a4e8:	697b      	ldr	r3, [r7, #20]
 800a4ea:	1ad3      	subs	r3, r2, r3
 800a4ec:	f247 522f 	movw	r2, #29999	; 0x752f
 800a4f0:	4293      	cmp	r3, r2
 800a4f2:	d9ee      	bls.n	800a4d2 <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800a4f4:	7ffb      	ldrb	r3, [r7, #31]
}
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	3720      	adds	r7, #32
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	bd80      	pop	{r7, pc}
 800a4fe:	bf00      	nop
 800a500:	20000214 	.word	0x20000214

0800a504 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
   
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800a504:	b580      	push	{r7, lr}
 800a506:	b088      	sub	sp, #32
 800a508:	af00      	add	r7, sp, #0
 800a50a:	60b9      	str	r1, [r7, #8]
 800a50c:	607a      	str	r2, [r7, #4]
 800a50e:	603b      	str	r3, [r7, #0]
 800a510:	4603      	mov	r3, r0
 800a512:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a514:	2301      	movs	r3, #1
 800a516:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800a518:	f247 5030 	movw	r0, #30000	; 0x7530
 800a51c:	f7ff ff1c 	bl	800a358 <SD_CheckStatusWithTimeout>
 800a520:	4603      	mov	r3, r0
 800a522:	2b00      	cmp	r3, #0
 800a524:	da01      	bge.n	800a52a <SD_write+0x26>
  {
    return res;
 800a526:	7ffb      	ldrb	r3, [r7, #31]
 800a528:	e02d      	b.n	800a586 <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800a52a:	683a      	ldr	r2, [r7, #0]
 800a52c:	6879      	ldr	r1, [r7, #4]
 800a52e:	68b8      	ldr	r0, [r7, #8]
 800a530:	f7ff fe8c 	bl	800a24c <BSP_SD_WriteBlocks_DMA>
 800a534:	4603      	mov	r3, r0
 800a536:	2b00      	cmp	r3, #0
 800a538:	d124      	bne.n	800a584 <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800a53a:	4b15      	ldr	r3, [pc, #84]	; (800a590 <SD_write+0x8c>)
 800a53c:	6818      	ldr	r0, [r3, #0]
 800a53e:	f107 0112 	add.w	r1, r7, #18
 800a542:	f247 5330 	movw	r3, #30000	; 0x7530
 800a546:	2200      	movs	r2, #0
 800a548:	f007 fe5e 	bl	8012208 <osMessageQueueGet>
 800a54c:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 800a54e:	69bb      	ldr	r3, [r7, #24]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d117      	bne.n	800a584 <SD_write+0x80>
 800a554:	8a7b      	ldrh	r3, [r7, #18]
 800a556:	2b02      	cmp	r3, #2
 800a558:	d114      	bne.n	800a584 <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 800a55a:	f007 fafb 	bl	8011b54 <osKernelGetTickCount>
 800a55e:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800a560:	e007      	b.n	800a572 <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a562:	f7ff fe8d 	bl	800a280 <BSP_SD_GetCardState>
 800a566:	4603      	mov	r3, r0
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d102      	bne.n	800a572 <SD_write+0x6e>
          {
            res = RES_OK;
 800a56c:	2300      	movs	r3, #0
 800a56e:	77fb      	strb	r3, [r7, #31]
            break;
 800a570:	e008      	b.n	800a584 <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800a572:	f007 faef 	bl	8011b54 <osKernelGetTickCount>
 800a576:	4602      	mov	r2, r0
 800a578:	697b      	ldr	r3, [r7, #20]
 800a57a:	1ad3      	subs	r3, r2, r3
 800a57c:	f247 522f 	movw	r2, #29999	; 0x752f
 800a580:	4293      	cmp	r3, r2
 800a582:	d9ee      	bls.n	800a562 <SD_write+0x5e>
    }

  }
#endif

  return res;
 800a584:	7ffb      	ldrb	r3, [r7, #31]
}
 800a586:	4618      	mov	r0, r3
 800a588:	3720      	adds	r7, #32
 800a58a:	46bd      	mov	sp, r7
 800a58c:	bd80      	pop	{r7, pc}
 800a58e:	bf00      	nop
 800a590:	20000214 	.word	0x20000214

0800a594 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800a594:	b580      	push	{r7, lr}
 800a596:	b08c      	sub	sp, #48	; 0x30
 800a598:	af00      	add	r7, sp, #0
 800a59a:	4603      	mov	r3, r0
 800a59c:	603a      	str	r2, [r7, #0]
 800a59e:	71fb      	strb	r3, [r7, #7]
 800a5a0:	460b      	mov	r3, r1
 800a5a2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800a5a4:	2301      	movs	r3, #1
 800a5a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800a5aa:	4b25      	ldr	r3, [pc, #148]	; (800a640 <SD_ioctl+0xac>)
 800a5ac:	781b      	ldrb	r3, [r3, #0]
 800a5ae:	b2db      	uxtb	r3, r3
 800a5b0:	f003 0301 	and.w	r3, r3, #1
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d001      	beq.n	800a5bc <SD_ioctl+0x28>
 800a5b8:	2303      	movs	r3, #3
 800a5ba:	e03c      	b.n	800a636 <SD_ioctl+0xa2>

  switch (cmd)
 800a5bc:	79bb      	ldrb	r3, [r7, #6]
 800a5be:	2b03      	cmp	r3, #3
 800a5c0:	d834      	bhi.n	800a62c <SD_ioctl+0x98>
 800a5c2:	a201      	add	r2, pc, #4	; (adr r2, 800a5c8 <SD_ioctl+0x34>)
 800a5c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5c8:	0800a5d9 	.word	0x0800a5d9
 800a5cc:	0800a5e1 	.word	0x0800a5e1
 800a5d0:	0800a5f9 	.word	0x0800a5f9
 800a5d4:	0800a613 	.word	0x0800a613
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800a5d8:	2300      	movs	r3, #0
 800a5da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a5de:	e028      	b.n	800a632 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800a5e0:	f107 030c 	add.w	r3, r7, #12
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	f7ff fe5b 	bl	800a2a0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800a5ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5ec:	683b      	ldr	r3, [r7, #0]
 800a5ee:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a5f6:	e01c      	b.n	800a632 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a5f8:	f107 030c 	add.w	r3, r7, #12
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	f7ff fe4f 	bl	800a2a0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800a602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a604:	b29a      	uxth	r2, r3
 800a606:	683b      	ldr	r3, [r7, #0]
 800a608:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800a60a:	2300      	movs	r3, #0
 800a60c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a610:	e00f      	b.n	800a632 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a612:	f107 030c 	add.w	r3, r7, #12
 800a616:	4618      	mov	r0, r3
 800a618:	f7ff fe42 	bl	800a2a0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800a61c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a61e:	0a5a      	lsrs	r2, r3, #9
 800a620:	683b      	ldr	r3, [r7, #0]
 800a622:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a624:	2300      	movs	r3, #0
 800a626:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a62a:	e002      	b.n	800a632 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800a62c:	2304      	movs	r3, #4
 800a62e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800a632:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a636:	4618      	mov	r0, r3
 800a638:	3730      	adds	r7, #48	; 0x30
 800a63a:	46bd      	mov	sp, r7
 800a63c:	bd80      	pop	{r7, pc}
 800a63e:	bf00      	nop
 800a640:	20000019 	.word	0x20000019

0800a644 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800a644:	b580      	push	{r7, lr}
 800a646:	b082      	sub	sp, #8
 800a648:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
#else
   const uint16_t msg = WRITE_CPLT_MSG;
 800a64a:	2302      	movs	r3, #2
 800a64c:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800a64e:	4b05      	ldr	r3, [pc, #20]	; (800a664 <BSP_SD_WriteCpltCallback+0x20>)
 800a650:	6818      	ldr	r0, [r3, #0]
 800a652:	1db9      	adds	r1, r7, #6
 800a654:	2300      	movs	r3, #0
 800a656:	2200      	movs	r2, #0
 800a658:	f007 fd62 	bl	8012120 <osMessageQueuePut>
#endif
}
 800a65c:	bf00      	nop
 800a65e:	3708      	adds	r7, #8
 800a660:	46bd      	mov	sp, r7
 800a662:	bd80      	pop	{r7, pc}
 800a664:	20000214 	.word	0x20000214

0800a668 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800a668:	b580      	push	{r7, lr}
 800a66a:	b082      	sub	sp, #8
 800a66c:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 800a66e:	2301      	movs	r3, #1
 800a670:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800a672:	4b05      	ldr	r3, [pc, #20]	; (800a688 <BSP_SD_ReadCpltCallback+0x20>)
 800a674:	6818      	ldr	r0, [r3, #0]
 800a676:	1db9      	adds	r1, r7, #6
 800a678:	2300      	movs	r3, #0
 800a67a:	2200      	movs	r2, #0
 800a67c:	f007 fd50 	bl	8012120 <osMessageQueuePut>
#endif
}
 800a680:	bf00      	nop
 800a682:	3708      	adds	r7, #8
 800a684:	46bd      	mov	sp, r7
 800a686:	bd80      	pop	{r7, pc}
 800a688:	20000214 	.word	0x20000214

0800a68c <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a68c:	b580      	push	{r7, lr}
 800a68e:	b084      	sub	sp, #16
 800a690:	af00      	add	r7, sp, #0
 800a692:	6078      	str	r0, [r7, #4]
 800a694:	460b      	mov	r3, r1
 800a696:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 800a698:	f44f 701d 	mov.w	r0, #628	; 0x274
 800a69c:	f00b fbfc 	bl	8015e98 <malloc>
 800a6a0:	4603      	mov	r3, r0
 800a6a2:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d105      	bne.n	800a6b6 <USBD_MSC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800a6b2:	2302      	movs	r3, #2
 800a6b4:	e034      	b.n	800a720 <USBD_MSC_Init+0x94>
  }

  pdev->pClassData = (void *)hmsc;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	68fa      	ldr	r2, [r7, #12]
 800a6ba:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	7c1b      	ldrb	r3, [r3, #16]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d115      	bne.n	800a6f2 <USBD_MSC_Init+0x66>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800a6c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a6ca:	2202      	movs	r2, #2
 800a6cc:	2101      	movs	r1, #1
 800a6ce:	6878      	ldr	r0, [r7, #4]
 800a6d0:	f00b f9f5 	bl	8015abe <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	2201      	movs	r2, #1
 800a6d8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800a6dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a6e0:	2202      	movs	r2, #2
 800a6e2:	2181      	movs	r1, #129	; 0x81
 800a6e4:	6878      	ldr	r0, [r7, #4]
 800a6e6:	f00b f9ea 	bl	8015abe <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	2201      	movs	r2, #1
 800a6ee:	871a      	strh	r2, [r3, #56]	; 0x38
 800a6f0:	e012      	b.n	800a718 <USBD_MSC_Init+0x8c>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800a6f2:	2340      	movs	r3, #64	; 0x40
 800a6f4:	2202      	movs	r2, #2
 800a6f6:	2101      	movs	r1, #1
 800a6f8:	6878      	ldr	r0, [r7, #4]
 800a6fa:	f00b f9e0 	bl	8015abe <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	2201      	movs	r2, #1
 800a702:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800a706:	2340      	movs	r3, #64	; 0x40
 800a708:	2202      	movs	r2, #2
 800a70a:	2181      	movs	r1, #129	; 0x81
 800a70c:	6878      	ldr	r0, [r7, #4]
 800a70e:	f00b f9d6 	bl	8015abe <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	2201      	movs	r2, #1
 800a716:	871a      	strh	r2, [r3, #56]	; 0x38
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 800a718:	6878      	ldr	r0, [r7, #4]
 800a71a:	f000 f98e 	bl	800aa3a <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 800a71e:	2300      	movs	r3, #0
}
 800a720:	4618      	mov	r0, r3
 800a722:	3710      	adds	r7, #16
 800a724:	46bd      	mov	sp, r7
 800a726:	bd80      	pop	{r7, pc}

0800a728 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a728:	b580      	push	{r7, lr}
 800a72a:	b082      	sub	sp, #8
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	6078      	str	r0, [r7, #4]
 800a730:	460b      	mov	r3, r1
 800a732:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 800a734:	2101      	movs	r1, #1
 800a736:	6878      	ldr	r0, [r7, #4]
 800a738:	f00b f9e7 	bl	8015b0a <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	2200      	movs	r2, #0
 800a740:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 800a744:	2181      	movs	r1, #129	; 0x81
 800a746:	6878      	ldr	r0, [r7, #4]
 800a748:	f00b f9df 	bl	8015b0a <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	2200      	movs	r2, #0
 800a750:	871a      	strh	r2, [r3, #56]	; 0x38

  /* De-Init the BOT layer */
  MSC_BOT_DeInit(pdev);
 800a752:	6878      	ldr	r0, [r7, #4]
 800a754:	f000 f9c7 	bl	800aae6 <MSC_BOT_DeInit>

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d009      	beq.n	800a776 <USBD_MSC_DeInit+0x4e>
  {
    (void)USBD_free(pdev->pClassData);
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a768:	4618      	mov	r0, r3
 800a76a:	f00b fb9d 	bl	8015ea8 <free>
    pdev->pClassData = NULL;
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	2200      	movs	r2, #0
 800a772:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a776:	2300      	movs	r3, #0
}
 800a778:	4618      	mov	r0, r3
 800a77a:	3708      	adds	r7, #8
 800a77c:	46bd      	mov	sp, r7
 800a77e:	bd80      	pop	{r7, pc}

0800a780 <USBD_MSC_Setup>:
* @param  pdev: device instance
* @param  req: USB request
* @retval status
*/
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a780:	b580      	push	{r7, lr}
 800a782:	b086      	sub	sp, #24
 800a784:	af00      	add	r7, sp, #0
 800a786:	6078      	str	r0, [r7, #4]
 800a788:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a790:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 800a792:	2300      	movs	r3, #0
 800a794:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 800a796:	2300      	movs	r3, #0
 800a798:	81fb      	strh	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a79a:	683b      	ldr	r3, [r7, #0]
 800a79c:	781b      	ldrb	r3, [r3, #0]
 800a79e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d04d      	beq.n	800a842 <USBD_MSC_Setup+0xc2>
 800a7a6:	2b20      	cmp	r3, #32
 800a7a8:	f040 80c6 	bne.w	800a938 <USBD_MSC_Setup+0x1b8>
  {
    /* Class request */
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 800a7ac:	683b      	ldr	r3, [r7, #0]
 800a7ae:	785b      	ldrb	r3, [r3, #1]
 800a7b0:	2bfe      	cmp	r3, #254	; 0xfe
 800a7b2:	d002      	beq.n	800a7ba <USBD_MSC_Setup+0x3a>
 800a7b4:	2bff      	cmp	r3, #255	; 0xff
 800a7b6:	d024      	beq.n	800a802 <USBD_MSC_Setup+0x82>
 800a7b8:	e03b      	b.n	800a832 <USBD_MSC_Setup+0xb2>
    {
    case BOT_GET_MAX_LUN:
      if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800a7ba:	683b      	ldr	r3, [r7, #0]
 800a7bc:	885b      	ldrh	r3, [r3, #2]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d118      	bne.n	800a7f4 <USBD_MSC_Setup+0x74>
 800a7c2:	683b      	ldr	r3, [r7, #0]
 800a7c4:	88db      	ldrh	r3, [r3, #6]
 800a7c6:	2b01      	cmp	r3, #1
 800a7c8:	d114      	bne.n	800a7f4 <USBD_MSC_Setup+0x74>
          ((req->bmRequest & 0x80U) == 0x80U))
 800a7ca:	683b      	ldr	r3, [r7, #0]
 800a7cc:	781b      	ldrb	r3, [r3, #0]
 800a7ce:	b25b      	sxtb	r3, r3
      if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	da0f      	bge.n	800a7f4 <USBD_MSC_Setup+0x74>
      {
        hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a7da:	699b      	ldr	r3, [r3, #24]
 800a7dc:	4798      	blx	r3
 800a7de:	4603      	mov	r3, r0
 800a7e0:	461a      	mov	r2, r3
 800a7e2:	693b      	ldr	r3, [r7, #16]
 800a7e4:	601a      	str	r2, [r3, #0]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 800a7e6:	693b      	ldr	r3, [r7, #16]
 800a7e8:	2201      	movs	r2, #1
 800a7ea:	4619      	mov	r1, r3
 800a7ec:	6878      	ldr	r0, [r7, #4]
 800a7ee:	f002 fc82 	bl	800d0f6 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800a7f2:	e025      	b.n	800a840 <USBD_MSC_Setup+0xc0>
        USBD_CtlError(pdev, req);
 800a7f4:	6839      	ldr	r1, [r7, #0]
 800a7f6:	6878      	ldr	r0, [r7, #4]
 800a7f8:	f002 fc0c 	bl	800d014 <USBD_CtlError>
        ret = USBD_FAIL;
 800a7fc:	2303      	movs	r3, #3
 800a7fe:	75fb      	strb	r3, [r7, #23]
      break;
 800a800:	e01e      	b.n	800a840 <USBD_MSC_Setup+0xc0>

    case BOT_RESET :
      if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800a802:	683b      	ldr	r3, [r7, #0]
 800a804:	885b      	ldrh	r3, [r3, #2]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d10c      	bne.n	800a824 <USBD_MSC_Setup+0xa4>
 800a80a:	683b      	ldr	r3, [r7, #0]
 800a80c:	88db      	ldrh	r3, [r3, #6]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d108      	bne.n	800a824 <USBD_MSC_Setup+0xa4>
          ((req->bmRequest & 0x80U) != 0x80U))
 800a812:	683b      	ldr	r3, [r7, #0]
 800a814:	781b      	ldrb	r3, [r3, #0]
 800a816:	b25b      	sxtb	r3, r3
      if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800a818:	2b00      	cmp	r3, #0
 800a81a:	db03      	blt.n	800a824 <USBD_MSC_Setup+0xa4>
      {
        MSC_BOT_Reset(pdev);
 800a81c:	6878      	ldr	r0, [r7, #4]
 800a81e:	f000 f940 	bl	800aaa2 <MSC_BOT_Reset>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800a822:	e00d      	b.n	800a840 <USBD_MSC_Setup+0xc0>
        USBD_CtlError(pdev, req);
 800a824:	6839      	ldr	r1, [r7, #0]
 800a826:	6878      	ldr	r0, [r7, #4]
 800a828:	f002 fbf4 	bl	800d014 <USBD_CtlError>
        ret = USBD_FAIL;
 800a82c:	2303      	movs	r3, #3
 800a82e:	75fb      	strb	r3, [r7, #23]
      break;
 800a830:	e006      	b.n	800a840 <USBD_MSC_Setup+0xc0>

    default:
      USBD_CtlError(pdev, req);
 800a832:	6839      	ldr	r1, [r7, #0]
 800a834:	6878      	ldr	r0, [r7, #4]
 800a836:	f002 fbed 	bl	800d014 <USBD_CtlError>
      ret = USBD_FAIL;
 800a83a:	2303      	movs	r3, #3
 800a83c:	75fb      	strb	r3, [r7, #23]
      break;
 800a83e:	bf00      	nop
    }
    break;
 800a840:	e081      	b.n	800a946 <USBD_MSC_Setup+0x1c6>
    /* Interface & Endpoint request */
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800a842:	683b      	ldr	r3, [r7, #0]
 800a844:	785b      	ldrb	r3, [r3, #1]
 800a846:	2b0b      	cmp	r3, #11
 800a848:	d86d      	bhi.n	800a926 <USBD_MSC_Setup+0x1a6>
 800a84a:	a201      	add	r2, pc, #4	; (adr r2, 800a850 <USBD_MSC_Setup+0xd0>)
 800a84c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a850:	0800a881 	.word	0x0800a881
 800a854:	0800a8f7 	.word	0x0800a8f7
 800a858:	0800a927 	.word	0x0800a927
 800a85c:	0800a927 	.word	0x0800a927
 800a860:	0800a927 	.word	0x0800a927
 800a864:	0800a927 	.word	0x0800a927
 800a868:	0800a927 	.word	0x0800a927
 800a86c:	0800a927 	.word	0x0800a927
 800a870:	0800a927 	.word	0x0800a927
 800a874:	0800a927 	.word	0x0800a927
 800a878:	0800a8a9 	.word	0x0800a8a9
 800a87c:	0800a8d1 	.word	0x0800a8d1
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a886:	2b03      	cmp	r3, #3
 800a888:	d107      	bne.n	800a89a <USBD_MSC_Setup+0x11a>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a88a:	f107 030e 	add.w	r3, r7, #14
 800a88e:	2202      	movs	r2, #2
 800a890:	4619      	mov	r1, r3
 800a892:	6878      	ldr	r0, [r7, #4]
 800a894:	f002 fc2f 	bl	800d0f6 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800a898:	e04d      	b.n	800a936 <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 800a89a:	6839      	ldr	r1, [r7, #0]
 800a89c:	6878      	ldr	r0, [r7, #4]
 800a89e:	f002 fbb9 	bl	800d014 <USBD_CtlError>
        ret = USBD_FAIL;
 800a8a2:	2303      	movs	r3, #3
 800a8a4:	75fb      	strb	r3, [r7, #23]
      break;
 800a8a6:	e046      	b.n	800a936 <USBD_MSC_Setup+0x1b6>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a8ae:	2b03      	cmp	r3, #3
 800a8b0:	d107      	bne.n	800a8c2 <USBD_MSC_Setup+0x142>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 800a8b2:	693b      	ldr	r3, [r7, #16]
 800a8b4:	3304      	adds	r3, #4
 800a8b6:	2201      	movs	r2, #1
 800a8b8:	4619      	mov	r1, r3
 800a8ba:	6878      	ldr	r0, [r7, #4]
 800a8bc:	f002 fc1b 	bl	800d0f6 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800a8c0:	e039      	b.n	800a936 <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 800a8c2:	6839      	ldr	r1, [r7, #0]
 800a8c4:	6878      	ldr	r0, [r7, #4]
 800a8c6:	f002 fba5 	bl	800d014 <USBD_CtlError>
        ret = USBD_FAIL;
 800a8ca:	2303      	movs	r3, #3
 800a8cc:	75fb      	strb	r3, [r7, #23]
      break;
 800a8ce:	e032      	b.n	800a936 <USBD_MSC_Setup+0x1b6>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a8d6:	2b03      	cmp	r3, #3
 800a8d8:	d106      	bne.n	800a8e8 <USBD_MSC_Setup+0x168>
      {
        hmsc->interface = (uint8_t)(req->wValue);
 800a8da:	683b      	ldr	r3, [r7, #0]
 800a8dc:	885b      	ldrh	r3, [r3, #2]
 800a8de:	b2db      	uxtb	r3, r3
 800a8e0:	461a      	mov	r2, r3
 800a8e2:	693b      	ldr	r3, [r7, #16]
 800a8e4:	605a      	str	r2, [r3, #4]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800a8e6:	e026      	b.n	800a936 <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 800a8e8:	6839      	ldr	r1, [r7, #0]
 800a8ea:	6878      	ldr	r0, [r7, #4]
 800a8ec:	f002 fb92 	bl	800d014 <USBD_CtlError>
        ret = USBD_FAIL;
 800a8f0:	2303      	movs	r3, #3
 800a8f2:	75fb      	strb	r3, [r7, #23]
      break;
 800a8f4:	e01f      	b.n	800a936 <USBD_MSC_Setup+0x1b6>

    case USB_REQ_CLEAR_FEATURE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a8fc:	2b03      	cmp	r3, #3
 800a8fe:	d119      	bne.n	800a934 <USBD_MSC_Setup+0x1b4>
      {
        if (req->wValue == USB_FEATURE_EP_HALT)
 800a900:	683b      	ldr	r3, [r7, #0]
 800a902:	885b      	ldrh	r3, [r3, #2]
 800a904:	2b00      	cmp	r3, #0
 800a906:	d115      	bne.n	800a934 <USBD_MSC_Setup+0x1b4>
        {
          /* Flush the FIFO */
          (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 800a908:	683b      	ldr	r3, [r7, #0]
 800a90a:	889b      	ldrh	r3, [r3, #4]
 800a90c:	b2db      	uxtb	r3, r3
 800a90e:	4619      	mov	r1, r3
 800a910:	6878      	ldr	r0, [r7, #4]
 800a912:	f00b f919 	bl	8015b48 <USBD_LL_FlushEP>

          /* Handle BOT error */
          MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 800a916:	683b      	ldr	r3, [r7, #0]
 800a918:	889b      	ldrh	r3, [r3, #4]
 800a91a:	b2db      	uxtb	r3, r3
 800a91c:	4619      	mov	r1, r3
 800a91e:	6878      	ldr	r0, [r7, #4]
 800a920:	f000 fa5a 	bl	800add8 <MSC_BOT_CplClrFeature>
        }
      }
      break;
 800a924:	e006      	b.n	800a934 <USBD_MSC_Setup+0x1b4>

    default:
      USBD_CtlError(pdev, req);
 800a926:	6839      	ldr	r1, [r7, #0]
 800a928:	6878      	ldr	r0, [r7, #4]
 800a92a:	f002 fb73 	bl	800d014 <USBD_CtlError>
      ret = USBD_FAIL;
 800a92e:	2303      	movs	r3, #3
 800a930:	75fb      	strb	r3, [r7, #23]
      break;
 800a932:	e000      	b.n	800a936 <USBD_MSC_Setup+0x1b6>
      break;
 800a934:	bf00      	nop
    }
    break;
 800a936:	e006      	b.n	800a946 <USBD_MSC_Setup+0x1c6>

  default:
    USBD_CtlError(pdev, req);
 800a938:	6839      	ldr	r1, [r7, #0]
 800a93a:	6878      	ldr	r0, [r7, #4]
 800a93c:	f002 fb6a 	bl	800d014 <USBD_CtlError>
    ret = USBD_FAIL;
 800a940:	2303      	movs	r3, #3
 800a942:	75fb      	strb	r3, [r7, #23]
    break;
 800a944:	bf00      	nop
  }

  return (uint8_t)ret;
 800a946:	7dfb      	ldrb	r3, [r7, #23]
}
 800a948:	4618      	mov	r0, r3
 800a94a:	3718      	adds	r7, #24
 800a94c:	46bd      	mov	sp, r7
 800a94e:	bd80      	pop	{r7, pc}

0800a950 <USBD_MSC_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a950:	b580      	push	{r7, lr}
 800a952:	b082      	sub	sp, #8
 800a954:	af00      	add	r7, sp, #0
 800a956:	6078      	str	r0, [r7, #4]
 800a958:	460b      	mov	r3, r1
 800a95a:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 800a95c:	78fb      	ldrb	r3, [r7, #3]
 800a95e:	4619      	mov	r1, r3
 800a960:	6878      	ldr	r0, [r7, #4]
 800a962:	f000 f8d1 	bl	800ab08 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 800a966:	2300      	movs	r3, #0
}
 800a968:	4618      	mov	r0, r3
 800a96a:	3708      	adds	r7, #8
 800a96c:	46bd      	mov	sp, r7
 800a96e:	bd80      	pop	{r7, pc}

0800a970 <USBD_MSC_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a970:	b580      	push	{r7, lr}
 800a972:	b082      	sub	sp, #8
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
 800a978:	460b      	mov	r3, r1
 800a97a:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 800a97c:	78fb      	ldrb	r3, [r7, #3]
 800a97e:	4619      	mov	r1, r3
 800a980:	6878      	ldr	r0, [r7, #4]
 800a982:	f000 f8f2 	bl	800ab6a <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 800a986:	2300      	movs	r3, #0
}
 800a988:	4618      	mov	r0, r3
 800a98a:	3708      	adds	r7, #8
 800a98c:	46bd      	mov	sp, r7
 800a98e:	bd80      	pop	{r7, pc}

0800a990 <USBD_MSC_GetHSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 800a990:	b480      	push	{r7}
 800a992:	b083      	sub	sp, #12
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgHSDesc);
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	2220      	movs	r2, #32
 800a99c:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 800a99e:	4b03      	ldr	r3, [pc, #12]	; (800a9ac <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	370c      	adds	r7, #12
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9aa:	4770      	bx	lr
 800a9ac:	20000054 	.word	0x20000054

0800a9b0 <USBD_MSC_GetFSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 800a9b0:	b480      	push	{r7}
 800a9b2:	b083      	sub	sp, #12
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgFSDesc);
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	2220      	movs	r2, #32
 800a9bc:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 800a9be:	4b03      	ldr	r3, [pc, #12]	; (800a9cc <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	370c      	adds	r7, #12
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ca:	4770      	bx	lr
 800a9cc:	20000074 	.word	0x20000074

0800a9d0 <USBD_MSC_GetOtherSpeedCfgDesc>:
*         return other speed configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a9d0:	b480      	push	{r7}
 800a9d2:	b083      	sub	sp, #12
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_OtherSpeedCfgDesc);
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	2220      	movs	r2, #32
 800a9dc:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 800a9de:	4b03      	ldr	r3, [pc, #12]	; (800a9ec <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	370c      	adds	r7, #12
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ea:	4770      	bx	lr
 800a9ec:	20000094 	.word	0x20000094

0800a9f0 <USBD_MSC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a9f0:	b480      	push	{r7}
 800a9f2:	b083      	sub	sp, #12
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	220a      	movs	r2, #10
 800a9fc:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 800a9fe:	4b03      	ldr	r3, [pc, #12]	; (800aa0c <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 800aa00:	4618      	mov	r0, r3
 800aa02:	370c      	adds	r7, #12
 800aa04:	46bd      	mov	sp, r7
 800aa06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa0a:	4770      	bx	lr
 800aa0c:	200000b4 	.word	0x200000b4

0800aa10 <USBD_MSC_RegisterStorage>:
* @brief  USBD_MSC_RegisterStorage
* @param  fops: storage callback
* @retval status
*/
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 800aa10:	b480      	push	{r7}
 800aa12:	b083      	sub	sp, #12
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	6078      	str	r0, [r7, #4]
 800aa18:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800aa1a:	683b      	ldr	r3, [r7, #0]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d101      	bne.n	800aa24 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800aa20:	2303      	movs	r3, #3
 800aa22:	e004      	b.n	800aa2e <USBD_MSC_RegisterStorage+0x1e>
  }

  pdev->pUserData = fops;
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	683a      	ldr	r2, [r7, #0]
 800aa28:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800aa2c:	2300      	movs	r3, #0
}
 800aa2e:	4618      	mov	r0, r3
 800aa30:	370c      	adds	r7, #12
 800aa32:	46bd      	mov	sp, r7
 800aa34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa38:	4770      	bx	lr

0800aa3a <MSC_BOT_Init>:
*         Initialize the BOT Process
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 800aa3a:	b580      	push	{r7, lr}
 800aa3c:	b084      	sub	sp, #16
 800aa3e:	af00      	add	r7, sp, #0
 800aa40:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aa48:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state = USBD_BOT_IDLE;
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	2200      	movs	r2, #0
 800aa4e:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	2200      	movs	r2, #0
 800aa54:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	2200      	movs	r2, #0
 800aa5a:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  hmsc->scsi_sense_head = 0U;
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	2200      	movs	r2, #0
 800aa62:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	2200      	movs	r2, #0
 800aa6a:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	2000      	movs	r0, #0
 800aa78:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 800aa7a:	2101      	movs	r1, #1
 800aa7c:	6878      	ldr	r0, [r7, #4]
 800aa7e:	f00b f863 	bl	8015b48 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 800aa82:	2181      	movs	r1, #129	; 0x81
 800aa84:	6878      	ldr	r0, [r7, #4]
 800aa86:	f00b f85f 	bl	8015b48 <USBD_LL_FlushEP>

  /* Prapare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800aa90:	231f      	movs	r3, #31
 800aa92:	2101      	movs	r1, #1
 800aa94:	6878      	ldr	r0, [r7, #4]
 800aa96:	f00b f920 	bl	8015cda <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 800aa9a:	bf00      	nop
 800aa9c:	3710      	adds	r7, #16
 800aa9e:	46bd      	mov	sp, r7
 800aaa0:	bd80      	pop	{r7, pc}

0800aaa2 <MSC_BOT_Reset>:
*         Reset the BOT Machine
* @param  pdev: device instance
* @retval  None
*/
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 800aaa2:	b580      	push	{r7, lr}
 800aaa4:	b084      	sub	sp, #16
 800aaa6:	af00      	add	r7, sp, #0
 800aaa8:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aab0:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state  = USBD_BOT_IDLE;
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	2200      	movs	r2, #0
 800aab6:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	2201      	movs	r2, #1
 800aabc:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSC_EPIN_ADDR);
 800aabe:	2181      	movs	r1, #129	; 0x81
 800aac0:	6878      	ldr	r0, [r7, #4]
 800aac2:	f00b f87f 	bl	8015bc4 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSC_EPOUT_ADDR);
 800aac6:	2101      	movs	r1, #1
 800aac8:	6878      	ldr	r0, [r7, #4]
 800aaca:	f00b f87b 	bl	8015bc4 <USBD_LL_ClearStallEP>

  /* Prapare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800aad4:	231f      	movs	r3, #31
 800aad6:	2101      	movs	r1, #1
 800aad8:	6878      	ldr	r0, [r7, #4]
 800aada:	f00b f8fe 	bl	8015cda <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 800aade:	bf00      	nop
 800aae0:	3710      	adds	r7, #16
 800aae2:	46bd      	mov	sp, r7
 800aae4:	bd80      	pop	{r7, pc}

0800aae6 <MSC_BOT_DeInit>:
*         Deinitialize the BOT Machine
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 800aae6:	b480      	push	{r7}
 800aae8:	b085      	sub	sp, #20
 800aaea:	af00      	add	r7, sp, #0
 800aaec:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aaf4:	60fb      	str	r3, [r7, #12]
  hmsc->bot_state = USBD_BOT_IDLE;
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	2200      	movs	r2, #0
 800aafa:	721a      	strb	r2, [r3, #8]
}
 800aafc:	bf00      	nop
 800aafe:	3714      	adds	r7, #20
 800ab00:	46bd      	mov	sp, r7
 800ab02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab06:	4770      	bx	lr

0800ab08 <MSC_BOT_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	b084      	sub	sp, #16
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	6078      	str	r0, [r7, #4]
 800ab10:	460b      	mov	r3, r1
 800ab12:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ab1a:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	7a1b      	ldrb	r3, [r3, #8]
 800ab20:	2b02      	cmp	r3, #2
 800ab22:	d004      	beq.n	800ab2e <MSC_BOT_DataIn+0x26>
 800ab24:	2b02      	cmp	r3, #2
 800ab26:	db19      	blt.n	800ab5c <MSC_BOT_DataIn+0x54>
 800ab28:	2b04      	cmp	r3, #4
 800ab2a:	dc17      	bgt.n	800ab5c <MSC_BOT_DataIn+0x54>
 800ab2c:	e011      	b.n	800ab52 <MSC_BOT_DataIn+0x4a>
  {
  case USBD_BOT_DATA_IN:
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	f203 231f 	addw	r3, r3, #543	; 0x21f
 800ab3a:	461a      	mov	r2, r3
 800ab3c:	6878      	ldr	r0, [r7, #4]
 800ab3e:	f000 f973 	bl	800ae28 <SCSI_ProcessCmd>
 800ab42:	4603      	mov	r3, r0
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	da0b      	bge.n	800ab60 <MSC_BOT_DataIn+0x58>
    {
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800ab48:	2101      	movs	r1, #1
 800ab4a:	6878      	ldr	r0, [r7, #4]
 800ab4c:	f000 f8ea 	bl	800ad24 <MSC_BOT_SendCSW>
    }
    break;
 800ab50:	e006      	b.n	800ab60 <MSC_BOT_DataIn+0x58>

  case USBD_BOT_SEND_DATA:
  case USBD_BOT_LAST_DATA_IN:
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800ab52:	2100      	movs	r1, #0
 800ab54:	6878      	ldr	r0, [r7, #4]
 800ab56:	f000 f8e5 	bl	800ad24 <MSC_BOT_SendCSW>
    break;
 800ab5a:	e002      	b.n	800ab62 <MSC_BOT_DataIn+0x5a>

  default:
    break;
 800ab5c:	bf00      	nop
 800ab5e:	e000      	b.n	800ab62 <MSC_BOT_DataIn+0x5a>
    break;
 800ab60:	bf00      	nop
  }
}
 800ab62:	bf00      	nop
 800ab64:	3710      	adds	r7, #16
 800ab66:	46bd      	mov	sp, r7
 800ab68:	bd80      	pop	{r7, pc}

0800ab6a <MSC_BOT_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ab6a:	b580      	push	{r7, lr}
 800ab6c:	b084      	sub	sp, #16
 800ab6e:	af00      	add	r7, sp, #0
 800ab70:	6078      	str	r0, [r7, #4]
 800ab72:	460b      	mov	r3, r1
 800ab74:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ab7c:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	7a1b      	ldrb	r3, [r3, #8]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d002      	beq.n	800ab8c <MSC_BOT_DataOut+0x22>
 800ab86:	2b01      	cmp	r3, #1
 800ab88:	d004      	beq.n	800ab94 <MSC_BOT_DataOut+0x2a>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 800ab8a:	e015      	b.n	800abb8 <MSC_BOT_DataOut+0x4e>
      MSC_BOT_CBW_Decode(pdev);
 800ab8c:	6878      	ldr	r0, [r7, #4]
 800ab8e:	f000 f817 	bl	800abc0 <MSC_BOT_CBW_Decode>
      break;
 800ab92:	e011      	b.n	800abb8 <MSC_BOT_DataOut+0x4e>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	f203 231f 	addw	r3, r3, #543	; 0x21f
 800aba0:	461a      	mov	r2, r3
 800aba2:	6878      	ldr	r0, [r7, #4]
 800aba4:	f000 f940 	bl	800ae28 <SCSI_ProcessCmd>
 800aba8:	4603      	mov	r3, r0
 800abaa:	2b00      	cmp	r3, #0
 800abac:	da03      	bge.n	800abb6 <MSC_BOT_DataOut+0x4c>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800abae:	2101      	movs	r1, #1
 800abb0:	6878      	ldr	r0, [r7, #4]
 800abb2:	f000 f8b7 	bl	800ad24 <MSC_BOT_SendCSW>
      break;
 800abb6:	bf00      	nop
  }
}
 800abb8:	bf00      	nop
 800abba:	3710      	adds	r7, #16
 800abbc:	46bd      	mov	sp, r7
 800abbe:	bd80      	pop	{r7, pc}

0800abc0 <MSC_BOT_CBW_Decode>:
*         Decode the CBW command and set the BOT state machine accordingly
* @param  pdev: device instance
* @retval None
*/
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 800abc0:	b580      	push	{r7, lr}
 800abc2:	b084      	sub	sp, #16
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800abce:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dTag = hmsc->cbw.dTag;
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 800abe8:	2101      	movs	r1, #1
 800abea:	6878      	ldr	r0, [r7, #4]
 800abec:	f00b f896 	bl	8015d1c <USBD_LL_GetRxDataSize>
 800abf0:	4603      	mov	r3, r0
 800abf2:	2b1f      	cmp	r3, #31
 800abf4:	d114      	bne.n	800ac20 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 800abfc:	4a32      	ldr	r2, [pc, #200]	; (800acc8 <MSC_BOT_CBW_Decode+0x108>)
 800abfe:	4293      	cmp	r3, r2
 800ac00:	d10e      	bne.n	800ac20 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800ac08:	2b01      	cmp	r3, #1
 800ac0a:	d809      	bhi.n	800ac20 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d004      	beq.n	800ac20 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bCBLength > 16U))
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800ac1c:	2b10      	cmp	r3, #16
 800ac1e:	d90e      	bls.n	800ac3e <MSC_BOT_CBW_Decode+0x7e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800ac26:	2320      	movs	r3, #32
 800ac28:	2205      	movs	r2, #5
 800ac2a:	6878      	ldr	r0, [r7, #4]
 800ac2c:	f000 fcc9 	bl	800b5c2 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	2202      	movs	r2, #2
 800ac34:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 800ac36:	6878      	ldr	r0, [r7, #4]
 800ac38:	f000 f8a0 	bl	800ad7c <MSC_BOT_Abort>
 800ac3c:	e041      	b.n	800acc2 <MSC_BOT_CBW_Decode+0x102>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	f203 231f 	addw	r3, r3, #543	; 0x21f
 800ac4a:	461a      	mov	r2, r3
 800ac4c:	6878      	ldr	r0, [r7, #4]
 800ac4e:	f000 f8eb 	bl	800ae28 <SCSI_ProcessCmd>
 800ac52:	4603      	mov	r3, r0
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	da0c      	bge.n	800ac72 <MSC_BOT_CBW_Decode+0xb2>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	7a1b      	ldrb	r3, [r3, #8]
 800ac5c:	2b05      	cmp	r3, #5
 800ac5e:	d104      	bne.n	800ac6a <MSC_BOT_CBW_Decode+0xaa>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800ac60:	2101      	movs	r1, #1
 800ac62:	6878      	ldr	r0, [r7, #4]
 800ac64:	f000 f85e 	bl	800ad24 <MSC_BOT_SendCSW>
 800ac68:	e02b      	b.n	800acc2 <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800ac6a:	6878      	ldr	r0, [r7, #4]
 800ac6c:	f000 f886 	bl	800ad7c <MSC_BOT_Abort>
 800ac70:	e027      	b.n	800acc2 <MSC_BOT_CBW_Decode+0x102>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	7a1b      	ldrb	r3, [r3, #8]
 800ac76:	2b02      	cmp	r3, #2
 800ac78:	d022      	beq.n	800acc0 <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800ac7e:	2b01      	cmp	r3, #1
 800ac80:	d01e      	beq.n	800acc0 <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800ac86:	2b03      	cmp	r3, #3
 800ac88:	d01a      	beq.n	800acc0 <MSC_BOT_CBW_Decode+0x100>
    {
      if (hmsc->bot_data_length > 0U)
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	68db      	ldr	r3, [r3, #12]
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d009      	beq.n	800aca6 <MSC_BOT_CBW_Decode+0xe6>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	f103 0110 	add.w	r1, r3, #16
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	68db      	ldr	r3, [r3, #12]
 800ac9c:	461a      	mov	r2, r3
 800ac9e:	6878      	ldr	r0, [r7, #4]
 800aca0:	f000 f814 	bl	800accc <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 800aca4:	e00d      	b.n	800acc2 <MSC_BOT_CBW_Decode+0x102>
      }
      else if (hmsc->bot_data_length == 0U)
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	68db      	ldr	r3, [r3, #12]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d104      	bne.n	800acb8 <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800acae:	2100      	movs	r1, #0
 800acb0:	6878      	ldr	r0, [r7, #4]
 800acb2:	f000 f837 	bl	800ad24 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 800acb6:	e004      	b.n	800acc2 <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800acb8:	6878      	ldr	r0, [r7, #4]
 800acba:	f000 f85f 	bl	800ad7c <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 800acbe:	e000      	b.n	800acc2 <MSC_BOT_CBW_Decode+0x102>
      }
    }
    else
    {
      return;
 800acc0:	bf00      	nop
    }
  }
}
 800acc2:	3710      	adds	r7, #16
 800acc4:	46bd      	mov	sp, r7
 800acc6:	bd80      	pop	{r7, pc}
 800acc8:	43425355 	.word	0x43425355

0800accc <MSC_BOT_SendData>:
* @param  buf: pointer to data buffer
* @param  len: Data Length
* @retval None
*/
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 800accc:	b580      	push	{r7, lr}
 800acce:	b086      	sub	sp, #24
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	60f8      	str	r0, [r7, #12]
 800acd4:	60b9      	str	r1, [r7, #8]
 800acd6:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800acde:	617b      	str	r3, [r7, #20]

  uint32_t length = MIN(hmsc->cbw.dDataLength, len);
 800ace0:	697b      	ldr	r3, [r7, #20]
 800ace2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800ace6:	687a      	ldr	r2, [r7, #4]
 800ace8:	4293      	cmp	r3, r2
 800acea:	bf28      	it	cs
 800acec:	4613      	movcs	r3, r2
 800acee:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 800acf0:	697b      	ldr	r3, [r7, #20]
 800acf2:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	1ad2      	subs	r2, r2, r3
 800acfa:	697b      	ldr	r3, [r7, #20]
 800acfc:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 800ad00:	697b      	ldr	r3, [r7, #20]
 800ad02:	2200      	movs	r2, #0
 800ad04:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 800ad08:	697b      	ldr	r3, [r7, #20]
 800ad0a:	2204      	movs	r2, #4
 800ad0c:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 800ad0e:	693b      	ldr	r3, [r7, #16]
 800ad10:	68ba      	ldr	r2, [r7, #8]
 800ad12:	2181      	movs	r1, #129	; 0x81
 800ad14:	68f8      	ldr	r0, [r7, #12]
 800ad16:	f00a ffbf 	bl	8015c98 <USBD_LL_Transmit>
}
 800ad1a:	bf00      	nop
 800ad1c:	3718      	adds	r7, #24
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	bd80      	pop	{r7, pc}
	...

0800ad24 <MSC_BOT_SendCSW>:
* @param  pdev: device instance
* @param  status : CSW status
* @retval None
*/
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 800ad24:	b580      	push	{r7, lr}
 800ad26:	b084      	sub	sp, #16
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	6078      	str	r0, [r7, #4]
 800ad2c:	460b      	mov	r3, r1
 800ad2e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ad36:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	4a0f      	ldr	r2, [pc, #60]	; (800ad78 <MSC_BOT_SendCSW+0x54>)
 800ad3c:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.bStatus = CSW_Status;
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	78fa      	ldrb	r2, [r7, #3]
 800ad44:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	2200      	movs	r2, #0
 800ad4c:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)&hmsc->csw,
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	f503 720c 	add.w	r2, r3, #560	; 0x230
 800ad54:	230d      	movs	r3, #13
 800ad56:	2181      	movs	r1, #129	; 0x81
 800ad58:	6878      	ldr	r0, [r7, #4]
 800ad5a:	f00a ff9d 	bl	8015c98 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800ad64:	231f      	movs	r3, #31
 800ad66:	2101      	movs	r1, #1
 800ad68:	6878      	ldr	r0, [r7, #4]
 800ad6a:	f00a ffb6 	bl	8015cda <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 800ad6e:	bf00      	nop
 800ad70:	3710      	adds	r7, #16
 800ad72:	46bd      	mov	sp, r7
 800ad74:	bd80      	pop	{r7, pc}
 800ad76:	bf00      	nop
 800ad78:	53425355 	.word	0x53425355

0800ad7c <MSC_BOT_Abort>:
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 800ad7c:	b580      	push	{r7, lr}
 800ad7e:	b084      	sub	sp, #16
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ad8a:	60fb      	str	r3, [r7, #12]

  if ((hmsc->cbw.bmFlags == 0U) &&
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d10c      	bne.n	800adb0 <MSC_BOT_Abort+0x34>
      (hmsc->cbw.dDataLength != 0U) &&
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d007      	beq.n	800adb0 <MSC_BOT_Abort+0x34>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d103      	bne.n	800adb0 <MSC_BOT_Abort+0x34>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 800ada8:	2101      	movs	r1, #1
 800adaa:	6878      	ldr	r0, [r7, #4]
 800adac:	f00a feeb 	bl	8015b86 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 800adb0:	2181      	movs	r1, #129	; 0x81
 800adb2:	6878      	ldr	r0, [r7, #4]
 800adb4:	f00a fee7 	bl	8015b86 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	7a5b      	ldrb	r3, [r3, #9]
 800adbc:	2b02      	cmp	r3, #2
 800adbe:	d107      	bne.n	800add0 <MSC_BOT_Abort+0x54>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 800adc0:	2181      	movs	r1, #129	; 0x81
 800adc2:	6878      	ldr	r0, [r7, #4]
 800adc4:	f00a fedf 	bl	8015b86 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 800adc8:	2101      	movs	r1, #1
 800adca:	6878      	ldr	r0, [r7, #4]
 800adcc:	f00a fedb 	bl	8015b86 <USBD_LL_StallEP>
  }
}
 800add0:	bf00      	nop
 800add2:	3710      	adds	r7, #16
 800add4:	46bd      	mov	sp, r7
 800add6:	bd80      	pop	{r7, pc}

0800add8 <MSC_BOT_CplClrFeature>:
* @param  epnum: endpoint index
* @retval None
*/

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800add8:	b580      	push	{r7, lr}
 800adda:	b084      	sub	sp, #16
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]
 800ade0:	460b      	mov	r3, r1
 800ade2:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800adea:	60fb      	str	r3, [r7, #12]

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	7a5b      	ldrb	r3, [r3, #9]
 800adf0:	2b02      	cmp	r3, #2
 800adf2:	d108      	bne.n	800ae06 <MSC_BOT_CplClrFeature+0x2e>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 800adf4:	2181      	movs	r1, #129	; 0x81
 800adf6:	6878      	ldr	r0, [r7, #4]
 800adf8:	f00a fec5 	bl	8015b86 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 800adfc:	2101      	movs	r1, #1
 800adfe:	6878      	ldr	r0, [r7, #4]
 800ae00:	f00a fec1 	bl	8015b86 <USBD_LL_StallEP>
 800ae04:	e00d      	b.n	800ae22 <MSC_BOT_CplClrFeature+0x4a>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 800ae06:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	da08      	bge.n	800ae20 <MSC_BOT_CplClrFeature+0x48>
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	7a5b      	ldrb	r3, [r3, #9]
 800ae12:	2b01      	cmp	r3, #1
 800ae14:	d004      	beq.n	800ae20 <MSC_BOT_CplClrFeature+0x48>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800ae16:	2101      	movs	r1, #1
 800ae18:	6878      	ldr	r0, [r7, #4]
 800ae1a:	f7ff ff83 	bl	800ad24 <MSC_BOT_SendCSW>
 800ae1e:	e000      	b.n	800ae22 <MSC_BOT_CplClrFeature+0x4a>
  }
  else
  {
    return;
 800ae20:	bf00      	nop
  }
}
 800ae22:	3710      	adds	r7, #16
 800ae24:	46bd      	mov	sp, r7
 800ae26:	bd80      	pop	{r7, pc}

0800ae28 <SCSI_ProcessCmd>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b086      	sub	sp, #24
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	60f8      	str	r0, [r7, #12]
 800ae30:	460b      	mov	r3, r1
 800ae32:	607a      	str	r2, [r7, #4]
 800ae34:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ae3c:	613b      	str	r3, [r7, #16]

  switch (cmd[0])
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	781b      	ldrb	r3, [r3, #0]
 800ae42:	2b25      	cmp	r3, #37	; 0x25
 800ae44:	d06e      	beq.n	800af24 <SCSI_ProcessCmd+0xfc>
 800ae46:	2b25      	cmp	r3, #37	; 0x25
 800ae48:	dc11      	bgt.n	800ae6e <SCSI_ProcessCmd+0x46>
 800ae4a:	2b1a      	cmp	r3, #26
 800ae4c:	d04f      	beq.n	800aeee <SCSI_ProcessCmd+0xc6>
 800ae4e:	2b1a      	cmp	r3, #26
 800ae50:	dc06      	bgt.n	800ae60 <SCSI_ProcessCmd+0x38>
 800ae52:	2b03      	cmp	r3, #3
 800ae54:	d027      	beq.n	800aea6 <SCSI_ProcessCmd+0x7e>
 800ae56:	2b12      	cmp	r3, #18
 800ae58:	d02e      	beq.n	800aeb8 <SCSI_ProcessCmd+0x90>
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d01a      	beq.n	800ae94 <SCSI_ProcessCmd+0x6c>
 800ae5e:	e0a0      	b.n	800afa2 <SCSI_ProcessCmd+0x17a>
 800ae60:	2b1e      	cmp	r3, #30
 800ae62:	d03b      	beq.n	800aedc <SCSI_ProcessCmd+0xb4>
 800ae64:	2b23      	cmp	r3, #35	; 0x23
 800ae66:	d054      	beq.n	800af12 <SCSI_ProcessCmd+0xea>
 800ae68:	2b1b      	cmp	r3, #27
 800ae6a:	d02e      	beq.n	800aeca <SCSI_ProcessCmd+0xa2>
 800ae6c:	e099      	b.n	800afa2 <SCSI_ProcessCmd+0x17a>
 800ae6e:	2b5a      	cmp	r3, #90	; 0x5a
 800ae70:	d046      	beq.n	800af00 <SCSI_ProcessCmd+0xd8>
 800ae72:	2b5a      	cmp	r3, #90	; 0x5a
 800ae74:	dc07      	bgt.n	800ae86 <SCSI_ProcessCmd+0x5e>
 800ae76:	2b2a      	cmp	r3, #42	; 0x2a
 800ae78:	d078      	beq.n	800af6c <SCSI_ProcessCmd+0x144>
 800ae7a:	2b2f      	cmp	r3, #47	; 0x2f
 800ae7c:	f000 8088 	beq.w	800af90 <SCSI_ProcessCmd+0x168>
 800ae80:	2b28      	cmp	r3, #40	; 0x28
 800ae82:	d061      	beq.n	800af48 <SCSI_ProcessCmd+0x120>
 800ae84:	e08d      	b.n	800afa2 <SCSI_ProcessCmd+0x17a>
 800ae86:	2ba8      	cmp	r3, #168	; 0xa8
 800ae88:	d067      	beq.n	800af5a <SCSI_ProcessCmd+0x132>
 800ae8a:	2baa      	cmp	r3, #170	; 0xaa
 800ae8c:	d077      	beq.n	800af7e <SCSI_ProcessCmd+0x156>
 800ae8e:	2b9e      	cmp	r3, #158	; 0x9e
 800ae90:	d051      	beq.n	800af36 <SCSI_ProcessCmd+0x10e>
 800ae92:	e086      	b.n	800afa2 <SCSI_ProcessCmd+0x17a>
  {
  case SCSI_TEST_UNIT_READY:
    ret = SCSI_TestUnitReady(pdev, lun, cmd);
 800ae94:	7afb      	ldrb	r3, [r7, #11]
 800ae96:	687a      	ldr	r2, [r7, #4]
 800ae98:	4619      	mov	r1, r3
 800ae9a:	68f8      	ldr	r0, [r7, #12]
 800ae9c:	f000 f893 	bl	800afc6 <SCSI_TestUnitReady>
 800aea0:	4603      	mov	r3, r0
 800aea2:	75fb      	strb	r3, [r7, #23]
    break;
 800aea4:	e089      	b.n	800afba <SCSI_ProcessCmd+0x192>

  case SCSI_REQUEST_SENSE:
    ret = SCSI_RequestSense(pdev, lun, cmd);
 800aea6:	7afb      	ldrb	r3, [r7, #11]
 800aea8:	687a      	ldr	r2, [r7, #4]
 800aeaa:	4619      	mov	r1, r3
 800aeac:	68f8      	ldr	r0, [r7, #12]
 800aeae:	f000 fb0f 	bl	800b4d0 <SCSI_RequestSense>
 800aeb2:	4603      	mov	r3, r0
 800aeb4:	75fb      	strb	r3, [r7, #23]
    break;
 800aeb6:	e080      	b.n	800afba <SCSI_ProcessCmd+0x192>

  case SCSI_INQUIRY:
    ret = SCSI_Inquiry(pdev, lun, cmd);
 800aeb8:	7afb      	ldrb	r3, [r7, #11]
 800aeba:	687a      	ldr	r2, [r7, #4]
 800aebc:	4619      	mov	r1, r3
 800aebe:	68f8      	ldr	r0, [r7, #12]
 800aec0:	f000 f8cc 	bl	800b05c <SCSI_Inquiry>
 800aec4:	4603      	mov	r3, r0
 800aec6:	75fb      	strb	r3, [r7, #23]
    break;
 800aec8:	e077      	b.n	800afba <SCSI_ProcessCmd+0x192>

  case SCSI_START_STOP_UNIT:
    ret = SCSI_StartStopUnit(pdev, lun, cmd);
 800aeca:	7afb      	ldrb	r3, [r7, #11]
 800aecc:	687a      	ldr	r2, [r7, #4]
 800aece:	4619      	mov	r1, r3
 800aed0:	68f8      	ldr	r0, [r7, #12]
 800aed2:	f000 fbb9 	bl	800b648 <SCSI_StartStopUnit>
 800aed6:	4603      	mov	r3, r0
 800aed8:	75fb      	strb	r3, [r7, #23]
    break;
 800aeda:	e06e      	b.n	800afba <SCSI_ProcessCmd+0x192>

  case SCSI_ALLOW_MEDIUM_REMOVAL:
    ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 800aedc:	7afb      	ldrb	r3, [r7, #11]
 800aede:	687a      	ldr	r2, [r7, #4]
 800aee0:	4619      	mov	r1, r3
 800aee2:	68f8      	ldr	r0, [r7, #12]
 800aee4:	f000 fbfb 	bl	800b6de <SCSI_AllowPreventRemovable>
 800aee8:	4603      	mov	r3, r0
 800aeea:	75fb      	strb	r3, [r7, #23]
    break;
 800aeec:	e065      	b.n	800afba <SCSI_ProcessCmd+0x192>

  case SCSI_MODE_SENSE6:
    ret = SCSI_ModeSense6(pdev, lun, cmd);
 800aeee:	7afb      	ldrb	r3, [r7, #11]
 800aef0:	687a      	ldr	r2, [r7, #4]
 800aef2:	4619      	mov	r1, r3
 800aef4:	68f8      	ldr	r0, [r7, #12]
 800aef6:	f000 fa9f 	bl	800b438 <SCSI_ModeSense6>
 800aefa:	4603      	mov	r3, r0
 800aefc:	75fb      	strb	r3, [r7, #23]
    break;
 800aefe:	e05c      	b.n	800afba <SCSI_ProcessCmd+0x192>

  case SCSI_MODE_SENSE10:
    ret = SCSI_ModeSense10(pdev, lun, cmd);
 800af00:	7afb      	ldrb	r3, [r7, #11]
 800af02:	687a      	ldr	r2, [r7, #4]
 800af04:	4619      	mov	r1, r3
 800af06:	68f8      	ldr	r0, [r7, #12]
 800af08:	f000 fabc 	bl	800b484 <SCSI_ModeSense10>
 800af0c:	4603      	mov	r3, r0
 800af0e:	75fb      	strb	r3, [r7, #23]
    break;
 800af10:	e053      	b.n	800afba <SCSI_ProcessCmd+0x192>

  case SCSI_READ_FORMAT_CAPACITIES:
    ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 800af12:	7afb      	ldrb	r3, [r7, #11]
 800af14:	687a      	ldr	r2, [r7, #4]
 800af16:	4619      	mov	r1, r3
 800af18:	68f8      	ldr	r0, [r7, #12]
 800af1a:	f000 fa20 	bl	800b35e <SCSI_ReadFormatCapacity>
 800af1e:	4603      	mov	r3, r0
 800af20:	75fb      	strb	r3, [r7, #23]
    break;
 800af22:	e04a      	b.n	800afba <SCSI_ProcessCmd+0x192>

  case SCSI_READ_CAPACITY10:
    ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 800af24:	7afb      	ldrb	r3, [r7, #11]
 800af26:	687a      	ldr	r2, [r7, #4]
 800af28:	4619      	mov	r1, r3
 800af2a:	68f8      	ldr	r0, [r7, #12]
 800af2c:	f000 f904 	bl	800b138 <SCSI_ReadCapacity10>
 800af30:	4603      	mov	r3, r0
 800af32:	75fb      	strb	r3, [r7, #23]
    break;
 800af34:	e041      	b.n	800afba <SCSI_ProcessCmd+0x192>

  case SCSI_READ_CAPACITY16:
    ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 800af36:	7afb      	ldrb	r3, [r7, #11]
 800af38:	687a      	ldr	r2, [r7, #4]
 800af3a:	4619      	mov	r1, r3
 800af3c:	68f8      	ldr	r0, [r7, #12]
 800af3e:	f000 f96a 	bl	800b216 <SCSI_ReadCapacity16>
 800af42:	4603      	mov	r3, r0
 800af44:	75fb      	strb	r3, [r7, #23]
    break;
 800af46:	e038      	b.n	800afba <SCSI_ProcessCmd+0x192>

  case SCSI_READ10:
    ret = SCSI_Read10(pdev, lun, cmd);
 800af48:	7afb      	ldrb	r3, [r7, #11]
 800af4a:	687a      	ldr	r2, [r7, #4]
 800af4c:	4619      	mov	r1, r3
 800af4e:	68f8      	ldr	r0, [r7, #12]
 800af50:	f000 fbe8 	bl	800b724 <SCSI_Read10>
 800af54:	4603      	mov	r3, r0
 800af56:	75fb      	strb	r3, [r7, #23]
    break;
 800af58:	e02f      	b.n	800afba <SCSI_ProcessCmd+0x192>

  case SCSI_READ12:
    ret = SCSI_Read12(pdev, lun, cmd);
 800af5a:	7afb      	ldrb	r3, [r7, #11]
 800af5c:	687a      	ldr	r2, [r7, #4]
 800af5e:	4619      	mov	r1, r3
 800af60:	68f8      	ldr	r0, [r7, #12]
 800af62:	f000 fc79 	bl	800b858 <SCSI_Read12>
 800af66:	4603      	mov	r3, r0
 800af68:	75fb      	strb	r3, [r7, #23]
    break;
 800af6a:	e026      	b.n	800afba <SCSI_ProcessCmd+0x192>

  case SCSI_WRITE10:
    ret = SCSI_Write10(pdev, lun, cmd);
 800af6c:	7afb      	ldrb	r3, [r7, #11]
 800af6e:	687a      	ldr	r2, [r7, #4]
 800af70:	4619      	mov	r1, r3
 800af72:	68f8      	ldr	r0, [r7, #12]
 800af74:	f000 fd15 	bl	800b9a2 <SCSI_Write10>
 800af78:	4603      	mov	r3, r0
 800af7a:	75fb      	strb	r3, [r7, #23]
    break;
 800af7c:	e01d      	b.n	800afba <SCSI_ProcessCmd+0x192>

  case SCSI_WRITE12:
    ret = SCSI_Write12(pdev, lun, cmd);
 800af7e:	7afb      	ldrb	r3, [r7, #11]
 800af80:	687a      	ldr	r2, [r7, #4]
 800af82:	4619      	mov	r1, r3
 800af84:	68f8      	ldr	r0, [r7, #12]
 800af86:	f000 fdcb 	bl	800bb20 <SCSI_Write12>
 800af8a:	4603      	mov	r3, r0
 800af8c:	75fb      	strb	r3, [r7, #23]
    break;
 800af8e:	e014      	b.n	800afba <SCSI_ProcessCmd+0x192>

  case SCSI_VERIFY10:
    ret = SCSI_Verify10(pdev, lun, cmd);
 800af90:	7afb      	ldrb	r3, [r7, #11]
 800af92:	687a      	ldr	r2, [r7, #4]
 800af94:	4619      	mov	r1, r3
 800af96:	68f8      	ldr	r0, [r7, #12]
 800af98:	f000 fe91 	bl	800bcbe <SCSI_Verify10>
 800af9c:	4603      	mov	r3, r0
 800af9e:	75fb      	strb	r3, [r7, #23]
    break;
 800afa0:	e00b      	b.n	800afba <SCSI_ProcessCmd+0x192>

  default:
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 800afa2:	7af9      	ldrb	r1, [r7, #11]
 800afa4:	2320      	movs	r3, #32
 800afa6:	2205      	movs	r2, #5
 800afa8:	68f8      	ldr	r0, [r7, #12]
 800afaa:	f000 fb0a 	bl	800b5c2 <SCSI_SenseCode>
    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800afae:	693b      	ldr	r3, [r7, #16]
 800afb0:	2202      	movs	r2, #2
 800afb2:	725a      	strb	r2, [r3, #9]
    ret = -1;
 800afb4:	23ff      	movs	r3, #255	; 0xff
 800afb6:	75fb      	strb	r3, [r7, #23]
    break;
 800afb8:	bf00      	nop
  }

  return ret;
 800afba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800afbe:	4618      	mov	r0, r3
 800afc0:	3718      	adds	r7, #24
 800afc2:	46bd      	mov	sp, r7
 800afc4:	bd80      	pop	{r7, pc}

0800afc6 <SCSI_TestUnitReady>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800afc6:	b580      	push	{r7, lr}
 800afc8:	b086      	sub	sp, #24
 800afca:	af00      	add	r7, sp, #0
 800afcc:	60f8      	str	r0, [r7, #12]
 800afce:	460b      	mov	r3, r1
 800afd0:	607a      	str	r2, [r7, #4]
 800afd2:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800afda:	617b      	str	r3, [r7, #20]

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 800afdc:	697b      	ldr	r3, [r7, #20]
 800afde:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d00a      	beq.n	800affc <SCSI_TestUnitReady+0x36>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800afe6:	697b      	ldr	r3, [r7, #20]
 800afe8:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800afec:	2320      	movs	r3, #32
 800afee:	2205      	movs	r2, #5
 800aff0:	68f8      	ldr	r0, [r7, #12]
 800aff2:	f000 fae6 	bl	800b5c2 <SCSI_SenseCode>

    return -1;
 800aff6:	f04f 33ff 	mov.w	r3, #4294967295
 800affa:	e02a      	b.n	800b052 <SCSI_TestUnitReady+0x8c>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800affc:	697b      	ldr	r3, [r7, #20]
 800affe:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800b002:	2b02      	cmp	r3, #2
 800b004:	d10b      	bne.n	800b01e <SCSI_TestUnitReady+0x58>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800b006:	7af9      	ldrb	r1, [r7, #11]
 800b008:	233a      	movs	r3, #58	; 0x3a
 800b00a:	2202      	movs	r2, #2
 800b00c:	68f8      	ldr	r0, [r7, #12]
 800b00e:	f000 fad8 	bl	800b5c2 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800b012:	697b      	ldr	r3, [r7, #20]
 800b014:	2205      	movs	r2, #5
 800b016:	721a      	strb	r2, [r3, #8]
    return -1;
 800b018:	f04f 33ff 	mov.w	r3, #4294967295
 800b01c:	e019      	b.n	800b052 <SCSI_TestUnitReady+0x8c>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b024:	689b      	ldr	r3, [r3, #8]
 800b026:	7afa      	ldrb	r2, [r7, #11]
 800b028:	4610      	mov	r0, r2
 800b02a:	4798      	blx	r3
 800b02c:	4603      	mov	r3, r0
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d00b      	beq.n	800b04a <SCSI_TestUnitReady+0x84>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800b032:	7af9      	ldrb	r1, [r7, #11]
 800b034:	233a      	movs	r3, #58	; 0x3a
 800b036:	2202      	movs	r2, #2
 800b038:	68f8      	ldr	r0, [r7, #12]
 800b03a:	f000 fac2 	bl	800b5c2 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800b03e:	697b      	ldr	r3, [r7, #20]
 800b040:	2205      	movs	r2, #5
 800b042:	721a      	strb	r2, [r3, #8]

    return -1;
 800b044:	f04f 33ff 	mov.w	r3, #4294967295
 800b048:	e003      	b.n	800b052 <SCSI_TestUnitReady+0x8c>
  }
  hmsc->bot_data_length = 0U;
 800b04a:	697b      	ldr	r3, [r7, #20]
 800b04c:	2200      	movs	r2, #0
 800b04e:	60da      	str	r2, [r3, #12]

  return 0;
 800b050:	2300      	movs	r3, #0
}
 800b052:	4618      	mov	r0, r3
 800b054:	3718      	adds	r7, #24
 800b056:	46bd      	mov	sp, r7
 800b058:	bd80      	pop	{r7, pc}
	...

0800b05c <SCSI_Inquiry>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800b05c:	b580      	push	{r7, lr}
 800b05e:	b088      	sub	sp, #32
 800b060:	af00      	add	r7, sp, #0
 800b062:	60f8      	str	r0, [r7, #12]
 800b064:	460b      	mov	r3, r1
 800b066:	607a      	str	r2, [r7, #4]
 800b068:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b070:	61bb      	str	r3, [r7, #24]

  if (hmsc->cbw.dDataLength == 0U)
 800b072:	69bb      	ldr	r3, [r7, #24]
 800b074:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d10a      	bne.n	800b092 <SCSI_Inquiry+0x36>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800b07c:	69bb      	ldr	r3, [r7, #24]
 800b07e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800b082:	2320      	movs	r3, #32
 800b084:	2205      	movs	r2, #5
 800b086:	68f8      	ldr	r0, [r7, #12]
 800b088:	f000 fa9b 	bl	800b5c2 <SCSI_SenseCode>
    return -1;
 800b08c:	f04f 33ff 	mov.w	r3, #4294967295
 800b090:	e04a      	b.n	800b128 <SCSI_Inquiry+0xcc>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	3301      	adds	r3, #1
 800b096:	781b      	ldrb	r3, [r3, #0]
 800b098:	f003 0301 	and.w	r3, r3, #1
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d020      	beq.n	800b0e2 <SCSI_Inquiry+0x86>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	3302      	adds	r3, #2
 800b0a4:	781b      	ldrb	r3, [r3, #0]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d105      	bne.n	800b0b6 <SCSI_Inquiry+0x5a>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 800b0aa:	2206      	movs	r2, #6
 800b0ac:	4920      	ldr	r1, [pc, #128]	; (800b130 <SCSI_Inquiry+0xd4>)
 800b0ae:	69b8      	ldr	r0, [r7, #24]
 800b0b0:	f000 ff50 	bl	800bf54 <SCSI_UpdateBotData>
 800b0b4:	e037      	b.n	800b126 <SCSI_Inquiry+0xca>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	3302      	adds	r3, #2
 800b0ba:	781b      	ldrb	r3, [r3, #0]
 800b0bc:	2b80      	cmp	r3, #128	; 0x80
 800b0be:	d105      	bne.n	800b0cc <SCSI_Inquiry+0x70>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 800b0c0:	2208      	movs	r2, #8
 800b0c2:	491c      	ldr	r1, [pc, #112]	; (800b134 <SCSI_Inquiry+0xd8>)
 800b0c4:	69b8      	ldr	r0, [r7, #24]
 800b0c6:	f000 ff45 	bl	800bf54 <SCSI_UpdateBotData>
 800b0ca:	e02c      	b.n	800b126 <SCSI_Inquiry+0xca>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 800b0cc:	69bb      	ldr	r3, [r7, #24]
 800b0ce:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800b0d2:	2324      	movs	r3, #36	; 0x24
 800b0d4:	2205      	movs	r2, #5
 800b0d6:	68f8      	ldr	r0, [r7, #12]
 800b0d8:	f000 fa73 	bl	800b5c2 <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 800b0dc:	f04f 33ff 	mov.w	r3, #4294967295
 800b0e0:	e022      	b.n	800b128 <SCSI_Inquiry+0xcc>
    }
  }
  else
  {
    pPage = (uint8_t *)&((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b0e8:	69d9      	ldr	r1, [r3, #28]
 800b0ea:	7afa      	ldrb	r2, [r7, #11]
 800b0ec:	4613      	mov	r3, r2
 800b0ee:	00db      	lsls	r3, r3, #3
 800b0f0:	4413      	add	r3, r2
 800b0f2:	009b      	lsls	r3, r3, #2
 800b0f4:	440b      	add	r3, r1
 800b0f6:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 800b0f8:	697b      	ldr	r3, [r7, #20]
 800b0fa:	3304      	adds	r3, #4
 800b0fc:	781b      	ldrb	r3, [r3, #0]
 800b0fe:	b29b      	uxth	r3, r3
 800b100:	3305      	adds	r3, #5
 800b102:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	3304      	adds	r3, #4
 800b108:	781b      	ldrb	r3, [r3, #0]
 800b10a:	b29b      	uxth	r3, r3
 800b10c:	8bfa      	ldrh	r2, [r7, #30]
 800b10e:	429a      	cmp	r2, r3
 800b110:	d303      	bcc.n	800b11a <SCSI_Inquiry+0xbe>
    {
      len = params[4];
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	3304      	adds	r3, #4
 800b116:	781b      	ldrb	r3, [r3, #0]
 800b118:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 800b11a:	8bfb      	ldrh	r3, [r7, #30]
 800b11c:	461a      	mov	r2, r3
 800b11e:	6979      	ldr	r1, [r7, #20]
 800b120:	69b8      	ldr	r0, [r7, #24]
 800b122:	f000 ff17 	bl	800bf54 <SCSI_UpdateBotData>
  }

  return 0;
 800b126:	2300      	movs	r3, #0
}
 800b128:	4618      	mov	r0, r3
 800b12a:	3720      	adds	r7, #32
 800b12c:	46bd      	mov	sp, r7
 800b12e:	bd80      	pop	{r7, pc}
 800b130:	200000c0 	.word	0x200000c0
 800b134:	200000c8 	.word	0x200000c8

0800b138 <SCSI_ReadCapacity10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800b138:	b580      	push	{r7, lr}
 800b13a:	b086      	sub	sp, #24
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	60f8      	str	r0, [r7, #12]
 800b140:	460b      	mov	r3, r1
 800b142:	607a      	str	r2, [r7, #4]
 800b144:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b14c:	617b      	str	r3, [r7, #20]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b154:	685b      	ldr	r3, [r3, #4]
 800b156:	697a      	ldr	r2, [r7, #20]
 800b158:	f502 711a 	add.w	r1, r2, #616	; 0x268
 800b15c:	697a      	ldr	r2, [r7, #20]
 800b15e:	f502 7219 	add.w	r2, r2, #612	; 0x264
 800b162:	7af8      	ldrb	r0, [r7, #11]
 800b164:	4798      	blx	r3
 800b166:	4603      	mov	r3, r0
 800b168:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800b16a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d104      	bne.n	800b17c <SCSI_ReadCapacity10+0x44>
 800b172:	697b      	ldr	r3, [r7, #20]
 800b174:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800b178:	2b02      	cmp	r3, #2
 800b17a:	d108      	bne.n	800b18e <SCSI_ReadCapacity10+0x56>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800b17c:	7af9      	ldrb	r1, [r7, #11]
 800b17e:	233a      	movs	r3, #58	; 0x3a
 800b180:	2202      	movs	r2, #2
 800b182:	68f8      	ldr	r0, [r7, #12]
 800b184:	f000 fa1d 	bl	800b5c2 <SCSI_SenseCode>
    return -1;
 800b188:	f04f 33ff 	mov.w	r3, #4294967295
 800b18c:	e03f      	b.n	800b20e <SCSI_ReadCapacity10+0xd6>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800b18e:	697b      	ldr	r3, [r7, #20]
 800b190:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800b194:	3b01      	subs	r3, #1
 800b196:	0e1b      	lsrs	r3, r3, #24
 800b198:	b2da      	uxtb	r2, r3
 800b19a:	697b      	ldr	r3, [r7, #20]
 800b19c:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800b19e:	697b      	ldr	r3, [r7, #20]
 800b1a0:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800b1a4:	3b01      	subs	r3, #1
 800b1a6:	0c1b      	lsrs	r3, r3, #16
 800b1a8:	b2da      	uxtb	r2, r3
 800b1aa:	697b      	ldr	r3, [r7, #20]
 800b1ac:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800b1ae:	697b      	ldr	r3, [r7, #20]
 800b1b0:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800b1b4:	3b01      	subs	r3, #1
 800b1b6:	0a1b      	lsrs	r3, r3, #8
 800b1b8:	b2da      	uxtb	r2, r3
 800b1ba:	697b      	ldr	r3, [r7, #20]
 800b1bc:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800b1be:	697b      	ldr	r3, [r7, #20]
 800b1c0:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800b1c4:	b2db      	uxtb	r3, r3
 800b1c6:	3b01      	subs	r3, #1
 800b1c8:	b2da      	uxtb	r2, r3
 800b1ca:	697b      	ldr	r3, [r7, #20]
 800b1cc:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800b1ce:	697b      	ldr	r3, [r7, #20]
 800b1d0:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800b1d4:	161b      	asrs	r3, r3, #24
 800b1d6:	b2da      	uxtb	r2, r3
 800b1d8:	697b      	ldr	r3, [r7, #20]
 800b1da:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800b1dc:	697b      	ldr	r3, [r7, #20]
 800b1de:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800b1e2:	141b      	asrs	r3, r3, #16
 800b1e4:	b2da      	uxtb	r2, r3
 800b1e6:	697b      	ldr	r3, [r7, #20]
 800b1e8:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800b1ea:	697b      	ldr	r3, [r7, #20]
 800b1ec:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800b1f0:	0a1b      	lsrs	r3, r3, #8
 800b1f2:	b29b      	uxth	r3, r3
 800b1f4:	b2da      	uxtb	r2, r3
 800b1f6:	697b      	ldr	r3, [r7, #20]
 800b1f8:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 800b1fa:	697b      	ldr	r3, [r7, #20]
 800b1fc:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800b200:	b2da      	uxtb	r2, r3
 800b202:	697b      	ldr	r3, [r7, #20]
 800b204:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 800b206:	697b      	ldr	r3, [r7, #20]
 800b208:	2208      	movs	r2, #8
 800b20a:	60da      	str	r2, [r3, #12]

  return 0;
 800b20c:	2300      	movs	r3, #0

}
 800b20e:	4618      	mov	r0, r3
 800b210:	3718      	adds	r7, #24
 800b212:	46bd      	mov	sp, r7
 800b214:	bd80      	pop	{r7, pc}

0800b216 <SCSI_ReadCapacity16>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800b216:	b580      	push	{r7, lr}
 800b218:	b088      	sub	sp, #32
 800b21a:	af00      	add	r7, sp, #0
 800b21c:	60f8      	str	r0, [r7, #12]
 800b21e:	460b      	mov	r3, r1
 800b220:	607a      	str	r2, [r7, #4]
 800b222:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b22a:	61bb      	str	r3, [r7, #24]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b232:	685b      	ldr	r3, [r3, #4]
 800b234:	69ba      	ldr	r2, [r7, #24]
 800b236:	f502 711a 	add.w	r1, r2, #616	; 0x268
 800b23a:	69ba      	ldr	r2, [r7, #24]
 800b23c:	f502 7219 	add.w	r2, r2, #612	; 0x264
 800b240:	7af8      	ldrb	r0, [r7, #11]
 800b242:	4798      	blx	r3
 800b244:	4603      	mov	r3, r0
 800b246:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800b248:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d104      	bne.n	800b25a <SCSI_ReadCapacity16+0x44>
 800b250:	69bb      	ldr	r3, [r7, #24]
 800b252:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800b256:	2b02      	cmp	r3, #2
 800b258:	d108      	bne.n	800b26c <SCSI_ReadCapacity16+0x56>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800b25a:	7af9      	ldrb	r1, [r7, #11]
 800b25c:	233a      	movs	r3, #58	; 0x3a
 800b25e:	2202      	movs	r2, #2
 800b260:	68f8      	ldr	r0, [r7, #12]
 800b262:	f000 f9ae 	bl	800b5c2 <SCSI_SenseCode>
    return -1;
 800b266:	f04f 33ff 	mov.w	r3, #4294967295
 800b26a:	e074      	b.n	800b356 <SCSI_ReadCapacity16+0x140>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	330a      	adds	r3, #10
 800b270:	781b      	ldrb	r3, [r3, #0]
 800b272:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	330b      	adds	r3, #11
 800b278:	781b      	ldrb	r3, [r3, #0]
 800b27a:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800b27c:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	330c      	adds	r3, #12
 800b282:	781b      	ldrb	r3, [r3, #0]
 800b284:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800b286:	4313      	orrs	r3, r2
                           (uint32_t)params[13];
 800b288:	687a      	ldr	r2, [r7, #4]
 800b28a:	320d      	adds	r2, #13
 800b28c:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800b28e:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800b290:	69bb      	ldr	r3, [r7, #24]
 800b292:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800b294:	2300      	movs	r3, #0
 800b296:	77fb      	strb	r3, [r7, #31]
 800b298:	e007      	b.n	800b2aa <SCSI_ReadCapacity16+0x94>
  {
    hmsc->bot_data[idx] = 0U;
 800b29a:	7ffb      	ldrb	r3, [r7, #31]
 800b29c:	69ba      	ldr	r2, [r7, #24]
 800b29e:	4413      	add	r3, r2
 800b2a0:	2200      	movs	r2, #0
 800b2a2:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800b2a4:	7ffb      	ldrb	r3, [r7, #31]
 800b2a6:	3301      	adds	r3, #1
 800b2a8:	77fb      	strb	r3, [r7, #31]
 800b2aa:	7ffa      	ldrb	r2, [r7, #31]
 800b2ac:	69bb      	ldr	r3, [r7, #24]
 800b2ae:	68db      	ldr	r3, [r3, #12]
 800b2b0:	429a      	cmp	r2, r3
 800b2b2:	d3f2      	bcc.n	800b29a <SCSI_ReadCapacity16+0x84>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800b2b4:	69bb      	ldr	r3, [r7, #24]
 800b2b6:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800b2ba:	3b01      	subs	r3, #1
 800b2bc:	0e1b      	lsrs	r3, r3, #24
 800b2be:	b2da      	uxtb	r2, r3
 800b2c0:	69bb      	ldr	r3, [r7, #24]
 800b2c2:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800b2c4:	69bb      	ldr	r3, [r7, #24]
 800b2c6:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800b2ca:	3b01      	subs	r3, #1
 800b2cc:	0c1b      	lsrs	r3, r3, #16
 800b2ce:	b2da      	uxtb	r2, r3
 800b2d0:	69bb      	ldr	r3, [r7, #24]
 800b2d2:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800b2d4:	69bb      	ldr	r3, [r7, #24]
 800b2d6:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800b2da:	3b01      	subs	r3, #1
 800b2dc:	0a1b      	lsrs	r3, r3, #8
 800b2de:	b2da      	uxtb	r2, r3
 800b2e0:	69bb      	ldr	r3, [r7, #24]
 800b2e2:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800b2e4:	69bb      	ldr	r3, [r7, #24]
 800b2e6:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800b2ea:	b2db      	uxtb	r3, r3
 800b2ec:	3b01      	subs	r3, #1
 800b2ee:	b2da      	uxtb	r2, r3
 800b2f0:	69bb      	ldr	r3, [r7, #24]
 800b2f2:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800b2f4:	69bb      	ldr	r3, [r7, #24]
 800b2f6:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800b2fa:	161b      	asrs	r3, r3, #24
 800b2fc:	b2da      	uxtb	r2, r3
 800b2fe:	69bb      	ldr	r3, [r7, #24]
 800b300:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800b302:	69bb      	ldr	r3, [r7, #24]
 800b304:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800b308:	141b      	asrs	r3, r3, #16
 800b30a:	b2da      	uxtb	r2, r3
 800b30c:	69bb      	ldr	r3, [r7, #24]
 800b30e:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800b310:	69bb      	ldr	r3, [r7, #24]
 800b312:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800b316:	0a1b      	lsrs	r3, r3, #8
 800b318:	b29b      	uxth	r3, r3
 800b31a:	b2da      	uxtb	r2, r3
 800b31c:	69bb      	ldr	r3, [r7, #24]
 800b31e:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 800b320:	69bb      	ldr	r3, [r7, #24]
 800b322:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800b326:	b2da      	uxtb	r2, r3
 800b328:	69bb      	ldr	r3, [r7, #24]
 800b32a:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	330a      	adds	r3, #10
 800b330:	781b      	ldrb	r3, [r3, #0]
 800b332:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	330b      	adds	r3, #11
 800b338:	781b      	ldrb	r3, [r3, #0]
 800b33a:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800b33c:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	330c      	adds	r3, #12
 800b342:	781b      	ldrb	r3, [r3, #0]
 800b344:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800b346:	4313      	orrs	r3, r2
                           (uint32_t)params[13];
 800b348:	687a      	ldr	r2, [r7, #4]
 800b34a:	320d      	adds	r2, #13
 800b34c:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800b34e:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800b350:	69bb      	ldr	r3, [r7, #24]
 800b352:	60da      	str	r2, [r3, #12]

  return 0;
 800b354:	2300      	movs	r3, #0
}
 800b356:	4618      	mov	r0, r3
 800b358:	3720      	adds	r7, #32
 800b35a:	46bd      	mov	sp, r7
 800b35c:	bd80      	pop	{r7, pc}

0800b35e <SCSI_ReadFormatCapacity>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800b35e:	b580      	push	{r7, lr}
 800b360:	b088      	sub	sp, #32
 800b362:	af00      	add	r7, sp, #0
 800b364:	60f8      	str	r0, [r7, #12]
 800b366:	460b      	mov	r3, r1
 800b368:	607a      	str	r2, [r7, #4]
 800b36a:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b372:	61bb      	str	r3, [r7, #24]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size);
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b37a:	685b      	ldr	r3, [r3, #4]
 800b37c:	f107 0214 	add.w	r2, r7, #20
 800b380:	f107 0110 	add.w	r1, r7, #16
 800b384:	7af8      	ldrb	r0, [r7, #11]
 800b386:	4798      	blx	r3
 800b388:	4603      	mov	r3, r0
 800b38a:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800b38c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b390:	2b00      	cmp	r3, #0
 800b392:	d104      	bne.n	800b39e <SCSI_ReadFormatCapacity+0x40>
 800b394:	69bb      	ldr	r3, [r7, #24]
 800b396:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800b39a:	2b02      	cmp	r3, #2
 800b39c:	d108      	bne.n	800b3b0 <SCSI_ReadFormatCapacity+0x52>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800b39e:	7af9      	ldrb	r1, [r7, #11]
 800b3a0:	233a      	movs	r3, #58	; 0x3a
 800b3a2:	2202      	movs	r2, #2
 800b3a4:	68f8      	ldr	r0, [r7, #12]
 800b3a6:	f000 f90c 	bl	800b5c2 <SCSI_SenseCode>
    return -1;
 800b3aa:	f04f 33ff 	mov.w	r3, #4294967295
 800b3ae:	e03e      	b.n	800b42e <SCSI_ReadFormatCapacity+0xd0>
  }

  for (i = 0U; i < 12U ; i++)
 800b3b0:	2300      	movs	r3, #0
 800b3b2:	83fb      	strh	r3, [r7, #30]
 800b3b4:	e007      	b.n	800b3c6 <SCSI_ReadFormatCapacity+0x68>
  {
    hmsc->bot_data[i] = 0U;
 800b3b6:	8bfb      	ldrh	r3, [r7, #30]
 800b3b8:	69ba      	ldr	r2, [r7, #24]
 800b3ba:	4413      	add	r3, r2
 800b3bc:	2200      	movs	r2, #0
 800b3be:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 800b3c0:	8bfb      	ldrh	r3, [r7, #30]
 800b3c2:	3301      	adds	r3, #1
 800b3c4:	83fb      	strh	r3, [r7, #30]
 800b3c6:	8bfb      	ldrh	r3, [r7, #30]
 800b3c8:	2b0b      	cmp	r3, #11
 800b3ca:	d9f4      	bls.n	800b3b6 <SCSI_ReadFormatCapacity+0x58>
  }

  hmsc->bot_data[3] = 0x08U;
 800b3cc:	69bb      	ldr	r3, [r7, #24]
 800b3ce:	2208      	movs	r2, #8
 800b3d0:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 800b3d2:	693b      	ldr	r3, [r7, #16]
 800b3d4:	3b01      	subs	r3, #1
 800b3d6:	0e1b      	lsrs	r3, r3, #24
 800b3d8:	b2da      	uxtb	r2, r3
 800b3da:	69bb      	ldr	r3, [r7, #24]
 800b3dc:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 800b3de:	693b      	ldr	r3, [r7, #16]
 800b3e0:	3b01      	subs	r3, #1
 800b3e2:	0c1b      	lsrs	r3, r3, #16
 800b3e4:	b2da      	uxtb	r2, r3
 800b3e6:	69bb      	ldr	r3, [r7, #24]
 800b3e8:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 800b3ea:	693b      	ldr	r3, [r7, #16]
 800b3ec:	3b01      	subs	r3, #1
 800b3ee:	0a1b      	lsrs	r3, r3, #8
 800b3f0:	b2da      	uxtb	r2, r3
 800b3f2:	69bb      	ldr	r3, [r7, #24]
 800b3f4:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 800b3f6:	693b      	ldr	r3, [r7, #16]
 800b3f8:	b2db      	uxtb	r3, r3
 800b3fa:	3b01      	subs	r3, #1
 800b3fc:	b2da      	uxtb	r2, r3
 800b3fe:	69bb      	ldr	r3, [r7, #24]
 800b400:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 800b402:	69bb      	ldr	r3, [r7, #24]
 800b404:	2202      	movs	r2, #2
 800b406:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 800b408:	8abb      	ldrh	r3, [r7, #20]
 800b40a:	141b      	asrs	r3, r3, #16
 800b40c:	b2da      	uxtb	r2, r3
 800b40e:	69bb      	ldr	r3, [r7, #24]
 800b410:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 800b412:	8abb      	ldrh	r3, [r7, #20]
 800b414:	0a1b      	lsrs	r3, r3, #8
 800b416:	b29b      	uxth	r3, r3
 800b418:	b2da      	uxtb	r2, r3
 800b41a:	69bb      	ldr	r3, [r7, #24]
 800b41c:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 800b41e:	8abb      	ldrh	r3, [r7, #20]
 800b420:	b2da      	uxtb	r2, r3
 800b422:	69bb      	ldr	r3, [r7, #24]
 800b424:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 800b426:	69bb      	ldr	r3, [r7, #24]
 800b428:	220c      	movs	r2, #12
 800b42a:	60da      	str	r2, [r3, #12]

  return 0;
 800b42c:	2300      	movs	r3, #0
}
 800b42e:	4618      	mov	r0, r3
 800b430:	3720      	adds	r7, #32
 800b432:	46bd      	mov	sp, r7
 800b434:	bd80      	pop	{r7, pc}
	...

0800b438 <SCSI_ModeSense6>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800b438:	b580      	push	{r7, lr}
 800b43a:	b086      	sub	sp, #24
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	60f8      	str	r0, [r7, #12]
 800b440:	460b      	mov	r3, r1
 800b442:	607a      	str	r2, [r7, #4]
 800b444:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b44c:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 800b44e:	2317      	movs	r3, #23
 800b450:	82fb      	strh	r3, [r7, #22]

  if (params[4] <= len)
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	3304      	adds	r3, #4
 800b456:	781b      	ldrb	r3, [r3, #0]
 800b458:	b29b      	uxth	r3, r3
 800b45a:	8afa      	ldrh	r2, [r7, #22]
 800b45c:	429a      	cmp	r2, r3
 800b45e:	d303      	bcc.n	800b468 <SCSI_ModeSense6+0x30>
  {
    len = params[4];
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	3304      	adds	r3, #4
 800b464:	781b      	ldrb	r3, [r3, #0]
 800b466:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 800b468:	8afb      	ldrh	r3, [r7, #22]
 800b46a:	461a      	mov	r2, r3
 800b46c:	4904      	ldr	r1, [pc, #16]	; (800b480 <SCSI_ModeSense6+0x48>)
 800b46e:	6938      	ldr	r0, [r7, #16]
 800b470:	f000 fd70 	bl	800bf54 <SCSI_UpdateBotData>

  return 0;
 800b474:	2300      	movs	r3, #0
}
 800b476:	4618      	mov	r0, r3
 800b478:	3718      	adds	r7, #24
 800b47a:	46bd      	mov	sp, r7
 800b47c:	bd80      	pop	{r7, pc}
 800b47e:	bf00      	nop
 800b480:	200000d0 	.word	0x200000d0

0800b484 <SCSI_ModeSense10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800b484:	b580      	push	{r7, lr}
 800b486:	b086      	sub	sp, #24
 800b488:	af00      	add	r7, sp, #0
 800b48a:	60f8      	str	r0, [r7, #12]
 800b48c:	460b      	mov	r3, r1
 800b48e:	607a      	str	r2, [r7, #4]
 800b490:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b498:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 800b49a:	231b      	movs	r3, #27
 800b49c:	82fb      	strh	r3, [r7, #22]

  if (params[8] <= len)
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	3308      	adds	r3, #8
 800b4a2:	781b      	ldrb	r3, [r3, #0]
 800b4a4:	b29b      	uxth	r3, r3
 800b4a6:	8afa      	ldrh	r2, [r7, #22]
 800b4a8:	429a      	cmp	r2, r3
 800b4aa:	d303      	bcc.n	800b4b4 <SCSI_ModeSense10+0x30>
  {
    len = params[8];
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	3308      	adds	r3, #8
 800b4b0:	781b      	ldrb	r3, [r3, #0]
 800b4b2:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 800b4b4:	8afb      	ldrh	r3, [r7, #22]
 800b4b6:	461a      	mov	r2, r3
 800b4b8:	4904      	ldr	r1, [pc, #16]	; (800b4cc <SCSI_ModeSense10+0x48>)
 800b4ba:	6938      	ldr	r0, [r7, #16]
 800b4bc:	f000 fd4a 	bl	800bf54 <SCSI_UpdateBotData>

  return 0;
 800b4c0:	2300      	movs	r3, #0
}
 800b4c2:	4618      	mov	r0, r3
 800b4c4:	3718      	adds	r7, #24
 800b4c6:	46bd      	mov	sp, r7
 800b4c8:	bd80      	pop	{r7, pc}
 800b4ca:	bf00      	nop
 800b4cc:	200000e8 	.word	0x200000e8

0800b4d0 <SCSI_RequestSense>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800b4d0:	b580      	push	{r7, lr}
 800b4d2:	b086      	sub	sp, #24
 800b4d4:	af00      	add	r7, sp, #0
 800b4d6:	60f8      	str	r0, [r7, #12]
 800b4d8:	460b      	mov	r3, r1
 800b4da:	607a      	str	r2, [r7, #4]
 800b4dc:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b4e4:	613b      	str	r3, [r7, #16]

  if (hmsc->cbw.dDataLength == 0U)
 800b4e6:	693b      	ldr	r3, [r7, #16]
 800b4e8:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d10a      	bne.n	800b506 <SCSI_RequestSense+0x36>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800b4f0:	693b      	ldr	r3, [r7, #16]
 800b4f2:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800b4f6:	2320      	movs	r3, #32
 800b4f8:	2205      	movs	r2, #5
 800b4fa:	68f8      	ldr	r0, [r7, #12]
 800b4fc:	f000 f861 	bl	800b5c2 <SCSI_SenseCode>
    return -1;
 800b500:	f04f 33ff 	mov.w	r3, #4294967295
 800b504:	e059      	b.n	800b5ba <SCSI_RequestSense+0xea>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800b506:	2300      	movs	r3, #0
 800b508:	75fb      	strb	r3, [r7, #23]
 800b50a:	e007      	b.n	800b51c <SCSI_RequestSense+0x4c>
  {
    hmsc->bot_data[i] = 0U;
 800b50c:	7dfb      	ldrb	r3, [r7, #23]
 800b50e:	693a      	ldr	r2, [r7, #16]
 800b510:	4413      	add	r3, r2
 800b512:	2200      	movs	r2, #0
 800b514:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800b516:	7dfb      	ldrb	r3, [r7, #23]
 800b518:	3301      	adds	r3, #1
 800b51a:	75fb      	strb	r3, [r7, #23]
 800b51c:	7dfb      	ldrb	r3, [r7, #23]
 800b51e:	2b11      	cmp	r3, #17
 800b520:	d9f4      	bls.n	800b50c <SCSI_RequestSense+0x3c>
  }

  hmsc->bot_data[0] = 0x70U;
 800b522:	693b      	ldr	r3, [r7, #16]
 800b524:	2270      	movs	r2, #112	; 0x70
 800b526:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 800b528:	693b      	ldr	r3, [r7, #16]
 800b52a:	220c      	movs	r2, #12
 800b52c:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 800b52e:	693b      	ldr	r3, [r7, #16]
 800b530:	f893 2260 	ldrb.w	r2, [r3, #608]	; 0x260
 800b534:	693b      	ldr	r3, [r7, #16]
 800b536:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800b53a:	429a      	cmp	r2, r3
 800b53c:	d02e      	beq.n	800b59c <SCSI_RequestSense+0xcc>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 800b53e:	693b      	ldr	r3, [r7, #16]
 800b540:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800b544:	461a      	mov	r2, r3
 800b546:	693b      	ldr	r3, [r7, #16]
 800b548:	3248      	adds	r2, #72	; 0x48
 800b54a:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 800b54e:	693b      	ldr	r3, [r7, #16]
 800b550:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 800b552:	693b      	ldr	r3, [r7, #16]
 800b554:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800b558:	693a      	ldr	r2, [r7, #16]
 800b55a:	3348      	adds	r3, #72	; 0x48
 800b55c:	00db      	lsls	r3, r3, #3
 800b55e:	4413      	add	r3, r2
 800b560:	791a      	ldrb	r2, [r3, #4]
 800b562:	693b      	ldr	r3, [r7, #16]
 800b564:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 800b566:	693b      	ldr	r3, [r7, #16]
 800b568:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800b56c:	693a      	ldr	r2, [r7, #16]
 800b56e:	3348      	adds	r3, #72	; 0x48
 800b570:	00db      	lsls	r3, r3, #3
 800b572:	4413      	add	r3, r2
 800b574:	795a      	ldrb	r2, [r3, #5]
 800b576:	693b      	ldr	r3, [r7, #16]
 800b578:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 800b57a:	693b      	ldr	r3, [r7, #16]
 800b57c:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800b580:	3301      	adds	r3, #1
 800b582:	b2da      	uxtb	r2, r3
 800b584:	693b      	ldr	r3, [r7, #16]
 800b586:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 800b58a:	693b      	ldr	r3, [r7, #16]
 800b58c:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800b590:	2b04      	cmp	r3, #4
 800b592:	d103      	bne.n	800b59c <SCSI_RequestSense+0xcc>
    {
      hmsc->scsi_sense_head = 0U;
 800b594:	693b      	ldr	r3, [r7, #16]
 800b596:	2200      	movs	r2, #0
 800b598:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 800b59c:	693b      	ldr	r3, [r7, #16]
 800b59e:	2212      	movs	r2, #18
 800b5a0:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	3304      	adds	r3, #4
 800b5a6:	781b      	ldrb	r3, [r3, #0]
 800b5a8:	2b12      	cmp	r3, #18
 800b5aa:	d805      	bhi.n	800b5b8 <SCSI_RequestSense+0xe8>
  {
    hmsc->bot_data_length = params[4];
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	3304      	adds	r3, #4
 800b5b0:	781b      	ldrb	r3, [r3, #0]
 800b5b2:	461a      	mov	r2, r3
 800b5b4:	693b      	ldr	r3, [r7, #16]
 800b5b6:	60da      	str	r2, [r3, #12]
  }

  return 0;
 800b5b8:	2300      	movs	r3, #0
}
 800b5ba:	4618      	mov	r0, r3
 800b5bc:	3718      	adds	r7, #24
 800b5be:	46bd      	mov	sp, r7
 800b5c0:	bd80      	pop	{r7, pc}

0800b5c2 <SCSI_SenseCode>:
* @param  ASC: Additional Sense Code
* @retval none

*/
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 800b5c2:	b480      	push	{r7}
 800b5c4:	b085      	sub	sp, #20
 800b5c6:	af00      	add	r7, sp, #0
 800b5c8:	6078      	str	r0, [r7, #4]
 800b5ca:	4608      	mov	r0, r1
 800b5cc:	4611      	mov	r1, r2
 800b5ce:	461a      	mov	r2, r3
 800b5d0:	4603      	mov	r3, r0
 800b5d2:	70fb      	strb	r3, [r7, #3]
 800b5d4:	460b      	mov	r3, r1
 800b5d6:	70bb      	strb	r3, [r7, #2]
 800b5d8:	4613      	mov	r3, r2
 800b5da:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b5e2:	60fb      	str	r3, [r7, #12]

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800b5ea:	461a      	mov	r2, r3
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	3248      	adds	r2, #72	; 0x48
 800b5f0:	78b9      	ldrb	r1, [r7, #2]
 800b5f2:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800b5fc:	68fa      	ldr	r2, [r7, #12]
 800b5fe:	3348      	adds	r3, #72	; 0x48
 800b600:	00db      	lsls	r3, r3, #3
 800b602:	4413      	add	r3, r2
 800b604:	787a      	ldrb	r2, [r7, #1]
 800b606:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800b60e:	68fa      	ldr	r2, [r7, #12]
 800b610:	3348      	adds	r3, #72	; 0x48
 800b612:	00db      	lsls	r3, r3, #3
 800b614:	4413      	add	r3, r2
 800b616:	2200      	movs	r2, #0
 800b618:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800b620:	3301      	adds	r3, #1
 800b622:	b2da      	uxtb	r2, r3
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800b630:	2b04      	cmp	r3, #4
 800b632:	d103      	bne.n	800b63c <SCSI_SenseCode+0x7a>
  {
    hmsc->scsi_sense_tail = 0U;
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	2200      	movs	r2, #0
 800b638:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  }
}
 800b63c:	bf00      	nop
 800b63e:	3714      	adds	r7, #20
 800b640:	46bd      	mov	sp, r7
 800b642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b646:	4770      	bx	lr

0800b648 <SCSI_StartStopUnit>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800b648:	b580      	push	{r7, lr}
 800b64a:	b086      	sub	sp, #24
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	60f8      	str	r0, [r7, #12]
 800b650:	460b      	mov	r3, r1
 800b652:	607a      	str	r2, [r7, #4]
 800b654:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b65c:	617b      	str	r3, [r7, #20]

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 800b65e:	697b      	ldr	r3, [r7, #20]
 800b660:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800b664:	2b01      	cmp	r3, #1
 800b666:	d10f      	bne.n	800b688 <SCSI_StartStopUnit+0x40>
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	3304      	adds	r3, #4
 800b66c:	781b      	ldrb	r3, [r3, #0]
 800b66e:	f003 0303 	and.w	r3, r3, #3
 800b672:	2b02      	cmp	r3, #2
 800b674:	d108      	bne.n	800b688 <SCSI_StartStopUnit+0x40>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800b676:	7af9      	ldrb	r1, [r7, #11]
 800b678:	2324      	movs	r3, #36	; 0x24
 800b67a:	2205      	movs	r2, #5
 800b67c:	68f8      	ldr	r0, [r7, #12]
 800b67e:	f7ff ffa0 	bl	800b5c2 <SCSI_SenseCode>

    return -1;
 800b682:	f04f 33ff 	mov.w	r3, #4294967295
 800b686:	e026      	b.n	800b6d6 <SCSI_StartStopUnit+0x8e>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	3304      	adds	r3, #4
 800b68c:	781b      	ldrb	r3, [r3, #0]
 800b68e:	f003 0303 	and.w	r3, r3, #3
 800b692:	2b01      	cmp	r3, #1
 800b694:	d104      	bne.n	800b6a0 <SCSI_StartStopUnit+0x58>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800b696:	697b      	ldr	r3, [r7, #20]
 800b698:	2200      	movs	r2, #0
 800b69a:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 800b69e:	e016      	b.n	800b6ce <SCSI_StartStopUnit+0x86>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	3304      	adds	r3, #4
 800b6a4:	781b      	ldrb	r3, [r3, #0]
 800b6a6:	f003 0303 	and.w	r3, r3, #3
 800b6aa:	2b02      	cmp	r3, #2
 800b6ac:	d104      	bne.n	800b6b8 <SCSI_StartStopUnit+0x70>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 800b6ae:	697b      	ldr	r3, [r7, #20]
 800b6b0:	2202      	movs	r2, #2
 800b6b2:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 800b6b6:	e00a      	b.n	800b6ce <SCSI_StartStopUnit+0x86>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	3304      	adds	r3, #4
 800b6bc:	781b      	ldrb	r3, [r3, #0]
 800b6be:	f003 0303 	and.w	r3, r3, #3
 800b6c2:	2b03      	cmp	r3, #3
 800b6c4:	d103      	bne.n	800b6ce <SCSI_StartStopUnit+0x86>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800b6c6:	697b      	ldr	r3, [r7, #20]
 800b6c8:	2200      	movs	r2, #0
 800b6ca:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 800b6ce:	697b      	ldr	r3, [r7, #20]
 800b6d0:	2200      	movs	r2, #0
 800b6d2:	60da      	str	r2, [r3, #12]

  return 0;
 800b6d4:	2300      	movs	r3, #0
}
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	3718      	adds	r7, #24
 800b6da:	46bd      	mov	sp, r7
 800b6dc:	bd80      	pop	{r7, pc}

0800b6de <SCSI_AllowPreventRemovable>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800b6de:	b480      	push	{r7}
 800b6e0:	b087      	sub	sp, #28
 800b6e2:	af00      	add	r7, sp, #0
 800b6e4:	60f8      	str	r0, [r7, #12]
 800b6e6:	460b      	mov	r3, r1
 800b6e8:	607a      	str	r2, [r7, #4]
 800b6ea:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b6f2:	617b      	str	r3, [r7, #20]

  if (params[4] == 0U)
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	3304      	adds	r3, #4
 800b6f8:	781b      	ldrb	r3, [r3, #0]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d104      	bne.n	800b708 <SCSI_AllowPreventRemovable+0x2a>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800b6fe:	697b      	ldr	r3, [r7, #20]
 800b700:	2200      	movs	r2, #0
 800b702:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 800b706:	e003      	b.n	800b710 <SCSI_AllowPreventRemovable+0x32>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 800b708:	697b      	ldr	r3, [r7, #20]
 800b70a:	2201      	movs	r2, #1
 800b70c:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }

  hmsc->bot_data_length = 0U;
 800b710:	697b      	ldr	r3, [r7, #20]
 800b712:	2200      	movs	r2, #0
 800b714:	60da      	str	r2, [r3, #12]

  return 0;
 800b716:	2300      	movs	r3, #0
}
 800b718:	4618      	mov	r0, r3
 800b71a:	371c      	adds	r7, #28
 800b71c:	46bd      	mov	sp, r7
 800b71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b722:	4770      	bx	lr

0800b724 <SCSI_Read10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800b724:	b580      	push	{r7, lr}
 800b726:	b086      	sub	sp, #24
 800b728:	af00      	add	r7, sp, #0
 800b72a:	60f8      	str	r0, [r7, #12]
 800b72c:	460b      	mov	r3, r1
 800b72e:	607a      	str	r2, [r7, #4]
 800b730:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b738:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800b73a:	697b      	ldr	r3, [r7, #20]
 800b73c:	7a1b      	ldrb	r3, [r3, #8]
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d17c      	bne.n	800b83c <SCSI_Read10+0x118>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800b742:	697b      	ldr	r3, [r7, #20]
 800b744:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800b748:	b25b      	sxtb	r3, r3
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	db0a      	blt.n	800b764 <SCSI_Read10+0x40>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800b74e:	697b      	ldr	r3, [r7, #20]
 800b750:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800b754:	2320      	movs	r3, #32
 800b756:	2205      	movs	r2, #5
 800b758:	68f8      	ldr	r0, [r7, #12]
 800b75a:	f7ff ff32 	bl	800b5c2 <SCSI_SenseCode>
      return -1;
 800b75e:	f04f 33ff 	mov.w	r3, #4294967295
 800b762:	e075      	b.n	800b850 <SCSI_Read10+0x12c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800b764:	697b      	ldr	r3, [r7, #20]
 800b766:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800b76a:	2b02      	cmp	r3, #2
 800b76c:	d108      	bne.n	800b780 <SCSI_Read10+0x5c>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800b76e:	7af9      	ldrb	r1, [r7, #11]
 800b770:	233a      	movs	r3, #58	; 0x3a
 800b772:	2202      	movs	r2, #2
 800b774:	68f8      	ldr	r0, [r7, #12]
 800b776:	f7ff ff24 	bl	800b5c2 <SCSI_SenseCode>

      return -1;
 800b77a:	f04f 33ff 	mov.w	r3, #4294967295
 800b77e:	e067      	b.n	800b850 <SCSI_Read10+0x12c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b786:	689b      	ldr	r3, [r3, #8]
 800b788:	7afa      	ldrb	r2, [r7, #11]
 800b78a:	4610      	mov	r0, r2
 800b78c:	4798      	blx	r3
 800b78e:	4603      	mov	r3, r0
 800b790:	2b00      	cmp	r3, #0
 800b792:	d008      	beq.n	800b7a6 <SCSI_Read10+0x82>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800b794:	7af9      	ldrb	r1, [r7, #11]
 800b796:	233a      	movs	r3, #58	; 0x3a
 800b798:	2202      	movs	r2, #2
 800b79a:	68f8      	ldr	r0, [r7, #12]
 800b79c:	f7ff ff11 	bl	800b5c2 <SCSI_SenseCode>
      return -1;
 800b7a0:	f04f 33ff 	mov.w	r3, #4294967295
 800b7a4:	e054      	b.n	800b850 <SCSI_Read10+0x12c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	3302      	adds	r3, #2
 800b7aa:	781b      	ldrb	r3, [r3, #0]
 800b7ac:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	3303      	adds	r3, #3
 800b7b2:	781b      	ldrb	r3, [r3, #0]
 800b7b4:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800b7b6:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	3304      	adds	r3, #4
 800b7bc:	781b      	ldrb	r3, [r3, #0]
 800b7be:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800b7c0:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800b7c2:	687a      	ldr	r2, [r7, #4]
 800b7c4:	3205      	adds	r2, #5
 800b7c6:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800b7c8:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800b7ca:	697b      	ldr	r3, [r7, #20]
 800b7cc:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	3307      	adds	r3, #7
 800b7d4:	781b      	ldrb	r3, [r3, #0]
 800b7d6:	021b      	lsls	r3, r3, #8
 800b7d8:	687a      	ldr	r2, [r7, #4]
 800b7da:	3208      	adds	r2, #8
 800b7dc:	7812      	ldrb	r2, [r2, #0]
 800b7de:	431a      	orrs	r2, r3
 800b7e0:	697b      	ldr	r3, [r7, #20]
 800b7e2:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800b7e6:	697b      	ldr	r3, [r7, #20]
 800b7e8:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800b7ec:	697b      	ldr	r3, [r7, #20]
 800b7ee:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800b7f2:	7af9      	ldrb	r1, [r7, #11]
 800b7f4:	68f8      	ldr	r0, [r7, #12]
 800b7f6:	f000 fa95 	bl	800bd24 <SCSI_CheckAddressRange>
 800b7fa:	4603      	mov	r3, r0
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	da02      	bge.n	800b806 <SCSI_Read10+0xe2>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800b800:	f04f 33ff 	mov.w	r3, #4294967295
 800b804:	e024      	b.n	800b850 <SCSI_Read10+0x12c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800b806:	697b      	ldr	r3, [r7, #20]
 800b808:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800b80c:	697b      	ldr	r3, [r7, #20]
 800b80e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800b812:	6979      	ldr	r1, [r7, #20]
 800b814:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 800b818:	fb01 f303 	mul.w	r3, r1, r3
 800b81c:	429a      	cmp	r2, r3
 800b81e:	d00a      	beq.n	800b836 <SCSI_Read10+0x112>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800b820:	697b      	ldr	r3, [r7, #20]
 800b822:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800b826:	2320      	movs	r3, #32
 800b828:	2205      	movs	r2, #5
 800b82a:	68f8      	ldr	r0, [r7, #12]
 800b82c:	f7ff fec9 	bl	800b5c2 <SCSI_SenseCode>
      return -1;
 800b830:	f04f 33ff 	mov.w	r3, #4294967295
 800b834:	e00c      	b.n	800b850 <SCSI_Read10+0x12c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800b836:	697b      	ldr	r3, [r7, #20]
 800b838:	2202      	movs	r2, #2
 800b83a:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800b83c:	697b      	ldr	r3, [r7, #20]
 800b83e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b842:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800b844:	7afb      	ldrb	r3, [r7, #11]
 800b846:	4619      	mov	r1, r3
 800b848:	68f8      	ldr	r0, [r7, #12]
 800b84a:	f000 fa8d 	bl	800bd68 <SCSI_ProcessRead>
 800b84e:	4603      	mov	r3, r0
}
 800b850:	4618      	mov	r0, r3
 800b852:	3718      	adds	r7, #24
 800b854:	46bd      	mov	sp, r7
 800b856:	bd80      	pop	{r7, pc}

0800b858 <SCSI_Read12>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800b858:	b580      	push	{r7, lr}
 800b85a:	b086      	sub	sp, #24
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	60f8      	str	r0, [r7, #12]
 800b860:	460b      	mov	r3, r1
 800b862:	607a      	str	r2, [r7, #4]
 800b864:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b86c:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800b86e:	697b      	ldr	r3, [r7, #20]
 800b870:	7a1b      	ldrb	r3, [r3, #8]
 800b872:	2b00      	cmp	r3, #0
 800b874:	f040 8087 	bne.w	800b986 <SCSI_Read12+0x12e>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800b878:	697b      	ldr	r3, [r7, #20]
 800b87a:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800b87e:	b25b      	sxtb	r3, r3
 800b880:	2b00      	cmp	r3, #0
 800b882:	db0a      	blt.n	800b89a <SCSI_Read12+0x42>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800b884:	697b      	ldr	r3, [r7, #20]
 800b886:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800b88a:	2320      	movs	r3, #32
 800b88c:	2205      	movs	r2, #5
 800b88e:	68f8      	ldr	r0, [r7, #12]
 800b890:	f7ff fe97 	bl	800b5c2 <SCSI_SenseCode>
      return -1;
 800b894:	f04f 33ff 	mov.w	r3, #4294967295
 800b898:	e07f      	b.n	800b99a <SCSI_Read12+0x142>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800b89a:	697b      	ldr	r3, [r7, #20]
 800b89c:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800b8a0:	2b02      	cmp	r3, #2
 800b8a2:	d108      	bne.n	800b8b6 <SCSI_Read12+0x5e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800b8a4:	7af9      	ldrb	r1, [r7, #11]
 800b8a6:	233a      	movs	r3, #58	; 0x3a
 800b8a8:	2202      	movs	r2, #2
 800b8aa:	68f8      	ldr	r0, [r7, #12]
 800b8ac:	f7ff fe89 	bl	800b5c2 <SCSI_SenseCode>
      return -1;
 800b8b0:	f04f 33ff 	mov.w	r3, #4294967295
 800b8b4:	e071      	b.n	800b99a <SCSI_Read12+0x142>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b8bc:	689b      	ldr	r3, [r3, #8]
 800b8be:	7afa      	ldrb	r2, [r7, #11]
 800b8c0:	4610      	mov	r0, r2
 800b8c2:	4798      	blx	r3
 800b8c4:	4603      	mov	r3, r0
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d008      	beq.n	800b8dc <SCSI_Read12+0x84>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800b8ca:	7af9      	ldrb	r1, [r7, #11]
 800b8cc:	233a      	movs	r3, #58	; 0x3a
 800b8ce:	2202      	movs	r2, #2
 800b8d0:	68f8      	ldr	r0, [r7, #12]
 800b8d2:	f7ff fe76 	bl	800b5c2 <SCSI_SenseCode>
      return -1;
 800b8d6:	f04f 33ff 	mov.w	r3, #4294967295
 800b8da:	e05e      	b.n	800b99a <SCSI_Read12+0x142>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	3302      	adds	r3, #2
 800b8e0:	781b      	ldrb	r3, [r3, #0]
 800b8e2:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	3303      	adds	r3, #3
 800b8e8:	781b      	ldrb	r3, [r3, #0]
 800b8ea:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800b8ec:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	3304      	adds	r3, #4
 800b8f2:	781b      	ldrb	r3, [r3, #0]
 800b8f4:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800b8f6:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800b8f8:	687a      	ldr	r2, [r7, #4]
 800b8fa:	3205      	adds	r2, #5
 800b8fc:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800b8fe:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800b900:	697b      	ldr	r3, [r7, #20]
 800b902:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	3306      	adds	r3, #6
 800b90a:	781b      	ldrb	r3, [r3, #0]
 800b90c:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	3307      	adds	r3, #7
 800b912:	781b      	ldrb	r3, [r3, #0]
 800b914:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800b916:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	3308      	adds	r3, #8
 800b91c:	781b      	ldrb	r3, [r3, #0]
 800b91e:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800b920:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800b922:	687a      	ldr	r2, [r7, #4]
 800b924:	3209      	adds	r2, #9
 800b926:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800b928:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800b92a:	697b      	ldr	r3, [r7, #20]
 800b92c:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800b930:	697b      	ldr	r3, [r7, #20]
 800b932:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800b936:	697b      	ldr	r3, [r7, #20]
 800b938:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800b93c:	7af9      	ldrb	r1, [r7, #11]
 800b93e:	68f8      	ldr	r0, [r7, #12]
 800b940:	f000 f9f0 	bl	800bd24 <SCSI_CheckAddressRange>
 800b944:	4603      	mov	r3, r0
 800b946:	2b00      	cmp	r3, #0
 800b948:	da02      	bge.n	800b950 <SCSI_Read12+0xf8>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800b94a:	f04f 33ff 	mov.w	r3, #4294967295
 800b94e:	e024      	b.n	800b99a <SCSI_Read12+0x142>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800b950:	697b      	ldr	r3, [r7, #20]
 800b952:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800b956:	697b      	ldr	r3, [r7, #20]
 800b958:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800b95c:	6979      	ldr	r1, [r7, #20]
 800b95e:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 800b962:	fb01 f303 	mul.w	r3, r1, r3
 800b966:	429a      	cmp	r2, r3
 800b968:	d00a      	beq.n	800b980 <SCSI_Read12+0x128>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800b96a:	697b      	ldr	r3, [r7, #20]
 800b96c:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800b970:	2320      	movs	r3, #32
 800b972:	2205      	movs	r2, #5
 800b974:	68f8      	ldr	r0, [r7, #12]
 800b976:	f7ff fe24 	bl	800b5c2 <SCSI_SenseCode>
      return -1;
 800b97a:	f04f 33ff 	mov.w	r3, #4294967295
 800b97e:	e00c      	b.n	800b99a <SCSI_Read12+0x142>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800b980:	697b      	ldr	r3, [r7, #20]
 800b982:	2202      	movs	r2, #2
 800b984:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800b986:	697b      	ldr	r3, [r7, #20]
 800b988:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b98c:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800b98e:	7afb      	ldrb	r3, [r7, #11]
 800b990:	4619      	mov	r1, r3
 800b992:	68f8      	ldr	r0, [r7, #12]
 800b994:	f000 f9e8 	bl	800bd68 <SCSI_ProcessRead>
 800b998:	4603      	mov	r3, r0
}
 800b99a:	4618      	mov	r0, r3
 800b99c:	3718      	adds	r7, #24
 800b99e:	46bd      	mov	sp, r7
 800b9a0:	bd80      	pop	{r7, pc}

0800b9a2 <SCSI_Write10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800b9a2:	b580      	push	{r7, lr}
 800b9a4:	b086      	sub	sp, #24
 800b9a6:	af00      	add	r7, sp, #0
 800b9a8:	60f8      	str	r0, [r7, #12]
 800b9aa:	460b      	mov	r3, r1
 800b9ac:	607a      	str	r2, [r7, #4]
 800b9ae:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b9b6:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800b9b8:	697b      	ldr	r3, [r7, #20]
 800b9ba:	7a1b      	ldrb	r3, [r3, #8]
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	f040 80a5 	bne.w	800bb0c <SCSI_Write10+0x16a>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800b9c2:	697b      	ldr	r3, [r7, #20]
 800b9c4:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d10a      	bne.n	800b9e2 <SCSI_Write10+0x40>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800b9cc:	697b      	ldr	r3, [r7, #20]
 800b9ce:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800b9d2:	2320      	movs	r3, #32
 800b9d4:	2205      	movs	r2, #5
 800b9d6:	68f8      	ldr	r0, [r7, #12]
 800b9d8:	f7ff fdf3 	bl	800b5c2 <SCSI_SenseCode>
      return -1;
 800b9dc:	f04f 33ff 	mov.w	r3, #4294967295
 800b9e0:	e09a      	b.n	800bb18 <SCSI_Write10+0x176>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800b9e2:	697b      	ldr	r3, [r7, #20]
 800b9e4:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800b9e8:	b25b      	sxtb	r3, r3
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	da0a      	bge.n	800ba04 <SCSI_Write10+0x62>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800b9ee:	697b      	ldr	r3, [r7, #20]
 800b9f0:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800b9f4:	2320      	movs	r3, #32
 800b9f6:	2205      	movs	r2, #5
 800b9f8:	68f8      	ldr	r0, [r7, #12]
 800b9fa:	f7ff fde2 	bl	800b5c2 <SCSI_SenseCode>
      return -1;
 800b9fe:	f04f 33ff 	mov.w	r3, #4294967295
 800ba02:	e089      	b.n	800bb18 <SCSI_Write10+0x176>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ba0a:	689b      	ldr	r3, [r3, #8]
 800ba0c:	7afa      	ldrb	r2, [r7, #11]
 800ba0e:	4610      	mov	r0, r2
 800ba10:	4798      	blx	r3
 800ba12:	4603      	mov	r3, r0
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d008      	beq.n	800ba2a <SCSI_Write10+0x88>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800ba18:	7af9      	ldrb	r1, [r7, #11]
 800ba1a:	233a      	movs	r3, #58	; 0x3a
 800ba1c:	2202      	movs	r2, #2
 800ba1e:	68f8      	ldr	r0, [r7, #12]
 800ba20:	f7ff fdcf 	bl	800b5c2 <SCSI_SenseCode>
      return -1;
 800ba24:	f04f 33ff 	mov.w	r3, #4294967295
 800ba28:	e076      	b.n	800bb18 <SCSI_Write10+0x176>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ba30:	68db      	ldr	r3, [r3, #12]
 800ba32:	7afa      	ldrb	r2, [r7, #11]
 800ba34:	4610      	mov	r0, r2
 800ba36:	4798      	blx	r3
 800ba38:	4603      	mov	r3, r0
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d008      	beq.n	800ba50 <SCSI_Write10+0xae>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800ba3e:	7af9      	ldrb	r1, [r7, #11]
 800ba40:	2327      	movs	r3, #39	; 0x27
 800ba42:	2202      	movs	r2, #2
 800ba44:	68f8      	ldr	r0, [r7, #12]
 800ba46:	f7ff fdbc 	bl	800b5c2 <SCSI_SenseCode>
      return -1;
 800ba4a:	f04f 33ff 	mov.w	r3, #4294967295
 800ba4e:	e063      	b.n	800bb18 <SCSI_Write10+0x176>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	3302      	adds	r3, #2
 800ba54:	781b      	ldrb	r3, [r3, #0]
 800ba56:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	3303      	adds	r3, #3
 800ba5c:	781b      	ldrb	r3, [r3, #0]
 800ba5e:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ba60:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	3304      	adds	r3, #4
 800ba66:	781b      	ldrb	r3, [r3, #0]
 800ba68:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800ba6a:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800ba6c:	687a      	ldr	r2, [r7, #4]
 800ba6e:	3205      	adds	r2, #5
 800ba70:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800ba72:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ba74:	697b      	ldr	r3, [r7, #20]
 800ba76:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	3307      	adds	r3, #7
 800ba7e:	781b      	ldrb	r3, [r3, #0]
 800ba80:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 800ba82:	687a      	ldr	r2, [r7, #4]
 800ba84:	3208      	adds	r2, #8
 800ba86:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800ba88:	431a      	orrs	r2, r3
 800ba8a:	697b      	ldr	r3, [r7, #20]
 800ba8c:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800ba90:	697b      	ldr	r3, [r7, #20]
 800ba92:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800ba96:	697b      	ldr	r3, [r7, #20]
 800ba98:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800ba9c:	7af9      	ldrb	r1, [r7, #11]
 800ba9e:	68f8      	ldr	r0, [r7, #12]
 800baa0:	f000 f940 	bl	800bd24 <SCSI_CheckAddressRange>
 800baa4:	4603      	mov	r3, r0
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	da02      	bge.n	800bab0 <SCSI_Write10+0x10e>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800baaa:	f04f 33ff 	mov.w	r3, #4294967295
 800baae:	e033      	b.n	800bb18 <SCSI_Write10+0x176>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800bab0:	697b      	ldr	r3, [r7, #20]
 800bab2:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800bab6:	697a      	ldr	r2, [r7, #20]
 800bab8:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800babc:	fb02 f303 	mul.w	r3, r2, r3
 800bac0:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800bac2:	697b      	ldr	r3, [r7, #20]
 800bac4:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800bac8:	693a      	ldr	r2, [r7, #16]
 800baca:	429a      	cmp	r2, r3
 800bacc:	d00a      	beq.n	800bae4 <SCSI_Write10+0x142>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800bace:	697b      	ldr	r3, [r7, #20]
 800bad0:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800bad4:	2320      	movs	r3, #32
 800bad6:	2205      	movs	r2, #5
 800bad8:	68f8      	ldr	r0, [r7, #12]
 800bada:	f7ff fd72 	bl	800b5c2 <SCSI_SenseCode>
      return -1;
 800bade:	f04f 33ff 	mov.w	r3, #4294967295
 800bae2:	e019      	b.n	800bb18 <SCSI_Write10+0x176>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800bae4:	693b      	ldr	r3, [r7, #16]
 800bae6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800baea:	bf28      	it	cs
 800baec:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800baf0:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800baf2:	697b      	ldr	r3, [r7, #20]
 800baf4:	2201      	movs	r2, #1
 800baf6:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 800baf8:	697b      	ldr	r3, [r7, #20]
 800bafa:	f103 0210 	add.w	r2, r3, #16
 800bafe:	693b      	ldr	r3, [r7, #16]
 800bb00:	2101      	movs	r1, #1
 800bb02:	68f8      	ldr	r0, [r7, #12]
 800bb04:	f00a f8e9 	bl	8015cda <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800bb08:	2300      	movs	r3, #0
 800bb0a:	e005      	b.n	800bb18 <SCSI_Write10+0x176>
    return SCSI_ProcessWrite(pdev, lun);
 800bb0c:	7afb      	ldrb	r3, [r7, #11]
 800bb0e:	4619      	mov	r1, r3
 800bb10:	68f8      	ldr	r0, [r7, #12]
 800bb12:	f000 f99c 	bl	800be4e <SCSI_ProcessWrite>
 800bb16:	4603      	mov	r3, r0
}
 800bb18:	4618      	mov	r0, r3
 800bb1a:	3718      	adds	r7, #24
 800bb1c:	46bd      	mov	sp, r7
 800bb1e:	bd80      	pop	{r7, pc}

0800bb20 <SCSI_Write12>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800bb20:	b580      	push	{r7, lr}
 800bb22:	b086      	sub	sp, #24
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	60f8      	str	r0, [r7, #12]
 800bb28:	460b      	mov	r3, r1
 800bb2a:	607a      	str	r2, [r7, #4]
 800bb2c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bb34:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800bb36:	697b      	ldr	r3, [r7, #20]
 800bb38:	7a1b      	ldrb	r3, [r3, #8]
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	f040 80b5 	bne.w	800bcaa <SCSI_Write12+0x18a>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800bb40:	697b      	ldr	r3, [r7, #20]
 800bb42:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d10a      	bne.n	800bb60 <SCSI_Write12+0x40>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800bb4a:	697b      	ldr	r3, [r7, #20]
 800bb4c:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800bb50:	2320      	movs	r3, #32
 800bb52:	2205      	movs	r2, #5
 800bb54:	68f8      	ldr	r0, [r7, #12]
 800bb56:	f7ff fd34 	bl	800b5c2 <SCSI_SenseCode>
      return -1;
 800bb5a:	f04f 33ff 	mov.w	r3, #4294967295
 800bb5e:	e0aa      	b.n	800bcb6 <SCSI_Write12+0x196>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800bb60:	697b      	ldr	r3, [r7, #20]
 800bb62:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800bb66:	b25b      	sxtb	r3, r3
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	da0a      	bge.n	800bb82 <SCSI_Write12+0x62>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800bb6c:	697b      	ldr	r3, [r7, #20]
 800bb6e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800bb72:	2320      	movs	r3, #32
 800bb74:	2205      	movs	r2, #5
 800bb76:	68f8      	ldr	r0, [r7, #12]
 800bb78:	f7ff fd23 	bl	800b5c2 <SCSI_SenseCode>
      return -1;
 800bb7c:	f04f 33ff 	mov.w	r3, #4294967295
 800bb80:	e099      	b.n	800bcb6 <SCSI_Write12+0x196>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bb88:	689b      	ldr	r3, [r3, #8]
 800bb8a:	7afa      	ldrb	r2, [r7, #11]
 800bb8c:	4610      	mov	r0, r2
 800bb8e:	4798      	blx	r3
 800bb90:	4603      	mov	r3, r0
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d00b      	beq.n	800bbae <SCSI_Write12+0x8e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800bb96:	7af9      	ldrb	r1, [r7, #11]
 800bb98:	233a      	movs	r3, #58	; 0x3a
 800bb9a:	2202      	movs	r2, #2
 800bb9c:	68f8      	ldr	r0, [r7, #12]
 800bb9e:	f7ff fd10 	bl	800b5c2 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800bba2:	697b      	ldr	r3, [r7, #20]
 800bba4:	2205      	movs	r2, #5
 800bba6:	721a      	strb	r2, [r3, #8]
      return -1;
 800bba8:	f04f 33ff 	mov.w	r3, #4294967295
 800bbac:	e083      	b.n	800bcb6 <SCSI_Write12+0x196>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bbb4:	68db      	ldr	r3, [r3, #12]
 800bbb6:	7afa      	ldrb	r2, [r7, #11]
 800bbb8:	4610      	mov	r0, r2
 800bbba:	4798      	blx	r3
 800bbbc:	4603      	mov	r3, r0
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d00b      	beq.n	800bbda <SCSI_Write12+0xba>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800bbc2:	7af9      	ldrb	r1, [r7, #11]
 800bbc4:	2327      	movs	r3, #39	; 0x27
 800bbc6:	2202      	movs	r2, #2
 800bbc8:	68f8      	ldr	r0, [r7, #12]
 800bbca:	f7ff fcfa 	bl	800b5c2 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800bbce:	697b      	ldr	r3, [r7, #20]
 800bbd0:	2205      	movs	r2, #5
 800bbd2:	721a      	strb	r2, [r3, #8]
      return -1;
 800bbd4:	f04f 33ff 	mov.w	r3, #4294967295
 800bbd8:	e06d      	b.n	800bcb6 <SCSI_Write12+0x196>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	3302      	adds	r3, #2
 800bbde:	781b      	ldrb	r3, [r3, #0]
 800bbe0:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	3303      	adds	r3, #3
 800bbe6:	781b      	ldrb	r3, [r3, #0]
 800bbe8:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800bbea:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	3304      	adds	r3, #4
 800bbf0:	781b      	ldrb	r3, [r3, #0]
 800bbf2:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800bbf4:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800bbf6:	687a      	ldr	r2, [r7, #4]
 800bbf8:	3205      	adds	r2, #5
 800bbfa:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800bbfc:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800bbfe:	697b      	ldr	r3, [r7, #20]
 800bc00:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	3306      	adds	r3, #6
 800bc08:	781b      	ldrb	r3, [r3, #0]
 800bc0a:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	3307      	adds	r3, #7
 800bc10:	781b      	ldrb	r3, [r3, #0]
 800bc12:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800bc14:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	3308      	adds	r3, #8
 800bc1a:	781b      	ldrb	r3, [r3, #0]
 800bc1c:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800bc1e:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800bc20:	687a      	ldr	r2, [r7, #4]
 800bc22:	3209      	adds	r2, #9
 800bc24:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800bc26:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800bc28:	697b      	ldr	r3, [r7, #20]
 800bc2a:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800bc2e:	697b      	ldr	r3, [r7, #20]
 800bc30:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800bc34:	697b      	ldr	r3, [r7, #20]
 800bc36:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800bc3a:	7af9      	ldrb	r1, [r7, #11]
 800bc3c:	68f8      	ldr	r0, [r7, #12]
 800bc3e:	f000 f871 	bl	800bd24 <SCSI_CheckAddressRange>
 800bc42:	4603      	mov	r3, r0
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	da02      	bge.n	800bc4e <SCSI_Write12+0x12e>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800bc48:	f04f 33ff 	mov.w	r3, #4294967295
 800bc4c:	e033      	b.n	800bcb6 <SCSI_Write12+0x196>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800bc4e:	697b      	ldr	r3, [r7, #20]
 800bc50:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800bc54:	697a      	ldr	r2, [r7, #20]
 800bc56:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800bc5a:	fb02 f303 	mul.w	r3, r2, r3
 800bc5e:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800bc60:	697b      	ldr	r3, [r7, #20]
 800bc62:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800bc66:	693a      	ldr	r2, [r7, #16]
 800bc68:	429a      	cmp	r2, r3
 800bc6a:	d00a      	beq.n	800bc82 <SCSI_Write12+0x162>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800bc6c:	697b      	ldr	r3, [r7, #20]
 800bc6e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800bc72:	2320      	movs	r3, #32
 800bc74:	2205      	movs	r2, #5
 800bc76:	68f8      	ldr	r0, [r7, #12]
 800bc78:	f7ff fca3 	bl	800b5c2 <SCSI_SenseCode>
      return -1;
 800bc7c:	f04f 33ff 	mov.w	r3, #4294967295
 800bc80:	e019      	b.n	800bcb6 <SCSI_Write12+0x196>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800bc82:	693b      	ldr	r3, [r7, #16]
 800bc84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bc88:	bf28      	it	cs
 800bc8a:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800bc8e:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800bc90:	697b      	ldr	r3, [r7, #20]
 800bc92:	2201      	movs	r2, #1
 800bc94:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 800bc96:	697b      	ldr	r3, [r7, #20]
 800bc98:	f103 0210 	add.w	r2, r3, #16
 800bc9c:	693b      	ldr	r3, [r7, #16]
 800bc9e:	2101      	movs	r1, #1
 800bca0:	68f8      	ldr	r0, [r7, #12]
 800bca2:	f00a f81a 	bl	8015cda <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800bca6:	2300      	movs	r3, #0
 800bca8:	e005      	b.n	800bcb6 <SCSI_Write12+0x196>
    return SCSI_ProcessWrite(pdev, lun);
 800bcaa:	7afb      	ldrb	r3, [r7, #11]
 800bcac:	4619      	mov	r1, r3
 800bcae:	68f8      	ldr	r0, [r7, #12]
 800bcb0:	f000 f8cd 	bl	800be4e <SCSI_ProcessWrite>
 800bcb4:	4603      	mov	r3, r0
}
 800bcb6:	4618      	mov	r0, r3
 800bcb8:	3718      	adds	r7, #24
 800bcba:	46bd      	mov	sp, r7
 800bcbc:	bd80      	pop	{r7, pc}

0800bcbe <SCSI_Verify10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800bcbe:	b580      	push	{r7, lr}
 800bcc0:	b086      	sub	sp, #24
 800bcc2:	af00      	add	r7, sp, #0
 800bcc4:	60f8      	str	r0, [r7, #12]
 800bcc6:	460b      	mov	r3, r1
 800bcc8:	607a      	str	r2, [r7, #4]
 800bcca:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bcd2:	617b      	str	r3, [r7, #20]

  if ((params[1] & 0x02U) == 0x02U)
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	3301      	adds	r3, #1
 800bcd8:	781b      	ldrb	r3, [r3, #0]
 800bcda:	f003 0302 	and.w	r3, r3, #2
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d008      	beq.n	800bcf4 <SCSI_Verify10+0x36>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800bce2:	7af9      	ldrb	r1, [r7, #11]
 800bce4:	2324      	movs	r3, #36	; 0x24
 800bce6:	2205      	movs	r2, #5
 800bce8:	68f8      	ldr	r0, [r7, #12]
 800bcea:	f7ff fc6a 	bl	800b5c2 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 800bcee:	f04f 33ff 	mov.w	r3, #4294967295
 800bcf2:	e013      	b.n	800bd1c <SCSI_Verify10+0x5e>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 800bcf4:	697b      	ldr	r3, [r7, #20]
 800bcf6:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800bcfa:	697b      	ldr	r3, [r7, #20]
 800bcfc:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800bd00:	7af9      	ldrb	r1, [r7, #11]
 800bd02:	68f8      	ldr	r0, [r7, #12]
 800bd04:	f000 f80e 	bl	800bd24 <SCSI_CheckAddressRange>
 800bd08:	4603      	mov	r3, r0
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	da02      	bge.n	800bd14 <SCSI_Verify10+0x56>
  {
    return -1; /* error */
 800bd0e:	f04f 33ff 	mov.w	r3, #4294967295
 800bd12:	e003      	b.n	800bd1c <SCSI_Verify10+0x5e>
  }

  hmsc->bot_data_length = 0U;
 800bd14:	697b      	ldr	r3, [r7, #20]
 800bd16:	2200      	movs	r2, #0
 800bd18:	60da      	str	r2, [r3, #12]

  return 0;
 800bd1a:	2300      	movs	r3, #0
}
 800bd1c:	4618      	mov	r0, r3
 800bd1e:	3718      	adds	r7, #24
 800bd20:	46bd      	mov	sp, r7
 800bd22:	bd80      	pop	{r7, pc}

0800bd24 <SCSI_CheckAddressRange>:
* @param  blk_nbr: number of block to be processed
* @retval status
*/
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 800bd24:	b580      	push	{r7, lr}
 800bd26:	b086      	sub	sp, #24
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	60f8      	str	r0, [r7, #12]
 800bd2c:	607a      	str	r2, [r7, #4]
 800bd2e:	603b      	str	r3, [r7, #0]
 800bd30:	460b      	mov	r3, r1
 800bd32:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bd3a:	617b      	str	r3, [r7, #20]

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 800bd3c:	687a      	ldr	r2, [r7, #4]
 800bd3e:	683b      	ldr	r3, [r7, #0]
 800bd40:	441a      	add	r2, r3
 800bd42:	697b      	ldr	r3, [r7, #20]
 800bd44:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800bd48:	429a      	cmp	r2, r3
 800bd4a:	d908      	bls.n	800bd5e <SCSI_CheckAddressRange+0x3a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 800bd4c:	7af9      	ldrb	r1, [r7, #11]
 800bd4e:	2321      	movs	r3, #33	; 0x21
 800bd50:	2205      	movs	r2, #5
 800bd52:	68f8      	ldr	r0, [r7, #12]
 800bd54:	f7ff fc35 	bl	800b5c2 <SCSI_SenseCode>
    return -1;
 800bd58:	f04f 33ff 	mov.w	r3, #4294967295
 800bd5c:	e000      	b.n	800bd60 <SCSI_CheckAddressRange+0x3c>
  }

  return 0;
 800bd5e:	2300      	movs	r3, #0
}
 800bd60:	4618      	mov	r0, r3
 800bd62:	3718      	adds	r7, #24
 800bd64:	46bd      	mov	sp, r7
 800bd66:	bd80      	pop	{r7, pc}

0800bd68 <SCSI_ProcessRead>:
*         Handle Read Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800bd68:	b590      	push	{r4, r7, lr}
 800bd6a:	b085      	sub	sp, #20
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	6078      	str	r0, [r7, #4]
 800bd70:	460b      	mov	r3, r1
 800bd72:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bd7a:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800bd82:	68fa      	ldr	r2, [r7, #12]
 800bd84:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800bd88:	fb02 f303 	mul.w	r3, r2, r3
 800bd8c:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 800bd8e:	68bb      	ldr	r3, [r7, #8]
 800bd90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bd94:	bf28      	it	cs
 800bd96:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800bd9a:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bda2:	691c      	ldr	r4, [r3, #16]
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	f103 0110 	add.w	r1, r3, #16
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800bdb6:	4618      	mov	r0, r3
 800bdb8:	68bb      	ldr	r3, [r7, #8]
 800bdba:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 800bdbe:	b29b      	uxth	r3, r3
 800bdc0:	78f8      	ldrb	r0, [r7, #3]
 800bdc2:	47a0      	blx	r4
 800bdc4:	4603      	mov	r3, r0
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	da08      	bge.n	800bddc <SCSI_ProcessRead+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 800bdca:	78f9      	ldrb	r1, [r7, #3]
 800bdcc:	2311      	movs	r3, #17
 800bdce:	2204      	movs	r2, #4
 800bdd0:	6878      	ldr	r0, [r7, #4]
 800bdd2:	f7ff fbf6 	bl	800b5c2 <SCSI_SenseCode>
    return -1;
 800bdd6:	f04f 33ff 	mov.w	r3, #4294967295
 800bdda:	e034      	b.n	800be46 <SCSI_ProcessRead+0xde>
  }

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	f103 0210 	add.w	r2, r3, #16
 800bde2:	68bb      	ldr	r3, [r7, #8]
 800bde4:	2181      	movs	r1, #129	; 0x81
 800bde6:	6878      	ldr	r0, [r7, #4]
 800bde8:	f009 ff56 	bl	8015c98 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800bdf8:	4619      	mov	r1, r3
 800bdfa:	68bb      	ldr	r3, [r7, #8]
 800bdfc:	fbb3 f3f1 	udiv	r3, r3, r1
 800be00:	441a      	add	r2, r3
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800be14:	4619      	mov	r1, r3
 800be16:	68bb      	ldr	r3, [r7, #8]
 800be18:	fbb3 f3f1 	udiv	r3, r3, r1
 800be1c:	1ad2      	subs	r2, r2, r3
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 800be2a:	68bb      	ldr	r3, [r7, #8]
 800be2c:	1ad2      	subs	r2, r2, r3
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d102      	bne.n	800be44 <SCSI_ProcessRead+0xdc>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	2203      	movs	r2, #3
 800be42:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 800be44:	2300      	movs	r3, #0
}
 800be46:	4618      	mov	r0, r3
 800be48:	3714      	adds	r7, #20
 800be4a:	46bd      	mov	sp, r7
 800be4c:	bd90      	pop	{r4, r7, pc}

0800be4e <SCSI_ProcessWrite>:
*         Handle Write Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800be4e:	b590      	push	{r4, r7, lr}
 800be50:	b085      	sub	sp, #20
 800be52:	af00      	add	r7, sp, #0
 800be54:	6078      	str	r0, [r7, #4]
 800be56:	460b      	mov	r3, r1
 800be58:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800be60:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800be68:	68fa      	ldr	r2, [r7, #12]
 800be6a:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800be6e:	fb02 f303 	mul.w	r3, r2, r3
 800be72:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 800be74:	68bb      	ldr	r3, [r7, #8]
 800be76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800be7a:	bf28      	it	cs
 800be7c:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800be80:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800be88:	695c      	ldr	r4, [r3, #20]
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	f103 0110 	add.w	r1, r3, #16
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800be9c:	4618      	mov	r0, r3
 800be9e:	68bb      	ldr	r3, [r7, #8]
 800bea0:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 800bea4:	b29b      	uxth	r3, r3
 800bea6:	78f8      	ldrb	r0, [r7, #3]
 800bea8:	47a0      	blx	r4
 800beaa:	4603      	mov	r3, r0
 800beac:	2b00      	cmp	r3, #0
 800beae:	da08      	bge.n	800bec2 <SCSI_ProcessWrite+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 800beb0:	78f9      	ldrb	r1, [r7, #3]
 800beb2:	2303      	movs	r3, #3
 800beb4:	2204      	movs	r2, #4
 800beb6:	6878      	ldr	r0, [r7, #4]
 800beb8:	f7ff fb83 	bl	800b5c2 <SCSI_SenseCode>
    return -1;
 800bebc:	f04f 33ff 	mov.w	r3, #4294967295
 800bec0:	e044      	b.n	800bf4c <SCSI_ProcessWrite+0xfe>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800bece:	4619      	mov	r1, r3
 800bed0:	68bb      	ldr	r3, [r7, #8]
 800bed2:	fbb3 f3f1 	udiv	r3, r3, r1
 800bed6:	441a      	add	r2, r3
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800beea:	4619      	mov	r1, r3
 800beec:	68bb      	ldr	r3, [r7, #8]
 800beee:	fbb3 f3f1 	udiv	r3, r3, r1
 800bef2:	1ad2      	subs	r2, r2, r3
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 800bf00:	68bb      	ldr	r3, [r7, #8]
 800bf02:	1ad2      	subs	r2, r2, r3
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d104      	bne.n	800bf1e <SCSI_ProcessWrite+0xd0>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800bf14:	2100      	movs	r1, #0
 800bf16:	6878      	ldr	r0, [r7, #4]
 800bf18:	f7fe ff04 	bl	800ad24 <MSC_BOT_SendCSW>
 800bf1c:	e015      	b.n	800bf4a <SCSI_ProcessWrite+0xfc>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800bf24:	68fa      	ldr	r2, [r7, #12]
 800bf26:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800bf2a:	fb02 f303 	mul.w	r3, r2, r3
 800bf2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bf32:	bf28      	it	cs
 800bf34:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800bf38:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	f103 0210 	add.w	r2, r3, #16
 800bf40:	68bb      	ldr	r3, [r7, #8]
 800bf42:	2101      	movs	r1, #1
 800bf44:	6878      	ldr	r0, [r7, #4]
 800bf46:	f009 fec8 	bl	8015cda <USBD_LL_PrepareReceive>
  }

  return 0;
 800bf4a:	2300      	movs	r3, #0
}
 800bf4c:	4618      	mov	r0, r3
 800bf4e:	3714      	adds	r7, #20
 800bf50:	46bd      	mov	sp, r7
 800bf52:	bd90      	pop	{r4, r7, pc}

0800bf54 <SCSI_UpdateBotData>:
* @param  length: Data length
* @retval status
*/
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 800bf54:	b480      	push	{r7}
 800bf56:	b087      	sub	sp, #28
 800bf58:	af00      	add	r7, sp, #0
 800bf5a:	60f8      	str	r0, [r7, #12]
 800bf5c:	60b9      	str	r1, [r7, #8]
 800bf5e:	4613      	mov	r3, r2
 800bf60:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 800bf62:	88fb      	ldrh	r3, [r7, #6]
 800bf64:	82fb      	strh	r3, [r7, #22]

  hmsc->bot_data_length = len;
 800bf66:	8afa      	ldrh	r2, [r7, #22]
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 800bf6c:	e00b      	b.n	800bf86 <SCSI_UpdateBotData+0x32>
  {
    len--;
 800bf6e:	8afb      	ldrh	r3, [r7, #22]
 800bf70:	3b01      	subs	r3, #1
 800bf72:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 800bf74:	8afb      	ldrh	r3, [r7, #22]
 800bf76:	68ba      	ldr	r2, [r7, #8]
 800bf78:	441a      	add	r2, r3
 800bf7a:	8afb      	ldrh	r3, [r7, #22]
 800bf7c:	7811      	ldrb	r1, [r2, #0]
 800bf7e:	68fa      	ldr	r2, [r7, #12]
 800bf80:	4413      	add	r3, r2
 800bf82:	460a      	mov	r2, r1
 800bf84:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 800bf86:	8afb      	ldrh	r3, [r7, #22]
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d1f0      	bne.n	800bf6e <SCSI_UpdateBotData+0x1a>
  }

  return 0;
 800bf8c:	2300      	movs	r3, #0
}
 800bf8e:	4618      	mov	r0, r3
 800bf90:	371c      	adds	r7, #28
 800bf92:	46bd      	mov	sp, r7
 800bf94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf98:	4770      	bx	lr

0800bf9a <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800bf9a:	b580      	push	{r7, lr}
 800bf9c:	b086      	sub	sp, #24
 800bf9e:	af00      	add	r7, sp, #0
 800bfa0:	60f8      	str	r0, [r7, #12]
 800bfa2:	60b9      	str	r1, [r7, #8]
 800bfa4:	4613      	mov	r3, r2
 800bfa6:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d101      	bne.n	800bfb2 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800bfae:	2303      	movs	r3, #3
 800bfb0:	e025      	b.n	800bffe <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d003      	beq.n	800bfc4 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	2200      	movs	r2, #0
 800bfc0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d003      	beq.n	800bfd6 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	2200      	movs	r2, #0
 800bfd2:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800bfd6:	68bb      	ldr	r3, [r7, #8]
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d003      	beq.n	800bfe4 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	68ba      	ldr	r2, [r7, #8]
 800bfe0:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	2201      	movs	r2, #1
 800bfe8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	79fa      	ldrb	r2, [r7, #7]
 800bff0:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800bff2:	68f8      	ldr	r0, [r7, #12]
 800bff4:	f009 fcfc 	bl	80159f0 <USBD_LL_Init>
 800bff8:	4603      	mov	r3, r0
 800bffa:	75fb      	strb	r3, [r7, #23]

  return ret;
 800bffc:	7dfb      	ldrb	r3, [r7, #23]
}
 800bffe:	4618      	mov	r0, r3
 800c000:	3718      	adds	r7, #24
 800c002:	46bd      	mov	sp, r7
 800c004:	bd80      	pop	{r7, pc}

0800c006 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c006:	b580      	push	{r7, lr}
 800c008:	b084      	sub	sp, #16
 800c00a:	af00      	add	r7, sp, #0
 800c00c:	6078      	str	r0, [r7, #4]
 800c00e:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c010:	2300      	movs	r3, #0
 800c012:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c014:	683b      	ldr	r3, [r7, #0]
 800c016:	2b00      	cmp	r3, #0
 800c018:	d101      	bne.n	800c01e <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800c01a:	2303      	movs	r3, #3
 800c01c:	e010      	b.n	800c040 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	683a      	ldr	r2, [r7, #0]
 800c022:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c02c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c02e:	f107 020e 	add.w	r2, r7, #14
 800c032:	4610      	mov	r0, r2
 800c034:	4798      	blx	r3
 800c036:	4602      	mov	r2, r0
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 800c03e:	2300      	movs	r3, #0
}
 800c040:	4618      	mov	r0, r3
 800c042:	3710      	adds	r7, #16
 800c044:	46bd      	mov	sp, r7
 800c046:	bd80      	pop	{r7, pc}

0800c048 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c048:	b580      	push	{r7, lr}
 800c04a:	b082      	sub	sp, #8
 800c04c:	af00      	add	r7, sp, #0
 800c04e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c050:	6878      	ldr	r0, [r7, #4]
 800c052:	f009 fd19 	bl	8015a88 <USBD_LL_Start>
 800c056:	4603      	mov	r3, r0
}
 800c058:	4618      	mov	r0, r3
 800c05a:	3708      	adds	r7, #8
 800c05c:	46bd      	mov	sp, r7
 800c05e:	bd80      	pop	{r7, pc}

0800c060 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800c060:	b480      	push	{r7}
 800c062:	b083      	sub	sp, #12
 800c064:	af00      	add	r7, sp, #0
 800c066:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c068:	2300      	movs	r3, #0
}
 800c06a:	4618      	mov	r0, r3
 800c06c:	370c      	adds	r7, #12
 800c06e:	46bd      	mov	sp, r7
 800c070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c074:	4770      	bx	lr

0800c076 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c076:	b580      	push	{r7, lr}
 800c078:	b084      	sub	sp, #16
 800c07a:	af00      	add	r7, sp, #0
 800c07c:	6078      	str	r0, [r7, #4]
 800c07e:	460b      	mov	r3, r1
 800c080:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800c082:	2303      	movs	r3, #3
 800c084:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d009      	beq.n	800c0a4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	78fa      	ldrb	r2, [r7, #3]
 800c09a:	4611      	mov	r1, r2
 800c09c:	6878      	ldr	r0, [r7, #4]
 800c09e:	4798      	blx	r3
 800c0a0:	4603      	mov	r3, r0
 800c0a2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800c0a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0a6:	4618      	mov	r0, r3
 800c0a8:	3710      	adds	r7, #16
 800c0aa:	46bd      	mov	sp, r7
 800c0ac:	bd80      	pop	{r7, pc}

0800c0ae <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c0ae:	b580      	push	{r7, lr}
 800c0b0:	b082      	sub	sp, #8
 800c0b2:	af00      	add	r7, sp, #0
 800c0b4:	6078      	str	r0, [r7, #4]
 800c0b6:	460b      	mov	r3, r1
 800c0b8:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d007      	beq.n	800c0d4 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c0ca:	685b      	ldr	r3, [r3, #4]
 800c0cc:	78fa      	ldrb	r2, [r7, #3]
 800c0ce:	4611      	mov	r1, r2
 800c0d0:	6878      	ldr	r0, [r7, #4]
 800c0d2:	4798      	blx	r3
  }

  return USBD_OK;
 800c0d4:	2300      	movs	r3, #0
}
 800c0d6:	4618      	mov	r0, r3
 800c0d8:	3708      	adds	r7, #8
 800c0da:	46bd      	mov	sp, r7
 800c0dc:	bd80      	pop	{r7, pc}

0800c0de <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c0de:	b580      	push	{r7, lr}
 800c0e0:	b084      	sub	sp, #16
 800c0e2:	af00      	add	r7, sp, #0
 800c0e4:	6078      	str	r0, [r7, #4]
 800c0e6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c0ee:	6839      	ldr	r1, [r7, #0]
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	f000 ff55 	bl	800cfa0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	2201      	movs	r2, #1
 800c0fa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800c104:	461a      	mov	r2, r3
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c112:	f003 031f 	and.w	r3, r3, #31
 800c116:	2b01      	cmp	r3, #1
 800c118:	d00e      	beq.n	800c138 <USBD_LL_SetupStage+0x5a>
 800c11a:	2b01      	cmp	r3, #1
 800c11c:	d302      	bcc.n	800c124 <USBD_LL_SetupStage+0x46>
 800c11e:	2b02      	cmp	r3, #2
 800c120:	d014      	beq.n	800c14c <USBD_LL_SetupStage+0x6e>
 800c122:	e01d      	b.n	800c160 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c12a:	4619      	mov	r1, r3
 800c12c:	6878      	ldr	r0, [r7, #4]
 800c12e:	f000 fa17 	bl	800c560 <USBD_StdDevReq>
 800c132:	4603      	mov	r3, r0
 800c134:	73fb      	strb	r3, [r7, #15]
      break;
 800c136:	e020      	b.n	800c17a <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c13e:	4619      	mov	r1, r3
 800c140:	6878      	ldr	r0, [r7, #4]
 800c142:	f000 fa7b 	bl	800c63c <USBD_StdItfReq>
 800c146:	4603      	mov	r3, r0
 800c148:	73fb      	strb	r3, [r7, #15]
      break;
 800c14a:	e016      	b.n	800c17a <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c152:	4619      	mov	r1, r3
 800c154:	6878      	ldr	r0, [r7, #4]
 800c156:	f000 fab7 	bl	800c6c8 <USBD_StdEPReq>
 800c15a:	4603      	mov	r3, r0
 800c15c:	73fb      	strb	r3, [r7, #15]
      break;
 800c15e:	e00c      	b.n	800c17a <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c166:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c16a:	b2db      	uxtb	r3, r3
 800c16c:	4619      	mov	r1, r3
 800c16e:	6878      	ldr	r0, [r7, #4]
 800c170:	f009 fd09 	bl	8015b86 <USBD_LL_StallEP>
 800c174:	4603      	mov	r3, r0
 800c176:	73fb      	strb	r3, [r7, #15]
      break;
 800c178:	bf00      	nop
  }

  return ret;
 800c17a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c17c:	4618      	mov	r0, r3
 800c17e:	3710      	adds	r7, #16
 800c180:	46bd      	mov	sp, r7
 800c182:	bd80      	pop	{r7, pc}

0800c184 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c184:	b580      	push	{r7, lr}
 800c186:	b086      	sub	sp, #24
 800c188:	af00      	add	r7, sp, #0
 800c18a:	60f8      	str	r0, [r7, #12]
 800c18c:	460b      	mov	r3, r1
 800c18e:	607a      	str	r2, [r7, #4]
 800c190:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c192:	7afb      	ldrb	r3, [r7, #11]
 800c194:	2b00      	cmp	r3, #0
 800c196:	d137      	bne.n	800c208 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800c19e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c1a6:	2b03      	cmp	r3, #3
 800c1a8:	d14a      	bne.n	800c240 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800c1aa:	693b      	ldr	r3, [r7, #16]
 800c1ac:	689a      	ldr	r2, [r3, #8]
 800c1ae:	693b      	ldr	r3, [r7, #16]
 800c1b0:	68db      	ldr	r3, [r3, #12]
 800c1b2:	429a      	cmp	r2, r3
 800c1b4:	d913      	bls.n	800c1de <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c1b6:	693b      	ldr	r3, [r7, #16]
 800c1b8:	689a      	ldr	r2, [r3, #8]
 800c1ba:	693b      	ldr	r3, [r7, #16]
 800c1bc:	68db      	ldr	r3, [r3, #12]
 800c1be:	1ad2      	subs	r2, r2, r3
 800c1c0:	693b      	ldr	r3, [r7, #16]
 800c1c2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c1c4:	693b      	ldr	r3, [r7, #16]
 800c1c6:	68da      	ldr	r2, [r3, #12]
 800c1c8:	693b      	ldr	r3, [r7, #16]
 800c1ca:	689b      	ldr	r3, [r3, #8]
 800c1cc:	4293      	cmp	r3, r2
 800c1ce:	bf28      	it	cs
 800c1d0:	4613      	movcs	r3, r2
 800c1d2:	461a      	mov	r2, r3
 800c1d4:	6879      	ldr	r1, [r7, #4]
 800c1d6:	68f8      	ldr	r0, [r7, #12]
 800c1d8:	f000 ffb9 	bl	800d14e <USBD_CtlContinueRx>
 800c1dc:	e030      	b.n	800c240 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c1e4:	691b      	ldr	r3, [r3, #16]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d00a      	beq.n	800c200 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800c1f0:	2b03      	cmp	r3, #3
 800c1f2:	d105      	bne.n	800c200 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c1fa:	691b      	ldr	r3, [r3, #16]
 800c1fc:	68f8      	ldr	r0, [r7, #12]
 800c1fe:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800c200:	68f8      	ldr	r0, [r7, #12]
 800c202:	f000 ffb5 	bl	800d170 <USBD_CtlSendStatus>
 800c206:	e01b      	b.n	800c240 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c20e:	699b      	ldr	r3, [r3, #24]
 800c210:	2b00      	cmp	r3, #0
 800c212:	d013      	beq.n	800c23c <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800c21a:	2b03      	cmp	r3, #3
 800c21c:	d10e      	bne.n	800c23c <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c224:	699b      	ldr	r3, [r3, #24]
 800c226:	7afa      	ldrb	r2, [r7, #11]
 800c228:	4611      	mov	r1, r2
 800c22a:	68f8      	ldr	r0, [r7, #12]
 800c22c:	4798      	blx	r3
 800c22e:	4603      	mov	r3, r0
 800c230:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800c232:	7dfb      	ldrb	r3, [r7, #23]
 800c234:	2b00      	cmp	r3, #0
 800c236:	d003      	beq.n	800c240 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800c238:	7dfb      	ldrb	r3, [r7, #23]
 800c23a:	e002      	b.n	800c242 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800c23c:	2303      	movs	r3, #3
 800c23e:	e000      	b.n	800c242 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800c240:	2300      	movs	r3, #0
}
 800c242:	4618      	mov	r0, r3
 800c244:	3718      	adds	r7, #24
 800c246:	46bd      	mov	sp, r7
 800c248:	bd80      	pop	{r7, pc}

0800c24a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c24a:	b580      	push	{r7, lr}
 800c24c:	b086      	sub	sp, #24
 800c24e:	af00      	add	r7, sp, #0
 800c250:	60f8      	str	r0, [r7, #12]
 800c252:	460b      	mov	r3, r1
 800c254:	607a      	str	r2, [r7, #4]
 800c256:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c258:	7afb      	ldrb	r3, [r7, #11]
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d16a      	bne.n	800c334 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	3314      	adds	r3, #20
 800c262:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c26a:	2b02      	cmp	r3, #2
 800c26c:	d155      	bne.n	800c31a <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800c26e:	693b      	ldr	r3, [r7, #16]
 800c270:	689a      	ldr	r2, [r3, #8]
 800c272:	693b      	ldr	r3, [r7, #16]
 800c274:	68db      	ldr	r3, [r3, #12]
 800c276:	429a      	cmp	r2, r3
 800c278:	d914      	bls.n	800c2a4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c27a:	693b      	ldr	r3, [r7, #16]
 800c27c:	689a      	ldr	r2, [r3, #8]
 800c27e:	693b      	ldr	r3, [r7, #16]
 800c280:	68db      	ldr	r3, [r3, #12]
 800c282:	1ad2      	subs	r2, r2, r3
 800c284:	693b      	ldr	r3, [r7, #16]
 800c286:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c288:	693b      	ldr	r3, [r7, #16]
 800c28a:	689b      	ldr	r3, [r3, #8]
 800c28c:	461a      	mov	r2, r3
 800c28e:	6879      	ldr	r1, [r7, #4]
 800c290:	68f8      	ldr	r0, [r7, #12]
 800c292:	f000 ff4b 	bl	800d12c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c296:	2300      	movs	r3, #0
 800c298:	2200      	movs	r2, #0
 800c29a:	2100      	movs	r1, #0
 800c29c:	68f8      	ldr	r0, [r7, #12]
 800c29e:	f009 fd1c 	bl	8015cda <USBD_LL_PrepareReceive>
 800c2a2:	e03a      	b.n	800c31a <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c2a4:	693b      	ldr	r3, [r7, #16]
 800c2a6:	68da      	ldr	r2, [r3, #12]
 800c2a8:	693b      	ldr	r3, [r7, #16]
 800c2aa:	689b      	ldr	r3, [r3, #8]
 800c2ac:	429a      	cmp	r2, r3
 800c2ae:	d11c      	bne.n	800c2ea <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800c2b0:	693b      	ldr	r3, [r7, #16]
 800c2b2:	685a      	ldr	r2, [r3, #4]
 800c2b4:	693b      	ldr	r3, [r7, #16]
 800c2b6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c2b8:	429a      	cmp	r2, r3
 800c2ba:	d316      	bcc.n	800c2ea <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800c2bc:	693b      	ldr	r3, [r7, #16]
 800c2be:	685a      	ldr	r2, [r3, #4]
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c2c6:	429a      	cmp	r2, r3
 800c2c8:	d20f      	bcs.n	800c2ea <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c2ca:	2200      	movs	r2, #0
 800c2cc:	2100      	movs	r1, #0
 800c2ce:	68f8      	ldr	r0, [r7, #12]
 800c2d0:	f000 ff2c 	bl	800d12c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	2200      	movs	r2, #0
 800c2d8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c2dc:	2300      	movs	r3, #0
 800c2de:	2200      	movs	r2, #0
 800c2e0:	2100      	movs	r1, #0
 800c2e2:	68f8      	ldr	r0, [r7, #12]
 800c2e4:	f009 fcf9 	bl	8015cda <USBD_LL_PrepareReceive>
 800c2e8:	e017      	b.n	800c31a <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c2f0:	68db      	ldr	r3, [r3, #12]
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d00a      	beq.n	800c30c <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800c2fc:	2b03      	cmp	r3, #3
 800c2fe:	d105      	bne.n	800c30c <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c306:	68db      	ldr	r3, [r3, #12]
 800c308:	68f8      	ldr	r0, [r7, #12]
 800c30a:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c30c:	2180      	movs	r1, #128	; 0x80
 800c30e:	68f8      	ldr	r0, [r7, #12]
 800c310:	f009 fc39 	bl	8015b86 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c314:	68f8      	ldr	r0, [r7, #12]
 800c316:	f000 ff3e 	bl	800d196 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800c320:	2b01      	cmp	r3, #1
 800c322:	d123      	bne.n	800c36c <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800c324:	68f8      	ldr	r0, [r7, #12]
 800c326:	f7ff fe9b 	bl	800c060 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	2200      	movs	r2, #0
 800c32e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800c332:	e01b      	b.n	800c36c <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c33a:	695b      	ldr	r3, [r3, #20]
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d013      	beq.n	800c368 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800c346:	2b03      	cmp	r3, #3
 800c348:	d10e      	bne.n	800c368 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c350:	695b      	ldr	r3, [r3, #20]
 800c352:	7afa      	ldrb	r2, [r7, #11]
 800c354:	4611      	mov	r1, r2
 800c356:	68f8      	ldr	r0, [r7, #12]
 800c358:	4798      	blx	r3
 800c35a:	4603      	mov	r3, r0
 800c35c:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800c35e:	7dfb      	ldrb	r3, [r7, #23]
 800c360:	2b00      	cmp	r3, #0
 800c362:	d003      	beq.n	800c36c <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800c364:	7dfb      	ldrb	r3, [r7, #23]
 800c366:	e002      	b.n	800c36e <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800c368:	2303      	movs	r3, #3
 800c36a:	e000      	b.n	800c36e <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800c36c:	2300      	movs	r3, #0
}
 800c36e:	4618      	mov	r0, r3
 800c370:	3718      	adds	r7, #24
 800c372:	46bd      	mov	sp, r7
 800c374:	bd80      	pop	{r7, pc}

0800c376 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c376:	b580      	push	{r7, lr}
 800c378:	b082      	sub	sp, #8
 800c37a:	af00      	add	r7, sp, #0
 800c37c:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	2201      	movs	r2, #1
 800c382:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	2200      	movs	r2, #0
 800c38a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	2200      	movs	r2, #0
 800c392:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	2200      	movs	r2, #0
 800c398:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d009      	beq.n	800c3ba <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c3ac:	685b      	ldr	r3, [r3, #4]
 800c3ae:	687a      	ldr	r2, [r7, #4]
 800c3b0:	6852      	ldr	r2, [r2, #4]
 800c3b2:	b2d2      	uxtb	r2, r2
 800c3b4:	4611      	mov	r1, r2
 800c3b6:	6878      	ldr	r0, [r7, #4]
 800c3b8:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c3ba:	2340      	movs	r3, #64	; 0x40
 800c3bc:	2200      	movs	r2, #0
 800c3be:	2100      	movs	r1, #0
 800c3c0:	6878      	ldr	r0, [r7, #4]
 800c3c2:	f009 fb7c 	bl	8015abe <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	2201      	movs	r2, #1
 800c3ca:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	2240      	movs	r2, #64	; 0x40
 800c3d2:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c3d6:	2340      	movs	r3, #64	; 0x40
 800c3d8:	2200      	movs	r2, #0
 800c3da:	2180      	movs	r1, #128	; 0x80
 800c3dc:	6878      	ldr	r0, [r7, #4]
 800c3de:	f009 fb6e 	bl	8015abe <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	2201      	movs	r2, #1
 800c3e6:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	2240      	movs	r2, #64	; 0x40
 800c3ec:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800c3ee:	2300      	movs	r3, #0
}
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	3708      	adds	r7, #8
 800c3f4:	46bd      	mov	sp, r7
 800c3f6:	bd80      	pop	{r7, pc}

0800c3f8 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c3f8:	b480      	push	{r7}
 800c3fa:	b083      	sub	sp, #12
 800c3fc:	af00      	add	r7, sp, #0
 800c3fe:	6078      	str	r0, [r7, #4]
 800c400:	460b      	mov	r3, r1
 800c402:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	78fa      	ldrb	r2, [r7, #3]
 800c408:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c40a:	2300      	movs	r3, #0
}
 800c40c:	4618      	mov	r0, r3
 800c40e:	370c      	adds	r7, #12
 800c410:	46bd      	mov	sp, r7
 800c412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c416:	4770      	bx	lr

0800c418 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c418:	b480      	push	{r7}
 800c41a:	b083      	sub	sp, #12
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	2204      	movs	r2, #4
 800c430:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800c434:	2300      	movs	r3, #0
}
 800c436:	4618      	mov	r0, r3
 800c438:	370c      	adds	r7, #12
 800c43a:	46bd      	mov	sp, r7
 800c43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c440:	4770      	bx	lr

0800c442 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c442:	b480      	push	{r7}
 800c444:	b083      	sub	sp, #12
 800c446:	af00      	add	r7, sp, #0
 800c448:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c450:	2b04      	cmp	r3, #4
 800c452:	d105      	bne.n	800c460 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800c460:	2300      	movs	r3, #0
}
 800c462:	4618      	mov	r0, r3
 800c464:	370c      	adds	r7, #12
 800c466:	46bd      	mov	sp, r7
 800c468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c46c:	4770      	bx	lr

0800c46e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c46e:	b580      	push	{r7, lr}
 800c470:	b082      	sub	sp, #8
 800c472:	af00      	add	r7, sp, #0
 800c474:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c47c:	2b03      	cmp	r3, #3
 800c47e:	d10b      	bne.n	800c498 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c486:	69db      	ldr	r3, [r3, #28]
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d005      	beq.n	800c498 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c492:	69db      	ldr	r3, [r3, #28]
 800c494:	6878      	ldr	r0, [r7, #4]
 800c496:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c498:	2300      	movs	r3, #0
}
 800c49a:	4618      	mov	r0, r3
 800c49c:	3708      	adds	r7, #8
 800c49e:	46bd      	mov	sp, r7
 800c4a0:	bd80      	pop	{r7, pc}

0800c4a2 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800c4a2:	b480      	push	{r7}
 800c4a4:	b083      	sub	sp, #12
 800c4a6:	af00      	add	r7, sp, #0
 800c4a8:	6078      	str	r0, [r7, #4]
 800c4aa:	460b      	mov	r3, r1
 800c4ac:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800c4ae:	2300      	movs	r3, #0
}
 800c4b0:	4618      	mov	r0, r3
 800c4b2:	370c      	adds	r7, #12
 800c4b4:	46bd      	mov	sp, r7
 800c4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ba:	4770      	bx	lr

0800c4bc <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800c4bc:	b480      	push	{r7}
 800c4be:	b083      	sub	sp, #12
 800c4c0:	af00      	add	r7, sp, #0
 800c4c2:	6078      	str	r0, [r7, #4]
 800c4c4:	460b      	mov	r3, r1
 800c4c6:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800c4c8:	2300      	movs	r3, #0
}
 800c4ca:	4618      	mov	r0, r3
 800c4cc:	370c      	adds	r7, #12
 800c4ce:	46bd      	mov	sp, r7
 800c4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d4:	4770      	bx	lr

0800c4d6 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800c4d6:	b480      	push	{r7}
 800c4d8:	b083      	sub	sp, #12
 800c4da:	af00      	add	r7, sp, #0
 800c4dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c4de:	2300      	movs	r3, #0
}
 800c4e0:	4618      	mov	r0, r3
 800c4e2:	370c      	adds	r7, #12
 800c4e4:	46bd      	mov	sp, r7
 800c4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ea:	4770      	bx	lr

0800c4ec <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800c4ec:	b580      	push	{r7, lr}
 800c4ee:	b082      	sub	sp, #8
 800c4f0:	af00      	add	r7, sp, #0
 800c4f2:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	2201      	movs	r2, #1
 800c4f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c502:	2b00      	cmp	r3, #0
 800c504:	d009      	beq.n	800c51a <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c50c:	685b      	ldr	r3, [r3, #4]
 800c50e:	687a      	ldr	r2, [r7, #4]
 800c510:	6852      	ldr	r2, [r2, #4]
 800c512:	b2d2      	uxtb	r2, r2
 800c514:	4611      	mov	r1, r2
 800c516:	6878      	ldr	r0, [r7, #4]
 800c518:	4798      	blx	r3
  }

  return USBD_OK;
 800c51a:	2300      	movs	r3, #0
}
 800c51c:	4618      	mov	r0, r3
 800c51e:	3708      	adds	r7, #8
 800c520:	46bd      	mov	sp, r7
 800c522:	bd80      	pop	{r7, pc}

0800c524 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c524:	b480      	push	{r7}
 800c526:	b087      	sub	sp, #28
 800c528:	af00      	add	r7, sp, #0
 800c52a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c530:	697b      	ldr	r3, [r7, #20]
 800c532:	781b      	ldrb	r3, [r3, #0]
 800c534:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c536:	697b      	ldr	r3, [r7, #20]
 800c538:	3301      	adds	r3, #1
 800c53a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c53c:	697b      	ldr	r3, [r7, #20]
 800c53e:	781b      	ldrb	r3, [r3, #0]
 800c540:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c542:	8a3b      	ldrh	r3, [r7, #16]
 800c544:	021b      	lsls	r3, r3, #8
 800c546:	b21a      	sxth	r2, r3
 800c548:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c54c:	4313      	orrs	r3, r2
 800c54e:	b21b      	sxth	r3, r3
 800c550:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c552:	89fb      	ldrh	r3, [r7, #14]
}
 800c554:	4618      	mov	r0, r3
 800c556:	371c      	adds	r7, #28
 800c558:	46bd      	mov	sp, r7
 800c55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c55e:	4770      	bx	lr

0800c560 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c560:	b580      	push	{r7, lr}
 800c562:	b084      	sub	sp, #16
 800c564:	af00      	add	r7, sp, #0
 800c566:	6078      	str	r0, [r7, #4]
 800c568:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c56a:	2300      	movs	r3, #0
 800c56c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c56e:	683b      	ldr	r3, [r7, #0]
 800c570:	781b      	ldrb	r3, [r3, #0]
 800c572:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c576:	2b20      	cmp	r3, #32
 800c578:	d004      	beq.n	800c584 <USBD_StdDevReq+0x24>
 800c57a:	2b40      	cmp	r3, #64	; 0x40
 800c57c:	d002      	beq.n	800c584 <USBD_StdDevReq+0x24>
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d00a      	beq.n	800c598 <USBD_StdDevReq+0x38>
 800c582:	e050      	b.n	800c626 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c58a:	689b      	ldr	r3, [r3, #8]
 800c58c:	6839      	ldr	r1, [r7, #0]
 800c58e:	6878      	ldr	r0, [r7, #4]
 800c590:	4798      	blx	r3
 800c592:	4603      	mov	r3, r0
 800c594:	73fb      	strb	r3, [r7, #15]
    break;
 800c596:	e04b      	b.n	800c630 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800c598:	683b      	ldr	r3, [r7, #0]
 800c59a:	785b      	ldrb	r3, [r3, #1]
 800c59c:	2b09      	cmp	r3, #9
 800c59e:	d83c      	bhi.n	800c61a <USBD_StdDevReq+0xba>
 800c5a0:	a201      	add	r2, pc, #4	; (adr r2, 800c5a8 <USBD_StdDevReq+0x48>)
 800c5a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5a6:	bf00      	nop
 800c5a8:	0800c5fd 	.word	0x0800c5fd
 800c5ac:	0800c611 	.word	0x0800c611
 800c5b0:	0800c61b 	.word	0x0800c61b
 800c5b4:	0800c607 	.word	0x0800c607
 800c5b8:	0800c61b 	.word	0x0800c61b
 800c5bc:	0800c5db 	.word	0x0800c5db
 800c5c0:	0800c5d1 	.word	0x0800c5d1
 800c5c4:	0800c61b 	.word	0x0800c61b
 800c5c8:	0800c5f3 	.word	0x0800c5f3
 800c5cc:	0800c5e5 	.word	0x0800c5e5
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800c5d0:	6839      	ldr	r1, [r7, #0]
 800c5d2:	6878      	ldr	r0, [r7, #4]
 800c5d4:	f000 f9ce 	bl	800c974 <USBD_GetDescriptor>
      break;
 800c5d8:	e024      	b.n	800c624 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800c5da:	6839      	ldr	r1, [r7, #0]
 800c5dc:	6878      	ldr	r0, [r7, #4]
 800c5de:	f000 fb5d 	bl	800cc9c <USBD_SetAddress>
      break;
 800c5e2:	e01f      	b.n	800c624 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800c5e4:	6839      	ldr	r1, [r7, #0]
 800c5e6:	6878      	ldr	r0, [r7, #4]
 800c5e8:	f000 fb9a 	bl	800cd20 <USBD_SetConfig>
 800c5ec:	4603      	mov	r3, r0
 800c5ee:	73fb      	strb	r3, [r7, #15]
      break;
 800c5f0:	e018      	b.n	800c624 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800c5f2:	6839      	ldr	r1, [r7, #0]
 800c5f4:	6878      	ldr	r0, [r7, #4]
 800c5f6:	f000 fc37 	bl	800ce68 <USBD_GetConfig>
      break;
 800c5fa:	e013      	b.n	800c624 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800c5fc:	6839      	ldr	r1, [r7, #0]
 800c5fe:	6878      	ldr	r0, [r7, #4]
 800c600:	f000 fc66 	bl	800ced0 <USBD_GetStatus>
      break;
 800c604:	e00e      	b.n	800c624 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800c606:	6839      	ldr	r1, [r7, #0]
 800c608:	6878      	ldr	r0, [r7, #4]
 800c60a:	f000 fc94 	bl	800cf36 <USBD_SetFeature>
      break;
 800c60e:	e009      	b.n	800c624 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800c610:	6839      	ldr	r1, [r7, #0]
 800c612:	6878      	ldr	r0, [r7, #4]
 800c614:	f000 fca3 	bl	800cf5e <USBD_ClrFeature>
      break;
 800c618:	e004      	b.n	800c624 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800c61a:	6839      	ldr	r1, [r7, #0]
 800c61c:	6878      	ldr	r0, [r7, #4]
 800c61e:	f000 fcf9 	bl	800d014 <USBD_CtlError>
      break;
 800c622:	bf00      	nop
    }
    break;
 800c624:	e004      	b.n	800c630 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800c626:	6839      	ldr	r1, [r7, #0]
 800c628:	6878      	ldr	r0, [r7, #4]
 800c62a:	f000 fcf3 	bl	800d014 <USBD_CtlError>
    break;
 800c62e:	bf00      	nop
  }

  return ret;
 800c630:	7bfb      	ldrb	r3, [r7, #15]
}
 800c632:	4618      	mov	r0, r3
 800c634:	3710      	adds	r7, #16
 800c636:	46bd      	mov	sp, r7
 800c638:	bd80      	pop	{r7, pc}
 800c63a:	bf00      	nop

0800c63c <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c63c:	b580      	push	{r7, lr}
 800c63e:	b084      	sub	sp, #16
 800c640:	af00      	add	r7, sp, #0
 800c642:	6078      	str	r0, [r7, #4]
 800c644:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c646:	2300      	movs	r3, #0
 800c648:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c64a:	683b      	ldr	r3, [r7, #0]
 800c64c:	781b      	ldrb	r3, [r3, #0]
 800c64e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c652:	2b20      	cmp	r3, #32
 800c654:	d003      	beq.n	800c65e <USBD_StdItfReq+0x22>
 800c656:	2b40      	cmp	r3, #64	; 0x40
 800c658:	d001      	beq.n	800c65e <USBD_StdItfReq+0x22>
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d12a      	bne.n	800c6b4 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c664:	3b01      	subs	r3, #1
 800c666:	2b02      	cmp	r3, #2
 800c668:	d81d      	bhi.n	800c6a6 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c66a:	683b      	ldr	r3, [r7, #0]
 800c66c:	889b      	ldrh	r3, [r3, #4]
 800c66e:	b2db      	uxtb	r3, r3
 800c670:	2b01      	cmp	r3, #1
 800c672:	d813      	bhi.n	800c69c <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c67a:	689b      	ldr	r3, [r3, #8]
 800c67c:	6839      	ldr	r1, [r7, #0]
 800c67e:	6878      	ldr	r0, [r7, #4]
 800c680:	4798      	blx	r3
 800c682:	4603      	mov	r3, r0
 800c684:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800c686:	683b      	ldr	r3, [r7, #0]
 800c688:	88db      	ldrh	r3, [r3, #6]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d110      	bne.n	800c6b0 <USBD_StdItfReq+0x74>
 800c68e:	7bfb      	ldrb	r3, [r7, #15]
 800c690:	2b00      	cmp	r3, #0
 800c692:	d10d      	bne.n	800c6b0 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800c694:	6878      	ldr	r0, [r7, #4]
 800c696:	f000 fd6b 	bl	800d170 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800c69a:	e009      	b.n	800c6b0 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800c69c:	6839      	ldr	r1, [r7, #0]
 800c69e:	6878      	ldr	r0, [r7, #4]
 800c6a0:	f000 fcb8 	bl	800d014 <USBD_CtlError>
      break;
 800c6a4:	e004      	b.n	800c6b0 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800c6a6:	6839      	ldr	r1, [r7, #0]
 800c6a8:	6878      	ldr	r0, [r7, #4]
 800c6aa:	f000 fcb3 	bl	800d014 <USBD_CtlError>
      break;
 800c6ae:	e000      	b.n	800c6b2 <USBD_StdItfReq+0x76>
      break;
 800c6b0:	bf00      	nop
    }
    break;
 800c6b2:	e004      	b.n	800c6be <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800c6b4:	6839      	ldr	r1, [r7, #0]
 800c6b6:	6878      	ldr	r0, [r7, #4]
 800c6b8:	f000 fcac 	bl	800d014 <USBD_CtlError>
    break;
 800c6bc:	bf00      	nop
  }

  return ret;
 800c6be:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6c0:	4618      	mov	r0, r3
 800c6c2:	3710      	adds	r7, #16
 800c6c4:	46bd      	mov	sp, r7
 800c6c6:	bd80      	pop	{r7, pc}

0800c6c8 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c6c8:	b580      	push	{r7, lr}
 800c6ca:	b084      	sub	sp, #16
 800c6cc:	af00      	add	r7, sp, #0
 800c6ce:	6078      	str	r0, [r7, #4]
 800c6d0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800c6d2:	2300      	movs	r3, #0
 800c6d4:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800c6d6:	683b      	ldr	r3, [r7, #0]
 800c6d8:	889b      	ldrh	r3, [r3, #4]
 800c6da:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c6dc:	683b      	ldr	r3, [r7, #0]
 800c6de:	781b      	ldrb	r3, [r3, #0]
 800c6e0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c6e4:	2b20      	cmp	r3, #32
 800c6e6:	d004      	beq.n	800c6f2 <USBD_StdEPReq+0x2a>
 800c6e8:	2b40      	cmp	r3, #64	; 0x40
 800c6ea:	d002      	beq.n	800c6f2 <USBD_StdEPReq+0x2a>
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d00a      	beq.n	800c706 <USBD_StdEPReq+0x3e>
 800c6f0:	e135      	b.n	800c95e <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c6f8:	689b      	ldr	r3, [r3, #8]
 800c6fa:	6839      	ldr	r1, [r7, #0]
 800c6fc:	6878      	ldr	r0, [r7, #4]
 800c6fe:	4798      	blx	r3
 800c700:	4603      	mov	r3, r0
 800c702:	73fb      	strb	r3, [r7, #15]
    break;
 800c704:	e130      	b.n	800c968 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800c706:	683b      	ldr	r3, [r7, #0]
 800c708:	785b      	ldrb	r3, [r3, #1]
 800c70a:	2b01      	cmp	r3, #1
 800c70c:	d03e      	beq.n	800c78c <USBD_StdEPReq+0xc4>
 800c70e:	2b03      	cmp	r3, #3
 800c710:	d002      	beq.n	800c718 <USBD_StdEPReq+0x50>
 800c712:	2b00      	cmp	r3, #0
 800c714:	d077      	beq.n	800c806 <USBD_StdEPReq+0x13e>
 800c716:	e11c      	b.n	800c952 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c71e:	2b02      	cmp	r3, #2
 800c720:	d002      	beq.n	800c728 <USBD_StdEPReq+0x60>
 800c722:	2b03      	cmp	r3, #3
 800c724:	d015      	beq.n	800c752 <USBD_StdEPReq+0x8a>
 800c726:	e02b      	b.n	800c780 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c728:	7bbb      	ldrb	r3, [r7, #14]
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d00c      	beq.n	800c748 <USBD_StdEPReq+0x80>
 800c72e:	7bbb      	ldrb	r3, [r7, #14]
 800c730:	2b80      	cmp	r3, #128	; 0x80
 800c732:	d009      	beq.n	800c748 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800c734:	7bbb      	ldrb	r3, [r7, #14]
 800c736:	4619      	mov	r1, r3
 800c738:	6878      	ldr	r0, [r7, #4]
 800c73a:	f009 fa24 	bl	8015b86 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c73e:	2180      	movs	r1, #128	; 0x80
 800c740:	6878      	ldr	r0, [r7, #4]
 800c742:	f009 fa20 	bl	8015b86 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800c746:	e020      	b.n	800c78a <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 800c748:	6839      	ldr	r1, [r7, #0]
 800c74a:	6878      	ldr	r0, [r7, #4]
 800c74c:	f000 fc62 	bl	800d014 <USBD_CtlError>
        break;
 800c750:	e01b      	b.n	800c78a <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800c752:	683b      	ldr	r3, [r7, #0]
 800c754:	885b      	ldrh	r3, [r3, #2]
 800c756:	2b00      	cmp	r3, #0
 800c758:	d10e      	bne.n	800c778 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c75a:	7bbb      	ldrb	r3, [r7, #14]
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d00b      	beq.n	800c778 <USBD_StdEPReq+0xb0>
 800c760:	7bbb      	ldrb	r3, [r7, #14]
 800c762:	2b80      	cmp	r3, #128	; 0x80
 800c764:	d008      	beq.n	800c778 <USBD_StdEPReq+0xb0>
 800c766:	683b      	ldr	r3, [r7, #0]
 800c768:	88db      	ldrh	r3, [r3, #6]
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d104      	bne.n	800c778 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800c76e:	7bbb      	ldrb	r3, [r7, #14]
 800c770:	4619      	mov	r1, r3
 800c772:	6878      	ldr	r0, [r7, #4]
 800c774:	f009 fa07 	bl	8015b86 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800c778:	6878      	ldr	r0, [r7, #4]
 800c77a:	f000 fcf9 	bl	800d170 <USBD_CtlSendStatus>

        break;
 800c77e:	e004      	b.n	800c78a <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800c780:	6839      	ldr	r1, [r7, #0]
 800c782:	6878      	ldr	r0, [r7, #4]
 800c784:	f000 fc46 	bl	800d014 <USBD_CtlError>
        break;
 800c788:	bf00      	nop
      }
      break;
 800c78a:	e0e7      	b.n	800c95c <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c792:	2b02      	cmp	r3, #2
 800c794:	d002      	beq.n	800c79c <USBD_StdEPReq+0xd4>
 800c796:	2b03      	cmp	r3, #3
 800c798:	d015      	beq.n	800c7c6 <USBD_StdEPReq+0xfe>
 800c79a:	e02d      	b.n	800c7f8 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c79c:	7bbb      	ldrb	r3, [r7, #14]
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d00c      	beq.n	800c7bc <USBD_StdEPReq+0xf4>
 800c7a2:	7bbb      	ldrb	r3, [r7, #14]
 800c7a4:	2b80      	cmp	r3, #128	; 0x80
 800c7a6:	d009      	beq.n	800c7bc <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800c7a8:	7bbb      	ldrb	r3, [r7, #14]
 800c7aa:	4619      	mov	r1, r3
 800c7ac:	6878      	ldr	r0, [r7, #4]
 800c7ae:	f009 f9ea 	bl	8015b86 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c7b2:	2180      	movs	r1, #128	; 0x80
 800c7b4:	6878      	ldr	r0, [r7, #4]
 800c7b6:	f009 f9e6 	bl	8015b86 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800c7ba:	e023      	b.n	800c804 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 800c7bc:	6839      	ldr	r1, [r7, #0]
 800c7be:	6878      	ldr	r0, [r7, #4]
 800c7c0:	f000 fc28 	bl	800d014 <USBD_CtlError>
        break;
 800c7c4:	e01e      	b.n	800c804 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800c7c6:	683b      	ldr	r3, [r7, #0]
 800c7c8:	885b      	ldrh	r3, [r3, #2]
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d119      	bne.n	800c802 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800c7ce:	7bbb      	ldrb	r3, [r7, #14]
 800c7d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d004      	beq.n	800c7e2 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c7d8:	7bbb      	ldrb	r3, [r7, #14]
 800c7da:	4619      	mov	r1, r3
 800c7dc:	6878      	ldr	r0, [r7, #4]
 800c7de:	f009 f9f1 	bl	8015bc4 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800c7e2:	6878      	ldr	r0, [r7, #4]
 800c7e4:	f000 fcc4 	bl	800d170 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c7ee:	689b      	ldr	r3, [r3, #8]
 800c7f0:	6839      	ldr	r1, [r7, #0]
 800c7f2:	6878      	ldr	r0, [r7, #4]
 800c7f4:	4798      	blx	r3
        }
        break;
 800c7f6:	e004      	b.n	800c802 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 800c7f8:	6839      	ldr	r1, [r7, #0]
 800c7fa:	6878      	ldr	r0, [r7, #4]
 800c7fc:	f000 fc0a 	bl	800d014 <USBD_CtlError>
        break;
 800c800:	e000      	b.n	800c804 <USBD_StdEPReq+0x13c>
        break;
 800c802:	bf00      	nop
      }
      break;
 800c804:	e0aa      	b.n	800c95c <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c80c:	2b02      	cmp	r3, #2
 800c80e:	d002      	beq.n	800c816 <USBD_StdEPReq+0x14e>
 800c810:	2b03      	cmp	r3, #3
 800c812:	d032      	beq.n	800c87a <USBD_StdEPReq+0x1b2>
 800c814:	e097      	b.n	800c946 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c816:	7bbb      	ldrb	r3, [r7, #14]
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d007      	beq.n	800c82c <USBD_StdEPReq+0x164>
 800c81c:	7bbb      	ldrb	r3, [r7, #14]
 800c81e:	2b80      	cmp	r3, #128	; 0x80
 800c820:	d004      	beq.n	800c82c <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800c822:	6839      	ldr	r1, [r7, #0]
 800c824:	6878      	ldr	r0, [r7, #4]
 800c826:	f000 fbf5 	bl	800d014 <USBD_CtlError>
          break;
 800c82a:	e091      	b.n	800c950 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c82c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c830:	2b00      	cmp	r3, #0
 800c832:	da0b      	bge.n	800c84c <USBD_StdEPReq+0x184>
 800c834:	7bbb      	ldrb	r3, [r7, #14]
 800c836:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c83a:	4613      	mov	r3, r2
 800c83c:	009b      	lsls	r3, r3, #2
 800c83e:	4413      	add	r3, r2
 800c840:	009b      	lsls	r3, r3, #2
 800c842:	3310      	adds	r3, #16
 800c844:	687a      	ldr	r2, [r7, #4]
 800c846:	4413      	add	r3, r2
 800c848:	3304      	adds	r3, #4
 800c84a:	e00b      	b.n	800c864 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800c84c:	7bbb      	ldrb	r3, [r7, #14]
 800c84e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c852:	4613      	mov	r3, r2
 800c854:	009b      	lsls	r3, r3, #2
 800c856:	4413      	add	r3, r2
 800c858:	009b      	lsls	r3, r3, #2
 800c85a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c85e:	687a      	ldr	r2, [r7, #4]
 800c860:	4413      	add	r3, r2
 800c862:	3304      	adds	r3, #4
 800c864:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800c866:	68bb      	ldr	r3, [r7, #8]
 800c868:	2200      	movs	r2, #0
 800c86a:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c86c:	68bb      	ldr	r3, [r7, #8]
 800c86e:	2202      	movs	r2, #2
 800c870:	4619      	mov	r1, r3
 800c872:	6878      	ldr	r0, [r7, #4]
 800c874:	f000 fc3f 	bl	800d0f6 <USBD_CtlSendData>
        break;
 800c878:	e06a      	b.n	800c950 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800c87a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c87e:	2b00      	cmp	r3, #0
 800c880:	da11      	bge.n	800c8a6 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c882:	7bbb      	ldrb	r3, [r7, #14]
 800c884:	f003 020f 	and.w	r2, r3, #15
 800c888:	6879      	ldr	r1, [r7, #4]
 800c88a:	4613      	mov	r3, r2
 800c88c:	009b      	lsls	r3, r3, #2
 800c88e:	4413      	add	r3, r2
 800c890:	009b      	lsls	r3, r3, #2
 800c892:	440b      	add	r3, r1
 800c894:	3324      	adds	r3, #36	; 0x24
 800c896:	881b      	ldrh	r3, [r3, #0]
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d117      	bne.n	800c8cc <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800c89c:	6839      	ldr	r1, [r7, #0]
 800c89e:	6878      	ldr	r0, [r7, #4]
 800c8a0:	f000 fbb8 	bl	800d014 <USBD_CtlError>
            break;
 800c8a4:	e054      	b.n	800c950 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c8a6:	7bbb      	ldrb	r3, [r7, #14]
 800c8a8:	f003 020f 	and.w	r2, r3, #15
 800c8ac:	6879      	ldr	r1, [r7, #4]
 800c8ae:	4613      	mov	r3, r2
 800c8b0:	009b      	lsls	r3, r3, #2
 800c8b2:	4413      	add	r3, r2
 800c8b4:	009b      	lsls	r3, r3, #2
 800c8b6:	440b      	add	r3, r1
 800c8b8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c8bc:	881b      	ldrh	r3, [r3, #0]
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d104      	bne.n	800c8cc <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800c8c2:	6839      	ldr	r1, [r7, #0]
 800c8c4:	6878      	ldr	r0, [r7, #4]
 800c8c6:	f000 fba5 	bl	800d014 <USBD_CtlError>
            break;
 800c8ca:	e041      	b.n	800c950 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c8cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	da0b      	bge.n	800c8ec <USBD_StdEPReq+0x224>
 800c8d4:	7bbb      	ldrb	r3, [r7, #14]
 800c8d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c8da:	4613      	mov	r3, r2
 800c8dc:	009b      	lsls	r3, r3, #2
 800c8de:	4413      	add	r3, r2
 800c8e0:	009b      	lsls	r3, r3, #2
 800c8e2:	3310      	adds	r3, #16
 800c8e4:	687a      	ldr	r2, [r7, #4]
 800c8e6:	4413      	add	r3, r2
 800c8e8:	3304      	adds	r3, #4
 800c8ea:	e00b      	b.n	800c904 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800c8ec:	7bbb      	ldrb	r3, [r7, #14]
 800c8ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c8f2:	4613      	mov	r3, r2
 800c8f4:	009b      	lsls	r3, r3, #2
 800c8f6:	4413      	add	r3, r2
 800c8f8:	009b      	lsls	r3, r3, #2
 800c8fa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c8fe:	687a      	ldr	r2, [r7, #4]
 800c900:	4413      	add	r3, r2
 800c902:	3304      	adds	r3, #4
 800c904:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c906:	7bbb      	ldrb	r3, [r7, #14]
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d002      	beq.n	800c912 <USBD_StdEPReq+0x24a>
 800c90c:	7bbb      	ldrb	r3, [r7, #14]
 800c90e:	2b80      	cmp	r3, #128	; 0x80
 800c910:	d103      	bne.n	800c91a <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800c912:	68bb      	ldr	r3, [r7, #8]
 800c914:	2200      	movs	r2, #0
 800c916:	601a      	str	r2, [r3, #0]
 800c918:	e00e      	b.n	800c938 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c91a:	7bbb      	ldrb	r3, [r7, #14]
 800c91c:	4619      	mov	r1, r3
 800c91e:	6878      	ldr	r0, [r7, #4]
 800c920:	f009 f96f 	bl	8015c02 <USBD_LL_IsStallEP>
 800c924:	4603      	mov	r3, r0
 800c926:	2b00      	cmp	r3, #0
 800c928:	d003      	beq.n	800c932 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 800c92a:	68bb      	ldr	r3, [r7, #8]
 800c92c:	2201      	movs	r2, #1
 800c92e:	601a      	str	r2, [r3, #0]
 800c930:	e002      	b.n	800c938 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800c932:	68bb      	ldr	r3, [r7, #8]
 800c934:	2200      	movs	r2, #0
 800c936:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c938:	68bb      	ldr	r3, [r7, #8]
 800c93a:	2202      	movs	r2, #2
 800c93c:	4619      	mov	r1, r3
 800c93e:	6878      	ldr	r0, [r7, #4]
 800c940:	f000 fbd9 	bl	800d0f6 <USBD_CtlSendData>
          break;
 800c944:	e004      	b.n	800c950 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 800c946:	6839      	ldr	r1, [r7, #0]
 800c948:	6878      	ldr	r0, [r7, #4]
 800c94a:	f000 fb63 	bl	800d014 <USBD_CtlError>
        break;
 800c94e:	bf00      	nop
      }
      break;
 800c950:	e004      	b.n	800c95c <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800c952:	6839      	ldr	r1, [r7, #0]
 800c954:	6878      	ldr	r0, [r7, #4]
 800c956:	f000 fb5d 	bl	800d014 <USBD_CtlError>
      break;
 800c95a:	bf00      	nop
    }
    break;
 800c95c:	e004      	b.n	800c968 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800c95e:	6839      	ldr	r1, [r7, #0]
 800c960:	6878      	ldr	r0, [r7, #4]
 800c962:	f000 fb57 	bl	800d014 <USBD_CtlError>
    break;
 800c966:	bf00      	nop
  }

  return ret;
 800c968:	7bfb      	ldrb	r3, [r7, #15]
}
 800c96a:	4618      	mov	r0, r3
 800c96c:	3710      	adds	r7, #16
 800c96e:	46bd      	mov	sp, r7
 800c970:	bd80      	pop	{r7, pc}
	...

0800c974 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c974:	b580      	push	{r7, lr}
 800c976:	b084      	sub	sp, #16
 800c978:	af00      	add	r7, sp, #0
 800c97a:	6078      	str	r0, [r7, #4]
 800c97c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c97e:	2300      	movs	r3, #0
 800c980:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c982:	2300      	movs	r3, #0
 800c984:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c986:	2300      	movs	r3, #0
 800c988:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c98a:	683b      	ldr	r3, [r7, #0]
 800c98c:	885b      	ldrh	r3, [r3, #2]
 800c98e:	0a1b      	lsrs	r3, r3, #8
 800c990:	b29b      	uxth	r3, r3
 800c992:	3b01      	subs	r3, #1
 800c994:	2b0e      	cmp	r3, #14
 800c996:	f200 8152 	bhi.w	800cc3e <USBD_GetDescriptor+0x2ca>
 800c99a:	a201      	add	r2, pc, #4	; (adr r2, 800c9a0 <USBD_GetDescriptor+0x2c>)
 800c99c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9a0:	0800ca11 	.word	0x0800ca11
 800c9a4:	0800ca29 	.word	0x0800ca29
 800c9a8:	0800ca69 	.word	0x0800ca69
 800c9ac:	0800cc3f 	.word	0x0800cc3f
 800c9b0:	0800cc3f 	.word	0x0800cc3f
 800c9b4:	0800cbdf 	.word	0x0800cbdf
 800c9b8:	0800cc0b 	.word	0x0800cc0b
 800c9bc:	0800cc3f 	.word	0x0800cc3f
 800c9c0:	0800cc3f 	.word	0x0800cc3f
 800c9c4:	0800cc3f 	.word	0x0800cc3f
 800c9c8:	0800cc3f 	.word	0x0800cc3f
 800c9cc:	0800cc3f 	.word	0x0800cc3f
 800c9d0:	0800cc3f 	.word	0x0800cc3f
 800c9d4:	0800cc3f 	.word	0x0800cc3f
 800c9d8:	0800c9dd 	.word	0x0800c9dd
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c9e2:	69db      	ldr	r3, [r3, #28]
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d00b      	beq.n	800ca00 <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c9ee:	69db      	ldr	r3, [r3, #28]
 800c9f0:	687a      	ldr	r2, [r7, #4]
 800c9f2:	7c12      	ldrb	r2, [r2, #16]
 800c9f4:	f107 0108 	add.w	r1, r7, #8
 800c9f8:	4610      	mov	r0, r2
 800c9fa:	4798      	blx	r3
 800c9fc:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800c9fe:	e126      	b.n	800cc4e <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800ca00:	6839      	ldr	r1, [r7, #0]
 800ca02:	6878      	ldr	r0, [r7, #4]
 800ca04:	f000 fb06 	bl	800d014 <USBD_CtlError>
      err++;
 800ca08:	7afb      	ldrb	r3, [r7, #11]
 800ca0a:	3301      	adds	r3, #1
 800ca0c:	72fb      	strb	r3, [r7, #11]
    break;
 800ca0e:	e11e      	b.n	800cc4e <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	687a      	ldr	r2, [r7, #4]
 800ca1a:	7c12      	ldrb	r2, [r2, #16]
 800ca1c:	f107 0108 	add.w	r1, r7, #8
 800ca20:	4610      	mov	r0, r2
 800ca22:	4798      	blx	r3
 800ca24:	60f8      	str	r0, [r7, #12]
    break;
 800ca26:	e112      	b.n	800cc4e <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	7c1b      	ldrb	r3, [r3, #16]
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d10d      	bne.n	800ca4c <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ca36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca38:	f107 0208 	add.w	r2, r7, #8
 800ca3c:	4610      	mov	r0, r2
 800ca3e:	4798      	blx	r3
 800ca40:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	3301      	adds	r3, #1
 800ca46:	2202      	movs	r2, #2
 800ca48:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800ca4a:	e100      	b.n	800cc4e <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ca52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca54:	f107 0208 	add.w	r2, r7, #8
 800ca58:	4610      	mov	r0, r2
 800ca5a:	4798      	blx	r3
 800ca5c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	3301      	adds	r3, #1
 800ca62:	2202      	movs	r2, #2
 800ca64:	701a      	strb	r2, [r3, #0]
    break;
 800ca66:	e0f2      	b.n	800cc4e <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800ca68:	683b      	ldr	r3, [r7, #0]
 800ca6a:	885b      	ldrh	r3, [r3, #2]
 800ca6c:	b2db      	uxtb	r3, r3
 800ca6e:	2b05      	cmp	r3, #5
 800ca70:	f200 80ac 	bhi.w	800cbcc <USBD_GetDescriptor+0x258>
 800ca74:	a201      	add	r2, pc, #4	; (adr r2, 800ca7c <USBD_GetDescriptor+0x108>)
 800ca76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca7a:	bf00      	nop
 800ca7c:	0800ca95 	.word	0x0800ca95
 800ca80:	0800cac9 	.word	0x0800cac9
 800ca84:	0800cafd 	.word	0x0800cafd
 800ca88:	0800cb31 	.word	0x0800cb31
 800ca8c:	0800cb65 	.word	0x0800cb65
 800ca90:	0800cb99 	.word	0x0800cb99
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ca9a:	685b      	ldr	r3, [r3, #4]
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d00b      	beq.n	800cab8 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800caa6:	685b      	ldr	r3, [r3, #4]
 800caa8:	687a      	ldr	r2, [r7, #4]
 800caaa:	7c12      	ldrb	r2, [r2, #16]
 800caac:	f107 0108 	add.w	r1, r7, #8
 800cab0:	4610      	mov	r0, r2
 800cab2:	4798      	blx	r3
 800cab4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cab6:	e091      	b.n	800cbdc <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800cab8:	6839      	ldr	r1, [r7, #0]
 800caba:	6878      	ldr	r0, [r7, #4]
 800cabc:	f000 faaa 	bl	800d014 <USBD_CtlError>
        err++;
 800cac0:	7afb      	ldrb	r3, [r7, #11]
 800cac2:	3301      	adds	r3, #1
 800cac4:	72fb      	strb	r3, [r7, #11]
      break;
 800cac6:	e089      	b.n	800cbdc <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cace:	689b      	ldr	r3, [r3, #8]
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d00b      	beq.n	800caec <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cada:	689b      	ldr	r3, [r3, #8]
 800cadc:	687a      	ldr	r2, [r7, #4]
 800cade:	7c12      	ldrb	r2, [r2, #16]
 800cae0:	f107 0108 	add.w	r1, r7, #8
 800cae4:	4610      	mov	r0, r2
 800cae6:	4798      	blx	r3
 800cae8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800caea:	e077      	b.n	800cbdc <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800caec:	6839      	ldr	r1, [r7, #0]
 800caee:	6878      	ldr	r0, [r7, #4]
 800caf0:	f000 fa90 	bl	800d014 <USBD_CtlError>
        err++;
 800caf4:	7afb      	ldrb	r3, [r7, #11]
 800caf6:	3301      	adds	r3, #1
 800caf8:	72fb      	strb	r3, [r7, #11]
      break;
 800cafa:	e06f      	b.n	800cbdc <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cb02:	68db      	ldr	r3, [r3, #12]
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d00b      	beq.n	800cb20 <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cb0e:	68db      	ldr	r3, [r3, #12]
 800cb10:	687a      	ldr	r2, [r7, #4]
 800cb12:	7c12      	ldrb	r2, [r2, #16]
 800cb14:	f107 0108 	add.w	r1, r7, #8
 800cb18:	4610      	mov	r0, r2
 800cb1a:	4798      	blx	r3
 800cb1c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cb1e:	e05d      	b.n	800cbdc <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800cb20:	6839      	ldr	r1, [r7, #0]
 800cb22:	6878      	ldr	r0, [r7, #4]
 800cb24:	f000 fa76 	bl	800d014 <USBD_CtlError>
        err++;
 800cb28:	7afb      	ldrb	r3, [r7, #11]
 800cb2a:	3301      	adds	r3, #1
 800cb2c:	72fb      	strb	r3, [r7, #11]
      break;
 800cb2e:	e055      	b.n	800cbdc <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cb36:	691b      	ldr	r3, [r3, #16]
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d00b      	beq.n	800cb54 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cb42:	691b      	ldr	r3, [r3, #16]
 800cb44:	687a      	ldr	r2, [r7, #4]
 800cb46:	7c12      	ldrb	r2, [r2, #16]
 800cb48:	f107 0108 	add.w	r1, r7, #8
 800cb4c:	4610      	mov	r0, r2
 800cb4e:	4798      	blx	r3
 800cb50:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cb52:	e043      	b.n	800cbdc <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800cb54:	6839      	ldr	r1, [r7, #0]
 800cb56:	6878      	ldr	r0, [r7, #4]
 800cb58:	f000 fa5c 	bl	800d014 <USBD_CtlError>
        err++;
 800cb5c:	7afb      	ldrb	r3, [r7, #11]
 800cb5e:	3301      	adds	r3, #1
 800cb60:	72fb      	strb	r3, [r7, #11]
      break;
 800cb62:	e03b      	b.n	800cbdc <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cb6a:	695b      	ldr	r3, [r3, #20]
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d00b      	beq.n	800cb88 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cb76:	695b      	ldr	r3, [r3, #20]
 800cb78:	687a      	ldr	r2, [r7, #4]
 800cb7a:	7c12      	ldrb	r2, [r2, #16]
 800cb7c:	f107 0108 	add.w	r1, r7, #8
 800cb80:	4610      	mov	r0, r2
 800cb82:	4798      	blx	r3
 800cb84:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cb86:	e029      	b.n	800cbdc <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800cb88:	6839      	ldr	r1, [r7, #0]
 800cb8a:	6878      	ldr	r0, [r7, #4]
 800cb8c:	f000 fa42 	bl	800d014 <USBD_CtlError>
        err++;
 800cb90:	7afb      	ldrb	r3, [r7, #11]
 800cb92:	3301      	adds	r3, #1
 800cb94:	72fb      	strb	r3, [r7, #11]
      break;
 800cb96:	e021      	b.n	800cbdc <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cb9e:	699b      	ldr	r3, [r3, #24]
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d00b      	beq.n	800cbbc <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cbaa:	699b      	ldr	r3, [r3, #24]
 800cbac:	687a      	ldr	r2, [r7, #4]
 800cbae:	7c12      	ldrb	r2, [r2, #16]
 800cbb0:	f107 0108 	add.w	r1, r7, #8
 800cbb4:	4610      	mov	r0, r2
 800cbb6:	4798      	blx	r3
 800cbb8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cbba:	e00f      	b.n	800cbdc <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800cbbc:	6839      	ldr	r1, [r7, #0]
 800cbbe:	6878      	ldr	r0, [r7, #4]
 800cbc0:	f000 fa28 	bl	800d014 <USBD_CtlError>
        err++;
 800cbc4:	7afb      	ldrb	r3, [r7, #11]
 800cbc6:	3301      	adds	r3, #1
 800cbc8:	72fb      	strb	r3, [r7, #11]
      break;
 800cbca:	e007      	b.n	800cbdc <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800cbcc:	6839      	ldr	r1, [r7, #0]
 800cbce:	6878      	ldr	r0, [r7, #4]
 800cbd0:	f000 fa20 	bl	800d014 <USBD_CtlError>
      err++;
 800cbd4:	7afb      	ldrb	r3, [r7, #11]
 800cbd6:	3301      	adds	r3, #1
 800cbd8:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800cbda:	bf00      	nop
    }
    break;
 800cbdc:	e037      	b.n	800cc4e <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	7c1b      	ldrb	r3, [r3, #16]
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d109      	bne.n	800cbfa <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cbec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cbee:	f107 0208 	add.w	r2, r7, #8
 800cbf2:	4610      	mov	r0, r2
 800cbf4:	4798      	blx	r3
 800cbf6:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800cbf8:	e029      	b.n	800cc4e <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800cbfa:	6839      	ldr	r1, [r7, #0]
 800cbfc:	6878      	ldr	r0, [r7, #4]
 800cbfe:	f000 fa09 	bl	800d014 <USBD_CtlError>
      err++;
 800cc02:	7afb      	ldrb	r3, [r7, #11]
 800cc04:	3301      	adds	r3, #1
 800cc06:	72fb      	strb	r3, [r7, #11]
    break;
 800cc08:	e021      	b.n	800cc4e <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	7c1b      	ldrb	r3, [r3, #16]
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d10d      	bne.n	800cc2e <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cc18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc1a:	f107 0208 	add.w	r2, r7, #8
 800cc1e:	4610      	mov	r0, r2
 800cc20:	4798      	blx	r3
 800cc22:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	3301      	adds	r3, #1
 800cc28:	2207      	movs	r2, #7
 800cc2a:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800cc2c:	e00f      	b.n	800cc4e <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800cc2e:	6839      	ldr	r1, [r7, #0]
 800cc30:	6878      	ldr	r0, [r7, #4]
 800cc32:	f000 f9ef 	bl	800d014 <USBD_CtlError>
      err++;
 800cc36:	7afb      	ldrb	r3, [r7, #11]
 800cc38:	3301      	adds	r3, #1
 800cc3a:	72fb      	strb	r3, [r7, #11]
    break;
 800cc3c:	e007      	b.n	800cc4e <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 800cc3e:	6839      	ldr	r1, [r7, #0]
 800cc40:	6878      	ldr	r0, [r7, #4]
 800cc42:	f000 f9e7 	bl	800d014 <USBD_CtlError>
    err++;
 800cc46:	7afb      	ldrb	r3, [r7, #11]
 800cc48:	3301      	adds	r3, #1
 800cc4a:	72fb      	strb	r3, [r7, #11]
    break;
 800cc4c:	bf00      	nop
  }

  if (err != 0U)
 800cc4e:	7afb      	ldrb	r3, [r7, #11]
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d11e      	bne.n	800cc92 <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800cc54:	683b      	ldr	r3, [r7, #0]
 800cc56:	88db      	ldrh	r3, [r3, #6]
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d016      	beq.n	800cc8a <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 800cc5c:	893b      	ldrh	r3, [r7, #8]
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d00e      	beq.n	800cc80 <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 800cc62:	683b      	ldr	r3, [r7, #0]
 800cc64:	88da      	ldrh	r2, [r3, #6]
 800cc66:	893b      	ldrh	r3, [r7, #8]
 800cc68:	4293      	cmp	r3, r2
 800cc6a:	bf28      	it	cs
 800cc6c:	4613      	movcs	r3, r2
 800cc6e:	b29b      	uxth	r3, r3
 800cc70:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800cc72:	893b      	ldrh	r3, [r7, #8]
 800cc74:	461a      	mov	r2, r3
 800cc76:	68f9      	ldr	r1, [r7, #12]
 800cc78:	6878      	ldr	r0, [r7, #4]
 800cc7a:	f000 fa3c 	bl	800d0f6 <USBD_CtlSendData>
 800cc7e:	e009      	b.n	800cc94 <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800cc80:	6839      	ldr	r1, [r7, #0]
 800cc82:	6878      	ldr	r0, [r7, #4]
 800cc84:	f000 f9c6 	bl	800d014 <USBD_CtlError>
 800cc88:	e004      	b.n	800cc94 <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800cc8a:	6878      	ldr	r0, [r7, #4]
 800cc8c:	f000 fa70 	bl	800d170 <USBD_CtlSendStatus>
 800cc90:	e000      	b.n	800cc94 <USBD_GetDescriptor+0x320>
    return;
 800cc92:	bf00      	nop
    }
  }
}
 800cc94:	3710      	adds	r7, #16
 800cc96:	46bd      	mov	sp, r7
 800cc98:	bd80      	pop	{r7, pc}
 800cc9a:	bf00      	nop

0800cc9c <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cc9c:	b580      	push	{r7, lr}
 800cc9e:	b084      	sub	sp, #16
 800cca0:	af00      	add	r7, sp, #0
 800cca2:	6078      	str	r0, [r7, #4]
 800cca4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800cca6:	683b      	ldr	r3, [r7, #0]
 800cca8:	889b      	ldrh	r3, [r3, #4]
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d130      	bne.n	800cd10 <USBD_SetAddress+0x74>
 800ccae:	683b      	ldr	r3, [r7, #0]
 800ccb0:	88db      	ldrh	r3, [r3, #6]
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d12c      	bne.n	800cd10 <USBD_SetAddress+0x74>
 800ccb6:	683b      	ldr	r3, [r7, #0]
 800ccb8:	885b      	ldrh	r3, [r3, #2]
 800ccba:	2b7f      	cmp	r3, #127	; 0x7f
 800ccbc:	d828      	bhi.n	800cd10 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ccbe:	683b      	ldr	r3, [r7, #0]
 800ccc0:	885b      	ldrh	r3, [r3, #2]
 800ccc2:	b2db      	uxtb	r3, r3
 800ccc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ccc8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ccd0:	2b03      	cmp	r3, #3
 800ccd2:	d104      	bne.n	800ccde <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800ccd4:	6839      	ldr	r1, [r7, #0]
 800ccd6:	6878      	ldr	r0, [r7, #4]
 800ccd8:	f000 f99c 	bl	800d014 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ccdc:	e01c      	b.n	800cd18 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	7bfa      	ldrb	r2, [r7, #15]
 800cce2:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800cce6:	7bfb      	ldrb	r3, [r7, #15]
 800cce8:	4619      	mov	r1, r3
 800ccea:	6878      	ldr	r0, [r7, #4]
 800ccec:	f008 ffb5 	bl	8015c5a <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ccf0:	6878      	ldr	r0, [r7, #4]
 800ccf2:	f000 fa3d 	bl	800d170 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ccf6:	7bfb      	ldrb	r3, [r7, #15]
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d004      	beq.n	800cd06 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	2202      	movs	r2, #2
 800cd00:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cd04:	e008      	b.n	800cd18 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	2201      	movs	r2, #1
 800cd0a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cd0e:	e003      	b.n	800cd18 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800cd10:	6839      	ldr	r1, [r7, #0]
 800cd12:	6878      	ldr	r0, [r7, #4]
 800cd14:	f000 f97e 	bl	800d014 <USBD_CtlError>
  }
}
 800cd18:	bf00      	nop
 800cd1a:	3710      	adds	r7, #16
 800cd1c:	46bd      	mov	sp, r7
 800cd1e:	bd80      	pop	{r7, pc}

0800cd20 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cd20:	b580      	push	{r7, lr}
 800cd22:	b084      	sub	sp, #16
 800cd24:	af00      	add	r7, sp, #0
 800cd26:	6078      	str	r0, [r7, #4]
 800cd28:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cd2a:	2300      	movs	r3, #0
 800cd2c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800cd2e:	683b      	ldr	r3, [r7, #0]
 800cd30:	885b      	ldrh	r3, [r3, #2]
 800cd32:	b2da      	uxtb	r2, r3
 800cd34:	4b4b      	ldr	r3, [pc, #300]	; (800ce64 <USBD_SetConfig+0x144>)
 800cd36:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800cd38:	4b4a      	ldr	r3, [pc, #296]	; (800ce64 <USBD_SetConfig+0x144>)
 800cd3a:	781b      	ldrb	r3, [r3, #0]
 800cd3c:	2b01      	cmp	r3, #1
 800cd3e:	d905      	bls.n	800cd4c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800cd40:	6839      	ldr	r1, [r7, #0]
 800cd42:	6878      	ldr	r0, [r7, #4]
 800cd44:	f000 f966 	bl	800d014 <USBD_CtlError>
    return USBD_FAIL;
 800cd48:	2303      	movs	r3, #3
 800cd4a:	e087      	b.n	800ce5c <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cd52:	2b02      	cmp	r3, #2
 800cd54:	d002      	beq.n	800cd5c <USBD_SetConfig+0x3c>
 800cd56:	2b03      	cmp	r3, #3
 800cd58:	d025      	beq.n	800cda6 <USBD_SetConfig+0x86>
 800cd5a:	e071      	b.n	800ce40 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800cd5c:	4b41      	ldr	r3, [pc, #260]	; (800ce64 <USBD_SetConfig+0x144>)
 800cd5e:	781b      	ldrb	r3, [r3, #0]
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d01c      	beq.n	800cd9e <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800cd64:	4b3f      	ldr	r3, [pc, #252]	; (800ce64 <USBD_SetConfig+0x144>)
 800cd66:	781b      	ldrb	r3, [r3, #0]
 800cd68:	461a      	mov	r2, r3
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800cd6e:	4b3d      	ldr	r3, [pc, #244]	; (800ce64 <USBD_SetConfig+0x144>)
 800cd70:	781b      	ldrb	r3, [r3, #0]
 800cd72:	4619      	mov	r1, r3
 800cd74:	6878      	ldr	r0, [r7, #4]
 800cd76:	f7ff f97e 	bl	800c076 <USBD_SetClassConfig>
 800cd7a:	4603      	mov	r3, r0
 800cd7c:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800cd7e:	7bfb      	ldrb	r3, [r7, #15]
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d004      	beq.n	800cd8e <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800cd84:	6839      	ldr	r1, [r7, #0]
 800cd86:	6878      	ldr	r0, [r7, #4]
 800cd88:	f000 f944 	bl	800d014 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800cd8c:	e065      	b.n	800ce5a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800cd8e:	6878      	ldr	r0, [r7, #4]
 800cd90:	f000 f9ee 	bl	800d170 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	2203      	movs	r2, #3
 800cd98:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800cd9c:	e05d      	b.n	800ce5a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800cd9e:	6878      	ldr	r0, [r7, #4]
 800cda0:	f000 f9e6 	bl	800d170 <USBD_CtlSendStatus>
    break;
 800cda4:	e059      	b.n	800ce5a <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800cda6:	4b2f      	ldr	r3, [pc, #188]	; (800ce64 <USBD_SetConfig+0x144>)
 800cda8:	781b      	ldrb	r3, [r3, #0]
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d112      	bne.n	800cdd4 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	2202      	movs	r2, #2
 800cdb2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800cdb6:	4b2b      	ldr	r3, [pc, #172]	; (800ce64 <USBD_SetConfig+0x144>)
 800cdb8:	781b      	ldrb	r3, [r3, #0]
 800cdba:	461a      	mov	r2, r3
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cdc0:	4b28      	ldr	r3, [pc, #160]	; (800ce64 <USBD_SetConfig+0x144>)
 800cdc2:	781b      	ldrb	r3, [r3, #0]
 800cdc4:	4619      	mov	r1, r3
 800cdc6:	6878      	ldr	r0, [r7, #4]
 800cdc8:	f7ff f971 	bl	800c0ae <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800cdcc:	6878      	ldr	r0, [r7, #4]
 800cdce:	f000 f9cf 	bl	800d170 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800cdd2:	e042      	b.n	800ce5a <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800cdd4:	4b23      	ldr	r3, [pc, #140]	; (800ce64 <USBD_SetConfig+0x144>)
 800cdd6:	781b      	ldrb	r3, [r3, #0]
 800cdd8:	461a      	mov	r2, r3
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	685b      	ldr	r3, [r3, #4]
 800cdde:	429a      	cmp	r2, r3
 800cde0:	d02a      	beq.n	800ce38 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	685b      	ldr	r3, [r3, #4]
 800cde6:	b2db      	uxtb	r3, r3
 800cde8:	4619      	mov	r1, r3
 800cdea:	6878      	ldr	r0, [r7, #4]
 800cdec:	f7ff f95f 	bl	800c0ae <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800cdf0:	4b1c      	ldr	r3, [pc, #112]	; (800ce64 <USBD_SetConfig+0x144>)
 800cdf2:	781b      	ldrb	r3, [r3, #0]
 800cdf4:	461a      	mov	r2, r3
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800cdfa:	4b1a      	ldr	r3, [pc, #104]	; (800ce64 <USBD_SetConfig+0x144>)
 800cdfc:	781b      	ldrb	r3, [r3, #0]
 800cdfe:	4619      	mov	r1, r3
 800ce00:	6878      	ldr	r0, [r7, #4]
 800ce02:	f7ff f938 	bl	800c076 <USBD_SetClassConfig>
 800ce06:	4603      	mov	r3, r0
 800ce08:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800ce0a:	7bfb      	ldrb	r3, [r7, #15]
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d00f      	beq.n	800ce30 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800ce10:	6839      	ldr	r1, [r7, #0]
 800ce12:	6878      	ldr	r0, [r7, #4]
 800ce14:	f000 f8fe 	bl	800d014 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	685b      	ldr	r3, [r3, #4]
 800ce1c:	b2db      	uxtb	r3, r3
 800ce1e:	4619      	mov	r1, r3
 800ce20:	6878      	ldr	r0, [r7, #4]
 800ce22:	f7ff f944 	bl	800c0ae <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	2202      	movs	r2, #2
 800ce2a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800ce2e:	e014      	b.n	800ce5a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800ce30:	6878      	ldr	r0, [r7, #4]
 800ce32:	f000 f99d 	bl	800d170 <USBD_CtlSendStatus>
    break;
 800ce36:	e010      	b.n	800ce5a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800ce38:	6878      	ldr	r0, [r7, #4]
 800ce3a:	f000 f999 	bl	800d170 <USBD_CtlSendStatus>
    break;
 800ce3e:	e00c      	b.n	800ce5a <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800ce40:	6839      	ldr	r1, [r7, #0]
 800ce42:	6878      	ldr	r0, [r7, #4]
 800ce44:	f000 f8e6 	bl	800d014 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ce48:	4b06      	ldr	r3, [pc, #24]	; (800ce64 <USBD_SetConfig+0x144>)
 800ce4a:	781b      	ldrb	r3, [r3, #0]
 800ce4c:	4619      	mov	r1, r3
 800ce4e:	6878      	ldr	r0, [r7, #4]
 800ce50:	f7ff f92d 	bl	800c0ae <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800ce54:	2303      	movs	r3, #3
 800ce56:	73fb      	strb	r3, [r7, #15]
    break;
 800ce58:	bf00      	nop
  }

  return ret;
 800ce5a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce5c:	4618      	mov	r0, r3
 800ce5e:	3710      	adds	r7, #16
 800ce60:	46bd      	mov	sp, r7
 800ce62:	bd80      	pop	{r7, pc}
 800ce64:	20000218 	.word	0x20000218

0800ce68 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ce68:	b580      	push	{r7, lr}
 800ce6a:	b082      	sub	sp, #8
 800ce6c:	af00      	add	r7, sp, #0
 800ce6e:	6078      	str	r0, [r7, #4]
 800ce70:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ce72:	683b      	ldr	r3, [r7, #0]
 800ce74:	88db      	ldrh	r3, [r3, #6]
 800ce76:	2b01      	cmp	r3, #1
 800ce78:	d004      	beq.n	800ce84 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ce7a:	6839      	ldr	r1, [r7, #0]
 800ce7c:	6878      	ldr	r0, [r7, #4]
 800ce7e:	f000 f8c9 	bl	800d014 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800ce82:	e021      	b.n	800cec8 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ce8a:	2b01      	cmp	r3, #1
 800ce8c:	db17      	blt.n	800cebe <USBD_GetConfig+0x56>
 800ce8e:	2b02      	cmp	r3, #2
 800ce90:	dd02      	ble.n	800ce98 <USBD_GetConfig+0x30>
 800ce92:	2b03      	cmp	r3, #3
 800ce94:	d00b      	beq.n	800ceae <USBD_GetConfig+0x46>
 800ce96:	e012      	b.n	800cebe <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	2200      	movs	r2, #0
 800ce9c:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	3308      	adds	r3, #8
 800cea2:	2201      	movs	r2, #1
 800cea4:	4619      	mov	r1, r3
 800cea6:	6878      	ldr	r0, [r7, #4]
 800cea8:	f000 f925 	bl	800d0f6 <USBD_CtlSendData>
      break;
 800ceac:	e00c      	b.n	800cec8 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	3304      	adds	r3, #4
 800ceb2:	2201      	movs	r2, #1
 800ceb4:	4619      	mov	r1, r3
 800ceb6:	6878      	ldr	r0, [r7, #4]
 800ceb8:	f000 f91d 	bl	800d0f6 <USBD_CtlSendData>
      break;
 800cebc:	e004      	b.n	800cec8 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800cebe:	6839      	ldr	r1, [r7, #0]
 800cec0:	6878      	ldr	r0, [r7, #4]
 800cec2:	f000 f8a7 	bl	800d014 <USBD_CtlError>
      break;
 800cec6:	bf00      	nop
}
 800cec8:	bf00      	nop
 800ceca:	3708      	adds	r7, #8
 800cecc:	46bd      	mov	sp, r7
 800cece:	bd80      	pop	{r7, pc}

0800ced0 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ced0:	b580      	push	{r7, lr}
 800ced2:	b082      	sub	sp, #8
 800ced4:	af00      	add	r7, sp, #0
 800ced6:	6078      	str	r0, [r7, #4]
 800ced8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cee0:	3b01      	subs	r3, #1
 800cee2:	2b02      	cmp	r3, #2
 800cee4:	d81e      	bhi.n	800cf24 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800cee6:	683b      	ldr	r3, [r7, #0]
 800cee8:	88db      	ldrh	r3, [r3, #6]
 800ceea:	2b02      	cmp	r3, #2
 800ceec:	d004      	beq.n	800cef8 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800ceee:	6839      	ldr	r1, [r7, #0]
 800cef0:	6878      	ldr	r0, [r7, #4]
 800cef2:	f000 f88f 	bl	800d014 <USBD_CtlError>
      break;
 800cef6:	e01a      	b.n	800cf2e <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	2201      	movs	r2, #1
 800cefc:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d005      	beq.n	800cf14 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	68db      	ldr	r3, [r3, #12]
 800cf0c:	f043 0202 	orr.w	r2, r3, #2
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	330c      	adds	r3, #12
 800cf18:	2202      	movs	r2, #2
 800cf1a:	4619      	mov	r1, r3
 800cf1c:	6878      	ldr	r0, [r7, #4]
 800cf1e:	f000 f8ea 	bl	800d0f6 <USBD_CtlSendData>
    break;
 800cf22:	e004      	b.n	800cf2e <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800cf24:	6839      	ldr	r1, [r7, #0]
 800cf26:	6878      	ldr	r0, [r7, #4]
 800cf28:	f000 f874 	bl	800d014 <USBD_CtlError>
    break;
 800cf2c:	bf00      	nop
  }
}
 800cf2e:	bf00      	nop
 800cf30:	3708      	adds	r7, #8
 800cf32:	46bd      	mov	sp, r7
 800cf34:	bd80      	pop	{r7, pc}

0800cf36 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cf36:	b580      	push	{r7, lr}
 800cf38:	b082      	sub	sp, #8
 800cf3a:	af00      	add	r7, sp, #0
 800cf3c:	6078      	str	r0, [r7, #4]
 800cf3e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cf40:	683b      	ldr	r3, [r7, #0]
 800cf42:	885b      	ldrh	r3, [r3, #2]
 800cf44:	2b01      	cmp	r3, #1
 800cf46:	d106      	bne.n	800cf56 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	2201      	movs	r2, #1
 800cf4c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800cf50:	6878      	ldr	r0, [r7, #4]
 800cf52:	f000 f90d 	bl	800d170 <USBD_CtlSendStatus>
  }
}
 800cf56:	bf00      	nop
 800cf58:	3708      	adds	r7, #8
 800cf5a:	46bd      	mov	sp, r7
 800cf5c:	bd80      	pop	{r7, pc}

0800cf5e <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cf5e:	b580      	push	{r7, lr}
 800cf60:	b082      	sub	sp, #8
 800cf62:	af00      	add	r7, sp, #0
 800cf64:	6078      	str	r0, [r7, #4]
 800cf66:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cf6e:	3b01      	subs	r3, #1
 800cf70:	2b02      	cmp	r3, #2
 800cf72:	d80b      	bhi.n	800cf8c <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cf74:	683b      	ldr	r3, [r7, #0]
 800cf76:	885b      	ldrh	r3, [r3, #2]
 800cf78:	2b01      	cmp	r3, #1
 800cf7a:	d10c      	bne.n	800cf96 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	2200      	movs	r2, #0
 800cf80:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800cf84:	6878      	ldr	r0, [r7, #4]
 800cf86:	f000 f8f3 	bl	800d170 <USBD_CtlSendStatus>
      }
      break;
 800cf8a:	e004      	b.n	800cf96 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800cf8c:	6839      	ldr	r1, [r7, #0]
 800cf8e:	6878      	ldr	r0, [r7, #4]
 800cf90:	f000 f840 	bl	800d014 <USBD_CtlError>
      break;
 800cf94:	e000      	b.n	800cf98 <USBD_ClrFeature+0x3a>
      break;
 800cf96:	bf00      	nop
  }
}
 800cf98:	bf00      	nop
 800cf9a:	3708      	adds	r7, #8
 800cf9c:	46bd      	mov	sp, r7
 800cf9e:	bd80      	pop	{r7, pc}

0800cfa0 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800cfa0:	b580      	push	{r7, lr}
 800cfa2:	b084      	sub	sp, #16
 800cfa4:	af00      	add	r7, sp, #0
 800cfa6:	6078      	str	r0, [r7, #4]
 800cfa8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800cfaa:	683b      	ldr	r3, [r7, #0]
 800cfac:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	781a      	ldrb	r2, [r3, #0]
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	3301      	adds	r3, #1
 800cfba:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	781a      	ldrb	r2, [r3, #0]
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	3301      	adds	r3, #1
 800cfc8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800cfca:	68f8      	ldr	r0, [r7, #12]
 800cfcc:	f7ff faaa 	bl	800c524 <SWAPBYTE>
 800cfd0:	4603      	mov	r3, r0
 800cfd2:	461a      	mov	r2, r3
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	3301      	adds	r3, #1
 800cfdc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	3301      	adds	r3, #1
 800cfe2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800cfe4:	68f8      	ldr	r0, [r7, #12]
 800cfe6:	f7ff fa9d 	bl	800c524 <SWAPBYTE>
 800cfea:	4603      	mov	r3, r0
 800cfec:	461a      	mov	r2, r3
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	3301      	adds	r3, #1
 800cff6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	3301      	adds	r3, #1
 800cffc:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800cffe:	68f8      	ldr	r0, [r7, #12]
 800d000:	f7ff fa90 	bl	800c524 <SWAPBYTE>
 800d004:	4603      	mov	r3, r0
 800d006:	461a      	mov	r2, r3
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	80da      	strh	r2, [r3, #6]
}
 800d00c:	bf00      	nop
 800d00e:	3710      	adds	r7, #16
 800d010:	46bd      	mov	sp, r7
 800d012:	bd80      	pop	{r7, pc}

0800d014 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d014:	b580      	push	{r7, lr}
 800d016:	b082      	sub	sp, #8
 800d018:	af00      	add	r7, sp, #0
 800d01a:	6078      	str	r0, [r7, #4]
 800d01c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d01e:	2180      	movs	r1, #128	; 0x80
 800d020:	6878      	ldr	r0, [r7, #4]
 800d022:	f008 fdb0 	bl	8015b86 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d026:	2100      	movs	r1, #0
 800d028:	6878      	ldr	r0, [r7, #4]
 800d02a:	f008 fdac 	bl	8015b86 <USBD_LL_StallEP>
}
 800d02e:	bf00      	nop
 800d030:	3708      	adds	r7, #8
 800d032:	46bd      	mov	sp, r7
 800d034:	bd80      	pop	{r7, pc}

0800d036 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d036:	b580      	push	{r7, lr}
 800d038:	b086      	sub	sp, #24
 800d03a:	af00      	add	r7, sp, #0
 800d03c:	60f8      	str	r0, [r7, #12]
 800d03e:	60b9      	str	r1, [r7, #8]
 800d040:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d042:	2300      	movs	r3, #0
 800d044:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d036      	beq.n	800d0ba <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800d050:	6938      	ldr	r0, [r7, #16]
 800d052:	f000 f836 	bl	800d0c2 <USBD_GetLen>
 800d056:	4603      	mov	r3, r0
 800d058:	3301      	adds	r3, #1
 800d05a:	b29b      	uxth	r3, r3
 800d05c:	005b      	lsls	r3, r3, #1
 800d05e:	b29a      	uxth	r2, r3
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800d064:	7dfb      	ldrb	r3, [r7, #23]
 800d066:	68ba      	ldr	r2, [r7, #8]
 800d068:	4413      	add	r3, r2
 800d06a:	687a      	ldr	r2, [r7, #4]
 800d06c:	7812      	ldrb	r2, [r2, #0]
 800d06e:	701a      	strb	r2, [r3, #0]
  idx++;
 800d070:	7dfb      	ldrb	r3, [r7, #23]
 800d072:	3301      	adds	r3, #1
 800d074:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800d076:	7dfb      	ldrb	r3, [r7, #23]
 800d078:	68ba      	ldr	r2, [r7, #8]
 800d07a:	4413      	add	r3, r2
 800d07c:	2203      	movs	r2, #3
 800d07e:	701a      	strb	r2, [r3, #0]
  idx++;
 800d080:	7dfb      	ldrb	r3, [r7, #23]
 800d082:	3301      	adds	r3, #1
 800d084:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800d086:	e013      	b.n	800d0b0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800d088:	7dfb      	ldrb	r3, [r7, #23]
 800d08a:	68ba      	ldr	r2, [r7, #8]
 800d08c:	4413      	add	r3, r2
 800d08e:	693a      	ldr	r2, [r7, #16]
 800d090:	7812      	ldrb	r2, [r2, #0]
 800d092:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800d094:	693b      	ldr	r3, [r7, #16]
 800d096:	3301      	adds	r3, #1
 800d098:	613b      	str	r3, [r7, #16]
    idx++;
 800d09a:	7dfb      	ldrb	r3, [r7, #23]
 800d09c:	3301      	adds	r3, #1
 800d09e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800d0a0:	7dfb      	ldrb	r3, [r7, #23]
 800d0a2:	68ba      	ldr	r2, [r7, #8]
 800d0a4:	4413      	add	r3, r2
 800d0a6:	2200      	movs	r2, #0
 800d0a8:	701a      	strb	r2, [r3, #0]
    idx++;
 800d0aa:	7dfb      	ldrb	r3, [r7, #23]
 800d0ac:	3301      	adds	r3, #1
 800d0ae:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800d0b0:	693b      	ldr	r3, [r7, #16]
 800d0b2:	781b      	ldrb	r3, [r3, #0]
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d1e7      	bne.n	800d088 <USBD_GetString+0x52>
 800d0b8:	e000      	b.n	800d0bc <USBD_GetString+0x86>
    return;
 800d0ba:	bf00      	nop
  }
}
 800d0bc:	3718      	adds	r7, #24
 800d0be:	46bd      	mov	sp, r7
 800d0c0:	bd80      	pop	{r7, pc}

0800d0c2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d0c2:	b480      	push	{r7}
 800d0c4:	b085      	sub	sp, #20
 800d0c6:	af00      	add	r7, sp, #0
 800d0c8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d0ca:	2300      	movs	r3, #0
 800d0cc:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800d0d2:	e005      	b.n	800d0e0 <USBD_GetLen+0x1e>
  {
    len++;
 800d0d4:	7bfb      	ldrb	r3, [r7, #15]
 800d0d6:	3301      	adds	r3, #1
 800d0d8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800d0da:	68bb      	ldr	r3, [r7, #8]
 800d0dc:	3301      	adds	r3, #1
 800d0de:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800d0e0:	68bb      	ldr	r3, [r7, #8]
 800d0e2:	781b      	ldrb	r3, [r3, #0]
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d1f5      	bne.n	800d0d4 <USBD_GetLen+0x12>
  }

  return len;
 800d0e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0ea:	4618      	mov	r0, r3
 800d0ec:	3714      	adds	r7, #20
 800d0ee:	46bd      	mov	sp, r7
 800d0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f4:	4770      	bx	lr

0800d0f6 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d0f6:	b580      	push	{r7, lr}
 800d0f8:	b084      	sub	sp, #16
 800d0fa:	af00      	add	r7, sp, #0
 800d0fc:	60f8      	str	r0, [r7, #12]
 800d0fe:	60b9      	str	r1, [r7, #8]
 800d100:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	2202      	movs	r2, #2
 800d106:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	687a      	ldr	r2, [r7, #4]
 800d10e:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	687a      	ldr	r2, [r7, #4]
 800d114:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	68ba      	ldr	r2, [r7, #8]
 800d11a:	2100      	movs	r1, #0
 800d11c:	68f8      	ldr	r0, [r7, #12]
 800d11e:	f008 fdbb 	bl	8015c98 <USBD_LL_Transmit>

  return USBD_OK;
 800d122:	2300      	movs	r3, #0
}
 800d124:	4618      	mov	r0, r3
 800d126:	3710      	adds	r7, #16
 800d128:	46bd      	mov	sp, r7
 800d12a:	bd80      	pop	{r7, pc}

0800d12c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d12c:	b580      	push	{r7, lr}
 800d12e:	b084      	sub	sp, #16
 800d130:	af00      	add	r7, sp, #0
 800d132:	60f8      	str	r0, [r7, #12]
 800d134:	60b9      	str	r1, [r7, #8]
 800d136:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	68ba      	ldr	r2, [r7, #8]
 800d13c:	2100      	movs	r1, #0
 800d13e:	68f8      	ldr	r0, [r7, #12]
 800d140:	f008 fdaa 	bl	8015c98 <USBD_LL_Transmit>

  return USBD_OK;
 800d144:	2300      	movs	r3, #0
}
 800d146:	4618      	mov	r0, r3
 800d148:	3710      	adds	r7, #16
 800d14a:	46bd      	mov	sp, r7
 800d14c:	bd80      	pop	{r7, pc}

0800d14e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d14e:	b580      	push	{r7, lr}
 800d150:	b084      	sub	sp, #16
 800d152:	af00      	add	r7, sp, #0
 800d154:	60f8      	str	r0, [r7, #12]
 800d156:	60b9      	str	r1, [r7, #8]
 800d158:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	68ba      	ldr	r2, [r7, #8]
 800d15e:	2100      	movs	r1, #0
 800d160:	68f8      	ldr	r0, [r7, #12]
 800d162:	f008 fdba 	bl	8015cda <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d166:	2300      	movs	r3, #0
}
 800d168:	4618      	mov	r0, r3
 800d16a:	3710      	adds	r7, #16
 800d16c:	46bd      	mov	sp, r7
 800d16e:	bd80      	pop	{r7, pc}

0800d170 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d170:	b580      	push	{r7, lr}
 800d172:	b082      	sub	sp, #8
 800d174:	af00      	add	r7, sp, #0
 800d176:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	2204      	movs	r2, #4
 800d17c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d180:	2300      	movs	r3, #0
 800d182:	2200      	movs	r2, #0
 800d184:	2100      	movs	r1, #0
 800d186:	6878      	ldr	r0, [r7, #4]
 800d188:	f008 fd86 	bl	8015c98 <USBD_LL_Transmit>

  return USBD_OK;
 800d18c:	2300      	movs	r3, #0
}
 800d18e:	4618      	mov	r0, r3
 800d190:	3708      	adds	r7, #8
 800d192:	46bd      	mov	sp, r7
 800d194:	bd80      	pop	{r7, pc}

0800d196 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d196:	b580      	push	{r7, lr}
 800d198:	b082      	sub	sp, #8
 800d19a:	af00      	add	r7, sp, #0
 800d19c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	2205      	movs	r2, #5
 800d1a2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d1a6:	2300      	movs	r3, #0
 800d1a8:	2200      	movs	r2, #0
 800d1aa:	2100      	movs	r1, #0
 800d1ac:	6878      	ldr	r0, [r7, #4]
 800d1ae:	f008 fd94 	bl	8015cda <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d1b2:	2300      	movs	r3, #0
}
 800d1b4:	4618      	mov	r0, r3
 800d1b6:	3708      	adds	r7, #8
 800d1b8:	46bd      	mov	sp, r7
 800d1ba:	bd80      	pop	{r7, pc}

0800d1bc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800d1bc:	b580      	push	{r7, lr}
 800d1be:	b084      	sub	sp, #16
 800d1c0:	af00      	add	r7, sp, #0
 800d1c2:	4603      	mov	r3, r0
 800d1c4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800d1c6:	79fb      	ldrb	r3, [r7, #7]
 800d1c8:	4a08      	ldr	r2, [pc, #32]	; (800d1ec <disk_status+0x30>)
 800d1ca:	009b      	lsls	r3, r3, #2
 800d1cc:	4413      	add	r3, r2
 800d1ce:	685b      	ldr	r3, [r3, #4]
 800d1d0:	685b      	ldr	r3, [r3, #4]
 800d1d2:	79fa      	ldrb	r2, [r7, #7]
 800d1d4:	4905      	ldr	r1, [pc, #20]	; (800d1ec <disk_status+0x30>)
 800d1d6:	440a      	add	r2, r1
 800d1d8:	7a12      	ldrb	r2, [r2, #8]
 800d1da:	4610      	mov	r0, r2
 800d1dc:	4798      	blx	r3
 800d1de:	4603      	mov	r3, r0
 800d1e0:	73fb      	strb	r3, [r7, #15]
  return stat;
 800d1e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1e4:	4618      	mov	r0, r3
 800d1e6:	3710      	adds	r7, #16
 800d1e8:	46bd      	mov	sp, r7
 800d1ea:	bd80      	pop	{r7, pc}
 800d1ec:	200002c4 	.word	0x200002c4

0800d1f0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800d1f0:	b580      	push	{r7, lr}
 800d1f2:	b084      	sub	sp, #16
 800d1f4:	af00      	add	r7, sp, #0
 800d1f6:	4603      	mov	r3, r0
 800d1f8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800d1fa:	2300      	movs	r3, #0
 800d1fc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800d1fe:	79fb      	ldrb	r3, [r7, #7]
 800d200:	4a0d      	ldr	r2, [pc, #52]	; (800d238 <disk_initialize+0x48>)
 800d202:	5cd3      	ldrb	r3, [r2, r3]
 800d204:	2b00      	cmp	r3, #0
 800d206:	d111      	bne.n	800d22c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800d208:	79fb      	ldrb	r3, [r7, #7]
 800d20a:	4a0b      	ldr	r2, [pc, #44]	; (800d238 <disk_initialize+0x48>)
 800d20c:	2101      	movs	r1, #1
 800d20e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800d210:	79fb      	ldrb	r3, [r7, #7]
 800d212:	4a09      	ldr	r2, [pc, #36]	; (800d238 <disk_initialize+0x48>)
 800d214:	009b      	lsls	r3, r3, #2
 800d216:	4413      	add	r3, r2
 800d218:	685b      	ldr	r3, [r3, #4]
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	79fa      	ldrb	r2, [r7, #7]
 800d21e:	4906      	ldr	r1, [pc, #24]	; (800d238 <disk_initialize+0x48>)
 800d220:	440a      	add	r2, r1
 800d222:	7a12      	ldrb	r2, [r2, #8]
 800d224:	4610      	mov	r0, r2
 800d226:	4798      	blx	r3
 800d228:	4603      	mov	r3, r0
 800d22a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800d22c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d22e:	4618      	mov	r0, r3
 800d230:	3710      	adds	r7, #16
 800d232:	46bd      	mov	sp, r7
 800d234:	bd80      	pop	{r7, pc}
 800d236:	bf00      	nop
 800d238:	200002c4 	.word	0x200002c4

0800d23c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800d23c:	b590      	push	{r4, r7, lr}
 800d23e:	b087      	sub	sp, #28
 800d240:	af00      	add	r7, sp, #0
 800d242:	60b9      	str	r1, [r7, #8]
 800d244:	607a      	str	r2, [r7, #4]
 800d246:	603b      	str	r3, [r7, #0]
 800d248:	4603      	mov	r3, r0
 800d24a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800d24c:	7bfb      	ldrb	r3, [r7, #15]
 800d24e:	4a0a      	ldr	r2, [pc, #40]	; (800d278 <disk_read+0x3c>)
 800d250:	009b      	lsls	r3, r3, #2
 800d252:	4413      	add	r3, r2
 800d254:	685b      	ldr	r3, [r3, #4]
 800d256:	689c      	ldr	r4, [r3, #8]
 800d258:	7bfb      	ldrb	r3, [r7, #15]
 800d25a:	4a07      	ldr	r2, [pc, #28]	; (800d278 <disk_read+0x3c>)
 800d25c:	4413      	add	r3, r2
 800d25e:	7a18      	ldrb	r0, [r3, #8]
 800d260:	683b      	ldr	r3, [r7, #0]
 800d262:	687a      	ldr	r2, [r7, #4]
 800d264:	68b9      	ldr	r1, [r7, #8]
 800d266:	47a0      	blx	r4
 800d268:	4603      	mov	r3, r0
 800d26a:	75fb      	strb	r3, [r7, #23]
  return res;
 800d26c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d26e:	4618      	mov	r0, r3
 800d270:	371c      	adds	r7, #28
 800d272:	46bd      	mov	sp, r7
 800d274:	bd90      	pop	{r4, r7, pc}
 800d276:	bf00      	nop
 800d278:	200002c4 	.word	0x200002c4

0800d27c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800d27c:	b590      	push	{r4, r7, lr}
 800d27e:	b087      	sub	sp, #28
 800d280:	af00      	add	r7, sp, #0
 800d282:	60b9      	str	r1, [r7, #8]
 800d284:	607a      	str	r2, [r7, #4]
 800d286:	603b      	str	r3, [r7, #0]
 800d288:	4603      	mov	r3, r0
 800d28a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800d28c:	7bfb      	ldrb	r3, [r7, #15]
 800d28e:	4a0a      	ldr	r2, [pc, #40]	; (800d2b8 <disk_write+0x3c>)
 800d290:	009b      	lsls	r3, r3, #2
 800d292:	4413      	add	r3, r2
 800d294:	685b      	ldr	r3, [r3, #4]
 800d296:	68dc      	ldr	r4, [r3, #12]
 800d298:	7bfb      	ldrb	r3, [r7, #15]
 800d29a:	4a07      	ldr	r2, [pc, #28]	; (800d2b8 <disk_write+0x3c>)
 800d29c:	4413      	add	r3, r2
 800d29e:	7a18      	ldrb	r0, [r3, #8]
 800d2a0:	683b      	ldr	r3, [r7, #0]
 800d2a2:	687a      	ldr	r2, [r7, #4]
 800d2a4:	68b9      	ldr	r1, [r7, #8]
 800d2a6:	47a0      	blx	r4
 800d2a8:	4603      	mov	r3, r0
 800d2aa:	75fb      	strb	r3, [r7, #23]
  return res;
 800d2ac:	7dfb      	ldrb	r3, [r7, #23]
}
 800d2ae:	4618      	mov	r0, r3
 800d2b0:	371c      	adds	r7, #28
 800d2b2:	46bd      	mov	sp, r7
 800d2b4:	bd90      	pop	{r4, r7, pc}
 800d2b6:	bf00      	nop
 800d2b8:	200002c4 	.word	0x200002c4

0800d2bc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800d2bc:	b580      	push	{r7, lr}
 800d2be:	b084      	sub	sp, #16
 800d2c0:	af00      	add	r7, sp, #0
 800d2c2:	4603      	mov	r3, r0
 800d2c4:	603a      	str	r2, [r7, #0]
 800d2c6:	71fb      	strb	r3, [r7, #7]
 800d2c8:	460b      	mov	r3, r1
 800d2ca:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800d2cc:	79fb      	ldrb	r3, [r7, #7]
 800d2ce:	4a09      	ldr	r2, [pc, #36]	; (800d2f4 <disk_ioctl+0x38>)
 800d2d0:	009b      	lsls	r3, r3, #2
 800d2d2:	4413      	add	r3, r2
 800d2d4:	685b      	ldr	r3, [r3, #4]
 800d2d6:	691b      	ldr	r3, [r3, #16]
 800d2d8:	79fa      	ldrb	r2, [r7, #7]
 800d2da:	4906      	ldr	r1, [pc, #24]	; (800d2f4 <disk_ioctl+0x38>)
 800d2dc:	440a      	add	r2, r1
 800d2de:	7a10      	ldrb	r0, [r2, #8]
 800d2e0:	79b9      	ldrb	r1, [r7, #6]
 800d2e2:	683a      	ldr	r2, [r7, #0]
 800d2e4:	4798      	blx	r3
 800d2e6:	4603      	mov	r3, r0
 800d2e8:	73fb      	strb	r3, [r7, #15]
  return res;
 800d2ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2ec:	4618      	mov	r0, r3
 800d2ee:	3710      	adds	r7, #16
 800d2f0:	46bd      	mov	sp, r7
 800d2f2:	bd80      	pop	{r7, pc}
 800d2f4:	200002c4 	.word	0x200002c4

0800d2f8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800d2f8:	b480      	push	{r7}
 800d2fa:	b085      	sub	sp, #20
 800d2fc:	af00      	add	r7, sp, #0
 800d2fe:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	3301      	adds	r3, #1
 800d304:	781b      	ldrb	r3, [r3, #0]
 800d306:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800d308:	89fb      	ldrh	r3, [r7, #14]
 800d30a:	021b      	lsls	r3, r3, #8
 800d30c:	b21a      	sxth	r2, r3
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	781b      	ldrb	r3, [r3, #0]
 800d312:	b21b      	sxth	r3, r3
 800d314:	4313      	orrs	r3, r2
 800d316:	b21b      	sxth	r3, r3
 800d318:	81fb      	strh	r3, [r7, #14]
	return rv;
 800d31a:	89fb      	ldrh	r3, [r7, #14]
}
 800d31c:	4618      	mov	r0, r3
 800d31e:	3714      	adds	r7, #20
 800d320:	46bd      	mov	sp, r7
 800d322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d326:	4770      	bx	lr

0800d328 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800d328:	b480      	push	{r7}
 800d32a:	b085      	sub	sp, #20
 800d32c:	af00      	add	r7, sp, #0
 800d32e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	3303      	adds	r3, #3
 800d334:	781b      	ldrb	r3, [r3, #0]
 800d336:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	021b      	lsls	r3, r3, #8
 800d33c:	687a      	ldr	r2, [r7, #4]
 800d33e:	3202      	adds	r2, #2
 800d340:	7812      	ldrb	r2, [r2, #0]
 800d342:	4313      	orrs	r3, r2
 800d344:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	021b      	lsls	r3, r3, #8
 800d34a:	687a      	ldr	r2, [r7, #4]
 800d34c:	3201      	adds	r2, #1
 800d34e:	7812      	ldrb	r2, [r2, #0]
 800d350:	4313      	orrs	r3, r2
 800d352:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	021b      	lsls	r3, r3, #8
 800d358:	687a      	ldr	r2, [r7, #4]
 800d35a:	7812      	ldrb	r2, [r2, #0]
 800d35c:	4313      	orrs	r3, r2
 800d35e:	60fb      	str	r3, [r7, #12]
	return rv;
 800d360:	68fb      	ldr	r3, [r7, #12]
}
 800d362:	4618      	mov	r0, r3
 800d364:	3714      	adds	r7, #20
 800d366:	46bd      	mov	sp, r7
 800d368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d36c:	4770      	bx	lr

0800d36e <ld_qword>:

#if _FS_EXFAT
static
QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 800d36e:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 800d372:	b085      	sub	sp, #20
 800d374:	af00      	add	r7, sp, #0
 800d376:	6078      	str	r0, [r7, #4]
	QWORD rv;

	rv = ptr[7];
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	3307      	adds	r3, #7
 800d37c:	781b      	ldrb	r3, [r3, #0]
 800d37e:	b2db      	uxtb	r3, r3
 800d380:	f04f 0400 	mov.w	r4, #0
 800d384:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[6];
 800d388:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800d38c:	f04f 0b00 	mov.w	fp, #0
 800d390:	f04f 0c00 	mov.w	ip, #0
 800d394:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 800d398:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 800d39c:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 800d3a0:	687a      	ldr	r2, [r7, #4]
 800d3a2:	3206      	adds	r2, #6
 800d3a4:	7812      	ldrb	r2, [r2, #0]
 800d3a6:	b2d1      	uxtb	r1, r2
 800d3a8:	f04f 0200 	mov.w	r2, #0
 800d3ac:	ea4b 0301 	orr.w	r3, fp, r1
 800d3b0:	ea4c 0402 	orr.w	r4, ip, r2
 800d3b4:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[5];
 800d3b8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800d3bc:	f04f 0b00 	mov.w	fp, #0
 800d3c0:	f04f 0c00 	mov.w	ip, #0
 800d3c4:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 800d3c8:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 800d3cc:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 800d3d0:	687a      	ldr	r2, [r7, #4]
 800d3d2:	3205      	adds	r2, #5
 800d3d4:	7812      	ldrb	r2, [r2, #0]
 800d3d6:	b2d1      	uxtb	r1, r2
 800d3d8:	f04f 0200 	mov.w	r2, #0
 800d3dc:	ea4b 0301 	orr.w	r3, fp, r1
 800d3e0:	ea4c 0402 	orr.w	r4, ip, r2
 800d3e4:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[4];
 800d3e8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800d3ec:	f04f 0b00 	mov.w	fp, #0
 800d3f0:	f04f 0c00 	mov.w	ip, #0
 800d3f4:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 800d3f8:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 800d3fc:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 800d400:	687a      	ldr	r2, [r7, #4]
 800d402:	3204      	adds	r2, #4
 800d404:	7812      	ldrb	r2, [r2, #0]
 800d406:	b2d1      	uxtb	r1, r2
 800d408:	f04f 0200 	mov.w	r2, #0
 800d40c:	ea4b 0301 	orr.w	r3, fp, r1
 800d410:	ea4c 0402 	orr.w	r4, ip, r2
 800d414:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[3];
 800d418:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800d41c:	f04f 0b00 	mov.w	fp, #0
 800d420:	f04f 0c00 	mov.w	ip, #0
 800d424:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 800d428:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 800d42c:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 800d430:	687a      	ldr	r2, [r7, #4]
 800d432:	3203      	adds	r2, #3
 800d434:	7812      	ldrb	r2, [r2, #0]
 800d436:	b2d1      	uxtb	r1, r2
 800d438:	f04f 0200 	mov.w	r2, #0
 800d43c:	ea4b 0301 	orr.w	r3, fp, r1
 800d440:	ea4c 0402 	orr.w	r4, ip, r2
 800d444:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[2];
 800d448:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800d44c:	f04f 0b00 	mov.w	fp, #0
 800d450:	f04f 0c00 	mov.w	ip, #0
 800d454:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 800d458:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 800d45c:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 800d460:	687a      	ldr	r2, [r7, #4]
 800d462:	3202      	adds	r2, #2
 800d464:	7812      	ldrb	r2, [r2, #0]
 800d466:	b2d1      	uxtb	r1, r2
 800d468:	f04f 0200 	mov.w	r2, #0
 800d46c:	ea4b 0301 	orr.w	r3, fp, r1
 800d470:	ea4c 0402 	orr.w	r4, ip, r2
 800d474:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[1];
 800d478:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800d47c:	f04f 0b00 	mov.w	fp, #0
 800d480:	f04f 0c00 	mov.w	ip, #0
 800d484:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 800d488:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 800d48c:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 800d490:	687a      	ldr	r2, [r7, #4]
 800d492:	3201      	adds	r2, #1
 800d494:	7812      	ldrb	r2, [r2, #0]
 800d496:	b2d1      	uxtb	r1, r2
 800d498:	f04f 0200 	mov.w	r2, #0
 800d49c:	ea4b 0301 	orr.w	r3, fp, r1
 800d4a0:	ea4c 0402 	orr.w	r4, ip, r2
 800d4a4:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[0];
 800d4a8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800d4ac:	f04f 0b00 	mov.w	fp, #0
 800d4b0:	f04f 0c00 	mov.w	ip, #0
 800d4b4:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 800d4b8:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 800d4bc:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 800d4c0:	687a      	ldr	r2, [r7, #4]
 800d4c2:	7812      	ldrb	r2, [r2, #0]
 800d4c4:	b2d1      	uxtb	r1, r2
 800d4c6:	f04f 0200 	mov.w	r2, #0
 800d4ca:	ea4b 0301 	orr.w	r3, fp, r1
 800d4ce:	ea4c 0402 	orr.w	r4, ip, r2
 800d4d2:	e9c7 3402 	strd	r3, r4, [r7, #8]
	return rv;
 800d4d6:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
}
 800d4da:	4618      	mov	r0, r3
 800d4dc:	4621      	mov	r1, r4
 800d4de:	3714      	adds	r7, #20
 800d4e0:	46bd      	mov	sp, r7
 800d4e2:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 800d4e6:	4770      	bx	lr

0800d4e8 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800d4e8:	b480      	push	{r7}
 800d4ea:	b083      	sub	sp, #12
 800d4ec:	af00      	add	r7, sp, #0
 800d4ee:	6078      	str	r0, [r7, #4]
 800d4f0:	460b      	mov	r3, r1
 800d4f2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	1c5a      	adds	r2, r3, #1
 800d4f8:	607a      	str	r2, [r7, #4]
 800d4fa:	887a      	ldrh	r2, [r7, #2]
 800d4fc:	b2d2      	uxtb	r2, r2
 800d4fe:	701a      	strb	r2, [r3, #0]
 800d500:	887b      	ldrh	r3, [r7, #2]
 800d502:	0a1b      	lsrs	r3, r3, #8
 800d504:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	1c5a      	adds	r2, r3, #1
 800d50a:	607a      	str	r2, [r7, #4]
 800d50c:	887a      	ldrh	r2, [r7, #2]
 800d50e:	b2d2      	uxtb	r2, r2
 800d510:	701a      	strb	r2, [r3, #0]
}
 800d512:	bf00      	nop
 800d514:	370c      	adds	r7, #12
 800d516:	46bd      	mov	sp, r7
 800d518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d51c:	4770      	bx	lr

0800d51e <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800d51e:	b480      	push	{r7}
 800d520:	b083      	sub	sp, #12
 800d522:	af00      	add	r7, sp, #0
 800d524:	6078      	str	r0, [r7, #4]
 800d526:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	1c5a      	adds	r2, r3, #1
 800d52c:	607a      	str	r2, [r7, #4]
 800d52e:	683a      	ldr	r2, [r7, #0]
 800d530:	b2d2      	uxtb	r2, r2
 800d532:	701a      	strb	r2, [r3, #0]
 800d534:	683b      	ldr	r3, [r7, #0]
 800d536:	0a1b      	lsrs	r3, r3, #8
 800d538:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	1c5a      	adds	r2, r3, #1
 800d53e:	607a      	str	r2, [r7, #4]
 800d540:	683a      	ldr	r2, [r7, #0]
 800d542:	b2d2      	uxtb	r2, r2
 800d544:	701a      	strb	r2, [r3, #0]
 800d546:	683b      	ldr	r3, [r7, #0]
 800d548:	0a1b      	lsrs	r3, r3, #8
 800d54a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	1c5a      	adds	r2, r3, #1
 800d550:	607a      	str	r2, [r7, #4]
 800d552:	683a      	ldr	r2, [r7, #0]
 800d554:	b2d2      	uxtb	r2, r2
 800d556:	701a      	strb	r2, [r3, #0]
 800d558:	683b      	ldr	r3, [r7, #0]
 800d55a:	0a1b      	lsrs	r3, r3, #8
 800d55c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	1c5a      	adds	r2, r3, #1
 800d562:	607a      	str	r2, [r7, #4]
 800d564:	683a      	ldr	r2, [r7, #0]
 800d566:	b2d2      	uxtb	r2, r2
 800d568:	701a      	strb	r2, [r3, #0]
}
 800d56a:	bf00      	nop
 800d56c:	370c      	adds	r7, #12
 800d56e:	46bd      	mov	sp, r7
 800d570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d574:	4770      	bx	lr

0800d576 <st_qword>:

#if _FS_EXFAT
static
void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
 800d576:	b490      	push	{r4, r7}
 800d578:	b084      	sub	sp, #16
 800d57a:	af00      	add	r7, sp, #0
 800d57c:	60f8      	str	r0, [r7, #12]
 800d57e:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	1c5a      	adds	r2, r3, #1
 800d586:	60fa      	str	r2, [r7, #12]
 800d588:	783a      	ldrb	r2, [r7, #0]
 800d58a:	701a      	strb	r2, [r3, #0]
 800d58c:	e9d7 1200 	ldrd	r1, r2, [r7]
 800d590:	f04f 0300 	mov.w	r3, #0
 800d594:	f04f 0400 	mov.w	r4, #0
 800d598:	0a0b      	lsrs	r3, r1, #8
 800d59a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d59e:	0a14      	lsrs	r4, r2, #8
 800d5a0:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	1c5a      	adds	r2, r3, #1
 800d5a8:	60fa      	str	r2, [r7, #12]
 800d5aa:	783a      	ldrb	r2, [r7, #0]
 800d5ac:	701a      	strb	r2, [r3, #0]
 800d5ae:	e9d7 1200 	ldrd	r1, r2, [r7]
 800d5b2:	f04f 0300 	mov.w	r3, #0
 800d5b6:	f04f 0400 	mov.w	r4, #0
 800d5ba:	0a0b      	lsrs	r3, r1, #8
 800d5bc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d5c0:	0a14      	lsrs	r4, r2, #8
 800d5c2:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	1c5a      	adds	r2, r3, #1
 800d5ca:	60fa      	str	r2, [r7, #12]
 800d5cc:	783a      	ldrb	r2, [r7, #0]
 800d5ce:	701a      	strb	r2, [r3, #0]
 800d5d0:	e9d7 1200 	ldrd	r1, r2, [r7]
 800d5d4:	f04f 0300 	mov.w	r3, #0
 800d5d8:	f04f 0400 	mov.w	r4, #0
 800d5dc:	0a0b      	lsrs	r3, r1, #8
 800d5de:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d5e2:	0a14      	lsrs	r4, r2, #8
 800d5e4:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	1c5a      	adds	r2, r3, #1
 800d5ec:	60fa      	str	r2, [r7, #12]
 800d5ee:	783a      	ldrb	r2, [r7, #0]
 800d5f0:	701a      	strb	r2, [r3, #0]
 800d5f2:	e9d7 1200 	ldrd	r1, r2, [r7]
 800d5f6:	f04f 0300 	mov.w	r3, #0
 800d5fa:	f04f 0400 	mov.w	r4, #0
 800d5fe:	0a0b      	lsrs	r3, r1, #8
 800d600:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d604:	0a14      	lsrs	r4, r2, #8
 800d606:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	1c5a      	adds	r2, r3, #1
 800d60e:	60fa      	str	r2, [r7, #12]
 800d610:	783a      	ldrb	r2, [r7, #0]
 800d612:	701a      	strb	r2, [r3, #0]
 800d614:	e9d7 1200 	ldrd	r1, r2, [r7]
 800d618:	f04f 0300 	mov.w	r3, #0
 800d61c:	f04f 0400 	mov.w	r4, #0
 800d620:	0a0b      	lsrs	r3, r1, #8
 800d622:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d626:	0a14      	lsrs	r4, r2, #8
 800d628:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	1c5a      	adds	r2, r3, #1
 800d630:	60fa      	str	r2, [r7, #12]
 800d632:	783a      	ldrb	r2, [r7, #0]
 800d634:	701a      	strb	r2, [r3, #0]
 800d636:	e9d7 1200 	ldrd	r1, r2, [r7]
 800d63a:	f04f 0300 	mov.w	r3, #0
 800d63e:	f04f 0400 	mov.w	r4, #0
 800d642:	0a0b      	lsrs	r3, r1, #8
 800d644:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d648:	0a14      	lsrs	r4, r2, #8
 800d64a:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	1c5a      	adds	r2, r3, #1
 800d652:	60fa      	str	r2, [r7, #12]
 800d654:	783a      	ldrb	r2, [r7, #0]
 800d656:	701a      	strb	r2, [r3, #0]
 800d658:	e9d7 1200 	ldrd	r1, r2, [r7]
 800d65c:	f04f 0300 	mov.w	r3, #0
 800d660:	f04f 0400 	mov.w	r4, #0
 800d664:	0a0b      	lsrs	r3, r1, #8
 800d666:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d66a:	0a14      	lsrs	r4, r2, #8
 800d66c:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val;
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	1c5a      	adds	r2, r3, #1
 800d674:	60fa      	str	r2, [r7, #12]
 800d676:	783a      	ldrb	r2, [r7, #0]
 800d678:	701a      	strb	r2, [r3, #0]
}
 800d67a:	bf00      	nop
 800d67c:	3710      	adds	r7, #16
 800d67e:	46bd      	mov	sp, r7
 800d680:	bc90      	pop	{r4, r7}
 800d682:	4770      	bx	lr

0800d684 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800d684:	b480      	push	{r7}
 800d686:	b087      	sub	sp, #28
 800d688:	af00      	add	r7, sp, #0
 800d68a:	60f8      	str	r0, [r7, #12]
 800d68c:	60b9      	str	r1, [r7, #8]
 800d68e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800d694:	68bb      	ldr	r3, [r7, #8]
 800d696:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d00d      	beq.n	800d6ba <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800d69e:	693a      	ldr	r2, [r7, #16]
 800d6a0:	1c53      	adds	r3, r2, #1
 800d6a2:	613b      	str	r3, [r7, #16]
 800d6a4:	697b      	ldr	r3, [r7, #20]
 800d6a6:	1c59      	adds	r1, r3, #1
 800d6a8:	6179      	str	r1, [r7, #20]
 800d6aa:	7812      	ldrb	r2, [r2, #0]
 800d6ac:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	3b01      	subs	r3, #1
 800d6b2:	607b      	str	r3, [r7, #4]
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d1f1      	bne.n	800d69e <mem_cpy+0x1a>
	}
}
 800d6ba:	bf00      	nop
 800d6bc:	371c      	adds	r7, #28
 800d6be:	46bd      	mov	sp, r7
 800d6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6c4:	4770      	bx	lr

0800d6c6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800d6c6:	b480      	push	{r7}
 800d6c8:	b087      	sub	sp, #28
 800d6ca:	af00      	add	r7, sp, #0
 800d6cc:	60f8      	str	r0, [r7, #12]
 800d6ce:	60b9      	str	r1, [r7, #8]
 800d6d0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800d6d6:	697b      	ldr	r3, [r7, #20]
 800d6d8:	1c5a      	adds	r2, r3, #1
 800d6da:	617a      	str	r2, [r7, #20]
 800d6dc:	68ba      	ldr	r2, [r7, #8]
 800d6de:	b2d2      	uxtb	r2, r2
 800d6e0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	3b01      	subs	r3, #1
 800d6e6:	607b      	str	r3, [r7, #4]
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d1f3      	bne.n	800d6d6 <mem_set+0x10>
}
 800d6ee:	bf00      	nop
 800d6f0:	371c      	adds	r7, #28
 800d6f2:	46bd      	mov	sp, r7
 800d6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6f8:	4770      	bx	lr

0800d6fa <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800d6fa:	b480      	push	{r7}
 800d6fc:	b089      	sub	sp, #36	; 0x24
 800d6fe:	af00      	add	r7, sp, #0
 800d700:	60f8      	str	r0, [r7, #12]
 800d702:	60b9      	str	r1, [r7, #8]
 800d704:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	61fb      	str	r3, [r7, #28]
 800d70a:	68bb      	ldr	r3, [r7, #8]
 800d70c:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800d70e:	2300      	movs	r3, #0
 800d710:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800d712:	69fb      	ldr	r3, [r7, #28]
 800d714:	1c5a      	adds	r2, r3, #1
 800d716:	61fa      	str	r2, [r7, #28]
 800d718:	781b      	ldrb	r3, [r3, #0]
 800d71a:	4619      	mov	r1, r3
 800d71c:	69bb      	ldr	r3, [r7, #24]
 800d71e:	1c5a      	adds	r2, r3, #1
 800d720:	61ba      	str	r2, [r7, #24]
 800d722:	781b      	ldrb	r3, [r3, #0]
 800d724:	1acb      	subs	r3, r1, r3
 800d726:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	3b01      	subs	r3, #1
 800d72c:	607b      	str	r3, [r7, #4]
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	2b00      	cmp	r3, #0
 800d732:	d002      	beq.n	800d73a <mem_cmp+0x40>
 800d734:	697b      	ldr	r3, [r7, #20]
 800d736:	2b00      	cmp	r3, #0
 800d738:	d0eb      	beq.n	800d712 <mem_cmp+0x18>

	return r;
 800d73a:	697b      	ldr	r3, [r7, #20]
}
 800d73c:	4618      	mov	r0, r3
 800d73e:	3724      	adds	r7, #36	; 0x24
 800d740:	46bd      	mov	sp, r7
 800d742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d746:	4770      	bx	lr

0800d748 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800d748:	b480      	push	{r7}
 800d74a:	b083      	sub	sp, #12
 800d74c:	af00      	add	r7, sp, #0
 800d74e:	6078      	str	r0, [r7, #4]
 800d750:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800d752:	e002      	b.n	800d75a <chk_chr+0x12>
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	3301      	adds	r3, #1
 800d758:	607b      	str	r3, [r7, #4]
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	781b      	ldrb	r3, [r3, #0]
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d005      	beq.n	800d76e <chk_chr+0x26>
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	781b      	ldrb	r3, [r3, #0]
 800d766:	461a      	mov	r2, r3
 800d768:	683b      	ldr	r3, [r7, #0]
 800d76a:	4293      	cmp	r3, r2
 800d76c:	d1f2      	bne.n	800d754 <chk_chr+0xc>
	return *str;
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	781b      	ldrb	r3, [r3, #0]
}
 800d772:	4618      	mov	r0, r3
 800d774:	370c      	adds	r7, #12
 800d776:	46bd      	mov	sp, r7
 800d778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d77c:	4770      	bx	lr

0800d77e <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800d77e:	b580      	push	{r7, lr}
 800d780:	b082      	sub	sp, #8
 800d782:	af00      	add	r7, sp, #0
 800d784:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d009      	beq.n	800d7a0 <lock_fs+0x22>
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	699b      	ldr	r3, [r3, #24]
 800d790:	4618      	mov	r0, r3
 800d792:	f004 f914 	bl	80119be <ff_req_grant>
 800d796:	4603      	mov	r3, r0
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d001      	beq.n	800d7a0 <lock_fs+0x22>
 800d79c:	2301      	movs	r3, #1
 800d79e:	e000      	b.n	800d7a2 <lock_fs+0x24>
 800d7a0:	2300      	movs	r3, #0
}
 800d7a2:	4618      	mov	r0, r3
 800d7a4:	3708      	adds	r7, #8
 800d7a6:	46bd      	mov	sp, r7
 800d7a8:	bd80      	pop	{r7, pc}

0800d7aa <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800d7aa:	b580      	push	{r7, lr}
 800d7ac:	b082      	sub	sp, #8
 800d7ae:	af00      	add	r7, sp, #0
 800d7b0:	6078      	str	r0, [r7, #4]
 800d7b2:	460b      	mov	r3, r1
 800d7b4:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d00d      	beq.n	800d7d8 <unlock_fs+0x2e>
 800d7bc:	78fb      	ldrb	r3, [r7, #3]
 800d7be:	2b0c      	cmp	r3, #12
 800d7c0:	d00a      	beq.n	800d7d8 <unlock_fs+0x2e>
 800d7c2:	78fb      	ldrb	r3, [r7, #3]
 800d7c4:	2b0b      	cmp	r3, #11
 800d7c6:	d007      	beq.n	800d7d8 <unlock_fs+0x2e>
 800d7c8:	78fb      	ldrb	r3, [r7, #3]
 800d7ca:	2b0f      	cmp	r3, #15
 800d7cc:	d004      	beq.n	800d7d8 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	699b      	ldr	r3, [r3, #24]
 800d7d2:	4618      	mov	r0, r3
 800d7d4:	f004 f908 	bl	80119e8 <ff_rel_grant>
	}
}
 800d7d8:	bf00      	nop
 800d7da:	3708      	adds	r7, #8
 800d7dc:	46bd      	mov	sp, r7
 800d7de:	bd80      	pop	{r7, pc}

0800d7e0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d7e0:	b480      	push	{r7}
 800d7e2:	b085      	sub	sp, #20
 800d7e4:	af00      	add	r7, sp, #0
 800d7e6:	6078      	str	r0, [r7, #4]
 800d7e8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d7ea:	2300      	movs	r3, #0
 800d7ec:	60bb      	str	r3, [r7, #8]
 800d7ee:	68bb      	ldr	r3, [r7, #8]
 800d7f0:	60fb      	str	r3, [r7, #12]
 800d7f2:	e029      	b.n	800d848 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800d7f4:	4a27      	ldr	r2, [pc, #156]	; (800d894 <chk_lock+0xb4>)
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	011b      	lsls	r3, r3, #4
 800d7fa:	4413      	add	r3, r2
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d01d      	beq.n	800d83e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d802:	4a24      	ldr	r2, [pc, #144]	; (800d894 <chk_lock+0xb4>)
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	011b      	lsls	r3, r3, #4
 800d808:	4413      	add	r3, r2
 800d80a:	681a      	ldr	r2, [r3, #0]
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	429a      	cmp	r2, r3
 800d812:	d116      	bne.n	800d842 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800d814:	4a1f      	ldr	r2, [pc, #124]	; (800d894 <chk_lock+0xb4>)
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	011b      	lsls	r3, r3, #4
 800d81a:	4413      	add	r3, r2
 800d81c:	3304      	adds	r3, #4
 800d81e:	681a      	ldr	r2, [r3, #0]
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d824:	429a      	cmp	r2, r3
 800d826:	d10c      	bne.n	800d842 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d828:	4a1a      	ldr	r2, [pc, #104]	; (800d894 <chk_lock+0xb4>)
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	011b      	lsls	r3, r3, #4
 800d82e:	4413      	add	r3, r2
 800d830:	3308      	adds	r3, #8
 800d832:	681a      	ldr	r2, [r3, #0]
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
				Files[i].clu == dp->obj.sclust &&
 800d838:	429a      	cmp	r2, r3
 800d83a:	d102      	bne.n	800d842 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d83c:	e007      	b.n	800d84e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800d83e:	2301      	movs	r3, #1
 800d840:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	3301      	adds	r3, #1
 800d846:	60fb      	str	r3, [r7, #12]
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	2b09      	cmp	r3, #9
 800d84c:	d9d2      	bls.n	800d7f4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800d84e:	68fb      	ldr	r3, [r7, #12]
 800d850:	2b0a      	cmp	r3, #10
 800d852:	d109      	bne.n	800d868 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800d854:	68bb      	ldr	r3, [r7, #8]
 800d856:	2b00      	cmp	r3, #0
 800d858:	d102      	bne.n	800d860 <chk_lock+0x80>
 800d85a:	683b      	ldr	r3, [r7, #0]
 800d85c:	2b02      	cmp	r3, #2
 800d85e:	d101      	bne.n	800d864 <chk_lock+0x84>
 800d860:	2300      	movs	r3, #0
 800d862:	e010      	b.n	800d886 <chk_lock+0xa6>
 800d864:	2312      	movs	r3, #18
 800d866:	e00e      	b.n	800d886 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800d868:	683b      	ldr	r3, [r7, #0]
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d108      	bne.n	800d880 <chk_lock+0xa0>
 800d86e:	4a09      	ldr	r2, [pc, #36]	; (800d894 <chk_lock+0xb4>)
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	011b      	lsls	r3, r3, #4
 800d874:	4413      	add	r3, r2
 800d876:	330c      	adds	r3, #12
 800d878:	881b      	ldrh	r3, [r3, #0]
 800d87a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d87e:	d101      	bne.n	800d884 <chk_lock+0xa4>
 800d880:	2310      	movs	r3, #16
 800d882:	e000      	b.n	800d886 <chk_lock+0xa6>
 800d884:	2300      	movs	r3, #0
}
 800d886:	4618      	mov	r0, r3
 800d888:	3714      	adds	r7, #20
 800d88a:	46bd      	mov	sp, r7
 800d88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d890:	4770      	bx	lr
 800d892:	bf00      	nop
 800d894:	20000224 	.word	0x20000224

0800d898 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800d898:	b480      	push	{r7}
 800d89a:	b083      	sub	sp, #12
 800d89c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d89e:	2300      	movs	r3, #0
 800d8a0:	607b      	str	r3, [r7, #4]
 800d8a2:	e002      	b.n	800d8aa <enq_lock+0x12>
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	3301      	adds	r3, #1
 800d8a8:	607b      	str	r3, [r7, #4]
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	2b09      	cmp	r3, #9
 800d8ae:	d806      	bhi.n	800d8be <enq_lock+0x26>
 800d8b0:	4a09      	ldr	r2, [pc, #36]	; (800d8d8 <enq_lock+0x40>)
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	011b      	lsls	r3, r3, #4
 800d8b6:	4413      	add	r3, r2
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d1f2      	bne.n	800d8a4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	2b0a      	cmp	r3, #10
 800d8c2:	bf14      	ite	ne
 800d8c4:	2301      	movne	r3, #1
 800d8c6:	2300      	moveq	r3, #0
 800d8c8:	b2db      	uxtb	r3, r3
}
 800d8ca:	4618      	mov	r0, r3
 800d8cc:	370c      	adds	r7, #12
 800d8ce:	46bd      	mov	sp, r7
 800d8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d4:	4770      	bx	lr
 800d8d6:	bf00      	nop
 800d8d8:	20000224 	.word	0x20000224

0800d8dc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d8dc:	b480      	push	{r7}
 800d8de:	b085      	sub	sp, #20
 800d8e0:	af00      	add	r7, sp, #0
 800d8e2:	6078      	str	r0, [r7, #4]
 800d8e4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d8e6:	2300      	movs	r3, #0
 800d8e8:	60fb      	str	r3, [r7, #12]
 800d8ea:	e01f      	b.n	800d92c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800d8ec:	4a41      	ldr	r2, [pc, #260]	; (800d9f4 <inc_lock+0x118>)
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	011b      	lsls	r3, r3, #4
 800d8f2:	4413      	add	r3, r2
 800d8f4:	681a      	ldr	r2, [r3, #0]
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	429a      	cmp	r2, r3
 800d8fc:	d113      	bne.n	800d926 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800d8fe:	4a3d      	ldr	r2, [pc, #244]	; (800d9f4 <inc_lock+0x118>)
 800d900:	68fb      	ldr	r3, [r7, #12]
 800d902:	011b      	lsls	r3, r3, #4
 800d904:	4413      	add	r3, r2
 800d906:	3304      	adds	r3, #4
 800d908:	681a      	ldr	r2, [r3, #0]
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800d90e:	429a      	cmp	r2, r3
 800d910:	d109      	bne.n	800d926 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800d912:	4a38      	ldr	r2, [pc, #224]	; (800d9f4 <inc_lock+0x118>)
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	011b      	lsls	r3, r3, #4
 800d918:	4413      	add	r3, r2
 800d91a:	3308      	adds	r3, #8
 800d91c:	681a      	ldr	r2, [r3, #0]
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			Files[i].clu == dp->obj.sclust &&
 800d922:	429a      	cmp	r2, r3
 800d924:	d006      	beq.n	800d934 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d926:	68fb      	ldr	r3, [r7, #12]
 800d928:	3301      	adds	r3, #1
 800d92a:	60fb      	str	r3, [r7, #12]
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	2b09      	cmp	r3, #9
 800d930:	d9dc      	bls.n	800d8ec <inc_lock+0x10>
 800d932:	e000      	b.n	800d936 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800d934:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	2b0a      	cmp	r3, #10
 800d93a:	d132      	bne.n	800d9a2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d93c:	2300      	movs	r3, #0
 800d93e:	60fb      	str	r3, [r7, #12]
 800d940:	e002      	b.n	800d948 <inc_lock+0x6c>
 800d942:	68fb      	ldr	r3, [r7, #12]
 800d944:	3301      	adds	r3, #1
 800d946:	60fb      	str	r3, [r7, #12]
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	2b09      	cmp	r3, #9
 800d94c:	d806      	bhi.n	800d95c <inc_lock+0x80>
 800d94e:	4a29      	ldr	r2, [pc, #164]	; (800d9f4 <inc_lock+0x118>)
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	011b      	lsls	r3, r3, #4
 800d954:	4413      	add	r3, r2
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d1f2      	bne.n	800d942 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	2b0a      	cmp	r3, #10
 800d960:	d101      	bne.n	800d966 <inc_lock+0x8a>
 800d962:	2300      	movs	r3, #0
 800d964:	e040      	b.n	800d9e8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	681a      	ldr	r2, [r3, #0]
 800d96a:	4922      	ldr	r1, [pc, #136]	; (800d9f4 <inc_lock+0x118>)
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	011b      	lsls	r3, r3, #4
 800d970:	440b      	add	r3, r1
 800d972:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	689a      	ldr	r2, [r3, #8]
 800d978:	491e      	ldr	r1, [pc, #120]	; (800d9f4 <inc_lock+0x118>)
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	011b      	lsls	r3, r3, #4
 800d97e:	440b      	add	r3, r1
 800d980:	3304      	adds	r3, #4
 800d982:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d988:	491a      	ldr	r1, [pc, #104]	; (800d9f4 <inc_lock+0x118>)
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	011b      	lsls	r3, r3, #4
 800d98e:	440b      	add	r3, r1
 800d990:	3308      	adds	r3, #8
 800d992:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800d994:	4a17      	ldr	r2, [pc, #92]	; (800d9f4 <inc_lock+0x118>)
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	011b      	lsls	r3, r3, #4
 800d99a:	4413      	add	r3, r2
 800d99c:	330c      	adds	r3, #12
 800d99e:	2200      	movs	r2, #0
 800d9a0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800d9a2:	683b      	ldr	r3, [r7, #0]
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d009      	beq.n	800d9bc <inc_lock+0xe0>
 800d9a8:	4a12      	ldr	r2, [pc, #72]	; (800d9f4 <inc_lock+0x118>)
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	011b      	lsls	r3, r3, #4
 800d9ae:	4413      	add	r3, r2
 800d9b0:	330c      	adds	r3, #12
 800d9b2:	881b      	ldrh	r3, [r3, #0]
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d001      	beq.n	800d9bc <inc_lock+0xe0>
 800d9b8:	2300      	movs	r3, #0
 800d9ba:	e015      	b.n	800d9e8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800d9bc:	683b      	ldr	r3, [r7, #0]
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d108      	bne.n	800d9d4 <inc_lock+0xf8>
 800d9c2:	4a0c      	ldr	r2, [pc, #48]	; (800d9f4 <inc_lock+0x118>)
 800d9c4:	68fb      	ldr	r3, [r7, #12]
 800d9c6:	011b      	lsls	r3, r3, #4
 800d9c8:	4413      	add	r3, r2
 800d9ca:	330c      	adds	r3, #12
 800d9cc:	881b      	ldrh	r3, [r3, #0]
 800d9ce:	3301      	adds	r3, #1
 800d9d0:	b29a      	uxth	r2, r3
 800d9d2:	e001      	b.n	800d9d8 <inc_lock+0xfc>
 800d9d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d9d8:	4906      	ldr	r1, [pc, #24]	; (800d9f4 <inc_lock+0x118>)
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	011b      	lsls	r3, r3, #4
 800d9de:	440b      	add	r3, r1
 800d9e0:	330c      	adds	r3, #12
 800d9e2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	3301      	adds	r3, #1
}
 800d9e8:	4618      	mov	r0, r3
 800d9ea:	3714      	adds	r7, #20
 800d9ec:	46bd      	mov	sp, r7
 800d9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9f2:	4770      	bx	lr
 800d9f4:	20000224 	.word	0x20000224

0800d9f8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800d9f8:	b480      	push	{r7}
 800d9fa:	b085      	sub	sp, #20
 800d9fc:	af00      	add	r7, sp, #0
 800d9fe:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	3b01      	subs	r3, #1
 800da04:	607b      	str	r3, [r7, #4]
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	2b09      	cmp	r3, #9
 800da0a:	d825      	bhi.n	800da58 <dec_lock+0x60>
		n = Files[i].ctr;
 800da0c:	4a17      	ldr	r2, [pc, #92]	; (800da6c <dec_lock+0x74>)
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	011b      	lsls	r3, r3, #4
 800da12:	4413      	add	r3, r2
 800da14:	330c      	adds	r3, #12
 800da16:	881b      	ldrh	r3, [r3, #0]
 800da18:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800da1a:	89fb      	ldrh	r3, [r7, #14]
 800da1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800da20:	d101      	bne.n	800da26 <dec_lock+0x2e>
 800da22:	2300      	movs	r3, #0
 800da24:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800da26:	89fb      	ldrh	r3, [r7, #14]
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d002      	beq.n	800da32 <dec_lock+0x3a>
 800da2c:	89fb      	ldrh	r3, [r7, #14]
 800da2e:	3b01      	subs	r3, #1
 800da30:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800da32:	4a0e      	ldr	r2, [pc, #56]	; (800da6c <dec_lock+0x74>)
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	011b      	lsls	r3, r3, #4
 800da38:	4413      	add	r3, r2
 800da3a:	330c      	adds	r3, #12
 800da3c:	89fa      	ldrh	r2, [r7, #14]
 800da3e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800da40:	89fb      	ldrh	r3, [r7, #14]
 800da42:	2b00      	cmp	r3, #0
 800da44:	d105      	bne.n	800da52 <dec_lock+0x5a>
 800da46:	4a09      	ldr	r2, [pc, #36]	; (800da6c <dec_lock+0x74>)
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	011b      	lsls	r3, r3, #4
 800da4c:	4413      	add	r3, r2
 800da4e:	2200      	movs	r2, #0
 800da50:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800da52:	2300      	movs	r3, #0
 800da54:	737b      	strb	r3, [r7, #13]
 800da56:	e001      	b.n	800da5c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800da58:	2302      	movs	r3, #2
 800da5a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800da5c:	7b7b      	ldrb	r3, [r7, #13]
}
 800da5e:	4618      	mov	r0, r3
 800da60:	3714      	adds	r7, #20
 800da62:	46bd      	mov	sp, r7
 800da64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da68:	4770      	bx	lr
 800da6a:	bf00      	nop
 800da6c:	20000224 	.word	0x20000224

0800da70 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800da70:	b480      	push	{r7}
 800da72:	b085      	sub	sp, #20
 800da74:	af00      	add	r7, sp, #0
 800da76:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800da78:	2300      	movs	r3, #0
 800da7a:	60fb      	str	r3, [r7, #12]
 800da7c:	e010      	b.n	800daa0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800da7e:	4a0d      	ldr	r2, [pc, #52]	; (800dab4 <clear_lock+0x44>)
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	011b      	lsls	r3, r3, #4
 800da84:	4413      	add	r3, r2
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	687a      	ldr	r2, [r7, #4]
 800da8a:	429a      	cmp	r2, r3
 800da8c:	d105      	bne.n	800da9a <clear_lock+0x2a>
 800da8e:	4a09      	ldr	r2, [pc, #36]	; (800dab4 <clear_lock+0x44>)
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	011b      	lsls	r3, r3, #4
 800da94:	4413      	add	r3, r2
 800da96:	2200      	movs	r2, #0
 800da98:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	3301      	adds	r3, #1
 800da9e:	60fb      	str	r3, [r7, #12]
 800daa0:	68fb      	ldr	r3, [r7, #12]
 800daa2:	2b09      	cmp	r3, #9
 800daa4:	d9eb      	bls.n	800da7e <clear_lock+0xe>
	}
}
 800daa6:	bf00      	nop
 800daa8:	3714      	adds	r7, #20
 800daaa:	46bd      	mov	sp, r7
 800daac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dab0:	4770      	bx	lr
 800dab2:	bf00      	nop
 800dab4:	20000224 	.word	0x20000224

0800dab8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800dab8:	b580      	push	{r7, lr}
 800daba:	b086      	sub	sp, #24
 800dabc:	af00      	add	r7, sp, #0
 800dabe:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800dac0:	2300      	movs	r3, #0
 800dac2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	78db      	ldrb	r3, [r3, #3]
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d034      	beq.n	800db36 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dad0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	7858      	ldrb	r0, [r3, #1]
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800dadc:	2301      	movs	r3, #1
 800dade:	697a      	ldr	r2, [r7, #20]
 800dae0:	f7ff fbcc 	bl	800d27c <disk_write>
 800dae4:	4603      	mov	r3, r0
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d002      	beq.n	800daf0 <sync_window+0x38>
			res = FR_DISK_ERR;
 800daea:	2301      	movs	r3, #1
 800daec:	73fb      	strb	r3, [r7, #15]
 800daee:	e022      	b.n	800db36 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	2200      	movs	r2, #0
 800daf4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dafa:	697a      	ldr	r2, [r7, #20]
 800dafc:	1ad2      	subs	r2, r2, r3
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db02:	429a      	cmp	r2, r3
 800db04:	d217      	bcs.n	800db36 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	789b      	ldrb	r3, [r3, #2]
 800db0a:	613b      	str	r3, [r7, #16]
 800db0c:	e010      	b.n	800db30 <sync_window+0x78>
					wsect += fs->fsize;
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db12:	697a      	ldr	r2, [r7, #20]
 800db14:	4413      	add	r3, r2
 800db16:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	7858      	ldrb	r0, [r3, #1]
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800db22:	2301      	movs	r3, #1
 800db24:	697a      	ldr	r2, [r7, #20]
 800db26:	f7ff fba9 	bl	800d27c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800db2a:	693b      	ldr	r3, [r7, #16]
 800db2c:	3b01      	subs	r3, #1
 800db2e:	613b      	str	r3, [r7, #16]
 800db30:	693b      	ldr	r3, [r7, #16]
 800db32:	2b01      	cmp	r3, #1
 800db34:	d8eb      	bhi.n	800db0e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800db36:	7bfb      	ldrb	r3, [r7, #15]
}
 800db38:	4618      	mov	r0, r3
 800db3a:	3718      	adds	r7, #24
 800db3c:	46bd      	mov	sp, r7
 800db3e:	bd80      	pop	{r7, pc}

0800db40 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800db40:	b580      	push	{r7, lr}
 800db42:	b084      	sub	sp, #16
 800db44:	af00      	add	r7, sp, #0
 800db46:	6078      	str	r0, [r7, #4]
 800db48:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800db4a:	2300      	movs	r3, #0
 800db4c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800db52:	683a      	ldr	r2, [r7, #0]
 800db54:	429a      	cmp	r2, r3
 800db56:	d01b      	beq.n	800db90 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800db58:	6878      	ldr	r0, [r7, #4]
 800db5a:	f7ff ffad 	bl	800dab8 <sync_window>
 800db5e:	4603      	mov	r3, r0
 800db60:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800db62:	7bfb      	ldrb	r3, [r7, #15]
 800db64:	2b00      	cmp	r3, #0
 800db66:	d113      	bne.n	800db90 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	7858      	ldrb	r0, [r3, #1]
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800db72:	2301      	movs	r3, #1
 800db74:	683a      	ldr	r2, [r7, #0]
 800db76:	f7ff fb61 	bl	800d23c <disk_read>
 800db7a:	4603      	mov	r3, r0
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d004      	beq.n	800db8a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800db80:	f04f 33ff 	mov.w	r3, #4294967295
 800db84:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800db86:	2301      	movs	r3, #1
 800db88:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	683a      	ldr	r2, [r7, #0]
 800db8e:	63da      	str	r2, [r3, #60]	; 0x3c
		}
	}
	return res;
 800db90:	7bfb      	ldrb	r3, [r7, #15]
}
 800db92:	4618      	mov	r0, r3
 800db94:	3710      	adds	r7, #16
 800db96:	46bd      	mov	sp, r7
 800db98:	bd80      	pop	{r7, pc}
	...

0800db9c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800db9c:	b580      	push	{r7, lr}
 800db9e:	b084      	sub	sp, #16
 800dba0:	af00      	add	r7, sp, #0
 800dba2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800dba4:	6878      	ldr	r0, [r7, #4]
 800dba6:	f7ff ff87 	bl	800dab8 <sync_window>
 800dbaa:	4603      	mov	r3, r0
 800dbac:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800dbae:	7bfb      	ldrb	r3, [r7, #15]
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d159      	bne.n	800dc68 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	781b      	ldrb	r3, [r3, #0]
 800dbb8:	2b03      	cmp	r3, #3
 800dbba:	d149      	bne.n	800dc50 <sync_fs+0xb4>
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	791b      	ldrb	r3, [r3, #4]
 800dbc0:	2b01      	cmp	r3, #1
 800dbc2:	d145      	bne.n	800dc50 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	899b      	ldrh	r3, [r3, #12]
 800dbce:	461a      	mov	r2, r3
 800dbd0:	2100      	movs	r1, #0
 800dbd2:	f7ff fd78 	bl	800d6c6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	3340      	adds	r3, #64	; 0x40
 800dbda:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800dbde:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800dbe2:	4618      	mov	r0, r3
 800dbe4:	f7ff fc80 	bl	800d4e8 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	3340      	adds	r3, #64	; 0x40
 800dbec:	4921      	ldr	r1, [pc, #132]	; (800dc74 <sync_fs+0xd8>)
 800dbee:	4618      	mov	r0, r3
 800dbf0:	f7ff fc95 	bl	800d51e <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	3340      	adds	r3, #64	; 0x40
 800dbf8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800dbfc:	491e      	ldr	r1, [pc, #120]	; (800dc78 <sync_fs+0xdc>)
 800dbfe:	4618      	mov	r0, r3
 800dc00:	f7ff fc8d 	bl	800d51e <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	3340      	adds	r3, #64	; 0x40
 800dc08:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	6a1b      	ldr	r3, [r3, #32]
 800dc10:	4619      	mov	r1, r3
 800dc12:	4610      	mov	r0, r2
 800dc14:	f7ff fc83 	bl	800d51e <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	3340      	adds	r3, #64	; 0x40
 800dc1c:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	69db      	ldr	r3, [r3, #28]
 800dc24:	4619      	mov	r1, r3
 800dc26:	4610      	mov	r0, r2
 800dc28:	f7ff fc79 	bl	800d51e <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc30:	1c5a      	adds	r2, r3, #1
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	63da      	str	r2, [r3, #60]	; 0x3c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	7858      	ldrb	r0, [r3, #1]
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dc44:	2301      	movs	r3, #1
 800dc46:	f7ff fb19 	bl	800d27c <disk_write>
			fs->fsi_flag = 0;
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	2200      	movs	r2, #0
 800dc4e:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	785b      	ldrb	r3, [r3, #1]
 800dc54:	2200      	movs	r2, #0
 800dc56:	2100      	movs	r1, #0
 800dc58:	4618      	mov	r0, r3
 800dc5a:	f7ff fb2f 	bl	800d2bc <disk_ioctl>
 800dc5e:	4603      	mov	r3, r0
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d001      	beq.n	800dc68 <sync_fs+0xcc>
 800dc64:	2301      	movs	r3, #1
 800dc66:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800dc68:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc6a:	4618      	mov	r0, r3
 800dc6c:	3710      	adds	r7, #16
 800dc6e:	46bd      	mov	sp, r7
 800dc70:	bd80      	pop	{r7, pc}
 800dc72:	bf00      	nop
 800dc74:	41615252 	.word	0x41615252
 800dc78:	61417272 	.word	0x61417272

0800dc7c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800dc7c:	b480      	push	{r7}
 800dc7e:	b083      	sub	sp, #12
 800dc80:	af00      	add	r7, sp, #0
 800dc82:	6078      	str	r0, [r7, #4]
 800dc84:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800dc86:	683b      	ldr	r3, [r7, #0]
 800dc88:	3b02      	subs	r3, #2
 800dc8a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc90:	3b02      	subs	r3, #2
 800dc92:	683a      	ldr	r2, [r7, #0]
 800dc94:	429a      	cmp	r2, r3
 800dc96:	d301      	bcc.n	800dc9c <clust2sect+0x20>
 800dc98:	2300      	movs	r3, #0
 800dc9a:	e008      	b.n	800dcae <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	895b      	ldrh	r3, [r3, #10]
 800dca0:	461a      	mov	r2, r3
 800dca2:	683b      	ldr	r3, [r7, #0]
 800dca4:	fb03 f202 	mul.w	r2, r3, r2
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcac:	4413      	add	r3, r2
}
 800dcae:	4618      	mov	r0, r3
 800dcb0:	370c      	adds	r7, #12
 800dcb2:	46bd      	mov	sp, r7
 800dcb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcb8:	4770      	bx	lr
	...

0800dcbc <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800dcbc:	b590      	push	{r4, r7, lr}
 800dcbe:	b089      	sub	sp, #36	; 0x24
 800dcc0:	af00      	add	r7, sp, #0
 800dcc2:	6078      	str	r0, [r7, #4]
 800dcc4:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	61bb      	str	r3, [r7, #24]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800dccc:	683b      	ldr	r3, [r7, #0]
 800dcce:	2b01      	cmp	r3, #1
 800dcd0:	d904      	bls.n	800dcdc <get_fat+0x20>
 800dcd2:	69bb      	ldr	r3, [r7, #24]
 800dcd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcd6:	683a      	ldr	r2, [r7, #0]
 800dcd8:	429a      	cmp	r2, r3
 800dcda:	d302      	bcc.n	800dce2 <get_fat+0x26>
		val = 1;	/* Internal error */
 800dcdc:	2301      	movs	r3, #1
 800dcde:	61fb      	str	r3, [r7, #28]
 800dce0:	e13a      	b.n	800df58 <get_fat+0x29c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800dce2:	f04f 33ff 	mov.w	r3, #4294967295
 800dce6:	61fb      	str	r3, [r7, #28]

		switch (fs->fs_type) {
 800dce8:	69bb      	ldr	r3, [r7, #24]
 800dcea:	781b      	ldrb	r3, [r3, #0]
 800dcec:	3b01      	subs	r3, #1
 800dcee:	2b03      	cmp	r3, #3
 800dcf0:	f200 8126 	bhi.w	800df40 <get_fat+0x284>
 800dcf4:	a201      	add	r2, pc, #4	; (adr r2, 800dcfc <get_fat+0x40>)
 800dcf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcfa:	bf00      	nop
 800dcfc:	0800dd0d 	.word	0x0800dd0d
 800dd00:	0800ddbb 	.word	0x0800ddbb
 800dd04:	0800de07 	.word	0x0800de07
 800dd08:	0800de57 	.word	0x0800de57
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800dd0c:	683b      	ldr	r3, [r7, #0]
 800dd0e:	60fb      	str	r3, [r7, #12]
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	085b      	lsrs	r3, r3, #1
 800dd14:	68fa      	ldr	r2, [r7, #12]
 800dd16:	4413      	add	r3, r2
 800dd18:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800dd1a:	69bb      	ldr	r3, [r7, #24]
 800dd1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dd1e:	69bb      	ldr	r3, [r7, #24]
 800dd20:	899b      	ldrh	r3, [r3, #12]
 800dd22:	4619      	mov	r1, r3
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	fbb3 f3f1 	udiv	r3, r3, r1
 800dd2a:	4413      	add	r3, r2
 800dd2c:	4619      	mov	r1, r3
 800dd2e:	69b8      	ldr	r0, [r7, #24]
 800dd30:	f7ff ff06 	bl	800db40 <move_window>
 800dd34:	4603      	mov	r3, r0
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	f040 8105 	bne.w	800df46 <get_fat+0x28a>
			wc = fs->win[bc++ % SS(fs)];
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	1c5a      	adds	r2, r3, #1
 800dd40:	60fa      	str	r2, [r7, #12]
 800dd42:	69ba      	ldr	r2, [r7, #24]
 800dd44:	8992      	ldrh	r2, [r2, #12]
 800dd46:	fbb3 f1f2 	udiv	r1, r3, r2
 800dd4a:	fb02 f201 	mul.w	r2, r2, r1
 800dd4e:	1a9b      	subs	r3, r3, r2
 800dd50:	69ba      	ldr	r2, [r7, #24]
 800dd52:	4413      	add	r3, r2
 800dd54:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800dd58:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800dd5a:	69bb      	ldr	r3, [r7, #24]
 800dd5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dd5e:	69bb      	ldr	r3, [r7, #24]
 800dd60:	899b      	ldrh	r3, [r3, #12]
 800dd62:	4619      	mov	r1, r3
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	fbb3 f3f1 	udiv	r3, r3, r1
 800dd6a:	4413      	add	r3, r2
 800dd6c:	4619      	mov	r1, r3
 800dd6e:	69b8      	ldr	r0, [r7, #24]
 800dd70:	f7ff fee6 	bl	800db40 <move_window>
 800dd74:	4603      	mov	r3, r0
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	f040 80e7 	bne.w	800df4a <get_fat+0x28e>
			wc |= fs->win[bc % SS(fs)] << 8;
 800dd7c:	69bb      	ldr	r3, [r7, #24]
 800dd7e:	899b      	ldrh	r3, [r3, #12]
 800dd80:	461a      	mov	r2, r3
 800dd82:	68fb      	ldr	r3, [r7, #12]
 800dd84:	fbb3 f1f2 	udiv	r1, r3, r2
 800dd88:	fb02 f201 	mul.w	r2, r2, r1
 800dd8c:	1a9b      	subs	r3, r3, r2
 800dd8e:	69ba      	ldr	r2, [r7, #24]
 800dd90:	4413      	add	r3, r2
 800dd92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800dd96:	021b      	lsls	r3, r3, #8
 800dd98:	461a      	mov	r2, r3
 800dd9a:	68bb      	ldr	r3, [r7, #8]
 800dd9c:	4313      	orrs	r3, r2
 800dd9e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800dda0:	683b      	ldr	r3, [r7, #0]
 800dda2:	f003 0301 	and.w	r3, r3, #1
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d002      	beq.n	800ddb0 <get_fat+0xf4>
 800ddaa:	68bb      	ldr	r3, [r7, #8]
 800ddac:	091b      	lsrs	r3, r3, #4
 800ddae:	e002      	b.n	800ddb6 <get_fat+0xfa>
 800ddb0:	68bb      	ldr	r3, [r7, #8]
 800ddb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ddb6:	61fb      	str	r3, [r7, #28]
			break;
 800ddb8:	e0ce      	b.n	800df58 <get_fat+0x29c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ddba:	69bb      	ldr	r3, [r7, #24]
 800ddbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ddbe:	69bb      	ldr	r3, [r7, #24]
 800ddc0:	899b      	ldrh	r3, [r3, #12]
 800ddc2:	085b      	lsrs	r3, r3, #1
 800ddc4:	b29b      	uxth	r3, r3
 800ddc6:	4619      	mov	r1, r3
 800ddc8:	683b      	ldr	r3, [r7, #0]
 800ddca:	fbb3 f3f1 	udiv	r3, r3, r1
 800ddce:	4413      	add	r3, r2
 800ddd0:	4619      	mov	r1, r3
 800ddd2:	69b8      	ldr	r0, [r7, #24]
 800ddd4:	f7ff feb4 	bl	800db40 <move_window>
 800ddd8:	4603      	mov	r3, r0
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	f040 80b7 	bne.w	800df4e <get_fat+0x292>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800dde0:	69bb      	ldr	r3, [r7, #24]
 800dde2:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800dde6:	683b      	ldr	r3, [r7, #0]
 800dde8:	005b      	lsls	r3, r3, #1
 800ddea:	69ba      	ldr	r2, [r7, #24]
 800ddec:	8992      	ldrh	r2, [r2, #12]
 800ddee:	fbb3 f0f2 	udiv	r0, r3, r2
 800ddf2:	fb02 f200 	mul.w	r2, r2, r0
 800ddf6:	1a9b      	subs	r3, r3, r2
 800ddf8:	440b      	add	r3, r1
 800ddfa:	4618      	mov	r0, r3
 800ddfc:	f7ff fa7c 	bl	800d2f8 <ld_word>
 800de00:	4603      	mov	r3, r0
 800de02:	61fb      	str	r3, [r7, #28]
			break;
 800de04:	e0a8      	b.n	800df58 <get_fat+0x29c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800de06:	69bb      	ldr	r3, [r7, #24]
 800de08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800de0a:	69bb      	ldr	r3, [r7, #24]
 800de0c:	899b      	ldrh	r3, [r3, #12]
 800de0e:	089b      	lsrs	r3, r3, #2
 800de10:	b29b      	uxth	r3, r3
 800de12:	4619      	mov	r1, r3
 800de14:	683b      	ldr	r3, [r7, #0]
 800de16:	fbb3 f3f1 	udiv	r3, r3, r1
 800de1a:	4413      	add	r3, r2
 800de1c:	4619      	mov	r1, r3
 800de1e:	69b8      	ldr	r0, [r7, #24]
 800de20:	f7ff fe8e 	bl	800db40 <move_window>
 800de24:	4603      	mov	r3, r0
 800de26:	2b00      	cmp	r3, #0
 800de28:	f040 8093 	bne.w	800df52 <get_fat+0x296>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800de2c:	69bb      	ldr	r3, [r7, #24]
 800de2e:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800de32:	683b      	ldr	r3, [r7, #0]
 800de34:	009b      	lsls	r3, r3, #2
 800de36:	69ba      	ldr	r2, [r7, #24]
 800de38:	8992      	ldrh	r2, [r2, #12]
 800de3a:	fbb3 f0f2 	udiv	r0, r3, r2
 800de3e:	fb02 f200 	mul.w	r2, r2, r0
 800de42:	1a9b      	subs	r3, r3, r2
 800de44:	440b      	add	r3, r1
 800de46:	4618      	mov	r0, r3
 800de48:	f7ff fa6e 	bl	800d328 <ld_dword>
 800de4c:	4603      	mov	r3, r0
 800de4e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800de52:	61fb      	str	r3, [r7, #28]
			break;
 800de54:	e080      	b.n	800df58 <get_fat+0x29c>
#if _FS_EXFAT
		case FS_EXFAT :
			if (obj->objsize) {
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800de5c:	4323      	orrs	r3, r4
 800de5e:	d06f      	beq.n	800df40 <get_fat+0x284>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	689b      	ldr	r3, [r3, #8]
 800de64:	683a      	ldr	r2, [r7, #0]
 800de66:	1ad3      	subs	r3, r2, r3
 800de68:	617b      	str	r3, [r7, #20]
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800de70:	f113 30ff 	adds.w	r0, r3, #4294967295
 800de74:	f144 31ff 	adc.w	r1, r4, #4294967295
 800de78:	69bb      	ldr	r3, [r7, #24]
 800de7a:	899b      	ldrh	r3, [r3, #12]
 800de7c:	b29b      	uxth	r3, r3
 800de7e:	f04f 0400 	mov.w	r4, #0
 800de82:	461a      	mov	r2, r3
 800de84:	4623      	mov	r3, r4
 800de86:	f7f2 f9db 	bl	8000240 <__aeabi_uldivmod>
 800de8a:	4603      	mov	r3, r0
 800de8c:	460c      	mov	r4, r1
 800de8e:	461a      	mov	r2, r3
 800de90:	69bb      	ldr	r3, [r7, #24]
 800de92:	895b      	ldrh	r3, [r3, #10]
 800de94:	fbb2 f3f3 	udiv	r3, r2, r3
 800de98:	613b      	str	r3, [r7, #16]

				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	79db      	ldrb	r3, [r3, #7]
 800de9e:	2b02      	cmp	r3, #2
 800dea0:	d10e      	bne.n	800dec0 <get_fat+0x204>
					if (cofs <= clen) {
 800dea2:	697a      	ldr	r2, [r7, #20]
 800dea4:	693b      	ldr	r3, [r7, #16]
 800dea6:	429a      	cmp	r2, r3
 800dea8:	d80a      	bhi.n	800dec0 <get_fat+0x204>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 800deaa:	697a      	ldr	r2, [r7, #20]
 800deac:	693b      	ldr	r3, [r7, #16]
 800deae:	429a      	cmp	r2, r3
 800deb0:	d002      	beq.n	800deb8 <get_fat+0x1fc>
 800deb2:	683b      	ldr	r3, [r7, #0]
 800deb4:	3301      	adds	r3, #1
 800deb6:	e001      	b.n	800debc <get_fat+0x200>
 800deb8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800debc:	61fb      	str	r3, [r7, #28]
						break;
 800debe:	e04b      	b.n	800df58 <get_fat+0x29c>
					}
				}
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	79db      	ldrb	r3, [r3, #7]
 800dec4:	2b03      	cmp	r3, #3
 800dec6:	d108      	bne.n	800deda <get_fat+0x21e>
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	699b      	ldr	r3, [r3, #24]
 800decc:	697a      	ldr	r2, [r7, #20]
 800dece:	429a      	cmp	r2, r3
 800ded0:	d203      	bcs.n	800deda <get_fat+0x21e>
					val = clst + 1; 	/* Generate the value */
 800ded2:	683b      	ldr	r3, [r7, #0]
 800ded4:	3301      	adds	r3, #1
 800ded6:	61fb      	str	r3, [r7, #28]
					break;
 800ded8:	e03e      	b.n	800df58 <get_fat+0x29c>
				}
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	79db      	ldrb	r3, [r3, #7]
 800dede:	2b02      	cmp	r3, #2
 800dee0:	d02e      	beq.n	800df40 <get_fat+0x284>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	69db      	ldr	r3, [r3, #28]
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d003      	beq.n	800def2 <get_fat+0x236>
						val = 0x7FFFFFFF;	/* Generate EOC */
 800deea:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800deee:	61fb      	str	r3, [r7, #28]
					} else {
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
					}
					break;
 800def0:	e032      	b.n	800df58 <get_fat+0x29c>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800def2:	69bb      	ldr	r3, [r7, #24]
 800def4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800def6:	69bb      	ldr	r3, [r7, #24]
 800def8:	899b      	ldrh	r3, [r3, #12]
 800defa:	089b      	lsrs	r3, r3, #2
 800defc:	b29b      	uxth	r3, r3
 800defe:	4619      	mov	r1, r3
 800df00:	683b      	ldr	r3, [r7, #0]
 800df02:	fbb3 f3f1 	udiv	r3, r3, r1
 800df06:	4413      	add	r3, r2
 800df08:	4619      	mov	r1, r3
 800df0a:	69b8      	ldr	r0, [r7, #24]
 800df0c:	f7ff fe18 	bl	800db40 <move_window>
 800df10:	4603      	mov	r3, r0
 800df12:	2b00      	cmp	r3, #0
 800df14:	d11f      	bne.n	800df56 <get_fat+0x29a>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 800df16:	69bb      	ldr	r3, [r7, #24]
 800df18:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800df1c:	683b      	ldr	r3, [r7, #0]
 800df1e:	009b      	lsls	r3, r3, #2
 800df20:	69ba      	ldr	r2, [r7, #24]
 800df22:	8992      	ldrh	r2, [r2, #12]
 800df24:	fbb3 f0f2 	udiv	r0, r3, r2
 800df28:	fb02 f200 	mul.w	r2, r2, r0
 800df2c:	1a9b      	subs	r3, r3, r2
 800df2e:	440b      	add	r3, r1
 800df30:	4618      	mov	r0, r3
 800df32:	f7ff f9f9 	bl	800d328 <ld_dword>
 800df36:	4603      	mov	r3, r0
 800df38:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800df3c:	61fb      	str	r3, [r7, #28]
					break;
 800df3e:	e00b      	b.n	800df58 <get_fat+0x29c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800df40:	2301      	movs	r3, #1
 800df42:	61fb      	str	r3, [r7, #28]
 800df44:	e008      	b.n	800df58 <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800df46:	bf00      	nop
 800df48:	e006      	b.n	800df58 <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800df4a:	bf00      	nop
 800df4c:	e004      	b.n	800df58 <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800df4e:	bf00      	nop
 800df50:	e002      	b.n	800df58 <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800df52:	bf00      	nop
 800df54:	e000      	b.n	800df58 <get_fat+0x29c>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800df56:	bf00      	nop
		}
	}

	return val;
 800df58:	69fb      	ldr	r3, [r7, #28]
}
 800df5a:	4618      	mov	r0, r3
 800df5c:	3724      	adds	r7, #36	; 0x24
 800df5e:	46bd      	mov	sp, r7
 800df60:	bd90      	pop	{r4, r7, pc}
 800df62:	bf00      	nop

0800df64 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800df64:	b590      	push	{r4, r7, lr}
 800df66:	b089      	sub	sp, #36	; 0x24
 800df68:	af00      	add	r7, sp, #0
 800df6a:	60f8      	str	r0, [r7, #12]
 800df6c:	60b9      	str	r1, [r7, #8]
 800df6e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800df70:	2302      	movs	r3, #2
 800df72:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800df74:	68bb      	ldr	r3, [r7, #8]
 800df76:	2b01      	cmp	r3, #1
 800df78:	f240 8111 	bls.w	800e19e <put_fat+0x23a>
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df80:	68ba      	ldr	r2, [r7, #8]
 800df82:	429a      	cmp	r2, r3
 800df84:	f080 810b 	bcs.w	800e19e <put_fat+0x23a>
		switch (fs->fs_type) {
 800df88:	68fb      	ldr	r3, [r7, #12]
 800df8a:	781b      	ldrb	r3, [r3, #0]
 800df8c:	3b01      	subs	r3, #1
 800df8e:	2b03      	cmp	r3, #3
 800df90:	f200 8105 	bhi.w	800e19e <put_fat+0x23a>
 800df94:	a201      	add	r2, pc, #4	; (adr r2, 800df9c <put_fat+0x38>)
 800df96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df9a:	bf00      	nop
 800df9c:	0800dfad 	.word	0x0800dfad
 800dfa0:	0800e0b1 	.word	0x0800e0b1
 800dfa4:	0800e107 	.word	0x0800e107
 800dfa8:	0800e107 	.word	0x0800e107
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800dfac:	68bb      	ldr	r3, [r7, #8]
 800dfae:	61bb      	str	r3, [r7, #24]
 800dfb0:	69bb      	ldr	r3, [r7, #24]
 800dfb2:	085b      	lsrs	r3, r3, #1
 800dfb4:	69ba      	ldr	r2, [r7, #24]
 800dfb6:	4413      	add	r3, r2
 800dfb8:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	899b      	ldrh	r3, [r3, #12]
 800dfc2:	4619      	mov	r1, r3
 800dfc4:	69bb      	ldr	r3, [r7, #24]
 800dfc6:	fbb3 f3f1 	udiv	r3, r3, r1
 800dfca:	4413      	add	r3, r2
 800dfcc:	4619      	mov	r1, r3
 800dfce:	68f8      	ldr	r0, [r7, #12]
 800dfd0:	f7ff fdb6 	bl	800db40 <move_window>
 800dfd4:	4603      	mov	r3, r0
 800dfd6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800dfd8:	7ffb      	ldrb	r3, [r7, #31]
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	f040 80d8 	bne.w	800e190 <put_fat+0x22c>
			p = fs->win + bc++ % SS(fs);
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800dfe6:	69bb      	ldr	r3, [r7, #24]
 800dfe8:	1c5a      	adds	r2, r3, #1
 800dfea:	61ba      	str	r2, [r7, #24]
 800dfec:	68fa      	ldr	r2, [r7, #12]
 800dfee:	8992      	ldrh	r2, [r2, #12]
 800dff0:	fbb3 f0f2 	udiv	r0, r3, r2
 800dff4:	fb02 f200 	mul.w	r2, r2, r0
 800dff8:	1a9b      	subs	r3, r3, r2
 800dffa:	440b      	add	r3, r1
 800dffc:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800dffe:	68bb      	ldr	r3, [r7, #8]
 800e000:	f003 0301 	and.w	r3, r3, #1
 800e004:	2b00      	cmp	r3, #0
 800e006:	d00d      	beq.n	800e024 <put_fat+0xc0>
 800e008:	697b      	ldr	r3, [r7, #20]
 800e00a:	781b      	ldrb	r3, [r3, #0]
 800e00c:	b25b      	sxtb	r3, r3
 800e00e:	f003 030f 	and.w	r3, r3, #15
 800e012:	b25a      	sxtb	r2, r3
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	b2db      	uxtb	r3, r3
 800e018:	011b      	lsls	r3, r3, #4
 800e01a:	b25b      	sxtb	r3, r3
 800e01c:	4313      	orrs	r3, r2
 800e01e:	b25b      	sxtb	r3, r3
 800e020:	b2db      	uxtb	r3, r3
 800e022:	e001      	b.n	800e028 <put_fat+0xc4>
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	b2db      	uxtb	r3, r3
 800e028:	697a      	ldr	r2, [r7, #20]
 800e02a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	2201      	movs	r2, #1
 800e030:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e032:	68fb      	ldr	r3, [r7, #12]
 800e034:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	899b      	ldrh	r3, [r3, #12]
 800e03a:	4619      	mov	r1, r3
 800e03c:	69bb      	ldr	r3, [r7, #24]
 800e03e:	fbb3 f3f1 	udiv	r3, r3, r1
 800e042:	4413      	add	r3, r2
 800e044:	4619      	mov	r1, r3
 800e046:	68f8      	ldr	r0, [r7, #12]
 800e048:	f7ff fd7a 	bl	800db40 <move_window>
 800e04c:	4603      	mov	r3, r0
 800e04e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e050:	7ffb      	ldrb	r3, [r7, #31]
 800e052:	2b00      	cmp	r3, #0
 800e054:	f040 809e 	bne.w	800e194 <put_fat+0x230>
			p = fs->win + bc % SS(fs);
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800e05e:	68fb      	ldr	r3, [r7, #12]
 800e060:	899b      	ldrh	r3, [r3, #12]
 800e062:	461a      	mov	r2, r3
 800e064:	69bb      	ldr	r3, [r7, #24]
 800e066:	fbb3 f0f2 	udiv	r0, r3, r2
 800e06a:	fb02 f200 	mul.w	r2, r2, r0
 800e06e:	1a9b      	subs	r3, r3, r2
 800e070:	440b      	add	r3, r1
 800e072:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800e074:	68bb      	ldr	r3, [r7, #8]
 800e076:	f003 0301 	and.w	r3, r3, #1
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d003      	beq.n	800e086 <put_fat+0x122>
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	091b      	lsrs	r3, r3, #4
 800e082:	b2db      	uxtb	r3, r3
 800e084:	e00e      	b.n	800e0a4 <put_fat+0x140>
 800e086:	697b      	ldr	r3, [r7, #20]
 800e088:	781b      	ldrb	r3, [r3, #0]
 800e08a:	b25b      	sxtb	r3, r3
 800e08c:	f023 030f 	bic.w	r3, r3, #15
 800e090:	b25a      	sxtb	r2, r3
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	0a1b      	lsrs	r3, r3, #8
 800e096:	b25b      	sxtb	r3, r3
 800e098:	f003 030f 	and.w	r3, r3, #15
 800e09c:	b25b      	sxtb	r3, r3
 800e09e:	4313      	orrs	r3, r2
 800e0a0:	b25b      	sxtb	r3, r3
 800e0a2:	b2db      	uxtb	r3, r3
 800e0a4:	697a      	ldr	r2, [r7, #20]
 800e0a6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	2201      	movs	r2, #1
 800e0ac:	70da      	strb	r2, [r3, #3]
			break;
 800e0ae:	e076      	b.n	800e19e <put_fat+0x23a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	899b      	ldrh	r3, [r3, #12]
 800e0b8:	085b      	lsrs	r3, r3, #1
 800e0ba:	b29b      	uxth	r3, r3
 800e0bc:	4619      	mov	r1, r3
 800e0be:	68bb      	ldr	r3, [r7, #8]
 800e0c0:	fbb3 f3f1 	udiv	r3, r3, r1
 800e0c4:	4413      	add	r3, r2
 800e0c6:	4619      	mov	r1, r3
 800e0c8:	68f8      	ldr	r0, [r7, #12]
 800e0ca:	f7ff fd39 	bl	800db40 <move_window>
 800e0ce:	4603      	mov	r3, r0
 800e0d0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e0d2:	7ffb      	ldrb	r3, [r7, #31]
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d15f      	bne.n	800e198 <put_fat+0x234>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800e0de:	68bb      	ldr	r3, [r7, #8]
 800e0e0:	005b      	lsls	r3, r3, #1
 800e0e2:	68fa      	ldr	r2, [r7, #12]
 800e0e4:	8992      	ldrh	r2, [r2, #12]
 800e0e6:	fbb3 f0f2 	udiv	r0, r3, r2
 800e0ea:	fb02 f200 	mul.w	r2, r2, r0
 800e0ee:	1a9b      	subs	r3, r3, r2
 800e0f0:	440b      	add	r3, r1
 800e0f2:	687a      	ldr	r2, [r7, #4]
 800e0f4:	b292      	uxth	r2, r2
 800e0f6:	4611      	mov	r1, r2
 800e0f8:	4618      	mov	r0, r3
 800e0fa:	f7ff f9f5 	bl	800d4e8 <st_word>
			fs->wflag = 1;
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	2201      	movs	r2, #1
 800e102:	70da      	strb	r2, [r3, #3]
			break;
 800e104:	e04b      	b.n	800e19e <put_fat+0x23a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e10a:	68fb      	ldr	r3, [r7, #12]
 800e10c:	899b      	ldrh	r3, [r3, #12]
 800e10e:	089b      	lsrs	r3, r3, #2
 800e110:	b29b      	uxth	r3, r3
 800e112:	4619      	mov	r1, r3
 800e114:	68bb      	ldr	r3, [r7, #8]
 800e116:	fbb3 f3f1 	udiv	r3, r3, r1
 800e11a:	4413      	add	r3, r2
 800e11c:	4619      	mov	r1, r3
 800e11e:	68f8      	ldr	r0, [r7, #12]
 800e120:	f7ff fd0e 	bl	800db40 <move_window>
 800e124:	4603      	mov	r3, r0
 800e126:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e128:	7ffb      	ldrb	r3, [r7, #31]
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d136      	bne.n	800e19c <put_fat+0x238>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800e12e:	68fb      	ldr	r3, [r7, #12]
 800e130:	781b      	ldrb	r3, [r3, #0]
 800e132:	2b04      	cmp	r3, #4
 800e134:	d017      	beq.n	800e166 <put_fat+0x202>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800e142:	68bb      	ldr	r3, [r7, #8]
 800e144:	009b      	lsls	r3, r3, #2
 800e146:	68fa      	ldr	r2, [r7, #12]
 800e148:	8992      	ldrh	r2, [r2, #12]
 800e14a:	fbb3 f0f2 	udiv	r0, r3, r2
 800e14e:	fb02 f200 	mul.w	r2, r2, r0
 800e152:	1a9b      	subs	r3, r3, r2
 800e154:	440b      	add	r3, r1
 800e156:	4618      	mov	r0, r3
 800e158:	f7ff f8e6 	bl	800d328 <ld_dword>
 800e15c:	4603      	mov	r3, r0
 800e15e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800e162:	4323      	orrs	r3, r4
 800e164:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800e166:	68fb      	ldr	r3, [r7, #12]
 800e168:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800e16c:	68bb      	ldr	r3, [r7, #8]
 800e16e:	009b      	lsls	r3, r3, #2
 800e170:	68fa      	ldr	r2, [r7, #12]
 800e172:	8992      	ldrh	r2, [r2, #12]
 800e174:	fbb3 f0f2 	udiv	r0, r3, r2
 800e178:	fb02 f200 	mul.w	r2, r2, r0
 800e17c:	1a9b      	subs	r3, r3, r2
 800e17e:	440b      	add	r3, r1
 800e180:	6879      	ldr	r1, [r7, #4]
 800e182:	4618      	mov	r0, r3
 800e184:	f7ff f9cb 	bl	800d51e <st_dword>
			fs->wflag = 1;
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	2201      	movs	r2, #1
 800e18c:	70da      	strb	r2, [r3, #3]
			break;
 800e18e:	e006      	b.n	800e19e <put_fat+0x23a>
			if (res != FR_OK) break;
 800e190:	bf00      	nop
 800e192:	e004      	b.n	800e19e <put_fat+0x23a>
			if (res != FR_OK) break;
 800e194:	bf00      	nop
 800e196:	e002      	b.n	800e19e <put_fat+0x23a>
			if (res != FR_OK) break;
 800e198:	bf00      	nop
 800e19a:	e000      	b.n	800e19e <put_fat+0x23a>
			if (res != FR_OK) break;
 800e19c:	bf00      	nop
		}
	}
	return res;
 800e19e:	7ffb      	ldrb	r3, [r7, #31]
}
 800e1a0:	4618      	mov	r0, r3
 800e1a2:	3724      	adds	r7, #36	; 0x24
 800e1a4:	46bd      	mov	sp, r7
 800e1a6:	bd90      	pop	{r4, r7, pc}

0800e1a8 <find_bitmap>:
DWORD find_bitmap (	/* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to scan from */
	DWORD ncl	/* Number of contiguous clusters to find (1..) */
)
{
 800e1a8:	b580      	push	{r7, lr}
 800e1aa:	b08a      	sub	sp, #40	; 0x28
 800e1ac:	af00      	add	r7, sp, #0
 800e1ae:	60f8      	str	r0, [r7, #12]
 800e1b0:	60b9      	str	r1, [r7, #8]
 800e1b2:	607a      	str	r2, [r7, #4]
	BYTE bm, bv;
	UINT i;
	DWORD val, scl, ctr;


	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 800e1b4:	68bb      	ldr	r3, [r7, #8]
 800e1b6:	3b02      	subs	r3, #2
 800e1b8:	60bb      	str	r3, [r7, #8]
	if (clst >= fs->n_fatent - 2) clst = 0;
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1be:	3b02      	subs	r3, #2
 800e1c0:	68ba      	ldr	r2, [r7, #8]
 800e1c2:	429a      	cmp	r2, r3
 800e1c4:	d301      	bcc.n	800e1ca <find_bitmap+0x22>
 800e1c6:	2300      	movs	r3, #0
 800e1c8:	60bb      	str	r3, [r7, #8]
	scl = val = clst; ctr = 0;
 800e1ca:	68bb      	ldr	r3, [r7, #8]
 800e1cc:	61fb      	str	r3, [r7, #28]
 800e1ce:	69fb      	ldr	r3, [r7, #28]
 800e1d0:	61bb      	str	r3, [r7, #24]
 800e1d2:	2300      	movs	r3, #0
 800e1d4:	617b      	str	r3, [r7, #20]
	for (;;) {
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e1da:	69fb      	ldr	r3, [r7, #28]
 800e1dc:	08db      	lsrs	r3, r3, #3
 800e1de:	68f9      	ldr	r1, [r7, #12]
 800e1e0:	8989      	ldrh	r1, [r1, #12]
 800e1e2:	fbb3 f3f1 	udiv	r3, r3, r1
 800e1e6:	4413      	add	r3, r2
 800e1e8:	4619      	mov	r1, r3
 800e1ea:	68f8      	ldr	r0, [r7, #12]
 800e1ec:	f7ff fca8 	bl	800db40 <move_window>
 800e1f0:	4603      	mov	r3, r0
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d002      	beq.n	800e1fc <find_bitmap+0x54>
 800e1f6:	f04f 33ff 	mov.w	r3, #4294967295
 800e1fa:	e058      	b.n	800e2ae <find_bitmap+0x106>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 800e1fc:	69fb      	ldr	r3, [r7, #28]
 800e1fe:	08db      	lsrs	r3, r3, #3
 800e200:	68fa      	ldr	r2, [r7, #12]
 800e202:	8992      	ldrh	r2, [r2, #12]
 800e204:	fbb3 f1f2 	udiv	r1, r3, r2
 800e208:	fb02 f201 	mul.w	r2, r2, r1
 800e20c:	1a9b      	subs	r3, r3, r2
 800e20e:	623b      	str	r3, [r7, #32]
 800e210:	69fb      	ldr	r3, [r7, #28]
 800e212:	f003 0307 	and.w	r3, r3, #7
 800e216:	2201      	movs	r2, #1
 800e218:	fa02 f303 	lsl.w	r3, r2, r3
 800e21c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		do {
			do {
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 800e220:	68fa      	ldr	r2, [r7, #12]
 800e222:	6a3b      	ldr	r3, [r7, #32]
 800e224:	4413      	add	r3, r2
 800e226:	3340      	adds	r3, #64	; 0x40
 800e228:	781a      	ldrb	r2, [r3, #0]
 800e22a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e22e:	4013      	ands	r3, r2
 800e230:	74fb      	strb	r3, [r7, #19]
 800e232:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e236:	005b      	lsls	r3, r3, #1
 800e238:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 800e23c:	69fb      	ldr	r3, [r7, #28]
 800e23e:	3301      	adds	r3, #1
 800e240:	61fb      	str	r3, [r7, #28]
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e246:	3b02      	subs	r3, #2
 800e248:	69fa      	ldr	r2, [r7, #28]
 800e24a:	429a      	cmp	r2, r3
 800e24c:	d307      	bcc.n	800e25e <find_bitmap+0xb6>
					val = 0; bm = 0; i = SS(fs);
 800e24e:	2300      	movs	r3, #0
 800e250:	61fb      	str	r3, [r7, #28]
 800e252:	2300      	movs	r3, #0
 800e254:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	899b      	ldrh	r3, [r3, #12]
 800e25c:	623b      	str	r3, [r7, #32]
				}
				if (!bv) {	/* Is it a free cluster? */
 800e25e:	7cfb      	ldrb	r3, [r7, #19]
 800e260:	2b00      	cmp	r3, #0
 800e262:	d109      	bne.n	800e278 <find_bitmap+0xd0>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 800e264:	697b      	ldr	r3, [r7, #20]
 800e266:	3301      	adds	r3, #1
 800e268:	617b      	str	r3, [r7, #20]
 800e26a:	697a      	ldr	r2, [r7, #20]
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	429a      	cmp	r2, r3
 800e270:	d106      	bne.n	800e280 <find_bitmap+0xd8>
 800e272:	69bb      	ldr	r3, [r7, #24]
 800e274:	3302      	adds	r3, #2
 800e276:	e01a      	b.n	800e2ae <find_bitmap+0x106>
				} else {
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
 800e278:	69fb      	ldr	r3, [r7, #28]
 800e27a:	61bb      	str	r3, [r7, #24]
 800e27c:	2300      	movs	r3, #0
 800e27e:	617b      	str	r3, [r7, #20]
				}
				if (val == clst) return 0;	/* All cluster scanned? */
 800e280:	69fa      	ldr	r2, [r7, #28]
 800e282:	68bb      	ldr	r3, [r7, #8]
 800e284:	429a      	cmp	r2, r3
 800e286:	d101      	bne.n	800e28c <find_bitmap+0xe4>
 800e288:	2300      	movs	r3, #0
 800e28a:	e010      	b.n	800e2ae <find_bitmap+0x106>
			} while (bm);
 800e28c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e290:	2b00      	cmp	r3, #0
 800e292:	d1c5      	bne.n	800e220 <find_bitmap+0x78>
			bm = 1;
 800e294:	2301      	movs	r3, #1
 800e296:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		} while (++i < SS(fs));
 800e29a:	6a3b      	ldr	r3, [r7, #32]
 800e29c:	3301      	adds	r3, #1
 800e29e:	623b      	str	r3, [r7, #32]
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	899b      	ldrh	r3, [r3, #12]
 800e2a4:	461a      	mov	r2, r3
 800e2a6:	6a3b      	ldr	r3, [r7, #32]
 800e2a8:	4293      	cmp	r3, r2
 800e2aa:	d3b9      	bcc.n	800e220 <find_bitmap+0x78>
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 800e2ac:	e793      	b.n	800e1d6 <find_bitmap+0x2e>
	}
}
 800e2ae:	4618      	mov	r0, r3
 800e2b0:	3728      	adds	r7, #40	; 0x28
 800e2b2:	46bd      	mov	sp, r7
 800e2b4:	bd80      	pop	{r7, pc}

0800e2b6 <change_bitmap>:
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to change from */
	DWORD ncl,	/* Number of clusters to be changed */
	int bv		/* bit value to be set (0 or 1) */
)
{
 800e2b6:	b580      	push	{r7, lr}
 800e2b8:	b088      	sub	sp, #32
 800e2ba:	af00      	add	r7, sp, #0
 800e2bc:	60f8      	str	r0, [r7, #12]
 800e2be:	60b9      	str	r1, [r7, #8]
 800e2c0:	607a      	str	r2, [r7, #4]
 800e2c2:	603b      	str	r3, [r7, #0]
	BYTE bm;
	UINT i;
	DWORD sect;

	clst -= 2;	/* The first bit corresponds to cluster #2 */
 800e2c4:	68bb      	ldr	r3, [r7, #8]
 800e2c6:	3b02      	subs	r3, #2
 800e2c8:	60bb      	str	r3, [r7, #8]
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
 800e2ca:	68fb      	ldr	r3, [r7, #12]
 800e2cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e2ce:	68bb      	ldr	r3, [r7, #8]
 800e2d0:	08db      	lsrs	r3, r3, #3
 800e2d2:	68f9      	ldr	r1, [r7, #12]
 800e2d4:	8989      	ldrh	r1, [r1, #12]
 800e2d6:	fbb3 f3f1 	udiv	r3, r3, r1
 800e2da:	4413      	add	r3, r2
 800e2dc:	617b      	str	r3, [r7, #20]
	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
 800e2de:	68bb      	ldr	r3, [r7, #8]
 800e2e0:	08db      	lsrs	r3, r3, #3
 800e2e2:	68fa      	ldr	r2, [r7, #12]
 800e2e4:	8992      	ldrh	r2, [r2, #12]
 800e2e6:	fbb3 f1f2 	udiv	r1, r3, r2
 800e2ea:	fb02 f201 	mul.w	r2, r2, r1
 800e2ee:	1a9b      	subs	r3, r3, r2
 800e2f0:	61bb      	str	r3, [r7, #24]
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
 800e2f2:	68bb      	ldr	r3, [r7, #8]
 800e2f4:	f003 0307 	and.w	r3, r3, #7
 800e2f8:	2201      	movs	r2, #1
 800e2fa:	fa02 f303 	lsl.w	r3, r2, r3
 800e2fe:	77fb      	strb	r3, [r7, #31]
	for (;;) {
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800e300:	697b      	ldr	r3, [r7, #20]
 800e302:	1c5a      	adds	r2, r3, #1
 800e304:	617a      	str	r2, [r7, #20]
 800e306:	4619      	mov	r1, r3
 800e308:	68f8      	ldr	r0, [r7, #12]
 800e30a:	f7ff fc19 	bl	800db40 <move_window>
 800e30e:	4603      	mov	r3, r0
 800e310:	2b00      	cmp	r3, #0
 800e312:	d001      	beq.n	800e318 <change_bitmap+0x62>
 800e314:	2301      	movs	r3, #1
 800e316:	e03f      	b.n	800e398 <change_bitmap+0xe2>
		do {
			do {
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 800e318:	68fa      	ldr	r2, [r7, #12]
 800e31a:	69bb      	ldr	r3, [r7, #24]
 800e31c:	4413      	add	r3, r2
 800e31e:	3340      	adds	r3, #64	; 0x40
 800e320:	781a      	ldrb	r2, [r3, #0]
 800e322:	7ffb      	ldrb	r3, [r7, #31]
 800e324:	4013      	ands	r3, r2
 800e326:	b2db      	uxtb	r3, r3
 800e328:	2b00      	cmp	r3, #0
 800e32a:	bf14      	ite	ne
 800e32c:	2301      	movne	r3, #1
 800e32e:	2300      	moveq	r3, #0
 800e330:	b2db      	uxtb	r3, r3
 800e332:	461a      	mov	r2, r3
 800e334:	683b      	ldr	r3, [r7, #0]
 800e336:	4293      	cmp	r3, r2
 800e338:	d101      	bne.n	800e33e <change_bitmap+0x88>
 800e33a:	2302      	movs	r3, #2
 800e33c:	e02c      	b.n	800e398 <change_bitmap+0xe2>
				fs->win[i] ^= bm;	/* Flip the bit */
 800e33e:	68fa      	ldr	r2, [r7, #12]
 800e340:	69bb      	ldr	r3, [r7, #24]
 800e342:	4413      	add	r3, r2
 800e344:	3340      	adds	r3, #64	; 0x40
 800e346:	781a      	ldrb	r2, [r3, #0]
 800e348:	7ffb      	ldrb	r3, [r7, #31]
 800e34a:	4053      	eors	r3, r2
 800e34c:	b2d9      	uxtb	r1, r3
 800e34e:	68fa      	ldr	r2, [r7, #12]
 800e350:	69bb      	ldr	r3, [r7, #24]
 800e352:	4413      	add	r3, r2
 800e354:	3340      	adds	r3, #64	; 0x40
 800e356:	460a      	mov	r2, r1
 800e358:	701a      	strb	r2, [r3, #0]
				fs->wflag = 1;
 800e35a:	68fb      	ldr	r3, [r7, #12]
 800e35c:	2201      	movs	r2, #1
 800e35e:	70da      	strb	r2, [r3, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	3b01      	subs	r3, #1
 800e364:	607b      	str	r3, [r7, #4]
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d101      	bne.n	800e370 <change_bitmap+0xba>
 800e36c:	2300      	movs	r3, #0
 800e36e:	e013      	b.n	800e398 <change_bitmap+0xe2>
			} while (bm <<= 1);		/* Next bit */
 800e370:	7ffb      	ldrb	r3, [r7, #31]
 800e372:	005b      	lsls	r3, r3, #1
 800e374:	77fb      	strb	r3, [r7, #31]
 800e376:	7ffb      	ldrb	r3, [r7, #31]
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d1cd      	bne.n	800e318 <change_bitmap+0x62>
			bm = 1;
 800e37c:	2301      	movs	r3, #1
 800e37e:	77fb      	strb	r3, [r7, #31]
		} while (++i < SS(fs));		/* Next byte */
 800e380:	69bb      	ldr	r3, [r7, #24]
 800e382:	3301      	adds	r3, #1
 800e384:	61bb      	str	r3, [r7, #24]
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	899b      	ldrh	r3, [r3, #12]
 800e38a:	461a      	mov	r2, r3
 800e38c:	69bb      	ldr	r3, [r7, #24]
 800e38e:	4293      	cmp	r3, r2
 800e390:	d3c2      	bcc.n	800e318 <change_bitmap+0x62>
		i = 0;
 800e392:	2300      	movs	r3, #0
 800e394:	61bb      	str	r3, [r7, #24]
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800e396:	e7b3      	b.n	800e300 <change_bitmap+0x4a>
	}
}
 800e398:	4618      	mov	r0, r3
 800e39a:	3720      	adds	r7, #32
 800e39c:	46bd      	mov	sp, r7
 800e39e:	bd80      	pop	{r7, pc}

0800e3a0 <fill_first_frag>:

static
FRESULT fill_first_frag (
	_FDID* obj	/* Pointer to the corresponding object */
)
{
 800e3a0:	b580      	push	{r7, lr}
 800e3a2:	b086      	sub	sp, #24
 800e3a4:	af00      	add	r7, sp, #0
 800e3a6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD cl, n;

	if (obj->stat == 3) {	/* Has the object been changed 'fragmented'? */
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	79db      	ldrb	r3, [r3, #7]
 800e3ac:	2b03      	cmp	r3, #3
 800e3ae:	d121      	bne.n	800e3f4 <fill_first_frag+0x54>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	689b      	ldr	r3, [r3, #8]
 800e3b4:	617b      	str	r3, [r7, #20]
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	699b      	ldr	r3, [r3, #24]
 800e3ba:	613b      	str	r3, [r7, #16]
 800e3bc:	e014      	b.n	800e3e8 <fill_first_frag+0x48>
			res = put_fat(obj->fs, cl, cl + 1);
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	6818      	ldr	r0, [r3, #0]
 800e3c2:	697b      	ldr	r3, [r7, #20]
 800e3c4:	3301      	adds	r3, #1
 800e3c6:	461a      	mov	r2, r3
 800e3c8:	6979      	ldr	r1, [r7, #20]
 800e3ca:	f7ff fdcb 	bl	800df64 <put_fat>
 800e3ce:	4603      	mov	r3, r0
 800e3d0:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) return res;
 800e3d2:	7bfb      	ldrb	r3, [r7, #15]
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	d001      	beq.n	800e3dc <fill_first_frag+0x3c>
 800e3d8:	7bfb      	ldrb	r3, [r7, #15]
 800e3da:	e00c      	b.n	800e3f6 <fill_first_frag+0x56>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800e3dc:	697b      	ldr	r3, [r7, #20]
 800e3de:	3301      	adds	r3, #1
 800e3e0:	617b      	str	r3, [r7, #20]
 800e3e2:	693b      	ldr	r3, [r7, #16]
 800e3e4:	3b01      	subs	r3, #1
 800e3e6:	613b      	str	r3, [r7, #16]
 800e3e8:	693b      	ldr	r3, [r7, #16]
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d1e7      	bne.n	800e3be <fill_first_frag+0x1e>
		}
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	2200      	movs	r2, #0
 800e3f2:	71da      	strb	r2, [r3, #7]
	}
	return FR_OK;
 800e3f4:	2300      	movs	r3, #0
}
 800e3f6:	4618      	mov	r0, r3
 800e3f8:	3718      	adds	r7, #24
 800e3fa:	46bd      	mov	sp, r7
 800e3fc:	bd80      	pop	{r7, pc}

0800e3fe <fill_last_frag>:
FRESULT fill_last_frag (
	_FDID* obj,	/* Pointer to the corresponding object */
	DWORD lcl,	/* Last cluster of the fragment */
	DWORD term	/* Value to set the last FAT entry */
)
{
 800e3fe:	b580      	push	{r7, lr}
 800e400:	b086      	sub	sp, #24
 800e402:	af00      	add	r7, sp, #0
 800e404:	60f8      	str	r0, [r7, #12]
 800e406:	60b9      	str	r1, [r7, #8]
 800e408:	607a      	str	r2, [r7, #4]
	FRESULT res;

	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 800e40a:	e020      	b.n	800e44e <fill_last_frag+0x50>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 800e40c:	68fb      	ldr	r3, [r7, #12]
 800e40e:	6818      	ldr	r0, [r3, #0]
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	69db      	ldr	r3, [r3, #28]
 800e414:	68ba      	ldr	r2, [r7, #8]
 800e416:	1ad3      	subs	r3, r2, r3
 800e418:	1c59      	adds	r1, r3, #1
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	69db      	ldr	r3, [r3, #28]
 800e41e:	2b01      	cmp	r3, #1
 800e420:	d905      	bls.n	800e42e <fill_last_frag+0x30>
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	69db      	ldr	r3, [r3, #28]
 800e426:	68ba      	ldr	r2, [r7, #8]
 800e428:	1ad3      	subs	r3, r2, r3
 800e42a:	3302      	adds	r3, #2
 800e42c:	e000      	b.n	800e430 <fill_last_frag+0x32>
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	461a      	mov	r2, r3
 800e432:	f7ff fd97 	bl	800df64 <put_fat>
 800e436:	4603      	mov	r3, r0
 800e438:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 800e43a:	7dfb      	ldrb	r3, [r7, #23]
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d001      	beq.n	800e444 <fill_last_frag+0x46>
 800e440:	7dfb      	ldrb	r3, [r7, #23]
 800e442:	e009      	b.n	800e458 <fill_last_frag+0x5a>
		obj->n_frag--;
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	69db      	ldr	r3, [r3, #28]
 800e448:	1e5a      	subs	r2, r3, #1
 800e44a:	68fb      	ldr	r3, [r7, #12]
 800e44c:	61da      	str	r2, [r3, #28]
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 800e44e:	68fb      	ldr	r3, [r7, #12]
 800e450:	69db      	ldr	r3, [r3, #28]
 800e452:	2b00      	cmp	r3, #0
 800e454:	d1da      	bne.n	800e40c <fill_last_frag+0xe>
	}
	return FR_OK;
 800e456:	2300      	movs	r3, #0
}
 800e458:	4618      	mov	r0, r3
 800e45a:	3718      	adds	r7, #24
 800e45c:	46bd      	mov	sp, r7
 800e45e:	bd80      	pop	{r7, pc}

0800e460 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800e460:	b580      	push	{r7, lr}
 800e462:	b08a      	sub	sp, #40	; 0x28
 800e464:	af00      	add	r7, sp, #0
 800e466:	60f8      	str	r0, [r7, #12]
 800e468:	60b9      	str	r1, [r7, #8]
 800e46a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800e46c:	2300      	movs	r3, #0
 800e46e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	61bb      	str	r3, [r7, #24]
#if _FS_EXFAT || _USE_TRIM
	DWORD scl = clst, ecl = clst;
 800e476:	68bb      	ldr	r3, [r7, #8]
 800e478:	627b      	str	r3, [r7, #36]	; 0x24
 800e47a:	68bb      	ldr	r3, [r7, #8]
 800e47c:	623b      	str	r3, [r7, #32]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800e47e:	68bb      	ldr	r3, [r7, #8]
 800e480:	2b01      	cmp	r3, #1
 800e482:	d904      	bls.n	800e48e <remove_chain+0x2e>
 800e484:	69bb      	ldr	r3, [r7, #24]
 800e486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e488:	68ba      	ldr	r2, [r7, #8]
 800e48a:	429a      	cmp	r2, r3
 800e48c:	d301      	bcc.n	800e492 <remove_chain+0x32>
 800e48e:	2302      	movs	r3, #2
 800e490:	e096      	b.n	800e5c0 <remove_chain+0x160>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	2b00      	cmp	r3, #0
 800e496:	d014      	beq.n	800e4c2 <remove_chain+0x62>
 800e498:	69bb      	ldr	r3, [r7, #24]
 800e49a:	781b      	ldrb	r3, [r3, #0]
 800e49c:	2b04      	cmp	r3, #4
 800e49e:	d103      	bne.n	800e4a8 <remove_chain+0x48>
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	79db      	ldrb	r3, [r3, #7]
 800e4a4:	2b02      	cmp	r3, #2
 800e4a6:	d00c      	beq.n	800e4c2 <remove_chain+0x62>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800e4a8:	f04f 32ff 	mov.w	r2, #4294967295
 800e4ac:	6879      	ldr	r1, [r7, #4]
 800e4ae:	69b8      	ldr	r0, [r7, #24]
 800e4b0:	f7ff fd58 	bl	800df64 <put_fat>
 800e4b4:	4603      	mov	r3, r0
 800e4b6:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800e4b8:	7ffb      	ldrb	r3, [r7, #31]
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d001      	beq.n	800e4c2 <remove_chain+0x62>
 800e4be:	7ffb      	ldrb	r3, [r7, #31]
 800e4c0:	e07e      	b.n	800e5c0 <remove_chain+0x160>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800e4c2:	68b9      	ldr	r1, [r7, #8]
 800e4c4:	68f8      	ldr	r0, [r7, #12]
 800e4c6:	f7ff fbf9 	bl	800dcbc <get_fat>
 800e4ca:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800e4cc:	697b      	ldr	r3, [r7, #20]
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d055      	beq.n	800e57e <remove_chain+0x11e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800e4d2:	697b      	ldr	r3, [r7, #20]
 800e4d4:	2b01      	cmp	r3, #1
 800e4d6:	d101      	bne.n	800e4dc <remove_chain+0x7c>
 800e4d8:	2302      	movs	r3, #2
 800e4da:	e071      	b.n	800e5c0 <remove_chain+0x160>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800e4dc:	697b      	ldr	r3, [r7, #20]
 800e4de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4e2:	d101      	bne.n	800e4e8 <remove_chain+0x88>
 800e4e4:	2301      	movs	r3, #1
 800e4e6:	e06b      	b.n	800e5c0 <remove_chain+0x160>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800e4e8:	69bb      	ldr	r3, [r7, #24]
 800e4ea:	781b      	ldrb	r3, [r3, #0]
 800e4ec:	2b04      	cmp	r3, #4
 800e4ee:	d00b      	beq.n	800e508 <remove_chain+0xa8>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800e4f0:	2200      	movs	r2, #0
 800e4f2:	68b9      	ldr	r1, [r7, #8]
 800e4f4:	69b8      	ldr	r0, [r7, #24]
 800e4f6:	f7ff fd35 	bl	800df64 <put_fat>
 800e4fa:	4603      	mov	r3, r0
 800e4fc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800e4fe:	7ffb      	ldrb	r3, [r7, #31]
 800e500:	2b00      	cmp	r3, #0
 800e502:	d001      	beq.n	800e508 <remove_chain+0xa8>
 800e504:	7ffb      	ldrb	r3, [r7, #31]
 800e506:	e05b      	b.n	800e5c0 <remove_chain+0x160>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800e508:	69bb      	ldr	r3, [r7, #24]
 800e50a:	6a1a      	ldr	r2, [r3, #32]
 800e50c:	69bb      	ldr	r3, [r7, #24]
 800e50e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e510:	3b02      	subs	r3, #2
 800e512:	429a      	cmp	r2, r3
 800e514:	d20b      	bcs.n	800e52e <remove_chain+0xce>
			fs->free_clst++;
 800e516:	69bb      	ldr	r3, [r7, #24]
 800e518:	6a1b      	ldr	r3, [r3, #32]
 800e51a:	1c5a      	adds	r2, r3, #1
 800e51c:	69bb      	ldr	r3, [r7, #24]
 800e51e:	621a      	str	r2, [r3, #32]
			fs->fsi_flag |= 1;
 800e520:	69bb      	ldr	r3, [r7, #24]
 800e522:	791b      	ldrb	r3, [r3, #4]
 800e524:	f043 0301 	orr.w	r3, r3, #1
 800e528:	b2da      	uxtb	r2, r3
 800e52a:	69bb      	ldr	r3, [r7, #24]
 800e52c:	711a      	strb	r2, [r3, #4]
		}
#if _FS_EXFAT || _USE_TRIM
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 800e52e:	6a3b      	ldr	r3, [r7, #32]
 800e530:	3301      	adds	r3, #1
 800e532:	697a      	ldr	r2, [r7, #20]
 800e534:	429a      	cmp	r2, r3
 800e536:	d102      	bne.n	800e53e <remove_chain+0xde>
			ecl = nxt;
 800e538:	697b      	ldr	r3, [r7, #20]
 800e53a:	623b      	str	r3, [r7, #32]
 800e53c:	e017      	b.n	800e56e <remove_chain+0x10e>
		} else {				/* End of contiguous cluster block */
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800e53e:	69bb      	ldr	r3, [r7, #24]
 800e540:	781b      	ldrb	r3, [r3, #0]
 800e542:	2b04      	cmp	r3, #4
 800e544:	d10f      	bne.n	800e566 <remove_chain+0x106>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 800e546:	6a3a      	ldr	r2, [r7, #32]
 800e548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e54a:	1ad3      	subs	r3, r2, r3
 800e54c:	1c5a      	adds	r2, r3, #1
 800e54e:	2300      	movs	r3, #0
 800e550:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e552:	69b8      	ldr	r0, [r7, #24]
 800e554:	f7ff feaf 	bl	800e2b6 <change_bitmap>
 800e558:	4603      	mov	r3, r0
 800e55a:	77fb      	strb	r3, [r7, #31]
				if (res != FR_OK) return res;
 800e55c:	7ffb      	ldrb	r3, [r7, #31]
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d001      	beq.n	800e566 <remove_chain+0x106>
 800e562:	7ffb      	ldrb	r3, [r7, #31]
 800e564:	e02c      	b.n	800e5c0 <remove_chain+0x160>
#if _USE_TRIM
			rt[0] = clust2sect(fs, scl);					/* Start sector */
			rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
 800e566:	697b      	ldr	r3, [r7, #20]
 800e568:	623b      	str	r3, [r7, #32]
 800e56a:	6a3b      	ldr	r3, [r7, #32]
 800e56c:	627b      	str	r3, [r7, #36]	; 0x24
		}
#endif
		clst = nxt;					/* Next cluster */
 800e56e:	697b      	ldr	r3, [r7, #20]
 800e570:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800e572:	69bb      	ldr	r3, [r7, #24]
 800e574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e576:	68ba      	ldr	r2, [r7, #8]
 800e578:	429a      	cmp	r2, r3
 800e57a:	d3a2      	bcc.n	800e4c2 <remove_chain+0x62>
 800e57c:	e000      	b.n	800e580 <remove_chain+0x120>
		if (nxt == 0) break;				/* Empty cluster? */
 800e57e:	bf00      	nop

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {
 800e580:	69bb      	ldr	r3, [r7, #24]
 800e582:	781b      	ldrb	r3, [r3, #0]
 800e584:	2b04      	cmp	r3, #4
 800e586:	d11a      	bne.n	800e5be <remove_chain+0x15e>
		if (pclst == 0) {	/* Does the object have no chain? */
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d103      	bne.n	800e596 <remove_chain+0x136>
			obj->stat = 0;		/* Change the object status 'initial' */
 800e58e:	68fb      	ldr	r3, [r7, #12]
 800e590:	2200      	movs	r2, #0
 800e592:	71da      	strb	r2, [r3, #7]
 800e594:	e013      	b.n	800e5be <remove_chain+0x15e>
		} else {
			if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Did the chain get contiguous? */
 800e596:	68fb      	ldr	r3, [r7, #12]
 800e598:	79db      	ldrb	r3, [r3, #7]
 800e59a:	2b03      	cmp	r3, #3
 800e59c:	d10f      	bne.n	800e5be <remove_chain+0x15e>
 800e59e:	68fb      	ldr	r3, [r7, #12]
 800e5a0:	689b      	ldr	r3, [r3, #8]
 800e5a2:	687a      	ldr	r2, [r7, #4]
 800e5a4:	429a      	cmp	r2, r3
 800e5a6:	d30a      	bcc.n	800e5be <remove_chain+0x15e>
 800e5a8:	68fb      	ldr	r3, [r7, #12]
 800e5aa:	689a      	ldr	r2, [r3, #8]
 800e5ac:	68fb      	ldr	r3, [r7, #12]
 800e5ae:	699b      	ldr	r3, [r3, #24]
 800e5b0:	4413      	add	r3, r2
 800e5b2:	687a      	ldr	r2, [r7, #4]
 800e5b4:	429a      	cmp	r2, r3
 800e5b6:	d802      	bhi.n	800e5be <remove_chain+0x15e>
				obj->stat = 2;	/* Change the object status 'contiguous' */
 800e5b8:	68fb      	ldr	r3, [r7, #12]
 800e5ba:	2202      	movs	r2, #2
 800e5bc:	71da      	strb	r2, [r3, #7]
			}
		}
	}
#endif
	return FR_OK;
 800e5be:	2300      	movs	r3, #0
}
 800e5c0:	4618      	mov	r0, r3
 800e5c2:	3728      	adds	r7, #40	; 0x28
 800e5c4:	46bd      	mov	sp, r7
 800e5c6:	bd80      	pop	{r7, pc}

0800e5c8 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800e5c8:	b580      	push	{r7, lr}
 800e5ca:	b088      	sub	sp, #32
 800e5cc:	af00      	add	r7, sp, #0
 800e5ce:	6078      	str	r0, [r7, #4]
 800e5d0:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800e5d8:	683b      	ldr	r3, [r7, #0]
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d10d      	bne.n	800e5fa <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800e5de:	693b      	ldr	r3, [r7, #16]
 800e5e0:	69db      	ldr	r3, [r3, #28]
 800e5e2:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800e5e4:	69bb      	ldr	r3, [r7, #24]
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d004      	beq.n	800e5f4 <create_chain+0x2c>
 800e5ea:	693b      	ldr	r3, [r7, #16]
 800e5ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5ee:	69ba      	ldr	r2, [r7, #24]
 800e5f0:	429a      	cmp	r2, r3
 800e5f2:	d31b      	bcc.n	800e62c <create_chain+0x64>
 800e5f4:	2301      	movs	r3, #1
 800e5f6:	61bb      	str	r3, [r7, #24]
 800e5f8:	e018      	b.n	800e62c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800e5fa:	6839      	ldr	r1, [r7, #0]
 800e5fc:	6878      	ldr	r0, [r7, #4]
 800e5fe:	f7ff fb5d 	bl	800dcbc <get_fat>
 800e602:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800e604:	68fb      	ldr	r3, [r7, #12]
 800e606:	2b01      	cmp	r3, #1
 800e608:	d801      	bhi.n	800e60e <create_chain+0x46>
 800e60a:	2301      	movs	r3, #1
 800e60c:	e0d9      	b.n	800e7c2 <create_chain+0x1fa>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800e60e:	68fb      	ldr	r3, [r7, #12]
 800e610:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e614:	d101      	bne.n	800e61a <create_chain+0x52>
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	e0d3      	b.n	800e7c2 <create_chain+0x1fa>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800e61a:	693b      	ldr	r3, [r7, #16]
 800e61c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e61e:	68fa      	ldr	r2, [r7, #12]
 800e620:	429a      	cmp	r2, r3
 800e622:	d201      	bcs.n	800e628 <create_chain+0x60>
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	e0cc      	b.n	800e7c2 <create_chain+0x1fa>
		scl = clst;
 800e628:	683b      	ldr	r3, [r7, #0]
 800e62a:	61bb      	str	r3, [r7, #24]
	}

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800e62c:	693b      	ldr	r3, [r7, #16]
 800e62e:	781b      	ldrb	r3, [r3, #0]
 800e630:	2b04      	cmp	r3, #4
 800e632:	d164      	bne.n	800e6fe <create_chain+0x136>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 800e634:	2201      	movs	r2, #1
 800e636:	69b9      	ldr	r1, [r7, #24]
 800e638:	6938      	ldr	r0, [r7, #16]
 800e63a:	f7ff fdb5 	bl	800e1a8 <find_bitmap>
 800e63e:	61f8      	str	r0, [r7, #28]
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 800e640:	69fb      	ldr	r3, [r7, #28]
 800e642:	2b00      	cmp	r3, #0
 800e644:	d003      	beq.n	800e64e <create_chain+0x86>
 800e646:	69fb      	ldr	r3, [r7, #28]
 800e648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e64c:	d101      	bne.n	800e652 <create_chain+0x8a>
 800e64e:	69fb      	ldr	r3, [r7, #28]
 800e650:	e0b7      	b.n	800e7c2 <create_chain+0x1fa>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 800e652:	2301      	movs	r3, #1
 800e654:	2201      	movs	r2, #1
 800e656:	69f9      	ldr	r1, [r7, #28]
 800e658:	6938      	ldr	r0, [r7, #16]
 800e65a:	f7ff fe2c 	bl	800e2b6 <change_bitmap>
 800e65e:	4603      	mov	r3, r0
 800e660:	75fb      	strb	r3, [r7, #23]
		if (res == FR_INT_ERR) return 1;
 800e662:	7dfb      	ldrb	r3, [r7, #23]
 800e664:	2b02      	cmp	r3, #2
 800e666:	d101      	bne.n	800e66c <create_chain+0xa4>
 800e668:	2301      	movs	r3, #1
 800e66a:	e0aa      	b.n	800e7c2 <create_chain+0x1fa>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 800e66c:	7dfb      	ldrb	r3, [r7, #23]
 800e66e:	2b01      	cmp	r3, #1
 800e670:	d102      	bne.n	800e678 <create_chain+0xb0>
 800e672:	f04f 33ff 	mov.w	r3, #4294967295
 800e676:	e0a4      	b.n	800e7c2 <create_chain+0x1fa>
		if (clst == 0) {							/* Is it a new chain? */
 800e678:	683b      	ldr	r3, [r7, #0]
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d103      	bne.n	800e686 <create_chain+0xbe>
			obj->stat = 2;							/* Set status 'contiguous' */
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	2202      	movs	r2, #2
 800e682:	71da      	strb	r2, [r3, #7]
 800e684:	e011      	b.n	800e6aa <create_chain+0xe2>
		} else {									/* It is a stretched chain */
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	79db      	ldrb	r3, [r3, #7]
 800e68a:	2b02      	cmp	r3, #2
 800e68c:	d10d      	bne.n	800e6aa <create_chain+0xe2>
 800e68e:	69bb      	ldr	r3, [r7, #24]
 800e690:	3301      	adds	r3, #1
 800e692:	69fa      	ldr	r2, [r7, #28]
 800e694:	429a      	cmp	r2, r3
 800e696:	d008      	beq.n	800e6aa <create_chain+0xe2>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	689b      	ldr	r3, [r3, #8]
 800e69c:	69ba      	ldr	r2, [r7, #24]
 800e69e:	1ad2      	subs	r2, r2, r3
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	619a      	str	r2, [r3, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	2203      	movs	r2, #3
 800e6a8:	71da      	strb	r2, [r3, #7]
			}
		}
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	79db      	ldrb	r3, [r3, #7]
 800e6ae:	2b02      	cmp	r3, #2
 800e6b0:	d064      	beq.n	800e77c <create_chain+0x1b4>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 800e6b2:	683b      	ldr	r3, [r7, #0]
 800e6b4:	3301      	adds	r3, #1
 800e6b6:	69fa      	ldr	r2, [r7, #28]
 800e6b8:	429a      	cmp	r2, r3
 800e6ba:	d10b      	bne.n	800e6d4 <create_chain+0x10c>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	69db      	ldr	r3, [r3, #28]
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d003      	beq.n	800e6cc <create_chain+0x104>
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	69db      	ldr	r3, [r3, #28]
 800e6c8:	3301      	adds	r3, #1
 800e6ca:	e000      	b.n	800e6ce <create_chain+0x106>
 800e6cc:	2302      	movs	r3, #2
 800e6ce:	687a      	ldr	r2, [r7, #4]
 800e6d0:	61d3      	str	r3, [r2, #28]
 800e6d2:	e053      	b.n	800e77c <create_chain+0x1b4>
			} else {				/* New fragment */
				if (obj->n_frag == 0) obj->n_frag = 1;
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	69db      	ldr	r3, [r3, #28]
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d102      	bne.n	800e6e2 <create_chain+0x11a>
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	2201      	movs	r2, #1
 800e6e0:	61da      	str	r2, [r3, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 800e6e2:	69fa      	ldr	r2, [r7, #28]
 800e6e4:	6839      	ldr	r1, [r7, #0]
 800e6e6:	6878      	ldr	r0, [r7, #4]
 800e6e8:	f7ff fe89 	bl	800e3fe <fill_last_frag>
 800e6ec:	4603      	mov	r3, r0
 800e6ee:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) obj->n_frag = 1;
 800e6f0:	7dfb      	ldrb	r3, [r7, #23]
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d142      	bne.n	800e77c <create_chain+0x1b4>
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	2201      	movs	r2, #1
 800e6fa:	61da      	str	r2, [r3, #28]
 800e6fc:	e03e      	b.n	800e77c <create_chain+0x1b4>
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800e6fe:	69bb      	ldr	r3, [r7, #24]
 800e700:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800e702:	69fb      	ldr	r3, [r7, #28]
 800e704:	3301      	adds	r3, #1
 800e706:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800e708:	693b      	ldr	r3, [r7, #16]
 800e70a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e70c:	69fa      	ldr	r2, [r7, #28]
 800e70e:	429a      	cmp	r2, r3
 800e710:	d307      	bcc.n	800e722 <create_chain+0x15a>
				ncl = 2;
 800e712:	2302      	movs	r3, #2
 800e714:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800e716:	69fa      	ldr	r2, [r7, #28]
 800e718:	69bb      	ldr	r3, [r7, #24]
 800e71a:	429a      	cmp	r2, r3
 800e71c:	d901      	bls.n	800e722 <create_chain+0x15a>
 800e71e:	2300      	movs	r3, #0
 800e720:	e04f      	b.n	800e7c2 <create_chain+0x1fa>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800e722:	69f9      	ldr	r1, [r7, #28]
 800e724:	6878      	ldr	r0, [r7, #4]
 800e726:	f7ff fac9 	bl	800dcbc <get_fat>
 800e72a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d00e      	beq.n	800e750 <create_chain+0x188>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	2b01      	cmp	r3, #1
 800e736:	d003      	beq.n	800e740 <create_chain+0x178>
 800e738:	68fb      	ldr	r3, [r7, #12]
 800e73a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e73e:	d101      	bne.n	800e744 <create_chain+0x17c>
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	e03e      	b.n	800e7c2 <create_chain+0x1fa>
			if (ncl == scl) return 0;		/* No free cluster */
 800e744:	69fa      	ldr	r2, [r7, #28]
 800e746:	69bb      	ldr	r3, [r7, #24]
 800e748:	429a      	cmp	r2, r3
 800e74a:	d1da      	bne.n	800e702 <create_chain+0x13a>
 800e74c:	2300      	movs	r3, #0
 800e74e:	e038      	b.n	800e7c2 <create_chain+0x1fa>
			if (cs == 0) break;				/* Found a free cluster */
 800e750:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800e752:	f04f 32ff 	mov.w	r2, #4294967295
 800e756:	69f9      	ldr	r1, [r7, #28]
 800e758:	6938      	ldr	r0, [r7, #16]
 800e75a:	f7ff fc03 	bl	800df64 <put_fat>
 800e75e:	4603      	mov	r3, r0
 800e760:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800e762:	7dfb      	ldrb	r3, [r7, #23]
 800e764:	2b00      	cmp	r3, #0
 800e766:	d109      	bne.n	800e77c <create_chain+0x1b4>
 800e768:	683b      	ldr	r3, [r7, #0]
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d006      	beq.n	800e77c <create_chain+0x1b4>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800e76e:	69fa      	ldr	r2, [r7, #28]
 800e770:	6839      	ldr	r1, [r7, #0]
 800e772:	6938      	ldr	r0, [r7, #16]
 800e774:	f7ff fbf6 	bl	800df64 <put_fat>
 800e778:	4603      	mov	r3, r0
 800e77a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800e77c:	7dfb      	ldrb	r3, [r7, #23]
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d116      	bne.n	800e7b0 <create_chain+0x1e8>
		fs->last_clst = ncl;
 800e782:	693b      	ldr	r3, [r7, #16]
 800e784:	69fa      	ldr	r2, [r7, #28]
 800e786:	61da      	str	r2, [r3, #28]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800e788:	693b      	ldr	r3, [r7, #16]
 800e78a:	6a1a      	ldr	r2, [r3, #32]
 800e78c:	693b      	ldr	r3, [r7, #16]
 800e78e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e790:	3b02      	subs	r3, #2
 800e792:	429a      	cmp	r2, r3
 800e794:	d804      	bhi.n	800e7a0 <create_chain+0x1d8>
 800e796:	693b      	ldr	r3, [r7, #16]
 800e798:	6a1b      	ldr	r3, [r3, #32]
 800e79a:	1e5a      	subs	r2, r3, #1
 800e79c:	693b      	ldr	r3, [r7, #16]
 800e79e:	621a      	str	r2, [r3, #32]
		fs->fsi_flag |= 1;
 800e7a0:	693b      	ldr	r3, [r7, #16]
 800e7a2:	791b      	ldrb	r3, [r3, #4]
 800e7a4:	f043 0301 	orr.w	r3, r3, #1
 800e7a8:	b2da      	uxtb	r2, r3
 800e7aa:	693b      	ldr	r3, [r7, #16]
 800e7ac:	711a      	strb	r2, [r3, #4]
 800e7ae:	e007      	b.n	800e7c0 <create_chain+0x1f8>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800e7b0:	7dfb      	ldrb	r3, [r7, #23]
 800e7b2:	2b01      	cmp	r3, #1
 800e7b4:	d102      	bne.n	800e7bc <create_chain+0x1f4>
 800e7b6:	f04f 33ff 	mov.w	r3, #4294967295
 800e7ba:	e000      	b.n	800e7be <create_chain+0x1f6>
 800e7bc:	2301      	movs	r3, #1
 800e7be:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800e7c0:	69fb      	ldr	r3, [r7, #28]
}
 800e7c2:	4618      	mov	r0, r3
 800e7c4:	3720      	adds	r7, #32
 800e7c6:	46bd      	mov	sp, r7
 800e7c8:	bd80      	pop	{r7, pc}

0800e7ca <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800e7ca:	b590      	push	{r4, r7, lr}
 800e7cc:	b089      	sub	sp, #36	; 0x24
 800e7ce:	af00      	add	r7, sp, #0
 800e7d0:	60f8      	str	r0, [r7, #12]
 800e7d2:	e9c7 2300 	strd	r2, r3, [r7]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800e7d6:	68fb      	ldr	r3, [r7, #12]
 800e7d8:	681b      	ldr	r3, [r3, #0]
 800e7da:	617b      	str	r3, [r7, #20]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e7e0:	3304      	adds	r3, #4
 800e7e2:	61bb      	str	r3, [r7, #24]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800e7e4:	697b      	ldr	r3, [r7, #20]
 800e7e6:	899b      	ldrh	r3, [r3, #12]
 800e7e8:	b29b      	uxth	r3, r3
 800e7ea:	f04f 0400 	mov.w	r4, #0
 800e7ee:	461a      	mov	r2, r3
 800e7f0:	4623      	mov	r3, r4
 800e7f2:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e7f6:	f7f1 fd23 	bl	8000240 <__aeabi_uldivmod>
 800e7fa:	4603      	mov	r3, r0
 800e7fc:	460c      	mov	r4, r1
 800e7fe:	4618      	mov	r0, r3
 800e800:	4621      	mov	r1, r4
 800e802:	697b      	ldr	r3, [r7, #20]
 800e804:	895b      	ldrh	r3, [r3, #10]
 800e806:	b29b      	uxth	r3, r3
 800e808:	f04f 0400 	mov.w	r4, #0
 800e80c:	461a      	mov	r2, r3
 800e80e:	4623      	mov	r3, r4
 800e810:	f7f1 fd16 	bl	8000240 <__aeabi_uldivmod>
 800e814:	4603      	mov	r3, r0
 800e816:	460c      	mov	r4, r1
 800e818:	61fb      	str	r3, [r7, #28]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800e81a:	69bb      	ldr	r3, [r7, #24]
 800e81c:	1d1a      	adds	r2, r3, #4
 800e81e:	61ba      	str	r2, [r7, #24]
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	613b      	str	r3, [r7, #16]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800e824:	693b      	ldr	r3, [r7, #16]
 800e826:	2b00      	cmp	r3, #0
 800e828:	d101      	bne.n	800e82e <clmt_clust+0x64>
 800e82a:	2300      	movs	r3, #0
 800e82c:	e010      	b.n	800e850 <clmt_clust+0x86>
		if (cl < ncl) break;	/* In this fragment? */
 800e82e:	69fa      	ldr	r2, [r7, #28]
 800e830:	693b      	ldr	r3, [r7, #16]
 800e832:	429a      	cmp	r2, r3
 800e834:	d307      	bcc.n	800e846 <clmt_clust+0x7c>
		cl -= ncl; tbl++;		/* Next fragment */
 800e836:	69fa      	ldr	r2, [r7, #28]
 800e838:	693b      	ldr	r3, [r7, #16]
 800e83a:	1ad3      	subs	r3, r2, r3
 800e83c:	61fb      	str	r3, [r7, #28]
 800e83e:	69bb      	ldr	r3, [r7, #24]
 800e840:	3304      	adds	r3, #4
 800e842:	61bb      	str	r3, [r7, #24]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800e844:	e7e9      	b.n	800e81a <clmt_clust+0x50>
		if (cl < ncl) break;	/* In this fragment? */
 800e846:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800e848:	69bb      	ldr	r3, [r7, #24]
 800e84a:	681a      	ldr	r2, [r3, #0]
 800e84c:	69fb      	ldr	r3, [r7, #28]
 800e84e:	4413      	add	r3, r2
}
 800e850:	4618      	mov	r0, r3
 800e852:	3724      	adds	r7, #36	; 0x24
 800e854:	46bd      	mov	sp, r7
 800e856:	bd90      	pop	{r4, r7, pc}

0800e858 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800e858:	b580      	push	{r7, lr}
 800e85a:	b086      	sub	sp, #24
 800e85c:	af00      	add	r7, sp, #0
 800e85e:	6078      	str	r0, [r7, #4]
 800e860:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800e868:	693b      	ldr	r3, [r7, #16]
 800e86a:	781b      	ldrb	r3, [r3, #0]
 800e86c:	2b04      	cmp	r3, #4
 800e86e:	d102      	bne.n	800e876 <dir_sdi+0x1e>
 800e870:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e874:	e001      	b.n	800e87a <dir_sdi+0x22>
 800e876:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800e87a:	683b      	ldr	r3, [r7, #0]
 800e87c:	429a      	cmp	r2, r3
 800e87e:	d904      	bls.n	800e88a <dir_sdi+0x32>
 800e880:	683b      	ldr	r3, [r7, #0]
 800e882:	f003 031f 	and.w	r3, r3, #31
 800e886:	2b00      	cmp	r3, #0
 800e888:	d001      	beq.n	800e88e <dir_sdi+0x36>
		return FR_INT_ERR;
 800e88a:	2302      	movs	r3, #2
 800e88c:	e074      	b.n	800e978 <dir_sdi+0x120>
	}
	dp->dptr = ofs;				/* Set current offset */
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	683a      	ldr	r2, [r7, #0]
 800e892:	631a      	str	r2, [r3, #48]	; 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	689b      	ldr	r3, [r3, #8]
 800e898:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800e89a:	697b      	ldr	r3, [r7, #20]
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d109      	bne.n	800e8b4 <dir_sdi+0x5c>
 800e8a0:	693b      	ldr	r3, [r7, #16]
 800e8a2:	781b      	ldrb	r3, [r3, #0]
 800e8a4:	2b02      	cmp	r3, #2
 800e8a6:	d905      	bls.n	800e8b4 <dir_sdi+0x5c>
		clst = fs->dirbase;
 800e8a8:	693b      	ldr	r3, [r7, #16]
 800e8aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e8ac:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	2200      	movs	r2, #0
 800e8b2:	71da      	strb	r2, [r3, #7]
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800e8b4:	697b      	ldr	r3, [r7, #20]
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d10c      	bne.n	800e8d4 <dir_sdi+0x7c>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800e8ba:	683b      	ldr	r3, [r7, #0]
 800e8bc:	095b      	lsrs	r3, r3, #5
 800e8be:	693a      	ldr	r2, [r7, #16]
 800e8c0:	8912      	ldrh	r2, [r2, #8]
 800e8c2:	4293      	cmp	r3, r2
 800e8c4:	d301      	bcc.n	800e8ca <dir_sdi+0x72>
 800e8c6:	2302      	movs	r3, #2
 800e8c8:	e056      	b.n	800e978 <dir_sdi+0x120>
		dp->sect = fs->dirbase;
 800e8ca:	693b      	ldr	r3, [r7, #16]
 800e8cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	639a      	str	r2, [r3, #56]	; 0x38
 800e8d2:	e02d      	b.n	800e930 <dir_sdi+0xd8>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800e8d4:	693b      	ldr	r3, [r7, #16]
 800e8d6:	895b      	ldrh	r3, [r3, #10]
 800e8d8:	461a      	mov	r2, r3
 800e8da:	693b      	ldr	r3, [r7, #16]
 800e8dc:	899b      	ldrh	r3, [r3, #12]
 800e8de:	fb03 f302 	mul.w	r3, r3, r2
 800e8e2:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800e8e4:	e019      	b.n	800e91a <dir_sdi+0xc2>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	6979      	ldr	r1, [r7, #20]
 800e8ea:	4618      	mov	r0, r3
 800e8ec:	f7ff f9e6 	bl	800dcbc <get_fat>
 800e8f0:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e8f2:	697b      	ldr	r3, [r7, #20]
 800e8f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e8f8:	d101      	bne.n	800e8fe <dir_sdi+0xa6>
 800e8fa:	2301      	movs	r3, #1
 800e8fc:	e03c      	b.n	800e978 <dir_sdi+0x120>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800e8fe:	697b      	ldr	r3, [r7, #20]
 800e900:	2b01      	cmp	r3, #1
 800e902:	d904      	bls.n	800e90e <dir_sdi+0xb6>
 800e904:	693b      	ldr	r3, [r7, #16]
 800e906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e908:	697a      	ldr	r2, [r7, #20]
 800e90a:	429a      	cmp	r2, r3
 800e90c:	d301      	bcc.n	800e912 <dir_sdi+0xba>
 800e90e:	2302      	movs	r3, #2
 800e910:	e032      	b.n	800e978 <dir_sdi+0x120>
			ofs -= csz;
 800e912:	683a      	ldr	r2, [r7, #0]
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	1ad3      	subs	r3, r2, r3
 800e918:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800e91a:	683a      	ldr	r2, [r7, #0]
 800e91c:	68fb      	ldr	r3, [r7, #12]
 800e91e:	429a      	cmp	r2, r3
 800e920:	d2e1      	bcs.n	800e8e6 <dir_sdi+0x8e>
		}
		dp->sect = clust2sect(fs, clst);
 800e922:	6979      	ldr	r1, [r7, #20]
 800e924:	6938      	ldr	r0, [r7, #16]
 800e926:	f7ff f9a9 	bl	800dc7c <clust2sect>
 800e92a:	4602      	mov	r2, r0
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	639a      	str	r2, [r3, #56]	; 0x38
	}
	dp->clust = clst;					/* Current cluster# */
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	697a      	ldr	r2, [r7, #20]
 800e934:	635a      	str	r2, [r3, #52]	; 0x34
	if (!dp->sect) return FR_INT_ERR;
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d101      	bne.n	800e942 <dir_sdi+0xea>
 800e93e:	2302      	movs	r3, #2
 800e940:	e01a      	b.n	800e978 <dir_sdi+0x120>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e946:	693b      	ldr	r3, [r7, #16]
 800e948:	899b      	ldrh	r3, [r3, #12]
 800e94a:	4619      	mov	r1, r3
 800e94c:	683b      	ldr	r3, [r7, #0]
 800e94e:	fbb3 f3f1 	udiv	r3, r3, r1
 800e952:	441a      	add	r2, r3
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	639a      	str	r2, [r3, #56]	; 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800e958:	693b      	ldr	r3, [r7, #16]
 800e95a:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800e95e:	693b      	ldr	r3, [r7, #16]
 800e960:	899b      	ldrh	r3, [r3, #12]
 800e962:	461a      	mov	r2, r3
 800e964:	683b      	ldr	r3, [r7, #0]
 800e966:	fbb3 f0f2 	udiv	r0, r3, r2
 800e96a:	fb02 f200 	mul.w	r2, r2, r0
 800e96e:	1a9b      	subs	r3, r3, r2
 800e970:	18ca      	adds	r2, r1, r3
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 800e976:	2300      	movs	r3, #0
}
 800e978:	4618      	mov	r0, r3
 800e97a:	3718      	adds	r7, #24
 800e97c:	46bd      	mov	sp, r7
 800e97e:	bd80      	pop	{r7, pc}

0800e980 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800e980:	b580      	push	{r7, lr}
 800e982:	b086      	sub	sp, #24
 800e984:	af00      	add	r7, sp, #0
 800e986:	6078      	str	r0, [r7, #4]
 800e988:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e994:	3320      	adds	r3, #32
 800e996:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d00b      	beq.n	800e9b8 <dir_next+0x38>
 800e9a0:	68fb      	ldr	r3, [r7, #12]
 800e9a2:	781b      	ldrb	r3, [r3, #0]
 800e9a4:	2b04      	cmp	r3, #4
 800e9a6:	d102      	bne.n	800e9ae <dir_next+0x2e>
 800e9a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e9ac:	e001      	b.n	800e9b2 <dir_next+0x32>
 800e9ae:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800e9b2:	68bb      	ldr	r3, [r7, #8]
 800e9b4:	429a      	cmp	r2, r3
 800e9b6:	d801      	bhi.n	800e9bc <dir_next+0x3c>
 800e9b8:	2304      	movs	r3, #4
 800e9ba:	e0c3      	b.n	800eb44 <dir_next+0x1c4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800e9bc:	68fb      	ldr	r3, [r7, #12]
 800e9be:	899b      	ldrh	r3, [r3, #12]
 800e9c0:	461a      	mov	r2, r3
 800e9c2:	68bb      	ldr	r3, [r7, #8]
 800e9c4:	fbb3 f1f2 	udiv	r1, r3, r2
 800e9c8:	fb02 f201 	mul.w	r2, r2, r1
 800e9cc:	1a9b      	subs	r3, r3, r2
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	f040 80a5 	bne.w	800eb1e <dir_next+0x19e>
		dp->sect++;				/* Next sector */
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e9d8:	1c5a      	adds	r2, r3, #1
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	639a      	str	r2, [r3, #56]	; 0x38

		if (!dp->clust) {		/* Static table */
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d10b      	bne.n	800e9fe <dir_next+0x7e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800e9e6:	68bb      	ldr	r3, [r7, #8]
 800e9e8:	095b      	lsrs	r3, r3, #5
 800e9ea:	68fa      	ldr	r2, [r7, #12]
 800e9ec:	8912      	ldrh	r2, [r2, #8]
 800e9ee:	4293      	cmp	r3, r2
 800e9f0:	f0c0 8095 	bcc.w	800eb1e <dir_next+0x19e>
				dp->sect = 0; return FR_NO_FILE;
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	2200      	movs	r2, #0
 800e9f8:	639a      	str	r2, [r3, #56]	; 0x38
 800e9fa:	2304      	movs	r3, #4
 800e9fc:	e0a2      	b.n	800eb44 <dir_next+0x1c4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800e9fe:	68fb      	ldr	r3, [r7, #12]
 800ea00:	899b      	ldrh	r3, [r3, #12]
 800ea02:	461a      	mov	r2, r3
 800ea04:	68bb      	ldr	r3, [r7, #8]
 800ea06:	fbb3 f3f2 	udiv	r3, r3, r2
 800ea0a:	68fa      	ldr	r2, [r7, #12]
 800ea0c:	8952      	ldrh	r2, [r2, #10]
 800ea0e:	3a01      	subs	r2, #1
 800ea10:	4013      	ands	r3, r2
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	f040 8083 	bne.w	800eb1e <dir_next+0x19e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800ea18:	687a      	ldr	r2, [r7, #4]
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea1e:	4619      	mov	r1, r3
 800ea20:	4610      	mov	r0, r2
 800ea22:	f7ff f94b 	bl	800dcbc <get_fat>
 800ea26:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800ea28:	697b      	ldr	r3, [r7, #20]
 800ea2a:	2b01      	cmp	r3, #1
 800ea2c:	d801      	bhi.n	800ea32 <dir_next+0xb2>
 800ea2e:	2302      	movs	r3, #2
 800ea30:	e088      	b.n	800eb44 <dir_next+0x1c4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800ea32:	697b      	ldr	r3, [r7, #20]
 800ea34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea38:	d101      	bne.n	800ea3e <dir_next+0xbe>
 800ea3a:	2301      	movs	r3, #1
 800ea3c:	e082      	b.n	800eb44 <dir_next+0x1c4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800ea3e:	68fb      	ldr	r3, [r7, #12]
 800ea40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea42:	697a      	ldr	r2, [r7, #20]
 800ea44:	429a      	cmp	r2, r3
 800ea46:	d360      	bcc.n	800eb0a <dir_next+0x18a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800ea48:	683b      	ldr	r3, [r7, #0]
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d104      	bne.n	800ea58 <dir_next+0xd8>
						dp->sect = 0; return FR_NO_FILE;
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	2200      	movs	r2, #0
 800ea52:	639a      	str	r2, [r3, #56]	; 0x38
 800ea54:	2304      	movs	r3, #4
 800ea56:	e075      	b.n	800eb44 <dir_next+0x1c4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800ea58:	687a      	ldr	r2, [r7, #4]
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea5e:	4619      	mov	r1, r3
 800ea60:	4610      	mov	r0, r2
 800ea62:	f7ff fdb1 	bl	800e5c8 <create_chain>
 800ea66:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800ea68:	697b      	ldr	r3, [r7, #20]
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d101      	bne.n	800ea72 <dir_next+0xf2>
 800ea6e:	2307      	movs	r3, #7
 800ea70:	e068      	b.n	800eb44 <dir_next+0x1c4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800ea72:	697b      	ldr	r3, [r7, #20]
 800ea74:	2b01      	cmp	r3, #1
 800ea76:	d101      	bne.n	800ea7c <dir_next+0xfc>
 800ea78:	2302      	movs	r3, #2
 800ea7a:	e063      	b.n	800eb44 <dir_next+0x1c4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ea7c:	697b      	ldr	r3, [r7, #20]
 800ea7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea82:	d101      	bne.n	800ea88 <dir_next+0x108>
 800ea84:	2301      	movs	r3, #1
 800ea86:	e05d      	b.n	800eb44 <dir_next+0x1c4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	79db      	ldrb	r3, [r3, #7]
 800ea8c:	f043 0304 	orr.w	r3, r3, #4
 800ea90:	b2da      	uxtb	r2, r3
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	71da      	strb	r2, [r3, #7]
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800ea96:	68f8      	ldr	r0, [r7, #12]
 800ea98:	f7ff f80e 	bl	800dab8 <sync_window>
 800ea9c:	4603      	mov	r3, r0
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d001      	beq.n	800eaa6 <dir_next+0x126>
 800eaa2:	2301      	movs	r3, #1
 800eaa4:	e04e      	b.n	800eb44 <dir_next+0x1c4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800eaa6:	68fb      	ldr	r3, [r7, #12]
 800eaa8:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	899b      	ldrh	r3, [r3, #12]
 800eab0:	461a      	mov	r2, r3
 800eab2:	2100      	movs	r1, #0
 800eab4:	f7fe fe07 	bl	800d6c6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800eab8:	2300      	movs	r3, #0
 800eaba:	613b      	str	r3, [r7, #16]
 800eabc:	6979      	ldr	r1, [r7, #20]
 800eabe:	68f8      	ldr	r0, [r7, #12]
 800eac0:	f7ff f8dc 	bl	800dc7c <clust2sect>
 800eac4:	4602      	mov	r2, r0
 800eac6:	68fb      	ldr	r3, [r7, #12]
 800eac8:	63da      	str	r2, [r3, #60]	; 0x3c
 800eaca:	e012      	b.n	800eaf2 <dir_next+0x172>
						fs->wflag = 1;
 800eacc:	68fb      	ldr	r3, [r7, #12]
 800eace:	2201      	movs	r2, #1
 800ead0:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800ead2:	68f8      	ldr	r0, [r7, #12]
 800ead4:	f7fe fff0 	bl	800dab8 <sync_window>
 800ead8:	4603      	mov	r3, r0
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d001      	beq.n	800eae2 <dir_next+0x162>
 800eade:	2301      	movs	r3, #1
 800eae0:	e030      	b.n	800eb44 <dir_next+0x1c4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800eae2:	693b      	ldr	r3, [r7, #16]
 800eae4:	3301      	adds	r3, #1
 800eae6:	613b      	str	r3, [r7, #16]
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eaec:	1c5a      	adds	r2, r3, #1
 800eaee:	68fb      	ldr	r3, [r7, #12]
 800eaf0:	63da      	str	r2, [r3, #60]	; 0x3c
 800eaf2:	68fb      	ldr	r3, [r7, #12]
 800eaf4:	895b      	ldrh	r3, [r3, #10]
 800eaf6:	461a      	mov	r2, r3
 800eaf8:	693b      	ldr	r3, [r7, #16]
 800eafa:	4293      	cmp	r3, r2
 800eafc:	d3e6      	bcc.n	800eacc <dir_next+0x14c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800eb02:	693b      	ldr	r3, [r7, #16]
 800eb04:	1ad2      	subs	r2, r2, r3
 800eb06:	68fb      	ldr	r3, [r7, #12]
 800eb08:	63da      	str	r2, [r3, #60]	; 0x3c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	697a      	ldr	r2, [r7, #20]
 800eb0e:	635a      	str	r2, [r3, #52]	; 0x34
				dp->sect = clust2sect(fs, clst);
 800eb10:	6979      	ldr	r1, [r7, #20]
 800eb12:	68f8      	ldr	r0, [r7, #12]
 800eb14:	f7ff f8b2 	bl	800dc7c <clust2sect>
 800eb18:	4602      	mov	r2, r0
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	639a      	str	r2, [r3, #56]	; 0x38
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	68ba      	ldr	r2, [r7, #8]
 800eb22:	631a      	str	r2, [r3, #48]	; 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800eb24:	68fb      	ldr	r3, [r7, #12]
 800eb26:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800eb2a:	68fb      	ldr	r3, [r7, #12]
 800eb2c:	899b      	ldrh	r3, [r3, #12]
 800eb2e:	461a      	mov	r2, r3
 800eb30:	68bb      	ldr	r3, [r7, #8]
 800eb32:	fbb3 f0f2 	udiv	r0, r3, r2
 800eb36:	fb02 f200 	mul.w	r2, r2, r0
 800eb3a:	1a9b      	subs	r3, r3, r2
 800eb3c:	18ca      	adds	r2, r1, r3
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 800eb42:	2300      	movs	r3, #0
}
 800eb44:	4618      	mov	r0, r3
 800eb46:	3718      	adds	r7, #24
 800eb48:	46bd      	mov	sp, r7
 800eb4a:	bd80      	pop	{r7, pc}

0800eb4c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800eb4c:	b580      	push	{r7, lr}
 800eb4e:	b086      	sub	sp, #24
 800eb50:	af00      	add	r7, sp, #0
 800eb52:	6078      	str	r0, [r7, #4]
 800eb54:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800eb5c:	2100      	movs	r1, #0
 800eb5e:	6878      	ldr	r0, [r7, #4]
 800eb60:	f7ff fe7a 	bl	800e858 <dir_sdi>
 800eb64:	4603      	mov	r3, r0
 800eb66:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800eb68:	7dfb      	ldrb	r3, [r7, #23]
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d140      	bne.n	800ebf0 <dir_alloc+0xa4>
		n = 0;
 800eb6e:	2300      	movs	r3, #0
 800eb70:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb76:	4619      	mov	r1, r3
 800eb78:	68f8      	ldr	r0, [r7, #12]
 800eb7a:	f7fe ffe1 	bl	800db40 <move_window>
 800eb7e:	4603      	mov	r3, r0
 800eb80:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800eb82:	7dfb      	ldrb	r3, [r7, #23]
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d132      	bne.n	800ebee <dir_alloc+0xa2>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
 800eb88:	68fb      	ldr	r3, [r7, #12]
 800eb8a:	781b      	ldrb	r3, [r3, #0]
 800eb8c:	2b04      	cmp	r3, #4
 800eb8e:	d108      	bne.n	800eba2 <dir_alloc+0x56>
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eb94:	781b      	ldrb	r3, [r3, #0]
 800eb96:	b25b      	sxtb	r3, r3
 800eb98:	43db      	mvns	r3, r3
 800eb9a:	b2db      	uxtb	r3, r3
 800eb9c:	09db      	lsrs	r3, r3, #7
 800eb9e:	b2db      	uxtb	r3, r3
 800eba0:	e00f      	b.n	800ebc2 <dir_alloc+0x76>
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eba6:	781b      	ldrb	r3, [r3, #0]
 800eba8:	2be5      	cmp	r3, #229	; 0xe5
 800ebaa:	d004      	beq.n	800ebb6 <dir_alloc+0x6a>
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ebb0:	781b      	ldrb	r3, [r3, #0]
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d101      	bne.n	800ebba <dir_alloc+0x6e>
 800ebb6:	2301      	movs	r3, #1
 800ebb8:	e000      	b.n	800ebbc <dir_alloc+0x70>
 800ebba:	2300      	movs	r3, #0
 800ebbc:	f003 0301 	and.w	r3, r3, #1
 800ebc0:	b2db      	uxtb	r3, r3
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d007      	beq.n	800ebd6 <dir_alloc+0x8a>
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800ebc6:	693b      	ldr	r3, [r7, #16]
 800ebc8:	3301      	adds	r3, #1
 800ebca:	613b      	str	r3, [r7, #16]
 800ebcc:	693a      	ldr	r2, [r7, #16]
 800ebce:	683b      	ldr	r3, [r7, #0]
 800ebd0:	429a      	cmp	r2, r3
 800ebd2:	d102      	bne.n	800ebda <dir_alloc+0x8e>
 800ebd4:	e00c      	b.n	800ebf0 <dir_alloc+0xa4>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800ebd6:	2300      	movs	r3, #0
 800ebd8:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800ebda:	2101      	movs	r1, #1
 800ebdc:	6878      	ldr	r0, [r7, #4]
 800ebde:	f7ff fecf 	bl	800e980 <dir_next>
 800ebe2:	4603      	mov	r3, r0
 800ebe4:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800ebe6:	7dfb      	ldrb	r3, [r7, #23]
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d0c2      	beq.n	800eb72 <dir_alloc+0x26>
 800ebec:	e000      	b.n	800ebf0 <dir_alloc+0xa4>
			if (res != FR_OK) break;
 800ebee:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800ebf0:	7dfb      	ldrb	r3, [r7, #23]
 800ebf2:	2b04      	cmp	r3, #4
 800ebf4:	d101      	bne.n	800ebfa <dir_alloc+0xae>
 800ebf6:	2307      	movs	r3, #7
 800ebf8:	75fb      	strb	r3, [r7, #23]
	return res;
 800ebfa:	7dfb      	ldrb	r3, [r7, #23]
}
 800ebfc:	4618      	mov	r0, r3
 800ebfe:	3718      	adds	r7, #24
 800ec00:	46bd      	mov	sp, r7
 800ec02:	bd80      	pop	{r7, pc}

0800ec04 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800ec04:	b580      	push	{r7, lr}
 800ec06:	b084      	sub	sp, #16
 800ec08:	af00      	add	r7, sp, #0
 800ec0a:	6078      	str	r0, [r7, #4]
 800ec0c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800ec0e:	683b      	ldr	r3, [r7, #0]
 800ec10:	331a      	adds	r3, #26
 800ec12:	4618      	mov	r0, r3
 800ec14:	f7fe fb70 	bl	800d2f8 <ld_word>
 800ec18:	4603      	mov	r3, r0
 800ec1a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	781b      	ldrb	r3, [r3, #0]
 800ec20:	2b03      	cmp	r3, #3
 800ec22:	d109      	bne.n	800ec38 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800ec24:	683b      	ldr	r3, [r7, #0]
 800ec26:	3314      	adds	r3, #20
 800ec28:	4618      	mov	r0, r3
 800ec2a:	f7fe fb65 	bl	800d2f8 <ld_word>
 800ec2e:	4603      	mov	r3, r0
 800ec30:	041b      	lsls	r3, r3, #16
 800ec32:	68fa      	ldr	r2, [r7, #12]
 800ec34:	4313      	orrs	r3, r2
 800ec36:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800ec38:	68fb      	ldr	r3, [r7, #12]
}
 800ec3a:	4618      	mov	r0, r3
 800ec3c:	3710      	adds	r7, #16
 800ec3e:	46bd      	mov	sp, r7
 800ec40:	bd80      	pop	{r7, pc}

0800ec42 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800ec42:	b580      	push	{r7, lr}
 800ec44:	b084      	sub	sp, #16
 800ec46:	af00      	add	r7, sp, #0
 800ec48:	60f8      	str	r0, [r7, #12]
 800ec4a:	60b9      	str	r1, [r7, #8]
 800ec4c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800ec4e:	68bb      	ldr	r3, [r7, #8]
 800ec50:	331a      	adds	r3, #26
 800ec52:	687a      	ldr	r2, [r7, #4]
 800ec54:	b292      	uxth	r2, r2
 800ec56:	4611      	mov	r1, r2
 800ec58:	4618      	mov	r0, r3
 800ec5a:	f7fe fc45 	bl	800d4e8 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800ec5e:	68fb      	ldr	r3, [r7, #12]
 800ec60:	781b      	ldrb	r3, [r3, #0]
 800ec62:	2b03      	cmp	r3, #3
 800ec64:	d109      	bne.n	800ec7a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800ec66:	68bb      	ldr	r3, [r7, #8]
 800ec68:	f103 0214 	add.w	r2, r3, #20
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	0c1b      	lsrs	r3, r3, #16
 800ec70:	b29b      	uxth	r3, r3
 800ec72:	4619      	mov	r1, r3
 800ec74:	4610      	mov	r0, r2
 800ec76:	f7fe fc37 	bl	800d4e8 <st_word>
	}
}
 800ec7a:	bf00      	nop
 800ec7c:	3710      	adds	r7, #16
 800ec7e:	46bd      	mov	sp, r7
 800ec80:	bd80      	pop	{r7, pc}
	...

0800ec84 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800ec84:	b590      	push	{r4, r7, lr}
 800ec86:	b087      	sub	sp, #28
 800ec88:	af00      	add	r7, sp, #0
 800ec8a:	6078      	str	r0, [r7, #4]
 800ec8c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800ec8e:	683b      	ldr	r3, [r7, #0]
 800ec90:	331a      	adds	r3, #26
 800ec92:	4618      	mov	r0, r3
 800ec94:	f7fe fb30 	bl	800d2f8 <ld_word>
 800ec98:	4603      	mov	r3, r0
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	d001      	beq.n	800eca2 <cmp_lfn+0x1e>
 800ec9e:	2300      	movs	r3, #0
 800eca0:	e059      	b.n	800ed56 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800eca2:	683b      	ldr	r3, [r7, #0]
 800eca4:	781b      	ldrb	r3, [r3, #0]
 800eca6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ecaa:	1e5a      	subs	r2, r3, #1
 800ecac:	4613      	mov	r3, r2
 800ecae:	005b      	lsls	r3, r3, #1
 800ecb0:	4413      	add	r3, r2
 800ecb2:	009b      	lsls	r3, r3, #2
 800ecb4:	4413      	add	r3, r2
 800ecb6:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800ecb8:	2301      	movs	r3, #1
 800ecba:	81fb      	strh	r3, [r7, #14]
 800ecbc:	2300      	movs	r3, #0
 800ecbe:	613b      	str	r3, [r7, #16]
 800ecc0:	e033      	b.n	800ed2a <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800ecc2:	4a27      	ldr	r2, [pc, #156]	; (800ed60 <cmp_lfn+0xdc>)
 800ecc4:	693b      	ldr	r3, [r7, #16]
 800ecc6:	4413      	add	r3, r2
 800ecc8:	781b      	ldrb	r3, [r3, #0]
 800ecca:	461a      	mov	r2, r3
 800eccc:	683b      	ldr	r3, [r7, #0]
 800ecce:	4413      	add	r3, r2
 800ecd0:	4618      	mov	r0, r3
 800ecd2:	f7fe fb11 	bl	800d2f8 <ld_word>
 800ecd6:	4603      	mov	r3, r0
 800ecd8:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800ecda:	89fb      	ldrh	r3, [r7, #14]
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d01a      	beq.n	800ed16 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800ece0:	697b      	ldr	r3, [r7, #20]
 800ece2:	2bfe      	cmp	r3, #254	; 0xfe
 800ece4:	d812      	bhi.n	800ed0c <cmp_lfn+0x88>
 800ece6:	89bb      	ldrh	r3, [r7, #12]
 800ece8:	4618      	mov	r0, r3
 800ecea:	f002 fdb7 	bl	801185c <ff_wtoupper>
 800ecee:	4603      	mov	r3, r0
 800ecf0:	461c      	mov	r4, r3
 800ecf2:	697b      	ldr	r3, [r7, #20]
 800ecf4:	1c5a      	adds	r2, r3, #1
 800ecf6:	617a      	str	r2, [r7, #20]
 800ecf8:	005b      	lsls	r3, r3, #1
 800ecfa:	687a      	ldr	r2, [r7, #4]
 800ecfc:	4413      	add	r3, r2
 800ecfe:	881b      	ldrh	r3, [r3, #0]
 800ed00:	4618      	mov	r0, r3
 800ed02:	f002 fdab 	bl	801185c <ff_wtoupper>
 800ed06:	4603      	mov	r3, r0
 800ed08:	429c      	cmp	r4, r3
 800ed0a:	d001      	beq.n	800ed10 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800ed0c:	2300      	movs	r3, #0
 800ed0e:	e022      	b.n	800ed56 <cmp_lfn+0xd2>
			}
			wc = uc;
 800ed10:	89bb      	ldrh	r3, [r7, #12]
 800ed12:	81fb      	strh	r3, [r7, #14]
 800ed14:	e006      	b.n	800ed24 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800ed16:	89bb      	ldrh	r3, [r7, #12]
 800ed18:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ed1c:	4293      	cmp	r3, r2
 800ed1e:	d001      	beq.n	800ed24 <cmp_lfn+0xa0>
 800ed20:	2300      	movs	r3, #0
 800ed22:	e018      	b.n	800ed56 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800ed24:	693b      	ldr	r3, [r7, #16]
 800ed26:	3301      	adds	r3, #1
 800ed28:	613b      	str	r3, [r7, #16]
 800ed2a:	693b      	ldr	r3, [r7, #16]
 800ed2c:	2b0c      	cmp	r3, #12
 800ed2e:	d9c8      	bls.n	800ecc2 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800ed30:	683b      	ldr	r3, [r7, #0]
 800ed32:	781b      	ldrb	r3, [r3, #0]
 800ed34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d00b      	beq.n	800ed54 <cmp_lfn+0xd0>
 800ed3c:	89fb      	ldrh	r3, [r7, #14]
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d008      	beq.n	800ed54 <cmp_lfn+0xd0>
 800ed42:	697b      	ldr	r3, [r7, #20]
 800ed44:	005b      	lsls	r3, r3, #1
 800ed46:	687a      	ldr	r2, [r7, #4]
 800ed48:	4413      	add	r3, r2
 800ed4a:	881b      	ldrh	r3, [r3, #0]
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d001      	beq.n	800ed54 <cmp_lfn+0xd0>
 800ed50:	2300      	movs	r3, #0
 800ed52:	e000      	b.n	800ed56 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800ed54:	2301      	movs	r3, #1
}
 800ed56:	4618      	mov	r0, r3
 800ed58:	371c      	adds	r7, #28
 800ed5a:	46bd      	mov	sp, r7
 800ed5c:	bd90      	pop	{r4, r7, pc}
 800ed5e:	bf00      	nop
 800ed60:	08016200 	.word	0x08016200

0800ed64 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800ed64:	b580      	push	{r7, lr}
 800ed66:	b086      	sub	sp, #24
 800ed68:	af00      	add	r7, sp, #0
 800ed6a:	6078      	str	r0, [r7, #4]
 800ed6c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800ed6e:	683b      	ldr	r3, [r7, #0]
 800ed70:	331a      	adds	r3, #26
 800ed72:	4618      	mov	r0, r3
 800ed74:	f7fe fac0 	bl	800d2f8 <ld_word>
 800ed78:	4603      	mov	r3, r0
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d001      	beq.n	800ed82 <pick_lfn+0x1e>
 800ed7e:	2300      	movs	r3, #0
 800ed80:	e04d      	b.n	800ee1e <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800ed82:	683b      	ldr	r3, [r7, #0]
 800ed84:	781b      	ldrb	r3, [r3, #0]
 800ed86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ed8a:	1e5a      	subs	r2, r3, #1
 800ed8c:	4613      	mov	r3, r2
 800ed8e:	005b      	lsls	r3, r3, #1
 800ed90:	4413      	add	r3, r2
 800ed92:	009b      	lsls	r3, r3, #2
 800ed94:	4413      	add	r3, r2
 800ed96:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800ed98:	2301      	movs	r3, #1
 800ed9a:	81fb      	strh	r3, [r7, #14]
 800ed9c:	2300      	movs	r3, #0
 800ed9e:	613b      	str	r3, [r7, #16]
 800eda0:	e028      	b.n	800edf4 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800eda2:	4a21      	ldr	r2, [pc, #132]	; (800ee28 <pick_lfn+0xc4>)
 800eda4:	693b      	ldr	r3, [r7, #16]
 800eda6:	4413      	add	r3, r2
 800eda8:	781b      	ldrb	r3, [r3, #0]
 800edaa:	461a      	mov	r2, r3
 800edac:	683b      	ldr	r3, [r7, #0]
 800edae:	4413      	add	r3, r2
 800edb0:	4618      	mov	r0, r3
 800edb2:	f7fe faa1 	bl	800d2f8 <ld_word>
 800edb6:	4603      	mov	r3, r0
 800edb8:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800edba:	89fb      	ldrh	r3, [r7, #14]
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	d00f      	beq.n	800ede0 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800edc0:	697b      	ldr	r3, [r7, #20]
 800edc2:	2bfe      	cmp	r3, #254	; 0xfe
 800edc4:	d901      	bls.n	800edca <pick_lfn+0x66>
 800edc6:	2300      	movs	r3, #0
 800edc8:	e029      	b.n	800ee1e <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800edca:	89bb      	ldrh	r3, [r7, #12]
 800edcc:	81fb      	strh	r3, [r7, #14]
 800edce:	697b      	ldr	r3, [r7, #20]
 800edd0:	1c5a      	adds	r2, r3, #1
 800edd2:	617a      	str	r2, [r7, #20]
 800edd4:	005b      	lsls	r3, r3, #1
 800edd6:	687a      	ldr	r2, [r7, #4]
 800edd8:	4413      	add	r3, r2
 800edda:	89fa      	ldrh	r2, [r7, #14]
 800eddc:	801a      	strh	r2, [r3, #0]
 800edde:	e006      	b.n	800edee <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800ede0:	89bb      	ldrh	r3, [r7, #12]
 800ede2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ede6:	4293      	cmp	r3, r2
 800ede8:	d001      	beq.n	800edee <pick_lfn+0x8a>
 800edea:	2300      	movs	r3, #0
 800edec:	e017      	b.n	800ee1e <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800edee:	693b      	ldr	r3, [r7, #16]
 800edf0:	3301      	adds	r3, #1
 800edf2:	613b      	str	r3, [r7, #16]
 800edf4:	693b      	ldr	r3, [r7, #16]
 800edf6:	2b0c      	cmp	r3, #12
 800edf8:	d9d3      	bls.n	800eda2 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800edfa:	683b      	ldr	r3, [r7, #0]
 800edfc:	781b      	ldrb	r3, [r3, #0]
 800edfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	d00a      	beq.n	800ee1c <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800ee06:	697b      	ldr	r3, [r7, #20]
 800ee08:	2bfe      	cmp	r3, #254	; 0xfe
 800ee0a:	d901      	bls.n	800ee10 <pick_lfn+0xac>
 800ee0c:	2300      	movs	r3, #0
 800ee0e:	e006      	b.n	800ee1e <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800ee10:	697b      	ldr	r3, [r7, #20]
 800ee12:	005b      	lsls	r3, r3, #1
 800ee14:	687a      	ldr	r2, [r7, #4]
 800ee16:	4413      	add	r3, r2
 800ee18:	2200      	movs	r2, #0
 800ee1a:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800ee1c:	2301      	movs	r3, #1
}
 800ee1e:	4618      	mov	r0, r3
 800ee20:	3718      	adds	r7, #24
 800ee22:	46bd      	mov	sp, r7
 800ee24:	bd80      	pop	{r7, pc}
 800ee26:	bf00      	nop
 800ee28:	08016200 	.word	0x08016200

0800ee2c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800ee2c:	b580      	push	{r7, lr}
 800ee2e:	b088      	sub	sp, #32
 800ee30:	af00      	add	r7, sp, #0
 800ee32:	60f8      	str	r0, [r7, #12]
 800ee34:	60b9      	str	r1, [r7, #8]
 800ee36:	4611      	mov	r1, r2
 800ee38:	461a      	mov	r2, r3
 800ee3a:	460b      	mov	r3, r1
 800ee3c:	71fb      	strb	r3, [r7, #7]
 800ee3e:	4613      	mov	r3, r2
 800ee40:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800ee42:	68bb      	ldr	r3, [r7, #8]
 800ee44:	330d      	adds	r3, #13
 800ee46:	79ba      	ldrb	r2, [r7, #6]
 800ee48:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800ee4a:	68bb      	ldr	r3, [r7, #8]
 800ee4c:	330b      	adds	r3, #11
 800ee4e:	220f      	movs	r2, #15
 800ee50:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800ee52:	68bb      	ldr	r3, [r7, #8]
 800ee54:	330c      	adds	r3, #12
 800ee56:	2200      	movs	r2, #0
 800ee58:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800ee5a:	68bb      	ldr	r3, [r7, #8]
 800ee5c:	331a      	adds	r3, #26
 800ee5e:	2100      	movs	r1, #0
 800ee60:	4618      	mov	r0, r3
 800ee62:	f7fe fb41 	bl	800d4e8 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800ee66:	79fb      	ldrb	r3, [r7, #7]
 800ee68:	1e5a      	subs	r2, r3, #1
 800ee6a:	4613      	mov	r3, r2
 800ee6c:	005b      	lsls	r3, r3, #1
 800ee6e:	4413      	add	r3, r2
 800ee70:	009b      	lsls	r3, r3, #2
 800ee72:	4413      	add	r3, r2
 800ee74:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800ee76:	2300      	movs	r3, #0
 800ee78:	82fb      	strh	r3, [r7, #22]
 800ee7a:	2300      	movs	r3, #0
 800ee7c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800ee7e:	8afb      	ldrh	r3, [r7, #22]
 800ee80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ee84:	4293      	cmp	r3, r2
 800ee86:	d007      	beq.n	800ee98 <put_lfn+0x6c>
 800ee88:	69fb      	ldr	r3, [r7, #28]
 800ee8a:	1c5a      	adds	r2, r3, #1
 800ee8c:	61fa      	str	r2, [r7, #28]
 800ee8e:	005b      	lsls	r3, r3, #1
 800ee90:	68fa      	ldr	r2, [r7, #12]
 800ee92:	4413      	add	r3, r2
 800ee94:	881b      	ldrh	r3, [r3, #0]
 800ee96:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800ee98:	4a17      	ldr	r2, [pc, #92]	; (800eef8 <put_lfn+0xcc>)
 800ee9a:	69bb      	ldr	r3, [r7, #24]
 800ee9c:	4413      	add	r3, r2
 800ee9e:	781b      	ldrb	r3, [r3, #0]
 800eea0:	461a      	mov	r2, r3
 800eea2:	68bb      	ldr	r3, [r7, #8]
 800eea4:	4413      	add	r3, r2
 800eea6:	8afa      	ldrh	r2, [r7, #22]
 800eea8:	4611      	mov	r1, r2
 800eeaa:	4618      	mov	r0, r3
 800eeac:	f7fe fb1c 	bl	800d4e8 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800eeb0:	8afb      	ldrh	r3, [r7, #22]
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	d102      	bne.n	800eebc <put_lfn+0x90>
 800eeb6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800eeba:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800eebc:	69bb      	ldr	r3, [r7, #24]
 800eebe:	3301      	adds	r3, #1
 800eec0:	61bb      	str	r3, [r7, #24]
 800eec2:	69bb      	ldr	r3, [r7, #24]
 800eec4:	2b0c      	cmp	r3, #12
 800eec6:	d9da      	bls.n	800ee7e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800eec8:	8afb      	ldrh	r3, [r7, #22]
 800eeca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800eece:	4293      	cmp	r3, r2
 800eed0:	d006      	beq.n	800eee0 <put_lfn+0xb4>
 800eed2:	69fb      	ldr	r3, [r7, #28]
 800eed4:	005b      	lsls	r3, r3, #1
 800eed6:	68fa      	ldr	r2, [r7, #12]
 800eed8:	4413      	add	r3, r2
 800eeda:	881b      	ldrh	r3, [r3, #0]
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d103      	bne.n	800eee8 <put_lfn+0xbc>
 800eee0:	79fb      	ldrb	r3, [r7, #7]
 800eee2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eee6:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800eee8:	68bb      	ldr	r3, [r7, #8]
 800eeea:	79fa      	ldrb	r2, [r7, #7]
 800eeec:	701a      	strb	r2, [r3, #0]
}
 800eeee:	bf00      	nop
 800eef0:	3720      	adds	r7, #32
 800eef2:	46bd      	mov	sp, r7
 800eef4:	bd80      	pop	{r7, pc}
 800eef6:	bf00      	nop
 800eef8:	08016200 	.word	0x08016200

0800eefc <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800eefc:	b580      	push	{r7, lr}
 800eefe:	b08c      	sub	sp, #48	; 0x30
 800ef00:	af00      	add	r7, sp, #0
 800ef02:	60f8      	str	r0, [r7, #12]
 800ef04:	60b9      	str	r1, [r7, #8]
 800ef06:	607a      	str	r2, [r7, #4]
 800ef08:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800ef0a:	220b      	movs	r2, #11
 800ef0c:	68b9      	ldr	r1, [r7, #8]
 800ef0e:	68f8      	ldr	r0, [r7, #12]
 800ef10:	f7fe fbb8 	bl	800d684 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800ef14:	683b      	ldr	r3, [r7, #0]
 800ef16:	2b05      	cmp	r3, #5
 800ef18:	d929      	bls.n	800ef6e <gen_numname+0x72>
		sr = seq;
 800ef1a:	683b      	ldr	r3, [r7, #0]
 800ef1c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800ef1e:	e020      	b.n	800ef62 <gen_numname+0x66>
			wc = *lfn++;
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	1c9a      	adds	r2, r3, #2
 800ef24:	607a      	str	r2, [r7, #4]
 800ef26:	881b      	ldrh	r3, [r3, #0]
 800ef28:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800ef2a:	2300      	movs	r3, #0
 800ef2c:	62bb      	str	r3, [r7, #40]	; 0x28
 800ef2e:	e015      	b.n	800ef5c <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 800ef30:	69fb      	ldr	r3, [r7, #28]
 800ef32:	005a      	lsls	r2, r3, #1
 800ef34:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ef36:	f003 0301 	and.w	r3, r3, #1
 800ef3a:	4413      	add	r3, r2
 800ef3c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800ef3e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ef40:	085b      	lsrs	r3, r3, #1
 800ef42:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800ef44:	69fb      	ldr	r3, [r7, #28]
 800ef46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d003      	beq.n	800ef56 <gen_numname+0x5a>
 800ef4e:	69fa      	ldr	r2, [r7, #28]
 800ef50:	4b31      	ldr	r3, [pc, #196]	; (800f018 <gen_numname+0x11c>)
 800ef52:	4053      	eors	r3, r2
 800ef54:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800ef56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef58:	3301      	adds	r3, #1
 800ef5a:	62bb      	str	r3, [r7, #40]	; 0x28
 800ef5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef5e:	2b0f      	cmp	r3, #15
 800ef60:	d9e6      	bls.n	800ef30 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	881b      	ldrh	r3, [r3, #0]
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	d1da      	bne.n	800ef20 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800ef6a:	69fb      	ldr	r3, [r7, #28]
 800ef6c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800ef6e:	2307      	movs	r3, #7
 800ef70:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800ef72:	683b      	ldr	r3, [r7, #0]
 800ef74:	b2db      	uxtb	r3, r3
 800ef76:	f003 030f 	and.w	r3, r3, #15
 800ef7a:	b2db      	uxtb	r3, r3
 800ef7c:	3330      	adds	r3, #48	; 0x30
 800ef7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800ef82:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ef86:	2b39      	cmp	r3, #57	; 0x39
 800ef88:	d904      	bls.n	800ef94 <gen_numname+0x98>
 800ef8a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ef8e:	3307      	adds	r3, #7
 800ef90:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800ef94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef96:	1e5a      	subs	r2, r3, #1
 800ef98:	62ba      	str	r2, [r7, #40]	; 0x28
 800ef9a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800ef9e:	4413      	add	r3, r2
 800efa0:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800efa4:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800efa8:	683b      	ldr	r3, [r7, #0]
 800efaa:	091b      	lsrs	r3, r3, #4
 800efac:	603b      	str	r3, [r7, #0]
	} while (seq);
 800efae:	683b      	ldr	r3, [r7, #0]
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d1de      	bne.n	800ef72 <gen_numname+0x76>
	ns[i] = '~';
 800efb4:	f107 0214 	add.w	r2, r7, #20
 800efb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efba:	4413      	add	r3, r2
 800efbc:	227e      	movs	r2, #126	; 0x7e
 800efbe:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800efc0:	2300      	movs	r3, #0
 800efc2:	627b      	str	r3, [r7, #36]	; 0x24
 800efc4:	e002      	b.n	800efcc <gen_numname+0xd0>
 800efc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efc8:	3301      	adds	r3, #1
 800efca:	627b      	str	r3, [r7, #36]	; 0x24
 800efcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800efce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efd0:	429a      	cmp	r2, r3
 800efd2:	d205      	bcs.n	800efe0 <gen_numname+0xe4>
 800efd4:	68fa      	ldr	r2, [r7, #12]
 800efd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efd8:	4413      	add	r3, r2
 800efda:	781b      	ldrb	r3, [r3, #0]
 800efdc:	2b20      	cmp	r3, #32
 800efde:	d1f2      	bne.n	800efc6 <gen_numname+0xca>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800efe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efe2:	2b07      	cmp	r3, #7
 800efe4:	d808      	bhi.n	800eff8 <gen_numname+0xfc>
 800efe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efe8:	1c5a      	adds	r2, r3, #1
 800efea:	62ba      	str	r2, [r7, #40]	; 0x28
 800efec:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800eff0:	4413      	add	r3, r2
 800eff2:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800eff6:	e000      	b.n	800effa <gen_numname+0xfe>
 800eff8:	2120      	movs	r1, #32
 800effa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800effc:	1c5a      	adds	r2, r3, #1
 800effe:	627a      	str	r2, [r7, #36]	; 0x24
 800f000:	68fa      	ldr	r2, [r7, #12]
 800f002:	4413      	add	r3, r2
 800f004:	460a      	mov	r2, r1
 800f006:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800f008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f00a:	2b07      	cmp	r3, #7
 800f00c:	d9e8      	bls.n	800efe0 <gen_numname+0xe4>
}
 800f00e:	bf00      	nop
 800f010:	3730      	adds	r7, #48	; 0x30
 800f012:	46bd      	mov	sp, r7
 800f014:	bd80      	pop	{r7, pc}
 800f016:	bf00      	nop
 800f018:	00011021 	.word	0x00011021

0800f01c <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800f01c:	b480      	push	{r7}
 800f01e:	b085      	sub	sp, #20
 800f020:	af00      	add	r7, sp, #0
 800f022:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800f024:	2300      	movs	r3, #0
 800f026:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800f028:	230b      	movs	r3, #11
 800f02a:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800f02c:	7bfb      	ldrb	r3, [r7, #15]
 800f02e:	b2da      	uxtb	r2, r3
 800f030:	0852      	lsrs	r2, r2, #1
 800f032:	01db      	lsls	r3, r3, #7
 800f034:	4313      	orrs	r3, r2
 800f036:	b2da      	uxtb	r2, r3
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	1c59      	adds	r1, r3, #1
 800f03c:	6079      	str	r1, [r7, #4]
 800f03e:	781b      	ldrb	r3, [r3, #0]
 800f040:	4413      	add	r3, r2
 800f042:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800f044:	68bb      	ldr	r3, [r7, #8]
 800f046:	3b01      	subs	r3, #1
 800f048:	60bb      	str	r3, [r7, #8]
 800f04a:	68bb      	ldr	r3, [r7, #8]
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d1ed      	bne.n	800f02c <sum_sfn+0x10>
	return sum;
 800f050:	7bfb      	ldrb	r3, [r7, #15]
}
 800f052:	4618      	mov	r0, r3
 800f054:	3714      	adds	r7, #20
 800f056:	46bd      	mov	sp, r7
 800f058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f05c:	4770      	bx	lr

0800f05e <xdir_sum>:

static
WORD xdir_sum (			/* Get checksum of the directoly block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 800f05e:	b480      	push	{r7}
 800f060:	b087      	sub	sp, #28
 800f062:	af00      	add	r7, sp, #0
 800f064:	6078      	str	r0, [r7, #4]
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	3301      	adds	r3, #1
 800f06a:	781b      	ldrb	r3, [r3, #0]
 800f06c:	3301      	adds	r3, #1
 800f06e:	015b      	lsls	r3, r3, #5
 800f070:	60fb      	str	r3, [r7, #12]
	for (i = sum = 0; i < szblk; i++) {
 800f072:	2300      	movs	r3, #0
 800f074:	827b      	strh	r3, [r7, #18]
 800f076:	2300      	movs	r3, #0
 800f078:	617b      	str	r3, [r7, #20]
 800f07a:	e018      	b.n	800f0ae <xdir_sum+0x50>
		if (i == XDIR_SetSum) {	/* Skip sum field */
 800f07c:	697b      	ldr	r3, [r7, #20]
 800f07e:	2b02      	cmp	r3, #2
 800f080:	d103      	bne.n	800f08a <xdir_sum+0x2c>
			i++;
 800f082:	697b      	ldr	r3, [r7, #20]
 800f084:	3301      	adds	r3, #1
 800f086:	617b      	str	r3, [r7, #20]
 800f088:	e00e      	b.n	800f0a8 <xdir_sum+0x4a>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 800f08a:	8a7b      	ldrh	r3, [r7, #18]
 800f08c:	03db      	lsls	r3, r3, #15
 800f08e:	b29a      	uxth	r2, r3
 800f090:	8a7b      	ldrh	r3, [r7, #18]
 800f092:	085b      	lsrs	r3, r3, #1
 800f094:	b29b      	uxth	r3, r3
 800f096:	4413      	add	r3, r2
 800f098:	b29a      	uxth	r2, r3
 800f09a:	6879      	ldr	r1, [r7, #4]
 800f09c:	697b      	ldr	r3, [r7, #20]
 800f09e:	440b      	add	r3, r1
 800f0a0:	781b      	ldrb	r3, [r3, #0]
 800f0a2:	b29b      	uxth	r3, r3
 800f0a4:	4413      	add	r3, r2
 800f0a6:	827b      	strh	r3, [r7, #18]
	for (i = sum = 0; i < szblk; i++) {
 800f0a8:	697b      	ldr	r3, [r7, #20]
 800f0aa:	3301      	adds	r3, #1
 800f0ac:	617b      	str	r3, [r7, #20]
 800f0ae:	697a      	ldr	r2, [r7, #20]
 800f0b0:	68fb      	ldr	r3, [r7, #12]
 800f0b2:	429a      	cmp	r2, r3
 800f0b4:	d3e2      	bcc.n	800f07c <xdir_sum+0x1e>
		}
	}
	return sum;
 800f0b6:	8a7b      	ldrh	r3, [r7, #18]
}
 800f0b8:	4618      	mov	r0, r3
 800f0ba:	371c      	adds	r7, #28
 800f0bc:	46bd      	mov	sp, r7
 800f0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0c2:	4770      	bx	lr

0800f0c4 <xname_sum>:

static
WORD xname_sum (		/* Get check sum (to be used as hash) of the name */
	const WCHAR* name	/* File name to be calculated */
)
{
 800f0c4:	b580      	push	{r7, lr}
 800f0c6:	b084      	sub	sp, #16
 800f0c8:	af00      	add	r7, sp, #0
 800f0ca:	6078      	str	r0, [r7, #4]
	WCHAR chr;
	WORD sum = 0;
 800f0cc:	2300      	movs	r3, #0
 800f0ce:	81fb      	strh	r3, [r7, #14]


	while ((chr = *name++) != 0) {
 800f0d0:	e01f      	b.n	800f112 <xname_sum+0x4e>
		chr = ff_wtoupper(chr);		/* File name needs to be ignored case */
 800f0d2:	89bb      	ldrh	r3, [r7, #12]
 800f0d4:	4618      	mov	r0, r3
 800f0d6:	f002 fbc1 	bl	801185c <ff_wtoupper>
 800f0da:	4603      	mov	r3, r0
 800f0dc:	81bb      	strh	r3, [r7, #12]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 800f0de:	89fb      	ldrh	r3, [r7, #14]
 800f0e0:	03db      	lsls	r3, r3, #15
 800f0e2:	b29a      	uxth	r2, r3
 800f0e4:	89fb      	ldrh	r3, [r7, #14]
 800f0e6:	085b      	lsrs	r3, r3, #1
 800f0e8:	b29b      	uxth	r3, r3
 800f0ea:	4413      	add	r3, r2
 800f0ec:	b29a      	uxth	r2, r3
 800f0ee:	89bb      	ldrh	r3, [r7, #12]
 800f0f0:	b2db      	uxtb	r3, r3
 800f0f2:	b29b      	uxth	r3, r3
 800f0f4:	4413      	add	r3, r2
 800f0f6:	81fb      	strh	r3, [r7, #14]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 800f0f8:	89fb      	ldrh	r3, [r7, #14]
 800f0fa:	03db      	lsls	r3, r3, #15
 800f0fc:	b29a      	uxth	r2, r3
 800f0fe:	89fb      	ldrh	r3, [r7, #14]
 800f100:	085b      	lsrs	r3, r3, #1
 800f102:	b29b      	uxth	r3, r3
 800f104:	4413      	add	r3, r2
 800f106:	b29a      	uxth	r2, r3
 800f108:	89bb      	ldrh	r3, [r7, #12]
 800f10a:	0a1b      	lsrs	r3, r3, #8
 800f10c:	b29b      	uxth	r3, r3
 800f10e:	4413      	add	r3, r2
 800f110:	81fb      	strh	r3, [r7, #14]
	while ((chr = *name++) != 0) {
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	1c9a      	adds	r2, r3, #2
 800f116:	607a      	str	r2, [r7, #4]
 800f118:	881b      	ldrh	r3, [r3, #0]
 800f11a:	81bb      	strh	r3, [r7, #12]
 800f11c:	89bb      	ldrh	r3, [r7, #12]
 800f11e:	2b00      	cmp	r3, #0
 800f120:	d1d7      	bne.n	800f0d2 <xname_sum+0xe>
	}
	return sum;
 800f122:	89fb      	ldrh	r3, [r7, #14]
}
 800f124:	4618      	mov	r0, r3
 800f126:	3710      	adds	r7, #16
 800f128:	46bd      	mov	sp, r7
 800f12a:	bd80      	pop	{r7, pc}

0800f12c <load_xdir>:

static
FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
	DIR* dp			/* Pointer to the reading direcotry object pointing the 85 entry */
)
{
 800f12c:	b590      	push	{r4, r7, lr}
 800f12e:	b087      	sub	sp, #28
 800f130:	af00      	add	r7, sp, #0
 800f132:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT i, sz_ent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	681b      	ldr	r3, [r3, #0]
 800f138:	695b      	ldr	r3, [r3, #20]
 800f13a:	613b      	str	r3, [r7, #16]


	/* Load 85 entry */
	res = move_window(dp->obj.fs, dp->sect);
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	681a      	ldr	r2, [r3, #0]
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f144:	4619      	mov	r1, r3
 800f146:	4610      	mov	r0, r2
 800f148:	f7fe fcfa 	bl	800db40 <move_window>
 800f14c:	4603      	mov	r3, r0
 800f14e:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800f150:	7bfb      	ldrb	r3, [r7, #15]
 800f152:	2b00      	cmp	r3, #0
 800f154:	d001      	beq.n	800f15a <load_xdir+0x2e>
 800f156:	7bfb      	ldrb	r3, [r7, #15]
 800f158:	e09f      	b.n	800f29a <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f15e:	781b      	ldrb	r3, [r3, #0]
 800f160:	2b85      	cmp	r3, #133	; 0x85
 800f162:	d001      	beq.n	800f168 <load_xdir+0x3c>
 800f164:	2302      	movs	r3, #2
 800f166:	e098      	b.n	800f29a <load_xdir+0x16e>
	mem_cpy(dirb + 0, dp->dir, SZDIRE);
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f16c:	2220      	movs	r2, #32
 800f16e:	4619      	mov	r1, r3
 800f170:	6938      	ldr	r0, [r7, #16]
 800f172:	f7fe fa87 	bl	800d684 <mem_cpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 800f176:	693b      	ldr	r3, [r7, #16]
 800f178:	3301      	adds	r3, #1
 800f17a:	781b      	ldrb	r3, [r3, #0]
 800f17c:	3301      	adds	r3, #1
 800f17e:	015b      	lsls	r3, r3, #5
 800f180:	60bb      	str	r3, [r7, #8]
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 800f182:	68bb      	ldr	r3, [r7, #8]
 800f184:	2b5f      	cmp	r3, #95	; 0x5f
 800f186:	d903      	bls.n	800f190 <load_xdir+0x64>
 800f188:	68bb      	ldr	r3, [r7, #8]
 800f18a:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800f18e:	d901      	bls.n	800f194 <load_xdir+0x68>
 800f190:	2302      	movs	r3, #2
 800f192:	e082      	b.n	800f29a <load_xdir+0x16e>

	/* Load C0 entry */
	res = dir_next(dp, 0);
 800f194:	2100      	movs	r1, #0
 800f196:	6878      	ldr	r0, [r7, #4]
 800f198:	f7ff fbf2 	bl	800e980 <dir_next>
 800f19c:	4603      	mov	r3, r0
 800f19e:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800f1a0:	7bfb      	ldrb	r3, [r7, #15]
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d001      	beq.n	800f1aa <load_xdir+0x7e>
 800f1a6:	7bfb      	ldrb	r3, [r7, #15]
 800f1a8:	e077      	b.n	800f29a <load_xdir+0x16e>
	res = move_window(dp->obj.fs, dp->sect);
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	681a      	ldr	r2, [r3, #0]
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f1b2:	4619      	mov	r1, r3
 800f1b4:	4610      	mov	r0, r2
 800f1b6:	f7fe fcc3 	bl	800db40 <move_window>
 800f1ba:	4603      	mov	r3, r0
 800f1bc:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800f1be:	7bfb      	ldrb	r3, [r7, #15]
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d001      	beq.n	800f1c8 <load_xdir+0x9c>
 800f1c4:	7bfb      	ldrb	r3, [r7, #15]
 800f1c6:	e068      	b.n	800f29a <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f1cc:	781b      	ldrb	r3, [r3, #0]
 800f1ce:	2bc0      	cmp	r3, #192	; 0xc0
 800f1d0:	d001      	beq.n	800f1d6 <load_xdir+0xaa>
 800f1d2:	2302      	movs	r3, #2
 800f1d4:	e061      	b.n	800f29a <load_xdir+0x16e>
	mem_cpy(dirb + SZDIRE, dp->dir, SZDIRE);
 800f1d6:	693b      	ldr	r3, [r7, #16]
 800f1d8:	f103 0020 	add.w	r0, r3, #32
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f1e0:	2220      	movs	r2, #32
 800f1e2:	4619      	mov	r1, r3
 800f1e4:	f7fe fa4e 	bl	800d684 <mem_cpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 800f1e8:	693b      	ldr	r3, [r7, #16]
 800f1ea:	3323      	adds	r3, #35	; 0x23
 800f1ec:	781b      	ldrb	r3, [r3, #0]
 800f1ee:	332c      	adds	r3, #44	; 0x2c
 800f1f0:	4a2c      	ldr	r2, [pc, #176]	; (800f2a4 <load_xdir+0x178>)
 800f1f2:	fba2 2303 	umull	r2, r3, r2, r3
 800f1f6:	08db      	lsrs	r3, r3, #3
 800f1f8:	015b      	lsls	r3, r3, #5
 800f1fa:	68ba      	ldr	r2, [r7, #8]
 800f1fc:	429a      	cmp	r2, r3
 800f1fe:	d201      	bcs.n	800f204 <load_xdir+0xd8>
 800f200:	2302      	movs	r3, #2
 800f202:	e04a      	b.n	800f29a <load_xdir+0x16e>

	/* Load C1 entries */
	i = SZDIRE * 2;	/* C1 offset */
 800f204:	2340      	movs	r3, #64	; 0x40
 800f206:	617b      	str	r3, [r7, #20]
	do {
		res = dir_next(dp, 0);
 800f208:	2100      	movs	r1, #0
 800f20a:	6878      	ldr	r0, [r7, #4]
 800f20c:	f7ff fbb8 	bl	800e980 <dir_next>
 800f210:	4603      	mov	r3, r0
 800f212:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 800f214:	7bfb      	ldrb	r3, [r7, #15]
 800f216:	2b00      	cmp	r3, #0
 800f218:	d001      	beq.n	800f21e <load_xdir+0xf2>
 800f21a:	7bfb      	ldrb	r3, [r7, #15]
 800f21c:	e03d      	b.n	800f29a <load_xdir+0x16e>
		res = move_window(dp->obj.fs, dp->sect);
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	681a      	ldr	r2, [r3, #0]
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f226:	4619      	mov	r1, r3
 800f228:	4610      	mov	r0, r2
 800f22a:	f7fe fc89 	bl	800db40 <move_window>
 800f22e:	4603      	mov	r3, r0
 800f230:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 800f232:	7bfb      	ldrb	r3, [r7, #15]
 800f234:	2b00      	cmp	r3, #0
 800f236:	d001      	beq.n	800f23c <load_xdir+0x110>
 800f238:	7bfb      	ldrb	r3, [r7, #15]
 800f23a:	e02e      	b.n	800f29a <load_xdir+0x16e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f240:	781b      	ldrb	r3, [r3, #0]
 800f242:	2bc1      	cmp	r3, #193	; 0xc1
 800f244:	d001      	beq.n	800f24a <load_xdir+0x11e>
 800f246:	2302      	movs	r3, #2
 800f248:	e027      	b.n	800f29a <load_xdir+0x16e>
		if (i < MAXDIRB(_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
 800f24a:	697b      	ldr	r3, [r7, #20]
 800f24c:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800f250:	d208      	bcs.n	800f264 <load_xdir+0x138>
 800f252:	693a      	ldr	r2, [r7, #16]
 800f254:	697b      	ldr	r3, [r7, #20]
 800f256:	18d0      	adds	r0, r2, r3
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f25c:	2220      	movs	r2, #32
 800f25e:	4619      	mov	r1, r3
 800f260:	f7fe fa10 	bl	800d684 <mem_cpy>
	} while ((i += SZDIRE) < sz_ent);
 800f264:	697b      	ldr	r3, [r7, #20]
 800f266:	3320      	adds	r3, #32
 800f268:	617b      	str	r3, [r7, #20]
 800f26a:	697a      	ldr	r2, [r7, #20]
 800f26c:	68bb      	ldr	r3, [r7, #8]
 800f26e:	429a      	cmp	r2, r3
 800f270:	d3ca      	bcc.n	800f208 <load_xdir+0xdc>

	/* Sanity check (do it when accessible object name) */
	if (i <= MAXDIRB(_MAX_LFN)) {
 800f272:	697b      	ldr	r3, [r7, #20]
 800f274:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800f278:	d80e      	bhi.n	800f298 <load_xdir+0x16c>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 800f27a:	6938      	ldr	r0, [r7, #16]
 800f27c:	f7ff feef 	bl	800f05e <xdir_sum>
 800f280:	4603      	mov	r3, r0
 800f282:	461c      	mov	r4, r3
 800f284:	693b      	ldr	r3, [r7, #16]
 800f286:	3302      	adds	r3, #2
 800f288:	4618      	mov	r0, r3
 800f28a:	f7fe f835 	bl	800d2f8 <ld_word>
 800f28e:	4603      	mov	r3, r0
 800f290:	429c      	cmp	r4, r3
 800f292:	d001      	beq.n	800f298 <load_xdir+0x16c>
 800f294:	2302      	movs	r3, #2
 800f296:	e000      	b.n	800f29a <load_xdir+0x16e>
	}
	return FR_OK;
 800f298:	2300      	movs	r3, #0
}
 800f29a:	4618      	mov	r0, r3
 800f29c:	371c      	adds	r7, #28
 800f29e:	46bd      	mov	sp, r7
 800f2a0:	bd90      	pop	{r4, r7, pc}
 800f2a2:	bf00      	nop
 800f2a4:	88888889 	.word	0x88888889

0800f2a8 <load_obj_dir>:
static
FRESULT load_obj_dir (
	DIR* dp,			/* Blank directory object to be used to access containing direcotry */
	const _FDID* obj	/* Object with its containing directory information */
)
{
 800f2a8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800f2ac:	b084      	sub	sp, #16
 800f2ae:	af00      	add	r7, sp, #0
 800f2b0:	6078      	str	r0, [r7, #4]
 800f2b2:	6039      	str	r1, [r7, #0]
	FRESULT res;

	/* Open object containing directory */
	dp->obj.fs = obj->fs;
 800f2b4:	683b      	ldr	r3, [r7, #0]
 800f2b6:	681a      	ldr	r2, [r3, #0]
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	601a      	str	r2, [r3, #0]
	dp->obj.sclust = obj->c_scl;
 800f2bc:	683b      	ldr	r3, [r7, #0]
 800f2be:	6a1a      	ldr	r2, [r3, #32]
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	609a      	str	r2, [r3, #8]
	dp->obj.stat = (BYTE)obj->c_size;
 800f2c4:	683b      	ldr	r3, [r7, #0]
 800f2c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2c8:	b2da      	uxtb	r2, r3
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	71da      	strb	r2, [r3, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 800f2ce:	683b      	ldr	r3, [r7, #0]
 800f2d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2d2:	469b      	mov	fp, r3
 800f2d4:	f04f 0c00 	mov.w	ip, #0
 800f2d8:	f06f 01ff 	mvn.w	r1, #255	; 0xff
 800f2dc:	f04f 0200 	mov.w	r2, #0
 800f2e0:	ea0b 0301 	and.w	r3, fp, r1
 800f2e4:	ea0c 0402 	and.w	r4, ip, r2
 800f2e8:	687a      	ldr	r2, [r7, #4]
 800f2ea:	e9c2 3404 	strd	r3, r4, [r2, #16]
	dp->blk_ofs = obj->c_ofs;
 800f2ee:	683b      	ldr	r3, [r7, #0]
 800f2f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	64da      	str	r2, [r3, #76]	; 0x4c

	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f2fa:	4619      	mov	r1, r3
 800f2fc:	6878      	ldr	r0, [r7, #4]
 800f2fe:	f7ff faab 	bl	800e858 <dir_sdi>
 800f302:	4603      	mov	r3, r0
 800f304:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800f306:	7bfb      	ldrb	r3, [r7, #15]
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d104      	bne.n	800f316 <load_obj_dir+0x6e>
		res = load_xdir(dp);		/* Load the object's entry block */
 800f30c:	6878      	ldr	r0, [r7, #4]
 800f30e:	f7ff ff0d 	bl	800f12c <load_xdir>
 800f312:	4603      	mov	r3, r0
 800f314:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 800f316:	7bfb      	ldrb	r3, [r7, #15]
}
 800f318:	4618      	mov	r0, r3
 800f31a:	3710      	adds	r7, #16
 800f31c:	46bd      	mov	sp, r7
 800f31e:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800f322 <store_xdir>:
/*-----------------------------------------------*/
static
FRESULT store_xdir (
	DIR* dp				/* Pointer to the direcotry object */
)
{
 800f322:	b590      	push	{r4, r7, lr}
 800f324:	b087      	sub	sp, #28
 800f326:	af00      	add	r7, sp, #0
 800f328:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT nent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	681b      	ldr	r3, [r3, #0]
 800f32e:	695b      	ldr	r3, [r3, #20]
 800f330:	60fb      	str	r3, [r7, #12]

	/* Create set sum */
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
 800f332:	68fb      	ldr	r3, [r7, #12]
 800f334:	1c9c      	adds	r4, r3, #2
 800f336:	68f8      	ldr	r0, [r7, #12]
 800f338:	f7ff fe91 	bl	800f05e <xdir_sum>
 800f33c:	4603      	mov	r3, r0
 800f33e:	4619      	mov	r1, r3
 800f340:	4620      	mov	r0, r4
 800f342:	f7fe f8d1 	bl	800d4e8 <st_word>
	nent = dirb[XDIR_NumSec] + 1;
 800f346:	68fb      	ldr	r3, [r7, #12]
 800f348:	3301      	adds	r3, #1
 800f34a:	781b      	ldrb	r3, [r3, #0]
 800f34c:	3301      	adds	r3, #1
 800f34e:	613b      	str	r3, [r7, #16]

	/* Store the set of directory to the volume */
	res = dir_sdi(dp, dp->blk_ofs);
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f354:	4619      	mov	r1, r3
 800f356:	6878      	ldr	r0, [r7, #4]
 800f358:	f7ff fa7e 	bl	800e858 <dir_sdi>
 800f35c:	4603      	mov	r3, r0
 800f35e:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800f360:	e026      	b.n	800f3b0 <store_xdir+0x8e>
		res = move_window(dp->obj.fs, dp->sect);
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	681a      	ldr	r2, [r3, #0]
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f36a:	4619      	mov	r1, r3
 800f36c:	4610      	mov	r0, r2
 800f36e:	f7fe fbe7 	bl	800db40 <move_window>
 800f372:	4603      	mov	r3, r0
 800f374:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f376:	7dfb      	ldrb	r3, [r7, #23]
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d11d      	bne.n	800f3b8 <store_xdir+0x96>
		mem_cpy(dp->dir, dirb, SZDIRE);
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f380:	2220      	movs	r2, #32
 800f382:	68f9      	ldr	r1, [r7, #12]
 800f384:	4618      	mov	r0, r3
 800f386:	f7fe f97d 	bl	800d684 <mem_cpy>
		dp->obj.fs->wflag = 1;
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	681b      	ldr	r3, [r3, #0]
 800f38e:	2201      	movs	r2, #1
 800f390:	70da      	strb	r2, [r3, #3]
		if (--nent == 0) break;
 800f392:	693b      	ldr	r3, [r7, #16]
 800f394:	3b01      	subs	r3, #1
 800f396:	613b      	str	r3, [r7, #16]
 800f398:	693b      	ldr	r3, [r7, #16]
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	d00e      	beq.n	800f3bc <store_xdir+0x9a>
		dirb += SZDIRE;
 800f39e:	68fb      	ldr	r3, [r7, #12]
 800f3a0:	3320      	adds	r3, #32
 800f3a2:	60fb      	str	r3, [r7, #12]
		res = dir_next(dp, 0);
 800f3a4:	2100      	movs	r1, #0
 800f3a6:	6878      	ldr	r0, [r7, #4]
 800f3a8:	f7ff faea 	bl	800e980 <dir_next>
 800f3ac:	4603      	mov	r3, r0
 800f3ae:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800f3b0:	7dfb      	ldrb	r3, [r7, #23]
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	d0d5      	beq.n	800f362 <store_xdir+0x40>
 800f3b6:	e002      	b.n	800f3be <store_xdir+0x9c>
		if (res != FR_OK) break;
 800f3b8:	bf00      	nop
 800f3ba:	e000      	b.n	800f3be <store_xdir+0x9c>
		if (--nent == 0) break;
 800f3bc:	bf00      	nop
	}
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 800f3be:	7dfb      	ldrb	r3, [r7, #23]
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d002      	beq.n	800f3ca <store_xdir+0xa8>
 800f3c4:	7dfb      	ldrb	r3, [r7, #23]
 800f3c6:	2b01      	cmp	r3, #1
 800f3c8:	d101      	bne.n	800f3ce <store_xdir+0xac>
 800f3ca:	7dfb      	ldrb	r3, [r7, #23]
 800f3cc:	e000      	b.n	800f3d0 <store_xdir+0xae>
 800f3ce:	2302      	movs	r3, #2
}
 800f3d0:	4618      	mov	r0, r3
 800f3d2:	371c      	adds	r7, #28
 800f3d4:	46bd      	mov	sp, r7
 800f3d6:	bd90      	pop	{r4, r7, pc}

0800f3d8 <create_xdir>:
static
void create_xdir (
	BYTE* dirb,			/* Pointer to the direcotry entry block buffer */
	const WCHAR* lfn	/* Pointer to the nul terminated file name */
)
{
 800f3d8:	b590      	push	{r4, r7, lr}
 800f3da:	b085      	sub	sp, #20
 800f3dc:	af00      	add	r7, sp, #0
 800f3de:	6078      	str	r0, [r7, #4]
 800f3e0:	6039      	str	r1, [r7, #0]
	BYTE nb, nc;
	WCHAR chr;


	/* Create 85+C0 entry */
	mem_set(dirb, 0, 2 * SZDIRE);
 800f3e2:	2240      	movs	r2, #64	; 0x40
 800f3e4:	2100      	movs	r1, #0
 800f3e6:	6878      	ldr	r0, [r7, #4]
 800f3e8:	f7fe f96d 	bl	800d6c6 <mem_set>
	dirb[XDIR_Type] = 0x85;
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	2285      	movs	r2, #133	; 0x85
 800f3f0:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_Type + SZDIRE] = 0xC0;
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	3320      	adds	r3, #32
 800f3f6:	22c0      	movs	r2, #192	; 0xc0
 800f3f8:	701a      	strb	r2, [r3, #0]

	/* Create C1 entries */
	nc = 0; nb = 1; chr = 1; i = SZDIRE * 2;
 800f3fa:	2300      	movs	r3, #0
 800f3fc:	72bb      	strb	r3, [r7, #10]
 800f3fe:	2301      	movs	r3, #1
 800f400:	72fb      	strb	r3, [r7, #11]
 800f402:	2301      	movs	r3, #1
 800f404:	813b      	strh	r3, [r7, #8]
 800f406:	2340      	movs	r3, #64	; 0x40
 800f408:	60fb      	str	r3, [r7, #12]
	do {
		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
 800f40a:	68fb      	ldr	r3, [r7, #12]
 800f40c:	1c5a      	adds	r2, r3, #1
 800f40e:	60fa      	str	r2, [r7, #12]
 800f410:	687a      	ldr	r2, [r7, #4]
 800f412:	4413      	add	r3, r2
 800f414:	22c1      	movs	r2, #193	; 0xc1
 800f416:	701a      	strb	r2, [r3, #0]
 800f418:	68fb      	ldr	r3, [r7, #12]
 800f41a:	1c5a      	adds	r2, r3, #1
 800f41c:	60fa      	str	r2, [r7, #12]
 800f41e:	687a      	ldr	r2, [r7, #4]
 800f420:	4413      	add	r3, r2
 800f422:	2200      	movs	r2, #0
 800f424:	701a      	strb	r2, [r3, #0]
		do {	/* Fill name field */
			if (chr && (chr = lfn[nc]) != 0) nc++;	/* Get a character if exist */
 800f426:	893b      	ldrh	r3, [r7, #8]
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d00b      	beq.n	800f444 <create_xdir+0x6c>
 800f42c:	7abb      	ldrb	r3, [r7, #10]
 800f42e:	005b      	lsls	r3, r3, #1
 800f430:	683a      	ldr	r2, [r7, #0]
 800f432:	4413      	add	r3, r2
 800f434:	881b      	ldrh	r3, [r3, #0]
 800f436:	813b      	strh	r3, [r7, #8]
 800f438:	893b      	ldrh	r3, [r7, #8]
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d002      	beq.n	800f444 <create_xdir+0x6c>
 800f43e:	7abb      	ldrb	r3, [r7, #10]
 800f440:	3301      	adds	r3, #1
 800f442:	72bb      	strb	r3, [r7, #10]
			st_word(dirb + i, chr); 		/* Store it */
 800f444:	687a      	ldr	r2, [r7, #4]
 800f446:	68fb      	ldr	r3, [r7, #12]
 800f448:	4413      	add	r3, r2
 800f44a:	893a      	ldrh	r2, [r7, #8]
 800f44c:	4611      	mov	r1, r2
 800f44e:	4618      	mov	r0, r3
 800f450:	f7fe f84a 	bl	800d4e8 <st_word>
		} while ((i += 2) % SZDIRE != 0);
 800f454:	68fb      	ldr	r3, [r7, #12]
 800f456:	3302      	adds	r3, #2
 800f458:	60fb      	str	r3, [r7, #12]
 800f45a:	68fb      	ldr	r3, [r7, #12]
 800f45c:	f003 031f 	and.w	r3, r3, #31
 800f460:	2b00      	cmp	r3, #0
 800f462:	d1e0      	bne.n	800f426 <create_xdir+0x4e>
		nb++;
 800f464:	7afb      	ldrb	r3, [r7, #11]
 800f466:	3301      	adds	r3, #1
 800f468:	72fb      	strb	r3, [r7, #11]
	} while (lfn[nc]);	/* Fill next entry if any char follows */
 800f46a:	7abb      	ldrb	r3, [r7, #10]
 800f46c:	005b      	lsls	r3, r3, #1
 800f46e:	683a      	ldr	r2, [r7, #0]
 800f470:	4413      	add	r3, r2
 800f472:	881b      	ldrh	r3, [r3, #0]
 800f474:	2b00      	cmp	r3, #0
 800f476:	d1c8      	bne.n	800f40a <create_xdir+0x32>

	dirb[XDIR_NumName] = nc;	/* Set name length */
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	3323      	adds	r3, #35	; 0x23
 800f47c:	7aba      	ldrb	r2, [r7, #10]
 800f47e:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_NumSec] = nb;		/* Set block length */
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	3301      	adds	r3, #1
 800f484:	7afa      	ldrb	r2, [r7, #11]
 800f486:	701a      	strb	r2, [r3, #0]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	f103 0424 	add.w	r4, r3, #36	; 0x24
 800f48e:	6838      	ldr	r0, [r7, #0]
 800f490:	f7ff fe18 	bl	800f0c4 <xname_sum>
 800f494:	4603      	mov	r3, r0
 800f496:	4619      	mov	r1, r3
 800f498:	4620      	mov	r0, r4
 800f49a:	f7fe f825 	bl	800d4e8 <st_word>
}
 800f49e:	bf00      	nop
 800f4a0:	3714      	adds	r7, #20
 800f4a2:	46bd      	mov	sp, r7
 800f4a4:	bd90      	pop	{r4, r7, pc}

0800f4a6 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800f4a6:	b580      	push	{r7, lr}
 800f4a8:	b086      	sub	sp, #24
 800f4aa:	af00      	add	r7, sp, #0
 800f4ac:	6078      	str	r0, [r7, #4]
 800f4ae:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800f4b0:	2304      	movs	r3, #4
 800f4b2:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	681b      	ldr	r3, [r3, #0]
 800f4b8:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800f4ba:	23ff      	movs	r3, #255	; 0xff
 800f4bc:	757b      	strb	r3, [r7, #21]
 800f4be:	23ff      	movs	r3, #255	; 0xff
 800f4c0:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800f4c2:	e09f      	b.n	800f604 <dir_read+0x15e>
		res = move_window(fs, dp->sect);
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f4c8:	4619      	mov	r1, r3
 800f4ca:	6938      	ldr	r0, [r7, #16]
 800f4cc:	f7fe fb38 	bl	800db40 <move_window>
 800f4d0:	4603      	mov	r3, r0
 800f4d2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f4d4:	7dfb      	ldrb	r3, [r7, #23]
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	f040 809a 	bne.w	800f610 <dir_read+0x16a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f4e0:	781b      	ldrb	r3, [r3, #0]
 800f4e2:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800f4e4:	7dbb      	ldrb	r3, [r7, #22]
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	d102      	bne.n	800f4f0 <dir_read+0x4a>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800f4ea:	2304      	movs	r3, #4
 800f4ec:	75fb      	strb	r3, [r7, #23]
 800f4ee:	e096      	b.n	800f61e <dir_read+0x178>
		}
#if _FS_EXFAT
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800f4f0:	693b      	ldr	r3, [r7, #16]
 800f4f2:	781b      	ldrb	r3, [r3, #0]
 800f4f4:	2b04      	cmp	r3, #4
 800f4f6:	d118      	bne.n	800f52a <dir_read+0x84>
			if (_USE_LABEL && vol) {
				if (c == 0x83) break;	/* Volume label entry? */
			} else {
				if (c == 0x85) {		/* Start of the file entry block? */
 800f4f8:	7dbb      	ldrb	r3, [r7, #22]
 800f4fa:	2b85      	cmp	r3, #133	; 0x85
 800f4fc:	d179      	bne.n	800f5f2 <dir_read+0x14c>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	64da      	str	r2, [r3, #76]	; 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 800f506:	6878      	ldr	r0, [r7, #4]
 800f508:	f7ff fe10 	bl	800f12c <load_xdir>
 800f50c:	4603      	mov	r3, r0
 800f50e:	75fb      	strb	r3, [r7, #23]
					if (res == FR_OK) {
 800f510:	7dfb      	ldrb	r3, [r7, #23]
 800f512:	2b00      	cmp	r3, #0
 800f514:	d17e      	bne.n	800f614 <dir_read+0x16e>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 800f516:	693b      	ldr	r3, [r7, #16]
 800f518:	695b      	ldr	r3, [r3, #20]
 800f51a:	3304      	adds	r3, #4
 800f51c:	781b      	ldrb	r3, [r3, #0]
 800f51e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f522:	b2da      	uxtb	r2, r3
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	719a      	strb	r2, [r3, #6]
					}
					break;
 800f528:	e074      	b.n	800f614 <dir_read+0x16e>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f52e:	330b      	adds	r3, #11
 800f530:	781b      	ldrb	r3, [r3, #0]
 800f532:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f536:	73fb      	strb	r3, [r7, #15]
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	7bfa      	ldrb	r2, [r7, #15]
 800f53c:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800f53e:	7dbb      	ldrb	r3, [r7, #22]
 800f540:	2be5      	cmp	r3, #229	; 0xe5
 800f542:	d00e      	beq.n	800f562 <dir_read+0xbc>
 800f544:	7dbb      	ldrb	r3, [r7, #22]
 800f546:	2b2e      	cmp	r3, #46	; 0x2e
 800f548:	d00b      	beq.n	800f562 <dir_read+0xbc>
 800f54a:	7bfb      	ldrb	r3, [r7, #15]
 800f54c:	f023 0320 	bic.w	r3, r3, #32
 800f550:	2b08      	cmp	r3, #8
 800f552:	bf0c      	ite	eq
 800f554:	2301      	moveq	r3, #1
 800f556:	2300      	movne	r3, #0
 800f558:	b2db      	uxtb	r3, r3
 800f55a:	461a      	mov	r2, r3
 800f55c:	683b      	ldr	r3, [r7, #0]
 800f55e:	4293      	cmp	r3, r2
 800f560:	d002      	beq.n	800f568 <dir_read+0xc2>
				ord = 0xFF;
 800f562:	23ff      	movs	r3, #255	; 0xff
 800f564:	757b      	strb	r3, [r7, #21]
 800f566:	e044      	b.n	800f5f2 <dir_read+0x14c>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800f568:	7bfb      	ldrb	r3, [r7, #15]
 800f56a:	2b0f      	cmp	r3, #15
 800f56c:	d12f      	bne.n	800f5ce <dir_read+0x128>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800f56e:	7dbb      	ldrb	r3, [r7, #22]
 800f570:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f574:	2b00      	cmp	r3, #0
 800f576:	d00d      	beq.n	800f594 <dir_read+0xee>
						sum = dp->dir[LDIR_Chksum];
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f57c:	7b5b      	ldrb	r3, [r3, #13]
 800f57e:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800f580:	7dbb      	ldrb	r3, [r7, #22]
 800f582:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f586:	75bb      	strb	r3, [r7, #22]
 800f588:	7dbb      	ldrb	r3, [r7, #22]
 800f58a:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800f594:	7dba      	ldrb	r2, [r7, #22]
 800f596:	7d7b      	ldrb	r3, [r7, #21]
 800f598:	429a      	cmp	r2, r3
 800f59a:	d115      	bne.n	800f5c8 <dir_read+0x122>
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f5a0:	330d      	adds	r3, #13
 800f5a2:	781b      	ldrb	r3, [r3, #0]
 800f5a4:	7d3a      	ldrb	r2, [r7, #20]
 800f5a6:	429a      	cmp	r2, r3
 800f5a8:	d10e      	bne.n	800f5c8 <dir_read+0x122>
 800f5aa:	693b      	ldr	r3, [r7, #16]
 800f5ac:	691a      	ldr	r2, [r3, #16]
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f5b2:	4619      	mov	r1, r3
 800f5b4:	4610      	mov	r0, r2
 800f5b6:	f7ff fbd5 	bl	800ed64 <pick_lfn>
 800f5ba:	4603      	mov	r3, r0
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d003      	beq.n	800f5c8 <dir_read+0x122>
 800f5c0:	7d7b      	ldrb	r3, [r7, #21]
 800f5c2:	3b01      	subs	r3, #1
 800f5c4:	b2db      	uxtb	r3, r3
 800f5c6:	e000      	b.n	800f5ca <dir_read+0x124>
 800f5c8:	23ff      	movs	r3, #255	; 0xff
 800f5ca:	757b      	strb	r3, [r7, #21]
 800f5cc:	e011      	b.n	800f5f2 <dir_read+0x14c>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800f5ce:	7d7b      	ldrb	r3, [r7, #21]
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	d109      	bne.n	800f5e8 <dir_read+0x142>
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f5d8:	4618      	mov	r0, r3
 800f5da:	f7ff fd1f 	bl	800f01c <sum_sfn>
 800f5de:	4603      	mov	r3, r0
 800f5e0:	461a      	mov	r2, r3
 800f5e2:	7d3b      	ldrb	r3, [r7, #20]
 800f5e4:	4293      	cmp	r3, r2
 800f5e6:	d017      	beq.n	800f618 <dir_read+0x172>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	f04f 32ff 	mov.w	r2, #4294967295
 800f5ee:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					break;
 800f5f0:	e012      	b.n	800f618 <dir_read+0x172>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800f5f2:	2100      	movs	r1, #0
 800f5f4:	6878      	ldr	r0, [r7, #4]
 800f5f6:	f7ff f9c3 	bl	800e980 <dir_next>
 800f5fa:	4603      	mov	r3, r0
 800f5fc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f5fe:	7dfb      	ldrb	r3, [r7, #23]
 800f600:	2b00      	cmp	r3, #0
 800f602:	d10b      	bne.n	800f61c <dir_read+0x176>
	while (dp->sect) {
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f608:	2b00      	cmp	r3, #0
 800f60a:	f47f af5b 	bne.w	800f4c4 <dir_read+0x1e>
 800f60e:	e006      	b.n	800f61e <dir_read+0x178>
		if (res != FR_OK) break;
 800f610:	bf00      	nop
 800f612:	e004      	b.n	800f61e <dir_read+0x178>
					break;
 800f614:	bf00      	nop
 800f616:	e002      	b.n	800f61e <dir_read+0x178>
					break;
 800f618:	bf00      	nop
 800f61a:	e000      	b.n	800f61e <dir_read+0x178>
		if (res != FR_OK) break;
 800f61c:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800f61e:	7dfb      	ldrb	r3, [r7, #23]
 800f620:	2b00      	cmp	r3, #0
 800f622:	d002      	beq.n	800f62a <dir_read+0x184>
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	2200      	movs	r2, #0
 800f628:	639a      	str	r2, [r3, #56]	; 0x38
	return res;
 800f62a:	7dfb      	ldrb	r3, [r7, #23]
}
 800f62c:	4618      	mov	r0, r3
 800f62e:	3718      	adds	r7, #24
 800f630:	46bd      	mov	sp, r7
 800f632:	bd80      	pop	{r7, pc}

0800f634 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800f634:	b590      	push	{r4, r7, lr}
 800f636:	b089      	sub	sp, #36	; 0x24
 800f638:	af00      	add	r7, sp, #0
 800f63a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	681b      	ldr	r3, [r3, #0]
 800f640:	60fb      	str	r3, [r7, #12]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800f642:	2100      	movs	r1, #0
 800f644:	6878      	ldr	r0, [r7, #4]
 800f646:	f7ff f907 	bl	800e858 <dir_sdi>
 800f64a:	4603      	mov	r3, r0
 800f64c:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) return res;
 800f64e:	7ffb      	ldrb	r3, [r7, #31]
 800f650:	2b00      	cmp	r3, #0
 800f652:	d001      	beq.n	800f658 <dir_find+0x24>
 800f654:	7ffb      	ldrb	r3, [r7, #31]
 800f656:	e112      	b.n	800f87e <dir_find+0x24a>
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800f658:	68fb      	ldr	r3, [r7, #12]
 800f65a:	781b      	ldrb	r3, [r3, #0]
 800f65c:	2b04      	cmp	r3, #4
 800f65e:	d164      	bne.n	800f72a <dir_find+0xf6>
		BYTE nc;
		UINT di, ni;
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 800f660:	68fb      	ldr	r3, [r7, #12]
 800f662:	691b      	ldr	r3, [r3, #16]
 800f664:	4618      	mov	r0, r3
 800f666:	f7ff fd2d 	bl	800f0c4 <xname_sum>
 800f66a:	4603      	mov	r3, r0
 800f66c:	813b      	strh	r3, [r7, #8]

		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800f66e:	e04f      	b.n	800f710 <dir_find+0xdc>
#if _MAX_LFN < 255
			if (fs->dirbuf[XDIR_NumName] > _MAX_LFN) continue;			/* Skip comparison if inaccessible object name */
#endif
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 800f670:	68fb      	ldr	r3, [r7, #12]
 800f672:	695b      	ldr	r3, [r3, #20]
 800f674:	3324      	adds	r3, #36	; 0x24
 800f676:	4618      	mov	r0, r3
 800f678:	f7fd fe3e 	bl	800d2f8 <ld_word>
 800f67c:	4603      	mov	r3, r0
 800f67e:	461a      	mov	r2, r3
 800f680:	893b      	ldrh	r3, [r7, #8]
 800f682:	4293      	cmp	r3, r2
 800f684:	d000      	beq.n	800f688 <dir_find+0x54>
 800f686:	e043      	b.n	800f710 <dir_find+0xdc>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800f688:	68fb      	ldr	r3, [r7, #12]
 800f68a:	695b      	ldr	r3, [r3, #20]
 800f68c:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800f690:	76fb      	strb	r3, [r7, #27]
 800f692:	2340      	movs	r3, #64	; 0x40
 800f694:	617b      	str	r3, [r7, #20]
 800f696:	2300      	movs	r3, #0
 800f698:	613b      	str	r3, [r7, #16]
 800f69a:	e029      	b.n	800f6f0 <dir_find+0xbc>
				if ((di % SZDIRE) == 0) di += 2;
 800f69c:	697b      	ldr	r3, [r7, #20]
 800f69e:	f003 031f 	and.w	r3, r3, #31
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	d102      	bne.n	800f6ac <dir_find+0x78>
 800f6a6:	697b      	ldr	r3, [r7, #20]
 800f6a8:	3302      	adds	r3, #2
 800f6aa:	617b      	str	r3, [r7, #20]
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800f6ac:	68fb      	ldr	r3, [r7, #12]
 800f6ae:	695a      	ldr	r2, [r3, #20]
 800f6b0:	697b      	ldr	r3, [r7, #20]
 800f6b2:	4413      	add	r3, r2
 800f6b4:	4618      	mov	r0, r3
 800f6b6:	f7fd fe1f 	bl	800d2f8 <ld_word>
 800f6ba:	4603      	mov	r3, r0
 800f6bc:	4618      	mov	r0, r3
 800f6be:	f002 f8cd 	bl	801185c <ff_wtoupper>
 800f6c2:	4603      	mov	r3, r0
 800f6c4:	461c      	mov	r4, r3
 800f6c6:	68fb      	ldr	r3, [r7, #12]
 800f6c8:	691a      	ldr	r2, [r3, #16]
 800f6ca:	693b      	ldr	r3, [r7, #16]
 800f6cc:	005b      	lsls	r3, r3, #1
 800f6ce:	4413      	add	r3, r2
 800f6d0:	881b      	ldrh	r3, [r3, #0]
 800f6d2:	4618      	mov	r0, r3
 800f6d4:	f002 f8c2 	bl	801185c <ff_wtoupper>
 800f6d8:	4603      	mov	r3, r0
 800f6da:	429c      	cmp	r4, r3
 800f6dc:	d10c      	bne.n	800f6f8 <dir_find+0xc4>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800f6de:	7efb      	ldrb	r3, [r7, #27]
 800f6e0:	3b01      	subs	r3, #1
 800f6e2:	76fb      	strb	r3, [r7, #27]
 800f6e4:	697b      	ldr	r3, [r7, #20]
 800f6e6:	3302      	adds	r3, #2
 800f6e8:	617b      	str	r3, [r7, #20]
 800f6ea:	693b      	ldr	r3, [r7, #16]
 800f6ec:	3301      	adds	r3, #1
 800f6ee:	613b      	str	r3, [r7, #16]
 800f6f0:	7efb      	ldrb	r3, [r7, #27]
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d1d2      	bne.n	800f69c <dir_find+0x68>
 800f6f6:	e000      	b.n	800f6fa <dir_find+0xc6>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800f6f8:	bf00      	nop
			}
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800f6fa:	7efb      	ldrb	r3, [r7, #27]
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	d107      	bne.n	800f710 <dir_find+0xdc>
 800f700:	68fb      	ldr	r3, [r7, #12]
 800f702:	691a      	ldr	r2, [r3, #16]
 800f704:	693b      	ldr	r3, [r7, #16]
 800f706:	005b      	lsls	r3, r3, #1
 800f708:	4413      	add	r3, r2
 800f70a:	881b      	ldrh	r3, [r3, #0]
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	d009      	beq.n	800f724 <dir_find+0xf0>
		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800f710:	2100      	movs	r1, #0
 800f712:	6878      	ldr	r0, [r7, #4]
 800f714:	f7ff fec7 	bl	800f4a6 <dir_read>
 800f718:	4603      	mov	r3, r0
 800f71a:	77fb      	strb	r3, [r7, #31]
 800f71c:	7ffb      	ldrb	r3, [r7, #31]
 800f71e:	2b00      	cmp	r3, #0
 800f720:	d0a6      	beq.n	800f670 <dir_find+0x3c>
 800f722:	e000      	b.n	800f726 <dir_find+0xf2>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800f724:	bf00      	nop
		}
		return res;
 800f726:	7ffb      	ldrb	r3, [r7, #31]
 800f728:	e0a9      	b.n	800f87e <dir_find+0x24a>
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800f72a:	23ff      	movs	r3, #255	; 0xff
 800f72c:	773b      	strb	r3, [r7, #28]
 800f72e:	7f3b      	ldrb	r3, [r7, #28]
 800f730:	777b      	strb	r3, [r7, #29]
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	f04f 32ff 	mov.w	r2, #4294967295
 800f738:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
	do {
		res = move_window(fs, dp->sect);
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f73e:	4619      	mov	r1, r3
 800f740:	68f8      	ldr	r0, [r7, #12]
 800f742:	f7fe f9fd 	bl	800db40 <move_window>
 800f746:	4603      	mov	r3, r0
 800f748:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) break;
 800f74a:	7ffb      	ldrb	r3, [r7, #31]
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	f040 8090 	bne.w	800f872 <dir_find+0x23e>
		c = dp->dir[DIR_Name];
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f756:	781b      	ldrb	r3, [r3, #0]
 800f758:	77bb      	strb	r3, [r7, #30]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800f75a:	7fbb      	ldrb	r3, [r7, #30]
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	d102      	bne.n	800f766 <dir_find+0x132>
 800f760:	2304      	movs	r3, #4
 800f762:	77fb      	strb	r3, [r7, #31]
 800f764:	e08a      	b.n	800f87c <dir_find+0x248>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f76a:	330b      	adds	r3, #11
 800f76c:	781b      	ldrb	r3, [r3, #0]
 800f76e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f772:	72fb      	strb	r3, [r7, #11]
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	7afa      	ldrb	r2, [r7, #11]
 800f778:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800f77a:	7fbb      	ldrb	r3, [r7, #30]
 800f77c:	2be5      	cmp	r3, #229	; 0xe5
 800f77e:	d007      	beq.n	800f790 <dir_find+0x15c>
 800f780:	7afb      	ldrb	r3, [r7, #11]
 800f782:	f003 0308 	and.w	r3, r3, #8
 800f786:	2b00      	cmp	r3, #0
 800f788:	d009      	beq.n	800f79e <dir_find+0x16a>
 800f78a:	7afb      	ldrb	r3, [r7, #11]
 800f78c:	2b0f      	cmp	r3, #15
 800f78e:	d006      	beq.n	800f79e <dir_find+0x16a>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800f790:	23ff      	movs	r3, #255	; 0xff
 800f792:	777b      	strb	r3, [r7, #29]
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	f04f 32ff 	mov.w	r2, #4294967295
 800f79a:	64da      	str	r2, [r3, #76]	; 0x4c
 800f79c:	e05e      	b.n	800f85c <dir_find+0x228>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800f79e:	7afb      	ldrb	r3, [r7, #11]
 800f7a0:	2b0f      	cmp	r3, #15
 800f7a2:	d136      	bne.n	800f812 <dir_find+0x1de>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800f7aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	d154      	bne.n	800f85c <dir_find+0x228>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800f7b2:	7fbb      	ldrb	r3, [r7, #30]
 800f7b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	d00d      	beq.n	800f7d8 <dir_find+0x1a4>
						sum = dp->dir[LDIR_Chksum];
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f7c0:	7b5b      	ldrb	r3, [r3, #13]
 800f7c2:	773b      	strb	r3, [r7, #28]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800f7c4:	7fbb      	ldrb	r3, [r7, #30]
 800f7c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f7ca:	77bb      	strb	r3, [r7, #30]
 800f7cc:	7fbb      	ldrb	r3, [r7, #30]
 800f7ce:	777b      	strb	r3, [r7, #29]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800f7d8:	7fba      	ldrb	r2, [r7, #30]
 800f7da:	7f7b      	ldrb	r3, [r7, #29]
 800f7dc:	429a      	cmp	r2, r3
 800f7de:	d115      	bne.n	800f80c <dir_find+0x1d8>
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f7e4:	330d      	adds	r3, #13
 800f7e6:	781b      	ldrb	r3, [r3, #0]
 800f7e8:	7f3a      	ldrb	r2, [r7, #28]
 800f7ea:	429a      	cmp	r2, r3
 800f7ec:	d10e      	bne.n	800f80c <dir_find+0x1d8>
 800f7ee:	68fb      	ldr	r3, [r7, #12]
 800f7f0:	691a      	ldr	r2, [r3, #16]
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f7f6:	4619      	mov	r1, r3
 800f7f8:	4610      	mov	r0, r2
 800f7fa:	f7ff fa43 	bl	800ec84 <cmp_lfn>
 800f7fe:	4603      	mov	r3, r0
 800f800:	2b00      	cmp	r3, #0
 800f802:	d003      	beq.n	800f80c <dir_find+0x1d8>
 800f804:	7f7b      	ldrb	r3, [r7, #29]
 800f806:	3b01      	subs	r3, #1
 800f808:	b2db      	uxtb	r3, r3
 800f80a:	e000      	b.n	800f80e <dir_find+0x1da>
 800f80c:	23ff      	movs	r3, #255	; 0xff
 800f80e:	777b      	strb	r3, [r7, #29]
 800f810:	e024      	b.n	800f85c <dir_find+0x228>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800f812:	7f7b      	ldrb	r3, [r7, #29]
 800f814:	2b00      	cmp	r3, #0
 800f816:	d109      	bne.n	800f82c <dir_find+0x1f8>
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f81c:	4618      	mov	r0, r3
 800f81e:	f7ff fbfd 	bl	800f01c <sum_sfn>
 800f822:	4603      	mov	r3, r0
 800f824:	461a      	mov	r2, r3
 800f826:	7f3b      	ldrb	r3, [r7, #28]
 800f828:	4293      	cmp	r3, r2
 800f82a:	d024      	beq.n	800f876 <dir_find+0x242>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800f832:	f003 0301 	and.w	r3, r3, #1
 800f836:	2b00      	cmp	r3, #0
 800f838:	d10a      	bne.n	800f850 <dir_find+0x21c>
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	3340      	adds	r3, #64	; 0x40
 800f842:	220b      	movs	r2, #11
 800f844:	4619      	mov	r1, r3
 800f846:	f7fd ff58 	bl	800d6fa <mem_cmp>
 800f84a:	4603      	mov	r3, r0
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d014      	beq.n	800f87a <dir_find+0x246>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800f850:	23ff      	movs	r3, #255	; 0xff
 800f852:	777b      	strb	r3, [r7, #29]
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	f04f 32ff 	mov.w	r2, #4294967295
 800f85a:	64da      	str	r2, [r3, #76]	; 0x4c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800f85c:	2100      	movs	r1, #0
 800f85e:	6878      	ldr	r0, [r7, #4]
 800f860:	f7ff f88e 	bl	800e980 <dir_next>
 800f864:	4603      	mov	r3, r0
 800f866:	77fb      	strb	r3, [r7, #31]
	} while (res == FR_OK);
 800f868:	7ffb      	ldrb	r3, [r7, #31]
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	f43f af65 	beq.w	800f73a <dir_find+0x106>
 800f870:	e004      	b.n	800f87c <dir_find+0x248>
		if (res != FR_OK) break;
 800f872:	bf00      	nop
 800f874:	e002      	b.n	800f87c <dir_find+0x248>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800f876:	bf00      	nop
 800f878:	e000      	b.n	800f87c <dir_find+0x248>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800f87a:	bf00      	nop

	return res;
 800f87c:	7ffb      	ldrb	r3, [r7, #31]
}
 800f87e:	4618      	mov	r0, r3
 800f880:	3724      	adds	r7, #36	; 0x24
 800f882:	46bd      	mov	sp, r7
 800f884:	bd90      	pop	{r4, r7, pc}
	...

0800f888 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800f888:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800f88c:	b0a0      	sub	sp, #128	; 0x80
 800f88e:	af00      	add	r7, sp, #0
 800f890:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	681b      	ldr	r3, [r3, #0]
 800f896:	66fb      	str	r3, [r7, #108]	; 0x6c
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800f89e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	d001      	beq.n	800f8aa <dir_register+0x22>
 800f8a6:	2306      	movs	r3, #6
 800f8a8:	e198      	b.n	800fbdc <dir_register+0x354>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800f8aa:	2300      	movs	r3, #0
 800f8ac:	677b      	str	r3, [r7, #116]	; 0x74
 800f8ae:	e002      	b.n	800f8b6 <dir_register+0x2e>
 800f8b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f8b2:	3301      	adds	r3, #1
 800f8b4:	677b      	str	r3, [r7, #116]	; 0x74
 800f8b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f8b8:	691a      	ldr	r2, [r3, #16]
 800f8ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f8bc:	005b      	lsls	r3, r3, #1
 800f8be:	4413      	add	r3, r2
 800f8c0:	881b      	ldrh	r3, [r3, #0]
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	d1f4      	bne.n	800f8b0 <dir_register+0x28>

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800f8c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f8c8:	781b      	ldrb	r3, [r3, #0]
 800f8ca:	2b04      	cmp	r3, #4
 800f8cc:	f040 80a9 	bne.w	800fa22 <dir_register+0x19a>
		DIR dj;

		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 800f8d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f8d2:	330e      	adds	r3, #14
 800f8d4:	4aa7      	ldr	r2, [pc, #668]	; (800fb74 <dir_register+0x2ec>)
 800f8d6:	fba2 2303 	umull	r2, r3, r2, r3
 800f8da:	08db      	lsrs	r3, r3, #3
 800f8dc:	3302      	adds	r3, #2
 800f8de:	673b      	str	r3, [r7, #112]	; 0x70
		res = dir_alloc(dp, nent);		/* Allocate entries */
 800f8e0:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800f8e2:	6878      	ldr	r0, [r7, #4]
 800f8e4:	f7ff f932 	bl	800eb4c <dir_alloc>
 800f8e8:	4603      	mov	r3, r0
 800f8ea:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res != FR_OK) return res;
 800f8ee:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d002      	beq.n	800f8fc <dir_register+0x74>
 800f8f6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f8fa:	e16f      	b.n	800fbdc <dir_register+0x354>
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f900:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800f902:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
 800f906:	440b      	add	r3, r1
 800f908:	015b      	lsls	r3, r3, #5
 800f90a:	1ad2      	subs	r2, r2, r3
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	64da      	str	r2, [r3, #76]	; 0x4c

		if (dp->obj.sclust != 0 && (dp->obj.stat & 4)) {	/* Has the sub-directory been stretched? */
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	689b      	ldr	r3, [r3, #8]
 800f914:	2b00      	cmp	r3, #0
 800f916:	d07a      	beq.n	800fa0e <dir_register+0x186>
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	79db      	ldrb	r3, [r3, #7]
 800f91c:	f003 0304 	and.w	r3, r3, #4
 800f920:	2b00      	cmp	r3, #0
 800f922:	d074      	beq.n	800fa0e <dir_register+0x186>
			dp->obj.objsize += (DWORD)fs->csize * SS(fs);	/* Increase the directory size by cluster size */
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
 800f92a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f92c:	895b      	ldrh	r3, [r3, #10]
 800f92e:	4618      	mov	r0, r3
 800f930:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f932:	899b      	ldrh	r3, [r3, #12]
 800f934:	fb03 f300 	mul.w	r3, r3, r0
 800f938:	469b      	mov	fp, r3
 800f93a:	f04f 0c00 	mov.w	ip, #0
 800f93e:	eb1b 0301 	adds.w	r3, fp, r1
 800f942:	eb4c 0402 	adc.w	r4, ip, r2
 800f946:	687a      	ldr	r2, [r7, #4]
 800f948:	e9c2 3404 	strd	r3, r4, [r2, #16]
			res = fill_first_frag(&dp->obj);				/* Fill first fragment on the FAT if needed */
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	4618      	mov	r0, r3
 800f950:	f7fe fd26 	bl	800e3a0 <fill_first_frag>
 800f954:	4603      	mov	r3, r0
 800f956:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800f95a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f95e:	2b00      	cmp	r3, #0
 800f960:	d002      	beq.n	800f968 <dir_register+0xe0>
 800f962:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f966:	e139      	b.n	800fbdc <dir_register+0x354>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800f968:	6878      	ldr	r0, [r7, #4]
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f96e:	f04f 32ff 	mov.w	r2, #4294967295
 800f972:	4619      	mov	r1, r3
 800f974:	f7fe fd43 	bl	800e3fe <fill_last_frag>
 800f978:	4603      	mov	r3, r0
 800f97a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800f97e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f982:	2b00      	cmp	r3, #0
 800f984:	d002      	beq.n	800f98c <dir_register+0x104>
 800f986:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f98a:	e127      	b.n	800fbdc <dir_register+0x354>
			res = load_obj_dir(&dj, &dp->obj);				/* Load the object status */
 800f98c:	687a      	ldr	r2, [r7, #4]
 800f98e:	f107 0308 	add.w	r3, r7, #8
 800f992:	4611      	mov	r1, r2
 800f994:	4618      	mov	r0, r3
 800f996:	f7ff fc87 	bl	800f2a8 <load_obj_dir>
 800f99a:	4603      	mov	r3, r0
 800f99c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800f9a0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	d002      	beq.n	800f9ae <dir_register+0x126>
 800f9a8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f9ac:	e116      	b.n	800fbdc <dir_register+0x354>
			st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);		/* Update the allocation status */
 800f9ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f9b0:	695b      	ldr	r3, [r3, #20]
 800f9b2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800f9bc:	461a      	mov	r2, r3
 800f9be:	4623      	mov	r3, r4
 800f9c0:	4608      	mov	r0, r1
 800f9c2:	f7fd fdd8 	bl	800d576 <st_qword>
			st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 800f9c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f9c8:	695b      	ldr	r3, [r3, #20]
 800f9ca:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800f9d4:	461a      	mov	r2, r3
 800f9d6:	4623      	mov	r3, r4
 800f9d8:	4608      	mov	r0, r1
 800f9da:	f7fd fdcc 	bl	800d576 <st_qword>
			fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	79da      	ldrb	r2, [r3, #7]
 800f9e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f9e4:	695b      	ldr	r3, [r3, #20]
 800f9e6:	3321      	adds	r3, #33	; 0x21
 800f9e8:	f042 0201 	orr.w	r2, r2, #1
 800f9ec:	b2d2      	uxtb	r2, r2
 800f9ee:	701a      	strb	r2, [r3, #0]
			res = store_xdir(&dj);							/* Store the object status */
 800f9f0:	f107 0308 	add.w	r3, r7, #8
 800f9f4:	4618      	mov	r0, r3
 800f9f6:	f7ff fc94 	bl	800f322 <store_xdir>
 800f9fa:	4603      	mov	r3, r0
 800f9fc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800fa00:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	d002      	beq.n	800fa0e <dir_register+0x186>
 800fa08:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800fa0c:	e0e6      	b.n	800fbdc <dir_register+0x354>
		}

		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 800fa0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fa10:	695a      	ldr	r2, [r3, #20]
 800fa12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fa14:	691b      	ldr	r3, [r3, #16]
 800fa16:	4619      	mov	r1, r3
 800fa18:	4610      	mov	r0, r2
 800fa1a:	f7ff fcdd 	bl	800f3d8 <create_xdir>
		return FR_OK;
 800fa1e:	2300      	movs	r3, #0
 800fa20:	e0dc      	b.n	800fbdc <dir_register+0x354>
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800fa28:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800fa2c:	220c      	movs	r2, #12
 800fa2e:	4618      	mov	r0, r3
 800fa30:	f7fd fe28 	bl	800d684 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800fa34:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fa38:	f003 0301 	and.w	r3, r3, #1
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	d033      	beq.n	800faa8 <dir_register+0x220>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	2240      	movs	r2, #64	; 0x40
 800fa44:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		for (n = 1; n < 100; n++) {
 800fa48:	2301      	movs	r3, #1
 800fa4a:	67bb      	str	r3, [r7, #120]	; 0x78
 800fa4c:	e016      	b.n	800fa7c <dir_register+0x1f4>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800fa54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fa56:	691a      	ldr	r2, [r3, #16]
 800fa58:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 800fa5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fa5e:	f7ff fa4d 	bl	800eefc <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800fa62:	6878      	ldr	r0, [r7, #4]
 800fa64:	f7ff fde6 	bl	800f634 <dir_find>
 800fa68:	4603      	mov	r3, r0
 800fa6a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) break;
 800fa6e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	d106      	bne.n	800fa84 <dir_register+0x1fc>
		for (n = 1; n < 100; n++) {
 800fa76:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fa78:	3301      	adds	r3, #1
 800fa7a:	67bb      	str	r3, [r7, #120]	; 0x78
 800fa7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fa7e:	2b63      	cmp	r3, #99	; 0x63
 800fa80:	d9e5      	bls.n	800fa4e <dir_register+0x1c6>
 800fa82:	e000      	b.n	800fa86 <dir_register+0x1fe>
			if (res != FR_OK) break;
 800fa84:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800fa86:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fa88:	2b64      	cmp	r3, #100	; 0x64
 800fa8a:	d101      	bne.n	800fa90 <dir_register+0x208>
 800fa8c:	2307      	movs	r3, #7
 800fa8e:	e0a5      	b.n	800fbdc <dir_register+0x354>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800fa90:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800fa94:	2b04      	cmp	r3, #4
 800fa96:	d002      	beq.n	800fa9e <dir_register+0x216>
 800fa98:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800fa9c:	e09e      	b.n	800fbdc <dir_register+0x354>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800fa9e:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800faa8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800faac:	f003 0302 	and.w	r3, r3, #2
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	d007      	beq.n	800fac4 <dir_register+0x23c>
 800fab4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fab6:	330c      	adds	r3, #12
 800fab8:	4a2f      	ldr	r2, [pc, #188]	; (800fb78 <dir_register+0x2f0>)
 800faba:	fba2 2303 	umull	r2, r3, r2, r3
 800fabe:	089b      	lsrs	r3, r3, #2
 800fac0:	3301      	adds	r3, #1
 800fac2:	e000      	b.n	800fac6 <dir_register+0x23e>
 800fac4:	2301      	movs	r3, #1
 800fac6:	673b      	str	r3, [r7, #112]	; 0x70
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800fac8:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800faca:	6878      	ldr	r0, [r7, #4]
 800facc:	f7ff f83e 	bl	800eb4c <dir_alloc>
 800fad0:	4603      	mov	r3, r0
 800fad2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800fad6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800fada:	2b00      	cmp	r3, #0
 800fadc:	d14f      	bne.n	800fb7e <dir_register+0x2f6>
 800fade:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fae0:	3b01      	subs	r3, #1
 800fae2:	673b      	str	r3, [r7, #112]	; 0x70
 800fae4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	d049      	beq.n	800fb7e <dir_register+0x2f6>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800faee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800faf0:	015b      	lsls	r3, r3, #5
 800faf2:	1ad3      	subs	r3, r2, r3
 800faf4:	4619      	mov	r1, r3
 800faf6:	6878      	ldr	r0, [r7, #4]
 800faf8:	f7fe feae 	bl	800e858 <dir_sdi>
 800fafc:	4603      	mov	r3, r0
 800fafe:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 800fb02:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	d139      	bne.n	800fb7e <dir_register+0x2f6>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	3340      	adds	r3, #64	; 0x40
 800fb0e:	4618      	mov	r0, r3
 800fb10:	f7ff fa84 	bl	800f01c <sum_sfn>
 800fb14:	4603      	mov	r3, r0
 800fb16:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fb1e:	4619      	mov	r1, r3
 800fb20:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800fb22:	f7fe f80d 	bl	800db40 <move_window>
 800fb26:	4603      	mov	r3, r0
 800fb28:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (res != FR_OK) break;
 800fb2c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	d123      	bne.n	800fb7c <dir_register+0x2f4>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800fb34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fb36:	6918      	ldr	r0, [r3, #16]
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800fb3c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fb3e:	b2da      	uxtb	r2, r3
 800fb40:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800fb44:	f7ff f972 	bl	800ee2c <put_lfn>
				fs->wflag = 1;
 800fb48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fb4a:	2201      	movs	r2, #1
 800fb4c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800fb4e:	2100      	movs	r1, #0
 800fb50:	6878      	ldr	r0, [r7, #4]
 800fb52:	f7fe ff15 	bl	800e980 <dir_next>
 800fb56:	4603      	mov	r3, r0
 800fb58:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			} while (res == FR_OK && --nent);
 800fb5c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	d10c      	bne.n	800fb7e <dir_register+0x2f6>
 800fb64:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fb66:	3b01      	subs	r3, #1
 800fb68:	673b      	str	r3, [r7, #112]	; 0x70
 800fb6a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	d1d4      	bne.n	800fb1a <dir_register+0x292>
 800fb70:	e005      	b.n	800fb7e <dir_register+0x2f6>
 800fb72:	bf00      	nop
 800fb74:	88888889 	.word	0x88888889
 800fb78:	4ec4ec4f 	.word	0x4ec4ec4f
				if (res != FR_OK) break;
 800fb7c:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800fb7e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	d128      	bne.n	800fbd8 <dir_register+0x350>
		res = move_window(fs, dp->sect);
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fb8a:	4619      	mov	r1, r3
 800fb8c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800fb8e:	f7fd ffd7 	bl	800db40 <move_window>
 800fb92:	4603      	mov	r3, r0
 800fb94:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 800fb98:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800fb9c:	2b00      	cmp	r3, #0
 800fb9e:	d11b      	bne.n	800fbd8 <dir_register+0x350>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fba4:	2220      	movs	r2, #32
 800fba6:	2100      	movs	r1, #0
 800fba8:	4618      	mov	r0, r3
 800fbaa:	f7fd fd8c 	bl	800d6c6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	3340      	adds	r3, #64	; 0x40
 800fbb6:	220b      	movs	r2, #11
 800fbb8:	4619      	mov	r1, r3
 800fbba:	f7fd fd63 	bl	800d684 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fbc8:	330c      	adds	r3, #12
 800fbca:	f002 0218 	and.w	r2, r2, #24
 800fbce:	b2d2      	uxtb	r2, r2
 800fbd0:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800fbd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fbd4:	2201      	movs	r2, #1
 800fbd6:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800fbd8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800fbdc:	4618      	mov	r0, r3
 800fbde:	3780      	adds	r7, #128	; 0x80
 800fbe0:	46bd      	mov	sp, r7
 800fbe2:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800fbe6:	bf00      	nop

0800fbe8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800fbe8:	b580      	push	{r7, lr}
 800fbea:	b08a      	sub	sp, #40	; 0x28
 800fbec:	af00      	add	r7, sp, #0
 800fbee:	6078      	str	r0, [r7, #4]
 800fbf0:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800fbf2:	683b      	ldr	r3, [r7, #0]
 800fbf4:	681b      	ldr	r3, [r3, #0]
 800fbf6:	613b      	str	r3, [r7, #16]
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	681b      	ldr	r3, [r3, #0]
 800fbfc:	691b      	ldr	r3, [r3, #16]
 800fbfe:	60fb      	str	r3, [r7, #12]
 800fc00:	2300      	movs	r3, #0
 800fc02:	617b      	str	r3, [r7, #20]
 800fc04:	697b      	ldr	r3, [r7, #20]
 800fc06:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800fc08:	69bb      	ldr	r3, [r7, #24]
 800fc0a:	1c5a      	adds	r2, r3, #1
 800fc0c:	61ba      	str	r2, [r7, #24]
 800fc0e:	693a      	ldr	r2, [r7, #16]
 800fc10:	4413      	add	r3, r2
 800fc12:	781b      	ldrb	r3, [r3, #0]
 800fc14:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800fc16:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fc18:	2b1f      	cmp	r3, #31
 800fc1a:	d940      	bls.n	800fc9e <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800fc1c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fc1e:	2b2f      	cmp	r3, #47	; 0x2f
 800fc20:	d006      	beq.n	800fc30 <create_name+0x48>
 800fc22:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fc24:	2b5c      	cmp	r3, #92	; 0x5c
 800fc26:	d110      	bne.n	800fc4a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800fc28:	e002      	b.n	800fc30 <create_name+0x48>
 800fc2a:	69bb      	ldr	r3, [r7, #24]
 800fc2c:	3301      	adds	r3, #1
 800fc2e:	61bb      	str	r3, [r7, #24]
 800fc30:	693a      	ldr	r2, [r7, #16]
 800fc32:	69bb      	ldr	r3, [r7, #24]
 800fc34:	4413      	add	r3, r2
 800fc36:	781b      	ldrb	r3, [r3, #0]
 800fc38:	2b2f      	cmp	r3, #47	; 0x2f
 800fc3a:	d0f6      	beq.n	800fc2a <create_name+0x42>
 800fc3c:	693a      	ldr	r2, [r7, #16]
 800fc3e:	69bb      	ldr	r3, [r7, #24]
 800fc40:	4413      	add	r3, r2
 800fc42:	781b      	ldrb	r3, [r3, #0]
 800fc44:	2b5c      	cmp	r3, #92	; 0x5c
 800fc46:	d0f0      	beq.n	800fc2a <create_name+0x42>
			break;
 800fc48:	e02a      	b.n	800fca0 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800fc4a:	697b      	ldr	r3, [r7, #20]
 800fc4c:	2bfe      	cmp	r3, #254	; 0xfe
 800fc4e:	d901      	bls.n	800fc54 <create_name+0x6c>
 800fc50:	2306      	movs	r3, #6
 800fc52:	e177      	b.n	800ff44 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 800fc54:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fc56:	b2db      	uxtb	r3, r3
 800fc58:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800fc5a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fc5c:	2101      	movs	r1, #1
 800fc5e:	4618      	mov	r0, r3
 800fc60:	f001 fdc0 	bl	80117e4 <ff_convert>
 800fc64:	4603      	mov	r3, r0
 800fc66:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800fc68:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	d101      	bne.n	800fc72 <create_name+0x8a>
 800fc6e:	2306      	movs	r3, #6
 800fc70:	e168      	b.n	800ff44 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800fc72:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fc74:	2b7f      	cmp	r3, #127	; 0x7f
 800fc76:	d809      	bhi.n	800fc8c <create_name+0xa4>
 800fc78:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fc7a:	4619      	mov	r1, r3
 800fc7c:	48b3      	ldr	r0, [pc, #716]	; (800ff4c <create_name+0x364>)
 800fc7e:	f7fd fd63 	bl	800d748 <chk_chr>
 800fc82:	4603      	mov	r3, r0
 800fc84:	2b00      	cmp	r3, #0
 800fc86:	d001      	beq.n	800fc8c <create_name+0xa4>
 800fc88:	2306      	movs	r3, #6
 800fc8a:	e15b      	b.n	800ff44 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 800fc8c:	697b      	ldr	r3, [r7, #20]
 800fc8e:	1c5a      	adds	r2, r3, #1
 800fc90:	617a      	str	r2, [r7, #20]
 800fc92:	005b      	lsls	r3, r3, #1
 800fc94:	68fa      	ldr	r2, [r7, #12]
 800fc96:	4413      	add	r3, r2
 800fc98:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800fc9a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800fc9c:	e7b4      	b.n	800fc08 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800fc9e:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800fca0:	693a      	ldr	r2, [r7, #16]
 800fca2:	69bb      	ldr	r3, [r7, #24]
 800fca4:	441a      	add	r2, r3
 800fca6:	683b      	ldr	r3, [r7, #0]
 800fca8:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800fcaa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fcac:	2b1f      	cmp	r3, #31
 800fcae:	d801      	bhi.n	800fcb4 <create_name+0xcc>
 800fcb0:	2304      	movs	r3, #4
 800fcb2:	e000      	b.n	800fcb6 <create_name+0xce>
 800fcb4:	2300      	movs	r3, #0
 800fcb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800fcba:	e011      	b.n	800fce0 <create_name+0xf8>
		w = lfn[di - 1];
 800fcbc:	697a      	ldr	r2, [r7, #20]
 800fcbe:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800fcc2:	4413      	add	r3, r2
 800fcc4:	005b      	lsls	r3, r3, #1
 800fcc6:	68fa      	ldr	r2, [r7, #12]
 800fcc8:	4413      	add	r3, r2
 800fcca:	881b      	ldrh	r3, [r3, #0]
 800fccc:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800fcce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fcd0:	2b20      	cmp	r3, #32
 800fcd2:	d002      	beq.n	800fcda <create_name+0xf2>
 800fcd4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fcd6:	2b2e      	cmp	r3, #46	; 0x2e
 800fcd8:	d106      	bne.n	800fce8 <create_name+0x100>
		di--;
 800fcda:	697b      	ldr	r3, [r7, #20]
 800fcdc:	3b01      	subs	r3, #1
 800fcde:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800fce0:	697b      	ldr	r3, [r7, #20]
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	d1ea      	bne.n	800fcbc <create_name+0xd4>
 800fce6:	e000      	b.n	800fcea <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800fce8:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800fcea:	697b      	ldr	r3, [r7, #20]
 800fcec:	005b      	lsls	r3, r3, #1
 800fcee:	68fa      	ldr	r2, [r7, #12]
 800fcf0:	4413      	add	r3, r2
 800fcf2:	2200      	movs	r2, #0
 800fcf4:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800fcf6:	697b      	ldr	r3, [r7, #20]
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	d101      	bne.n	800fd00 <create_name+0x118>
 800fcfc:	2306      	movs	r3, #6
 800fcfe:	e121      	b.n	800ff44 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	3340      	adds	r3, #64	; 0x40
 800fd04:	220b      	movs	r2, #11
 800fd06:	2120      	movs	r1, #32
 800fd08:	4618      	mov	r0, r3
 800fd0a:	f7fd fcdc 	bl	800d6c6 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800fd0e:	2300      	movs	r3, #0
 800fd10:	61bb      	str	r3, [r7, #24]
 800fd12:	e002      	b.n	800fd1a <create_name+0x132>
 800fd14:	69bb      	ldr	r3, [r7, #24]
 800fd16:	3301      	adds	r3, #1
 800fd18:	61bb      	str	r3, [r7, #24]
 800fd1a:	69bb      	ldr	r3, [r7, #24]
 800fd1c:	005b      	lsls	r3, r3, #1
 800fd1e:	68fa      	ldr	r2, [r7, #12]
 800fd20:	4413      	add	r3, r2
 800fd22:	881b      	ldrh	r3, [r3, #0]
 800fd24:	2b20      	cmp	r3, #32
 800fd26:	d0f5      	beq.n	800fd14 <create_name+0x12c>
 800fd28:	69bb      	ldr	r3, [r7, #24]
 800fd2a:	005b      	lsls	r3, r3, #1
 800fd2c:	68fa      	ldr	r2, [r7, #12]
 800fd2e:	4413      	add	r3, r2
 800fd30:	881b      	ldrh	r3, [r3, #0]
 800fd32:	2b2e      	cmp	r3, #46	; 0x2e
 800fd34:	d0ee      	beq.n	800fd14 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800fd36:	69bb      	ldr	r3, [r7, #24]
 800fd38:	2b00      	cmp	r3, #0
 800fd3a:	d009      	beq.n	800fd50 <create_name+0x168>
 800fd3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fd40:	f043 0303 	orr.w	r3, r3, #3
 800fd44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800fd48:	e002      	b.n	800fd50 <create_name+0x168>
 800fd4a:	697b      	ldr	r3, [r7, #20]
 800fd4c:	3b01      	subs	r3, #1
 800fd4e:	617b      	str	r3, [r7, #20]
 800fd50:	697b      	ldr	r3, [r7, #20]
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	d009      	beq.n	800fd6a <create_name+0x182>
 800fd56:	697a      	ldr	r2, [r7, #20]
 800fd58:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800fd5c:	4413      	add	r3, r2
 800fd5e:	005b      	lsls	r3, r3, #1
 800fd60:	68fa      	ldr	r2, [r7, #12]
 800fd62:	4413      	add	r3, r2
 800fd64:	881b      	ldrh	r3, [r3, #0]
 800fd66:	2b2e      	cmp	r3, #46	; 0x2e
 800fd68:	d1ef      	bne.n	800fd4a <create_name+0x162>

	i = b = 0; ni = 8;
 800fd6a:	2300      	movs	r3, #0
 800fd6c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800fd70:	2300      	movs	r3, #0
 800fd72:	623b      	str	r3, [r7, #32]
 800fd74:	2308      	movs	r3, #8
 800fd76:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800fd78:	69bb      	ldr	r3, [r7, #24]
 800fd7a:	1c5a      	adds	r2, r3, #1
 800fd7c:	61ba      	str	r2, [r7, #24]
 800fd7e:	005b      	lsls	r3, r3, #1
 800fd80:	68fa      	ldr	r2, [r7, #12]
 800fd82:	4413      	add	r3, r2
 800fd84:	881b      	ldrh	r3, [r3, #0]
 800fd86:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800fd88:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fd8a:	2b00      	cmp	r3, #0
 800fd8c:	f000 8090 	beq.w	800feb0 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800fd90:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fd92:	2b20      	cmp	r3, #32
 800fd94:	d006      	beq.n	800fda4 <create_name+0x1bc>
 800fd96:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fd98:	2b2e      	cmp	r3, #46	; 0x2e
 800fd9a:	d10a      	bne.n	800fdb2 <create_name+0x1ca>
 800fd9c:	69ba      	ldr	r2, [r7, #24]
 800fd9e:	697b      	ldr	r3, [r7, #20]
 800fda0:	429a      	cmp	r2, r3
 800fda2:	d006      	beq.n	800fdb2 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800fda4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fda8:	f043 0303 	orr.w	r3, r3, #3
 800fdac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fdb0:	e07d      	b.n	800feae <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800fdb2:	6a3a      	ldr	r2, [r7, #32]
 800fdb4:	69fb      	ldr	r3, [r7, #28]
 800fdb6:	429a      	cmp	r2, r3
 800fdb8:	d203      	bcs.n	800fdc2 <create_name+0x1da>
 800fdba:	69ba      	ldr	r2, [r7, #24]
 800fdbc:	697b      	ldr	r3, [r7, #20]
 800fdbe:	429a      	cmp	r2, r3
 800fdc0:	d123      	bne.n	800fe0a <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800fdc2:	69fb      	ldr	r3, [r7, #28]
 800fdc4:	2b0b      	cmp	r3, #11
 800fdc6:	d106      	bne.n	800fdd6 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800fdc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fdcc:	f043 0303 	orr.w	r3, r3, #3
 800fdd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fdd4:	e06f      	b.n	800feb6 <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800fdd6:	69ba      	ldr	r2, [r7, #24]
 800fdd8:	697b      	ldr	r3, [r7, #20]
 800fdda:	429a      	cmp	r2, r3
 800fddc:	d005      	beq.n	800fdea <create_name+0x202>
 800fdde:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fde2:	f043 0303 	orr.w	r3, r3, #3
 800fde6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800fdea:	69ba      	ldr	r2, [r7, #24]
 800fdec:	697b      	ldr	r3, [r7, #20]
 800fdee:	429a      	cmp	r2, r3
 800fdf0:	d860      	bhi.n	800feb4 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800fdf2:	697b      	ldr	r3, [r7, #20]
 800fdf4:	61bb      	str	r3, [r7, #24]
 800fdf6:	2308      	movs	r3, #8
 800fdf8:	623b      	str	r3, [r7, #32]
 800fdfa:	230b      	movs	r3, #11
 800fdfc:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800fdfe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fe02:	009b      	lsls	r3, r3, #2
 800fe04:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800fe08:	e051      	b.n	800feae <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800fe0a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fe0c:	2b7f      	cmp	r3, #127	; 0x7f
 800fe0e:	d914      	bls.n	800fe3a <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800fe10:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fe12:	2100      	movs	r1, #0
 800fe14:	4618      	mov	r0, r3
 800fe16:	f001 fce5 	bl	80117e4 <ff_convert>
 800fe1a:	4603      	mov	r3, r0
 800fe1c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800fe1e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fe20:	2b00      	cmp	r3, #0
 800fe22:	d004      	beq.n	800fe2e <create_name+0x246>
 800fe24:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fe26:	3b80      	subs	r3, #128	; 0x80
 800fe28:	4a49      	ldr	r2, [pc, #292]	; (800ff50 <create_name+0x368>)
 800fe2a:	5cd3      	ldrb	r3, [r2, r3]
 800fe2c:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800fe2e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fe32:	f043 0302 	orr.w	r3, r3, #2
 800fe36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800fe3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	d007      	beq.n	800fe50 <create_name+0x268>
 800fe40:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fe42:	4619      	mov	r1, r3
 800fe44:	4843      	ldr	r0, [pc, #268]	; (800ff54 <create_name+0x36c>)
 800fe46:	f7fd fc7f 	bl	800d748 <chk_chr>
 800fe4a:	4603      	mov	r3, r0
 800fe4c:	2b00      	cmp	r3, #0
 800fe4e:	d008      	beq.n	800fe62 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800fe50:	235f      	movs	r3, #95	; 0x5f
 800fe52:	84bb      	strh	r3, [r7, #36]	; 0x24
 800fe54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fe58:	f043 0303 	orr.w	r3, r3, #3
 800fe5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fe60:	e01b      	b.n	800fe9a <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800fe62:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fe64:	2b40      	cmp	r3, #64	; 0x40
 800fe66:	d909      	bls.n	800fe7c <create_name+0x294>
 800fe68:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fe6a:	2b5a      	cmp	r3, #90	; 0x5a
 800fe6c:	d806      	bhi.n	800fe7c <create_name+0x294>
					b |= 2;
 800fe6e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fe72:	f043 0302 	orr.w	r3, r3, #2
 800fe76:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800fe7a:	e00e      	b.n	800fe9a <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800fe7c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fe7e:	2b60      	cmp	r3, #96	; 0x60
 800fe80:	d90b      	bls.n	800fe9a <create_name+0x2b2>
 800fe82:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fe84:	2b7a      	cmp	r3, #122	; 0x7a
 800fe86:	d808      	bhi.n	800fe9a <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800fe88:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fe8c:	f043 0301 	orr.w	r3, r3, #1
 800fe90:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800fe94:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fe96:	3b20      	subs	r3, #32
 800fe98:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800fe9a:	6a3b      	ldr	r3, [r7, #32]
 800fe9c:	1c5a      	adds	r2, r3, #1
 800fe9e:	623a      	str	r2, [r7, #32]
 800fea0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800fea2:	b2d1      	uxtb	r1, r2
 800fea4:	687a      	ldr	r2, [r7, #4]
 800fea6:	4413      	add	r3, r2
 800fea8:	460a      	mov	r2, r1
 800feaa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		w = lfn[si++];					/* Get an LFN character */
 800feae:	e763      	b.n	800fd78 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800feb0:	bf00      	nop
 800feb2:	e000      	b.n	800feb6 <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 800feb4:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800febc:	2be5      	cmp	r3, #229	; 0xe5
 800febe:	d103      	bne.n	800fec8 <create_name+0x2e0>
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	2205      	movs	r2, #5
 800fec4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	if (ni == 8) b <<= 2;
 800fec8:	69fb      	ldr	r3, [r7, #28]
 800feca:	2b08      	cmp	r3, #8
 800fecc:	d104      	bne.n	800fed8 <create_name+0x2f0>
 800fece:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fed2:	009b      	lsls	r3, r3, #2
 800fed4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800fed8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fedc:	f003 030c 	and.w	r3, r3, #12
 800fee0:	2b0c      	cmp	r3, #12
 800fee2:	d005      	beq.n	800fef0 <create_name+0x308>
 800fee4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fee8:	f003 0303 	and.w	r3, r3, #3
 800feec:	2b03      	cmp	r3, #3
 800feee:	d105      	bne.n	800fefc <create_name+0x314>
 800fef0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fef4:	f043 0302 	orr.w	r3, r3, #2
 800fef8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800fefc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ff00:	f003 0302 	and.w	r3, r3, #2
 800ff04:	2b00      	cmp	r3, #0
 800ff06:	d117      	bne.n	800ff38 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800ff08:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ff0c:	f003 0303 	and.w	r3, r3, #3
 800ff10:	2b01      	cmp	r3, #1
 800ff12:	d105      	bne.n	800ff20 <create_name+0x338>
 800ff14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ff18:	f043 0310 	orr.w	r3, r3, #16
 800ff1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800ff20:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ff24:	f003 030c 	and.w	r3, r3, #12
 800ff28:	2b04      	cmp	r3, #4
 800ff2a:	d105      	bne.n	800ff38 <create_name+0x350>
 800ff2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ff30:	f043 0308 	orr.w	r3, r3, #8
 800ff34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800ff3e:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b

	return FR_OK;
 800ff42:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800ff44:	4618      	mov	r0, r3
 800ff46:	3728      	adds	r7, #40	; 0x28
 800ff48:	46bd      	mov	sp, r7
 800ff4a:	bd80      	pop	{r7, pc}
 800ff4c:	08016078 	.word	0x08016078
 800ff50:	08016180 	.word	0x08016180
 800ff54:	08016084 	.word	0x08016084

0800ff58 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800ff58:	b590      	push	{r4, r7, lr}
 800ff5a:	b087      	sub	sp, #28
 800ff5c:	af00      	add	r7, sp, #0
 800ff5e:	6078      	str	r0, [r7, #4]
 800ff60:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800ff66:	693b      	ldr	r3, [r7, #16]
 800ff68:	681b      	ldr	r3, [r3, #0]
 800ff6a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800ff6c:	e002      	b.n	800ff74 <follow_path+0x1c>
 800ff6e:	683b      	ldr	r3, [r7, #0]
 800ff70:	3301      	adds	r3, #1
 800ff72:	603b      	str	r3, [r7, #0]
 800ff74:	683b      	ldr	r3, [r7, #0]
 800ff76:	781b      	ldrb	r3, [r3, #0]
 800ff78:	2b2f      	cmp	r3, #47	; 0x2f
 800ff7a:	d0f8      	beq.n	800ff6e <follow_path+0x16>
 800ff7c:	683b      	ldr	r3, [r7, #0]
 800ff7e:	781b      	ldrb	r3, [r3, #0]
 800ff80:	2b5c      	cmp	r3, #92	; 0x5c
 800ff82:	d0f4      	beq.n	800ff6e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800ff84:	693b      	ldr	r3, [r7, #16]
 800ff86:	2200      	movs	r2, #0
 800ff88:	609a      	str	r2, [r3, #8]
	}
#if _FS_EXFAT
	obj->n_frag = 0;	/* Invalidate last fragment counter of the object */
 800ff8a:	693b      	ldr	r3, [r7, #16]
 800ff8c:	2200      	movs	r2, #0
 800ff8e:	61da      	str	r2, [r3, #28]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800ff90:	683b      	ldr	r3, [r7, #0]
 800ff92:	781b      	ldrb	r3, [r3, #0]
 800ff94:	2b1f      	cmp	r3, #31
 800ff96:	d80a      	bhi.n	800ffae <follow_path+0x56>
		dp->fn[NSFLAG] = NS_NONAME;
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	2280      	movs	r2, #128	; 0x80
 800ff9c:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		res = dir_sdi(dp, 0);
 800ffa0:	2100      	movs	r1, #0
 800ffa2:	6878      	ldr	r0, [r7, #4]
 800ffa4:	f7fe fc58 	bl	800e858 <dir_sdi>
 800ffa8:	4603      	mov	r3, r0
 800ffaa:	75fb      	strb	r3, [r7, #23]
 800ffac:	e07c      	b.n	80100a8 <follow_path+0x150>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ffae:	463b      	mov	r3, r7
 800ffb0:	4619      	mov	r1, r3
 800ffb2:	6878      	ldr	r0, [r7, #4]
 800ffb4:	f7ff fe18 	bl	800fbe8 <create_name>
 800ffb8:	4603      	mov	r3, r0
 800ffba:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ffbc:	7dfb      	ldrb	r3, [r7, #23]
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	d16d      	bne.n	801009e <follow_path+0x146>
			res = dir_find(dp);				/* Find an object with the segment name */
 800ffc2:	6878      	ldr	r0, [r7, #4]
 800ffc4:	f7ff fb36 	bl	800f634 <dir_find>
 800ffc8:	4603      	mov	r3, r0
 800ffca:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800ffd2:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800ffd4:	7dfb      	ldrb	r3, [r7, #23]
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	d00a      	beq.n	800fff0 <follow_path+0x98>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800ffda:	7dfb      	ldrb	r3, [r7, #23]
 800ffdc:	2b04      	cmp	r3, #4
 800ffde:	d160      	bne.n	80100a2 <follow_path+0x14a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800ffe0:	7afb      	ldrb	r3, [r7, #11]
 800ffe2:	f003 0304 	and.w	r3, r3, #4
 800ffe6:	2b00      	cmp	r3, #0
 800ffe8:	d15b      	bne.n	80100a2 <follow_path+0x14a>
 800ffea:	2305      	movs	r3, #5
 800ffec:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800ffee:	e058      	b.n	80100a2 <follow_path+0x14a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800fff0:	7afb      	ldrb	r3, [r7, #11]
 800fff2:	f003 0304 	and.w	r3, r3, #4
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	d155      	bne.n	80100a6 <follow_path+0x14e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800fffa:	693b      	ldr	r3, [r7, #16]
 800fffc:	799b      	ldrb	r3, [r3, #6]
 800fffe:	f003 0310 	and.w	r3, r3, #16
 8010002:	2b00      	cmp	r3, #0
 8010004:	d102      	bne.n	801000c <follow_path+0xb4>
				res = FR_NO_PATH; break;
 8010006:	2305      	movs	r3, #5
 8010008:	75fb      	strb	r3, [r7, #23]
 801000a:	e04d      	b.n	80100a8 <follow_path+0x150>
			}
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
 801000c:	68fb      	ldr	r3, [r7, #12]
 801000e:	781b      	ldrb	r3, [r3, #0]
 8010010:	2b04      	cmp	r3, #4
 8010012:	d12f      	bne.n	8010074 <follow_path+0x11c>
				obj->c_scl = obj->sclust;
 8010014:	693b      	ldr	r3, [r7, #16]
 8010016:	689a      	ldr	r2, [r3, #8]
 8010018:	693b      	ldr	r3, [r7, #16]
 801001a:	621a      	str	r2, [r3, #32]
				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 801001c:	693b      	ldr	r3, [r7, #16]
 801001e:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8010022:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8010026:	693a      	ldr	r2, [r7, #16]
 8010028:	79d2      	ldrb	r2, [r2, #7]
 801002a:	431a      	orrs	r2, r3
 801002c:	693b      	ldr	r3, [r7, #16]
 801002e:	625a      	str	r2, [r3, #36]	; 0x24
				obj->c_ofs = dp->blk_ofs;
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010034:	693b      	ldr	r3, [r7, #16]
 8010036:	629a      	str	r2, [r3, #40]	; 0x28
				obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
 8010038:	68fb      	ldr	r3, [r7, #12]
 801003a:	695b      	ldr	r3, [r3, #20]
 801003c:	3334      	adds	r3, #52	; 0x34
 801003e:	4618      	mov	r0, r3
 8010040:	f7fd f972 	bl	800d328 <ld_dword>
 8010044:	4602      	mov	r2, r0
 8010046:	693b      	ldr	r3, [r7, #16]
 8010048:	609a      	str	r2, [r3, #8]
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 801004a:	68fb      	ldr	r3, [r7, #12]
 801004c:	695b      	ldr	r3, [r3, #20]
 801004e:	3321      	adds	r3, #33	; 0x21
 8010050:	781b      	ldrb	r3, [r3, #0]
 8010052:	f003 0302 	and.w	r3, r3, #2
 8010056:	b2da      	uxtb	r2, r3
 8010058:	693b      	ldr	r3, [r7, #16]
 801005a:	71da      	strb	r2, [r3, #7]
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 801005c:	68fb      	ldr	r3, [r7, #12]
 801005e:	695b      	ldr	r3, [r3, #20]
 8010060:	3338      	adds	r3, #56	; 0x38
 8010062:	4618      	mov	r0, r3
 8010064:	f7fd f983 	bl	800d36e <ld_qword>
 8010068:	4603      	mov	r3, r0
 801006a:	460c      	mov	r4, r1
 801006c:	693a      	ldr	r2, [r7, #16]
 801006e:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8010072:	e79c      	b.n	800ffae <follow_path+0x56>
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8010074:	68fb      	ldr	r3, [r7, #12]
 8010076:	f103 0140 	add.w	r1, r3, #64	; 0x40
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801007e:	68fa      	ldr	r2, [r7, #12]
 8010080:	8992      	ldrh	r2, [r2, #12]
 8010082:	fbb3 f0f2 	udiv	r0, r3, r2
 8010086:	fb02 f200 	mul.w	r2, r2, r0
 801008a:	1a9b      	subs	r3, r3, r2
 801008c:	440b      	add	r3, r1
 801008e:	4619      	mov	r1, r3
 8010090:	68f8      	ldr	r0, [r7, #12]
 8010092:	f7fe fdb7 	bl	800ec04 <ld_clust>
 8010096:	4602      	mov	r2, r0
 8010098:	693b      	ldr	r3, [r7, #16]
 801009a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801009c:	e787      	b.n	800ffae <follow_path+0x56>
			if (res != FR_OK) break;
 801009e:	bf00      	nop
 80100a0:	e002      	b.n	80100a8 <follow_path+0x150>
				break;
 80100a2:	bf00      	nop
 80100a4:	e000      	b.n	80100a8 <follow_path+0x150>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80100a6:	bf00      	nop
			}
		}
	}

	return res;
 80100a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80100aa:	4618      	mov	r0, r3
 80100ac:	371c      	adds	r7, #28
 80100ae:	46bd      	mov	sp, r7
 80100b0:	bd90      	pop	{r4, r7, pc}

080100b2 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80100b2:	b480      	push	{r7}
 80100b4:	b087      	sub	sp, #28
 80100b6:	af00      	add	r7, sp, #0
 80100b8:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80100ba:	f04f 33ff 	mov.w	r3, #4294967295
 80100be:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	681b      	ldr	r3, [r3, #0]
 80100c4:	2b00      	cmp	r3, #0
 80100c6:	d031      	beq.n	801012c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	681b      	ldr	r3, [r3, #0]
 80100cc:	617b      	str	r3, [r7, #20]
 80100ce:	e002      	b.n	80100d6 <get_ldnumber+0x24>
 80100d0:	697b      	ldr	r3, [r7, #20]
 80100d2:	3301      	adds	r3, #1
 80100d4:	617b      	str	r3, [r7, #20]
 80100d6:	697b      	ldr	r3, [r7, #20]
 80100d8:	781b      	ldrb	r3, [r3, #0]
 80100da:	2b1f      	cmp	r3, #31
 80100dc:	d903      	bls.n	80100e6 <get_ldnumber+0x34>
 80100de:	697b      	ldr	r3, [r7, #20]
 80100e0:	781b      	ldrb	r3, [r3, #0]
 80100e2:	2b3a      	cmp	r3, #58	; 0x3a
 80100e4:	d1f4      	bne.n	80100d0 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80100e6:	697b      	ldr	r3, [r7, #20]
 80100e8:	781b      	ldrb	r3, [r3, #0]
 80100ea:	2b3a      	cmp	r3, #58	; 0x3a
 80100ec:	d11c      	bne.n	8010128 <get_ldnumber+0x76>
			tp = *path;
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	681b      	ldr	r3, [r3, #0]
 80100f2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80100f4:	68fb      	ldr	r3, [r7, #12]
 80100f6:	1c5a      	adds	r2, r3, #1
 80100f8:	60fa      	str	r2, [r7, #12]
 80100fa:	781b      	ldrb	r3, [r3, #0]
 80100fc:	3b30      	subs	r3, #48	; 0x30
 80100fe:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8010100:	68bb      	ldr	r3, [r7, #8]
 8010102:	2b09      	cmp	r3, #9
 8010104:	d80e      	bhi.n	8010124 <get_ldnumber+0x72>
 8010106:	68fa      	ldr	r2, [r7, #12]
 8010108:	697b      	ldr	r3, [r7, #20]
 801010a:	429a      	cmp	r2, r3
 801010c:	d10a      	bne.n	8010124 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801010e:	68bb      	ldr	r3, [r7, #8]
 8010110:	2b00      	cmp	r3, #0
 8010112:	d107      	bne.n	8010124 <get_ldnumber+0x72>
					vol = (int)i;
 8010114:	68bb      	ldr	r3, [r7, #8]
 8010116:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8010118:	697b      	ldr	r3, [r7, #20]
 801011a:	3301      	adds	r3, #1
 801011c:	617b      	str	r3, [r7, #20]
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	697a      	ldr	r2, [r7, #20]
 8010122:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8010124:	693b      	ldr	r3, [r7, #16]
 8010126:	e002      	b.n	801012e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8010128:	2300      	movs	r3, #0
 801012a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 801012c:	693b      	ldr	r3, [r7, #16]
}
 801012e:	4618      	mov	r0, r3
 8010130:	371c      	adds	r7, #28
 8010132:	46bd      	mov	sp, r7
 8010134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010138:	4770      	bx	lr
	...

0801013c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 801013c:	b580      	push	{r7, lr}
 801013e:	b082      	sub	sp, #8
 8010140:	af00      	add	r7, sp, #0
 8010142:	6078      	str	r0, [r7, #4]
 8010144:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	2200      	movs	r2, #0
 801014a:	70da      	strb	r2, [r3, #3]
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	f04f 32ff 	mov.w	r2, #4294967295
 8010152:	63da      	str	r2, [r3, #60]	; 0x3c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8010154:	6839      	ldr	r1, [r7, #0]
 8010156:	6878      	ldr	r0, [r7, #4]
 8010158:	f7fd fcf2 	bl	800db40 <move_window>
 801015c:	4603      	mov	r3, r0
 801015e:	2b00      	cmp	r3, #0
 8010160:	d001      	beq.n	8010166 <check_fs+0x2a>
 8010162:	2304      	movs	r3, #4
 8010164:	e044      	b.n	80101f0 <check_fs+0xb4>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	3340      	adds	r3, #64	; 0x40
 801016a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801016e:	4618      	mov	r0, r3
 8010170:	f7fd f8c2 	bl	800d2f8 <ld_word>
 8010174:	4603      	mov	r3, r0
 8010176:	461a      	mov	r2, r3
 8010178:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801017c:	429a      	cmp	r2, r3
 801017e:	d001      	beq.n	8010184 <check_fs+0x48>
 8010180:	2303      	movs	r3, #3
 8010182:	e035      	b.n	80101f0 <check_fs+0xb4>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801018a:	2be9      	cmp	r3, #233	; 0xe9
 801018c:	d009      	beq.n	80101a2 <check_fs+0x66>
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010194:	2beb      	cmp	r3, #235	; 0xeb
 8010196:	d11e      	bne.n	80101d6 <check_fs+0x9a>
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801019e:	2b90      	cmp	r3, #144	; 0x90
 80101a0:	d119      	bne.n	80101d6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	3340      	adds	r3, #64	; 0x40
 80101a6:	3336      	adds	r3, #54	; 0x36
 80101a8:	4618      	mov	r0, r3
 80101aa:	f7fd f8bd 	bl	800d328 <ld_dword>
 80101ae:	4603      	mov	r3, r0
 80101b0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80101b4:	4a10      	ldr	r2, [pc, #64]	; (80101f8 <check_fs+0xbc>)
 80101b6:	4293      	cmp	r3, r2
 80101b8:	d101      	bne.n	80101be <check_fs+0x82>
 80101ba:	2300      	movs	r3, #0
 80101bc:	e018      	b.n	80101f0 <check_fs+0xb4>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	3340      	adds	r3, #64	; 0x40
 80101c2:	3352      	adds	r3, #82	; 0x52
 80101c4:	4618      	mov	r0, r3
 80101c6:	f7fd f8af 	bl	800d328 <ld_dword>
 80101ca:	4602      	mov	r2, r0
 80101cc:	4b0b      	ldr	r3, [pc, #44]	; (80101fc <check_fs+0xc0>)
 80101ce:	429a      	cmp	r2, r3
 80101d0:	d101      	bne.n	80101d6 <check_fs+0x9a>
 80101d2:	2300      	movs	r3, #0
 80101d4:	e00c      	b.n	80101f0 <check_fs+0xb4>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	3340      	adds	r3, #64	; 0x40
 80101da:	220b      	movs	r2, #11
 80101dc:	4908      	ldr	r1, [pc, #32]	; (8010200 <check_fs+0xc4>)
 80101de:	4618      	mov	r0, r3
 80101e0:	f7fd fa8b 	bl	800d6fa <mem_cmp>
 80101e4:	4603      	mov	r3, r0
 80101e6:	2b00      	cmp	r3, #0
 80101e8:	d101      	bne.n	80101ee <check_fs+0xb2>
 80101ea:	2301      	movs	r3, #1
 80101ec:	e000      	b.n	80101f0 <check_fs+0xb4>
#endif
	return 2;
 80101ee:	2302      	movs	r3, #2
}
 80101f0:	4618      	mov	r0, r3
 80101f2:	3708      	adds	r7, #8
 80101f4:	46bd      	mov	sp, r7
 80101f6:	bd80      	pop	{r7, pc}
 80101f8:	00544146 	.word	0x00544146
 80101fc:	33544146 	.word	0x33544146
 8010200:	0801608c 	.word	0x0801608c

08010204 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8010204:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8010208:	b098      	sub	sp, #96	; 0x60
 801020a:	af00      	add	r7, sp, #0
 801020c:	60f8      	str	r0, [r7, #12]
 801020e:	60b9      	str	r1, [r7, #8]
 8010210:	4613      	mov	r3, r2
 8010212:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8010214:	68bb      	ldr	r3, [r7, #8]
 8010216:	2200      	movs	r2, #0
 8010218:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 801021a:	68f8      	ldr	r0, [r7, #12]
 801021c:	f7ff ff49 	bl	80100b2 <get_ldnumber>
 8010220:	6478      	str	r0, [r7, #68]	; 0x44
	if (vol < 0) return FR_INVALID_DRIVE;
 8010222:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010224:	2b00      	cmp	r3, #0
 8010226:	da01      	bge.n	801022c <find_volume+0x28>
 8010228:	230b      	movs	r3, #11
 801022a:	e370      	b.n	801090e <find_volume+0x70a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801022c:	4aae      	ldr	r2, [pc, #696]	; (80104e8 <find_volume+0x2e4>)
 801022e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010230:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010234:	643b      	str	r3, [r7, #64]	; 0x40
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8010236:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010238:	2b00      	cmp	r3, #0
 801023a:	d101      	bne.n	8010240 <find_volume+0x3c>
 801023c:	230c      	movs	r3, #12
 801023e:	e366      	b.n	801090e <find_volume+0x70a>

	ENTER_FF(fs);						/* Lock the volume */
 8010240:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8010242:	f7fd fa9c 	bl	800d77e <lock_fs>
 8010246:	4603      	mov	r3, r0
 8010248:	2b00      	cmp	r3, #0
 801024a:	d101      	bne.n	8010250 <find_volume+0x4c>
 801024c:	230f      	movs	r3, #15
 801024e:	e35e      	b.n	801090e <find_volume+0x70a>
	*rfs = fs;							/* Return pointer to the file system object */
 8010250:	68bb      	ldr	r3, [r7, #8]
 8010252:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010254:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8010256:	79fb      	ldrb	r3, [r7, #7]
 8010258:	f023 0301 	bic.w	r3, r3, #1
 801025c:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 801025e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010260:	781b      	ldrb	r3, [r3, #0]
 8010262:	2b00      	cmp	r3, #0
 8010264:	d01a      	beq.n	801029c <find_volume+0x98>
		stat = disk_status(fs->drv);
 8010266:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010268:	785b      	ldrb	r3, [r3, #1]
 801026a:	4618      	mov	r0, r3
 801026c:	f7fc ffa6 	bl	800d1bc <disk_status>
 8010270:	4603      	mov	r3, r0
 8010272:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8010276:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801027a:	f003 0301 	and.w	r3, r3, #1
 801027e:	2b00      	cmp	r3, #0
 8010280:	d10c      	bne.n	801029c <find_volume+0x98>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8010282:	79fb      	ldrb	r3, [r7, #7]
 8010284:	2b00      	cmp	r3, #0
 8010286:	d007      	beq.n	8010298 <find_volume+0x94>
 8010288:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801028c:	f003 0304 	and.w	r3, r3, #4
 8010290:	2b00      	cmp	r3, #0
 8010292:	d001      	beq.n	8010298 <find_volume+0x94>
				return FR_WRITE_PROTECTED;
 8010294:	230a      	movs	r3, #10
 8010296:	e33a      	b.n	801090e <find_volume+0x70a>
			}
			return FR_OK;				/* The file system object is valid */
 8010298:	2300      	movs	r3, #0
 801029a:	e338      	b.n	801090e <find_volume+0x70a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801029c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801029e:	2200      	movs	r2, #0
 80102a0:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80102a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80102a4:	b2da      	uxtb	r2, r3
 80102a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80102a8:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80102aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80102ac:	785b      	ldrb	r3, [r3, #1]
 80102ae:	4618      	mov	r0, r3
 80102b0:	f7fc ff9e 	bl	800d1f0 <disk_initialize>
 80102b4:	4603      	mov	r3, r0
 80102b6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80102ba:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80102be:	f003 0301 	and.w	r3, r3, #1
 80102c2:	2b00      	cmp	r3, #0
 80102c4:	d001      	beq.n	80102ca <find_volume+0xc6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80102c6:	2303      	movs	r3, #3
 80102c8:	e321      	b.n	801090e <find_volume+0x70a>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80102ca:	79fb      	ldrb	r3, [r7, #7]
 80102cc:	2b00      	cmp	r3, #0
 80102ce:	d007      	beq.n	80102e0 <find_volume+0xdc>
 80102d0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80102d4:	f003 0304 	and.w	r3, r3, #4
 80102d8:	2b00      	cmp	r3, #0
 80102da:	d001      	beq.n	80102e0 <find_volume+0xdc>
		return FR_WRITE_PROTECTED;
 80102dc:	230a      	movs	r3, #10
 80102de:	e316      	b.n	801090e <find_volume+0x70a>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80102e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80102e2:	7858      	ldrb	r0, [r3, #1]
 80102e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80102e6:	330c      	adds	r3, #12
 80102e8:	461a      	mov	r2, r3
 80102ea:	2102      	movs	r1, #2
 80102ec:	f7fc ffe6 	bl	800d2bc <disk_ioctl>
 80102f0:	4603      	mov	r3, r0
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	d001      	beq.n	80102fa <find_volume+0xf6>
 80102f6:	2301      	movs	r3, #1
 80102f8:	e309      	b.n	801090e <find_volume+0x70a>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80102fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80102fc:	899b      	ldrh	r3, [r3, #12]
 80102fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010302:	d80d      	bhi.n	8010320 <find_volume+0x11c>
 8010304:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010306:	899b      	ldrh	r3, [r3, #12]
 8010308:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801030c:	d308      	bcc.n	8010320 <find_volume+0x11c>
 801030e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010310:	899b      	ldrh	r3, [r3, #12]
 8010312:	461a      	mov	r2, r3
 8010314:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010316:	899b      	ldrh	r3, [r3, #12]
 8010318:	3b01      	subs	r3, #1
 801031a:	4013      	ands	r3, r2
 801031c:	2b00      	cmp	r3, #0
 801031e:	d001      	beq.n	8010324 <find_volume+0x120>
 8010320:	2301      	movs	r3, #1
 8010322:	e2f4      	b.n	801090e <find_volume+0x70a>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8010324:	2300      	movs	r3, #0
 8010326:	65bb      	str	r3, [r7, #88]	; 0x58
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8010328:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801032a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 801032c:	f7ff ff06 	bl	801013c <check_fs>
 8010330:	4603      	mov	r3, r0
 8010332:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8010336:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801033a:	2b02      	cmp	r3, #2
 801033c:	d14b      	bne.n	80103d6 <find_volume+0x1d2>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801033e:	2300      	movs	r3, #0
 8010340:	64bb      	str	r3, [r7, #72]	; 0x48
 8010342:	e01f      	b.n	8010384 <find_volume+0x180>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8010344:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010346:	f103 0240 	add.w	r2, r3, #64	; 0x40
 801034a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801034c:	011b      	lsls	r3, r3, #4
 801034e:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8010352:	4413      	add	r3, r2
 8010354:	63bb      	str	r3, [r7, #56]	; 0x38
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8010356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010358:	3304      	adds	r3, #4
 801035a:	781b      	ldrb	r3, [r3, #0]
 801035c:	2b00      	cmp	r3, #0
 801035e:	d006      	beq.n	801036e <find_volume+0x16a>
 8010360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010362:	3308      	adds	r3, #8
 8010364:	4618      	mov	r0, r3
 8010366:	f7fc ffdf 	bl	800d328 <ld_dword>
 801036a:	4602      	mov	r2, r0
 801036c:	e000      	b.n	8010370 <find_volume+0x16c>
 801036e:	2200      	movs	r2, #0
 8010370:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010372:	009b      	lsls	r3, r3, #2
 8010374:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8010378:	440b      	add	r3, r1
 801037a:	f843 2c50 	str.w	r2, [r3, #-80]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801037e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010380:	3301      	adds	r3, #1
 8010382:	64bb      	str	r3, [r7, #72]	; 0x48
 8010384:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010386:	2b03      	cmp	r3, #3
 8010388:	d9dc      	bls.n	8010344 <find_volume+0x140>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 801038a:	2300      	movs	r3, #0
 801038c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (i) i--;
 801038e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010390:	2b00      	cmp	r3, #0
 8010392:	d002      	beq.n	801039a <find_volume+0x196>
 8010394:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010396:	3b01      	subs	r3, #1
 8010398:	64bb      	str	r3, [r7, #72]	; 0x48
		do {							/* Find an FAT volume */
			bsect = br[i];
 801039a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801039c:	009b      	lsls	r3, r3, #2
 801039e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80103a2:	4413      	add	r3, r2
 80103a4:	f853 3c50 	ldr.w	r3, [r3, #-80]
 80103a8:	65bb      	str	r3, [r7, #88]	; 0x58
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80103aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80103ac:	2b00      	cmp	r3, #0
 80103ae:	d005      	beq.n	80103bc <find_volume+0x1b8>
 80103b0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80103b2:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80103b4:	f7ff fec2 	bl	801013c <check_fs>
 80103b8:	4603      	mov	r3, r0
 80103ba:	e000      	b.n	80103be <find_volume+0x1ba>
 80103bc:	2303      	movs	r3, #3
 80103be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80103c2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80103c6:	2b01      	cmp	r3, #1
 80103c8:	d905      	bls.n	80103d6 <find_volume+0x1d2>
 80103ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80103cc:	3301      	adds	r3, #1
 80103ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80103d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80103d2:	2b03      	cmp	r3, #3
 80103d4:	d9e1      	bls.n	801039a <find_volume+0x196>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80103d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80103da:	2b04      	cmp	r3, #4
 80103dc:	d101      	bne.n	80103e2 <find_volume+0x1de>
 80103de:	2301      	movs	r3, #1
 80103e0:	e295      	b.n	801090e <find_volume+0x70a>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80103e2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80103e6:	2b01      	cmp	r3, #1
 80103e8:	d901      	bls.n	80103ee <find_volume+0x1ea>
 80103ea:	230d      	movs	r3, #13
 80103ec:	e28f      	b.n	801090e <find_volume+0x70a>

	/* An FAT volume is found (bsect). Following code initializes the file system object */

#if _FS_EXFAT
	if (fmt == 1) {
 80103ee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80103f2:	2b01      	cmp	r3, #1
 80103f4:	f040 8101 	bne.w	80105fa <find_volume+0x3f6>
		QWORD maxlba;

		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 80103f8:	230b      	movs	r3, #11
 80103fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80103fc:	e002      	b.n	8010404 <find_volume+0x200>
 80103fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010400:	3301      	adds	r3, #1
 8010402:	64bb      	str	r3, [r7, #72]	; 0x48
 8010404:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010406:	2b3f      	cmp	r3, #63	; 0x3f
 8010408:	d806      	bhi.n	8010418 <find_volume+0x214>
 801040a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801040c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801040e:	4413      	add	r3, r2
 8010410:	3340      	adds	r3, #64	; 0x40
 8010412:	781b      	ldrb	r3, [r3, #0]
 8010414:	2b00      	cmp	r3, #0
 8010416:	d0f2      	beq.n	80103fe <find_volume+0x1fa>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 8010418:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801041a:	2b3f      	cmp	r3, #63	; 0x3f
 801041c:	d801      	bhi.n	8010422 <find_volume+0x21e>
 801041e:	230d      	movs	r3, #13
 8010420:	e275      	b.n	801090e <find_volume+0x70a>

		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Must be 1.0) */
 8010422:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010424:	3340      	adds	r3, #64	; 0x40
 8010426:	3368      	adds	r3, #104	; 0x68
 8010428:	4618      	mov	r0, r3
 801042a:	f7fc ff65 	bl	800d2f8 <ld_word>
 801042e:	4603      	mov	r3, r0
 8010430:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010434:	d001      	beq.n	801043a <find_volume+0x236>
 8010436:	230d      	movs	r3, #13
 8010438:	e269      	b.n	801090e <find_volume+0x70a>

		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 801043a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801043c:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 8010440:	461a      	mov	r2, r3
 8010442:	2301      	movs	r3, #1
 8010444:	4093      	lsls	r3, r2
 8010446:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010448:	8992      	ldrh	r2, [r2, #12]
 801044a:	4293      	cmp	r3, r2
 801044c:	d001      	beq.n	8010452 <find_volume+0x24e>
			return FR_NO_FILESYSTEM;
 801044e:	230d      	movs	r3, #13
 8010450:	e25d      	b.n	801090e <find_volume+0x70a>
		}

		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 8010452:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010454:	3340      	adds	r3, #64	; 0x40
 8010456:	3348      	adds	r3, #72	; 0x48
 8010458:	4618      	mov	r0, r3
 801045a:	f7fc ff88 	bl	800d36e <ld_qword>
 801045e:	460a      	mov	r2, r1
 8010460:	4601      	mov	r1, r0
 8010462:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010464:	469b      	mov	fp, r3
 8010466:	f04f 0c00 	mov.w	ip, #0
 801046a:	eb1b 0301 	adds.w	r3, fp, r1
 801046e:	eb4c 0402 	adc.w	r4, ip, r2
 8010472:	e9c7 3408 	strd	r3, r4, [r7, #32]
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 8010476:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 801047a:	2c01      	cmp	r4, #1
 801047c:	bf08      	it	eq
 801047e:	2b00      	cmpeq	r3, #0
 8010480:	d301      	bcc.n	8010486 <find_volume+0x282>
 8010482:	230d      	movs	r3, #13
 8010484:	e243      	b.n	801090e <find_volume+0x70a>

		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 8010486:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010488:	3340      	adds	r3, #64	; 0x40
 801048a:	3354      	adds	r3, #84	; 0x54
 801048c:	4618      	mov	r0, r3
 801048e:	f7fc ff4b 	bl	800d328 <ld_dword>
 8010492:	4602      	mov	r2, r0
 8010494:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010496:	629a      	str	r2, [r3, #40]	; 0x28

		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 8010498:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801049a:	f893 20ae 	ldrb.w	r2, [r3, #174]	; 0xae
 801049e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80104a0:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 80104a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80104a4:	789b      	ldrb	r3, [r3, #2]
 80104a6:	2b01      	cmp	r3, #1
 80104a8:	d001      	beq.n	80104ae <find_volume+0x2aa>
 80104aa:	230d      	movs	r3, #13
 80104ac:	e22f      	b.n	801090e <find_volume+0x70a>

		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 80104ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80104b0:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 80104b4:	461a      	mov	r2, r3
 80104b6:	2301      	movs	r3, #1
 80104b8:	4093      	lsls	r3, r2
 80104ba:	b29a      	uxth	r2, r3
 80104bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80104be:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 80104c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80104c2:	895b      	ldrh	r3, [r3, #10]
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	d101      	bne.n	80104cc <find_volume+0x2c8>
 80104c8:	230d      	movs	r3, #13
 80104ca:	e220      	b.n	801090e <find_volume+0x70a>

		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 80104cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80104ce:	3340      	adds	r3, #64	; 0x40
 80104d0:	335c      	adds	r3, #92	; 0x5c
 80104d2:	4618      	mov	r0, r3
 80104d4:	f7fc ff28 	bl	800d328 <ld_dword>
 80104d8:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 80104da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104dc:	4a03      	ldr	r2, [pc, #12]	; (80104ec <find_volume+0x2e8>)
 80104de:	4293      	cmp	r3, r2
 80104e0:	d906      	bls.n	80104f0 <find_volume+0x2ec>
 80104e2:	230d      	movs	r3, #13
 80104e4:	e213      	b.n	801090e <find_volume+0x70a>
 80104e6:	bf00      	nop
 80104e8:	2000021c 	.word	0x2000021c
 80104ec:	7ffffffd 	.word	0x7ffffffd
		fs->n_fatent = nclst + 2;
 80104f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104f2:	1c9a      	adds	r2, r3, #2
 80104f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80104f6:	625a      	str	r2, [r3, #36]	; 0x24

		/* Boundaries and Limits */
		fs->volbase = bsect;
 80104f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80104fa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80104fc:	62da      	str	r2, [r3, #44]	; 0x2c
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 80104fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010500:	3340      	adds	r3, #64	; 0x40
 8010502:	3358      	adds	r3, #88	; 0x58
 8010504:	4618      	mov	r0, r3
 8010506:	f7fc ff0f 	bl	800d328 <ld_dword>
 801050a:	4602      	mov	r2, r0
 801050c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801050e:	441a      	add	r2, r3
 8010510:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010512:	639a      	str	r2, [r3, #56]	; 0x38
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 8010514:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010516:	3340      	adds	r3, #64	; 0x40
 8010518:	3350      	adds	r3, #80	; 0x50
 801051a:	4618      	mov	r0, r3
 801051c:	f7fc ff04 	bl	800d328 <ld_dword>
 8010520:	4602      	mov	r2, r0
 8010522:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010524:	441a      	add	r2, r3
 8010526:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010528:	631a      	str	r2, [r3, #48]	; 0x30
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 801052a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801052c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801052e:	4619      	mov	r1, r3
 8010530:	f04f 0200 	mov.w	r2, #0
 8010534:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010536:	895b      	ldrh	r3, [r3, #10]
 8010538:	4618      	mov	r0, r3
 801053a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801053c:	fb03 f300 	mul.w	r3, r3, r0
 8010540:	469b      	mov	fp, r3
 8010542:	f04f 0c00 	mov.w	ip, #0
 8010546:	eb1b 0301 	adds.w	r3, fp, r1
 801054a:	eb4c 0402 	adc.w	r4, ip, r2
 801054e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8010552:	42a2      	cmp	r2, r4
 8010554:	bf08      	it	eq
 8010556:	4299      	cmpeq	r1, r3
 8010558:	d201      	bcs.n	801055e <find_volume+0x35a>
 801055a:	230d      	movs	r3, #13
 801055c:	e1d7      	b.n	801090e <find_volume+0x70a>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 801055e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010560:	3340      	adds	r3, #64	; 0x40
 8010562:	3360      	adds	r3, #96	; 0x60
 8010564:	4618      	mov	r0, r3
 8010566:	f7fc fedf 	bl	800d328 <ld_dword>
 801056a:	4602      	mov	r2, r0
 801056c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801056e:	635a      	str	r2, [r3, #52]	; 0x34

		/* Check if bitmap location is in assumption (at the first cluster) */
		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 8010570:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010572:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010574:	4619      	mov	r1, r3
 8010576:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8010578:	f7fd fb80 	bl	800dc7c <clust2sect>
 801057c:	4603      	mov	r3, r0
 801057e:	4619      	mov	r1, r3
 8010580:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8010582:	f7fd fadd 	bl	800db40 <move_window>
 8010586:	4603      	mov	r3, r0
 8010588:	2b00      	cmp	r3, #0
 801058a:	d001      	beq.n	8010590 <find_volume+0x38c>
 801058c:	2301      	movs	r3, #1
 801058e:	e1be      	b.n	801090e <find_volume+0x70a>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 8010590:	2300      	movs	r3, #0
 8010592:	64bb      	str	r3, [r7, #72]	; 0x48
 8010594:	e015      	b.n	80105c2 <find_volume+0x3be>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 8010596:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010598:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801059a:	4413      	add	r3, r2
 801059c:	3340      	adds	r3, #64	; 0x40
 801059e:	781b      	ldrb	r3, [r3, #0]
 80105a0:	2b81      	cmp	r3, #129	; 0x81
 80105a2:	d10b      	bne.n	80105bc <find_volume+0x3b8>
 80105a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80105a6:	f103 0240 	add.w	r2, r3, #64	; 0x40
 80105aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80105ac:	3314      	adds	r3, #20
 80105ae:	4413      	add	r3, r2
 80105b0:	4618      	mov	r0, r3
 80105b2:	f7fc feb9 	bl	800d328 <ld_dword>
 80105b6:	4603      	mov	r3, r0
 80105b8:	2b02      	cmp	r3, #2
 80105ba:	d009      	beq.n	80105d0 <find_volume+0x3cc>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 80105bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80105be:	3320      	adds	r3, #32
 80105c0:	64bb      	str	r3, [r7, #72]	; 0x48
 80105c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80105c4:	899b      	ldrh	r3, [r3, #12]
 80105c6:	461a      	mov	r2, r3
 80105c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80105ca:	4293      	cmp	r3, r2
 80105cc:	d3e3      	bcc.n	8010596 <find_volume+0x392>
 80105ce:	e000      	b.n	80105d2 <find_volume+0x3ce>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 80105d0:	bf00      	nop
		}
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
 80105d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80105d4:	899b      	ldrh	r3, [r3, #12]
 80105d6:	461a      	mov	r2, r3
 80105d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80105da:	4293      	cmp	r3, r2
 80105dc:	d101      	bne.n	80105e2 <find_volume+0x3de>
 80105de:	230d      	movs	r3, #13
 80105e0:	e195      	b.n	801090e <find_volume+0x70a>
#if !_FS_READONLY
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80105e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80105e4:	f04f 32ff 	mov.w	r2, #4294967295
 80105e8:	621a      	str	r2, [r3, #32]
 80105ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80105ec:	6a1a      	ldr	r2, [r3, #32]
 80105ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80105f0:	61da      	str	r2, [r3, #28]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
 80105f2:	2304      	movs	r3, #4
 80105f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80105f8:	e177      	b.n	80108ea <find_volume+0x6e6>
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80105fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80105fc:	3340      	adds	r3, #64	; 0x40
 80105fe:	330b      	adds	r3, #11
 8010600:	4618      	mov	r0, r3
 8010602:	f7fc fe79 	bl	800d2f8 <ld_word>
 8010606:	4603      	mov	r3, r0
 8010608:	461a      	mov	r2, r3
 801060a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801060c:	899b      	ldrh	r3, [r3, #12]
 801060e:	429a      	cmp	r2, r3
 8010610:	d001      	beq.n	8010616 <find_volume+0x412>
 8010612:	230d      	movs	r3, #13
 8010614:	e17b      	b.n	801090e <find_volume+0x70a>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8010616:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010618:	3340      	adds	r3, #64	; 0x40
 801061a:	3316      	adds	r3, #22
 801061c:	4618      	mov	r0, r3
 801061e:	f7fc fe6b 	bl	800d2f8 <ld_word>
 8010622:	4603      	mov	r3, r0
 8010624:	657b      	str	r3, [r7, #84]	; 0x54
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8010626:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010628:	2b00      	cmp	r3, #0
 801062a:	d106      	bne.n	801063a <find_volume+0x436>
 801062c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801062e:	3340      	adds	r3, #64	; 0x40
 8010630:	3324      	adds	r3, #36	; 0x24
 8010632:	4618      	mov	r0, r3
 8010634:	f7fc fe78 	bl	800d328 <ld_dword>
 8010638:	6578      	str	r0, [r7, #84]	; 0x54
		fs->fsize = fasize;
 801063a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801063c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801063e:	629a      	str	r2, [r3, #40]	; 0x28

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8010640:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010642:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8010646:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010648:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 801064a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801064c:	789b      	ldrb	r3, [r3, #2]
 801064e:	2b01      	cmp	r3, #1
 8010650:	d005      	beq.n	801065e <find_volume+0x45a>
 8010652:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010654:	789b      	ldrb	r3, [r3, #2]
 8010656:	2b02      	cmp	r3, #2
 8010658:	d001      	beq.n	801065e <find_volume+0x45a>
 801065a:	230d      	movs	r3, #13
 801065c:	e157      	b.n	801090e <find_volume+0x70a>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 801065e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010660:	789b      	ldrb	r3, [r3, #2]
 8010662:	461a      	mov	r2, r3
 8010664:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010666:	fb02 f303 	mul.w	r3, r2, r3
 801066a:	657b      	str	r3, [r7, #84]	; 0x54

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801066c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801066e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8010672:	b29a      	uxth	r2, r3
 8010674:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010676:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8010678:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801067a:	895b      	ldrh	r3, [r3, #10]
 801067c:	2b00      	cmp	r3, #0
 801067e:	d008      	beq.n	8010692 <find_volume+0x48e>
 8010680:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010682:	895b      	ldrh	r3, [r3, #10]
 8010684:	461a      	mov	r2, r3
 8010686:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010688:	895b      	ldrh	r3, [r3, #10]
 801068a:	3b01      	subs	r3, #1
 801068c:	4013      	ands	r3, r2
 801068e:	2b00      	cmp	r3, #0
 8010690:	d001      	beq.n	8010696 <find_volume+0x492>
 8010692:	230d      	movs	r3, #13
 8010694:	e13b      	b.n	801090e <find_volume+0x70a>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8010696:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010698:	3340      	adds	r3, #64	; 0x40
 801069a:	3311      	adds	r3, #17
 801069c:	4618      	mov	r0, r3
 801069e:	f7fc fe2b 	bl	800d2f8 <ld_word>
 80106a2:	4603      	mov	r3, r0
 80106a4:	461a      	mov	r2, r3
 80106a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80106a8:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80106aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80106ac:	891b      	ldrh	r3, [r3, #8]
 80106ae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80106b0:	8992      	ldrh	r2, [r2, #12]
 80106b2:	0952      	lsrs	r2, r2, #5
 80106b4:	b292      	uxth	r2, r2
 80106b6:	fbb3 f1f2 	udiv	r1, r3, r2
 80106ba:	fb02 f201 	mul.w	r2, r2, r1
 80106be:	1a9b      	subs	r3, r3, r2
 80106c0:	b29b      	uxth	r3, r3
 80106c2:	2b00      	cmp	r3, #0
 80106c4:	d001      	beq.n	80106ca <find_volume+0x4c6>
 80106c6:	230d      	movs	r3, #13
 80106c8:	e121      	b.n	801090e <find_volume+0x70a>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80106ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80106cc:	3340      	adds	r3, #64	; 0x40
 80106ce:	3313      	adds	r3, #19
 80106d0:	4618      	mov	r0, r3
 80106d2:	f7fc fe11 	bl	800d2f8 <ld_word>
 80106d6:	4603      	mov	r3, r0
 80106d8:	653b      	str	r3, [r7, #80]	; 0x50
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80106da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80106dc:	2b00      	cmp	r3, #0
 80106de:	d106      	bne.n	80106ee <find_volume+0x4ea>
 80106e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80106e2:	3340      	adds	r3, #64	; 0x40
 80106e4:	3320      	adds	r3, #32
 80106e6:	4618      	mov	r0, r3
 80106e8:	f7fc fe1e 	bl	800d328 <ld_dword>
 80106ec:	6538      	str	r0, [r7, #80]	; 0x50

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80106ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80106f0:	3340      	adds	r3, #64	; 0x40
 80106f2:	330e      	adds	r3, #14
 80106f4:	4618      	mov	r0, r3
 80106f6:	f7fc fdff 	bl	800d2f8 <ld_word>
 80106fa:	4603      	mov	r3, r0
 80106fc:	86fb      	strh	r3, [r7, #54]	; 0x36
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80106fe:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8010700:	2b00      	cmp	r3, #0
 8010702:	d101      	bne.n	8010708 <find_volume+0x504>
 8010704:	230d      	movs	r3, #13
 8010706:	e102      	b.n	801090e <find_volume+0x70a>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8010708:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801070a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801070c:	4413      	add	r3, r2
 801070e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010710:	8911      	ldrh	r1, [r2, #8]
 8010712:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010714:	8992      	ldrh	r2, [r2, #12]
 8010716:	0952      	lsrs	r2, r2, #5
 8010718:	b292      	uxth	r2, r2
 801071a:	fbb1 f2f2 	udiv	r2, r1, r2
 801071e:	b292      	uxth	r2, r2
 8010720:	4413      	add	r3, r2
 8010722:	633b      	str	r3, [r7, #48]	; 0x30
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8010724:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010728:	429a      	cmp	r2, r3
 801072a:	d201      	bcs.n	8010730 <find_volume+0x52c>
 801072c:	230d      	movs	r3, #13
 801072e:	e0ee      	b.n	801090e <find_volume+0x70a>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8010730:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010734:	1ad3      	subs	r3, r2, r3
 8010736:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010738:	8952      	ldrh	r2, [r2, #10]
 801073a:	fbb3 f3f2 	udiv	r3, r3, r2
 801073e:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8010740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010742:	2b00      	cmp	r3, #0
 8010744:	d101      	bne.n	801074a <find_volume+0x546>
 8010746:	230d      	movs	r3, #13
 8010748:	e0e1      	b.n	801090e <find_volume+0x70a>
		fmt = FS_FAT32;
 801074a:	2303      	movs	r3, #3
 801074c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8010750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010752:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8010756:	4293      	cmp	r3, r2
 8010758:	d802      	bhi.n	8010760 <find_volume+0x55c>
 801075a:	2302      	movs	r3, #2
 801075c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8010760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010762:	f640 72f5 	movw	r2, #4085	; 0xff5
 8010766:	4293      	cmp	r3, r2
 8010768:	d802      	bhi.n	8010770 <find_volume+0x56c>
 801076a:	2301      	movs	r3, #1
 801076c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8010770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010772:	1c9a      	adds	r2, r3, #2
 8010774:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010776:	625a      	str	r2, [r3, #36]	; 0x24
		fs->volbase = bsect;							/* Volume start sector */
 8010778:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801077a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801077c:	62da      	str	r2, [r3, #44]	; 0x2c
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801077e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8010780:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010782:	441a      	add	r2, r3
 8010784:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010786:	631a      	str	r2, [r3, #48]	; 0x30
		fs->database = bsect + sysect;					/* Data start sector */
 8010788:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801078a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801078c:	441a      	add	r2, r3
 801078e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010790:	639a      	str	r2, [r3, #56]	; 0x38
		if (fmt == FS_FAT32) {
 8010792:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010796:	2b03      	cmp	r3, #3
 8010798:	d11e      	bne.n	80107d8 <find_volume+0x5d4>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 801079a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801079c:	3340      	adds	r3, #64	; 0x40
 801079e:	332a      	adds	r3, #42	; 0x2a
 80107a0:	4618      	mov	r0, r3
 80107a2:	f7fc fda9 	bl	800d2f8 <ld_word>
 80107a6:	4603      	mov	r3, r0
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	d001      	beq.n	80107b0 <find_volume+0x5ac>
 80107ac:	230d      	movs	r3, #13
 80107ae:	e0ae      	b.n	801090e <find_volume+0x70a>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80107b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80107b2:	891b      	ldrh	r3, [r3, #8]
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	d001      	beq.n	80107bc <find_volume+0x5b8>
 80107b8:	230d      	movs	r3, #13
 80107ba:	e0a8      	b.n	801090e <find_volume+0x70a>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80107bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80107be:	3340      	adds	r3, #64	; 0x40
 80107c0:	332c      	adds	r3, #44	; 0x2c
 80107c2:	4618      	mov	r0, r3
 80107c4:	f7fc fdb0 	bl	800d328 <ld_dword>
 80107c8:	4602      	mov	r2, r0
 80107ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80107cc:	635a      	str	r2, [r3, #52]	; 0x34
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80107ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80107d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107d2:	009b      	lsls	r3, r3, #2
 80107d4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80107d6:	e01f      	b.n	8010818 <find_volume+0x614>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80107d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80107da:	891b      	ldrh	r3, [r3, #8]
 80107dc:	2b00      	cmp	r3, #0
 80107de:	d101      	bne.n	80107e4 <find_volume+0x5e0>
 80107e0:	230d      	movs	r3, #13
 80107e2:	e094      	b.n	801090e <find_volume+0x70a>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80107e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80107e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80107e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80107ea:	441a      	add	r2, r3
 80107ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80107ee:	635a      	str	r2, [r3, #52]	; 0x34
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80107f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80107f4:	2b02      	cmp	r3, #2
 80107f6:	d103      	bne.n	8010800 <find_volume+0x5fc>
 80107f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80107fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107fc:	005b      	lsls	r3, r3, #1
 80107fe:	e00a      	b.n	8010816 <find_volume+0x612>
 8010800:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010802:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010804:	4613      	mov	r3, r2
 8010806:	005b      	lsls	r3, r3, #1
 8010808:	4413      	add	r3, r2
 801080a:	085a      	lsrs	r2, r3, #1
 801080c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801080e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010810:	f003 0301 	and.w	r3, r3, #1
 8010814:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8010816:	64fb      	str	r3, [r7, #76]	; 0x4c
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8010818:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801081a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801081c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801081e:	899b      	ldrh	r3, [r3, #12]
 8010820:	4619      	mov	r1, r3
 8010822:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010824:	440b      	add	r3, r1
 8010826:	3b01      	subs	r3, #1
 8010828:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801082a:	8989      	ldrh	r1, [r1, #12]
 801082c:	fbb3 f3f1 	udiv	r3, r3, r1
 8010830:	429a      	cmp	r2, r3
 8010832:	d201      	bcs.n	8010838 <find_volume+0x634>
 8010834:	230d      	movs	r3, #13
 8010836:	e06a      	b.n	801090e <find_volume+0x70a>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8010838:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801083a:	f04f 32ff 	mov.w	r2, #4294967295
 801083e:	621a      	str	r2, [r3, #32]
 8010840:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010842:	6a1a      	ldr	r2, [r3, #32]
 8010844:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010846:	61da      	str	r2, [r3, #28]
		fs->fsi_flag = 0x80;
 8010848:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801084a:	2280      	movs	r2, #128	; 0x80
 801084c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 801084e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010852:	2b03      	cmp	r3, #3
 8010854:	d149      	bne.n	80108ea <find_volume+0x6e6>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8010856:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010858:	3340      	adds	r3, #64	; 0x40
 801085a:	3330      	adds	r3, #48	; 0x30
 801085c:	4618      	mov	r0, r3
 801085e:	f7fc fd4b 	bl	800d2f8 <ld_word>
 8010862:	4603      	mov	r3, r0
 8010864:	2b01      	cmp	r3, #1
 8010866:	d140      	bne.n	80108ea <find_volume+0x6e6>
			&& move_window(fs, bsect + 1) == FR_OK)
 8010868:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801086a:	3301      	adds	r3, #1
 801086c:	4619      	mov	r1, r3
 801086e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8010870:	f7fd f966 	bl	800db40 <move_window>
 8010874:	4603      	mov	r3, r0
 8010876:	2b00      	cmp	r3, #0
 8010878:	d137      	bne.n	80108ea <find_volume+0x6e6>
		{
			fs->fsi_flag = 0;
 801087a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801087c:	2200      	movs	r2, #0
 801087e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8010880:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010882:	3340      	adds	r3, #64	; 0x40
 8010884:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010888:	4618      	mov	r0, r3
 801088a:	f7fc fd35 	bl	800d2f8 <ld_word>
 801088e:	4603      	mov	r3, r0
 8010890:	461a      	mov	r2, r3
 8010892:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8010896:	429a      	cmp	r2, r3
 8010898:	d127      	bne.n	80108ea <find_volume+0x6e6>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 801089a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801089c:	3340      	adds	r3, #64	; 0x40
 801089e:	4618      	mov	r0, r3
 80108a0:	f7fc fd42 	bl	800d328 <ld_dword>
 80108a4:	4602      	mov	r2, r0
 80108a6:	4b1c      	ldr	r3, [pc, #112]	; (8010918 <find_volume+0x714>)
 80108a8:	429a      	cmp	r2, r3
 80108aa:	d11e      	bne.n	80108ea <find_volume+0x6e6>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80108ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80108ae:	3340      	adds	r3, #64	; 0x40
 80108b0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80108b4:	4618      	mov	r0, r3
 80108b6:	f7fc fd37 	bl	800d328 <ld_dword>
 80108ba:	4602      	mov	r2, r0
 80108bc:	4b17      	ldr	r3, [pc, #92]	; (801091c <find_volume+0x718>)
 80108be:	429a      	cmp	r2, r3
 80108c0:	d113      	bne.n	80108ea <find_volume+0x6e6>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80108c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80108c4:	3340      	adds	r3, #64	; 0x40
 80108c6:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80108ca:	4618      	mov	r0, r3
 80108cc:	f7fc fd2c 	bl	800d328 <ld_dword>
 80108d0:	4602      	mov	r2, r0
 80108d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80108d4:	621a      	str	r2, [r3, #32]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80108d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80108d8:	3340      	adds	r3, #64	; 0x40
 80108da:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80108de:	4618      	mov	r0, r3
 80108e0:	f7fc fd22 	bl	800d328 <ld_dword>
 80108e4:	4602      	mov	r2, r0
 80108e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80108e8:	61da      	str	r2, [r3, #28]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80108ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80108ec:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 80108f0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80108f2:	4b0b      	ldr	r3, [pc, #44]	; (8010920 <find_volume+0x71c>)
 80108f4:	881b      	ldrh	r3, [r3, #0]
 80108f6:	3301      	adds	r3, #1
 80108f8:	b29a      	uxth	r2, r3
 80108fa:	4b09      	ldr	r3, [pc, #36]	; (8010920 <find_volume+0x71c>)
 80108fc:	801a      	strh	r2, [r3, #0]
 80108fe:	4b08      	ldr	r3, [pc, #32]	; (8010920 <find_volume+0x71c>)
 8010900:	881a      	ldrh	r2, [r3, #0]
 8010902:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010904:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8010906:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8010908:	f7fd f8b2 	bl	800da70 <clear_lock>
#endif
	return FR_OK;
 801090c:	2300      	movs	r3, #0
}
 801090e:	4618      	mov	r0, r3
 8010910:	3760      	adds	r7, #96	; 0x60
 8010912:	46bd      	mov	sp, r7
 8010914:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8010918:	41615252 	.word	0x41615252
 801091c:	61417272 	.word	0x61417272
 8010920:	20000220 	.word	0x20000220

08010924 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8010924:	b580      	push	{r7, lr}
 8010926:	b084      	sub	sp, #16
 8010928:	af00      	add	r7, sp, #0
 801092a:	6078      	str	r0, [r7, #4]
 801092c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 801092e:	2309      	movs	r3, #9
 8010930:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	2b00      	cmp	r3, #0
 8010936:	d02e      	beq.n	8010996 <validate+0x72>
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	681b      	ldr	r3, [r3, #0]
 801093c:	2b00      	cmp	r3, #0
 801093e:	d02a      	beq.n	8010996 <validate+0x72>
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	681b      	ldr	r3, [r3, #0]
 8010944:	781b      	ldrb	r3, [r3, #0]
 8010946:	2b00      	cmp	r3, #0
 8010948:	d025      	beq.n	8010996 <validate+0x72>
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	889a      	ldrh	r2, [r3, #4]
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	681b      	ldr	r3, [r3, #0]
 8010952:	88db      	ldrh	r3, [r3, #6]
 8010954:	429a      	cmp	r2, r3
 8010956:	d11e      	bne.n	8010996 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	681b      	ldr	r3, [r3, #0]
 801095c:	4618      	mov	r0, r3
 801095e:	f7fc ff0e 	bl	800d77e <lock_fs>
 8010962:	4603      	mov	r3, r0
 8010964:	2b00      	cmp	r3, #0
 8010966:	d014      	beq.n	8010992 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	681b      	ldr	r3, [r3, #0]
 801096c:	785b      	ldrb	r3, [r3, #1]
 801096e:	4618      	mov	r0, r3
 8010970:	f7fc fc24 	bl	800d1bc <disk_status>
 8010974:	4603      	mov	r3, r0
 8010976:	f003 0301 	and.w	r3, r3, #1
 801097a:	2b00      	cmp	r3, #0
 801097c:	d102      	bne.n	8010984 <validate+0x60>
				res = FR_OK;
 801097e:	2300      	movs	r3, #0
 8010980:	73fb      	strb	r3, [r7, #15]
 8010982:	e008      	b.n	8010996 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	681b      	ldr	r3, [r3, #0]
 8010988:	2100      	movs	r1, #0
 801098a:	4618      	mov	r0, r3
 801098c:	f7fc ff0d 	bl	800d7aa <unlock_fs>
 8010990:	e001      	b.n	8010996 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 8010992:	230f      	movs	r3, #15
 8010994:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8010996:	7bfb      	ldrb	r3, [r7, #15]
 8010998:	2b00      	cmp	r3, #0
 801099a:	d102      	bne.n	80109a2 <validate+0x7e>
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	681b      	ldr	r3, [r3, #0]
 80109a0:	e000      	b.n	80109a4 <validate+0x80>
 80109a2:	2300      	movs	r3, #0
 80109a4:	683a      	ldr	r2, [r7, #0]
 80109a6:	6013      	str	r3, [r2, #0]
	return res;
 80109a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80109aa:	4618      	mov	r0, r3
 80109ac:	3710      	adds	r7, #16
 80109ae:	46bd      	mov	sp, r7
 80109b0:	bd80      	pop	{r7, pc}
	...

080109b4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80109b4:	b580      	push	{r7, lr}
 80109b6:	b088      	sub	sp, #32
 80109b8:	af00      	add	r7, sp, #0
 80109ba:	60f8      	str	r0, [r7, #12]
 80109bc:	60b9      	str	r1, [r7, #8]
 80109be:	4613      	mov	r3, r2
 80109c0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80109c2:	68bb      	ldr	r3, [r7, #8]
 80109c4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80109c6:	f107 0310 	add.w	r3, r7, #16
 80109ca:	4618      	mov	r0, r3
 80109cc:	f7ff fb71 	bl	80100b2 <get_ldnumber>
 80109d0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80109d2:	69fb      	ldr	r3, [r7, #28]
 80109d4:	2b00      	cmp	r3, #0
 80109d6:	da01      	bge.n	80109dc <f_mount+0x28>
 80109d8:	230b      	movs	r3, #11
 80109da:	e048      	b.n	8010a6e <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80109dc:	4a26      	ldr	r2, [pc, #152]	; (8010a78 <f_mount+0xc4>)
 80109de:	69fb      	ldr	r3, [r7, #28]
 80109e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80109e4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80109e6:	69bb      	ldr	r3, [r7, #24]
 80109e8:	2b00      	cmp	r3, #0
 80109ea:	d00f      	beq.n	8010a0c <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80109ec:	69b8      	ldr	r0, [r7, #24]
 80109ee:	f7fd f83f 	bl	800da70 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 80109f2:	69bb      	ldr	r3, [r7, #24]
 80109f4:	699b      	ldr	r3, [r3, #24]
 80109f6:	4618      	mov	r0, r3
 80109f8:	f000 ffd5 	bl	80119a6 <ff_del_syncobj>
 80109fc:	4603      	mov	r3, r0
 80109fe:	2b00      	cmp	r3, #0
 8010a00:	d101      	bne.n	8010a06 <f_mount+0x52>
 8010a02:	2302      	movs	r3, #2
 8010a04:	e033      	b.n	8010a6e <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8010a06:	69bb      	ldr	r3, [r7, #24]
 8010a08:	2200      	movs	r2, #0
 8010a0a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8010a0c:	68fb      	ldr	r3, [r7, #12]
 8010a0e:	2b00      	cmp	r3, #0
 8010a10:	d00f      	beq.n	8010a32 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 8010a12:	68fb      	ldr	r3, [r7, #12]
 8010a14:	2200      	movs	r2, #0
 8010a16:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8010a18:	69fb      	ldr	r3, [r7, #28]
 8010a1a:	b2da      	uxtb	r2, r3
 8010a1c:	68fb      	ldr	r3, [r7, #12]
 8010a1e:	3318      	adds	r3, #24
 8010a20:	4619      	mov	r1, r3
 8010a22:	4610      	mov	r0, r2
 8010a24:	f000 ffa4 	bl	8011970 <ff_cre_syncobj>
 8010a28:	4603      	mov	r3, r0
 8010a2a:	2b00      	cmp	r3, #0
 8010a2c:	d101      	bne.n	8010a32 <f_mount+0x7e>
 8010a2e:	2302      	movs	r3, #2
 8010a30:	e01d      	b.n	8010a6e <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8010a32:	68fa      	ldr	r2, [r7, #12]
 8010a34:	4910      	ldr	r1, [pc, #64]	; (8010a78 <f_mount+0xc4>)
 8010a36:	69fb      	ldr	r3, [r7, #28]
 8010a38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8010a3c:	68fb      	ldr	r3, [r7, #12]
 8010a3e:	2b00      	cmp	r3, #0
 8010a40:	d002      	beq.n	8010a48 <f_mount+0x94>
 8010a42:	79fb      	ldrb	r3, [r7, #7]
 8010a44:	2b01      	cmp	r3, #1
 8010a46:	d001      	beq.n	8010a4c <f_mount+0x98>
 8010a48:	2300      	movs	r3, #0
 8010a4a:	e010      	b.n	8010a6e <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8010a4c:	f107 010c 	add.w	r1, r7, #12
 8010a50:	f107 0308 	add.w	r3, r7, #8
 8010a54:	2200      	movs	r2, #0
 8010a56:	4618      	mov	r0, r3
 8010a58:	f7ff fbd4 	bl	8010204 <find_volume>
 8010a5c:	4603      	mov	r3, r0
 8010a5e:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8010a60:	68fb      	ldr	r3, [r7, #12]
 8010a62:	7dfa      	ldrb	r2, [r7, #23]
 8010a64:	4611      	mov	r1, r2
 8010a66:	4618      	mov	r0, r3
 8010a68:	f7fc fe9f 	bl	800d7aa <unlock_fs>
 8010a6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8010a6e:	4618      	mov	r0, r3
 8010a70:	3720      	adds	r7, #32
 8010a72:	46bd      	mov	sp, r7
 8010a74:	bd80      	pop	{r7, pc}
 8010a76:	bf00      	nop
 8010a78:	2000021c 	.word	0x2000021c

08010a7c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8010a7c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8010a80:	b0a4      	sub	sp, #144	; 0x90
 8010a82:	af00      	add	r7, sp, #0
 8010a84:	60f8      	str	r0, [r7, #12]
 8010a86:	60b9      	str	r1, [r7, #8]
 8010a88:	4613      	mov	r3, r2
 8010a8a:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8010a8c:	68fb      	ldr	r3, [r7, #12]
 8010a8e:	2b00      	cmp	r3, #0
 8010a90:	d101      	bne.n	8010a96 <f_open+0x1a>
 8010a92:	2309      	movs	r3, #9
 8010a94:	e2c9      	b.n	801102a <f_open+0x5ae>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8010a96:	79fb      	ldrb	r3, [r7, #7]
 8010a98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010a9c:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8010a9e:	79fa      	ldrb	r2, [r7, #7]
 8010aa0:	f107 0114 	add.w	r1, r7, #20
 8010aa4:	f107 0308 	add.w	r3, r7, #8
 8010aa8:	4618      	mov	r0, r3
 8010aaa:	f7ff fbab 	bl	8010204 <find_volume>
 8010aae:	4603      	mov	r3, r0
 8010ab0:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	if (res == FR_OK) {
 8010ab4:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8010ab8:	2b00      	cmp	r3, #0
 8010aba:	f040 82a6 	bne.w	801100a <f_open+0x58e>
		dj.obj.fs = fs;
 8010abe:	697b      	ldr	r3, [r7, #20]
 8010ac0:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
 8010ac2:	f44f 608c 	mov.w	r0, #1120	; 0x460
 8010ac6:	f000 ff9a 	bl	80119fe <ff_memalloc>
 8010aca:	67f8      	str	r0, [r7, #124]	; 0x7c
 8010acc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	d106      	bne.n	8010ae0 <f_open+0x64>
 8010ad2:	697b      	ldr	r3, [r7, #20]
 8010ad4:	2111      	movs	r1, #17
 8010ad6:	4618      	mov	r0, r3
 8010ad8:	f7fc fe67 	bl	800d7aa <unlock_fs>
 8010adc:	2311      	movs	r3, #17
 8010ade:	e2a4      	b.n	801102a <f_open+0x5ae>
 8010ae0:	697b      	ldr	r3, [r7, #20]
 8010ae2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8010ae4:	611a      	str	r2, [r3, #16]
 8010ae6:	697b      	ldr	r3, [r7, #20]
 8010ae8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8010aea:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8010aee:	615a      	str	r2, [r3, #20]
		res = follow_path(&dj, path);	/* Follow the file path */
 8010af0:	68ba      	ldr	r2, [r7, #8]
 8010af2:	f107 0318 	add.w	r3, r7, #24
 8010af6:	4611      	mov	r1, r2
 8010af8:	4618      	mov	r0, r3
 8010afa:	f7ff fa2d 	bl	800ff58 <follow_path>
 8010afe:	4603      	mov	r3, r0
 8010b00:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8010b04:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8010b08:	2b00      	cmp	r3, #0
 8010b0a:	d11a      	bne.n	8010b42 <f_open+0xc6>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8010b0c:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8010b10:	b25b      	sxtb	r3, r3
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	da03      	bge.n	8010b1e <f_open+0xa2>
				res = FR_INVALID_NAME;
 8010b16:	2306      	movs	r3, #6
 8010b18:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8010b1c:	e011      	b.n	8010b42 <f_open+0xc6>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8010b1e:	79fb      	ldrb	r3, [r7, #7]
 8010b20:	f023 0301 	bic.w	r3, r3, #1
 8010b24:	2b00      	cmp	r3, #0
 8010b26:	bf14      	ite	ne
 8010b28:	2301      	movne	r3, #1
 8010b2a:	2300      	moveq	r3, #0
 8010b2c:	b2db      	uxtb	r3, r3
 8010b2e:	461a      	mov	r2, r3
 8010b30:	f107 0318 	add.w	r3, r7, #24
 8010b34:	4611      	mov	r1, r2
 8010b36:	4618      	mov	r0, r3
 8010b38:	f7fc fe52 	bl	800d7e0 <chk_lock>
 8010b3c:	4603      	mov	r3, r0
 8010b3e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8010b42:	79fb      	ldrb	r3, [r7, #7]
 8010b44:	f003 031c 	and.w	r3, r3, #28
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	f000 8109 	beq.w	8010d60 <f_open+0x2e4>
			if (res != FR_OK) {					/* No file, create new */
 8010b4e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8010b52:	2b00      	cmp	r3, #0
 8010b54:	d017      	beq.n	8010b86 <f_open+0x10a>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8010b56:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8010b5a:	2b04      	cmp	r3, #4
 8010b5c:	d10e      	bne.n	8010b7c <f_open+0x100>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8010b5e:	f7fc fe9b 	bl	800d898 <enq_lock>
 8010b62:	4603      	mov	r3, r0
 8010b64:	2b00      	cmp	r3, #0
 8010b66:	d006      	beq.n	8010b76 <f_open+0xfa>
 8010b68:	f107 0318 	add.w	r3, r7, #24
 8010b6c:	4618      	mov	r0, r3
 8010b6e:	f7fe fe8b 	bl	800f888 <dir_register>
 8010b72:	4603      	mov	r3, r0
 8010b74:	e000      	b.n	8010b78 <f_open+0xfc>
 8010b76:	2312      	movs	r3, #18
 8010b78:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8010b7c:	79fb      	ldrb	r3, [r7, #7]
 8010b7e:	f043 0308 	orr.w	r3, r3, #8
 8010b82:	71fb      	strb	r3, [r7, #7]
 8010b84:	e010      	b.n	8010ba8 <f_open+0x12c>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8010b86:	7fbb      	ldrb	r3, [r7, #30]
 8010b88:	f003 0311 	and.w	r3, r3, #17
 8010b8c:	2b00      	cmp	r3, #0
 8010b8e:	d003      	beq.n	8010b98 <f_open+0x11c>
					res = FR_DENIED;
 8010b90:	2307      	movs	r3, #7
 8010b92:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8010b96:	e007      	b.n	8010ba8 <f_open+0x12c>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8010b98:	79fb      	ldrb	r3, [r7, #7]
 8010b9a:	f003 0304 	and.w	r3, r3, #4
 8010b9e:	2b00      	cmp	r3, #0
 8010ba0:	d002      	beq.n	8010ba8 <f_open+0x12c>
 8010ba2:	2308      	movs	r3, #8
 8010ba4:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8010ba8:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8010bac:	2b00      	cmp	r3, #0
 8010bae:	f040 80f1 	bne.w	8010d94 <f_open+0x318>
 8010bb2:	79fb      	ldrb	r3, [r7, #7]
 8010bb4:	f003 0308 	and.w	r3, r3, #8
 8010bb8:	2b00      	cmp	r3, #0
 8010bba:	f000 80eb 	beq.w	8010d94 <f_open+0x318>
				dw = GET_FATTIME();
 8010bbe:	f7f9 fafd 	bl	800a1bc <get_fattime>
 8010bc2:	67b8      	str	r0, [r7, #120]	; 0x78
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
 8010bc4:	697b      	ldr	r3, [r7, #20]
 8010bc6:	781b      	ldrb	r3, [r3, #0]
 8010bc8:	2b04      	cmp	r3, #4
 8010bca:	f040 8082 	bne.w	8010cd2 <f_open+0x256>
					/* Get current allocation info */
					fp->obj.fs = fs;
 8010bce:	697a      	ldr	r2, [r7, #20]
 8010bd0:	68fb      	ldr	r3, [r7, #12]
 8010bd2:	601a      	str	r2, [r3, #0]
					fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);
 8010bd4:	697b      	ldr	r3, [r7, #20]
 8010bd6:	695b      	ldr	r3, [r3, #20]
 8010bd8:	3334      	adds	r3, #52	; 0x34
 8010bda:	4618      	mov	r0, r3
 8010bdc:	f7fc fba4 	bl	800d328 <ld_dword>
 8010be0:	4602      	mov	r2, r0
 8010be2:	68fb      	ldr	r3, [r7, #12]
 8010be4:	609a      	str	r2, [r3, #8]
					fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 8010be6:	697b      	ldr	r3, [r7, #20]
 8010be8:	695b      	ldr	r3, [r3, #20]
 8010bea:	3338      	adds	r3, #56	; 0x38
 8010bec:	4618      	mov	r0, r3
 8010bee:	f7fc fbbe 	bl	800d36e <ld_qword>
 8010bf2:	4603      	mov	r3, r0
 8010bf4:	460c      	mov	r4, r1
 8010bf6:	68fa      	ldr	r2, [r7, #12]
 8010bf8:	e9c2 3404 	strd	r3, r4, [r2, #16]
					fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 8010bfc:	697b      	ldr	r3, [r7, #20]
 8010bfe:	695b      	ldr	r3, [r3, #20]
 8010c00:	3321      	adds	r3, #33	; 0x21
 8010c02:	781b      	ldrb	r3, [r3, #0]
 8010c04:	f003 0302 	and.w	r3, r3, #2
 8010c08:	b2da      	uxtb	r2, r3
 8010c0a:	68fb      	ldr	r3, [r7, #12]
 8010c0c:	71da      	strb	r2, [r3, #7]
					fp->obj.n_frag = 0;
 8010c0e:	68fb      	ldr	r3, [r7, #12]
 8010c10:	2200      	movs	r2, #0
 8010c12:	61da      	str	r2, [r3, #28]
					/* Initialize directory entry block */
					st_dword(fs->dirbuf + XDIR_CrtTime, dw);	/* Set created time */
 8010c14:	697b      	ldr	r3, [r7, #20]
 8010c16:	695b      	ldr	r3, [r3, #20]
 8010c18:	3308      	adds	r3, #8
 8010c1a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8010c1c:	4618      	mov	r0, r3
 8010c1e:	f7fc fc7e 	bl	800d51e <st_dword>
					fs->dirbuf[XDIR_CrtTime10] = 0;
 8010c22:	697b      	ldr	r3, [r7, #20]
 8010c24:	695b      	ldr	r3, [r3, #20]
 8010c26:	3314      	adds	r3, #20
 8010c28:	2200      	movs	r2, #0
 8010c2a:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_ModTime, dw);	/* Set modified time */
 8010c2c:	697b      	ldr	r3, [r7, #20]
 8010c2e:	695b      	ldr	r3, [r3, #20]
 8010c30:	330c      	adds	r3, #12
 8010c32:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8010c34:	4618      	mov	r0, r3
 8010c36:	f7fc fc72 	bl	800d51e <st_dword>
					fs->dirbuf[XDIR_ModTime10] = 0;
 8010c3a:	697b      	ldr	r3, [r7, #20]
 8010c3c:	695b      	ldr	r3, [r3, #20]
 8010c3e:	3315      	adds	r3, #21
 8010c40:	2200      	movs	r2, #0
 8010c42:	701a      	strb	r2, [r3, #0]
					fs->dirbuf[XDIR_Attr] = AM_ARC;				/* Reset attribute */
 8010c44:	697b      	ldr	r3, [r7, #20]
 8010c46:	695b      	ldr	r3, [r3, #20]
 8010c48:	3304      	adds	r3, #4
 8010c4a:	2220      	movs	r2, #32
 8010c4c:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_FstClus, 0);		/* Reset file allocation info */
 8010c4e:	697b      	ldr	r3, [r7, #20]
 8010c50:	695b      	ldr	r3, [r3, #20]
 8010c52:	3334      	adds	r3, #52	; 0x34
 8010c54:	2100      	movs	r1, #0
 8010c56:	4618      	mov	r0, r3
 8010c58:	f7fc fc61 	bl	800d51e <st_dword>
					st_qword(fs->dirbuf + XDIR_FileSize, 0);
 8010c5c:	697b      	ldr	r3, [r7, #20]
 8010c5e:	695b      	ldr	r3, [r3, #20]
 8010c60:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8010c64:	f04f 0200 	mov.w	r2, #0
 8010c68:	f04f 0300 	mov.w	r3, #0
 8010c6c:	4608      	mov	r0, r1
 8010c6e:	f7fc fc82 	bl	800d576 <st_qword>
					st_qword(fs->dirbuf + XDIR_ValidFileSize, 0);
 8010c72:	697b      	ldr	r3, [r7, #20]
 8010c74:	695b      	ldr	r3, [r3, #20]
 8010c76:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8010c7a:	f04f 0200 	mov.w	r2, #0
 8010c7e:	f04f 0300 	mov.w	r3, #0
 8010c82:	4608      	mov	r0, r1
 8010c84:	f7fc fc77 	bl	800d576 <st_qword>
					fs->dirbuf[XDIR_GenFlags] = 1;
 8010c88:	697b      	ldr	r3, [r7, #20]
 8010c8a:	695b      	ldr	r3, [r3, #20]
 8010c8c:	3321      	adds	r3, #33	; 0x21
 8010c8e:	2201      	movs	r2, #1
 8010c90:	701a      	strb	r2, [r3, #0]
					res = store_xdir(&dj);
 8010c92:	f107 0318 	add.w	r3, r7, #24
 8010c96:	4618      	mov	r0, r3
 8010c98:	f7fe fb43 	bl	800f322 <store_xdir>
 8010c9c:	4603      	mov	r3, r0
 8010c9e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
					if (res == FR_OK && fp->obj.sclust) {		/* Remove the cluster chain if exist */
 8010ca2:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8010ca6:	2b00      	cmp	r3, #0
 8010ca8:	d174      	bne.n	8010d94 <f_open+0x318>
 8010caa:	68fb      	ldr	r3, [r7, #12]
 8010cac:	689b      	ldr	r3, [r3, #8]
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	d070      	beq.n	8010d94 <f_open+0x318>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 8010cb2:	68f8      	ldr	r0, [r7, #12]
 8010cb4:	68fb      	ldr	r3, [r7, #12]
 8010cb6:	689b      	ldr	r3, [r3, #8]
 8010cb8:	2200      	movs	r2, #0
 8010cba:	4619      	mov	r1, r3
 8010cbc:	f7fd fbd0 	bl	800e460 <remove_chain>
 8010cc0:	4603      	mov	r3, r0
 8010cc2:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 8010cc6:	68fb      	ldr	r3, [r7, #12]
 8010cc8:	689a      	ldr	r2, [r3, #8]
 8010cca:	697b      	ldr	r3, [r7, #20]
 8010ccc:	3a01      	subs	r2, #1
 8010cce:	61da      	str	r2, [r3, #28]
 8010cd0:	e060      	b.n	8010d94 <f_open+0x318>
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8010cd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010cd4:	330e      	adds	r3, #14
 8010cd6:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8010cd8:	4618      	mov	r0, r3
 8010cda:	f7fc fc20 	bl	800d51e <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8010cde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010ce0:	3316      	adds	r3, #22
 8010ce2:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8010ce4:	4618      	mov	r0, r3
 8010ce6:	f7fc fc1a 	bl	800d51e <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8010cea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010cec:	330b      	adds	r3, #11
 8010cee:	2220      	movs	r2, #32
 8010cf0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8010cf2:	697b      	ldr	r3, [r7, #20]
 8010cf4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010cf6:	4611      	mov	r1, r2
 8010cf8:	4618      	mov	r0, r3
 8010cfa:	f7fd ff83 	bl	800ec04 <ld_clust>
 8010cfe:	6778      	str	r0, [r7, #116]	; 0x74
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8010d00:	697b      	ldr	r3, [r7, #20]
 8010d02:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010d04:	2200      	movs	r2, #0
 8010d06:	4618      	mov	r0, r3
 8010d08:	f7fd ff9b 	bl	800ec42 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8010d0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010d0e:	331c      	adds	r3, #28
 8010d10:	2100      	movs	r1, #0
 8010d12:	4618      	mov	r0, r3
 8010d14:	f7fc fc03 	bl	800d51e <st_dword>
					fs->wflag = 1;
 8010d18:	697b      	ldr	r3, [r7, #20]
 8010d1a:	2201      	movs	r2, #1
 8010d1c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8010d1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	d037      	beq.n	8010d94 <f_open+0x318>
						dw = fs->winsect;
 8010d24:	697b      	ldr	r3, [r7, #20]
 8010d26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010d28:	67bb      	str	r3, [r7, #120]	; 0x78
						res = remove_chain(&dj.obj, cl, 0);
 8010d2a:	f107 0318 	add.w	r3, r7, #24
 8010d2e:	2200      	movs	r2, #0
 8010d30:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8010d32:	4618      	mov	r0, r3
 8010d34:	f7fd fb94 	bl	800e460 <remove_chain>
 8010d38:	4603      	mov	r3, r0
 8010d3a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
						if (res == FR_OK) {
 8010d3e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	d126      	bne.n	8010d94 <f_open+0x318>
							res = move_window(fs, dw);
 8010d46:	697b      	ldr	r3, [r7, #20]
 8010d48:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8010d4a:	4618      	mov	r0, r3
 8010d4c:	f7fc fef8 	bl	800db40 <move_window>
 8010d50:	4603      	mov	r3, r0
 8010d52:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8010d56:	697b      	ldr	r3, [r7, #20]
 8010d58:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8010d5a:	3a01      	subs	r2, #1
 8010d5c:	61da      	str	r2, [r3, #28]
 8010d5e:	e019      	b.n	8010d94 <f_open+0x318>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8010d60:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8010d64:	2b00      	cmp	r3, #0
 8010d66:	d115      	bne.n	8010d94 <f_open+0x318>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8010d68:	7fbb      	ldrb	r3, [r7, #30]
 8010d6a:	f003 0310 	and.w	r3, r3, #16
 8010d6e:	2b00      	cmp	r3, #0
 8010d70:	d003      	beq.n	8010d7a <f_open+0x2fe>
					res = FR_NO_FILE;
 8010d72:	2304      	movs	r3, #4
 8010d74:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8010d78:	e00c      	b.n	8010d94 <f_open+0x318>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8010d7a:	79fb      	ldrb	r3, [r7, #7]
 8010d7c:	f003 0302 	and.w	r3, r3, #2
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	d007      	beq.n	8010d94 <f_open+0x318>
 8010d84:	7fbb      	ldrb	r3, [r7, #30]
 8010d86:	f003 0301 	and.w	r3, r3, #1
 8010d8a:	2b00      	cmp	r3, #0
 8010d8c:	d002      	beq.n	8010d94 <f_open+0x318>
						res = FR_DENIED;
 8010d8e:	2307      	movs	r3, #7
 8010d90:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
					}
				}
			}
		}
		if (res == FR_OK) {
 8010d94:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8010d98:	2b00      	cmp	r3, #0
 8010d9a:	d128      	bne.n	8010dee <f_open+0x372>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8010d9c:	79fb      	ldrb	r3, [r7, #7]
 8010d9e:	f003 0308 	and.w	r3, r3, #8
 8010da2:	2b00      	cmp	r3, #0
 8010da4:	d003      	beq.n	8010dae <f_open+0x332>
				mode |= FA_MODIFIED;
 8010da6:	79fb      	ldrb	r3, [r7, #7]
 8010da8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010dac:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8010dae:	697b      	ldr	r3, [r7, #20]
 8010db0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010db2:	68fb      	ldr	r3, [r7, #12]
 8010db4:	649a      	str	r2, [r3, #72]	; 0x48
			fp->dir_ptr = dj.dir;
 8010db6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010db8:	68fb      	ldr	r3, [r7, #12]
 8010dba:	64da      	str	r2, [r3, #76]	; 0x4c
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8010dbc:	79fb      	ldrb	r3, [r7, #7]
 8010dbe:	f023 0301 	bic.w	r3, r3, #1
 8010dc2:	2b00      	cmp	r3, #0
 8010dc4:	bf14      	ite	ne
 8010dc6:	2301      	movne	r3, #1
 8010dc8:	2300      	moveq	r3, #0
 8010dca:	b2db      	uxtb	r3, r3
 8010dcc:	461a      	mov	r2, r3
 8010dce:	f107 0318 	add.w	r3, r7, #24
 8010dd2:	4611      	mov	r1, r2
 8010dd4:	4618      	mov	r0, r3
 8010dd6:	f7fc fd81 	bl	800d8dc <inc_lock>
 8010dda:	4602      	mov	r2, r0
 8010ddc:	68fb      	ldr	r3, [r7, #12]
 8010dde:	62da      	str	r2, [r3, #44]	; 0x2c
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8010de0:	68fb      	ldr	r3, [r7, #12]
 8010de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010de4:	2b00      	cmp	r3, #0
 8010de6:	d102      	bne.n	8010dee <f_open+0x372>
 8010de8:	2302      	movs	r3, #2
 8010dea:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8010dee:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8010df2:	2b00      	cmp	r3, #0
 8010df4:	f040 8106 	bne.w	8011004 <f_open+0x588>
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 8010df8:	697b      	ldr	r3, [r7, #20]
 8010dfa:	781b      	ldrb	r3, [r3, #0]
 8010dfc:	2b04      	cmp	r3, #4
 8010dfe:	d12b      	bne.n	8010e58 <f_open+0x3dc>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 8010e00:	6a3a      	ldr	r2, [r7, #32]
 8010e02:	68fb      	ldr	r3, [r7, #12]
 8010e04:	621a      	str	r2, [r3, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 8010e06:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8010e0a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8010e0e:	7ffa      	ldrb	r2, [r7, #31]
 8010e10:	431a      	orrs	r2, r3
 8010e12:	68fb      	ldr	r3, [r7, #12]
 8010e14:	625a      	str	r2, [r3, #36]	; 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 8010e16:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8010e18:	68fb      	ldr	r3, [r7, #12]
 8010e1a:	629a      	str	r2, [r3, #40]	; 0x28
				fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 8010e1c:	697b      	ldr	r3, [r7, #20]
 8010e1e:	695b      	ldr	r3, [r3, #20]
 8010e20:	3334      	adds	r3, #52	; 0x34
 8010e22:	4618      	mov	r0, r3
 8010e24:	f7fc fa80 	bl	800d328 <ld_dword>
 8010e28:	4602      	mov	r2, r0
 8010e2a:	68fb      	ldr	r3, [r7, #12]
 8010e2c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 8010e2e:	697b      	ldr	r3, [r7, #20]
 8010e30:	695b      	ldr	r3, [r3, #20]
 8010e32:	3338      	adds	r3, #56	; 0x38
 8010e34:	4618      	mov	r0, r3
 8010e36:	f7fc fa9a 	bl	800d36e <ld_qword>
 8010e3a:	4603      	mov	r3, r0
 8010e3c:	460c      	mov	r4, r1
 8010e3e:	68fa      	ldr	r2, [r7, #12]
 8010e40:	e9c2 3404 	strd	r3, r4, [r2, #16]
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 8010e44:	697b      	ldr	r3, [r7, #20]
 8010e46:	695b      	ldr	r3, [r3, #20]
 8010e48:	3321      	adds	r3, #33	; 0x21
 8010e4a:	781b      	ldrb	r3, [r3, #0]
 8010e4c:	f003 0302 	and.w	r3, r3, #2
 8010e50:	b2da      	uxtb	r2, r3
 8010e52:	68fb      	ldr	r3, [r7, #12]
 8010e54:	71da      	strb	r2, [r3, #7]
 8010e56:	e013      	b.n	8010e80 <f_open+0x404>
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8010e58:	697b      	ldr	r3, [r7, #20]
 8010e5a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010e5c:	4611      	mov	r1, r2
 8010e5e:	4618      	mov	r0, r3
 8010e60:	f7fd fed0 	bl	800ec04 <ld_clust>
 8010e64:	4602      	mov	r2, r0
 8010e66:	68fb      	ldr	r3, [r7, #12]
 8010e68:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8010e6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010e6c:	331c      	adds	r3, #28
 8010e6e:	4618      	mov	r0, r3
 8010e70:	f7fc fa5a 	bl	800d328 <ld_dword>
 8010e74:	4603      	mov	r3, r0
 8010e76:	f04f 0400 	mov.w	r4, #0
 8010e7a:	68fa      	ldr	r2, [r7, #12]
 8010e7c:	e9c2 3404 	strd	r3, r4, [r2, #16]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8010e80:	68fb      	ldr	r3, [r7, #12]
 8010e82:	2200      	movs	r2, #0
 8010e84:	651a      	str	r2, [r3, #80]	; 0x50
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8010e86:	697a      	ldr	r2, [r7, #20]
 8010e88:	68fb      	ldr	r3, [r7, #12]
 8010e8a:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8010e8c:	697b      	ldr	r3, [r7, #20]
 8010e8e:	88da      	ldrh	r2, [r3, #6]
 8010e90:	68fb      	ldr	r3, [r7, #12]
 8010e92:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8010e94:	68fb      	ldr	r3, [r7, #12]
 8010e96:	79fa      	ldrb	r2, [r7, #7]
 8010e98:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			fp->err = 0;			/* Clear error flag */
 8010e9c:	68fb      	ldr	r3, [r7, #12]
 8010e9e:	2200      	movs	r2, #0
 8010ea0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			fp->sect = 0;			/* Invalidate current data sector */
 8010ea4:	68fb      	ldr	r3, [r7, #12]
 8010ea6:	2200      	movs	r2, #0
 8010ea8:	645a      	str	r2, [r3, #68]	; 0x44
			fp->fptr = 0;			/* Set file pointer top of the file */
 8010eaa:	68fa      	ldr	r2, [r7, #12]
 8010eac:	f04f 0300 	mov.w	r3, #0
 8010eb0:	f04f 0400 	mov.w	r4, #0
 8010eb4:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8010eb8:	68fb      	ldr	r3, [r7, #12]
 8010eba:	3354      	adds	r3, #84	; 0x54
 8010ebc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8010ec0:	2100      	movs	r1, #0
 8010ec2:	4618      	mov	r0, r3
 8010ec4:	f7fc fbff 	bl	800d6c6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8010ec8:	79fb      	ldrb	r3, [r7, #7]
 8010eca:	f003 0320 	and.w	r3, r3, #32
 8010ece:	2b00      	cmp	r3, #0
 8010ed0:	f000 8098 	beq.w	8011004 <f_open+0x588>
 8010ed4:	68fb      	ldr	r3, [r7, #12]
 8010ed6:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8010eda:	4323      	orrs	r3, r4
 8010edc:	f000 8092 	beq.w	8011004 <f_open+0x588>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8010ee0:	68fb      	ldr	r3, [r7, #12]
 8010ee2:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8010ee6:	68fa      	ldr	r2, [r7, #12]
 8010ee8:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8010eec:	697b      	ldr	r3, [r7, #20]
 8010eee:	895b      	ldrh	r3, [r3, #10]
 8010ef0:	461a      	mov	r2, r3
 8010ef2:	697b      	ldr	r3, [r7, #20]
 8010ef4:	899b      	ldrh	r3, [r3, #12]
 8010ef6:	fb03 f302 	mul.w	r3, r3, r2
 8010efa:	673b      	str	r3, [r7, #112]	; 0x70
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8010efc:	68fb      	ldr	r3, [r7, #12]
 8010efe:	689b      	ldr	r3, [r3, #8]
 8010f00:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8010f04:	68fb      	ldr	r3, [r7, #12]
 8010f06:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8010f0a:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
 8010f0e:	e024      	b.n	8010f5a <f_open+0x4de>
					clst = get_fat(&fp->obj, clst);
 8010f10:	68fb      	ldr	r3, [r7, #12]
 8010f12:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8010f16:	4618      	mov	r0, r3
 8010f18:	f7fc fed0 	bl	800dcbc <get_fat>
 8010f1c:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
					if (clst <= 1) res = FR_INT_ERR;
 8010f20:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010f24:	2b01      	cmp	r3, #1
 8010f26:	d802      	bhi.n	8010f2e <f_open+0x4b2>
 8010f28:	2302      	movs	r3, #2
 8010f2a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8010f2e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010f32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f36:	d102      	bne.n	8010f3e <f_open+0x4c2>
 8010f38:	2301      	movs	r3, #1
 8010f3a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8010f3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010f40:	469b      	mov	fp, r3
 8010f42:	f04f 0c00 	mov.w	ip, #0
 8010f46:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8010f4a:	460b      	mov	r3, r1
 8010f4c:	4614      	mov	r4, r2
 8010f4e:	ebb3 030b 	subs.w	r3, r3, fp
 8010f52:	eb64 040c 	sbc.w	r4, r4, ip
 8010f56:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
 8010f5a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8010f5e:	2b00      	cmp	r3, #0
 8010f60:	d109      	bne.n	8010f76 <f_open+0x4fa>
 8010f62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010f64:	4619      	mov	r1, r3
 8010f66:	f04f 0200 	mov.w	r2, #0
 8010f6a:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 8010f6e:	42a2      	cmp	r2, r4
 8010f70:	bf08      	it	eq
 8010f72:	4299      	cmpeq	r1, r3
 8010f74:	d3cc      	bcc.n	8010f10 <f_open+0x494>
				}
				fp->clust = clst;
 8010f76:	68fb      	ldr	r3, [r7, #12]
 8010f78:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8010f7c:	641a      	str	r2, [r3, #64]	; 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8010f7e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	d13e      	bne.n	8011004 <f_open+0x588>
 8010f86:	697b      	ldr	r3, [r7, #20]
 8010f88:	899b      	ldrh	r3, [r3, #12]
 8010f8a:	b29b      	uxth	r3, r3
 8010f8c:	f04f 0400 	mov.w	r4, #0
 8010f90:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8010f94:	461a      	mov	r2, r3
 8010f96:	4623      	mov	r3, r4
 8010f98:	f7ef f952 	bl	8000240 <__aeabi_uldivmod>
 8010f9c:	461c      	mov	r4, r3
 8010f9e:	4613      	mov	r3, r2
 8010fa0:	4323      	orrs	r3, r4
 8010fa2:	d02f      	beq.n	8011004 <f_open+0x588>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8010fa4:	697b      	ldr	r3, [r7, #20]
 8010fa6:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8010faa:	4618      	mov	r0, r3
 8010fac:	f7fc fe66 	bl	800dc7c <clust2sect>
 8010fb0:	66f8      	str	r0, [r7, #108]	; 0x6c
 8010fb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010fb4:	2b00      	cmp	r3, #0
 8010fb6:	d103      	bne.n	8010fc0 <f_open+0x544>
						res = FR_INT_ERR;
 8010fb8:	2302      	movs	r3, #2
 8010fba:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8010fbe:	e021      	b.n	8011004 <f_open+0x588>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8010fc0:	697b      	ldr	r3, [r7, #20]
 8010fc2:	899b      	ldrh	r3, [r3, #12]
 8010fc4:	b29b      	uxth	r3, r3
 8010fc6:	f04f 0400 	mov.w	r4, #0
 8010fca:	461a      	mov	r2, r3
 8010fcc:	4623      	mov	r3, r4
 8010fce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8010fd2:	f7ef f935 	bl	8000240 <__aeabi_uldivmod>
 8010fd6:	4603      	mov	r3, r0
 8010fd8:	460c      	mov	r4, r1
 8010fda:	461a      	mov	r2, r3
 8010fdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010fde:	441a      	add	r2, r3
 8010fe0:	68fb      	ldr	r3, [r7, #12]
 8010fe2:	645a      	str	r2, [r3, #68]	; 0x44
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8010fe4:	697b      	ldr	r3, [r7, #20]
 8010fe6:	7858      	ldrb	r0, [r3, #1]
 8010fe8:	68fb      	ldr	r3, [r7, #12]
 8010fea:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8010fee:	68fb      	ldr	r3, [r7, #12]
 8010ff0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010ff2:	2301      	movs	r3, #1
 8010ff4:	f7fc f922 	bl	800d23c <disk_read>
 8010ff8:	4603      	mov	r3, r0
 8010ffa:	2b00      	cmp	r3, #0
 8010ffc:	d002      	beq.n	8011004 <f_open+0x588>
 8010ffe:	2301      	movs	r3, #1
 8011000:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
				}
			}
#endif
		}

		FREE_NAMBUF();
 8011004:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8011006:	f000 fd06 	bl	8011a16 <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801100a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 801100e:	2b00      	cmp	r3, #0
 8011010:	d002      	beq.n	8011018 <f_open+0x59c>
 8011012:	68fb      	ldr	r3, [r7, #12]
 8011014:	2200      	movs	r2, #0
 8011016:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8011018:	697b      	ldr	r3, [r7, #20]
 801101a:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 801101e:	4611      	mov	r1, r2
 8011020:	4618      	mov	r0, r3
 8011022:	f7fc fbc2 	bl	800d7aa <unlock_fs>
 8011026:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 801102a:	4618      	mov	r0, r3
 801102c:	3790      	adds	r7, #144	; 0x90
 801102e:	46bd      	mov	sp, r7
 8011030:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08011034 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8011034:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011036:	b08d      	sub	sp, #52	; 0x34
 8011038:	af00      	add	r7, sp, #0
 801103a:	60f8      	str	r0, [r7, #12]
 801103c:	60b9      	str	r1, [r7, #8]
 801103e:	607a      	str	r2, [r7, #4]
 8011040:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8011042:	68bb      	ldr	r3, [r7, #8]
 8011044:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8011046:	683b      	ldr	r3, [r7, #0]
 8011048:	2200      	movs	r2, #0
 801104a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801104c:	68fb      	ldr	r3, [r7, #12]
 801104e:	f107 0210 	add.w	r2, r7, #16
 8011052:	4611      	mov	r1, r2
 8011054:	4618      	mov	r0, r3
 8011056:	f7ff fc65 	bl	8010924 <validate>
 801105a:	4603      	mov	r3, r0
 801105c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8011060:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011064:	2b00      	cmp	r3, #0
 8011066:	d108      	bne.n	801107a <f_write+0x46>
 8011068:	68fb      	ldr	r3, [r7, #12]
 801106a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801106e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8011072:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011076:	2b00      	cmp	r3, #0
 8011078:	d009      	beq.n	801108e <f_write+0x5a>
 801107a:	693b      	ldr	r3, [r7, #16]
 801107c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8011080:	4611      	mov	r1, r2
 8011082:	4618      	mov	r0, r3
 8011084:	f7fc fb91 	bl	800d7aa <unlock_fs>
 8011088:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801108c:	e1d3      	b.n	8011436 <f_write+0x402>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 801108e:	68fb      	ldr	r3, [r7, #12]
 8011090:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011094:	f003 0302 	and.w	r3, r3, #2
 8011098:	2b00      	cmp	r3, #0
 801109a:	d106      	bne.n	80110aa <f_write+0x76>
 801109c:	693b      	ldr	r3, [r7, #16]
 801109e:	2107      	movs	r1, #7
 80110a0:	4618      	mov	r0, r3
 80110a2:	f7fc fb82 	bl	800d7aa <unlock_fs>
 80110a6:	2307      	movs	r3, #7
 80110a8:	e1c5      	b.n	8011436 <f_write+0x402>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80110aa:	693b      	ldr	r3, [r7, #16]
 80110ac:	781b      	ldrb	r3, [r3, #0]
 80110ae:	2b04      	cmp	r3, #4
 80110b0:	f000 81ac 	beq.w	801140c <f_write+0x3d8>
 80110b4:	68fb      	ldr	r3, [r7, #12]
 80110b6:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 80110ba:	461a      	mov	r2, r3
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	441a      	add	r2, r3
 80110c0:	68fb      	ldr	r3, [r7, #12]
 80110c2:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 80110c6:	429a      	cmp	r2, r3
 80110c8:	f080 81a0 	bcs.w	801140c <f_write+0x3d8>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80110cc:	68fb      	ldr	r3, [r7, #12]
 80110ce:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 80110d2:	43db      	mvns	r3, r3
 80110d4:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80110d6:	e199      	b.n	801140c <f_write+0x3d8>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80110d8:	68fb      	ldr	r3, [r7, #12]
 80110da:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80110de:	693b      	ldr	r3, [r7, #16]
 80110e0:	899b      	ldrh	r3, [r3, #12]
 80110e2:	b29b      	uxth	r3, r3
 80110e4:	f04f 0400 	mov.w	r4, #0
 80110e8:	461a      	mov	r2, r3
 80110ea:	4623      	mov	r3, r4
 80110ec:	f7ef f8a8 	bl	8000240 <__aeabi_uldivmod>
 80110f0:	461c      	mov	r4, r3
 80110f2:	4613      	mov	r3, r2
 80110f4:	4323      	orrs	r3, r4
 80110f6:	f040 812a 	bne.w	801134e <f_write+0x31a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80110fa:	68fb      	ldr	r3, [r7, #12]
 80110fc:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8011100:	693b      	ldr	r3, [r7, #16]
 8011102:	899b      	ldrh	r3, [r3, #12]
 8011104:	b29b      	uxth	r3, r3
 8011106:	f04f 0400 	mov.w	r4, #0
 801110a:	461a      	mov	r2, r3
 801110c:	4623      	mov	r3, r4
 801110e:	f7ef f897 	bl	8000240 <__aeabi_uldivmod>
 8011112:	4603      	mov	r3, r0
 8011114:	460c      	mov	r4, r1
 8011116:	461a      	mov	r2, r3
 8011118:	693b      	ldr	r3, [r7, #16]
 801111a:	895b      	ldrh	r3, [r3, #10]
 801111c:	3b01      	subs	r3, #1
 801111e:	4013      	ands	r3, r2
 8011120:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8011122:	69bb      	ldr	r3, [r7, #24]
 8011124:	2b00      	cmp	r3, #0
 8011126:	d152      	bne.n	80111ce <f_write+0x19a>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8011128:	68fb      	ldr	r3, [r7, #12]
 801112a:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 801112e:	4323      	orrs	r3, r4
 8011130:	d10c      	bne.n	801114c <f_write+0x118>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8011132:	68fb      	ldr	r3, [r7, #12]
 8011134:	689b      	ldr	r3, [r3, #8]
 8011136:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8011138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801113a:	2b00      	cmp	r3, #0
 801113c:	d11c      	bne.n	8011178 <f_write+0x144>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 801113e:	68fb      	ldr	r3, [r7, #12]
 8011140:	2100      	movs	r1, #0
 8011142:	4618      	mov	r0, r3
 8011144:	f7fd fa40 	bl	800e5c8 <create_chain>
 8011148:	62b8      	str	r0, [r7, #40]	; 0x28
 801114a:	e015      	b.n	8011178 <f_write+0x144>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801114c:	68fb      	ldr	r3, [r7, #12]
 801114e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011150:	2b00      	cmp	r3, #0
 8011152:	d009      	beq.n	8011168 <f_write+0x134>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8011154:	68fb      	ldr	r3, [r7, #12]
 8011156:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 801115a:	461a      	mov	r2, r3
 801115c:	4623      	mov	r3, r4
 801115e:	68f8      	ldr	r0, [r7, #12]
 8011160:	f7fd fb33 	bl	800e7ca <clmt_clust>
 8011164:	62b8      	str	r0, [r7, #40]	; 0x28
 8011166:	e007      	b.n	8011178 <f_write+0x144>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8011168:	68fa      	ldr	r2, [r7, #12]
 801116a:	68fb      	ldr	r3, [r7, #12]
 801116c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801116e:	4619      	mov	r1, r3
 8011170:	4610      	mov	r0, r2
 8011172:	f7fd fa29 	bl	800e5c8 <create_chain>
 8011176:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8011178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801117a:	2b00      	cmp	r3, #0
 801117c:	f000 814b 	beq.w	8011416 <f_write+0x3e2>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8011180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011182:	2b01      	cmp	r3, #1
 8011184:	d10a      	bne.n	801119c <f_write+0x168>
 8011186:	68fb      	ldr	r3, [r7, #12]
 8011188:	2202      	movs	r2, #2
 801118a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 801118e:	693b      	ldr	r3, [r7, #16]
 8011190:	2102      	movs	r1, #2
 8011192:	4618      	mov	r0, r3
 8011194:	f7fc fb09 	bl	800d7aa <unlock_fs>
 8011198:	2302      	movs	r3, #2
 801119a:	e14c      	b.n	8011436 <f_write+0x402>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801119c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801119e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80111a2:	d10a      	bne.n	80111ba <f_write+0x186>
 80111a4:	68fb      	ldr	r3, [r7, #12]
 80111a6:	2201      	movs	r2, #1
 80111a8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80111ac:	693b      	ldr	r3, [r7, #16]
 80111ae:	2101      	movs	r1, #1
 80111b0:	4618      	mov	r0, r3
 80111b2:	f7fc fafa 	bl	800d7aa <unlock_fs>
 80111b6:	2301      	movs	r3, #1
 80111b8:	e13d      	b.n	8011436 <f_write+0x402>
				fp->clust = clst;			/* Update current cluster */
 80111ba:	68fb      	ldr	r3, [r7, #12]
 80111bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80111be:	641a      	str	r2, [r3, #64]	; 0x40
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80111c0:	68fb      	ldr	r3, [r7, #12]
 80111c2:	689b      	ldr	r3, [r3, #8]
 80111c4:	2b00      	cmp	r3, #0
 80111c6:	d102      	bne.n	80111ce <f_write+0x19a>
 80111c8:	68fb      	ldr	r3, [r7, #12]
 80111ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80111cc:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80111ce:	68fb      	ldr	r3, [r7, #12]
 80111d0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80111d4:	b25b      	sxtb	r3, r3
 80111d6:	2b00      	cmp	r3, #0
 80111d8:	da20      	bge.n	801121c <f_write+0x1e8>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80111da:	693b      	ldr	r3, [r7, #16]
 80111dc:	7858      	ldrb	r0, [r3, #1]
 80111de:	68fb      	ldr	r3, [r7, #12]
 80111e0:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80111e4:	68fb      	ldr	r3, [r7, #12]
 80111e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80111e8:	2301      	movs	r3, #1
 80111ea:	f7fc f847 	bl	800d27c <disk_write>
 80111ee:	4603      	mov	r3, r0
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	d00a      	beq.n	801120a <f_write+0x1d6>
 80111f4:	68fb      	ldr	r3, [r7, #12]
 80111f6:	2201      	movs	r2, #1
 80111f8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80111fc:	693b      	ldr	r3, [r7, #16]
 80111fe:	2101      	movs	r1, #1
 8011200:	4618      	mov	r0, r3
 8011202:	f7fc fad2 	bl	800d7aa <unlock_fs>
 8011206:	2301      	movs	r3, #1
 8011208:	e115      	b.n	8011436 <f_write+0x402>
				fp->flag &= (BYTE)~FA_DIRTY;
 801120a:	68fb      	ldr	r3, [r7, #12]
 801120c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011210:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011214:	b2da      	uxtb	r2, r3
 8011216:	68fb      	ldr	r3, [r7, #12]
 8011218:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801121c:	693a      	ldr	r2, [r7, #16]
 801121e:	68fb      	ldr	r3, [r7, #12]
 8011220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011222:	4619      	mov	r1, r3
 8011224:	4610      	mov	r0, r2
 8011226:	f7fc fd29 	bl	800dc7c <clust2sect>
 801122a:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801122c:	697b      	ldr	r3, [r7, #20]
 801122e:	2b00      	cmp	r3, #0
 8011230:	d10a      	bne.n	8011248 <f_write+0x214>
 8011232:	68fb      	ldr	r3, [r7, #12]
 8011234:	2202      	movs	r2, #2
 8011236:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 801123a:	693b      	ldr	r3, [r7, #16]
 801123c:	2102      	movs	r1, #2
 801123e:	4618      	mov	r0, r3
 8011240:	f7fc fab3 	bl	800d7aa <unlock_fs>
 8011244:	2302      	movs	r3, #2
 8011246:	e0f6      	b.n	8011436 <f_write+0x402>
			sect += csect;
 8011248:	697a      	ldr	r2, [r7, #20]
 801124a:	69bb      	ldr	r3, [r7, #24]
 801124c:	4413      	add	r3, r2
 801124e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8011250:	693b      	ldr	r3, [r7, #16]
 8011252:	899b      	ldrh	r3, [r3, #12]
 8011254:	461a      	mov	r2, r3
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	fbb3 f3f2 	udiv	r3, r3, r2
 801125c:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 801125e:	6a3b      	ldr	r3, [r7, #32]
 8011260:	2b00      	cmp	r3, #0
 8011262:	d04b      	beq.n	80112fc <f_write+0x2c8>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8011264:	69ba      	ldr	r2, [r7, #24]
 8011266:	6a3b      	ldr	r3, [r7, #32]
 8011268:	4413      	add	r3, r2
 801126a:	693a      	ldr	r2, [r7, #16]
 801126c:	8952      	ldrh	r2, [r2, #10]
 801126e:	4293      	cmp	r3, r2
 8011270:	d905      	bls.n	801127e <f_write+0x24a>
					cc = fs->csize - csect;
 8011272:	693b      	ldr	r3, [r7, #16]
 8011274:	895b      	ldrh	r3, [r3, #10]
 8011276:	461a      	mov	r2, r3
 8011278:	69bb      	ldr	r3, [r7, #24]
 801127a:	1ad3      	subs	r3, r2, r3
 801127c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801127e:	693b      	ldr	r3, [r7, #16]
 8011280:	7858      	ldrb	r0, [r3, #1]
 8011282:	6a3b      	ldr	r3, [r7, #32]
 8011284:	697a      	ldr	r2, [r7, #20]
 8011286:	69f9      	ldr	r1, [r7, #28]
 8011288:	f7fb fff8 	bl	800d27c <disk_write>
 801128c:	4603      	mov	r3, r0
 801128e:	2b00      	cmp	r3, #0
 8011290:	d00a      	beq.n	80112a8 <f_write+0x274>
 8011292:	68fb      	ldr	r3, [r7, #12]
 8011294:	2201      	movs	r2, #1
 8011296:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 801129a:	693b      	ldr	r3, [r7, #16]
 801129c:	2101      	movs	r1, #1
 801129e:	4618      	mov	r0, r3
 80112a0:	f7fc fa83 	bl	800d7aa <unlock_fs>
 80112a4:	2301      	movs	r3, #1
 80112a6:	e0c6      	b.n	8011436 <f_write+0x402>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80112a8:	68fb      	ldr	r3, [r7, #12]
 80112aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80112ac:	697b      	ldr	r3, [r7, #20]
 80112ae:	1ad3      	subs	r3, r2, r3
 80112b0:	6a3a      	ldr	r2, [r7, #32]
 80112b2:	429a      	cmp	r2, r3
 80112b4:	d91a      	bls.n	80112ec <f_write+0x2b8>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80112b6:	68fb      	ldr	r3, [r7, #12]
 80112b8:	f103 0054 	add.w	r0, r3, #84	; 0x54
 80112bc:	68fb      	ldr	r3, [r7, #12]
 80112be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80112c0:	697b      	ldr	r3, [r7, #20]
 80112c2:	1ad3      	subs	r3, r2, r3
 80112c4:	693a      	ldr	r2, [r7, #16]
 80112c6:	8992      	ldrh	r2, [r2, #12]
 80112c8:	fb02 f303 	mul.w	r3, r2, r3
 80112cc:	69fa      	ldr	r2, [r7, #28]
 80112ce:	18d1      	adds	r1, r2, r3
 80112d0:	693b      	ldr	r3, [r7, #16]
 80112d2:	899b      	ldrh	r3, [r3, #12]
 80112d4:	461a      	mov	r2, r3
 80112d6:	f7fc f9d5 	bl	800d684 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80112da:	68fb      	ldr	r3, [r7, #12]
 80112dc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80112e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80112e4:	b2da      	uxtb	r2, r3
 80112e6:	68fb      	ldr	r3, [r7, #12]
 80112e8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80112ec:	693b      	ldr	r3, [r7, #16]
 80112ee:	899b      	ldrh	r3, [r3, #12]
 80112f0:	461a      	mov	r2, r3
 80112f2:	6a3b      	ldr	r3, [r7, #32]
 80112f4:	fb02 f303 	mul.w	r3, r2, r3
 80112f8:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80112fa:	e05d      	b.n	80113b8 <f_write+0x384>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80112fc:	68fb      	ldr	r3, [r7, #12]
 80112fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011300:	697a      	ldr	r2, [r7, #20]
 8011302:	429a      	cmp	r2, r3
 8011304:	d020      	beq.n	8011348 <f_write+0x314>
				fp->fptr < fp->obj.objsize &&
 8011306:	68fb      	ldr	r3, [r7, #12]
 8011308:	e9d3 120e 	ldrd	r1, r2, [r3, #56]	; 0x38
 801130c:	68fb      	ldr	r3, [r7, #12]
 801130e:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8011312:	42a2      	cmp	r2, r4
 8011314:	bf08      	it	eq
 8011316:	4299      	cmpeq	r1, r3
 8011318:	d216      	bcs.n	8011348 <f_write+0x314>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801131a:	693b      	ldr	r3, [r7, #16]
 801131c:	7858      	ldrb	r0, [r3, #1]
 801131e:	68fb      	ldr	r3, [r7, #12]
 8011320:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8011324:	2301      	movs	r3, #1
 8011326:	697a      	ldr	r2, [r7, #20]
 8011328:	f7fb ff88 	bl	800d23c <disk_read>
 801132c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 801132e:	2b00      	cmp	r3, #0
 8011330:	d00a      	beq.n	8011348 <f_write+0x314>
					ABORT(fs, FR_DISK_ERR);
 8011332:	68fb      	ldr	r3, [r7, #12]
 8011334:	2201      	movs	r2, #1
 8011336:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 801133a:	693b      	ldr	r3, [r7, #16]
 801133c:	2101      	movs	r1, #1
 801133e:	4618      	mov	r0, r3
 8011340:	f7fc fa33 	bl	800d7aa <unlock_fs>
 8011344:	2301      	movs	r3, #1
 8011346:	e076      	b.n	8011436 <f_write+0x402>
			}
#endif
			fp->sect = sect;
 8011348:	68fb      	ldr	r3, [r7, #12]
 801134a:	697a      	ldr	r2, [r7, #20]
 801134c:	645a      	str	r2, [r3, #68]	; 0x44
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801134e:	693b      	ldr	r3, [r7, #16]
 8011350:	899b      	ldrh	r3, [r3, #12]
 8011352:	4618      	mov	r0, r3
 8011354:	68fb      	ldr	r3, [r7, #12]
 8011356:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 801135a:	693a      	ldr	r2, [r7, #16]
 801135c:	8992      	ldrh	r2, [r2, #12]
 801135e:	fbb3 f1f2 	udiv	r1, r3, r2
 8011362:	fb02 f201 	mul.w	r2, r2, r1
 8011366:	1a9b      	subs	r3, r3, r2
 8011368:	1ac3      	subs	r3, r0, r3
 801136a:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 801136c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	429a      	cmp	r2, r3
 8011372:	d901      	bls.n	8011378 <f_write+0x344>
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8011378:	68fb      	ldr	r3, [r7, #12]
 801137a:	f103 0554 	add.w	r5, r3, #84	; 0x54
 801137e:	68fb      	ldr	r3, [r7, #12]
 8011380:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8011384:	693b      	ldr	r3, [r7, #16]
 8011386:	899b      	ldrh	r3, [r3, #12]
 8011388:	b29b      	uxth	r3, r3
 801138a:	f04f 0400 	mov.w	r4, #0
 801138e:	461a      	mov	r2, r3
 8011390:	4623      	mov	r3, r4
 8011392:	f7ee ff55 	bl	8000240 <__aeabi_uldivmod>
 8011396:	461c      	mov	r4, r3
 8011398:	4613      	mov	r3, r2
 801139a:	442b      	add	r3, r5
 801139c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801139e:	69f9      	ldr	r1, [r7, #28]
 80113a0:	4618      	mov	r0, r3
 80113a2:	f7fc f96f 	bl	800d684 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80113a6:	68fb      	ldr	r3, [r7, #12]
 80113a8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80113ac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80113b0:	b2da      	uxtb	r2, r3
 80113b2:	68fb      	ldr	r3, [r7, #12]
 80113b4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80113b8:	69fa      	ldr	r2, [r7, #28]
 80113ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113bc:	4413      	add	r3, r2
 80113be:	61fb      	str	r3, [r7, #28]
 80113c0:	68fb      	ldr	r3, [r7, #12]
 80113c2:	e9d3 120e 	ldrd	r1, r2, [r3, #56]	; 0x38
 80113c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113c8:	461d      	mov	r5, r3
 80113ca:	f04f 0600 	mov.w	r6, #0
 80113ce:	186b      	adds	r3, r5, r1
 80113d0:	eb46 0402 	adc.w	r4, r6, r2
 80113d4:	68fa      	ldr	r2, [r7, #12]
 80113d6:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
 80113da:	68fb      	ldr	r3, [r7, #12]
 80113dc:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 80113e0:	68fa      	ldr	r2, [r7, #12]
 80113e2:	e9d2 120e 	ldrd	r1, r2, [r2, #56]	; 0x38
 80113e6:	4294      	cmp	r4, r2
 80113e8:	bf08      	it	eq
 80113ea:	428b      	cmpeq	r3, r1
 80113ec:	d201      	bcs.n	80113f2 <f_write+0x3be>
 80113ee:	460b      	mov	r3, r1
 80113f0:	4614      	mov	r4, r2
 80113f2:	68fa      	ldr	r2, [r7, #12]
 80113f4:	e9c2 3404 	strd	r3, r4, [r2, #16]
 80113f8:	683b      	ldr	r3, [r7, #0]
 80113fa:	681a      	ldr	r2, [r3, #0]
 80113fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113fe:	441a      	add	r2, r3
 8011400:	683b      	ldr	r3, [r7, #0]
 8011402:	601a      	str	r2, [r3, #0]
 8011404:	687a      	ldr	r2, [r7, #4]
 8011406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011408:	1ad3      	subs	r3, r2, r3
 801140a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	2b00      	cmp	r3, #0
 8011410:	f47f ae62 	bne.w	80110d8 <f_write+0xa4>
 8011414:	e000      	b.n	8011418 <f_write+0x3e4>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8011416:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8011418:	68fb      	ldr	r3, [r7, #12]
 801141a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801141e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011422:	b2da      	uxtb	r2, r3
 8011424:	68fb      	ldr	r3, [r7, #12]
 8011426:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	LEAVE_FF(fs, FR_OK);
 801142a:	693b      	ldr	r3, [r7, #16]
 801142c:	2100      	movs	r1, #0
 801142e:	4618      	mov	r0, r3
 8011430:	f7fc f9bb 	bl	800d7aa <unlock_fs>
 8011434:	2300      	movs	r3, #0
}
 8011436:	4618      	mov	r0, r3
 8011438:	3734      	adds	r7, #52	; 0x34
 801143a:	46bd      	mov	sp, r7
 801143c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801143e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801143e:	b590      	push	{r4, r7, lr}
 8011440:	b09d      	sub	sp, #116	; 0x74
 8011442:	af00      	add	r7, sp, #0
 8011444:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 801144c:	4611      	mov	r1, r2
 801144e:	4618      	mov	r0, r3
 8011450:	f7ff fa68 	bl	8010924 <validate>
 8011454:	4603      	mov	r3, r0
 8011456:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if (res == FR_OK) {
 801145a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 801145e:	2b00      	cmp	r3, #0
 8011460:	f040 8127 	bne.w	80116b2 <f_sync+0x274>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801146a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801146e:	2b00      	cmp	r3, #0
 8011470:	f000 811f 	beq.w	80116b2 <f_sync+0x274>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801147a:	b25b      	sxtb	r3, r3
 801147c:	2b00      	cmp	r3, #0
 801147e:	da1c      	bge.n	80114ba <f_sync+0x7c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8011480:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011482:	7858      	ldrb	r0, [r3, #1]
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	f103 0154 	add.w	r1, r3, #84	; 0x54
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801148e:	2301      	movs	r3, #1
 8011490:	f7fb fef4 	bl	800d27c <disk_write>
 8011494:	4603      	mov	r3, r0
 8011496:	2b00      	cmp	r3, #0
 8011498:	d006      	beq.n	80114a8 <f_sync+0x6a>
 801149a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801149c:	2101      	movs	r1, #1
 801149e:	4618      	mov	r0, r3
 80114a0:	f7fc f983 	bl	800d7aa <unlock_fs>
 80114a4:	2301      	movs	r3, #1
 80114a6:	e10d      	b.n	80116c4 <f_sync+0x286>
				fp->flag &= (BYTE)~FA_DIRTY;
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80114ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80114b2:	b2da      	uxtb	r2, r3
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80114ba:	f7f8 fe7f 	bl	800a1bc <get_fattime>
 80114be:	66b8      	str	r0, [r7, #104]	; 0x68
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 80114c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80114c2:	781b      	ldrb	r3, [r3, #0]
 80114c4:	2b04      	cmp	r3, #4
 80114c6:	f040 80a9 	bne.w	801161c <f_sync+0x1de>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	4618      	mov	r0, r3
 80114ce:	f7fc ff67 	bl	800e3a0 <fill_first_frag>
 80114d2:	4603      	mov	r3, r0
 80114d4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
				if (res == FR_OK) {
 80114d8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80114dc:	2b00      	cmp	r3, #0
 80114de:	d10a      	bne.n	80114f6 <f_sync+0xb8>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 80114e0:	6878      	ldr	r0, [r7, #4]
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80114e6:	f04f 32ff 	mov.w	r2, #4294967295
 80114ea:	4619      	mov	r1, r3
 80114ec:	f7fc ff87 	bl	800e3fe <fill_last_frag>
 80114f0:	4603      	mov	r3, r0
 80114f2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
				}
				if (res == FR_OK) {
 80114f6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80114fa:	2b00      	cmp	r3, #0
 80114fc:	f040 80d9 	bne.w	80116b2 <f_sync+0x274>
					INIT_NAMBUF(fs);
 8011500:	f44f 608c 	mov.w	r0, #1120	; 0x460
 8011504:	f000 fa7b 	bl	80119fe <ff_memalloc>
 8011508:	6638      	str	r0, [r7, #96]	; 0x60
 801150a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801150c:	2b00      	cmp	r3, #0
 801150e:	d106      	bne.n	801151e <f_sync+0xe0>
 8011510:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011512:	2111      	movs	r1, #17
 8011514:	4618      	mov	r0, r3
 8011516:	f7fc f948 	bl	800d7aa <unlock_fs>
 801151a:	2311      	movs	r3, #17
 801151c:	e0d2      	b.n	80116c4 <f_sync+0x286>
 801151e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011520:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011522:	611a      	str	r2, [r3, #16]
 8011524:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011526:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011528:	f502 7200 	add.w	r2, r2, #512	; 0x200
 801152c:	615a      	str	r2, [r3, #20]
					res = load_obj_dir(&dj, &fp->obj);	/* Load directory entry block */
 801152e:	687a      	ldr	r2, [r7, #4]
 8011530:	f107 0308 	add.w	r3, r7, #8
 8011534:	4611      	mov	r1, r2
 8011536:	4618      	mov	r0, r3
 8011538:	f7fd feb6 	bl	800f2a8 <load_obj_dir>
 801153c:	4603      	mov	r3, r0
 801153e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					if (res == FR_OK) {
 8011542:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8011546:	2b00      	cmp	r3, #0
 8011548:	d164      	bne.n	8011614 <f_sync+0x1d6>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive bit */
 801154a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801154c:	695b      	ldr	r3, [r3, #20]
 801154e:	3304      	adds	r3, #4
 8011550:	781a      	ldrb	r2, [r3, #0]
 8011552:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011554:	695b      	ldr	r3, [r3, #20]
 8011556:	3304      	adds	r3, #4
 8011558:	f042 0220 	orr.w	r2, r2, #32
 801155c:	b2d2      	uxtb	r2, r2
 801155e:	701a      	strb	r2, [r3, #0]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation info */
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	79da      	ldrb	r2, [r3, #7]
 8011564:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011566:	695b      	ldr	r3, [r3, #20]
 8011568:	3321      	adds	r3, #33	; 0x21
 801156a:	f042 0201 	orr.w	r2, r2, #1
 801156e:	b2d2      	uxtb	r2, r2
 8011570:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);
 8011572:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011574:	695b      	ldr	r3, [r3, #20]
 8011576:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	689b      	ldr	r3, [r3, #8]
 801157e:	4619      	mov	r1, r3
 8011580:	4610      	mov	r0, r2
 8011582:	f7fb ffcc 	bl	800d51e <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
 8011586:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011588:	695b      	ldr	r3, [r3, #20]
 801158a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8011594:	461a      	mov	r2, r3
 8011596:	4623      	mov	r3, r4
 8011598:	4608      	mov	r0, r1
 801159a:	f7fb ffec 	bl	800d576 <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
 801159e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80115a0:	695b      	ldr	r3, [r3, #20]
 80115a2:	f103 0128 	add.w	r1, r3, #40	; 0x28
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 80115ac:	461a      	mov	r2, r3
 80115ae:	4623      	mov	r3, r4
 80115b0:	4608      	mov	r0, r1
 80115b2:	f7fb ffe0 	bl	800d576 <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 80115b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80115b8:	695b      	ldr	r3, [r3, #20]
 80115ba:	330c      	adds	r3, #12
 80115bc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80115be:	4618      	mov	r0, r3
 80115c0:	f7fb ffad 	bl	800d51e <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
 80115c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80115c6:	695b      	ldr	r3, [r3, #20]
 80115c8:	3315      	adds	r3, #21
 80115ca:	2200      	movs	r2, #0
 80115cc:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 80115ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80115d0:	695b      	ldr	r3, [r3, #20]
 80115d2:	3310      	adds	r3, #16
 80115d4:	2100      	movs	r1, #0
 80115d6:	4618      	mov	r0, r3
 80115d8:	f7fb ffa1 	bl	800d51e <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
 80115dc:	f107 0308 	add.w	r3, r7, #8
 80115e0:	4618      	mov	r0, r3
 80115e2:	f7fd fe9e 	bl	800f322 <store_xdir>
 80115e6:	4603      	mov	r3, r0
 80115e8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
						if (res == FR_OK) {
 80115ec:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80115f0:	2b00      	cmp	r3, #0
 80115f2:	d10f      	bne.n	8011614 <f_sync+0x1d6>
							res = sync_fs(fs);
 80115f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80115f6:	4618      	mov	r0, r3
 80115f8:	f7fc fad0 	bl	800db9c <sync_fs>
 80115fc:	4603      	mov	r3, r0
 80115fe:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
							fp->flag &= (BYTE)~FA_MODIFIED;
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011608:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801160c:	b2da      	uxtb	r2, r3
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
						}
					}
					FREE_NAMBUF();
 8011614:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8011616:	f000 f9fe 	bl	8011a16 <ff_memfree>
 801161a:	e04a      	b.n	80116b2 <f_sync+0x274>
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801161c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011622:	4619      	mov	r1, r3
 8011624:	4610      	mov	r0, r2
 8011626:	f7fc fa8b 	bl	800db40 <move_window>
 801162a:	4603      	mov	r3, r0
 801162c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
				if (res == FR_OK) {
 8011630:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8011634:	2b00      	cmp	r3, #0
 8011636:	d13c      	bne.n	80116b2 <f_sync+0x274>
					dir = fp->dir_ptr;
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801163c:	667b      	str	r3, [r7, #100]	; 0x64
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801163e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011640:	330b      	adds	r3, #11
 8011642:	781a      	ldrb	r2, [r3, #0]
 8011644:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011646:	330b      	adds	r3, #11
 8011648:	f042 0220 	orr.w	r2, r2, #32
 801164c:	b2d2      	uxtb	r2, r2
 801164e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	6818      	ldr	r0, [r3, #0]
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	689b      	ldr	r3, [r3, #8]
 8011658:	461a      	mov	r2, r3
 801165a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 801165c:	f7fd faf1 	bl	800ec42 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8011660:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011662:	f103 021c 	add.w	r2, r3, #28
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 801166c:	4619      	mov	r1, r3
 801166e:	4610      	mov	r0, r2
 8011670:	f7fb ff55 	bl	800d51e <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8011674:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011676:	3316      	adds	r3, #22
 8011678:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801167a:	4618      	mov	r0, r3
 801167c:	f7fb ff4f 	bl	800d51e <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8011680:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011682:	3312      	adds	r3, #18
 8011684:	2100      	movs	r1, #0
 8011686:	4618      	mov	r0, r3
 8011688:	f7fb ff2e 	bl	800d4e8 <st_word>
					fs->wflag = 1;
 801168c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801168e:	2201      	movs	r2, #1
 8011690:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8011692:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011694:	4618      	mov	r0, r3
 8011696:	f7fc fa81 	bl	800db9c <sync_fs>
 801169a:	4603      	mov	r3, r0
 801169c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					fp->flag &= (BYTE)~FA_MODIFIED;
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80116a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80116aa:	b2da      	uxtb	r2, r3
 80116ac:	687b      	ldr	r3, [r7, #4]
 80116ae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80116b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80116b4:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 80116b8:	4611      	mov	r1, r2
 80116ba:	4618      	mov	r0, r3
 80116bc:	f7fc f875 	bl	800d7aa <unlock_fs>
 80116c0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 80116c4:	4618      	mov	r0, r3
 80116c6:	3774      	adds	r7, #116	; 0x74
 80116c8:	46bd      	mov	sp, r7
 80116ca:	bd90      	pop	{r4, r7, pc}

080116cc <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80116cc:	b580      	push	{r7, lr}
 80116ce:	b084      	sub	sp, #16
 80116d0:	af00      	add	r7, sp, #0
 80116d2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80116d4:	6878      	ldr	r0, [r7, #4]
 80116d6:	f7ff feb2 	bl	801143e <f_sync>
 80116da:	4603      	mov	r3, r0
 80116dc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80116de:	7bfb      	ldrb	r3, [r7, #15]
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	d11d      	bne.n	8011720 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80116e4:	687b      	ldr	r3, [r7, #4]
 80116e6:	f107 0208 	add.w	r2, r7, #8
 80116ea:	4611      	mov	r1, r2
 80116ec:	4618      	mov	r0, r3
 80116ee:	f7ff f919 	bl	8010924 <validate>
 80116f2:	4603      	mov	r3, r0
 80116f4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80116f6:	7bfb      	ldrb	r3, [r7, #15]
 80116f8:	2b00      	cmp	r3, #0
 80116fa:	d111      	bne.n	8011720 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011700:	4618      	mov	r0, r3
 8011702:	f7fc f979 	bl	800d9f8 <dec_lock>
 8011706:	4603      	mov	r3, r0
 8011708:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801170a:	7bfb      	ldrb	r3, [r7, #15]
 801170c:	2b00      	cmp	r3, #0
 801170e:	d102      	bne.n	8011716 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	2200      	movs	r2, #0
 8011714:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 8011716:	68bb      	ldr	r3, [r7, #8]
 8011718:	2100      	movs	r1, #0
 801171a:	4618      	mov	r0, r3
 801171c:	f7fc f845 	bl	800d7aa <unlock_fs>
#endif
		}
	}
	return res;
 8011720:	7bfb      	ldrb	r3, [r7, #15]
}
 8011722:	4618      	mov	r0, r3
 8011724:	3710      	adds	r7, #16
 8011726:	46bd      	mov	sp, r7
 8011728:	bd80      	pop	{r7, pc}
	...

0801172c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801172c:	b480      	push	{r7}
 801172e:	b087      	sub	sp, #28
 8011730:	af00      	add	r7, sp, #0
 8011732:	60f8      	str	r0, [r7, #12]
 8011734:	60b9      	str	r1, [r7, #8]
 8011736:	4613      	mov	r3, r2
 8011738:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801173a:	2301      	movs	r3, #1
 801173c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801173e:	2300      	movs	r3, #0
 8011740:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8011742:	4b1f      	ldr	r3, [pc, #124]	; (80117c0 <FATFS_LinkDriverEx+0x94>)
 8011744:	7a5b      	ldrb	r3, [r3, #9]
 8011746:	b2db      	uxtb	r3, r3
 8011748:	2b00      	cmp	r3, #0
 801174a:	d131      	bne.n	80117b0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801174c:	4b1c      	ldr	r3, [pc, #112]	; (80117c0 <FATFS_LinkDriverEx+0x94>)
 801174e:	7a5b      	ldrb	r3, [r3, #9]
 8011750:	b2db      	uxtb	r3, r3
 8011752:	461a      	mov	r2, r3
 8011754:	4b1a      	ldr	r3, [pc, #104]	; (80117c0 <FATFS_LinkDriverEx+0x94>)
 8011756:	2100      	movs	r1, #0
 8011758:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801175a:	4b19      	ldr	r3, [pc, #100]	; (80117c0 <FATFS_LinkDriverEx+0x94>)
 801175c:	7a5b      	ldrb	r3, [r3, #9]
 801175e:	b2db      	uxtb	r3, r3
 8011760:	4a17      	ldr	r2, [pc, #92]	; (80117c0 <FATFS_LinkDriverEx+0x94>)
 8011762:	009b      	lsls	r3, r3, #2
 8011764:	4413      	add	r3, r2
 8011766:	68fa      	ldr	r2, [r7, #12]
 8011768:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801176a:	4b15      	ldr	r3, [pc, #84]	; (80117c0 <FATFS_LinkDriverEx+0x94>)
 801176c:	7a5b      	ldrb	r3, [r3, #9]
 801176e:	b2db      	uxtb	r3, r3
 8011770:	461a      	mov	r2, r3
 8011772:	4b13      	ldr	r3, [pc, #76]	; (80117c0 <FATFS_LinkDriverEx+0x94>)
 8011774:	4413      	add	r3, r2
 8011776:	79fa      	ldrb	r2, [r7, #7]
 8011778:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801177a:	4b11      	ldr	r3, [pc, #68]	; (80117c0 <FATFS_LinkDriverEx+0x94>)
 801177c:	7a5b      	ldrb	r3, [r3, #9]
 801177e:	b2db      	uxtb	r3, r3
 8011780:	1c5a      	adds	r2, r3, #1
 8011782:	b2d1      	uxtb	r1, r2
 8011784:	4a0e      	ldr	r2, [pc, #56]	; (80117c0 <FATFS_LinkDriverEx+0x94>)
 8011786:	7251      	strb	r1, [r2, #9]
 8011788:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801178a:	7dbb      	ldrb	r3, [r7, #22]
 801178c:	3330      	adds	r3, #48	; 0x30
 801178e:	b2da      	uxtb	r2, r3
 8011790:	68bb      	ldr	r3, [r7, #8]
 8011792:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8011794:	68bb      	ldr	r3, [r7, #8]
 8011796:	3301      	adds	r3, #1
 8011798:	223a      	movs	r2, #58	; 0x3a
 801179a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801179c:	68bb      	ldr	r3, [r7, #8]
 801179e:	3302      	adds	r3, #2
 80117a0:	222f      	movs	r2, #47	; 0x2f
 80117a2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80117a4:	68bb      	ldr	r3, [r7, #8]
 80117a6:	3303      	adds	r3, #3
 80117a8:	2200      	movs	r2, #0
 80117aa:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80117ac:	2300      	movs	r3, #0
 80117ae:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80117b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80117b2:	4618      	mov	r0, r3
 80117b4:	371c      	adds	r7, #28
 80117b6:	46bd      	mov	sp, r7
 80117b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117bc:	4770      	bx	lr
 80117be:	bf00      	nop
 80117c0:	200002c4 	.word	0x200002c4

080117c4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80117c4:	b580      	push	{r7, lr}
 80117c6:	b082      	sub	sp, #8
 80117c8:	af00      	add	r7, sp, #0
 80117ca:	6078      	str	r0, [r7, #4]
 80117cc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80117ce:	2200      	movs	r2, #0
 80117d0:	6839      	ldr	r1, [r7, #0]
 80117d2:	6878      	ldr	r0, [r7, #4]
 80117d4:	f7ff ffaa 	bl	801172c <FATFS_LinkDriverEx>
 80117d8:	4603      	mov	r3, r0
}
 80117da:	4618      	mov	r0, r3
 80117dc:	3708      	adds	r7, #8
 80117de:	46bd      	mov	sp, r7
 80117e0:	bd80      	pop	{r7, pc}
	...

080117e4 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 80117e4:	b480      	push	{r7}
 80117e6:	b085      	sub	sp, #20
 80117e8:	af00      	add	r7, sp, #0
 80117ea:	4603      	mov	r3, r0
 80117ec:	6039      	str	r1, [r7, #0]
 80117ee:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80117f0:	88fb      	ldrh	r3, [r7, #6]
 80117f2:	2b7f      	cmp	r3, #127	; 0x7f
 80117f4:	d802      	bhi.n	80117fc <ff_convert+0x18>
		c = chr;
 80117f6:	88fb      	ldrh	r3, [r7, #6]
 80117f8:	81fb      	strh	r3, [r7, #14]
 80117fa:	e025      	b.n	8011848 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 80117fc:	683b      	ldr	r3, [r7, #0]
 80117fe:	2b00      	cmp	r3, #0
 8011800:	d00b      	beq.n	801181a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8011802:	88fb      	ldrh	r3, [r7, #6]
 8011804:	2bff      	cmp	r3, #255	; 0xff
 8011806:	d805      	bhi.n	8011814 <ff_convert+0x30>
 8011808:	88fb      	ldrh	r3, [r7, #6]
 801180a:	3b80      	subs	r3, #128	; 0x80
 801180c:	4a12      	ldr	r2, [pc, #72]	; (8011858 <ff_convert+0x74>)
 801180e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011812:	e000      	b.n	8011816 <ff_convert+0x32>
 8011814:	2300      	movs	r3, #0
 8011816:	81fb      	strh	r3, [r7, #14]
 8011818:	e016      	b.n	8011848 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 801181a:	2300      	movs	r3, #0
 801181c:	81fb      	strh	r3, [r7, #14]
 801181e:	e009      	b.n	8011834 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8011820:	89fb      	ldrh	r3, [r7, #14]
 8011822:	4a0d      	ldr	r2, [pc, #52]	; (8011858 <ff_convert+0x74>)
 8011824:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011828:	88fa      	ldrh	r2, [r7, #6]
 801182a:	429a      	cmp	r2, r3
 801182c:	d006      	beq.n	801183c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 801182e:	89fb      	ldrh	r3, [r7, #14]
 8011830:	3301      	adds	r3, #1
 8011832:	81fb      	strh	r3, [r7, #14]
 8011834:	89fb      	ldrh	r3, [r7, #14]
 8011836:	2b7f      	cmp	r3, #127	; 0x7f
 8011838:	d9f2      	bls.n	8011820 <ff_convert+0x3c>
 801183a:	e000      	b.n	801183e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 801183c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 801183e:	89fb      	ldrh	r3, [r7, #14]
 8011840:	3380      	adds	r3, #128	; 0x80
 8011842:	b29b      	uxth	r3, r3
 8011844:	b2db      	uxtb	r3, r3
 8011846:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8011848:	89fb      	ldrh	r3, [r7, #14]
}
 801184a:	4618      	mov	r0, r3
 801184c:	3714      	adds	r7, #20
 801184e:	46bd      	mov	sp, r7
 8011850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011854:	4770      	bx	lr
 8011856:	bf00      	nop
 8011858:	08016210 	.word	0x08016210

0801185c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 801185c:	b480      	push	{r7}
 801185e:	b087      	sub	sp, #28
 8011860:	af00      	add	r7, sp, #0
 8011862:	4603      	mov	r3, r0
 8011864:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8011866:	88fb      	ldrh	r3, [r7, #6]
 8011868:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801186c:	d201      	bcs.n	8011872 <ff_wtoupper+0x16>
 801186e:	4b3e      	ldr	r3, [pc, #248]	; (8011968 <ff_wtoupper+0x10c>)
 8011870:	e000      	b.n	8011874 <ff_wtoupper+0x18>
 8011872:	4b3e      	ldr	r3, [pc, #248]	; (801196c <ff_wtoupper+0x110>)
 8011874:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8011876:	697b      	ldr	r3, [r7, #20]
 8011878:	1c9a      	adds	r2, r3, #2
 801187a:	617a      	str	r2, [r7, #20]
 801187c:	881b      	ldrh	r3, [r3, #0]
 801187e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8011880:	8a7b      	ldrh	r3, [r7, #18]
 8011882:	2b00      	cmp	r3, #0
 8011884:	d068      	beq.n	8011958 <ff_wtoupper+0xfc>
 8011886:	88fa      	ldrh	r2, [r7, #6]
 8011888:	8a7b      	ldrh	r3, [r7, #18]
 801188a:	429a      	cmp	r2, r3
 801188c:	d364      	bcc.n	8011958 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 801188e:	697b      	ldr	r3, [r7, #20]
 8011890:	1c9a      	adds	r2, r3, #2
 8011892:	617a      	str	r2, [r7, #20]
 8011894:	881b      	ldrh	r3, [r3, #0]
 8011896:	823b      	strh	r3, [r7, #16]
 8011898:	8a3b      	ldrh	r3, [r7, #16]
 801189a:	0a1b      	lsrs	r3, r3, #8
 801189c:	81fb      	strh	r3, [r7, #14]
 801189e:	8a3b      	ldrh	r3, [r7, #16]
 80118a0:	b2db      	uxtb	r3, r3
 80118a2:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80118a4:	88fa      	ldrh	r2, [r7, #6]
 80118a6:	8a79      	ldrh	r1, [r7, #18]
 80118a8:	8a3b      	ldrh	r3, [r7, #16]
 80118aa:	440b      	add	r3, r1
 80118ac:	429a      	cmp	r2, r3
 80118ae:	da49      	bge.n	8011944 <ff_wtoupper+0xe8>
			switch (cmd) {
 80118b0:	89fb      	ldrh	r3, [r7, #14]
 80118b2:	2b08      	cmp	r3, #8
 80118b4:	d84f      	bhi.n	8011956 <ff_wtoupper+0xfa>
 80118b6:	a201      	add	r2, pc, #4	; (adr r2, 80118bc <ff_wtoupper+0x60>)
 80118b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80118bc:	080118e1 	.word	0x080118e1
 80118c0:	080118f3 	.word	0x080118f3
 80118c4:	08011909 	.word	0x08011909
 80118c8:	08011911 	.word	0x08011911
 80118cc:	08011919 	.word	0x08011919
 80118d0:	08011921 	.word	0x08011921
 80118d4:	08011929 	.word	0x08011929
 80118d8:	08011931 	.word	0x08011931
 80118dc:	08011939 	.word	0x08011939
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 80118e0:	88fa      	ldrh	r2, [r7, #6]
 80118e2:	8a7b      	ldrh	r3, [r7, #18]
 80118e4:	1ad3      	subs	r3, r2, r3
 80118e6:	005b      	lsls	r3, r3, #1
 80118e8:	697a      	ldr	r2, [r7, #20]
 80118ea:	4413      	add	r3, r2
 80118ec:	881b      	ldrh	r3, [r3, #0]
 80118ee:	80fb      	strh	r3, [r7, #6]
 80118f0:	e027      	b.n	8011942 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 80118f2:	88fa      	ldrh	r2, [r7, #6]
 80118f4:	8a7b      	ldrh	r3, [r7, #18]
 80118f6:	1ad3      	subs	r3, r2, r3
 80118f8:	b29b      	uxth	r3, r3
 80118fa:	f003 0301 	and.w	r3, r3, #1
 80118fe:	b29b      	uxth	r3, r3
 8011900:	88fa      	ldrh	r2, [r7, #6]
 8011902:	1ad3      	subs	r3, r2, r3
 8011904:	80fb      	strh	r3, [r7, #6]
 8011906:	e01c      	b.n	8011942 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8011908:	88fb      	ldrh	r3, [r7, #6]
 801190a:	3b10      	subs	r3, #16
 801190c:	80fb      	strh	r3, [r7, #6]
 801190e:	e018      	b.n	8011942 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8011910:	88fb      	ldrh	r3, [r7, #6]
 8011912:	3b20      	subs	r3, #32
 8011914:	80fb      	strh	r3, [r7, #6]
 8011916:	e014      	b.n	8011942 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8011918:	88fb      	ldrh	r3, [r7, #6]
 801191a:	3b30      	subs	r3, #48	; 0x30
 801191c:	80fb      	strh	r3, [r7, #6]
 801191e:	e010      	b.n	8011942 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8011920:	88fb      	ldrh	r3, [r7, #6]
 8011922:	3b1a      	subs	r3, #26
 8011924:	80fb      	strh	r3, [r7, #6]
 8011926:	e00c      	b.n	8011942 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8011928:	88fb      	ldrh	r3, [r7, #6]
 801192a:	3308      	adds	r3, #8
 801192c:	80fb      	strh	r3, [r7, #6]
 801192e:	e008      	b.n	8011942 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8011930:	88fb      	ldrh	r3, [r7, #6]
 8011932:	3b50      	subs	r3, #80	; 0x50
 8011934:	80fb      	strh	r3, [r7, #6]
 8011936:	e004      	b.n	8011942 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8011938:	88fb      	ldrh	r3, [r7, #6]
 801193a:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 801193e:	80fb      	strh	r3, [r7, #6]
 8011940:	bf00      	nop
			}
			break;
 8011942:	e008      	b.n	8011956 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8011944:	89fb      	ldrh	r3, [r7, #14]
 8011946:	2b00      	cmp	r3, #0
 8011948:	d195      	bne.n	8011876 <ff_wtoupper+0x1a>
 801194a:	8a3b      	ldrh	r3, [r7, #16]
 801194c:	005b      	lsls	r3, r3, #1
 801194e:	697a      	ldr	r2, [r7, #20]
 8011950:	4413      	add	r3, r2
 8011952:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8011954:	e78f      	b.n	8011876 <ff_wtoupper+0x1a>
			break;
 8011956:	bf00      	nop
	}

	return chr;
 8011958:	88fb      	ldrh	r3, [r7, #6]
}
 801195a:	4618      	mov	r0, r3
 801195c:	371c      	adds	r7, #28
 801195e:	46bd      	mov	sp, r7
 8011960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011964:	4770      	bx	lr
 8011966:	bf00      	nop
 8011968:	08016310 	.word	0x08016310
 801196c:	08016504 	.word	0x08016504

08011970 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8011970:	b580      	push	{r7, lr}
 8011972:	b084      	sub	sp, #16
 8011974:	af00      	add	r7, sp, #0
 8011976:	4603      	mov	r3, r0
 8011978:	6039      	str	r1, [r7, #0]
 801197a:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 801197c:	2200      	movs	r2, #0
 801197e:	2101      	movs	r1, #1
 8011980:	2001      	movs	r0, #1
 8011982:	f000 f9b5 	bl	8011cf0 <osSemaphoreNew>
 8011986:	4602      	mov	r2, r0
 8011988:	683b      	ldr	r3, [r7, #0]
 801198a:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 801198c:	683b      	ldr	r3, [r7, #0]
 801198e:	681b      	ldr	r3, [r3, #0]
 8011990:	2b00      	cmp	r3, #0
 8011992:	bf14      	ite	ne
 8011994:	2301      	movne	r3, #1
 8011996:	2300      	moveq	r3, #0
 8011998:	b2db      	uxtb	r3, r3
 801199a:	60fb      	str	r3, [r7, #12]

    return ret;
 801199c:	68fb      	ldr	r3, [r7, #12]
}
 801199e:	4618      	mov	r0, r3
 80119a0:	3710      	adds	r7, #16
 80119a2:	46bd      	mov	sp, r7
 80119a4:	bd80      	pop	{r7, pc}

080119a6 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 80119a6:	b580      	push	{r7, lr}
 80119a8:	b082      	sub	sp, #8
 80119aa:	af00      	add	r7, sp, #0
 80119ac:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 80119ae:	6878      	ldr	r0, [r7, #4]
 80119b0:	f000 fafa 	bl	8011fa8 <osSemaphoreDelete>
#endif
    return 1;
 80119b4:	2301      	movs	r3, #1
}
 80119b6:	4618      	mov	r0, r3
 80119b8:	3708      	adds	r7, #8
 80119ba:	46bd      	mov	sp, r7
 80119bc:	bd80      	pop	{r7, pc}

080119be <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 80119be:	b580      	push	{r7, lr}
 80119c0:	b084      	sub	sp, #16
 80119c2:	af00      	add	r7, sp, #0
 80119c4:	6078      	str	r0, [r7, #4]
  int ret = 0;
 80119c6:	2300      	movs	r3, #0
 80119c8:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 80119ca:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80119ce:	6878      	ldr	r0, [r7, #4]
 80119d0:	f000 fa2c 	bl	8011e2c <osSemaphoreAcquire>
 80119d4:	4603      	mov	r3, r0
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	d101      	bne.n	80119de <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 80119da:	2301      	movs	r3, #1
 80119dc:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80119de:	68fb      	ldr	r3, [r7, #12]
}
 80119e0:	4618      	mov	r0, r3
 80119e2:	3710      	adds	r7, #16
 80119e4:	46bd      	mov	sp, r7
 80119e6:	bd80      	pop	{r7, pc}

080119e8 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 80119e8:	b580      	push	{r7, lr}
 80119ea:	b082      	sub	sp, #8
 80119ec:	af00      	add	r7, sp, #0
 80119ee:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 80119f0:	6878      	ldr	r0, [r7, #4]
 80119f2:	f000 fa81 	bl	8011ef8 <osSemaphoreRelease>
#endif
}
 80119f6:	bf00      	nop
 80119f8:	3708      	adds	r7, #8
 80119fa:	46bd      	mov	sp, r7
 80119fc:	bd80      	pop	{r7, pc}

080119fe <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 80119fe:	b580      	push	{r7, lr}
 8011a00:	b082      	sub	sp, #8
 8011a02:	af00      	add	r7, sp, #0
 8011a04:	6078      	str	r0, [r7, #4]
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 8011a06:	6878      	ldr	r0, [r7, #4]
 8011a08:	f003 faf0 	bl	8014fec <pvPortMalloc>
 8011a0c:	4603      	mov	r3, r0
}
 8011a0e:	4618      	mov	r0, r3
 8011a10:	3708      	adds	r7, #8
 8011a12:	46bd      	mov	sp, r7
 8011a14:	bd80      	pop	{r7, pc}

08011a16 <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 8011a16:	b580      	push	{r7, lr}
 8011a18:	b082      	sub	sp, #8
 8011a1a:	af00      	add	r7, sp, #0
 8011a1c:	6078      	str	r0, [r7, #4]
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 8011a1e:	6878      	ldr	r0, [r7, #4]
 8011a20:	f003 fbac 	bl	801517c <vPortFree>
}
 8011a24:	bf00      	nop
 8011a26:	3708      	adds	r7, #8
 8011a28:	46bd      	mov	sp, r7
 8011a2a:	bd80      	pop	{r7, pc}

08011a2c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8011a2c:	b480      	push	{r7}
 8011a2e:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8011a30:	bf00      	nop
 8011a32:	46bd      	mov	sp, r7
 8011a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a38:	4770      	bx	lr
	...

08011a3c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8011a3c:	b480      	push	{r7}
 8011a3e:	b085      	sub	sp, #20
 8011a40:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011a42:	f3ef 8305 	mrs	r3, IPSR
 8011a46:	60bb      	str	r3, [r7, #8]
  return(result);
 8011a48:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8011a4a:	2b00      	cmp	r3, #0
 8011a4c:	d10f      	bne.n	8011a6e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011a4e:	f3ef 8310 	mrs	r3, PRIMASK
 8011a52:	607b      	str	r3, [r7, #4]
  return(result);
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	2b00      	cmp	r3, #0
 8011a58:	d105      	bne.n	8011a66 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011a5a:	f3ef 8311 	mrs	r3, BASEPRI
 8011a5e:	603b      	str	r3, [r7, #0]
  return(result);
 8011a60:	683b      	ldr	r3, [r7, #0]
 8011a62:	2b00      	cmp	r3, #0
 8011a64:	d007      	beq.n	8011a76 <osKernelInitialize+0x3a>
 8011a66:	4b0e      	ldr	r3, [pc, #56]	; (8011aa0 <osKernelInitialize+0x64>)
 8011a68:	681b      	ldr	r3, [r3, #0]
 8011a6a:	2b02      	cmp	r3, #2
 8011a6c:	d103      	bne.n	8011a76 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8011a6e:	f06f 0305 	mvn.w	r3, #5
 8011a72:	60fb      	str	r3, [r7, #12]
 8011a74:	e00c      	b.n	8011a90 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8011a76:	4b0a      	ldr	r3, [pc, #40]	; (8011aa0 <osKernelInitialize+0x64>)
 8011a78:	681b      	ldr	r3, [r3, #0]
 8011a7a:	2b00      	cmp	r3, #0
 8011a7c:	d105      	bne.n	8011a8a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8011a7e:	4b08      	ldr	r3, [pc, #32]	; (8011aa0 <osKernelInitialize+0x64>)
 8011a80:	2201      	movs	r2, #1
 8011a82:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8011a84:	2300      	movs	r3, #0
 8011a86:	60fb      	str	r3, [r7, #12]
 8011a88:	e002      	b.n	8011a90 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8011a8a:	f04f 33ff 	mov.w	r3, #4294967295
 8011a8e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8011a90:	68fb      	ldr	r3, [r7, #12]
}
 8011a92:	4618      	mov	r0, r3
 8011a94:	3714      	adds	r7, #20
 8011a96:	46bd      	mov	sp, r7
 8011a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a9c:	4770      	bx	lr
 8011a9e:	bf00      	nop
 8011aa0:	200002d0 	.word	0x200002d0

08011aa4 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 8011aa4:	b580      	push	{r7, lr}
 8011aa6:	b082      	sub	sp, #8
 8011aa8:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 8011aaa:	f002 fb3d 	bl	8014128 <xTaskGetSchedulerState>
 8011aae:	4603      	mov	r3, r0
 8011ab0:	2b00      	cmp	r3, #0
 8011ab2:	d004      	beq.n	8011abe <osKernelGetState+0x1a>
 8011ab4:	2b02      	cmp	r3, #2
 8011ab6:	d105      	bne.n	8011ac4 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 8011ab8:	2302      	movs	r3, #2
 8011aba:	607b      	str	r3, [r7, #4]
      break;
 8011abc:	e00c      	b.n	8011ad8 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 8011abe:	2303      	movs	r3, #3
 8011ac0:	607b      	str	r3, [r7, #4]
      break;
 8011ac2:	e009      	b.n	8011ad8 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 8011ac4:	4b07      	ldr	r3, [pc, #28]	; (8011ae4 <osKernelGetState+0x40>)
 8011ac6:	681b      	ldr	r3, [r3, #0]
 8011ac8:	2b01      	cmp	r3, #1
 8011aca:	d102      	bne.n	8011ad2 <osKernelGetState+0x2e>
        state = osKernelReady;
 8011acc:	2301      	movs	r3, #1
 8011ace:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 8011ad0:	e001      	b.n	8011ad6 <osKernelGetState+0x32>
        state = osKernelInactive;
 8011ad2:	2300      	movs	r3, #0
 8011ad4:	607b      	str	r3, [r7, #4]
      break;
 8011ad6:	bf00      	nop
  }

  return (state);
 8011ad8:	687b      	ldr	r3, [r7, #4]
}
 8011ada:	4618      	mov	r0, r3
 8011adc:	3708      	adds	r7, #8
 8011ade:	46bd      	mov	sp, r7
 8011ae0:	bd80      	pop	{r7, pc}
 8011ae2:	bf00      	nop
 8011ae4:	200002d0 	.word	0x200002d0

08011ae8 <osKernelStart>:

osStatus_t osKernelStart (void) {
 8011ae8:	b580      	push	{r7, lr}
 8011aea:	b084      	sub	sp, #16
 8011aec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011aee:	f3ef 8305 	mrs	r3, IPSR
 8011af2:	60bb      	str	r3, [r7, #8]
  return(result);
 8011af4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8011af6:	2b00      	cmp	r3, #0
 8011af8:	d10f      	bne.n	8011b1a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011afa:	f3ef 8310 	mrs	r3, PRIMASK
 8011afe:	607b      	str	r3, [r7, #4]
  return(result);
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	2b00      	cmp	r3, #0
 8011b04:	d105      	bne.n	8011b12 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011b06:	f3ef 8311 	mrs	r3, BASEPRI
 8011b0a:	603b      	str	r3, [r7, #0]
  return(result);
 8011b0c:	683b      	ldr	r3, [r7, #0]
 8011b0e:	2b00      	cmp	r3, #0
 8011b10:	d007      	beq.n	8011b22 <osKernelStart+0x3a>
 8011b12:	4b0f      	ldr	r3, [pc, #60]	; (8011b50 <osKernelStart+0x68>)
 8011b14:	681b      	ldr	r3, [r3, #0]
 8011b16:	2b02      	cmp	r3, #2
 8011b18:	d103      	bne.n	8011b22 <osKernelStart+0x3a>
    stat = osErrorISR;
 8011b1a:	f06f 0305 	mvn.w	r3, #5
 8011b1e:	60fb      	str	r3, [r7, #12]
 8011b20:	e010      	b.n	8011b44 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8011b22:	4b0b      	ldr	r3, [pc, #44]	; (8011b50 <osKernelStart+0x68>)
 8011b24:	681b      	ldr	r3, [r3, #0]
 8011b26:	2b01      	cmp	r3, #1
 8011b28:	d109      	bne.n	8011b3e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8011b2a:	f7ff ff7f 	bl	8011a2c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8011b2e:	4b08      	ldr	r3, [pc, #32]	; (8011b50 <osKernelStart+0x68>)
 8011b30:	2202      	movs	r2, #2
 8011b32:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8011b34:	f001 fe9a 	bl	801386c <vTaskStartScheduler>
      stat = osOK;
 8011b38:	2300      	movs	r3, #0
 8011b3a:	60fb      	str	r3, [r7, #12]
 8011b3c:	e002      	b.n	8011b44 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8011b3e:	f04f 33ff 	mov.w	r3, #4294967295
 8011b42:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8011b44:	68fb      	ldr	r3, [r7, #12]
}
 8011b46:	4618      	mov	r0, r3
 8011b48:	3710      	adds	r7, #16
 8011b4a:	46bd      	mov	sp, r7
 8011b4c:	bd80      	pop	{r7, pc}
 8011b4e:	bf00      	nop
 8011b50:	200002d0 	.word	0x200002d0

08011b54 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8011b54:	b580      	push	{r7, lr}
 8011b56:	b084      	sub	sp, #16
 8011b58:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011b5a:	f3ef 8305 	mrs	r3, IPSR
 8011b5e:	60bb      	str	r3, [r7, #8]
  return(result);
 8011b60:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 8011b62:	2b00      	cmp	r3, #0
 8011b64:	d10f      	bne.n	8011b86 <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011b66:	f3ef 8310 	mrs	r3, PRIMASK
 8011b6a:	607b      	str	r3, [r7, #4]
  return(result);
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	2b00      	cmp	r3, #0
 8011b70:	d105      	bne.n	8011b7e <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011b72:	f3ef 8311 	mrs	r3, BASEPRI
 8011b76:	603b      	str	r3, [r7, #0]
  return(result);
 8011b78:	683b      	ldr	r3, [r7, #0]
 8011b7a:	2b00      	cmp	r3, #0
 8011b7c:	d007      	beq.n	8011b8e <osKernelGetTickCount+0x3a>
 8011b7e:	4b08      	ldr	r3, [pc, #32]	; (8011ba0 <osKernelGetTickCount+0x4c>)
 8011b80:	681b      	ldr	r3, [r3, #0]
 8011b82:	2b02      	cmp	r3, #2
 8011b84:	d103      	bne.n	8011b8e <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 8011b86:	f001 ff95 	bl	8013ab4 <xTaskGetTickCountFromISR>
 8011b8a:	60f8      	str	r0, [r7, #12]
 8011b8c:	e002      	b.n	8011b94 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 8011b8e:	f001 ff81 	bl	8013a94 <xTaskGetTickCount>
 8011b92:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 8011b94:	68fb      	ldr	r3, [r7, #12]
}
 8011b96:	4618      	mov	r0, r3
 8011b98:	3710      	adds	r7, #16
 8011b9a:	46bd      	mov	sp, r7
 8011b9c:	bd80      	pop	{r7, pc}
 8011b9e:	bf00      	nop
 8011ba0:	200002d0 	.word	0x200002d0

08011ba4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8011ba4:	b580      	push	{r7, lr}
 8011ba6:	b090      	sub	sp, #64	; 0x40
 8011ba8:	af04      	add	r7, sp, #16
 8011baa:	60f8      	str	r0, [r7, #12]
 8011bac:	60b9      	str	r1, [r7, #8]
 8011bae:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8011bb0:	2300      	movs	r3, #0
 8011bb2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011bb4:	f3ef 8305 	mrs	r3, IPSR
 8011bb8:	61fb      	str	r3, [r7, #28]
  return(result);
 8011bba:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8011bbc:	2b00      	cmp	r3, #0
 8011bbe:	f040 808f 	bne.w	8011ce0 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011bc2:	f3ef 8310 	mrs	r3, PRIMASK
 8011bc6:	61bb      	str	r3, [r7, #24]
  return(result);
 8011bc8:	69bb      	ldr	r3, [r7, #24]
 8011bca:	2b00      	cmp	r3, #0
 8011bcc:	d105      	bne.n	8011bda <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011bce:	f3ef 8311 	mrs	r3, BASEPRI
 8011bd2:	617b      	str	r3, [r7, #20]
  return(result);
 8011bd4:	697b      	ldr	r3, [r7, #20]
 8011bd6:	2b00      	cmp	r3, #0
 8011bd8:	d003      	beq.n	8011be2 <osThreadNew+0x3e>
 8011bda:	4b44      	ldr	r3, [pc, #272]	; (8011cec <osThreadNew+0x148>)
 8011bdc:	681b      	ldr	r3, [r3, #0]
 8011bde:	2b02      	cmp	r3, #2
 8011be0:	d07e      	beq.n	8011ce0 <osThreadNew+0x13c>
 8011be2:	68fb      	ldr	r3, [r7, #12]
 8011be4:	2b00      	cmp	r3, #0
 8011be6:	d07b      	beq.n	8011ce0 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8011be8:	2380      	movs	r3, #128	; 0x80
 8011bea:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8011bec:	2318      	movs	r3, #24
 8011bee:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8011bf0:	2300      	movs	r3, #0
 8011bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8011bf4:	f04f 33ff 	mov.w	r3, #4294967295
 8011bf8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	2b00      	cmp	r3, #0
 8011bfe:	d045      	beq.n	8011c8c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	681b      	ldr	r3, [r3, #0]
 8011c04:	2b00      	cmp	r3, #0
 8011c06:	d002      	beq.n	8011c0e <osThreadNew+0x6a>
        name = attr->name;
 8011c08:	687b      	ldr	r3, [r7, #4]
 8011c0a:	681b      	ldr	r3, [r3, #0]
 8011c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8011c0e:	687b      	ldr	r3, [r7, #4]
 8011c10:	699b      	ldr	r3, [r3, #24]
 8011c12:	2b00      	cmp	r3, #0
 8011c14:	d002      	beq.n	8011c1c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	699b      	ldr	r3, [r3, #24]
 8011c1a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8011c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c1e:	2b00      	cmp	r3, #0
 8011c20:	d008      	beq.n	8011c34 <osThreadNew+0x90>
 8011c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c24:	2b38      	cmp	r3, #56	; 0x38
 8011c26:	d805      	bhi.n	8011c34 <osThreadNew+0x90>
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	685b      	ldr	r3, [r3, #4]
 8011c2c:	f003 0301 	and.w	r3, r3, #1
 8011c30:	2b00      	cmp	r3, #0
 8011c32:	d001      	beq.n	8011c38 <osThreadNew+0x94>
        return (NULL);
 8011c34:	2300      	movs	r3, #0
 8011c36:	e054      	b.n	8011ce2 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8011c38:	687b      	ldr	r3, [r7, #4]
 8011c3a:	695b      	ldr	r3, [r3, #20]
 8011c3c:	2b00      	cmp	r3, #0
 8011c3e:	d003      	beq.n	8011c48 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	695b      	ldr	r3, [r3, #20]
 8011c44:	089b      	lsrs	r3, r3, #2
 8011c46:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	689b      	ldr	r3, [r3, #8]
 8011c4c:	2b00      	cmp	r3, #0
 8011c4e:	d00e      	beq.n	8011c6e <osThreadNew+0xca>
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	68db      	ldr	r3, [r3, #12]
 8011c54:	2b5b      	cmp	r3, #91	; 0x5b
 8011c56:	d90a      	bls.n	8011c6e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8011c58:	687b      	ldr	r3, [r7, #4]
 8011c5a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8011c5c:	2b00      	cmp	r3, #0
 8011c5e:	d006      	beq.n	8011c6e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	695b      	ldr	r3, [r3, #20]
 8011c64:	2b00      	cmp	r3, #0
 8011c66:	d002      	beq.n	8011c6e <osThreadNew+0xca>
        mem = 1;
 8011c68:	2301      	movs	r3, #1
 8011c6a:	623b      	str	r3, [r7, #32]
 8011c6c:	e010      	b.n	8011c90 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8011c6e:	687b      	ldr	r3, [r7, #4]
 8011c70:	689b      	ldr	r3, [r3, #8]
 8011c72:	2b00      	cmp	r3, #0
 8011c74:	d10c      	bne.n	8011c90 <osThreadNew+0xec>
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	68db      	ldr	r3, [r3, #12]
 8011c7a:	2b00      	cmp	r3, #0
 8011c7c:	d108      	bne.n	8011c90 <osThreadNew+0xec>
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	691b      	ldr	r3, [r3, #16]
 8011c82:	2b00      	cmp	r3, #0
 8011c84:	d104      	bne.n	8011c90 <osThreadNew+0xec>
          mem = 0;
 8011c86:	2300      	movs	r3, #0
 8011c88:	623b      	str	r3, [r7, #32]
 8011c8a:	e001      	b.n	8011c90 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8011c8c:	2300      	movs	r3, #0
 8011c8e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8011c90:	6a3b      	ldr	r3, [r7, #32]
 8011c92:	2b01      	cmp	r3, #1
 8011c94:	d110      	bne.n	8011cb8 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8011c96:	687b      	ldr	r3, [r7, #4]
 8011c98:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8011c9a:	687a      	ldr	r2, [r7, #4]
 8011c9c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8011c9e:	9202      	str	r2, [sp, #8]
 8011ca0:	9301      	str	r3, [sp, #4]
 8011ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ca4:	9300      	str	r3, [sp, #0]
 8011ca6:	68bb      	ldr	r3, [r7, #8]
 8011ca8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011caa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011cac:	68f8      	ldr	r0, [r7, #12]
 8011cae:	f001 fc37 	bl	8013520 <xTaskCreateStatic>
 8011cb2:	4603      	mov	r3, r0
 8011cb4:	613b      	str	r3, [r7, #16]
 8011cb6:	e013      	b.n	8011ce0 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8011cb8:	6a3b      	ldr	r3, [r7, #32]
 8011cba:	2b00      	cmp	r3, #0
 8011cbc:	d110      	bne.n	8011ce0 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8011cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011cc0:	b29a      	uxth	r2, r3
 8011cc2:	f107 0310 	add.w	r3, r7, #16
 8011cc6:	9301      	str	r3, [sp, #4]
 8011cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cca:	9300      	str	r3, [sp, #0]
 8011ccc:	68bb      	ldr	r3, [r7, #8]
 8011cce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011cd0:	68f8      	ldr	r0, [r7, #12]
 8011cd2:	f001 fc85 	bl	80135e0 <xTaskCreate>
 8011cd6:	4603      	mov	r3, r0
 8011cd8:	2b01      	cmp	r3, #1
 8011cda:	d001      	beq.n	8011ce0 <osThreadNew+0x13c>
          hTask = NULL;
 8011cdc:	2300      	movs	r3, #0
 8011cde:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8011ce0:	693b      	ldr	r3, [r7, #16]
}
 8011ce2:	4618      	mov	r0, r3
 8011ce4:	3730      	adds	r7, #48	; 0x30
 8011ce6:	46bd      	mov	sp, r7
 8011ce8:	bd80      	pop	{r7, pc}
 8011cea:	bf00      	nop
 8011cec:	200002d0 	.word	0x200002d0

08011cf0 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8011cf0:	b580      	push	{r7, lr}
 8011cf2:	b08c      	sub	sp, #48	; 0x30
 8011cf4:	af02      	add	r7, sp, #8
 8011cf6:	60f8      	str	r0, [r7, #12]
 8011cf8:	60b9      	str	r1, [r7, #8]
 8011cfa:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8011cfc:	2300      	movs	r3, #0
 8011cfe:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011d00:	f3ef 8305 	mrs	r3, IPSR
 8011d04:	61bb      	str	r3, [r7, #24]
  return(result);
 8011d06:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8011d08:	2b00      	cmp	r3, #0
 8011d0a:	f040 8087 	bne.w	8011e1c <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011d0e:	f3ef 8310 	mrs	r3, PRIMASK
 8011d12:	617b      	str	r3, [r7, #20]
  return(result);
 8011d14:	697b      	ldr	r3, [r7, #20]
 8011d16:	2b00      	cmp	r3, #0
 8011d18:	d105      	bne.n	8011d26 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011d1a:	f3ef 8311 	mrs	r3, BASEPRI
 8011d1e:	613b      	str	r3, [r7, #16]
  return(result);
 8011d20:	693b      	ldr	r3, [r7, #16]
 8011d22:	2b00      	cmp	r3, #0
 8011d24:	d003      	beq.n	8011d2e <osSemaphoreNew+0x3e>
 8011d26:	4b40      	ldr	r3, [pc, #256]	; (8011e28 <osSemaphoreNew+0x138>)
 8011d28:	681b      	ldr	r3, [r3, #0]
 8011d2a:	2b02      	cmp	r3, #2
 8011d2c:	d076      	beq.n	8011e1c <osSemaphoreNew+0x12c>
 8011d2e:	68fb      	ldr	r3, [r7, #12]
 8011d30:	2b00      	cmp	r3, #0
 8011d32:	d073      	beq.n	8011e1c <osSemaphoreNew+0x12c>
 8011d34:	68ba      	ldr	r2, [r7, #8]
 8011d36:	68fb      	ldr	r3, [r7, #12]
 8011d38:	429a      	cmp	r2, r3
 8011d3a:	d86f      	bhi.n	8011e1c <osSemaphoreNew+0x12c>
    mem = -1;
 8011d3c:	f04f 33ff 	mov.w	r3, #4294967295
 8011d40:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	2b00      	cmp	r3, #0
 8011d46:	d015      	beq.n	8011d74 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	689b      	ldr	r3, [r3, #8]
 8011d4c:	2b00      	cmp	r3, #0
 8011d4e:	d006      	beq.n	8011d5e <osSemaphoreNew+0x6e>
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	68db      	ldr	r3, [r3, #12]
 8011d54:	2b4f      	cmp	r3, #79	; 0x4f
 8011d56:	d902      	bls.n	8011d5e <osSemaphoreNew+0x6e>
        mem = 1;
 8011d58:	2301      	movs	r3, #1
 8011d5a:	623b      	str	r3, [r7, #32]
 8011d5c:	e00c      	b.n	8011d78 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	689b      	ldr	r3, [r3, #8]
 8011d62:	2b00      	cmp	r3, #0
 8011d64:	d108      	bne.n	8011d78 <osSemaphoreNew+0x88>
 8011d66:	687b      	ldr	r3, [r7, #4]
 8011d68:	68db      	ldr	r3, [r3, #12]
 8011d6a:	2b00      	cmp	r3, #0
 8011d6c:	d104      	bne.n	8011d78 <osSemaphoreNew+0x88>
          mem = 0;
 8011d6e:	2300      	movs	r3, #0
 8011d70:	623b      	str	r3, [r7, #32]
 8011d72:	e001      	b.n	8011d78 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8011d74:	2300      	movs	r3, #0
 8011d76:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8011d78:	6a3b      	ldr	r3, [r7, #32]
 8011d7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011d7e:	d04d      	beq.n	8011e1c <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 8011d80:	68fb      	ldr	r3, [r7, #12]
 8011d82:	2b01      	cmp	r3, #1
 8011d84:	d129      	bne.n	8011dda <osSemaphoreNew+0xea>
        if (mem == 1) {
 8011d86:	6a3b      	ldr	r3, [r7, #32]
 8011d88:	2b01      	cmp	r3, #1
 8011d8a:	d10b      	bne.n	8011da4 <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	689a      	ldr	r2, [r3, #8]
 8011d90:	2303      	movs	r3, #3
 8011d92:	9300      	str	r3, [sp, #0]
 8011d94:	4613      	mov	r3, r2
 8011d96:	2200      	movs	r2, #0
 8011d98:	2100      	movs	r1, #0
 8011d9a:	2001      	movs	r0, #1
 8011d9c:	f000 fbf8 	bl	8012590 <xQueueGenericCreateStatic>
 8011da0:	6278      	str	r0, [r7, #36]	; 0x24
 8011da2:	e005      	b.n	8011db0 <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8011da4:	2203      	movs	r2, #3
 8011da6:	2100      	movs	r1, #0
 8011da8:	2001      	movs	r0, #1
 8011daa:	f000 fc6e 	bl	801268a <xQueueGenericCreate>
 8011dae:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8011db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011db2:	2b00      	cmp	r3, #0
 8011db4:	d022      	beq.n	8011dfc <osSemaphoreNew+0x10c>
 8011db6:	68bb      	ldr	r3, [r7, #8]
 8011db8:	2b00      	cmp	r3, #0
 8011dba:	d01f      	beq.n	8011dfc <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8011dbc:	2300      	movs	r3, #0
 8011dbe:	2200      	movs	r2, #0
 8011dc0:	2100      	movs	r1, #0
 8011dc2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011dc4:	f000 fd34 	bl	8012830 <xQueueGenericSend>
 8011dc8:	4603      	mov	r3, r0
 8011dca:	2b01      	cmp	r3, #1
 8011dcc:	d016      	beq.n	8011dfc <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 8011dce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011dd0:	f001 f9d3 	bl	801317a <vQueueDelete>
            hSemaphore = NULL;
 8011dd4:	2300      	movs	r3, #0
 8011dd6:	627b      	str	r3, [r7, #36]	; 0x24
 8011dd8:	e010      	b.n	8011dfc <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 8011dda:	6a3b      	ldr	r3, [r7, #32]
 8011ddc:	2b01      	cmp	r3, #1
 8011dde:	d108      	bne.n	8011df2 <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	689b      	ldr	r3, [r3, #8]
 8011de4:	461a      	mov	r2, r3
 8011de6:	68b9      	ldr	r1, [r7, #8]
 8011de8:	68f8      	ldr	r0, [r7, #12]
 8011dea:	f000 fcb2 	bl	8012752 <xQueueCreateCountingSemaphoreStatic>
 8011dee:	6278      	str	r0, [r7, #36]	; 0x24
 8011df0:	e004      	b.n	8011dfc <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8011df2:	68b9      	ldr	r1, [r7, #8]
 8011df4:	68f8      	ldr	r0, [r7, #12]
 8011df6:	f000 fce5 	bl	80127c4 <xQueueCreateCountingSemaphore>
 8011dfa:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8011dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dfe:	2b00      	cmp	r3, #0
 8011e00:	d00c      	beq.n	8011e1c <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	2b00      	cmp	r3, #0
 8011e06:	d003      	beq.n	8011e10 <osSemaphoreNew+0x120>
          name = attr->name;
 8011e08:	687b      	ldr	r3, [r7, #4]
 8011e0a:	681b      	ldr	r3, [r3, #0]
 8011e0c:	61fb      	str	r3, [r7, #28]
 8011e0e:	e001      	b.n	8011e14 <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 8011e10:	2300      	movs	r3, #0
 8011e12:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8011e14:	69f9      	ldr	r1, [r7, #28]
 8011e16:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011e18:	f001 fafc 	bl	8013414 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8011e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8011e1e:	4618      	mov	r0, r3
 8011e20:	3728      	adds	r7, #40	; 0x28
 8011e22:	46bd      	mov	sp, r7
 8011e24:	bd80      	pop	{r7, pc}
 8011e26:	bf00      	nop
 8011e28:	200002d0 	.word	0x200002d0

08011e2c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8011e2c:	b580      	push	{r7, lr}
 8011e2e:	b088      	sub	sp, #32
 8011e30:	af00      	add	r7, sp, #0
 8011e32:	6078      	str	r0, [r7, #4]
 8011e34:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8011e3a:	2300      	movs	r3, #0
 8011e3c:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8011e3e:	69bb      	ldr	r3, [r7, #24]
 8011e40:	2b00      	cmp	r3, #0
 8011e42:	d103      	bne.n	8011e4c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8011e44:	f06f 0303 	mvn.w	r3, #3
 8011e48:	61fb      	str	r3, [r7, #28]
 8011e4a:	e04b      	b.n	8011ee4 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011e4c:	f3ef 8305 	mrs	r3, IPSR
 8011e50:	617b      	str	r3, [r7, #20]
  return(result);
 8011e52:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8011e54:	2b00      	cmp	r3, #0
 8011e56:	d10f      	bne.n	8011e78 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011e58:	f3ef 8310 	mrs	r3, PRIMASK
 8011e5c:	613b      	str	r3, [r7, #16]
  return(result);
 8011e5e:	693b      	ldr	r3, [r7, #16]
 8011e60:	2b00      	cmp	r3, #0
 8011e62:	d105      	bne.n	8011e70 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011e64:	f3ef 8311 	mrs	r3, BASEPRI
 8011e68:	60fb      	str	r3, [r7, #12]
  return(result);
 8011e6a:	68fb      	ldr	r3, [r7, #12]
 8011e6c:	2b00      	cmp	r3, #0
 8011e6e:	d026      	beq.n	8011ebe <osSemaphoreAcquire+0x92>
 8011e70:	4b1f      	ldr	r3, [pc, #124]	; (8011ef0 <osSemaphoreAcquire+0xc4>)
 8011e72:	681b      	ldr	r3, [r3, #0]
 8011e74:	2b02      	cmp	r3, #2
 8011e76:	d122      	bne.n	8011ebe <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8011e78:	683b      	ldr	r3, [r7, #0]
 8011e7a:	2b00      	cmp	r3, #0
 8011e7c:	d003      	beq.n	8011e86 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8011e7e:	f06f 0303 	mvn.w	r3, #3
 8011e82:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8011e84:	e02d      	b.n	8011ee2 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8011e86:	2300      	movs	r3, #0
 8011e88:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8011e8a:	f107 0308 	add.w	r3, r7, #8
 8011e8e:	461a      	mov	r2, r3
 8011e90:	2100      	movs	r1, #0
 8011e92:	69b8      	ldr	r0, [r7, #24]
 8011e94:	f001 f8ee 	bl	8013074 <xQueueReceiveFromISR>
 8011e98:	4603      	mov	r3, r0
 8011e9a:	2b01      	cmp	r3, #1
 8011e9c:	d003      	beq.n	8011ea6 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8011e9e:	f06f 0302 	mvn.w	r3, #2
 8011ea2:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8011ea4:	e01d      	b.n	8011ee2 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8011ea6:	68bb      	ldr	r3, [r7, #8]
 8011ea8:	2b00      	cmp	r3, #0
 8011eaa:	d01a      	beq.n	8011ee2 <osSemaphoreAcquire+0xb6>
 8011eac:	4b11      	ldr	r3, [pc, #68]	; (8011ef4 <osSemaphoreAcquire+0xc8>)
 8011eae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011eb2:	601a      	str	r2, [r3, #0]
 8011eb4:	f3bf 8f4f 	dsb	sy
 8011eb8:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8011ebc:	e011      	b.n	8011ee2 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8011ebe:	6839      	ldr	r1, [r7, #0]
 8011ec0:	69b8      	ldr	r0, [r7, #24]
 8011ec2:	f000 ffc7 	bl	8012e54 <xQueueSemaphoreTake>
 8011ec6:	4603      	mov	r3, r0
 8011ec8:	2b01      	cmp	r3, #1
 8011eca:	d00b      	beq.n	8011ee4 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8011ecc:	683b      	ldr	r3, [r7, #0]
 8011ece:	2b00      	cmp	r3, #0
 8011ed0:	d003      	beq.n	8011eda <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8011ed2:	f06f 0301 	mvn.w	r3, #1
 8011ed6:	61fb      	str	r3, [r7, #28]
 8011ed8:	e004      	b.n	8011ee4 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8011eda:	f06f 0302 	mvn.w	r3, #2
 8011ede:	61fb      	str	r3, [r7, #28]
 8011ee0:	e000      	b.n	8011ee4 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8011ee2:	bf00      	nop
      }
    }
  }

  return (stat);
 8011ee4:	69fb      	ldr	r3, [r7, #28]
}
 8011ee6:	4618      	mov	r0, r3
 8011ee8:	3720      	adds	r7, #32
 8011eea:	46bd      	mov	sp, r7
 8011eec:	bd80      	pop	{r7, pc}
 8011eee:	bf00      	nop
 8011ef0:	200002d0 	.word	0x200002d0
 8011ef4:	e000ed04 	.word	0xe000ed04

08011ef8 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8011ef8:	b580      	push	{r7, lr}
 8011efa:	b088      	sub	sp, #32
 8011efc:	af00      	add	r7, sp, #0
 8011efe:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8011f04:	2300      	movs	r3, #0
 8011f06:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8011f08:	69bb      	ldr	r3, [r7, #24]
 8011f0a:	2b00      	cmp	r3, #0
 8011f0c:	d103      	bne.n	8011f16 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8011f0e:	f06f 0303 	mvn.w	r3, #3
 8011f12:	61fb      	str	r3, [r7, #28]
 8011f14:	e03e      	b.n	8011f94 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011f16:	f3ef 8305 	mrs	r3, IPSR
 8011f1a:	617b      	str	r3, [r7, #20]
  return(result);
 8011f1c:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8011f1e:	2b00      	cmp	r3, #0
 8011f20:	d10f      	bne.n	8011f42 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011f22:	f3ef 8310 	mrs	r3, PRIMASK
 8011f26:	613b      	str	r3, [r7, #16]
  return(result);
 8011f28:	693b      	ldr	r3, [r7, #16]
 8011f2a:	2b00      	cmp	r3, #0
 8011f2c:	d105      	bne.n	8011f3a <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011f2e:	f3ef 8311 	mrs	r3, BASEPRI
 8011f32:	60fb      	str	r3, [r7, #12]
  return(result);
 8011f34:	68fb      	ldr	r3, [r7, #12]
 8011f36:	2b00      	cmp	r3, #0
 8011f38:	d01e      	beq.n	8011f78 <osSemaphoreRelease+0x80>
 8011f3a:	4b19      	ldr	r3, [pc, #100]	; (8011fa0 <osSemaphoreRelease+0xa8>)
 8011f3c:	681b      	ldr	r3, [r3, #0]
 8011f3e:	2b02      	cmp	r3, #2
 8011f40:	d11a      	bne.n	8011f78 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8011f42:	2300      	movs	r3, #0
 8011f44:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8011f46:	f107 0308 	add.w	r3, r7, #8
 8011f4a:	4619      	mov	r1, r3
 8011f4c:	69b8      	ldr	r0, [r7, #24]
 8011f4e:	f000 fe0d 	bl	8012b6c <xQueueGiveFromISR>
 8011f52:	4603      	mov	r3, r0
 8011f54:	2b01      	cmp	r3, #1
 8011f56:	d003      	beq.n	8011f60 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8011f58:	f06f 0302 	mvn.w	r3, #2
 8011f5c:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8011f5e:	e018      	b.n	8011f92 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8011f60:	68bb      	ldr	r3, [r7, #8]
 8011f62:	2b00      	cmp	r3, #0
 8011f64:	d015      	beq.n	8011f92 <osSemaphoreRelease+0x9a>
 8011f66:	4b0f      	ldr	r3, [pc, #60]	; (8011fa4 <osSemaphoreRelease+0xac>)
 8011f68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011f6c:	601a      	str	r2, [r3, #0]
 8011f6e:	f3bf 8f4f 	dsb	sy
 8011f72:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8011f76:	e00c      	b.n	8011f92 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8011f78:	2300      	movs	r3, #0
 8011f7a:	2200      	movs	r2, #0
 8011f7c:	2100      	movs	r1, #0
 8011f7e:	69b8      	ldr	r0, [r7, #24]
 8011f80:	f000 fc56 	bl	8012830 <xQueueGenericSend>
 8011f84:	4603      	mov	r3, r0
 8011f86:	2b01      	cmp	r3, #1
 8011f88:	d004      	beq.n	8011f94 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8011f8a:	f06f 0302 	mvn.w	r3, #2
 8011f8e:	61fb      	str	r3, [r7, #28]
 8011f90:	e000      	b.n	8011f94 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8011f92:	bf00      	nop
    }
  }

  return (stat);
 8011f94:	69fb      	ldr	r3, [r7, #28]
}
 8011f96:	4618      	mov	r0, r3
 8011f98:	3720      	adds	r7, #32
 8011f9a:	46bd      	mov	sp, r7
 8011f9c:	bd80      	pop	{r7, pc}
 8011f9e:	bf00      	nop
 8011fa0:	200002d0 	.word	0x200002d0
 8011fa4:	e000ed04 	.word	0xe000ed04

08011fa8 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8011fa8:	b580      	push	{r7, lr}
 8011faa:	b088      	sub	sp, #32
 8011fac:	af00      	add	r7, sp, #0
 8011fae:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8011fb0:	687b      	ldr	r3, [r7, #4]
 8011fb2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011fb4:	f3ef 8305 	mrs	r3, IPSR
 8011fb8:	617b      	str	r3, [r7, #20]
  return(result);
 8011fba:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8011fbc:	2b00      	cmp	r3, #0
 8011fbe:	d10f      	bne.n	8011fe0 <osSemaphoreDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011fc0:	f3ef 8310 	mrs	r3, PRIMASK
 8011fc4:	613b      	str	r3, [r7, #16]
  return(result);
 8011fc6:	693b      	ldr	r3, [r7, #16]
 8011fc8:	2b00      	cmp	r3, #0
 8011fca:	d105      	bne.n	8011fd8 <osSemaphoreDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011fcc:	f3ef 8311 	mrs	r3, BASEPRI
 8011fd0:	60fb      	str	r3, [r7, #12]
  return(result);
 8011fd2:	68fb      	ldr	r3, [r7, #12]
 8011fd4:	2b00      	cmp	r3, #0
 8011fd6:	d007      	beq.n	8011fe8 <osSemaphoreDelete+0x40>
 8011fd8:	4b0d      	ldr	r3, [pc, #52]	; (8012010 <osSemaphoreDelete+0x68>)
 8011fda:	681b      	ldr	r3, [r3, #0]
 8011fdc:	2b02      	cmp	r3, #2
 8011fde:	d103      	bne.n	8011fe8 <osSemaphoreDelete+0x40>
    stat = osErrorISR;
 8011fe0:	f06f 0305 	mvn.w	r3, #5
 8011fe4:	61fb      	str	r3, [r7, #28]
 8011fe6:	e00e      	b.n	8012006 <osSemaphoreDelete+0x5e>
  }
  else if (hSemaphore == NULL) {
 8011fe8:	69bb      	ldr	r3, [r7, #24]
 8011fea:	2b00      	cmp	r3, #0
 8011fec:	d103      	bne.n	8011ff6 <osSemaphoreDelete+0x4e>
    stat = osErrorParameter;
 8011fee:	f06f 0303 	mvn.w	r3, #3
 8011ff2:	61fb      	str	r3, [r7, #28]
 8011ff4:	e007      	b.n	8012006 <osSemaphoreDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 8011ff6:	69b8      	ldr	r0, [r7, #24]
 8011ff8:	f001 fa34 	bl	8013464 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8011ffc:	2300      	movs	r3, #0
 8011ffe:	61fb      	str	r3, [r7, #28]
    vSemaphoreDelete (hSemaphore);
 8012000:	69b8      	ldr	r0, [r7, #24]
 8012002:	f001 f8ba 	bl	801317a <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8012006:	69fb      	ldr	r3, [r7, #28]
}
 8012008:	4618      	mov	r0, r3
 801200a:	3720      	adds	r7, #32
 801200c:	46bd      	mov	sp, r7
 801200e:	bd80      	pop	{r7, pc}
 8012010:	200002d0 	.word	0x200002d0

08012014 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8012014:	b580      	push	{r7, lr}
 8012016:	b08c      	sub	sp, #48	; 0x30
 8012018:	af02      	add	r7, sp, #8
 801201a:	60f8      	str	r0, [r7, #12]
 801201c:	60b9      	str	r1, [r7, #8]
 801201e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8012020:	2300      	movs	r3, #0
 8012022:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012024:	f3ef 8305 	mrs	r3, IPSR
 8012028:	61bb      	str	r3, [r7, #24]
  return(result);
 801202a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 801202c:	2b00      	cmp	r3, #0
 801202e:	d170      	bne.n	8012112 <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012030:	f3ef 8310 	mrs	r3, PRIMASK
 8012034:	617b      	str	r3, [r7, #20]
  return(result);
 8012036:	697b      	ldr	r3, [r7, #20]
 8012038:	2b00      	cmp	r3, #0
 801203a:	d105      	bne.n	8012048 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801203c:	f3ef 8311 	mrs	r3, BASEPRI
 8012040:	613b      	str	r3, [r7, #16]
  return(result);
 8012042:	693b      	ldr	r3, [r7, #16]
 8012044:	2b00      	cmp	r3, #0
 8012046:	d003      	beq.n	8012050 <osMessageQueueNew+0x3c>
 8012048:	4b34      	ldr	r3, [pc, #208]	; (801211c <osMessageQueueNew+0x108>)
 801204a:	681b      	ldr	r3, [r3, #0]
 801204c:	2b02      	cmp	r3, #2
 801204e:	d060      	beq.n	8012112 <osMessageQueueNew+0xfe>
 8012050:	68fb      	ldr	r3, [r7, #12]
 8012052:	2b00      	cmp	r3, #0
 8012054:	d05d      	beq.n	8012112 <osMessageQueueNew+0xfe>
 8012056:	68bb      	ldr	r3, [r7, #8]
 8012058:	2b00      	cmp	r3, #0
 801205a:	d05a      	beq.n	8012112 <osMessageQueueNew+0xfe>
    mem = -1;
 801205c:	f04f 33ff 	mov.w	r3, #4294967295
 8012060:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8012062:	687b      	ldr	r3, [r7, #4]
 8012064:	2b00      	cmp	r3, #0
 8012066:	d029      	beq.n	80120bc <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	689b      	ldr	r3, [r3, #8]
 801206c:	2b00      	cmp	r3, #0
 801206e:	d012      	beq.n	8012096 <osMessageQueueNew+0x82>
 8012070:	687b      	ldr	r3, [r7, #4]
 8012072:	68db      	ldr	r3, [r3, #12]
 8012074:	2b4f      	cmp	r3, #79	; 0x4f
 8012076:	d90e      	bls.n	8012096 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 801207c:	2b00      	cmp	r3, #0
 801207e:	d00a      	beq.n	8012096 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	695a      	ldr	r2, [r3, #20]
 8012084:	68fb      	ldr	r3, [r7, #12]
 8012086:	68b9      	ldr	r1, [r7, #8]
 8012088:	fb01 f303 	mul.w	r3, r1, r3
 801208c:	429a      	cmp	r2, r3
 801208e:	d302      	bcc.n	8012096 <osMessageQueueNew+0x82>
        mem = 1;
 8012090:	2301      	movs	r3, #1
 8012092:	623b      	str	r3, [r7, #32]
 8012094:	e014      	b.n	80120c0 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8012096:	687b      	ldr	r3, [r7, #4]
 8012098:	689b      	ldr	r3, [r3, #8]
 801209a:	2b00      	cmp	r3, #0
 801209c:	d110      	bne.n	80120c0 <osMessageQueueNew+0xac>
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	68db      	ldr	r3, [r3, #12]
 80120a2:	2b00      	cmp	r3, #0
 80120a4:	d10c      	bne.n	80120c0 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80120aa:	2b00      	cmp	r3, #0
 80120ac:	d108      	bne.n	80120c0 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	695b      	ldr	r3, [r3, #20]
 80120b2:	2b00      	cmp	r3, #0
 80120b4:	d104      	bne.n	80120c0 <osMessageQueueNew+0xac>
          mem = 0;
 80120b6:	2300      	movs	r3, #0
 80120b8:	623b      	str	r3, [r7, #32]
 80120ba:	e001      	b.n	80120c0 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 80120bc:	2300      	movs	r3, #0
 80120be:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80120c0:	6a3b      	ldr	r3, [r7, #32]
 80120c2:	2b01      	cmp	r3, #1
 80120c4:	d10c      	bne.n	80120e0 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80120c6:	687b      	ldr	r3, [r7, #4]
 80120c8:	691a      	ldr	r2, [r3, #16]
 80120ca:	687b      	ldr	r3, [r7, #4]
 80120cc:	6899      	ldr	r1, [r3, #8]
 80120ce:	2300      	movs	r3, #0
 80120d0:	9300      	str	r3, [sp, #0]
 80120d2:	460b      	mov	r3, r1
 80120d4:	68b9      	ldr	r1, [r7, #8]
 80120d6:	68f8      	ldr	r0, [r7, #12]
 80120d8:	f000 fa5a 	bl	8012590 <xQueueGenericCreateStatic>
 80120dc:	6278      	str	r0, [r7, #36]	; 0x24
 80120de:	e008      	b.n	80120f2 <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 80120e0:	6a3b      	ldr	r3, [r7, #32]
 80120e2:	2b00      	cmp	r3, #0
 80120e4:	d105      	bne.n	80120f2 <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 80120e6:	2200      	movs	r2, #0
 80120e8:	68b9      	ldr	r1, [r7, #8]
 80120ea:	68f8      	ldr	r0, [r7, #12]
 80120ec:	f000 facd 	bl	801268a <xQueueGenericCreate>
 80120f0:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80120f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120f4:	2b00      	cmp	r3, #0
 80120f6:	d00c      	beq.n	8012112 <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 80120f8:	687b      	ldr	r3, [r7, #4]
 80120fa:	2b00      	cmp	r3, #0
 80120fc:	d003      	beq.n	8012106 <osMessageQueueNew+0xf2>
        name = attr->name;
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	681b      	ldr	r3, [r3, #0]
 8012102:	61fb      	str	r3, [r7, #28]
 8012104:	e001      	b.n	801210a <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 8012106:	2300      	movs	r3, #0
 8012108:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 801210a:	69f9      	ldr	r1, [r7, #28]
 801210c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801210e:	f001 f981 	bl	8013414 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8012112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8012114:	4618      	mov	r0, r3
 8012116:	3728      	adds	r7, #40	; 0x28
 8012118:	46bd      	mov	sp, r7
 801211a:	bd80      	pop	{r7, pc}
 801211c:	200002d0 	.word	0x200002d0

08012120 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8012120:	b580      	push	{r7, lr}
 8012122:	b08a      	sub	sp, #40	; 0x28
 8012124:	af00      	add	r7, sp, #0
 8012126:	60f8      	str	r0, [r7, #12]
 8012128:	60b9      	str	r1, [r7, #8]
 801212a:	603b      	str	r3, [r7, #0]
 801212c:	4613      	mov	r3, r2
 801212e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8012130:	68fb      	ldr	r3, [r7, #12]
 8012132:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8012134:	2300      	movs	r3, #0
 8012136:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012138:	f3ef 8305 	mrs	r3, IPSR
 801213c:	61fb      	str	r3, [r7, #28]
  return(result);
 801213e:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8012140:	2b00      	cmp	r3, #0
 8012142:	d10f      	bne.n	8012164 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012144:	f3ef 8310 	mrs	r3, PRIMASK
 8012148:	61bb      	str	r3, [r7, #24]
  return(result);
 801214a:	69bb      	ldr	r3, [r7, #24]
 801214c:	2b00      	cmp	r3, #0
 801214e:	d105      	bne.n	801215c <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8012150:	f3ef 8311 	mrs	r3, BASEPRI
 8012154:	617b      	str	r3, [r7, #20]
  return(result);
 8012156:	697b      	ldr	r3, [r7, #20]
 8012158:	2b00      	cmp	r3, #0
 801215a:	d02c      	beq.n	80121b6 <osMessageQueuePut+0x96>
 801215c:	4b28      	ldr	r3, [pc, #160]	; (8012200 <osMessageQueuePut+0xe0>)
 801215e:	681b      	ldr	r3, [r3, #0]
 8012160:	2b02      	cmp	r3, #2
 8012162:	d128      	bne.n	80121b6 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012164:	6a3b      	ldr	r3, [r7, #32]
 8012166:	2b00      	cmp	r3, #0
 8012168:	d005      	beq.n	8012176 <osMessageQueuePut+0x56>
 801216a:	68bb      	ldr	r3, [r7, #8]
 801216c:	2b00      	cmp	r3, #0
 801216e:	d002      	beq.n	8012176 <osMessageQueuePut+0x56>
 8012170:	683b      	ldr	r3, [r7, #0]
 8012172:	2b00      	cmp	r3, #0
 8012174:	d003      	beq.n	801217e <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8012176:	f06f 0303 	mvn.w	r3, #3
 801217a:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801217c:	e039      	b.n	80121f2 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 801217e:	2300      	movs	r3, #0
 8012180:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8012182:	f107 0210 	add.w	r2, r7, #16
 8012186:	2300      	movs	r3, #0
 8012188:	68b9      	ldr	r1, [r7, #8]
 801218a:	6a38      	ldr	r0, [r7, #32]
 801218c:	f000 fc52 	bl	8012a34 <xQueueGenericSendFromISR>
 8012190:	4603      	mov	r3, r0
 8012192:	2b01      	cmp	r3, #1
 8012194:	d003      	beq.n	801219e <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8012196:	f06f 0302 	mvn.w	r3, #2
 801219a:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801219c:	e029      	b.n	80121f2 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 801219e:	693b      	ldr	r3, [r7, #16]
 80121a0:	2b00      	cmp	r3, #0
 80121a2:	d026      	beq.n	80121f2 <osMessageQueuePut+0xd2>
 80121a4:	4b17      	ldr	r3, [pc, #92]	; (8012204 <osMessageQueuePut+0xe4>)
 80121a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80121aa:	601a      	str	r2, [r3, #0]
 80121ac:	f3bf 8f4f 	dsb	sy
 80121b0:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80121b4:	e01d      	b.n	80121f2 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80121b6:	6a3b      	ldr	r3, [r7, #32]
 80121b8:	2b00      	cmp	r3, #0
 80121ba:	d002      	beq.n	80121c2 <osMessageQueuePut+0xa2>
 80121bc:	68bb      	ldr	r3, [r7, #8]
 80121be:	2b00      	cmp	r3, #0
 80121c0:	d103      	bne.n	80121ca <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 80121c2:	f06f 0303 	mvn.w	r3, #3
 80121c6:	627b      	str	r3, [r7, #36]	; 0x24
 80121c8:	e014      	b.n	80121f4 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80121ca:	2300      	movs	r3, #0
 80121cc:	683a      	ldr	r2, [r7, #0]
 80121ce:	68b9      	ldr	r1, [r7, #8]
 80121d0:	6a38      	ldr	r0, [r7, #32]
 80121d2:	f000 fb2d 	bl	8012830 <xQueueGenericSend>
 80121d6:	4603      	mov	r3, r0
 80121d8:	2b01      	cmp	r3, #1
 80121da:	d00b      	beq.n	80121f4 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 80121dc:	683b      	ldr	r3, [r7, #0]
 80121de:	2b00      	cmp	r3, #0
 80121e0:	d003      	beq.n	80121ea <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 80121e2:	f06f 0301 	mvn.w	r3, #1
 80121e6:	627b      	str	r3, [r7, #36]	; 0x24
 80121e8:	e004      	b.n	80121f4 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 80121ea:	f06f 0302 	mvn.w	r3, #2
 80121ee:	627b      	str	r3, [r7, #36]	; 0x24
 80121f0:	e000      	b.n	80121f4 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80121f2:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80121f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80121f6:	4618      	mov	r0, r3
 80121f8:	3728      	adds	r7, #40	; 0x28
 80121fa:	46bd      	mov	sp, r7
 80121fc:	bd80      	pop	{r7, pc}
 80121fe:	bf00      	nop
 8012200:	200002d0 	.word	0x200002d0
 8012204:	e000ed04 	.word	0xe000ed04

08012208 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8012208:	b580      	push	{r7, lr}
 801220a:	b08a      	sub	sp, #40	; 0x28
 801220c:	af00      	add	r7, sp, #0
 801220e:	60f8      	str	r0, [r7, #12]
 8012210:	60b9      	str	r1, [r7, #8]
 8012212:	607a      	str	r2, [r7, #4]
 8012214:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8012216:	68fb      	ldr	r3, [r7, #12]
 8012218:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 801221a:	2300      	movs	r3, #0
 801221c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801221e:	f3ef 8305 	mrs	r3, IPSR
 8012222:	61fb      	str	r3, [r7, #28]
  return(result);
 8012224:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8012226:	2b00      	cmp	r3, #0
 8012228:	d10f      	bne.n	801224a <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801222a:	f3ef 8310 	mrs	r3, PRIMASK
 801222e:	61bb      	str	r3, [r7, #24]
  return(result);
 8012230:	69bb      	ldr	r3, [r7, #24]
 8012232:	2b00      	cmp	r3, #0
 8012234:	d105      	bne.n	8012242 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8012236:	f3ef 8311 	mrs	r3, BASEPRI
 801223a:	617b      	str	r3, [r7, #20]
  return(result);
 801223c:	697b      	ldr	r3, [r7, #20]
 801223e:	2b00      	cmp	r3, #0
 8012240:	d02c      	beq.n	801229c <osMessageQueueGet+0x94>
 8012242:	4b28      	ldr	r3, [pc, #160]	; (80122e4 <osMessageQueueGet+0xdc>)
 8012244:	681b      	ldr	r3, [r3, #0]
 8012246:	2b02      	cmp	r3, #2
 8012248:	d128      	bne.n	801229c <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801224a:	6a3b      	ldr	r3, [r7, #32]
 801224c:	2b00      	cmp	r3, #0
 801224e:	d005      	beq.n	801225c <osMessageQueueGet+0x54>
 8012250:	68bb      	ldr	r3, [r7, #8]
 8012252:	2b00      	cmp	r3, #0
 8012254:	d002      	beq.n	801225c <osMessageQueueGet+0x54>
 8012256:	683b      	ldr	r3, [r7, #0]
 8012258:	2b00      	cmp	r3, #0
 801225a:	d003      	beq.n	8012264 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 801225c:	f06f 0303 	mvn.w	r3, #3
 8012260:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012262:	e038      	b.n	80122d6 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8012264:	2300      	movs	r3, #0
 8012266:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8012268:	f107 0310 	add.w	r3, r7, #16
 801226c:	461a      	mov	r2, r3
 801226e:	68b9      	ldr	r1, [r7, #8]
 8012270:	6a38      	ldr	r0, [r7, #32]
 8012272:	f000 feff 	bl	8013074 <xQueueReceiveFromISR>
 8012276:	4603      	mov	r3, r0
 8012278:	2b01      	cmp	r3, #1
 801227a:	d003      	beq.n	8012284 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 801227c:	f06f 0302 	mvn.w	r3, #2
 8012280:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012282:	e028      	b.n	80122d6 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8012284:	693b      	ldr	r3, [r7, #16]
 8012286:	2b00      	cmp	r3, #0
 8012288:	d025      	beq.n	80122d6 <osMessageQueueGet+0xce>
 801228a:	4b17      	ldr	r3, [pc, #92]	; (80122e8 <osMessageQueueGet+0xe0>)
 801228c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012290:	601a      	str	r2, [r3, #0]
 8012292:	f3bf 8f4f 	dsb	sy
 8012296:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801229a:	e01c      	b.n	80122d6 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 801229c:	6a3b      	ldr	r3, [r7, #32]
 801229e:	2b00      	cmp	r3, #0
 80122a0:	d002      	beq.n	80122a8 <osMessageQueueGet+0xa0>
 80122a2:	68bb      	ldr	r3, [r7, #8]
 80122a4:	2b00      	cmp	r3, #0
 80122a6:	d103      	bne.n	80122b0 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 80122a8:	f06f 0303 	mvn.w	r3, #3
 80122ac:	627b      	str	r3, [r7, #36]	; 0x24
 80122ae:	e013      	b.n	80122d8 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80122b0:	683a      	ldr	r2, [r7, #0]
 80122b2:	68b9      	ldr	r1, [r7, #8]
 80122b4:	6a38      	ldr	r0, [r7, #32]
 80122b6:	f000 fceb 	bl	8012c90 <xQueueReceive>
 80122ba:	4603      	mov	r3, r0
 80122bc:	2b01      	cmp	r3, #1
 80122be:	d00b      	beq.n	80122d8 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 80122c0:	683b      	ldr	r3, [r7, #0]
 80122c2:	2b00      	cmp	r3, #0
 80122c4:	d003      	beq.n	80122ce <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 80122c6:	f06f 0301 	mvn.w	r3, #1
 80122ca:	627b      	str	r3, [r7, #36]	; 0x24
 80122cc:	e004      	b.n	80122d8 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 80122ce:	f06f 0302 	mvn.w	r3, #2
 80122d2:	627b      	str	r3, [r7, #36]	; 0x24
 80122d4:	e000      	b.n	80122d8 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80122d6:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80122d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80122da:	4618      	mov	r0, r3
 80122dc:	3728      	adds	r7, #40	; 0x28
 80122de:	46bd      	mov	sp, r7
 80122e0:	bd80      	pop	{r7, pc}
 80122e2:	bf00      	nop
 80122e4:	200002d0 	.word	0x200002d0
 80122e8:	e000ed04 	.word	0xe000ed04

080122ec <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80122ec:	b480      	push	{r7}
 80122ee:	b085      	sub	sp, #20
 80122f0:	af00      	add	r7, sp, #0
 80122f2:	60f8      	str	r0, [r7, #12]
 80122f4:	60b9      	str	r1, [r7, #8]
 80122f6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80122f8:	68fb      	ldr	r3, [r7, #12]
 80122fa:	4a07      	ldr	r2, [pc, #28]	; (8012318 <vApplicationGetIdleTaskMemory+0x2c>)
 80122fc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80122fe:	68bb      	ldr	r3, [r7, #8]
 8012300:	4a06      	ldr	r2, [pc, #24]	; (801231c <vApplicationGetIdleTaskMemory+0x30>)
 8012302:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8012304:	687b      	ldr	r3, [r7, #4]
 8012306:	2280      	movs	r2, #128	; 0x80
 8012308:	601a      	str	r2, [r3, #0]
}
 801230a:	bf00      	nop
 801230c:	3714      	adds	r7, #20
 801230e:	46bd      	mov	sp, r7
 8012310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012314:	4770      	bx	lr
 8012316:	bf00      	nop
 8012318:	200002d4 	.word	0x200002d4
 801231c:	20000330 	.word	0x20000330

08012320 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8012320:	b480      	push	{r7}
 8012322:	b085      	sub	sp, #20
 8012324:	af00      	add	r7, sp, #0
 8012326:	60f8      	str	r0, [r7, #12]
 8012328:	60b9      	str	r1, [r7, #8]
 801232a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 801232c:	68fb      	ldr	r3, [r7, #12]
 801232e:	4a07      	ldr	r2, [pc, #28]	; (801234c <vApplicationGetTimerTaskMemory+0x2c>)
 8012330:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8012332:	68bb      	ldr	r3, [r7, #8]
 8012334:	4a06      	ldr	r2, [pc, #24]	; (8012350 <vApplicationGetTimerTaskMemory+0x30>)
 8012336:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8012338:	687b      	ldr	r3, [r7, #4]
 801233a:	f44f 7280 	mov.w	r2, #256	; 0x100
 801233e:	601a      	str	r2, [r3, #0]
}
 8012340:	bf00      	nop
 8012342:	3714      	adds	r7, #20
 8012344:	46bd      	mov	sp, r7
 8012346:	f85d 7b04 	ldr.w	r7, [sp], #4
 801234a:	4770      	bx	lr
 801234c:	20000530 	.word	0x20000530
 8012350:	2000058c 	.word	0x2000058c

08012354 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8012354:	b480      	push	{r7}
 8012356:	b083      	sub	sp, #12
 8012358:	af00      	add	r7, sp, #0
 801235a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801235c:	687b      	ldr	r3, [r7, #4]
 801235e:	f103 0208 	add.w	r2, r3, #8
 8012362:	687b      	ldr	r3, [r7, #4]
 8012364:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8012366:	687b      	ldr	r3, [r7, #4]
 8012368:	f04f 32ff 	mov.w	r2, #4294967295
 801236c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801236e:	687b      	ldr	r3, [r7, #4]
 8012370:	f103 0208 	add.w	r2, r3, #8
 8012374:	687b      	ldr	r3, [r7, #4]
 8012376:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	f103 0208 	add.w	r2, r3, #8
 801237e:	687b      	ldr	r3, [r7, #4]
 8012380:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8012382:	687b      	ldr	r3, [r7, #4]
 8012384:	2200      	movs	r2, #0
 8012386:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8012388:	bf00      	nop
 801238a:	370c      	adds	r7, #12
 801238c:	46bd      	mov	sp, r7
 801238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012392:	4770      	bx	lr

08012394 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8012394:	b480      	push	{r7}
 8012396:	b083      	sub	sp, #12
 8012398:	af00      	add	r7, sp, #0
 801239a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	2200      	movs	r2, #0
 80123a0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80123a2:	bf00      	nop
 80123a4:	370c      	adds	r7, #12
 80123a6:	46bd      	mov	sp, r7
 80123a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123ac:	4770      	bx	lr

080123ae <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80123ae:	b480      	push	{r7}
 80123b0:	b085      	sub	sp, #20
 80123b2:	af00      	add	r7, sp, #0
 80123b4:	6078      	str	r0, [r7, #4]
 80123b6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80123b8:	687b      	ldr	r3, [r7, #4]
 80123ba:	685b      	ldr	r3, [r3, #4]
 80123bc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80123be:	683b      	ldr	r3, [r7, #0]
 80123c0:	68fa      	ldr	r2, [r7, #12]
 80123c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80123c4:	68fb      	ldr	r3, [r7, #12]
 80123c6:	689a      	ldr	r2, [r3, #8]
 80123c8:	683b      	ldr	r3, [r7, #0]
 80123ca:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80123cc:	68fb      	ldr	r3, [r7, #12]
 80123ce:	689b      	ldr	r3, [r3, #8]
 80123d0:	683a      	ldr	r2, [r7, #0]
 80123d2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80123d4:	68fb      	ldr	r3, [r7, #12]
 80123d6:	683a      	ldr	r2, [r7, #0]
 80123d8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80123da:	683b      	ldr	r3, [r7, #0]
 80123dc:	687a      	ldr	r2, [r7, #4]
 80123de:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	681b      	ldr	r3, [r3, #0]
 80123e4:	1c5a      	adds	r2, r3, #1
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	601a      	str	r2, [r3, #0]
}
 80123ea:	bf00      	nop
 80123ec:	3714      	adds	r7, #20
 80123ee:	46bd      	mov	sp, r7
 80123f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123f4:	4770      	bx	lr

080123f6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80123f6:	b480      	push	{r7}
 80123f8:	b085      	sub	sp, #20
 80123fa:	af00      	add	r7, sp, #0
 80123fc:	6078      	str	r0, [r7, #4]
 80123fe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8012400:	683b      	ldr	r3, [r7, #0]
 8012402:	681b      	ldr	r3, [r3, #0]
 8012404:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8012406:	68bb      	ldr	r3, [r7, #8]
 8012408:	f1b3 3fff 	cmp.w	r3, #4294967295
 801240c:	d103      	bne.n	8012416 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	691b      	ldr	r3, [r3, #16]
 8012412:	60fb      	str	r3, [r7, #12]
 8012414:	e00c      	b.n	8012430 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8012416:	687b      	ldr	r3, [r7, #4]
 8012418:	3308      	adds	r3, #8
 801241a:	60fb      	str	r3, [r7, #12]
 801241c:	e002      	b.n	8012424 <vListInsert+0x2e>
 801241e:	68fb      	ldr	r3, [r7, #12]
 8012420:	685b      	ldr	r3, [r3, #4]
 8012422:	60fb      	str	r3, [r7, #12]
 8012424:	68fb      	ldr	r3, [r7, #12]
 8012426:	685b      	ldr	r3, [r3, #4]
 8012428:	681b      	ldr	r3, [r3, #0]
 801242a:	68ba      	ldr	r2, [r7, #8]
 801242c:	429a      	cmp	r2, r3
 801242e:	d2f6      	bcs.n	801241e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8012430:	68fb      	ldr	r3, [r7, #12]
 8012432:	685a      	ldr	r2, [r3, #4]
 8012434:	683b      	ldr	r3, [r7, #0]
 8012436:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8012438:	683b      	ldr	r3, [r7, #0]
 801243a:	685b      	ldr	r3, [r3, #4]
 801243c:	683a      	ldr	r2, [r7, #0]
 801243e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8012440:	683b      	ldr	r3, [r7, #0]
 8012442:	68fa      	ldr	r2, [r7, #12]
 8012444:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8012446:	68fb      	ldr	r3, [r7, #12]
 8012448:	683a      	ldr	r2, [r7, #0]
 801244a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 801244c:	683b      	ldr	r3, [r7, #0]
 801244e:	687a      	ldr	r2, [r7, #4]
 8012450:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012452:	687b      	ldr	r3, [r7, #4]
 8012454:	681b      	ldr	r3, [r3, #0]
 8012456:	1c5a      	adds	r2, r3, #1
 8012458:	687b      	ldr	r3, [r7, #4]
 801245a:	601a      	str	r2, [r3, #0]
}
 801245c:	bf00      	nop
 801245e:	3714      	adds	r7, #20
 8012460:	46bd      	mov	sp, r7
 8012462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012466:	4770      	bx	lr

08012468 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8012468:	b480      	push	{r7}
 801246a:	b085      	sub	sp, #20
 801246c:	af00      	add	r7, sp, #0
 801246e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	691b      	ldr	r3, [r3, #16]
 8012474:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8012476:	687b      	ldr	r3, [r7, #4]
 8012478:	685b      	ldr	r3, [r3, #4]
 801247a:	687a      	ldr	r2, [r7, #4]
 801247c:	6892      	ldr	r2, [r2, #8]
 801247e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8012480:	687b      	ldr	r3, [r7, #4]
 8012482:	689b      	ldr	r3, [r3, #8]
 8012484:	687a      	ldr	r2, [r7, #4]
 8012486:	6852      	ldr	r2, [r2, #4]
 8012488:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801248a:	68fb      	ldr	r3, [r7, #12]
 801248c:	685b      	ldr	r3, [r3, #4]
 801248e:	687a      	ldr	r2, [r7, #4]
 8012490:	429a      	cmp	r2, r3
 8012492:	d103      	bne.n	801249c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8012494:	687b      	ldr	r3, [r7, #4]
 8012496:	689a      	ldr	r2, [r3, #8]
 8012498:	68fb      	ldr	r3, [r7, #12]
 801249a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 801249c:	687b      	ldr	r3, [r7, #4]
 801249e:	2200      	movs	r2, #0
 80124a0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80124a2:	68fb      	ldr	r3, [r7, #12]
 80124a4:	681b      	ldr	r3, [r3, #0]
 80124a6:	1e5a      	subs	r2, r3, #1
 80124a8:	68fb      	ldr	r3, [r7, #12]
 80124aa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80124ac:	68fb      	ldr	r3, [r7, #12]
 80124ae:	681b      	ldr	r3, [r3, #0]
}
 80124b0:	4618      	mov	r0, r3
 80124b2:	3714      	adds	r7, #20
 80124b4:	46bd      	mov	sp, r7
 80124b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124ba:	4770      	bx	lr

080124bc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80124bc:	b580      	push	{r7, lr}
 80124be:	b084      	sub	sp, #16
 80124c0:	af00      	add	r7, sp, #0
 80124c2:	6078      	str	r0, [r7, #4]
 80124c4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80124c6:	687b      	ldr	r3, [r7, #4]
 80124c8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80124ca:	68fb      	ldr	r3, [r7, #12]
 80124cc:	2b00      	cmp	r3, #0
 80124ce:	d10b      	bne.n	80124e8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80124d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124d4:	b672      	cpsid	i
 80124d6:	f383 8811 	msr	BASEPRI, r3
 80124da:	f3bf 8f6f 	isb	sy
 80124de:	f3bf 8f4f 	dsb	sy
 80124e2:	b662      	cpsie	i
 80124e4:	60bb      	str	r3, [r7, #8]
 80124e6:	e7fe      	b.n	80124e6 <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 80124e8:	f002 fc5e 	bl	8014da8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80124ec:	68fb      	ldr	r3, [r7, #12]
 80124ee:	681a      	ldr	r2, [r3, #0]
 80124f0:	68fb      	ldr	r3, [r7, #12]
 80124f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80124f4:	68f9      	ldr	r1, [r7, #12]
 80124f6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80124f8:	fb01 f303 	mul.w	r3, r1, r3
 80124fc:	441a      	add	r2, r3
 80124fe:	68fb      	ldr	r3, [r7, #12]
 8012500:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8012502:	68fb      	ldr	r3, [r7, #12]
 8012504:	2200      	movs	r2, #0
 8012506:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8012508:	68fb      	ldr	r3, [r7, #12]
 801250a:	681a      	ldr	r2, [r3, #0]
 801250c:	68fb      	ldr	r3, [r7, #12]
 801250e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012510:	68fb      	ldr	r3, [r7, #12]
 8012512:	681a      	ldr	r2, [r3, #0]
 8012514:	68fb      	ldr	r3, [r7, #12]
 8012516:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012518:	3b01      	subs	r3, #1
 801251a:	68f9      	ldr	r1, [r7, #12]
 801251c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801251e:	fb01 f303 	mul.w	r3, r1, r3
 8012522:	441a      	add	r2, r3
 8012524:	68fb      	ldr	r3, [r7, #12]
 8012526:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8012528:	68fb      	ldr	r3, [r7, #12]
 801252a:	22ff      	movs	r2, #255	; 0xff
 801252c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8012530:	68fb      	ldr	r3, [r7, #12]
 8012532:	22ff      	movs	r2, #255	; 0xff
 8012534:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8012538:	683b      	ldr	r3, [r7, #0]
 801253a:	2b00      	cmp	r3, #0
 801253c:	d114      	bne.n	8012568 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801253e:	68fb      	ldr	r3, [r7, #12]
 8012540:	691b      	ldr	r3, [r3, #16]
 8012542:	2b00      	cmp	r3, #0
 8012544:	d01a      	beq.n	801257c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012546:	68fb      	ldr	r3, [r7, #12]
 8012548:	3310      	adds	r3, #16
 801254a:	4618      	mov	r0, r3
 801254c:	f001 fc2e 	bl	8013dac <xTaskRemoveFromEventList>
 8012550:	4603      	mov	r3, r0
 8012552:	2b00      	cmp	r3, #0
 8012554:	d012      	beq.n	801257c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8012556:	4b0d      	ldr	r3, [pc, #52]	; (801258c <xQueueGenericReset+0xd0>)
 8012558:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801255c:	601a      	str	r2, [r3, #0]
 801255e:	f3bf 8f4f 	dsb	sy
 8012562:	f3bf 8f6f 	isb	sy
 8012566:	e009      	b.n	801257c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8012568:	68fb      	ldr	r3, [r7, #12]
 801256a:	3310      	adds	r3, #16
 801256c:	4618      	mov	r0, r3
 801256e:	f7ff fef1 	bl	8012354 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8012572:	68fb      	ldr	r3, [r7, #12]
 8012574:	3324      	adds	r3, #36	; 0x24
 8012576:	4618      	mov	r0, r3
 8012578:	f7ff feec 	bl	8012354 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801257c:	f002 fc46 	bl	8014e0c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8012580:	2301      	movs	r3, #1
}
 8012582:	4618      	mov	r0, r3
 8012584:	3710      	adds	r7, #16
 8012586:	46bd      	mov	sp, r7
 8012588:	bd80      	pop	{r7, pc}
 801258a:	bf00      	nop
 801258c:	e000ed04 	.word	0xe000ed04

08012590 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8012590:	b580      	push	{r7, lr}
 8012592:	b08e      	sub	sp, #56	; 0x38
 8012594:	af02      	add	r7, sp, #8
 8012596:	60f8      	str	r0, [r7, #12]
 8012598:	60b9      	str	r1, [r7, #8]
 801259a:	607a      	str	r2, [r7, #4]
 801259c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801259e:	68fb      	ldr	r3, [r7, #12]
 80125a0:	2b00      	cmp	r3, #0
 80125a2:	d10b      	bne.n	80125bc <xQueueGenericCreateStatic+0x2c>
 80125a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125a8:	b672      	cpsid	i
 80125aa:	f383 8811 	msr	BASEPRI, r3
 80125ae:	f3bf 8f6f 	isb	sy
 80125b2:	f3bf 8f4f 	dsb	sy
 80125b6:	b662      	cpsie	i
 80125b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80125ba:	e7fe      	b.n	80125ba <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80125bc:	683b      	ldr	r3, [r7, #0]
 80125be:	2b00      	cmp	r3, #0
 80125c0:	d10b      	bne.n	80125da <xQueueGenericCreateStatic+0x4a>
 80125c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125c6:	b672      	cpsid	i
 80125c8:	f383 8811 	msr	BASEPRI, r3
 80125cc:	f3bf 8f6f 	isb	sy
 80125d0:	f3bf 8f4f 	dsb	sy
 80125d4:	b662      	cpsie	i
 80125d6:	627b      	str	r3, [r7, #36]	; 0x24
 80125d8:	e7fe      	b.n	80125d8 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	2b00      	cmp	r3, #0
 80125de:	d002      	beq.n	80125e6 <xQueueGenericCreateStatic+0x56>
 80125e0:	68bb      	ldr	r3, [r7, #8]
 80125e2:	2b00      	cmp	r3, #0
 80125e4:	d001      	beq.n	80125ea <xQueueGenericCreateStatic+0x5a>
 80125e6:	2301      	movs	r3, #1
 80125e8:	e000      	b.n	80125ec <xQueueGenericCreateStatic+0x5c>
 80125ea:	2300      	movs	r3, #0
 80125ec:	2b00      	cmp	r3, #0
 80125ee:	d10b      	bne.n	8012608 <xQueueGenericCreateStatic+0x78>
 80125f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125f4:	b672      	cpsid	i
 80125f6:	f383 8811 	msr	BASEPRI, r3
 80125fa:	f3bf 8f6f 	isb	sy
 80125fe:	f3bf 8f4f 	dsb	sy
 8012602:	b662      	cpsie	i
 8012604:	623b      	str	r3, [r7, #32]
 8012606:	e7fe      	b.n	8012606 <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	2b00      	cmp	r3, #0
 801260c:	d102      	bne.n	8012614 <xQueueGenericCreateStatic+0x84>
 801260e:	68bb      	ldr	r3, [r7, #8]
 8012610:	2b00      	cmp	r3, #0
 8012612:	d101      	bne.n	8012618 <xQueueGenericCreateStatic+0x88>
 8012614:	2301      	movs	r3, #1
 8012616:	e000      	b.n	801261a <xQueueGenericCreateStatic+0x8a>
 8012618:	2300      	movs	r3, #0
 801261a:	2b00      	cmp	r3, #0
 801261c:	d10b      	bne.n	8012636 <xQueueGenericCreateStatic+0xa6>
 801261e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012622:	b672      	cpsid	i
 8012624:	f383 8811 	msr	BASEPRI, r3
 8012628:	f3bf 8f6f 	isb	sy
 801262c:	f3bf 8f4f 	dsb	sy
 8012630:	b662      	cpsie	i
 8012632:	61fb      	str	r3, [r7, #28]
 8012634:	e7fe      	b.n	8012634 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8012636:	2350      	movs	r3, #80	; 0x50
 8012638:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801263a:	697b      	ldr	r3, [r7, #20]
 801263c:	2b50      	cmp	r3, #80	; 0x50
 801263e:	d00b      	beq.n	8012658 <xQueueGenericCreateStatic+0xc8>
 8012640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012644:	b672      	cpsid	i
 8012646:	f383 8811 	msr	BASEPRI, r3
 801264a:	f3bf 8f6f 	isb	sy
 801264e:	f3bf 8f4f 	dsb	sy
 8012652:	b662      	cpsie	i
 8012654:	61bb      	str	r3, [r7, #24]
 8012656:	e7fe      	b.n	8012656 <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8012658:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801265a:	683b      	ldr	r3, [r7, #0]
 801265c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 801265e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012660:	2b00      	cmp	r3, #0
 8012662:	d00d      	beq.n	8012680 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8012664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012666:	2201      	movs	r2, #1
 8012668:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801266c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8012670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012672:	9300      	str	r3, [sp, #0]
 8012674:	4613      	mov	r3, r2
 8012676:	687a      	ldr	r2, [r7, #4]
 8012678:	68b9      	ldr	r1, [r7, #8]
 801267a:	68f8      	ldr	r0, [r7, #12]
 801267c:	f000 f846 	bl	801270c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8012680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8012682:	4618      	mov	r0, r3
 8012684:	3730      	adds	r7, #48	; 0x30
 8012686:	46bd      	mov	sp, r7
 8012688:	bd80      	pop	{r7, pc}

0801268a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 801268a:	b580      	push	{r7, lr}
 801268c:	b08a      	sub	sp, #40	; 0x28
 801268e:	af02      	add	r7, sp, #8
 8012690:	60f8      	str	r0, [r7, #12]
 8012692:	60b9      	str	r1, [r7, #8]
 8012694:	4613      	mov	r3, r2
 8012696:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8012698:	68fb      	ldr	r3, [r7, #12]
 801269a:	2b00      	cmp	r3, #0
 801269c:	d10b      	bne.n	80126b6 <xQueueGenericCreate+0x2c>
 801269e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126a2:	b672      	cpsid	i
 80126a4:	f383 8811 	msr	BASEPRI, r3
 80126a8:	f3bf 8f6f 	isb	sy
 80126ac:	f3bf 8f4f 	dsb	sy
 80126b0:	b662      	cpsie	i
 80126b2:	613b      	str	r3, [r7, #16]
 80126b4:	e7fe      	b.n	80126b4 <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80126b6:	68bb      	ldr	r3, [r7, #8]
 80126b8:	2b00      	cmp	r3, #0
 80126ba:	d102      	bne.n	80126c2 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80126bc:	2300      	movs	r3, #0
 80126be:	61fb      	str	r3, [r7, #28]
 80126c0:	e004      	b.n	80126cc <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80126c2:	68fb      	ldr	r3, [r7, #12]
 80126c4:	68ba      	ldr	r2, [r7, #8]
 80126c6:	fb02 f303 	mul.w	r3, r2, r3
 80126ca:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80126cc:	69fb      	ldr	r3, [r7, #28]
 80126ce:	3350      	adds	r3, #80	; 0x50
 80126d0:	4618      	mov	r0, r3
 80126d2:	f002 fc8b 	bl	8014fec <pvPortMalloc>
 80126d6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80126d8:	69bb      	ldr	r3, [r7, #24]
 80126da:	2b00      	cmp	r3, #0
 80126dc:	d011      	beq.n	8012702 <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80126de:	69bb      	ldr	r3, [r7, #24]
 80126e0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80126e2:	697b      	ldr	r3, [r7, #20]
 80126e4:	3350      	adds	r3, #80	; 0x50
 80126e6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80126e8:	69bb      	ldr	r3, [r7, #24]
 80126ea:	2200      	movs	r2, #0
 80126ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80126f0:	79fa      	ldrb	r2, [r7, #7]
 80126f2:	69bb      	ldr	r3, [r7, #24]
 80126f4:	9300      	str	r3, [sp, #0]
 80126f6:	4613      	mov	r3, r2
 80126f8:	697a      	ldr	r2, [r7, #20]
 80126fa:	68b9      	ldr	r1, [r7, #8]
 80126fc:	68f8      	ldr	r0, [r7, #12]
 80126fe:	f000 f805 	bl	801270c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8012702:	69bb      	ldr	r3, [r7, #24]
	}
 8012704:	4618      	mov	r0, r3
 8012706:	3720      	adds	r7, #32
 8012708:	46bd      	mov	sp, r7
 801270a:	bd80      	pop	{r7, pc}

0801270c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 801270c:	b580      	push	{r7, lr}
 801270e:	b084      	sub	sp, #16
 8012710:	af00      	add	r7, sp, #0
 8012712:	60f8      	str	r0, [r7, #12]
 8012714:	60b9      	str	r1, [r7, #8]
 8012716:	607a      	str	r2, [r7, #4]
 8012718:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801271a:	68bb      	ldr	r3, [r7, #8]
 801271c:	2b00      	cmp	r3, #0
 801271e:	d103      	bne.n	8012728 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8012720:	69bb      	ldr	r3, [r7, #24]
 8012722:	69ba      	ldr	r2, [r7, #24]
 8012724:	601a      	str	r2, [r3, #0]
 8012726:	e002      	b.n	801272e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8012728:	69bb      	ldr	r3, [r7, #24]
 801272a:	687a      	ldr	r2, [r7, #4]
 801272c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801272e:	69bb      	ldr	r3, [r7, #24]
 8012730:	68fa      	ldr	r2, [r7, #12]
 8012732:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8012734:	69bb      	ldr	r3, [r7, #24]
 8012736:	68ba      	ldr	r2, [r7, #8]
 8012738:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801273a:	2101      	movs	r1, #1
 801273c:	69b8      	ldr	r0, [r7, #24]
 801273e:	f7ff febd 	bl	80124bc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8012742:	69bb      	ldr	r3, [r7, #24]
 8012744:	78fa      	ldrb	r2, [r7, #3]
 8012746:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801274a:	bf00      	nop
 801274c:	3710      	adds	r7, #16
 801274e:	46bd      	mov	sp, r7
 8012750:	bd80      	pop	{r7, pc}

08012752 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8012752:	b580      	push	{r7, lr}
 8012754:	b08a      	sub	sp, #40	; 0x28
 8012756:	af02      	add	r7, sp, #8
 8012758:	60f8      	str	r0, [r7, #12]
 801275a:	60b9      	str	r1, [r7, #8]
 801275c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 801275e:	68fb      	ldr	r3, [r7, #12]
 8012760:	2b00      	cmp	r3, #0
 8012762:	d10b      	bne.n	801277c <xQueueCreateCountingSemaphoreStatic+0x2a>
 8012764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012768:	b672      	cpsid	i
 801276a:	f383 8811 	msr	BASEPRI, r3
 801276e:	f3bf 8f6f 	isb	sy
 8012772:	f3bf 8f4f 	dsb	sy
 8012776:	b662      	cpsie	i
 8012778:	61bb      	str	r3, [r7, #24]
 801277a:	e7fe      	b.n	801277a <xQueueCreateCountingSemaphoreStatic+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 801277c:	68ba      	ldr	r2, [r7, #8]
 801277e:	68fb      	ldr	r3, [r7, #12]
 8012780:	429a      	cmp	r2, r3
 8012782:	d90b      	bls.n	801279c <xQueueCreateCountingSemaphoreStatic+0x4a>
 8012784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012788:	b672      	cpsid	i
 801278a:	f383 8811 	msr	BASEPRI, r3
 801278e:	f3bf 8f6f 	isb	sy
 8012792:	f3bf 8f4f 	dsb	sy
 8012796:	b662      	cpsie	i
 8012798:	617b      	str	r3, [r7, #20]
 801279a:	e7fe      	b.n	801279a <xQueueCreateCountingSemaphoreStatic+0x48>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 801279c:	2302      	movs	r3, #2
 801279e:	9300      	str	r3, [sp, #0]
 80127a0:	687b      	ldr	r3, [r7, #4]
 80127a2:	2200      	movs	r2, #0
 80127a4:	2100      	movs	r1, #0
 80127a6:	68f8      	ldr	r0, [r7, #12]
 80127a8:	f7ff fef2 	bl	8012590 <xQueueGenericCreateStatic>
 80127ac:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80127ae:	69fb      	ldr	r3, [r7, #28]
 80127b0:	2b00      	cmp	r3, #0
 80127b2:	d002      	beq.n	80127ba <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80127b4:	69fb      	ldr	r3, [r7, #28]
 80127b6:	68ba      	ldr	r2, [r7, #8]
 80127b8:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80127ba:	69fb      	ldr	r3, [r7, #28]
	}
 80127bc:	4618      	mov	r0, r3
 80127be:	3720      	adds	r7, #32
 80127c0:	46bd      	mov	sp, r7
 80127c2:	bd80      	pop	{r7, pc}

080127c4 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80127c4:	b580      	push	{r7, lr}
 80127c6:	b086      	sub	sp, #24
 80127c8:	af00      	add	r7, sp, #0
 80127ca:	6078      	str	r0, [r7, #4]
 80127cc:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80127ce:	687b      	ldr	r3, [r7, #4]
 80127d0:	2b00      	cmp	r3, #0
 80127d2:	d10b      	bne.n	80127ec <xQueueCreateCountingSemaphore+0x28>
 80127d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127d8:	b672      	cpsid	i
 80127da:	f383 8811 	msr	BASEPRI, r3
 80127de:	f3bf 8f6f 	isb	sy
 80127e2:	f3bf 8f4f 	dsb	sy
 80127e6:	b662      	cpsie	i
 80127e8:	613b      	str	r3, [r7, #16]
 80127ea:	e7fe      	b.n	80127ea <xQueueCreateCountingSemaphore+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80127ec:	683a      	ldr	r2, [r7, #0]
 80127ee:	687b      	ldr	r3, [r7, #4]
 80127f0:	429a      	cmp	r2, r3
 80127f2:	d90b      	bls.n	801280c <xQueueCreateCountingSemaphore+0x48>
 80127f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127f8:	b672      	cpsid	i
 80127fa:	f383 8811 	msr	BASEPRI, r3
 80127fe:	f3bf 8f6f 	isb	sy
 8012802:	f3bf 8f4f 	dsb	sy
 8012806:	b662      	cpsie	i
 8012808:	60fb      	str	r3, [r7, #12]
 801280a:	e7fe      	b.n	801280a <xQueueCreateCountingSemaphore+0x46>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 801280c:	2202      	movs	r2, #2
 801280e:	2100      	movs	r1, #0
 8012810:	6878      	ldr	r0, [r7, #4]
 8012812:	f7ff ff3a 	bl	801268a <xQueueGenericCreate>
 8012816:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8012818:	697b      	ldr	r3, [r7, #20]
 801281a:	2b00      	cmp	r3, #0
 801281c:	d002      	beq.n	8012824 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 801281e:	697b      	ldr	r3, [r7, #20]
 8012820:	683a      	ldr	r2, [r7, #0]
 8012822:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8012824:	697b      	ldr	r3, [r7, #20]
	}
 8012826:	4618      	mov	r0, r3
 8012828:	3718      	adds	r7, #24
 801282a:	46bd      	mov	sp, r7
 801282c:	bd80      	pop	{r7, pc}
	...

08012830 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8012830:	b580      	push	{r7, lr}
 8012832:	b08e      	sub	sp, #56	; 0x38
 8012834:	af00      	add	r7, sp, #0
 8012836:	60f8      	str	r0, [r7, #12]
 8012838:	60b9      	str	r1, [r7, #8]
 801283a:	607a      	str	r2, [r7, #4]
 801283c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801283e:	2300      	movs	r3, #0
 8012840:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8012842:	68fb      	ldr	r3, [r7, #12]
 8012844:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8012846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012848:	2b00      	cmp	r3, #0
 801284a:	d10b      	bne.n	8012864 <xQueueGenericSend+0x34>
 801284c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012850:	b672      	cpsid	i
 8012852:	f383 8811 	msr	BASEPRI, r3
 8012856:	f3bf 8f6f 	isb	sy
 801285a:	f3bf 8f4f 	dsb	sy
 801285e:	b662      	cpsie	i
 8012860:	62bb      	str	r3, [r7, #40]	; 0x28
 8012862:	e7fe      	b.n	8012862 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012864:	68bb      	ldr	r3, [r7, #8]
 8012866:	2b00      	cmp	r3, #0
 8012868:	d103      	bne.n	8012872 <xQueueGenericSend+0x42>
 801286a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801286c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801286e:	2b00      	cmp	r3, #0
 8012870:	d101      	bne.n	8012876 <xQueueGenericSend+0x46>
 8012872:	2301      	movs	r3, #1
 8012874:	e000      	b.n	8012878 <xQueueGenericSend+0x48>
 8012876:	2300      	movs	r3, #0
 8012878:	2b00      	cmp	r3, #0
 801287a:	d10b      	bne.n	8012894 <xQueueGenericSend+0x64>
 801287c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012880:	b672      	cpsid	i
 8012882:	f383 8811 	msr	BASEPRI, r3
 8012886:	f3bf 8f6f 	isb	sy
 801288a:	f3bf 8f4f 	dsb	sy
 801288e:	b662      	cpsie	i
 8012890:	627b      	str	r3, [r7, #36]	; 0x24
 8012892:	e7fe      	b.n	8012892 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8012894:	683b      	ldr	r3, [r7, #0]
 8012896:	2b02      	cmp	r3, #2
 8012898:	d103      	bne.n	80128a2 <xQueueGenericSend+0x72>
 801289a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801289c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801289e:	2b01      	cmp	r3, #1
 80128a0:	d101      	bne.n	80128a6 <xQueueGenericSend+0x76>
 80128a2:	2301      	movs	r3, #1
 80128a4:	e000      	b.n	80128a8 <xQueueGenericSend+0x78>
 80128a6:	2300      	movs	r3, #0
 80128a8:	2b00      	cmp	r3, #0
 80128aa:	d10b      	bne.n	80128c4 <xQueueGenericSend+0x94>
 80128ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128b0:	b672      	cpsid	i
 80128b2:	f383 8811 	msr	BASEPRI, r3
 80128b6:	f3bf 8f6f 	isb	sy
 80128ba:	f3bf 8f4f 	dsb	sy
 80128be:	b662      	cpsie	i
 80128c0:	623b      	str	r3, [r7, #32]
 80128c2:	e7fe      	b.n	80128c2 <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80128c4:	f001 fc30 	bl	8014128 <xTaskGetSchedulerState>
 80128c8:	4603      	mov	r3, r0
 80128ca:	2b00      	cmp	r3, #0
 80128cc:	d102      	bne.n	80128d4 <xQueueGenericSend+0xa4>
 80128ce:	687b      	ldr	r3, [r7, #4]
 80128d0:	2b00      	cmp	r3, #0
 80128d2:	d101      	bne.n	80128d8 <xQueueGenericSend+0xa8>
 80128d4:	2301      	movs	r3, #1
 80128d6:	e000      	b.n	80128da <xQueueGenericSend+0xaa>
 80128d8:	2300      	movs	r3, #0
 80128da:	2b00      	cmp	r3, #0
 80128dc:	d10b      	bne.n	80128f6 <xQueueGenericSend+0xc6>
 80128de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128e2:	b672      	cpsid	i
 80128e4:	f383 8811 	msr	BASEPRI, r3
 80128e8:	f3bf 8f6f 	isb	sy
 80128ec:	f3bf 8f4f 	dsb	sy
 80128f0:	b662      	cpsie	i
 80128f2:	61fb      	str	r3, [r7, #28]
 80128f4:	e7fe      	b.n	80128f4 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80128f6:	f002 fa57 	bl	8014da8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80128fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80128fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012900:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012902:	429a      	cmp	r2, r3
 8012904:	d302      	bcc.n	801290c <xQueueGenericSend+0xdc>
 8012906:	683b      	ldr	r3, [r7, #0]
 8012908:	2b02      	cmp	r3, #2
 801290a:	d129      	bne.n	8012960 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801290c:	683a      	ldr	r2, [r7, #0]
 801290e:	68b9      	ldr	r1, [r7, #8]
 8012910:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012912:	f000 fc6e 	bl	80131f2 <prvCopyDataToQueue>
 8012916:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801291a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801291c:	2b00      	cmp	r3, #0
 801291e:	d010      	beq.n	8012942 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012922:	3324      	adds	r3, #36	; 0x24
 8012924:	4618      	mov	r0, r3
 8012926:	f001 fa41 	bl	8013dac <xTaskRemoveFromEventList>
 801292a:	4603      	mov	r3, r0
 801292c:	2b00      	cmp	r3, #0
 801292e:	d013      	beq.n	8012958 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8012930:	4b3f      	ldr	r3, [pc, #252]	; (8012a30 <xQueueGenericSend+0x200>)
 8012932:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012936:	601a      	str	r2, [r3, #0]
 8012938:	f3bf 8f4f 	dsb	sy
 801293c:	f3bf 8f6f 	isb	sy
 8012940:	e00a      	b.n	8012958 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8012942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012944:	2b00      	cmp	r3, #0
 8012946:	d007      	beq.n	8012958 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8012948:	4b39      	ldr	r3, [pc, #228]	; (8012a30 <xQueueGenericSend+0x200>)
 801294a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801294e:	601a      	str	r2, [r3, #0]
 8012950:	f3bf 8f4f 	dsb	sy
 8012954:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8012958:	f002 fa58 	bl	8014e0c <vPortExitCritical>
				return pdPASS;
 801295c:	2301      	movs	r3, #1
 801295e:	e063      	b.n	8012a28 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012960:	687b      	ldr	r3, [r7, #4]
 8012962:	2b00      	cmp	r3, #0
 8012964:	d103      	bne.n	801296e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8012966:	f002 fa51 	bl	8014e0c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801296a:	2300      	movs	r3, #0
 801296c:	e05c      	b.n	8012a28 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 801296e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012970:	2b00      	cmp	r3, #0
 8012972:	d106      	bne.n	8012982 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012974:	f107 0314 	add.w	r3, r7, #20
 8012978:	4618      	mov	r0, r3
 801297a:	f001 fa7b 	bl	8013e74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801297e:	2301      	movs	r3, #1
 8012980:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012982:	f002 fa43 	bl	8014e0c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012986:	f000 ffd9 	bl	801393c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801298a:	f002 fa0d 	bl	8014da8 <vPortEnterCritical>
 801298e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012990:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012994:	b25b      	sxtb	r3, r3
 8012996:	f1b3 3fff 	cmp.w	r3, #4294967295
 801299a:	d103      	bne.n	80129a4 <xQueueGenericSend+0x174>
 801299c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801299e:	2200      	movs	r2, #0
 80129a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80129a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80129aa:	b25b      	sxtb	r3, r3
 80129ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80129b0:	d103      	bne.n	80129ba <xQueueGenericSend+0x18a>
 80129b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129b4:	2200      	movs	r2, #0
 80129b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80129ba:	f002 fa27 	bl	8014e0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80129be:	1d3a      	adds	r2, r7, #4
 80129c0:	f107 0314 	add.w	r3, r7, #20
 80129c4:	4611      	mov	r1, r2
 80129c6:	4618      	mov	r0, r3
 80129c8:	f001 fa6a 	bl	8013ea0 <xTaskCheckForTimeOut>
 80129cc:	4603      	mov	r3, r0
 80129ce:	2b00      	cmp	r3, #0
 80129d0:	d124      	bne.n	8012a1c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80129d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80129d4:	f000 fd05 	bl	80133e2 <prvIsQueueFull>
 80129d8:	4603      	mov	r3, r0
 80129da:	2b00      	cmp	r3, #0
 80129dc:	d018      	beq.n	8012a10 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80129de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129e0:	3310      	adds	r3, #16
 80129e2:	687a      	ldr	r2, [r7, #4]
 80129e4:	4611      	mov	r1, r2
 80129e6:	4618      	mov	r0, r3
 80129e8:	f001 f98e 	bl	8013d08 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80129ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80129ee:	f000 fc90 	bl	8013312 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80129f2:	f000 ffb1 	bl	8013958 <xTaskResumeAll>
 80129f6:	4603      	mov	r3, r0
 80129f8:	2b00      	cmp	r3, #0
 80129fa:	f47f af7c 	bne.w	80128f6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80129fe:	4b0c      	ldr	r3, [pc, #48]	; (8012a30 <xQueueGenericSend+0x200>)
 8012a00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012a04:	601a      	str	r2, [r3, #0]
 8012a06:	f3bf 8f4f 	dsb	sy
 8012a0a:	f3bf 8f6f 	isb	sy
 8012a0e:	e772      	b.n	80128f6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8012a10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012a12:	f000 fc7e 	bl	8013312 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012a16:	f000 ff9f 	bl	8013958 <xTaskResumeAll>
 8012a1a:	e76c      	b.n	80128f6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8012a1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012a1e:	f000 fc78 	bl	8013312 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012a22:	f000 ff99 	bl	8013958 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8012a26:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8012a28:	4618      	mov	r0, r3
 8012a2a:	3738      	adds	r7, #56	; 0x38
 8012a2c:	46bd      	mov	sp, r7
 8012a2e:	bd80      	pop	{r7, pc}
 8012a30:	e000ed04 	.word	0xe000ed04

08012a34 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8012a34:	b580      	push	{r7, lr}
 8012a36:	b08e      	sub	sp, #56	; 0x38
 8012a38:	af00      	add	r7, sp, #0
 8012a3a:	60f8      	str	r0, [r7, #12]
 8012a3c:	60b9      	str	r1, [r7, #8]
 8012a3e:	607a      	str	r2, [r7, #4]
 8012a40:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8012a42:	68fb      	ldr	r3, [r7, #12]
 8012a44:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8012a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a48:	2b00      	cmp	r3, #0
 8012a4a:	d10b      	bne.n	8012a64 <xQueueGenericSendFromISR+0x30>
 8012a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a50:	b672      	cpsid	i
 8012a52:	f383 8811 	msr	BASEPRI, r3
 8012a56:	f3bf 8f6f 	isb	sy
 8012a5a:	f3bf 8f4f 	dsb	sy
 8012a5e:	b662      	cpsie	i
 8012a60:	627b      	str	r3, [r7, #36]	; 0x24
 8012a62:	e7fe      	b.n	8012a62 <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012a64:	68bb      	ldr	r3, [r7, #8]
 8012a66:	2b00      	cmp	r3, #0
 8012a68:	d103      	bne.n	8012a72 <xQueueGenericSendFromISR+0x3e>
 8012a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012a6e:	2b00      	cmp	r3, #0
 8012a70:	d101      	bne.n	8012a76 <xQueueGenericSendFromISR+0x42>
 8012a72:	2301      	movs	r3, #1
 8012a74:	e000      	b.n	8012a78 <xQueueGenericSendFromISR+0x44>
 8012a76:	2300      	movs	r3, #0
 8012a78:	2b00      	cmp	r3, #0
 8012a7a:	d10b      	bne.n	8012a94 <xQueueGenericSendFromISR+0x60>
 8012a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a80:	b672      	cpsid	i
 8012a82:	f383 8811 	msr	BASEPRI, r3
 8012a86:	f3bf 8f6f 	isb	sy
 8012a8a:	f3bf 8f4f 	dsb	sy
 8012a8e:	b662      	cpsie	i
 8012a90:	623b      	str	r3, [r7, #32]
 8012a92:	e7fe      	b.n	8012a92 <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8012a94:	683b      	ldr	r3, [r7, #0]
 8012a96:	2b02      	cmp	r3, #2
 8012a98:	d103      	bne.n	8012aa2 <xQueueGenericSendFromISR+0x6e>
 8012a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012a9e:	2b01      	cmp	r3, #1
 8012aa0:	d101      	bne.n	8012aa6 <xQueueGenericSendFromISR+0x72>
 8012aa2:	2301      	movs	r3, #1
 8012aa4:	e000      	b.n	8012aa8 <xQueueGenericSendFromISR+0x74>
 8012aa6:	2300      	movs	r3, #0
 8012aa8:	2b00      	cmp	r3, #0
 8012aaa:	d10b      	bne.n	8012ac4 <xQueueGenericSendFromISR+0x90>
 8012aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ab0:	b672      	cpsid	i
 8012ab2:	f383 8811 	msr	BASEPRI, r3
 8012ab6:	f3bf 8f6f 	isb	sy
 8012aba:	f3bf 8f4f 	dsb	sy
 8012abe:	b662      	cpsie	i
 8012ac0:	61fb      	str	r3, [r7, #28]
 8012ac2:	e7fe      	b.n	8012ac2 <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012ac4:	f002 fa50 	bl	8014f68 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8012ac8:	f3ef 8211 	mrs	r2, BASEPRI
 8012acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ad0:	b672      	cpsid	i
 8012ad2:	f383 8811 	msr	BASEPRI, r3
 8012ad6:	f3bf 8f6f 	isb	sy
 8012ada:	f3bf 8f4f 	dsb	sy
 8012ade:	b662      	cpsie	i
 8012ae0:	61ba      	str	r2, [r7, #24]
 8012ae2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8012ae4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8012ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012aea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012aee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012af0:	429a      	cmp	r2, r3
 8012af2:	d302      	bcc.n	8012afa <xQueueGenericSendFromISR+0xc6>
 8012af4:	683b      	ldr	r3, [r7, #0]
 8012af6:	2b02      	cmp	r3, #2
 8012af8:	d12c      	bne.n	8012b54 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8012afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012afc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012b00:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012b04:	683a      	ldr	r2, [r7, #0]
 8012b06:	68b9      	ldr	r1, [r7, #8]
 8012b08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012b0a:	f000 fb72 	bl	80131f2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8012b0e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8012b12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012b16:	d112      	bne.n	8012b3e <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b1c:	2b00      	cmp	r3, #0
 8012b1e:	d016      	beq.n	8012b4e <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b22:	3324      	adds	r3, #36	; 0x24
 8012b24:	4618      	mov	r0, r3
 8012b26:	f001 f941 	bl	8013dac <xTaskRemoveFromEventList>
 8012b2a:	4603      	mov	r3, r0
 8012b2c:	2b00      	cmp	r3, #0
 8012b2e:	d00e      	beq.n	8012b4e <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8012b30:	687b      	ldr	r3, [r7, #4]
 8012b32:	2b00      	cmp	r3, #0
 8012b34:	d00b      	beq.n	8012b4e <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8012b36:	687b      	ldr	r3, [r7, #4]
 8012b38:	2201      	movs	r2, #1
 8012b3a:	601a      	str	r2, [r3, #0]
 8012b3c:	e007      	b.n	8012b4e <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8012b3e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8012b42:	3301      	adds	r3, #1
 8012b44:	b2db      	uxtb	r3, r3
 8012b46:	b25a      	sxtb	r2, r3
 8012b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8012b4e:	2301      	movs	r3, #1
 8012b50:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8012b52:	e001      	b.n	8012b58 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8012b54:	2300      	movs	r3, #0
 8012b56:	637b      	str	r3, [r7, #52]	; 0x34
 8012b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b5a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8012b5c:	693b      	ldr	r3, [r7, #16]
 8012b5e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012b62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8012b64:	4618      	mov	r0, r3
 8012b66:	3738      	adds	r7, #56	; 0x38
 8012b68:	46bd      	mov	sp, r7
 8012b6a:	bd80      	pop	{r7, pc}

08012b6c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8012b6c:	b580      	push	{r7, lr}
 8012b6e:	b08e      	sub	sp, #56	; 0x38
 8012b70:	af00      	add	r7, sp, #0
 8012b72:	6078      	str	r0, [r7, #4]
 8012b74:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8012b76:	687b      	ldr	r3, [r7, #4]
 8012b78:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8012b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b7c:	2b00      	cmp	r3, #0
 8012b7e:	d10b      	bne.n	8012b98 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8012b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b84:	b672      	cpsid	i
 8012b86:	f383 8811 	msr	BASEPRI, r3
 8012b8a:	f3bf 8f6f 	isb	sy
 8012b8e:	f3bf 8f4f 	dsb	sy
 8012b92:	b662      	cpsie	i
 8012b94:	623b      	str	r3, [r7, #32]
 8012b96:	e7fe      	b.n	8012b96 <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8012b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012b9c:	2b00      	cmp	r3, #0
 8012b9e:	d00b      	beq.n	8012bb8 <xQueueGiveFromISR+0x4c>
 8012ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ba4:	b672      	cpsid	i
 8012ba6:	f383 8811 	msr	BASEPRI, r3
 8012baa:	f3bf 8f6f 	isb	sy
 8012bae:	f3bf 8f4f 	dsb	sy
 8012bb2:	b662      	cpsie	i
 8012bb4:	61fb      	str	r3, [r7, #28]
 8012bb6:	e7fe      	b.n	8012bb6 <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8012bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bba:	681b      	ldr	r3, [r3, #0]
 8012bbc:	2b00      	cmp	r3, #0
 8012bbe:	d103      	bne.n	8012bc8 <xQueueGiveFromISR+0x5c>
 8012bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bc2:	689b      	ldr	r3, [r3, #8]
 8012bc4:	2b00      	cmp	r3, #0
 8012bc6:	d101      	bne.n	8012bcc <xQueueGiveFromISR+0x60>
 8012bc8:	2301      	movs	r3, #1
 8012bca:	e000      	b.n	8012bce <xQueueGiveFromISR+0x62>
 8012bcc:	2300      	movs	r3, #0
 8012bce:	2b00      	cmp	r3, #0
 8012bd0:	d10b      	bne.n	8012bea <xQueueGiveFromISR+0x7e>
 8012bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012bd6:	b672      	cpsid	i
 8012bd8:	f383 8811 	msr	BASEPRI, r3
 8012bdc:	f3bf 8f6f 	isb	sy
 8012be0:	f3bf 8f4f 	dsb	sy
 8012be4:	b662      	cpsie	i
 8012be6:	61bb      	str	r3, [r7, #24]
 8012be8:	e7fe      	b.n	8012be8 <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012bea:	f002 f9bd 	bl	8014f68 <vPortValidateInterruptPriority>
	__asm volatile
 8012bee:	f3ef 8211 	mrs	r2, BASEPRI
 8012bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012bf6:	b672      	cpsid	i
 8012bf8:	f383 8811 	msr	BASEPRI, r3
 8012bfc:	f3bf 8f6f 	isb	sy
 8012c00:	f3bf 8f4f 	dsb	sy
 8012c04:	b662      	cpsie	i
 8012c06:	617a      	str	r2, [r7, #20]
 8012c08:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8012c0a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012c12:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8012c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012c18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012c1a:	429a      	cmp	r2, r3
 8012c1c:	d22b      	bcs.n	8012c76 <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8012c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c20:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012c24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8012c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c2a:	1c5a      	adds	r2, r3, #1
 8012c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c2e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8012c30:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012c34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012c38:	d112      	bne.n	8012c60 <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c3e:	2b00      	cmp	r3, #0
 8012c40:	d016      	beq.n	8012c70 <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c44:	3324      	adds	r3, #36	; 0x24
 8012c46:	4618      	mov	r0, r3
 8012c48:	f001 f8b0 	bl	8013dac <xTaskRemoveFromEventList>
 8012c4c:	4603      	mov	r3, r0
 8012c4e:	2b00      	cmp	r3, #0
 8012c50:	d00e      	beq.n	8012c70 <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8012c52:	683b      	ldr	r3, [r7, #0]
 8012c54:	2b00      	cmp	r3, #0
 8012c56:	d00b      	beq.n	8012c70 <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8012c58:	683b      	ldr	r3, [r7, #0]
 8012c5a:	2201      	movs	r2, #1
 8012c5c:	601a      	str	r2, [r3, #0]
 8012c5e:	e007      	b.n	8012c70 <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8012c60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012c64:	3301      	adds	r3, #1
 8012c66:	b2db      	uxtb	r3, r3
 8012c68:	b25a      	sxtb	r2, r3
 8012c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8012c70:	2301      	movs	r3, #1
 8012c72:	637b      	str	r3, [r7, #52]	; 0x34
 8012c74:	e001      	b.n	8012c7a <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8012c76:	2300      	movs	r3, #0
 8012c78:	637b      	str	r3, [r7, #52]	; 0x34
 8012c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c7c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8012c7e:	68fb      	ldr	r3, [r7, #12]
 8012c80:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012c84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8012c86:	4618      	mov	r0, r3
 8012c88:	3738      	adds	r7, #56	; 0x38
 8012c8a:	46bd      	mov	sp, r7
 8012c8c:	bd80      	pop	{r7, pc}
	...

08012c90 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8012c90:	b580      	push	{r7, lr}
 8012c92:	b08c      	sub	sp, #48	; 0x30
 8012c94:	af00      	add	r7, sp, #0
 8012c96:	60f8      	str	r0, [r7, #12]
 8012c98:	60b9      	str	r1, [r7, #8]
 8012c9a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8012c9c:	2300      	movs	r3, #0
 8012c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8012ca0:	68fb      	ldr	r3, [r7, #12]
 8012ca2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8012ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ca6:	2b00      	cmp	r3, #0
 8012ca8:	d10b      	bne.n	8012cc2 <xQueueReceive+0x32>
	__asm volatile
 8012caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012cae:	b672      	cpsid	i
 8012cb0:	f383 8811 	msr	BASEPRI, r3
 8012cb4:	f3bf 8f6f 	isb	sy
 8012cb8:	f3bf 8f4f 	dsb	sy
 8012cbc:	b662      	cpsie	i
 8012cbe:	623b      	str	r3, [r7, #32]
 8012cc0:	e7fe      	b.n	8012cc0 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012cc2:	68bb      	ldr	r3, [r7, #8]
 8012cc4:	2b00      	cmp	r3, #0
 8012cc6:	d103      	bne.n	8012cd0 <xQueueReceive+0x40>
 8012cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012ccc:	2b00      	cmp	r3, #0
 8012cce:	d101      	bne.n	8012cd4 <xQueueReceive+0x44>
 8012cd0:	2301      	movs	r3, #1
 8012cd2:	e000      	b.n	8012cd6 <xQueueReceive+0x46>
 8012cd4:	2300      	movs	r3, #0
 8012cd6:	2b00      	cmp	r3, #0
 8012cd8:	d10b      	bne.n	8012cf2 <xQueueReceive+0x62>
 8012cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012cde:	b672      	cpsid	i
 8012ce0:	f383 8811 	msr	BASEPRI, r3
 8012ce4:	f3bf 8f6f 	isb	sy
 8012ce8:	f3bf 8f4f 	dsb	sy
 8012cec:	b662      	cpsie	i
 8012cee:	61fb      	str	r3, [r7, #28]
 8012cf0:	e7fe      	b.n	8012cf0 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012cf2:	f001 fa19 	bl	8014128 <xTaskGetSchedulerState>
 8012cf6:	4603      	mov	r3, r0
 8012cf8:	2b00      	cmp	r3, #0
 8012cfa:	d102      	bne.n	8012d02 <xQueueReceive+0x72>
 8012cfc:	687b      	ldr	r3, [r7, #4]
 8012cfe:	2b00      	cmp	r3, #0
 8012d00:	d101      	bne.n	8012d06 <xQueueReceive+0x76>
 8012d02:	2301      	movs	r3, #1
 8012d04:	e000      	b.n	8012d08 <xQueueReceive+0x78>
 8012d06:	2300      	movs	r3, #0
 8012d08:	2b00      	cmp	r3, #0
 8012d0a:	d10b      	bne.n	8012d24 <xQueueReceive+0x94>
 8012d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d10:	b672      	cpsid	i
 8012d12:	f383 8811 	msr	BASEPRI, r3
 8012d16:	f3bf 8f6f 	isb	sy
 8012d1a:	f3bf 8f4f 	dsb	sy
 8012d1e:	b662      	cpsie	i
 8012d20:	61bb      	str	r3, [r7, #24]
 8012d22:	e7fe      	b.n	8012d22 <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8012d24:	f002 f840 	bl	8014da8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012d2c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d30:	2b00      	cmp	r3, #0
 8012d32:	d01f      	beq.n	8012d74 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8012d34:	68b9      	ldr	r1, [r7, #8]
 8012d36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012d38:	f000 fac5 	bl	80132c6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8012d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d3e:	1e5a      	subs	r2, r3, #1
 8012d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d42:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d46:	691b      	ldr	r3, [r3, #16]
 8012d48:	2b00      	cmp	r3, #0
 8012d4a:	d00f      	beq.n	8012d6c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d4e:	3310      	adds	r3, #16
 8012d50:	4618      	mov	r0, r3
 8012d52:	f001 f82b 	bl	8013dac <xTaskRemoveFromEventList>
 8012d56:	4603      	mov	r3, r0
 8012d58:	2b00      	cmp	r3, #0
 8012d5a:	d007      	beq.n	8012d6c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8012d5c:	4b3c      	ldr	r3, [pc, #240]	; (8012e50 <xQueueReceive+0x1c0>)
 8012d5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012d62:	601a      	str	r2, [r3, #0]
 8012d64:	f3bf 8f4f 	dsb	sy
 8012d68:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8012d6c:	f002 f84e 	bl	8014e0c <vPortExitCritical>
				return pdPASS;
 8012d70:	2301      	movs	r3, #1
 8012d72:	e069      	b.n	8012e48 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012d74:	687b      	ldr	r3, [r7, #4]
 8012d76:	2b00      	cmp	r3, #0
 8012d78:	d103      	bne.n	8012d82 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8012d7a:	f002 f847 	bl	8014e0c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8012d7e:	2300      	movs	r3, #0
 8012d80:	e062      	b.n	8012e48 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d84:	2b00      	cmp	r3, #0
 8012d86:	d106      	bne.n	8012d96 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012d88:	f107 0310 	add.w	r3, r7, #16
 8012d8c:	4618      	mov	r0, r3
 8012d8e:	f001 f871 	bl	8013e74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012d92:	2301      	movs	r3, #1
 8012d94:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012d96:	f002 f839 	bl	8014e0c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012d9a:	f000 fdcf 	bl	801393c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012d9e:	f002 f803 	bl	8014da8 <vPortEnterCritical>
 8012da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012da4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012da8:	b25b      	sxtb	r3, r3
 8012daa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012dae:	d103      	bne.n	8012db8 <xQueueReceive+0x128>
 8012db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012db2:	2200      	movs	r2, #0
 8012db4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012dba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012dbe:	b25b      	sxtb	r3, r3
 8012dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012dc4:	d103      	bne.n	8012dce <xQueueReceive+0x13e>
 8012dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012dc8:	2200      	movs	r2, #0
 8012dca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012dce:	f002 f81d 	bl	8014e0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012dd2:	1d3a      	adds	r2, r7, #4
 8012dd4:	f107 0310 	add.w	r3, r7, #16
 8012dd8:	4611      	mov	r1, r2
 8012dda:	4618      	mov	r0, r3
 8012ddc:	f001 f860 	bl	8013ea0 <xTaskCheckForTimeOut>
 8012de0:	4603      	mov	r3, r0
 8012de2:	2b00      	cmp	r3, #0
 8012de4:	d123      	bne.n	8012e2e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012de6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012de8:	f000 fae5 	bl	80133b6 <prvIsQueueEmpty>
 8012dec:	4603      	mov	r3, r0
 8012dee:	2b00      	cmp	r3, #0
 8012df0:	d017      	beq.n	8012e22 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8012df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012df4:	3324      	adds	r3, #36	; 0x24
 8012df6:	687a      	ldr	r2, [r7, #4]
 8012df8:	4611      	mov	r1, r2
 8012dfa:	4618      	mov	r0, r3
 8012dfc:	f000 ff84 	bl	8013d08 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8012e00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012e02:	f000 fa86 	bl	8013312 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8012e06:	f000 fda7 	bl	8013958 <xTaskResumeAll>
 8012e0a:	4603      	mov	r3, r0
 8012e0c:	2b00      	cmp	r3, #0
 8012e0e:	d189      	bne.n	8012d24 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8012e10:	4b0f      	ldr	r3, [pc, #60]	; (8012e50 <xQueueReceive+0x1c0>)
 8012e12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012e16:	601a      	str	r2, [r3, #0]
 8012e18:	f3bf 8f4f 	dsb	sy
 8012e1c:	f3bf 8f6f 	isb	sy
 8012e20:	e780      	b.n	8012d24 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8012e22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012e24:	f000 fa75 	bl	8013312 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012e28:	f000 fd96 	bl	8013958 <xTaskResumeAll>
 8012e2c:	e77a      	b.n	8012d24 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8012e2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012e30:	f000 fa6f 	bl	8013312 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012e34:	f000 fd90 	bl	8013958 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012e38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012e3a:	f000 fabc 	bl	80133b6 <prvIsQueueEmpty>
 8012e3e:	4603      	mov	r3, r0
 8012e40:	2b00      	cmp	r3, #0
 8012e42:	f43f af6f 	beq.w	8012d24 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8012e46:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8012e48:	4618      	mov	r0, r3
 8012e4a:	3730      	adds	r7, #48	; 0x30
 8012e4c:	46bd      	mov	sp, r7
 8012e4e:	bd80      	pop	{r7, pc}
 8012e50:	e000ed04 	.word	0xe000ed04

08012e54 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8012e54:	b580      	push	{r7, lr}
 8012e56:	b08e      	sub	sp, #56	; 0x38
 8012e58:	af00      	add	r7, sp, #0
 8012e5a:	6078      	str	r0, [r7, #4]
 8012e5c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8012e5e:	2300      	movs	r3, #0
 8012e60:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8012e62:	687b      	ldr	r3, [r7, #4]
 8012e64:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8012e66:	2300      	movs	r3, #0
 8012e68:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8012e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e6c:	2b00      	cmp	r3, #0
 8012e6e:	d10b      	bne.n	8012e88 <xQueueSemaphoreTake+0x34>
 8012e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e74:	b672      	cpsid	i
 8012e76:	f383 8811 	msr	BASEPRI, r3
 8012e7a:	f3bf 8f6f 	isb	sy
 8012e7e:	f3bf 8f4f 	dsb	sy
 8012e82:	b662      	cpsie	i
 8012e84:	623b      	str	r3, [r7, #32]
 8012e86:	e7fe      	b.n	8012e86 <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8012e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012e8c:	2b00      	cmp	r3, #0
 8012e8e:	d00b      	beq.n	8012ea8 <xQueueSemaphoreTake+0x54>
 8012e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e94:	b672      	cpsid	i
 8012e96:	f383 8811 	msr	BASEPRI, r3
 8012e9a:	f3bf 8f6f 	isb	sy
 8012e9e:	f3bf 8f4f 	dsb	sy
 8012ea2:	b662      	cpsie	i
 8012ea4:	61fb      	str	r3, [r7, #28]
 8012ea6:	e7fe      	b.n	8012ea6 <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012ea8:	f001 f93e 	bl	8014128 <xTaskGetSchedulerState>
 8012eac:	4603      	mov	r3, r0
 8012eae:	2b00      	cmp	r3, #0
 8012eb0:	d102      	bne.n	8012eb8 <xQueueSemaphoreTake+0x64>
 8012eb2:	683b      	ldr	r3, [r7, #0]
 8012eb4:	2b00      	cmp	r3, #0
 8012eb6:	d101      	bne.n	8012ebc <xQueueSemaphoreTake+0x68>
 8012eb8:	2301      	movs	r3, #1
 8012eba:	e000      	b.n	8012ebe <xQueueSemaphoreTake+0x6a>
 8012ebc:	2300      	movs	r3, #0
 8012ebe:	2b00      	cmp	r3, #0
 8012ec0:	d10b      	bne.n	8012eda <xQueueSemaphoreTake+0x86>
 8012ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ec6:	b672      	cpsid	i
 8012ec8:	f383 8811 	msr	BASEPRI, r3
 8012ecc:	f3bf 8f6f 	isb	sy
 8012ed0:	f3bf 8f4f 	dsb	sy
 8012ed4:	b662      	cpsie	i
 8012ed6:	61bb      	str	r3, [r7, #24]
 8012ed8:	e7fe      	b.n	8012ed8 <xQueueSemaphoreTake+0x84>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8012eda:	f001 ff65 	bl	8014da8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8012ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012ee2:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8012ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ee6:	2b00      	cmp	r3, #0
 8012ee8:	d024      	beq.n	8012f34 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8012eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012eec:	1e5a      	subs	r2, r3, #1
 8012eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ef0:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ef4:	681b      	ldr	r3, [r3, #0]
 8012ef6:	2b00      	cmp	r3, #0
 8012ef8:	d104      	bne.n	8012f04 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8012efa:	f001 fa8f 	bl	801441c <pvTaskIncrementMutexHeldCount>
 8012efe:	4602      	mov	r2, r0
 8012f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f02:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f06:	691b      	ldr	r3, [r3, #16]
 8012f08:	2b00      	cmp	r3, #0
 8012f0a:	d00f      	beq.n	8012f2c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f0e:	3310      	adds	r3, #16
 8012f10:	4618      	mov	r0, r3
 8012f12:	f000 ff4b 	bl	8013dac <xTaskRemoveFromEventList>
 8012f16:	4603      	mov	r3, r0
 8012f18:	2b00      	cmp	r3, #0
 8012f1a:	d007      	beq.n	8012f2c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8012f1c:	4b54      	ldr	r3, [pc, #336]	; (8013070 <xQueueSemaphoreTake+0x21c>)
 8012f1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012f22:	601a      	str	r2, [r3, #0]
 8012f24:	f3bf 8f4f 	dsb	sy
 8012f28:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8012f2c:	f001 ff6e 	bl	8014e0c <vPortExitCritical>
				return pdPASS;
 8012f30:	2301      	movs	r3, #1
 8012f32:	e098      	b.n	8013066 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012f34:	683b      	ldr	r3, [r7, #0]
 8012f36:	2b00      	cmp	r3, #0
 8012f38:	d112      	bne.n	8012f60 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8012f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f3c:	2b00      	cmp	r3, #0
 8012f3e:	d00b      	beq.n	8012f58 <xQueueSemaphoreTake+0x104>
 8012f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f44:	b672      	cpsid	i
 8012f46:	f383 8811 	msr	BASEPRI, r3
 8012f4a:	f3bf 8f6f 	isb	sy
 8012f4e:	f3bf 8f4f 	dsb	sy
 8012f52:	b662      	cpsie	i
 8012f54:	617b      	str	r3, [r7, #20]
 8012f56:	e7fe      	b.n	8012f56 <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8012f58:	f001 ff58 	bl	8014e0c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8012f5c:	2300      	movs	r3, #0
 8012f5e:	e082      	b.n	8013066 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012f60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012f62:	2b00      	cmp	r3, #0
 8012f64:	d106      	bne.n	8012f74 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012f66:	f107 030c 	add.w	r3, r7, #12
 8012f6a:	4618      	mov	r0, r3
 8012f6c:	f000 ff82 	bl	8013e74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012f70:	2301      	movs	r3, #1
 8012f72:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012f74:	f001 ff4a 	bl	8014e0c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012f78:	f000 fce0 	bl	801393c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012f7c:	f001 ff14 	bl	8014da8 <vPortEnterCritical>
 8012f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f82:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012f86:	b25b      	sxtb	r3, r3
 8012f88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012f8c:	d103      	bne.n	8012f96 <xQueueSemaphoreTake+0x142>
 8012f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f90:	2200      	movs	r2, #0
 8012f92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f98:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012f9c:	b25b      	sxtb	r3, r3
 8012f9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012fa2:	d103      	bne.n	8012fac <xQueueSemaphoreTake+0x158>
 8012fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012fa6:	2200      	movs	r2, #0
 8012fa8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012fac:	f001 ff2e 	bl	8014e0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012fb0:	463a      	mov	r2, r7
 8012fb2:	f107 030c 	add.w	r3, r7, #12
 8012fb6:	4611      	mov	r1, r2
 8012fb8:	4618      	mov	r0, r3
 8012fba:	f000 ff71 	bl	8013ea0 <xTaskCheckForTimeOut>
 8012fbe:	4603      	mov	r3, r0
 8012fc0:	2b00      	cmp	r3, #0
 8012fc2:	d132      	bne.n	801302a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012fc4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012fc6:	f000 f9f6 	bl	80133b6 <prvIsQueueEmpty>
 8012fca:	4603      	mov	r3, r0
 8012fcc:	2b00      	cmp	r3, #0
 8012fce:	d026      	beq.n	801301e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012fd2:	681b      	ldr	r3, [r3, #0]
 8012fd4:	2b00      	cmp	r3, #0
 8012fd6:	d109      	bne.n	8012fec <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8012fd8:	f001 fee6 	bl	8014da8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8012fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012fde:	689b      	ldr	r3, [r3, #8]
 8012fe0:	4618      	mov	r0, r3
 8012fe2:	f001 f8bf 	bl	8014164 <xTaskPriorityInherit>
 8012fe6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8012fe8:	f001 ff10 	bl	8014e0c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8012fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012fee:	3324      	adds	r3, #36	; 0x24
 8012ff0:	683a      	ldr	r2, [r7, #0]
 8012ff2:	4611      	mov	r1, r2
 8012ff4:	4618      	mov	r0, r3
 8012ff6:	f000 fe87 	bl	8013d08 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8012ffa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012ffc:	f000 f989 	bl	8013312 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8013000:	f000 fcaa 	bl	8013958 <xTaskResumeAll>
 8013004:	4603      	mov	r3, r0
 8013006:	2b00      	cmp	r3, #0
 8013008:	f47f af67 	bne.w	8012eda <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 801300c:	4b18      	ldr	r3, [pc, #96]	; (8013070 <xQueueSemaphoreTake+0x21c>)
 801300e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013012:	601a      	str	r2, [r3, #0]
 8013014:	f3bf 8f4f 	dsb	sy
 8013018:	f3bf 8f6f 	isb	sy
 801301c:	e75d      	b.n	8012eda <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 801301e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013020:	f000 f977 	bl	8013312 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013024:	f000 fc98 	bl	8013958 <xTaskResumeAll>
 8013028:	e757      	b.n	8012eda <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 801302a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801302c:	f000 f971 	bl	8013312 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013030:	f000 fc92 	bl	8013958 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013034:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013036:	f000 f9be 	bl	80133b6 <prvIsQueueEmpty>
 801303a:	4603      	mov	r3, r0
 801303c:	2b00      	cmp	r3, #0
 801303e:	f43f af4c 	beq.w	8012eda <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8013042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013044:	2b00      	cmp	r3, #0
 8013046:	d00d      	beq.n	8013064 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8013048:	f001 feae 	bl	8014da8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 801304c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801304e:	f000 f8b8 	bl	80131c2 <prvGetDisinheritPriorityAfterTimeout>
 8013052:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8013054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013056:	689b      	ldr	r3, [r3, #8]
 8013058:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801305a:	4618      	mov	r0, r3
 801305c:	f001 f95a 	bl	8014314 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8013060:	f001 fed4 	bl	8014e0c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8013064:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8013066:	4618      	mov	r0, r3
 8013068:	3738      	adds	r7, #56	; 0x38
 801306a:	46bd      	mov	sp, r7
 801306c:	bd80      	pop	{r7, pc}
 801306e:	bf00      	nop
 8013070:	e000ed04 	.word	0xe000ed04

08013074 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8013074:	b580      	push	{r7, lr}
 8013076:	b08e      	sub	sp, #56	; 0x38
 8013078:	af00      	add	r7, sp, #0
 801307a:	60f8      	str	r0, [r7, #12]
 801307c:	60b9      	str	r1, [r7, #8]
 801307e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8013080:	68fb      	ldr	r3, [r7, #12]
 8013082:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8013084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013086:	2b00      	cmp	r3, #0
 8013088:	d10b      	bne.n	80130a2 <xQueueReceiveFromISR+0x2e>
 801308a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801308e:	b672      	cpsid	i
 8013090:	f383 8811 	msr	BASEPRI, r3
 8013094:	f3bf 8f6f 	isb	sy
 8013098:	f3bf 8f4f 	dsb	sy
 801309c:	b662      	cpsie	i
 801309e:	623b      	str	r3, [r7, #32]
 80130a0:	e7fe      	b.n	80130a0 <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80130a2:	68bb      	ldr	r3, [r7, #8]
 80130a4:	2b00      	cmp	r3, #0
 80130a6:	d103      	bne.n	80130b0 <xQueueReceiveFromISR+0x3c>
 80130a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80130ac:	2b00      	cmp	r3, #0
 80130ae:	d101      	bne.n	80130b4 <xQueueReceiveFromISR+0x40>
 80130b0:	2301      	movs	r3, #1
 80130b2:	e000      	b.n	80130b6 <xQueueReceiveFromISR+0x42>
 80130b4:	2300      	movs	r3, #0
 80130b6:	2b00      	cmp	r3, #0
 80130b8:	d10b      	bne.n	80130d2 <xQueueReceiveFromISR+0x5e>
 80130ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130be:	b672      	cpsid	i
 80130c0:	f383 8811 	msr	BASEPRI, r3
 80130c4:	f3bf 8f6f 	isb	sy
 80130c8:	f3bf 8f4f 	dsb	sy
 80130cc:	b662      	cpsie	i
 80130ce:	61fb      	str	r3, [r7, #28]
 80130d0:	e7fe      	b.n	80130d0 <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80130d2:	f001 ff49 	bl	8014f68 <vPortValidateInterruptPriority>
	__asm volatile
 80130d6:	f3ef 8211 	mrs	r2, BASEPRI
 80130da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130de:	b672      	cpsid	i
 80130e0:	f383 8811 	msr	BASEPRI, r3
 80130e4:	f3bf 8f6f 	isb	sy
 80130e8:	f3bf 8f4f 	dsb	sy
 80130ec:	b662      	cpsie	i
 80130ee:	61ba      	str	r2, [r7, #24]
 80130f0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80130f2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80130f4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80130f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80130fa:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80130fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130fe:	2b00      	cmp	r3, #0
 8013100:	d02f      	beq.n	8013162 <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8013102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013104:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013108:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 801310c:	68b9      	ldr	r1, [r7, #8]
 801310e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013110:	f000 f8d9 	bl	80132c6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013116:	1e5a      	subs	r2, r3, #1
 8013118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801311a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 801311c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8013120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013124:	d112      	bne.n	801314c <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013128:	691b      	ldr	r3, [r3, #16]
 801312a:	2b00      	cmp	r3, #0
 801312c:	d016      	beq.n	801315c <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801312e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013130:	3310      	adds	r3, #16
 8013132:	4618      	mov	r0, r3
 8013134:	f000 fe3a 	bl	8013dac <xTaskRemoveFromEventList>
 8013138:	4603      	mov	r3, r0
 801313a:	2b00      	cmp	r3, #0
 801313c:	d00e      	beq.n	801315c <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801313e:	687b      	ldr	r3, [r7, #4]
 8013140:	2b00      	cmp	r3, #0
 8013142:	d00b      	beq.n	801315c <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8013144:	687b      	ldr	r3, [r7, #4]
 8013146:	2201      	movs	r2, #1
 8013148:	601a      	str	r2, [r3, #0]
 801314a:	e007      	b.n	801315c <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 801314c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013150:	3301      	adds	r3, #1
 8013152:	b2db      	uxtb	r3, r3
 8013154:	b25a      	sxtb	r2, r3
 8013156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013158:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 801315c:	2301      	movs	r3, #1
 801315e:	637b      	str	r3, [r7, #52]	; 0x34
 8013160:	e001      	b.n	8013166 <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 8013162:	2300      	movs	r3, #0
 8013164:	637b      	str	r3, [r7, #52]	; 0x34
 8013166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013168:	613b      	str	r3, [r7, #16]
	__asm volatile
 801316a:	693b      	ldr	r3, [r7, #16]
 801316c:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013170:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8013172:	4618      	mov	r0, r3
 8013174:	3738      	adds	r7, #56	; 0x38
 8013176:	46bd      	mov	sp, r7
 8013178:	bd80      	pop	{r7, pc}

0801317a <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 801317a:	b580      	push	{r7, lr}
 801317c:	b084      	sub	sp, #16
 801317e:	af00      	add	r7, sp, #0
 8013180:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8013182:	687b      	ldr	r3, [r7, #4]
 8013184:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8013186:	68fb      	ldr	r3, [r7, #12]
 8013188:	2b00      	cmp	r3, #0
 801318a:	d10b      	bne.n	80131a4 <vQueueDelete+0x2a>
	__asm volatile
 801318c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013190:	b672      	cpsid	i
 8013192:	f383 8811 	msr	BASEPRI, r3
 8013196:	f3bf 8f6f 	isb	sy
 801319a:	f3bf 8f4f 	dsb	sy
 801319e:	b662      	cpsie	i
 80131a0:	60bb      	str	r3, [r7, #8]
 80131a2:	e7fe      	b.n	80131a2 <vQueueDelete+0x28>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80131a4:	68f8      	ldr	r0, [r7, #12]
 80131a6:	f000 f95d 	bl	8013464 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80131aa:	68fb      	ldr	r3, [r7, #12]
 80131ac:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80131b0:	2b00      	cmp	r3, #0
 80131b2:	d102      	bne.n	80131ba <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 80131b4:	68f8      	ldr	r0, [r7, #12]
 80131b6:	f001 ffe1 	bl	801517c <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80131ba:	bf00      	nop
 80131bc:	3710      	adds	r7, #16
 80131be:	46bd      	mov	sp, r7
 80131c0:	bd80      	pop	{r7, pc}

080131c2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80131c2:	b480      	push	{r7}
 80131c4:	b085      	sub	sp, #20
 80131c6:	af00      	add	r7, sp, #0
 80131c8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80131ca:	687b      	ldr	r3, [r7, #4]
 80131cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80131ce:	2b00      	cmp	r3, #0
 80131d0:	d006      	beq.n	80131e0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80131d2:	687b      	ldr	r3, [r7, #4]
 80131d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80131d6:	681b      	ldr	r3, [r3, #0]
 80131d8:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80131dc:	60fb      	str	r3, [r7, #12]
 80131de:	e001      	b.n	80131e4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80131e0:	2300      	movs	r3, #0
 80131e2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80131e4:	68fb      	ldr	r3, [r7, #12]
	}
 80131e6:	4618      	mov	r0, r3
 80131e8:	3714      	adds	r7, #20
 80131ea:	46bd      	mov	sp, r7
 80131ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131f0:	4770      	bx	lr

080131f2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80131f2:	b580      	push	{r7, lr}
 80131f4:	b086      	sub	sp, #24
 80131f6:	af00      	add	r7, sp, #0
 80131f8:	60f8      	str	r0, [r7, #12]
 80131fa:	60b9      	str	r1, [r7, #8]
 80131fc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80131fe:	2300      	movs	r3, #0
 8013200:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013202:	68fb      	ldr	r3, [r7, #12]
 8013204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013206:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8013208:	68fb      	ldr	r3, [r7, #12]
 801320a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801320c:	2b00      	cmp	r3, #0
 801320e:	d10d      	bne.n	801322c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013210:	68fb      	ldr	r3, [r7, #12]
 8013212:	681b      	ldr	r3, [r3, #0]
 8013214:	2b00      	cmp	r3, #0
 8013216:	d14d      	bne.n	80132b4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8013218:	68fb      	ldr	r3, [r7, #12]
 801321a:	689b      	ldr	r3, [r3, #8]
 801321c:	4618      	mov	r0, r3
 801321e:	f001 f809 	bl	8014234 <xTaskPriorityDisinherit>
 8013222:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8013224:	68fb      	ldr	r3, [r7, #12]
 8013226:	2200      	movs	r2, #0
 8013228:	609a      	str	r2, [r3, #8]
 801322a:	e043      	b.n	80132b4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801322c:	687b      	ldr	r3, [r7, #4]
 801322e:	2b00      	cmp	r3, #0
 8013230:	d119      	bne.n	8013266 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013232:	68fb      	ldr	r3, [r7, #12]
 8013234:	6858      	ldr	r0, [r3, #4]
 8013236:	68fb      	ldr	r3, [r7, #12]
 8013238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801323a:	461a      	mov	r2, r3
 801323c:	68b9      	ldr	r1, [r7, #8]
 801323e:	f002 fe3b 	bl	8015eb8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013242:	68fb      	ldr	r3, [r7, #12]
 8013244:	685a      	ldr	r2, [r3, #4]
 8013246:	68fb      	ldr	r3, [r7, #12]
 8013248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801324a:	441a      	add	r2, r3
 801324c:	68fb      	ldr	r3, [r7, #12]
 801324e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013250:	68fb      	ldr	r3, [r7, #12]
 8013252:	685a      	ldr	r2, [r3, #4]
 8013254:	68fb      	ldr	r3, [r7, #12]
 8013256:	689b      	ldr	r3, [r3, #8]
 8013258:	429a      	cmp	r2, r3
 801325a:	d32b      	bcc.n	80132b4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801325c:	68fb      	ldr	r3, [r7, #12]
 801325e:	681a      	ldr	r2, [r3, #0]
 8013260:	68fb      	ldr	r3, [r7, #12]
 8013262:	605a      	str	r2, [r3, #4]
 8013264:	e026      	b.n	80132b4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8013266:	68fb      	ldr	r3, [r7, #12]
 8013268:	68d8      	ldr	r0, [r3, #12]
 801326a:	68fb      	ldr	r3, [r7, #12]
 801326c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801326e:	461a      	mov	r2, r3
 8013270:	68b9      	ldr	r1, [r7, #8]
 8013272:	f002 fe21 	bl	8015eb8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8013276:	68fb      	ldr	r3, [r7, #12]
 8013278:	68da      	ldr	r2, [r3, #12]
 801327a:	68fb      	ldr	r3, [r7, #12]
 801327c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801327e:	425b      	negs	r3, r3
 8013280:	441a      	add	r2, r3
 8013282:	68fb      	ldr	r3, [r7, #12]
 8013284:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013286:	68fb      	ldr	r3, [r7, #12]
 8013288:	68da      	ldr	r2, [r3, #12]
 801328a:	68fb      	ldr	r3, [r7, #12]
 801328c:	681b      	ldr	r3, [r3, #0]
 801328e:	429a      	cmp	r2, r3
 8013290:	d207      	bcs.n	80132a2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8013292:	68fb      	ldr	r3, [r7, #12]
 8013294:	689a      	ldr	r2, [r3, #8]
 8013296:	68fb      	ldr	r3, [r7, #12]
 8013298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801329a:	425b      	negs	r3, r3
 801329c:	441a      	add	r2, r3
 801329e:	68fb      	ldr	r3, [r7, #12]
 80132a0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80132a2:	687b      	ldr	r3, [r7, #4]
 80132a4:	2b02      	cmp	r3, #2
 80132a6:	d105      	bne.n	80132b4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80132a8:	693b      	ldr	r3, [r7, #16]
 80132aa:	2b00      	cmp	r3, #0
 80132ac:	d002      	beq.n	80132b4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80132ae:	693b      	ldr	r3, [r7, #16]
 80132b0:	3b01      	subs	r3, #1
 80132b2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80132b4:	693b      	ldr	r3, [r7, #16]
 80132b6:	1c5a      	adds	r2, r3, #1
 80132b8:	68fb      	ldr	r3, [r7, #12]
 80132ba:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80132bc:	697b      	ldr	r3, [r7, #20]
}
 80132be:	4618      	mov	r0, r3
 80132c0:	3718      	adds	r7, #24
 80132c2:	46bd      	mov	sp, r7
 80132c4:	bd80      	pop	{r7, pc}

080132c6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80132c6:	b580      	push	{r7, lr}
 80132c8:	b082      	sub	sp, #8
 80132ca:	af00      	add	r7, sp, #0
 80132cc:	6078      	str	r0, [r7, #4]
 80132ce:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80132d0:	687b      	ldr	r3, [r7, #4]
 80132d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80132d4:	2b00      	cmp	r3, #0
 80132d6:	d018      	beq.n	801330a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80132d8:	687b      	ldr	r3, [r7, #4]
 80132da:	68da      	ldr	r2, [r3, #12]
 80132dc:	687b      	ldr	r3, [r7, #4]
 80132de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80132e0:	441a      	add	r2, r3
 80132e2:	687b      	ldr	r3, [r7, #4]
 80132e4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80132e6:	687b      	ldr	r3, [r7, #4]
 80132e8:	68da      	ldr	r2, [r3, #12]
 80132ea:	687b      	ldr	r3, [r7, #4]
 80132ec:	689b      	ldr	r3, [r3, #8]
 80132ee:	429a      	cmp	r2, r3
 80132f0:	d303      	bcc.n	80132fa <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80132f2:	687b      	ldr	r3, [r7, #4]
 80132f4:	681a      	ldr	r2, [r3, #0]
 80132f6:	687b      	ldr	r3, [r7, #4]
 80132f8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80132fa:	687b      	ldr	r3, [r7, #4]
 80132fc:	68d9      	ldr	r1, [r3, #12]
 80132fe:	687b      	ldr	r3, [r7, #4]
 8013300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013302:	461a      	mov	r2, r3
 8013304:	6838      	ldr	r0, [r7, #0]
 8013306:	f002 fdd7 	bl	8015eb8 <memcpy>
	}
}
 801330a:	bf00      	nop
 801330c:	3708      	adds	r7, #8
 801330e:	46bd      	mov	sp, r7
 8013310:	bd80      	pop	{r7, pc}

08013312 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8013312:	b580      	push	{r7, lr}
 8013314:	b084      	sub	sp, #16
 8013316:	af00      	add	r7, sp, #0
 8013318:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801331a:	f001 fd45 	bl	8014da8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801331e:	687b      	ldr	r3, [r7, #4]
 8013320:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013324:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013326:	e011      	b.n	801334c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013328:	687b      	ldr	r3, [r7, #4]
 801332a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801332c:	2b00      	cmp	r3, #0
 801332e:	d012      	beq.n	8013356 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013330:	687b      	ldr	r3, [r7, #4]
 8013332:	3324      	adds	r3, #36	; 0x24
 8013334:	4618      	mov	r0, r3
 8013336:	f000 fd39 	bl	8013dac <xTaskRemoveFromEventList>
 801333a:	4603      	mov	r3, r0
 801333c:	2b00      	cmp	r3, #0
 801333e:	d001      	beq.n	8013344 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8013340:	f000 fe12 	bl	8013f68 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8013344:	7bfb      	ldrb	r3, [r7, #15]
 8013346:	3b01      	subs	r3, #1
 8013348:	b2db      	uxtb	r3, r3
 801334a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801334c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013350:	2b00      	cmp	r3, #0
 8013352:	dce9      	bgt.n	8013328 <prvUnlockQueue+0x16>
 8013354:	e000      	b.n	8013358 <prvUnlockQueue+0x46>
					break;
 8013356:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8013358:	687b      	ldr	r3, [r7, #4]
 801335a:	22ff      	movs	r2, #255	; 0xff
 801335c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8013360:	f001 fd54 	bl	8014e0c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8013364:	f001 fd20 	bl	8014da8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8013368:	687b      	ldr	r3, [r7, #4]
 801336a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801336e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013370:	e011      	b.n	8013396 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013372:	687b      	ldr	r3, [r7, #4]
 8013374:	691b      	ldr	r3, [r3, #16]
 8013376:	2b00      	cmp	r3, #0
 8013378:	d012      	beq.n	80133a0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801337a:	687b      	ldr	r3, [r7, #4]
 801337c:	3310      	adds	r3, #16
 801337e:	4618      	mov	r0, r3
 8013380:	f000 fd14 	bl	8013dac <xTaskRemoveFromEventList>
 8013384:	4603      	mov	r3, r0
 8013386:	2b00      	cmp	r3, #0
 8013388:	d001      	beq.n	801338e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801338a:	f000 fded 	bl	8013f68 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801338e:	7bbb      	ldrb	r3, [r7, #14]
 8013390:	3b01      	subs	r3, #1
 8013392:	b2db      	uxtb	r3, r3
 8013394:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013396:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801339a:	2b00      	cmp	r3, #0
 801339c:	dce9      	bgt.n	8013372 <prvUnlockQueue+0x60>
 801339e:	e000      	b.n	80133a2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80133a0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80133a2:	687b      	ldr	r3, [r7, #4]
 80133a4:	22ff      	movs	r2, #255	; 0xff
 80133a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80133aa:	f001 fd2f 	bl	8014e0c <vPortExitCritical>
}
 80133ae:	bf00      	nop
 80133b0:	3710      	adds	r7, #16
 80133b2:	46bd      	mov	sp, r7
 80133b4:	bd80      	pop	{r7, pc}

080133b6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80133b6:	b580      	push	{r7, lr}
 80133b8:	b084      	sub	sp, #16
 80133ba:	af00      	add	r7, sp, #0
 80133bc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80133be:	f001 fcf3 	bl	8014da8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80133c2:	687b      	ldr	r3, [r7, #4]
 80133c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80133c6:	2b00      	cmp	r3, #0
 80133c8:	d102      	bne.n	80133d0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80133ca:	2301      	movs	r3, #1
 80133cc:	60fb      	str	r3, [r7, #12]
 80133ce:	e001      	b.n	80133d4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80133d0:	2300      	movs	r3, #0
 80133d2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80133d4:	f001 fd1a 	bl	8014e0c <vPortExitCritical>

	return xReturn;
 80133d8:	68fb      	ldr	r3, [r7, #12]
}
 80133da:	4618      	mov	r0, r3
 80133dc:	3710      	adds	r7, #16
 80133de:	46bd      	mov	sp, r7
 80133e0:	bd80      	pop	{r7, pc}

080133e2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80133e2:	b580      	push	{r7, lr}
 80133e4:	b084      	sub	sp, #16
 80133e6:	af00      	add	r7, sp, #0
 80133e8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80133ea:	f001 fcdd 	bl	8014da8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80133ee:	687b      	ldr	r3, [r7, #4]
 80133f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80133f2:	687b      	ldr	r3, [r7, #4]
 80133f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80133f6:	429a      	cmp	r2, r3
 80133f8:	d102      	bne.n	8013400 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80133fa:	2301      	movs	r3, #1
 80133fc:	60fb      	str	r3, [r7, #12]
 80133fe:	e001      	b.n	8013404 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8013400:	2300      	movs	r3, #0
 8013402:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013404:	f001 fd02 	bl	8014e0c <vPortExitCritical>

	return xReturn;
 8013408:	68fb      	ldr	r3, [r7, #12]
}
 801340a:	4618      	mov	r0, r3
 801340c:	3710      	adds	r7, #16
 801340e:	46bd      	mov	sp, r7
 8013410:	bd80      	pop	{r7, pc}
	...

08013414 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8013414:	b480      	push	{r7}
 8013416:	b085      	sub	sp, #20
 8013418:	af00      	add	r7, sp, #0
 801341a:	6078      	str	r0, [r7, #4]
 801341c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801341e:	2300      	movs	r3, #0
 8013420:	60fb      	str	r3, [r7, #12]
 8013422:	e014      	b.n	801344e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8013424:	4a0e      	ldr	r2, [pc, #56]	; (8013460 <vQueueAddToRegistry+0x4c>)
 8013426:	68fb      	ldr	r3, [r7, #12]
 8013428:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801342c:	2b00      	cmp	r3, #0
 801342e:	d10b      	bne.n	8013448 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8013430:	490b      	ldr	r1, [pc, #44]	; (8013460 <vQueueAddToRegistry+0x4c>)
 8013432:	68fb      	ldr	r3, [r7, #12]
 8013434:	683a      	ldr	r2, [r7, #0]
 8013436:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801343a:	4a09      	ldr	r2, [pc, #36]	; (8013460 <vQueueAddToRegistry+0x4c>)
 801343c:	68fb      	ldr	r3, [r7, #12]
 801343e:	00db      	lsls	r3, r3, #3
 8013440:	4413      	add	r3, r2
 8013442:	687a      	ldr	r2, [r7, #4]
 8013444:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8013446:	e005      	b.n	8013454 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013448:	68fb      	ldr	r3, [r7, #12]
 801344a:	3301      	adds	r3, #1
 801344c:	60fb      	str	r3, [r7, #12]
 801344e:	68fb      	ldr	r3, [r7, #12]
 8013450:	2b07      	cmp	r3, #7
 8013452:	d9e7      	bls.n	8013424 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8013454:	bf00      	nop
 8013456:	3714      	adds	r7, #20
 8013458:	46bd      	mov	sp, r7
 801345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801345e:	4770      	bx	lr
 8013460:	200093c8 	.word	0x200093c8

08013464 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8013464:	b480      	push	{r7}
 8013466:	b085      	sub	sp, #20
 8013468:	af00      	add	r7, sp, #0
 801346a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801346c:	2300      	movs	r3, #0
 801346e:	60fb      	str	r3, [r7, #12]
 8013470:	e016      	b.n	80134a0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8013472:	4a10      	ldr	r2, [pc, #64]	; (80134b4 <vQueueUnregisterQueue+0x50>)
 8013474:	68fb      	ldr	r3, [r7, #12]
 8013476:	00db      	lsls	r3, r3, #3
 8013478:	4413      	add	r3, r2
 801347a:	685b      	ldr	r3, [r3, #4]
 801347c:	687a      	ldr	r2, [r7, #4]
 801347e:	429a      	cmp	r2, r3
 8013480:	d10b      	bne.n	801349a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8013482:	4a0c      	ldr	r2, [pc, #48]	; (80134b4 <vQueueUnregisterQueue+0x50>)
 8013484:	68fb      	ldr	r3, [r7, #12]
 8013486:	2100      	movs	r1, #0
 8013488:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 801348c:	4a09      	ldr	r2, [pc, #36]	; (80134b4 <vQueueUnregisterQueue+0x50>)
 801348e:	68fb      	ldr	r3, [r7, #12]
 8013490:	00db      	lsls	r3, r3, #3
 8013492:	4413      	add	r3, r2
 8013494:	2200      	movs	r2, #0
 8013496:	605a      	str	r2, [r3, #4]
				break;
 8013498:	e005      	b.n	80134a6 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801349a:	68fb      	ldr	r3, [r7, #12]
 801349c:	3301      	adds	r3, #1
 801349e:	60fb      	str	r3, [r7, #12]
 80134a0:	68fb      	ldr	r3, [r7, #12]
 80134a2:	2b07      	cmp	r3, #7
 80134a4:	d9e5      	bls.n	8013472 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80134a6:	bf00      	nop
 80134a8:	3714      	adds	r7, #20
 80134aa:	46bd      	mov	sp, r7
 80134ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134b0:	4770      	bx	lr
 80134b2:	bf00      	nop
 80134b4:	200093c8 	.word	0x200093c8

080134b8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80134b8:	b580      	push	{r7, lr}
 80134ba:	b086      	sub	sp, #24
 80134bc:	af00      	add	r7, sp, #0
 80134be:	60f8      	str	r0, [r7, #12]
 80134c0:	60b9      	str	r1, [r7, #8]
 80134c2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80134c4:	68fb      	ldr	r3, [r7, #12]
 80134c6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80134c8:	f001 fc6e 	bl	8014da8 <vPortEnterCritical>
 80134cc:	697b      	ldr	r3, [r7, #20]
 80134ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80134d2:	b25b      	sxtb	r3, r3
 80134d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80134d8:	d103      	bne.n	80134e2 <vQueueWaitForMessageRestricted+0x2a>
 80134da:	697b      	ldr	r3, [r7, #20]
 80134dc:	2200      	movs	r2, #0
 80134de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80134e2:	697b      	ldr	r3, [r7, #20]
 80134e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80134e8:	b25b      	sxtb	r3, r3
 80134ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80134ee:	d103      	bne.n	80134f8 <vQueueWaitForMessageRestricted+0x40>
 80134f0:	697b      	ldr	r3, [r7, #20]
 80134f2:	2200      	movs	r2, #0
 80134f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80134f8:	f001 fc88 	bl	8014e0c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80134fc:	697b      	ldr	r3, [r7, #20]
 80134fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013500:	2b00      	cmp	r3, #0
 8013502:	d106      	bne.n	8013512 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8013504:	697b      	ldr	r3, [r7, #20]
 8013506:	3324      	adds	r3, #36	; 0x24
 8013508:	687a      	ldr	r2, [r7, #4]
 801350a:	68b9      	ldr	r1, [r7, #8]
 801350c:	4618      	mov	r0, r3
 801350e:	f000 fc21 	bl	8013d54 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8013512:	6978      	ldr	r0, [r7, #20]
 8013514:	f7ff fefd 	bl	8013312 <prvUnlockQueue>
	}
 8013518:	bf00      	nop
 801351a:	3718      	adds	r7, #24
 801351c:	46bd      	mov	sp, r7
 801351e:	bd80      	pop	{r7, pc}

08013520 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8013520:	b580      	push	{r7, lr}
 8013522:	b08e      	sub	sp, #56	; 0x38
 8013524:	af04      	add	r7, sp, #16
 8013526:	60f8      	str	r0, [r7, #12]
 8013528:	60b9      	str	r1, [r7, #8]
 801352a:	607a      	str	r2, [r7, #4]
 801352c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801352e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013530:	2b00      	cmp	r3, #0
 8013532:	d10b      	bne.n	801354c <xTaskCreateStatic+0x2c>
 8013534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013538:	b672      	cpsid	i
 801353a:	f383 8811 	msr	BASEPRI, r3
 801353e:	f3bf 8f6f 	isb	sy
 8013542:	f3bf 8f4f 	dsb	sy
 8013546:	b662      	cpsie	i
 8013548:	623b      	str	r3, [r7, #32]
 801354a:	e7fe      	b.n	801354a <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 801354c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801354e:	2b00      	cmp	r3, #0
 8013550:	d10b      	bne.n	801356a <xTaskCreateStatic+0x4a>
 8013552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013556:	b672      	cpsid	i
 8013558:	f383 8811 	msr	BASEPRI, r3
 801355c:	f3bf 8f6f 	isb	sy
 8013560:	f3bf 8f4f 	dsb	sy
 8013564:	b662      	cpsie	i
 8013566:	61fb      	str	r3, [r7, #28]
 8013568:	e7fe      	b.n	8013568 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801356a:	235c      	movs	r3, #92	; 0x5c
 801356c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801356e:	693b      	ldr	r3, [r7, #16]
 8013570:	2b5c      	cmp	r3, #92	; 0x5c
 8013572:	d00b      	beq.n	801358c <xTaskCreateStatic+0x6c>
 8013574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013578:	b672      	cpsid	i
 801357a:	f383 8811 	msr	BASEPRI, r3
 801357e:	f3bf 8f6f 	isb	sy
 8013582:	f3bf 8f4f 	dsb	sy
 8013586:	b662      	cpsie	i
 8013588:	61bb      	str	r3, [r7, #24]
 801358a:	e7fe      	b.n	801358a <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801358c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801358e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013590:	2b00      	cmp	r3, #0
 8013592:	d01e      	beq.n	80135d2 <xTaskCreateStatic+0xb2>
 8013594:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013596:	2b00      	cmp	r3, #0
 8013598:	d01b      	beq.n	80135d2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801359a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801359c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801359e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80135a2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80135a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135a6:	2202      	movs	r2, #2
 80135a8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80135ac:	2300      	movs	r3, #0
 80135ae:	9303      	str	r3, [sp, #12]
 80135b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135b2:	9302      	str	r3, [sp, #8]
 80135b4:	f107 0314 	add.w	r3, r7, #20
 80135b8:	9301      	str	r3, [sp, #4]
 80135ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135bc:	9300      	str	r3, [sp, #0]
 80135be:	683b      	ldr	r3, [r7, #0]
 80135c0:	687a      	ldr	r2, [r7, #4]
 80135c2:	68b9      	ldr	r1, [r7, #8]
 80135c4:	68f8      	ldr	r0, [r7, #12]
 80135c6:	f000 f850 	bl	801366a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80135ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80135cc:	f000 f8de 	bl	801378c <prvAddNewTaskToReadyList>
 80135d0:	e001      	b.n	80135d6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80135d2:	2300      	movs	r3, #0
 80135d4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80135d6:	697b      	ldr	r3, [r7, #20]
	}
 80135d8:	4618      	mov	r0, r3
 80135da:	3728      	adds	r7, #40	; 0x28
 80135dc:	46bd      	mov	sp, r7
 80135de:	bd80      	pop	{r7, pc}

080135e0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80135e0:	b580      	push	{r7, lr}
 80135e2:	b08c      	sub	sp, #48	; 0x30
 80135e4:	af04      	add	r7, sp, #16
 80135e6:	60f8      	str	r0, [r7, #12]
 80135e8:	60b9      	str	r1, [r7, #8]
 80135ea:	603b      	str	r3, [r7, #0]
 80135ec:	4613      	mov	r3, r2
 80135ee:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80135f0:	88fb      	ldrh	r3, [r7, #6]
 80135f2:	009b      	lsls	r3, r3, #2
 80135f4:	4618      	mov	r0, r3
 80135f6:	f001 fcf9 	bl	8014fec <pvPortMalloc>
 80135fa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80135fc:	697b      	ldr	r3, [r7, #20]
 80135fe:	2b00      	cmp	r3, #0
 8013600:	d00e      	beq.n	8013620 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8013602:	205c      	movs	r0, #92	; 0x5c
 8013604:	f001 fcf2 	bl	8014fec <pvPortMalloc>
 8013608:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801360a:	69fb      	ldr	r3, [r7, #28]
 801360c:	2b00      	cmp	r3, #0
 801360e:	d003      	beq.n	8013618 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8013610:	69fb      	ldr	r3, [r7, #28]
 8013612:	697a      	ldr	r2, [r7, #20]
 8013614:	631a      	str	r2, [r3, #48]	; 0x30
 8013616:	e005      	b.n	8013624 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8013618:	6978      	ldr	r0, [r7, #20]
 801361a:	f001 fdaf 	bl	801517c <vPortFree>
 801361e:	e001      	b.n	8013624 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8013620:	2300      	movs	r3, #0
 8013622:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8013624:	69fb      	ldr	r3, [r7, #28]
 8013626:	2b00      	cmp	r3, #0
 8013628:	d017      	beq.n	801365a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801362a:	69fb      	ldr	r3, [r7, #28]
 801362c:	2200      	movs	r2, #0
 801362e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8013632:	88fa      	ldrh	r2, [r7, #6]
 8013634:	2300      	movs	r3, #0
 8013636:	9303      	str	r3, [sp, #12]
 8013638:	69fb      	ldr	r3, [r7, #28]
 801363a:	9302      	str	r3, [sp, #8]
 801363c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801363e:	9301      	str	r3, [sp, #4]
 8013640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013642:	9300      	str	r3, [sp, #0]
 8013644:	683b      	ldr	r3, [r7, #0]
 8013646:	68b9      	ldr	r1, [r7, #8]
 8013648:	68f8      	ldr	r0, [r7, #12]
 801364a:	f000 f80e 	bl	801366a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801364e:	69f8      	ldr	r0, [r7, #28]
 8013650:	f000 f89c 	bl	801378c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8013654:	2301      	movs	r3, #1
 8013656:	61bb      	str	r3, [r7, #24]
 8013658:	e002      	b.n	8013660 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801365a:	f04f 33ff 	mov.w	r3, #4294967295
 801365e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8013660:	69bb      	ldr	r3, [r7, #24]
	}
 8013662:	4618      	mov	r0, r3
 8013664:	3720      	adds	r7, #32
 8013666:	46bd      	mov	sp, r7
 8013668:	bd80      	pop	{r7, pc}

0801366a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801366a:	b580      	push	{r7, lr}
 801366c:	b088      	sub	sp, #32
 801366e:	af00      	add	r7, sp, #0
 8013670:	60f8      	str	r0, [r7, #12]
 8013672:	60b9      	str	r1, [r7, #8]
 8013674:	607a      	str	r2, [r7, #4]
 8013676:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8013678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801367a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801367c:	687b      	ldr	r3, [r7, #4]
 801367e:	009b      	lsls	r3, r3, #2
 8013680:	461a      	mov	r2, r3
 8013682:	21a5      	movs	r1, #165	; 0xa5
 8013684:	f002 fc23 	bl	8015ece <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8013688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801368a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801368c:	6879      	ldr	r1, [r7, #4]
 801368e:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8013692:	440b      	add	r3, r1
 8013694:	009b      	lsls	r3, r3, #2
 8013696:	4413      	add	r3, r2
 8013698:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801369a:	69bb      	ldr	r3, [r7, #24]
 801369c:	f023 0307 	bic.w	r3, r3, #7
 80136a0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80136a2:	69bb      	ldr	r3, [r7, #24]
 80136a4:	f003 0307 	and.w	r3, r3, #7
 80136a8:	2b00      	cmp	r3, #0
 80136aa:	d00b      	beq.n	80136c4 <prvInitialiseNewTask+0x5a>
 80136ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80136b0:	b672      	cpsid	i
 80136b2:	f383 8811 	msr	BASEPRI, r3
 80136b6:	f3bf 8f6f 	isb	sy
 80136ba:	f3bf 8f4f 	dsb	sy
 80136be:	b662      	cpsie	i
 80136c0:	617b      	str	r3, [r7, #20]
 80136c2:	e7fe      	b.n	80136c2 <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80136c4:	68bb      	ldr	r3, [r7, #8]
 80136c6:	2b00      	cmp	r3, #0
 80136c8:	d01f      	beq.n	801370a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80136ca:	2300      	movs	r3, #0
 80136cc:	61fb      	str	r3, [r7, #28]
 80136ce:	e012      	b.n	80136f6 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80136d0:	68ba      	ldr	r2, [r7, #8]
 80136d2:	69fb      	ldr	r3, [r7, #28]
 80136d4:	4413      	add	r3, r2
 80136d6:	7819      	ldrb	r1, [r3, #0]
 80136d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80136da:	69fb      	ldr	r3, [r7, #28]
 80136dc:	4413      	add	r3, r2
 80136de:	3334      	adds	r3, #52	; 0x34
 80136e0:	460a      	mov	r2, r1
 80136e2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80136e4:	68ba      	ldr	r2, [r7, #8]
 80136e6:	69fb      	ldr	r3, [r7, #28]
 80136e8:	4413      	add	r3, r2
 80136ea:	781b      	ldrb	r3, [r3, #0]
 80136ec:	2b00      	cmp	r3, #0
 80136ee:	d006      	beq.n	80136fe <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80136f0:	69fb      	ldr	r3, [r7, #28]
 80136f2:	3301      	adds	r3, #1
 80136f4:	61fb      	str	r3, [r7, #28]
 80136f6:	69fb      	ldr	r3, [r7, #28]
 80136f8:	2b0f      	cmp	r3, #15
 80136fa:	d9e9      	bls.n	80136d0 <prvInitialiseNewTask+0x66>
 80136fc:	e000      	b.n	8013700 <prvInitialiseNewTask+0x96>
			{
				break;
 80136fe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8013700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013702:	2200      	movs	r2, #0
 8013704:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8013708:	e003      	b.n	8013712 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801370a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801370c:	2200      	movs	r2, #0
 801370e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8013712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013714:	2b37      	cmp	r3, #55	; 0x37
 8013716:	d901      	bls.n	801371c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8013718:	2337      	movs	r3, #55	; 0x37
 801371a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801371c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801371e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013720:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8013722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013724:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013726:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8013728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801372a:	2200      	movs	r2, #0
 801372c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801372e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013730:	3304      	adds	r3, #4
 8013732:	4618      	mov	r0, r3
 8013734:	f7fe fe2e 	bl	8012394 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8013738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801373a:	3318      	adds	r3, #24
 801373c:	4618      	mov	r0, r3
 801373e:	f7fe fe29 	bl	8012394 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8013742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013744:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013746:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801374a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801374e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013750:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8013752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013754:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013756:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8013758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801375a:	2200      	movs	r2, #0
 801375c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801375e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013760:	2200      	movs	r2, #0
 8013762:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8013766:	683a      	ldr	r2, [r7, #0]
 8013768:	68f9      	ldr	r1, [r7, #12]
 801376a:	69b8      	ldr	r0, [r7, #24]
 801376c:	f001 fa12 	bl	8014b94 <pxPortInitialiseStack>
 8013770:	4602      	mov	r2, r0
 8013772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013774:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8013776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013778:	2b00      	cmp	r3, #0
 801377a:	d002      	beq.n	8013782 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801377c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801377e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013780:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013782:	bf00      	nop
 8013784:	3720      	adds	r7, #32
 8013786:	46bd      	mov	sp, r7
 8013788:	bd80      	pop	{r7, pc}
	...

0801378c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801378c:	b580      	push	{r7, lr}
 801378e:	b082      	sub	sp, #8
 8013790:	af00      	add	r7, sp, #0
 8013792:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8013794:	f001 fb08 	bl	8014da8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8013798:	4b2d      	ldr	r3, [pc, #180]	; (8013850 <prvAddNewTaskToReadyList+0xc4>)
 801379a:	681b      	ldr	r3, [r3, #0]
 801379c:	3301      	adds	r3, #1
 801379e:	4a2c      	ldr	r2, [pc, #176]	; (8013850 <prvAddNewTaskToReadyList+0xc4>)
 80137a0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80137a2:	4b2c      	ldr	r3, [pc, #176]	; (8013854 <prvAddNewTaskToReadyList+0xc8>)
 80137a4:	681b      	ldr	r3, [r3, #0]
 80137a6:	2b00      	cmp	r3, #0
 80137a8:	d109      	bne.n	80137be <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80137aa:	4a2a      	ldr	r2, [pc, #168]	; (8013854 <prvAddNewTaskToReadyList+0xc8>)
 80137ac:	687b      	ldr	r3, [r7, #4]
 80137ae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80137b0:	4b27      	ldr	r3, [pc, #156]	; (8013850 <prvAddNewTaskToReadyList+0xc4>)
 80137b2:	681b      	ldr	r3, [r3, #0]
 80137b4:	2b01      	cmp	r3, #1
 80137b6:	d110      	bne.n	80137da <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80137b8:	f000 fbfa 	bl	8013fb0 <prvInitialiseTaskLists>
 80137bc:	e00d      	b.n	80137da <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80137be:	4b26      	ldr	r3, [pc, #152]	; (8013858 <prvAddNewTaskToReadyList+0xcc>)
 80137c0:	681b      	ldr	r3, [r3, #0]
 80137c2:	2b00      	cmp	r3, #0
 80137c4:	d109      	bne.n	80137da <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80137c6:	4b23      	ldr	r3, [pc, #140]	; (8013854 <prvAddNewTaskToReadyList+0xc8>)
 80137c8:	681b      	ldr	r3, [r3, #0]
 80137ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80137cc:	687b      	ldr	r3, [r7, #4]
 80137ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80137d0:	429a      	cmp	r2, r3
 80137d2:	d802      	bhi.n	80137da <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80137d4:	4a1f      	ldr	r2, [pc, #124]	; (8013854 <prvAddNewTaskToReadyList+0xc8>)
 80137d6:	687b      	ldr	r3, [r7, #4]
 80137d8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80137da:	4b20      	ldr	r3, [pc, #128]	; (801385c <prvAddNewTaskToReadyList+0xd0>)
 80137dc:	681b      	ldr	r3, [r3, #0]
 80137de:	3301      	adds	r3, #1
 80137e0:	4a1e      	ldr	r2, [pc, #120]	; (801385c <prvAddNewTaskToReadyList+0xd0>)
 80137e2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80137e4:	4b1d      	ldr	r3, [pc, #116]	; (801385c <prvAddNewTaskToReadyList+0xd0>)
 80137e6:	681a      	ldr	r2, [r3, #0]
 80137e8:	687b      	ldr	r3, [r7, #4]
 80137ea:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80137ec:	687b      	ldr	r3, [r7, #4]
 80137ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80137f0:	4b1b      	ldr	r3, [pc, #108]	; (8013860 <prvAddNewTaskToReadyList+0xd4>)
 80137f2:	681b      	ldr	r3, [r3, #0]
 80137f4:	429a      	cmp	r2, r3
 80137f6:	d903      	bls.n	8013800 <prvAddNewTaskToReadyList+0x74>
 80137f8:	687b      	ldr	r3, [r7, #4]
 80137fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80137fc:	4a18      	ldr	r2, [pc, #96]	; (8013860 <prvAddNewTaskToReadyList+0xd4>)
 80137fe:	6013      	str	r3, [r2, #0]
 8013800:	687b      	ldr	r3, [r7, #4]
 8013802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013804:	4613      	mov	r3, r2
 8013806:	009b      	lsls	r3, r3, #2
 8013808:	4413      	add	r3, r2
 801380a:	009b      	lsls	r3, r3, #2
 801380c:	4a15      	ldr	r2, [pc, #84]	; (8013864 <prvAddNewTaskToReadyList+0xd8>)
 801380e:	441a      	add	r2, r3
 8013810:	687b      	ldr	r3, [r7, #4]
 8013812:	3304      	adds	r3, #4
 8013814:	4619      	mov	r1, r3
 8013816:	4610      	mov	r0, r2
 8013818:	f7fe fdc9 	bl	80123ae <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801381c:	f001 faf6 	bl	8014e0c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8013820:	4b0d      	ldr	r3, [pc, #52]	; (8013858 <prvAddNewTaskToReadyList+0xcc>)
 8013822:	681b      	ldr	r3, [r3, #0]
 8013824:	2b00      	cmp	r3, #0
 8013826:	d00e      	beq.n	8013846 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8013828:	4b0a      	ldr	r3, [pc, #40]	; (8013854 <prvAddNewTaskToReadyList+0xc8>)
 801382a:	681b      	ldr	r3, [r3, #0]
 801382c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801382e:	687b      	ldr	r3, [r7, #4]
 8013830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013832:	429a      	cmp	r2, r3
 8013834:	d207      	bcs.n	8013846 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8013836:	4b0c      	ldr	r3, [pc, #48]	; (8013868 <prvAddNewTaskToReadyList+0xdc>)
 8013838:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801383c:	601a      	str	r2, [r3, #0]
 801383e:	f3bf 8f4f 	dsb	sy
 8013842:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013846:	bf00      	nop
 8013848:	3708      	adds	r7, #8
 801384a:	46bd      	mov	sp, r7
 801384c:	bd80      	pop	{r7, pc}
 801384e:	bf00      	nop
 8013850:	20000e60 	.word	0x20000e60
 8013854:	2000098c 	.word	0x2000098c
 8013858:	20000e6c 	.word	0x20000e6c
 801385c:	20000e7c 	.word	0x20000e7c
 8013860:	20000e68 	.word	0x20000e68
 8013864:	20000990 	.word	0x20000990
 8013868:	e000ed04 	.word	0xe000ed04

0801386c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801386c:	b580      	push	{r7, lr}
 801386e:	b08a      	sub	sp, #40	; 0x28
 8013870:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8013872:	2300      	movs	r3, #0
 8013874:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8013876:	2300      	movs	r3, #0
 8013878:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801387a:	463a      	mov	r2, r7
 801387c:	1d39      	adds	r1, r7, #4
 801387e:	f107 0308 	add.w	r3, r7, #8
 8013882:	4618      	mov	r0, r3
 8013884:	f7fe fd32 	bl	80122ec <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8013888:	6839      	ldr	r1, [r7, #0]
 801388a:	687b      	ldr	r3, [r7, #4]
 801388c:	68ba      	ldr	r2, [r7, #8]
 801388e:	9202      	str	r2, [sp, #8]
 8013890:	9301      	str	r3, [sp, #4]
 8013892:	2300      	movs	r3, #0
 8013894:	9300      	str	r3, [sp, #0]
 8013896:	2300      	movs	r3, #0
 8013898:	460a      	mov	r2, r1
 801389a:	4922      	ldr	r1, [pc, #136]	; (8013924 <vTaskStartScheduler+0xb8>)
 801389c:	4822      	ldr	r0, [pc, #136]	; (8013928 <vTaskStartScheduler+0xbc>)
 801389e:	f7ff fe3f 	bl	8013520 <xTaskCreateStatic>
 80138a2:	4602      	mov	r2, r0
 80138a4:	4b21      	ldr	r3, [pc, #132]	; (801392c <vTaskStartScheduler+0xc0>)
 80138a6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80138a8:	4b20      	ldr	r3, [pc, #128]	; (801392c <vTaskStartScheduler+0xc0>)
 80138aa:	681b      	ldr	r3, [r3, #0]
 80138ac:	2b00      	cmp	r3, #0
 80138ae:	d002      	beq.n	80138b6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80138b0:	2301      	movs	r3, #1
 80138b2:	617b      	str	r3, [r7, #20]
 80138b4:	e001      	b.n	80138ba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80138b6:	2300      	movs	r3, #0
 80138b8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80138ba:	697b      	ldr	r3, [r7, #20]
 80138bc:	2b01      	cmp	r3, #1
 80138be:	d102      	bne.n	80138c6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80138c0:	f000 fe14 	bl	80144ec <xTimerCreateTimerTask>
 80138c4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80138c6:	697b      	ldr	r3, [r7, #20]
 80138c8:	2b01      	cmp	r3, #1
 80138ca:	d117      	bne.n	80138fc <vTaskStartScheduler+0x90>
 80138cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80138d0:	b672      	cpsid	i
 80138d2:	f383 8811 	msr	BASEPRI, r3
 80138d6:	f3bf 8f6f 	isb	sy
 80138da:	f3bf 8f4f 	dsb	sy
 80138de:	b662      	cpsie	i
 80138e0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80138e2:	4b13      	ldr	r3, [pc, #76]	; (8013930 <vTaskStartScheduler+0xc4>)
 80138e4:	f04f 32ff 	mov.w	r2, #4294967295
 80138e8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80138ea:	4b12      	ldr	r3, [pc, #72]	; (8013934 <vTaskStartScheduler+0xc8>)
 80138ec:	2201      	movs	r2, #1
 80138ee:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80138f0:	4b11      	ldr	r3, [pc, #68]	; (8013938 <vTaskStartScheduler+0xcc>)
 80138f2:	2200      	movs	r2, #0
 80138f4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80138f6:	f001 f9db 	bl	8014cb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80138fa:	e00f      	b.n	801391c <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80138fc:	697b      	ldr	r3, [r7, #20]
 80138fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013902:	d10b      	bne.n	801391c <vTaskStartScheduler+0xb0>
 8013904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013908:	b672      	cpsid	i
 801390a:	f383 8811 	msr	BASEPRI, r3
 801390e:	f3bf 8f6f 	isb	sy
 8013912:	f3bf 8f4f 	dsb	sy
 8013916:	b662      	cpsie	i
 8013918:	60fb      	str	r3, [r7, #12]
 801391a:	e7fe      	b.n	801391a <vTaskStartScheduler+0xae>
}
 801391c:	bf00      	nop
 801391e:	3718      	adds	r7, #24
 8013920:	46bd      	mov	sp, r7
 8013922:	bd80      	pop	{r7, pc}
 8013924:	080160cc 	.word	0x080160cc
 8013928:	08013f81 	.word	0x08013f81
 801392c:	20000e84 	.word	0x20000e84
 8013930:	20000e80 	.word	0x20000e80
 8013934:	20000e6c 	.word	0x20000e6c
 8013938:	20000e64 	.word	0x20000e64

0801393c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801393c:	b480      	push	{r7}
 801393e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8013940:	4b04      	ldr	r3, [pc, #16]	; (8013954 <vTaskSuspendAll+0x18>)
 8013942:	681b      	ldr	r3, [r3, #0]
 8013944:	3301      	adds	r3, #1
 8013946:	4a03      	ldr	r2, [pc, #12]	; (8013954 <vTaskSuspendAll+0x18>)
 8013948:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 801394a:	bf00      	nop
 801394c:	46bd      	mov	sp, r7
 801394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013952:	4770      	bx	lr
 8013954:	20000e88 	.word	0x20000e88

08013958 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8013958:	b580      	push	{r7, lr}
 801395a:	b084      	sub	sp, #16
 801395c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801395e:	2300      	movs	r3, #0
 8013960:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8013962:	2300      	movs	r3, #0
 8013964:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8013966:	4b42      	ldr	r3, [pc, #264]	; (8013a70 <xTaskResumeAll+0x118>)
 8013968:	681b      	ldr	r3, [r3, #0]
 801396a:	2b00      	cmp	r3, #0
 801396c:	d10b      	bne.n	8013986 <xTaskResumeAll+0x2e>
 801396e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013972:	b672      	cpsid	i
 8013974:	f383 8811 	msr	BASEPRI, r3
 8013978:	f3bf 8f6f 	isb	sy
 801397c:	f3bf 8f4f 	dsb	sy
 8013980:	b662      	cpsie	i
 8013982:	603b      	str	r3, [r7, #0]
 8013984:	e7fe      	b.n	8013984 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8013986:	f001 fa0f 	bl	8014da8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801398a:	4b39      	ldr	r3, [pc, #228]	; (8013a70 <xTaskResumeAll+0x118>)
 801398c:	681b      	ldr	r3, [r3, #0]
 801398e:	3b01      	subs	r3, #1
 8013990:	4a37      	ldr	r2, [pc, #220]	; (8013a70 <xTaskResumeAll+0x118>)
 8013992:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013994:	4b36      	ldr	r3, [pc, #216]	; (8013a70 <xTaskResumeAll+0x118>)
 8013996:	681b      	ldr	r3, [r3, #0]
 8013998:	2b00      	cmp	r3, #0
 801399a:	d162      	bne.n	8013a62 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801399c:	4b35      	ldr	r3, [pc, #212]	; (8013a74 <xTaskResumeAll+0x11c>)
 801399e:	681b      	ldr	r3, [r3, #0]
 80139a0:	2b00      	cmp	r3, #0
 80139a2:	d05e      	beq.n	8013a62 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80139a4:	e02f      	b.n	8013a06 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80139a6:	4b34      	ldr	r3, [pc, #208]	; (8013a78 <xTaskResumeAll+0x120>)
 80139a8:	68db      	ldr	r3, [r3, #12]
 80139aa:	68db      	ldr	r3, [r3, #12]
 80139ac:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80139ae:	68fb      	ldr	r3, [r7, #12]
 80139b0:	3318      	adds	r3, #24
 80139b2:	4618      	mov	r0, r3
 80139b4:	f7fe fd58 	bl	8012468 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80139b8:	68fb      	ldr	r3, [r7, #12]
 80139ba:	3304      	adds	r3, #4
 80139bc:	4618      	mov	r0, r3
 80139be:	f7fe fd53 	bl	8012468 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80139c2:	68fb      	ldr	r3, [r7, #12]
 80139c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80139c6:	4b2d      	ldr	r3, [pc, #180]	; (8013a7c <xTaskResumeAll+0x124>)
 80139c8:	681b      	ldr	r3, [r3, #0]
 80139ca:	429a      	cmp	r2, r3
 80139cc:	d903      	bls.n	80139d6 <xTaskResumeAll+0x7e>
 80139ce:	68fb      	ldr	r3, [r7, #12]
 80139d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80139d2:	4a2a      	ldr	r2, [pc, #168]	; (8013a7c <xTaskResumeAll+0x124>)
 80139d4:	6013      	str	r3, [r2, #0]
 80139d6:	68fb      	ldr	r3, [r7, #12]
 80139d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80139da:	4613      	mov	r3, r2
 80139dc:	009b      	lsls	r3, r3, #2
 80139de:	4413      	add	r3, r2
 80139e0:	009b      	lsls	r3, r3, #2
 80139e2:	4a27      	ldr	r2, [pc, #156]	; (8013a80 <xTaskResumeAll+0x128>)
 80139e4:	441a      	add	r2, r3
 80139e6:	68fb      	ldr	r3, [r7, #12]
 80139e8:	3304      	adds	r3, #4
 80139ea:	4619      	mov	r1, r3
 80139ec:	4610      	mov	r0, r2
 80139ee:	f7fe fcde 	bl	80123ae <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80139f2:	68fb      	ldr	r3, [r7, #12]
 80139f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80139f6:	4b23      	ldr	r3, [pc, #140]	; (8013a84 <xTaskResumeAll+0x12c>)
 80139f8:	681b      	ldr	r3, [r3, #0]
 80139fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80139fc:	429a      	cmp	r2, r3
 80139fe:	d302      	bcc.n	8013a06 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8013a00:	4b21      	ldr	r3, [pc, #132]	; (8013a88 <xTaskResumeAll+0x130>)
 8013a02:	2201      	movs	r2, #1
 8013a04:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013a06:	4b1c      	ldr	r3, [pc, #112]	; (8013a78 <xTaskResumeAll+0x120>)
 8013a08:	681b      	ldr	r3, [r3, #0]
 8013a0a:	2b00      	cmp	r3, #0
 8013a0c:	d1cb      	bne.n	80139a6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8013a0e:	68fb      	ldr	r3, [r7, #12]
 8013a10:	2b00      	cmp	r3, #0
 8013a12:	d001      	beq.n	8013a18 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8013a14:	f000 fb68 	bl	80140e8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8013a18:	4b1c      	ldr	r3, [pc, #112]	; (8013a8c <xTaskResumeAll+0x134>)
 8013a1a:	681b      	ldr	r3, [r3, #0]
 8013a1c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8013a1e:	687b      	ldr	r3, [r7, #4]
 8013a20:	2b00      	cmp	r3, #0
 8013a22:	d010      	beq.n	8013a46 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8013a24:	f000 f858 	bl	8013ad8 <xTaskIncrementTick>
 8013a28:	4603      	mov	r3, r0
 8013a2a:	2b00      	cmp	r3, #0
 8013a2c:	d002      	beq.n	8013a34 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8013a2e:	4b16      	ldr	r3, [pc, #88]	; (8013a88 <xTaskResumeAll+0x130>)
 8013a30:	2201      	movs	r2, #1
 8013a32:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8013a34:	687b      	ldr	r3, [r7, #4]
 8013a36:	3b01      	subs	r3, #1
 8013a38:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8013a3a:	687b      	ldr	r3, [r7, #4]
 8013a3c:	2b00      	cmp	r3, #0
 8013a3e:	d1f1      	bne.n	8013a24 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8013a40:	4b12      	ldr	r3, [pc, #72]	; (8013a8c <xTaskResumeAll+0x134>)
 8013a42:	2200      	movs	r2, #0
 8013a44:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8013a46:	4b10      	ldr	r3, [pc, #64]	; (8013a88 <xTaskResumeAll+0x130>)
 8013a48:	681b      	ldr	r3, [r3, #0]
 8013a4a:	2b00      	cmp	r3, #0
 8013a4c:	d009      	beq.n	8013a62 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8013a4e:	2301      	movs	r3, #1
 8013a50:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8013a52:	4b0f      	ldr	r3, [pc, #60]	; (8013a90 <xTaskResumeAll+0x138>)
 8013a54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013a58:	601a      	str	r2, [r3, #0]
 8013a5a:	f3bf 8f4f 	dsb	sy
 8013a5e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8013a62:	f001 f9d3 	bl	8014e0c <vPortExitCritical>

	return xAlreadyYielded;
 8013a66:	68bb      	ldr	r3, [r7, #8]
}
 8013a68:	4618      	mov	r0, r3
 8013a6a:	3710      	adds	r7, #16
 8013a6c:	46bd      	mov	sp, r7
 8013a6e:	bd80      	pop	{r7, pc}
 8013a70:	20000e88 	.word	0x20000e88
 8013a74:	20000e60 	.word	0x20000e60
 8013a78:	20000e20 	.word	0x20000e20
 8013a7c:	20000e68 	.word	0x20000e68
 8013a80:	20000990 	.word	0x20000990
 8013a84:	2000098c 	.word	0x2000098c
 8013a88:	20000e74 	.word	0x20000e74
 8013a8c:	20000e70 	.word	0x20000e70
 8013a90:	e000ed04 	.word	0xe000ed04

08013a94 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8013a94:	b480      	push	{r7}
 8013a96:	b083      	sub	sp, #12
 8013a98:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8013a9a:	4b05      	ldr	r3, [pc, #20]	; (8013ab0 <xTaskGetTickCount+0x1c>)
 8013a9c:	681b      	ldr	r3, [r3, #0]
 8013a9e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8013aa0:	687b      	ldr	r3, [r7, #4]
}
 8013aa2:	4618      	mov	r0, r3
 8013aa4:	370c      	adds	r7, #12
 8013aa6:	46bd      	mov	sp, r7
 8013aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013aac:	4770      	bx	lr
 8013aae:	bf00      	nop
 8013ab0:	20000e64 	.word	0x20000e64

08013ab4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8013ab4:	b580      	push	{r7, lr}
 8013ab6:	b082      	sub	sp, #8
 8013ab8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013aba:	f001 fa55 	bl	8014f68 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8013abe:	2300      	movs	r3, #0
 8013ac0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8013ac2:	4b04      	ldr	r3, [pc, #16]	; (8013ad4 <xTaskGetTickCountFromISR+0x20>)
 8013ac4:	681b      	ldr	r3, [r3, #0]
 8013ac6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013ac8:	683b      	ldr	r3, [r7, #0]
}
 8013aca:	4618      	mov	r0, r3
 8013acc:	3708      	adds	r7, #8
 8013ace:	46bd      	mov	sp, r7
 8013ad0:	bd80      	pop	{r7, pc}
 8013ad2:	bf00      	nop
 8013ad4:	20000e64 	.word	0x20000e64

08013ad8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8013ad8:	b580      	push	{r7, lr}
 8013ada:	b086      	sub	sp, #24
 8013adc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8013ade:	2300      	movs	r3, #0
 8013ae0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013ae2:	4b4f      	ldr	r3, [pc, #316]	; (8013c20 <xTaskIncrementTick+0x148>)
 8013ae4:	681b      	ldr	r3, [r3, #0]
 8013ae6:	2b00      	cmp	r3, #0
 8013ae8:	f040 808a 	bne.w	8013c00 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8013aec:	4b4d      	ldr	r3, [pc, #308]	; (8013c24 <xTaskIncrementTick+0x14c>)
 8013aee:	681b      	ldr	r3, [r3, #0]
 8013af0:	3301      	adds	r3, #1
 8013af2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8013af4:	4a4b      	ldr	r2, [pc, #300]	; (8013c24 <xTaskIncrementTick+0x14c>)
 8013af6:	693b      	ldr	r3, [r7, #16]
 8013af8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8013afa:	693b      	ldr	r3, [r7, #16]
 8013afc:	2b00      	cmp	r3, #0
 8013afe:	d121      	bne.n	8013b44 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8013b00:	4b49      	ldr	r3, [pc, #292]	; (8013c28 <xTaskIncrementTick+0x150>)
 8013b02:	681b      	ldr	r3, [r3, #0]
 8013b04:	681b      	ldr	r3, [r3, #0]
 8013b06:	2b00      	cmp	r3, #0
 8013b08:	d00b      	beq.n	8013b22 <xTaskIncrementTick+0x4a>
 8013b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b0e:	b672      	cpsid	i
 8013b10:	f383 8811 	msr	BASEPRI, r3
 8013b14:	f3bf 8f6f 	isb	sy
 8013b18:	f3bf 8f4f 	dsb	sy
 8013b1c:	b662      	cpsie	i
 8013b1e:	603b      	str	r3, [r7, #0]
 8013b20:	e7fe      	b.n	8013b20 <xTaskIncrementTick+0x48>
 8013b22:	4b41      	ldr	r3, [pc, #260]	; (8013c28 <xTaskIncrementTick+0x150>)
 8013b24:	681b      	ldr	r3, [r3, #0]
 8013b26:	60fb      	str	r3, [r7, #12]
 8013b28:	4b40      	ldr	r3, [pc, #256]	; (8013c2c <xTaskIncrementTick+0x154>)
 8013b2a:	681b      	ldr	r3, [r3, #0]
 8013b2c:	4a3e      	ldr	r2, [pc, #248]	; (8013c28 <xTaskIncrementTick+0x150>)
 8013b2e:	6013      	str	r3, [r2, #0]
 8013b30:	4a3e      	ldr	r2, [pc, #248]	; (8013c2c <xTaskIncrementTick+0x154>)
 8013b32:	68fb      	ldr	r3, [r7, #12]
 8013b34:	6013      	str	r3, [r2, #0]
 8013b36:	4b3e      	ldr	r3, [pc, #248]	; (8013c30 <xTaskIncrementTick+0x158>)
 8013b38:	681b      	ldr	r3, [r3, #0]
 8013b3a:	3301      	adds	r3, #1
 8013b3c:	4a3c      	ldr	r2, [pc, #240]	; (8013c30 <xTaskIncrementTick+0x158>)
 8013b3e:	6013      	str	r3, [r2, #0]
 8013b40:	f000 fad2 	bl	80140e8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8013b44:	4b3b      	ldr	r3, [pc, #236]	; (8013c34 <xTaskIncrementTick+0x15c>)
 8013b46:	681b      	ldr	r3, [r3, #0]
 8013b48:	693a      	ldr	r2, [r7, #16]
 8013b4a:	429a      	cmp	r2, r3
 8013b4c:	d349      	bcc.n	8013be2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013b4e:	4b36      	ldr	r3, [pc, #216]	; (8013c28 <xTaskIncrementTick+0x150>)
 8013b50:	681b      	ldr	r3, [r3, #0]
 8013b52:	681b      	ldr	r3, [r3, #0]
 8013b54:	2b00      	cmp	r3, #0
 8013b56:	d104      	bne.n	8013b62 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013b58:	4b36      	ldr	r3, [pc, #216]	; (8013c34 <xTaskIncrementTick+0x15c>)
 8013b5a:	f04f 32ff 	mov.w	r2, #4294967295
 8013b5e:	601a      	str	r2, [r3, #0]
					break;
 8013b60:	e03f      	b.n	8013be2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013b62:	4b31      	ldr	r3, [pc, #196]	; (8013c28 <xTaskIncrementTick+0x150>)
 8013b64:	681b      	ldr	r3, [r3, #0]
 8013b66:	68db      	ldr	r3, [r3, #12]
 8013b68:	68db      	ldr	r3, [r3, #12]
 8013b6a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8013b6c:	68bb      	ldr	r3, [r7, #8]
 8013b6e:	685b      	ldr	r3, [r3, #4]
 8013b70:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8013b72:	693a      	ldr	r2, [r7, #16]
 8013b74:	687b      	ldr	r3, [r7, #4]
 8013b76:	429a      	cmp	r2, r3
 8013b78:	d203      	bcs.n	8013b82 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8013b7a:	4a2e      	ldr	r2, [pc, #184]	; (8013c34 <xTaskIncrementTick+0x15c>)
 8013b7c:	687b      	ldr	r3, [r7, #4]
 8013b7e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8013b80:	e02f      	b.n	8013be2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013b82:	68bb      	ldr	r3, [r7, #8]
 8013b84:	3304      	adds	r3, #4
 8013b86:	4618      	mov	r0, r3
 8013b88:	f7fe fc6e 	bl	8012468 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8013b8c:	68bb      	ldr	r3, [r7, #8]
 8013b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013b90:	2b00      	cmp	r3, #0
 8013b92:	d004      	beq.n	8013b9e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013b94:	68bb      	ldr	r3, [r7, #8]
 8013b96:	3318      	adds	r3, #24
 8013b98:	4618      	mov	r0, r3
 8013b9a:	f7fe fc65 	bl	8012468 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8013b9e:	68bb      	ldr	r3, [r7, #8]
 8013ba0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013ba2:	4b25      	ldr	r3, [pc, #148]	; (8013c38 <xTaskIncrementTick+0x160>)
 8013ba4:	681b      	ldr	r3, [r3, #0]
 8013ba6:	429a      	cmp	r2, r3
 8013ba8:	d903      	bls.n	8013bb2 <xTaskIncrementTick+0xda>
 8013baa:	68bb      	ldr	r3, [r7, #8]
 8013bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013bae:	4a22      	ldr	r2, [pc, #136]	; (8013c38 <xTaskIncrementTick+0x160>)
 8013bb0:	6013      	str	r3, [r2, #0]
 8013bb2:	68bb      	ldr	r3, [r7, #8]
 8013bb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013bb6:	4613      	mov	r3, r2
 8013bb8:	009b      	lsls	r3, r3, #2
 8013bba:	4413      	add	r3, r2
 8013bbc:	009b      	lsls	r3, r3, #2
 8013bbe:	4a1f      	ldr	r2, [pc, #124]	; (8013c3c <xTaskIncrementTick+0x164>)
 8013bc0:	441a      	add	r2, r3
 8013bc2:	68bb      	ldr	r3, [r7, #8]
 8013bc4:	3304      	adds	r3, #4
 8013bc6:	4619      	mov	r1, r3
 8013bc8:	4610      	mov	r0, r2
 8013bca:	f7fe fbf0 	bl	80123ae <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013bce:	68bb      	ldr	r3, [r7, #8]
 8013bd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013bd2:	4b1b      	ldr	r3, [pc, #108]	; (8013c40 <xTaskIncrementTick+0x168>)
 8013bd4:	681b      	ldr	r3, [r3, #0]
 8013bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013bd8:	429a      	cmp	r2, r3
 8013bda:	d3b8      	bcc.n	8013b4e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8013bdc:	2301      	movs	r3, #1
 8013bde:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013be0:	e7b5      	b.n	8013b4e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8013be2:	4b17      	ldr	r3, [pc, #92]	; (8013c40 <xTaskIncrementTick+0x168>)
 8013be4:	681b      	ldr	r3, [r3, #0]
 8013be6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013be8:	4914      	ldr	r1, [pc, #80]	; (8013c3c <xTaskIncrementTick+0x164>)
 8013bea:	4613      	mov	r3, r2
 8013bec:	009b      	lsls	r3, r3, #2
 8013bee:	4413      	add	r3, r2
 8013bf0:	009b      	lsls	r3, r3, #2
 8013bf2:	440b      	add	r3, r1
 8013bf4:	681b      	ldr	r3, [r3, #0]
 8013bf6:	2b01      	cmp	r3, #1
 8013bf8:	d907      	bls.n	8013c0a <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8013bfa:	2301      	movs	r3, #1
 8013bfc:	617b      	str	r3, [r7, #20]
 8013bfe:	e004      	b.n	8013c0a <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8013c00:	4b10      	ldr	r3, [pc, #64]	; (8013c44 <xTaskIncrementTick+0x16c>)
 8013c02:	681b      	ldr	r3, [r3, #0]
 8013c04:	3301      	adds	r3, #1
 8013c06:	4a0f      	ldr	r2, [pc, #60]	; (8013c44 <xTaskIncrementTick+0x16c>)
 8013c08:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8013c0a:	4b0f      	ldr	r3, [pc, #60]	; (8013c48 <xTaskIncrementTick+0x170>)
 8013c0c:	681b      	ldr	r3, [r3, #0]
 8013c0e:	2b00      	cmp	r3, #0
 8013c10:	d001      	beq.n	8013c16 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8013c12:	2301      	movs	r3, #1
 8013c14:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8013c16:	697b      	ldr	r3, [r7, #20]
}
 8013c18:	4618      	mov	r0, r3
 8013c1a:	3718      	adds	r7, #24
 8013c1c:	46bd      	mov	sp, r7
 8013c1e:	bd80      	pop	{r7, pc}
 8013c20:	20000e88 	.word	0x20000e88
 8013c24:	20000e64 	.word	0x20000e64
 8013c28:	20000e18 	.word	0x20000e18
 8013c2c:	20000e1c 	.word	0x20000e1c
 8013c30:	20000e78 	.word	0x20000e78
 8013c34:	20000e80 	.word	0x20000e80
 8013c38:	20000e68 	.word	0x20000e68
 8013c3c:	20000990 	.word	0x20000990
 8013c40:	2000098c 	.word	0x2000098c
 8013c44:	20000e70 	.word	0x20000e70
 8013c48:	20000e74 	.word	0x20000e74

08013c4c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8013c4c:	b480      	push	{r7}
 8013c4e:	b085      	sub	sp, #20
 8013c50:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8013c52:	4b28      	ldr	r3, [pc, #160]	; (8013cf4 <vTaskSwitchContext+0xa8>)
 8013c54:	681b      	ldr	r3, [r3, #0]
 8013c56:	2b00      	cmp	r3, #0
 8013c58:	d003      	beq.n	8013c62 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8013c5a:	4b27      	ldr	r3, [pc, #156]	; (8013cf8 <vTaskSwitchContext+0xac>)
 8013c5c:	2201      	movs	r2, #1
 8013c5e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8013c60:	e042      	b.n	8013ce8 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8013c62:	4b25      	ldr	r3, [pc, #148]	; (8013cf8 <vTaskSwitchContext+0xac>)
 8013c64:	2200      	movs	r2, #0
 8013c66:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013c68:	4b24      	ldr	r3, [pc, #144]	; (8013cfc <vTaskSwitchContext+0xb0>)
 8013c6a:	681b      	ldr	r3, [r3, #0]
 8013c6c:	60fb      	str	r3, [r7, #12]
 8013c6e:	e011      	b.n	8013c94 <vTaskSwitchContext+0x48>
 8013c70:	68fb      	ldr	r3, [r7, #12]
 8013c72:	2b00      	cmp	r3, #0
 8013c74:	d10b      	bne.n	8013c8e <vTaskSwitchContext+0x42>
 8013c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c7a:	b672      	cpsid	i
 8013c7c:	f383 8811 	msr	BASEPRI, r3
 8013c80:	f3bf 8f6f 	isb	sy
 8013c84:	f3bf 8f4f 	dsb	sy
 8013c88:	b662      	cpsie	i
 8013c8a:	607b      	str	r3, [r7, #4]
 8013c8c:	e7fe      	b.n	8013c8c <vTaskSwitchContext+0x40>
 8013c8e:	68fb      	ldr	r3, [r7, #12]
 8013c90:	3b01      	subs	r3, #1
 8013c92:	60fb      	str	r3, [r7, #12]
 8013c94:	491a      	ldr	r1, [pc, #104]	; (8013d00 <vTaskSwitchContext+0xb4>)
 8013c96:	68fa      	ldr	r2, [r7, #12]
 8013c98:	4613      	mov	r3, r2
 8013c9a:	009b      	lsls	r3, r3, #2
 8013c9c:	4413      	add	r3, r2
 8013c9e:	009b      	lsls	r3, r3, #2
 8013ca0:	440b      	add	r3, r1
 8013ca2:	681b      	ldr	r3, [r3, #0]
 8013ca4:	2b00      	cmp	r3, #0
 8013ca6:	d0e3      	beq.n	8013c70 <vTaskSwitchContext+0x24>
 8013ca8:	68fa      	ldr	r2, [r7, #12]
 8013caa:	4613      	mov	r3, r2
 8013cac:	009b      	lsls	r3, r3, #2
 8013cae:	4413      	add	r3, r2
 8013cb0:	009b      	lsls	r3, r3, #2
 8013cb2:	4a13      	ldr	r2, [pc, #76]	; (8013d00 <vTaskSwitchContext+0xb4>)
 8013cb4:	4413      	add	r3, r2
 8013cb6:	60bb      	str	r3, [r7, #8]
 8013cb8:	68bb      	ldr	r3, [r7, #8]
 8013cba:	685b      	ldr	r3, [r3, #4]
 8013cbc:	685a      	ldr	r2, [r3, #4]
 8013cbe:	68bb      	ldr	r3, [r7, #8]
 8013cc0:	605a      	str	r2, [r3, #4]
 8013cc2:	68bb      	ldr	r3, [r7, #8]
 8013cc4:	685a      	ldr	r2, [r3, #4]
 8013cc6:	68bb      	ldr	r3, [r7, #8]
 8013cc8:	3308      	adds	r3, #8
 8013cca:	429a      	cmp	r2, r3
 8013ccc:	d104      	bne.n	8013cd8 <vTaskSwitchContext+0x8c>
 8013cce:	68bb      	ldr	r3, [r7, #8]
 8013cd0:	685b      	ldr	r3, [r3, #4]
 8013cd2:	685a      	ldr	r2, [r3, #4]
 8013cd4:	68bb      	ldr	r3, [r7, #8]
 8013cd6:	605a      	str	r2, [r3, #4]
 8013cd8:	68bb      	ldr	r3, [r7, #8]
 8013cda:	685b      	ldr	r3, [r3, #4]
 8013cdc:	68db      	ldr	r3, [r3, #12]
 8013cde:	4a09      	ldr	r2, [pc, #36]	; (8013d04 <vTaskSwitchContext+0xb8>)
 8013ce0:	6013      	str	r3, [r2, #0]
 8013ce2:	4a06      	ldr	r2, [pc, #24]	; (8013cfc <vTaskSwitchContext+0xb0>)
 8013ce4:	68fb      	ldr	r3, [r7, #12]
 8013ce6:	6013      	str	r3, [r2, #0]
}
 8013ce8:	bf00      	nop
 8013cea:	3714      	adds	r7, #20
 8013cec:	46bd      	mov	sp, r7
 8013cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cf2:	4770      	bx	lr
 8013cf4:	20000e88 	.word	0x20000e88
 8013cf8:	20000e74 	.word	0x20000e74
 8013cfc:	20000e68 	.word	0x20000e68
 8013d00:	20000990 	.word	0x20000990
 8013d04:	2000098c 	.word	0x2000098c

08013d08 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8013d08:	b580      	push	{r7, lr}
 8013d0a:	b084      	sub	sp, #16
 8013d0c:	af00      	add	r7, sp, #0
 8013d0e:	6078      	str	r0, [r7, #4]
 8013d10:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8013d12:	687b      	ldr	r3, [r7, #4]
 8013d14:	2b00      	cmp	r3, #0
 8013d16:	d10b      	bne.n	8013d30 <vTaskPlaceOnEventList+0x28>
 8013d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d1c:	b672      	cpsid	i
 8013d1e:	f383 8811 	msr	BASEPRI, r3
 8013d22:	f3bf 8f6f 	isb	sy
 8013d26:	f3bf 8f4f 	dsb	sy
 8013d2a:	b662      	cpsie	i
 8013d2c:	60fb      	str	r3, [r7, #12]
 8013d2e:	e7fe      	b.n	8013d2e <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8013d30:	4b07      	ldr	r3, [pc, #28]	; (8013d50 <vTaskPlaceOnEventList+0x48>)
 8013d32:	681b      	ldr	r3, [r3, #0]
 8013d34:	3318      	adds	r3, #24
 8013d36:	4619      	mov	r1, r3
 8013d38:	6878      	ldr	r0, [r7, #4]
 8013d3a:	f7fe fb5c 	bl	80123f6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8013d3e:	2101      	movs	r1, #1
 8013d40:	6838      	ldr	r0, [r7, #0]
 8013d42:	f000 fb7f 	bl	8014444 <prvAddCurrentTaskToDelayedList>
}
 8013d46:	bf00      	nop
 8013d48:	3710      	adds	r7, #16
 8013d4a:	46bd      	mov	sp, r7
 8013d4c:	bd80      	pop	{r7, pc}
 8013d4e:	bf00      	nop
 8013d50:	2000098c 	.word	0x2000098c

08013d54 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8013d54:	b580      	push	{r7, lr}
 8013d56:	b086      	sub	sp, #24
 8013d58:	af00      	add	r7, sp, #0
 8013d5a:	60f8      	str	r0, [r7, #12]
 8013d5c:	60b9      	str	r1, [r7, #8]
 8013d5e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8013d60:	68fb      	ldr	r3, [r7, #12]
 8013d62:	2b00      	cmp	r3, #0
 8013d64:	d10b      	bne.n	8013d7e <vTaskPlaceOnEventListRestricted+0x2a>
 8013d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d6a:	b672      	cpsid	i
 8013d6c:	f383 8811 	msr	BASEPRI, r3
 8013d70:	f3bf 8f6f 	isb	sy
 8013d74:	f3bf 8f4f 	dsb	sy
 8013d78:	b662      	cpsie	i
 8013d7a:	617b      	str	r3, [r7, #20]
 8013d7c:	e7fe      	b.n	8013d7c <vTaskPlaceOnEventListRestricted+0x28>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8013d7e:	4b0a      	ldr	r3, [pc, #40]	; (8013da8 <vTaskPlaceOnEventListRestricted+0x54>)
 8013d80:	681b      	ldr	r3, [r3, #0]
 8013d82:	3318      	adds	r3, #24
 8013d84:	4619      	mov	r1, r3
 8013d86:	68f8      	ldr	r0, [r7, #12]
 8013d88:	f7fe fb11 	bl	80123ae <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8013d8c:	687b      	ldr	r3, [r7, #4]
 8013d8e:	2b00      	cmp	r3, #0
 8013d90:	d002      	beq.n	8013d98 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8013d92:	f04f 33ff 	mov.w	r3, #4294967295
 8013d96:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8013d98:	6879      	ldr	r1, [r7, #4]
 8013d9a:	68b8      	ldr	r0, [r7, #8]
 8013d9c:	f000 fb52 	bl	8014444 <prvAddCurrentTaskToDelayedList>
	}
 8013da0:	bf00      	nop
 8013da2:	3718      	adds	r7, #24
 8013da4:	46bd      	mov	sp, r7
 8013da6:	bd80      	pop	{r7, pc}
 8013da8:	2000098c 	.word	0x2000098c

08013dac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8013dac:	b580      	push	{r7, lr}
 8013dae:	b086      	sub	sp, #24
 8013db0:	af00      	add	r7, sp, #0
 8013db2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013db4:	687b      	ldr	r3, [r7, #4]
 8013db6:	68db      	ldr	r3, [r3, #12]
 8013db8:	68db      	ldr	r3, [r3, #12]
 8013dba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8013dbc:	693b      	ldr	r3, [r7, #16]
 8013dbe:	2b00      	cmp	r3, #0
 8013dc0:	d10b      	bne.n	8013dda <xTaskRemoveFromEventList+0x2e>
 8013dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013dc6:	b672      	cpsid	i
 8013dc8:	f383 8811 	msr	BASEPRI, r3
 8013dcc:	f3bf 8f6f 	isb	sy
 8013dd0:	f3bf 8f4f 	dsb	sy
 8013dd4:	b662      	cpsie	i
 8013dd6:	60fb      	str	r3, [r7, #12]
 8013dd8:	e7fe      	b.n	8013dd8 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8013dda:	693b      	ldr	r3, [r7, #16]
 8013ddc:	3318      	adds	r3, #24
 8013dde:	4618      	mov	r0, r3
 8013de0:	f7fe fb42 	bl	8012468 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013de4:	4b1d      	ldr	r3, [pc, #116]	; (8013e5c <xTaskRemoveFromEventList+0xb0>)
 8013de6:	681b      	ldr	r3, [r3, #0]
 8013de8:	2b00      	cmp	r3, #0
 8013dea:	d11d      	bne.n	8013e28 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8013dec:	693b      	ldr	r3, [r7, #16]
 8013dee:	3304      	adds	r3, #4
 8013df0:	4618      	mov	r0, r3
 8013df2:	f7fe fb39 	bl	8012468 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8013df6:	693b      	ldr	r3, [r7, #16]
 8013df8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013dfa:	4b19      	ldr	r3, [pc, #100]	; (8013e60 <xTaskRemoveFromEventList+0xb4>)
 8013dfc:	681b      	ldr	r3, [r3, #0]
 8013dfe:	429a      	cmp	r2, r3
 8013e00:	d903      	bls.n	8013e0a <xTaskRemoveFromEventList+0x5e>
 8013e02:	693b      	ldr	r3, [r7, #16]
 8013e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013e06:	4a16      	ldr	r2, [pc, #88]	; (8013e60 <xTaskRemoveFromEventList+0xb4>)
 8013e08:	6013      	str	r3, [r2, #0]
 8013e0a:	693b      	ldr	r3, [r7, #16]
 8013e0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013e0e:	4613      	mov	r3, r2
 8013e10:	009b      	lsls	r3, r3, #2
 8013e12:	4413      	add	r3, r2
 8013e14:	009b      	lsls	r3, r3, #2
 8013e16:	4a13      	ldr	r2, [pc, #76]	; (8013e64 <xTaskRemoveFromEventList+0xb8>)
 8013e18:	441a      	add	r2, r3
 8013e1a:	693b      	ldr	r3, [r7, #16]
 8013e1c:	3304      	adds	r3, #4
 8013e1e:	4619      	mov	r1, r3
 8013e20:	4610      	mov	r0, r2
 8013e22:	f7fe fac4 	bl	80123ae <vListInsertEnd>
 8013e26:	e005      	b.n	8013e34 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8013e28:	693b      	ldr	r3, [r7, #16]
 8013e2a:	3318      	adds	r3, #24
 8013e2c:	4619      	mov	r1, r3
 8013e2e:	480e      	ldr	r0, [pc, #56]	; (8013e68 <xTaskRemoveFromEventList+0xbc>)
 8013e30:	f7fe fabd 	bl	80123ae <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8013e34:	693b      	ldr	r3, [r7, #16]
 8013e36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013e38:	4b0c      	ldr	r3, [pc, #48]	; (8013e6c <xTaskRemoveFromEventList+0xc0>)
 8013e3a:	681b      	ldr	r3, [r3, #0]
 8013e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013e3e:	429a      	cmp	r2, r3
 8013e40:	d905      	bls.n	8013e4e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8013e42:	2301      	movs	r3, #1
 8013e44:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8013e46:	4b0a      	ldr	r3, [pc, #40]	; (8013e70 <xTaskRemoveFromEventList+0xc4>)
 8013e48:	2201      	movs	r2, #1
 8013e4a:	601a      	str	r2, [r3, #0]
 8013e4c:	e001      	b.n	8013e52 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8013e4e:	2300      	movs	r3, #0
 8013e50:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8013e52:	697b      	ldr	r3, [r7, #20]
}
 8013e54:	4618      	mov	r0, r3
 8013e56:	3718      	adds	r7, #24
 8013e58:	46bd      	mov	sp, r7
 8013e5a:	bd80      	pop	{r7, pc}
 8013e5c:	20000e88 	.word	0x20000e88
 8013e60:	20000e68 	.word	0x20000e68
 8013e64:	20000990 	.word	0x20000990
 8013e68:	20000e20 	.word	0x20000e20
 8013e6c:	2000098c 	.word	0x2000098c
 8013e70:	20000e74 	.word	0x20000e74

08013e74 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8013e74:	b480      	push	{r7}
 8013e76:	b083      	sub	sp, #12
 8013e78:	af00      	add	r7, sp, #0
 8013e7a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8013e7c:	4b06      	ldr	r3, [pc, #24]	; (8013e98 <vTaskInternalSetTimeOutState+0x24>)
 8013e7e:	681a      	ldr	r2, [r3, #0]
 8013e80:	687b      	ldr	r3, [r7, #4]
 8013e82:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8013e84:	4b05      	ldr	r3, [pc, #20]	; (8013e9c <vTaskInternalSetTimeOutState+0x28>)
 8013e86:	681a      	ldr	r2, [r3, #0]
 8013e88:	687b      	ldr	r3, [r7, #4]
 8013e8a:	605a      	str	r2, [r3, #4]
}
 8013e8c:	bf00      	nop
 8013e8e:	370c      	adds	r7, #12
 8013e90:	46bd      	mov	sp, r7
 8013e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e96:	4770      	bx	lr
 8013e98:	20000e78 	.word	0x20000e78
 8013e9c:	20000e64 	.word	0x20000e64

08013ea0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8013ea0:	b580      	push	{r7, lr}
 8013ea2:	b088      	sub	sp, #32
 8013ea4:	af00      	add	r7, sp, #0
 8013ea6:	6078      	str	r0, [r7, #4]
 8013ea8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8013eaa:	687b      	ldr	r3, [r7, #4]
 8013eac:	2b00      	cmp	r3, #0
 8013eae:	d10b      	bne.n	8013ec8 <xTaskCheckForTimeOut+0x28>
 8013eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013eb4:	b672      	cpsid	i
 8013eb6:	f383 8811 	msr	BASEPRI, r3
 8013eba:	f3bf 8f6f 	isb	sy
 8013ebe:	f3bf 8f4f 	dsb	sy
 8013ec2:	b662      	cpsie	i
 8013ec4:	613b      	str	r3, [r7, #16]
 8013ec6:	e7fe      	b.n	8013ec6 <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 8013ec8:	683b      	ldr	r3, [r7, #0]
 8013eca:	2b00      	cmp	r3, #0
 8013ecc:	d10b      	bne.n	8013ee6 <xTaskCheckForTimeOut+0x46>
 8013ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ed2:	b672      	cpsid	i
 8013ed4:	f383 8811 	msr	BASEPRI, r3
 8013ed8:	f3bf 8f6f 	isb	sy
 8013edc:	f3bf 8f4f 	dsb	sy
 8013ee0:	b662      	cpsie	i
 8013ee2:	60fb      	str	r3, [r7, #12]
 8013ee4:	e7fe      	b.n	8013ee4 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 8013ee6:	f000 ff5f 	bl	8014da8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8013eea:	4b1d      	ldr	r3, [pc, #116]	; (8013f60 <xTaskCheckForTimeOut+0xc0>)
 8013eec:	681b      	ldr	r3, [r3, #0]
 8013eee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8013ef0:	687b      	ldr	r3, [r7, #4]
 8013ef2:	685b      	ldr	r3, [r3, #4]
 8013ef4:	69ba      	ldr	r2, [r7, #24]
 8013ef6:	1ad3      	subs	r3, r2, r3
 8013ef8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8013efa:	683b      	ldr	r3, [r7, #0]
 8013efc:	681b      	ldr	r3, [r3, #0]
 8013efe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013f02:	d102      	bne.n	8013f0a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8013f04:	2300      	movs	r3, #0
 8013f06:	61fb      	str	r3, [r7, #28]
 8013f08:	e023      	b.n	8013f52 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8013f0a:	687b      	ldr	r3, [r7, #4]
 8013f0c:	681a      	ldr	r2, [r3, #0]
 8013f0e:	4b15      	ldr	r3, [pc, #84]	; (8013f64 <xTaskCheckForTimeOut+0xc4>)
 8013f10:	681b      	ldr	r3, [r3, #0]
 8013f12:	429a      	cmp	r2, r3
 8013f14:	d007      	beq.n	8013f26 <xTaskCheckForTimeOut+0x86>
 8013f16:	687b      	ldr	r3, [r7, #4]
 8013f18:	685b      	ldr	r3, [r3, #4]
 8013f1a:	69ba      	ldr	r2, [r7, #24]
 8013f1c:	429a      	cmp	r2, r3
 8013f1e:	d302      	bcc.n	8013f26 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8013f20:	2301      	movs	r3, #1
 8013f22:	61fb      	str	r3, [r7, #28]
 8013f24:	e015      	b.n	8013f52 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8013f26:	683b      	ldr	r3, [r7, #0]
 8013f28:	681b      	ldr	r3, [r3, #0]
 8013f2a:	697a      	ldr	r2, [r7, #20]
 8013f2c:	429a      	cmp	r2, r3
 8013f2e:	d20b      	bcs.n	8013f48 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8013f30:	683b      	ldr	r3, [r7, #0]
 8013f32:	681a      	ldr	r2, [r3, #0]
 8013f34:	697b      	ldr	r3, [r7, #20]
 8013f36:	1ad2      	subs	r2, r2, r3
 8013f38:	683b      	ldr	r3, [r7, #0]
 8013f3a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8013f3c:	6878      	ldr	r0, [r7, #4]
 8013f3e:	f7ff ff99 	bl	8013e74 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8013f42:	2300      	movs	r3, #0
 8013f44:	61fb      	str	r3, [r7, #28]
 8013f46:	e004      	b.n	8013f52 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8013f48:	683b      	ldr	r3, [r7, #0]
 8013f4a:	2200      	movs	r2, #0
 8013f4c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8013f4e:	2301      	movs	r3, #1
 8013f50:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8013f52:	f000 ff5b 	bl	8014e0c <vPortExitCritical>

	return xReturn;
 8013f56:	69fb      	ldr	r3, [r7, #28]
}
 8013f58:	4618      	mov	r0, r3
 8013f5a:	3720      	adds	r7, #32
 8013f5c:	46bd      	mov	sp, r7
 8013f5e:	bd80      	pop	{r7, pc}
 8013f60:	20000e64 	.word	0x20000e64
 8013f64:	20000e78 	.word	0x20000e78

08013f68 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8013f68:	b480      	push	{r7}
 8013f6a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8013f6c:	4b03      	ldr	r3, [pc, #12]	; (8013f7c <vTaskMissedYield+0x14>)
 8013f6e:	2201      	movs	r2, #1
 8013f70:	601a      	str	r2, [r3, #0]
}
 8013f72:	bf00      	nop
 8013f74:	46bd      	mov	sp, r7
 8013f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f7a:	4770      	bx	lr
 8013f7c:	20000e74 	.word	0x20000e74

08013f80 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8013f80:	b580      	push	{r7, lr}
 8013f82:	b082      	sub	sp, #8
 8013f84:	af00      	add	r7, sp, #0
 8013f86:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8013f88:	f000 f852 	bl	8014030 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8013f8c:	4b06      	ldr	r3, [pc, #24]	; (8013fa8 <prvIdleTask+0x28>)
 8013f8e:	681b      	ldr	r3, [r3, #0]
 8013f90:	2b01      	cmp	r3, #1
 8013f92:	d9f9      	bls.n	8013f88 <prvIdleTask+0x8>
			{
				taskYIELD();
 8013f94:	4b05      	ldr	r3, [pc, #20]	; (8013fac <prvIdleTask+0x2c>)
 8013f96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013f9a:	601a      	str	r2, [r3, #0]
 8013f9c:	f3bf 8f4f 	dsb	sy
 8013fa0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8013fa4:	e7f0      	b.n	8013f88 <prvIdleTask+0x8>
 8013fa6:	bf00      	nop
 8013fa8:	20000990 	.word	0x20000990
 8013fac:	e000ed04 	.word	0xe000ed04

08013fb0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8013fb0:	b580      	push	{r7, lr}
 8013fb2:	b082      	sub	sp, #8
 8013fb4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013fb6:	2300      	movs	r3, #0
 8013fb8:	607b      	str	r3, [r7, #4]
 8013fba:	e00c      	b.n	8013fd6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8013fbc:	687a      	ldr	r2, [r7, #4]
 8013fbe:	4613      	mov	r3, r2
 8013fc0:	009b      	lsls	r3, r3, #2
 8013fc2:	4413      	add	r3, r2
 8013fc4:	009b      	lsls	r3, r3, #2
 8013fc6:	4a12      	ldr	r2, [pc, #72]	; (8014010 <prvInitialiseTaskLists+0x60>)
 8013fc8:	4413      	add	r3, r2
 8013fca:	4618      	mov	r0, r3
 8013fcc:	f7fe f9c2 	bl	8012354 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013fd0:	687b      	ldr	r3, [r7, #4]
 8013fd2:	3301      	adds	r3, #1
 8013fd4:	607b      	str	r3, [r7, #4]
 8013fd6:	687b      	ldr	r3, [r7, #4]
 8013fd8:	2b37      	cmp	r3, #55	; 0x37
 8013fda:	d9ef      	bls.n	8013fbc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8013fdc:	480d      	ldr	r0, [pc, #52]	; (8014014 <prvInitialiseTaskLists+0x64>)
 8013fde:	f7fe f9b9 	bl	8012354 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8013fe2:	480d      	ldr	r0, [pc, #52]	; (8014018 <prvInitialiseTaskLists+0x68>)
 8013fe4:	f7fe f9b6 	bl	8012354 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8013fe8:	480c      	ldr	r0, [pc, #48]	; (801401c <prvInitialiseTaskLists+0x6c>)
 8013fea:	f7fe f9b3 	bl	8012354 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8013fee:	480c      	ldr	r0, [pc, #48]	; (8014020 <prvInitialiseTaskLists+0x70>)
 8013ff0:	f7fe f9b0 	bl	8012354 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8013ff4:	480b      	ldr	r0, [pc, #44]	; (8014024 <prvInitialiseTaskLists+0x74>)
 8013ff6:	f7fe f9ad 	bl	8012354 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8013ffa:	4b0b      	ldr	r3, [pc, #44]	; (8014028 <prvInitialiseTaskLists+0x78>)
 8013ffc:	4a05      	ldr	r2, [pc, #20]	; (8014014 <prvInitialiseTaskLists+0x64>)
 8013ffe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8014000:	4b0a      	ldr	r3, [pc, #40]	; (801402c <prvInitialiseTaskLists+0x7c>)
 8014002:	4a05      	ldr	r2, [pc, #20]	; (8014018 <prvInitialiseTaskLists+0x68>)
 8014004:	601a      	str	r2, [r3, #0]
}
 8014006:	bf00      	nop
 8014008:	3708      	adds	r7, #8
 801400a:	46bd      	mov	sp, r7
 801400c:	bd80      	pop	{r7, pc}
 801400e:	bf00      	nop
 8014010:	20000990 	.word	0x20000990
 8014014:	20000df0 	.word	0x20000df0
 8014018:	20000e04 	.word	0x20000e04
 801401c:	20000e20 	.word	0x20000e20
 8014020:	20000e34 	.word	0x20000e34
 8014024:	20000e4c 	.word	0x20000e4c
 8014028:	20000e18 	.word	0x20000e18
 801402c:	20000e1c 	.word	0x20000e1c

08014030 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8014030:	b580      	push	{r7, lr}
 8014032:	b082      	sub	sp, #8
 8014034:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014036:	e019      	b.n	801406c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8014038:	f000 feb6 	bl	8014da8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801403c:	4b0f      	ldr	r3, [pc, #60]	; (801407c <prvCheckTasksWaitingTermination+0x4c>)
 801403e:	68db      	ldr	r3, [r3, #12]
 8014040:	68db      	ldr	r3, [r3, #12]
 8014042:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014044:	687b      	ldr	r3, [r7, #4]
 8014046:	3304      	adds	r3, #4
 8014048:	4618      	mov	r0, r3
 801404a:	f7fe fa0d 	bl	8012468 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801404e:	4b0c      	ldr	r3, [pc, #48]	; (8014080 <prvCheckTasksWaitingTermination+0x50>)
 8014050:	681b      	ldr	r3, [r3, #0]
 8014052:	3b01      	subs	r3, #1
 8014054:	4a0a      	ldr	r2, [pc, #40]	; (8014080 <prvCheckTasksWaitingTermination+0x50>)
 8014056:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8014058:	4b0a      	ldr	r3, [pc, #40]	; (8014084 <prvCheckTasksWaitingTermination+0x54>)
 801405a:	681b      	ldr	r3, [r3, #0]
 801405c:	3b01      	subs	r3, #1
 801405e:	4a09      	ldr	r2, [pc, #36]	; (8014084 <prvCheckTasksWaitingTermination+0x54>)
 8014060:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8014062:	f000 fed3 	bl	8014e0c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8014066:	6878      	ldr	r0, [r7, #4]
 8014068:	f000 f80e 	bl	8014088 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801406c:	4b05      	ldr	r3, [pc, #20]	; (8014084 <prvCheckTasksWaitingTermination+0x54>)
 801406e:	681b      	ldr	r3, [r3, #0]
 8014070:	2b00      	cmp	r3, #0
 8014072:	d1e1      	bne.n	8014038 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8014074:	bf00      	nop
 8014076:	3708      	adds	r7, #8
 8014078:	46bd      	mov	sp, r7
 801407a:	bd80      	pop	{r7, pc}
 801407c:	20000e34 	.word	0x20000e34
 8014080:	20000e60 	.word	0x20000e60
 8014084:	20000e48 	.word	0x20000e48

08014088 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8014088:	b580      	push	{r7, lr}
 801408a:	b084      	sub	sp, #16
 801408c:	af00      	add	r7, sp, #0
 801408e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8014090:	687b      	ldr	r3, [r7, #4]
 8014092:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8014096:	2b00      	cmp	r3, #0
 8014098:	d108      	bne.n	80140ac <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801409a:	687b      	ldr	r3, [r7, #4]
 801409c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801409e:	4618      	mov	r0, r3
 80140a0:	f001 f86c 	bl	801517c <vPortFree>
				vPortFree( pxTCB );
 80140a4:	6878      	ldr	r0, [r7, #4]
 80140a6:	f001 f869 	bl	801517c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80140aa:	e019      	b.n	80140e0 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80140ac:	687b      	ldr	r3, [r7, #4]
 80140ae:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80140b2:	2b01      	cmp	r3, #1
 80140b4:	d103      	bne.n	80140be <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80140b6:	6878      	ldr	r0, [r7, #4]
 80140b8:	f001 f860 	bl	801517c <vPortFree>
	}
 80140bc:	e010      	b.n	80140e0 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80140be:	687b      	ldr	r3, [r7, #4]
 80140c0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80140c4:	2b02      	cmp	r3, #2
 80140c6:	d00b      	beq.n	80140e0 <prvDeleteTCB+0x58>
 80140c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80140cc:	b672      	cpsid	i
 80140ce:	f383 8811 	msr	BASEPRI, r3
 80140d2:	f3bf 8f6f 	isb	sy
 80140d6:	f3bf 8f4f 	dsb	sy
 80140da:	b662      	cpsie	i
 80140dc:	60fb      	str	r3, [r7, #12]
 80140de:	e7fe      	b.n	80140de <prvDeleteTCB+0x56>
	}
 80140e0:	bf00      	nop
 80140e2:	3710      	adds	r7, #16
 80140e4:	46bd      	mov	sp, r7
 80140e6:	bd80      	pop	{r7, pc}

080140e8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80140e8:	b480      	push	{r7}
 80140ea:	b083      	sub	sp, #12
 80140ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80140ee:	4b0c      	ldr	r3, [pc, #48]	; (8014120 <prvResetNextTaskUnblockTime+0x38>)
 80140f0:	681b      	ldr	r3, [r3, #0]
 80140f2:	681b      	ldr	r3, [r3, #0]
 80140f4:	2b00      	cmp	r3, #0
 80140f6:	d104      	bne.n	8014102 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80140f8:	4b0a      	ldr	r3, [pc, #40]	; (8014124 <prvResetNextTaskUnblockTime+0x3c>)
 80140fa:	f04f 32ff 	mov.w	r2, #4294967295
 80140fe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8014100:	e008      	b.n	8014114 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014102:	4b07      	ldr	r3, [pc, #28]	; (8014120 <prvResetNextTaskUnblockTime+0x38>)
 8014104:	681b      	ldr	r3, [r3, #0]
 8014106:	68db      	ldr	r3, [r3, #12]
 8014108:	68db      	ldr	r3, [r3, #12]
 801410a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801410c:	687b      	ldr	r3, [r7, #4]
 801410e:	685b      	ldr	r3, [r3, #4]
 8014110:	4a04      	ldr	r2, [pc, #16]	; (8014124 <prvResetNextTaskUnblockTime+0x3c>)
 8014112:	6013      	str	r3, [r2, #0]
}
 8014114:	bf00      	nop
 8014116:	370c      	adds	r7, #12
 8014118:	46bd      	mov	sp, r7
 801411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801411e:	4770      	bx	lr
 8014120:	20000e18 	.word	0x20000e18
 8014124:	20000e80 	.word	0x20000e80

08014128 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8014128:	b480      	push	{r7}
 801412a:	b083      	sub	sp, #12
 801412c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801412e:	4b0b      	ldr	r3, [pc, #44]	; (801415c <xTaskGetSchedulerState+0x34>)
 8014130:	681b      	ldr	r3, [r3, #0]
 8014132:	2b00      	cmp	r3, #0
 8014134:	d102      	bne.n	801413c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8014136:	2301      	movs	r3, #1
 8014138:	607b      	str	r3, [r7, #4]
 801413a:	e008      	b.n	801414e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801413c:	4b08      	ldr	r3, [pc, #32]	; (8014160 <xTaskGetSchedulerState+0x38>)
 801413e:	681b      	ldr	r3, [r3, #0]
 8014140:	2b00      	cmp	r3, #0
 8014142:	d102      	bne.n	801414a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8014144:	2302      	movs	r3, #2
 8014146:	607b      	str	r3, [r7, #4]
 8014148:	e001      	b.n	801414e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801414a:	2300      	movs	r3, #0
 801414c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801414e:	687b      	ldr	r3, [r7, #4]
	}
 8014150:	4618      	mov	r0, r3
 8014152:	370c      	adds	r7, #12
 8014154:	46bd      	mov	sp, r7
 8014156:	f85d 7b04 	ldr.w	r7, [sp], #4
 801415a:	4770      	bx	lr
 801415c:	20000e6c 	.word	0x20000e6c
 8014160:	20000e88 	.word	0x20000e88

08014164 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8014164:	b580      	push	{r7, lr}
 8014166:	b084      	sub	sp, #16
 8014168:	af00      	add	r7, sp, #0
 801416a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 801416c:	687b      	ldr	r3, [r7, #4]
 801416e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8014170:	2300      	movs	r3, #0
 8014172:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8014174:	687b      	ldr	r3, [r7, #4]
 8014176:	2b00      	cmp	r3, #0
 8014178:	d051      	beq.n	801421e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801417a:	68bb      	ldr	r3, [r7, #8]
 801417c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801417e:	4b2a      	ldr	r3, [pc, #168]	; (8014228 <xTaskPriorityInherit+0xc4>)
 8014180:	681b      	ldr	r3, [r3, #0]
 8014182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014184:	429a      	cmp	r2, r3
 8014186:	d241      	bcs.n	801420c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8014188:	68bb      	ldr	r3, [r7, #8]
 801418a:	699b      	ldr	r3, [r3, #24]
 801418c:	2b00      	cmp	r3, #0
 801418e:	db06      	blt.n	801419e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014190:	4b25      	ldr	r3, [pc, #148]	; (8014228 <xTaskPriorityInherit+0xc4>)
 8014192:	681b      	ldr	r3, [r3, #0]
 8014194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014196:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801419a:	68bb      	ldr	r3, [r7, #8]
 801419c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801419e:	68bb      	ldr	r3, [r7, #8]
 80141a0:	6959      	ldr	r1, [r3, #20]
 80141a2:	68bb      	ldr	r3, [r7, #8]
 80141a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80141a6:	4613      	mov	r3, r2
 80141a8:	009b      	lsls	r3, r3, #2
 80141aa:	4413      	add	r3, r2
 80141ac:	009b      	lsls	r3, r3, #2
 80141ae:	4a1f      	ldr	r2, [pc, #124]	; (801422c <xTaskPriorityInherit+0xc8>)
 80141b0:	4413      	add	r3, r2
 80141b2:	4299      	cmp	r1, r3
 80141b4:	d122      	bne.n	80141fc <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80141b6:	68bb      	ldr	r3, [r7, #8]
 80141b8:	3304      	adds	r3, #4
 80141ba:	4618      	mov	r0, r3
 80141bc:	f7fe f954 	bl	8012468 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80141c0:	4b19      	ldr	r3, [pc, #100]	; (8014228 <xTaskPriorityInherit+0xc4>)
 80141c2:	681b      	ldr	r3, [r3, #0]
 80141c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80141c6:	68bb      	ldr	r3, [r7, #8]
 80141c8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80141ca:	68bb      	ldr	r3, [r7, #8]
 80141cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80141ce:	4b18      	ldr	r3, [pc, #96]	; (8014230 <xTaskPriorityInherit+0xcc>)
 80141d0:	681b      	ldr	r3, [r3, #0]
 80141d2:	429a      	cmp	r2, r3
 80141d4:	d903      	bls.n	80141de <xTaskPriorityInherit+0x7a>
 80141d6:	68bb      	ldr	r3, [r7, #8]
 80141d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80141da:	4a15      	ldr	r2, [pc, #84]	; (8014230 <xTaskPriorityInherit+0xcc>)
 80141dc:	6013      	str	r3, [r2, #0]
 80141de:	68bb      	ldr	r3, [r7, #8]
 80141e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80141e2:	4613      	mov	r3, r2
 80141e4:	009b      	lsls	r3, r3, #2
 80141e6:	4413      	add	r3, r2
 80141e8:	009b      	lsls	r3, r3, #2
 80141ea:	4a10      	ldr	r2, [pc, #64]	; (801422c <xTaskPriorityInherit+0xc8>)
 80141ec:	441a      	add	r2, r3
 80141ee:	68bb      	ldr	r3, [r7, #8]
 80141f0:	3304      	adds	r3, #4
 80141f2:	4619      	mov	r1, r3
 80141f4:	4610      	mov	r0, r2
 80141f6:	f7fe f8da 	bl	80123ae <vListInsertEnd>
 80141fa:	e004      	b.n	8014206 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80141fc:	4b0a      	ldr	r3, [pc, #40]	; (8014228 <xTaskPriorityInherit+0xc4>)
 80141fe:	681b      	ldr	r3, [r3, #0]
 8014200:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014202:	68bb      	ldr	r3, [r7, #8]
 8014204:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8014206:	2301      	movs	r3, #1
 8014208:	60fb      	str	r3, [r7, #12]
 801420a:	e008      	b.n	801421e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801420c:	68bb      	ldr	r3, [r7, #8]
 801420e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014210:	4b05      	ldr	r3, [pc, #20]	; (8014228 <xTaskPriorityInherit+0xc4>)
 8014212:	681b      	ldr	r3, [r3, #0]
 8014214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014216:	429a      	cmp	r2, r3
 8014218:	d201      	bcs.n	801421e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801421a:	2301      	movs	r3, #1
 801421c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801421e:	68fb      	ldr	r3, [r7, #12]
	}
 8014220:	4618      	mov	r0, r3
 8014222:	3710      	adds	r7, #16
 8014224:	46bd      	mov	sp, r7
 8014226:	bd80      	pop	{r7, pc}
 8014228:	2000098c 	.word	0x2000098c
 801422c:	20000990 	.word	0x20000990
 8014230:	20000e68 	.word	0x20000e68

08014234 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8014234:	b580      	push	{r7, lr}
 8014236:	b086      	sub	sp, #24
 8014238:	af00      	add	r7, sp, #0
 801423a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801423c:	687b      	ldr	r3, [r7, #4]
 801423e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8014240:	2300      	movs	r3, #0
 8014242:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8014244:	687b      	ldr	r3, [r7, #4]
 8014246:	2b00      	cmp	r3, #0
 8014248:	d058      	beq.n	80142fc <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801424a:	4b2f      	ldr	r3, [pc, #188]	; (8014308 <xTaskPriorityDisinherit+0xd4>)
 801424c:	681b      	ldr	r3, [r3, #0]
 801424e:	693a      	ldr	r2, [r7, #16]
 8014250:	429a      	cmp	r2, r3
 8014252:	d00b      	beq.n	801426c <xTaskPriorityDisinherit+0x38>
 8014254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014258:	b672      	cpsid	i
 801425a:	f383 8811 	msr	BASEPRI, r3
 801425e:	f3bf 8f6f 	isb	sy
 8014262:	f3bf 8f4f 	dsb	sy
 8014266:	b662      	cpsie	i
 8014268:	60fb      	str	r3, [r7, #12]
 801426a:	e7fe      	b.n	801426a <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 801426c:	693b      	ldr	r3, [r7, #16]
 801426e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014270:	2b00      	cmp	r3, #0
 8014272:	d10b      	bne.n	801428c <xTaskPriorityDisinherit+0x58>
 8014274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014278:	b672      	cpsid	i
 801427a:	f383 8811 	msr	BASEPRI, r3
 801427e:	f3bf 8f6f 	isb	sy
 8014282:	f3bf 8f4f 	dsb	sy
 8014286:	b662      	cpsie	i
 8014288:	60bb      	str	r3, [r7, #8]
 801428a:	e7fe      	b.n	801428a <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 801428c:	693b      	ldr	r3, [r7, #16]
 801428e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014290:	1e5a      	subs	r2, r3, #1
 8014292:	693b      	ldr	r3, [r7, #16]
 8014294:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8014296:	693b      	ldr	r3, [r7, #16]
 8014298:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801429a:	693b      	ldr	r3, [r7, #16]
 801429c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801429e:	429a      	cmp	r2, r3
 80142a0:	d02c      	beq.n	80142fc <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80142a2:	693b      	ldr	r3, [r7, #16]
 80142a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80142a6:	2b00      	cmp	r3, #0
 80142a8:	d128      	bne.n	80142fc <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80142aa:	693b      	ldr	r3, [r7, #16]
 80142ac:	3304      	adds	r3, #4
 80142ae:	4618      	mov	r0, r3
 80142b0:	f7fe f8da 	bl	8012468 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80142b4:	693b      	ldr	r3, [r7, #16]
 80142b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80142b8:	693b      	ldr	r3, [r7, #16]
 80142ba:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80142bc:	693b      	ldr	r3, [r7, #16]
 80142be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80142c0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80142c4:	693b      	ldr	r3, [r7, #16]
 80142c6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80142c8:	693b      	ldr	r3, [r7, #16]
 80142ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80142cc:	4b0f      	ldr	r3, [pc, #60]	; (801430c <xTaskPriorityDisinherit+0xd8>)
 80142ce:	681b      	ldr	r3, [r3, #0]
 80142d0:	429a      	cmp	r2, r3
 80142d2:	d903      	bls.n	80142dc <xTaskPriorityDisinherit+0xa8>
 80142d4:	693b      	ldr	r3, [r7, #16]
 80142d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80142d8:	4a0c      	ldr	r2, [pc, #48]	; (801430c <xTaskPriorityDisinherit+0xd8>)
 80142da:	6013      	str	r3, [r2, #0]
 80142dc:	693b      	ldr	r3, [r7, #16]
 80142de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80142e0:	4613      	mov	r3, r2
 80142e2:	009b      	lsls	r3, r3, #2
 80142e4:	4413      	add	r3, r2
 80142e6:	009b      	lsls	r3, r3, #2
 80142e8:	4a09      	ldr	r2, [pc, #36]	; (8014310 <xTaskPriorityDisinherit+0xdc>)
 80142ea:	441a      	add	r2, r3
 80142ec:	693b      	ldr	r3, [r7, #16]
 80142ee:	3304      	adds	r3, #4
 80142f0:	4619      	mov	r1, r3
 80142f2:	4610      	mov	r0, r2
 80142f4:	f7fe f85b 	bl	80123ae <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80142f8:	2301      	movs	r3, #1
 80142fa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80142fc:	697b      	ldr	r3, [r7, #20]
	}
 80142fe:	4618      	mov	r0, r3
 8014300:	3718      	adds	r7, #24
 8014302:	46bd      	mov	sp, r7
 8014304:	bd80      	pop	{r7, pc}
 8014306:	bf00      	nop
 8014308:	2000098c 	.word	0x2000098c
 801430c:	20000e68 	.word	0x20000e68
 8014310:	20000990 	.word	0x20000990

08014314 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8014314:	b580      	push	{r7, lr}
 8014316:	b088      	sub	sp, #32
 8014318:	af00      	add	r7, sp, #0
 801431a:	6078      	str	r0, [r7, #4]
 801431c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801431e:	687b      	ldr	r3, [r7, #4]
 8014320:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8014322:	2301      	movs	r3, #1
 8014324:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8014326:	687b      	ldr	r3, [r7, #4]
 8014328:	2b00      	cmp	r3, #0
 801432a:	d06c      	beq.n	8014406 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 801432c:	69bb      	ldr	r3, [r7, #24]
 801432e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014330:	2b00      	cmp	r3, #0
 8014332:	d10b      	bne.n	801434c <vTaskPriorityDisinheritAfterTimeout+0x38>
 8014334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014338:	b672      	cpsid	i
 801433a:	f383 8811 	msr	BASEPRI, r3
 801433e:	f3bf 8f6f 	isb	sy
 8014342:	f3bf 8f4f 	dsb	sy
 8014346:	b662      	cpsie	i
 8014348:	60fb      	str	r3, [r7, #12]
 801434a:	e7fe      	b.n	801434a <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801434c:	69bb      	ldr	r3, [r7, #24]
 801434e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014350:	683a      	ldr	r2, [r7, #0]
 8014352:	429a      	cmp	r2, r3
 8014354:	d902      	bls.n	801435c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8014356:	683b      	ldr	r3, [r7, #0]
 8014358:	61fb      	str	r3, [r7, #28]
 801435a:	e002      	b.n	8014362 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 801435c:	69bb      	ldr	r3, [r7, #24]
 801435e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014360:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8014362:	69bb      	ldr	r3, [r7, #24]
 8014364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014366:	69fa      	ldr	r2, [r7, #28]
 8014368:	429a      	cmp	r2, r3
 801436a:	d04c      	beq.n	8014406 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801436c:	69bb      	ldr	r3, [r7, #24]
 801436e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014370:	697a      	ldr	r2, [r7, #20]
 8014372:	429a      	cmp	r2, r3
 8014374:	d147      	bne.n	8014406 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8014376:	4b26      	ldr	r3, [pc, #152]	; (8014410 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8014378:	681b      	ldr	r3, [r3, #0]
 801437a:	69ba      	ldr	r2, [r7, #24]
 801437c:	429a      	cmp	r2, r3
 801437e:	d10b      	bne.n	8014398 <vTaskPriorityDisinheritAfterTimeout+0x84>
 8014380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014384:	b672      	cpsid	i
 8014386:	f383 8811 	msr	BASEPRI, r3
 801438a:	f3bf 8f6f 	isb	sy
 801438e:	f3bf 8f4f 	dsb	sy
 8014392:	b662      	cpsie	i
 8014394:	60bb      	str	r3, [r7, #8]
 8014396:	e7fe      	b.n	8014396 <vTaskPriorityDisinheritAfterTimeout+0x82>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8014398:	69bb      	ldr	r3, [r7, #24]
 801439a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801439c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801439e:	69bb      	ldr	r3, [r7, #24]
 80143a0:	69fa      	ldr	r2, [r7, #28]
 80143a2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80143a4:	69bb      	ldr	r3, [r7, #24]
 80143a6:	699b      	ldr	r3, [r3, #24]
 80143a8:	2b00      	cmp	r3, #0
 80143aa:	db04      	blt.n	80143b6 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80143ac:	69fb      	ldr	r3, [r7, #28]
 80143ae:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80143b2:	69bb      	ldr	r3, [r7, #24]
 80143b4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80143b6:	69bb      	ldr	r3, [r7, #24]
 80143b8:	6959      	ldr	r1, [r3, #20]
 80143ba:	693a      	ldr	r2, [r7, #16]
 80143bc:	4613      	mov	r3, r2
 80143be:	009b      	lsls	r3, r3, #2
 80143c0:	4413      	add	r3, r2
 80143c2:	009b      	lsls	r3, r3, #2
 80143c4:	4a13      	ldr	r2, [pc, #76]	; (8014414 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80143c6:	4413      	add	r3, r2
 80143c8:	4299      	cmp	r1, r3
 80143ca:	d11c      	bne.n	8014406 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80143cc:	69bb      	ldr	r3, [r7, #24]
 80143ce:	3304      	adds	r3, #4
 80143d0:	4618      	mov	r0, r3
 80143d2:	f7fe f849 	bl	8012468 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80143d6:	69bb      	ldr	r3, [r7, #24]
 80143d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80143da:	4b0f      	ldr	r3, [pc, #60]	; (8014418 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80143dc:	681b      	ldr	r3, [r3, #0]
 80143de:	429a      	cmp	r2, r3
 80143e0:	d903      	bls.n	80143ea <vTaskPriorityDisinheritAfterTimeout+0xd6>
 80143e2:	69bb      	ldr	r3, [r7, #24]
 80143e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80143e6:	4a0c      	ldr	r2, [pc, #48]	; (8014418 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80143e8:	6013      	str	r3, [r2, #0]
 80143ea:	69bb      	ldr	r3, [r7, #24]
 80143ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80143ee:	4613      	mov	r3, r2
 80143f0:	009b      	lsls	r3, r3, #2
 80143f2:	4413      	add	r3, r2
 80143f4:	009b      	lsls	r3, r3, #2
 80143f6:	4a07      	ldr	r2, [pc, #28]	; (8014414 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80143f8:	441a      	add	r2, r3
 80143fa:	69bb      	ldr	r3, [r7, #24]
 80143fc:	3304      	adds	r3, #4
 80143fe:	4619      	mov	r1, r3
 8014400:	4610      	mov	r0, r2
 8014402:	f7fd ffd4 	bl	80123ae <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8014406:	bf00      	nop
 8014408:	3720      	adds	r7, #32
 801440a:	46bd      	mov	sp, r7
 801440c:	bd80      	pop	{r7, pc}
 801440e:	bf00      	nop
 8014410:	2000098c 	.word	0x2000098c
 8014414:	20000990 	.word	0x20000990
 8014418:	20000e68 	.word	0x20000e68

0801441c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 801441c:	b480      	push	{r7}
 801441e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8014420:	4b07      	ldr	r3, [pc, #28]	; (8014440 <pvTaskIncrementMutexHeldCount+0x24>)
 8014422:	681b      	ldr	r3, [r3, #0]
 8014424:	2b00      	cmp	r3, #0
 8014426:	d004      	beq.n	8014432 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8014428:	4b05      	ldr	r3, [pc, #20]	; (8014440 <pvTaskIncrementMutexHeldCount+0x24>)
 801442a:	681b      	ldr	r3, [r3, #0]
 801442c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801442e:	3201      	adds	r2, #1
 8014430:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8014432:	4b03      	ldr	r3, [pc, #12]	; (8014440 <pvTaskIncrementMutexHeldCount+0x24>)
 8014434:	681b      	ldr	r3, [r3, #0]
	}
 8014436:	4618      	mov	r0, r3
 8014438:	46bd      	mov	sp, r7
 801443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801443e:	4770      	bx	lr
 8014440:	2000098c 	.word	0x2000098c

08014444 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8014444:	b580      	push	{r7, lr}
 8014446:	b084      	sub	sp, #16
 8014448:	af00      	add	r7, sp, #0
 801444a:	6078      	str	r0, [r7, #4]
 801444c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801444e:	4b21      	ldr	r3, [pc, #132]	; (80144d4 <prvAddCurrentTaskToDelayedList+0x90>)
 8014450:	681b      	ldr	r3, [r3, #0]
 8014452:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014454:	4b20      	ldr	r3, [pc, #128]	; (80144d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8014456:	681b      	ldr	r3, [r3, #0]
 8014458:	3304      	adds	r3, #4
 801445a:	4618      	mov	r0, r3
 801445c:	f7fe f804 	bl	8012468 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8014460:	687b      	ldr	r3, [r7, #4]
 8014462:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014466:	d10a      	bne.n	801447e <prvAddCurrentTaskToDelayedList+0x3a>
 8014468:	683b      	ldr	r3, [r7, #0]
 801446a:	2b00      	cmp	r3, #0
 801446c:	d007      	beq.n	801447e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801446e:	4b1a      	ldr	r3, [pc, #104]	; (80144d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8014470:	681b      	ldr	r3, [r3, #0]
 8014472:	3304      	adds	r3, #4
 8014474:	4619      	mov	r1, r3
 8014476:	4819      	ldr	r0, [pc, #100]	; (80144dc <prvAddCurrentTaskToDelayedList+0x98>)
 8014478:	f7fd ff99 	bl	80123ae <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801447c:	e026      	b.n	80144cc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801447e:	68fa      	ldr	r2, [r7, #12]
 8014480:	687b      	ldr	r3, [r7, #4]
 8014482:	4413      	add	r3, r2
 8014484:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8014486:	4b14      	ldr	r3, [pc, #80]	; (80144d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8014488:	681b      	ldr	r3, [r3, #0]
 801448a:	68ba      	ldr	r2, [r7, #8]
 801448c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801448e:	68ba      	ldr	r2, [r7, #8]
 8014490:	68fb      	ldr	r3, [r7, #12]
 8014492:	429a      	cmp	r2, r3
 8014494:	d209      	bcs.n	80144aa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014496:	4b12      	ldr	r3, [pc, #72]	; (80144e0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8014498:	681a      	ldr	r2, [r3, #0]
 801449a:	4b0f      	ldr	r3, [pc, #60]	; (80144d8 <prvAddCurrentTaskToDelayedList+0x94>)
 801449c:	681b      	ldr	r3, [r3, #0]
 801449e:	3304      	adds	r3, #4
 80144a0:	4619      	mov	r1, r3
 80144a2:	4610      	mov	r0, r2
 80144a4:	f7fd ffa7 	bl	80123f6 <vListInsert>
}
 80144a8:	e010      	b.n	80144cc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80144aa:	4b0e      	ldr	r3, [pc, #56]	; (80144e4 <prvAddCurrentTaskToDelayedList+0xa0>)
 80144ac:	681a      	ldr	r2, [r3, #0]
 80144ae:	4b0a      	ldr	r3, [pc, #40]	; (80144d8 <prvAddCurrentTaskToDelayedList+0x94>)
 80144b0:	681b      	ldr	r3, [r3, #0]
 80144b2:	3304      	adds	r3, #4
 80144b4:	4619      	mov	r1, r3
 80144b6:	4610      	mov	r0, r2
 80144b8:	f7fd ff9d 	bl	80123f6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80144bc:	4b0a      	ldr	r3, [pc, #40]	; (80144e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80144be:	681b      	ldr	r3, [r3, #0]
 80144c0:	68ba      	ldr	r2, [r7, #8]
 80144c2:	429a      	cmp	r2, r3
 80144c4:	d202      	bcs.n	80144cc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80144c6:	4a08      	ldr	r2, [pc, #32]	; (80144e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80144c8:	68bb      	ldr	r3, [r7, #8]
 80144ca:	6013      	str	r3, [r2, #0]
}
 80144cc:	bf00      	nop
 80144ce:	3710      	adds	r7, #16
 80144d0:	46bd      	mov	sp, r7
 80144d2:	bd80      	pop	{r7, pc}
 80144d4:	20000e64 	.word	0x20000e64
 80144d8:	2000098c 	.word	0x2000098c
 80144dc:	20000e4c 	.word	0x20000e4c
 80144e0:	20000e1c 	.word	0x20000e1c
 80144e4:	20000e18 	.word	0x20000e18
 80144e8:	20000e80 	.word	0x20000e80

080144ec <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80144ec:	b580      	push	{r7, lr}
 80144ee:	b08a      	sub	sp, #40	; 0x28
 80144f0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80144f2:	2300      	movs	r3, #0
 80144f4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80144f6:	f000 fb0d 	bl	8014b14 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80144fa:	4b1d      	ldr	r3, [pc, #116]	; (8014570 <xTimerCreateTimerTask+0x84>)
 80144fc:	681b      	ldr	r3, [r3, #0]
 80144fe:	2b00      	cmp	r3, #0
 8014500:	d021      	beq.n	8014546 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8014502:	2300      	movs	r3, #0
 8014504:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8014506:	2300      	movs	r3, #0
 8014508:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801450a:	1d3a      	adds	r2, r7, #4
 801450c:	f107 0108 	add.w	r1, r7, #8
 8014510:	f107 030c 	add.w	r3, r7, #12
 8014514:	4618      	mov	r0, r3
 8014516:	f7fd ff03 	bl	8012320 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801451a:	6879      	ldr	r1, [r7, #4]
 801451c:	68bb      	ldr	r3, [r7, #8]
 801451e:	68fa      	ldr	r2, [r7, #12]
 8014520:	9202      	str	r2, [sp, #8]
 8014522:	9301      	str	r3, [sp, #4]
 8014524:	2302      	movs	r3, #2
 8014526:	9300      	str	r3, [sp, #0]
 8014528:	2300      	movs	r3, #0
 801452a:	460a      	mov	r2, r1
 801452c:	4911      	ldr	r1, [pc, #68]	; (8014574 <xTimerCreateTimerTask+0x88>)
 801452e:	4812      	ldr	r0, [pc, #72]	; (8014578 <xTimerCreateTimerTask+0x8c>)
 8014530:	f7fe fff6 	bl	8013520 <xTaskCreateStatic>
 8014534:	4602      	mov	r2, r0
 8014536:	4b11      	ldr	r3, [pc, #68]	; (801457c <xTimerCreateTimerTask+0x90>)
 8014538:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801453a:	4b10      	ldr	r3, [pc, #64]	; (801457c <xTimerCreateTimerTask+0x90>)
 801453c:	681b      	ldr	r3, [r3, #0]
 801453e:	2b00      	cmp	r3, #0
 8014540:	d001      	beq.n	8014546 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8014542:	2301      	movs	r3, #1
 8014544:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8014546:	697b      	ldr	r3, [r7, #20]
 8014548:	2b00      	cmp	r3, #0
 801454a:	d10b      	bne.n	8014564 <xTimerCreateTimerTask+0x78>
 801454c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014550:	b672      	cpsid	i
 8014552:	f383 8811 	msr	BASEPRI, r3
 8014556:	f3bf 8f6f 	isb	sy
 801455a:	f3bf 8f4f 	dsb	sy
 801455e:	b662      	cpsie	i
 8014560:	613b      	str	r3, [r7, #16]
 8014562:	e7fe      	b.n	8014562 <xTimerCreateTimerTask+0x76>
	return xReturn;
 8014564:	697b      	ldr	r3, [r7, #20]
}
 8014566:	4618      	mov	r0, r3
 8014568:	3718      	adds	r7, #24
 801456a:	46bd      	mov	sp, r7
 801456c:	bd80      	pop	{r7, pc}
 801456e:	bf00      	nop
 8014570:	20000ebc 	.word	0x20000ebc
 8014574:	080160d4 	.word	0x080160d4
 8014578:	080146b9 	.word	0x080146b9
 801457c:	20000ec0 	.word	0x20000ec0

08014580 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8014580:	b580      	push	{r7, lr}
 8014582:	b08a      	sub	sp, #40	; 0x28
 8014584:	af00      	add	r7, sp, #0
 8014586:	60f8      	str	r0, [r7, #12]
 8014588:	60b9      	str	r1, [r7, #8]
 801458a:	607a      	str	r2, [r7, #4]
 801458c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801458e:	2300      	movs	r3, #0
 8014590:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8014592:	68fb      	ldr	r3, [r7, #12]
 8014594:	2b00      	cmp	r3, #0
 8014596:	d10b      	bne.n	80145b0 <xTimerGenericCommand+0x30>
 8014598:	f04f 0350 	mov.w	r3, #80	; 0x50
 801459c:	b672      	cpsid	i
 801459e:	f383 8811 	msr	BASEPRI, r3
 80145a2:	f3bf 8f6f 	isb	sy
 80145a6:	f3bf 8f4f 	dsb	sy
 80145aa:	b662      	cpsie	i
 80145ac:	623b      	str	r3, [r7, #32]
 80145ae:	e7fe      	b.n	80145ae <xTimerGenericCommand+0x2e>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80145b0:	4b19      	ldr	r3, [pc, #100]	; (8014618 <xTimerGenericCommand+0x98>)
 80145b2:	681b      	ldr	r3, [r3, #0]
 80145b4:	2b00      	cmp	r3, #0
 80145b6:	d02a      	beq.n	801460e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80145b8:	68bb      	ldr	r3, [r7, #8]
 80145ba:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80145bc:	687b      	ldr	r3, [r7, #4]
 80145be:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80145c0:	68fb      	ldr	r3, [r7, #12]
 80145c2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80145c4:	68bb      	ldr	r3, [r7, #8]
 80145c6:	2b05      	cmp	r3, #5
 80145c8:	dc18      	bgt.n	80145fc <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80145ca:	f7ff fdad 	bl	8014128 <xTaskGetSchedulerState>
 80145ce:	4603      	mov	r3, r0
 80145d0:	2b02      	cmp	r3, #2
 80145d2:	d109      	bne.n	80145e8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80145d4:	4b10      	ldr	r3, [pc, #64]	; (8014618 <xTimerGenericCommand+0x98>)
 80145d6:	6818      	ldr	r0, [r3, #0]
 80145d8:	f107 0110 	add.w	r1, r7, #16
 80145dc:	2300      	movs	r3, #0
 80145de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80145e0:	f7fe f926 	bl	8012830 <xQueueGenericSend>
 80145e4:	6278      	str	r0, [r7, #36]	; 0x24
 80145e6:	e012      	b.n	801460e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80145e8:	4b0b      	ldr	r3, [pc, #44]	; (8014618 <xTimerGenericCommand+0x98>)
 80145ea:	6818      	ldr	r0, [r3, #0]
 80145ec:	f107 0110 	add.w	r1, r7, #16
 80145f0:	2300      	movs	r3, #0
 80145f2:	2200      	movs	r2, #0
 80145f4:	f7fe f91c 	bl	8012830 <xQueueGenericSend>
 80145f8:	6278      	str	r0, [r7, #36]	; 0x24
 80145fa:	e008      	b.n	801460e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80145fc:	4b06      	ldr	r3, [pc, #24]	; (8014618 <xTimerGenericCommand+0x98>)
 80145fe:	6818      	ldr	r0, [r3, #0]
 8014600:	f107 0110 	add.w	r1, r7, #16
 8014604:	2300      	movs	r3, #0
 8014606:	683a      	ldr	r2, [r7, #0]
 8014608:	f7fe fa14 	bl	8012a34 <xQueueGenericSendFromISR>
 801460c:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801460e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8014610:	4618      	mov	r0, r3
 8014612:	3728      	adds	r7, #40	; 0x28
 8014614:	46bd      	mov	sp, r7
 8014616:	bd80      	pop	{r7, pc}
 8014618:	20000ebc 	.word	0x20000ebc

0801461c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 801461c:	b580      	push	{r7, lr}
 801461e:	b088      	sub	sp, #32
 8014620:	af02      	add	r7, sp, #8
 8014622:	6078      	str	r0, [r7, #4]
 8014624:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014626:	4b23      	ldr	r3, [pc, #140]	; (80146b4 <prvProcessExpiredTimer+0x98>)
 8014628:	681b      	ldr	r3, [r3, #0]
 801462a:	68db      	ldr	r3, [r3, #12]
 801462c:	68db      	ldr	r3, [r3, #12]
 801462e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8014630:	697b      	ldr	r3, [r7, #20]
 8014632:	3304      	adds	r3, #4
 8014634:	4618      	mov	r0, r3
 8014636:	f7fd ff17 	bl	8012468 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801463a:	697b      	ldr	r3, [r7, #20]
 801463c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014640:	f003 0304 	and.w	r3, r3, #4
 8014644:	2b00      	cmp	r3, #0
 8014646:	d023      	beq.n	8014690 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8014648:	697b      	ldr	r3, [r7, #20]
 801464a:	699a      	ldr	r2, [r3, #24]
 801464c:	687b      	ldr	r3, [r7, #4]
 801464e:	18d1      	adds	r1, r2, r3
 8014650:	687b      	ldr	r3, [r7, #4]
 8014652:	683a      	ldr	r2, [r7, #0]
 8014654:	6978      	ldr	r0, [r7, #20]
 8014656:	f000 f8d3 	bl	8014800 <prvInsertTimerInActiveList>
 801465a:	4603      	mov	r3, r0
 801465c:	2b00      	cmp	r3, #0
 801465e:	d020      	beq.n	80146a2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8014660:	2300      	movs	r3, #0
 8014662:	9300      	str	r3, [sp, #0]
 8014664:	2300      	movs	r3, #0
 8014666:	687a      	ldr	r2, [r7, #4]
 8014668:	2100      	movs	r1, #0
 801466a:	6978      	ldr	r0, [r7, #20]
 801466c:	f7ff ff88 	bl	8014580 <xTimerGenericCommand>
 8014670:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8014672:	693b      	ldr	r3, [r7, #16]
 8014674:	2b00      	cmp	r3, #0
 8014676:	d114      	bne.n	80146a2 <prvProcessExpiredTimer+0x86>
 8014678:	f04f 0350 	mov.w	r3, #80	; 0x50
 801467c:	b672      	cpsid	i
 801467e:	f383 8811 	msr	BASEPRI, r3
 8014682:	f3bf 8f6f 	isb	sy
 8014686:	f3bf 8f4f 	dsb	sy
 801468a:	b662      	cpsie	i
 801468c:	60fb      	str	r3, [r7, #12]
 801468e:	e7fe      	b.n	801468e <prvProcessExpiredTimer+0x72>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8014690:	697b      	ldr	r3, [r7, #20]
 8014692:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014696:	f023 0301 	bic.w	r3, r3, #1
 801469a:	b2da      	uxtb	r2, r3
 801469c:	697b      	ldr	r3, [r7, #20]
 801469e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80146a2:	697b      	ldr	r3, [r7, #20]
 80146a4:	6a1b      	ldr	r3, [r3, #32]
 80146a6:	6978      	ldr	r0, [r7, #20]
 80146a8:	4798      	blx	r3
}
 80146aa:	bf00      	nop
 80146ac:	3718      	adds	r7, #24
 80146ae:	46bd      	mov	sp, r7
 80146b0:	bd80      	pop	{r7, pc}
 80146b2:	bf00      	nop
 80146b4:	20000eb4 	.word	0x20000eb4

080146b8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80146b8:	b580      	push	{r7, lr}
 80146ba:	b084      	sub	sp, #16
 80146bc:	af00      	add	r7, sp, #0
 80146be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80146c0:	f107 0308 	add.w	r3, r7, #8
 80146c4:	4618      	mov	r0, r3
 80146c6:	f000 f857 	bl	8014778 <prvGetNextExpireTime>
 80146ca:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80146cc:	68bb      	ldr	r3, [r7, #8]
 80146ce:	4619      	mov	r1, r3
 80146d0:	68f8      	ldr	r0, [r7, #12]
 80146d2:	f000 f803 	bl	80146dc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80146d6:	f000 f8d5 	bl	8014884 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80146da:	e7f1      	b.n	80146c0 <prvTimerTask+0x8>

080146dc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80146dc:	b580      	push	{r7, lr}
 80146de:	b084      	sub	sp, #16
 80146e0:	af00      	add	r7, sp, #0
 80146e2:	6078      	str	r0, [r7, #4]
 80146e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80146e6:	f7ff f929 	bl	801393c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80146ea:	f107 0308 	add.w	r3, r7, #8
 80146ee:	4618      	mov	r0, r3
 80146f0:	f000 f866 	bl	80147c0 <prvSampleTimeNow>
 80146f4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80146f6:	68bb      	ldr	r3, [r7, #8]
 80146f8:	2b00      	cmp	r3, #0
 80146fa:	d130      	bne.n	801475e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80146fc:	683b      	ldr	r3, [r7, #0]
 80146fe:	2b00      	cmp	r3, #0
 8014700:	d10a      	bne.n	8014718 <prvProcessTimerOrBlockTask+0x3c>
 8014702:	687a      	ldr	r2, [r7, #4]
 8014704:	68fb      	ldr	r3, [r7, #12]
 8014706:	429a      	cmp	r2, r3
 8014708:	d806      	bhi.n	8014718 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801470a:	f7ff f925 	bl	8013958 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801470e:	68f9      	ldr	r1, [r7, #12]
 8014710:	6878      	ldr	r0, [r7, #4]
 8014712:	f7ff ff83 	bl	801461c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8014716:	e024      	b.n	8014762 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8014718:	683b      	ldr	r3, [r7, #0]
 801471a:	2b00      	cmp	r3, #0
 801471c:	d008      	beq.n	8014730 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801471e:	4b13      	ldr	r3, [pc, #76]	; (801476c <prvProcessTimerOrBlockTask+0x90>)
 8014720:	681b      	ldr	r3, [r3, #0]
 8014722:	681b      	ldr	r3, [r3, #0]
 8014724:	2b00      	cmp	r3, #0
 8014726:	d101      	bne.n	801472c <prvProcessTimerOrBlockTask+0x50>
 8014728:	2301      	movs	r3, #1
 801472a:	e000      	b.n	801472e <prvProcessTimerOrBlockTask+0x52>
 801472c:	2300      	movs	r3, #0
 801472e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8014730:	4b0f      	ldr	r3, [pc, #60]	; (8014770 <prvProcessTimerOrBlockTask+0x94>)
 8014732:	6818      	ldr	r0, [r3, #0]
 8014734:	687a      	ldr	r2, [r7, #4]
 8014736:	68fb      	ldr	r3, [r7, #12]
 8014738:	1ad3      	subs	r3, r2, r3
 801473a:	683a      	ldr	r2, [r7, #0]
 801473c:	4619      	mov	r1, r3
 801473e:	f7fe febb 	bl	80134b8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8014742:	f7ff f909 	bl	8013958 <xTaskResumeAll>
 8014746:	4603      	mov	r3, r0
 8014748:	2b00      	cmp	r3, #0
 801474a:	d10a      	bne.n	8014762 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 801474c:	4b09      	ldr	r3, [pc, #36]	; (8014774 <prvProcessTimerOrBlockTask+0x98>)
 801474e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014752:	601a      	str	r2, [r3, #0]
 8014754:	f3bf 8f4f 	dsb	sy
 8014758:	f3bf 8f6f 	isb	sy
}
 801475c:	e001      	b.n	8014762 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801475e:	f7ff f8fb 	bl	8013958 <xTaskResumeAll>
}
 8014762:	bf00      	nop
 8014764:	3710      	adds	r7, #16
 8014766:	46bd      	mov	sp, r7
 8014768:	bd80      	pop	{r7, pc}
 801476a:	bf00      	nop
 801476c:	20000eb8 	.word	0x20000eb8
 8014770:	20000ebc 	.word	0x20000ebc
 8014774:	e000ed04 	.word	0xe000ed04

08014778 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8014778:	b480      	push	{r7}
 801477a:	b085      	sub	sp, #20
 801477c:	af00      	add	r7, sp, #0
 801477e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8014780:	4b0e      	ldr	r3, [pc, #56]	; (80147bc <prvGetNextExpireTime+0x44>)
 8014782:	681b      	ldr	r3, [r3, #0]
 8014784:	681b      	ldr	r3, [r3, #0]
 8014786:	2b00      	cmp	r3, #0
 8014788:	d101      	bne.n	801478e <prvGetNextExpireTime+0x16>
 801478a:	2201      	movs	r2, #1
 801478c:	e000      	b.n	8014790 <prvGetNextExpireTime+0x18>
 801478e:	2200      	movs	r2, #0
 8014790:	687b      	ldr	r3, [r7, #4]
 8014792:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8014794:	687b      	ldr	r3, [r7, #4]
 8014796:	681b      	ldr	r3, [r3, #0]
 8014798:	2b00      	cmp	r3, #0
 801479a:	d105      	bne.n	80147a8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801479c:	4b07      	ldr	r3, [pc, #28]	; (80147bc <prvGetNextExpireTime+0x44>)
 801479e:	681b      	ldr	r3, [r3, #0]
 80147a0:	68db      	ldr	r3, [r3, #12]
 80147a2:	681b      	ldr	r3, [r3, #0]
 80147a4:	60fb      	str	r3, [r7, #12]
 80147a6:	e001      	b.n	80147ac <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80147a8:	2300      	movs	r3, #0
 80147aa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80147ac:	68fb      	ldr	r3, [r7, #12]
}
 80147ae:	4618      	mov	r0, r3
 80147b0:	3714      	adds	r7, #20
 80147b2:	46bd      	mov	sp, r7
 80147b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147b8:	4770      	bx	lr
 80147ba:	bf00      	nop
 80147bc:	20000eb4 	.word	0x20000eb4

080147c0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80147c0:	b580      	push	{r7, lr}
 80147c2:	b084      	sub	sp, #16
 80147c4:	af00      	add	r7, sp, #0
 80147c6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80147c8:	f7ff f964 	bl	8013a94 <xTaskGetTickCount>
 80147cc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80147ce:	4b0b      	ldr	r3, [pc, #44]	; (80147fc <prvSampleTimeNow+0x3c>)
 80147d0:	681b      	ldr	r3, [r3, #0]
 80147d2:	68fa      	ldr	r2, [r7, #12]
 80147d4:	429a      	cmp	r2, r3
 80147d6:	d205      	bcs.n	80147e4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80147d8:	f000 f936 	bl	8014a48 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80147dc:	687b      	ldr	r3, [r7, #4]
 80147de:	2201      	movs	r2, #1
 80147e0:	601a      	str	r2, [r3, #0]
 80147e2:	e002      	b.n	80147ea <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80147e4:	687b      	ldr	r3, [r7, #4]
 80147e6:	2200      	movs	r2, #0
 80147e8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80147ea:	4a04      	ldr	r2, [pc, #16]	; (80147fc <prvSampleTimeNow+0x3c>)
 80147ec:	68fb      	ldr	r3, [r7, #12]
 80147ee:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80147f0:	68fb      	ldr	r3, [r7, #12]
}
 80147f2:	4618      	mov	r0, r3
 80147f4:	3710      	adds	r7, #16
 80147f6:	46bd      	mov	sp, r7
 80147f8:	bd80      	pop	{r7, pc}
 80147fa:	bf00      	nop
 80147fc:	20000ec4 	.word	0x20000ec4

08014800 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8014800:	b580      	push	{r7, lr}
 8014802:	b086      	sub	sp, #24
 8014804:	af00      	add	r7, sp, #0
 8014806:	60f8      	str	r0, [r7, #12]
 8014808:	60b9      	str	r1, [r7, #8]
 801480a:	607a      	str	r2, [r7, #4]
 801480c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801480e:	2300      	movs	r3, #0
 8014810:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8014812:	68fb      	ldr	r3, [r7, #12]
 8014814:	68ba      	ldr	r2, [r7, #8]
 8014816:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8014818:	68fb      	ldr	r3, [r7, #12]
 801481a:	68fa      	ldr	r2, [r7, #12]
 801481c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801481e:	68ba      	ldr	r2, [r7, #8]
 8014820:	687b      	ldr	r3, [r7, #4]
 8014822:	429a      	cmp	r2, r3
 8014824:	d812      	bhi.n	801484c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014826:	687a      	ldr	r2, [r7, #4]
 8014828:	683b      	ldr	r3, [r7, #0]
 801482a:	1ad2      	subs	r2, r2, r3
 801482c:	68fb      	ldr	r3, [r7, #12]
 801482e:	699b      	ldr	r3, [r3, #24]
 8014830:	429a      	cmp	r2, r3
 8014832:	d302      	bcc.n	801483a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8014834:	2301      	movs	r3, #1
 8014836:	617b      	str	r3, [r7, #20]
 8014838:	e01b      	b.n	8014872 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801483a:	4b10      	ldr	r3, [pc, #64]	; (801487c <prvInsertTimerInActiveList+0x7c>)
 801483c:	681a      	ldr	r2, [r3, #0]
 801483e:	68fb      	ldr	r3, [r7, #12]
 8014840:	3304      	adds	r3, #4
 8014842:	4619      	mov	r1, r3
 8014844:	4610      	mov	r0, r2
 8014846:	f7fd fdd6 	bl	80123f6 <vListInsert>
 801484a:	e012      	b.n	8014872 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801484c:	687a      	ldr	r2, [r7, #4]
 801484e:	683b      	ldr	r3, [r7, #0]
 8014850:	429a      	cmp	r2, r3
 8014852:	d206      	bcs.n	8014862 <prvInsertTimerInActiveList+0x62>
 8014854:	68ba      	ldr	r2, [r7, #8]
 8014856:	683b      	ldr	r3, [r7, #0]
 8014858:	429a      	cmp	r2, r3
 801485a:	d302      	bcc.n	8014862 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 801485c:	2301      	movs	r3, #1
 801485e:	617b      	str	r3, [r7, #20]
 8014860:	e007      	b.n	8014872 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8014862:	4b07      	ldr	r3, [pc, #28]	; (8014880 <prvInsertTimerInActiveList+0x80>)
 8014864:	681a      	ldr	r2, [r3, #0]
 8014866:	68fb      	ldr	r3, [r7, #12]
 8014868:	3304      	adds	r3, #4
 801486a:	4619      	mov	r1, r3
 801486c:	4610      	mov	r0, r2
 801486e:	f7fd fdc2 	bl	80123f6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8014872:	697b      	ldr	r3, [r7, #20]
}
 8014874:	4618      	mov	r0, r3
 8014876:	3718      	adds	r7, #24
 8014878:	46bd      	mov	sp, r7
 801487a:	bd80      	pop	{r7, pc}
 801487c:	20000eb8 	.word	0x20000eb8
 8014880:	20000eb4 	.word	0x20000eb4

08014884 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8014884:	b580      	push	{r7, lr}
 8014886:	b08e      	sub	sp, #56	; 0x38
 8014888:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801488a:	e0cc      	b.n	8014a26 <prvProcessReceivedCommands+0x1a2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801488c:	687b      	ldr	r3, [r7, #4]
 801488e:	2b00      	cmp	r3, #0
 8014890:	da19      	bge.n	80148c6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8014892:	1d3b      	adds	r3, r7, #4
 8014894:	3304      	adds	r3, #4
 8014896:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8014898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801489a:	2b00      	cmp	r3, #0
 801489c:	d10b      	bne.n	80148b6 <prvProcessReceivedCommands+0x32>
 801489e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80148a2:	b672      	cpsid	i
 80148a4:	f383 8811 	msr	BASEPRI, r3
 80148a8:	f3bf 8f6f 	isb	sy
 80148ac:	f3bf 8f4f 	dsb	sy
 80148b0:	b662      	cpsie	i
 80148b2:	61fb      	str	r3, [r7, #28]
 80148b4:	e7fe      	b.n	80148b4 <prvProcessReceivedCommands+0x30>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80148b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80148b8:	681b      	ldr	r3, [r3, #0]
 80148ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80148bc:	6850      	ldr	r0, [r2, #4]
 80148be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80148c0:	6892      	ldr	r2, [r2, #8]
 80148c2:	4611      	mov	r1, r2
 80148c4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80148c6:	687b      	ldr	r3, [r7, #4]
 80148c8:	2b00      	cmp	r3, #0
 80148ca:	f2c0 80ab 	blt.w	8014a24 <prvProcessReceivedCommands+0x1a0>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80148ce:	68fb      	ldr	r3, [r7, #12]
 80148d0:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80148d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148d4:	695b      	ldr	r3, [r3, #20]
 80148d6:	2b00      	cmp	r3, #0
 80148d8:	d004      	beq.n	80148e4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80148da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148dc:	3304      	adds	r3, #4
 80148de:	4618      	mov	r0, r3
 80148e0:	f7fd fdc2 	bl	8012468 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80148e4:	463b      	mov	r3, r7
 80148e6:	4618      	mov	r0, r3
 80148e8:	f7ff ff6a 	bl	80147c0 <prvSampleTimeNow>
 80148ec:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80148ee:	687b      	ldr	r3, [r7, #4]
 80148f0:	2b09      	cmp	r3, #9
 80148f2:	f200 8098 	bhi.w	8014a26 <prvProcessReceivedCommands+0x1a2>
 80148f6:	a201      	add	r2, pc, #4	; (adr r2, 80148fc <prvProcessReceivedCommands+0x78>)
 80148f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80148fc:	08014925 	.word	0x08014925
 8014900:	08014925 	.word	0x08014925
 8014904:	08014925 	.word	0x08014925
 8014908:	0801499b 	.word	0x0801499b
 801490c:	080149af 	.word	0x080149af
 8014910:	080149fb 	.word	0x080149fb
 8014914:	08014925 	.word	0x08014925
 8014918:	08014925 	.word	0x08014925
 801491c:	0801499b 	.word	0x0801499b
 8014920:	080149af 	.word	0x080149af
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8014924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014926:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801492a:	f043 0301 	orr.w	r3, r3, #1
 801492e:	b2da      	uxtb	r2, r3
 8014930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014932:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8014936:	68ba      	ldr	r2, [r7, #8]
 8014938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801493a:	699b      	ldr	r3, [r3, #24]
 801493c:	18d1      	adds	r1, r2, r3
 801493e:	68bb      	ldr	r3, [r7, #8]
 8014940:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014942:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014944:	f7ff ff5c 	bl	8014800 <prvInsertTimerInActiveList>
 8014948:	4603      	mov	r3, r0
 801494a:	2b00      	cmp	r3, #0
 801494c:	d06b      	beq.n	8014a26 <prvProcessReceivedCommands+0x1a2>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801494e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014950:	6a1b      	ldr	r3, [r3, #32]
 8014952:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014954:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8014956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014958:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801495c:	f003 0304 	and.w	r3, r3, #4
 8014960:	2b00      	cmp	r3, #0
 8014962:	d060      	beq.n	8014a26 <prvProcessReceivedCommands+0x1a2>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8014964:	68ba      	ldr	r2, [r7, #8]
 8014966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014968:	699b      	ldr	r3, [r3, #24]
 801496a:	441a      	add	r2, r3
 801496c:	2300      	movs	r3, #0
 801496e:	9300      	str	r3, [sp, #0]
 8014970:	2300      	movs	r3, #0
 8014972:	2100      	movs	r1, #0
 8014974:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014976:	f7ff fe03 	bl	8014580 <xTimerGenericCommand>
 801497a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 801497c:	6a3b      	ldr	r3, [r7, #32]
 801497e:	2b00      	cmp	r3, #0
 8014980:	d151      	bne.n	8014a26 <prvProcessReceivedCommands+0x1a2>
 8014982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014986:	b672      	cpsid	i
 8014988:	f383 8811 	msr	BASEPRI, r3
 801498c:	f3bf 8f6f 	isb	sy
 8014990:	f3bf 8f4f 	dsb	sy
 8014994:	b662      	cpsie	i
 8014996:	61bb      	str	r3, [r7, #24]
 8014998:	e7fe      	b.n	8014998 <prvProcessReceivedCommands+0x114>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801499a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801499c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80149a0:	f023 0301 	bic.w	r3, r3, #1
 80149a4:	b2da      	uxtb	r2, r3
 80149a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149a8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80149ac:	e03b      	b.n	8014a26 <prvProcessReceivedCommands+0x1a2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80149ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80149b4:	f043 0301 	orr.w	r3, r3, #1
 80149b8:	b2da      	uxtb	r2, r3
 80149ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149bc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80149c0:	68ba      	ldr	r2, [r7, #8]
 80149c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149c4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80149c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149c8:	699b      	ldr	r3, [r3, #24]
 80149ca:	2b00      	cmp	r3, #0
 80149cc:	d10b      	bne.n	80149e6 <prvProcessReceivedCommands+0x162>
 80149ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80149d2:	b672      	cpsid	i
 80149d4:	f383 8811 	msr	BASEPRI, r3
 80149d8:	f3bf 8f6f 	isb	sy
 80149dc:	f3bf 8f4f 	dsb	sy
 80149e0:	b662      	cpsie	i
 80149e2:	617b      	str	r3, [r7, #20]
 80149e4:	e7fe      	b.n	80149e4 <prvProcessReceivedCommands+0x160>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80149e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149e8:	699a      	ldr	r2, [r3, #24]
 80149ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149ec:	18d1      	adds	r1, r2, r3
 80149ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80149f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80149f4:	f7ff ff04 	bl	8014800 <prvInsertTimerInActiveList>
					break;
 80149f8:	e015      	b.n	8014a26 <prvProcessReceivedCommands+0x1a2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80149fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014a00:	f003 0302 	and.w	r3, r3, #2
 8014a04:	2b00      	cmp	r3, #0
 8014a06:	d103      	bne.n	8014a10 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8014a08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014a0a:	f000 fbb7 	bl	801517c <vPortFree>
 8014a0e:	e00a      	b.n	8014a26 <prvProcessReceivedCommands+0x1a2>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8014a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a12:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014a16:	f023 0301 	bic.w	r3, r3, #1
 8014a1a:	b2da      	uxtb	r2, r3
 8014a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a1e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8014a22:	e000      	b.n	8014a26 <prvProcessReceivedCommands+0x1a2>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8014a24:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8014a26:	4b07      	ldr	r3, [pc, #28]	; (8014a44 <prvProcessReceivedCommands+0x1c0>)
 8014a28:	681b      	ldr	r3, [r3, #0]
 8014a2a:	1d39      	adds	r1, r7, #4
 8014a2c:	2200      	movs	r2, #0
 8014a2e:	4618      	mov	r0, r3
 8014a30:	f7fe f92e 	bl	8012c90 <xQueueReceive>
 8014a34:	4603      	mov	r3, r0
 8014a36:	2b00      	cmp	r3, #0
 8014a38:	f47f af28 	bne.w	801488c <prvProcessReceivedCommands+0x8>
	}
}
 8014a3c:	bf00      	nop
 8014a3e:	3730      	adds	r7, #48	; 0x30
 8014a40:	46bd      	mov	sp, r7
 8014a42:	bd80      	pop	{r7, pc}
 8014a44:	20000ebc 	.word	0x20000ebc

08014a48 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8014a48:	b580      	push	{r7, lr}
 8014a4a:	b088      	sub	sp, #32
 8014a4c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8014a4e:	e049      	b.n	8014ae4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8014a50:	4b2e      	ldr	r3, [pc, #184]	; (8014b0c <prvSwitchTimerLists+0xc4>)
 8014a52:	681b      	ldr	r3, [r3, #0]
 8014a54:	68db      	ldr	r3, [r3, #12]
 8014a56:	681b      	ldr	r3, [r3, #0]
 8014a58:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014a5a:	4b2c      	ldr	r3, [pc, #176]	; (8014b0c <prvSwitchTimerLists+0xc4>)
 8014a5c:	681b      	ldr	r3, [r3, #0]
 8014a5e:	68db      	ldr	r3, [r3, #12]
 8014a60:	68db      	ldr	r3, [r3, #12]
 8014a62:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8014a64:	68fb      	ldr	r3, [r7, #12]
 8014a66:	3304      	adds	r3, #4
 8014a68:	4618      	mov	r0, r3
 8014a6a:	f7fd fcfd 	bl	8012468 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8014a6e:	68fb      	ldr	r3, [r7, #12]
 8014a70:	6a1b      	ldr	r3, [r3, #32]
 8014a72:	68f8      	ldr	r0, [r7, #12]
 8014a74:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8014a76:	68fb      	ldr	r3, [r7, #12]
 8014a78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014a7c:	f003 0304 	and.w	r3, r3, #4
 8014a80:	2b00      	cmp	r3, #0
 8014a82:	d02f      	beq.n	8014ae4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8014a84:	68fb      	ldr	r3, [r7, #12]
 8014a86:	699b      	ldr	r3, [r3, #24]
 8014a88:	693a      	ldr	r2, [r7, #16]
 8014a8a:	4413      	add	r3, r2
 8014a8c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8014a8e:	68ba      	ldr	r2, [r7, #8]
 8014a90:	693b      	ldr	r3, [r7, #16]
 8014a92:	429a      	cmp	r2, r3
 8014a94:	d90e      	bls.n	8014ab4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8014a96:	68fb      	ldr	r3, [r7, #12]
 8014a98:	68ba      	ldr	r2, [r7, #8]
 8014a9a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8014a9c:	68fb      	ldr	r3, [r7, #12]
 8014a9e:	68fa      	ldr	r2, [r7, #12]
 8014aa0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8014aa2:	4b1a      	ldr	r3, [pc, #104]	; (8014b0c <prvSwitchTimerLists+0xc4>)
 8014aa4:	681a      	ldr	r2, [r3, #0]
 8014aa6:	68fb      	ldr	r3, [r7, #12]
 8014aa8:	3304      	adds	r3, #4
 8014aaa:	4619      	mov	r1, r3
 8014aac:	4610      	mov	r0, r2
 8014aae:	f7fd fca2 	bl	80123f6 <vListInsert>
 8014ab2:	e017      	b.n	8014ae4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8014ab4:	2300      	movs	r3, #0
 8014ab6:	9300      	str	r3, [sp, #0]
 8014ab8:	2300      	movs	r3, #0
 8014aba:	693a      	ldr	r2, [r7, #16]
 8014abc:	2100      	movs	r1, #0
 8014abe:	68f8      	ldr	r0, [r7, #12]
 8014ac0:	f7ff fd5e 	bl	8014580 <xTimerGenericCommand>
 8014ac4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8014ac6:	687b      	ldr	r3, [r7, #4]
 8014ac8:	2b00      	cmp	r3, #0
 8014aca:	d10b      	bne.n	8014ae4 <prvSwitchTimerLists+0x9c>
 8014acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ad0:	b672      	cpsid	i
 8014ad2:	f383 8811 	msr	BASEPRI, r3
 8014ad6:	f3bf 8f6f 	isb	sy
 8014ada:	f3bf 8f4f 	dsb	sy
 8014ade:	b662      	cpsie	i
 8014ae0:	603b      	str	r3, [r7, #0]
 8014ae2:	e7fe      	b.n	8014ae2 <prvSwitchTimerLists+0x9a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8014ae4:	4b09      	ldr	r3, [pc, #36]	; (8014b0c <prvSwitchTimerLists+0xc4>)
 8014ae6:	681b      	ldr	r3, [r3, #0]
 8014ae8:	681b      	ldr	r3, [r3, #0]
 8014aea:	2b00      	cmp	r3, #0
 8014aec:	d1b0      	bne.n	8014a50 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8014aee:	4b07      	ldr	r3, [pc, #28]	; (8014b0c <prvSwitchTimerLists+0xc4>)
 8014af0:	681b      	ldr	r3, [r3, #0]
 8014af2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8014af4:	4b06      	ldr	r3, [pc, #24]	; (8014b10 <prvSwitchTimerLists+0xc8>)
 8014af6:	681b      	ldr	r3, [r3, #0]
 8014af8:	4a04      	ldr	r2, [pc, #16]	; (8014b0c <prvSwitchTimerLists+0xc4>)
 8014afa:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8014afc:	4a04      	ldr	r2, [pc, #16]	; (8014b10 <prvSwitchTimerLists+0xc8>)
 8014afe:	697b      	ldr	r3, [r7, #20]
 8014b00:	6013      	str	r3, [r2, #0]
}
 8014b02:	bf00      	nop
 8014b04:	3718      	adds	r7, #24
 8014b06:	46bd      	mov	sp, r7
 8014b08:	bd80      	pop	{r7, pc}
 8014b0a:	bf00      	nop
 8014b0c:	20000eb4 	.word	0x20000eb4
 8014b10:	20000eb8 	.word	0x20000eb8

08014b14 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8014b14:	b580      	push	{r7, lr}
 8014b16:	b082      	sub	sp, #8
 8014b18:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8014b1a:	f000 f945 	bl	8014da8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8014b1e:	4b15      	ldr	r3, [pc, #84]	; (8014b74 <prvCheckForValidListAndQueue+0x60>)
 8014b20:	681b      	ldr	r3, [r3, #0]
 8014b22:	2b00      	cmp	r3, #0
 8014b24:	d120      	bne.n	8014b68 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8014b26:	4814      	ldr	r0, [pc, #80]	; (8014b78 <prvCheckForValidListAndQueue+0x64>)
 8014b28:	f7fd fc14 	bl	8012354 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8014b2c:	4813      	ldr	r0, [pc, #76]	; (8014b7c <prvCheckForValidListAndQueue+0x68>)
 8014b2e:	f7fd fc11 	bl	8012354 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8014b32:	4b13      	ldr	r3, [pc, #76]	; (8014b80 <prvCheckForValidListAndQueue+0x6c>)
 8014b34:	4a10      	ldr	r2, [pc, #64]	; (8014b78 <prvCheckForValidListAndQueue+0x64>)
 8014b36:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8014b38:	4b12      	ldr	r3, [pc, #72]	; (8014b84 <prvCheckForValidListAndQueue+0x70>)
 8014b3a:	4a10      	ldr	r2, [pc, #64]	; (8014b7c <prvCheckForValidListAndQueue+0x68>)
 8014b3c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8014b3e:	2300      	movs	r3, #0
 8014b40:	9300      	str	r3, [sp, #0]
 8014b42:	4b11      	ldr	r3, [pc, #68]	; (8014b88 <prvCheckForValidListAndQueue+0x74>)
 8014b44:	4a11      	ldr	r2, [pc, #68]	; (8014b8c <prvCheckForValidListAndQueue+0x78>)
 8014b46:	2110      	movs	r1, #16
 8014b48:	200a      	movs	r0, #10
 8014b4a:	f7fd fd21 	bl	8012590 <xQueueGenericCreateStatic>
 8014b4e:	4602      	mov	r2, r0
 8014b50:	4b08      	ldr	r3, [pc, #32]	; (8014b74 <prvCheckForValidListAndQueue+0x60>)
 8014b52:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8014b54:	4b07      	ldr	r3, [pc, #28]	; (8014b74 <prvCheckForValidListAndQueue+0x60>)
 8014b56:	681b      	ldr	r3, [r3, #0]
 8014b58:	2b00      	cmp	r3, #0
 8014b5a:	d005      	beq.n	8014b68 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8014b5c:	4b05      	ldr	r3, [pc, #20]	; (8014b74 <prvCheckForValidListAndQueue+0x60>)
 8014b5e:	681b      	ldr	r3, [r3, #0]
 8014b60:	490b      	ldr	r1, [pc, #44]	; (8014b90 <prvCheckForValidListAndQueue+0x7c>)
 8014b62:	4618      	mov	r0, r3
 8014b64:	f7fe fc56 	bl	8013414 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8014b68:	f000 f950 	bl	8014e0c <vPortExitCritical>
}
 8014b6c:	bf00      	nop
 8014b6e:	46bd      	mov	sp, r7
 8014b70:	bd80      	pop	{r7, pc}
 8014b72:	bf00      	nop
 8014b74:	20000ebc 	.word	0x20000ebc
 8014b78:	20000e8c 	.word	0x20000e8c
 8014b7c:	20000ea0 	.word	0x20000ea0
 8014b80:	20000eb4 	.word	0x20000eb4
 8014b84:	20000eb8 	.word	0x20000eb8
 8014b88:	20000f68 	.word	0x20000f68
 8014b8c:	20000ec8 	.word	0x20000ec8
 8014b90:	080160dc 	.word	0x080160dc

08014b94 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8014b94:	b480      	push	{r7}
 8014b96:	b085      	sub	sp, #20
 8014b98:	af00      	add	r7, sp, #0
 8014b9a:	60f8      	str	r0, [r7, #12]
 8014b9c:	60b9      	str	r1, [r7, #8]
 8014b9e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8014ba0:	68fb      	ldr	r3, [r7, #12]
 8014ba2:	3b04      	subs	r3, #4
 8014ba4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8014ba6:	68fb      	ldr	r3, [r7, #12]
 8014ba8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8014bac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014bae:	68fb      	ldr	r3, [r7, #12]
 8014bb0:	3b04      	subs	r3, #4
 8014bb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8014bb4:	68bb      	ldr	r3, [r7, #8]
 8014bb6:	f023 0201 	bic.w	r2, r3, #1
 8014bba:	68fb      	ldr	r3, [r7, #12]
 8014bbc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014bbe:	68fb      	ldr	r3, [r7, #12]
 8014bc0:	3b04      	subs	r3, #4
 8014bc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8014bc4:	4a0c      	ldr	r2, [pc, #48]	; (8014bf8 <pxPortInitialiseStack+0x64>)
 8014bc6:	68fb      	ldr	r3, [r7, #12]
 8014bc8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8014bca:	68fb      	ldr	r3, [r7, #12]
 8014bcc:	3b14      	subs	r3, #20
 8014bce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8014bd0:	687a      	ldr	r2, [r7, #4]
 8014bd2:	68fb      	ldr	r3, [r7, #12]
 8014bd4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8014bd6:	68fb      	ldr	r3, [r7, #12]
 8014bd8:	3b04      	subs	r3, #4
 8014bda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8014bdc:	68fb      	ldr	r3, [r7, #12]
 8014bde:	f06f 0202 	mvn.w	r2, #2
 8014be2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8014be4:	68fb      	ldr	r3, [r7, #12]
 8014be6:	3b20      	subs	r3, #32
 8014be8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8014bea:	68fb      	ldr	r3, [r7, #12]
}
 8014bec:	4618      	mov	r0, r3
 8014bee:	3714      	adds	r7, #20
 8014bf0:	46bd      	mov	sp, r7
 8014bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bf6:	4770      	bx	lr
 8014bf8:	08014bfd 	.word	0x08014bfd

08014bfc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8014bfc:	b480      	push	{r7}
 8014bfe:	b085      	sub	sp, #20
 8014c00:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8014c02:	2300      	movs	r3, #0
 8014c04:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8014c06:	4b13      	ldr	r3, [pc, #76]	; (8014c54 <prvTaskExitError+0x58>)
 8014c08:	681b      	ldr	r3, [r3, #0]
 8014c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014c0e:	d00b      	beq.n	8014c28 <prvTaskExitError+0x2c>
 8014c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c14:	b672      	cpsid	i
 8014c16:	f383 8811 	msr	BASEPRI, r3
 8014c1a:	f3bf 8f6f 	isb	sy
 8014c1e:	f3bf 8f4f 	dsb	sy
 8014c22:	b662      	cpsie	i
 8014c24:	60fb      	str	r3, [r7, #12]
 8014c26:	e7fe      	b.n	8014c26 <prvTaskExitError+0x2a>
 8014c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c2c:	b672      	cpsid	i
 8014c2e:	f383 8811 	msr	BASEPRI, r3
 8014c32:	f3bf 8f6f 	isb	sy
 8014c36:	f3bf 8f4f 	dsb	sy
 8014c3a:	b662      	cpsie	i
 8014c3c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8014c3e:	bf00      	nop
 8014c40:	687b      	ldr	r3, [r7, #4]
 8014c42:	2b00      	cmp	r3, #0
 8014c44:	d0fc      	beq.n	8014c40 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8014c46:	bf00      	nop
 8014c48:	3714      	adds	r7, #20
 8014c4a:	46bd      	mov	sp, r7
 8014c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c50:	4770      	bx	lr
 8014c52:	bf00      	nop
 8014c54:	20000104 	.word	0x20000104
	...

08014c60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8014c60:	4b07      	ldr	r3, [pc, #28]	; (8014c80 <pxCurrentTCBConst2>)
 8014c62:	6819      	ldr	r1, [r3, #0]
 8014c64:	6808      	ldr	r0, [r1, #0]
 8014c66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c6a:	f380 8809 	msr	PSP, r0
 8014c6e:	f3bf 8f6f 	isb	sy
 8014c72:	f04f 0000 	mov.w	r0, #0
 8014c76:	f380 8811 	msr	BASEPRI, r0
 8014c7a:	4770      	bx	lr
 8014c7c:	f3af 8000 	nop.w

08014c80 <pxCurrentTCBConst2>:
 8014c80:	2000098c 	.word	0x2000098c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8014c84:	bf00      	nop
 8014c86:	bf00      	nop

08014c88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8014c88:	4808      	ldr	r0, [pc, #32]	; (8014cac <prvPortStartFirstTask+0x24>)
 8014c8a:	6800      	ldr	r0, [r0, #0]
 8014c8c:	6800      	ldr	r0, [r0, #0]
 8014c8e:	f380 8808 	msr	MSP, r0
 8014c92:	f04f 0000 	mov.w	r0, #0
 8014c96:	f380 8814 	msr	CONTROL, r0
 8014c9a:	b662      	cpsie	i
 8014c9c:	b661      	cpsie	f
 8014c9e:	f3bf 8f4f 	dsb	sy
 8014ca2:	f3bf 8f6f 	isb	sy
 8014ca6:	df00      	svc	0
 8014ca8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8014caa:	bf00      	nop
 8014cac:	e000ed08 	.word	0xe000ed08

08014cb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8014cb0:	b580      	push	{r7, lr}
 8014cb2:	b084      	sub	sp, #16
 8014cb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8014cb6:	4b36      	ldr	r3, [pc, #216]	; (8014d90 <xPortStartScheduler+0xe0>)
 8014cb8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8014cba:	68fb      	ldr	r3, [r7, #12]
 8014cbc:	781b      	ldrb	r3, [r3, #0]
 8014cbe:	b2db      	uxtb	r3, r3
 8014cc0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8014cc2:	68fb      	ldr	r3, [r7, #12]
 8014cc4:	22ff      	movs	r2, #255	; 0xff
 8014cc6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8014cc8:	68fb      	ldr	r3, [r7, #12]
 8014cca:	781b      	ldrb	r3, [r3, #0]
 8014ccc:	b2db      	uxtb	r3, r3
 8014cce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8014cd0:	78fb      	ldrb	r3, [r7, #3]
 8014cd2:	b2db      	uxtb	r3, r3
 8014cd4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8014cd8:	b2da      	uxtb	r2, r3
 8014cda:	4b2e      	ldr	r3, [pc, #184]	; (8014d94 <xPortStartScheduler+0xe4>)
 8014cdc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8014cde:	4b2e      	ldr	r3, [pc, #184]	; (8014d98 <xPortStartScheduler+0xe8>)
 8014ce0:	2207      	movs	r2, #7
 8014ce2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014ce4:	e009      	b.n	8014cfa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8014ce6:	4b2c      	ldr	r3, [pc, #176]	; (8014d98 <xPortStartScheduler+0xe8>)
 8014ce8:	681b      	ldr	r3, [r3, #0]
 8014cea:	3b01      	subs	r3, #1
 8014cec:	4a2a      	ldr	r2, [pc, #168]	; (8014d98 <xPortStartScheduler+0xe8>)
 8014cee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8014cf0:	78fb      	ldrb	r3, [r7, #3]
 8014cf2:	b2db      	uxtb	r3, r3
 8014cf4:	005b      	lsls	r3, r3, #1
 8014cf6:	b2db      	uxtb	r3, r3
 8014cf8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014cfa:	78fb      	ldrb	r3, [r7, #3]
 8014cfc:	b2db      	uxtb	r3, r3
 8014cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014d02:	2b80      	cmp	r3, #128	; 0x80
 8014d04:	d0ef      	beq.n	8014ce6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8014d06:	4b24      	ldr	r3, [pc, #144]	; (8014d98 <xPortStartScheduler+0xe8>)
 8014d08:	681b      	ldr	r3, [r3, #0]
 8014d0a:	f1c3 0307 	rsb	r3, r3, #7
 8014d0e:	2b04      	cmp	r3, #4
 8014d10:	d00b      	beq.n	8014d2a <xPortStartScheduler+0x7a>
 8014d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d16:	b672      	cpsid	i
 8014d18:	f383 8811 	msr	BASEPRI, r3
 8014d1c:	f3bf 8f6f 	isb	sy
 8014d20:	f3bf 8f4f 	dsb	sy
 8014d24:	b662      	cpsie	i
 8014d26:	60bb      	str	r3, [r7, #8]
 8014d28:	e7fe      	b.n	8014d28 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8014d2a:	4b1b      	ldr	r3, [pc, #108]	; (8014d98 <xPortStartScheduler+0xe8>)
 8014d2c:	681b      	ldr	r3, [r3, #0]
 8014d2e:	021b      	lsls	r3, r3, #8
 8014d30:	4a19      	ldr	r2, [pc, #100]	; (8014d98 <xPortStartScheduler+0xe8>)
 8014d32:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8014d34:	4b18      	ldr	r3, [pc, #96]	; (8014d98 <xPortStartScheduler+0xe8>)
 8014d36:	681b      	ldr	r3, [r3, #0]
 8014d38:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8014d3c:	4a16      	ldr	r2, [pc, #88]	; (8014d98 <xPortStartScheduler+0xe8>)
 8014d3e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8014d40:	687b      	ldr	r3, [r7, #4]
 8014d42:	b2da      	uxtb	r2, r3
 8014d44:	68fb      	ldr	r3, [r7, #12]
 8014d46:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8014d48:	4b14      	ldr	r3, [pc, #80]	; (8014d9c <xPortStartScheduler+0xec>)
 8014d4a:	681b      	ldr	r3, [r3, #0]
 8014d4c:	4a13      	ldr	r2, [pc, #76]	; (8014d9c <xPortStartScheduler+0xec>)
 8014d4e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8014d52:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8014d54:	4b11      	ldr	r3, [pc, #68]	; (8014d9c <xPortStartScheduler+0xec>)
 8014d56:	681b      	ldr	r3, [r3, #0]
 8014d58:	4a10      	ldr	r2, [pc, #64]	; (8014d9c <xPortStartScheduler+0xec>)
 8014d5a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8014d5e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8014d60:	f000 f8d4 	bl	8014f0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8014d64:	4b0e      	ldr	r3, [pc, #56]	; (8014da0 <xPortStartScheduler+0xf0>)
 8014d66:	2200      	movs	r2, #0
 8014d68:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8014d6a:	f000 f8f3 	bl	8014f54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8014d6e:	4b0d      	ldr	r3, [pc, #52]	; (8014da4 <xPortStartScheduler+0xf4>)
 8014d70:	681b      	ldr	r3, [r3, #0]
 8014d72:	4a0c      	ldr	r2, [pc, #48]	; (8014da4 <xPortStartScheduler+0xf4>)
 8014d74:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8014d78:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8014d7a:	f7ff ff85 	bl	8014c88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8014d7e:	f7fe ff65 	bl	8013c4c <vTaskSwitchContext>
	prvTaskExitError();
 8014d82:	f7ff ff3b 	bl	8014bfc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8014d86:	2300      	movs	r3, #0
}
 8014d88:	4618      	mov	r0, r3
 8014d8a:	3710      	adds	r7, #16
 8014d8c:	46bd      	mov	sp, r7
 8014d8e:	bd80      	pop	{r7, pc}
 8014d90:	e000e400 	.word	0xe000e400
 8014d94:	20000fb8 	.word	0x20000fb8
 8014d98:	20000fbc 	.word	0x20000fbc
 8014d9c:	e000ed20 	.word	0xe000ed20
 8014da0:	20000104 	.word	0x20000104
 8014da4:	e000ef34 	.word	0xe000ef34

08014da8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8014da8:	b480      	push	{r7}
 8014daa:	b083      	sub	sp, #12
 8014dac:	af00      	add	r7, sp, #0
 8014dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014db2:	b672      	cpsid	i
 8014db4:	f383 8811 	msr	BASEPRI, r3
 8014db8:	f3bf 8f6f 	isb	sy
 8014dbc:	f3bf 8f4f 	dsb	sy
 8014dc0:	b662      	cpsie	i
 8014dc2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8014dc4:	4b0f      	ldr	r3, [pc, #60]	; (8014e04 <vPortEnterCritical+0x5c>)
 8014dc6:	681b      	ldr	r3, [r3, #0]
 8014dc8:	3301      	adds	r3, #1
 8014dca:	4a0e      	ldr	r2, [pc, #56]	; (8014e04 <vPortEnterCritical+0x5c>)
 8014dcc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8014dce:	4b0d      	ldr	r3, [pc, #52]	; (8014e04 <vPortEnterCritical+0x5c>)
 8014dd0:	681b      	ldr	r3, [r3, #0]
 8014dd2:	2b01      	cmp	r3, #1
 8014dd4:	d110      	bne.n	8014df8 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8014dd6:	4b0c      	ldr	r3, [pc, #48]	; (8014e08 <vPortEnterCritical+0x60>)
 8014dd8:	681b      	ldr	r3, [r3, #0]
 8014dda:	b2db      	uxtb	r3, r3
 8014ddc:	2b00      	cmp	r3, #0
 8014dde:	d00b      	beq.n	8014df8 <vPortEnterCritical+0x50>
 8014de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014de4:	b672      	cpsid	i
 8014de6:	f383 8811 	msr	BASEPRI, r3
 8014dea:	f3bf 8f6f 	isb	sy
 8014dee:	f3bf 8f4f 	dsb	sy
 8014df2:	b662      	cpsie	i
 8014df4:	603b      	str	r3, [r7, #0]
 8014df6:	e7fe      	b.n	8014df6 <vPortEnterCritical+0x4e>
	}
}
 8014df8:	bf00      	nop
 8014dfa:	370c      	adds	r7, #12
 8014dfc:	46bd      	mov	sp, r7
 8014dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e02:	4770      	bx	lr
 8014e04:	20000104 	.word	0x20000104
 8014e08:	e000ed04 	.word	0xe000ed04

08014e0c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8014e0c:	b480      	push	{r7}
 8014e0e:	b083      	sub	sp, #12
 8014e10:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8014e12:	4b12      	ldr	r3, [pc, #72]	; (8014e5c <vPortExitCritical+0x50>)
 8014e14:	681b      	ldr	r3, [r3, #0]
 8014e16:	2b00      	cmp	r3, #0
 8014e18:	d10b      	bne.n	8014e32 <vPortExitCritical+0x26>
 8014e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e1e:	b672      	cpsid	i
 8014e20:	f383 8811 	msr	BASEPRI, r3
 8014e24:	f3bf 8f6f 	isb	sy
 8014e28:	f3bf 8f4f 	dsb	sy
 8014e2c:	b662      	cpsie	i
 8014e2e:	607b      	str	r3, [r7, #4]
 8014e30:	e7fe      	b.n	8014e30 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 8014e32:	4b0a      	ldr	r3, [pc, #40]	; (8014e5c <vPortExitCritical+0x50>)
 8014e34:	681b      	ldr	r3, [r3, #0]
 8014e36:	3b01      	subs	r3, #1
 8014e38:	4a08      	ldr	r2, [pc, #32]	; (8014e5c <vPortExitCritical+0x50>)
 8014e3a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8014e3c:	4b07      	ldr	r3, [pc, #28]	; (8014e5c <vPortExitCritical+0x50>)
 8014e3e:	681b      	ldr	r3, [r3, #0]
 8014e40:	2b00      	cmp	r3, #0
 8014e42:	d104      	bne.n	8014e4e <vPortExitCritical+0x42>
 8014e44:	2300      	movs	r3, #0
 8014e46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014e48:	683b      	ldr	r3, [r7, #0]
 8014e4a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8014e4e:	bf00      	nop
 8014e50:	370c      	adds	r7, #12
 8014e52:	46bd      	mov	sp, r7
 8014e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e58:	4770      	bx	lr
 8014e5a:	bf00      	nop
 8014e5c:	20000104 	.word	0x20000104

08014e60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8014e60:	f3ef 8009 	mrs	r0, PSP
 8014e64:	f3bf 8f6f 	isb	sy
 8014e68:	4b15      	ldr	r3, [pc, #84]	; (8014ec0 <pxCurrentTCBConst>)
 8014e6a:	681a      	ldr	r2, [r3, #0]
 8014e6c:	f01e 0f10 	tst.w	lr, #16
 8014e70:	bf08      	it	eq
 8014e72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8014e76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e7a:	6010      	str	r0, [r2, #0]
 8014e7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8014e80:	f04f 0050 	mov.w	r0, #80	; 0x50
 8014e84:	b672      	cpsid	i
 8014e86:	f380 8811 	msr	BASEPRI, r0
 8014e8a:	f3bf 8f4f 	dsb	sy
 8014e8e:	f3bf 8f6f 	isb	sy
 8014e92:	b662      	cpsie	i
 8014e94:	f7fe feda 	bl	8013c4c <vTaskSwitchContext>
 8014e98:	f04f 0000 	mov.w	r0, #0
 8014e9c:	f380 8811 	msr	BASEPRI, r0
 8014ea0:	bc09      	pop	{r0, r3}
 8014ea2:	6819      	ldr	r1, [r3, #0]
 8014ea4:	6808      	ldr	r0, [r1, #0]
 8014ea6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014eaa:	f01e 0f10 	tst.w	lr, #16
 8014eae:	bf08      	it	eq
 8014eb0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8014eb4:	f380 8809 	msr	PSP, r0
 8014eb8:	f3bf 8f6f 	isb	sy
 8014ebc:	4770      	bx	lr
 8014ebe:	bf00      	nop

08014ec0 <pxCurrentTCBConst>:
 8014ec0:	2000098c 	.word	0x2000098c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8014ec4:	bf00      	nop
 8014ec6:	bf00      	nop

08014ec8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8014ec8:	b580      	push	{r7, lr}
 8014eca:	b082      	sub	sp, #8
 8014ecc:	af00      	add	r7, sp, #0
	__asm volatile
 8014ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ed2:	b672      	cpsid	i
 8014ed4:	f383 8811 	msr	BASEPRI, r3
 8014ed8:	f3bf 8f6f 	isb	sy
 8014edc:	f3bf 8f4f 	dsb	sy
 8014ee0:	b662      	cpsie	i
 8014ee2:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8014ee4:	f7fe fdf8 	bl	8013ad8 <xTaskIncrementTick>
 8014ee8:	4603      	mov	r3, r0
 8014eea:	2b00      	cmp	r3, #0
 8014eec:	d003      	beq.n	8014ef6 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8014eee:	4b06      	ldr	r3, [pc, #24]	; (8014f08 <SysTick_Handler+0x40>)
 8014ef0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014ef4:	601a      	str	r2, [r3, #0]
 8014ef6:	2300      	movs	r3, #0
 8014ef8:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014efa:	683b      	ldr	r3, [r7, #0]
 8014efc:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8014f00:	bf00      	nop
 8014f02:	3708      	adds	r7, #8
 8014f04:	46bd      	mov	sp, r7
 8014f06:	bd80      	pop	{r7, pc}
 8014f08:	e000ed04 	.word	0xe000ed04

08014f0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8014f0c:	b480      	push	{r7}
 8014f0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8014f10:	4b0b      	ldr	r3, [pc, #44]	; (8014f40 <vPortSetupTimerInterrupt+0x34>)
 8014f12:	2200      	movs	r2, #0
 8014f14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8014f16:	4b0b      	ldr	r3, [pc, #44]	; (8014f44 <vPortSetupTimerInterrupt+0x38>)
 8014f18:	2200      	movs	r2, #0
 8014f1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8014f1c:	4b0a      	ldr	r3, [pc, #40]	; (8014f48 <vPortSetupTimerInterrupt+0x3c>)
 8014f1e:	681b      	ldr	r3, [r3, #0]
 8014f20:	4a0a      	ldr	r2, [pc, #40]	; (8014f4c <vPortSetupTimerInterrupt+0x40>)
 8014f22:	fba2 2303 	umull	r2, r3, r2, r3
 8014f26:	099b      	lsrs	r3, r3, #6
 8014f28:	4a09      	ldr	r2, [pc, #36]	; (8014f50 <vPortSetupTimerInterrupt+0x44>)
 8014f2a:	3b01      	subs	r3, #1
 8014f2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8014f2e:	4b04      	ldr	r3, [pc, #16]	; (8014f40 <vPortSetupTimerInterrupt+0x34>)
 8014f30:	2207      	movs	r2, #7
 8014f32:	601a      	str	r2, [r3, #0]
}
 8014f34:	bf00      	nop
 8014f36:	46bd      	mov	sp, r7
 8014f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f3c:	4770      	bx	lr
 8014f3e:	bf00      	nop
 8014f40:	e000e010 	.word	0xe000e010
 8014f44:	e000e018 	.word	0xe000e018
 8014f48:	20000010 	.word	0x20000010
 8014f4c:	10624dd3 	.word	0x10624dd3
 8014f50:	e000e014 	.word	0xe000e014

08014f54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8014f54:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8014f64 <vPortEnableVFP+0x10>
 8014f58:	6801      	ldr	r1, [r0, #0]
 8014f5a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8014f5e:	6001      	str	r1, [r0, #0]
 8014f60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8014f62:	bf00      	nop
 8014f64:	e000ed88 	.word	0xe000ed88

08014f68 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8014f68:	b480      	push	{r7}
 8014f6a:	b085      	sub	sp, #20
 8014f6c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8014f6e:	f3ef 8305 	mrs	r3, IPSR
 8014f72:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8014f74:	68fb      	ldr	r3, [r7, #12]
 8014f76:	2b0f      	cmp	r3, #15
 8014f78:	d915      	bls.n	8014fa6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8014f7a:	4a18      	ldr	r2, [pc, #96]	; (8014fdc <vPortValidateInterruptPriority+0x74>)
 8014f7c:	68fb      	ldr	r3, [r7, #12]
 8014f7e:	4413      	add	r3, r2
 8014f80:	781b      	ldrb	r3, [r3, #0]
 8014f82:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8014f84:	4b16      	ldr	r3, [pc, #88]	; (8014fe0 <vPortValidateInterruptPriority+0x78>)
 8014f86:	781b      	ldrb	r3, [r3, #0]
 8014f88:	7afa      	ldrb	r2, [r7, #11]
 8014f8a:	429a      	cmp	r2, r3
 8014f8c:	d20b      	bcs.n	8014fa6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8014f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f92:	b672      	cpsid	i
 8014f94:	f383 8811 	msr	BASEPRI, r3
 8014f98:	f3bf 8f6f 	isb	sy
 8014f9c:	f3bf 8f4f 	dsb	sy
 8014fa0:	b662      	cpsie	i
 8014fa2:	607b      	str	r3, [r7, #4]
 8014fa4:	e7fe      	b.n	8014fa4 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8014fa6:	4b0f      	ldr	r3, [pc, #60]	; (8014fe4 <vPortValidateInterruptPriority+0x7c>)
 8014fa8:	681b      	ldr	r3, [r3, #0]
 8014faa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8014fae:	4b0e      	ldr	r3, [pc, #56]	; (8014fe8 <vPortValidateInterruptPriority+0x80>)
 8014fb0:	681b      	ldr	r3, [r3, #0]
 8014fb2:	429a      	cmp	r2, r3
 8014fb4:	d90b      	bls.n	8014fce <vPortValidateInterruptPriority+0x66>
 8014fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014fba:	b672      	cpsid	i
 8014fbc:	f383 8811 	msr	BASEPRI, r3
 8014fc0:	f3bf 8f6f 	isb	sy
 8014fc4:	f3bf 8f4f 	dsb	sy
 8014fc8:	b662      	cpsie	i
 8014fca:	603b      	str	r3, [r7, #0]
 8014fcc:	e7fe      	b.n	8014fcc <vPortValidateInterruptPriority+0x64>
	}
 8014fce:	bf00      	nop
 8014fd0:	3714      	adds	r7, #20
 8014fd2:	46bd      	mov	sp, r7
 8014fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fd8:	4770      	bx	lr
 8014fda:	bf00      	nop
 8014fdc:	e000e3f0 	.word	0xe000e3f0
 8014fe0:	20000fb8 	.word	0x20000fb8
 8014fe4:	e000ed0c 	.word	0xe000ed0c
 8014fe8:	20000fbc 	.word	0x20000fbc

08014fec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8014fec:	b580      	push	{r7, lr}
 8014fee:	b08a      	sub	sp, #40	; 0x28
 8014ff0:	af00      	add	r7, sp, #0
 8014ff2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8014ff4:	2300      	movs	r3, #0
 8014ff6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8014ff8:	f7fe fca0 	bl	801393c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8014ffc:	4b5a      	ldr	r3, [pc, #360]	; (8015168 <pvPortMalloc+0x17c>)
 8014ffe:	681b      	ldr	r3, [r3, #0]
 8015000:	2b00      	cmp	r3, #0
 8015002:	d101      	bne.n	8015008 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8015004:	f000 f916 	bl	8015234 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8015008:	4b58      	ldr	r3, [pc, #352]	; (801516c <pvPortMalloc+0x180>)
 801500a:	681a      	ldr	r2, [r3, #0]
 801500c:	687b      	ldr	r3, [r7, #4]
 801500e:	4013      	ands	r3, r2
 8015010:	2b00      	cmp	r3, #0
 8015012:	f040 8090 	bne.w	8015136 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8015016:	687b      	ldr	r3, [r7, #4]
 8015018:	2b00      	cmp	r3, #0
 801501a:	d01e      	beq.n	801505a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 801501c:	2208      	movs	r2, #8
 801501e:	687b      	ldr	r3, [r7, #4]
 8015020:	4413      	add	r3, r2
 8015022:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8015024:	687b      	ldr	r3, [r7, #4]
 8015026:	f003 0307 	and.w	r3, r3, #7
 801502a:	2b00      	cmp	r3, #0
 801502c:	d015      	beq.n	801505a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801502e:	687b      	ldr	r3, [r7, #4]
 8015030:	f023 0307 	bic.w	r3, r3, #7
 8015034:	3308      	adds	r3, #8
 8015036:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015038:	687b      	ldr	r3, [r7, #4]
 801503a:	f003 0307 	and.w	r3, r3, #7
 801503e:	2b00      	cmp	r3, #0
 8015040:	d00b      	beq.n	801505a <pvPortMalloc+0x6e>
 8015042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015046:	b672      	cpsid	i
 8015048:	f383 8811 	msr	BASEPRI, r3
 801504c:	f3bf 8f6f 	isb	sy
 8015050:	f3bf 8f4f 	dsb	sy
 8015054:	b662      	cpsie	i
 8015056:	617b      	str	r3, [r7, #20]
 8015058:	e7fe      	b.n	8015058 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801505a:	687b      	ldr	r3, [r7, #4]
 801505c:	2b00      	cmp	r3, #0
 801505e:	d06a      	beq.n	8015136 <pvPortMalloc+0x14a>
 8015060:	4b43      	ldr	r3, [pc, #268]	; (8015170 <pvPortMalloc+0x184>)
 8015062:	681b      	ldr	r3, [r3, #0]
 8015064:	687a      	ldr	r2, [r7, #4]
 8015066:	429a      	cmp	r2, r3
 8015068:	d865      	bhi.n	8015136 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801506a:	4b42      	ldr	r3, [pc, #264]	; (8015174 <pvPortMalloc+0x188>)
 801506c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801506e:	4b41      	ldr	r3, [pc, #260]	; (8015174 <pvPortMalloc+0x188>)
 8015070:	681b      	ldr	r3, [r3, #0]
 8015072:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8015074:	e004      	b.n	8015080 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8015076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015078:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801507a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801507c:	681b      	ldr	r3, [r3, #0]
 801507e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8015080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015082:	685b      	ldr	r3, [r3, #4]
 8015084:	687a      	ldr	r2, [r7, #4]
 8015086:	429a      	cmp	r2, r3
 8015088:	d903      	bls.n	8015092 <pvPortMalloc+0xa6>
 801508a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801508c:	681b      	ldr	r3, [r3, #0]
 801508e:	2b00      	cmp	r3, #0
 8015090:	d1f1      	bne.n	8015076 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8015092:	4b35      	ldr	r3, [pc, #212]	; (8015168 <pvPortMalloc+0x17c>)
 8015094:	681b      	ldr	r3, [r3, #0]
 8015096:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015098:	429a      	cmp	r2, r3
 801509a:	d04c      	beq.n	8015136 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801509c:	6a3b      	ldr	r3, [r7, #32]
 801509e:	681b      	ldr	r3, [r3, #0]
 80150a0:	2208      	movs	r2, #8
 80150a2:	4413      	add	r3, r2
 80150a4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80150a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150a8:	681a      	ldr	r2, [r3, #0]
 80150aa:	6a3b      	ldr	r3, [r7, #32]
 80150ac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80150ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150b0:	685a      	ldr	r2, [r3, #4]
 80150b2:	687b      	ldr	r3, [r7, #4]
 80150b4:	1ad2      	subs	r2, r2, r3
 80150b6:	2308      	movs	r3, #8
 80150b8:	005b      	lsls	r3, r3, #1
 80150ba:	429a      	cmp	r2, r3
 80150bc:	d920      	bls.n	8015100 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80150be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80150c0:	687b      	ldr	r3, [r7, #4]
 80150c2:	4413      	add	r3, r2
 80150c4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80150c6:	69bb      	ldr	r3, [r7, #24]
 80150c8:	f003 0307 	and.w	r3, r3, #7
 80150cc:	2b00      	cmp	r3, #0
 80150ce:	d00b      	beq.n	80150e8 <pvPortMalloc+0xfc>
 80150d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80150d4:	b672      	cpsid	i
 80150d6:	f383 8811 	msr	BASEPRI, r3
 80150da:	f3bf 8f6f 	isb	sy
 80150de:	f3bf 8f4f 	dsb	sy
 80150e2:	b662      	cpsie	i
 80150e4:	613b      	str	r3, [r7, #16]
 80150e6:	e7fe      	b.n	80150e6 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80150e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150ea:	685a      	ldr	r2, [r3, #4]
 80150ec:	687b      	ldr	r3, [r7, #4]
 80150ee:	1ad2      	subs	r2, r2, r3
 80150f0:	69bb      	ldr	r3, [r7, #24]
 80150f2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80150f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150f6:	687a      	ldr	r2, [r7, #4]
 80150f8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80150fa:	69b8      	ldr	r0, [r7, #24]
 80150fc:	f000 f8fc 	bl	80152f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8015100:	4b1b      	ldr	r3, [pc, #108]	; (8015170 <pvPortMalloc+0x184>)
 8015102:	681a      	ldr	r2, [r3, #0]
 8015104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015106:	685b      	ldr	r3, [r3, #4]
 8015108:	1ad3      	subs	r3, r2, r3
 801510a:	4a19      	ldr	r2, [pc, #100]	; (8015170 <pvPortMalloc+0x184>)
 801510c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801510e:	4b18      	ldr	r3, [pc, #96]	; (8015170 <pvPortMalloc+0x184>)
 8015110:	681a      	ldr	r2, [r3, #0]
 8015112:	4b19      	ldr	r3, [pc, #100]	; (8015178 <pvPortMalloc+0x18c>)
 8015114:	681b      	ldr	r3, [r3, #0]
 8015116:	429a      	cmp	r2, r3
 8015118:	d203      	bcs.n	8015122 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801511a:	4b15      	ldr	r3, [pc, #84]	; (8015170 <pvPortMalloc+0x184>)
 801511c:	681b      	ldr	r3, [r3, #0]
 801511e:	4a16      	ldr	r2, [pc, #88]	; (8015178 <pvPortMalloc+0x18c>)
 8015120:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8015122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015124:	685a      	ldr	r2, [r3, #4]
 8015126:	4b11      	ldr	r3, [pc, #68]	; (801516c <pvPortMalloc+0x180>)
 8015128:	681b      	ldr	r3, [r3, #0]
 801512a:	431a      	orrs	r2, r3
 801512c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801512e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8015130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015132:	2200      	movs	r2, #0
 8015134:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8015136:	f7fe fc0f 	bl	8013958 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801513a:	69fb      	ldr	r3, [r7, #28]
 801513c:	f003 0307 	and.w	r3, r3, #7
 8015140:	2b00      	cmp	r3, #0
 8015142:	d00b      	beq.n	801515c <pvPortMalloc+0x170>
 8015144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015148:	b672      	cpsid	i
 801514a:	f383 8811 	msr	BASEPRI, r3
 801514e:	f3bf 8f6f 	isb	sy
 8015152:	f3bf 8f4f 	dsb	sy
 8015156:	b662      	cpsie	i
 8015158:	60fb      	str	r3, [r7, #12]
 801515a:	e7fe      	b.n	801515a <pvPortMalloc+0x16e>
	return pvReturn;
 801515c:	69fb      	ldr	r3, [r7, #28]
}
 801515e:	4618      	mov	r0, r3
 8015160:	3728      	adds	r7, #40	; 0x28
 8015162:	46bd      	mov	sp, r7
 8015164:	bd80      	pop	{r7, pc}
 8015166:	bf00      	nop
 8015168:	20004bc8 	.word	0x20004bc8
 801516c:	20004bd4 	.word	0x20004bd4
 8015170:	20004bcc 	.word	0x20004bcc
 8015174:	20004bc0 	.word	0x20004bc0
 8015178:	20004bd0 	.word	0x20004bd0

0801517c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 801517c:	b580      	push	{r7, lr}
 801517e:	b086      	sub	sp, #24
 8015180:	af00      	add	r7, sp, #0
 8015182:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8015184:	687b      	ldr	r3, [r7, #4]
 8015186:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8015188:	687b      	ldr	r3, [r7, #4]
 801518a:	2b00      	cmp	r3, #0
 801518c:	d04a      	beq.n	8015224 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801518e:	2308      	movs	r3, #8
 8015190:	425b      	negs	r3, r3
 8015192:	697a      	ldr	r2, [r7, #20]
 8015194:	4413      	add	r3, r2
 8015196:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8015198:	697b      	ldr	r3, [r7, #20]
 801519a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801519c:	693b      	ldr	r3, [r7, #16]
 801519e:	685a      	ldr	r2, [r3, #4]
 80151a0:	4b22      	ldr	r3, [pc, #136]	; (801522c <vPortFree+0xb0>)
 80151a2:	681b      	ldr	r3, [r3, #0]
 80151a4:	4013      	ands	r3, r2
 80151a6:	2b00      	cmp	r3, #0
 80151a8:	d10b      	bne.n	80151c2 <vPortFree+0x46>
 80151aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80151ae:	b672      	cpsid	i
 80151b0:	f383 8811 	msr	BASEPRI, r3
 80151b4:	f3bf 8f6f 	isb	sy
 80151b8:	f3bf 8f4f 	dsb	sy
 80151bc:	b662      	cpsie	i
 80151be:	60fb      	str	r3, [r7, #12]
 80151c0:	e7fe      	b.n	80151c0 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80151c2:	693b      	ldr	r3, [r7, #16]
 80151c4:	681b      	ldr	r3, [r3, #0]
 80151c6:	2b00      	cmp	r3, #0
 80151c8:	d00b      	beq.n	80151e2 <vPortFree+0x66>
 80151ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80151ce:	b672      	cpsid	i
 80151d0:	f383 8811 	msr	BASEPRI, r3
 80151d4:	f3bf 8f6f 	isb	sy
 80151d8:	f3bf 8f4f 	dsb	sy
 80151dc:	b662      	cpsie	i
 80151de:	60bb      	str	r3, [r7, #8]
 80151e0:	e7fe      	b.n	80151e0 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80151e2:	693b      	ldr	r3, [r7, #16]
 80151e4:	685a      	ldr	r2, [r3, #4]
 80151e6:	4b11      	ldr	r3, [pc, #68]	; (801522c <vPortFree+0xb0>)
 80151e8:	681b      	ldr	r3, [r3, #0]
 80151ea:	4013      	ands	r3, r2
 80151ec:	2b00      	cmp	r3, #0
 80151ee:	d019      	beq.n	8015224 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80151f0:	693b      	ldr	r3, [r7, #16]
 80151f2:	681b      	ldr	r3, [r3, #0]
 80151f4:	2b00      	cmp	r3, #0
 80151f6:	d115      	bne.n	8015224 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80151f8:	693b      	ldr	r3, [r7, #16]
 80151fa:	685a      	ldr	r2, [r3, #4]
 80151fc:	4b0b      	ldr	r3, [pc, #44]	; (801522c <vPortFree+0xb0>)
 80151fe:	681b      	ldr	r3, [r3, #0]
 8015200:	43db      	mvns	r3, r3
 8015202:	401a      	ands	r2, r3
 8015204:	693b      	ldr	r3, [r7, #16]
 8015206:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8015208:	f7fe fb98 	bl	801393c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801520c:	693b      	ldr	r3, [r7, #16]
 801520e:	685a      	ldr	r2, [r3, #4]
 8015210:	4b07      	ldr	r3, [pc, #28]	; (8015230 <vPortFree+0xb4>)
 8015212:	681b      	ldr	r3, [r3, #0]
 8015214:	4413      	add	r3, r2
 8015216:	4a06      	ldr	r2, [pc, #24]	; (8015230 <vPortFree+0xb4>)
 8015218:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801521a:	6938      	ldr	r0, [r7, #16]
 801521c:	f000 f86c 	bl	80152f8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8015220:	f7fe fb9a 	bl	8013958 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8015224:	bf00      	nop
 8015226:	3718      	adds	r7, #24
 8015228:	46bd      	mov	sp, r7
 801522a:	bd80      	pop	{r7, pc}
 801522c:	20004bd4 	.word	0x20004bd4
 8015230:	20004bcc 	.word	0x20004bcc

08015234 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8015234:	b480      	push	{r7}
 8015236:	b085      	sub	sp, #20
 8015238:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801523a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801523e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8015240:	4b27      	ldr	r3, [pc, #156]	; (80152e0 <prvHeapInit+0xac>)
 8015242:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8015244:	68fb      	ldr	r3, [r7, #12]
 8015246:	f003 0307 	and.w	r3, r3, #7
 801524a:	2b00      	cmp	r3, #0
 801524c:	d00c      	beq.n	8015268 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801524e:	68fb      	ldr	r3, [r7, #12]
 8015250:	3307      	adds	r3, #7
 8015252:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015254:	68fb      	ldr	r3, [r7, #12]
 8015256:	f023 0307 	bic.w	r3, r3, #7
 801525a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801525c:	68ba      	ldr	r2, [r7, #8]
 801525e:	68fb      	ldr	r3, [r7, #12]
 8015260:	1ad3      	subs	r3, r2, r3
 8015262:	4a1f      	ldr	r2, [pc, #124]	; (80152e0 <prvHeapInit+0xac>)
 8015264:	4413      	add	r3, r2
 8015266:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8015268:	68fb      	ldr	r3, [r7, #12]
 801526a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801526c:	4a1d      	ldr	r2, [pc, #116]	; (80152e4 <prvHeapInit+0xb0>)
 801526e:	687b      	ldr	r3, [r7, #4]
 8015270:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8015272:	4b1c      	ldr	r3, [pc, #112]	; (80152e4 <prvHeapInit+0xb0>)
 8015274:	2200      	movs	r2, #0
 8015276:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8015278:	687b      	ldr	r3, [r7, #4]
 801527a:	68ba      	ldr	r2, [r7, #8]
 801527c:	4413      	add	r3, r2
 801527e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8015280:	2208      	movs	r2, #8
 8015282:	68fb      	ldr	r3, [r7, #12]
 8015284:	1a9b      	subs	r3, r3, r2
 8015286:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015288:	68fb      	ldr	r3, [r7, #12]
 801528a:	f023 0307 	bic.w	r3, r3, #7
 801528e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8015290:	68fb      	ldr	r3, [r7, #12]
 8015292:	4a15      	ldr	r2, [pc, #84]	; (80152e8 <prvHeapInit+0xb4>)
 8015294:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8015296:	4b14      	ldr	r3, [pc, #80]	; (80152e8 <prvHeapInit+0xb4>)
 8015298:	681b      	ldr	r3, [r3, #0]
 801529a:	2200      	movs	r2, #0
 801529c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801529e:	4b12      	ldr	r3, [pc, #72]	; (80152e8 <prvHeapInit+0xb4>)
 80152a0:	681b      	ldr	r3, [r3, #0]
 80152a2:	2200      	movs	r2, #0
 80152a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80152a6:	687b      	ldr	r3, [r7, #4]
 80152a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80152aa:	683b      	ldr	r3, [r7, #0]
 80152ac:	68fa      	ldr	r2, [r7, #12]
 80152ae:	1ad2      	subs	r2, r2, r3
 80152b0:	683b      	ldr	r3, [r7, #0]
 80152b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80152b4:	4b0c      	ldr	r3, [pc, #48]	; (80152e8 <prvHeapInit+0xb4>)
 80152b6:	681a      	ldr	r2, [r3, #0]
 80152b8:	683b      	ldr	r3, [r7, #0]
 80152ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80152bc:	683b      	ldr	r3, [r7, #0]
 80152be:	685b      	ldr	r3, [r3, #4]
 80152c0:	4a0a      	ldr	r2, [pc, #40]	; (80152ec <prvHeapInit+0xb8>)
 80152c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80152c4:	683b      	ldr	r3, [r7, #0]
 80152c6:	685b      	ldr	r3, [r3, #4]
 80152c8:	4a09      	ldr	r2, [pc, #36]	; (80152f0 <prvHeapInit+0xbc>)
 80152ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80152cc:	4b09      	ldr	r3, [pc, #36]	; (80152f4 <prvHeapInit+0xc0>)
 80152ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80152d2:	601a      	str	r2, [r3, #0]
}
 80152d4:	bf00      	nop
 80152d6:	3714      	adds	r7, #20
 80152d8:	46bd      	mov	sp, r7
 80152da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152de:	4770      	bx	lr
 80152e0:	20000fc0 	.word	0x20000fc0
 80152e4:	20004bc0 	.word	0x20004bc0
 80152e8:	20004bc8 	.word	0x20004bc8
 80152ec:	20004bd0 	.word	0x20004bd0
 80152f0:	20004bcc 	.word	0x20004bcc
 80152f4:	20004bd4 	.word	0x20004bd4

080152f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80152f8:	b480      	push	{r7}
 80152fa:	b085      	sub	sp, #20
 80152fc:	af00      	add	r7, sp, #0
 80152fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8015300:	4b28      	ldr	r3, [pc, #160]	; (80153a4 <prvInsertBlockIntoFreeList+0xac>)
 8015302:	60fb      	str	r3, [r7, #12]
 8015304:	e002      	b.n	801530c <prvInsertBlockIntoFreeList+0x14>
 8015306:	68fb      	ldr	r3, [r7, #12]
 8015308:	681b      	ldr	r3, [r3, #0]
 801530a:	60fb      	str	r3, [r7, #12]
 801530c:	68fb      	ldr	r3, [r7, #12]
 801530e:	681b      	ldr	r3, [r3, #0]
 8015310:	687a      	ldr	r2, [r7, #4]
 8015312:	429a      	cmp	r2, r3
 8015314:	d8f7      	bhi.n	8015306 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8015316:	68fb      	ldr	r3, [r7, #12]
 8015318:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801531a:	68fb      	ldr	r3, [r7, #12]
 801531c:	685b      	ldr	r3, [r3, #4]
 801531e:	68ba      	ldr	r2, [r7, #8]
 8015320:	4413      	add	r3, r2
 8015322:	687a      	ldr	r2, [r7, #4]
 8015324:	429a      	cmp	r2, r3
 8015326:	d108      	bne.n	801533a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8015328:	68fb      	ldr	r3, [r7, #12]
 801532a:	685a      	ldr	r2, [r3, #4]
 801532c:	687b      	ldr	r3, [r7, #4]
 801532e:	685b      	ldr	r3, [r3, #4]
 8015330:	441a      	add	r2, r3
 8015332:	68fb      	ldr	r3, [r7, #12]
 8015334:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8015336:	68fb      	ldr	r3, [r7, #12]
 8015338:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801533a:	687b      	ldr	r3, [r7, #4]
 801533c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801533e:	687b      	ldr	r3, [r7, #4]
 8015340:	685b      	ldr	r3, [r3, #4]
 8015342:	68ba      	ldr	r2, [r7, #8]
 8015344:	441a      	add	r2, r3
 8015346:	68fb      	ldr	r3, [r7, #12]
 8015348:	681b      	ldr	r3, [r3, #0]
 801534a:	429a      	cmp	r2, r3
 801534c:	d118      	bne.n	8015380 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801534e:	68fb      	ldr	r3, [r7, #12]
 8015350:	681a      	ldr	r2, [r3, #0]
 8015352:	4b15      	ldr	r3, [pc, #84]	; (80153a8 <prvInsertBlockIntoFreeList+0xb0>)
 8015354:	681b      	ldr	r3, [r3, #0]
 8015356:	429a      	cmp	r2, r3
 8015358:	d00d      	beq.n	8015376 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801535a:	687b      	ldr	r3, [r7, #4]
 801535c:	685a      	ldr	r2, [r3, #4]
 801535e:	68fb      	ldr	r3, [r7, #12]
 8015360:	681b      	ldr	r3, [r3, #0]
 8015362:	685b      	ldr	r3, [r3, #4]
 8015364:	441a      	add	r2, r3
 8015366:	687b      	ldr	r3, [r7, #4]
 8015368:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801536a:	68fb      	ldr	r3, [r7, #12]
 801536c:	681b      	ldr	r3, [r3, #0]
 801536e:	681a      	ldr	r2, [r3, #0]
 8015370:	687b      	ldr	r3, [r7, #4]
 8015372:	601a      	str	r2, [r3, #0]
 8015374:	e008      	b.n	8015388 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8015376:	4b0c      	ldr	r3, [pc, #48]	; (80153a8 <prvInsertBlockIntoFreeList+0xb0>)
 8015378:	681a      	ldr	r2, [r3, #0]
 801537a:	687b      	ldr	r3, [r7, #4]
 801537c:	601a      	str	r2, [r3, #0]
 801537e:	e003      	b.n	8015388 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8015380:	68fb      	ldr	r3, [r7, #12]
 8015382:	681a      	ldr	r2, [r3, #0]
 8015384:	687b      	ldr	r3, [r7, #4]
 8015386:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8015388:	68fa      	ldr	r2, [r7, #12]
 801538a:	687b      	ldr	r3, [r7, #4]
 801538c:	429a      	cmp	r2, r3
 801538e:	d002      	beq.n	8015396 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8015390:	68fb      	ldr	r3, [r7, #12]
 8015392:	687a      	ldr	r2, [r7, #4]
 8015394:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015396:	bf00      	nop
 8015398:	3714      	adds	r7, #20
 801539a:	46bd      	mov	sp, r7
 801539c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153a0:	4770      	bx	lr
 80153a2:	bf00      	nop
 80153a4:	20004bc0 	.word	0x20004bc0
 80153a8:	20004bc8 	.word	0x20004bc8

080153ac <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80153ac:	b580      	push	{r7, lr}
 80153ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80153b0:	2200      	movs	r2, #0
 80153b2:	4912      	ldr	r1, [pc, #72]	; (80153fc <MX_USB_DEVICE_Init+0x50>)
 80153b4:	4812      	ldr	r0, [pc, #72]	; (8015400 <MX_USB_DEVICE_Init+0x54>)
 80153b6:	f7f6 fdf0 	bl	800bf9a <USBD_Init>
 80153ba:	4603      	mov	r3, r0
 80153bc:	2b00      	cmp	r3, #0
 80153be:	d001      	beq.n	80153c4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80153c0:	f7eb fdae 	bl	8000f20 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 80153c4:	490f      	ldr	r1, [pc, #60]	; (8015404 <MX_USB_DEVICE_Init+0x58>)
 80153c6:	480e      	ldr	r0, [pc, #56]	; (8015400 <MX_USB_DEVICE_Init+0x54>)
 80153c8:	f7f6 fe1d 	bl	800c006 <USBD_RegisterClass>
 80153cc:	4603      	mov	r3, r0
 80153ce:	2b00      	cmp	r3, #0
 80153d0:	d001      	beq.n	80153d6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80153d2:	f7eb fda5 	bl	8000f20 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 80153d6:	490c      	ldr	r1, [pc, #48]	; (8015408 <MX_USB_DEVICE_Init+0x5c>)
 80153d8:	4809      	ldr	r0, [pc, #36]	; (8015400 <MX_USB_DEVICE_Init+0x54>)
 80153da:	f7f5 fb19 	bl	800aa10 <USBD_MSC_RegisterStorage>
 80153de:	4603      	mov	r3, r0
 80153e0:	2b00      	cmp	r3, #0
 80153e2:	d001      	beq.n	80153e8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80153e4:	f7eb fd9c 	bl	8000f20 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80153e8:	4805      	ldr	r0, [pc, #20]	; (8015400 <MX_USB_DEVICE_Init+0x54>)
 80153ea:	f7f6 fe2d 	bl	800c048 <USBD_Start>
 80153ee:	4603      	mov	r3, r0
 80153f0:	2b00      	cmp	r3, #0
 80153f2:	d001      	beq.n	80153f8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80153f4:	f7eb fd94 	bl	8000f20 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80153f8:	bf00      	nop
 80153fa:	bd80      	pop	{r7, pc}
 80153fc:	20000108 	.word	0x20000108
 8015400:	20009408 	.word	0x20009408
 8015404:	2000001c 	.word	0x2000001c
 8015408:	20000168 	.word	0x20000168

0801540c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801540c:	b480      	push	{r7}
 801540e:	b083      	sub	sp, #12
 8015410:	af00      	add	r7, sp, #0
 8015412:	4603      	mov	r3, r0
 8015414:	6039      	str	r1, [r7, #0]
 8015416:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8015418:	683b      	ldr	r3, [r7, #0]
 801541a:	2212      	movs	r2, #18
 801541c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801541e:	4b03      	ldr	r3, [pc, #12]	; (801542c <USBD_FS_DeviceDescriptor+0x20>)
}
 8015420:	4618      	mov	r0, r3
 8015422:	370c      	adds	r7, #12
 8015424:	46bd      	mov	sp, r7
 8015426:	f85d 7b04 	ldr.w	r7, [sp], #4
 801542a:	4770      	bx	lr
 801542c:	20000128 	.word	0x20000128

08015430 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015430:	b480      	push	{r7}
 8015432:	b083      	sub	sp, #12
 8015434:	af00      	add	r7, sp, #0
 8015436:	4603      	mov	r3, r0
 8015438:	6039      	str	r1, [r7, #0]
 801543a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801543c:	683b      	ldr	r3, [r7, #0]
 801543e:	2204      	movs	r2, #4
 8015440:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8015442:	4b03      	ldr	r3, [pc, #12]	; (8015450 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8015444:	4618      	mov	r0, r3
 8015446:	370c      	adds	r7, #12
 8015448:	46bd      	mov	sp, r7
 801544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801544e:	4770      	bx	lr
 8015450:	20000148 	.word	0x20000148

08015454 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015454:	b580      	push	{r7, lr}
 8015456:	b082      	sub	sp, #8
 8015458:	af00      	add	r7, sp, #0
 801545a:	4603      	mov	r3, r0
 801545c:	6039      	str	r1, [r7, #0]
 801545e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8015460:	79fb      	ldrb	r3, [r7, #7]
 8015462:	2b00      	cmp	r3, #0
 8015464:	d105      	bne.n	8015472 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8015466:	683a      	ldr	r2, [r7, #0]
 8015468:	4907      	ldr	r1, [pc, #28]	; (8015488 <USBD_FS_ProductStrDescriptor+0x34>)
 801546a:	4808      	ldr	r0, [pc, #32]	; (801548c <USBD_FS_ProductStrDescriptor+0x38>)
 801546c:	f7f7 fde3 	bl	800d036 <USBD_GetString>
 8015470:	e004      	b.n	801547c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8015472:	683a      	ldr	r2, [r7, #0]
 8015474:	4904      	ldr	r1, [pc, #16]	; (8015488 <USBD_FS_ProductStrDescriptor+0x34>)
 8015476:	4805      	ldr	r0, [pc, #20]	; (801548c <USBD_FS_ProductStrDescriptor+0x38>)
 8015478:	f7f7 fddd 	bl	800d036 <USBD_GetString>
  }
  return USBD_StrDesc;
 801547c:	4b02      	ldr	r3, [pc, #8]	; (8015488 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801547e:	4618      	mov	r0, r3
 8015480:	3708      	adds	r7, #8
 8015482:	46bd      	mov	sp, r7
 8015484:	bd80      	pop	{r7, pc}
 8015486:	bf00      	nop
 8015488:	200096d8 	.word	0x200096d8
 801548c:	080160e4 	.word	0x080160e4

08015490 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015490:	b580      	push	{r7, lr}
 8015492:	b082      	sub	sp, #8
 8015494:	af00      	add	r7, sp, #0
 8015496:	4603      	mov	r3, r0
 8015498:	6039      	str	r1, [r7, #0]
 801549a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801549c:	683a      	ldr	r2, [r7, #0]
 801549e:	4904      	ldr	r1, [pc, #16]	; (80154b0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80154a0:	4804      	ldr	r0, [pc, #16]	; (80154b4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80154a2:	f7f7 fdc8 	bl	800d036 <USBD_GetString>
  return USBD_StrDesc;
 80154a6:	4b02      	ldr	r3, [pc, #8]	; (80154b0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80154a8:	4618      	mov	r0, r3
 80154aa:	3708      	adds	r7, #8
 80154ac:	46bd      	mov	sp, r7
 80154ae:	bd80      	pop	{r7, pc}
 80154b0:	200096d8 	.word	0x200096d8
 80154b4:	080160f8 	.word	0x080160f8

080154b8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80154b8:	b580      	push	{r7, lr}
 80154ba:	b082      	sub	sp, #8
 80154bc:	af00      	add	r7, sp, #0
 80154be:	4603      	mov	r3, r0
 80154c0:	6039      	str	r1, [r7, #0]
 80154c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80154c4:	683b      	ldr	r3, [r7, #0]
 80154c6:	221a      	movs	r2, #26
 80154c8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80154ca:	f000 f855 	bl	8015578 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80154ce:	4b02      	ldr	r3, [pc, #8]	; (80154d8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80154d0:	4618      	mov	r0, r3
 80154d2:	3708      	adds	r7, #8
 80154d4:	46bd      	mov	sp, r7
 80154d6:	bd80      	pop	{r7, pc}
 80154d8:	2000014c 	.word	0x2000014c

080154dc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80154dc:	b580      	push	{r7, lr}
 80154de:	b082      	sub	sp, #8
 80154e0:	af00      	add	r7, sp, #0
 80154e2:	4603      	mov	r3, r0
 80154e4:	6039      	str	r1, [r7, #0]
 80154e6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80154e8:	79fb      	ldrb	r3, [r7, #7]
 80154ea:	2b00      	cmp	r3, #0
 80154ec:	d105      	bne.n	80154fa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80154ee:	683a      	ldr	r2, [r7, #0]
 80154f0:	4907      	ldr	r1, [pc, #28]	; (8015510 <USBD_FS_ConfigStrDescriptor+0x34>)
 80154f2:	4808      	ldr	r0, [pc, #32]	; (8015514 <USBD_FS_ConfigStrDescriptor+0x38>)
 80154f4:	f7f7 fd9f 	bl	800d036 <USBD_GetString>
 80154f8:	e004      	b.n	8015504 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80154fa:	683a      	ldr	r2, [r7, #0]
 80154fc:	4904      	ldr	r1, [pc, #16]	; (8015510 <USBD_FS_ConfigStrDescriptor+0x34>)
 80154fe:	4805      	ldr	r0, [pc, #20]	; (8015514 <USBD_FS_ConfigStrDescriptor+0x38>)
 8015500:	f7f7 fd99 	bl	800d036 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015504:	4b02      	ldr	r3, [pc, #8]	; (8015510 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8015506:	4618      	mov	r0, r3
 8015508:	3708      	adds	r7, #8
 801550a:	46bd      	mov	sp, r7
 801550c:	bd80      	pop	{r7, pc}
 801550e:	bf00      	nop
 8015510:	200096d8 	.word	0x200096d8
 8015514:	0801610c 	.word	0x0801610c

08015518 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015518:	b580      	push	{r7, lr}
 801551a:	b082      	sub	sp, #8
 801551c:	af00      	add	r7, sp, #0
 801551e:	4603      	mov	r3, r0
 8015520:	6039      	str	r1, [r7, #0]
 8015522:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8015524:	79fb      	ldrb	r3, [r7, #7]
 8015526:	2b00      	cmp	r3, #0
 8015528:	d105      	bne.n	8015536 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801552a:	683a      	ldr	r2, [r7, #0]
 801552c:	4907      	ldr	r1, [pc, #28]	; (801554c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801552e:	4808      	ldr	r0, [pc, #32]	; (8015550 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8015530:	f7f7 fd81 	bl	800d036 <USBD_GetString>
 8015534:	e004      	b.n	8015540 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8015536:	683a      	ldr	r2, [r7, #0]
 8015538:	4904      	ldr	r1, [pc, #16]	; (801554c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801553a:	4805      	ldr	r0, [pc, #20]	; (8015550 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801553c:	f7f7 fd7b 	bl	800d036 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015540:	4b02      	ldr	r3, [pc, #8]	; (801554c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8015542:	4618      	mov	r0, r3
 8015544:	3708      	adds	r7, #8
 8015546:	46bd      	mov	sp, r7
 8015548:	bd80      	pop	{r7, pc}
 801554a:	bf00      	nop
 801554c:	200096d8 	.word	0x200096d8
 8015550:	08016118 	.word	0x08016118

08015554 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015554:	b480      	push	{r7}
 8015556:	b083      	sub	sp, #12
 8015558:	af00      	add	r7, sp, #0
 801555a:	4603      	mov	r3, r0
 801555c:	6039      	str	r1, [r7, #0]
 801555e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8015560:	683b      	ldr	r3, [r7, #0]
 8015562:	220c      	movs	r2, #12
 8015564:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8015566:	4b03      	ldr	r3, [pc, #12]	; (8015574 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8015568:	4618      	mov	r0, r3
 801556a:	370c      	adds	r7, #12
 801556c:	46bd      	mov	sp, r7
 801556e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015572:	4770      	bx	lr
 8015574:	2000013c 	.word	0x2000013c

08015578 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8015578:	b580      	push	{r7, lr}
 801557a:	b084      	sub	sp, #16
 801557c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801557e:	4b0f      	ldr	r3, [pc, #60]	; (80155bc <Get_SerialNum+0x44>)
 8015580:	681b      	ldr	r3, [r3, #0]
 8015582:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8015584:	4b0e      	ldr	r3, [pc, #56]	; (80155c0 <Get_SerialNum+0x48>)
 8015586:	681b      	ldr	r3, [r3, #0]
 8015588:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801558a:	4b0e      	ldr	r3, [pc, #56]	; (80155c4 <Get_SerialNum+0x4c>)
 801558c:	681b      	ldr	r3, [r3, #0]
 801558e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8015590:	68fa      	ldr	r2, [r7, #12]
 8015592:	687b      	ldr	r3, [r7, #4]
 8015594:	4413      	add	r3, r2
 8015596:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8015598:	68fb      	ldr	r3, [r7, #12]
 801559a:	2b00      	cmp	r3, #0
 801559c:	d009      	beq.n	80155b2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801559e:	2208      	movs	r2, #8
 80155a0:	4909      	ldr	r1, [pc, #36]	; (80155c8 <Get_SerialNum+0x50>)
 80155a2:	68f8      	ldr	r0, [r7, #12]
 80155a4:	f000 f814 	bl	80155d0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80155a8:	2204      	movs	r2, #4
 80155aa:	4908      	ldr	r1, [pc, #32]	; (80155cc <Get_SerialNum+0x54>)
 80155ac:	68b8      	ldr	r0, [r7, #8]
 80155ae:	f000 f80f 	bl	80155d0 <IntToUnicode>
  }
}
 80155b2:	bf00      	nop
 80155b4:	3710      	adds	r7, #16
 80155b6:	46bd      	mov	sp, r7
 80155b8:	bd80      	pop	{r7, pc}
 80155ba:	bf00      	nop
 80155bc:	1ff0f420 	.word	0x1ff0f420
 80155c0:	1ff0f424 	.word	0x1ff0f424
 80155c4:	1ff0f428 	.word	0x1ff0f428
 80155c8:	2000014e 	.word	0x2000014e
 80155cc:	2000015e 	.word	0x2000015e

080155d0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80155d0:	b480      	push	{r7}
 80155d2:	b087      	sub	sp, #28
 80155d4:	af00      	add	r7, sp, #0
 80155d6:	60f8      	str	r0, [r7, #12]
 80155d8:	60b9      	str	r1, [r7, #8]
 80155da:	4613      	mov	r3, r2
 80155dc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80155de:	2300      	movs	r3, #0
 80155e0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80155e2:	2300      	movs	r3, #0
 80155e4:	75fb      	strb	r3, [r7, #23]
 80155e6:	e027      	b.n	8015638 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80155e8:	68fb      	ldr	r3, [r7, #12]
 80155ea:	0f1b      	lsrs	r3, r3, #28
 80155ec:	2b09      	cmp	r3, #9
 80155ee:	d80b      	bhi.n	8015608 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80155f0:	68fb      	ldr	r3, [r7, #12]
 80155f2:	0f1b      	lsrs	r3, r3, #28
 80155f4:	b2da      	uxtb	r2, r3
 80155f6:	7dfb      	ldrb	r3, [r7, #23]
 80155f8:	005b      	lsls	r3, r3, #1
 80155fa:	4619      	mov	r1, r3
 80155fc:	68bb      	ldr	r3, [r7, #8]
 80155fe:	440b      	add	r3, r1
 8015600:	3230      	adds	r2, #48	; 0x30
 8015602:	b2d2      	uxtb	r2, r2
 8015604:	701a      	strb	r2, [r3, #0]
 8015606:	e00a      	b.n	801561e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8015608:	68fb      	ldr	r3, [r7, #12]
 801560a:	0f1b      	lsrs	r3, r3, #28
 801560c:	b2da      	uxtb	r2, r3
 801560e:	7dfb      	ldrb	r3, [r7, #23]
 8015610:	005b      	lsls	r3, r3, #1
 8015612:	4619      	mov	r1, r3
 8015614:	68bb      	ldr	r3, [r7, #8]
 8015616:	440b      	add	r3, r1
 8015618:	3237      	adds	r2, #55	; 0x37
 801561a:	b2d2      	uxtb	r2, r2
 801561c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801561e:	68fb      	ldr	r3, [r7, #12]
 8015620:	011b      	lsls	r3, r3, #4
 8015622:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8015624:	7dfb      	ldrb	r3, [r7, #23]
 8015626:	005b      	lsls	r3, r3, #1
 8015628:	3301      	adds	r3, #1
 801562a:	68ba      	ldr	r2, [r7, #8]
 801562c:	4413      	add	r3, r2
 801562e:	2200      	movs	r2, #0
 8015630:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8015632:	7dfb      	ldrb	r3, [r7, #23]
 8015634:	3301      	adds	r3, #1
 8015636:	75fb      	strb	r3, [r7, #23]
 8015638:	7dfa      	ldrb	r2, [r7, #23]
 801563a:	79fb      	ldrb	r3, [r7, #7]
 801563c:	429a      	cmp	r2, r3
 801563e:	d3d3      	bcc.n	80155e8 <IntToUnicode+0x18>
  }
}
 8015640:	bf00      	nop
 8015642:	371c      	adds	r7, #28
 8015644:	46bd      	mov	sp, r7
 8015646:	f85d 7b04 	ldr.w	r7, [sp], #4
 801564a:	4770      	bx	lr

0801564c <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 801564c:	b480      	push	{r7}
 801564e:	b083      	sub	sp, #12
 8015650:	af00      	add	r7, sp, #0
 8015652:	4603      	mov	r3, r0
 8015654:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 8015656:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8015658:	4618      	mov	r0, r3
 801565a:	370c      	adds	r7, #12
 801565c:	46bd      	mov	sp, r7
 801565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015662:	4770      	bx	lr

08015664 <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 8015664:	b580      	push	{r7, lr}
 8015666:	b084      	sub	sp, #16
 8015668:	af00      	add	r7, sp, #0
 801566a:	4603      	mov	r3, r0
 801566c:	60b9      	str	r1, [r7, #8]
 801566e:	607a      	str	r2, [r7, #4]
 8015670:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  if(HAL_SD_GetCardInfo(&hsd1,&SDCardInfo)==HAL_OK){
 8015672:	490b      	ldr	r1, [pc, #44]	; (80156a0 <STORAGE_GetCapacity_FS+0x3c>)
 8015674:	480b      	ldr	r0, [pc, #44]	; (80156a4 <STORAGE_GetCapacity_FS+0x40>)
 8015676:	f7f1 f8e5 	bl	8006844 <HAL_SD_GetCardInfo>
 801567a:	4603      	mov	r3, r0
 801567c:	2b00      	cmp	r3, #0
 801567e:	d10a      	bne.n	8015696 <STORAGE_GetCapacity_FS+0x32>
  *block_num  = SDCardInfo.LogBlockNbr;
 8015680:	4b07      	ldr	r3, [pc, #28]	; (80156a0 <STORAGE_GetCapacity_FS+0x3c>)
 8015682:	699a      	ldr	r2, [r3, #24]
 8015684:	68bb      	ldr	r3, [r7, #8]
 8015686:	601a      	str	r2, [r3, #0]
  *block_size = SDCardInfo.LogBlockSize;
 8015688:	4b05      	ldr	r3, [pc, #20]	; (80156a0 <STORAGE_GetCapacity_FS+0x3c>)
 801568a:	69db      	ldr	r3, [r3, #28]
 801568c:	b29a      	uxth	r2, r3
 801568e:	687b      	ldr	r3, [r7, #4]
 8015690:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 8015692:	2300      	movs	r3, #0
 8015694:	e7ff      	b.n	8015696 <STORAGE_GetCapacity_FS+0x32>
  }
  /* USER CODE END 3 */
}
 8015696:	4618      	mov	r0, r3
 8015698:	3710      	adds	r7, #16
 801569a:	46bd      	mov	sp, r7
 801569c:	bd80      	pop	{r7, pc}
 801569e:	bf00      	nop
 80156a0:	20004d10 	.word	0x20004d10
 80156a4:	20004c8c 	.word	0x20004c8c

080156a8 <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 80156a8:	b480      	push	{r7}
 80156aa:	b083      	sub	sp, #12
 80156ac:	af00      	add	r7, sp, #0
 80156ae:	4603      	mov	r3, r0
 80156b0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80156b2:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80156b4:	4618      	mov	r0, r3
 80156b6:	370c      	adds	r7, #12
 80156b8:	46bd      	mov	sp, r7
 80156ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156be:	4770      	bx	lr

080156c0 <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 80156c0:	b480      	push	{r7}
 80156c2:	b083      	sub	sp, #12
 80156c4:	af00      	add	r7, sp, #0
 80156c6:	4603      	mov	r3, r0
 80156c8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 80156ca:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80156cc:	4618      	mov	r0, r3
 80156ce:	370c      	adds	r7, #12
 80156d0:	46bd      	mov	sp, r7
 80156d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156d6:	4770      	bx	lr

080156d8 <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 80156d8:	b580      	push	{r7, lr}
 80156da:	b086      	sub	sp, #24
 80156dc:	af02      	add	r7, sp, #8
 80156de:	60b9      	str	r1, [r7, #8]
 80156e0:	607a      	str	r2, [r7, #4]
 80156e2:	461a      	mov	r2, r3
 80156e4:	4603      	mov	r3, r0
 80156e6:	73fb      	strb	r3, [r7, #15]
 80156e8:	4613      	mov	r3, r2
 80156ea:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
 if(HAL_SD_ReadBlocks(&hsd1,buf,blk_addr,blk_len,10)==HAL_OK){
 80156ec:	89ba      	ldrh	r2, [r7, #12]
 80156ee:	230a      	movs	r3, #10
 80156f0:	9300      	str	r3, [sp, #0]
 80156f2:	4613      	mov	r3, r2
 80156f4:	687a      	ldr	r2, [r7, #4]
 80156f6:	68b9      	ldr	r1, [r7, #8]
 80156f8:	4805      	ldr	r0, [pc, #20]	; (8015710 <STORAGE_Read_FS+0x38>)
 80156fa:	f7f0 f80d 	bl	8005718 <HAL_SD_ReadBlocks>
 80156fe:	4603      	mov	r3, r0
 8015700:	2b00      	cmp	r3, #0
 8015702:	d101      	bne.n	8015708 <STORAGE_Read_FS+0x30>

  return (USBD_OK);
 8015704:	2300      	movs	r3, #0
 8015706:	e7ff      	b.n	8015708 <STORAGE_Read_FS+0x30>
 }
  /* USER CODE END 6 */
}
 8015708:	4618      	mov	r0, r3
 801570a:	3710      	adds	r7, #16
 801570c:	46bd      	mov	sp, r7
 801570e:	bd80      	pop	{r7, pc}
 8015710:	20004c8c 	.word	0x20004c8c

08015714 <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8015714:	b580      	push	{r7, lr}
 8015716:	b086      	sub	sp, #24
 8015718:	af02      	add	r7, sp, #8
 801571a:	60b9      	str	r1, [r7, #8]
 801571c:	607a      	str	r2, [r7, #4]
 801571e:	461a      	mov	r2, r3
 8015720:	4603      	mov	r3, r0
 8015722:	73fb      	strb	r3, [r7, #15]
 8015724:	4613      	mov	r3, r2
 8015726:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
	if(HAL_SD_WriteBlocks(&hsd1,buf,blk_addr,blk_len,10)==HAL_OK){
 8015728:	89ba      	ldrh	r2, [r7, #12]
 801572a:	230a      	movs	r3, #10
 801572c:	9300      	str	r3, [sp, #0]
 801572e:	4613      	mov	r3, r2
 8015730:	687a      	ldr	r2, [r7, #4]
 8015732:	68b9      	ldr	r1, [r7, #8]
 8015734:	4805      	ldr	r0, [pc, #20]	; (801574c <STORAGE_Write_FS+0x38>)
 8015736:	f7f0 f9e7 	bl	8005b08 <HAL_SD_WriteBlocks>
 801573a:	4603      	mov	r3, r0
 801573c:	2b00      	cmp	r3, #0
 801573e:	d101      	bne.n	8015744 <STORAGE_Write_FS+0x30>

	  return (USBD_OK);
 8015740:	2300      	movs	r3, #0
 8015742:	e7ff      	b.n	8015744 <STORAGE_Write_FS+0x30>
	 }
  /* USER CODE END 7 */
}
 8015744:	4618      	mov	r0, r3
 8015746:	3710      	adds	r7, #16
 8015748:	46bd      	mov	sp, r7
 801574a:	bd80      	pop	{r7, pc}
 801574c:	20004c8c 	.word	0x20004c8c

08015750 <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 8015750:	b480      	push	{r7}
 8015752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 8015754:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8015756:	4618      	mov	r0, r3
 8015758:	46bd      	mov	sp, r7
 801575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801575e:	4770      	bx	lr

08015760 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8015760:	b580      	push	{r7, lr}
 8015762:	b08a      	sub	sp, #40	; 0x28
 8015764:	af00      	add	r7, sp, #0
 8015766:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015768:	f107 0314 	add.w	r3, r7, #20
 801576c:	2200      	movs	r2, #0
 801576e:	601a      	str	r2, [r3, #0]
 8015770:	605a      	str	r2, [r3, #4]
 8015772:	609a      	str	r2, [r3, #8]
 8015774:	60da      	str	r2, [r3, #12]
 8015776:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8015778:	687b      	ldr	r3, [r7, #4]
 801577a:	681b      	ldr	r3, [r3, #0]
 801577c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8015780:	d13c      	bne.n	80157fc <HAL_PCD_MspInit+0x9c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8015782:	4b20      	ldr	r3, [pc, #128]	; (8015804 <HAL_PCD_MspInit+0xa4>)
 8015784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015786:	4a1f      	ldr	r2, [pc, #124]	; (8015804 <HAL_PCD_MspInit+0xa4>)
 8015788:	f043 0301 	orr.w	r3, r3, #1
 801578c:	6313      	str	r3, [r2, #48]	; 0x30
 801578e:	4b1d      	ldr	r3, [pc, #116]	; (8015804 <HAL_PCD_MspInit+0xa4>)
 8015790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015792:	f003 0301 	and.w	r3, r3, #1
 8015796:	613b      	str	r3, [r7, #16]
 8015798:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_DM_Pin|USB_DP_Pin;
 801579a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801579e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80157a0:	2302      	movs	r3, #2
 80157a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80157a4:	2300      	movs	r3, #0
 80157a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80157a8:	2303      	movs	r3, #3
 80157aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80157ac:	230a      	movs	r3, #10
 80157ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80157b0:	f107 0314 	add.w	r3, r7, #20
 80157b4:	4619      	mov	r1, r3
 80157b6:	4814      	ldr	r0, [pc, #80]	; (8015808 <HAL_PCD_MspInit+0xa8>)
 80157b8:	f7ed f9d8 	bl	8002b6c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80157bc:	4b11      	ldr	r3, [pc, #68]	; (8015804 <HAL_PCD_MspInit+0xa4>)
 80157be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80157c0:	4a10      	ldr	r2, [pc, #64]	; (8015804 <HAL_PCD_MspInit+0xa4>)
 80157c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80157c6:	6353      	str	r3, [r2, #52]	; 0x34
 80157c8:	4b0e      	ldr	r3, [pc, #56]	; (8015804 <HAL_PCD_MspInit+0xa4>)
 80157ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80157cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80157d0:	60fb      	str	r3, [r7, #12]
 80157d2:	68fb      	ldr	r3, [r7, #12]
 80157d4:	4b0b      	ldr	r3, [pc, #44]	; (8015804 <HAL_PCD_MspInit+0xa4>)
 80157d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80157d8:	4a0a      	ldr	r2, [pc, #40]	; (8015804 <HAL_PCD_MspInit+0xa4>)
 80157da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80157de:	6453      	str	r3, [r2, #68]	; 0x44
 80157e0:	4b08      	ldr	r3, [pc, #32]	; (8015804 <HAL_PCD_MspInit+0xa4>)
 80157e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80157e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80157e8:	60bb      	str	r3, [r7, #8]
 80157ea:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 9, 0);
 80157ec:	2200      	movs	r2, #0
 80157ee:	2109      	movs	r1, #9
 80157f0:	2043      	movs	r0, #67	; 0x43
 80157f2:	f7ec fded 	bl	80023d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80157f6:	2043      	movs	r0, #67	; 0x43
 80157f8:	f7ec fe06 	bl	8002408 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80157fc:	bf00      	nop
 80157fe:	3728      	adds	r7, #40	; 0x28
 8015800:	46bd      	mov	sp, r7
 8015802:	bd80      	pop	{r7, pc}
 8015804:	40023800 	.word	0x40023800
 8015808:	40020000 	.word	0x40020000

0801580c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801580c:	b580      	push	{r7, lr}
 801580e:	b082      	sub	sp, #8
 8015810:	af00      	add	r7, sp, #0
 8015812:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8015814:	687b      	ldr	r3, [r7, #4]
 8015816:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 801581a:	687b      	ldr	r3, [r7, #4]
 801581c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8015820:	4619      	mov	r1, r3
 8015822:	4610      	mov	r0, r2
 8015824:	f7f6 fc5b 	bl	800c0de <USBD_LL_SetupStage>
}
 8015828:	bf00      	nop
 801582a:	3708      	adds	r7, #8
 801582c:	46bd      	mov	sp, r7
 801582e:	bd80      	pop	{r7, pc}

08015830 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015830:	b580      	push	{r7, lr}
 8015832:	b082      	sub	sp, #8
 8015834:	af00      	add	r7, sp, #0
 8015836:	6078      	str	r0, [r7, #4]
 8015838:	460b      	mov	r3, r1
 801583a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801583c:	687b      	ldr	r3, [r7, #4]
 801583e:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
 8015842:	78fa      	ldrb	r2, [r7, #3]
 8015844:	6879      	ldr	r1, [r7, #4]
 8015846:	4613      	mov	r3, r2
 8015848:	00db      	lsls	r3, r3, #3
 801584a:	1a9b      	subs	r3, r3, r2
 801584c:	009b      	lsls	r3, r3, #2
 801584e:	440b      	add	r3, r1
 8015850:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8015854:	681a      	ldr	r2, [r3, #0]
 8015856:	78fb      	ldrb	r3, [r7, #3]
 8015858:	4619      	mov	r1, r3
 801585a:	f7f6 fc93 	bl	800c184 <USBD_LL_DataOutStage>
}
 801585e:	bf00      	nop
 8015860:	3708      	adds	r7, #8
 8015862:	46bd      	mov	sp, r7
 8015864:	bd80      	pop	{r7, pc}

08015866 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015866:	b580      	push	{r7, lr}
 8015868:	b082      	sub	sp, #8
 801586a:	af00      	add	r7, sp, #0
 801586c:	6078      	str	r0, [r7, #4]
 801586e:	460b      	mov	r3, r1
 8015870:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8015872:	687b      	ldr	r3, [r7, #4]
 8015874:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
 8015878:	78fa      	ldrb	r2, [r7, #3]
 801587a:	6879      	ldr	r1, [r7, #4]
 801587c:	4613      	mov	r3, r2
 801587e:	00db      	lsls	r3, r3, #3
 8015880:	1a9b      	subs	r3, r3, r2
 8015882:	009b      	lsls	r3, r3, #2
 8015884:	440b      	add	r3, r1
 8015886:	3348      	adds	r3, #72	; 0x48
 8015888:	681a      	ldr	r2, [r3, #0]
 801588a:	78fb      	ldrb	r3, [r7, #3]
 801588c:	4619      	mov	r1, r3
 801588e:	f7f6 fcdc 	bl	800c24a <USBD_LL_DataInStage>
}
 8015892:	bf00      	nop
 8015894:	3708      	adds	r7, #8
 8015896:	46bd      	mov	sp, r7
 8015898:	bd80      	pop	{r7, pc}

0801589a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801589a:	b580      	push	{r7, lr}
 801589c:	b082      	sub	sp, #8
 801589e:	af00      	add	r7, sp, #0
 80158a0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80158a2:	687b      	ldr	r3, [r7, #4]
 80158a4:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80158a8:	4618      	mov	r0, r3
 80158aa:	f7f6 fde0 	bl	800c46e <USBD_LL_SOF>
}
 80158ae:	bf00      	nop
 80158b0:	3708      	adds	r7, #8
 80158b2:	46bd      	mov	sp, r7
 80158b4:	bd80      	pop	{r7, pc}

080158b6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 80158b6:	b580      	push	{r7, lr}
 80158b8:	b084      	sub	sp, #16
 80158ba:	af00      	add	r7, sp, #0
 80158bc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80158be:	2301      	movs	r3, #1
 80158c0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80158c2:	687b      	ldr	r3, [r7, #4]
 80158c4:	68db      	ldr	r3, [r3, #12]
 80158c6:	2b00      	cmp	r3, #0
 80158c8:	d102      	bne.n	80158d0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80158ca:	2300      	movs	r3, #0
 80158cc:	73fb      	strb	r3, [r7, #15]
 80158ce:	e008      	b.n	80158e2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80158d0:	687b      	ldr	r3, [r7, #4]
 80158d2:	68db      	ldr	r3, [r3, #12]
 80158d4:	2b02      	cmp	r3, #2
 80158d6:	d102      	bne.n	80158de <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80158d8:	2301      	movs	r3, #1
 80158da:	73fb      	strb	r3, [r7, #15]
 80158dc:	e001      	b.n	80158e2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80158de:	f7eb fb1f 	bl	8000f20 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80158e2:	687b      	ldr	r3, [r7, #4]
 80158e4:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80158e8:	7bfa      	ldrb	r2, [r7, #15]
 80158ea:	4611      	mov	r1, r2
 80158ec:	4618      	mov	r0, r3
 80158ee:	f7f6 fd83 	bl	800c3f8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80158f2:	687b      	ldr	r3, [r7, #4]
 80158f4:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80158f8:	4618      	mov	r0, r3
 80158fa:	f7f6 fd3c 	bl	800c376 <USBD_LL_Reset>
}
 80158fe:	bf00      	nop
 8015900:	3710      	adds	r7, #16
 8015902:	46bd      	mov	sp, r7
 8015904:	bd80      	pop	{r7, pc}
	...

08015908 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015908:	b580      	push	{r7, lr}
 801590a:	b082      	sub	sp, #8
 801590c:	af00      	add	r7, sp, #0
 801590e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8015910:	687b      	ldr	r3, [r7, #4]
 8015912:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8015916:	4618      	mov	r0, r3
 8015918:	f7f6 fd7e 	bl	800c418 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801591c:	687b      	ldr	r3, [r7, #4]
 801591e:	681b      	ldr	r3, [r3, #0]
 8015920:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8015924:	681b      	ldr	r3, [r3, #0]
 8015926:	687a      	ldr	r2, [r7, #4]
 8015928:	6812      	ldr	r2, [r2, #0]
 801592a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801592e:	f043 0301 	orr.w	r3, r3, #1
 8015932:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8015934:	687b      	ldr	r3, [r7, #4]
 8015936:	6a1b      	ldr	r3, [r3, #32]
 8015938:	2b00      	cmp	r3, #0
 801593a:	d005      	beq.n	8015948 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801593c:	4b04      	ldr	r3, [pc, #16]	; (8015950 <HAL_PCD_SuspendCallback+0x48>)
 801593e:	691b      	ldr	r3, [r3, #16]
 8015940:	4a03      	ldr	r2, [pc, #12]	; (8015950 <HAL_PCD_SuspendCallback+0x48>)
 8015942:	f043 0306 	orr.w	r3, r3, #6
 8015946:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8015948:	bf00      	nop
 801594a:	3708      	adds	r7, #8
 801594c:	46bd      	mov	sp, r7
 801594e:	bd80      	pop	{r7, pc}
 8015950:	e000ed00 	.word	0xe000ed00

08015954 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015954:	b580      	push	{r7, lr}
 8015956:	b082      	sub	sp, #8
 8015958:	af00      	add	r7, sp, #0
 801595a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801595c:	687b      	ldr	r3, [r7, #4]
 801595e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8015962:	4618      	mov	r0, r3
 8015964:	f7f6 fd6d 	bl	800c442 <USBD_LL_Resume>
}
 8015968:	bf00      	nop
 801596a:	3708      	adds	r7, #8
 801596c:	46bd      	mov	sp, r7
 801596e:	bd80      	pop	{r7, pc}

08015970 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015970:	b580      	push	{r7, lr}
 8015972:	b082      	sub	sp, #8
 8015974:	af00      	add	r7, sp, #0
 8015976:	6078      	str	r0, [r7, #4]
 8015978:	460b      	mov	r3, r1
 801597a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801597c:	687b      	ldr	r3, [r7, #4]
 801597e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8015982:	78fa      	ldrb	r2, [r7, #3]
 8015984:	4611      	mov	r1, r2
 8015986:	4618      	mov	r0, r3
 8015988:	f7f6 fd98 	bl	800c4bc <USBD_LL_IsoOUTIncomplete>
}
 801598c:	bf00      	nop
 801598e:	3708      	adds	r7, #8
 8015990:	46bd      	mov	sp, r7
 8015992:	bd80      	pop	{r7, pc}

08015994 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015994:	b580      	push	{r7, lr}
 8015996:	b082      	sub	sp, #8
 8015998:	af00      	add	r7, sp, #0
 801599a:	6078      	str	r0, [r7, #4]
 801599c:	460b      	mov	r3, r1
 801599e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80159a0:	687b      	ldr	r3, [r7, #4]
 80159a2:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80159a6:	78fa      	ldrb	r2, [r7, #3]
 80159a8:	4611      	mov	r1, r2
 80159aa:	4618      	mov	r0, r3
 80159ac:	f7f6 fd79 	bl	800c4a2 <USBD_LL_IsoINIncomplete>
}
 80159b0:	bf00      	nop
 80159b2:	3708      	adds	r7, #8
 80159b4:	46bd      	mov	sp, r7
 80159b6:	bd80      	pop	{r7, pc}

080159b8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80159b8:	b580      	push	{r7, lr}
 80159ba:	b082      	sub	sp, #8
 80159bc:	af00      	add	r7, sp, #0
 80159be:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80159c0:	687b      	ldr	r3, [r7, #4]
 80159c2:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80159c6:	4618      	mov	r0, r3
 80159c8:	f7f6 fd85 	bl	800c4d6 <USBD_LL_DevConnected>
}
 80159cc:	bf00      	nop
 80159ce:	3708      	adds	r7, #8
 80159d0:	46bd      	mov	sp, r7
 80159d2:	bd80      	pop	{r7, pc}

080159d4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80159d4:	b580      	push	{r7, lr}
 80159d6:	b082      	sub	sp, #8
 80159d8:	af00      	add	r7, sp, #0
 80159da:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80159dc:	687b      	ldr	r3, [r7, #4]
 80159de:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80159e2:	4618      	mov	r0, r3
 80159e4:	f7f6 fd82 	bl	800c4ec <USBD_LL_DevDisconnected>
}
 80159e8:	bf00      	nop
 80159ea:	3708      	adds	r7, #8
 80159ec:	46bd      	mov	sp, r7
 80159ee:	bd80      	pop	{r7, pc}

080159f0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80159f0:	b580      	push	{r7, lr}
 80159f2:	b082      	sub	sp, #8
 80159f4:	af00      	add	r7, sp, #0
 80159f6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80159f8:	687b      	ldr	r3, [r7, #4]
 80159fa:	781b      	ldrb	r3, [r3, #0]
 80159fc:	2b00      	cmp	r3, #0
 80159fe:	d13c      	bne.n	8015a7a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8015a00:	4a20      	ldr	r2, [pc, #128]	; (8015a84 <USBD_LL_Init+0x94>)
 8015a02:	687b      	ldr	r3, [r7, #4]
 8015a04:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
  pdev->pData = &hpcd_USB_OTG_FS;
 8015a08:	687b      	ldr	r3, [r7, #4]
 8015a0a:	4a1e      	ldr	r2, [pc, #120]	; (8015a84 <USBD_LL_Init+0x94>)
 8015a0c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8015a10:	4b1c      	ldr	r3, [pc, #112]	; (8015a84 <USBD_LL_Init+0x94>)
 8015a12:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8015a16:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8015a18:	4b1a      	ldr	r3, [pc, #104]	; (8015a84 <USBD_LL_Init+0x94>)
 8015a1a:	2206      	movs	r2, #6
 8015a1c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8015a1e:	4b19      	ldr	r3, [pc, #100]	; (8015a84 <USBD_LL_Init+0x94>)
 8015a20:	2202      	movs	r2, #2
 8015a22:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8015a24:	4b17      	ldr	r3, [pc, #92]	; (8015a84 <USBD_LL_Init+0x94>)
 8015a26:	2200      	movs	r2, #0
 8015a28:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8015a2a:	4b16      	ldr	r3, [pc, #88]	; (8015a84 <USBD_LL_Init+0x94>)
 8015a2c:	2202      	movs	r2, #2
 8015a2e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8015a30:	4b14      	ldr	r3, [pc, #80]	; (8015a84 <USBD_LL_Init+0x94>)
 8015a32:	2200      	movs	r2, #0
 8015a34:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8015a36:	4b13      	ldr	r3, [pc, #76]	; (8015a84 <USBD_LL_Init+0x94>)
 8015a38:	2200      	movs	r2, #0
 8015a3a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8015a3c:	4b11      	ldr	r3, [pc, #68]	; (8015a84 <USBD_LL_Init+0x94>)
 8015a3e:	2200      	movs	r2, #0
 8015a40:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8015a42:	4b10      	ldr	r3, [pc, #64]	; (8015a84 <USBD_LL_Init+0x94>)
 8015a44:	2200      	movs	r2, #0
 8015a46:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8015a48:	4b0e      	ldr	r3, [pc, #56]	; (8015a84 <USBD_LL_Init+0x94>)
 8015a4a:	2200      	movs	r2, #0
 8015a4c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8015a4e:	480d      	ldr	r0, [pc, #52]	; (8015a84 <USBD_LL_Init+0x94>)
 8015a50:	f7ed fa81 	bl	8002f56 <HAL_PCD_Init>
 8015a54:	4603      	mov	r3, r0
 8015a56:	2b00      	cmp	r3, #0
 8015a58:	d001      	beq.n	8015a5e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8015a5a:	f7eb fa61 	bl	8000f20 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8015a5e:	2180      	movs	r1, #128	; 0x80
 8015a60:	4808      	ldr	r0, [pc, #32]	; (8015a84 <USBD_LL_Init+0x94>)
 8015a62:	f7ee fc2e 	bl	80042c2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8015a66:	2240      	movs	r2, #64	; 0x40
 8015a68:	2100      	movs	r1, #0
 8015a6a:	4806      	ldr	r0, [pc, #24]	; (8015a84 <USBD_LL_Init+0x94>)
 8015a6c:	f7ee fbe2 	bl	8004234 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8015a70:	2280      	movs	r2, #128	; 0x80
 8015a72:	2101      	movs	r1, #1
 8015a74:	4803      	ldr	r0, [pc, #12]	; (8015a84 <USBD_LL_Init+0x94>)
 8015a76:	f7ee fbdd 	bl	8004234 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8015a7a:	2300      	movs	r3, #0
}
 8015a7c:	4618      	mov	r0, r3
 8015a7e:	3708      	adds	r7, #8
 8015a80:	46bd      	mov	sp, r7
 8015a82:	bd80      	pop	{r7, pc}
 8015a84:	200098d8 	.word	0x200098d8

08015a88 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8015a88:	b580      	push	{r7, lr}
 8015a8a:	b084      	sub	sp, #16
 8015a8c:	af00      	add	r7, sp, #0
 8015a8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015a90:	2300      	movs	r3, #0
 8015a92:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015a94:	2300      	movs	r3, #0
 8015a96:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8015a98:	687b      	ldr	r3, [r7, #4]
 8015a9a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015a9e:	4618      	mov	r0, r3
 8015aa0:	f7ed fb7d 	bl	800319e <HAL_PCD_Start>
 8015aa4:	4603      	mov	r3, r0
 8015aa6:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 8015aa8:	7bfb      	ldrb	r3, [r7, #15]
 8015aaa:	4618      	mov	r0, r3
 8015aac:	f000 f99e 	bl	8015dec <USBD_Get_USB_Status>
 8015ab0:	4603      	mov	r3, r0
 8015ab2:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8015ab4:	7bbb      	ldrb	r3, [r7, #14]
}
 8015ab6:	4618      	mov	r0, r3
 8015ab8:	3710      	adds	r7, #16
 8015aba:	46bd      	mov	sp, r7
 8015abc:	bd80      	pop	{r7, pc}

08015abe <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8015abe:	b580      	push	{r7, lr}
 8015ac0:	b084      	sub	sp, #16
 8015ac2:	af00      	add	r7, sp, #0
 8015ac4:	6078      	str	r0, [r7, #4]
 8015ac6:	4608      	mov	r0, r1
 8015ac8:	4611      	mov	r1, r2
 8015aca:	461a      	mov	r2, r3
 8015acc:	4603      	mov	r3, r0
 8015ace:	70fb      	strb	r3, [r7, #3]
 8015ad0:	460b      	mov	r3, r1
 8015ad2:	70bb      	strb	r3, [r7, #2]
 8015ad4:	4613      	mov	r3, r2
 8015ad6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015ad8:	2300      	movs	r3, #0
 8015ada:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015adc:	2300      	movs	r3, #0
 8015ade:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8015ae0:	687b      	ldr	r3, [r7, #4]
 8015ae2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015ae6:	78bb      	ldrb	r3, [r7, #2]
 8015ae8:	883a      	ldrh	r2, [r7, #0]
 8015aea:	78f9      	ldrb	r1, [r7, #3]
 8015aec:	f7ed ff7d 	bl	80039ea <HAL_PCD_EP_Open>
 8015af0:	4603      	mov	r3, r0
 8015af2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015af4:	7bfb      	ldrb	r3, [r7, #15]
 8015af6:	4618      	mov	r0, r3
 8015af8:	f000 f978 	bl	8015dec <USBD_Get_USB_Status>
 8015afc:	4603      	mov	r3, r0
 8015afe:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8015b00:	7bbb      	ldrb	r3, [r7, #14]
}
 8015b02:	4618      	mov	r0, r3
 8015b04:	3710      	adds	r7, #16
 8015b06:	46bd      	mov	sp, r7
 8015b08:	bd80      	pop	{r7, pc}

08015b0a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015b0a:	b580      	push	{r7, lr}
 8015b0c:	b084      	sub	sp, #16
 8015b0e:	af00      	add	r7, sp, #0
 8015b10:	6078      	str	r0, [r7, #4]
 8015b12:	460b      	mov	r3, r1
 8015b14:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015b16:	2300      	movs	r3, #0
 8015b18:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015b1a:	2300      	movs	r3, #0
 8015b1c:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8015b1e:	687b      	ldr	r3, [r7, #4]
 8015b20:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015b24:	78fa      	ldrb	r2, [r7, #3]
 8015b26:	4611      	mov	r1, r2
 8015b28:	4618      	mov	r0, r3
 8015b2a:	f7ed ffc6 	bl	8003aba <HAL_PCD_EP_Close>
 8015b2e:	4603      	mov	r3, r0
 8015b30:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 8015b32:	7bfb      	ldrb	r3, [r7, #15]
 8015b34:	4618      	mov	r0, r3
 8015b36:	f000 f959 	bl	8015dec <USBD_Get_USB_Status>
 8015b3a:	4603      	mov	r3, r0
 8015b3c:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8015b3e:	7bbb      	ldrb	r3, [r7, #14]
}
 8015b40:	4618      	mov	r0, r3
 8015b42:	3710      	adds	r7, #16
 8015b44:	46bd      	mov	sp, r7
 8015b46:	bd80      	pop	{r7, pc}

08015b48 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015b48:	b580      	push	{r7, lr}
 8015b4a:	b084      	sub	sp, #16
 8015b4c:	af00      	add	r7, sp, #0
 8015b4e:	6078      	str	r0, [r7, #4]
 8015b50:	460b      	mov	r3, r1
 8015b52:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015b54:	2300      	movs	r3, #0
 8015b56:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015b58:	2300      	movs	r3, #0
 8015b5a:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 8015b5c:	687b      	ldr	r3, [r7, #4]
 8015b5e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015b62:	78fa      	ldrb	r2, [r7, #3]
 8015b64:	4611      	mov	r1, r2
 8015b66:	4618      	mov	r0, r3
 8015b68:	f7ee f958 	bl	8003e1c <HAL_PCD_EP_Flush>
 8015b6c:	4603      	mov	r3, r0
 8015b6e:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 8015b70:	7bfb      	ldrb	r3, [r7, #15]
 8015b72:	4618      	mov	r0, r3
 8015b74:	f000 f93a 	bl	8015dec <USBD_Get_USB_Status>
 8015b78:	4603      	mov	r3, r0
 8015b7a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8015b7c:	7bbb      	ldrb	r3, [r7, #14]
}
 8015b7e:	4618      	mov	r0, r3
 8015b80:	3710      	adds	r7, #16
 8015b82:	46bd      	mov	sp, r7
 8015b84:	bd80      	pop	{r7, pc}

08015b86 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015b86:	b580      	push	{r7, lr}
 8015b88:	b084      	sub	sp, #16
 8015b8a:	af00      	add	r7, sp, #0
 8015b8c:	6078      	str	r0, [r7, #4]
 8015b8e:	460b      	mov	r3, r1
 8015b90:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015b92:	2300      	movs	r3, #0
 8015b94:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015b96:	2300      	movs	r3, #0
 8015b98:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8015b9a:	687b      	ldr	r3, [r7, #4]
 8015b9c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015ba0:	78fa      	ldrb	r2, [r7, #3]
 8015ba2:	4611      	mov	r1, r2
 8015ba4:	4618      	mov	r0, r3
 8015ba6:	f7ee f87f 	bl	8003ca8 <HAL_PCD_EP_SetStall>
 8015baa:	4603      	mov	r3, r0
 8015bac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015bae:	7bfb      	ldrb	r3, [r7, #15]
 8015bb0:	4618      	mov	r0, r3
 8015bb2:	f000 f91b 	bl	8015dec <USBD_Get_USB_Status>
 8015bb6:	4603      	mov	r3, r0
 8015bb8:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8015bba:	7bbb      	ldrb	r3, [r7, #14]
}
 8015bbc:	4618      	mov	r0, r3
 8015bbe:	3710      	adds	r7, #16
 8015bc0:	46bd      	mov	sp, r7
 8015bc2:	bd80      	pop	{r7, pc}

08015bc4 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015bc4:	b580      	push	{r7, lr}
 8015bc6:	b084      	sub	sp, #16
 8015bc8:	af00      	add	r7, sp, #0
 8015bca:	6078      	str	r0, [r7, #4]
 8015bcc:	460b      	mov	r3, r1
 8015bce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015bd0:	2300      	movs	r3, #0
 8015bd2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015bd4:	2300      	movs	r3, #0
 8015bd6:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8015bd8:	687b      	ldr	r3, [r7, #4]
 8015bda:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015bde:	78fa      	ldrb	r2, [r7, #3]
 8015be0:	4611      	mov	r1, r2
 8015be2:	4618      	mov	r0, r3
 8015be4:	f7ee f8c4 	bl	8003d70 <HAL_PCD_EP_ClrStall>
 8015be8:	4603      	mov	r3, r0
 8015bea:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 8015bec:	7bfb      	ldrb	r3, [r7, #15]
 8015bee:	4618      	mov	r0, r3
 8015bf0:	f000 f8fc 	bl	8015dec <USBD_Get_USB_Status>
 8015bf4:	4603      	mov	r3, r0
 8015bf6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 8015bf8:	7bbb      	ldrb	r3, [r7, #14]
}
 8015bfa:	4618      	mov	r0, r3
 8015bfc:	3710      	adds	r7, #16
 8015bfe:	46bd      	mov	sp, r7
 8015c00:	bd80      	pop	{r7, pc}

08015c02 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015c02:	b480      	push	{r7}
 8015c04:	b085      	sub	sp, #20
 8015c06:	af00      	add	r7, sp, #0
 8015c08:	6078      	str	r0, [r7, #4]
 8015c0a:	460b      	mov	r3, r1
 8015c0c:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8015c0e:	687b      	ldr	r3, [r7, #4]
 8015c10:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015c14:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8015c16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8015c1a:	2b00      	cmp	r3, #0
 8015c1c:	da0b      	bge.n	8015c36 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8015c1e:	78fb      	ldrb	r3, [r7, #3]
 8015c20:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015c24:	68f9      	ldr	r1, [r7, #12]
 8015c26:	4613      	mov	r3, r2
 8015c28:	00db      	lsls	r3, r3, #3
 8015c2a:	1a9b      	subs	r3, r3, r2
 8015c2c:	009b      	lsls	r3, r3, #2
 8015c2e:	440b      	add	r3, r1
 8015c30:	333e      	adds	r3, #62	; 0x3e
 8015c32:	781b      	ldrb	r3, [r3, #0]
 8015c34:	e00b      	b.n	8015c4e <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8015c36:	78fb      	ldrb	r3, [r7, #3]
 8015c38:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015c3c:	68f9      	ldr	r1, [r7, #12]
 8015c3e:	4613      	mov	r3, r2
 8015c40:	00db      	lsls	r3, r3, #3
 8015c42:	1a9b      	subs	r3, r3, r2
 8015c44:	009b      	lsls	r3, r3, #2
 8015c46:	440b      	add	r3, r1
 8015c48:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8015c4c:	781b      	ldrb	r3, [r3, #0]
  }
}
 8015c4e:	4618      	mov	r0, r3
 8015c50:	3714      	adds	r7, #20
 8015c52:	46bd      	mov	sp, r7
 8015c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c58:	4770      	bx	lr

08015c5a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8015c5a:	b580      	push	{r7, lr}
 8015c5c:	b084      	sub	sp, #16
 8015c5e:	af00      	add	r7, sp, #0
 8015c60:	6078      	str	r0, [r7, #4]
 8015c62:	460b      	mov	r3, r1
 8015c64:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015c66:	2300      	movs	r3, #0
 8015c68:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015c6a:	2300      	movs	r3, #0
 8015c6c:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8015c6e:	687b      	ldr	r3, [r7, #4]
 8015c70:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015c74:	78fa      	ldrb	r2, [r7, #3]
 8015c76:	4611      	mov	r1, r2
 8015c78:	4618      	mov	r0, r3
 8015c7a:	f7ed fe91 	bl	80039a0 <HAL_PCD_SetAddress>
 8015c7e:	4603      	mov	r3, r0
 8015c80:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 8015c82:	7bfb      	ldrb	r3, [r7, #15]
 8015c84:	4618      	mov	r0, r3
 8015c86:	f000 f8b1 	bl	8015dec <USBD_Get_USB_Status>
 8015c8a:	4603      	mov	r3, r0
 8015c8c:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8015c8e:	7bbb      	ldrb	r3, [r7, #14]
}
 8015c90:	4618      	mov	r0, r3
 8015c92:	3710      	adds	r7, #16
 8015c94:	46bd      	mov	sp, r7
 8015c96:	bd80      	pop	{r7, pc}

08015c98 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8015c98:	b580      	push	{r7, lr}
 8015c9a:	b086      	sub	sp, #24
 8015c9c:	af00      	add	r7, sp, #0
 8015c9e:	60f8      	str	r0, [r7, #12]
 8015ca0:	607a      	str	r2, [r7, #4]
 8015ca2:	603b      	str	r3, [r7, #0]
 8015ca4:	460b      	mov	r3, r1
 8015ca6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015ca8:	2300      	movs	r3, #0
 8015caa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015cac:	2300      	movs	r3, #0
 8015cae:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8015cb0:	68fb      	ldr	r3, [r7, #12]
 8015cb2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015cb6:	7af9      	ldrb	r1, [r7, #11]
 8015cb8:	683b      	ldr	r3, [r7, #0]
 8015cba:	687a      	ldr	r2, [r7, #4]
 8015cbc:	f7ed ffaa 	bl	8003c14 <HAL_PCD_EP_Transmit>
 8015cc0:	4603      	mov	r3, r0
 8015cc2:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 8015cc4:	7dfb      	ldrb	r3, [r7, #23]
 8015cc6:	4618      	mov	r0, r3
 8015cc8:	f000 f890 	bl	8015dec <USBD_Get_USB_Status>
 8015ccc:	4603      	mov	r3, r0
 8015cce:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8015cd0:	7dbb      	ldrb	r3, [r7, #22]
}
 8015cd2:	4618      	mov	r0, r3
 8015cd4:	3718      	adds	r7, #24
 8015cd6:	46bd      	mov	sp, r7
 8015cd8:	bd80      	pop	{r7, pc}

08015cda <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8015cda:	b580      	push	{r7, lr}
 8015cdc:	b086      	sub	sp, #24
 8015cde:	af00      	add	r7, sp, #0
 8015ce0:	60f8      	str	r0, [r7, #12]
 8015ce2:	607a      	str	r2, [r7, #4]
 8015ce4:	603b      	str	r3, [r7, #0]
 8015ce6:	460b      	mov	r3, r1
 8015ce8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015cea:	2300      	movs	r3, #0
 8015cec:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015cee:	2300      	movs	r3, #0
 8015cf0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8015cf2:	68fb      	ldr	r3, [r7, #12]
 8015cf4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015cf8:	7af9      	ldrb	r1, [r7, #11]
 8015cfa:	683b      	ldr	r3, [r7, #0]
 8015cfc:	687a      	ldr	r2, [r7, #4]
 8015cfe:	f7ed ff26 	bl	8003b4e <HAL_PCD_EP_Receive>
 8015d02:	4603      	mov	r3, r0
 8015d04:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 8015d06:	7dfb      	ldrb	r3, [r7, #23]
 8015d08:	4618      	mov	r0, r3
 8015d0a:	f000 f86f 	bl	8015dec <USBD_Get_USB_Status>
 8015d0e:	4603      	mov	r3, r0
 8015d10:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 8015d12:	7dbb      	ldrb	r3, [r7, #22]
}
 8015d14:	4618      	mov	r0, r3
 8015d16:	3718      	adds	r7, #24
 8015d18:	46bd      	mov	sp, r7
 8015d1a:	bd80      	pop	{r7, pc}

08015d1c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015d1c:	b580      	push	{r7, lr}
 8015d1e:	b082      	sub	sp, #8
 8015d20:	af00      	add	r7, sp, #0
 8015d22:	6078      	str	r0, [r7, #4]
 8015d24:	460b      	mov	r3, r1
 8015d26:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8015d28:	687b      	ldr	r3, [r7, #4]
 8015d2a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015d2e:	78fa      	ldrb	r2, [r7, #3]
 8015d30:	4611      	mov	r1, r2
 8015d32:	4618      	mov	r0, r3
 8015d34:	f7ed ff56 	bl	8003be4 <HAL_PCD_EP_GetRxCount>
 8015d38:	4603      	mov	r3, r0
}
 8015d3a:	4618      	mov	r0, r3
 8015d3c:	3708      	adds	r7, #8
 8015d3e:	46bd      	mov	sp, r7
 8015d40:	bd80      	pop	{r7, pc}
	...

08015d44 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8015d44:	b580      	push	{r7, lr}
 8015d46:	b082      	sub	sp, #8
 8015d48:	af00      	add	r7, sp, #0
 8015d4a:	6078      	str	r0, [r7, #4]
 8015d4c:	460b      	mov	r3, r1
 8015d4e:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8015d50:	78fb      	ldrb	r3, [r7, #3]
 8015d52:	2b00      	cmp	r3, #0
 8015d54:	d002      	beq.n	8015d5c <HAL_PCDEx_LPM_Callback+0x18>
 8015d56:	2b01      	cmp	r3, #1
 8015d58:	d01f      	beq.n	8015d9a <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;   
  }
}
 8015d5a:	e03b      	b.n	8015dd4 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8015d5c:	687b      	ldr	r3, [r7, #4]
 8015d5e:	6a1b      	ldr	r3, [r3, #32]
 8015d60:	2b00      	cmp	r3, #0
 8015d62:	d007      	beq.n	8015d74 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8015d64:	f000 f83c 	bl	8015de0 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8015d68:	4b1c      	ldr	r3, [pc, #112]	; (8015ddc <HAL_PCDEx_LPM_Callback+0x98>)
 8015d6a:	691b      	ldr	r3, [r3, #16]
 8015d6c:	4a1b      	ldr	r2, [pc, #108]	; (8015ddc <HAL_PCDEx_LPM_Callback+0x98>)
 8015d6e:	f023 0306 	bic.w	r3, r3, #6
 8015d72:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8015d74:	687b      	ldr	r3, [r7, #4]
 8015d76:	681b      	ldr	r3, [r3, #0]
 8015d78:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8015d7c:	681b      	ldr	r3, [r3, #0]
 8015d7e:	687a      	ldr	r2, [r7, #4]
 8015d80:	6812      	ldr	r2, [r2, #0]
 8015d82:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8015d86:	f023 0301 	bic.w	r3, r3, #1
 8015d8a:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8015d8c:	687b      	ldr	r3, [r7, #4]
 8015d8e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8015d92:	4618      	mov	r0, r3
 8015d94:	f7f6 fb55 	bl	800c442 <USBD_LL_Resume>
    break;
 8015d98:	e01c      	b.n	8015dd4 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8015d9a:	687b      	ldr	r3, [r7, #4]
 8015d9c:	681b      	ldr	r3, [r3, #0]
 8015d9e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8015da2:	681b      	ldr	r3, [r3, #0]
 8015da4:	687a      	ldr	r2, [r7, #4]
 8015da6:	6812      	ldr	r2, [r2, #0]
 8015da8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8015dac:	f043 0301 	orr.w	r3, r3, #1
 8015db0:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8015db2:	687b      	ldr	r3, [r7, #4]
 8015db4:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8015db8:	4618      	mov	r0, r3
 8015dba:	f7f6 fb2d 	bl	800c418 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8015dbe:	687b      	ldr	r3, [r7, #4]
 8015dc0:	6a1b      	ldr	r3, [r3, #32]
 8015dc2:	2b00      	cmp	r3, #0
 8015dc4:	d005      	beq.n	8015dd2 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8015dc6:	4b05      	ldr	r3, [pc, #20]	; (8015ddc <HAL_PCDEx_LPM_Callback+0x98>)
 8015dc8:	691b      	ldr	r3, [r3, #16]
 8015dca:	4a04      	ldr	r2, [pc, #16]	; (8015ddc <HAL_PCDEx_LPM_Callback+0x98>)
 8015dcc:	f043 0306 	orr.w	r3, r3, #6
 8015dd0:	6113      	str	r3, [r2, #16]
    break;   
 8015dd2:	bf00      	nop
}
 8015dd4:	bf00      	nop
 8015dd6:	3708      	adds	r7, #8
 8015dd8:	46bd      	mov	sp, r7
 8015dda:	bd80      	pop	{r7, pc}
 8015ddc:	e000ed00 	.word	0xe000ed00

08015de0 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8015de0:	b580      	push	{r7, lr}
 8015de2:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8015de4:	f7ea fbf8 	bl	80005d8 <SystemClock_Config>
}
 8015de8:	bf00      	nop
 8015dea:	bd80      	pop	{r7, pc}

08015dec <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8015dec:	b480      	push	{r7}
 8015dee:	b085      	sub	sp, #20
 8015df0:	af00      	add	r7, sp, #0
 8015df2:	4603      	mov	r3, r0
 8015df4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015df6:	2300      	movs	r3, #0
 8015df8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8015dfa:	79fb      	ldrb	r3, [r7, #7]
 8015dfc:	2b03      	cmp	r3, #3
 8015dfe:	d817      	bhi.n	8015e30 <USBD_Get_USB_Status+0x44>
 8015e00:	a201      	add	r2, pc, #4	; (adr r2, 8015e08 <USBD_Get_USB_Status+0x1c>)
 8015e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015e06:	bf00      	nop
 8015e08:	08015e19 	.word	0x08015e19
 8015e0c:	08015e1f 	.word	0x08015e1f
 8015e10:	08015e25 	.word	0x08015e25
 8015e14:	08015e2b 	.word	0x08015e2b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8015e18:	2300      	movs	r3, #0
 8015e1a:	73fb      	strb	r3, [r7, #15]
    break;
 8015e1c:	e00b      	b.n	8015e36 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8015e1e:	2303      	movs	r3, #3
 8015e20:	73fb      	strb	r3, [r7, #15]
    break;
 8015e22:	e008      	b.n	8015e36 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8015e24:	2301      	movs	r3, #1
 8015e26:	73fb      	strb	r3, [r7, #15]
    break;
 8015e28:	e005      	b.n	8015e36 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8015e2a:	2303      	movs	r3, #3
 8015e2c:	73fb      	strb	r3, [r7, #15]
    break;
 8015e2e:	e002      	b.n	8015e36 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8015e30:	2303      	movs	r3, #3
 8015e32:	73fb      	strb	r3, [r7, #15]
    break;
 8015e34:	bf00      	nop
  }
  return usb_status;
 8015e36:	7bfb      	ldrb	r3, [r7, #15]
}
 8015e38:	4618      	mov	r0, r3
 8015e3a:	3714      	adds	r7, #20
 8015e3c:	46bd      	mov	sp, r7
 8015e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e42:	4770      	bx	lr

08015e44 <__errno>:
 8015e44:	4b01      	ldr	r3, [pc, #4]	; (8015e4c <__errno+0x8>)
 8015e46:	6818      	ldr	r0, [r3, #0]
 8015e48:	4770      	bx	lr
 8015e4a:	bf00      	nop
 8015e4c:	20000188 	.word	0x20000188

08015e50 <__libc_init_array>:
 8015e50:	b570      	push	{r4, r5, r6, lr}
 8015e52:	4e0d      	ldr	r6, [pc, #52]	; (8015e88 <__libc_init_array+0x38>)
 8015e54:	4c0d      	ldr	r4, [pc, #52]	; (8015e8c <__libc_init_array+0x3c>)
 8015e56:	1ba4      	subs	r4, r4, r6
 8015e58:	10a4      	asrs	r4, r4, #2
 8015e5a:	2500      	movs	r5, #0
 8015e5c:	42a5      	cmp	r5, r4
 8015e5e:	d109      	bne.n	8015e74 <__libc_init_array+0x24>
 8015e60:	4e0b      	ldr	r6, [pc, #44]	; (8015e90 <__libc_init_array+0x40>)
 8015e62:	4c0c      	ldr	r4, [pc, #48]	; (8015e94 <__libc_init_array+0x44>)
 8015e64:	f000 f8f6 	bl	8016054 <_init>
 8015e68:	1ba4      	subs	r4, r4, r6
 8015e6a:	10a4      	asrs	r4, r4, #2
 8015e6c:	2500      	movs	r5, #0
 8015e6e:	42a5      	cmp	r5, r4
 8015e70:	d105      	bne.n	8015e7e <__libc_init_array+0x2e>
 8015e72:	bd70      	pop	{r4, r5, r6, pc}
 8015e74:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8015e78:	4798      	blx	r3
 8015e7a:	3501      	adds	r5, #1
 8015e7c:	e7ee      	b.n	8015e5c <__libc_init_array+0xc>
 8015e7e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8015e82:	4798      	blx	r3
 8015e84:	3501      	adds	r5, #1
 8015e86:	e7f2      	b.n	8015e6e <__libc_init_array+0x1e>
 8015e88:	080165ec 	.word	0x080165ec
 8015e8c:	080165ec 	.word	0x080165ec
 8015e90:	080165ec 	.word	0x080165ec
 8015e94:	080165f0 	.word	0x080165f0

08015e98 <malloc>:
 8015e98:	4b02      	ldr	r3, [pc, #8]	; (8015ea4 <malloc+0xc>)
 8015e9a:	4601      	mov	r1, r0
 8015e9c:	6818      	ldr	r0, [r3, #0]
 8015e9e:	f000 b86d 	b.w	8015f7c <_malloc_r>
 8015ea2:	bf00      	nop
 8015ea4:	20000188 	.word	0x20000188

08015ea8 <free>:
 8015ea8:	4b02      	ldr	r3, [pc, #8]	; (8015eb4 <free+0xc>)
 8015eaa:	4601      	mov	r1, r0
 8015eac:	6818      	ldr	r0, [r3, #0]
 8015eae:	f000 b817 	b.w	8015ee0 <_free_r>
 8015eb2:	bf00      	nop
 8015eb4:	20000188 	.word	0x20000188

08015eb8 <memcpy>:
 8015eb8:	b510      	push	{r4, lr}
 8015eba:	1e43      	subs	r3, r0, #1
 8015ebc:	440a      	add	r2, r1
 8015ebe:	4291      	cmp	r1, r2
 8015ec0:	d100      	bne.n	8015ec4 <memcpy+0xc>
 8015ec2:	bd10      	pop	{r4, pc}
 8015ec4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015ec8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015ecc:	e7f7      	b.n	8015ebe <memcpy+0x6>

08015ece <memset>:
 8015ece:	4402      	add	r2, r0
 8015ed0:	4603      	mov	r3, r0
 8015ed2:	4293      	cmp	r3, r2
 8015ed4:	d100      	bne.n	8015ed8 <memset+0xa>
 8015ed6:	4770      	bx	lr
 8015ed8:	f803 1b01 	strb.w	r1, [r3], #1
 8015edc:	e7f9      	b.n	8015ed2 <memset+0x4>
	...

08015ee0 <_free_r>:
 8015ee0:	b538      	push	{r3, r4, r5, lr}
 8015ee2:	4605      	mov	r5, r0
 8015ee4:	2900      	cmp	r1, #0
 8015ee6:	d045      	beq.n	8015f74 <_free_r+0x94>
 8015ee8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015eec:	1f0c      	subs	r4, r1, #4
 8015eee:	2b00      	cmp	r3, #0
 8015ef0:	bfb8      	it	lt
 8015ef2:	18e4      	addlt	r4, r4, r3
 8015ef4:	f000 f8ac 	bl	8016050 <__malloc_lock>
 8015ef8:	4a1f      	ldr	r2, [pc, #124]	; (8015f78 <_free_r+0x98>)
 8015efa:	6813      	ldr	r3, [r2, #0]
 8015efc:	4610      	mov	r0, r2
 8015efe:	b933      	cbnz	r3, 8015f0e <_free_r+0x2e>
 8015f00:	6063      	str	r3, [r4, #4]
 8015f02:	6014      	str	r4, [r2, #0]
 8015f04:	4628      	mov	r0, r5
 8015f06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015f0a:	f000 b8a2 	b.w	8016052 <__malloc_unlock>
 8015f0e:	42a3      	cmp	r3, r4
 8015f10:	d90c      	bls.n	8015f2c <_free_r+0x4c>
 8015f12:	6821      	ldr	r1, [r4, #0]
 8015f14:	1862      	adds	r2, r4, r1
 8015f16:	4293      	cmp	r3, r2
 8015f18:	bf04      	itt	eq
 8015f1a:	681a      	ldreq	r2, [r3, #0]
 8015f1c:	685b      	ldreq	r3, [r3, #4]
 8015f1e:	6063      	str	r3, [r4, #4]
 8015f20:	bf04      	itt	eq
 8015f22:	1852      	addeq	r2, r2, r1
 8015f24:	6022      	streq	r2, [r4, #0]
 8015f26:	6004      	str	r4, [r0, #0]
 8015f28:	e7ec      	b.n	8015f04 <_free_r+0x24>
 8015f2a:	4613      	mov	r3, r2
 8015f2c:	685a      	ldr	r2, [r3, #4]
 8015f2e:	b10a      	cbz	r2, 8015f34 <_free_r+0x54>
 8015f30:	42a2      	cmp	r2, r4
 8015f32:	d9fa      	bls.n	8015f2a <_free_r+0x4a>
 8015f34:	6819      	ldr	r1, [r3, #0]
 8015f36:	1858      	adds	r0, r3, r1
 8015f38:	42a0      	cmp	r0, r4
 8015f3a:	d10b      	bne.n	8015f54 <_free_r+0x74>
 8015f3c:	6820      	ldr	r0, [r4, #0]
 8015f3e:	4401      	add	r1, r0
 8015f40:	1858      	adds	r0, r3, r1
 8015f42:	4282      	cmp	r2, r0
 8015f44:	6019      	str	r1, [r3, #0]
 8015f46:	d1dd      	bne.n	8015f04 <_free_r+0x24>
 8015f48:	6810      	ldr	r0, [r2, #0]
 8015f4a:	6852      	ldr	r2, [r2, #4]
 8015f4c:	605a      	str	r2, [r3, #4]
 8015f4e:	4401      	add	r1, r0
 8015f50:	6019      	str	r1, [r3, #0]
 8015f52:	e7d7      	b.n	8015f04 <_free_r+0x24>
 8015f54:	d902      	bls.n	8015f5c <_free_r+0x7c>
 8015f56:	230c      	movs	r3, #12
 8015f58:	602b      	str	r3, [r5, #0]
 8015f5a:	e7d3      	b.n	8015f04 <_free_r+0x24>
 8015f5c:	6820      	ldr	r0, [r4, #0]
 8015f5e:	1821      	adds	r1, r4, r0
 8015f60:	428a      	cmp	r2, r1
 8015f62:	bf04      	itt	eq
 8015f64:	6811      	ldreq	r1, [r2, #0]
 8015f66:	6852      	ldreq	r2, [r2, #4]
 8015f68:	6062      	str	r2, [r4, #4]
 8015f6a:	bf04      	itt	eq
 8015f6c:	1809      	addeq	r1, r1, r0
 8015f6e:	6021      	streq	r1, [r4, #0]
 8015f70:	605c      	str	r4, [r3, #4]
 8015f72:	e7c7      	b.n	8015f04 <_free_r+0x24>
 8015f74:	bd38      	pop	{r3, r4, r5, pc}
 8015f76:	bf00      	nop
 8015f78:	20004bd8 	.word	0x20004bd8

08015f7c <_malloc_r>:
 8015f7c:	b570      	push	{r4, r5, r6, lr}
 8015f7e:	1ccd      	adds	r5, r1, #3
 8015f80:	f025 0503 	bic.w	r5, r5, #3
 8015f84:	3508      	adds	r5, #8
 8015f86:	2d0c      	cmp	r5, #12
 8015f88:	bf38      	it	cc
 8015f8a:	250c      	movcc	r5, #12
 8015f8c:	2d00      	cmp	r5, #0
 8015f8e:	4606      	mov	r6, r0
 8015f90:	db01      	blt.n	8015f96 <_malloc_r+0x1a>
 8015f92:	42a9      	cmp	r1, r5
 8015f94:	d903      	bls.n	8015f9e <_malloc_r+0x22>
 8015f96:	230c      	movs	r3, #12
 8015f98:	6033      	str	r3, [r6, #0]
 8015f9a:	2000      	movs	r0, #0
 8015f9c:	bd70      	pop	{r4, r5, r6, pc}
 8015f9e:	f000 f857 	bl	8016050 <__malloc_lock>
 8015fa2:	4a21      	ldr	r2, [pc, #132]	; (8016028 <_malloc_r+0xac>)
 8015fa4:	6814      	ldr	r4, [r2, #0]
 8015fa6:	4621      	mov	r1, r4
 8015fa8:	b991      	cbnz	r1, 8015fd0 <_malloc_r+0x54>
 8015faa:	4c20      	ldr	r4, [pc, #128]	; (801602c <_malloc_r+0xb0>)
 8015fac:	6823      	ldr	r3, [r4, #0]
 8015fae:	b91b      	cbnz	r3, 8015fb8 <_malloc_r+0x3c>
 8015fb0:	4630      	mov	r0, r6
 8015fb2:	f000 f83d 	bl	8016030 <_sbrk_r>
 8015fb6:	6020      	str	r0, [r4, #0]
 8015fb8:	4629      	mov	r1, r5
 8015fba:	4630      	mov	r0, r6
 8015fbc:	f000 f838 	bl	8016030 <_sbrk_r>
 8015fc0:	1c43      	adds	r3, r0, #1
 8015fc2:	d124      	bne.n	801600e <_malloc_r+0x92>
 8015fc4:	230c      	movs	r3, #12
 8015fc6:	6033      	str	r3, [r6, #0]
 8015fc8:	4630      	mov	r0, r6
 8015fca:	f000 f842 	bl	8016052 <__malloc_unlock>
 8015fce:	e7e4      	b.n	8015f9a <_malloc_r+0x1e>
 8015fd0:	680b      	ldr	r3, [r1, #0]
 8015fd2:	1b5b      	subs	r3, r3, r5
 8015fd4:	d418      	bmi.n	8016008 <_malloc_r+0x8c>
 8015fd6:	2b0b      	cmp	r3, #11
 8015fd8:	d90f      	bls.n	8015ffa <_malloc_r+0x7e>
 8015fda:	600b      	str	r3, [r1, #0]
 8015fdc:	50cd      	str	r5, [r1, r3]
 8015fde:	18cc      	adds	r4, r1, r3
 8015fe0:	4630      	mov	r0, r6
 8015fe2:	f000 f836 	bl	8016052 <__malloc_unlock>
 8015fe6:	f104 000b 	add.w	r0, r4, #11
 8015fea:	1d23      	adds	r3, r4, #4
 8015fec:	f020 0007 	bic.w	r0, r0, #7
 8015ff0:	1ac3      	subs	r3, r0, r3
 8015ff2:	d0d3      	beq.n	8015f9c <_malloc_r+0x20>
 8015ff4:	425a      	negs	r2, r3
 8015ff6:	50e2      	str	r2, [r4, r3]
 8015ff8:	e7d0      	b.n	8015f9c <_malloc_r+0x20>
 8015ffa:	428c      	cmp	r4, r1
 8015ffc:	684b      	ldr	r3, [r1, #4]
 8015ffe:	bf16      	itet	ne
 8016000:	6063      	strne	r3, [r4, #4]
 8016002:	6013      	streq	r3, [r2, #0]
 8016004:	460c      	movne	r4, r1
 8016006:	e7eb      	b.n	8015fe0 <_malloc_r+0x64>
 8016008:	460c      	mov	r4, r1
 801600a:	6849      	ldr	r1, [r1, #4]
 801600c:	e7cc      	b.n	8015fa8 <_malloc_r+0x2c>
 801600e:	1cc4      	adds	r4, r0, #3
 8016010:	f024 0403 	bic.w	r4, r4, #3
 8016014:	42a0      	cmp	r0, r4
 8016016:	d005      	beq.n	8016024 <_malloc_r+0xa8>
 8016018:	1a21      	subs	r1, r4, r0
 801601a:	4630      	mov	r0, r6
 801601c:	f000 f808 	bl	8016030 <_sbrk_r>
 8016020:	3001      	adds	r0, #1
 8016022:	d0cf      	beq.n	8015fc4 <_malloc_r+0x48>
 8016024:	6025      	str	r5, [r4, #0]
 8016026:	e7db      	b.n	8015fe0 <_malloc_r+0x64>
 8016028:	20004bd8 	.word	0x20004bd8
 801602c:	20004bdc 	.word	0x20004bdc

08016030 <_sbrk_r>:
 8016030:	b538      	push	{r3, r4, r5, lr}
 8016032:	4c06      	ldr	r4, [pc, #24]	; (801604c <_sbrk_r+0x1c>)
 8016034:	2300      	movs	r3, #0
 8016036:	4605      	mov	r5, r0
 8016038:	4608      	mov	r0, r1
 801603a:	6023      	str	r3, [r4, #0]
 801603c:	f7eb f9c6 	bl	80013cc <_sbrk>
 8016040:	1c43      	adds	r3, r0, #1
 8016042:	d102      	bne.n	801604a <_sbrk_r+0x1a>
 8016044:	6823      	ldr	r3, [r4, #0]
 8016046:	b103      	cbz	r3, 801604a <_sbrk_r+0x1a>
 8016048:	602b      	str	r3, [r5, #0]
 801604a:	bd38      	pop	{r3, r4, r5, pc}
 801604c:	20009cdc 	.word	0x20009cdc

08016050 <__malloc_lock>:
 8016050:	4770      	bx	lr

08016052 <__malloc_unlock>:
 8016052:	4770      	bx	lr

08016054 <_init>:
 8016054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016056:	bf00      	nop
 8016058:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801605a:	bc08      	pop	{r3}
 801605c:	469e      	mov	lr, r3
 801605e:	4770      	bx	lr

08016060 <_fini>:
 8016060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016062:	bf00      	nop
 8016064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016066:	bc08      	pop	{r3}
 8016068:	469e      	mov	lr, r3
 801606a:	4770      	bx	lr
